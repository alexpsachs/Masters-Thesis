{
    "maxkfranz": "initially done; needs revising as worked on\n. initially done; needs revising as worked on\n. not possible if we want intersections for clipping edges\n. Use automove: https://github.com/cytoscape/cytoscape.js-automove. Won't fix Webkit bug :(\n. Added\n. leaving for later\n. On overflow or underflow, the coordinate system will be broken.\n. Add tests based on documentation\n. Revision: events should always be triggered as they happen; only batch notifications.\n. No batching needed now \nHandling all code for collections/elements as generic n-sized collections fixes this automatically :)\n. Also make sure the API actually matches the documentation.  Some minor things may be missing.\n. Writing individual tickets\n. Not much we can do here.  Wait for canvas\n. Fixed :)\n. Doesn't really work for SVG :(\n. Not a priority for SVG\n. Done!\n. Layout done\n. op can be >, >=, =, etc\nn can be some number\n. Kind of messy; may not be worth adding\n. http://api.jquery.com/on/\n. Added but require testing\n. Removing milestone; won't be documented in initial release\n. Done\n. Determine what's the bottleneck\n. It seems the bottleneck is recreating the elements.\nDo a simple check:  If we don't need to recreate a node (i.e. same shape), then don't.  If a node isn't recreated or its size hasn't changed, then don't recreate connected edges.\n. The really expensive part is recreating the edges.\n. Seems faster now, but may have more improvements in future.\n. Not going to happen; let's wait for canvas\n. Done\n. I don't think this will work, unless there's something else missing here.\n. @Sattvic http://help.github.com/articles/notifications\n. Maybe Christian has some ideas of integrated UI tests?\n. Added a bunch; will add more on as-needed basis\n. Looks good for now\n. Done for core and element/collection APIs.  \n(1) I don't think this can be easily done for visual styles, since the styles are key-value pairs.  We could consolidate to American spellings --- that would fix setting --- but that would mean lookups on English spellings wouldn't work.\n(2) Another alternative is to do preprocessing on style related functions, but this would either fail when returning the whole object or it would return duplicates.\n(3) We can keep the English aliases but without documenting them.  That way, they're a happy accident if they work for someone but we don't guarantee that English spellings work everywhere.\n(4) Another option is to remove style functions that return the whole object.  That means eles.style() and eles.bypass() wouldn't work without any arguments.  Then we can do (2) without issue: Duplicates don't matter anymore.\n. Closing this ticket.  Functions have English and American spellings, though we will only document American spellings.  In other words, the English spellings for functions are just an undocumented convenience.\nThe renderer style object requires American spellings.  We will not correct for English spellings here, since it is too complex.\n. Makefile much better after refactoring\n. @chrtannus Added and worked around batching notifications by simply adding a \"draw\" message to the renderer, causing the specified elements in the notification to be redrawn (style & position).\nIt's simpler than having to process and merge messages.  Merging may also cause jittering or shaking, depending on how fast merge processing happens.\nWhat do you think?  Is the current solution good enough?\n. Can't reproduce anymore; closing as fixed\n. http://cytoscape.github.io/cytoscape.js/#extensions/functions\n. Might requestAnimationFrame be a more efficient option than setInterval?\n. Zoom back and forth from min/max to reproduce\n. I don't think there's much we can do here.  Best to just wait for the canvas implementation.\n. Looks OK now; closing\n. Our user base will need the copying; closing\n. Removed logging messages throughout the codebase and errors are generated via jQuery.error() only for fatal exceptions.\n. Problem: What if while the animation is going, the viewport changes?\nDo you \n(A) use the initial model position\nor\n(B) update as you go?\n. (A) is nice and consistent\n(B) could make more sense in the client developer's mental model\n. And now the code is nice :)\n. First step complete: CyElements and CyCollections keep an internal reference to a CyCore\nNext step: Aggregate CyCollection references in CyCollection\nWhat about CySelectors?\n. Simple solution: When adding an element and the parameter is a collection/element, always create new internal CyElements rather than just taking the passed parameter reference.\n. Simple solution above complete, but testing is needed to make sure this is all that is needed.\n. Let's just do #93\n. Wouldn't work on that clone, since it was in the middle of some major refactoring.\nRefactoring done now, and Makefile revised.\n. Closing; Makefile was meant to be broken in latest trunk until refactoring was complete.\nIt's fixed now, so you can either\n(1) update and make all or\n(2) clone a previous checkin before refactoring started (read checkins) and make all.\n. See #296 for bundled edges\n. Thanks for filing the issue.\nThere are a few options here, and we should probably have all three of them:\n(1) Disable selection altogether like cy.panning() and cy.zooming() -- i.e. we'd have cy.selecting().\n(2) If listeners for select return false, then don't actually select the element.\n(3) Add options to the renderer to toggle whether panning, zooming, and selecting are allowed via untargeted user events (i.e. mouse wheel to zoom, mousedown and drag to select, mousedown wait and drag to pan).\n(3) is probably what you're looking for, but we should also have the others to have finer-grained control.\n. (3) is checked in\nI'm not sure about (1) and (2) yet.  I think we probably shouldn't have (1) but we could have ele.selectify(), ele.unselectify(), and ele.selectable().\n. Also added ele.selectify() et al\nThere's a new snapshot build with all these updates.\n. This may not actually give us any speed improvements\nhttps://docs.google.com/spreadsheet/ccc?key=0Avnke0Xj5rgddDRaaUJZRkNLM0tiVURUc0JiWF9lOVE&hl=en#gid=4\n. What may be more worthwhile is including performance tests in our unit tests for\n- adding new elements sequentially\n- loading a large json graph\n- searching for elements with a selector / filter function\n. This may be worthwhile eventually, since the pool of elements becomes slow for add and remove operations when the number of elements becomes large:  Adding 100,000 elements to the graph can take about 6-7 seconds.\n. Browser support for databases is still spotty, and now with WebSQL being dropped, it doesn't look like this will be possible without something like this https://github.com/kripken/sql.js\n. Not practical for synchronous operations; closing\n. Nothing in the event, so we can't do anything :(\n. http://coding.smashingmagazine.com/2012/02/22/web-drawing-throwdown-paper-processing-raphael/\n. Libraries have been found to add significant computational overhead in addition to a not insignificant number of kB.  Thus, it does not make sense to use a library for drawing.  We should use canvas or WebGL directly.\nWebGL\n- complicated API\n  - requires shaders to get good performance (requires a dedicated resource for renderer development)\n  - requires a lot of code to do simple drawing operations\n  - our code will have more kB\n- performance described as \"one step ahead of canvas\"\n- doesn't currently work on touch devices; probably will have support (soon?)\n- future uncertain (non-W3C standard) -- Microsoft have refused to support it etc.\n- won't work without a compatible graphics card (Chrome has a software renderer, but it's unsure whether other browsers will follow suit)\nCanvas\n- simple API\n  - other devs can contribute\n  - operations are high level so we can focus on behaviour\n  - our code will have less kB\n- slows down at 10,000 nodes and 20,000 edges (approx.?)\n- works on touch devices\n- lots of vendors -- including Microsoft -- have pledged support for canvas\n  - a lot of work is going into making canvas faster in desktop and mobile browsers\nIn my opinion, we should go with canvas.  Performance will constantly improve as browsers improve, and canvas has a guarantee of compatibility whereas we would be making a risky bet on WebGL.  Canvas will give us significantly better performance than SVG, anyway.\nCan we afford the development time required to maintain a WebGL renderer?   It will require a resource well-versed in OpenGL/WebGL who can devote at least one day of work a week, most likely.\nWebGL will also make it much more difficult for other people to contribute to the project.  Considering that one of the motivations for the HTML5 version is to make it much easier for external resources to contribute to the project, I would advise against WebGL.\n. Please refer to the performance notes in the docs.  Performance is mostly based on your code and the options you choose.\n. I wouldn't take those numbers too literally.  They correspond to early estimates only relevant to a particular part of rendering, and make a bunch of assumptions.  Of course, performance also will differ depending on machine, OS, browser, etc.\nThere is no way around creating an Element, and the Collection shouldn't add much overhead.  However, you could experience other, rendering-related issues if you add many elements in many calls.  You will likely have better perceived performance by adding multiple elements in one call rather than several in a row.\nThere are batch APIs in 2.3 that make it easier to make lots of little calls together in groups as though they were a single \"operation\".  There are also a lot of unrelated changes that provide overall improved performance.\nFinally, please create new Github issues for separate questions/tickets.  If you have an issue specific to your particular usecase, it's better to have a separate starting point to isolate the issue.\nThanks for your feedback!\n. Also need a mechanism to filter operations that we don't care about\n- recording in undo/redo lists\n- sending to the server via socket.io\n. Need a way to hook into all events for the core and the elements.\n. Since we're adding more than one function for the functionality of a single extension, we should probably consider namespacing the functions, like cy.background().  We'd then have cy.op.undo(), cy.op.undoable(), and so on.\n. I've thought about this, and it's better for the dev to do this on the app-level model, using something like Backbone.  Thinking of Cytoscape Web as a view of some higher level model makes it such that it doesn't make sense to have this sort of undo/redo.\n. Functions added, but need selector support\n. Selectors added\n. Added to SVG renderer.  Please download the latest prerelease build.\n. This is done in the renderer; defer to canvas\n. @yuedong2 Let's ignore taphold for now because it's more complicated and not all that useful.  There are some extra drop downs on the debug page to make testing this a lot easier under \"Event binding\" and \"Core binding\". \n. You should separate out the other functionality into functions like\n- drawElement\n  - drawEdge\n  - drawNode\n  - drawLabel\n- updateElementStyle\netc\n. Performance notes re. text drawing http://simonsarris.com/blog/322-canvas-drawtext-considered-harmful\n. How to make edge rendering approx. 10x faster\nhttp://simonsarris.com/blog/427-increasing-performance-by-caching-paths-on-canvas\n. Memory is an important consideration, but it's a blocking factor only if memory usage causes the browser to crash.  Speed is a more important concern -- on all devices -- especially mobile where things tend to be slower.\n. http://cytoscape.github.com/cytoscape.js/#event-types/user-input-device-events\nIf you can think of any more user events we should be proxying, feel free to add them.  Adding them doesn't impact the API, and we don't even have to document them all right away.  The list in the link for user events should be the minimum, though.\n. We might defer fixing this by just waiting for the new renderer\n. Does it not have native text (font) drawing support with 2D graphics?\nI'm not concerned about page load as much, because your scripts are blocking.  The page doesn't render until the script is done.  Normally, the page would render, Cytoscape Web waits until document.ready, and then the renderer is initialised and elements loaded.\nThe client can show a loader on the cy div until it's loaded.\nAn alternative:  The renderer could be a webworker, since we're already using a similar messaging system.  That way, the renderer would never block the UI thread when it's doing calculations and so on.\n. Rather than divs, I'd use SVG to render text if we want to go that way.  I'd stick to using the 2D canvas context to render text so things are more together.\n. Rendering as textures will most likely be more expensive than just drawing the fonts directly using the 2D canvas context and its native font rendering methods.\n. Here's some code you can copy to test things out:\nhttp://www.spoonofdeath.com/delph/webgltext.html\n. I'd forgo that and just use a 2D canvas on top of the WebGL one.\n. Firefox doesn't report cursor position nicely.\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=69787\nThere's a function called offsetFix in the renderer to remedy this, but it looks as though the issue is even more inconsistent on Linux builds of Firefox.\nThere's not much that can be done unless the conditions that create the issue for you are identified.  It works fine for me on Firefox 12 on Mac OS.\n. Try the latest prerelease.  I can't think of anything else to fix this except for user agent sniffing -- a bad idea.  Since it's not an issue on FF on Mac, it may have everything to do with the CSS of your Cytoscape Web div.  If the dimensions can not be determined via jQuery's .offset(), then it won't work.\nThe 30px is not coincidental.  It's probably something like the distance of the Cytoscape Web div from the top of the page.\n. It's definitely an issue on your Firefox build on whatever distro you're using.  If it's specific to that distro's built package for Firefox and no other, then it's probably an issue with their build process or how your OS is reporting mouse coords to FF.  I can't do much about that other than adding user agent sniffing and adding a hack to try to fix things, but I'm very much against that sort of solution.\nI don't have an Ubuntu machine, so I can't debug the issue.  If you could identify the cause of the issue -- or even fix it -- I'll make sure the fix gets put in the trunk.\n. Well, the FF fix is a bit more robust now, so at least this wasn't unproductive.\nUI in Linux is spotty at best, so I wouldn't be surprised if this issue was related to an issue in X, Gnome, or your FF package.\nIn future, you may want to disable caching in your browser while debugging your webapps.  Nice web stacks handle things so clients don't get stale files, but it's still often an issue while debugging locally.\n. Looks done to me\n. TODO determine if verbatim use of existing animation json syntax could be reused w/o issue\n. Maybe reconsider this later.  As is stands, there could be negative consequences to performance etc\n. We shouldn't have the selectors in a map, even though it looks really, really nice -- and a lot like CSS.  The EMCAScript specification says that the order is undefined, even though the browsers are consistent.\n. That means we can't have\njs\nvar style = {\n  selectors: {\n    \"node\": { ... }\n    \"node:selected\": { ... }\n  }\n};\nbecause we can't guarantee the order a for in loop iterates over the properties.\nWe need to have the selectors as an array to preserve order, e.g. style.selectors = [ ... ].  What format should we use inside the array?\nSimple idea (but it's not very nice):\njs\nvar style = {\n  selectors: [\n    [\"node\",  { ... }]\n    [\"node:selected\", { ... }]\n  ]\n};\nThat way style.selectors[i][0] is always the selector and style.selectors[i][1] is the set of properties.  Any better ideas?\n. I wouldn't do the first option, as it adds a lot of parsing for what should be a relatively simple task.\nThe second options is not possible.  The style is specified as a plain object in the init options.\n. If we can't do it like CSS, then let's do it like jQuery:\n``` js\n// to create a new style\ncytoscape.style()\n  .selector(\"node\")\n    .css({\n      color: \"red\",\n      borderWidth: 2\n    })\n    .css(\"background-color\", \"yellow\")\n  .selector(\"node:selected\")\n    .css(\"color\", \"blue\")\n;\n```\nAnd then we replace the eles.bypass() function with the name eles.css() to match.\n. Replacing eles.bypass() is not possible on its own, since .css() in jQuery returns rendered styles.  So, it would be more like replacing the eles.style() function.\nWould that mean that eles.bypass() would then remain as is?  Or would eles.bypass() even be necessary at that point?  The bypass may just be an internal property.\n. That means we would also need a eles.removeCss() function, or we could allow removing via eles.css(prop, null).\n. Actually, the jQuery way is eles.css(prop, \"\"), but I think we should support both.  Why not?\n. For passthrough mappers: attr(name) from CSS becomes data(name) since we don't have attributes\nFor discrete mappers, just use selectors.\nFor continuous mappers: We should have something like the format of passthrough mappers.  Maybe mapData(name, min, max, mappedMin, mappedMax), e.g. mapData(weight, 0, 100, grey, blue) would map data field weight with a scale on [0, 100] with 0 being grey and 1 being blue\n. It's safer, since we're storing the elements in two maps by ID ({ \"id1\": ... }.  There, it's not so bad, since the IDs will be type coerced to strings, anyway.\nI'm not sure if it will impact selectors.  If we don't enforce strings, the selectors may have to use always use == instead of ===.\nI'll try to test this so that all works well with integer IDs, but I'll have to address it after the current refactoring I'm doing -- which is quite extensive.  Until then, I suggest you use one of the prior prerelease builds -- I'll make an announcement when the refactoring is done, because it will make the library a lot nicer (e.g. you'll be able to also use it headless as a commonjs module on the server side with node.js, for example).\n. If you want to use numerical IDs, then you can so long as you specify them as strings.\n. That's right, but the website isn't useful anyway until the current refactoring has been finished and the documentation updated.\n. It's also been renamed to cytoscape.js, and the revised group will be\nannounced in conjunction with everything else.\nOn Tue, Jun 19, 2012 at 12:10 PM, B. Arman Aksoy <\nreply@reply.github.com\n\nwrote:\nseems like we don't have the cytoscapeweb google group anymore :\\ Do we\nhave an alternative?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cytoscape/cytoscape.js/issues/125#issuecomment-6429487\n. Looks to be gone\n. @yuedong2 Please try to not use jQuery in your renderer code so that we can more easily accomplish this task later.  Assume standard compliant API in the browser -- even IE should have this on versions that support canvas, anyway.  If you need help with this, just let me know.  It shouldn't take too long if we both go over what code has to change.\n. jQuery dependency is gone but need to make node.js module.\n. We need label dimensions and so on for the \"fit to viewport\" feature.  The core has to make assumptions on how to calculate the BB for labels and edges, because it doesn't actually draw anything.\n\nThe core now defines the visual style contract with the renderer, so the style has to be used to infer the BB.  For nodes, this is easy, just use height and width with position.  However, it's harder for edges and labels.\nLabels can be simulated with an off-screen div that replicates the font metrics of the label.  The BB for edges is not as simple, especially if we want to support different styles (e.g. bezier or bundled).  We'll need a contract for exactly how edges are drawn.\nIdeas:\n- A style property for how edges are rendered : curve-style with possible values bundled and bezier (default)\n- A function in the collection API for getting an edge's draw index (maybe .parallelIndex()) for its set of parallel edges\n- A bounding box function for elements (in addition to the core function)\nWith these things in place, it would be possible to have a well defined contract for exactly how edges are drawn.  This would allow for the bounding box function to be more easily written and more reliable.\n. NB: You'd be able to use ele.parallelIndex() to calculate the control points for beziers and the order of edges in the bundle.\n. That would be OK, but it's better for the core not to be dependent on the renderer.  It's also more efficient for large numbers of elements, since it would avoid function call overhead for each element: The core can just read ele._private.style.\nWe can have another function called ele.parallelSize() -- it would be potentially cheaper than ele.parallelEdges().size().\n. Exactly.  Those extra features would allow for the contract between the renderer and the core to be well defined, thereby explicitly specifying how edges should be drawn.\n. Edges should always point towards the centres of its nodes.  If we introduce a further style property, say control-point-distance, that indicates the distance to increase the control point away from the line joining the two nodes' centre points, then the issue should be solved.  This assumes that the control point distance is independent of the distance between the nodes (as it stands in the SVG renderer and in Cytoscape Web Flash).\nAlternatively, we could move calculations like this to the new style class, e.g. cy.style().calculateEdgeControlPoint(edge) and so on.  Those kind of functions would be reused by different rendering technologies, anyway.  That would make it easier to have a future WebGL renderer.\n. Actually, the BB calculations should be in the $$.Style class, as well.  The functions in the collections or core can just use that function.\nWe can also put functions that calculate intersections and other things that would be reused by different renderers in $$.Style.\n. OK.  We'll coordinate adding those function to $$.Style tomorrow.\n. I've added a function in $$.Style that you can find in style.js called calculateControlPoints.  It's stubbed out with the data you'll need, but you'll need to finish things up and make sure it works.  You can access this function via cy.style().calculateControlPoints().  You should pass in a full set of parallel edges to the function, and it will return to you the control points of each each index by edge ID.\nI've also added a math.js file where you can add calculations like boxInBezierVicinity().  You can access the functions you add there like $$.math.boxInBezierVicinity().  I suggest you make the API a bit more legible so the code is easier to read, i.e. \n``` js\nboxInBezierVicinity( box, bezier, tolerance )\n// where\nbox = {\n  x1: 0,\n  y2: ...\n}\n// and so on\n```\n. That's another possibility.  The easy way to do what you've described is to build on top of the previous function that uses a set of parallel edges, since you do need that set, anyway.\n. TODO add option to include text labels in the bounding box calculation.\nTo do this, update these functions with the math for the option of including the label:\n- eles.outerWidth(), eles.outerHeight(), and rendered variants\n- cy.boundingBox()\n. TODO document function\n. You don't need to worry about state.  That's taken care of for you.  I'll add the index function tomorrow.\n. We don't currently support any kind of :hover-like selector.  That would be done with something like\njs\ncy.on('mouseover', 'node', function(evt){\n  this.addClass('hover');\n});\nIf we do allow for the :hover selector in future, the core can listen for mouseover and mouseout, and recalculate style as needed.\n. Should be OK now with new functions; closing.\n. This is actually a problem with the current SVG renderer, so let's leave this for now.  We can readdress this with the canvas renderer if it proves to be an issue in future.\n. You should convert the file on the server side, ideally.  If that's not practical, then you can load the XML file via AJAX to the client side. Then, you can parse the XML with a XML parsing library in JS (SAX-JS https://github.com/isaacs/sax-js; or even jQuery).  Once you've parsed the XML, you can build the JS object that Cytoscape.js requires.\nThis functionality will probably not be added to Cytoscape.js itself, because\n(1) it's outside the scope of the project -- it should be a series of separate graph-file-to-cytoscape.js libraries -- and\n(2) it's slow to do this on the client side -- so I'm of the opinion that the client side conversion approach should not be advocated (i.e. by adding that functionality to Cytoscape.js itself).\n. That's a really nice UI feature, but it doesn't fit well with the low-level nature of the API.  What you're describing sounds like a good idea for a core extension.\n. It also comes down to selecting a good initial visual style based on the order of magnitude of the size of your graph.  If you know the graph will be large, then you should set your font size, node size, et al to an appropriate, smaller size.\n. You already can do this.  Just specify colour values instead of numerical values.\n. You've probably\n- not specified a valid layout, or\n- played around with the dimensions of the cytoscape.js div such that it had zero area when the layout was run.\n. This would mean using a separate canvas instance for the selection box.  I don't think the description was clear enough initially for others.\n. It looks like canvas just needs a URL to draw the image, so I'll create a property that uses just a URL.\n. Do we have basic support, i.e. for centred images without the additional properties?  Thanks :)\n. Closing this issue; we can create new ones for additional background image properties as needed\n. Bit more testing needed; Yue will close at that time\n. @yuedong2 Let's discuss this once you've finished your high-priority tickets.\n. We support SVG background images and image positioning.  This isn't needed\n. Please try this ticket once you've finished the enhancement we discussed by email.\nThis is the code from the SVG renderer that you could more or less use verbatim to reproduce the behaviour for pinch-to-zoom and panning by dragging your finger etc.:\n``` js\nSvgRenderer.prototype.makeBackgroundInteractive = function(){\n    var self = this;\n\n    var svgDomElement = self.svgRoot;\n    var panDelay = self.options.selectionToPanDelay;\n    var mover = false;\n    var moverThenMoved = false;\n    var mmovedScreenPos = {\n        x: null,\n        y: null\n    };\n    var mmovedScreenTolerance = 0;\n\n    self.shiftDown = false;\n    $(window).bind(\"keydown keyup\", function(e){\n        self.shiftDown = e.shiftKey;\n    });\n\n    function backgroundIsTarget(e){\n        return e.target == svgDomElement \n            || $(e.target).parents(\"g:last\")[0] == self.edgesGroup\n            || $(e.target)[0] == self.svgBg;\n    }\n\n    $(window).bind(\"blur\", function(){\n        mover = false;\n        moverThenMoved = false;\n    }).bind(\"mousemove\", function(e){\n        var diffScreenPos = false;\n        if( Math.abs(e.screenX - mmovedScreenPos.x) > mmovedScreenTolerance\n        || Math.abs(e.screenY - mmovedScreenPos.y) > mmovedScreenTolerance ){\n            diffScreenPos = true;\n        }\n\n        mmovedScreenPos = {\n            x: e.screenX,\n            y: e.screenY\n        };\n\n        if( mover && diffScreenPos ){\n            moverThenMoved = true;\n        }\n    });\n\n    $(svgDomElement).bind(\"mousedown\", function(mousedownEvent){\n\n        // ignore right clicks\n        if( mousedownEvent.button != 0 ){\n            return;\n        }\n\n        if( backgroundIsTarget(mousedownEvent) ){\n\n            mousedownEvent.preventDefault();\n\n            self.offsetFix(mousedownEvent);\n\n            var selectionSquare = null;\n            var selectionBounds = {};\n\n            var panning = true;\n            var selecting = true;\n\n            if( !self.options.dragToSelect ){\n                selecting = false;\n            }\n\n            if( !self.options.dragToPan ){\n                panning = false;\n            }\n\n            if( panning && selecting ){\n                panning = false;\n                selecting = true;\n            }\n\n            var originX = mousedownEvent.pageX;\n            var originY = mousedownEvent.pageY;\n\n            var selectOriginX = mousedownEvent.offsetX;\n            var selectOriginY = mousedownEvent.offsetY;\n            var selectDx = 0;\n            var selectDy = 0;\n\n            var _setPanCursor = false;\n            function setPanCursor(){\n                var coreStyle = self.cy.style().core();\n                if( _setPanCursor ){ return; }\n\n                _setPanCursor = true;\n                self.svg.change(svgDomElement, {\n                    cursor: cursor( coreStyle[\"panning-cursor\"].value )\n                });\n            }\n\n            if( self.options.dragToPan ){\n                var panDelayTimeout = setTimeout(function(){\n                    if( !self.cy.panningEnabled() ){\n                        return;\n                    }\n\n                    panning = true;\n                    selecting = false;\n\n                }, panDelay);\n            }\n\n            var dragHandler = function(dragEvent){\n                clearTimeout(panDelayTimeout);\n                var coreStyle = self.cy.style().core();\n\n                var dx = dragEvent.pageX - originX;\n                var dy = dragEvent.pageY - originY;\n\n                // new origin each event\n                originX = dragEvent.pageX;\n                originY = dragEvent.pageY;\n\n                selectDx += dx;\n                selectDy += dy;\n\n                if( panning ){  \n                    var newPan = {\n                        x: self.translation.x + dx,\n                        y: self.translation.y + dy\n                    };\n\n                    setPanCursor();\n\n                    self.pan(newPan);\n                }\n\n                if( selecting ){\n                    if( selectionSquare == null ){\n                        selectionSquare = self.svg.rect(selectOriginX, selectOriginY, 0, 0, {\n                            fill: coreStyle[\"selection-box-color\"].strValue,\n                            opacity: coreStyle[\"selection-box-opacity\"].value,\n                            stroke: coreStyle[\"selection-box-border-color\"].strValue,\n                            strokeWidth: coreStyle[\"selection-box-border-width\"].value\n                        });\n                    } else {\n\n                        var width = Math.abs(selectDx);\n                        var height = Math.abs(selectDy);\n                        var x = selectDx >= 0 ? selectOriginX : selectOriginX + selectDx;\n                        var y = selectDy >= 0 ? selectOriginY : selectOriginY + selectDy;\n\n                        selectionBounds = {\n                            x1: x,\n                            y1: y,\n                            x2: x + width,\n                            y2: y + height\n                        };\n\n                        self.svg.change(selectionSquare, {\n                            x: x,\n                            y: y,\n                            width: width,\n                            height: height\n                        });\n                    }\n                }\n            };\n\n            $(window).bind(\"mousemove\", dragHandler);\n\n            var endHandler = function(mouseupEvent){\n\n                // ignore right clicks\n                if( mouseupEvent.type == \"mouseup\" && mouseupEvent.button != 0 ){\n                    return;\n                }\n\n                clearTimeout(panDelayTimeout);\n\n                $(window).unbind(\"mousemove\", dragHandler);\n\n                $(window).unbind(\"mouseup\", endHandler);\n                $(window).unbind(\"blur\", endHandler);\n                $(svgDomElement).unbind(\"mouseup\", endHandler);\n\n                if( panning ){\n                    self.svg.change(svgDomElement, {\n                        cursor: null\n                    });\n                }\n\n                if( selecting ){\n                    if( selectionSquare != null && selectionBounds.x1 != null && !isNaN(selectionBounds.x1) ){\n                        self.selectElementsFromIntersection(selectionSquare, selectionBounds);\n                        self.svgRemove(selectionSquare);\n                    } else if( !self.shiftDown ) {\n                        self.unselectAll();\n                    }\n                }\n\n            };\n\n            $(window).bind(\"mouseup\", endHandler);\n            $(window).bind(\"blur\", endHandler);\n            $(svgDomElement).bind(\"mouseup\", endHandler);\n        }\n    }).bind(\"mouseover\", function(){\n        mover = true;\n        moverThenMoved = false;\n    }).bind(\"mouseout\", function(){\n        mover = false;\n        moverThenMoved = false;\n    }).bind(\"mousewheel\", function(e, delta, deltaX, deltaY){\n        if( !self.cy.panningEnabled() || !self.cy.zoomingEnabled() || !moverThenMoved ){\n            return;\n        }\n\n        self.offsetFix(e.originalEvent);\n\n        var point = {\n            x: e.originalEvent.offsetX,\n            y: e.originalEvent.offsetY\n        };\n\n        var deltaFactor = 0.5;\n\n        if( $.browser.mozilla || $.browser.msie ){\n            deltaFactor = 0.167;\n        }\n\n        var zoom = self.zoom() * (1 + deltaY * deltaFactor);\n\n        self.zoomAboutPoint(point, zoom);\n        self.cy.trigger(\"zoom\");\n        self.cy.trigger(\"pan\");\n\n        e.preventDefault();\n    });\n\n    // touch functions (& touch support)\n    //       |\n    //       v\n\n    function point(e, i){\n        var x, y;\n        var offset = $( self.cy.container() ).offset();\n        var touches = e.originalEvent.touches;\n        var touch = touches[ i ];\n\n        x = touch.pageX - offset.left;\n        y = touch.pageY - offset.top;\n\n        return { x: x, y: y };\n    }\n\n    function centerPoint(e){\n        var p1 = point(e, 0);\n        var p2 = point(e, 1);\n\n        return {\n            x: (p1.x + p2.x)/2,\n            y: (p1.y + p2.y)/2\n        };\n    }\n\n    function distance(e){\n        var p1 = point(e, 0);\n        var p2 = point(e, 1);\n\n        return self.getDistance(p1, p2);\n    }\n\n    function numEventPoints(e){\n        return e.originalEvent.touches == null ? 0 : e.originalEvent.touches.length;\n    }\n\n    function pointsAtLeast(e, n){\n        return numEventPoints(e) >= n;\n    }\n\n    function fingers(n){\n        if( n >= 2 ){\n            twoFingers = true;\n            inTwoFingerDelay = true;\n\n            clearTimeout(twoFingersTimeout);\n            twoFingersTimeout = setTimeout(function(){\n                inTwoFingerDelay = false;\n            }, delayFrom2FingersTo1);\n        } else {\n            twoFingers = false;\n        }\n    }\n\n    var delayFrom2FingersTo1 = 100;\n    var twoFingers = false;\n    var inTwoFingerDelay = false;\n    var twoFingersTimeout = null;\n    var touchendUnselects = true;\n    var center, modelCenter, distance1, point11, point12, point21, point22, movedAfterTouchStart;\n    $(svgDomElement).bind(\"touchstart\", function(tsEvent){\n        if( !backgroundIsTarget(tsEvent) || self.touchingNodes.size() > 0 ){\n            return; \n        }\n\n        tsEvent.preventDefault();\n        point11 = point(tsEvent, 0);\n\n        if( pointsAtLeast(tsEvent, 2) ){\n            center = centerPoint(tsEvent);\n            modelCenter = self.modelPoint(center);\n            distance1 = distance(tsEvent);\n            point12 = point(tsEvent, 1);\n            fingers(2);\n        } else {\n            fingers(1);\n            touchendUnselects = true;\n        }\n\n        movedAfterTouchStart = false;\n\n    }).bind(\"touchmove\", function(tmEvent){\n        if( !backgroundIsTarget(tmEvent) || self.touchingNodes.size() > 0 ){\n            return; \n        }\n\n        touchendUnselects = false;\n\n        if( pointsAtLeast(tmEvent, 2) ){\n            fingers(2);\n            point22 = point(tmEvent, 1);\n        } else {\n            fingers(1);\n        }\n\n        tmEvent.preventDefault();\n\n        var translation = {\n            x: 0,\n            y: 0\n        };\n\n        if( pointsAtLeast(tmEvent, 1) && self.cy.panningEnabled() ){\n            point21 = point(tmEvent, 0);\n\n            if( pointsAtLeast(tmEvent, 2) && self.cy.zoomingEnabled() ){\n                var distance2 = distance(tmEvent);\n                //center = self.renderedPoint(modelCenter);\n                var factor = distance2 / distance1;\n                center = self.renderedPoint(modelCenter);\n\n                if( factor != 1 ){\n                    var speed = 1.5;\n\n                    // delta finger 1\n                    var d1 = {\n                        x: point21.x - point11.x,\n                        y: point21.y - point11.y\n                    };\n\n                    // delta finger 2\n                    var d2 = {\n                        x: point22.x - point12.x,\n                        y: point22.y - point12.y\n                    };\n\n                    // translation is the normalised vector of the two fingers movement\n                    // i.e. so pinching cancels out and moving together pans\n                    translation = {\n                        x: (d1.x + d2.x) / 2,\n                        y: (d1.y + d2.y) / 2\n                    };\n\n                    if( factor > 1 ){\n                        factor = (factor - 1) * speed + 1;\n                    } else {\n                        factor = 1 - (1 - factor) * speed;\n                    }\n\n                    var zoom = self.zoom() * factor;\n\n                    self.zoomAboutPoint(center, zoom, translation);\n                    distance1 = distance2;\n                }\n            } else if( !inTwoFingerDelay ){\n                translation = {\n                    x: point21.x - point11.x,\n                    y: point21.y - point11.y\n                };\n\n                self.panBy(translation);\n            }\n\n            point11 = point21;\n            point12 = point22;\n        }\n    }).bind(\"touchend\", function(teEvent){\n        if( touchendUnselects && backgroundIsTarget(teEvent) ){\n            self.unselectAll();\n        }\n    });\n\n    $(svgDomElement).bind(\"mousedown mouseup click mouseover mouseout mousemove touchstart touchmove touchend\", function(e){\n\n        // only pass along if bg is the target: when an element gets an event, it automatically bubbles up to\n        // core and bg via the core (Element) logic\n        if( backgroundIsTarget(e) ){\n            var event = e;\n            self.cy.trigger(event);\n        }\n    });\n\n};\n\n```\n. You can cite the old Cytoscape Web paper for now:\nhttp://bioinformatics.oxfordjournals.org/content/early/2010/07/23/bioinformatics.btq430.short\n. There are a few  things going on here. \n(1) You're making a new collection of size 500 by calling cy.elements()\n(2) You're actually selecting the elements via .select()\n(3) Any bound listeners are fired\nI suspect (1) may be the slowest step. You can test this by timing cy.elements() on its own. \n. Done https://npmjs.org/package/cytoscape\n. we already have jsbin\n. @yuedong2 \nI've added code for the demo to the docs, but we still need the graph content.  Could you copy -- or make something kind of like -- the content and style from the simple demo? http://cytoscapeweb.cytoscape.org/demos/simple \nSee documentation/js/demo.js for the code, which is stubbed out for you.\nIt shouldn't be too hard to do, and it gives you another test case for the renderer other than the debug page.\nYou can run make in the documentation directory to rebuild index.html and pull in cytoscape.js from the build directory.\n. Let's hold off until beta2\n. The website needs a built version of the code all in one file, or it can't run the demo.\n. Maybe I'm misunderstanding the issue.  Might be easier to go over this in person.\n. Let's revise the documentation website to use the min.js file instead\n. Done\nhttp://stackoverflow.com/questions/tagged/cytoscape.js\n. @yuedong2 I agree that for point selection (click or tap), it's much better to have an accurate calculation.  However, for drag selection, an approximation using a rectangular bounding box should suffice for nodes.  It's simpler and faster.\nA good approximation for edges is whether both the source and target nodes are within the selection box, though this does not work for loops (i.e. source == target).\n@chrtannus What do you think, Christian?\n. You must include arbor.js in your HTML page.  The layout module itself is simply a bridge between Cytoscape.js and Arbor. \n. Firstly, I would like to thank you for using Cytoscape.js and reporting your problem on the issue tracker here on GitHub.\nI downloaded your example and tried it out.  It worked for me on Firefox 15.  Unfortunately, I can not download version 16, because the Mozilla's download link is broken (https://download.mozilla.org/?product=firefox-16.0.1&os=osx&lang=en-US).\nZooming is indeed working -- I tried cy.zoom(2) -- but I noticed that it's not picking up the mousewheel event to zoom via the mouse.  I've assigned this ticket to Yue to look into the issue with zooming, as he wrote the (very well-written) canvas renderer that is responsible for this logic.\nWe will be addressing this issue as soon as possible, and it should be fixed in beta2.  We will send you a ZIP with a snapshot build with the fix once it's committed.\nMany thanks,\nMax\n. @yuedong2 Would you please prioritise this issue over the existing issues you're working on?  Thanks!\n. @yuedong2 Great! If you check in a fix for an issue in future, I'd appreciate it if you would please close the issue.  Thanks.\n. @yuedong2 Great! If you check in a fix for an issue in future, I'd appreciate it if you would please close the issue.  Thanks.\n. @amergin I've made a snapshot build for you https://github.com/cytoscape/cytoscape.js/downloads\n. TODO document\n. @yuedong2 The global cytoscape is just a function that creates instances, like jQuery or $ in jQuery.  There is already support in the core for multiple instances.\nIt looks like the renderer does not work properly with multiple instances.  Since the renderer API is designed to be able to have a new instance per core instance -- via new and the use of a registered renderer prototype for the canvas name (i.e. $$(\"renderer\", \"canvas\", CanvasRenderer);) -- it looks like there may be something in your canvas renderer code that's causing at least part of the problem.\nLooking at the canvas renderer quickly, I notice you have a bunch of declared variables at the start with var.  That's a great technique for creating static/shared variables among instances.  However, it looks like some of these should really belong to the renderer itself (e.g. shiftDown, selectBox, and so on).  To do that, you'll have to declare them in the constructor function CanvasRenderer(options) { ... like this.shiftDown = ....\nJavaScript scoping rules can be tricky, especially with all the fancy stuff we're doing.\nI've updated the debug page with a second instance to test this case.  If we still have problems with two instances after you've revised the renderer as I've described above, then let me know and I'll take a look with you.\n@grokkaine We'll fix the issue that you've described, but it looks like you want two views with one instance of Cytoscape.js, since you've described syncing the instances.  That's a different feature, entirely, and it's something we plan to add after fixing this two-instance issue.\n. Closing since the debug page seems to be working with two instances\n. @amergin The selector engine and style engine are optimised to keep computed selectors and style properties.  This makes a lot of things faster.  Particularly, this in combination with the actor event model in the renderer makes it so we only rerender when some \"destructive\" event occurs.  If we allowed custom functions like you've included, we can no longer make the assumption that no \"destructive\" events have occurred:  The result of the function can depend on anything outside of the Cytoscape.js instance.\nThere are a few options here:\n- Use selectors\n- Use map( color ) in the \"color\" property and define the colours in each element's data\n- We could add some kind of new functions like map() and mapData() for colour.  Though, I don't know how the behaviour you've described would be made more generic to support this.\n. I'll add that using map(color) isn't a good solution in general, because then you've broken the separation between style and content.\n. Duplicate\n. @yuedong2 I'll take a look at this first quickly, because the problem may be with my core animation code rather than your canvas renderer.  If the core's OK, I'll pass this ticket for you to look at the renderer.\n. Animations tested working on current  master branch \n. I'm very familiar with the arbor layout, so I'll be able to fix this quickly myself in the near future.\n. On looking at this closely, stiffness can not be a function.  Arbor only accepts numerical values. See parameters() http://arborjs.org/reference\nnodeMass and edgeLength can take functional values, because these values are per-element -- whereas options like stiffness are global to the layout.\n. This really boils down to working around bugs in the browsers that affect the canvas renderer negatively.  The main browsers you can test normally on Mac, but you'll need VMWare to test IE.  You can ask Harold for the Windows disc and where to find the VMWare license.\nLet's hold off on testing IE too much until we've fixed everything else for beta2.  Every code change we make risks problems with IE, since IE is just so poorly written and fragile.\n. I did a search, and it looks like it's only being used in the Arbor layout.  It will be removed.\n. Rather than having the viewport automatically animate based on the current bounding box of the graph, it would be much more performant -- and simple -- to revise viewport manipulating functions like cy.fit() so that they are animatable.\nBecause an external layout has control of node positions, it should be able to keep them within some defined area -- e.g. (0, 0) to (width, height).  The layout would then call \njs\ncy.zoom({\n  level: Math.min(divWidth/width, divHeight/height),\n  position: { x: width/2, y: height/2 },\n  duration: 1000\n})\n. May be.  We have an animation loop, so it's probably worthwhile synching to that.  I'll try to add this in the next feature release.\n. Reassigning to med. priority\n. Implemented but docs TODO  -- should have same animation API as elements\n. Docs done\n. @yuedong2 Would you please take a look at this once you're finished with your previous tickets in the tracker?  Thanks!\n. Looks OK to me\n. The core already has this internal list.  If you call cy.elements(), a\ncollection is built from that internal list.  Since the renderer is getting\nlots of events and iterating a lot, it makes sense to have its own list\nsince there is still a little bit of overhead in generating the collection\neven though the core list already exists.\nOn Fri, Nov 2, 2012 at 4:22 PM, yuedong2 notifications@github.com wrote:\n\nCouldn't the core keep this list? The renderer isn't the only code that\ncan find this useful. Also, why am I doing all the work?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/186#issuecomment-10028970.\n. The dev has access to ele.position(), and so they don't really need that information in the event.\n. Yup\n. That's right. If you really need this fast (i.e. single calls within a loop), then just read the _private struct instead: ele._private.data.source, ele._private.data,target\n. The current panzoom plugin is experimental, and it will be refactored such that it does not use external dependencies like jQuery slider.\n. It should be better after it's refactored.\n. Hi Max,\n\nWe met a couple months ago at the Gaggle workshop in Seattle, and\nI'm now trying to integrate cytoscape.js into a prototype network\nviewer for the DOE Systems Biology Knowledgebase project.\nAre the event handlers working in the current version of\ncytoscape.js?  I've tried this example from the web page with both the\nbeta1 release and a checkout from git that I did today:\ncy.on('click', function(){\n  var evtTarget = this;\nif( evtTarget === cy ){\n      console.log('click on background');\n  } else {\n    console.log('click on some element');\n  }\n});\nI'm always getting the \"click on background\" message, even when\nI click on a node or edge.  I'm using Firefox 10 on Linux.\nSecond, what's the most appropriate forum to ask questions like this?\nBased on the documentation (at http://cytoscape.github.com/cytoscape.js),\nI can ask on the cytoscape group, stackoverflow, or file a github\nissue.  I tried asking a question a while ago on SO about the arbor\nplugin initialization, but never got a response.\nThanks,\nJMC\n. Revision: The value for this is correct, as confirmed in how jQuery behaves.  However, this necessitates some kind of field like target.  We probably need to add back the cyTarget fields and the like.\n. It's already there.  You can use evt.cyTarget to get what originally triggered the event.\n. Also added docs:\nEvent object\nEvents passed to handler callbacks are jQuery-event-like objects.  They have an additional field named cyTarget, which indicates the element or core that first caused the event.\n. I've updated the documentation with a note about cyTarget.  I'm reopening this until I've fixed the cy.on() example.  Thanks\n. Added to the docs and updated the website.\n. It looks like the canvas renderer has some issues with a size 0 div on init.  I'm reassigning this to you to resolve this in the renderer.  Then, I'll take a look to see if there are any problems with a size 0 div in the core.\n. It's a Chrome issue.  To reproduce, go to the debug page and then refresh.\n. I don't think it's prudent to add browser-specific workarounds for things like this.  Let's wait on this, since Chrome will fix this.  We can readdress this if anyone complains.\nWorkaround : If the client specifies the font, then the automatically-detected font will be overridden.\n. OK.  I can add these but we'll have to specify the syntax for the values\nfor each of them.  Did you start with the simple background\nimage implementation (centred, non-tiled), or are you going ahead with all\nthe features?\nMany thanks,\nMax\nOn Tue, Jan 8, 2013 at 2:00 PM, yuedong2 notifications@github.com wrote:\n\nThe following are needed to position the image:\n(not needed) background-attachment\n(not needed) background-color\n(already have) background-image\nbackground-position\nbackground-repeat\n(not needed) background-clip\nbackground-origin\nbackground-size\nThanks,\nYue\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/197.\n. Note: we don't need background-origin since we have no padding and the border is not considered part of the background (and no border could be used instead)\n. It should occur, unless the behaviour in the browser is the same as mouseenter and mouseexit, but I'm pretty sure it should bubble up.\n. I've fixed several of these, but pinch to zoom isn't quite working.  Otherwise looking good!\n. Do this after we do the navigator separate repo.  The navigator GSOC plugin will be the first test case.\n. There is simple initialisation code in the docs (http://cytoscape.github.com/cytoscape.js/#core/initialisation) and on the debug page in the second instance (https://github.com/cytoscape/cytoscape.js/blob/master/debug/init.js#L208) \n. Mappers don't look like they work in the bypass (i.e. override via .css()).  I'm looking into it.\n. Looks like it's working now with the previous fixes I added to the styler.\n. Also fixed by #209 fix\n. Width may be even easier:\n\nhttp://www.html5canvastutorials.com/tutorials/html5-canvas-text-metrics/\n. @yuedong I can go over this with you today, and then it should be pretty easy to do.\n. @yuedong2 I've investigated the above approach, and it doesn't look like it will make things faster.  However, using a duplicate canvas with a cached image copy of the viewport and manipulating that instead would probably make things a lot faster.\n. Changing this to high priority, since having this interaction fast on touch devices is really important -- especially on GeneMANIA sized graphs and larger.  How well/fast panning and pinch-to-zoom works really impacts the users first impression, so it's important it's fast.\n. We'd want to make a cache of the entire graph -- preferably at a higher zoom level than whatever the graph is at.  That way, when we use the cache for pinch-to-zoom in, it's not so pixelated.  I assume that scaling an image in canvas uses some sort of interpolation.\n. I think it will work well.  It's the approach used on the iPad in the browser itself.  It's only one image that we're caching, so I don't think it will be a problem with the memory.\n. ## Sent email to Ugur\nHi Ugur,\nAfter taking another look at the basic layout algorithms, it looks like there will need to be some cleanup to integrate them:\nSeveral classes are declared as global, which is not acceptable for a library.  They should be defined under cytoscape, so DisconnectedTree becomes cytoscape.DisconnectedTree.  That way, they can be used anywhere in the library but do not pollute the global \"namespace\".\nThe Array prototype is modified.  We can't do this, because a library should not leave side effects on the built-in top-level objects.\nThere are NodeSprite and EdgeSprite objects that duplicate a lot of functionality already built into the cytoscape.Element object.  It would be better to add whatever functionality may be missing to the cytoscape.Element object instead of adding entirely new ones.\nThe Arrays object doesn't seem to be used much at all, and where it is used it's for relatively simple things.  It would be good to remove this additional dependency.\nWe could do the cleanup on our end because it's straight forward, but we probably won't have time to dedicate to this in the short term.\nMany thanks,\nMax\n. Fixed on mouse devices\nTODO investigate touch devices\n. Issue:  How to unselect all? Tap background?  Or do not support unselect all b/c it's easy to tap the bg?\n. NB: This needs to be addressed both for touch and mouse inputs\n. The renderer actually does init, but the dimensions of the container div are not reported correctly by the browser.  This affected Chrome before and now IOS/Safari.  For now, we're just going to use the same workaround as for Chrome.  I don't think there's much else we can do for now, since this seems to be a Webkit issue.\n. fixed for mouse\n. Sounds reasonable.\n. Works now on mouse\n. Works now on touch\n. The images got uploaded out of order somehow.  They're fixed now.\n. I'm looking into this.  The regex is a bit more complicated to support rgb and hsl properly (the .+ causes issues with parenthesis boundaries because it's greedy).  I'll fix it shortly.\n. When sorting the elements (i.e. in the for each in the pseudocode), we should use these criteria:\n- lower levels first\n- lower z-orders first\n- edges before nodes\n- AND THEN maintain in-place elements order\nThis last criterion helps to make the ordering less arbitrary.  The elements have a natural ordering (same order as in cy.elements()), based on the order they were added to the graph.\n. @yuedong2 Hi Yue.  Would you please take a look at this when you have a chance?  Thanks! -Max\n. :touch should suffice s.t. we don't need :mouse\n. The renderer should check whether an element has opacity: 0 or visibility: hidden, and for those elements it should not allow interactivity.\n. Thanks.  We'll look into this.\n. This may be more difficult because of how lines and strokes are done in canvas.  Let's hold off on this for now.\n. This is probably of interest: http://canvex.lazyilluminati.com/misc/cgi/issues.cgi/message/%3C4C4ADBFE.60802@home.nl%3E\n. @yuedong2 Would you please take a look at this when you have time?  Thanks! -Max\n. @yuedong2 I'll take a look.  This needs to work for me to pull in bugfixes to Factoid. -Max\n. Looks like that did the trick.  If you still have problems, please don't hesitate to let me know.\n. If an element is a target under the finger during the initial portion of the pinch to zoom gesture, the :active state is not removed during or even after the gesture is complete.\n. @yuedong2 Would you please take a look at this ticket next when you get a chance?  It's a really high-priority one, since it affects a lot of use cases.  Thanks! -Max\n. A simpler alternative that wouldn't create an exception in the styler would be to handle this case in the renderer (i.e. if 'auto' on non-parent node, then assume some constant size instead).\n. It would be nicer in the first case if the size went to the default one defined in the stylesheet (or more generally, the last valid non-auto value in the list of style rules).  That means it would need to be handled by the core.\nIn the second case, I can add an extra check in eles.remove() in the core such that when a child is removed and would leave the parent childless, the parent's style is recalculated.\n. This should fix it.  Please test things out and let me know whenever you get a chance.  Thanks.\n. Maybe that function doesn't take into account autoWidth and autoHeight?\n. Redraw and associated interactions made much faster with profiling and fairly simple optimisations.\n. Good catch.  In general, it's bad to call things like that inside a loop for each element.  It's better to put the elements in an array, build a collection, and call things like eles.select() after the loop so only one notification is sent to the renderer.\n. Simple: Three or more fingers.  Should be more straightforward to implement than four finger encircle.\n. Drag selection working well on touch now.\n. Affects Factoid\n. http://stackoverflow.com/questions/13627111/drawing-text-with-an-outer-stroke-with-html5s-canvas\n. Affects Factoid.\n. seems ok now\n. The content property doesn't parse HTML tags, but have you tried using Unicode subscript characters (e.g. label: 'H'+ String.fromCharCode(8322) +'O')?  I think that should be supported.\n. Good to hear.  Closing.\n. This has made a huge improvement to overall performance.  With the previous changes I made, the redraw() function was made faster.  Now, with the rate limiting, we don't get \"peaks\" in calls to redraw() and calls are more regular.  This makes things smoother and more responsive.\nCalls to redraw() often don't take too long, but sometimes an occasional call or two (or even more) will take a long time.  Because we don't want to overcompensate and oscillate between extreme high and extreme low framerates, we take into account the previous redraw times:\njs\n// on each call to redraw()\naverageRedrawTime = averageRedrawTime/2 + thisRedrawTime/2;\nThe average is pushed towards the most recent redraw time and pulled back by the previous time.  We then use the average to compute what the \"ideal\" next redraw time would be from the most recent call, and we don't allow any calls to redraw until that time.\nThe redraw rate is capped between 30 fps (24 fps is a movie) and 60 fps (which your eyes can't really see much better than) for practicality and performance.\n. Also consider switch of shift selection on mouse.\n. Having the panzoom cache doesn't help.\n. https://github.com/brandonaaron/jquery-mousewheel/issues/45\n. Other points to consider: http://www.html5rocks.com/en/tutorials/canvas/performance/\n. https://developer.mozilla.org/en-US/docs/HTML/Canvas/Tutorial/Optimizing_canvas\n. Using requestAnimationFrame() actually makes things slower.  It looks like our own scheduling code for redrawing is more efficient.\nI also tried using an off-screen buffer and blitting that to the screen instead of our on-screen canvas approach.  This didn't make any noticeable performance improvement -- with requestAnimationFrame() or without.  It looks like the expense of doing the blitting offsets the savings in using the buffer.\nNot committing this change, but logging the code here for reference:\n. https://gist.github.com/maxkfranz/9019ecbeaf4033e71763\n. Because the renderer wouldn't have access to the elements, this wouldn't be possible other than maybe offloading some math (but then that needs to be synchronised with draws etc).\n. Fixed except the labels.  That's pretty much how it's expected to go.\nI did notice that the non-auto node gets shifted around at init.  Non-auto nodes should never have their width/height/position changed automatically.  Would you please revise this?  Thanks!\n. Oh, OK.  That's no big deal then.  I thought there may be something wrong.  Thanks! -Max  \nOn Thursday, 9 May 2013 at 17:36, onursumer wrote:\n\nHi Max,\nThanks for the quick fix!\nThe non-auto node gets shifted on init, because actually it is not a non-auto node at init. I set its css style explicitly after init. I guess I have to define its style within the initial style object to make it non-auto at init.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/278#issuecomment-17691475).\n. Already did that; closing...\n. Elements were sharing parsed property objects, so now the style.applyParsedProperty() function makes a copy on each apply as it should.  That fixes things and keeps the style context rollback performance enhancement working well.\n. Looking at this, it can't be implemented in the core.  In graphs, edges are defined by their source and target nodes.  Thus, source and target are immutable.  Flow charts are a different story.\n\nThis looks like it could be a plugin.  You'd have to\n- remove the edge on \"grabbing\" it,\n- manually draw some replacement for the edge to show \"connecting\" it to the new node, and\n- adding a new edge connected to the new node to replace the deleted one.\nI'll leave this open in case someone come across it and is interested in making a plugin: \nhttp://cytoscape.github.io/cytoscape.js/#plugins\n. Could possibly be integrated into edgehandles plugin\n. Closing as unrelated to core; see edgehandles ticket\nhttps://github.com/cytoscape/cytoscape.js-edgehandles/issues/18\n. Useful for GeneMANIA functions\n. Preview of implementation: \n\n. TODO document\n. NB: starts at 12 o'clock and works clockwise\n. NB: can use each pie-i-background-* as a mapping to a value type and use pie-i-background-size: 0 to ignore that colour for a node\n. NB: works on triangle but looks awful (can't tell relative sizes at all); best on square ellipse or rectangle and OK on high-N-sided polygons\n. Hi -- Thanks for the pull request!  We always appreciate them.  Good news and bad news:\nBas news: I can't use your code as-is.  There is a rendering issue at initialisation, and more importantly, it changes the core when only changes to the renderer are necessary.\nGood news: Your suggestion and code has been noted, and I've implemented it in the renderer in the trunk.\nMany thanks,\nMax\n. Thanks!  I'll investigate this shortly.\n. e.g.\njs\n{\n  selector: 'node',\n  css: {\n    'background-color': 'red',\n    'border-width': '2px'\n  }\n}\n. Doesn't seem to be an issue in trunk.  Try make all.\n. Thanks for reporting.  I'll look into this some more -Max  \nOn Thursday, 1 August, 2013 at 08:19 , georgedavidson wrote:\n\nJust wanted to report that this error persists, even using the latest commit. I'm still getting an \"afterimage\" after calling cy.png().\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/289#issuecomment-21932329).\n. I can't reproduce this on the latest commit.  Please clone the repo, open the debug page, and see if you can generate some steps to reproduce the issue you're seeing.  Thanks -Max\n. Please record any issues in this ticket if it recurs.\n. This needs to be documented.\n. documented\n. Not sure if this is possible.  Would this be generated somehow from the style?  That doesn't have enough information on its own for a legend (i.e. what does the node shape semantically map to).\n\nMaybe just a simple plugin that supports drawing the same shapes and colours etc, but the dev would have to specify the mappings manually? \n. Feels like it should be a plugin.  However, users may want to get the legend put in with the exported cy image with cy.png() etc.  Maybe some kind of registration scheme with the canvas layers?  Maybe just allow export of the legend separately, and the client has to piece the images together himself?\n. Reconsidered; should be part of app UI; closing\n. Sigma has hacks like hiding edges on viewport events.  We also support things like that via init options (e.g. hideEdgesOnViewport) in the trunk, but I don't think it's in a proper release yet.  Just make all and you'll be able to use it.\n. Sigma has hacks that allow it to render faster, such as disabling edge rendering on viewport events. If you make all from the trunk, the hideEdgesOnViewport init option should do what you're looking for -- giving you more or less the same level of performance as sigma. -Max  \nOn Thursday, 4 July, 2013 at 14:26 , Patrick DeVivo wrote:\n\nDo you think this is the main reason for the performance difference?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/292#issuecomment-20489080).\n. We also have a sophisticated event model and styling system with stylesheets, and unfortunately those kinds of features do impact performance a bit, though the advantage of having them tends to outweigh the downside.  Rest assured that we'll continue to improve the performance of Cytoscape.js.  If you have any features you'd like or if you'd like to contribute, just let me know. -Max   \n\nOn Friday, 5 July, 2013 at 14:24 , Patrick DeVivo wrote:\n\nI've done as you said and enabled that init option and see a significant gain in performance, though interacting with the graph is still not at the performance level of sigma - zoming is slow, clicking and dragging nodes is slow (though not impossible as it was before).\nI'd prefer to use cytoscape.js, I'll poke around the source of the cytoscape canvas renderer and sigma's renderer to see the differences.\nThank you for your help!\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/292#issuecomment-20532637).\n. There is no eles.forEach() function normally.  That's an example of making your own extension.  Use eles.each() if you want, but it's much more performant to use a for loop.\n\nFrom the docs (if you want to try defining forEach):\n``` js\ncytoscape('collection', 'forEach', function( fn ){\n  for( var i = 0; i < this.length; i++ ){\n    fn.apply( this[i], [ i, this[i] ] );\n  }\nreturn this; // chainability\n});\ncy.elements().forEach(function(){\n  console.log( 'forEach ' + this.id() );\n});\n``\n. With this feature, you'd be able to run any of the existingcy.layout()` layouts on just a subset of nodes.\n. Duplicate\n. See #355\n. @yuedong2 Would you like to take a look at this when you get a chance please?  If not that's fine; I just might not be able to get to it as quickly.\n. You could add the shape to the renderer and make a pull request. All the\nshapes are defined one after the other in the code. You could just copy\npaste and edit to your needs -Max\nOn Monday, July 15, 2013, yuedong2 wrote:\n\nHi,\nWe currently don't have API for adding node shapes directly, but if you're\nlooking to add an image to a node shape, have you tried looking at the\nbackground-image property, such as:\nnode.css(\"background-image\", '\nhttp://regentsparkcollege.org.uk/wp-content/uploads/2012/09/test.jpg')\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/298#issuecomment-20975944\n.\n. I did some digging, and it looks like the API still supports registering modules under extensions.  This means that the renderer (the extension) could have node shape modules, effectively giving the functionality you described (I think?).  \n\nThe old SVG renderer supported this, but we'll possibly have to do some integration work to have this in the canvas renderer (the current one).  https://github.com/cytoscape/cytoscape.js/issues/306\n-Max  \nOn Wednesday, 24 July 2013 at 11:41, Max Franz wrote:\n\nYou could add the shape to the renderer and make a pull request. All the shapes are defined one after the other in the code. You could just copy paste and edit to your needs -Max\nOn Monday, July 15, 2013, yuedong2 wrote:\n\nHi,\nWe currently don't have API for adding node shapes directly, but if you're looking to add an image to a node shape, have you tried looking at the background-image property, such as:\nnode.css(\"background-image\", 'http://regentsparkcollege.org.uk/wp-content/uploads/2012/09/test.jpg')\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/298#issuecomment-20975944).\n. See #306 \n. We could add an option. I created ticket #303 for this -Max\n\n\nOn Monday, July 22, 2013, alextux wrote:\n\nHi,\nI would like to know if it will be possible to set BreadthFirst layout\nwith the purpose of defining positions of nodes in function of the maximal\nway instead of the minimal way.\nI make a little shema for explain what i want:\n[image: schema layout]https://f.cloud.github.com/assets/3854907/835157/02218122-f2d5-11e2-98c0-6853d583f2d5.jpg\nthanking you in advance\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/300\n.\n. @alextux Please use the maximalAdjustments option.  maximalAdjustments: 1 should suffice if for something like you posted.\n. You'll have to clone the repo and make all until 2.1.0 is released.\n. Perhaps someone overwrote it, or there was some error in checkin.  Thanks for the heads up -M https://github.com/cytoscape/cytoscape.js/issues/338  \n\nOn Friday, 30 August 2013 at 05:21, alextux wrote:\n\nThank you for your work on this option, it's usful for me.\nThe option maximalAdjustments is present in the version cytoscape.js dated 21 August but not in the latest. Maybe there are the old breadthfirst layout file in the latest commit.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/300#issuecomment-23549706).\n. Thinking about this, it won't work very well in canvas, and some browsers won't behave well at all.  Reprioritising until there's better browser support.\n. See email\n. @alextux Please use the maximalAdjustments option.  maximalAdjustments: 1 should suffice if for something like you posted.\n. Not possible with html5 canvas api.  We should make a request to the browsers/W3 to add this feature to the API.  If we do it on our side, it will be too expensive for it to be performant.\n. While this may work in your case, this approach is problematic for general use:\n\n(1) context.measureText() is prohibitively expensive, especially since for a wrapping effect, it would need to be called repeatedly per line.  You'll note that the existing label dimensions calculations don't use it because of this (also because height doesn't get provided, and font size itself is not an accurate measure).  See CanvasRenderer.prototype.calculateLabelDimensions etc.\n(2) While allowing for manual \\ns is already a burden on performance, allowing line wrapping based on some max-width metric would make performance significantly worse.\nThese issues, in addition to supporting all the alignment cases, for nodes and edges need to be taken into account.  Additional style properties will also be needed.  This feature requires many significant changes and testing to make sure it works properly in all cases and that it is as performant as possible.\nI'm adding this to the 2.3 milestone.\n. Reassigning to 2.4\n2.3 is too overloaded and close to release for this to fit, especially with the performance concerns.\n. I'm going to note in this ticket, as it should have been mentioned here explicitly before, that the want for multiline labels itself is very likely indicative of design issues:  If you find yourself thinking \"Gee, I wish I could wrap these labels\", then you should consider that your labels themselves are too long.\nLabels are meant to label elements, not to fully describe them.  Long labels are -- more often than not -- bad UI.  They clutter the graph and distract the user from the real content, the visual representation of the graph data.\nIt's near trivial to clip labels with \"...\" and show more information elsewhere (e.g. a qtip, a panel, etc.).  This, combined with time constraints and performance considerations, has made me hesitant to implement multiline labels.\n. Also of note: Canvas is not good at rendering text.  It's very slow overall, and the rendering quality is poor compared to text elements in the DOM.\nI wanted to refactor the label rendering to use DOM elements, but this is not possible in the core for many reasons, including conflicts with PNG export and several rendering features.  However, it should be possible to do this separately as an extension: It would be acceptable for an extension to not be compatible with all core features (like PNG export), but it would be unacceptable for the core to break core features.\nExtensions can even be autoscaffolded for you now: http://js.cytoscape.org/#extensions\nBasically, the extension would create a separate layer in the DOM and it would place label text in that layer.  You would probably use 3D CSS transforms to position the labels to minimise DOM layout reflows for performance.  You could even use a scale transform to make zooming faster.\nAnyway, this would give you multiline labels that are performant in a truely reusable form.  And it would not require monkey patching the lib.  I think an extension like this could even work with the proposed SVG export/rendering functionality (ref:#639), since it would be rendering agnostic.\nI don't have time to write an extension like this right now, but in any case, an extension like this would be preferable on all accounts than fighting with the issues canvas text brings.\n. @wehriam This looks like an excellent start.  I have made some comments in your issue tracker.  Many thanks\n. That makes sense.  I had considered that for the full text instead of a charbychar basis.  Does the charcache affect text rendering quality?  Things like kerning may not work as well.\n. #593 uses a similar approach.  I implemented caching node and edge textures, but it had a small overall effect on performance so I abandoned it.  Maybe the same approach with the labels would be more effective.\n. The word cache is a good idea.  It may be important to consider whitespace as words so that things like tab characters and multiple spaces work properly.\n. Thinking about this more, it might actually be faster w.r.t. execution time to cache the whole label per element.  \nAssuming approximately equal time to blit each word in the cache, it would be cheaper to collapse the entire operation into a single blit.  I'm not 100% sure about the validity of this assumption.  However, I would assume that for such small canvases, the overhead of each blit operation would be a significant portion of its execution time.\n. Implemented via #854 and improved with some refactoring.  Performance could be improved further with #593, but it might not be worthwhile right away given that zooming would invalidate that cache.\nAnyway, all those interested please try unstable.\n. Use \\n\n. Text wrapping happens on whitespace.  If you don't have whitespace, you'll need to use newlines.\n. TODO document via comments in the renderer how to add new shapes\nI've been thinking about this more, and I think it makes more sense for new shapes to be supported directly in the renderer, rather than exposing canvas-renderer-specific APIs.  It's also better in that other people can also use new shapes.  After the additional commenting is complete, anyone can submit a pull request so that everyone can use the new shape.\n. You should add shapes to the main codebase by making a pull request -- in the spirit of open source.\n. I've confirmed it's working as expected.  Arbor restricts the nodes to the viewport size, but does not alter the viewport itself on fit.  Would whoever had the issue please comment, otherwise I'll close this.\n. Arbor requires some sort of bounds to restrict the nodes.  I'll look into whether it's possible to disable it, or maybe provide an option so you can set it manually.\n. @georgedavidson \nWith this checkin, you can use the simulationBounds option in arbor:\njs\n...\nsimulationBounds: [x1, y1, x2, y2], \n...\nMake sure fit: false in your options, and set the viewport pan and zoom accordingly based on your specified bounds.\nPlease let me know if this suffices for your use case, or whether you need something more.  Thanks -Max\n. Note to self: make sure this opt'n is doc'd\n. Because arbor is continuous, you'll need to disable zoom/pan during the layout if you don't want the user to reverse the fit.\n. Thinking about this more, it would be too expensive for it to be practical.\nDeprioritising\n. for Gerardo\n. As far as my tests show, mousedown works properly -- both on the core and on elements.  Please provide steps to reproduce the issue you're having, noting that mousedown is a mouse-only (e.g. not on iPad) event.\n. Did you try cy.on('mousedown', 'node.ganeti-node', function(){ /* ... */ })?  Maybe the alias has an issue.  It's also better to use event delegates, so the binding applies to elements added after the binding.\n. There's probably a bug in there with the alias, at least for mousedown.  I'll investigate this so you can use it in future, but please use the alternate syntax I described earlier for now.  Thanks!   \nOn Friday, 16 August 2013 at 14:40, Pranjal Mittal wrote:\n\nYes, I tried this now for mousedown\nThings work fine this way. (as expected)\nI have been using these JQuery like aliases for event binding at a lot other places. I will switch to what you mentioned.\nIn general the 'alias way' is more convenient to use; adding it could help.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/311#issuecomment-22785475).\n. we already have jsbin\n. Mappers are not supported in animations, at least not yet.  There are important performance considerations, because the animations and the mappers can both be expensive on their own.  I'll take a look at this, and I'll put my updates in this ticket for you to follow. Thanks -Max  \n\nOn Monday, 19 August 2013 at 10:20, salpen wrote:\n\ncy.nodes().animate({css:\"height\" :10},{duration:1000}); works but\ncy,nodes().animate({css:\"height\":'mapData(weight,20,40,10,80)'},{duration:1000}); does not work  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/316).\n. Unless this can be done without impacting performance, it's not worth it to add.  A mirror of the mapping function could be created to manually calculate the final animation value.\n. e.g. ele.mapData('weight', 20, 40, 10, 80)\n. I'm changing this ticket.  A better solution than supporting programmatic access to calculated mapper values is to allow for animation transitions.  This should support your usecase:  Rather than manually specifying the same mapper used in a stylesheet in the call to eles.animate(), you could simply specify style properties to transition.\n\nSomething along the lines of:\n```\nnode {\n  height: 10px;\n  width: 10px;\n}\nnode:selected {\n  height: mapData(weight, 20, 40, 10, 80);\n  width: mapData(weight, 20, 40, 10, 80);\n  transition-property: height, width;\n  transition-duration: 1s;\n}\n```\nSo instead, it becomes the responsibility of the styler to add the animation on the state change to node:selected.\n. Try to use syntax from: http://www.w3schools.com/css/css3_transitions.asp\n. TODO test impl & update docs\n. working on 1.9.x with jquery mobile tests so far\n. OK for unit tests; OK for debug page w/ latest (jquery v2.0.3); closing\n. It looks like this would require more maintenance, and it probably wouldn't work well with the $versions library we use to test different versions of jquery.\nPostponing for now\n. should wait on this until more extensive bower tests\nbower would make it easy to pull in cy.js for separate repo testing\n. Better to just do dummy wrappers\nSupport\n- qtip (seems kind of buggy on mobile though) http://qtip2.com\n- opentip http://www.opentip.org\n- tipped http://www.tippedjs.com\n. https://github.com/cytoscape/cytoscape.js-qtip\n. DEAD: https://github.com/cytoscape/cytoscape.js-tipped\n. DEAD: https://github.com/cytoscape/cytoscape.js-opentip\n. Start w/ qtip, because its API seems the easiest to integrate (most flexible)\n. Not doing Tipped; prohibitive license\n. Opentip doesn't seem to be active anymore and its API would have to be integrated as an extension in a roundabout way.  Dropping.\n. Note: One client dev has mentioned that there are indeed some issues on Windows tablets.\n. Added a compatibility layer for events; needs more testing\n. Touch works well on Surface / Win10 / Chrome\n. There seem to be some preset gestures on Surface / Win10 / Firefox\n. Firefox has weird behaviour on Windows/Surface.  It seems wheel events are generated for vertical swipes, making panning very frustrating.  \nRef to Bugzilla : https://bugzilla.mozilla.org/show_bug.cgi?id=1214368\nHopefully, the Firefox guys address this.  As it stands now, I'd have to recommend Chrome over Firefox for Windows touch devices as it seems to have proper touch support.\n. Firefox issue : \n\n. Edge/IE working OK but edges don't seem to be tappable\n. Edge/IE now working just as well as Chrome w.r.t. touch\n. Correct.  I've filed an issue with Bugzilla, but there's nothing I can do on the Cytoscape.js side to fix Firefox's behaviour.\n. NB: should not ref build/*\n. if we use the tracker nicely, this won't be necessary\n. TODO document\n. Not important\n. requires testing on ipad \n. You can see the selection being changed, so this is actually unnecessary.  Closing\n. works fast & fine on ipad\nnot necessary\n. On second thought, this is up to the app dev. Closing\n. could also allow for more complex, manual positioning\n. No, there's no point to it.  It would invalidate z-ordering.  It would also be inferior performance-wise to current and future caching enhancements.\nIf something's not in the docs, it doesn't exist or it's not meant to be used.. Use the panzoom plugin, or you can create a plugin based on that, or you can modify the existing plugin's style -M\n. add to docs\n. http://dl.acm.org/citation.cfm?id=142763\n. After going over the article, it seems as though the algorithm requires some preset positions and the fisheye is mostly an effect of size.  To simplify this, we could combine the fisheye idea with the concentric circle layout.  This also simplifies the fisheye effect due to the radial symmetry about the root node.\nThis issue can then serve instead for a special layout() CSS mapper, which could be used to map arbitrary style based on layout metrics on a per-element basis.\n. Ref: Concentric value layout #380 \n. Should function like data() and mapData() to allow for passthrough and continuous mappings.\nWe have then layoutData() and mapLayoutData() for consistency.  Though we probably shouldn't add programmatic access to layout values, the naming -- although verbose -- would allow for the possibility in the future in case there's a usecase where its use would be valid.\n. Multiple layouts => multiple namespaces\n. NB: Requires a layout that sets these values to update all element mappers\n. Mouse wheel events are a bit different across browsers.  IE probably doesn't support any of the events we use to zoom via mouse wheel.  Good catch; will fix (as long as IE behaves well, that is) -M  \nOn Thursday, 5 September, 2013 at 15:03 , Anders Riutta wrote:\n\nMouse-wheel scrolling does not produce zoom behavior in Internet Explorer. Tested IE9 and 10 on Windows 8.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/340).\n. I don't think we do, because IE8 has poor support for HTML5 (incl. canvas).  I don't know if there would be much point in fixing this, considering it's probably not going to work well overall in a browser with such poor support for web standards. IE10 should be fine, and probably IE9 as well. -M  \n\nOn Thursday, 5 September, 2013 at 15:08 , Anders Riutta wrote:\n\nAre we trying to support IE8? If so, you might see whether we could address IE8's lack of support for getComputedStyle with something like this:\nhttp://snipplr.com/view/13523/\nI tested on Windows 8 using IE8 mode and IE8 standards in devtools and got an error saying that IE8 does not support window.getComputedStyle.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/cytoscape/cytoscape.js/issues/341).\n. Duplicate of #359 \n. the default style is almost as minimalistic as possible\n\nunfortunately labels are probably the most expensive thing to style/render alongside with curved edges\n. Great; I'll make a unit test that reproduces this case like your example,\nand we'll fix it in the next release (NB if you build from trunk you can\nget the changes sooner).  Thanks! -M\nOn Fri, Sep 13, 2013 at 1:53 PM, JD Wong notifications@github.com wrote:\n\n'm building a graph which allows edges to be toggled on/off. I need to be\nable to add and remove them repeatedly. I have noticed this error with node\ndegrees with nodes attached to toggled edges. I've included an example.\nMy code:\nallElements = cy.elements();\n....\nvar allEdges  = allElements.filter('edge');\nvar allNodes = allElements.filter('node');\nfor(var i=0; i<5; i++){\n    // DELETE\n    var printThis = [];\n    allNodes.filter(function(i,ele){\n        printThis.push(ele.degree());\n    });\n    console.log(printThis);\n    cy.remove(allEdges);\n    cy.add(allEdges);\n}\nReturns:\n[1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 6, 1, 2, 1, 1, 1, 36, 8, 3, 4, 4, 2, 1, 1, 1, 1, 1, 1, 2]\n[1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 6, 1, 2, 1, 1, 1, 36, 8, 3, 4, 4, 2, 1, 1, 1, 1, 1, 1, 2]\n[2, 2, 2, 2, 2, 6, 2, 2, 2, 2, 2, 12, 2, 4, 2, 2, 2, 72, 16, 6, 8, 8, 4, 2, 2, 2, 2, 2, 2, 4]\n[3, 3, 3, 3, 3, 9, 3, 3, 3, 3, 3, 18, 3, 6, 3, 3, 3, 108, 24, 9, 12, 12, 6, 3, 3, 3, 3, 3, 3, 6]\n[4, 4, 4, 4, 4, 12, 4, 4, 4, 4, 4, 24, 4, 8, 4, 4, 4, 144, 32, 12, 16, 16, 8, 4, 4, 4, 4, 4, 4, 8]\nWhich shows that removing edges after the first time doesn't decrease the\ndegree of the nodes they're attached to.\nThis is quite important towards our cytoscape application.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/347\n.\n. I can't reproduce your issue.  Looking at your sample, you may be using the API incorrectly.  cy.add() is for new elements from JSON (old elements are copied from JSON).  You should be using eles.restore() for performance and consistency reasons. Perhaps support for elements as parameters to cy.add() should be removed completely.\n. To support multiple instances of cy.js, it is important to allow for transferring elements from one instance to another.  To support this:\n- Each element has a core owner.\n- The core owner is always the instance that created the element from JSON.\n- When adding via cy.add(), all elements are treated as new ones.  Each element is copied, and a new element is created in the second instance.\n\nWhat you are seeing is the cy.add() behaviour, which is similar to cy.load().  Each time you call cy.add(), you're just making new copies.\nWe could support your usecase better if we automatically restored if the creating instance is the same as the one the element is being added to.  Another improvement would be to rename the function -- still supporting the old, shorter alias -- to something like cy.addNew() so it's a bit more clear from the getgo.\n. Please try out the trunk and let me know whether the change makes the API work more like you expect.\n. Another thing to consider in general is that adding, removing, and restoring elements can be expensive. If you're just toggling, you could try toggling the visibility visual style.\n. If you make all, you'll get everything made for you like a release in the /build directory.\nOnce an element is removed, it is semi-orphaned: It no longer really belongs to its core instance owner.  Any element in this state is in a sort of limbo -- floating around in memory outside of the core but ready to be restored back if need be.  If it's not really in the graph, graph metrics don't make sense anymore and neither may the actual results of calling those metric functions, like ele.degree().\n. Short answer: If you want a guarantee that functions behave correctly for an element, then that element must not be removed.\nExplanation:\nAny removed element should not be used other than to hold onto for restoring later.  There are many functions that just will not work when an element is orphaned unless large assumptions are made, such as that the element is simply disconnected somehow from the graph.  The degree case seems simple, but it opens a can of worms by creating the client dev expectation that functions should work on removed elements.\nHowever, there are too many inconsistencies that arise from assumptions like this.  One simple example (of many you could think of):  What about edges?  They are defined as a connection between nodes in the graph.  Does this mean ele.source() works, or does it not?  Does it work if the source node is in the graph?  Does it work if it's not?  Nothing really makes sense anymore once an element has been removed from the context of a graph -- it's a matter of definition.\nIt was by design that the behaviour of those sorts of functions is undefined for removed elements.  It would overcomplicate the API.  It would introduce inconsistencies in the model.  It would have issues in terms of maintainability of the codebase.  It would likely impact overall performance.\nIt sounds like you're just hiding elements, anyway, and in that case it makes more sense to use visual styles to hide elements in the appropriate state.  If you want to continue with the way that you're doing things, it would make sense to add a removed check if you want to process removed elements.  Essentially you would use an intermediary variable for degree rather than just directly reading the function return value.\n. How about you use the visibility property for now and we try to support something along the lines of display:none for 2.1 so that display:none elements don't take up space (i.e. display none edges look as though they have been removed)?\n. @jdmswong You can now use the display visual property.  It takes on the value element (shown) or none (hidden).  The eles.show() and eles.hide() functions now use the display property, so you can alternatively use those functions for your purposes.\nYou'll have to make all to get these changes in the trunk.\n. The docs have been revised for the next release so this shouldn't be an issue. Thanks! -M\n. do this as we do other things, in the bg\n. anchoring\n. aligned to source, target, middle etc\n. more manual too like css?\n. should be done in conjunction w/ labels rendered as html\n. Closing; too general\n. @gbader -- What blogs or online venues should we advertise?  Here are some we've done before:\n- http://javascriptweekly.com\n- http://dailyjs.com\n- twitter cytoscape acct\n- the cytoscape google group\nAny more?\n. This could cause issues with the layout integrity and also whether the layout could successfully complete -- looking at the source.  Closing for now\n. Issues:\n- Layouts that would want to interact with elements outside the layout set\n- Running 2 layouts at once whose elements sets intersect (per element locks solve this but will end up giving non desired behaviour to the user)\nJust lock the elements you don't want the layout to affect and run the layout for now.\n. Usecase for more complex behaviour: Adding and removing a node from a continuous layout\nLimitation: Only one layout can \"own\" a node at a time\n. Alternative: Rather than supporting multiple layouts running at once -- which has no known usecase -- use a mechanism for eliding elements from a layout?\nGranularity for continuous/FD layouts? Included but not set vs not included\n. Also refer to http://stackoverflow.com/questions/24519799/how-does-the-layout-function-work-on-collections-of-nodes\n. will make api easier to use from different perspectives\ndifferent ppl use different types of graphs, etc, etc\n. easier for ppl to keep their mental models consistent while working w/ the lib if the language we use is flexible and accommodates different ways of thinking\n. TODO make more complete list of aliases that we should try to support\n. In future, we will be supporting more complex properties to support background-image, much like in CSS.\n. This isn't planned for 2.3, as there are many other higher priority tickets to cover for that milestone.  For the time being, it's probably best to use intermediary nodes.\n. Accidentally closed; reopening...\n. Also see #628, which probably would make separate edge bends unnecessary in favour of more automatic intermediary nodes.\n. Refer to the milestones : https://github.com/cytoscape/cytoscape.js/milestones\nIf an issue is planned for a particular version, it has an associated milestone.  Obviously, an issue is closed if it is resolved.  New features do not make it into x.y.z releases, only x.y releases.\nAs for @gioper86's implementation, he's already given it to you.  Just use an extra node with straight bezier or haystack edges.\n. e.g. for \ncurve-style: unbundled-bezier;\ncontrol-point-distances: 20 -20;\ncontrol-point-weights: 0.25 0.75;\n\n. Multibeziers done; docs and segments impl TODO\n. Segments implemented\n- Docs TODO\n- Improvements to mid arrows and labels TODO\n. \nLabels and arrows OK\n. https://github.com/cytoscape/cytoscape.js/issues/347\n. As mentioned on Stack Overflow, this is likely a Chrome issue rather than a Cy.js one.  It works everywhere else, and we're using a standard HTML5 API.  Please test canvas line and bezier support in your browser.  You may need to file a bug report with Google/Chrome\n. Do you still experience this issue in 2.0.3?  If so, try this build and please let me know the results https://dl.dropboxusercontent.com/u/5671307/cytoscape.js-github-snapshot-2013.12.03-11.30.12.zip\n. See the example\nhttp://stackoverflow.com/questions/19287934/how-do-i-use-the-jquery-cxtmenu-js-plugin-packaged-with-cytoscape-js\n. Make sure you call the plugin properly after the ready event.\n. There is a transparent background when I'm testing.  The image itself is fine.  This is almost certainly a browser issue.  Whoever asked about this should file a report with the offending browser.  Perhaps the browser just renders the PNG wrong?\n. Maybe they changed the event format.  It was something different than the other browsers, I think.\n. Is it working in a previous version for sure, or is it just broken overall in Firefox?\n. Are you testing this from a web server (e.g. localhost via Apache) or locally (e.g. file://...)?\n. Webworkers shouldn't work in that case, meaning you won't get a live update (continuous animation).  You need to run Apache or similar for testing to emulate the user environment.  Locally, arbor would be very slow without webworkers -- making it seem like it's very slow.  It's a technical limitation of webworkers, unfortunately.\nHave you tried binding to the layout events, layoutstart and layoutstop and seeing when and if they are triggered? http://cytoscape.github.io/cytoscape.js/#events/graph-events\n. Either way, please update us here in case there is any error on our side.  Even if it's working, this ticket could serve to update the docs so that this behaviour is clearer.  It's unfortunate that it's like this, but there isn't much we could do to mitigate it -- considering the technical limitations of webworkers and the performance concerns of the FD algorithm.\n. Different security settings per browser, probably. Anyway, I'll try to improve the docs so this is clearer. I'll also doublecheck it for the different browsers via file:// just in case. Thanks -M\n. I've investigated, and found that Firefox incorrectly reports window.devicePixelRatio when you use the browser page zoom function.  Please file a bug report with Firefox, as this is not a cy.js bug.\n. Just a quick, friendly tip: It's also worth noting that you shouldn't be relying on the built-in browser zoom function for webapps, anyway.  For one, you'll get pixelated results from cy.js.  Two, cy.js has built-in zoom functions.  Three, you should consider making fonts etc larger by default so that the user doesn't feel the need to zoom in.\n. I'll take another look.  Not using the value in Firefox fixes the issue, so it may be the case that either there needs to be a check for Firefox or the issue is more complex -- and may affect a previous pull request that added better support for high density displays.\n. I can't reproduce it on Chrome 31.0.1650.57 on Mac, so it looks like I'll have to stick with FF for testing this.\n. So, there are two things at work here:\n(1) I've made the pixel ratio detection from a previous pull request more reliable.  If you use browser scaling, you get unpixelated results if the browser supports backingStorePixelRatio and devicePixelRatio.  The latest Chrome gets nice results as does the iPad.\n(2) Even with the revision via (1), FF still can not render the canvas properly if browser scaling is used at all.  Indeed, there is a Firefox bug at play here, but it was not what I originally thought the cause was.  I don't know what the underlying cause is in the Gecko engine, but browser scaling is a necessary factor.  Unfortunately, I've had to add a test for FF so that you don't get nice unpixelated results, because it seems that FF can't handle it.  I highly doubt this is an issue with cy.js code, since everything works just fine on the latest Chrome where backingStorePixelRatio and devicePixelRatio are reported the same as in FF.\n. not very important right now\n. Just bind to the add event.  There is no need for another function in the API.\ne.g. \ncy.on('add', 'node, edge', function(){ /* .. */ })\n. TODO document\n. \n. It would be more general if instead of a singular root, there were a set of roots.  The roots would be organised in the innermost circle.\n. Delaying to 2.2; renderer bugs are taking too long to fix\n. Definitely not 2.3, maybe 2.4\n. To clarify: There are performance and compatibility concerns related to this such that I don't want to delay the (already very close) 2.3 release.  It could be done in tandem with multiline labels #305, so it should be good for 2.4.  Thanks\n. Deferring; no time and release should not be delayed\n. Increasing priority, but 2.5 already has a lot planned for it...\n. Issues off the top of my head:\n(1) Label placement : This needs to be consistent for all types of edges.  Similar to the existing labels in the middle of an edge, they should be on the edge stroke.\nEdge arrows have a collision point with the node defined, but this probably isn't a good place to put the label.  Instead, you'd probably want the label put along the edge, some distance away from that point so the label isn't right by the node.  \nThat gets more expensive for curved edges.  It becomes a mess for edges with multiple segments (segment edges / multiple bezier points / a.k.a. edge bends).  Then, we also have to take into consideration that edge labels can be autorotated: This makes edge bends even more complex and expensive.\nSupport for haystack edges is near impossible.  A haystack is randomly placed within/along a node.  No collision point exists -- and for good reason: performance.  Labels wouldn't be well placed at all.\n(2) Properties : What properties are defined to support this?\n- source-label : text for label on source side\n- source-label-offset : distance from intersection/collision point to place the label\n- Do we repeat every single edge styling property for individual control, or do we keep the same style for all edge labels?  Separation would mean almost all of these properties would be duplicated: http://js.cytoscape.org/#style/labels  That's not just a mess in the code, but also in the documentation.  Duplicating the properties would make style calculation much slower.\n- and repeat and replace source with target\n. This quick sketch should clarify.  It uses a straight edge for simplicity.  The curved and segmented cases are more complex.\n\nRotation would not be relative to the edge direction.  It ought to be manual. Additional cases can be added after as separate features.  The autorotate option would be added first, and then the feature you describe could be added on top, e.g. source-text-rotation: autorotate; source-text-rotation-offset: 90;.\nSimilarly, the label offset is along the edge -- not to denote above or below.  That's a completely separate feature that ought to apply to all edge label types, and it should be done separately after this.\n. Before anything is implemented, there ought to be a full specification of the properties and behaviour.\nTo start, let's just focus on the source case.  That can be implemented first, and the target case is analogous.\n- source-label : the text\n- source-text-offset : the distance as specified in the image\n- source-text-rotation: autorotate | none\nEdge types:\n- straight / single segment : As image above\n- multiple segments : As image above, but may be along multiple segments to get to the specified distance.\n- single bezier: Calculating the distance along the bezier directly would be very expensive.  Since we use quadratic beziers, it may suffice to use a linear approximation.  We already calculate several points along the bezier for the purposes of bounding boxes.  Those could be used at a starting estimation, and then a binary search could yield a more accurate approximation -- or maybe just a linear interpolation between the points would suffice.\n- multiple beziers : The approach is the same as the single bezier case but you first have to find which bezier the label would be on, similar to the multiple segments case.  The existing bound box points are probably enough to estimate each total bezier length for determining which bezier to select.\n- bezier loops / compound bezier loops : This would be the same as the multiple beziers case, as each loop is made of two quadratic beziers.\n- haystack : Probably can't support these\nIt's important to note that in segment/bezier selection, it's more performant to compare distance squares rather than distances.  Squareroots are expensive to calculate.\nFor the straight/segment cases, the autorotate angle is already calculated for the regular label.  The multiple segments case may need another calculation, because they may not share the same segment.\nThe bezier angle can be estimated using two points along the curve.  This is already done for multibeziers, and the same approach can be taken here.\n. Everything has been refactored to support the new labels.  What's left is mainly the calculation stuff, which I described above.  You can see all todos with a search of TODO #382\n. Does everything work as expected on your Android phone without Cordova?  Are you running a recent version of Android (e.g. 4.x)?\n. Do you have access to the browser debug console when debugging your Cordova app (either in the simulator or on the device itself)?  Do you see any errors in the console?\n. @fedmich Any updates?  Does the issue persist with 2.0.4 or a snapshot build of the trunk (make zip)?\n. I highly suspect this is due to Cordova using an inferior browser environment on anything but the latest 4.4.  Use Crosswalk instead for embedded Chrome or only support modern Android on Cordova.\n. Try this build and let me know if you still run into the issue: https://dl.dropboxusercontent.com/u/5671307/cytoscape.js-github-snapshot-2013.12.03-11.30.12.zip\n(This link may no longer be active after the issue is closed.)\n. There must have been a problem with Dropbox.  I've uploaded it again to the same URL.\n. Perhaps this is an OS-specific issue.  I can't reproduce this on the latest OSX (10.9) and Chrome (31).  I've tried running the debug page locally and behind Apache and all is OK in both cases.\n\nOr are you using any addons/extensions in the browser?  Try disabling them.\nHave you customised the browser in any way (e.g. enabling experimental features)?\n. Closing unless someone can provide more evidence that this isn't fixed.\n. This is expected behaviour.  If zooming is disabled, you can't zoom at all -- whether it be programmatically or via user input.\n. Please make zip and see if the snapshot build you get fixes your issue.\n. To clarify, what you're looking for then is an additional option that would allow programmatic zooming but disallow user event zooming solely on the renderer level (i.e. no mouse wheel zooming)?\n. e.g. options.zoomingEnabled = true but something like options.userZooming = false\nNote though that for some option like options.userZooming = false, it would mean that both mouse wheel zooming and pinch-to-zoom would be disabled -- since both those zooming mechanisms are \"user event zooming\" on the renderer level.\n. Repurposing ticket for options.userZooming feature\n. TODO document\n. @stanley-gu , @rmosca \ncy.userZoomingEnabled() and cy.userPanningEnabled() and their init option counterparts have been added.  If you make zip on the trunk, you'll get a built cytoscape.js with the changes.\n. Support for canvas and other modern web technologies are not well supported in IE, especially older versions.  The latest version, 11, seems to be more acceptable.  However, I wouldn't expect very old versions like 8 and 9 to work well.\n. You can try the older Cytoscape Web (http://cytoscapeweb.cytoscape.org) that uses Flash, though it is being phased out and no new features will be added.  Unfortunately, if you want to support old browsers like IE 8&9, you probably won't be able to create a sophisticated webapp.  Modern technologies require a modern browser.\n. Unfortunately, cy.js can't track whether the size of its div changes.  If the window is resized, which results in a reflow of the page, then we try to update accordingly -- but this is a special case.  For some reason, the library you're using is causing cy.js' canvas to clear.  From my experience, resizing the cy.js div does not generally cause this to happen -- the worst case is usually that the graph is either too large or too small for its div.\nWe could add an interval to check whether the div has changed size, but this wouldn't be a good solution.  It also would probably also not be timed just right after the actual resize, generating a shifting or flicker effect.\nBecause of the way that cy.js schedules frame drawing, you won't see anything in this case until a new frame is necessary (e.g. viewport change, element style change, etc).  So, I've added cy.forceRender() which should cause a new frame to be drawn.  You should call this function just after the event where your library resized things and clears cy.js.\n. TODO add documentation\n. @kit- In general, it's not a good idea to share options objects across instances.  There also was an issue in the layout itself, and it should work for you now either way.  You can make zip to build the latest code.\n. I must have been thinking about something else with regards to the sharing of init options.  Because they're only read, it shouldn't be an issue.  In either case, you shouldn't run into this issue anymore.\n. It works out of the box on the multiple instances demo: \n\n. Not currently.  Remember that setting via ele.css() is an override, similar to setting the style tag in HTML for a DOM element and should be used only in special cases.  Have you tried specifying a stylesheet on init and specifying classes for the added elements?\nIf you absolutely need to, you can just use ele.css() after cy.add().  Remember cy.add() returns the added elements:\njs\ncy.add({ /* some options */ }).css({ /* some styles */ })\n. Created separate repo for panzoom:\nhttps://github.com/cytoscape/cytoscape.js-panzoom\nWaiting to see if plugin gets picked up by jquery plugins site\n. Success http://plugins.jquery.com/cytoscape.js-panzoom/\n. I believe this may be an already fixed issue.  Have you tried make zip on a clone of the repo?  That will give you a build of the most uptodate cytoscape.js.\n. This has been fixed in the trunk.  If you make zip you'll get the latest cytoscape.js file built for your from source.\n. The problem with specifying arbitrary points as bezier control points is that they would not adjust as node position changes.\nYou could use more generic properties, such as:\n- control point weight (a value on [0%, 100%] that specifies how far along the line from source to target the control point should be placed)\n- interedge control point distance (a pixel or em distance that specifies distance between successive control points for source-target edges, perpendicular to the source-to-target line)\nWould this suffice for your use case?\n. I suppose control point weight could be an absolute pixel value or a percent.  The absolute case would allow for more fixed edge shape but would still allow for the edges to update appropriately when nodes are moved.\n. Both are proposed properties and don't exist yet.  I'd like to have a good definition of the feature to make sure it fits your usecase and is generic enough for others prior to implementation.  Let me know if these properties would allow you enough degrees of freedom for your usecase, and if not, we'll work out some set of properties that does.\n. Straight edges with bends would be a completely separate implementation from this, which uses bezier curves and it simply modifying control points.\n. See http://stackoverflow.com/a/41646675/947225. This is expected behaviour.  Only one layout may run at a time.  In the ready callback, the graph is loaded but the initial layout may not have yet finished.  Your setTimeout() example works because for the graph you have, the layout has finished by the time the timeout callback is executed.  You should specify the layout you want to use in the init options.\n. It may be useful to note that continuous layouts like arbor will probably not be finished by ready but noncontinuous layouts like grid etc are finished on ready.\n. This complicates the support of animations, which would otherwise just be specified in a JS array.\n. Requires changing meta comparator brackets { and } since they are needed in the stylesheets\n. @aschriner If you clone the repo, you can test support of the string stylesheets easily in the debug page.  There's a textarea where you can paste stylesheets and apply them.  It would be great if you could try it out and let me know if you run into any issues, since you already have string stylesheets made.  Or maybe you could paste some of your stylesheets here for reference.  Thanks -M\n. All mappers, selectors (incl. compound node selectors), and styles should work equally well in JSON stylesheets and string stylesheets.\nAs you noticed, :hover will not work because it's not parsed as a valid selector.  We didn't want to add support for something by default that wouldn't support touch devices: :hover can either ignore touch devices altogether or it can cause an intermediary state such that the first tap triggers a hover and the second tap triggers an actual tap.  Both solutions almost always result in bad UI, so we don't support :hover at all.\n. It's also worthwhile to note that commas are supported in selectors, so\nnode, edge {\n  /* some style */\n}\nand\nnode,\nedge {\n  /* some style */\n}\nare both supported just like in native CSS stylesheets.\n. If a dev wants to use hover, he can write a few lines and use a class instead of a state selector.  There's nothing preventing you from using hover if you want.\nI can see where you're going with your argument, but I think it's actually the opposite: Just because a subset of devices support something, we shouldn't punish all the remaining devices by depriving them of features by default.\nIn desktop-only projects, hover may be OK.  For other projects, hover is not sufficient.  That means that you need to handle touch in some analogous way for your particular app, or it means you need to handle the entire feature in a consistent, device agnostic way without hover at all.  Most commonly, devs will do neither if :hover is available to them -- leaving touch devices without a feature.\nMore often than not, the second option is superior because it offers uniformity.  For the first option, I think it's better to have the dev write a few lines so he can consider touch support as well.  Using custom events, those few lines also allow him to generalise a gesture on top of hover for desktop and some other action on touch.\n. I believe that passing strings as position values would indeed cause problems (your example links give 503 errors, so I can't check).  We could add some type coercion to make things more convenient, but you should make sure you're passing numeric values in the meanwhile. Thanks\n. Looking through the source code, this would be undesirable to add to the library itself for reasons of performance.  Setting position should be as fast as possible for layouts etc (esp. consider for all elements in the graph with several calls in a row), and so adding parsing is inappropriate.\nPlease make sure to sanitise your position values if they are strings before you pass them to cy.js.  Only numeric values must be used.\nSide node:  The reason it seemed to partially work for you with strings is because of some JS autotypecasting -- a fluke.\n. Good idea, though implementation for this will be generic to support all positioned events.  Thanks\n. e.cyPosition gives model position for ONLY user input events\ne.cyRenderedPosition give the position in rendered coordinates\n. We're working on documentation along with migration to the jQuery plugin system for 2.1.\n. Edges are unsupported at this time.\n. Most dialogue/menu plugins will allow you to manually position and show the UI.  Instead of initialising on an cy.js element (not possible because there is no corresponding DOM element), initialise elsewhere.  Bind to cy.js for tap or similar, and specify the UI position based on the edge/event position.\n. You could also modify the cxtmenu plugin to work with edges.  It just was never needed/tested until now.\n. See https://github.com/cytoscape/cytoscape.js-cxtmenu/issues/1\n. Looking at the code, the z-indices range between -2 (the lowest, a buffer) and 5 (the highest, selection) inclusive.\nWe could introduce a parent container inside the cy div with position: relative or position: absolute and z-index: 0.  That would help in some cases.\nHowever, it's important to note that z-index has a hierarchy, and so a parent's z-index is considered like a more significant digit in overall z-index comparisons.  Only z-indices at the same level are used for comparison in the DOM.  That is, if you place the cy div under any div with non-static position and a defined z-index, then you'll have to consider that parent div's z-index when defining the z-index of dialogues etc.\nHav you made sure your CSS isn't changing things and that you're not putting anything else in the cy div?\n. Try initialising cy.js the same way but disabling all cy.js plugins and as much of your UI as possible, and then gradually add things back.  That may tell you what's being added in there.\n. Maybe it's the \"cytoscape.js\" advertising overlay (which I've removed in the trunk)?  Have you tried options.showOverlay: false?  You could also make zip on the trunk to get a snapshot.\n. I think it just doesn't draw to the canvas in that case but the canvas is still visible.  Try make zip to get a snapshot build.\n. Duplicate: #192 \n. Please make zip on the cloned repo, and try and see whether the built snapshot fixes this issue for you.\n. Thank you for noting the issue in the tracker here.  It helps to improve cy.js a lot!\n. Great!\nTwo things: \n(1) Implementing this for all possible cy div positions via CSS requires #399 \n(2) The code you forked is out of date, because I just recently started migrating plugins to the jQuery plugins system.  So now, the plugin has its own repo (with lots of bug fixes & improvements): https://github.com/cytoscape/cytoscape.js-cxtmenu\nOnce #399 is implemented, it should be pretty trivial for me/you/anyone to add support to the plugin for edges. \nThanks!\n. Unfortunately, jQuery.offset() isn't sophisticated enough if borders, position:absolute, or position:fixed is used, etc.  It will probably work for now for your case (and most cases), though.\n. Closing this; follow https://github.com/cytoscape/cytoscape.js-cxtmenu/issues/1 instead\n. You can grab the original event in e.originalEvent, but you'd still need to duplicate some calculations the renderer does for figuring out where the event position(s) translate to within the viewport.  This gets more complicated depending on how the cy div and its parents are positioned via CSS.\nBest to wait on this: #399 \nIf #399 satisfies your needs, then please close this ticket and follow #399.  Thanks\n. My mistake. Another change I'll make once event positions are supported.\n. Looking at this more, it seems you want the position of the cxttapstart event.  That wouldn't be available or relevant to pass to select(), because selection occurs on cxttapend.  You can bind separately to cxttapstart and get the position of that event with the changes to the API for #399.\n. I've looked into the issue, and it seems it's due to having large nodes and bezier curves in combination.  I've tried some solutions, but they have so far been unsuccessful.  It looks like this will require more significant changes to how control points are calculated.\n@chrtannus It looks like Yue's control point calculation is problematic for large nodes and it may require a compete rewrite to fix.  Maybe we can take a look at this tomorrow along with the method Cytoscape Web uses (since we know that to be working).  Thanks\n. @aschriner This looks like a serious issue so I'll try to get it in for 2.1.  Thanks\n. Edge control points put between boundaries of nodes rather than between their centres:\n\nProblem 1: Edges flip visual indices when nodes very close\n\nProblem 2: Depending on shape, the rendering can be incorrect for very close/overlapping nodes\n\n\n\n. Flipping has been fixed by rewriting the control point positioning code.\nCause of second issue: If the control point is within the bounds of the source/target node shape, then start/end points can not be calculated (undefined). \nSolution: In this case, we should do a line intersection from the other node's centre to the control point with the overlapping node's shape.  Then use that intersection as both the replacement endpoint and control point.\n. @aschriner You should use ele.json() prior to 2.1 or this update from the trunk.\n. @aschriner Really, you should be using this new function eles.jsons() in most cases, because you don't want to modify the whole graph state but rather just the elements in the graph.  In any case, you can try it out in the trunk.\n. If it's used in cy.load() or init, you need to use a preset layout or similar or else the init layout will override positions.\n. If you build from source via make zip, you'll get this change.\n. That's correct.  Before if you didn't have java, you'd get the same error message trying to run the yui jar.\nIn general, a Makefile doesn't install build tool dependencies for you.\nI've added a concat target that builds only cytoscape.js but not cytoscape.min.js.  If you want the minified version, change the Makefile to use YUI or install unglify-js.\n. Edge labels on top of nodes; fix\n. Thanks; I'll look into it\n. For fitting & beziers: Fitting seems to depend on the renderer drawing the edge at least once, writing bezier points to a struct.  This struct will have to be calculated at init prior to the first draw somehow.\n. That may or may not work, as the graph is not necessarily rendered on ready.  You could try initrender instead.\n. Upon further analysis, this is a more complex problem w.r.t beziers and fitting.\nIssues:\n1. Points along bezier need to be calculated prior to fit. \n2. As a result, we need to calculate edge control points.  This is expensive.  We can't just calculate this every time we do a BB or a fit etc.  It's too expensive.\n3. Guaranteeing a render first is not a good solution, because this would consistently cause layouts to flicker.\n4. The mechanism for this would be a bit messy.  Initial ideas for options: We could (A) use some special fit function just for use in layouts, or (B) modify cy.layout() so that individual layouts don't fit.  (B) is problematic if a layout uses something other than cy.fit() for fitting, such as cy.reset(), or if we want to fit on layoutstop rather than layoutready.\nOption (B) isn't as flexible as (A), but (A) breaks backward compatibility of layouts and requires more documentation that must be strictly followed for layout writing.  Leaning towards (A), but maybe there's another option.\nIn any case, control point and edge position projection needs to be refactored from the renderer into the core.  I'll continue with that for now.\n. Also needs to take into consideration compound nodes and autoWidth/autoHeight, complicating things further.\n. Edge projections refactored, but label projections problematic: Label height is always the font size, but width is calculated directly by the canvas: context.measureText( text ).width.  If we used this elsewhere (i.e. for initial fit), then we'd need to create a dummy canvas, update its state, and call this function.\nIs it even worth considering labels in bounding box or fit operations at all?  This will only be complicated further if we use HTML rather than context.fillText().  In the HTML case, you couldn't measure the size of the label/content at all without rendering it somehow.\n. The issue is more pervasive and affects layouts that use any sort of element dimensions, such as cose.  There's a dilemma here:\n- Dimensions/positions for some elements (e.g. parent nodes, edges) can't be calculated before specific nodes have their positions set.\n- To set initial positions (i.e. init layout), these dimensions may be needed.\n. For BB: Simple but slow solution: recalculate all projected element points (labels, edges, etc) at start of BB calc\n. I think this should do it.\n. Changing title to \"dimensions incorrect\"\nIt seems the problem is that Yue's polygon points generator tries to prioritise equilateral shapes when width === height.  It should instead use the specified height and width as a bounding box and place the shape within it.\n. Issues w/ overlays\n. The breadthfirst layout isn't designed to work with compound nodes.  Have you tried cose?\n. Root cause of #420 \n. #420 can partially bypass this fix, because cose calculates its own bounds and positions for compound nodes.\n. updateAllCompounds() should not be part of the renderer.\nInstead, each time a node position changes, it should update its parent's (if any) position and dimensions.\n. It looks like a network failure, though 2.0.4 is missing in npm.  In any case, I've made a 2.0.5 release and published it to npm.  The Cytoscape guys will probably need the 2.0.5 release anyway.\nTest:\n``` bash\ndevicel:tmp max$ cd /tmp\ndevicel:tmp max$ npm install cytoscape\nnpm http GET https://registry.npmjs.org/cytoscape\nnpm http 304 https://registry.npmjs.org/cytoscape\ncytoscape@2.0.5 node_modules/cytoscape\ndevicel:tmp max$ node\n\nvar cytoscape = require('cytoscape')\nundefined\ncy = cytoscape({ elements: [{ group: 'nodes', data: { id: 'foo', bar: 'baz' }  }] })\ncy.$('#foo').data('bar')\n'baz'\n\n\n```\n. You may want to run the latest node:\ndevicel:cytoscape.js max$ node -v\nv0.10.25\n. Looks good.  One thing of note is that in that particular case the use of != rather than !== looks like it was intentional rather than checking against both undefined and null.\n. That's probably true in most cases.  If I remember correctly, registration can fail in some edge cases. That makes the check necessary. \n. Thanks.  I'll look into this.  To clarify, you're hiding via display: none and not visibility: hidden, right?\n. So, this probably happens because .eles.show() and eles.hide() are using a bypass.  In general, it's better to use stylesheets instead of bypasses (e.g. ele.css()).  You could use a hidden class instead until this fix is included in a release.  It's a better approach anyway.\n. Duplicate of edge bends : #344 \n. Undo and redo should be part of a separate MVC library or your app itself.  It would be unwise to include it in cy.js itself, because it can only handle the graph model -- rather than the entire app model, as an undo manager should.\n. Add after 2.2.0 release\n. https://github.com/cdnjs/cdnjs/pull/2828\n. Assuming O(1) implementation of array.splice(), you can just use an array for Dijkstra.  Keep the array sorted by using a binary search for inserts via splice().  This gives O(n log n) overall, with the added benefits that (1) you don't need a heap and (2) the removal for smallestDist() is O(1) rather than O(log n) as in a heap.\nAs for Prim, we already have Kruskal, so I don't know whether it's necessary to have both.  Both only work on undirected graphs.\n. As for if you want to add a heap, you'd probably have to create a separate heap.js file. \n. Looks great!  Go ahead and I'll merge the changes into the 2.2. branch.\n. Do you have a jsfiddle or similar example that demonstrates the issue?  I can not reproduce it.\n. We'll consider adding this algorithm to the GSOC project 14: http://nrnb.org/gsoc/\n. These algorithms will probably be aligned with a 2.3 or 2.4 release.\n. Possible but too expensive on further analysis -- requires context.clip(), context.save(), context.restore() for each node.\n. Because node shapes are highly coupled to the renderer technology, this is not possible.  You have to modify the library and make a pull request to add a shape.\n. Possibly same as #153 \n. I've been thinking about this, and there are a couple of implementation paths, but it depends on how these decorations are used.  If they are purely decorations (like shapes) as in #153, then background-images suffice given the style properties that can be used to size and position them.\nIf these decorations have data associated with them, have programmatic/dynamic shapes, or have edges connected to them, then really compound nodes should be used rather than complicating the concept of node shapes.\nThis may require some more sophisticated semantics for compound nodes:\n- Child nodes should be able to be positioned relative to parent or viewport #530\n- ele.rootPosition() & ele.renderedRootPosition() #531\n. Closing; refer to #530 and #531\n. Maybe you set your image too big or small.  There is no autoscaling options for you until 2.2.  I can't offer much help unless you provide an example of the problem on jsbin or jsfiddle etc.  Everything is working fine when I try.\n. Closing; please reopen if you notice any issues\n. http://cytoscape.github.io/cytoscape.js/#notation/position\n. You should consider using npm or making sure you pull down from a tag, because there is no guarantee of stability in the repo between releases.\n. Good catch; thanks\n. Fixed\n. You can gulp build to get this change until the next minor release.\n. Since the added nodes are just nodes, it probably would be odd to have API to align certain nodes to other ones.\nIf your app has special semantics for the nodes added by the plugin, like you suggest, then you can simply add those restrictions.  In your case, you'd ungrabify the intermediate nodes and listen to when non-intermediate nodes are moved.  You can then just set the position to the appropriate intermediate node.\n. Because eles.parent() and eles.parents() both work on more than one calling element, the ordering would be a bit confusing.  As it stands, the returned collection is ordered in levels, though you really shouldn't depend on ordering unless explicitly documented (e.g. results of bfs).\nIt sounds like your common ancestor feature should then be its own function.  Do you want to create an issue for that?  I suppose there could be several variations, like closest common parent, farthest common parent, etc.\n. Possible functions:\n- nodes.closestCommonAncestor()\n- nodes.farthestCommonAncestor()\n- nodes.commonAncestors()\n. Redundant; same as nodes.position(obj)\n. Test in Chrome nightly\n. May also be able to use this for hittests\nEdit: No, won't help\n. - Needs to be agnostic of position => need to also change node shapes\n- drawNode() moves to node pos'n so that paths are cached w/ dims but not pos'n\n- Some other bugs to fix too re. paths & polygons\n. Right now, background-opacity doesn't apply to background-image or to pie-i-background-color.  They are like layers on top of the background colour.  It may not be possible to join them, because doing so would negatively affect performance even when images aren't used. \nFor your usecase, it seems you could alternatively set background-image: none.  In general, a background-image-opacity property and a pie-i-background-opacity may be useful.\n. Bug: compounds get doubly added to list when some compounds priorly selected\n. Helps a lot in general, but can mostly just be applied to edges.  It seems the browser caches the style, so we may not have to add that overhead.  Changing the draw order for nodes isn't possible without close nodes having overlapping labels.\n. Won't really help since bounding boxes are used first\n. Can't use w/ layered canvases; dismissing\n. Better idea: Separate demos to illustrate individual performance options\n. Renderer sets buffer canvases attrs but not css dims\n. You need to build the library via gulp build or wait until the next version is released to get this change.\n. Looks to be mostly optimised on further reading\n. Export PNG and use that as texture => zoom requires only one real redraw with subsequent redraws just a transformation of that bitmap\n. Will only help with exact states toggling back and forth.  Novel states or combination states will get cache misses often.  Lowering priority.\n. Issue: Can't determine nonmatching selectors without full style calculation; closing\n. That's an interesting idea, but it's more suited to a plugin -- similar to how edgehandles is used for editing.  There are edgecases to consider, like size mapped to a data property, that a plugin would handle with options.  It's also outside the scope of the core (managing graph state) and the renderer (drawing elements).\nIf you're interested in writing a plugin, it's documented here: http://cytoscape.github.io/cytoscape.js/#plugins\n. The redrawing could be expensive depending on the graph size. If a node is active, it's drawn in a separate layer. You may have better performance by having the dragging on a node itself, while ungrabifying during the gesture. \nDebouncing mousemove may also help.\n. Closing, as it's unrelated to core\n. Look at this at a later milestone; 2.4 should be prioritised to be released\n. - Applying bypasses may be able to be made faster?\n- Storing animations as used by stepping could be more performant\n. I'll get this in for 2.2.4\n. Not needed with cy.batch() #534 \n. Surprisingly little performance difference; panning\n. No, the parent data field is immutable, just as source and target are for edges.  It's analogous to HTML:  You can remove and add an element somewhere else, but you can't directly move it.\nWe could purpose this ticket for some extra API functions that would make it easier to do things like that.  For now, you can manually remove and add elsewhere.\n. If I remember correctly, back when Yue was first creating the canvas renderer there were a bunch of edgecases where that function wasn't working across different browsers so we have an older, more manual (an expensive) solution.\nNow, it's been a while and it's probably safe to test things out with getBoundingClientRect().  I'll have to test this out with a number of different positioning styles to make sure all's OK with the new solution.  I hope so, because it may also have a noticeable effect on event performance.\n. Try this: https://dl.dropboxusercontent.com/u/5671307/cytoscape.js-snapshot-1398446271869.zip\n. When I scroll on the debug page, it invalidates the cache elsewhere in the renderer.  Can you send me a ZIP of your code?\nThe problem is getBoundingClientRect() gives more reliable coordinates, but it's harder to cache.  The caching should be there for performance (DOM dimension reading is expensive so it's all cached now).\n. I suspect that the scroll events aren't being detected, so I may have to make the scroll detection a bit more sophisticated.  I think yours is probably just an edgecase it's missing.\n. Looks like it's because scroll events don't bubble like most events.  Checking all parents manually.  Tested on modified debug page, but should work in your case too.\nSnapshot build:\nhttps://dl.dropboxusercontent.com/u/5671307/cytoscape.js-snapshot-1398471378494.zip\n. The code for this hasn't changed and I have confirmed it working locally.\nCytoscape.js can only detect if a scroll happens in a parent div.  If the event is killed somehow (e.g. e.stopPropagation()), there's nothing it can do.  If you can detect the scroll yourself and call cy.resize() each time, it should act as a workaround.  If not, you'll have to file an issue with IPython/Jupyter -- as the issue seems to be on their side.\n. @AaronWatters cy.resize() is automatically called if any ancestor DOM element is scrolled.  If you move the cy div around in the DOM, then you've broken the automation.  If you want to move things around, your options are:\n(1) Use CSS instead.  Changing the DOM hierarchy shouldn't be necessary for visual changes.\n(2) Create your instance in its final location.\n(3) Create a new instance each time you move the DOM elements.\n(4) Call cy.resize() when your app encounters a scroll event.\nIf you want things to be automatic, then don't move the DOM hierarchy around.  If you really want to move things around in the DOM, you'll have to handle things manually via (3) or (4).  This is standard fare for an app: An app must handle resizes and moves with cy.resize().\n. @AaronWatters Having an additional interface wouldn't help, because you'd need to call it at that time after the DOM element is repositioned in the tree.  If you don't know when that is, you can't call the function at the right time.  And if you do know when that is, you may as well just init at that time.\nUnfortunately, it's not possible with current web APIs to do all of this in an automatic way that's also performant without knowing exactly how a dev's app is structured.  It's the same case for other UI libs like Leaflet: http://leafletjs.com/reference.html#map-invalidatesize\nI've improved the docs re. cy.resize() and moving the tree around.  Thanks for the feedback\n. Find subgraphs and do BFS layout for each\n. This would be on the 2.3/unstable branch, so you'd have to use an unstable version until 2.3.  Or, you could pull in just the layout under a different name.\nYou can find the subgraphs with kruskal and then do a bfs on each.  The nodes are organised in rows and columns currently.  Maybe you could offset the columns for each subgraph to lay them out sidebyside.\nThere are some other changes that would probably go in, depending on improvements to other layouts at the same time.\n. I think it's a coincidence as a result of how the elements are generated on that page -- in cliques.\nTo be generic, you'd probably want to find the disconnected components and possibly sort the nodes by degree.  There are a lot of little improvements that could be made to all layouts, but it's probably most useful for BFS.\n. Reassigning to 2.4; there are other layouts for trees now so this is low priority and not delay worthy\n. I don't think using subgraphs on the breadthfirst layout is a priority now, given that dagre already does a very good job of that.  The breadthfirst layout fills a different niche where strict and flat comparisons of levels are useful.\nClosing for now\n. cy.resize() resizes the viewport whereas cy.layout() repositions the nodes (using the available viewport space)\n. No, use simple arc edges in your stylesheet instead #572 \n. Great feedback.\nHere are my initial thoughts:\n(1) All functions that accept selectors also (internally -- may not be documented?) accept filter functions instead of selector strings.  This is because a selector object should be able to accept a filter function and use that in lieu of an essentially generated filter function that uses the parsed string.  So, internally, we could use filter functions in place of selector strings -- which would bypass part of your issue.\n(2) This still won't fix the larger issue that selector strings won't work with IDs like you specify -- even if quotes are escaped (e.g. \\\").  I think the offending matching in the selector is here: https://github.com/cytoscape/cytoscape.js/blob/master/src/selector.js#L93\n(3) Even with (1) and (2) both implemented, you will still run into problems where the dev creates a selector using ele.id() or similar with certain quotes.\n(3) may be unresolvable other than noting that quotes must be escaped when used in string values in selectors.\nI think implementing (1) and (2) and documenting (3) should suffice.  Thoughts?\n. The problem with using printf() like syntax for selectors is that it would have sweeping -- possibly breaking -- implications across the API.  Where there was once just a single parameter for a selector, now there would be at least two where arrays are used or n + 1 where extra parameters are used.\nI think requiring escaping quotes should be acceptable for selectors.  Selectors aren't just used programmatically but also internally in your stylesheets, so the full string option would always need to be there -- meaning devs could use or misuse it regardless.\nAs an aside:  You may be interested in using UUIDs or similar in your framework.  From my experience, the kind of ID string you're using is problematic in general (i.e. it's very likely you can't use the IDs as DOM IDs, frameworks/libs tend to have problems with it, etc).  I'll still be implementing (1) and (2), but UUIDs will probably save you headaches in the long run.  Up to you.\n. NB: Impacts not only drawing but also hittests etc\nShould have way of getting position relative to viewport if position: parent \n. Requires #531\n. Decision: always specify position absolutely but position relatively w.r.t. UI\n. @eallik From the user's perspective (using the UI), positioning of children is relative.  In the model, the position is always absolute -- with convenience functions that allow you to specify a relative position that sets the absolute position accordingly.\n. With these different types of positions, it may be useful to have a position type that can be converted back and forth.  \nIssue: This means every call to eles.position() et el causes a new object to be created rather than just passing a reference to the internal position object.  A position.clone() could be provided instead to avoid the overhead but that adds more protocol.\n. jsperf shows little overhead for prototype w/ pos.clone() so long as .clone()s are explicit (not with every op, creates too many new objects)\nhttp://jsperf.com/copy-position-plain-obj-vs-prototype\nSo, we can provide a position prototype if need be\n. I take it back.  It's just Safari that handles this performantly.  Anything but the plain object suffers especially in Firefox.\n. For dirty eles bb:\n- Receive dirty eles from notification\n- Get dirty eles bb\n- Limit bb to viewport extent\n- Use dirty eles bb as clipping box\n- Use dirty eles bb as alt to viewport extent for excluding eles from draw (NB some eles not dirty may have to be redrawn if they overlap the bb)\n. Active indicators need to be taken into account\n. The viewport extent works well when only a subset of the graph is viewed.  The dirty bounding box kind of works, but there are many edge cases where it fails:\n- Active overlays (not included in BB); could be moved to selection layer\n- Style/position changes since last draw\n  - This is an issue\n  - You need to clear where the element was and where it now is\n  - Keeping track of previous element state can be expensive and error prone\nDrop redraw regions for now but keep the viewport extent filter\n. Thanks; will also do #541 \n. You ought to be only ever sending valid parameters to cy.layout().  If you don't the behaviour is undefined, just like if you send bad parameters to ele.data() etc:  The parameters defined in the API are prerequisites, a developer contract, and going against it essentially means all bets are off.\nThrowing exceptions or otherwise validating parameters all the time adds unnecessary expense -- in general, and even more so if try { ... } catch(e){ ... } is used.\nDo you have a compelling usecase where this is necessary?  If user input is the culprit, it should be sanitised and/or validated rather than using error handling.\n. Only basic validation is performed for an internal assertion.  It is continued to be logged for convenience for the developer, because specifying a nonexisting or unloaded layout is a common user error by the developer.\nThese assertions/logs are meant to be hints during debugging -- not a replacement for validation/sanitisation at runtime for the user.  There are several reasons for this, including\n-  it's actually impossible to use exceptions for layouts and other asynchronous operations (consider continuous layouts using webworkers, etc);\n- it would introduce additional protocols for external layouts, making those layouts either harder to write or possibly noncompliant;\n- you should never trust external (e.g. user) input, so validation is always necessary;\n- and so on...\n. - nodes.outgoers()\n- nodes.successors()\n- nodes.incomers()\n- nodes.predecessors()\n. Should be able to\n- create collection from ele array\n- create collection from selector\n. It seems to be the main bottleneck for style calculations (and style calculations are done on element state changes and adding elements).\n. After some analysis:\nThe function itself seems to be performant, but there are a lot of calls to it for newly added elements as the contexts cache is built for each element.  During interaction, there are many less calls to style.applyParsedProperty() because of the cache.\nSome stats for adding 2000 elements on the debug page:\n- 187982 calls to style.applyParsedProperty() with 741 ms spent in the function => 0.4 ms per ele\n- selector.filter() uses 354 ms total\n  - confirmRelations() may not be necessary for noncompound graphs (takes 20% of filter()) #554\nIdeas to make adding elements faster:\n- For headless environments, you don't really need style.  Expose an init option to disable style and set to true by default for headless environments.  This will make adding, removing, and manipulating elements faster. #553 \n- Experiment with some kind of batching.  Maybe the fact that lots of elements will tend to match the stylesheet in exactly the same way can be exploited? #555\n. Closing; separate tickets for indirect performance enhancements to style application\n. Not entirely convinced that passing nonexistant elements to the function is necessary, but it's more convenient so the change will make it into 2.2.7.\n. Create a hash of the matched selectors in the stylesheet.  \nClear the hashtable on a new stylesheet.\n. Covered by similar improvement to style performance\n. Could you link to a description or example?  The most complex graph example for d3 doesn't have any kind of arrows or markers, as far as I can tell.\n. Adding to 2.3 milestone; could be useful for haystack edges which otherwise don't support arrows\n. TODO may need better angle for bezier curve mid arrows\nWorks well now on all beziers but those who have a steep slope on their midpoint\n. It's in the unstable branch, and you can gulp build to make a snapshot of the latest code (example today).\n. Confirmed working on large parallel bezier edge set; closing\n. Do this close to release when all new APIs are available to consider if more may be needed/convenient\n. - Improve extension pub docs\n- Make extensions work with require()\n. Requires #573 \n. Good enough for now, can add more later\n. Do this close to release\n. Thanks for the feedback.  Planned for 2.3.0; refer to #305 \n. Deferring to 2.4\n. Kind of defeats the purpose of their performance design; use more css if you really want: #616\n. Variant of haystack edges?\n. Unbundled beziers meet these requirements so closing\n. Lib we could embed:\nhttps://github.com/rse/thenable\n. Deferring to 2.4\n. TODO docs\n. TODO\n- Requires: Per-element layouts #355\n. Questions:\n- New layout stops old one and takes over? \n- Only one layout at once or multiple?\n- Granularity of adding/removing element from layout?\n  - Added: considered in layout, positioned\n  - Removed: not considered in layout, not positioned\n  - Added but not positioned useful for continuous layouts\n. Are you running the latest version of Safari?\n. The buffers need to be bigger to support some operations that cache a larger-scale rendering of the viewport.  I don't know if these particular buffers need to be added to the DOM at all (I didn't write that part originally, and it hasn't changed since).  A safer stop-gap solution is to set overflow: hidden to the canvas set parent div.\n. For 2.3: Remove buffers from the DOM if possible #586\n. Try this: http://cytoscape.github.io/cytoscape.js/download/cytoscape.js-snapshot-0096ce3a8b-1401469060527.zip\n. oveflow: hidden is used because it's better to minimise changes for bugfix releases.  This change will be in 2.2.9\nThe next major version, 2.3, may remove them from the DOM: https://github.com/cytoscape/cytoscape.js/issues/586\n. Or replace live thumbnails with cached one on build\nhttp://phantomjs.org/screen-capture.html\n. May require tests & setters for .json() functions to make sure we can serialise and deserialise graph state well\n. Velocity would be useful for this, because the animations I'd like for this plugin would need more state than what's available in CSS.\nhttps://github.com/julianshapiro/velocity \n. Going to need 2.3.0 APIs\n. Nope, needs 2.3 APIs to really handle all aspects of the infinite case\n. Only really helps with nodes, as edges almost always differ.  And nodes aren't the rendering bottleneck.\nIt could help with labels, but for cases like zooming they would constantly be invalidated or blurry.\nEdit: It would help with zooming and panning, which are the most common user operations.  This requires keeping cached images of the elements at various sizes.\n. Use a debounce on zoom events to invalidate the label caches.  That way, zooms are fast and the text is made clear quickly afterwards.\nEdit : Zooming still invalidates the cache, but only partially and possibly -- because there are different sizes cached.  Changing the style or data invalidates the entire cache.\n. TODO clean up w.r.t. label alignment (needs to be manual now) etc\n. After work done on #1194, a prototype estimate (without accurate element images but static random images) results in a performance increase of ~3-4x using canvas to blit the images\n1194 improved perf by ~1.5-1.6x\nTotal improvement estimate with canvas: 4.5x\nWebGL blitting of the images could be faster; this jsperf estimates 7-8x faster than canvas for blitting => 4x relative improvement to rendering over canvas impl => ~18x total speedup using webgl\n. Depends on #1226\n. Requires removing the hide labels during viewport operations rendering hint, because it conflicts.  Considering that this option was just a performance-related rendering hint and this cache adds a lot of performance, I don't think that's an issue.\n. The simple implementation with images stored per element per scale is OK.  It proves that drawing performance can be increased as expected with the cached images.\nHowever, performance degrades heavily beyond some large graph sizes.  It seems that having so many different textures/images/caches is expensive beyond some point.  In order to mitigate this, a caching strategy with a smaller number of larger sized textures will be used.\nEach texture is a wide strip, with fixed height and width.  The overall cache is divided into levels.  Each level has a height associated with it.  \nAn element is placed in the strip with the smallest height that is greater than the element's height so as to minimise wasted area in each texture -- while keeping the algorithm for doing so straightforward and cheap. In the worst case, the wasted height is the difference between successive level heights.\nAdditional strips are allocated in each level to accommodate more elements.  A strip is discarded when it is no longer efficiently using its space (i.e. many cache invalidations on it).\nThis cache strategy minimises the number of textures and minimises the wasted space in the textures.  This should help with the performance drawback noticed so that the performance gains are more consistent.\n. The approach in the previous comment proved successful.  It works well even when large numbers of elements are added to the graph.  The results are in line with the previous calculation estimates at ~3.5x speedup over 2.6 (with canvas only).\nRegardless of whether the shared or individual approach is taken, there are hiccups (framerate drops) when calculating the textures for all elements at once on zoom and pan etc.  Calculating the textures in smaller, queued batches may help.  The next-best texture could be used in the interim.\nNext, invalidating the cache for things like style changes needs to be added.\n. Invalidation working well.  There are glitches at the border of an element's bounding box -- but that's probably just a clipping issue.\n. The canvas-only implementation of this caching feature is working well, and its performance improvement is in line with my previous calculations.  Some parameters may need to be tweaked, but the algorithm itself is working well.\nNext is adding WebGL for blitting\n. Correction: Before WebGL, there should be experimentation with using temporary upscaling to prevent hiccups for cache misses (e.g. during zoom in).\n. Now, there's an approach with queuing to prevent hiccups.  It uses a queuing mechanism for textures with temporary fallbacks on previous caches.  The queuing has cutoffs in terms of its performance impact per frame to make sure that the framerate stays smooth.\nThere are also fixes so that edges don't reverse the performance benefits of caching.\nNow, WebGL should be able to be addressed.  Changes to the algorithm as it stands will likely only be tweaks to the parameters from now on.\n. Edges present an edge case in the caching mechanism, because they are often large.  This means using very large textures for many edges, which defeats the performance gains of the cache.  In order to improve edges, a layered approach will be used on top of the per-element cache.  This allows elements to share a common area by allowing for overlap, thereby increasing texture space efficiency.\nThe simplest case of the layer cache is one layer.  In this case, the layer is a texture of all elements.  This texture can be reused on zoom and pan operations to reduce the number of draws.\nThis can be expanded to multiple layers, where the elements are batched together in one of N layers -- based on draw order.  The multiple layer approach has benefits in terms of cache invalidation.  However, it requires more draws of large images.  Testing will show what number of layers is optimal.  (WebGL may allow for more layers, thereby mitigating invalidation cases.)\nThe layers are segregated by scale level so that rendering is crisp.\nInvalidation and testing are needed for layers.  However, initial tests show a ~23x performance improvement for pan and zoom actions compared to 2.6.x.  This is using canvas-only so far.  I suspect WebGL might make this even faster... (23 x 8 = 184)\n. Tweaking the parameters of the cache and some other changes have improved the performance of the layered cache considerably.  Graphs of size ~12,000 elements render at full screen update speed.  On my machine ~12,000 elements render at effectively 1,000fps.\nThis means that we can afford to use multiple layers, which will help a lot with expensive interactions like dragging elements and animations.  It will also help with the on-screen fill rate for texture upgrades.\n. To make the layers fast for large, spread out graphs, it looks like we need to share a common texture for all layers.  Because the layers have the same relative dimensions and are in powers of two, they can be organised like so:\n\nThere isn't another meaningful option for the placement of the second largest layer, and the remaining layers can follow in rows, filling each row until it runs out of horizontal space.  This wastes some space, but it keeps it simple -- and the 1.5x1 total area used is minimised anyway.\nThis assumes one layer per level\n. The shared texture for all layers is not efficient, because it's slow to do the drawImage() slicing.  I suspect the hiccups from large graphs may be due to element texture refinement: It may be too many texture switches on the GPU in the background.  \nRendering only the largest layer and filling the lower levels from the top one may help.  This would avoid misses using the lower levels of element texture caches, meaning that we would switch less often.  \nIt would also avoid scaling expense: The canvas tends to lose a lot of performance when scaling by a factor of less than 0.5 or more than 2.  Each step down is exactly 2, and we avoid expensive cases where misses would require scaling >2 or <0.5 -- because we never miss middle layers.\nWe may also just have to tweak the max layer area smaller for browser like Firefox and Edge that seem to choke on larger values.\n. ~~TODO use min-zoomed-font-size in all of the \"hit\" layer~~\n. The experiment for a shared texture for all layers failed.  However, the experimental branch did have some other changes that were ported to unstable today.  This improves performance for cases where the old implementation would hiccup.\n. ~~TODO box selection seems to distort / give bad bounding boxes for nodes~~\n. ~~TODO there seems to be an issue with element texture recycling; reproducible on the Cola demo~~\n. ~~TODO Image export (e.g.cy.png()) has degraded quality~~\n. ~~TODO hide options (labels, edges) on viewport not working~~\n. Added minimal-ui to <viewport> in docs; can't do much more as this is a Safari bug\n. Fix pushed to master & unstable; you can gulp build on master to get the changes or download a snapshot build:\nhttp://cytoscape.github.io/cytoscape.js/download/cytoscape.js-snapshot-beba6b3b43-1402067939441.zip\n. To summarise:\n(1) Pointy arrowheads (instead of triangular ones)\n(2) Triangle + tee combined arrowhead\n(3) Otherwise, I don't notice anything else new.  The little black dots etc should be implemented as nodes.\nAm I missing anything?  Once there's a more concrete list, I'll close this and create separate tickets for each new feature.\n. Do you have more exact examples or a description of those arrows?\nIf I understand the covalent bond example, it's not really a proper edge if the \"z\" is meant to go over another edge and points to no node.\nAs for the edge that look like square waves, that sounds like a separate issue unrelated to arrowheads.\n. The most problematic thing here is the edge as an edge's target instead of a node.  That requires not only style additions but sweeping changes to the model.  And that's assuming that it can be added without breaking the existing proper graph model.\nFor now, you're probably better off not following MIM explicitly, and creating intermediary nodes for interactions.\n\n. Issues:\n- Pointy arrowhead style #619\n- Triangle-tee arrowhead #620\n- Overshot hollow half arrow #621\n- Hooked arrowhead #622\n- Hypergraph support #623\n. Could be, but I suspect performance may be an issue for those styles.\n. This is in the unstable branch.  If you want it before 2.3 is released, you can gulp build on the unstable branch -- you'll have better performance and more features but may run into bugs.\n. Some points\n- These are very app-specific shapes.\n- For some of these shapes, drawing edges to them could be problematic.\n- There are technical and UI reasons against using multiple separate shapes as a single node (i.e. Golgi).\n- Cytoscape.js supports background images so you can customise how nodes look.\n  - You can use high-res images up to your required zoom level -- or SVG if you want to avoid pixelation altogether.\n  - Using a (probably faded) background image as a part of the node would allow you to use compound nodes to embed nodes within nodes.  If you're visualising parts of the cell very explicitly like this, you're probably going to want to do this.\n  - You can hide the real node shape if you really want (but really the node shape is useful more often than not).  In that case, you'll want to turn off background image clipping in your stylesheet for performance.\n. Needs tweaking for hit test & main line alignment\n. The only way this could work is if the arrow itself doesn't always point to the target node.\n. TODO reevaluate whether this should go in 2.3 or later; may have to wait until 3.0 because of API changes\n. Focus should be on features that maintain the graph model but allow visual representation of hypergraphs, like autoposition #628 \n. What you're asking for is separate from this issue.  Though node autopositioning is useful for simulated hypergraphs, what you're asking for is full hyperedge support in the API.  I'm not certain whether that would be appropriate to add to the core, but you should create a separate issue in any case.  Thanks \n. https://github.com/cytoscape/cytoscape.js-automove\n. Great!\nQuick question; just curious: Does the default zoom speed work consistently for you across browsers, or is this more of a config for specific usecases where you want really fast or really slow speeds?\n. Labelling as bug and advancing to 2.3.6 milestone -- not because it's technically a bug per se, but because without this behaviour things are less easy for users.  So, we should address this as soon as possible.\n. TODO more testing\n. I'm going to close this, as it seems to be working from my testing.  We can reopen if there is any issue.  It may be nice to experiment with different threshold values before release.\n. TODO threshold should not change relative node grab position.  This doesn't break anything, but it can be disconcerting to the user.\n. @ktei Would you please experiment with different tap threshold values?  I don't think think programmers would want to set this value manually, but I would like to ensure that the values set in core.js are appropriate.\nYou mentioned that you had users who had trouble without the tap threshold, so would you mind testing with those users to see if perhaps higher values are needed?  Thanks!\n. The tap threshold solves the issue you describe by not starting drag actions until the user has dragged beyond a certain distance.  This means that if you drag a node a little bit, it isn't dragged and it's detected as a normal tap (and select).\nIf you select on mousedown, you will run into trouble eventually -- as you have restricted the possible set of interaction states.\n. Perhaps TODO:\nThreshold on background tap operations; makes things like unselect easier.\n. That's fair, but perhaps it should be split into two options:  One option for mouse and one for touch.  I think the touch case and the mouse case need separate values, because the input accuracy is different between those cases.\n. @ktei I think that should be everything.  From my testing everything seems OK.  Please try things out, and if it looks good I can make the release.\n. Check event.cyTarget.  The originating target is either an element or the core (i.e. background case).\n. Thanks for the clarification; will look into it...\n. Checked all cxt* events.  This only affected right click on a mouse.  Fixed now so the event bubbles up as normal but is only triggered directly on the core if there is no hit target.\n. I can't reproduce the issue.  Please provide a set of API calls or a jsbin that reproduces the issue.  Thanks\n. Only reproducible in mapped styles\n. Tested with colour mapper & working OK now\nOnly affected that case because of a performance trick\n. Yes, this has been considered.  The reason it's not there currently is that we didn't want to maintain a separate SVG renderer that only gets used for export.\n~~We initially considered using a library for abstracting rendering so it could be output to canvas, WebGL, SVG, etc.  However, those don't give us enough control for the kind of interactivity and performance we want.~~\n~~This could be done as an extension with an external library dependency if there is a library that creates a canvas 2D context API that renders to SVG properly.~~\n- ~~https://github.com/gliffy/canvas2svg : Missing essential APIs~~\n- ~~http://svgkit.sourceforge.net/SVGCanvas.html : Maybe?  Looks promising, since it looks like they opted for accurate rendering over speed~~\n~~If you're interested in experimenting right now, you could try something like SVGCanvas with the undocumented/private cy.renderer().renderTo( cxt, zoom, pan, pxRatio ) function.~~\n. Maybe a different SVG library would be worth exploring?\nIf I recall correctly, SVG expects transforms to be on groups (<g>), so elem is probably expected to be a <g> element.  Because transforms in canvas stack, you could try embedding a group after each new set of transforms.  It sounds like SVGKit/SVGCanvas isn't very complete then...\n. I don't know of any libraries off the top of my head, so it would probably require more research.\nAnother alternative in the short term is to use a high-res PNG.  Maybe we could add/document some options for cy.png() so you can specify the dimensions or pixel ratio.\n. @acardona You may want to package your code as a reusable SVG extension\n@unidesigner I've added a ticket for specifying zoom in cy.png() : https://github.com/cytoscape/cytoscape.js/issues/659\n. I think that with the new performance enhancements and new features, we use APIs that are not supported in those canvas-to-svg libs.\nProbably, the most stable and least invasive way to export to SVG would be to add a SVG option to the canvas renderer.  This would involve adding a SVG option to the canvas renderer and adding SVG generating code to each of the low-level draw functions:\n(1) node\n(2) edge\n(3) edge arrows\nThen the renderer would be renamed to something other than \"canvas\".  Because the canvas renderer handles interaction on a low level, interaction with the SVG graphs would be free and probably much more performant than adding listeners on SVG elements.  The main tricky part is reusing SVG elements for performance.\nI don't have time to look at this now, but I could fork the unstable branch if someone is interested in trying to get SVG output from the renderer.  And I would be able to help out a bit if needed.\n. Unfortunately, it would be a very large undertaking and I'm not sure whether it will fit into the next release -- given the extensive changes needed in the renderer.  It also would double maintenance costs of the renderer for little pragmatic benefit over high-res PNGs.\nYou could use @tomka's method and indeed his change to disable Path2D for export could make it into a minor, patch release to make things more straightforward.\nIf you're interested in native support in the renderer sooner, I can review a PR that covers the changes I've mentioned earlier.\n. I've tried SVGCanvas and it works only in very, very simple cases.  It's not a reliable solution...\n. https://github.com/nrnb/GoogleSummerOfCode/issues/61\nThis project will use a similar approach with new calculated rendered values in 3.1:\nhttps://github.com/cytoscape/cytoscape.js/issues/1552\nhttps://github.com/cytoscape/cytoscape.js/issues/1551\nThe GSOC project (if accepted) will give a good initial version of a SVG export extension.  It will probably support all rendering features in 3.1.  For core versions beyond that, the extension will probably require community PRs for new rendering features added to the core.. Trying to use any of the automatic canvas-to-svg conversion libs isn't going to work.  It was only semi-working when cyjs just directly drew everything with the canvas fill/stroke apis.  Now cyjs is more advanced.  In future, cyjs will use webgl in places.  \nAt this point, using a canvas-to-svg is unrealistic and hacky.\nThe only way to have this working is to build a svg exporter extension that builds up svg objects based on the stylesheet and the other computed style values (like bezier points).\nPlease keep further discussion in this thread on the topic of an exporter extension for svg.. That particular example was exported from the Cytoscape desktop app.  The graph already had position data defined from the desktop app.\nYou'll notice those positions aren't actually being used, if you play around with the example.  Here it is with the preset positions from the export: http://jsbin.com/zoxab/1/edit\nYou can see that the concentric layout automatically positioned the nodes in the actual example, overriding the positions set in the elements JSON: http://jsbin.com/wuvac/latest/edit?js,output\nWhatever layout you use (or you can write your own too!) will automatically position the nodes in the graph.\n. Here's the list of builtin layouts: http://cytoscape.github.io/cytoscape.js/#layouts\n. Array.isArray() used by default; fall back on old mechanism if unavailable\n. You should use the latest version of your browser.\n. Nice.  I'll have to look at this a bit more to see if I can remove the context.save() and context.restore() calls before I pull this in.  Those calls tend to be expensive, so usually the inverse transform is applied instead to \"restore\".\n. Cool\n. Requires an outer circle for collecting haystacks\n. Doesn't seem to function well; deprioritising\n. You can use a snapshot build until 2.2.12.\n. Give it a try, and let me know whether there are any issues with it.\n. This causes issues where mouseover is wanted.\n. The issue is of context.  Edge length is function of source and target position, and those positions can be modified in several ways:\n- The layout positions the nodes : For force-directed layouts like CoSE and Arbor, you can set the forces appropriately to control edge length.\n- The user moves a node : Would require a new constraints-based system for restricting node dragging\n- The code positions a node : Could use a similar constraints system, but it would have a lot of edge cases\nIt looks like you're using a force-directed layout now, so I would just configure it to control the particular edges you're interested in.\n. If you're using CoSE, I'm not sure whether it accepts functional (per node/edge) parameters.  If not, let me know and I'll revise it for the next minor/'bugfix release.\n. No, it's a performance concern.  So, it hasn't been added.\nSome recent optimisations may make this more reasonable, so I'll add this to the 2.4 milestone (2.3 already has too much assigned to it, so it's locked down).\n. That workaround would work very well if you use a fixed-width font.\n. @Braintelligence In 2.4 (or now in unstable), you can use functions as style property values.  So, you could return dimensions proportional to node.children().length.\nThe original purpose of this issue is completely aesthetic with respect to labels.  In future, if you have a distinct issue, please file a separate issue.  (I'd rather have potential duplicate issues rather than complicate an existing issue.  Plus, the previous people involved in the ticket are probably only interested in notifications that apply to their specific issue.)  Thanks!\n. Deferring to later release\n. Supported in 2.5\n. Ref :  Autosized nodes based on label dimensions #1041 \n. label is just an enum; it's not a variable with a value.  If you want spacing around text, you use padding.\nIf you want to set the horizontal typographical alignment differently than the horizontal positional alignment, then a new style property (and new ticket) would need to be introduced.  Currently, the typographical alignment is implicitly set by the positional alignment.. Infinite layout APIs are planned for 2.3:\n- https://github.com/cytoscape/cytoscape.js/issues/580\n- https://github.com/cytoscape/cytoscape.js/issues/518\nIf you want that just for Arbor right now, you could monkey patch the Arbor layout file and give it a different name.  That way, you can continue to use the verbatim cytoscape.js lib.  \nThere's some work in progress in the 2.3/unstable branch, so you might be able to just copy from that.\n. There can be a difference depending on a number of factors.  Firefox historically tends to lag behind on performance compared to Chrome, but I suspect that Firefox on Ubuntu may also not have a hardware accelerated canvas.  There's also a Path2D optimisation in the renderer, and more recent browser releases should be able to make use of it.\nRecent tests on Mac show improving performance with Firefox updates, but I don't think it's quite up to par yet.\n. Closing for now\n. Browser performance is more equal in 2.7+, given the renderer architecture is not so bottlenecked on the individual browser performance of specific APIs.  Now, Firefox is even faster than Chrome in a lot of cases.\n. There's a background-image-opacity property in the unstable branch that will be released with 2.3.\n. Duplicate of #482\n. I don't think so.  If you have issues or want new features, you should describe it in a ticket in that project's repo.\n. I don't think I was clear: It should be possible, but it's not currently and would require a new feature in the extension.\n. This should fix it: download snapshot zip\n@asaegyn FYI; try out the snapshot and if that resolves everything on the cy.js end, I'll promote the snapshot to a 2.2.13 release.\n. Duplicate:\nOld registration system hangs on to instance references #661\n. If you create new instances in succession, there is no avoiding increased memory usage.  You can't control the garbage collector:  You can only give it hints, and it takes time before it becomes active.\nIf you unregister an instance or use this snapshot build, an instance that is not referenced can be GCed.  In order to not be referenced by the root, you need to remove the associated DOM element from the document AND drop your cy references.\n. @asaegyn Better snapshot build that should address everything from the cy.js side, as far as I can tell from my testing: download snapshot\n. @asaegyn I have confirmation from another user that this snapshot build resolves his very similar issue with memory and Angular.  With your confirmation, I think we're safe for a release with this.\nI'll also add a completecy.destroy() function for 2.3 for convenient ref removal:\nhttps://github.com/cytoscape/cytoscape.js/issues/664\n. (1) IE 8 is a very outdated (and broken, besides) browser, so it's not tested or supported.  However, modern/evergreen browsers are fully supported.\n(2) IE 8 does not support canvas.  If you can't draw the graph, there's not much point in supporting that browser.\n. Very likely, IE10 should work OK  -- though performance won't be as good as Chrome, for example.\nFor IE8, you can use Cytoscape Web.  Note that Cytoscape Web is essentially deprecated by Cytoscape.js.  This means you'll have to detect old browsers like IE8 and fallback on Cytoscape Web in those cases.  Because Cytoscape Web is the predecessor of Cytoscape.js, Cytoscape.js is more advanced and has more features.  So, you may have to have a pared down experience on IE8 etc.  But if you're supporting IE8, you're probably used to essentially creating a second webapp for it anyway -- like Google used to do for Gmail etc before it dropped support for outdated browsers.\nIn addition to its rendering engine being broken, IE8 doesn't interpret JS properly.  So, you may have to edit cytoscape.js in places to work around it or use conditional loading.\n. I don't know whether excanvas.js is going to work for all the advanced canvas features that Cytoscape.js uses.  Maybe try http://flashcanvas.net, but it's not open source.\nIf you really want good compatibility, the best option is to rewrite part or all of your app to use Cytoscape Web and serve that to IE8 etc -- and you'd serve the proper Cytoscape.js version of your app to modern browsers.\n. If you're using \"compatibility mode\", then there are no guarantees of functionality -- as this is essentially nonstandard/broken IE mode.\n. Ref : #781\n. Have you tried without maximalAdjustments?  The only node that actually seems out of place is d, and I suspect maximalAdjustments: 0 may stop d from being sorted right.\nYou may also want to try unstable (upcoming 2.3) to see if it's still an issue.  I can't test or debug this without your real elements JSON.\n. Confirmed layout is fine.  Closing\n. Quick measurement: Removing all layouts from build saves 34 kB\n34 KB / 253 kB = 13%\nWith gzip (default params): 11 kB savings\n11 KB / 72 kB = 15%\nIs ~15% savings even worth the inconvenience to developers?\n. Requires even internal layouts to use external extension formatting for CommonJS & AMD\n. Still accessible in jsbin but can be pulled locally etc\n. (1) Have you tried using cy.add() instead?  There's no need to use cy.load() unless you want to effectively reinit with the init options layout.  \n(2) You may alternatively run a different layout afterwards with cy.load():\n``` js\ncy.one('layoutstop', function(){\n  cy.layout({ name: 'circle'  });\n});\ncy.load( eles );\n```\n(3) Your modification to cytoscape.js is broken, because it's not running the layout on any elements.  layoutOpts.eles is mandatory internally (and set for you via eles.layout() etc).\n. cy.load() uses your init layout.  If you want the preset layout on cy.load(), then use the preset layout in your init options.\n. But really, there's no need to use cy.load() unless you want a layout (e.g. nodes don't yet have positions defined).  Most people most of the time should be using cy.add().\nUnless there's a bug in cy.load(), I'll close this for now.\n. Snapshot: http://cytoscape.github.io/cytoscape.js/download/cytoscape.js-snapshot-8909ec233b-1412014261223.zip\n. Actually, it shouldn't on account that we can't guarantee the cy div visibility etc.\n. Snapshot build: http://cytoscape.github.io/cytoscape.js/download/cytoscape.js-snapshot-e19bc9b1e3-1412181437035.zip\nThis fix will be available in 2.3.2\n. I'm releasing this fix as 2.3.3 right away, because npm failed to pick up 2.3.2 (see #682).\n. mousedown => blur\ntouchstart => blur\n. TODO revert this change as it doesn't match with default browser behaviour all the time\nBest to leave this up to the dev manually\n. I fixed this earlier today, and there's a better example included with the extension anyway.  Thanks\n. Since Firefox is at version ~32, it would probably suffice to turn these calls off either conditionally or with stubs on individual context objects.  Adding to 2.3.4 milestone.\n. It's probably safest to use a polyfill only on individual 2dcxt objects rather than the shared prototype.  It's probably safer/easier in that case to use a conditional as is done for renderer.usePaths() for Path2D.\n. Try the snapshot: http://cytoscape.github.io/cytoscape.js/download/cytoscape.js-snapshot-b30ce3c563-1413816046736.zip\n. There are errors in the example code unrelated to Cytoscape.js.  Closing\n. It's not good to use mappers if they break on your data.  You can either define data appropriately for all elements, or you can refine your selectors in your stylesheet so the mappers apply only to elements with the data defined (e.g. [foo]).\nOlder versions made the assumption that bad mapper data means you've made a mistake, so fallback on the previous value.  This is not a performant action, and it's not a correct assumption in general.  In any case, the old behaviour is impossible now due to a much better and faster implementation of style application -- and it's better for your style to be explicit anyway.\n. Reopening as docs ticket: Docs should be updated to make this case more clear\n. Also a clear error message in the console would be useful for devs so they didn't have to go to the docs\n. @nrchaudhry The docs have been updated slightly (it turns out there was already a warning), and there is now a nice clear error message in the console to help developers.  Thanks for your feedback\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-c0b51329da-1413819740230.zip\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-a8e5bd64ea-1413910256866.zip\n. To reproduce:\n- cy.fit() cuts off label\n- node.outerHeight() doesn't take into account label\n. Thanks; amended & snapshot build: http://js.cytoscape.org/download/cytoscape.js-snapshot-0fa45e03e1-1414080483364.zip\n. Please read the style section of the documentation.  There, you'll note that specificity does not apply.  \nI'm almost certain your context/selector blocks are misplaced in your stylesheet, as I have confirmed the correct behaviour in master.  I suspect you're relying on a bug/sideeffect of the old style application mechanism before it was fixed and sped up for 2.3.x.\nPut blahblah:selected blocks last if you want those selectors to always win in that state.\n. You're relying on undocumented sideeffects of the previous style architecture.  Given how style functions now, it is impossible to have the behaviour you're requesting.  In any case, you should be explicit rather than tacitly relying on undocumented behaviour:\n(1) Use explicit data.  If you define a mapping for all elements, then define data for all elements.\n(2) Add explicit selectors to limit the selector block to apply to only elements with the specified data defined, e.g. [color]node:selected\n. Use option (1) or (2), and an addition to the docs will appear in the next minor release to help others with similar issues.\n. Hi Roberto,\nThis looks good, but I suspect you could achieve a similar effect using the cola layout.  Cola has sophisticated constraints, so you could have an overall grid or tree shape -- for example -- and then have a forcedirected bit on top of that.\nMy main concern is the dependencies.  Cytoscape.js itself is completely dependency free.  Some of the layouts have single dependencies on the corresponding standalone layout lib (cola, arbor, etc).  This layout has several dependencies.\nSome ideas:\n- Remove foolayout dependency : It seems foograph.ForceDirectedVertexLayout is the important part, so that part could be ported to use the Cytoscape.js graph model instead.\n- Remove the paralleljs dependency: Cytoscape.js could have a $$.Worker object defined which would be useful to layouts and would eliminate the heavier paralleljs dep\n  - Inline workers: http://stackoverflow.com/questions/5408406/web-workers-without-a-separate-javascript-file\n  - Reflection for worker function : http://stackoverflow.com/questions/3379875/can-javascript-get-a-function-as-text\nThis would leave only rhill-voronoi-core.js as a dependency, and it's already a well written separate module. \nI don't have time to refactor this to remove the dependencies right now, but we could try to sync this with 2.4.  We'd need to add the $$.Worker anyway.  What do you think?\nOne more thing, this pull request should go to unstable instead of master, because it contains completely new features.\nThanks,\nMax\n. Hi Roberto -- Don't think I answered this directly: \nif the layout might be interesting to the other Cytoscape.js users\nThis layout would definitely be useful -- as it's very fast -- and speed is important for very large graph usecases.  And there are lots of those.\nAnother thought is that since \"Stylesheet & elements specified as promises #559\" for 2.4 will require Promises anyway, a careful refactoring (for removing dependencies) should probably require very few changes to your code as it stands now.  (It seems that paralleljs is mostly a promise consuming/producing API, so if the $$.Worker is designed similarly it could replace paralleljs more or less 1:1 in your code.)\nAnyway, if you could make a pull request to unstable with your existing code, we can merge the pull request right away.  (Because 2.4 is the next planned release, unstable is basically \"2.4-work-in-progress\".)\nThanks!\nMax\n. Abandoning for 2.4, since the implementation does not function well for effective (rendered) font sizes smaller than 3 or 4 px.  For very small effective sizes, the label disappears.\n. Something like this should be done in an extension instead\n. Above commit fixes error noted in #707 \nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-4df58286b7-1415819367234.zip\n. Closing for now; seems to be working fine\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-39bfe234ee-1415643085643.zip\n. I suspected something like that, though it's just fine on Firefox for Mac.  Probably, Linux and Windows are lacking the finer values available on Mac so it's falling back on that deltaY value.  I'll commit the changes once I've tested this on different machines/VMs.\n. On further inspection, the issue is on the OS level.  Whereas Mac properly provides accelerated wheel events at good intervals, Linux and Windows do not.  \nLinux and Windows have often very slow intervals, making things choppy.  They also do no accelerate the wheel deltas, so zooming is slow and linear.\nIt seems Chrome has even worse behaviour (especially on Windows), where it has very intermittent deltas with large values.\nRenaming ticket \n. It seems that e.deltaMode === 1 can be used in place of detecting ff/win/linux, so should be more reliable.\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-c0c59deb16-1415743784455.zip\n. @michalhabala Please try the snapshot and let me know if that works for you.  Thanks\n. Snapshot re. MutationObserver: http://js.cytoscape.org/download/cytoscape.js-snapshot-4df58286b7-1415819367234.zip\n. Regarding Chrome, this seems like an issue specific to Windows.  Chrome 38 on Mac and Linux seems OK.  I don't have access to a Windows VM on this machine, but I'll take a look at it soon.\nNew ticket for that particular issue:  Windows/Chrome 38 has motionblur artefacts #712 \n. Hi Roberto -- I don't think it should be too long for me to do this part, but it would be great if you could test things out once everything is completely refactored.  (I'm not as familiar with what the expected results of the layout should be.)  Thanks\n. Not practical to remove the dep, but working with multitasking APIs.\nClosing\n. TODO if no \"worker\" tech found, use a dummy timeout\nIt won't really be more efficient, but at least it will degrade gracefully\n. I looked at this quickly, and it looks like an IE limitation.  It's probably to do with your CSS and/or the size you specify for the graph.\nI suspect IE can only handle canvases up to a certain limit in size.  It's probably not a good idea to make it bigger than the size of the screen, anyway, if only for performance's sake.  You should also experiment with your CSS.  \nYou can't expect too much from IE -- although it has improved substantially in recent versions -- it is still by far the worst overall, the least performant, and the least standards compliant of the major browsers.\nEven if it's possible to add IE-specific workarounds, I would be very hesitant to do so.  Whereas other browsers get better with each new release, IE tends to oscillate between getting better and getting worse.  So an IE workaround might even break things for a later update to IE.\nIf you can isolate the specific cause of your IE issue, I'll add a note to the docs for others who encounter similar issues.\n. I'm closing this for now, as this does not seem to be an issue with Cytoscape.js itself.\n. We now have a local cache\n. Hey @michalhabala, would you please paste your style for the image above that reproduces the issue.  I can't reproduce this on a Windows 7 VM fully updated with Chrome.  This is the last issue to resolve for 2.3.5, so I'd really appreciate your help with this.  Thanks!\n. Thanks @michalhabala.  It looks like the style is highly dependent on the data in the elements, so if you could post some example corresponding elements JSON, that would greatly help to reproduce the issue.  I suspect the bug may be triggered by a particular set of data and style (since that triggers different manipulations on the canvas).\nmotionBlur: false disables the motionblur effect completely and should act as a workaround in your case.  The motionblur effect is designed to gradually fade out and uses even an extra clear frame at the end of a set of graph manipulations, and it looks like in your case that's not working.\n. I have tried your link on Chrome/Windows, and I'm unable to reproduce the issue.\nHave you tried using a clean instance of Chrome (i.e. without customisations, extensions, etc.)?  Another thought is that it may be specific to your machine.  Perhaps there is an issue with your video drivers.\n. I'm deferring this to 2.3.6 so as to not delay 2.3.5, as the issue can not be reproduced.\n. No worries; Windows video drivers are often spotty so it was a lucky guess. \n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-14f5d57fc7-1415978776721.zip\n. We've thought about this before, and haven't added it on purpose thusfar.  It's generally a bad idea in terms of legibility, and experts in infoviz like Edward Tufte explicitly mention this in their books and lectures.\nThere may be some very few edgecases where it would be acceptable, like in languages that use the Chinese writing system.  For example, it may be OK to write Japanese labels character-by-character, top-to-bottom in the vertical case in your figure.  However, since the nodes can be moved, this wouldn't hold in general -- and the Japanese example would \"jump\" to the normal left-to-right direction when the edge isn't vertically aligned.\n. You'd need to introduce a new style property like edge-text-rotation that could take on values none or autorotate.\nThen you'd need to test for the autorotate value in the render for edge label drawing.  There's already a calculated label position that you can use, but you'd have to rotate the canvas context based on the edge type (there are many types and subtypes, denoted in ele._private.rscratch).  Then you'd have to apply the inverse transform to reset the canvas after drawing the text.\n. If you want to reduce label overlap, you might try to layout the graph so that it's more spread out.  You can also make edge labels a smaller font size.\n. Also note that all those additional rotations are going to have a large effect on rendering performance, especially since it's on text.\n. Some initial thoughts: \n(1) Don't use context.save().  It's expensive and less flexible, and it's relatively easy to do the inverse transform yourself, i.e.: \n``` js\ncontext.rotate(newAngle);\ncontext.translate(rs.labelX, rs.labelY);\n// ...\ncontext.translate(-rs.labelX, -rs.labelY);\ncontext.rotate(-newAngle);\n```\n(2) I suspect the .save() is destroying the previously set font, making you lose the size.  It looks like the font is set in another function, earlier.\n(3) I realise this is an early implementation, but make sure to keep the old code commented like you have instead of deleted.  It will be important once everything's working to have ifs such that the additional expense of rotations and translations can be avoided if the labels aren't autorotated in the style.\n. Maybe this will do the trick: https://github.com/ktei/cytoscape.js/pull/1\n. If you could test it out and maybe have a pull request to the unstable branch once you're satisfied, that would be great.\n. Maybe this tweakfix commit will help?\n. Looks good.  The labels are positioned along the edge line rather than centred on the line, but maybe that's preferable for this usecase anyway.  I suppose we could always introduce edge-text-rotation: midautorotate in future if there's interest.\nClosing for now\n. Difficult to reproduce\n. More likely when starting from edge?\n. Duplicate of #715\n. Sounds like a bug.  \ncy.animate({ fit: ... }) with a large padding might be a workaround -- though it wouldn't let you use a particular zoom level, at least not easily.\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-4753ac70d2-1416340253431.zip\n. This should fix it, and you can try the snapshot if you like until 2.3.5 is released.  Thanks\n. I don't think you'd get the event in that case, because the originating target is not the cy div.  You probably would have to get the events outside of cy.js, though it should be easy to get the DOM position and use that position relative to the cy div as the rendered position for the drop position.\n. You would have to create your own scrollbar logic.  It is inadvisable to simply use a scrollable div containing a large, overflowing cy div.\nYou may find iScroll (ref : http://iscrolljs.com/) useful for this purpose.  You could probably just pan the graph appropriately on iScroll scroll events.\nYou may even want to package your code so it's reusable as an extension: http://js.cytoscape.org/#extensions\nThe qtip extension would be a good example for you, as it's a thin wrapper around qTip just as your extension would be a relatively thin wrapper around iScroll.\n. You may also be interested in the navigator extension: https://github.com/cytoscape/cytoscape.js-navigator\n(I strongly doubt that users would prefer scrollbars over gesture control.)\n. Reopening as potential (extension) project idea\n. You're right; better to be explicit\nUpdated : http://js.cytoscape.org/#selectors\n. Closing; planned improvement for the texture caches to improve blitting performance\n. I had a quick look at this, and it looks very cool.  I'm going to merge this in right away, but I'll have some comments later today.  Thanks\n. I've merged this into unstable as well.  There's now also a gulp target so it's just gulp sniper to test locally.\nThe one thing I think would be nice is if it could be automated (probably in the gulpfile.js) such that the demos noted in docmaker.json were pulled in automatically from the corresponding gists.  There may be a bit of postprocessing, but if it were automated then BioJS users would always have all the latest and greatest demos.\n. Depends on #709 \n. Defer; spread layout has very simple proof of concept\n. Added for CoSE in 2.5; other simple layouts not worth it since they don't do expensive calcs\n. Ref : http://stackoverflow.com/posts/26867696\n. Strongly not advisable.  You will run into conflicts and headaches with your codebase that way.\nThe preferred solution to that problem is for a tap distance threshold: https://github.com/cytoscape/cytoscape.js/issues/636\nIf you're looking for an implementation of that, you could basically use the same logic as Fastclick.\n. @ktei Here is a snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-d876f265ff-1417283193201.zip\nI will be testing the changes out more thoroughly next week, but if you'd like to take a look or maybe try out different tapThreshold values, that would be great too.  Thanks for your feedback\n. Closing this ticket; please follow #636 \n. TODO testing\n. Merged with #657\n. https://github.com/cytoscape/cytoscape.js-navigator/issues/8#issuecomment-65693600\n. Cool, but could you please make the pull request on unstable instead of master?  Thanks!\n. Maybe git cherry-pick the commits from the rotate-label branch into unstable on your fork?  Maybe that will allow for a simpler ktei/unstable => cy.js/unstable pull request\n. Can be done later\n. I think I didn't notice this error because HFS+ isn't case sensitive.  This should fix it and maintain the consistent camel case naming.\n. Cool\n. I think the changes to master that I cherrypicked to unstable should fix this (i.e. the tmpfix => camelCase); thanks!\nClosing for now; let me know if there are other issues\n. Queueing doesn't affect the actual animation performance.  However, your loop may be slow.  Try a for loop in place of $.each()\nClosing for now\n. Depends on #773 \n. Remove to avoid unnecessary bloat; use cy.batch() instead\n. very concise impl but testing and docs TODO\n. The benchmark framework has been added and there is an example for A*.\nFor algorithms specifically : https://github.com/cytoscape/cytoscape.js/issues/936\n. (1) Animation is the wrong approach with respect to performance; the Cy.js approach to minimise time to current frame is superior for responsiveness for the user.  It is better to be fast and uptodate rather than smooth and slow.\n(2) Sigma.js allows only for cheap straight lines and circles.  This is inexpensive to render.  You can achieve the same effect by setting your style appropriately to use cheap styles.\n(3) See #702 in unstable, which increases effective performance even further.\n(4) See http://js.cytoscape.org/#performance; note textureOnViewport\n. Remove from 2.4\nToo low priority and the value of being consistent with classes in HTML is too high.\n. Good catch; thanks\n. From my testing, this resolves (1) and (2)\nClosing for now\n. That sounds like it may be a good additional style property, like fallback-background-image.  I'll create the ticket etc when I have time.  You may also be interested in using embedded images in your style (e.g. base 64), so HTTP requests aren't made.\n. Graphs far larger than that work for many people, including myself.  Perhaps you ought to check that your elements JSON is valid.\nIf you run into an issue with the library itself, please post a full example that reproduces the issue.\n. I suspect you've set your style in such a way that it's causing your issue.  Whether it's caused by a bug or not, I'm not sure without being able to see a full running example.\nYou may also consider using classes for style instead of so many mappers.  Mappers add expense.\n. Thanks for the example; it will definitely help to shed light on the issue.  I'll take a look and let you know. \n. In future for people with the same issue: There should be error messages in the console if the IDs collide.\n. TODO confirm console error message\n. Please check your debug console.  I have confirmed there is indeed an error message.\n. As for your original enquiry: We could calculate the effective fontsize ourselves and set 1px as the absolute minimum, mimicking the better behaviour of Firefox.\nAs for your second enquiry:  If I understand correctly, you want a fixed font size regardless of zoom.  If that's the case, would you please create a second ticket for that discussion/workflow?  I think the original enquiry should \"own\" this ticket.  Thanks\n. Can't reproduce on latest browsers; removing from 2.4\n. I strongly suspect this is an issue with IE itself.  I'll take a look, but it may just be that IE is unable to render certain types of SVG images.\n. SVG rendering is different under the DOM compared to a canvas.  I'll test this out relatively soon, but I often do not have high hopes for anything IE-related.\n. It may be possible to work around the issues, but some of the issues are actually tradeoffs that the browser designers have made -- like for performance.  It's probably best to just use PNG for now if you have crossbrowser consistency as a higher priority.\n. Thanks! \nThe change I pushed allows for specifying the dimensions manually.  It also gets the correct image dimensions automatically from IE.  However, IE just doesn't seem to be able to render (maybe just particular?) SVGs in canvas.\nI tested in a Windows 10 VM with IE11 latest and Edge latest.  Edge seems OK.  IE doesn't render the SVG.  I tried with gnu.svg in the debug page.\n. Good idea, though this could apply only to bezier curve edges.  Would that suit your usecase?\n. That's a good point.  State machines are an important usecase.  Adding to 2.4 milestone\n. Removing from 2.4 milestone due to time constraints.  2.4 has been in the pipeline for a while now...\n. @nmorse For your case, couldn't you reverse the arrow direction on the loops to get the effect you want?\n. This is similar to the more general issue : https://github.com/cytoscape/cytoscape.js/issues/1219\nThat issue is being considered for 2.8, but its requirements need to be clarified.  In both that issue and this one, there are invalid/undesirable rendering results to consider:  It's easy to create bad results if you can specify position and/or angle.  \nFurther, this wouldn't work well with freeform graphs.  It would work with only heavily restricted or static graphs.\nThere are already a lot of high priority items (like performance-related enhancements) for 2.8, so  I'm not sure that issue will make it into 2.8.\n. @tonymullen That looks great!  We'd need style properties to control it.  My intuition is that this would only apply to loops and compound loops, as setting angles for regular edges would often give bad results.  Maybe only one style property would be needed, assuming the loops always sweep ~90deg.\n. General impl of this for https://github.com/cytoscape/cytoscape.js/issues/1613\n@tonymullen's loop options also work for loops\nBoth will be in 3.1. Odd.  I didn't see that on my local instance before publishing, but there were some issues with publishing the last x.y.z release.  I'll take a look; thanks\n. Adding to 2.3.8 milestone.  Given the severity of the issue, it may even merit its own release.\n. Thanks for the feedback; I hope to fix this tomorrow.  If you all could try it out too once I push it but before I formally release it, that would be a big help.  Thanks\n. Thank you for your patience, guys.  I've pushed a fix.  Please try it out and I'll push out the release ASAP.\nSnapshot build: http://js.cytoscape.org/download/cytoscape.js-snapshot-16cf86597e-1420740052765.zip\n. OK.  That's actually a bit of a relief in a way, because I re-enabled a \"magic\" number condition in that build.  I'll take a look; thanks\n. Maybe this?\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-4294a1643f-1420754382449.zip\n. Ref: https://github.com/cytoscape/cytoscape.js/commit/4327f51c7257919db7b73b6647279bc7ab0c871c\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-4327f51c72-1420824418477.zip\n. Previous update fixed the fast case that shows both UI indicators.  There is also the slow case, which is harder to time (i.e. must be precise at a later time).\n. OK.  There's still a minor graphical glitch if the timing is slow but very precise.  Closing for 2.3.8 release.  \nRef: https://github.com/cytoscape/cytoscape.js/issues/800\n. I suspect there's a problem in IE10 itself, as the code should draw an image only after it's loaded.  I'll take a look; thanks\n. @jeremychapman Is this an IE-only issue for you, or is it a general issue in your case when you load via database?\n. @jeremychapman @jerchap Would you please post a console.dir(img) for me in the error cases?  I don't have access to IE10 and I don't think I'll be able to put together a DB example just right now.\nIf there's something in there that I could use to detect your error cases, I can create a snapshot build for you to try out that should work around the issue.  Thanks\n. I've been able to reproduce this, more or less.  Assigning to 2.4.3.  Unfortunately, a try-catch seems the only way to work around this -- even if the image is fully and properly loaded.  It's really strange.\n. You should be able to do that in any way you want:  You can make an extension that hooks into your own code or another library's code to achieve that purpose, or you can do the same minus the extension bit to be less coupled if you wish.\nFeatures like that which are covered by combining multiple libs in your app are outside of the scope of this project, else Cy.js would become bloated.  Thanks\n. Added & docs updated : http://js.cytoscape.org/#extensions\nThank you for your contribution.  I know many people will be interested in this.\n. You should not assume that calls to eles.show() and eles.hide() set a model state.  It's a style bypass, analogous to setting the style attribute on a HTML DOM element.  If you think about it in terms of the traditional MVC model, the bypass would be in the View: The serialised JSON is the Model.\nIf you want to maintain serialisation state, you can use a hidden or shown class -- similar to how you've used a highlighted class.  Alternatively, you could additionally serialise the style for each element in addition to its JSON model via ele.style(), which should return the entire computed style for the element.  However, this style serialisation approach would be very expensive.\nThanks for your interest in Cytoscape.js.  If you have any issues or questions, please let me know.  \nClosing for now\n. Your approach is interesting, though I think it may be better for the renderer to have extra logic with corresponding style properties.  (1) It would be more convenient to the developer, and (2) it would be more efficient (your approach could potentially double redraw cost on zooms).\n. Property ideas:\n- element-sizing: fixed | relative\n- text-sizing: fixed | relative\n. @ktei For your case, just don't use the fit option.  You can instead call cy.zoom( yourPreferredZoom ) and cy.center().\n. This would actually require some other model on the viewport, like a stretch rather than a zoom.\n. The issue with completely different zoom behaviour is twofold:\n(1) It's not really a zoom.  Zoom is defined as graphics zoom/scale.  See Wikipedia for background: https://en.wikipedia.org/wiki/Scaling_%28geometry%29  The behaviour being described in this issue is really a stretch rather than a zoom -- you're stretching the nodes apart but you're not changing the scale.\n(2) It completely throws off all calculations for hittests, edge positioning calculations, boundingboxes, layouts, text dimension calculations (which are very, very expensive), and many more things -- because it breaks the assumption that model co-ordinates are constant with zoom and pan.  Untrue zoom/scale behaviour would break all of these and require sweeping changes.  It also means the textureOnViewport option wouldn't work.\nWhat to do easily today: The solution for this should be done separately in an extension: An extension could modify sizes (e.g. font-size, width) on  changes in zoom (or possibly debounce to be more performant but less smooth).  The change in font size would be inversely proportional to the zoom to keep the rendered sizes constant.  The extension could have options for what is kept fixed and what is not (labels, nodes, edges).\nPossibly more performant but more complex: An alternative extension that would keep everything fixed is also possible, and it would probably be smoother.  It would disable zooming and replace it with stretching.  On a zoom gesture, the nodes are stretched apart (modifying their positions) instead of modifying the viewport scale/zoom.  This could use exposing some gestures like wheel and pinch to make the extension implementation easier: https://github.com/cytoscape/cytoscape.js/issues/1140 .  Or it could re-implement those gestures itself in the extension.\n. Just use sensible min- and max-zoom values for the stylesheet you use.  \nYour initial stylesheet values can be increased or decreased to accommodate the zoom bounds -- as long as the initial sizes are proportional.\n. Not possible with 2.7+\nPerformance enhancement that cache textures per element or per layer conflict with this.\nYou're better off creating breakpoints in the zoom where the style is changed appropriately -- just like CSS @media query breakpoints.\n. Thanks; I also cherypicked those to unstable.  Closing\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-498f0b229a-1420579403083.zip\n. Closing; planned deprecation: https://github.com/cytoscape/cytoscape.js/issues/822\n. Nice; thanks\n. I suspect this is an issue with IE itself.  It seems some SVGs work, others don't.\n. Please note as noted in another, similar ticket that SVGs are rendered differently in the DOM than in canvas.  Cytoscape.js can not change it if IE renders SVGs incorrectly in canvas.\nYou could try with a simple <canvas> with context.drawImage() to confirm whether IE can render your SVG in canvas.  Ref : https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage\nI do not have access to IE, though I suspect the issue is on their side (especially since there is no issue in other browsers).  And if so, it would probably make sense for us to file a bug with them.\n. I have confirmed it functioning correctly on Firefox:\n\nYou can try this yourself on the debug page with gnu.svg.\nThere is probably a problem with your SVG file.  It could be it's invalid, it could be too large for the browser, etc.  You'll have to investigate and see with your file.\n. Ref : https://github.com/cytoscape/cytoscape.js/blob/v2.3.11/src/extensions/renderer.canvas.drawing-images.js#L101\nExample with gnu.svg:\n\nNo problem on the latest Firefox.  If there's a problem, I don't think it's with Cy.js.  Please investigate your SVG file.\n. You ought to specify pixels for SVG if you want it to render well in the browser.  The size only matters as a relative viewport size for the inner elements.  SVG is scalable vector graphics, after all...\n. Closing for now; please re-open if needed\n. I think this should do it.\nSnapshot to try: http://js.cytoscape.org/download/cytoscape.js-snapshot-5cbfc36887-1422916071961.zip\n. FYI: Arrows on haystacks may be possible in 2.4, though in this case the haystack edges would need a radius of 100% -- meaning they wouldn't point to the centre points of nodes.\n. Closing for now; please reopen if this is still an issue for you in the snapshot\n. I think this should do it; snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-7a63386fb4-1422649756798.zip\n. Closing for now; please reopen if it's still an issue for you in the snapshot\n. Fixed with other changes\n. I think Springy is in all 2.3.x versions.  I've just been using the tracker with the milestones to track changes.  That way, you can also see the individual, corresponding commits if you like.\nMaybe there's a way to automate a changelog file from the issue titles under each milestone?\n. Thanks; I'll try to integrate one of those scripts for 2.4\n. Can be done after 2.4\n. Working for me; perhaps user error or error on Github side\n. I suspect this would require a heavily modified strategy in the breadthfirst layout.  It tries to maximise space rather than tree flow.\nIt may be even better to have a separate layout solely for trees, though perhaps you may find Dagre sufficient for your purposes.\n. If you add nodes, you can position them manually wherever you like -- underneath a predecessor node if you like.\n. You specified a layout.  You can't have both, else the layout will override manual positions.\n(1) Do manual positioning after layout at init, or\n(2) use all manual positions.\n. In (2), you don't use layout but rather position nodes manually according to your own specifications.\n. Dagre might meet the requirements for this already.\n. Closing for now, as Dagre should do this.\n. So maybe a stretch value?\n. Not necessary.  In 2.4/unstable, specify:\nnode {\n  background-width: 100%;\n  background-height: 100%;\n}\n. Ref : https://github.com/cytoscape/cytoscape.js/issues/705\n. Labelling as \"bug\" because of UI/UX implications; adding to 2.3.9 if it can be resolved without much impact/risk on code\n. Do you have an example?  And could you provide browser/OS info etc?\nI can't reproduce this.  I see the new graph replace the old one without flicker, even with motionBlur: false and a large number of elements.\n. Removing from 2.3.9 milestone until reproducible\n. Have you tried cy.batch() and making your own calls? http://jsbin.com/madiqoqalo/1/edit?js,console,output\nIt's almost always better not to use cy.load() and to make the calls to cy.add() and cy.layout() etc yourself.\nAs cy.load() had been complained about and caused confusion before, I think it should be removed from the docs and deprecated: https://github.com/cytoscape/cytoscape.js/issues/822\nI'll try to add a fix in the meantime, but you may want to avoid cy.load() in future.\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-faf63dac65-1423163894122.zip\nPlease let me know if this works for you, and if so I'll close this.\n. Can't reproduce exactly; maybe this is related? https://github.com/cytoscape/cytoscape.js/issues/813\n. I'm getting other errors though when I go through steps like on #813.  I suspect there is another issue with style serialisation and/or style application on compound nodes in specific cases...\n. I think you can workaround the issue for now by using your own, separate JSON style and assigning with that to initOptions.style in every instance.  The serialised one is going down a path with a bug, it seems.\n. Also related: #817\nI think these should all fix the issue overall.\nWould you please try master or this snapshot and confirm it goes OK for you?\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-8631d477ec-1422987551340.zip\n. Cool; closing for now since it works for me and I want to have the milestone ready for release ASAP.\nWe can reopen if you notice anything wrong.  Thanks\n. Good; time to release then\n. Please see #305 \n. My comment via email did not go through properly.  Pasting:\n\nHi Paul & Rui:\nI think you can use the box in any state you want.  It's there by default in :active, but you could also use :selected with another colour, for example:\n:selected {\n  overlay-opacity: 0.666;\n  overlay-color: blue;\n}\nI debated over whether :active should even have the box by default, but since that seems to be the de facto standard on touch -- I decided to just go with the flow.  You could override that with:\n:active {\n  overlay-opacity: 0;\n}\nThanks,\n-Max\n. Great; closing for now\n. Ref : http://js.cytoscape.org/#style/overlay\n. Not a bug.  The position is the same.  If you want the viewport to remain unchanged, please set it so in your layout options.\n. Issue : Events and app scope\nSay I tap the edge by the arrow.  Which edge gets the event?  All of them?  One of them?  None of them?\n. I don't think this should be supported with separate edges, given the issues with semantics.  Hyperedges should produce the same visual effect.  Closing as duplicate of https://github.com/cytoscape/cytoscape.js/issues/959\n. See https://github.com/gorhill/Javascript-Voronoi/pull/25\n. Cool; thanks\n. Weird occasional flicker\n. Previous commit fixed panning case; still a more general case with a race condition with the timeout -- though more rare\n. Reproducible only on macbook trackpad?\n. A regular mouse doesn't seem to do it; or maybe it was a caching issue on another machine...?\n. Removing from 2.3.9 until confirmed\n. Seems to affect 2.3 in addition to 2.4 (though more easily reproducible in 2.4/unstable)\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-44169df594-1426787920105.zip\n. @ggirelli Please test the snapshot and see if you can still reproduce the bug.  I can't reproduce it anymore from my testing.\n. @ggirelli Yes\n. It should be listed now; thanks!\nhttp://js.cytoscape.org/#extensions\n. Scratchpad data is temporary, and so it is never serialised in ele.json().  If it's not serialised, then you can't transfer that data with elements that are transferred from one graph to another one.\nIf you don't want to render some elements in the graph, it would be better to set display: none to those elements using a class.  That will probably sidestep your issue.\nI'm not sure exactly why your workflow causes the error.  Maybe an example or a numbered list of steps to reproduce would help.  I will experiment and try to reproduce the error as soon as I get the chance.\nThanks!\n. You can work around this by not calling cy.load().  That's the problem.  Without load(), it's not reproducible -- at least for me on the debug page.\n. Try the above commit on this snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-6e4647c514-1423771528077.zip\nIt may work around your issue, but it slightly changes backwards compatibility with old cy.layout() behaviour.  Since that's deprecated and would work the same for 95%+ of people anyway, I think we should just go ahead with the workaround if it works for you.  If not, I'll revert.\n. I can't reproduce this after the change I made.  Would you please create a either a testcase under /test or a demo that I could use to debug the issue?  Thanks\n. Eliding from 2.3.11 until reproducible\n. @nebril Do you find this reproducible with the latest Dagre and the latest Cytoscape?\n. Closing for now\nDagre is moved to its own repo now too : https://github.com/cytoscape/cytoscape.js-dagre\n. Now that there's a Meteor package for Cytoscape.js, it may make sense to use that -- since it would provide free syncing with connected clients and the server.\n. I would start with a simple full-page graph with Meteor and Cytoscape.js that syncs the node positions.  So you can see other users dragging nodes around.\n. Are you on the Mozilla #sciencelab channel?  If not, I can answer questions here or via email (maxkfranz@gmail.com).\n. There is a simple project I setup to get started: https://github.com/maxkfranz/cyedit\nIt has the Meteor project already made (with the Cy.js package), and the Cy.js integration is mostly there.  Currently, adding nodes and dragging nodes updates the node state on the server side -- but this is not reflected back to clients for the live sync effect (and also not reflected at init it seems).\nSo, to get the simple demo going we'd need to use the Meteor API to listen for updates to the nodes (i.e. drag and add) and to update the graph with those changes.  That will give us the live sync effect and then the same strategy could be used for new features to be added to the app.\n. I think a pallet of commands (think similar to the brushes, shapes, etc in Photoshop) would work well here.  We already have a plus for add, so we could have an X beside it for deleting the selected elements.\nBasically, we'd need a pane/div for the pallet and we'd need the buttons restyled inside the pallet.\n\nThere are also lots of extensions that would be easy to add to make the UI more sophisticated:\nThe context menu would be good for commands on elements: https://github.com/cytoscape/cytoscape.js-cxtmenu\nThe edgehandles extension is good for adding edges: https://github.com/cytoscape/cytoscape.js-edgehandles\nThe draw mode in edgehandles is the most accessible way of using it, because it also supports touch -- though the default mouseover handle is a convenient addition on the desktop.\nThe qtip might be useful for something: https://github.com/cytoscape/cytoscape.js-qtip\n. > (sorry, I pushed changes directly to master branch...)\nI think that should be fine, considering it's a prototype / work in progress.\n. We'd need a package for each one.\nI'll try to add Meteor support for extension scaffolding, and I'll add it to one as a test.  If you could try it out once it's done to make sure it's OK, that would be very helpful.  Thanks\nRefs:\n- https://github.com/cytoscape/slush-cytoscape-extension/issues/1\n- https://github.com/cytoscape/cytoscape.js-qtip/issues/4\n. @clemsos For now, though, you could still go forward by checking in the extension JS file directly into the repo.\n. @clemsos cytoscape-qtip@2.2.3 should work with Meteor.  Let me know how it goes, and I can proceed with the other extensions.\n. qTip doesn't have a Meteor package.  You'll have to include it manually by putting its CSS+JS in the project, I think.\n. You also need to download qtip itself: http://qtip2.com/download\n. Request for Meteor package : https://github.com/qTip2/qTip2/issues/752\n. Try setting window.jQuery to the jQuery instance before Cytoscape is pulled in as a dependency.  It looks like the jQuery plugin is never registered, because jQuery isn't yet defined.\nI'll create an explicit workaround (just in case) for the next bugfix release: https://github.com/cytoscape/cytoscape.js/issues/1034\n. The lib license is LGPL, but my understanding is that LGPL applies to the lib itself and any changes made to the lib directly.  So, you'd have free choice of license.  However, I'd personally prefer LGPL or MIT.\nThe main thing for me is that I'd like to see this as a polished (source and UI) demo on a public URL that could be linked to as a demo on the main docs page.  That way, we can have an easily accessible link to the demo and to the source on Github.\n. Whoops... reopening\n. Take a look at the code of @clemsos.  He has a better prototype.  He can also point you towards a hackathon project we did\n. See Electron and Cordova\nDesktop applications with Cytoscape.js and Electron\nMobile applications with Cytoscape.js and Cordova\n. Too many complaints and too much confusion over this function.  \nIf the old data has positions defined already, cy.add() should be the same for your usecase.\nI'll put this off to 2.4, and it will be backwards compatible -- but I don't think anyone new should be using cy.load().\n. I think a call to cy.elements().remove() could replace your cy.reset() call.  Because there's no async layout, you don't need the callback or you could just have:\njs\ncytoscape('core', 'reset', function( callback ){ \n     var cy = this;\n     cy.elements().remove();\n     callback();\n     return this; // chainability\n});\n. @MissChocoe Yes.  You can always use that manual workflow, even at init if you want (i.e. start with empty graph in init options).\n. Listed : http://js.cytoscape.org/#extensions\n. Listed : http://js.cytoscape.org/#extensions\n. That makes sense.  Proposed properties:\n- text-background-color : With the specified colour, places a rectangular background on the label text (no background is used by default or when specified with the value none).\n- text-background-opacity : Specifies the opacity of the label text background colour (fully opaque with a value of 1 by default).\nNote that this will have performance concerns as it will increase the number of shapes drawn per element.  However, the expense can be minimised by using sqaure rectangles rather than ones with rounded corners.  What do you think?  If rounded corners are a requirement, then it may merit an additional property.\n. @jonorthwash It's working fine for me on master (3.2.6) with those two properties:\n\n. This is already done for you automatically, with a smaller threshold set for mouse input and a larger one for touch input.\nIf you need to configure this manually, you'll need to modify your init options, including: \n- touchTapThreshold\n- desktopTapThreshold\n. Outdated browsers that don't support modern web standards are not supported.  IE7 and IE8 neither are standards compliant nor do they have the necessary rendering technology (canvas).\n. Stackoverflow: http://stackoverflow.com/questions/10482570/is-there-a-way-to-use-canvas-in-ie7-or-ie8\nThat being said, I still don't think it would work.  If you have a requirement to support old, broken environments perhaps you should re-evaluate your featureset or reconsider the requirement itself.  IE7 is almost a decade old.\n. See:\n- http://www.computerworld.com/article/2508872/desktop-apps/google-to-dump-support-for-microsoft-s-ie7.html\n- http://www.computerworld.com/article/2492571/web-apps/google-to-drop-support-for-ie8-on-nov--15.html\nIf Google can't manage to do it, do you think it's a reasonable requirement for you?  Just a thought.\n. You can use select and unselect events.\nRemoving elements ought not to raise a selection event.  That's app-level logic, and dependent on the usecase.\nIf a previously selected node triggers a select event, then that's a separate issue that should be described in another ticket -- as this one seems to be about a collated selectchange event or similar.  I am not sure that  a selectchange event would be a good idea, considering there could be performance considerations and there are already select and unselect which you can bind to separately or in combination.\nWhat do you think?\n. > I'm not clear on why having a node not in the graph selected makes sense.\nYou may want to add it back, for example.\n. You can just listen to remove in addition to the other events.  If removed, you can assume the same state as an unselect event in your app.\n. > I agree that the select event that is triggered more than one is a separate issue since it is a bug. I've had my way around it by selecting a property on the node that I removed when the node is unselected.\n\nIf someone call \"unselect\" on a node, it will be raise the event if that node was never actually selected. This is probably another issue.\n\nThis sounds like the same bug.\n. Closing for now; an additional event would add overhead and isn't necessary to create the same behaviour\n. This is good.  My habit has been to use the rule that a person of unknown sex should be referred to as \"he\", but \"they\" would be better.\nUnfortunately, your PR changes only the resultant HTML file rather than the source Markdown files from which it is generated.  So while your idea is a good one, I can't merge the pull request just now.  I'll see if I can change this if I have time -- but if you want to do the find-replace across the .md files, that would be much appreciated!\n. Closing; I'll do this on the search files for 2.4.  Thanks\n. See https://github.com/maxkfranz/graphen\n. It could be, but then again, I have avoided adding that because it doesn't add much utility over the border and text outline and it adds considerable rendering expense -- meaning that people who want to use large graphs wouldn't like it.\nPeople tend to gravitate towards fancy styles like that even though they're often prohibitively expensive, so I've avoided adding blurs and shadows thus far:  We'd start to get (even more) of \"Why is my graph so slow?\" type questions on Stackoverflow and similar.  (There are already styles that add expense, and these would have an even greater effect.)\nThat's not at all to say some people wouldn't find this useful.  Maybe expensive styles should be marked with the red asterisk or similar in the docs.  Most devs ought to avoid them, because performance is so often a high concern.\n. Merged; looking into issue you noted now\n. Closing for now; let me know if there is anything else.  Thanks again!\n. ASAP so some issues may have to be postponed to a later milestone...\n. @MissChocoe\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-4cd4722e28-1423772885565.zip\n. Side effect : Should save some cycles in certain cases w.r.t. style calc's\n. Yes, just change the step size CSS property.  Smaller values are closer, and larger more spaced\n. This looks really nice, but maybe it would be better to work from #838 instead as that is very similar but has more options over styling?  Thanks\n. Closing because of separate PR\n. Already done in unstable for 2.4 but undocumented in the tracker.\ne.g.:\n'content': 'data(id)',\n         // works the same as\n         'content': function( n ){ return n.data('id') },\n. i.e. you can specify a function in place of the value in a stylesheet\n. Re-opening, because I think the docs need to be updated in unstable\n. TODO should be some note of performance and caching (e.g. use Lodash _.memoize())\n. Added docs so closing\n. Thanks\n. Great; thanks!\n. @MissChocoe FYI https://github.com/cytoscape/cytoscape.js/pull/849\n. Because this change sends the positions back and forth in a thread without doing the calculations in-thread, I'm going to close this for now.  See the more detailed explanation in the email I sent for details.\n. You can see the docs re. performance to maximise your performance for large graphs: http://js.cytoscape.org/#performance\nDepending on your particular machine, OS, and browser, your machine may not be able to handle the rendering of the entire graph.  You can show subsets of interest using a primary headless graph and a smaller display graph, for example.\n. Not an easy one to hunt down, but I think this will do it.\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-c41469fc3e-1425590577465.zip\n. You've probably made your stylesheet work against you.  You ought not to use .show() etc unless you're OK with using overridden styles on display: http://js.cytoscape.org/#collection/style/eles.show\nOtherwise, use a class in your stylesheet.\n. Maybe you should post your question to Stackoverflow?  I don't think there's a bug related to this in Cy.js, so that may be a better place to get help debugging your code.\n. Edit: mispaste; proper link : http://jsbin.com/gist/aedff159b0df05ccfaa5?js,output\n. Dagre is not a compound layout.  It assumes a traditional graph and ignores compound parent nodes.\nYou'll have to use some other organisation and/or manual layout applications (e.g. passing only the traditional subgraph to Dagre and then handling compounds yourself).\n. Snapshot that may help with the error message, but won't handle compounds for you: http://js.cytoscape.org/download/cytoscape.js-snapshot-337f380026-1425314100329.zip\n. Closing for now; re-open if further issues\n. It should function correctly more or less, but I think it assumes autosized parent nodes.  Otherwise, there is no way for layouts like this to position parent nodes.\n. I think doubleclicks are often bad for modern UI (especially considering there is no good analogue on touch etc.).  If you really want, you could:\n(1) Listen to click events.  Store the time and element ID.\n(2) If a click event happens with the same ID as previous within your desired time threshold, then .trigger('dblclick').\nYou can use custom events as much as you like, though I don't think it's a good idea for doubleclicks to be a part of the library.  They're bad UI/UX even on desktop.\n. You can do that however you want, e.g. with classes like collapsed.  That's app-level functionality, rather than library level.\nAs for dragging and dropping, that's again app-level functionality that you would have to implement.\n. That seems like a matter of aesthetic taste, but it could certainly be an option.  Other usecases, like semitransparent edges, would probably be better suited to how things are now.\n. You could do this by binding on zoom, e.g. with Lodash:\ncy.on('zoom', _.debounce(function( e ){\n  cy.batch(function(){ // for performance\n    cy.elements().removeClass('hidden')\n      .stdFilter( someFilterFn ).addClass('shown')\n    ;\n  });\n}, 1000/30));\n. Zoom is just a scaling transform, so it can't spread nodes out.  It seems as though you're trying to make nodes smaller on zoom (which may help), but you need to debounce your event callback:  Otherwise, the effect will be slow and expensive to render.\n. Thanks!  It looks really good.  Do you think it makes sense to centre the labels on edges (as it is with the background) all the time?  Or is there a different usecase that I'm not thinking of?\n. Maybe a text-background-shape: rectangle | roundrectangle property would be best.  In future, if we allow click events on labels, having a large border radius would complicate the hit tests -- whereas if the roundrectangle case has a small, unchangeable border radius then we can assume rectangles for the hit tests.\nThoughts?\n. Springy is a very basic force-directed layout.  Have you tried arbor, cola, or cose instead?  I doubt springy would work with such a connected graph.  Have you tried modifying the forces in options?\n. OK, good to hear.  Closing for now\n. @Braintelligence No, because nonparent nodes have fixed size based on your stylesheet specification.  You could calculate the min value and use that manually, or in unstable/2.4 you could do that calculation in a functional specification for the width style property.\n. I don't think it would support that property, as it would be more flexible to specify a function to width in 2.4.\n. Merged; will make a couple changes regarding performance shortly...\n. This change greatly improves the wrapped labels implementation.  It has a lot of caching now, and it should be less buggy now.\nThere were problems with label dimensions for fitting etc. because cxt.measureText() was used.  There was also the problem that top aligned labels wouldn't align properly anymore.  These and other issues have been fixed by the commit.\n. Example of labels above and below: \n. @ktei  Is there a reason to continue to disable this for edges?  We probably should just allow it unless it causes some problem.\n. I think this may be a bit safer.\n. You can style this: http://js.cytoscape.org/#style/core\noutside-texture-bg-color : The colour of the area outside the viewport texture when initOptions.textureOnViewport === true.\noutside-texture-bg-opacity : The opacity of the area outside the viewport texture.\n. Needs error msg fix\n. You can set the position of a node via node.position() inside the viewport extent (i.e. cy.extent()) on free events.\n. I would either upgrade or copy the implementation for cy.extent() as an extension in your app otherwise. Though I strongly suggest upgrade.\n. http://js.cytoscape.org/#collection/position--dimensions/eles.boundingBox\n. The function just ought to be renamed, e.g. .del() or .remove().\n. Renamed to .remove()\n. You tap to select.  You don't tap and hold.  If you want nonstandard behaviour, you can bind to taphold and change selections using the API.\n. That would require adding that feature to the library.  I doubt traditional bar charts would be practical, but stripes could be -- they would be a linear analogue of the pie slices style.\n. It would be like a foreground image\n. It makes sense for the pie-* properties, since they can be used for decorations.  For more complex charts, it really doesn't make sense to introduce more properties/styles.  Instead, it would make sense to use a library dedicated for the chart you want to export a SVG file.  That SVG can be used as a node's background image.\n. Thanks; and I don't really care about the formatting too much as long as things are human readable.\n. I think it has to do with the style/label key, so this should probably fix it.\n. Closing; re-open if still an issue\n. This adds a looplike edge for this case\n. A connection from parent to child or vice versa must loop in order for the edge to point to the outside of the parent and to the outside of the child.  A straight edge or similar would not meet this requirement, and so it would look incorrect.  If you try drawing things out on paper, you'll see what I mean.\nIn any event, any more complex edge type for this case would have to wait until a future version.  At soonest 2.5.\n. The style is the bottleneck, so you can't avoid simplifying the style if you care about performance.\nSee http://js.cytoscape.org/#performance\nAlso consider simplifying the style during the animations and then restoring the complex style afterwards -- with a class.\n. For performance, either\n(1) Batch, forEach ele, select\n(2) Build a collection, select\nOtherwise, you can trigger more than one redraw etc for large graphs.\n. Not necessary:\nUser can:\njs\nnode.on('taphold', function(e){\n  this.ungrabify();\n}).on('free', function(e){\n  this.grabify();\n});\n. Fixed by other commits to 2.3.11\n. I suspect you have a problem with the canvas: https://github.com/tmpvar/jsdom#canvas\nYou may have to ask the jsdom guys for further help, as -- unless there's a specific error on the cy.js side -- then the problem is with jsdom config or jsdom itself.\n. Also see https://github.com/tmpvar/jsdom#what-standards-does-jsdom-support-exactly\njsdom seems to be limited in what it supports, so while getting trivial d3/svg output is easy, I suspect that more sophisticated visual output will be difficult for jsdom.\nYou might have better luck with PhantomJS: http://phantomjs.org/\nSee also:\n- https://github.com/andrey-p/ectoplasm-js\n- https://github.com/deanmao/node-chimera\n. You may be interested in Dagre : http://js.cytoscape.org/#layouts/dagre\n. Closing for now; re-open if Dagre does not meet your requirements\n. It supports as large graphs as your hardware supports.  For example, I can render a graph as large as you have specified:\n\nIt also heavily depends on your style etc.  See the docs: http://js.cytoscape.org/#performance\n. Removing from 2.3.11 milestone.  No ready workarounds, and this is a Chrome bug that was recently fixed.\n. You also don't have to render everything at once.  That is under your control:\n(1) Don't add elements until you need them displayed.\n(2) Even if elements are previously added, you can use the stylesheet and classes or data to set whether certain elements are visible.  Invisible elements add very little rendering cost.\nIf you maximise your performance, then you're running into bottlenecks on your browser and hardware.  There's nothing we can do for those bottlenecks, as they are out of our control.\n. Use the string format or JSON format: http://js.cytoscape.org/#style/format\nUse AJAX to pull the file down prior to init.  You can use promises in 2.4 to make this more concise.\n. See http://jsbin.com/gist/f64e811fc3311414e083?js,output\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-f44b5acb38-1427725613884.zip\n. A zigzag goes straight along the x-axis and the y-axis.  A zigzag is broken along one axis to accomodate movement along the other axis.\nProperties:\n- curve-style : zigzag (add'l value)\n- zigzag-break : longer | shorter | x | y (breaks the shorter line by default)\n- zigzag-break-position : distance in px, em, or % to break from source to target, default 50%\nIssue: If multiple zigzags exist between a source and target, then they will perfectly overlap.  Thus, there will probably need to be a zigzag-step-size or similar to stagger the zigzag egdes.\n. Unless the edge bends are defined in position relative to the source and target, the behaviour is different:\nWhereas a zigzag automatically updates relative the the source and target positions, an edge bend would not (as it would have its own global location).\n. And I'm not sure if the additional expense of the bend points would be good for this case.  I suppose we'll have to see later and benchmark.\n. The same visual effect for fixed position graphs can be achieved today using straight bends / segment edges.\nZigzag edges need to be explored more in terms of usecases and visual style properties.  The previously proposed properties are probably not sufficient.\n. Here's a preview:\n\nAnother ticket will have to be created for this feature, as the API design for the right-angled edge style has changed quite a bit.  There are still some edgecases to consider and general additions to make before this gets merged in.  \nTo be clear, this particular edge style will mostly be useful for trees (and possibly some types of DAGs) that are well laid out.  It will not allow for an arbitrary number of right-angled corner points.. This issue has been superseded by \"Taxi edges #2306\". Implementation similar to edge bends, so closing\n. Currently, there's a bug making this not possible.  I added the feature to the temporary arrowsize branch, since the feature itself is simple.  However, the bug makes tapping edge arrows impossible for larger arrows.\nIf you can fix the branch, it could be merged to unstable for 2.4.  If not, it will have to wait for some later version.\n. The issue has been fixed for 2.5, so it should be possible to add this for 2.6.  Adding to milestone\n. @jelmerjellema Yes, that would be great!  Please make a PR on the unstable branch, which is used for new versions.  Maybe it should be called arrow-scale rather than size or resize for clarity?  Thanks\n. @jelmerjellema If you fork the repo, any changes that you push to your fork's git repo can be made into a pull request on Github.  You just click the pull request button on your repo's page.  (More info)\nThanks!\n. @ugurdogrusoz Would one of your students be able to search/diff @jelmerjellema's zip file and make a pull request from it?\n. @jelmerjellema Basically, you create a fork and commit your changes in the fork.  Then use the PR UI: https://help.github.com/articles/creating-a-pull-request-from-a-fork/\n. arrow-scale http://js.cytoscape.org/#style/edge-arrow. As this is an app-level, editor-like feature, it should be an extension.  There are already properties that allow for manual configuration of the bezier edge control points, so you'd just have to visualise those points and allow for dragging those points.\n. Closing for now\n. You shouldn't expect bypassed/overridden style (analogous to the style attribute in HTML DOM elements) to be serialised.  Use a class or data instead.  A style bypass/override isn't part of any model; it's in the domain of view.\nThis has been asked before with others making the same mistake, so to avoid this in future I'm revising this ticket to remove eles.show() and eles.hide() in the next version.  Those functions are too easily abused.\n. Just elesToHide.addClass('hidden') or similar\n. It's a docs-only change for backwards compatibility.\n. You'll have to move the elements out of the parent via eles.move() or modify the style somehow (like opacity: 0 maybe).\n. @gsateesh28 In future direct questions to Stack Overflow.  These are not bugs or feature requests.\n. Add a class that has content with the empty string.\n. Zooming OK\n. On touch this would preclude certain gestures; dropping\n. (1) That option is undocumented and not meant for use.  It was planned but never implemented.\n(2) Use dagre if you want a different layout like that.  breadthfirst is good at what it does -- saving a lot of space for DAGs -- but dagre is more flexible.  There's no point in bloating the breadthfirst layout if dagre already does a better job at that usecase.\n. There used to be support in an early version: https://github.com/cpettitt/dagre/issues/159\nIt would probably help to show your interest for that feature in that ticket.\n. Please direct questions like these to Stack Overflow.  This is neither a bug report nor a feature request.\n. Easy to reproduce on touch with zooming and panning disabled; may not require touch to be so easy\n. Same with mouse\n. TODO quick drag clear node layer case\n. Not a bug.  The tabs use display: none, which breaks dimension calculations.\nCall cy.resize() in cases like these.\nSee http://stackoverflow.com/questions/23461322/cytoscape-js-wrong-mouse-pointer-position-after-container-change/23484505#23484505\n. In future, please direct questions to Stack Overflow.  The tracker is for bugs and feature requests.  Thanks\n(I realise you probably weren't sure whether it was a bug or not.  In those cases, it's preferable to use Stack Overflow anyway -- so if it's not a bug, then other people can benefit from the answer.)\n. You'll have to call cy.resize() in the callback for one of show or shown (not sure) : http://getbootstrap.com/javascript/#tabs-events\n. This hasn't changed, and it's just using uglify with basic settings.\nMaybe updating gulp-uglify would help you?\nTry setting \"gulp-uglify\": \"^1.1.0\", in package.json, and then:\n- npm install\n- gulp build\nAlternatively, the minified file is just for convenience.  Your app probably ought to have its own concatenation and minification process as a part of building, and that would also give you more control.\n. I've updated uglify and it should be in the next release (though you should still test manually as noted above).  If that doesn't help, perhaps you could file a bug with uglify?\nYou could also investigate using an alternative minification mechanism for your project if you want to support old browsers, or you could serve unminified JS to old browsers.\n. gulp-uglify is updated to the very latest version for unstable/2.5\n. You can already do this.\nSee http://js.cytoscape.org/#collection/layout and http://js.cytoscape.org/#layouts/layout-manipulation\n. No worries; the main thing is it works for you\n. A diamond shape may be possible, though arbitrary shapes are not practical given the hittest expense.  You can use a transparent ellipse or rectangle shape with a SVG background to simulate arbitrary shapes.\n. May now be possible with Path2D and a specified SVG path: https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D\ne.g.\nnode.foo {\n  shape: svg(M10 10 h 80 v 80 h -80 Z);\n}\nI'm not sure about browser support.  All our uses of Path2D are for performance reasons now, and have non-Path2D fallbacks.\n. No, that's a proposal for 2.5 #925\n. Sneaking diamond into 2.4 with some refactoring for filesize\n. Try on 2.3.12 so we can publish support in the docs for 2.4\n. Still needs testing after 2.3.12 release\nIf working, add spm support to 2.4/unstable docs\n. Needs testing pub\n. A compound node has its dimensions determined from the positions of its children.  Thus, using a bypass like that is not something that makes sense with a compound node.  In 2.4, this has been fixed such that setting a bypass of height or width on a compound fails.\n. Try this snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-cc9a7daba3-1428695297822.zip\nThis does away with all selectors in all the advanced algorithms.  It also has some other changes that probably should speed things up at least a bit.  The getElementById() call in lieu of your change should be even faster, as no iteration is required.\n. For more advanced changes, it would probably be necessary to do some more detailed profiling and make more extensive changes -- if extensive, I would leave those changes to the soon upcoming 2.4.\n. So at this point it looks like it's just the cost of creating new collection objects each time one of the API functions like .filter() or .connectedEdges() is called.  Certainly creating a lot less objects would make this faster, though that would require replacing each API call with a manual replacement using arrays.  Using plain arrays would be cheaper, but it would probably only make at most a 15% overall improvement at the cost of making the code much less readable.  Perhaps in-place filtering could make an improvement in some cases without sacrificing readability.\nSee also https://github.com/cytoscape/cytoscape.js/issues/770.  If you could provide some large test data for benchmark tests, it would help in creating those benchmarks -- which would be important for performance testing for minute changes.\nClosing this ticket for now, as #770 will be necessary for measuring and validating improvements beyond what we have already.  And I don't want to make substantial changes to a bugfix release on 2.3.x.\n. i.e. if you want to discuss this case further, please use #770\n. Have you tried changing gesture state only when not in the gesture, i.e. after mouseup?  Even if additional checks were added to mousemove, by changing state during the gesture you would almost certainly run into problems later during mouseup handling -- because you mutated the enabled state of a gesture midgesture.\n. My initial thought is that resolving this in a general way would require checking all gesture combinations throughout the event handlers -- though maybe this is only an issue because of the shared pan/boxselect state where time is used to select between them.\nIf this requires significant changes, I'll have to push this to 2.4 instead of 2.3.x.  Though since the unstable/2.4 branch is more or less finished codewise (sans some docs stuff etc), you could use a build off of that if you want to pull in the change quickly.  In any case, I'll take a look.\n. @MauricioDentz \nSnapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-517d0b6471-1429897013031.zip\nThis may fix it for you, though I can't reproduce the issue -- so I couldn't say for sure.\n. Good to hear.  I'll close this for now, and please re-open if you notice any issues.\n. Both\n. The version of dagre that 2.3.x supports does not support compounds.  You'll need to use unstable or wait for 2.4.\n. See https://github.com/cytoscape/cytoscape.js/issues/859\n. Please post your code as a gist, jsbin, or similar.  I'm unable to reproduce this without a precise specification of what your code is doing.\n. Closing\nNot reproducible, and the reporter is unresponsive\n. Pathway Commons\nhttp://www.pathwaycommons.org\n. NDEx\nhttp://home.ndexbio.org/\n. Later:\nGeneMANIA\nhttp://genemania.org\n. Intermine : University of Cambridge : http://intermine.org/\nhttps://twitter.com/intermineorg/status/664410088623489024\n. ARAS PLM : http://www.aras.com/\nhttps://twitter.com/yoannmaingon/status/658042200165588992\n. Elsevier\nhttps://www.elsevier.com/books-and-journals/content-innovation/interactive-network-viewer\n. @NicolasForget As mentioned in the docs and readme, the project is MIT licensed and that's a very permissive license.  I have no legal expertise, but it is my understanding that most commercial organisations are able to use MIT licensed OSS.  There are several companies already using Cytoscape.js in commercial projects, but I can't speak to the particulars of your project and you should consult your company's lawyers if you have any concerns.. Use a value, not a function.\n. Seen on demo aedff159b0df05ccfaa5\n. Thanks. I've pushed the fix to 2.4/unstable, since that will be released in the next day or so.\n. Wrong place.  This is for which element is tapped -- not whether a tap is detected even with some small threshold.  Use these:\ntouchTapThreshold & desktopTapThreshold : A nonnegative integer that indicates the maximum allowable distance that a user may move during a tap gesture, on touch devices and desktop devices respectively. This makes tapping easier for users. These values have sane defaults, so it is not advised to change these options unless you have very good reason for doing so. Larger values will almost certainly have undesirable consequences.\nhttp://js.cytoscape.org/#core/initialisation\n. That's a plugin issue.  I don't think it considers compounds.\n. Closing for now\n. Yes, but before 2.5 you could make a small fork that adds a tee node shape to the list.  You should be able to more or less just copy your points and normalise them as per the other shapes.\nClosing for now in favour of #925\n. e.g.\nnode.foo {\n  shape: svg(M10 10 h 80 v 80 h -80 Z);\n}\n. Generic SVG shapes not practical re. hittests, but polygons are OK.  Don't depend on Path2D but add to some custom node shapes list.\ne.g. diamond:\nnode.foo {\n  shape: polygon(0, 1, 1, 0, 0, -1, -1, 0);\n}\n. More practical syntax:\nnode.foo {\n  shape: 'polygon';\n  shape-polygon-points: '-1, -1,   1, -0.5,   1, 1,   -1, 0.5';\n}\n. Because the graphs are essentially line drawings and JPEG introduces artefacts (i.e. blurriness), I didn't want to add that.\nMaybe it should be a simple extension?  The problem is JPEG is a more ubiquitous format than PNG, so if both were included by default -- a lot of people would make the mistake of just using JPEG and then being dissatisfied with the results.  \nIs the concern only with filesize?\n. That makes sense.  I didn't know about that limitation.  Maybe a strong warning in the docs would be enough then.\n. I'm planning on releasing on Monday, so I just sneaked this in since it's low risk.\n. It's probably possible to at least improve this by modifying the weight sort procedure for the levels.\nDo you have some sample data that could be used for testing?  It would make sure that the changes work for cases like yours.\n. Currently the bfs layout gives this result:\n\nSo this has been addressed already.. Would you please post cy.json()?\n. This will make it into 2.4\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-a48f4d2d0a-1431027200494.zip\n. See #931 \nThis is expected behaviour for 2.4.  I'm releasing on Monday, so if you request further changes it will have to wait to 2.5 (or you'll have to use a 2.5 snapshot).\n. You need to set the control point distance.  You've set the step size distance.  That makes sense only for successive, automatic beziers.\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-c89d618dff-1431122157660.zip\n. Are you using the latest unstable?  That was a bug in previous versions but should be fixed now.\n. This should disable the buffer that causes the issue completely, though at the constant ratio of 1 used in recent versions this shouldn't be a problem anyway.  This might help, but it's worthwhile anyway in that it's a slight optimisation.  I can't reproduce your issue at all, except on older versions.\nTry the snapshot, maybe you're having an issue building the latest unstable?\nhttp://js.cytoscape.org/download/cytoscape.js-snapshot-746167d48b-1431365694771.zip\nClosing for now\n. Workaround : Don't use quotation marks\n. Both clustering and overlap are layout concerns.  The particular implementation really depends on the particular layout.\n. (1) Box selection triggers the same select events as other gestures.  The end effect is the same.  Can you describe your usecase?\n(2) Events on labels are not supported due to expense.\n. Accurately checking whether text has been tapped is overly expensive, which is why clicking labels is not supported.  \nCould you make your nodes bigger?  \nYou could alternatively make your nodes bigger and transparent, using SVG background images to represent the station point -- while allowing for a larger click area that would include labels.\n. It will be expensive, even in small graphs.  When text tapping is needed in UI, generally you'd use the bounding box as an approximate, cheap measure.  That's not possible here, because the font is customisable.  That means we'd need general font hittesting, and that's overly expensive and complex.\nMaybe the cheap bounding box check plus a style property toggle (e.g. text-events: yes | no) could be an option, but I'm not entirely sure.\n. @kolesnikova-tavi \n\nNames have different lengths. And my application allows to change the color of stations. So it is not a very good solution.\n\nYou could create different coloured SVGs dynamically in your code.  There are libraries that make manipulating SVGs very easy, too.\n. Issue with text wrapping:\n\nNote the bounding box of the text given by the red box.  A tap anywhere in the box would be a tap on the label, and hence a tap on the element.  However, there are large empty areas on the last line.  Depending on the text and alignment, this isn't limited to the last line.\n. You can follow the milestone to see its progress\n. TODO : Implementation currently doesn't handle rotated labels\n. @sylvain-hamel That's good, but note that applying commits from unstable on master builds won't always go well.  It would be more reliable to build off of unstable.\n. Adding and removing elements in a layout directly was considered for 2.4, but didn't make it in -- hence that architecture.  Also considered was the possibility of resuming a stopped layout, with a .pause() alias on .stop().  Because Arbor uses its own internal web workers, it is not possible to destroy its worker from outside.  The spread layout uses the threads from Weaver.js, so destroying may be possible.\nThose changes will probably make it into 2.5.\nAs for Cola : https://github.com/cytoscape/cytoscape.js/issues/948\nDoes this make sense?\n. Closing as Cola has since been fixed and we can't control the webworkers of Arbor.  In any case, Arbor is only included for historical, backwards compatibility reasons.  There are better layouts.\n. We could avoid eval() if there were a global or self variable in the threads.\nhttps://github.com/maxkfranz/weaver/issues/2\n. It should be addressed in 2.4.1\nhttps://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/layout.spread.js#L247\n. If you mean that Voronoi and foograph when themselves are minified have mangled names, that you may need to elide from your minification process.\n. Probably the issue is that the main variable/entrypoint is mangled.  Maybe there's an option in your minifier to preserve that.  If not, you may need to keep them unminified (unfortunately).\n. Probably this:\n``` js\nvar maxZoom = cy.maxZoom();\ncy.maxZoom( fitMaxZoom );\ncy.fit();\ncy.maxZoom( maxZoom );\n```\nOr:\n``` js\ncy.fit();\nif( cy.zoom() > fitMaxZoom ){\n  cy.zoom( fitMaxZoom );\n  cy.center();\n}\n``\n. @sylvain-hamel Or you could specify that in the ready handler to be more specific for init load.\n. (1)cy.load()` is deprecated and no longer documented/supported.  It will continue to work as it has in the past (bugs and all) for backwards compatibility.\n(2) Use cy.add() and call a layout yourself to replicate the functionality of cy.load().\n(3) Calling cy.layout() with no parameters is also no longer documented/supported.  Use (2).\n. You have to create a new layout for the new elements.  If you call a layout that references nonexisting elements, you'll have problems...\nMaybe you just want to save your layout options rather than the layout.\n. Use cy.makeLayout() to get a new layout and call layout.run() whenever you want to apply it.  Keep the layout ref as long as you want to use it.\nhttp://js.cytoscape.org/#core/layout/cy.makeLayout\n. I strongly suspect this is an issue with your setup rather than cy.js : https://stackoverflow.com/questions/2390232/why-does-canvas-todataurl-throw-a-security-exception\n. ready, stop, start\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-0221978733-1432226869224.zip\n. Still happens but less frequently\nIf motionBlur: false, happens all the time\n. https://github.com/cytoscape/cytoscape.js/commit/d717613652152d076474367cde30c04aec24e323\n. In step (4), you say \"tap and drag\".  Do you mean (A) tap then drag or (B) just tapstart and drag?\n(A) behaves as you expect, whereas (B) does not.  Selection is not standard on (B), because there is no tap -- it's an incomplete tap with only tapstart (in the tapstart, tapend, tap sequence).\nIf you want selection to happen outside of tap events, you can bind to those events and manipulate the selection state as you wish at that point.  Does that make sense?\n. You can add a bit of logic to make selection happen on tapstart, though you will still get selection behaviour on tap (though the end effect is the same).  As for whether it's preferable UI, I'm not so sure.  Whereas tapstart selection can never be cancelled, in tap selection the user can back out at the last moment by dragging the node a bit rather than tapping it -- which is a common UI mechanism on things like buttons, menu items, etc.\n. Closing for now, as I don't think this should be default behaviour\n. Would you please provide an example (e.g. jsbin)?\n. Or could you describe the issue a bit more in-depth with an example graph as a reference point?\n. Is this issue still in 2.4.1 for you?  I think this may be related if you are using haystack edges:\nhttps://github.com/cytoscape/cytoscape.js/issues/956\n. (1) The example doesn't work for me\n(2) After trying to fix the example, it's impossible to scroll.\n(3) You shouldn't apply overflow to your cy div.  That will not work.  You may be able to have a parent div with overflow: auto, but the scroll will not pan your graph.  Those are separate mechanisms.\n(4) If you play around with the inner contents of the cy div, you will get unexpected results.  It's like modifying private data -- the behaviour is unexpected.\n(5) See also https://github.com/cytoscape/cytoscape.js/issues/721\nDoes this make sense?\nClosing for now, because there isn't really anything we can do on the Cy.js side for this.  It's necessary to reconsider the structure/hierarchy of your layout.\n. You can use Node.js plus PhantomJS.  This lib would be useful: https://www.npmjs.com/package/phantomjs\nThe code should be relatively straightforward.  If you modularise your code, it may make a good npm module/library (e.g. just pass some options incl. cy.js init options and get out a png or jpg file).\n. Note that you can use cy.js headlessly in Node.js just fine.  It's only because you need screenshots that PhantomJS is needed.\n. https://github.com/cytoscape/cytosnap\n. Now a separate repo, and not advisable anyway\n. Alternative option: Box selection only occurs with the shift key pressed\n. Changes to unstable: \n- Box selection is enabled by default\n- Box selection happens only when one of (shift, ctrl, meta) and drag happens after mousedown\n. The new style of box selection should be additive; re-opening\n. It's additive now\n. A hyperedge is an n:n edge, whereas a regular edge is a 1:1 edge.  That is, a hyperedge can have multiple sources and multiple targets.  This has been considered before, but has not been planned due to complications and conflicts it would have on the API.  A thorough analysis would be required.  Consider algorithms like A* that use edges.  \nMerging (which is what I think the desktop app does), is completely different.  That can be simulated by representing each set of parallel edges as a single edge.  Merging can be done in a straightforward way in your app level code, whereas hyperedges require API level support.\n. This should fix it, and also a minor rendering issue with hollow arrows that are semitransparent:\n\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-fb6523bf26-1433345128819.zip\n. Great idea, but it should probably be functional instead of assuming a particular data field, i.e.\njs\nlength: options.edgeLength.call( edge, edge )\n. Whatever fonts are loaded in the browser/page can be used in labels.  So, you could specify a font hierarchy like font-family: font-awesome, helvetica and use the character codes in the labels for the icons you want.\nIf you want a real background image, you'll have to use the corresponding SVG from the icon font.\nDoes that make sense?\n. We can't support HTML, because that doesn't mix with canvas (the rendering technology used)\n. I wouldn't want to do that either.  Right now, it's completely decoupled from the rendering technology.  We may want to add back SVG, for example, for SVG file output.  Or we may use WebGL in future -- or some other tech. (Though WebGL doesn't seem to be any more performant for what we need in 2D).\nDoes that make sense?\nOption with SVG: Because the fonts tend to basically have a SVG spritesheet, maybe you could try using the background-width, background-height, background-position-x, and background-position-y?\n. e.g. https://css-tricks.com/css-sprites/\n. If you want to use the icon as a background image, then you're going to run into the limitations of background images.  At best, you could use a SVG library to manipulate the SVGs you're using programmatically and then specify those SVGs as the background images of the nodes.\nComplete rendering of an element is not practical/possible for other reasons, as well.  It will be possible to have arbitrary polygons in 2.5, though: https://github.com/cytoscape/cytoscape.js/issues/925\n. > You wrote \"add back SVG\", is there a thread somewhere that explains why SVG was dropped?\nThat was only a prototype renderer.  The current renderer is a completely different implementation that depends on canvas only for visual output (whereas the old SVG one depended on SVG semantics for hittests, etc...), but SVG output could be added to it.\n. I don't think it makes sense to make assumptions about style that remove control from the dev.  If this is to be a feature, I think it ought to be explicitly set by the dev.  \nConsider that the dev may not position the label the same way as you have such that the margin is unnecessary -- and it could even break their styling.\n. You can already do it functionally with the stylesheets per property, so it should suffice to add the new property.\n. e.g. \n'margin-bottom': function( node ){ return whatIWant; }\n. Once something like 'margin-bottom' is implemented...\n. Moving to 2.6 because node label rotation support doesn't work as well without margins\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-abbafd76af-1433533467112.zip\n. For elements, have you tried the overlay? That would work for both nodes and edges -- and that may even make the part that follows unnecessary:\nFor groups of elements, you should consider something like an extension.  That's outside of the scope of individual elements.  You will find the bounding box functions useful for this.\n. Just set it in your stylesheet:\n:selected {\n  overlay-color: blue;\n  overlay-opacity: 0.5;\n  overlay-padding: 5;\n}\n. You need to set all three properties.  By default, I think the values are (black, 0, 0)\n. It's really only meant to follow the element shape, just like a border wouldn't enclose the text.  You could calculate node.outerWidth(), put that value in node.data(), and use a mapper with the regular properties.\n. Example of what I mean: http://jsbin.com/tenupopesa/1/edit\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-1f0f307c05-1433966276387.zip\n. Spike state:\n(1) Use a circle layout for the neighbourhood, with a small radius and centred on the node of interest.\n(2) Make the neighbourhood nodes opacity: 0.\n(3) Make the neighbourhood edges opacity: 0.5 or similar low value.\nClosing for now, as this should recreate that effect.\n. Try a smaller radius like 10, hide the edge arrows by default, and show the neighbourhood only on mouseover. \n. (1) You've specified numeric values as strings\n(2) Circle doesn't take roots.  Use a boundingBox centred on your node of interest\n. (1) Use whatever elements you like and eles.layout().\n(2) Use the boundingBox to limit the layout size\n(3) & (4) Hover effects are not effective on touch.  Even if you could get it working, it's probably not worth it.  Affordances should work well on touch and desktop -- meaning that hover effects are not enough.  Similarly, this won't work well if you're using the context menu, because you've overloaded the gesture.\n. See https://github.com/cytoscape/cytoscape.js/issues/937#issuecomment-108475518\n. This change should also increase the performance of these functions a bit.\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-14fd63fb6b-1433964909428.zip\n. See initrender in init: http://js.cytoscape.org/#core/initialisation\nOr use cy.onRender() with cy.forceRender() to guarantee correct PNG output at any time (even after init).\n. If this is all happening on your server, the images should load very fast -- but not on the first frame probably.  I would just set a small timeout and then grab the image.\nIf you want very fast images (that should load on the first or second frame or so), use embedded images in the stylesheet.  e.g. http://www.websiteoptimization.com/speed/tweak/inline-images/\n. Cross platform apps use Shift for multiple selection, like Photoshop.  Ctrl doesn't work well across platforms, especially on web.  It works fine on Windows, but on Mac the analogue of Ctrl is Command.  Supporting both Ctrl and Command doesn't work:\n- Command is Meta on Windows and opens the start menu.\n- Ctrl on Mac with click opens the context menu.\n. You can try this, but I can't guarantee it will make it into 2.5.  If it's buggy, it will have to be removed.\nWorst case, you'll have to fork if this is reverted.\n. Once 2.5 is complete\n. I'm going to close this for now unless a bug is found with this feature\n. Ref https://github.com/cytoscape/cytoscape.js/issues/636\n. Looks like there's a bug, then -- since the threshold I referenced should be for tap.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-05e5c2297c-1434137542817.zip\n. @rockshandy Would you create an issue for that and link it to here?  I'm away until 24 Nov, and don't have regular/reliable internet...\n. The original PR for this should have had a text-border-opacity property.  The text-background-opacity can not be shared.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-1d2889eb7c-1434474209218.zip\n. The forcedirected layouts have a random or randomize boolean for randomising the initial node positions.  If falsey, the layouts use the existing node positions.  I think the spread layout and cose2 are the ones that need this added.\n. There isn't much you can do about the first calculation of style, apart from reducing the size of your stylesheet.  There are optimisations such that subsequent calculations of style are cheaper for the elements, however.\nThere may be some optimisations that can be made to make this a bit faster, but the initial calculation is necessary.\n. Note: Haystack edges are cheaper than bezier edges, with respect to both rendering and style calculations.\n. I tried to benchmark some small optimisations, but the changes didn't make a difference.\n. Good to hear your performance is improved; closing for now\n. Do you have a testcase that has issues with the current setup?\nThe PR is much appreciated, but a timeout may not work here.  Calls to .matchCanvasSize() need to be guaranteed to finish before subsequent calls to .redraw() -- else .canvasWidth etc will be incorrect during the redraw.\nI think the case may be a bit different here with respect to reading the CSS values.  Usually, reads can be made OK at any time.  But writes can invalidate subsequent reads -- or cause multiple reflows in the HTML model.  Since we read at the start and then only write after that, I think we should be OK as-is.  Does that make sense?\n. Have you tried calling cy.resize() after you change the cy div?\nYou could put the call to cy.resize() in a timeout.\n. The delay should not be within cy.resize(), because it removes control from the developer.  The call would be async such that the dev could never guarantee the order of events.\nIt's far better for the dev to be able to specify a sync or async cy.resize() by making that call either directly or with his own setTimeout().\n. Modernizr also fails this test: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/touchevents.js\nDetecting the user agent for Firefox is not an option, as there are mobile versions of Firefox.\nThis mostly affects the default size of the pan indicator.  Maybe we could just make it somewhere in between the two sizes all the time as a compromise.\n. Affects Macbook Pro but not desktop Mac\n. Depends on #987 and #988 \n. Dependency issues resolved and the affected test device seems OK now\n. Closing for now re. https://github.com/cytoscape/cytoscape.js/pull/980#issuecomment-114576137\n. For now, this can only stop all animations on nodes in the layout.  A more refined solution for 2.5 would include stopping only the positional animations.\n. We alter the regular flow of rendering for performance:\n(1) The rendering rate is altered based on how fast you can draw so the period to draw is consistent (i.e. smoother).\n(2) Rendering happens on demand.  Unnecessary (i.e. no change) frames are dropped.\n(3) Related to (1) and (2), we make intermittent calls to requestAnimationFrame().\n(4) Rendering is prioritised to get the last frame in as quickly as possible (e.g. during user events like drag).  This ensures that the elements keep up with the user's cursor or finger.\n(5) User events are rate limited to ~30 per second.  This avoid redundant calculations (overhead) and makes less powerful hardware more user responsive (especially on ARM touch devices like iPad). Because of this and (2)+(4), you'll get maximum 30 updates per second on user events like drag.\nBecause of this, it's difficult to accurately measure framerate for Cy.js in general. You may be running into (5), since the easiest way to test is to drag elements to get redraws to happen.  I think animations should be 60 FPS, but I'm not entirely sure.  In any case, I don't think a tool will be able to give an accurate depiction of the rendering speed.\nIf you set in your init options the following, you'll get a slightly closer approximation to how fast rendering is going:\nrenderer: {\n      name: 'canvas',\n      showFps: true\n    },\nWarning: This option is undocumented, and not meant to be used in production.  It could change in future.\n. OK; closing for now\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-9e02b512eb-1434984281382.zip\n. I can't reproduce this on regular or compound graphs.  I'd need the graph that has problems.\n. Closing until reproducible\n. Adjusting the width is too much, but the names of functions could be split by word so it wraps\n. It looks like you're specifying elements where you should be specifying IDs for source and target.\n. Closing for now; will re-open if issue persists\n. Raw Git made a breaking change.  It should be OK now.\n. (1) The harmonic mean is used by default, which is better for the general case.  You can set the new flag appropriately for the arithmetic mean.\n(2) See associated issue for Dijkstra\nSnapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-d1361bfa4c-1435945860146.zip\n. Adds options.harmonic flag\n. Cytoscape.js uses child_process only in Node.js/io.js environments, and this is detected dynamically.  If your tool is doing static require() analysis, you'll have to config your tool to ignore things like that -- as static require() analysis is insufficient for determining when/if actual require() calls are made.\nWhy isn't the tool looking at something explicit like package.json which lists no package dependencies?\n. @OAGr \nWas able to find a workaround : https://gitter.im/webpack/webpack/archives/2014/08/26\nWill be built into package.json for 2.4.5\n. @swillard-r7 The current release is 2.6.6.\n. May want to wait for the release until https://github.com/tgdwyer/WebCola/pull/121 has been closed\n. Probably will have to wait for native browser support, because this uses the reserved export keyword.  Maybe there is a way to detect export support via eval() and try.\n. Thanks for your feedback.\nI suspect there may be some issue in your setup.  Maybe a graphics driver issue or a browser extension?  The examples run smoothly on Firefox on all the machines I have access to -- many of which are average performance-wise.\nAs for documenting relative browser performance, it's tricky.  We can't say that one browser is absolutely faster than another, because other factors come into play (e.g. hardware acceleration support).  In fact, from browser version to version, there are differences.  At at least one point that I recall, Firefox was much faster than Chrome.\nYou may find the rendering for unstable/2.5 to be smoother and faster.  I'll probably release a beta very soon to npm while I'm working on the docs -- which is pretty much all that's left for the release.\n. And note that this issue is not meant to increase performance in our lib w.r.t. Firefox.  We're pretty much as optimised as possible. \nI was talking with some folks at Mozilla and they asked that I create a demo to benchmark their performance for canvas using Cytoscape.js.  The intention is that the benchmark could be used to help them increase the performance of their canvas implementation for larger, more complex usecases like ours.\n. Performance enhancements in 2.7 work around Firefox's slower canvas drawing performance for many cases, especially general viewing.  Removing from 2.8 milestone, but it may be nice to have a FF report later when there's less to do\n. Related to https://github.com/cytoscape/cytoscape.js/issues/985\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-37e892af1b-1436548688457.zip\n. There's a later call to cy.fit( padding ), so I don't think that's an issue.  A few things, though:\n(1) All new features should be PRs on unstable.  master only gets fixes for minor releases.\n(2) Doesn't this work only with one column?\n(3) Couldn't you use the existing options, like boundingBox, to make the nodes closer together?  A smaller boundingBox will put the nodes closer together and zoomed in more.\n(4) The layouts all try to use up all the available space.  This depends on screen size and your style.  It may also help to make your nodes etc bigger in your stylesheet.\n. This PR still isn't on unstable so I can't merge.\nThat aside, I've made a separate commit that doesn't conflict with the previous options and has more modular options.  Please review.\n. OK; closing for now\nLet me know if anything else comes up regarding this\nThanks!\n. Whatever way Typescript definitions are published, it would be great if it could be automated on the Cytoscape.js side so that they're automatically kept up to date.\nThe docmaker.js file generates the HTML version of the docs from docmaker.json.  It would be great if a tsdefmaker.js file could be made to output a .d.ts file.  That way, everything could be automated with each release.\nI'm not an expert an TS or TS defs, so it would be great if someone wanted to make a PR to do this.\nThanks\n. Unless the process of creating ts defs can be completely automated through the existing docs build, then they won't be maintained in the official repo.\nIt would be great if someone would create a community npm package.  Maybe @phreed would like to publish https://github.com/phreed/ts-typings/tree/cytoscape to npm, or maybe someone could create a new Github repo based on @phreed's work that could centralise community ts defs for Cytoscape.. @phreed's defs are for Typed-Typings rather than DefinitelyTyped.\nI don't think it's likely that Cytoscape will be rewritten in TS.  If the community wants to maintain a separate defs package to support TS users, that's great and we'd be glad to link to it!. > Should this:\n\n interface Stylesheet {\n     selector: string;\n     css: Css.Node | Css.Edge;\n }\n\nactually read:\n interface Stylesheet {\n     selector: string;\n     style: Css.Node | Css.Edge;\n }\n\n\nEither works in 2.x or 3.2, but style is preferred and css is now undocumented/deprecated.\n. I've been looking into automation a bit more and it seems both TS and Flow have some options that might work to more directly integrate type definitions into Cytoscape:\n\nFlow\nJSDoc support in JavaScript\nFlow comments\nflow-jsdoc\nflow-typed\nTS\nTypescript type annotations as comments\nSupport 'Promote JSDoc comment to type annotation'\nSupport 'Promote JSDoc comment to type annotation'\n\nI would lean towards using Flow, because it supports using JSDoc comments to generate the type definition files.  It looks like JSDoc (now v3) is much better than it was when this lib was started, so maybe we could use it to generate the docs page as well.. TS may be more popular than Flow, but JS is more popular than TS by a wide margin.  Flow can be used without making semantic changes to the source, whereas it seems TS must make semantic changes to the source.  This lib will not use TS or Flow to directly generate definition files unless the source is still just plain JS.  It's important that anyone who knows JS can pick up the source in any editor, modify it easily, and run/test it natively on Node without any compilation step.  3.2/unstable uses Babel/ESNext for compatibility with old browsers, for example, but the source can be run directly in Node 6+.\nThis looks to be possible in Flow, but I don't see any official support notes in the TS docs or the TS issue tracker.  If the goal of this ticket is to have productive autocomplete/intellisense in your tooling, it shouldn't matter whether it uses Flow or TS:  Your editor can use plugins for both.\nI don't have any inherent preference for either tool, but I think if the lib ever supports typings in the source it would have to use JSDoc comments.  It's ubiquitous and non-intrusive.  Ideally we could support both Flow and TS output via JSDoc comments.  \nIf TS supports JSDoc, then that's great.  But I'd like to see docs for it; I didn't find any.  If TS doesn't support JSDoc, I think it would be worthwhile for you guys to advocate for it in the TS issue tracker.  I think that's the only way there'd be direct support for TS in this lib.. > I am not sure what you mean by TS requiring semantic changes to the underlying JS. \n@phreed (1) (a : int, b : int) => a + b is different from (1) (a : String, b : String) => a + b even though the compiled result is the same.  But my original point was that either of the two previous lines is different than (3) (a, b) => a + b:  (1) and (2) have additional semantics not present in (3) and no browser is able to interpret (1) or (2).  Using comments to annotate (3) with types doesn't break anything, whereas (1) or (2) are broken unless you buy into the TS ecosystem and require any contributor or user (who modifies the source) to do the same.  That's my real concern.  Anybody familiar with JS should be able to just edit the source, not just TS experts.\n@opavader Yes, @phreed's definition for the lib is great!  My points mainly concern the future.  Say a year from now, is that definition file up-to-date?  Longterm, it's probably best if generation of the definition can be automated from the lib source so it's always up-to-date.. @felixfbecker That's correct, but it seems you do need to add TS types to the source if you want to generate the definition automatically from the source.  The Cytoscape Consortium has limited resources and TS support, in the grand scheme of things, is a relatively low priority.  If TS support can't be automated and very easily maintained (like with JSDoc comments), then there probably won't be first-party TS support.  \nIf the goal of everyone in the thread is to have a high quality, up-to-date definition in the longterm, then I think we should try to aim for automated, easily-maintained JSDoc comments as I've mentioned.  I found this on the wiki, but the docs don't say anything about support.. @phreed \n\nkeep a set of informal / formal specifications in the jsdocs (current approach)\n\nWe don't even have this yet in the lib.  There's a hand-rolled docs generator script from a json spec.  \n\nkeep a set of formal specifications in the jsdocs\n\nIdeally we could use formal jsdoc comments throughout (at least) the public-facing api to generate the docs, ts defs, and flow defs.  This would be a good, longterm option.  The source doesn't have any jsdoc comments yet, so this would all be todo.\n\nkeep a set of type specifications separate from the main javascript but in the cytoscape repository @opavader\n\nThis is the best option in the shortterm.\n\nnotify a collaborator (us) that the api has changed\n\nThat should be easy/automatic, because all api changes are documented in each version's milestone.\n@felixfbecker Do you have an example of jsdoc not being enough?  My understanding is that detailed-enough jsdoc comments should suffice for features like intellisense/autocomplete.  Tern seems able to do it with just jsdoc comments, so I think ts should be able to do the same.. I think the reason this happens is this:\n- Cola is aware of node dimensions\n- Node dimensions include { width, height, padding } => { width + padding, height + padding } sent to Cola\n- Labels are not included in { width, height } sent to Cola\n- Cola can't detect parent overlap, because parent position is inferred -- not sent from Cy.js\nI think the solution may be to send node.boundingBox().w etc instead of node.outerWidth() to Cola.\nI still think that this won't take into account parent padding, but that's separate problem and I don't think it can be configured in Cola.\nYou may want to use CoSE, which is explicitly meant for Cy.js compound nodes and can take into account parent padding.\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-58bd947871-1437147158974.zip\nLet me know if this works for you\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-80d36141b7-1437499627985.zip\nIt looks like the conditions are more tricky if used as the init layout.  Try this snapshot.  It works around the init issue and tries to avoid overlap with compounds a bit better.\n. Removes console.log(); snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-f592ed5197-1437499885373.zip\n. OK; closing for now\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-7b37cb8260-1437497360388.zip\nTry this.  This is an issue on IE's side.  Considering .destroy() shouldn't happen too often, the expense of a try-catch seems reasonable here.  Let me know if it works for you.\n. There isn't much you can do, apart from experimenting with different layout parameters.\nThere is an improved (and rewritten) version of CoSE (i.e. cose2) that produces more compact layouts in unstable/2.5.\n. Only release builds are built automatically.  You'll have to build unstable yourself via gulp build.\n. Closing for now\n. @keiono Could you take a look at this?  The user might not be generating the JSON your plugin expects, but there should probably be an error message either way.\nMaybe it makes sense to move this ticket to Cytoscape desktop.\n. Firstly: @nandankita   I think you're running into a separate bug, that Cytoscape desktop errors out if you give it a graph with only one node (or just several nodes).  This happens for sure with JSON import, but possibly other formats as well.  Try adding two nodes and an edge.\nSecondly: @keiono  Is it not possible to support import/export of vanilla JSON in Cy desktop, e.g. cy.json() and cy.elements().jsons()?  All that desktop metadata, like SUID could be automatically generated for the user.\n. @keiono This may mean that an extra check may be needed in the importer.  elements may be a map of arrays of elements: { nodes: [ ... ], edges: [ ... ] } or one array elements: [ { group: 'nodes', ... }, { group: 'edges', ... }, ... ].  The export can use either style.\n. @nandankita To clarify: Importing styles into Cy desktop will probably not be possible in the general case.  The model of Cy desktop for style is analogous to a very simple stylesheet:\n```\nnode {\n  ...\n}\nedge {\n  ...\n}\n```\nSince Cy.js can support stylesheets with an arbitrary number of selector blocks and Cy desktop has no notion of selectors, compatibility for styles from Cy.js-to-Cy3 is not really possible.\nYou could try making your stylesheet very, very simple and putting cy.style().json() into a style JSON exported by Cy3.  No guarantees, though.\nAs for separation of JSONs from Cy.js, it's all in what you call:\n- cy.json() : whole graph state\n- cy.style().json() : stylesheet only\n- cy.elements().jsons() : graph elements only\n. Closing for now as this seems to be OK for @nandankita \n. @bramson Would you please post the problematic JSON file in the Cytoscape desktop issue tracker in order to help reproduce the issue?  What version of the Cytoscape desktop app are you using?. @bramson  Here's the link to report a bug in the Cytoscape desktop issue tracker: https://cytoscape.org/bug-report.html. No, silent selects are not possible.  \nThis is a general problem with event cycles in any event-driven system.  There are several solutions for this, but you probably just want to disable your listeners when your app-level code is making a selection.  That will break the cycle.\n. Would you please make this PR on unstable rather than master?\n. I don't think the current licensing should be an issue, but your lawyers should be able to confirm this by reading through LGPL v3.\nLGPL mostly concerns changes to the library being brought back to the open source community.  Cytoscape.js is currently already used in several commercial products.\n. Closing for now\n. Please refer to the documentation.  Cytoscape.js can create graphs as per graph theory, with nodes and edges.\n. This required changes to several layouts themselves to take into account BB in lieu of simply w/h.  The lib only included w/h until more recent versions, so the layouts used those values.\nYou can build off unstable to see the changes.\n. position does not go under data:\nhttp://js.cytoscape.org/#notation/elements-json\n. A layout runs only when you call layout.run() or cy.layout().  It will not proactively set positions for you as new nodes are added.\n. Issue: Element in example was in state opacity: 0 for next z-order sort in renderer after .addClass()\nAdding opacity check in drawElement() etc in the renderer is expensive, so instead set the initial transition value as though the animation started a little bit (~0.01% or so)\n. Also affects animations if started at opacity: 0 with associated z-index sorting\n. The issue is not with bounding boxes.  You called a layout after adding elements, so you have a defined BB -- as you'll notice if you step through the code in your debugger.\nThe issue is that you've specified a node as locked without any position at all.  Arbor can not assign a position because you've made position immutable.  But you've specified the node to be included in the layout.  Arbor can't set or get position.  We're in a contradictory state.\nYou need to set a defined position to a node if you're going to lock it.  Otherwise, locking doesn't make sense.  Either specify initial positions or use another layout to do so for you after adding.\n. For some reason, the arbor fromScreen() call fails with that particular config.  I'm against patching arbor itself to behave correctly, since the authors don't accept PRs.  I've just added an extra null check on our side as a workaround.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-6649ed0e00-1439400173334.zip\n. The author of that function will take a look at it as soon as he can.\n. @mktonn In the meantime, I have verified that this function works as correctly on other externally documented inputs.  The author will be able to look at this particular case in more depth.\n. @mktonn @ayhun I tried refactoring and debugging the existing code.  That revealed nothing.\nI then rewrote the function from scratch:\nbetweenness-centrality.js:\n``` js\n'use strict';\nvar is = require('../../is');\nvar elesfn = ({\n// Implemented from the algorithm in the paper \"On Variants of Shortest-Path Betweenness Centrality and their Generic Computation\" by Ulrik Brandes\n  betweennessCentrality: function( options ){\n    var eles = this;\noptions = options || {};\n\nvar weightFn = options.weight ? options.weight : function(){ return 1; };\n\nvar defineSetterFn = function( defaultVal, onSet ){\n  var fn = function( t, val ){\n    if( fn[ t.id() ] === undefined ){\n      fn[ t.id() ] = defaultVal;\n    }\n\n    if( val !== undefined ){\n      fn[ t.id() ] = val;\n\n      if( onSet ){ onSet( val ); }\n    }\n\n    return fn[ t.id() ];\n  };\n\n  return fn;\n};\n\nvar max = -Infinity;\nvar Cb = defineSetterFn( 0, function( val ){\n  if( val > max ){ max = val; }\n} );\n\nvar V = this.nodes();\n\nV.forEach(function( s ){\n\n  var S = [];\n\n  var P = function( w, toAdd ){\n    if( !P[ w.id() ] ){\n      P[ w.id() ] = [];\n    }\n\n    if( toAdd !== undefined ){\n      P[ w.id() ].push( toAdd );\n    }\n\n    return P[ w.id() ];\n  };\n\n  var sigma = defineSetterFn( 0 );\n\n  sigma( s, 1 );\n\n  var d = defineSetterFn( -1 );\n\n  d( s, 0 );\n\n  var Q = [];\n\n  Q.push( s );\n\n  while( Q.length > 0 ){\n    var v = Q.shift();\n\n    S.push( v );\n\n    var neighborhood = options.directed ? v.outgoers() : v.openNeighborhood();\n\n    neighborhood.nodes().forEach(function( w ){\n      var edges = options.directed ? v.edgesTo(w) : v.edgesWith(w);\n      var max = edges.max( function( edge ){\n        return weightFn.apply( edge, [edge] );\n      } );\n      var weight = max.value;\n      var edge = max.ele;\n\n      if( d(w) < 0 ){\n        Q.push( w );\n        d( w, d(v) + weight );\n      }\n\n      if( d(w) === d(v) + weight ){\n        sigma( w, sigma(w) + sigma(v) );\n        P( w, v );\n      }\n    });\n  }\n\n  var delta = defineSetterFn( 0 );\n\n  while( S.length > 0 ){\n    var w = S.pop();\n\n    P(w).forEach(function( v ){\n      delta( v, delta(v) + sigma(v)/sigma(w) * ( 1 + delta(w) ) );\n\n      if( !w.same(s) ){\n        Cb( w, Cb(w) + delta(w) );\n      }\n    });\n  }\n\n});\n\nvar getNode = function( nodeOrSelector ){\n  if( is.string( nodeOrSelector ) ){\n    return eles.cy().$( nodeOrSelector )[0];\n  } else {\n    return nodeOrSelector[0];\n  }\n};\n\nvar ret = {\n  betweenness: function( nodeOrSelector ){\n    return Cb( getNode( nodeOrSelector ) );\n  },\n\n  betweennessNormalized: function( nodeOrSelector ){\n    return Cb( getNode( nodeOrSelector ) ) / max;\n  }\n};\n\n// alias\nret.betweennessNormalised = ret.betweennessNormalized;\n\nreturn ret;\n\n} // betweennessCentrality\n}); // elesfn\n// nice, short mathemathical alias\nelesfn.bc = elesfn.betweennessCentrality;\nmodule.exports = elesfn;\n```\nMy implementation here is very clean -- staying verbatim with the pseudocode in the paper.  It uses functions so that the implementation is formatted just like the paper and to make sure we don't have any misuses of our lists.\nMy alternative implementation gives exactly the same results as @ayhun's for the graph you posted.  I strongly suspect any issue is with the design of the algorithm itself. The paper mentions DAGs at one point, and another paper references this one w.r.t. betweenness estimates.  Perhaps the cycle throws this algorithm off, or perhaps the values are not to be taken absolutely but relatively -- making the normalised values more useful.\n. This is expected.  The edges are drawn to the radius you specify with haystack-radius.  If you want them on the edge of the node, you can set 1.  Alternatively, you can use opacity: 1 on the nodes.\nClipping based on shapes is expensive, especially for many shapes.\n. This is normal.  All edges go the edge of the node's shape with radius 1.  The location along the shape's edge is random, for performance.\nBeziers do not use random positions and do expensive intersections.  It's a tradeoff.\nIf you don't have a mutligraph, I suggest haystack-radius: 1.  Otherwise, find a value you like.  If that doesn't fit your aesthetic, then you may want to use opaque nodes.  \nManaging both aesthetics and performance is a difficult balance.\n. Closing, because there is no bug to assign\nIf you have further questions, that's fine though\n. Typo : I meant to suggest a radius of 0.  That will put an edge in a node's centre.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-f731eb57cf-1439483004700.zip\n. This looks really interesting.  It would be great to have your React module as a separate package that we could link to on js.cytoscape.org.\nIt may be nice to have an ele.json( obj ) API so you can set/change an existing element's state based on a JSON object (same format or subset of ele.json()).\nThe same could hold true for cy.json( obj ).  This one would take into account global state like pan/zoom and things like added/removed elements, with modified elements being delegated to ele.json( obj ).\nIt may also be nice to be able to smoothly transition between states using animation, rather than discrete/jumpy state changes -- though that would be more of a niche feature I think.\nDoes that make sense?\n. Alternatively, it would be about the same cost to do this (expect possibly for larger graphs):\njs\ncy.batch(function(){ // make sure we have only one redraw -- i.e. no delay between removing and adding\n  cy.elements().remove();\n  cy.add( elesJsonsForNewState );\n});\nThe downside is you lose elements references and the possibility of smooth transitions, etc.\n. The batch() option is simpler, but it's generally more limited.  It could also be more expensive in cases where you need lots of small state changes in succession.\nI would imagine the cy.json( obj ) etc APIs to do diff-style changes with corresponding emitted events -- whereas the batch() option is less flexible and just replaces all elements on every state change.\n. @OAGr  It looks like ele.json( obj ) would work fine for setting/diffing elements.  cy.json( obj ) looks like it would be too expensive to be practical for your usecase.  See https://github.com/cytoscape/cytoscape.js/issues/1042#issuecomment-133547903\n. @OAGr It would work if you specified only cy.json({ elements: ... }), but specifying style would be prohibitively expensive, for example.  What do you think?\n. Works but padding alignment and docs TODO\n. @cstancu Parents have implicit size to fit the children.  Any specification of width/height on a compound parent doesn't mean/do anything.\nAdjusting compound parent size based on the label isn't so simple.  Yes, setting a minimum like that may work visually for simple cases.  However, layout is another case altogether.  \nExternal lib layouts may or may not be compound aware.  Some consider only child positions/bounds for compound bounds, rather than full bounding boxes.  CoSE and CoSE-Bilkent should be OK.  Cola might be OK.  Others, probably not.\nIf you want a feature like this (e.g. min-width, min-height), it would probably make sense to have a separate issue.  We could probably PR your changes with the new style properties.  What do you think?\n. @thedmitriyk Dagre can't set compound positions.  (See above.)  Dagre uses compounds to group descendants.  The full bounding box is sent to Dagre: https://github.com/cytoscape/cytoscape.js-dagre/blob/1.2.1/cytoscape-dagre.js#L100\n. The bounding box accounts for labels, so it's probably fine for your case.\n. Ref : https://github.com/cytoscape/cytoscape.js/issues/1040\n. Depends on  : Allow for embedded batches #1050 \n. cy.json( obj ) TODO\n- Most flags can just be set like boxSelectionEnabled\n- Some values affect the renderer like wheelSensitivity\n- The renderer may or may not need to be recreated (e.g. specify different renderer)\n- Comparing styles and creating new styles is expensive\n. Unit tests\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-4127cf4a24-1440100717818.zip\n. http://easings.net/\n. This may be possible to set as an option in particular layouts, but it's probably not possible in general with all the features that the API supports.\nFor example, some layouts only apply to noncompound nodes.  So, all the child nodes get positioned according to the layout algorithm (e.g. arbor or grid).  A compound parent has its dimensions set automatically based on its children.  If a restriction is set on compound dimensions, there is a contradiction.\nIt would be possible to have layouts (like the upcoming CoSE2) have support for limiting compound node sizes -- but even then this is more of just a hint rather than a hard and fast restriction.  Even within a layout, restricting compound size can create contradictions.  Consider avoiding overlap.  The compound may not have enough space to avoid its children from overlapping.\n. Implementation of https://github.com/cytoscape/cytoscape.js/pull/1020 that seems to be a bit more flexible for large edge widths etc\n. @tangevin Try this, and let me know\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-659e852006-1441839611536.zip\n. Great; closing\n. Duplicate of https://github.com/cytoscape/cytoscape.js/issues/1032\n. Common functions in BaseRenderer\nNow, it is possible to make other renderers much more easily.  A client renderer specifies \n- render()  for drawing the scene\n- renderTo() for rendering to outside contexts (like in the navigator extension)\n- redrawHint()  optional, for keeping track of hints to make rendering cheaper\n- matchCanvasSize()  for resizing the canvas on resizes etc\n- nodeShapeImpl for drawing node shape primitives\n- arrowShapeImpl for drawing edge arrow primitives\nEverything else is automatically handled for the client renderer dev.\n. Deferring; required synchronous for calculating things like rendered style\nNeeds to be re-evaluated\n. The demos are using 2.4.7 and shift+click works fine there; e.g. http://js.cytoscape.org/demos/2ebdc40f1c2540de6cf0/\n. Closing for now as this is unreproducible\n. Note : Only seems to affect negative exponents, e.g. 2e-7 doesn't work but 2e+7 does work\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-507bfa1237-1441744305034.zip\n. The call before the one you modified checks jQuery on window.  The second check is for CommonJS and AMD systems.\n. The first call checks window.jQuery.  The second checks the package with name jquery via require().  With the external register API now available, it would be simplest to remove the second check: https://github.com/cytoscape/cytoscape.js/issues/1073\n. Not reproducible on master/2.4.7\nHave you looked at cy.$('#n1').position()?  It's not moved.\nHave you taken viewport manipulations into account? Have you tried fit: false?\n. Please note the difference between a model position and a rendered position as indicated in the docs: http://js.cytoscape.org/#notation/position\nIn your example, everything is working as expected.  In general, you can't expect a force layout to give deterministic results.  That will never certainly happen for Arbor since the authors have abandoned the lib (and Arbor isn't a very good force layout anyway; it's better than only Springy and only in certain cases).  \nNeither can you expect that fitting the graph won't change the rendered position of nodes -- that would be contradictory for any graph but an already fitted one.\nCola tends to give more deterministic results.\n. A force layout operates with a physics simulation.  The physics simulations use (pseudo)random number generation for things like initial node placement (e.g. randomize: true).  When those random numbers are used, the results are nondeterministic.  \nWhere psuedorandom number generators are used, you could make the results deterministic by controlling the seed.  That's not possible with Arbor.  I think Cola only uses random numbers for randomize: true, so it's probably a better layout to use.  It's also an active project, so it's probably possible to also add seed config by a PR or feature request.\nA locked node has an immutable position, e.g. demo with locked nodes: http://jsfiddle.net/wvnoz1xm/1/  Arbor doesn't seem to move locked nodes -- as the .position() etc APIs wouldn't allow for it.\n. In general, I'd avoid Arbor.  Cola and CoSE are both much better.  CoSE is getting threading support in 2.5, and there's a separate CoSE2 implementation that provides even better layouts for compounds.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-4100e432f8-1441745151607.zip\n. https://github.com/cytoscape/cytoscape.js/commit/6913921848605d9b513d9980f92206e38d843b2e\n. You can either be granular with code, or you can turn all events off in style with events: no\n. Rendering is already pretty much as optimised as it can be -- even for compound graphs.\nThere are two bottlenecks in general:\n(1) Drawing, i.e. blitting, stroking, filling, etc.\n(2) Calculating control points\nFor (1), there is nothing that can be done to make drawing to a HTML5 canvas faster.  The Context2D operations are taking up almost all of each frame's time.  You are comparing a desktop app that is presumably using Java's Graphics2D class to a JS library using web rendering technologies.  Apples and oranges.\nThe only way to make (1) faster using canvas is to push the browser vendors to improve their performance for 2D rendering in canvas.  2.5 will make it easier to add new renderers to the lib, so it may be possible to experiment with WebGL.  I'm not entirely convinced that using WebGL would make a big performance difference for complex 2D scenes, but it's probably something we'll be experimenting with anyway.\nFor (2), see https://github.com/cytoscape/cytoscape.js/issues/1065\n. If you're looking for layout rather than rendering, you may be interested in Dagre: http://js.cytoscape.org/#layouts/dagre\nThe Sugiyama paper describes a similar result as Dagre\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-deb6a86229-1441744568531.zip\n. The layout could set a scratch value for each edge, and you'd have to configure your stylesheet to use the scratch value.\nHowever, an edge supports a single control point.  The Dagre \"control points\" aren't really bezier control points, but rather a definition of a series of line segments.  An edge bend may help, but I'm not sure if they'll support more than one point.\n. This is an extension issue, not a lib issue\nClosing\n. This is not a Cytoscape related issue.  Creating external windows etc is up to you.\nClosing\n. TODO docs & unit tests\n. Wait on issue:\n- https://github.com/jscs-dev/gulp-jscs/issues/91\n- https://github.com/jscs-dev/gulp-jscs/issues/42\n. Call jscs directly for now...\n. TODO external layouts that use eles.layoutPositions()\n. You could check for bounding box overlap on nodes.  The comparison of bounding boxes is straightforward and inexpensive.\nTo merge, you could remove one of the nodes and merge/put data from the other node (depending on how the semantics of merging works in your case).\n. Closing for now\n. OK, closing then.\nAll the best with your project\n. Cytoscape should work fine with webpack.  It looks like you've configured babel-loader to go through your dependencies/node_modules.  You probably shouldn't be processing dependencies with babel whether it's with gulp/webpack/grunt.  (The extra cost/slowness should be reason enough, and it's generally not necessary.) \nSee exclude https://github.com/babel/babel-loader#options\n. @mj3cheun Yes, you should require('weaverjs').Thread in the extension instead. You can either pan the graph around in stages and call cy.png({ full: false }) or you can use cy.jpg() which has a much lower file size.\n. It supports much of overall graph theory, so yes.  See the docs: http://js.cytoscape.org\nPlease direct your questions to Stack Overflow in future.\n. That call is made only if (1) you system is not capable of keeping up with 60fps for the given graph or (2) a request to render has been made that would result in greater than 60fps (i.e. unnecessary frames).\nI can not reproduce the behaviour you describe.  Switching back to a previously inactive tab allows for resuming of drawing as normal.  Note that inactive tabs themselves will not update -- this is expected behaviour in a browser.  Please post an example that clearly reproduces the behaviour you describe.\nYou may also want to try unstable/2.5, as it uses a slightly different rendering mechanism.\n. The video would be useful, but so would a small code demo.  I can't reproduce this at all on my machines.\nThose timeouts should get triggered only if your app code or the user does something that requires a redraw. \n. @philippe46 Any updates?  Can you reproduce this on the unstable/2.5 branch?  Thanks\n. I'm going to close this for now as I can't reproduce it and the changes to 2.5 should fix it if it is indeed an issue\n. Cytoscape.js allows for rendering the graph itself.  If you want to display non-graph data, you can do so with your code and/or an external library.  You have the option to make the code more terse and reusable if you put it in an extension.\nThe qtip extension is a good example: https://github.com/cytoscape/cytoscape.js-qtip\n. I don't think it makes sense for the library itself to give you events like panstop because panning and zooming are not always continuous events and it depends on how you use the API.\nFor simple user events, you can just debounce, i.e.:\njs\nvar threshold = 500; // delta t in ms for grouping events together\ncy.on('viewport', _.debounce(function( e ){\n  console.log('viewport done');\n}, threshold));\nYou'll have to set threshold as appropriate for your app.\nSee https://lodash.com/docs#debounce\n. Actually seems to work OK\n\n. Thanks! I've pushed the change.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-33f822d189-1443733628847.zip\n. Thanks for your feedback.\nThe breadthfirst layout is meant to be a very simple hierarchical layout.  If you want more customisation, I suggest using the dagre layout which supports many more options, including LTR etc.\n. Thanks for your feedback.\nRef : https://github.com/cytoscape/cytoscape.js/blob/v2.4.8/dist/cytoscape.js#L13076\nA renderer is always defined, or you can't init.  If you specify the null renderer, nothing is done in recalculateRenderedStyle(): https://github.com/cytoscape/cytoscape.js/blob/v2.4.8/dist/cytoscape.js#L26364\nHow would this change alter the lib's behaviour at all?  Could  you explain your usecase?\n. (1) The renderer normally initialises after the data has loaded.  I've changed the 2.5/unstable branch to init the renderer right away, but this isn't really your problem.\n(2) Even with the change in (1), it doesn't really fix your problem.  The problem is:  You have decided to load your data asynchronously and then try to manipulate it with a layout synchronously -- before it's loaded.  Either init after your data has loaded or use ready.  Please refer to ready : http://js.cytoscape.org/#core/initialisation\n. No problem; it was an opportunity to improve the docs.  Thanks for the feedback\n. A space is a descendant selector, so that just isn't possible.\nUse [id = \"foo bar\"] or a function to filter instead.\n. Thanks for the example\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-941cdc7567-1444756756259.zip\n. Thanks; the object was probably used in a different way before and wasn't refactored\nI've made a separate commit, because the PR fails under Travis tests.\nSnapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-6bac8d5c5e-1444757559523.zip\n. Tests seem to be OK on Travis: https://travis-ci.org/cytoscape/cytoscape.js/builds/85168207\n. Added var; better to have it as may use babel w/ let in future\n. App level features like that are up to the developer to implement.  It's very straightforward to implement with cy.on('zoom'), cy.zoom(), and eles.toggleClass().  You'll have to experiment with thresholds, debouncing, etc.\nThanks for your feedback\n. Already implemented\n. You can do this by putting a background image on the containing HTML DOM element.\nYou can even update the image on pan and zoom events if you like.\nSee background-image, background-size, background-position\nI don't think things like this would be added to the lib itself, because it's very easy to do this in your app and one of our goals is to make future versions leaner.\n. Doesn't seem to make a difference for performance; so removing for simplicity\n. Doesn't make a significant difference; removing\n. In general, a physics layout will work in the way you want if and only if (1) it has internal modelling of locked nodes (or otherwise they just behave as though the node isn't locked but the actual position won't change) and (2) it has support for iterative runs.\nIn 2.5 (currently prerelease but soon to be tagged and released), CoSE has improved mechanics for locked nodes (1) but it wouldn't be able to do (2).  CoSE Bilkent  supports (2) but I'm not sure about (1) yet.  Cola supports (2) and now supports (1).\nNote that many layouts have been separated as external extensions for 2.5, like Cola -- which means layout releases can be more frequent and it's easier to make pull requests to layouts.\n. Closing for now\n. This will make it into 2.5 but not 2.4, as I'm planning to release tomorrow\n. preventDefault() on events is meant more for native browser events, because they're limited to that mechanism.  In Cytoscape.js, you can control if gestures are recognised at any time, and the control is fine-grained over which gestures are affected.\nFor your selection example, you can use ele.unselectify() and ele.selectify().  Unselectify your nodes, and then you can selectify them at whatever point you want using whatever kind of selection behaviour you'd like.\n. For the effect you're describing, I would argue that it's the opposite:  You want custom selection behaviour, so you don't want selection state to be mutable by default.  Otherwise, any number of user events would generate selection.\nIt's far terser and more future-proof to selectify elements in the short window they need to be rather than hunt down every event (and at the right stage of the event) that could cause selection (both now and in future versions that may add things).\n``` js\ncy.nodes().unselectify();\ncy.nodes().on('tap', function(e){\n  e.cyTarget.closedNeighborhood().nodes()\n    .selectify()\n    .select()\n    .unselectify()\n  ;\n});\n```\nThis is far clearer, and it always works.\n. Adding new events like those sound like a good idea, though keep in mind that only unselected elements would have select triggered afterwards.\nFor now, if you want custom selection behaviour, you have to disable the existing selection behaviour and replace it with your own.  We've already covered the tap case.  If you want custom box selection, you'll either have to reimplement it (or maybe try another approach with elements selectified by default).\n. The library (i.e. this repo) does not include that layout.  If you have an issue with a separate extension layout, please file your issues with that extension: https://github.com/cytoscape/cytoscape.js-spread/issues\nThanks\n. (1) You're using an old version of Safari.  You're not using Safari on Windows that Apple abandoned long ago, right?  setLineDash() is supported in any modern version of Safari.\n(2) You're using an old version of the library.  Newer versions have had a check for this for a long time (e.g.).  2.3.3 is not even the latest version in the 2.3 line (2.3.16).\nAddress (1) and/or (2).  If you don't want to upgrade the lib, you'll have to fork an old version from its tag and patch yourself.\n. Old extensions should still work as long as they're not referencing private data.\nThis is the extension generator: https://github.com/cytoscape/slush-cytoscape-extension\nIn addition, you shouldn't need to specify an external layout for putting nodes in columns.  Just use the grid layout and specify how many columns to use.\n. Those are both private under the cytoscape object.  You can implement them yourself or use their counterparts in lodash.\n. Falling back on the background-width etc might be OK in some cases.\n782 uses yet another workaround for IE, trying to render the SVG in the DOM to get its size.  Because of this extra check, the width might be null/undefined instead of zero if IE fails this check.\nI'm hesitant to add this as an extra workaround, because it won't always work.  It can distort the image. It means background-fit doesn't work anymore.  It means tiling doesn't work anymore. \nI don't think we can expect everything to be perfect in old, broken versions of IE.  Some people in #782 have found IE works if the SVG is formatted carefully and correctly.  But you may be better off using PNG or JPG in IE if compatibility with old versions is important to you.\n. As I mentioned, you can not simply fall back on the style width/height.  That would break things for other users.\nThe additional check for 2.5 makes things better for IE, but it will not be perfect because IE has a buggy SVG implementation.  If you update your browser to the current version of IE (now called Edge), SVGs work fine.\nThe list of changes for 2.5 is in the milestone: https://github.com/cytoscape/cytoscape.js/issues?q=milestone%3A2.5.0  The navigator extension should not reference private/undocumented data.\n. Using the style width and height as a fallback would break other people's usecases.\nAs for your error, it's unreproducible for me on several Windows machines with both the latest IE and Edge.\n. http://js.cytoscape.org/#cy.userZoomingEnabled\n. I've confirmed that both child and parent nodes are draggable after adding child nodes.  You may have an issue with your code.  I'm going to close this for now.  \nRe-open with a demo of your issue on codepen/jsbin if you like.\n. The shadow styles may have a bug, but I'm certain bezier edges work fine.  There's even a demo: http://js.cytoscape.org/demos/18504640d9a03c178fff\n. Confirmed shadows working just fine on 2.5: \n\n. Since it's up to you when you call cy.remove(), you can animate elements prior to removal.  You can remove after the animation is done.\n. I suspect this may have something to do with your code, because edge selection is working on both desktop and touch for 2.5.0 from my testing.\n. I'll take a look at this Weaver issue when I'm back and have regular online access on the week of the 24th\n. Weaver has been updated with a fix (non-greedy match).  The updated code on weaver/master has been pulled into cytoscape via gulp weaver.\nSnapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-a3fcbe2638-1448481076888.zip\n. Not a bug.  A bypass is for a value.  You haven't specified a value.  You've specified a function.\nSpecify your function in your stylesheet.\n. e.g. \n```\ncy.semzoom({\n  levels: [\n    {\n      minZoom: 1,\n      maxZoom: 2,\n      classes: 'foo bar',\n      setup: function(){ / ... / },\n      teardown: function(){ / ... / }\n    },\n// ...\n\n]\n});\n```\nIt would be a mapping of zoom level to classes and/or manual edits.\n. cy.fit() etc apply to the specified elements.  If you hide elements and then fit, the hidden elements will still be considered.  It uses the elements you specify explicitly.\nYou should either (1) call cy.fit() etc on the elements of interest only or (2) only have elements of interest in the graph.\n. In the shortterm, I don't think that this will be added.  It would quickly become an exercise in reimplementing DOM text rendering in canvas...\n. The drag event is builtin: http://js.cytoscape.org/#events/collection-events\n. That's explicitly not supported.  It does not make sense to use a mapper and a bypass together.  A bypass is an explicit value override.  A mapping is an indirect value, not an explicit value.\nA bypass should be used only in very exceptional cases, just like using the style attribute in the DOM.\nIf you require more dynamism, then your stylesheet should be more dynamic.  Use custom functions that map to dynamic data in the elements.\nhttp://js.cytoscape.org/#style/mappers\n. It's not possible to do that in general.  By allowing scroll on the Cytoscape div at all, it completely breaks IE and Edge support.\nYou'll notice that it's mandatory in IE/Edge to use touch-events: none in order to disable default gestures and get pointer (i.e. touch) event support.  So touch support precludes default gestures like scrolling.\nFor future reference, I've put the ideal solution in master.  It's disabled by default.  If you try it, you'll notice IE and Edge are completely broken.  If you re-enable the /*-ms-touch-action: none; touch-action: none;*/ bit, then IE and Edge work again but scrolling doesn't.\nMaybe in the future, this can be improved, but now there's no good, general solution.\n. I've improved IE/Edge detection and set touch-events: none only on IE/Edge.\nAt least this will let things work properly on mainstream/standard setups like iOS and Android.  Chrome on Windows touch devices like Surface should also work.\n. Try the snapshot and let me know how it goes: http://js.cytoscape.org/download/cytoscape.js-snapshot-e6f0e056b6-1448472477770.zip\n. OK, I'm going to close this for now and release the 2.5.1 patch version.  Since this issue isn't completely solved re. IE/Edge, it's going to be an ongoing issue anyway.  If you notice problems (on browsers like Chrome, Firefox, or Safari), please reopen.\nThanks\n. TODO docs\n. While this is a nice idea, there are issues with it.  The border radius could be applied to any roundrect node, but it wouldn't work in all cases with compound nodes.\nCompound nodes work by having children within the bounding box of the parent.  For existing roundrect parents, this isn't an issue because the radius is so small that the overall shape is essentially a rectangle.  \nIf you increase the radius, then that no longer holds true.  That means that the calculations for parent bounds become much more complicated and expensive.  Compound nodes already bring additional expense to rendering, and adding a customisable radius would make this much worse.\nUntil this performance issue can be solved/avoided, it would be unwise to add this feature.\n. As noted in the docs, each part of the style can be controlled separately w.r.t. opacity.\nUse background-opacity: 0\nSee also background-image-opacity, border-opacity\n. No worries; good luck with your project\n. @pshannon-bioc\nThis is a limitation of how browsers implement font rendering in canvas.  There's nothing we can do in this case on the library side.\nThe only suggestion I have is to scale up your styles.  Multiply your sizes by a factor such that the font size is at least 1px.  While font sizes can't scale, the zoom level can scale arbitrarily.  Your zoom levels will be different, but zoom is just a relative measure anyway.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-0a1c546077-1449167198522.zip\n. No, you can't morph text.  That would be hugely expensive.  It also wouldn't make sense at all for the case where there's no initial text.  \nIt only ever makes sense to animate numeric properties.  Animate something like opacity instead.\n. Implemented by https://github.com/cytoscape/cytoscape.js/pull/1824. Ref #1831. Rather than changing the existing arrows, a new arrow is added instead in 3.1: https://github.com/cytoscape/cytoscape.js/pull/1683. This can be implemented app-side with a SVG background image and clipping disabled in the style.  It probably doesn't make sense to implement this as a shape.\n. This should be reconsidered, because it can just be a SVG image background.  You can't control the inner line colour independently if it's a node shape.\n. For now you can just set your Google Closure options to ignore this.  It's not like you'll be running Cy.js on IE8 which has no canvas support, anyway.\n. (1) You didn't set the pie opacity\n(2) You should use a stylesheet; refs #1193, #1092, #1163, #1156...; see also similar questions on stack overflow\n. (1) Bypasses are a carryover from Cytoscape.js' preceding library (Cytoscape Web).  This is the only reason they were included as a feature.  They will be completely removed in 3.0.\n(2) It's bad practice to use a bypass, just as it is to use the style attribute in HTML.\n(3) A stylesheet is more flexible than a bypass.  Stylesheets have more functionality than bypasses.  Bypasses don't support all the features stylesheets do, because that would cripple performance for the normal, stylesheet usecase.\nIf you want all the styling features, use a stylesheet.  Read the style section for more information, and note the mappers if you want more dynamism.\n. You've created an example that happens to partially work.  It won't work in the general case.\nIncompatible features that can be cheaply checked are explicitly prevented in bypasses (even with a warning message in the console) for convenience.  Pies are not one of those cheap cases, unfortunately.\nIf you want pies to work properly, you're going to have to use the stylesheet.  If you want forwards compatibility, you should be using a stylesheet anyway.  Mappers in the stylesheet can create arbitrary dynamism for the pie styles.\n. @spirewebsitedesign It looks like this may not be a performance issue after some performance-related changes for 2.6 are completed.  Re-opening for 2.6\n. Not possible; shadows are a reflection of the background in canvas\n. Not practical and would only help with small screens (and most users are devs on desktops); closing\n. Seems to be working OK\n. Seems to be working OK\n. TODO The cache needs to be invalidated in the core level rather than the renderer.  Otherwise, headless instances can get invalid values.\n. TODO the bounding box needs to take into account the overlay\n. Takes into account overlay in texture cache changes\nThe BB cache is invalidated on headless instances automatically now\n. ~~TODO use bezier style on loops for convenience~~\n. Regarding rendering, 2.5 has changes to rely more on the browser's framerate limiting rather than our own.  This increases (approximately doubles) the framerate on certain setups.  It looks like you're rendering about double the frames per second, thereby doubling the CPU usage as expected.\nThere is no difference in actual performance: The graph is responsive either way.  The only difference is that 2.5 will give smoother rendering for more setups.\n. OK; glad you have it sorted out\nClosing for now\n. It looks like Microsoft can't keep their enums straight : https://msdn.microsoft.com/en-us/library/windows/apps/hh466130.aspx\nWe'll add a workaround...\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-b5cbfb6d52-1450452750185.zip\n@jsalankey Try it out and let me know if that sorts it out.  Thanks\n. I can confirm it working on 2.5.4\nAre you using the supported shapes, or have you made modifications and forked the code?\n. OK; closing for now\n. Snapshot: http://js.cytoscape.org/download/cytoscape.js-snapshot-0654163cc6-1452024377962.zip\n. This is expected behaviour.  A label is placed at the node's bounds.  The bounds can change on style updates.\nIf you're using the border for selection state or similar, you can use a transparent or near transparent border of the same width in the default state.  That way, the bounds are consistent and the label position remains the same.\n. Closing for now\n. The label is positioned based on the bounds of the node.  This means if you change the style such that the bounds (width, border, etc.) change, then the position of the label changes.\nIf you want the label to remain in a constant position, keep the bounds the same.  Use transparency as I mentioned, and it works exactly as you specified.\nAlternatively, you can use label margins to adjust the offset in 2.6\n. Have you seen the extension list? http://js.cytoscape.org/#extensions/layout-extensions\n. I've just confirmed the extension layouts are working, including both springy and cose-bilkent.  Make sure you're following the instructions in the readme for each extension you use.  If you find a bug in a particular extension, please use the issue tracker for that extension with a reproducible test case demo and/or description.\nPlease note that Springy is an external library, and if you have problems with the algorithm itself then you should contact its author.  Also note that all of the other physics simulations layouts supported by Cytoscape.js are faster and also produce better results as compared to Springy.  You may be better off using a different layout.\n. The randomize option might help if Springy gets stuck -- but it's no guarantee.  It's just not as reliable an algorithm as the other layouts.\n. OK; closing for now\n. Thanks for the encouraging responses, guys!\nWhile I like using Github and I really appreciate your responses here, I've been told that email is apparently \"more legal\" than Github responses.  So if you have yet to respond to my email, I'd really appreciate it if you would reply with even just a short \"I agree\" or \"OK with me\".\nI'll send out short reminders tomorrow so the emails will be easy to find in your inboxes.\nThanks again everyone!\n. I'm not a legal expert or anything, but I think as long as the wording is positive/accepting then I think it should be OK.  Unlike gtk-rs, we're going to MIT only though.\nThanks\n. I've changed the license of Weaver 1.2 to MIT, as Cytoscape.js includes Weaver for multitasking: http://weaver.js.org/\n. We're planning on making a license-only release for 2.6.  It will be identical to 2.5, but it will have MIT instead of LGPL.  This will bump the version numbers of the other milestones.\n2.6 will likely be released tomorrow.\n2.7 will be released relatively soon.  Future releases, like 2.7, will continue on using MIT.\n. Closing in preparation for the release, but feel free to use this Github issue for further discussion if you like.\n. Version 2.6 has been released with MIT licensing : http://js.cytoscape.org\n. Not one contributor objected to the change.  Cytoscape.js is firmly MIT now.\n. Cytoscape.js uses Weaver.js (weaver.js.org) for multitasking.  It uses inline-defined workers in browsers.  \nIt's not possible to work around the issue you've mentioned without creating a separate file just for IE10.  A major point of using Weaver threads is that you don't have to fiddle with external file references and minfication settings to get webworkers to work.\nI don't think it makes sense to add a workaround for a browser that is two major releases out of date, especially since it creates complications for developers using the library.\nYour options are:\n(1) Fork the CoSE layout with the thread option { disabled: true }.  That way, simulated webworkers in the main thread are used.  (Make sure to change the name to something like cose-forked so it doesn't conflict.)\n(2) Use a layout other than CoSE.  There are many supported in the library and many more as extensions.\n(3) Tell your IE10 users to upgrade their browser or (better yet) install a decent browser.  Chrome can be installed to a user's home directory -- even on Windows.\n. I've added a ticket to Weaver to make this a bit more convenient: https://github.com/maxkfranz/weaver/issues/15\n. I've confirmed eles.flashClass() working in 2.5.  Your code is likely relying on a style bug in 2.3 to work.  Make sure your class is after any selectors in your stylesheet that \n- set background colour and \n- are on the elements of interest.\n. Closing for now\n. This is a duplicate of #959 \n. You would have to create intermediary nodes to simulate hyperedges, as hyperedges are not supported natively yet.  It's not such a simple feature to implement, because it would affect large parts of the API -- like algorithms, traversing, etc.\n. My mistake.  If you want not hyperedges but edge-edge edges, I'm not sure whether that would make sense.  One of the premises of graph theory is that edges connect nodes.  Whereas algorithms and traversal etc. can be made to make sense with hyperedges, my intuition is that edge-edge edges could not.\n. I've spoken to others in the Cytoscape team about this.  This would be far more difficult than the hyperedges implementation.  As I said before, a basic premise of graph theory is that edges connect only nodes.  Allowing edges to connect to edges breaks that premise, and completely breaks the model.\nCytoscape.js is not just a visualisation tool, it has a sophisticated graph theoretic model and accompanying algorithms.  We can't break 90%+ of the functionality of the library to accommodate a single non-graph-theory usecase.\nYour examples are database entity-relationship models.  N-ary relationships are represented by entities, in databases and in your diagramme.  Similarly, you should be using separate nodes to represent n-ary relationships if you want to use Cytoscape.js.  You can do this in your app-level code or you can create an extension.\nIf you can point us toward reputable journal published papers that define edge-edge edges in graph theory, then perhaps we can revisit this.\nFor now, I'm closing this and you can use intermediary nodes.\nThanks for your feedback\n. Those are ER/database models, not graph theoretic models.\n. You should be able to do (1) with an intermediary node between the edges so that the edge-edge edge points towards the intermediary node.  (2) is just compound nodes.\n. Go.js is a generic charting lib, Cytoscape.js is for graph theory\nAs far as I'm aware, there is no concept of edge-edge edges in graph theory.\n. This is expected behaviour.  You can set the bypass style at init for convenience, but the style object is not part of the element JSON object proper.  \nOptions:\n(1) Preferred : Use mappers and store your state in ele.data().\n(2) Get ele.style() separately to get the entire computed style.  This will be expensive for you to store, since it contains all style properties.\n. Duplicate of \nsource-endpoint & target-endpoint to specify the intersection/starting/ending points of an edge #1613. Use .grabify() and .selectify()\n. In general, you can give layouts hints of edge length.\nWhen you specify edge length, you create a multivariable set of equations that the layout solves. That system of equations can be overconstrained, leading to contradictions -- impossible to satisfy every equation / edge. \nEvery layout has different strategies for handling overconstraining, and different compromises to achieve some result (rather than an error). \nTry using the dagre edge weight option. Dagre is the best automated tree layout out there. \n. Unless this has changed recently, Meteor doesn't allow removal\n. https://atmospherejs.com/i/faq\nApparently this will kind of hide it?\nmeteor admin set-unmigrated [packagename]\nI'll see if that helps.\n. Their command doesn't work.  It just spins forever...\n. Ref : https://github.com/meteor/meteor/issues/5534\n. Thanks for the feedback; I've put the issue in the extension's repo https://github.com/cytoscape/cytoscape.js-dagre/issues/9\n. Here are the latest benchmarks run on the GAL-Filtered graph, with the code as of today.\nAlgorithm : comparison multiplier of v3.3 speed / v3.2 speed\n\nA* : ~3.3x\nBellman-Ford : ~1.3x\nBetweenness centrality : ~1.2x\nBFS/DFS : ~1.8x\nCloseness centrality : ~1.5x\nDegree centrality : ~1.4x\nDijkstra : ~2.0x\nFloyd-Warshall : ~1.75x\nKarger-Stein : ~2.5x\nKruskal : ~2.8x\nPage Rank : ~1.5x\n\nComputer specs:\nMacBook Pro (Retina, 13-inch, Early 2015)\nMac OS 10.12.6\n3.1 GHz Intel Core i7\n16 GB 1867 MHz DDR3\nMay be of interest to : @gbader @jvwong @d2fong . It looks like you're making some assumptions about the order of execution.  Refer to the docs:\n- http://js.cytoscape.org/#getting-started/the-ready-callback\n- http://js.cytoscape.org/#core/initialisation\nready could be executed before or after your sit = ... assignment.  It depends, so you really shouldn't be making assumptions about execution order.  You should refer to event.cy in the ready callback or you should instead call cy.ready() after calling cytoscape().\n. Ref : https://github.com/cytoscape/cytoscape.js/issues/1225\n. Yes, there's even a tag for it.\nDo you notice a significant difference with the shapes?  Node shape paths are cached and so they should be roughly the same cost to render.  Calculating intersections for rectangles might be a bit cheaper.\n. @dwjohnston I'm not noticing any difference.  Do you have a particular config you're noticing this on?  Thanks\n. I just tested this out on a graph of 1000 nodes.  I got the same performance for rectangles as ellipses.  Is your Angular code interacting with this in any way?  Have you tried using the profiler in Firefox or Chrome to see where the difference might be coming from?  Thanks\n. Thanks for letting us know.\nThe issue is not in CoSE, but CoSE is affected because it uses components.  The issue is here and has been fixed:\neles.components() includes extra elements in some cases #1231 \n. I've just confirmed that both the layouts work fine on both IE and Edge.  Please make sure you're using the latest versions of the extensions.\nThe demo on the docs page for spread is using an old version and doesn't work on IE, but the demo in the spread repo does work.  https://github.com/cytoscape/cytoscape.js/issues/1233\n. Snapshot with fix: http://js.cytoscape.org/download/cytoscape.js-snapshot-7d0c2b2fd2-1454015881426.zip\n. I've confirmed that the positions are set properly when using the preset layout at init.  Are you sure you're setting a valid position and that you don't have any race conditions?\n. This is expected behaviour, but it might be easier if the points are calculated from the node positions rather than the intersection points.  Calculating intersections can be complicated, depending on the shape.\nI'll try it out, and if it doesn't break anything then it can be in 2.7.0.\n. @danielpes This adds it as an option.  I can't change the default, because the node-position case is more error prone.\n. The auto IDs are there for convenience / playing around in the console.  If you want control over the IDs, you should specify your own IDs in elementJson.data.id using whatever generation method you like.\n. See the JSON format here : http://js.cytoscape.org/#notation/elements-json\n. You need to set data.id in the JSON for the element on creation/add : http://js.cytoscape.org/#notation/elements-json\n. Because of how the CoSE algorithm works, it tends to really need randomised positions to give good results.  Even if it were allowed an option, CoSE tends to shake the nodes pretty violently at the start -- so you don't get much continuity.\nIf you need continuity and pausing etc, I'd suggest Cola. \n. It uses existing positions if specified\n. It would be great if you'd like to contribute!\nIf you already have some things that you've added/modified, we could add them in 2.8.  I'm currently finishing up a few things for 2.7 in the unstable branch.\nFor now, it would be best to start by putting your changes on a public fork repo on Github.  At that point, we can do a review/pull request etc.\n. @dwjohnston Would you be able to put your existing changes on a Github fork sometime this week?  I'm hoping that we can put your modifications in for 2.7.  Thanks\n. @dwjohnston OK.  If you manage to diff out the changes, let me know.  Thanks\n. Previously, the framerate was limited to ~30-40 fps for larger graphs, given the rendering scheme.  This previous rendering scheme was calculating things manually, and using timeouts and frameskipping to keep the performance consistent.\nThe side effect of this was that good browsers, like Chrome, Firefox, and Safari suffered.  They were capable of rendering at smoother, faster rates -- but the timeouts precluded that.  The new rendering scheme just lets the browser schedule frames.  This makes browsers that behave properly have better, smoother performance.\nThe IE family of browsers has always been buggy and slow.  I can't justify degrading the experience for the vast majority of browser marketshare to work around the quirks of a deprecated, slow browser.  IE/Edge is at <10% usage, last I saw.  Further, IE is no longer supported by Microsoft and Windows 10 / Edge now seems to be their only supported configuration.\nGiven all this, I don't think there's really anything I can do about it.  \nIf you really want to support IE11 even though it's deprecated by Microsoft, you could conditionally load an old version of Cy.js if you detect IE.  I don't advise this, because detecting IE correctly is now very error prone.\n. You could experiment with the frameskipping parameters: https://github.com/cytoscape/cytoscape.js/blob/v2.6.1/src/extensions/renderer/base/redraw.js\nThat's different from the scheduling.  I'm not sure if it will help.  It's automatic as-is, so IE probably isn't reporting the clock properly -- in which case maybe a hard modulo frameskip would help more than a framerate detection autoframeskip.\nIf you find some tweak of the params that helps IE, it may make sense to have some option added for 2.7.  Then again -- I'm working on general performance enhancements for 2.7 that may make this a moot point...\n. That's odd.  It must be some mistake in refactoring the renderer.\nI've created a patch and verified that the registration happens once per renderer.  The patch is in the 2.6.2 release I just issued.\nThanks for the feedback\n. @jsalankey It looks like adding the patch for the issue you noted broke smooth scroll / zoom support on Mac (touchpads, magic mouse, etc.).  I didn't notice this until I was on a different machine this afternoon.  The testing I did this morning went fine on a Linux machine (no smooth scroll).\nI've added a smooth scroll fix and will release 2.6.3 for it.  Hopefully, this ends the issue.\n. You can set alignment with text-valign and texthalign`.  The stylesheets are independent of the layout : http://js.cytoscape.org/#style/labels\n. (1) Set your style appropriately http://js.cytoscape.org/#style/labels\n(2) The webview in Android isn't good.  Apparently, the webview in Android 6 is a bit better than previous versions.  It's not reliable, considering that Android is so fragmented and the webview is dependent on the version of the OS.  You're better off building and embedding Chrome in your app.\n. You'll have to write code for that.  In future, if you have help questions please use Stackoverflow.  There are links on the website.  Stackoverflow works nicely with Google search, so other people can benefit from old questions/answers.\nGithub is for reporting bugs and requesting features.\n. Bringing back the pan/boxselect behaviour isn't really an option, because it reduces usability.  It's hard for users to find, and by a large margin users prefer to pan by default.\nIt's better to have an explicit toggle in your app itself.  A toggle button that switches between panning and selecting is far easier for users to find, and it's more accessible -- i.e. less co-ordinated users have trouble with the delay option.  When panning is disabled, box selection can happen right away -- so this explicit toggle method works well.\nThanks for your feedback\n. User zooming requires panning, and that's unavoidable.  Users tend not to differentiate the two anyway -- they considering it all \"moving around\".  It's clear if you have a mode: You can either move around or box select.  Additionally, it's standard behaviour in most software to require shift or control to box select.  Image editors are good examples.\nThe learned behaviour of the delay behaviour is minor and often overestimated by developers (myself included, until I ran lots of tests on users who had never used Cytoscape.js at all).  A very small minority of users ever learn it exists in the first place.  By and large, users are far more likely to find box selection via shift than via delay.\nThere's little value in keeping the delay behaviour.  If box selection by default is very important to you, then it's better by all accounts to have a mode for it rather than using old software versions.\n. All that info is in the milestones : https://github.com/cytoscape/cytoscape.js/milestones\nEverything is tracked with GIthub issues\n. (1) You can use a filter function in the API functions, like eles.nodes().  You can't do that in a stylesheet.\n(2) You've used the wrong arguments : eles.filter( function(i, ele) ) : http://js.cytoscape.org/#collection/building--filtering/eles.filter\n. This is an issue of you modifying the style/positioning of the viewport.  It's a common issue with any library that has a canvas/viewport, like Google Maps or Leaflet.\nPlease refer to cy.resize() : http://js.cytoscape.org/#cy.resize\nThere's also mention of it in the init section.\n. I don't think changing the property name is practical, since it breaks backwards compatibility.  As you mentioned, it's possible to just use more descriptive selectors.\n. Duplicate : https://github.com/cytoscape/cytoscape.js/issues/1132\nYou can use CSS on your div.\n. It's a typo; > should be -.\n. js\nvar nodes = cy.nodes().sort(function( a, b ){\n  return a.data('weight') - b.data('weight');\n});\n. Docs updated http://js.cytoscape.org/#eles.sort\n. This looks good!\nI would be interested to see the results after 2.7, as the performance enhancements in there make it such that rendering performance is more of a function of how often styles are changed rather than which styles are used.\nHaystacks will always be cheaper, though -- because calculating intersections and control points for other edge types is more expensive.\n. It doesn't make sense to run a layout on compound nodes but not their children.  A parent's position is defined by its children -- it's own position is derived, not specified.\nMaybe try running CoSE first on everything and then run grid layouts within each parent after.\n. And it would be much better to post questions like this on Stackoverflow...\nStackoverflow gets much better Google search results, making it much better for other people to benefit from the question.\nIt only makes sense to post here if you find a bug or have a feature to request.\nThanks\n. Spam\n. @marteber Have you tried the function mappers? \nhttp://js.cytoscape.org/#style/mappers\nYou can specify arbitrary JS to generate the style value from the element's data.\nIf the data is not dynamic, you can easily use lodash _.memoize() to make sure performance isn't impacted.  If the data is dynamic, you could use a bit more sophisticated caching mechanism.\nUsing a custom function has other advantages, like being able to use non-linear mappings.\n. I've just confirmed this working OK on the debug page:\n\n. That looks like it's referencing a lot of internal, renderer-private data/APIs.  All of that is private and subject to change at any time.  It wouldn't work well as an extension.\nFixed element sizing doesn't make sense in the library, because a zoom operation is a scale operation.\nAs mentioned in the issue towards the end, it would make sense to have fixed size elements only if you replace the zoom with your own logic.  This means that the extension doesn't use the Cytoscape.js internals for zoom and pan -- it would have to rewrite them from scratch and disable the built-in zoom and pan features in Cytoscape.js.\n. This PR isn't necessary and as stated earlier it is predicated on modifying private data.  It doesn't matter how much private data you modify -- using a little is just as bad as using everything.  If you use private data, your code will break in future versions.  I guarantee it would be broken in 2.7.\nIf you want the simple implementation, use what's been mentioned earlier with modifying style on zoom in the other issue.\nIf you want a more complex implementation, write a more complex extension.  Disable native zooming.  Implement a stretch feature that changes node positions on gestures normally used for zooming, like wheel and pinch.\n. As I said before, it matters that you're relying on changing/overriding private renderer functions/data -- not how much data or which particular data.  You linked to example code that overrides many functions in the renderer.  None of the renderer is public, none of it is documented publicly, and none of it is guaranteed to remain consistent between versions.  \nI've already described to you two good solutions for implementing this today.\nIf you want the second, more performant solution without rewriting/copying pinch and wheel gestures in your extension, then consider a PR for #1140, as noted in #789.\n. Great!  It may be better to check == null, as the value might be set to null if it's invalidated.\nI'll be able to merge this in within the next few days.  If you could update the check in the meanwhile, that would be great.  Thanks!\n. Perfect\n. Thanks for catching these typos!\nWould you be able to modify the source files for the docs instead?  The documentation gets built, and you've modified the file that comes out of the build rather than the sources.\nThe documentation is specified in the docmaker.json file and the linked .md files.  Thanks\n. Merged in.  Thanks!\n. @josephst Probably the spacingFactor in the bfs layout could be removed then.  We should probably use the name spacingFactor overall for backwards compatibility -- or we should check if  spacingFactor exists and use it for scalingFactor.\nI think the positions have to be normalised before scaling is applied.  The scaling needs to happen as a vector relative to the bounding box centre, because the bounding box might not be (0, 0) to (w, h).. Docs updated\nThanks!\n. Thanks for the heads up!\nUnfortunately, I don't think this can be accepted as-is.  The check for the distance threshold wraps a lot of other checks and state continuation logic.  Instead of preventing all logic, the threshold should only prevent the logic for starting a gesture -- like cxtdrag.  This should probably happen on a case-by-case basis rather than a wrapped overall strategy.\n. Great!  I'll review/test and look at porting this to touch on Monday\n. This looks great; I'll merge this in and review the touch case to make sure it's consistent with this update\n. Use the complete callback for the animation that occurs last.  If several animations occur last, choose an arbitrary one.\n. Or use promises if the timing is more complex:\n``` js\nvar getCompletePromise = function( animation ){ return animation.promise('complete'); };\nPromise.all( animations.map( getCompletePromise ) ).then( doSomethingWhenDone );\n```\n. There's this library and probably others floating around for GraphML parsing in JS: https://github.com/weflex/graphml-parser\nUsing a library like that, it's just a simple matter of mapping its JSON output to the JSON output Cytoscape.js expects.  If you want, you could wrap that mapping in an extension: http://js.cytoscape.org/#extensions\n. https://github.com/iVis-at-Bilkent/cytoscape.js-graphml. RTL languages aren't explicitly supported in canvas on a draw-by-draw basis: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction\nIt looks like the only way to support it is globally setting HTML attributes: http://stackoverflow.com/questions/8961636/html5-canvas-filltext-with-right-to-left-string\nBut in the case of using a dir attribute, couldn't the user set it on their own div or a parent div?  I'd assume the entire page would probably be in a RTL language in that case anyway.\n. You've got a race condition.  You're assuming selection happens before the click event.  That ordering is not specified and should not be assumed.  Use the element clicked in the callback rather than a :selected selector, or use a select event instead.\n. In future, please direct questions to Stack Overflow so others can better benefit from your questions\n. Tested; working OK on:\n- Chrome Windows mouse\n- Chrome Windows touch (MS Surface)\n- Chrome Mac\n- Firefox Mac (i.e. doesn't break other browsers)\n. Use dagre with the rankDir option\n. Then you could rotate the node positions after breadthfirst finishes.  It's just a little bit of math.  If you want, you could put that into breadthfirst directly as an option and push a PR.\n. Any force-directed layout\nIn future, please post questions to Stack Overflow. Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.  Thanks. This is not a bug.  You're misusing/misunderstanding ready.  ready happens on layoutready for the init layout.  Remember the flow of layout events: layoutstart, layoutready, layoutstop.\nYou're starting another layout before the first layout has had a chance to fire layoutstop.\nJust put your code after the init line.  There's no reason for you to be using the ready callback for your usecase at all.\n. This catches simple attribute changes, like class or data-foo-bar\n. Here's a recent example: https://github.com/cytoscape/cytoscape.js/issues/1283\n. Pushed docs early so users don't continue to make this mistake\n. If you notice a cose bug, please file a separate issue for it.\ncose is used in production in lots of places where it has no issue with layoutstop, so I'd be interested in seeing the data/steps/example to reproduce your issue.  I tested cose today with several graphs, and layoutstop fired every time.\n. Arbor is not a part of the library, it's a separate extension.  If you have an issue with the arbor extension, please file an issue in its repo as per contributing.md\nThanks\n. The docs for cy.add() already has an explicit list of the inputs allowed: http://js.cytoscape.org/#cy.add\nFor the array case, it already says plain objects and links to the JSON format.  I'm not sure how this could be made clearer.\nI suppose cy.add() and cy.remove() could be more fault tolerant, but adding array of element support doesn't really have a compelling usecase as far as I can see.  Most functions in the API return collections, and cy.collection() can make a collection from an array if need be.\nIs there a reason why you're using arrays rather than collections?  What's your usecase?\n. Usually, that's done something like this:\n``` js\nvar all = cy.collection();\n[ subset1, subset2, subset3 ].forEach(function( subset ){\n  all = all.union( subset );\n});\n```\nOr more concisely:\njs\nvar all = [ sub1, sub2, sub3 ].reduce( function( coln, sub ){\n  return coln.union(sub);\n}, cy.collection() );\n. Adding an array of element JSON is already supported: http://js.cytoscape.org/#cy.add\n. It's best to use the collections instead of arrays.  If you use collections, then it's always one call: col1.union( col2 )\nIf you really want to use arrays, then you can just col1.union( cy.collection( array ) )\nIt might be more convenient if there's automatic sanitisation, but I think that would touch a lot of the API.  I'll take a look, but I can't guarantee it would make it into the next feature release.\n. That doesn't really make sense in the API consistently.  Set theory functions should be binary operations, each with an arity of two.\nI thought you were using arrays of elements rather than arrays of large sized collections.  In that case, you may as well just call .union() twice or use reduce() for longer cases.  If you use a more functional style, then each reduce() call is very concise:\n``` js\nvar union = function( a, b ){ return a.union(b); };\nvar empty = function(){ return cy.collection(); };\nvar multiunion = function(){ return Array.prototype.slice.call( arguments ).reduce( union, empty() ); };\nvar all = [ sub1, sub2, sub3 ].reduce( union, empty() ); \n// or...\nall = multiunion( sub1, sub2, sub3 );\n```\n. Mislabeled commit 334dba9\n. Only was reproducible sometimes for me on FF.  Much more often on Linux/FF (openSUSE GNOME) than Mac/FF\nThis small patch seems to sort it out\n. Thanks for the test case\n. @pmall Since this completes the 2.6.6 milestone, let me know if this patch works for you.  If so, I'll release 2.6.6.  If not, I'll re-open\nSnapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-88ee7d566f-1457376875221.zip\n. This depended on #1259 to be performant\n. This would be a more significant change than originally thought.  Consider for a future version\n. There's already a partial mitigation, and that's probably the best we can reasonably do.. Use Cola.  CoSE is too fast \nOr use CoSE and animate the positions yourself, since the layout itself will run so quickly.\n. .outgoers(), .incomers(), etc are intended to be DAG traversal functions.  Their naming is chosen to avoid conflicts with compound functions.  For example, \"parent\" has both a compound meaning and a DAG meaning.\nThose DAG functions should have been marked with \"DAG\" as .roots() is.  The tests also check explicitly against loops, because loops are classified as self -- neither really outgoing nor incoming.\nSince loops don't really make sense (and should not exist) in DAGs anyway, they can probably be safely added to the DAG functions to be used in non-DAGs.\n. Try this snapshot and let me know if it works for you.  It's passing the unit tests as modified for loops.\nhttp://js.cytoscape.org/download/cytoscape.js-snapshot-e9ba43d326-1458149978215.zip\n. @thpani snapshot download\n. Great; thanks\n. I've confirmed it working as documented in 2.6.6\nDo you have an example of it not working?  Thanks\n. @byllyfish \n(1) The promise polyfill was incorrectly applied regardless of whether native promises are available: Promise polyfill should be applied only in promiseless environments #1303\n(2) The Promise.all() implementation in the polyfill incorrectly handled the nil value case\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-b5f7581b78-1458240150429.zip\n. @byllyfish I've just confirmed it working with several unit tests to reproduce your case.  They all pass on Node.js, Firefox, and Chrome.\n. @byllyfish Your issue has to do with the layout, which calls eles.components(): https://github.com/cytoscape/cytoscape.js/issues/1316\nThis promise issue is already resolved, so I'll close it\n. I'm not an expert at RequireJS, but Angular's dependency management isn't all that great.  I'd recommend trying not to use it if you can.\n. https://github.com/rgrove/rawgit/issues/108\n. https://github.com/rgrove/rawgit/issues/108\n. Ref: #593 \n. Things to investigate:\n- Is the ID lookup mapping the major slowdown? (Likely)\n- Can the mapping be cheapened by using a native  Map/Set/etc for lookup in browsers that have that API available? \n. A compound parent doesn't really have its own position.  Its position is inferred from the dimensions of its children, because it must automatically accommodate its children.  \nTo \"move\" a parent, you would alter the positions of all of its non-parent descendants.  That's exactly how the drag gesture operates.\nFurther, it doesn't make sense to have model position defined relatively to a parent.  That would confound model positions and especially rendered positions.  If you want relative position, then use node.relativePosition().\n. Dependency removed in 3.0; no longer applies. https://github.com/cytoscape/cytoscape.js-spread\n. http://js.cytoscape.org/#style\n. Make sure this passes the Travis tests, and then release\n. Batching the add step won't help much, because you're only doing two operations anyway.  You could do cy.add( nodes.concat( edges ) ) instead to simplify.\nHide the elements using style or move the viewport, if you don't want to see added elements before layout.\nAdding elements is expensive because of stylesheets.  Use cy.json() to diff-patch your elements instead of removing them all if you can.\nAlso upgrade to 2.7 when released, which has ~3x improved stylesheet performance.\n. You can use it if you really want, but it's labelled unstable for a reason...\nAt this moment, it's feature complete but needs more testing\n. (1) Run dagre\n(2) For each node, add classes: left, right, or center.  You add these classes based on the node's position relative to its incomer.\n(3) In your stylesheet, just set the control point distance for each class.  The sign of the value determines the handedness of the curve.\n. .position()\n. In future, please file issues for extensions in their respective extension repo.  That helps to keep things organised.  Thanks\n. In general, you can't assume the objects that you pass to Cytoscape will be unchanged.  The reason for this is performance.  For example:  It's expensive to deep copy element objects when adding them to the graph.  It's cheaper to just let each element \"own\" its part of the passed object.\nLayouts are a different case, I suppose, because of the cy.layout() API.  It actually just makes a new layout behind the scenes with cy.makeLayout(), but the naming for .layout() lends itself to devs recalling it with the same object over and over.  2.7 already has changes to accommodate this case, so your issue is already resolved.  Layouts aren't so much of a performance concern with cloning, but it is a bit of an issue of consistency.\nThere should be a warning somewhere in the docs re. elements, layouts, etc: https://github.com/cytoscape/cytoscape.js/issues/1325\n. You shouldn't really rely on the autogenerated IDs for uniqueness across sessions.  They're there for convenience in prototyping etc.\nYou should have your own ID mechanism if you want something non-clashing, like UUIDs: https://github.com/broofa/node-uuid\nMaybe the default generated IDs should be better than an increasing int, but I don't want to make it complicated or long (thereby increasing lib kb) for something that the dev would be specifying anyway.\n. This is short: https://gist.github.com/jed/982883\nThe issue is it makes the prototyping case harder for devs.  If you're just playing in the console, it's easier to type ele3 than D581C808-F75D-11E5-AC29-BC90ADB65F8F...\n. At that point, I'd rather just use UUIDs by default rather than exposing another API -- especially since the functionality could be achieved with a wrapper on the app side, e.g.:\n``` js\nfunction add( cy, ele ){\n  var id = myIdFactory();\nele.data.id = id;\ncy.add( ele );\n}\n```\nOr as an extension if you want a more brief / clean solution:\ncytoscape('core', 'autoidAdd', function( ele ){ ... });\n. Right now, you can use an icon from an icon font instead of the label.  If both were supported at the same time, it would essentially be another label at exactly the same position.  Considering overlap, I'm not sure that's very useful.\n. For the edges, you can use a newline: http://js.cytoscape.org/#style/labels\nSee text-wrap\n. You can certainly use icon fonts at the same time as text.  You just use a font face hierarchy.\nSomething like font-awesome, helvetica neue\nUse the unicode chars that correspond to the icons.  Those match the font-awesome, for example.  Text would fall through to helvetica neue, because there would be no matches for those characters in the first font, font-awesome.\ne.g. label: \"\\uf164\\nThumbs up\"\n. @djangosdk Have you set text-wrap: wrap?  It's text-wrap: none by default for performance.\n. I'm not sure what you mean and your demo doesn't run for me.\n. If you want the node label disjointed, then you probably shouldn't use a label.  You definitely shouldn't use label sizing.\nThe icon should really be a background image for nodes if you want that effect.\n. Use a mapper in your stylesheet and store the label text in the data()\n. Duplicate of #1881 . That field just indicates what the selection behaviour on (plain) tap is.  It is not a method to enforce some sort of global selection policy.\nIf you want to do that instead, you can bind to selection events and enforce whatever policy you want.  For what you describe, just unselect everything else when you get a new element selected.\n. You need to set dimensions on your div using CSS.  Divs have size zero by default.\nSee the getting started section: http://js.cytoscape.org/#getting-started/including-cytoscape.js\n. If you just copied the demo JS verbatim, then you've probably got errors in the console.  (There are dependencies referenced in the HTML..)  If you just want to download the demo, click the download icon (link : https://gist.github.com/2ebdc40f1c2540de6cf0/download)\n. Global pan limits aren't really meaningful, because pan is measured in rendered co-ordinates.\nRather than having snapping points for panning, you may be better off having a fit button.  That's generally useful anyway.\nHaving strict pan limits would interfere with some zooming cases too.  If you really want, you could check whether the viewport extent overlaps with the bounding box of the graph at the end of panning gestures. You could animate back to something like a centred view at that point.\n. This is probably a bug.  Thanks for the heads up, and it will be addressed soon\n. @rockshandy\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-5c44b95d96-1460477953036.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Thanks; I'll look into it\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-a0afcd0286-1460477182301.zip\nI think that commit should fix it\n. @AoDev Closing for now; let me know if it works for you or if you have issues with it\n. @AoDev  You'll have to use the snapshot to test until 2.6.8 is released.  The fix is working for me when I tested it\n. I could not reproduce this on the latest release.  Please provide a reproducible test case, including:\n- Browser version\n- OS version\n- A code sample that reproduces the issue.  Any of the example demos on js.cytoscape.org can be forked on JSBin to easily provide a code sample.\n. I think the problem is elsewhere.\nThis fiddle works fine and it calls all the APIs you've referenced: http://jsfiddle.net/xuxptna0/3/\nGenerally, you can't expect browsers to allow you to type newlines in (<input>) textboxes.  You need a multiline textarea for that\n. It's not clear to me what you mean.  Please explain in more detail\n. That's the sort of thing you'd do in your app-level or extension-level code\n. You can use eles.neighborhood() to get the proper neighbourhood, or you can use node.position() if you want to compare positions.\n. You taphold the background to remove selection from all elements with touch.  \nIt's very easy on touch devices to tap accidentally on the background, causing the user to lose selection state.  If you want the behaviour also on tap, it's easy to use a listener as you mentioned.\n. Worth mentioning in the docs\n. This library normalises iOS/Mac force touch and Windows tablet pointer events: https://github.com/stuyam/pressure. Try the latest version of Cytoscape, 2.6\n. Make sure your stylesheet takes effect before the JS for the graph runs.\nYou can also use cy.resize() after your code has resized the graph div to correct for changes.\n. Related to https://github.com/cytoscape/cytoscape.js/issues/1335\n. Also related to https://github.com/cytoscape/cytoscape.js/commit/e2bdfae4f7d762383888da65573fc6e70052f38d\n. @rs0h \nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-634d2ba902-1461605352048.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. @PinaGamer There's no reason to use indegree() or outdegree() if your graph is undirected.  Just use degree().\nAPIs that can care about directionality (e.g. eles.bfs()) have options like directed: true | false\n. No, those are both undirected algorithms unless you specify otherwise.\n. You don't create an undirected graph.  You create a graph, and you can choose to regard or disregard directionality.\nIf you don't specify weights in algorithms, the algorithm assumes constant weight per edge.  Please refer to the docs for details\n. Only affects 2.7/unstable\n. TLDR : Use npm, meteor/atmosphere isn't a good package management system.\nThis is an issue on the Meteor side.  We don't have any dependencies at all, much less binary ones.\nThey have many issues with their package management system.  For Meteor 1.3+, they've conceded and have proper npm support.  Looking now, they seem to recommend publishing only to npm.\nI'll repurpose this issue for removing the Meteor package.\n. @mj3cheun This would be a good issue to look at, since it's related to the new demos you made.  Basically, it's converting the existing demos to ones stored primarily in the repo rather than pulled from gists.. @ccaper @cstancu \nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-63fa2ab179-1461856302209.zip\nLet me know if it works for you or if you have any issues with it.  This issue was caused from porting this fix from the unstable / next version branch -- on which the calculation is unnecessary.\nThanks\n. @ccaper Thanks for letting me know it works for you.  I'll release 2.6.10 within the next hour.  Glad to hear Cytoscape is working well for you.\n. > I also came across this page http://bumbu.github.io/cytoscape.js/debug/ which in the second example has exactly what I need, hiding child nodes. Is this the 'official' debug page? What version cytoscape.js does it run on?\n@cstancu That's just someone else's fork.  The debug page is in the repo in /debug.  It's just a simple thing for testing rendering stuff\n. @cstancu If you set all children to a compound parent to display: none, the compound has no defined dimensions.  A compound doesn't have dimensions defined apart from those defined by its children.  If you want to remove nodes, you should use eles.remove().\n. @cstancu Removing is exactly what you should be doing in that case.  You can put a reference to the removed elements in the parent's scratchpad for easy restoring: http://js.cytoscape.org/#ele.scratch\ne.g.  parent.scratch( '_descendants', parent.descendants().remove() ) parent.scratch('_descendants').restore()\n. All browsers have dropped SharedArrayBuffer and Safari still does not support OffscreenCanvas, so this specific approach probably won't be possible to implement.\nWe could do something similar if we had access to a proper thread API within the browser.  OffscreenCanvas is nice to have, but it's not absolutely necessary.. Per graph, every element must have a unique ID.  You are warned in the console if you don't follow this.\n. Closing for now\nEither use unique IDs for edges or use some method of transforming edge IDs so they are unique (e.g. prepend 'edge-').\n. Also link to https://www.r-project.org/\n. Use selectors in your stylesheet: http://js.cytoscape.org/#selectors\ne.g. edge.directed for a class\ne.g. edge[?directed] for a boolean directed data attribute when true\netc.\n. @michalhabala Thanks for the information.  It looks like you're right about the crossOrigin field.\nSince you've already found, made, and tested a fix, it would be great if you would send a pull request for your change.\nI've marked this for a 2.6.12 patch release\n. @michalhabala Thanks.  I've cherry-picked this to the unstable branch for 2.7 too.\nHere's a snapshot you can use until the official 2.6.12 release is pushed to npm etc : http://js.cytoscape.org/download/cytoscape.js-snapshot-a5e6cec48f-1462876048971.zip\n. I'll release this on Thu/Fri, along with whatever other bugfixes happen this week (if any).\n. @istemi-bahceci I haven't tried the demo you pasted yet, but I suspect the issue is using the ready field at init.  There are subtle issues with using ready in certain cases (for one, because ready is on layoutready rather than layoutstop), which is why it's now deprecated/undocumented.  It's safer to use cy.ready() after the init call.  I'll try out the demo in a bit, but I suspect this is the issue.\n. @istemi-bahceci The issue is that the style is applied using a diff-patch strategy for performance.  When you change a node's parent state, that doesn't necessarily change the style context stack.  This is the case in your example.\nI've added an extra step for parent nodes where their width and height are always set to auto -- outside of the stylesheet.\nTry this snapshot and let me know if it works for you : http://js.cytoscape.org/download/cytoscape.js-snapshot-459b73d90e-1462908712644.zip\n. @istemi-bahceci Is the snapshot with the change working for you?\n. Great, I'll close this and I'll release later today so you can use the regular release from npm etc.\n. @d4ndruff Are you specifying the container property when you init Cytoscape?  Would you please paste your file here?\n. OK, closing\n. Great, thanks @michalhabala \n. @djangosdk If you want independent text elements as in the DOM, you should use the DOM itself.  You can place arbitrary DOM content in qtips, for example.\n. The only label placement inside a node is center center.  Padding just pushes a label farther out -- padding should never put a label inside.\nIn 2.7, you can specify label margins -- so you could use a negative margin along with top center.\nYou'll have to wait for 2.7 and use regular outside labels in the meanwhile.\n. (1) Invisible nodes aren't draggable or otherwise interactive -- else hidden elements would make it difficult to interact with visible ones.\n(2) A compound node has no dimensions or position defined for itself -- those are inferred from the children.  It follows by (1) that if all children are invisible and undraggable, then parent is not draggable.\nBecause your issue with (2) is dependent on (1), it suffices to prevent (1) to get your usecase working for you.  Simply don't make children invisible.  \nYou can make them practically invisible with a nonzero opacity very close to zero -- e.g. opacity: 0.001.  Because the opacity is nonzero, it's technically not invisible and so the children are still draggable.\n. You may also want to use events: no on the children\n. Not an issue with Cytoscape.  If you try with a different layout like circle, you'll notice your demo works fine.\nSee https://github.com/cytoscape/cytoscape.js-cose-bilkent/issues/14\n. @aindlq In the meantime, I suspect you could just run the random layout before cose-bilkent and it would work OK as a workaround.  You can use the boundingBox to constrain the layout bounds.\n. @aindlq Or rather than running a layout to expand, you could save the relative positions of each child before collapsing.  Then you can restore that relative position on the expand action.\n. Edges are positioned automatically based on the relative position of the source and target nodes.  You can position your nodes appropriately for the effect you want, or you can manually specify edge control points or segment points.\n. See https://github.com/cytoscape/cytoscape.js/issues/965 re. margins\nYou can not use HTML for labels.  That would require reimplementing much of the DOM, so in that case you may as well just use the DOM directly.  If you want to use HTML text, you should put your text in the DOM -- e.g. using a qtip, an overlay layer, etc.\n. That's really cool!\nIs this the same as the Viva forceDirected layout?  CoSE is faster than that layout, but it's always nice to have more options.\nThanks!\n. @Nickolasmv Is your layout ready to be used?  Can I list it on js.cytoscape.org?  Thanks\n. (It's been in the list for a while now)\n. There's a viewbox tag in SVG.  Chrome may be using that to report the SVG dimensions.  Maybe try exporting your file with Inkscape?  Inkscape usually generates SVGs that work pretty well in different browsers.\nUnfortunately, browsers still have trouble with SVG and there's not much Cytoscape can do to work around that.\nSetting a manual background-width and background-height tends to help in browsers that have buggy SVG implementations -- like IE.\n. Yes, look at the file: <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" _width=\"100%\" height=\"100%\"_ viewBox=\"0 0 100 100\">...\n. If removing the width=... bit fixes it, a bug should be filed in the Chrome issue tracker.\n. I think that's only because we allowed the stylesheet value to override the browser's reported image dimensions when possible.  I think that's the only way SVG works at all in IE.\n. Use the preset layout or nodes.positions()\n. Proposal:\nEach layout has a boundingBoxOptions field in its options object.  boundingBoxOptions is passed whenever ele.boundingBox() is called in a layout for overlap detection.  This can be used to include/exclude labels, or further customise overlap detection.\n\nI don't have time to do this now, but if someone wants to make a PR on unstable for this, it could definitely be included in the next feature release.\nThere's also the layout extensions to consider: http://js.cytoscape.org/#extensions/layout-extensions\n. Duplicate of https://github.com/cytoscape/cytoscape.js/issues/1626\nPlanned for 3.1. You misplaced your data.  See http://js.cytoscape.org/#notation/elements-json\n. Wouldn't node[?Iri] work if you had data: { Iri: true | false | undefined }?\n. Or node[Iri] if you had data: { Iri: anyValue | undefined }\n. @mbeynon \nA few things:\n(1) Having a global state to determine styling behaviour will conflict with cached style calculations, and it adds coupling --- all styling goes in the stylesheet.\n(2) Having a global option precludes using the nodes-on-top logic on a per-element basis.\n(3) Mocha can't test anything rendering related -- they're headless unit tests.\n(4) New features should go in unstable.  New features do not get added to patch releases (master).\n(5) The dist files should only be updated on a release.  There's no benefit to building the dist files between releases.\nI don't think an option like this is practical because of (1) and (2).  The only way I see this working is a new style property for edges like z-order-auto-below-nodes: yes | no.  Though a property like that should probably be more generic, because there's also compound node auto ordering to consider.\n. I think the conflict with the caching may be only in unstable so you wouldn't have noticed it in master.  In any case, this feature ought to be a style property if it affects the visual styling of elements.\nA z-index must be relative to a parent for compound nodes, and this must be automatic -- else compound nodes would be near unusable:  You'd have to manually specify a z-index perfectly for every descendent and descendent-touching edge.  \nConsider someone who has a usecase just like yours but in a compound graph.  They couldn't do it reasonably with a global option.\nz-index in Cy.js behaves just like it does in HTML/CSS:  The value is relative to the parent, and so you can only meaningful comparison of the values is with siblings.  Setting a second CSS property with a different value allows for an element to be considered an orphan w.r.t. z-index.\nCSS has an implicit way to specify whether a z-index is relative to the parent or not, and it's a bit inflexible.  We would do better to be explicit about it with a property like z-order-auto-below-nodes: yes | no or perhaps z-index-compare: auto | orphan | someOtherFutureValue ...\n. > The current logic ignores z-index unless the elements are in the same depth of the compound node tree structure. Sort of breaking ties. The odd part is this happens not just for the same compound node, but any that happen to be at the same compound node depth. It that intentional?\nBecause z-index only matters between siblings, the comparison result doesn't matter.  This keeps the calculation cheaper and faster.\n. > Note that I updated the dist files because I found it required when using npm install to the github url of my forked version. Appears to only copy from dist on install. Happy to do another way if you have a better suggestion.\nIf you use unstable, the main in package.json is index.js rather than dist/cytoscape.js.  No dist needed for npm.\nWe'll be moving dist (for bower etc.) to another repo soon to reduce the source repo size.  The dist was previously used in package.json just for consistency.\n. I think z-index-compare: auto | orphan | orphan-manual would suffice then.\n- auto : ordered as today (default)\n- orphan : consider the element as though it had no parent\n- orphan-manual : consider the element as though it had no parent and only compare z-index values (i.e. no edges before nodes precedence etc.)\n. I think node, edge { z-index-compare: orphan-manual; } would be equivalent to your zorderStrict: true, right?\n. auto and orphan don't conflict, because orphan just assumes a compound depth of 0.  That means those two can just be compared as normal.\norphan-manual would also be depth 0, so its z-index would only be compared with other depth 0 elements.  I think you could have a conflict for:\n- edge a : z-index: 1; z-index-compare: auto;\n- edge b : z-index: 2; z-index-compare: orphan-manual;\n- node c : z-index: 1; z-index-compare: auto;\nBecause the sort doesn't compare every pair of elements, the ordering is either a => b => c or a => c => b -- depending on whether b gets compared to a or c.\nIn that case, maybe z-index-compare: auto | orphan | top-manual would be better.  top-manual would assume depth -1 to avoid conflict.\n. The sorting is based on the (depth, ele, z) tuple, in left-to-right pirority like a number.  Each element/\"digit\" in the tuple is sorted ascendingly.\nSo yes, top-manual would need the highest depth value in order to be the last drawn depth.  \nSince then orphan is analogous to bottom, I could see someone else needing top (not manual).  Maybe we should use Number.MAX_SAFE_INTEGER for top-manual and Number.MAX_SAFE_INTEGER - 1 for top.  I can't imagine someone having 9,007,199,254,740,991 depths...\n. Or maybe orphan should be 0 and bottom should be -1...\n. This looks right.\nFor (2) : Don't need a number, as edge < node suffices.\nFor (Q) : Yes, ties must be broken with the index, else the sorting might not be stable.\n. The edge/node \"digit\"/comparison should just be ignored for the manual case\n. Yes, you're right.  I think I should have been clearer by what I mean by the manual case.\nIf we have bottom, orphan, auto, top, and top-manual -- then I assume top-manual is the only manual case and the other cases have the default edges under nodes rule.\nPerhaps for flexbility we should just separate the concerns:\n- One property for depth : z-compound-depth: bottom | orphan | auto | top\n- One property for edges under nodes: z-index-compare: auto | manual\n@mbeynon What do you think?\n. This issue was missed somehow; sorry for that.\nThe points are calculated from the end of the shape where the imaginary line would intersect the node shape.\nYou can use the edge-distances property if you'd like to instead use the node position itself as the starting point: http://js.cytoscape.org/#style/segments-edges\n. This is the only error I see on 2.7.2: Dragging nodes via touch gives errors in some cases (extensions etc.) #1411\nDoes it work for you now on master (or the snapshot)?\n. That sounds like expected behaviour to me.  Maybe there was a bug in a previous release that caused the side effect of different behaviour in this case.\nDraw mode has always supposed to be a one gesture mode -- press down on a node and move to the target.\n. There is this feature: \ncy.edgehandles('start', 'some-node-id') : start the handle drag state on node with specified id (e.g. 'some-node-id')\n. Have you tried the demo included in the edgehandles repo?  By default, creating new edges is done by dragging from the handle -- so node dragging/moving should not be affected.  The 'drawon' mode is for when you want to enable a state to quickly draw edges by dragging from a node body (source) to another node body (target).  So, 'drawon' is useful if you have a button for toggling a draw mode -- which is useful on touch devices, for example.\n('drawoff' should be the default state)\n. The demo is working for me and creating edges on Mac on Chrome and Firefox.\nCould you clone the repo and try it?  What browser/OS are you using?\n. Should work on edgehandles 2.4.2 and Cy.js 2.7.3 (or master)\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-586e527dfc-1466453164142.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. There are significant architectural changes in 2.7.  You'll probably have to make more significant changes to your fork to get things working.\nThis will get even harder for you to maintain in future versions.  It's probably easier for you to use extensions instead.\n. @tonymullen This looks great!  I wonder if we should also allow a manual angle value.  That may also help to consolidate the conditionals into a single formula\n. @machow Yes, I don't know about this eStyle.  All style values should be read via the internal ele.pstyle() (i.e. parsed style) function\n. I was thinking just to specify the start angle (i.e. angle of the edge as it leaves the node from the beginning / source end).  The loop could just go 90 degrees from there.  I suppose there could be a second property to control the direction: clockwise or counterclockwise.\n. Actually, we'd only need loop-sweep and not -direction and -angle.  The direction can be inferred by the sign.\n. @tonymullen So I think we'd have \n- loop-direction : north, south, etc. -- or an angle (values like north would be converted to their corresponding angles)\n- loop-sweep : the direction (sign) and amount (angle) the loop sweeps -- can be rad or deg (I think that's already built into the parser)\nI think we should have just one default loop-sweep value to keep things simple.  Whatever the old loops sweep to should probably be the default so we're backwards compatible.\nThanks for organising this!\n. I really don't know whether loop-direction should denote the angle of the source or target parts of the loop.  Neither option seems all that intuitive to me.\nMaybe it should denote the angle in the middle?  That would make converting values like north much more straightforward (e.g. north => 12 o'clock).\nFor example: If you wanted a loop in the top-right corner, you could specify 45deg (1:30 on the clock).\nLooking again, if the angles are that intuitive we could even forgo the enums like north.  That would make the implementation simpler.\n. This looks good!  The only thing I think that needs to be revised code wise is the style property types.  They should both be t.angle.  That way you can specify 90deg or 1.57rad.\nNumerical values all get normalised to their preferred units for convenience, e.g. ele.pstyle('loop-sweep').pfValue would be in radians regardless of what units the user specified.\n. You should just need to read .pstyle( someProp ).pfValue in lines like this to get the value in radians.  Since you put a default value in the stylesheet, you don't need the ? : default value then.\n. Great; merged.  Thanks, Tony\n. require('./version') and require('./version.json') are the same.  The filename extension is optional: https://nodejs.org/api/modules.html#modules_all_together\nIt's working with Node.js 0.10 to 6.2: https://travis-ci.org/cytoscape/cytoscape.js\nCan you describe your usecase more?  While changing the require() call is safe, I'd like to know what environment is problematic.\n. @xzhu06 While we easily can (and will) revise the require() call, you should also update your toolchain so it's require() spec compliant.  You could easily run into issues with other libs in future... \n. ~~TODO merge this change onto unstable~~\n. @sindhukothe  While your change may work, I suspect the root of the problem may be elsewhere.  Calculations of labels dimensions should not depend on the prefix.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-bfa49775b2-1465242250397.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. @sindhukothe If the snapshot works for you for this and #1399, I'll release 2.7.2 tomorrow.\n. @sindhukothe Yes, but it's safer to use a truthy check.   That captures 0, null, and undefined.\n. @sindhukothe \nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-bfa49775b2-1465242250397.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. The default stylesheet changed to use more performant, haystack edges by default.  Those edges don't support source or target arrows.  The stylesheet of the demo just needs to be updated (or the image).\n. Demos updated.  Visible on Jsbin now, and will be visible on the site in the next docs push\n. I suspect you have an issue with either (1) your meteor model sync or (2) removing the element too early using the cxtmenu extension (maybe the extension needs access to the element after select()...).\n. Some geometries create impossible bezier curves that can not be drawn.  You have to update (usually increase) the control point distance so that it's appropriate for the rest of your stylesheet.\nSee:\n- http://js.cytoscape.org/#style/bezier-edges\n- http://js.cytoscape.org/#style/unbundled-bezier-edges\n. Replaced by https://github.com/cytoscape/cytoscape.js/issues/1646\nOnly makes sense for CoSE. The default stylesheet changed and haystack edges are default for performance.  See \n- https://github.com/cytoscape/cytoscape.js/issues/1199\n- http://js.cytoscape.org/#style/edge-line\nI'd appreciate it if you'd create a question for this on Stackoverflow that I can answer, because Stackoverflow usually is on the top of Google search results -- and that's how a lot of Cy.js users search for solutions.  Other people will probably have the same question.\nThanks\n. Great!  Answered the question on SO\n. @mbeynon  Looks great!  Merging\nThanks\n. Seems related to\n- Updating compound bounds should happen from the current level up #1413\n- When removing elements, all connected compounds should have style updated #1414\n- The traversal cache should be cleared on restore() #1415\nI think addressing those fixed your issue.\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-0642437d9c-1466012804119.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-1eb9c1c5fd-1465937965939.zip\n. Invisible elements are not interactive.\nIf you want them to be interactive, don't make them invisible.  Use opacity: 0.00001 or similar.\nThe following may be useful in future: display: none should make node take up no space in parent #1416\nHowever, if you don't want children to be in a parent visibly and w.r.t space, you should just .remove() it -- and .restore() it later if need be.\n. We've decided after some discussion to allow this, in the following plan for 3.0:\n- visibility: hidden and opacity: 0 will no longer affect interactivity\n- display: none will disable interactivity and take up zero area\n- child moves when parent dragged iff child.grabbable() && !child.locked()\nSee https://github.com/cytoscape/cytoscape.js/issues/1092\nI'm labelling this as a bug for now.  Otherwise, you'd have to wait until >=3.0.\n. Related : Bounding box calculations should ignore positions for zero area components #1421\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-d2aa0c07b3-1466447977670.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Since this is working when I tested it, I'm going to release 2.7.3.  If you have any issues with the fix, please include a description and feel free to re-open for 2.7.4.\n. Existing behaviour... Closing\n. There are tutorials to help you get started: http://blog.js.cytoscape.org/tutorials/\n. @aindlq  Thanks for the demo.  I verified the change makes the demo work as intended.\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-a553c9f8eb-1466089211684.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Since this is working when I tested it, I'm going to release 2.7.3.  If you have any issues with the fix, please include a description and feel free to re-open for 2.7.4.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-586e527dfc-1466453164142.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. There is then potentially 2 calculations that can happen per element per frame.  This is more than the ideal (but buggy) 1 calculation.  2.6 could have an arbitrary number.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-448e5a9f8d-1466615084344.zip\n. If you want, you could make a PR for 3.1.  You'd have to npm install from the git repo pointing to the unstable branch or do manual builds yourself until 3.1 is released.\nNote that you can already do what you want without having to escape by hand:\n- You could use a function to escape URIs (either inside a whole selector string or just the URI itself) and wrap your selectors with it.  You could even use the extra quote syntax you proposed, if you like, e.g. cy.$( u(\"node['http://www.w3.org/2000/01/rdf-schema#label' *= 'Alice']\") ) where u() escapes the URI\n  - This wouldn't have to be generic (like the selector parser) -- it would just have to match your specific usecases\n- You could use function values in your stylesheet, e.g. .selector('node').style({ 'background-color': getColor }) where getColor() can just use node.data( someUri ) === 'Alice'\n- You can use filter functions outside of the stylesheet, e.g. cy.nodes(function(){ return this.data( someUri ) === 'Alice' })\nMy suggestion would be to use one or more of the above.  It's probably much easier / less time to implement.  Personally, I would use the second two options, because there are a lot of opportunities for composition and shorthand -- reducing repetition of the long bases of the URIs.\nIf you do decide to do a PR, please write some unit tests for the new syntax and make sure the old selector tests still work.  My intuition is that it will be difficult to implement, as the addition could create some ambiguous cases.  The selector functionality is very important and high risk (as it touches every usecase), so any major change like this would need a lot of unit tests to make sure it's still reliable.\nThanks for the feedback\n. It's just a shorthand.   for( var i... ) should be used to iterate over the keys, because .forEach() is slow.\nfor in should never really be used to iterate over arrays.  I know the code in this repo isn't.\n. ( .forEach() is fine for dev app-level code where performance doesn't matter as much.  A dev can choose whether his code uses for(...; ...; ...) or .forEach() if it affects his perf.  He can't choose/change a lib's use of each.  We use plain for except for maybe one or two places where the arrays are very small and there was a big readability improvement.  Plain for is better by default for libs where perf matters.)\n. Failing on node@0.12\n. Maybe properties like edge-source-endpoint: node-body | center, edge-target-endpoint: node-body | center that would act as simple toggles.\nThis wouldn't affect haystack edges, as they already point inside a node: http://js.cytoscape.org/#style/haystack-edges\n. There's overlap with this issue, so the feature should probably be merged into one property (or at least made such that they work well together): https://github.com/cytoscape/cytoscape.js/issues/1454\n. Should be possible in 3.1 as a subset (e.g. source-endpoint: inside-to-node) of this feature:\nsource-endpoint & target-endpoint to specify the intersection/starting/ending points of an edge #1613. Closing thanks to @tonymullen's PR\n. Possibly you're not waiting for DOMContentLoaded.\n. I can't say what the issue might be without a demo that reproduces it.  I've never seen this behaviour.\nIf everything works without Angular, then I suspect you've done something in your Angular code that may be unstable.\n. Having all children as display: none is a problematic state.  display: none means the element should take up zero area.\nAll children display: none\n=> The parent is still a parent node, because it has children\n=> The parent no longer has a bounding box defined, because it is defined by the children's dimensions\n=> A parent node is draggable only by moving its children, so no draggable children => not draggable\nEither .remove() the children or use a different style to hide children.\n. @finger563 See https://github.com/cytoscape/cytoscape.js/commit/a3da6558d0014cba1256d28f750736f6dc9f9a9e for 3.2. It's always been in the API, so just publicly document it for the current release.  It should have been documented for 2.7.0...\n. Thanks.\nThe master files for the demos currently exist in gists.  I'll use this to note the gist should be updated and re-pulled in.\n. Gist updated : https://gist.github.com/maxkfranz/621d51ea7de19608127e\n. Re. compounds -- I played around on the debug page on master/2.7.4 and can't reproduce this.  If you can reproduce the issue on 2.7.4, please make a small demo so a patch can be validated against it.  You could probably just fork this demo a bit: http://jsbin.com/gist/5b192c88616af2f75344?output\nRe. .batch() in 2.6, I don't know how you reproduced this case, but we certainly have apps using 2.6 with .batch() without issue.  Since 2.6 is superseded by 2.7, there won't be any patches to 2.6.\nRe. edges -- see https://github.com/cytoscape/cytoscape.js/issues/1199\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-d87303970d-1467312213397.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. @gulian Is it working for you?  Planning on releasing today\n. @gulian OK, if you could look at it on Monday that would be great.  I want to release soon because of https://github.com/cytoscape/cytoscape.js/issues/1445 ...\n. OK, can you create a separate issue for that problem?\nI'm closing this one, since its issue is resolved.\nThanks\n. See https://github.com/cytoscape/cytoscape.js/issues/1408\n. Duplicate : #1438 #1408\n. Not possible on the Cytoscape side.  Each extension has its own API and there are no restrictions on what those APIs include and what signatures they have.\nYou need to manually call destroy() or remove the container DOM element to clean up a Cytoscape instance anyway -- so you may as well handle each extensions at the same time.\nCytoscape itself can make no assumptions.  The only way to automate this would be on the extension side, for each extension.  They could listen for a destroy event and destroy themselves at that time, but no such event exists currently.\n. Added via @EyMaddis' PR\nThanks\n. The default stylesheet changed and the demo wasn't updated : https://github.com/cytoscape/cytoscape.js/issues/1199\n. Revised\n. See https://github.com/cytoscape/cytoscape.js/pull/1409\n. Please create a sample that reproduces your issue\n. There is no issue in Cytoscape related to this.  This is clearly expected behaviour.\nOf course, Cytoscape gets the dimensions to use in a layout from its DOM element by default.  That way your graphs fits your div nicely.  If you don't size your div properly before a layout is run, how should Cytoscape know you want to use a larger space?\nSize your div properly before running layouts (e.g. init or cy.layout()) or use a manual boundingBox specified to the layout.  Run a layout a second time after you resize your div if you really want.  \nJust make sure you specify your sizes appropriately before layout.\n. Works for me\ntext-align.zip\n. If I remember correctly, I don't think you should escape string values enclosed in quotes.  You escape tokens like field names.\nI've added extra tests to confirm this is working: mocha -g Selectors\n```\n...\n\u2713 [weird\\.name = 1]\n\u2713 [weird\\.name2 = \"weird.val\"]\n\u2713 [weird\\.name2 *= \"d.v\"]\n\u2713 [weird\\.name2 ^= \"weird.\"]\n\u2713 [weird\\.name2 $= \".val\"]\n\n```\n. The commit fixes has the tests behaving as expected.\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-367077a893-1468335227910.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. (1) Control point weights of 0 for the first specifies point or 1 for the last one never make sense.  There are implicit points already there.  Edit: You also shouldn't put points within the node's body -- that wouldn't make sense.\n(2) If any of several intersections can't be made, the bezier is bad and impossible to draw.\n\nThis is fairly minor in comparison, but unless I'm mistaken the current way of defining relative edge control points makes representing self-directed unbundled-bezier edges (aka loops) impossible. Since there is no \"line\" from source to target when the source and target are the same node and therefore in the same position, you can't really represent the perpendicular distance or weight of a given control point.\n\nYes, loops may only be beziers or unbundled beziers.  You may customise the control point distance.  You may also control the direction in 3.1: https://github.com/cytoscape/cytoscape.js/pull/1391\n. Your demo corrected : https://jsbin.com/nawigedeqo/edit?html,output\n5->6 is maldesigned for smaller distances.  You need to design your points more robustly, or they will fail at certain orientations.  You probably shouldn't be putting curved edges going out the opposite way -- that's making it almost guaranteed you'll have problems.\nThe more you customise edges, the more likely you are to have problems and the more careful you'll have to be.  There isn't much if anything the lib can do to help you in an automated way in those cases.\n. I don't know that it would make the situation much better for invalid beziers.  Any bezier needs its points calculated correctly to be drawn.  For invalid beziers, you can't fall back on another bezier.  That would require another calculation -- so that's out.\nYou could fall back on haystacks of radius 0 for bad edges -- i.e. when the renderer bails out on bezier or segment edges.  I suppose it would be a bit better than showing nothing.\n. I've loosened the bezier check a bit, but that won't solve your problem.  It may give you ~10% or so more of the time that an edge can be rendered, but your problem will still exist.  It's better to fix your edges so they work in the general case. \nEdges like 5=>6 shouldn't really loop around like that.  To loop around properly, you'd have to calculate the min distance the first point should be away relative to the node size.  It's better/easier use a bezier with a large control point distance, and you'll get always valid edges -- and better looking, symmetric edges.   See https://jsbin.com/tiqocuguju/1/edit?output which has all your cases corrected using the latest snapshot\nIf your edges don't work in the general case, then you could use static graphs -- where nodes are never moved, added, or removed.\nAfter a review, fallbacks to haystacks are not possible.  The renderer can bail out too late in the pipeline for an edge for this to be possible.  It would also be inconsistent with other failure cases, so it would be too confusing.\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-63b320ae28-1468863233346.zip\n. See #1460 \n. Great!\nI made some minor revisions:\n- Refactor\n  - No .split() needed -- better performance\n  - Check next char before append -- no need for tolerance and makes looping over the chars a bit more readable\n- Rename value from \"ellipsize\" to \"ellipsis\"\n  - More like CSS\n  - Better for International English (i.e. -ize versus -ise)\n. All new features go in the unstable branch for the next version.  The next version with new features will be 3.1\nIf you want to use anything from the unstable branch, you may as well just build snapshots from the unstable branch.\n. You have to alter your control point distances for the sizes of nodes you are using.  If you have an impossible edge (e.g. no points, no intersection, etc.), then it can't be drawn.\nI have a branch that allows you to specify where the edges should bundle/point (centre position which is the same as today, or outside shape position).  This should help with compounds, but it's incomplete (arrows don't work).\n. See #1460 \n. Issue from : https://github.com/cytoscape/cytoscape.js/commit/e5579e2ec1fd4445f0ef04b2dad31c39a5826b34#diff-0a12ab28e95ef60c35904eebf53d64e7L226\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-06af91ea3f-1468853599115.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-6bb0704146-1468857474391.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Since there's an addEventListener alias for elements now it's really the only one needed.  Would you please make a PR on master for the change if you can confirm it working for your case?\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-b9e0c50595-1469113017454.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Please post questions to Stack Overflow.  It's important so that other people can benefit from previous questions via Google searches.\nMake sure to word your questions clearly, with code examples where appropriate.  I can't understand your question as-is.\n. Not a bug.  If you remove the children from node A, then A is no longer a parent and you can't expect a :parent selector to match it.\nUse a different selector, like a class.\n. I missed the \"sometimes\" part.  I've refreshed the demo dozens of times, and it worked as expected every time.\n. Oh, you're talking about width: label.  I was confused by the link to expand-collapse...\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-6bbf986aff-1469201769761.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. @soomin-maeng This looks interesting!  A few notes:\n(1) All PRs for new features should go on the unstable branch.  The master branch is only for bugfixes.\n(2) You're doing calculations in the draw code.  That needs to be changed.  Note that the draw functions are relatively \"dumb\" -- they just read values and call the corresponding paint functions.  This is to keep the draw functions fast, because they can be called more often than rendered style calculation functions.  Further, you'll cause bugs with more complex edges with the change as you have it now.\nPlease refactor your calculations to go in the edge endpoint calculation function: https://github.com/cytoscape/cytoscape.js/blob/736edb00648f9f5d1460c532f61e6a71aa3b78dc/src/extensions/renderer/base/coord-ele-math.js#L1992'\nI think you can just add the extra distance to the two offsets (for both start and end):\n- https://github.com/cytoscape/cytoscape.js/blob/736edb00648f9f5d1460c532f61e6a71aa3b78dc/src/extensions/renderer/base/coord-ele-math.js#L2043\n- https://github.com/cytoscape/cytoscape.js/blob/736edb00648f9f5d1460c532f61e6a71aa3b78dc/src/extensions/renderer/base/coord-ele-math.js#L2045\n. Bug in canvas path caching: key doesn't take into account polygon points\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-c93950f64e-1469452218986.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. The issue is not that the line checks are too strict.  The issue is floating point inaccuracy on apex points:  When calculating intersections, the renderer does finite line intersections to calculate where the edge endpoints should go.  \nYour edges point to the righthand apex point of your polygons.  This -- coupled with slight floating point inaccuracy and particular node positions -- makes some of the intersections fail.  That is, the intersection is seen as right on the apex point but with a slight float inaccuracy such that neither line segment is considered a hit.  Note if you change the style to 'shape-polygon-points': \"-1 1 0.25 1 1 0.001 0.25 -1 -1 -1\" it works in this case (but other orientations may fail).\nThis commit cleans up the math.finiteLinesIntersect() function and adds a threshold to accommodate floating point inaccuracy.  The cleanup should make the function a bit faster -- easier to read anyway.\nIf anyone encounters this issue in the future, it may mean that the threshold needs to be updated.  I use a threshold of 0.001 for values that range on [0, 1].  The example in the OP is off by 0.0000000000000002.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-9e0e87baff-1469549663171.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great\n. (1) A border on the label does not shift the label, e.g. the red border overlays the node and the background\n\nA margin shifts the label\n(2) Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-2c463ef773-1469546291655.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. @YacoobHolden I'm planning to release 2.7.7 Tuesday.  Does the snapshot work for you?\n. I've testing this working, so I'm closing the issue\n. Recommended, model approach:\nAlthough React encourages using declarative components for everything, there's nothing stopping you from using Cytoscape normally as a model.  Write your graph model in Cytoscape -- or in a module on top of Cytoscape.  You can pass Cytoscape instances to components if they need to access the graph data.  In this approach, you treat Cytoscape as one of your models.\nAlternatively, you can use Cytoscape just as a visualisation component, underneath React.  That approach follows in the next section, but it requires you to do diffing.  It also means you lose out on events and many other benefits.  I would suggest using Cytoscape as a model, because Cytoscape is a model -- it just so happens to have a renderer/component extension included in the default build.\nDeclarative, viz-only approach:\nIf the model (state) for the component is just JSON, you can use cy.json() and ele.json() to rerender.  \nIn this way, your model is held completely on the React side (in JSON) --- and it is updated declaratively: Just specify the JSON diffs for the viewport and the changed elements.  \nYou should really use Immutable to handle state with this approach (and in general, anyway).  Notes:\n- You can be clever with diffs using fast === checks for which elements and which top-level fields (e.g. data, position, ...) need to be updated.\n- You don't want to specify the whole graph in cy.json() or whole elements in ele.json() -- only diffs, i.e. if( oldEleJson.data !== newEleJson.data ){ ele.json( newEleJson ); }.  If you use the naive approach and update everything on every render(), you will cause needless overhead with additional style calculations, events, etc.\n- You may need to clone the newEleJson objects if your data in your elements contain nested objects (e.g. if you mutate ele.data() outside the React component).  If only React is driving writes, then there is no need for cloning (and Cytoscape does no cloning internally).\n- Make sure you never call cytoscape() in your render method.  That's a huge mistake.  You want to create an instance once per component (i.e. componentWillMount())  -- not once per render.\n. @arddor You'll run into the performance issues I mentioned with larger datasets.  \nIf props can accept non-JSON objects (i.e. with a prototype), I would just do <Cytoscape cy={someCyInstance} ... >.  That way, your code can share the cy ref without being limited to using it within the components tree, and you can use cy.getElementById('foo').data('bar', 'baz') instead of more expensive cy.json() calls.\n. Otherwise using your existing approach, you would have to diff nextProps in each componentWillReceiveProps() call using ImmutableJS to make more performant per-element ele.json( patch ) calls for larger datasets.\n. > Since Cytoscape.js project started as a jquery-based library, it is a bit tricky to create React based component.\nOriginally missed this statement.  This is untrue.  No public release required jQuery.  Cytoscape is a standalone library, and it's no more difficult to use Cytoscape with React than any other standalone lib.\nSome extensions can depend on jQuery if they want to support IE.  @aindlq's approach is mostly correct using ES6/ES2015 import.  The problem with import is that it's not as clear as CJS require().\njs\nimport cytoscape from 'cytoscape';\n// is the same as\nlet cytoscape = require('cytoscape');\n``` js\nimport * as cytoscape from 'cytoscape';\n// is (pretty much) the same as\nlet cytoscape = (() => {\n  let ret = {};\n  let req = require('cytoscape');\nObject.assign( ret, req );\nret.default = req;\nreturn ret;\n})();\n```\nSo you probably shouldn't be doing import * with libs that have a single, default export.\n. @Sigfried You can't put anything in the div, as a  visualisation generally owns its div.  That holds true for pretty much any visualisation lib, not just Cytoscape.  The docs could be updated to make that explicit.. Inferno doesn't support string refs either, so it's best to avoid them altogether.. Merged with modification to allow separate specifications for the source side and the target side.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-e1bf31360c-1469738341740.zip\nLet me know if it works for you or if you have any issues with it.  I'm planning to release on Tuesday, so if you could let me know by then I'd appreciate it.\nThanks\n. Great; thanks\n. @dotasek . This ticket should be replaced with new ones.  We decided to simplify the specification, by splitting it into two parts: (1) text justification and (2) support for label margins relative to the label bounds.  This will have a more maintainable implementation and a more easy to understand set of properties -- while still allowing for the same usecases.. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-4c03b160b4-1470170070783.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great, thanks\n. Fixed\n\n. This looks interesting.  I'm a bit torn on it, though, because the pie properties only really came to be because browser SVG support (within canvases) was very lacking at the time.  Now, it's possible to set a SVG background image for a node that has arbitrary pie charts (or even other charts).\nThe pie feature may be replaced by an extension for this reason in 3.0.  That would help to make performance better for this feature (and overall) and to simplify the lib.  It would also make it easier to add more customisations for the charts, including the feature you've mentioned here.\n. In v4, there will be no pie support.  It would be replaced with an extension using SVGs.  In that case, you could just modify the SVGs used in the extension.. Thanks for the pull request!\nHave you tried using a background colour on labels, though?  That would give the same effect with a bit better coverage as edge orientation changes -- and it would be less computationally expensive as well.\n. Do you have an example stylesheet and screenshot or a live example (like JSbin)?\nIt seems to work pretty well when I tried it:\n\nIt also works nicely with autorotate:\n\nWhile I really appreciate your pull request, the performance of the background colour would be much faster.  The background also accommodates different edge orientations.  So, it would be great if the background could work for this usecase.\n. If you're just looking for legibility and to minimise edge overlap issues, have you tried using a text outline?  It's the same style used on nodes in your example, but you could use white (or whatever colour you like) for edges.\ne.g.\nedge {\n  text-outline-color: white;\n  text-outline-width: 3px;\n  text-outline-opacity: 1;\n}\n. Have you tried something more similar to the node style?\ncss\nedge {\n  color: #fff;\n  line-color: #888;\n  text-outline-color: #888; /* same colour as edge */\n  text-outline-width: 3px;\n  text-outline-opacity: 1;\n}\nOr have you tried 1px with the white outline?  Or try a thicker outline on thicker edges.  You may need to tweak the style a bit\n. If we want to merge this, there are some changes that would need to be made:\n(1) Calculations (especially expensive ones like bezier length) should be done in the renderer's routine for recalculating the rendered style for elements (only when dirty).  Doing calculations on every draw is much more expensive, especially for large graphs.\n(2) We should probably take into account more than text height in calculating the gap, because if the edge isn't straight up and down w.r.t. the text, then the gap isn't big enough.  Or maybe it would be better to keep it simple and just let the dev specify with a style property how big the gap should be (e.g. 20px for a 20px size font, maybe 30px if the dev wants extra spacing).\n. @soomin-maeng OK, make sure to let me know if you need any help\n. The positioning of segments is defined relatively, from the line from source to target.  That line would have zero length, making the points not make any sense.\nThis would require other features to be implemented first, including different way of specifying the points.  There are also possible conflicts to take into consideration (e.g. mixing specification types, specification type hierarchy, etc.).  Absolute positioning is a possibility, but that defeats the purpose of having the edges update as nodes are moved.  Radial positioning could work, but again, it would require consideration of conflicts.\n. You can implement a diff check in a listener (maybe using something like Immutable.js or a JSON diffing lib).  You can fire a custom event to give exactly the behaviour you're looking for:\njs\ncy.on('data', '*', function(){\n  if( fooDiffPositive ){\n    this.trigger('foodiff');\n  }\n});\nGeneral diffing (without making assumptions about what your model is like) can be expensive, so it should probably be left to the developer to control and implement.\n. Another option is wrapping your data modifications in an extension, e.g.:\n``` js\ncytoscape('collection', 'fooData', function( newFoo ){\n  return this.data('foo', newFoo).trigger('foodiff');\n});\ncy.nodes().fooData('bar');\n```\n. Yes, most people probably expect scratch to be maintained.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-f6e60c0fa4-1470842221938.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great; thanks\n. Before:\n\nAfter:\n\n. A bit off in the stylesheet test in the debug page\n. Are you animating the z-index property?  Do you have a live example of your animation I could look at?  Thanks\n. @pconihout Do you have a live example I could look at?  I'm not entirely sure what the issue is or how to reproduce it.\n. No response; closing\n. That you can do just with regular CSS on your div.  All ops in the graph are synchronous, so you can show after .add()\n. Then you can show your div after the layout is done on the layoutstop event\nAdding and layout are different actions\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-5d878a434a-1471289156632.zip\n. Just run another layout with the same options.  Nodes are automatically styled via the stylesheet, but they are positioned based on where you specify.\nIn future, please post questions to Stack Overflow. Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.  Thanks\n. (1) Stylesheet calculations are way too expensive to be recalculated on gestures.  Stylesheets get recalculated only on data changes or possible selector match changes.  \n(2) The offset is a crude, inexpensive approximation.  It's very accurate for most edges, but only for relatively small values.  The usecase is pushing a small label, like a digit, a bit so it doesn't overlap the node.  It's not meant for shifting large amounts, which is when you'd want a percent value.\n. @ugurdogrusoz I'm not sure what the best solution is here.  Devs can specify themselves to exclude problematic edges (eles.layout()).  But could we safely filter these out all the time (in the layout itself) to make it more convenient in cose and cose-bilkent?  Are there any cases where you would want these edges included?\n@aindlq Does this only affect parent-children edges or does it also affect general parent-descendant edges?\n. Are you trying to reuse a .destroy()ed instance?  Once an instance is destroyed, it can't be used anymore.\nWould you please paste your re-init code here?\n. I can't reproduce this.  I just tried initialising on an already used div, and there's no error.  Would you please create a Jsbin that reproduces your issue?  You can just fork one of the demos to save time.\n. Unfortunately, that doesn't help.  That call stack is normal.\nYou must be doing something specific, because overwriting an instance works fine for me every time.  I need to see a demo that reproduces the issue.\n. All event handling is removed on destroy.\nWithout a demo, it will be near impossible for me to reproduce your issue.  I don't have the time to try to recreate your scenario by trail and error, so unless you provide a demo there's nothing I can do to help you.\n. @Zigur Yes, I'd be very interested in seeing a demo for this, as I haven't been able to reproduce the issue.\n. Thanks for the info, @EyMaddis.\nIt looks like to do a complete fix, a few changes are needed:\n(1) APIs that the core or elements can call on the renderer must have a check whether the renderer was destroyed.  This might not be strictly needed for some ops, but it's safer in general.\n(2) Every instance where an API in (1) is consumed (i.e. via cy.renderer()), the consumer must check the renderer reference.  It would be more accurate to have a renderer-is-destroyed check, but this would complicate the null/nop renderer.  Checking for null means that we might have silent errors in future, but it's probably a fair trade-off.\n(3) The .notify() check should really also see whether the core is destroyed.  That's not possible until 3.1 with @EyMaddis' PR #1527.  I made an issue to track the future improvement https://github.com/cytoscape/cytoscape.js/issues/1528\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-dc6bb7f291-1474316715767.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. 2.7.10 is being released today.  Since this is working as far as my testing shows, I'm closing this.  If anyone runs into an issue, please update us all here.\n. cy.makeLayout() is the same as cy.elements().makeLayout()\nSo, you're running a layout with no elements, because you created the layout with an empty graph.  Your workflow in 2.7.3 relies on a bug to work : https://github.com/cytoscape/cytoscape.js/issues/1432\nMake the layout with the elements you want, and then you can layout.run() multiple times.  Or, if you change the graph elements, you should just be reusing the layout options and creating new layouts each time.  It's very cheap to make a layout -- running them is the part that can be expensive.\n. You can think of a layout as just a map function of node => ({ x, y }).  Your idea sounds like it has behaviour/UI associated with it, so it would be better as a general extension.\nThe extension could call one or many layouts to position the nodes.  You could even parameterise it so you could use any layout.\nYour idea has some overlap with the general semantic zoom idea : https://github.com/cytoscape/cytoscape.js/issues/1157\n. If you have a really different idea of how to position the nodes, then you may want a custom layout extension that your main extension would use.  It sounds like you could get by just using one of the existing layouts to simplify things.   The existing layouts are fairly customisable via their options.  \nYou can just call one or more layouts as needed on zoom changes.  (You have some flexibility in that layouts can be applied to subsets of the graph.)\nIf you have linear levels, you could use the grid layout and specify the bounding box to effectively scale the distance between the levels.\n. It's pretty much the same expense either way.  Creating new layouts isn't expensive w.r.t. execution cost.  For more complex layouts that create extra objects per element and call out to external libs (like Cola, Dagre), there is memory/gc cost to consider per run -- though probably a relatively small one.\nThe main thing to consider is that layouts, like collections, are immutable w.r.t. to the element set.  You can't add or remove elements to a layout; you must create a new layout.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-75a15818da-1471965465726.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. The commits for each issue are always cross-referenced in the issue (see above): 75a15818da5662c9e78930b157f8745885aca6a8\n. @EyMaddis Is it working for you?  The snapshots are always labelled cytoscape.js-<hash>-<timestamp>.zip, so I think you should be able to use cytoscape: http://path-to-repo.git#hash in your package.json.\n. @EyMaddis If you don't have initial positions defined for nodes, then they're all at (0, 0) at init.  You must enable randomisation in this state if you want force-directed/physics layouts like CoSE to work.\n.  (Consider that forces are proportional to distance and if distance is zero, then forces may not be well defined.)\n. CoSE-Bilkent is more feature rich, but it has a much larger file size because it implements a lot of custom things -- like its own PRNG that can accept a custom seed value.\nThe default CoSE isn't nearly as sophisticated as CoSE-Bilkent -- and probably never will be -- but it adds only a small size to the lib and it's very fast to run.\nIt might be good to have something like a prng-random layout extension that acts like the built-in random layout but with a PRNG that can accept a custom seed etc.  Anyone can then just chain layouts together (e.g. prng-random then cose) to use a more controlled randomisation.\n. Likely a regression from https://github.com/cytoscape/cytoscape.js/issues/1490 -- so 2.7.7 should be unaffected.  In any case, there will be a snapshot with a fix shortly\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-8839904f39-1471966505304.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. 2.7.9 needs to be released.  Closing this for now.  If there are still issues with this, please comment on the issue and it will be addressed in a later release.\n. image.crossOrigin = 'Anonymous' is a standard browser feature.\nIf we remove this line just for IE, we'll break legitimate usecases for modern browsers.\n. You could try embedded images that are base64 encoded rather than a URL, but that's just a guess.  It might bypass IE's bug because it's a different way of loading the file...\n. No, this is not something that the renderer can check.  You need to make sure your images are accessible without auth.\nSee https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-crossorigin\nWe can't set use-credentials, because that will break things for everyone who serves images normally.  Checking the domain tells you nothing.  You need to get the HTTP header back, and by that time it's too late.\nPresumably, you could control this with a new style property.  But I don't have time to add and test that right now.\n. From the MDN: \n\nWhen not present, the resource is fetched without a CORS request (i.e., without sending the Origin: HTTP header), preventing its non-tainted usage in  elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information.\n\nThe attribute needs to be set even if the image doesn't technically require CORS.  Otherwise, the browser treats the canvas as \"tainted\" and things like cy.png() won't work at all.\n. There's probably a security concern that the HTML5 spec is trying to address, but it makes handling images a pain.\n. OK, made a ticket to track the new feature: https://github.com/cytoscape/cytoscape.js/issues/1607\nIf anyone wants to create the property in a PR, we could merge this in for 3.1\n. http://stackoverflow.com/questions/39168928/cytoscape-save-graph-as-image-by-button/39173400#39173400\n. @hjtran Yes, it would be great to add this!  The best way to do it for now is as an extension.  Normally, an algorithm like this would be merged into the unstable branch for the next feature release -- but that's going to be 3.1 as 2.x is in maintenance mode in preparation for 3.0.\nSo, doing an extension would better/faster for now.  We can easily include extensions in the main build, so we can merge Yen's algorithm from the extension into 3.1 in future.  (In fact, we have several other algorithms implemented as extensions for now, waiting for 3.1 -- k-means for example.)\nThere's an autoscaffolder to make generating extensions easy.  If you have any trouble using it, just let me know.\nDoes this sound good to you, Joey?\nThanks\n. @hjtran Any updates, Joey?  Thanks\n. This issue can be re-opened if there is a response from @hjtran.. Calling a layout positions only the non-parent nodes.  A parent doesn't have a concept of an independent position, as its position is derivative of the dimensions and positions of its children: http://js.cytoscape.org/#notation/compound-nodes\nFor a parent node, p, you need to p.descendants().makeLayout( options ).run() with appropriate options for bounding box etc. \n. In future, please post questions to Stack Overflow. Stack Overflow answers tend to come up in Google searches better than GitHub issues, so it benefits other developers.  Thanks\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-0dd3906ce4-1472741089058.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Are you sure you updated to the snapshot version?  I just tried on master (and the snapshot zip) and I got selector: \"node[status <= 1]\"\nIt strips out the .0 part, but otherwise seems to be working when I try.\nI think this test should be catching any errors for that case too: https://github.com/cytoscape/cytoscape.js/commit/0dd3906ce49aa33496d43d086c0012976704e4d9#diff-b7a561e777dbd616b0913b35ef882e6fR81\n. 2.7.9 needs to be released, and I can't reproduce this issue on master.  Closing this for now.  If there are still issues with this, please comment on the issue and it will be addressed in a later release.\n. Thanks for the demo.  It made it much faster to debug the issue.\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-b33f4cb69e-1472752151955.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great; thanks\n. The Firefox console says you didn't register Cola: \n\"Can not apply layout: No such layout `cola` found; did you include its JS file?\". @leots Your SVG is incorrect for Firefox.  Firefox doesn't properly handle SVGs with a viewbox.. @dbrodie Do you have a demo?. I tried this\n.selector('.foo')\n  .css({\n    'background-width': 'auto',\n    'background-height':'auto',\n    'background-fit': 'cover',\n    'background-image': function(n){\n      if( n.data('weight') > 20 ){\n        return 'images/gnu.svg';\n      } else {\n        return 'images/tux.svg';\n      }\n    },\n  })\n.selector('.bar')\n  .css({\n    'background-fit': ['cover', 'cover'],\n    'background-image': function(n){\n      return [ 'images/gnu.svg',  'images/tux.svg' ];\n    }\n  })\nNo combination of cy.nodes().toggleClass('foo') or cy.nodes().toggleClass('bar') breaks anything.  Maybe you have a problem with reliability of image availability?  Each fresh element render will try to reload a failed image iirc.. @buffpojken Do you have a standalone demo that reproduces your issue, or is it only in your app?. Maybe related to #1998?\nDoes this resolve it? https://github.com/cytoscape/cytoscape.js/files/1496713/build.zip. @brassard I'd need to see a demo with the exact data, layout options, etc.  There are too many variables that can affect rendering behaviour for me to try to reproduce your test case from scratch.. @brassard This has a completely separate cause as compared to @JGMarshall's issue.  I've created a separate ticket: https://github.com/cytoscape/cytoscape.js/issues/2026. To validate, try your Cytoscape style/css in an <img>.  The background-image property should be the same as for CSS proper.  Cytoscape just loads images into an <img> tag.  So if it doesn't load, there's probably a problem with your image.\nIn this case, I think you forgot to URI encode your data: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\n. I meant in <img src=\"...\"> a valid data URI can be used just as in CSS.  I wasn't really clear.\nYou will need to encode the URI for proper cross browser support.  Embedding a plain SVG without encoded does not make a valid URI.  I wouldn't be surprised if it works without encoding on some browsers in some cases, but you still ought to encode nonetheless.\nDoes the encoded image load in Cytoscape.js?\n. I looked at the documentation (I should have done this from the start), and I was mistaken:  Nowhere is url() wrapping mentioned, and it's unsupported.  It's only a coincidence that some url() wrapping works, probably because it was under consideration in some very early version.\nI've added a patch that makes the check a bit more lenient, but you really ought to use just the URL in the interest of future compatibility.\nWithout url() wrapping, both your SVG and my own test image work fine.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-51e9bb8de8-1472742026086.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great; thanks\n. edgeLengthVal isn't a part of any API -- extension or core.  It's probably just some intermediary variable used to send some actual parameter to Cola.\nEdge length is inferred based on node positions, and how node positions are set is based on the used layout.  Each layout has different options.  Some are force-directed layouts that can set an edge length hint directly, but this will pretty much never be exact.  Some more deterministic layouts have indirect options for setting edge length -- like a spacing option -- but again, this is indirect.\nThere is no way to directly set edge length in a general purpose, interactive graph visualisation.  It's up to the developer to work this out for the sort of layout he wants to use and the sort of limitations  he wants to impose on the graph (e.g. locking, infinite layout, constraints, etc.). \n. I don't own every layout.  Most layouts are extensions, many of which are third party and I have no write access to those repos.  A generalised note could be added to the \"Layout\" section, but otherwise there's not much I can do to cover all layouts.\n. Yes, that usually holds true.  In this instance, I'm thinking of the different cases a dev comes across the docs.  For example, if a dev sees text like that per layout and sees nothing mentioned in a particular third-party layout, then it's inconsistent and confusing.  Even worse, if the dev only looks at the layout intro and the third party layout readme, it looks like edge length is never mentioned.\nIn my opinion, it's better to discuss the topic in the intro for layouts in general terms so that the dev can apply that info to any layout -- even one that he writes himself.  You're right that there's value in explaining edge length, but I think it belongs in the layout intro. \n. I've taken an initial stab at improving the docs re. edge length in the \"Notation\" and \"Layouts\" sections.  Please take a look at the commit diff and let me know what you think.\nThanks for your feedback\n. Closing for now for the 2.7.9 release.  Feel free to continue to comment on the issue for further improvements in later releases.\n. @gbader It's generally better to create a new issue and link it to the old one for issues associated with a milestone.  Otherwise, milestone changelogs become broken.  I've reassigned the milestone of this issue to 2.7.10, because this particular case is just a docs issue.\n. The algorithm of each layout is in its description -- and the details are in the options.  For example, the circle layout puts the nodes in a circle and each option affects the circle and how the nodes are organised along it.  \nEdge length is affected by every option, because every option affects the positions of the nodes.  If you're asking for an itemised list of what factors affect edge length, you need look no further than the layout options.\nHave you taken a careful look at the options for the layout(s) you are interested in?  Have you tried experimenting with different values for the options, especially the types of options I mentioned in the docs update?\nThe position of nodes A and B determines the length of edge AB.  The math involved for line/curve lengths is straightforward (i.e. secondary-school/high-school level math). It's just the Pythagorean Theorem for (straight) lines proper, and quadratic Bezier curves otherwise.\nEven without doing any math, you can instead tinker with the options until you get a visual approximation of the length you'd like.\n. I think you're taking things personally.  Don't.  I realise that you're frustrated that you haven't got things working, but don't take things the wrong way.  I'm only trying to help you.\nIf your needs are basic, then using something like D3 or Sigma is just fine.  They're both great open source projects that fill a different niche: They work very well for simple usecases.  To my knowledge, all the graph libs you listed include/are one layout each -- so that probably makes things easier for you.\nJust as D3 and Sigma have a force-directed layout, Cytoscape has a built-in force-directed layout (CoSE) and several force-directed layout extensions (like Cola, which you mentioned specifically in your initial post as one that you had looked at).\nAs I've explained before in more detail: Force-directed layouts tend to be more straightforward w.r.t. edge length, and other layouts are more indirect.  The docs have been updated already to give a intro to how and why edge length is generally affected and to point devs towards the options -- because the details are in the options.\nAs you pored through -- as you put it -- the documentation of these layouts, you must have noticed that those layouts have options called idealEdgeLength and edgeLength respectively.  I've verified just now that those layouts create exactly the specified distance, without the nodes far away at all.  If you have specific, constructive feedback on how options like these can be made clearer, I'd be interested in hearing it.\nThanks in advance\n. Use a data selector: http://js.cytoscape.org/#selectors/data\n[name ^= value]\nMatches elements if their data attribute starts with the specified value (e.g. [foo ^= 'bar']).\n. Use a function: http://js.cytoscape.org/#style/mappers\nE.g. content: function( ele ){ return 'foo' + ele.data('bar'); }\n. Master gets published to npm when all the issues assigned to the current bugfix milestone are closed: https://github.com/cytoscape/cytoscape.js/milestones\nLooks like a duplicate of https://github.com/cytoscape/cytoscape.js/issues/1503 for 2.7.9\n. Actually duplicate of https://github.com/cytoscape/cytoscape.js/issues/1513\n. A dblclick event would cause issues with touch devices:\n(1) It's not a normal touch gesture.  It means you can't support touch well.  It's also a fairly hidden gesture on desktop, and it's much harder to do than a regular click.\n(2) It causes problems when implemented.  The reason tools like Fastclick exist is to work around issues caused by dblclick support on touch -- that ~300 ms event delay is caused by dblclick support.\n(3) dblclick can be implemented pretty easily on top of the existing events.  A sglclick event could also be easily implemented to differentiate between clicks that are part of a dblclick and those that stand alone.  This could be packaged as a third-party extension for people who are interested in the feature.  These higher level events aren't exactly like the DOM implementation, but it would avoid the issues the DOM implementation has, like the ~300 ms delay.\nFor these reasons, I don't think the core will ever implement dblclick.  If anyone's interested in implementing a reusable extension for it, I'd gladly add to the extension list.\n. Duplicate of https://github.com/cytoscape/cytoscape.js/issues/1513\nFixed in master and will be released with 2.7.9\n. The problem is that style bypasses are not serialisable, because they're not part of the element's state proper.\nIf you use the stylesheet, serialising the style for each element becomes unneccessary.  \nIf for some reason you absolutely need per-element manual values (e.g. the user sets colour via a colour picker), set those values in data() instead and use a data() mapper in your stylesheet.  That way, the state is serialised -- because it's part of the model rather than just the view.\nAs an aside, you lose out on several performance optimisations if you use bypasses via ele.style().\n. The correct solution is not to grabify/ungrabify/select/unselect mid-gesture.  You have no guarantees of when grabbable/selected state is checked during gestures for the purpose of dragging nodes.\nInstead, just ungrabify the nodes you don't want grabbable.  Simply update the nodes you want dragged along during drag events on the main node.  If you get the initial position of the grabbed node on grab, you can calculate delta vectors on each drag event -- updating the positions of the secondary nodes by those delta vectors.\nIf you have a strict ruleset for the orientation of the secondary nodes w.r.t. the primary node, you can use the automove extension and just specify that rule instead of keeping track of deltas.\n. Great.  If you have any feedback on the automove extension, please let me know -- as the extension is relatively new.\n. Have you noticed if this happens for you on just display: none elements, or does it also happen on others like opacity: 0 or visibility: none?\nWould you please paste one of your transition style blocks (from your stylesheet) that causes problems?\nI don't think #1522 will be necessary to fix this, because it looks like a texture cache issue -- but I've updated #1522 to also elide animation style updates for hidden elements.\nThanks\n. There are two issues here:\n(1) Animations can cause hidden edges to be drawn.\n(2) Firefox JS engine throws exception on 0 dimension c2d.drawImage() calls #1529\nRe. (1), I've added .visible() checks in the low-level draw functions for nodes and edges.  This would have caused a performance regression in <=2.6, but >=2.7 doesn't seem to be affected more than +/- 1% from my testing.\nRe. (2), there are extra guards added so bb=0 draw requests are nops.  Firefox seems to be the only browser affected -- other browsers just translate to nops themselves without issue -- and it's affected only in very particular Cy.js usecases.\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-5b8143d96d-1474398835815.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\nEdit: Make sure to use the current link.  The old one (pre-edit) was a build off of the unstable branch...\n. Great; closing\n. Looks great; thanks!\n. Snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-5b8143d96d-1474398835815.zip\nEdit: Old snapshot was of unstable branch...  Make sure to use this one.\n. Can you provide a demo?  It's working as expected for me on the debug page:\n\n. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-871d0d41e2-1474576375330.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great; closing\n. There are no guarantees provided for exactly when state checks are done during gestures.  That's undocumented/undefined behaviour, so you can't make any assumptions like your above code does.\nTry changing the grabbable state before or after any gesture.  You can probably assume users will press control before clicking -- so change state on keydown and revert on keyup.\n. Already implemented.\n. The canvas is cleared behind an edge arrow -- otherwise part of the line that overlaps the arrow would show through with 0 < opacity < 1.  For straight edges and triangle arrows, this isn't obvious.  But consider other edge line styles (like curved) that can be combined with different arrow types:  Most lines overlap their arrows at least a bit.\nThe other solution is to clip the line -- but unless that's changed recently in the browsers,  the equivalent clipping operation is dead slow.\nI'm not happy with the current solution either, but the alternative is a major slowdown (at least 10x iirc) in performance for graphs with edge arrows.\n. An edge is not drawn if it's created contradictory/impossible positioning.  For example, that happens when two nodes overlap -- no intersections may be calculated for the edge.\nIn your demo, I notice you specify an invalid point w.r.t. the larger node for many orientations.  If you just specify a small distance, you can see the point:\n\nBecause you can see the point (at the bend because we specified a small distance), you can see it will overlap the big node if you move the small node any closer.\nYou need to specify points that are valid for any orientation.  That's generally easier if you nodes are smaller sizes.  But for the example you give, it's not at all necessary to use a segment edge style -- you can just use the default bezier style, which uses a straight line for the first edge between two nodes.\nIn 3.1+, you will be able to make this easier with edge-pointing-direction: https://github.com/cytoscape/cytoscape.js/issues/1454.\n. > So my fist problem was to get the weights and distances of these supporting points. Or is it possible to use x and y coordinates instead of weight and distance. Calculating he weight and distance is no the problem bu I would make some things easier id I could use the coordinates.\nOnly weights are supported.  Absolute positions would not update when the nodes are moved, leaving the edge point behind.\n\nAnd If i got it right bezier can only show one supporting point.\n\ncurve-style: bezier means automatically bundled beziers, with the first edge as just a straight line.  If you need a straight line with end arrows, that's what you should use.\n. That won't work, as the function is unary and needs to be able to run independently of other elements.\nYou need to keep track of your indices in your app's model.  You can store the index in .data() s.t. you'd just use content: n => 'node' + n.data('index')\n. Yes : https://github.com/cytoscape/cytoscape.js/issues/1401\n. You'd have to build your app using Browserify or Webpack and have the Cy.js source built-in in order to use the code in unstable.  You can't use dist unless it's off a tag\n. Cool!  Thanks @tonymullen \n. We're trying to sort out as many 3.1 tickets as possible in the next couple weeks.  3.1 will be released then and whatever didn't make it in will be postponed to a later milestone.. That would be a great thing to support, but it would be something that would go into an extension rather than the lib itself.  For example, the iVis Lab at Bilkent University built the graphml extension to add GraphML support to Cytoscape.\nAs an extension, it would probably have the signature cy.dot( dotFileStr ) to import and cy.dot() to export.\nIf you're interested in building this extension, take a look at the scaffolder.  It automatically generates the project for you, so you'd just need to fill in the dot-json (and vice versa) conversion.\n. A module that converts to cytoscape json could be built on top of this: https://www.npmjs.com/package/dotparser. Everything but data.id is optional for nodes.  You don't need to specify a position.\nEverything but data: { id, source, target } is optional for edges.\nFor data import/export, you should only consider element data, position being an optional component -- basically just element JSON.  The viewport, style, etc. are extraneous.  . It's not necessary to use any Cytoscape APIs for this.  I usually use Mousetrap.  It lets you make global key bindings that don't conflict with text boxes etc.  For apps I've built, users like the global shortcuts -- but maybe this approach doesn't suit your particular app's UI.\nIf you want to bind to a particular div, take a look at this Stack Overflow: http://stackoverflow.com/questions/3149362/capture-key-press-or-keydown-event-on-div-element#3149416\n. Because nodes.positions() is already plural for setting, I suppose it could return multiple values.  However, cy.positions() was created only because a generalised cy.batch() didn't exist yet.  The functions in the API are generally singular getters, unlike the plural nodes.positions().\nNow, there really is no need for cy.positions() to exist anymore when you can just cy.batch( updateAllThePositionsIWant ).  Similarly, for your usecase I would just nodes.map( n => n.position() ).\nSome background:\nIn general, for collection functions that return a (non-chaining) value, the value for the first element is returned.  That means you won't get every value for collections of size 2 or greater.\nThere are several reasons for this, the most important of which is consistency.  Lots of function don't make sense to return multiple values, and it would be confusing if some functions do and some don't.  Another major reason is that it's the jQuery collection convention.  We tried to design the API to be similar to jQuery where possible to make it easier for devs to use -- because so many devs are already familiar with it.\n. Don't read private/unstable/undocumented data if you care about your app's stability.\nUse the diagonal of the .boundingBox() instead.\n. There are four points in a bounding box.  You have to figure out which of the four corners is closest to the nodes.\n. But you can usually just use the top-left to bottom-right diagonal.  It's close enough for most edge types.\n. The private values don't mean what you think they mean.  Just use the bounding box.\n. In short, this is expected behaviour whenever you use bypasses (which animations naturally use).  You have to remove the bypass on the style properties in order for the bypasses not to bypass the stylesheet.\nAnimations are bypasses, just like calling ele.style('foo', 'bar').  That's analogous to setting <someTag style=\"foo: bar\"> in HTML/CSS.  You'll find the same behaviour in any CSS/animation lib like jQuery or Velocity.\n. Set ele.style('foo', '') or ele.style('foo', null) to clear a bypass\n. Yes, the difference with a transition is that it has a definite stylesheet block state that is starts and ends in.  This isn't the case with general, imperative animations -- so the bypass needs to remain.\n. You forgot to set initial positions or set randomize: true.\nForce-directed/physics layout tend not to work well with zero distances (e.g. all nodes at (0, 0) at init).\n. Duplicate; closing...\n. #1520\n. Did you actually bind via (1) cy.on('taphold', 'edge', function(){ ... }), or did you (2) cy.edges().on('taphold', function(){ ... })?\n(1) uses a delegate selector and so will match elements that don't exist yet.  (2) is calling on a specific set of elements, and naturally will not match elements outside this set.\n. I've confirmed (1) working as expected for any edge.\n. Closing for now\n. There are lots of reasons for not allowing mutable IDs.  Mongo doesn't let you mutate _id, either.\nRemove the element, and add a new one with the new ID.  Or just don't use the id field: It doesn't have to match your DB ID.  You could use an _id field, which would be mutable and match your Mongo _id better anyway.\n. You can use the automove extension to set restrictions on position: https://github.com/cytoscape/cytoscape.js-automove\nThere's an example in the demo that limits one axis based on the position of another node.  It's the same principle in your case except simpler -- just make the x value constant as your restriction.\n. The graph data is serialisable via JSON.  Use cy.elements().jsons() or cy.json().\n. The order of events is unspecified, so you can't make assumptions re. the relative ordering of tap and select.  Bind to select events if you're interested in selection.\nAs an aside: The default selection behaviour is already to unselect everything on tap/taphold of the background.\n. Apart from bugs in IE itself, there's no reason Cytoscape wouldn't work in IE.  It should work in versions with ES5 support and the canvas API, so IE9+.\nIt works fine in IE11 in a Windows VM on my machine.\n. @metincansiper Would you be able to test this off of the unstable or master branch?  (Whichever you prefer)\n. gulp build builds to the build directory, whereas gulp dist builds to the dist directory.  Whatever changes are made in the source are reflected in the builds.\nClosing as the bug itself seems to be resolved.\n. @etienne69 Thanks for the pull request!  Would you be able to apply your change cleanly on top of the current unstable branch?  It should just be a fast-forward operation so that Github can take in the change.  Thanks!\n. No, it would be in the milestones if it were: https://github.com/cytoscape/cytoscape.js/milestones. Introduce the previously mentioned offset visual style property and then use the animation API on it.. If you're running unstable/3.0, you need .layout().run()\n. @dpekkle Yes, this would be nice to have in the library.  I don't have time to try that now, but if you're interested it should be relatively straight forward to make a pull request on the unstable branch for it.  Let me know if you need help finding the relevant places in the renderer (hit tests, drawing) and the stylesheet.\nThanks\n. The hit testing is here: coord-ele-math.js#L208\n. Might also need the hit tests updated for tap support on labels\n. On your side, I think all that should be necessary is making sure the width and height considered for the label in the hittests have the paddings taken into consideration.  The issue with the rotation calculation looks like a separate, unrelated issue.  I am able to reproduce on unstable as well.  I haven't looked at master yet, so maybe it's an issue introduced after 2.7.\nI'll look into this more and see.\nIn the meanwhile, would you please organise your changes into a pull request?\n. OK, thanks.  I should be able to squash them on my side anyway.  I'll review on Monday.\n. This should address the hit test issue:\nLabel hit tests do not differentiate source/target/mid labels when not rotated #1619. Because SVG background images are supported, you can put anything you want in the SVG.  There are libraries that make SVG editing easy, and you can even put content outside of the node body if you disable background clipping in your stylesheet.\n. I'm not sure if the text can be aligned like that.  Otherwise, it looks possible.\n. You can control node drawing completely is you specify a SVG background image.  You can put whatever you want in the SVG.\n. I don't think there's a bug here, or at least I'm not able to reproduce the issue.  If you're using cy.on('layoutstop', runAnotherLayout) you'll naturally get stuck in a loop and overflow the stack -- because you'll run a new layout whenever any layout is finished.  Did you use .on() instead of .one()?\n. Can't reproduce; closing. It looks like an interesting layout!\nYou can't read style properties reliably during a batch, because styles get applied after the batch block by definition.  See http://js.cytoscape.org/#cy.batch\nYou can read .width(), .boundingBox(), etc. more reliably -- but those values may be zero during batching if you added the elements in the same batch block.\nYou would probably find it easier to work on your layout in an extension, rather than doing a modified build.  The extension can be automatically generated for you so you can just paste in your code.  Using an extension you put in a Github repo will also mean you can just use the vanilla cytoscape npm/bower package with your layout package in your apps.\n. I don't think (1) is pragmatic.  The only reason mid arrows are supported is because the midpoint already needs to be calculated for basic drawing (e.g. control point for beziers).  Calculating extra points per edge can be very expensive.\n. Initialise your qtip with the proper show events (i.e. mouseover)\nUse the extension repo to discuss the qtip extension in future, please. \n. @ibas87 \nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-d5a404185a-1478725109265.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Closing for 2.7.11 release, since it looks to be fixed from my testing.\n. This is a bug in Webkit itself: https://bugs.webkit.org/show_bug.cgi?id=123978\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-55b670e25a-1477748336657.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. @ibas87 Great; thanks for the update\n. Possible solutions:\n(1) When a modifier key is down (e.g. shift), a node can't be dragged if box selection is enabled.  Instead, box selection starts.\n(2) When a modifier key is down (e.g. shift), a compound node can't be dragged if box selection is enabled.  Instead, box selection starts.\nI would lean towards (1), because it's more consistent.  What do you think?\n. (1) implemented on unstable\n. Closing since it's implemented; re-open if need be\n. There are a couple of approaches I see:\n(1) Select a parent only if the box encloses it.\n(2) Select a parent if there's any overlap with the box, unless the box is contained by the parent.\nCase (1) avoids selection of parents who overlap each other for the case you mentioned, whereas (2) does not.  Case (1) makes selecting children by box generally easier than (2).  However, (1) is not consistent with how box selection works for non-compound nodes.  \nWhat do you think?. I just tested it and it's working in the 3.1 release.  You're probably using an older release. It activates the compound during the gesture, which is a bit distracting and could be removed, but it doesn't select the parent.. Force-directed / physics simulation layouts generally need unique initial positions to work properly, or you get invalid forces (0 distance) and all the nodes don't move.  You need to either specify nodes with initial positions or tell the layout to set some for you with randomize: true: http://jsbin.com/pekotesuno/2/edit?js,output\nSame for your second case: http://jsbin.com/gukeqiyuqe/1/edit?js,output\n. @aindlq 2.7.7 incorrectly had randomize: true as the default option.\n. You've provided Cose initial positions from the prior layout\n. See also https://github.com/cytoscape/cytoscape.js/issues/1520 which should automatically mitigate this issue for CoSE\n. It's probably better if you just check for existence on an instance or the prototype, i.e.\njs\nlet hasFoo = someEle.foo != null;\nlet hasFooOnPrototype = Object.getPrototypeOf( someEle ).foo != null;\n. Thanks for the information!  I made a slightly different change with direct calls only -- which should be faster.. https://github.com/cytoscape/cytoscape.js/issues/1609. @dpekkle @min-metal Does this happen for edges or just nodes?  It's probably an issue in the layer or element texture caches.\nYou can invalidate those caches (as a temporary workaround hack using private APIs) by cy.renderer().data.lyrTxrCache.invalidateElements( elesToClean ) and cy.renderer().data. eleTxrCache.invalidateElement( eleToClean ).\nI'll look into this, but I need a relatively minimal example that reproduces it.  Can you reproduce the issue on one of the demos on js.cytoscape.org with a few lines of code to modify the graph similar to how you are in your apps (adding/removing elements etc.)?\n. Also is Firefox also affected, or is this a Blink/Webkit-only issue?\n. @dpekkle Does this affect normal graphs or only compound graphs?\n. It looks like the issue is this:\n\nThe layer cache fills in elements in a layer even if the element is outside the bounds of the layer. This happens only when the default number of layers is set to one.  The offending line looks like it assumed that there would be layer expanding and merging, which didn't make it into the current version of the cache.  Merging is logged in a separate issue now: https://github.com/cytoscape/cytoscape.js/issues/1604 \n\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-7f970a8cf1-1479143597633.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks\n. Great; closing\n. @XiaNi Looks good.  Thanks!\n. Strictly speaking, no additional APIs are necessary for this usecase.\nYou would just do something like this:\n``` js\nlet noop = () => {};\nlet kAwayNodes = cy.collection();\nlet tuningCriteria = el => el.isEdge() || ( el.data('foo') === someValue && el.data('bar') == someOtherValue );\nlet add = el => kAwayNodes = kAwayNodes.union( el );\nlet visit = ( i, depth, v, e, u ) => depth > k ? add( u ) : noop();\ncy.elements().stdFilter( tuningCriteria ).bfs({ visit, / ... / });\n```\n. It just keeps a set of nodes that's joined on each visit.  The tuning criteria happens beforehand so you run bfs only on the elements of interest (class/data/etc), rather than on the entire graph.\n. See this 3.1 ticket\nz-compound-depth and z-index-compare to control (normally) implicit z-ordering rules #1600\n. You can't do equality checks on collections, because collections are immutable and APIs give you a new one each call.  You can use .same().\nYou should use something like has = ( a, b ) => a.intersection( b ).nonempty()\nThere could be an alias in the API, though.  Maybe with a name like .has() or .contains()\n. If you want to find all paths, you're basically just doing a BFS and that algorithm is already built-in.\nIf you want to get a string like that just do eles.map( ele => ele.id() ).join('->')\n. BFS returns one path by definition.  But it traverses over each reachable node at least once.  You can use this information as you traverse and built up your own lists.  You would use my snippet on each path that you build up.\nOr you just have to run Dijkstra N times.. Mid arrows are misaligned when loop-sweep and loop-direction are specified. The loop-direction should start at 12 o'clock and work clockwise.  It currently goes clockwise, but it starts at 3 o'clock.. This looks like a good start, but other things will be broken with this change.\nSome notes:\n(1) If a default arrow-scale value is defined, you don't need || 1.  And having || 1 effectively means the default value is duplicated.\n(2) This change only affects rendering.  You won't be able to click arrows, for example.  Instead, the signature of BaseRenderer.prototype.getArrowWidth() should be changed to .getArrowWidth( edgeWidth, scale ) and every call to .getArrowWidth() in the project needs to be updated to use the two parameters.\n. Normally, new features go on the unstable branch.  Given this works around a browser's bug, let's just put this in 2.7.12. Thanks!. Please see https://github.com/cytoscape/cytoscape.js/issues/1798. Works fine for me.  Maybe you forgot to specify the curve style. Defining a style property : https://github.com/cytoscape/cytoscape.js/blob/unstable/src/style/properties.js\nSpecifying compound size ele.updateCompoundBounds():\nhttps://github.com/cytoscape/cytoscape.js/blob/unstable/src/style/properties.js. Have you tried a repeated background image with the lines?. Thanks for the pull request.  All pull requests for new features must go in the unstable branch, from a fork on the unstable branch.  We can't use a PR like that one that you've made.  We had a team member review the code in your attached files, but it would take us too much time to try to merge that code into the existing concentric and bfs layouts.\nYou can read more information about how to make a PR here: https://help.github.com/articles/creating-a-pull-request/. '0' is not falsey, and the check definitely needs to include null and undefined.  You should specify the proper type for the property -- label is a string, not an integer.\nProbably all string properties should have .value coerced to a string (as .strValue is).  The checks need to be kept simple for rendering functions to avoid error (like missing null) and to keep performance fast (otherwise we could just use nice functions like is.emptyString() -- but that's too expensive since it uses typeof checks etc.).. That change should make it so any value that has .toString() is converted to a string.  That should work for numbers (e.g. (0).toString() === '0') or complex objects:\n```js\nlet hello = {\n  toString: function(){ return 'hello world'; }\n};\ncy.nodes.style('label', hello);\n```. Resolved by #1620. No, an overlay is part of an element.\nYou have control over appearance with the stylesheet.  Do something like\nnode:active node {\n  // my style here; maybe darken the children\n}. Looks like you found a bug https://github.com/cytoscape/cytoscape.js/issues/1628. Great; thanks!. @lszanto\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-32364929c8-1480370383635.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks. Ref : #1614. I think it's supposed to work with either .classes() or .classes('').  Must be a bug. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-53545212c4-1481058547047.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks. Great; thanks. @chrissofvista You haven't linked to any repo.  Please update with a working link. Good catch; thanks!. Addressed by https://github.com/cytoscape/cytoscape.js/issues/1926. Please refer to https://github.com/cytoscape/cytoscape.js/issues/1468\nThe philosophy is the same, regardless of the framework used, because they all use components.. I just tested this, and it's working for me.\nMake sure you've sized your container properly in your CSS.  It's probably overflowing to the right.. There's no way to tell without inspecting it live.  Please make a small jsbin that reproduces your issue. You've explicitly specified an animated layout with fitting.  Obviously the fitting would change the viewport state.\nThe subtle bit is that you've effectively created a race condition with the layout and any other viewport ops around the same time.\nIf there aren't any elements specified at init, there's no reason to specify an init layout at all -- especially an animated one.. Thanks.  That would allow for an easier transition when it's supported natively in the browsers. However, it seems like the ResizeObserver API is just a draft at this point and could change in future.  We're already doing what the resize-observer-polyfill does under the hood with MutationObservers etc.  So it probably doesn't make sense to take action on this now, but the polyfill could be useful when the ResizeObserver API is finalised.. @d2fong Would you please add the feature to the docs (.md files)  in /documentation?. Normally, it's best if the docs go in the same PR as the code.  It's fine to just commit the docs update directly to unstable this time.  (You just need to update the md; you don't need to build the docs or anything.). Yes, I think that's all. From the docs:\n\nNote that the trailing semicolons for each property are mandatory. Parsing will certainly fail without them.\n\nThe stylesheets are CSS-like, but they're not CSS proper.  Lots of properties that Cytoscape introduces don't exist in CSS, for instance.  Selector specificity is completely ignored.. There is no documentation on the order of events.  Similarly, the order of events is not guaranteed, except for obvious cases like mousedown, mouseup => click.\nIf you want to get the change of state of selection, you should listen to select events.. You need the CORS header set on the server.  If you use the http-server package for local development, you can just use the --cors option.. There are two approaches for per-element layout specification:\n(1) Run a layout only on a subset of elements.\njs\ncy.$('.foo').layout( /* ... */ );\n(2) Specify functions that return per-element values for layout options.\njs\ncy.layout({\n  name: 'bar',\n  someOption: function( ele ){ return ele.hasClass('foo') ? 1 : 0; }\n});. Would you please provide an example graph that reproduces this behaviour?\nIt's probably enough to just paste in your data and layout into one of the demos on JSBin: http://js.cytoscape.org/#demos. Yes, it happens only when text-wrap: wrap for source and target labels.  I've pushed a fix.  It's a slight change to one line.\nTry the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-7b5148865c-1483550792165.zip\nLet me know if it works for you or if you have any issues with it.  \nThanks. Can you describe this in detail?. You can animate the nodes going to the opposite positions: http://js.cytoscape.org/#ele.animation. JSBin is within a different iframe, and so it's in a different window.. The event doesn't look like it's meant to be used like that.  It's fired only when someone calls cy.resize() explicitly.. I just confirmed that cy.json() and ele.json() are serialisable.  There are no circular references when I tried.\nYou may have circular references in what you're putting in .data().  You're only allowed to put plain JSON data in .data(), as the docs say.  Complex objects and other temp data goes in .scratch().  Please confirm your data is correct, and provide an example graph JSON file that illustrates the bug.. The docs are pretty long.  It should be mentioned in more sections in the docs if it's not clear: https://github.com/cytoscape/cytoscape.js/issues/1670. > [visible = 'true']\nThat would be using coercion under the hood, as only strings and numbers are supported for values in comparisons.  Better to use the truthy selectors.. I noticed a couple things after merging.\n(1) The property can allow negative numbers.  I've pushed a commit with a change that adds a positive number type.  You can see how you specify new types as a series of flags basically.  New flags (like strictMin) can be added in the style property parser.  If you need to add new properties in future, you can use this an example.\n(2) The gap for triangle-backcurve seems off for arrow-scale: 0.75 on the debug page.\n(3) The gap is the same for lots of arrow types.  Could they be refactored out to a separate function, like halfGap() because it's half the default, and just referenced by all those shape definitions? \nThanks. OK, re. (2) it probably needs some float value between the two.  Probably easiest way is to just experiment with different values, doing a binary search between 1 and 2. Great.  The bb can be expensive to calculate, though.  So, it would be better to pass in the bb to the function rather than the nodes.  That allows the second case to receive the bb passed in on each call rather than recalculating on each call.. Merged; thanks!. You shouldn't be running Traceur or Babel on anything in your  dependencies for package.json.  You should exclude the node_modules folder.\nSee http://stackoverflow.com/questions/31822593/import-a-module-from-node-modules-with-babel-but-failed\nSee https://github.com/cytoscape/cytosnap for an example package that runs Cytoscape in Phantom for an example.. No, and it's not a good idea to vary style based on zoom because of performance.  Having a continuous mapping to zoom would kill performance.\nThe only valid mapping to zoom would be discrete breakpoints like CSS media queries.  For those, you can just set classes on elements based on the zoom level, e.g. \n```js\ncy.on('zoom', function(){\n  let z = cy.zoom();\nif( z > 2 ){\n    cy.elements().removeClass('z-lt-2').addClass('z-gt-2');\n  } else {\n    cy.elements().removeClass('z-gt-2').addClass('z-lt-2');\n  }\n});\n``. You should probably also usecy.batch()for style changes, and uselodash.debounce()on the callback for perf. A transition doesn't make sense at all unless it's on a numeric property.  Colours are also numeric properties (i.e. [r, b, g]).. It's the same in CSS: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties. @buffpojken OK, please do re-open if you can find a test case. Merged in #1682 to unstable. No,text-events` is meant only to extend the hit-box area of the element.  There is no differentiation.\nWe already have lots of tickets planned for the next few releases, so features like this one would only get added in the short-term via community pull requests.\nI assign the issue only because the Github notifications queue clears out quickly, and otherwise questions like these would be lost and unanswered.. Ref https://github.com/cytoscape/cytoscape.js-qtip/issues/21. You can create an SVG object and find the attributes with its dimensions.  If the SVG doesn't have those attributes defined, then I don't think you can really get the dimensions reliably.  You can try adding them to the DOM and querying the size, but the default size is just what's set in the attributes as far as I know -- so SVGs with undefined attributes won't have a reliable size.\nReally, you're best off just setting node sizes manually in the stylesheet and setting the background width/height appropriately in your stylesheet as well.. http://stackoverflow.com/questions/231679/get-size-of-svg-graphics-by-javascript#1577890\nBasically, load the svg string as an object and get the attribute or parse/grep the svg as a string and look for the attribute.. Duplicate of https://github.com/cytoscape/cytoscape.js/issues/1690. You can set rendered position in the json on add or you can change to it with the api function http://js.cytoscape.org/#node.renderedPosition. The pan is always rendered co-ordinates: http://js.cytoscape.org/#cy.pan\nI think you can just animate the pan to the rendered position of the node, plus or minus whatever offset you'd like.\nIt might be easier to use the panBy prop for this, since that's relative (and panning and rendered co-ordinates are relative).. If you promise chain the animations and do the zooming one first, then it's exactly the same.\nIt's only a bit more complicated if you do both at once.  You'd just need to scale the panBy by z2/z1, I think. The ordering for zoom and pan were chosen to make panning always rendered co-ords and to make it so things tend to cancel out to simplify the final version of a formula, like the one you posted.\nIn this case, the multiply by zoom is enough to effectively make the bb in rendered units.  It's also a bit simpler, because it's centring.\nTo have an animation preset for this (or an immediate function), you'd need to specify both a model position and a rendered position --- i.e. place this model position at this rendered position.  Something like cy.panTo({ position: p1, renderedPosition: p2 }).. I can't reproduce this on the debug page or the label demo.  I think you may have something else going wrong in your app, like not guaranteeing that your fonts are loaded before you init Cytoscape.  Is Open Sans Bold installed on your system or is it an external WOFF?. I initially thought this may have been a bug, but it seems #1331 is wrong.  I was too hasty in granting the request in the ticket for #1331.  It's my mistake, and I'll try to be more careful about accepting community suggestions in future.  Sorry for the confusion.\nIf you tapstart on a node, you've grabbed it.  It's then necessary to have a free event on tapend to complete the gesture --- even if no drag happens.  This is necessary behaviour for several important usecases, and it's necessary for existing performance enhancements in 2.7 and future enhancements in 3.x.\nThis was fixed in 2.7, so 2.7 behaves correctly.  If you want to know when something is dragged, listen to the drag event -- not grab.\nIt's also of note that you generally have no guarantee of the order of events of unrelated gestures:\nE.g. grab => drag => free is guaranteed\nE.g. tapstart => tapend => tap is guaranteed\nE.g. tap => free and free => tap are both valid and which one happens is unspecified in a grab/drag/free gesture.. OK, if you run into trouble for your usecase let me know.  We can add new events if needed, which is less risky than changing existing ones.. Not a bug.  It's intended behaviour.\nThe main usecase for borders is to indicate selection state.  If the border shifts the label, then the label shifts when a node is selected.  The dev can use text margin properties to make the label not overlap the border without things shifting on selection state.. You are only to use pure functions.  There's no way for Cytoscape to know when you change an outside variable.  Change the stylesheet or use a class etc.. Whoops...  This needs to go on the unstable branch.. Unless it's really a code fix or a docs fix (i.e. the docs are incorrect), it goes on unstable.  It's better practice, and it avoids having to cherry-pick the change to all the other branches.\nThere are a few minor exceptions, but I prefer to keep the git cherry-picking to a minimum.. Thanks for your response!\n\nIt appears you are binding pointer events and touch events. ie; https://github.com/cytoscape/cytoscape.js/blob/2816df20bb7410a6b9450ab689c7a03674046768/src/extensions/renderer/base/load-listeners.js#L1954\nand you are preventDefaulting the pointer events so you won't get touch events. Could this be that your pointer event code isn't setting touch-action correctly and that this is in fact broken in Microsoft Windows Phone as well?\n\nThat's a good guess, but pointer events don't get registered, unless the browser has no touch event support, like the Surface or Windows phone.  So, pointer events do not affect this lib on Chrome.  We've definitely confirmed that the Surface works on Cytoscape 2.7.\n\nAlso you appear to be using fastclick in the documentation directory. Avoiding fastclick has been suggested for some time now. See ftlabs/fastclick#498\n\nThat's a good call.  Originally, the docs had some more sophisticated widgets on them and it was really nice to have them working quickly on older Android tablets or older iPads, for which Fastclick is still necessary.  It could be removed from the docs pages now, though, considering mostly devs read it and the lag would only affect the run links now. https://github.com/cytoscape/cytoscape.js/issues/1703\nHowever, Fastclick is a bit of a red herring for the topic at hand.  It's not a dependency, and it doesn't affect Cytoscape.  Cytoscape gets negatively affected by making passive: true default, Fastclick or no.\nThe main concern regarding Cytoscape is that the lib is used in many places, in both academia and commercial organisations, not all of which can easily update their code.  Having support for passive events in Chrome is great but unfortunately, changing the default behaviour breaks our lib and many apps that depend on it.. A couple of things:\n(1) It would be good to remove the reference to 2.7 on the demo, as it will carry forward to future versions\n(2) There needs to be a fetch() polyfill for older browsers.  You can just include a ref to a copy from a CDN: https://cdnjs.com/libraries/fetch. > I have been doing to more testing and I found that fetch doesn't work on Chrome and Chrome derivative browsers when opening the index.html file manually as url scheme \"file\" is not supported. It works fine when opening the file through a static file server as \"http\" is being used. It also works fine in firefox. Do you see this as a problem?\nNo, it's always running behind an HTTP server.  You should use http-server from npm if you want to use the Cyjs debug page or view the docs page etc.. Great.  Could we use a simpler dataset like the one here? http://marvl.infotech.monash.edu/webcola/examples/gridifiedSmallGroups.html. Could we use the same data from http://marvl.infotech.monash.edu/webcola/examples/gridifiedSmallGroups.html ? It would be good for it to be comparable to the Cola example. OK, great.  Worst case, it's not many nodes. This is a general JS/HTML code help question.  It's not specific to Cytoscape.  You should ask your question on Stack Overflow.. It's not clear to me what you mean.\nA node can have a label, and its position can be configured.  An edge can have three labels, one for the middle and one for each of source and target.\nSee the docs for info on the stylesheet and the labels demo: js.cytoscape.org. If you want to customise how a node is drawn beyond the supported features, you can use your own SVG as a background image.  You can put whatever you want in the SVG and Cytoscape make sure the SVG is rendered performantly.. @keiono Kei, this is a ongoing --- and often brought up --- issue with your plugin for Cy3.  The following changes should be made in order for your plugin to properly support Cyjs:\n(1) The file you are exporting is JSON.  Use .json suffix for the exported file.  It's confusing, especially to novices.  And you break the browser's ability to determine the proper file type by using an unclear suffix.\n(2) The JSON file exported from Cy3 should contain only the JSON expected by Cyjs.  The JSON file should conform exactly to the standard JSON format explained in the docs --- no more, no less, and no embedding of the proper JSON as a subdocument of the exported JSON file.\nA complete example, including HTTP request, is as follows:\n```js\nlet cy;\n// just a standard http get request\nfetch('./dir/to/my/exported-graph.json')\n  .then( response => response.json() )\n  .then( exportedJson => {\n    cy = cytoscape( exportedJson ); // and use the json verbatim\n  } )\n;\n```\nIf a dev can't do a simple cy = cytoscape( exportedJson ); after doing an HTTP request to get the JSON file, then the export plugin isn't working as devs/users would expect.  If a user needs to do any transformation of the JSON file whatsoever, then I consider the plugin to be broken.  \nIt should be as simple as using fetch() or jQuery.ajax() to load the file --- no user instruction needed as instructions on making HTTP requests are already well documented by places like MDN and jQuery, and tutorials for those APIs are numerous.\n(3) The JSON file should not contain any extra fields or custom fields outside of element data or scratch.  If you have other extra data you want to export, perhaps associated with a Cy3 session, then use a different plugin or use a different feature to expose that data.  Cyjs has no --- and should have no --- concept of session, so that data is extraneous for exporting a single graph.\nWould you please provide a code snippet for @Rociocc93 so he can transform the exported data from the plugin into the proper format?. I think you've misunderstood the meaning of a layout.  A layout is just a mapping of node to position.  It may be continuous, applying positions over time.  It may alternatively be discrete, applying just a final position.  A layout fires layoutstop after setting the final positions.  \nA layout has nothing to do with background images, and layoutstop is not analogous to the load event for window.\nIf you want to know whether a node is still loading its background image, you should use the :backgrounding state selector in your stylesheet or with ele.is() etc.. It's possible to have an event per-element, such as background, corresponding to the change in state from :backgrounding to :nonbackgrounding for a non-null image end state. \nHowever, it's not really useful at init:\n(1) You can't listen to events during the init call --- only after.  If the all images are cached, for example, you would be too late to listen.\n(2) Events bubble from the elements to the core, so you couldn't expect the event firing on cy to mean that all images are loaded.  Further, an event with a different name for all element images loaded doesn't make sense:  The set of elements in the graph is dynamic.  Add or remove a node and suddenly the event means something else or it loses meaning altogether.\nIf an event is added, your workflow would be the same --- except you wouldn't have to use polling to find when the background state changes, e.g.\n```js\ncy.add( elesJson );\nlet bged = cy.nodes().map( n => n.is(':nonbackgrounding') ? Promise.resolve() : n.pon('backgrounded') );\nlet layouted = cy.pon('layoutstop');\ncy.makeLayout( layoutOpts ).run();\nlet exportReady = Promise.all([ layouted, ...bged ]);\n``. Great, would you please make the PR on the 3.x branch instead?. There's no special state selector (like:nonparent`).  There could be. \nFor now, you can just specify with the order in your stylesheet.\n```\nnode {\n  / non-parents & parents /\n}\nnode:parent {\n  / overrides for parents /\n}\n```. You can't use unstable, as it doesn't have any 3.0 breaking API changes.  The 3.x branch needs to be merged onto master and unstable when 3.0 is released.\nExtensions that already work OK on 3.0 can be released as a new minor release with the dependency updated to something like cytoscape: '^2.4 | ^3.0'.  Small changes that can easily support both versions can do the same (e.g. event.target || event.cyTarget).\nWhere the extension could work on 3.0 only by breaking support for 2.x, we'll need to make the changes in a cytoscape3 branch.  The branch can be merged in for each of those extensions after 3.0 is officially released.\nProbably most extensions will need little or no changes to work with 3.0. @mj3cheun We also should document the cytoscape.use( require('some-extension') ) style in the extensions that are updated to work with 3.0. @mj3cheun OK, added some comments.  Looks pretty good so far. Would you please post an example graph JSON (esp. elements & style)?. @paul-shannon Any updates on the json?. I think this should be addressed by the issues fixed in 3.2.7: https://github.com/cytoscape/cytoscape.js/milestone/107?closed=1. You can checkout a tag for that version and view the docs, or you can upgrade to 2.7.. Projects generally only do that for versions that are still supported (i.e. it receives patches).  Only the latest 2.x is supported, and we don't want to give the wrong impression by publishing out-of-date documentation.\nThe project follows semver, so you can safely upgrade to 2.7 if you want.  You can alteranatively use an old version if you want, but you won't be able to report bugs and you'll have to checkout the docs yourself.. You can override the :active state in your stylesheet. Zero padding or zero opacity. You could alternatively cy.style().clear() before you set your own stylesheet.  That will use no default stylesheet at all, so some properties (like for core) will be completely missing.  If you go that route, you're on your own w.r.t. missing style property errors --- but you'll have complete control over the entire stylesheet.. Firefox is faster at rendering than Chrome at the moment.\nModifying the lib won't help any more than .clear().. Can't reproduce on Chrome 56 or Firefox 51. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-30ea9fc3f4-1488572129569.zip\nOr if you're using npm+browserify or npm+webpack, temporarily replace \"cytoscape\": \"x.y.z\" in package.json with \"cytoscape\": \"https://github.com/cytoscape/cytoscape.js.git\" to use the latest code from master.\nLet me know if it works for you or if you have any issues with it.  \nThanks. Duplicate of 3.1 issue https://github.com/cytoscape/cytoscape.js/issues/1626. You can already do both.  If you don't disable anything, you can box select when shift or control is down.\nGenerally, you either make the app modal w.r.t. box selection, or you just leave it as it is by default.  Most apps --- desktop or web --- only allow box selection when shift or control is down anyway.. It wouldn't be much of a benefit for extensions like that, because it would (at least) double the rendering cost.  It might also make all the rendering caches dirty, dropping general performance as well.\nWhatever stylesheet you have applied affects the export, so you can modify the style before export to get the effect you've described.. You can alternatively use a second instance for exporting.  Just grab the eles.jsons() from the main instance.  That way, it's completely isolated and you can use whatever styling you like,. @PeterTSmith Great!  The PR needs to go on the unstable branch rather than master though. Just as in the other issue, you need to insure your fonts are loaded before Cytoscape is initialised.. You should probably be using something like this to detect if fonts are loaded (if you're doing things dynamically): \n\nhttps://github.com/typekit/webfontloader\nhttps://github.com/bramstein/fontfaceobserver\nhttps://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload\n\nIt's not really in the scope of Cytoscape to be checking for fonts.  It's up to the dev to init the lib at the proper time for his app.\nAs you suggested, a note could be added to the docs to make this case clearer.. If the empty string is the only falsey value it can take on, you can use [!bar] for now.. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-5e66f326ac-1488569187525.zip\nOr if you're using npm, temporarily replace \"cytoscape\": \"x.y.z\" in package.json with \"cytoscape\": \"https://github.com/cytoscape/cytoscape.js.git\" to use the latest code from master.\nLet me know if it works for you or if you have any issues with it.  \nThanks. If you have an issue with an extension, please file a bug in that extension's repo.. https://github.com/cytoscape/cytoscape.js-dagre/issues/22. If Uglify can't handle that block, that's technically a bug in Uglify.  You can't assume a do ... while loop is dead code even if while( false ), because there's always the first iteration.\nI checked the code.  It's valid, albeit unconventional.  I'll gladly revise the layout, but you ought to file a bug with Uglify as well.\nFor now, you'll have to set dead_code: false.. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-09af5035ff-1488570335428.zip\nOr if you're using npm+browserify or npm+webpack, temporarily replace \"cytoscape\": \"x.y.z\" in package.json with \"cytoscape\": \"https://github.com/cytoscape/cytoscape.js.git\" to use the latest code from master.\nLet me know if it works for you or if you have any issues with it.  \nThanks. Are you a dev or a user for Visallo?  If you're a user, it sounds like you should be filing a bug report in that tool.. @mj3cheun This would be a great issue to do while I'm reviewing your extensions changes.  Dylan needs it for his SBGN lib. See\nhttp://stackoverflow.com/questions/40307570/a-hidden-cytoscape-graph-cannot-be-displayed-later\nhttp://js.cytoscape.org/#cy.resize. If you want style to be persistent, then use the stylesheet.  The docs say that .move() makes a new element, so only data proper would be in the new element: http://js.cytoscape.org/#eles.move\nYou should use ele.style() only for very specific edge cases, just as it's bad practice to put everything in the style attribute in HTML.. If your selectors can be broad and the cases are relatively few (e.g. the values vary by class, data values, data ranges), then it's best to use the stylesheet and hard-code the styles for each case there.\nIf the values vary for most (or every) element, it's usually best to use a mapper, storing the value in ele.data() --- which is the model proper and so is serialised by ele.json().  . I'm getting errors on the debug page and it seems that the background-image property isn't getting the proper result for its parsed object representation.\nI made commit ad1337dc23bab7013882ac2a7c68b785d6a2a97e to give you an example of how the property definition should work.  If you need multiple support on a type but the type could potentially be used singly elsewhere, then a plural type with a similar spec should be defined.  See url and urls as an example.  (It should also simplify your url[][] code to url[].)\nYou'll have to git rebase ad1337dc23bab7013882ac2a7c68b785d6a2a97e or merge to put the change in your fork.\nMost of the background image properties also need to have multiple variants or be made multiple themselves:\njs\n    // node background images\n    { name: 'background-image', type: t.url }, // urls\n    { name: 'background-image-crossorigin', type: t.bgCrossOrigin }, // chg to mult\n    { name: 'background-image-opacity', type: t.zeroOneNumber }, // zeroOneNumbers\n    { name: 'background-position-x', type: t.bgPos }, // chg to mult\n    { name: 'background-position-y', type: t.bgPos },// chg to mult\n    { name: 'background-repeat', type: t.bgRepeat }, // chg to mult\n    { name: 'background-fit', type: t.bgFit }, // chg to mult\n    { name: 'background-clip', type: t.bgClip }, // this makes sense as once per node\n    { name: 'background-width', type: t.bgWH }, // chg to mult\n    { name: 'background-height', type: t.bgWH }, // chg to mult\nBasically, each image needs to be defined independently for the most part.\nDoes that make sense?. The javafx webview is not an officially supported environment.  Many basic APIs are not supported even in the same version of Webkit.  It's also years behind the latest release of Webkit.  There isn't even a proper built-in debugger.\nYou could try to work around the limitations of javafx and make a pull request for it if you like.  I don't have time to play around with it.\nIf you must use Java, you may want to look into CEF or JxBrowser instead.  \nIf you can, it would be better to build a webapp proper.  You could expose your Java code as a webservice.  If you really want a native app container it would be better to use Electron, and then you don't need to use Java at all.. Part of the problem is your use of a delegate selector.  A delegate selector matches for an object only if the target of the event matches the selector.  It does not match bubbled events, like from child up to parent.\nA compound parent doesn't get extra position events for updateCompoundBounds(), probably because it would get one from its child anyway and so the event would be mostly redundant.\nSee this revised demo: http://jsbin.com/sewizokeli/edit?js,console,output\nI guess updateCompoundBounds() could emit extra position events based on a diff each call.  But then you'll have to handle multiple events in quick succession sometimes.  Maybe that would make sense to do anyway, since the position could change from a non-position (e.g. style) event on the children.  Either way, you need to revise your approach.. There's also internal bounds events that are emitted whenever compound bounds are altered.  Perhaps that could be made public and documented.. If there are extra position events, you need to change your example code to ignore some position events.  There are no extra events in the code as of today.\nIf not, then you need to change your example code to also listen to bounds.  The bounds events already exist, but they are currently undocumented.\nThe bounds event is probably safer in most cases, because compounds can change even if their position doesn't.  Consider a symmetric change to the children that increases the compound width but makes no change to position.. Do you have a minimal code example that reproduces the issue?\nIt works fine when I try it:\nStylesheet:\njs\n{\n  selector: 'node',\n  style: {\n    'shadow-blur': 20,\n    'shadow-color': 'red',\n    'shadow-offset-x': 10,\n    'shadow-offset-y': 10,\n    'shadow-opacity': 1\n  }\n}\nGet image in console:\njs\nwindow.open( cy.png() );. The canvas doesn't support blurring properly.  It's not possible to use workaround to fix everything.  The original feature was added in a pull request, and I should have been more careful about accepting it.\nIf having consistent output is important to you, you shouldn't use shadows.\nShadows won't be supported in 3.0.  You can follow the ghost style property feature, which is similar, in the following ticket https://github.com/cytoscape/cytoscape.js/issues/1197. I appreciate your detailed post.  However, some of your assumptions are false.\nThe different specifications of dimensions are indeed necessary for supporting high density displays.  1px in CSS does not mean one pixel.  It means one css-pixel.  They happen to be 1:1 for old displays (96ppi).  \nYou're using a prefixed (i.e. unfinished / experimental) CSS property (-moz-transform) on a canvas which has its own built-in transform capability.  That's probably not going to work.  It might not even be intended to work based on the CSS spec and the browser vendor.  You'd have read the spec and/or contact Mozilla to find out.\nIf you're trying to do some kind of responsive CSS, you should be using relative units like em and changing the font size of some parent element like body with media selectors.\nSee \n\nhttps://en.wikipedia.org/wiki/Pixel_density\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/transform\nhttp://stackoverflow.com/questions/27382331/how-a-css-pixel-size-is-calculated. > It might be possible to use offsetWidth and offsetHeight, which gives the unscaled sizes of an element (e.g. see jsfiddle example). \n\nUnfortunately, that's not a standard property (yet anyway), and it looks like several browsers don't support it: https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth\nThe spec says this function would ignore transforms, so I'm not sure how useful it would be: https://drafts.csswg.org/cssom-view/#dom-htmlelement-offsetwidth\nWe're using getBoundingClientRect(), which is well supported for width/height: https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\nWhile generally we'd like to support as many usecases out of the box as possible, playing with viewport css generally isn't something that a visualisation library allows you to do.\nIt's not as simple as width = scaleTransformX * domEleWidth.  You'd want to use domEleWidth for cases where you'd want to scale up --- otherwise you'd get unexpected pixelation.  It's not as simple as handling a scale, either.  That may be enough for your usecase, but other devs would want other property support, like padding or rotation.  That would greatly increase the complexity of the renderer and it would introduce a lot of potential for bugs.  We'd also be continuously chasing after the latest css spec, having to add support for each new property.\nCytoscape already has built-in functionality for scaling the viewport:  Just change the zoom level.  If you want a smaller viewport extent as well, then you can change the width/height on the container.. @dwitvliet  \n\nI tried both offsetWidth and offsetHeight in the most recent versions of GC, FF, IE, Safari, Opera. All of them seem to work, but slightly older versions might not.\n\nThat could be problematic.  The lib supports pretty old browsers (basic subset of ES5 and canvas).  That's something like Firefox 4, IE9, etc.  A lot of people care about that feature, so it would be a shame to lose it.\n\nI think that's point; you'll get the width and height before any transforms are applied, which means it would work for all 2D transforms, not just scaling.\n\nOK, I think I see what you mean.  We'd need both the effective size and the scaled size, and the renderer would have to take into account the scaled size in the co-ordinate projections for gesture/event support.\n\nThe problem for us is that we want to animate the transition. When doing multiple independent animations on the same elements at the same time (cytoscape zoom and container size), the resulting animation is laggy and almost impossible to ease. Additionally, the container has to be re-positioned if the origin isn't top-left. All of this can be done perfectly in one css scale animation. That's what we were doing in Cytoscape.js v2, but it does not work in v3 because of the resizing issue. It's preventing us from updating to the newest version.\n\nI suppose if you animate the viz and the dom element at the same time, you'll be invalidating the animation texture and potentially invalidating the document flow.  Either could kill the performance.\nMaybe the approach I mentioned could work using only getBoundingClientRect() and clientWidth/clientHeight.  That wouldn't break compatibility, but even if it works it would be a risky change.  Anything that changes the projection/co-ords calculations in the renderer can potentially cause a lot of bugs.  So if this is possible, the change would probably have to go in the unstable branch for the next version (3.2).  It wouldn't be good for people who npm install the latest patch release to potentially get some weird projection bugs.\nI'll play around with this and get back to you Tuesday or Wednesday.. @dwitvliet 947b487 should do it, I think.  I tested it yesterday a bit, and it seemed OK.. @dwitvliet Good to hear.  I'll add this to the 3.2 milestone.  If there are issues with it, let me know here.\nSome notes:\nIt should only correct itself after an animation is complete; it's too expensive to do each frame.  If you try to interact during the animation, it won't work.  For most cases, this is probably fine.\nIt only works on the container and its ancestors in the dom --- again, for performance reasons.  So if you animate some other element that somehow changes the container (maybe shifts it), then it won't work either.. Thanks.  Here's some feedback:\n\nAny changes for a future release (that's not a bug fix, minor version x.y.z) goes on the unstable branch.\nOnly md and json files should be changed to update the docs.  The html is autogenerated from those files.. Great; thanks. Great; thanks. Ref 7565b51. @josephst Would you please look into the link issue on your release post?. @josephst Since you have experience working with the function, it would be great if you would document each of the options supported, what they do in each case, etc.. Thanks\n\nYes, we should include eles. Great; thanks!. No, it's not possible.  If you want that kind of customisation, you'll have to generate the pie charts yourself as one of the background images: https://github.com/cytoscape/cytoscape.js/issues/1747. (1) Your redefined style is probably invalid.\n(2) You can't define height here; use your stylesheet.\njs\nvar cy = cytoscape({\n    container: $('#my-element'),\n    height: 500px // wrong\n});. A simple calc() works for me: \njs\ndocument.getElementById('cytoscape').style.height = 'calc(400px + 100px)'\nI suspect your style is invalid (e.g. percent units don't mean anything unless the parent has properly defined style) or you have problems elsewhere.. Cytoscape.js has a viewport.  The viewport has a zoom level and a pan, which correspond to scale and translation transforms.  \nChanging the container dimensions just changes the viewport extent; it has no effect on the pan and zoom.  For example, resizing the window for a full-screen graph just extends the viewport (just as it would for a map, like Google Maps).\nYour question seemed to concern only the viewport extent.\nDoes that clarify things?. That sounds like just a particular case of the grid layout: two columns with custom node placement. Yes, Firefox and Chrome render text differently.  The results may be slightly different, and there's nothing I can really do about that.\nSee https://github.com/cytoscape/cytoscape.js/issues/1489.  There's links to issues in Firefox and Chrome issue trackers for this known issue.. That's not really necessary, since you can run a Cytoscape instance headlessly.  \nRendering is optional and it's implemented by a prepackaged extension.  It's just included in the  build for convenience.. Take a look at BRp.findNearestElements() in the unstable branch.  Anything new should be based on unstable.\nIt doesn't make sense for events (mouseover etc.) to happen on other elements on drag, as you're already over the dragged / active element.  \nBasically, you'd want some core function that calls findNearestElements( x, y, false, 0 ), like cy.elementsAt( position ).  You'd have to add the ability for isTouch to be isTouchOrThreshold -- accepting a number that overrides the default threshold.  I'm against supporting any other args than x and y in the core function, because the other functionality could be changed in future (and has changed in the past) re. performance.. If you want to use old 2.7 APIs, you'll have to stick with 2.7\nSee \n\nhttp://blog.js.cytoscape.org/2017/04/11/3.0.0-release/\nhttps://github.com/cytoscape/cytoscape.js/issues/1092. Implemented as output option in 3.1. If you want to use 3.x APIs, you have to use cytoscape@^3.0.0.  If you want to reference the 2.x docs, you can\n\ngit clone https://github.com/cytoscape/cytoscape.js.git\ncd cytoscape.js\ngit checkout 2.x\nThen open ./documentation.. You shouldn't be reading style properties in the stylesheet.  You've created a cyclic dependency.. Yes, just don't use a function in the stylesheet.\nTruncate the text before you init Cytoscape by using cut-off values based on the dimensions you later set for nodes in the stylesheet.\nBut you may be better off to just use the built-in features to improve the text styling.. That's been considered before.  It's too expensive to calculate text dimensions for that on each style/bounds update.  The main case where it's practical is if you use predetermined text and predetermined node sizes, and that means you'd have to do it all in the app level before add/init.\nIf the issue with the cyclic dependency in the stylesheet is resolved, then I'll close the issue.  If the problem is not resolved, then please re-open.. Example when used with a background image outside the node body:\n\n. It's not possible to have independent paddings.\nYour functions must be pure functions, based only on the node state.  Functions like that will always update when the node state updates.. Your programmatic changes should alter the node state in order to affect rendering.  If your functions aren't pure and you want to use function style values, you need to remove all references to global state from them or remove the functions from the stylesheet altogether.  \nIf you want to change values often, you should be using a direct mapper foo: data(bar) and calling node.data('bar', newVal) --- or node.data('bar', myCustomFunction(node)) if you want to keep your old function.  Functions are for things like creating logarithmic mappings --- not for referencing global state.  A side benefit of this .data() approach is that you effectively get caching as myCustomFunction() is called only when necessary rather than on every style update.. Great!  Thanks. Updated w/ checklist : https://github.com/cytoscape/cytoscape.js/issues/1626. Looks great, but it may be worth mentioning that it's best to use arrays for the multiple values.  At least the main background-image property could potentially have a space in one image (especially if it's an embedded svg data uri).  . Great\nThanks. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-c0ac08b4f5-1493053549208.zip\nOr if you're using npm, temporarily replace \"cytoscape\": \"x.y.z\" in package.json with \"cytoscape\": \"https://github.com/cytoscape/cytoscape.js.git\" to use the latest code from master.\nLet me know if it works for you or if you have any issues with it.  \nThanks. Changing the built file doesn't do anything.  You need to edit the source md files to change the docs.. Thanks but changes for feature releases go in the unstable branch, as mentioned in contributing.md. Try the snapshot : http://js.cytoscape.org/download/cytoscape.js-snapshot-ff237735a0-1493050489388.zip\nOr if you're using npm, temporarily replace \"cytoscape\": \"x.y.z\" in package.json with \"cytoscape\": \"https://github.com/cytoscape/cytoscape.js.git\" to use the latest code from master.\nLet me know if it works for you or if you have any issues with it.  \nThanks. Use a layout: http://js.cytoscape.org/#layouts. As it stands, it's not possible to have separate paddings and it will probably not be added.  We tried it at one point, and it conflicts with several important features.\nFor your usecase, it doesn't sound like you really need separate paddings.  Have you tried the background positioning properties and label margin properties?. > I'm sure you (and others) already have considered a hybrid approach: using the canvas for edge rendering and superimpose it with a DOM layer for the node rendering. (I did that in my former application and it works very well, but it lacks parallel edges, and self-edges.) Are you aware of a Cytoscape plugin that goes for this hybrid approach?\nThat approach wouldn't work very well in the case of this lib.  Even if it did, it would be very slow as (iirc) there's no way to get a bitmap of the dom.\n\nI've evaluated several graph libraries, and Cytoscape seems to be the only one which supports both out-of-the-box, interactive parallel edges (multigraphs), and interactive self-edges. To me Cytoscape is very strong on edge rendering, but falls back when it comes to node rendering flexibility.\n\nYou can do all the rendering for nodes yourself if you want as an svg background image.  An svg is pretty well as customisable as a dom node and it's drawable for canvas (and cacheable as a bitmap).\nJust make the background shape transparent and choose the node shape that best approximates your node for hit tests etc.  \nYou can alternatively use multiple background images on the node shape.\nIn either case, you'll need to figure out dimensions for the node yourself --- probably based on the svg dimensions.\n@josephst It might be a good idea to have a tutorial on this topic, along with best practices --- e.g. cache the svg generation function.\n\nWould Cytoscape's render event be the basis for customizing the node rendering?\n\nNo, that's just to let you know when a new frame is drawn.. > Use a background SVG image so that scaling is not an issue. Chose a node shape that is similar to the background content so that hit tests for the node serves as a proxy for hitting the background SVG. Made the node entirely transparent to see background SVG. Cache the SVG-generation function (something like Lodash's memoize?) so that (re)rendering many identical nodes can reuse previously-calculated results.\nThis is the first case.  The second is where multiple images are used on a normal node shape to add markings, decorations, etc.\n\nThe one part of this I'm not clear on is how to generate this SVG on the fly. Would the recommended way be to use a tool such as snap.svg to create a new SVG element, cache it, call it for the various graph elements, convert the generated SVG to a string, convert XML string to URI, and pass the data URI to Cytoscape.js?\n\nYes, you need to create a data URI at the moment.  You could use the SVG API manually or any lib that you prefer.  Whatever makes it easiest to do and whatever makes the code easier to read.\nIn future we could autogenerate a URI if passed a <canvas>, <img>, or <svg> reference.  That would be a good PR for 3.2.  If you're interested in the PR, then you could mention this approach in your tutorial as an alternative for >=3.2.0 users.  \nInternally, we have to use an Image/<img>, so the <img> case is simple.  A <canvas> can be exported to a URI directly.  A <svg> needs to be done more manually.  Since you'd either have to have that code in the tutorial itself or the lib, maybe it makes sense to just put it in a PR to the lib and then elide the URI creation from the tutorial (or just link to where's it's done in the lib code so someone could do it manually if they like).. Your function should return { img, dims } and possibly be memoized for\nperformance.\n'background-image': node => fn( node ).img,\n'width': node => fn( node ).dims.w\n// etc\nOn Wed, Jun 21, 2017 at 7:02 PM, J\u00f6rg Richter notifications@github.com\nwrote:\n\nYou can do all the rendering for nodes yourself if you want as an svg\nbackground image. An svg is pretty well as customisable as a dom node and\nit's drawable for canvas (and cacheable as a bitmap).\nOK, very good.\nRendering the entire node as an SVG background image is the approach I'm\ntrying now.\nStill I want to achieve this node rendering:\n[image: node-with-icon]\nhttps://user-images.githubusercontent.com/120337/27409714-36e37f5c-56e3-11e7-80b0-792ac93193b9.png\n(Note the extra \"right padding\" to make room for the icon. The icon is\nmeant to be a fontawsome text character, with the color set\nprogrammatically.)\nIn either case, you'll need to figure out dimensions for the node yourself\n--- probably based on the svg dimensions.\nOK. But once I've figured out the node's dimensions how tell I Cytoscape\nabout it?\nWhat I have at the moment:\nstyle: {\n  'background-image': renderNode,\n  ...\n}\nThe function to render the node's background image:\nfunction renderNode (ele) {\n  var label     = ele.data('label')\n  var icon      = ele.data('icon')\n  var iconColor = ele.data('iconColor')\n  var width = 100    // TODO: calculate based on label, add padding\n  var height = 25    // TODO: calculate based on label\n  var svg = <svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g>\n      <rect x=\"0\" y=\"0\" width=\"${width}\" height=\"${height}\" fill=\"#d0e0f0\"></rect>\n      <text x=\"${width - 20}\" y=\"${height}\" fill=\"${iconColor}\">${icon}</text>\n    </g>\n  </svg>\n  return 'data:image/svg+xml;base64,' + btoa(svg)\n}\nHow can the render function tell Cytoscape the calculated node dimensions?\nCytoscape needs to know the node's bounding box for hit tests and border\ndrawing, right?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1802#issuecomment-310228895,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA8Xc_oCAChY1h_8R3NCeG2Y6CFKl9pTks5sGaDugaJpZM4NMkqI\n.\n. @winni2k It will work.\n\nJoseph has gone on to med school, so he won't be doing the tutorial for this.  I'm not sure when we'll be able to do it.  We've noted all of the important factors in the docs already. \n It's just not as step-by-step.  http://js.cytoscape.org/#style/background-image. > Earlier we to some extend modified the node data within the rendering functions, and also changed classes for the node in question. In later editions of cytoscape, this causes a racing condition.\nMapper functions should be pure functions w.r.t. element state.  Basically, read-only.. Unfortunately, that's not something that's possible to support.  It breaks several other major features.. Fixed. It should be solving back for time in order to take all of (t1, p1, t2, p2) into account.  It looks like only (p1, p2) were intended but that ignores (t1, t2) which can significantly alter the effect of the easing.\nIt should be working now.  Let me know if it's OK for you now.  Thanks. Some images won't have dimensions defined (like some svgs) but they can be used if an explicit background width and height are set.  I'm not sure whether the change you posted could be used as it stands if it causes issues with existing usecases.\nMaybe it would be better to handle the 404 at the load event itself. . If there's a 404 it should be picked up around the same code that listens to load: https://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/renderer/base/images.js\nI suspect a 404 would give an error event instead of load.. I suspect we may have to mark the cache/image object with a particular error flag to keep the checks precise.  I think the issue with your change is that you're referencing this in your handler.  You can't do that unless the function is bound to the image/cache object or you use a separate named reference.. It would be great if you wanted to add your app to the list: https://github.com/cytoscape/cytoscape.js/issues/914. @swtyler I'm not seeing anything incorrect happening.  It doesn't matter when .error is set.  A frame is requested when a node's image is properly loaded and only completed images are drawn.  Adding a hack to check naturalWidth shouldn't improve anything; we're already using the W3C standard load and error events.\nYou are probably just having trouble with Chrome's overzealous caching or having general network issues.  Disable the cache when you're debugging.  If you load lots of images from lots of hosts, you're asking for a slowdown -- because you're making many simultaneous HTTP requests.  If you want high performance with lots of images, you should be using Webpack to bundle your images as base-64 data URIs in your JS.\nIf you can create a demo that consistency shows incorrect behaviour, then please create a new ticket.. @tumri OK, I squashed and cherry-picked across master and unstable.  But the extra listener in the existing cache case isn't needed so I removed it.. Hi.  It could definitely be useful in some cases.  I had considered it for the hit tests, but the issue is the additional cost of building the tree.  The z-sorted elements are used in several places already and generating that list is cheap.  But you're right about the additional comparisons.\nThe problem with using a tree (like a quadtree) is that it would have to either be built for every hit test call or it would have to be cached and updated every time a node is moved.  Maybe the first case would be efficient but I suspect the second would be too expensive with all the invalidations.\nI suppose the main problem would be overlap, moreso with edges than nodes.  That would make the leaves of the tree contain several elements, so the tree potentially becomes O( n*log4(n) ) rather than O( log4(n) ).  \nIn the worst case, it would devolve to almost O( n ) -- e.g. edges in a circle layout.  In cases like that, using a quadtree adds more expense than using the pre-existing O( n ) list.\nEven if it doesn't work out for the hit tests, I think there are some other places that could use a quadtree.  It would make sense to identify those places in the code, though.  I don't remember them offhand.. Great!  I'm interested to see what results the benchmarks show.  Hopefully we can get an improvement.  Thanks. Take a look at https://github.com/cytoscape/cytoscape.js/issues/1468\nThe approach would be similar.. Thanks for the pull request!\nSome feedback:\n\n[ ] Because these would be new features, they would have to go in the unstable branch.\n[ ] You can already make any arrow shape hollow, so probably there doesn't need to be an extra circle shape: http://js.cytoscape.org/#style/edge-arrow  A shape should not change the other visual styles like colour.\n[ ] The double-arrow canvas implementation is identical to the triangle-tee one.  Rather than copy-pasting the implementation, it should be pulled out and given a generic name so both use the same implementation.. The qtip extension covers that usecase.. You can use one or more svg backgrounds if you want custom node rendering (either whole node or decorations on it): http://js.cytoscape.org/#style/background-image\n\nThe renderer automatically creates bitmap caches at scales of powers of two so your nodes are still rendered quickly and cleanly even though svg is used (svg is slow for complex or big visualisations).. @xMarkusSpringerx Do you need any pointers to help you with your PR?. @xMarkusSpringerx Yes, I think it would be good to have the double arrow.  Thanks. Perfect!  Thanks, Dylan. We don't use gulp anymore. Ref https://github.com/cytoscape/cytoscape.js/commit/a3da6558d0014cba1256d28f750736f6dc9f9a9e. I just tried this on the debug page, and it works as expected for noncompound nodes and compound nodes.\n.foo { background-color: red; }\njs\ncy.nodes().addClass('foo');. There must be another factor, one not in your pasted code, causing your issue.. You can either use an official npm release or require('cytoscape/src') and run babel on the source (include node_modules/cytoscape/**) yourself.\nThe main field can't point to the source anymore if the project uses Babel and dist gets updated only on a release.. The problem is that currently the only practical way of allowing for cytoscape: 'https://github.com/cytoscape/cytoscape.js.git#unstable' is building the dist files adding them to each commit.  That would add too much noise to the git commit history.\nRight now, Cytoscape.js is using CJS require() instead of import because Node doesn't support import yet.  It makes running tests much slower if you have to build each time before testing.  Right now you can test the source directly with Mocha on node>=6.  That's a big productivity gain.  It's also nice because it decouples the build process from testing:  You can run the tests on a built version or on the raw source files.  That can help to isolate problems with the build system.\nOnce Node supports import, we can use module in package.json for the raw source code.  But you'd still have to run Babel on it.\nIt's probably best in general to only use official releases on npm.  If you really need a snapshot version you can do this:\nAdd a directory in your app called cytoscape.  In it, put package.json:\njs\n{\n  \"name\": \"cytoscape\",\n  \"version\": \"0.0.0-snapshot\",\n  \"main\": \"cytoscape.js\"\n}\nThen inside the cytoscape dir, copy your built snapshot of cytoscape.js.  So you have:\n- cytoscape\n  - cytoscape/package.json\n  - cytoscape/cytoscape.js\nIn your app's package.json, replace cytoscape: 'x.y.z' with cytoscape: './cytoscape'.. Here's a useful article on the topic: http://2ality.com/2017/04/setting-up-multi-platform-packages.html\nBasically only the es2015 field could work with untranspiled source.  module would work today with webpack and browserify, but would still require a babel build.. Also of interest : https://github.com/standard-things/esm. No, there isn't a way of getting model points from a relative control point spec.  There is a planned API for 3.2 : https://github.com/cytoscape/cytoscape.js/issues/1552. The absolute points already exist in the internal model.  #1552 is just about making a public API around that existing data.. Yes, it would need a getter per type.  You can't get that information without #1552.  Take a look at the updated #1552 text and see if any other functions would be needed by your svg exporter project.. It sounds like everything is already covered in #1552 then.. Closing; follow #1552. Before:\n\nAfter:\n\n. I don't think we can have cy.extent() as a setter.  The dev can set many combinations of invalid values, for example.\nBut the bigger problem is that setting pan limits is not so straightforward as setting a zoom limit, as explained in #1329.  There are too many possible variations and no good, universal default.  \nSome examples: Do you allow a user gesture and then animate back to an allowed viewport state?  Do you block gestures midway if they would break the constraint?  How does the UI give feedback for midway-blocked gestures (e.g. it's confusing if you can't zoom in on a node when it's at the boundary of the constraint)?  How do you visualise the constraint?  How do you access animation objects if they were used for the constraint?\nI think these are questions better addressed by apps themselves.   If you implement a particular variation of viewport constraint enforcement and want to make a reusable module, feel free to put it in an extension: http://js.cytoscape.org/#extensions. If you're looking for a just a setter for the current state, then that makes more sense.  I'm not entirely sold on the utility of setting via the .extent() function in particular though.  That function would accept a bounding box to be consistent, and a dev probably won't bother forming one unless it's from eles.boundingBox() --- in which case, you could just eles.fit().\nI think the following makes sense:\n\ncy.panTo( modelPosition ) -- this is all your example would be doing anyway (i.e. zoom is unchanged)\ncy.viewport({ panTo: {x,y}, zoom: z }) -- like existing function but uses model panTo\ncy.extent( bb ) -- just converts the bb to a .viewport() call\n\nThere are issues to work out with cy.extent().  For instance, what if you set conflicting { x1, x2, w }?  Do you respect { x1, x2 }, { x1, w }, or { x2, w }?  \nOnly respecting { x1 } doesn't give any utility over cy.viewport() or cy.pan().  That may be OK for your usecase, but it's probably not general enough for the lib.\ncy.extent() should probably only support exactly two values specified per dimension (unless the third value is redundant/non-conflicting, e.g. eles.boundingBox()).  Otherwise, it should do nothing at all and bail out with an error message.. OK, that makes sense.  Do you want to make a PR for the three viewport setters we discussed?  That way you can see if the setters are enough to build your dynamic viewport restrictions feature.  If they aren't enough, then we can re-evaluate what changes would be needed in the API.. If you fork the repo, you can make any number of changes directly on the unstable branch to make a pull request.  It's not strictly necessary to make a new feature branch.\nThere's more information in an upcoming blog post: https://github.com/cytoscape/cytoscape.js-blog/blob/5a5769994e250953247926207f5a5309cc60bc74/_posts/2017-05-09-contributing.md. TODO cherry-pick to unstable. @d2fong Do you have pictures of each node shape so I can have a sense of what the code intends to do?. That's enough for a correct solution.  If you look farther down, you need the z-sorted elements.  You change is still drawing the excluded elements.\nIt would require more changes to work properly and the API should be eles.png() if it's operating on a subset of the graph.  That also means that some options won't make sense anymore, so that would have to be addressed as well.\nIf you're interested in a feature like this, feel free to make a PR and it will be reviewed by me or someone in the group.. We can't look into bugs if you're not using the latest version.  Only some bug fixes get backported from 3.x to 2.x, and 2.7.19 is the newest version of 2.x --- not 2.7.10.\nSecondly, the lib is generally working in IE11.  You can open the demos on the docs to validate that.  So either you're reproducing a bug through specific use of the Cytoscape API or you're causing the bug only through your own code.  In either case, you need to provide a reproducible, minimal test case (e.g. a jsbin).. This issue will be re-opened if a reproducible test case is posted.. @josephst These are some items that may be good to include in your future SVG tutorial.. TODO \n\n[x] Inspect test failures on old versions of node\n[x] Remove unused browserify dev dependencies from package.json. Ref : #1857. @jamelt Does the code on master work for you when you build it?\n\nLet me know if it works for you or if you have any issues with it.  \nThanks. Great; thanks for letting me know. boundingBox() is an expensive operation.  It needs to read a lot of style values, and it potentially has to (re)calculate some rendered values (text dimensions, control points, etc.).\nele.boundingBox() is cached for this reason, per element.  eles.boundingBox() may use the cached ele.boundingBox(), but it still needs to do several comparisons and create a new object for the overall box. The cache is easily dirtied (position, style, etc.), though.  If the graph is static between calls, .boundingBox() will be cheap.  Generally, you should avoid calling boundingBox() unless it's absolutely necessary.\n.width() is much cheaper, because it only takes into account the inner width.  That's just one or two style properties.  I think it's also cached, but I'm not sure in what version (maybe 3.2/unstable).  .outerWidth() is also relatively cheap but not so much as .width().. It depends on your stylesheet whether .width() is enough versus .bb().\nBut why do you need to get the children bb at all?  The parent can't be sized smaller than the min even if you specify a smaller value, so that constraint should be automatic.  And you need to query parent w/h every time it's resized to redraw the grapple anyway -- and the parent w/h is cheaper than the child bb.. OK, that makes sense.  Let me know if you run into any issues.  Closing for now. @d2fong Could you take a look at your w/h bias feature here.  I'm pretty sure it was working when we released it, so maybe it's just a docs clarity issue?. @d2fong Since this feature affects master/3.1, would you please cherry-pick this commit to master?. Help questions should go to stack overflow.\nMake sure to ask your question clearly and post a live code example of what you already have.. This is expected behaviour.  Because of how caching is done, you can't draw anything beyond a node's bounding box.  The clipping property is useful for non-rectangle shapes.\nSee https://github.com/cytoscape/cytoscape.js/issues/1782. That's also expected behaviour.  There are two tiers of caching.  Depending on the state of the caches and some runtime performance metrics, the cache may or may not be used.  The cache is used most of the time, and that causes the restriction in draw area.  So in general, you can't draw anything beyond a node's bounding box.\nWe've already considered usecases that may need to draw beyond that.  That's why https://github.com/cytoscape/cytoscape.js/issues/1782 exists.  If you'd like to use that feature faster than we can prioritise it, then please feel free to make a pull request.\nThanks for your feedback.. Closing, as this should be addressed by #1782.. It's probably a good idea to document this. Whoops, hit the button accidentally.\nIt's probably a good idea to document this, but for the extension it might make sense to use outer width and outer height instead.  That would work more as expected.   There could be an option for the user to use a bb instead and pass in bb options, but it would be on them to set the options properly.. Merged into unstable/3.2. See\nhttps://stackoverflow.com/questions/5495952/draw-svg-on-html5-canvas-with-support-for-font-element#5505861\nOn Thu, Jun 22, 2017 at 8:52 AM, J\u00f6rg Richter notifications@github.com\nwrote:\n\nA modified fiddle shows that Webfonts in HTML embedded SVG do work. But\nnot in Cytoscape.\nhttps://jsfiddle.net/jri_/b23Lg89f/1/\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1867#issuecomment-310370964,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA8XcwB7GvKTeQdObhzyf-8E5se2lXHEks5sGmOSgaJpZM4OBvY8\n.\n. The issue in the s/o question is that the image causes tainting.  Cytoscape doesn't directly draw like a generic canvas lib would, and so tainting can cause issues with external resources.  I suspect this is the issue, but it's hard to say.. Though it would be nice to support this, I don't see how we can at the moment.  Though your demo consistently shows the problem, the cause of the issue is still not clear.\n\nYou might want to consider using plain svgs, rather than fonts, to programmatically make your overall svg.  Most good icon fonts have the source svg available for download.. Great; thanks!. If it's working in some browsers and not others, then it's a bug in the way that the particular browser draws an svg image to canvas.  Browsers seem to have differences in how they render svg to canvas as compared to how they render svg in the html dom.  \nA few years ago, even basic svg in the dom had many bugs and differences between the browsers.  Maybe it's a bit better now, but unreliable browser support for svg is one of the reasons cyjs uses canvas.\nThere's not much that can be done on the cyjs end to remedy that.  So it's probably best to file bugs in the issue trackers for the offending browsers.\nThis is the most reliable way of using svg data uri images that we've found:\n'background-image': 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svg)\nThis way you can explicitly specify the encoding --- in both the url and the svg itself just in case the browser ignores one --- and encodeURIComponent() handles non-ascii characters.  Maybe that will work better for you.  Even if it does, I think it still makes sense to report bugs in browser issue trackers.  The browsers shouldn't treat proper support for European languages as an afterthought.. It seems to work in this case: https://jsfiddle.net/hrxp965e/4/. @d2fong Would you please take a look at your barrel shape w.r.t. the intersection calculations?. @d2fong I notice this on the master branch debug page.\nWhen I set shape: barrel in the stylesheet in debug/init.js, I get this:\n\nWould you please take a look at this when you get a chance?  I suspect you may be using an old intersection calculation for edges, for an older iteration of the barrel corners.\nThis should affect all of the SBGN PC apps.. More or less.  You'd use a new cy.collection() and merge() for internal functions for performance.  It's basically the existing ele.components() function implementation but only using one node as input rather than all nodes.. @ugurdogrusoz I think you may have to use a percent padding with this shape if it's a parent.  If I remember correctly from @d2fong, the shape doesn't look like a barrel if you use a fixed / non-relative curve.. @ugurdogrusoz Does https://github.com/cytoscape/cytoscape.js/pull/1896 resolve it?. OK, closing. That looks correct to me.  I think it's expected that you use some padding if you use a barrel shape.  How else is overlap with the child nodes in the corners supposed to be avoided while respecting the bounding box definition?. No, the browser will automatically do filtering (bilinear probably) if the pixel ratio isn't set to the screen pixel ratio.  The browser decides whether to do this or not; it's out of our control.\nIf you want crisp output, you need to leave the pixel ratio at the default value.. An alternative is to implement an upscaling interpolation algorithm, like hq2x, directly in the lib.. @tumri Do you have a demo that reproduces the issue?\nThe renderer automatically listens for image load and invalidates/redraws the node.  I suspect it's a problem in Chrome itself then, but it would be good to see a demo to confirm.. It works for me, so maybe it would be worthwhile to put together a minimal demo that reproduces your issue.  There are too many things going on in the app to determine what the issue could be.. No, they all load for me.  It's just slow.. You can only use rectangle shapes, because a parent's dimensions are defined by the bounding box of the children.  rectangle, roundrectangle, and cutrectangle work.. Cytoscape.js supports only rect-like shapes for compounds.  Either use regular nodes if you want a true ellipse, or use a roundrectangle on a parent.. Ref master : 9368437a531d26630e3acded6545b038568b139b\nRef unstable : 2a468bc73dbcf6adf3bd7d0cca2df5c85dbb7aa3. Someone made a mistake in the demo.  It's amended.  You may have to clear your cache.. Item (b) already exists.  You can alter loops with their style properties.\nItem (a) is basically https://github.com/cytoscape/cytoscape.js/issues/1668, specifying an edge should be straight (like a single, bundled curve-style: bezier edge).. > Regarding A and the issue you referenced, so if that were the case, then for a child going to a parent the arrow would terminate on the inside edge of the parent state (as in the bottom image of A)? If so, then yes, that is exactly what I'd like to have :)\nIt would just change the edge type.  You'd might have to set several other of the existing edge-positioning properties to let the renderer know how the intersections should be found. \n\nThat being said, I do feel like the line routing for the edges in B could use some work, but I suppose that would be a separate issue?\n\nIIRC, the loops are already pretty customisable with several properties.  If you'd like more, feel free to make a PR that alters the edges the way you're thinking.  Bezier loops are hard to create for compounds without invalidating the control points.  If you want to add new loop types (like the square ones in your image), feel free to make a PR to add the calculations and style properties.  If you need help coming up with the requirements / spec for the style properties, let me know in a new issue and I can help you define them.. That approach would require refactoring every layout, and only the Cola layout would benefit.  In general, it would only be useful for infinite force-directed layouts that are stable between runs.  That's a very narrow class of layouts, and the feature would complicate the API for all layouts.  I don't think it makes sense in that case.\nIf you want to include a node in Cola but not have Cola change the position, it would make sense to instead add a feature to the Cola layout via a PR.\nE.g. canPositionNode: node => true || false. We experimented with having labels drawn in separate order from elements in the past.  It's not possible to support that without conflicting with several important features.\nFor your usecase, it may suffice to use z-compound-depth: orphan on the parent node.. @qtttttttttting Have you read these sections of the docs?\n\nPosition notation : http://js.cytoscape.org/#notation/position\nDefault options for the preset layout : http://js.cytoscape.org/#layouts/preset\n\nIf you leave fit: true, it is expected that the viewport pan and zoom would be altered --- as @pumpadump suggested.. Yes, it may make sense to allow for nodes as well.  But I suppose that means we'd have to decide on a relative priority for dragging and panning.  If both are enabled on a node, one should take precedence.  Probably dragging should be higher priority, but there may be some usecases I'm not considering.. Any updates would be referenced in this ticket.  As you can see, this issue is not in the 3.3.0 milestone.  It may be considered for a later release, like 3.4.0.  PRs are welcome, and a PR could help put this feature into 3.3.0.. Canvas doesn't support text decorations, and the alignment of text differs between browsers: https://github.com/cytoscape/cytoscape.js/issues/1489\nBecause of those (sometimes fairly large) misalignments, I don't think the manually drawn strikethrough lines would be properly positioned.. That's exactly the same problem.. @monprin Would you please confirm whether 81a7ccd solves this for your app using undo-redo?  I have tried the change on a downloaded copy of your Jsbin demo, and looks like it fixes it.\nIf it works for you, then I can apply it to unstable/3.2 and 2.x.\nSorry for the delay.  I was away and I've been catching up this week.. Great.  Fixed for 3.1.5 and applied to unstable/3.2 and 2.x.. @michalhabala Would you please try the latest on master and see if it's working for you?. That was already fixed.  Make sure you're trying the latest source on master.. npm run build\nThere are notes on build targets in the readme.. Closing for release.  Comment here if you run into the issue again.. It's intended, because the grab event must happen on tapstart.  Otherwise, you'd have grab events without corresponding free events.\nIf you want to know when a node was freed from a drag, you need to listen for a grab-drag-free sequence.  A new event like dragfree could make that more convenient -- like how a tap event is just a convenient event for tapstart-tapend.. @alexcli Do you have time to implement this?. Ref : https://github.com/cytoscape/cytoscape.js/commit/9de44f52cd59aa00e13ec97053f2a5daab384175. @anault This is working from my initial testing, but it would be good to try it in an app.. Great; closing. @alexcli I'm reviewing the code for this today.  Could you also add the docs for this feature?  Basically, it just needs to be added to the style.md file in documentation/md. Please post issues to the extension: https://github.com/iVis-at-Bilkent/cytoscape.js-context-menus/issues/17. @d2fong Is it possible to make the cross line a constant distance away?  If it's not scaled, then it shouldn't be an issue for small values.. I mean whether we could use a constant distance always.  The arrows are specified in relative units anyway.. Whoops, wrong button.... @d2fong Could you take a look at this for 3.2.2?  I have a couple of other renderer bugs I need to look at.. @d2fong Should we defer this to 3.2.3?  I need to release 3.2.2 this week.. OK, no worries.   Thanks for letting me know. Loading images from the local disk doesn't make sense in a web app.\nIf you want to do something like that, run a local http server and/or build an electron app.. http://js.cytoscape.org/#init-opts/desktopTapThreshold. @fracz Please try the latest source on master and let me know whether it works for you.. @d2fong Great; I'll add this to the 3.3 milestone then.\nNot sure if it's worth it to support multiple mounts per core instance.  Maybe it's worth trying destroying/replacing the renderer on each mount to support that usecase?  If cleanly destroying the renderer without also destroying the core instance is not straight forward, then we could just support the mount-once per core instance usecase.\nThere's cy.destroyRenderer() and cy.initRenderer().  I think at least the animation loop needs to be handled in initRenderer() rather than the core constructor then.  There may be other issues.. Merged https://github.com/cytoscape/cytoscape.js/pull/1949 into unstable.  It looks good, but let's keep this issue open for now as a reminder to keep an eye out for mount issues while working on other features on the unstable branch.. @d2fong I added buttons to test mounting on the debug page.  I played around with it for a while and I wasn't able to break anything.  It looks like it's working well.\nClosing. I tested on an iPhone SE today and a Moto G3.  The SE is 18 months old and the G is 25 months old.  They're both mid-range phones that are one generation behind current phones.  Both run the demos, like the qtip one, smoothly.  \nWe can't test on all hardware, especially in the fragmented Android market with hardware and software of highly ranging quality.  For devices that have manufacturer or service provider software modifications (i.e. non-stock Google Android), there are too many potential problems that they can introduce for us to work around.\nCytoscape works well with modern hardware from mainstream brands, like Apple, Google (Nexus/Pixel), Motorola, Samsung, and LG.  Cytoscape is an open-source project that is funded by research grants.  We can not justify the cost in time and dollars in buying and testing many types of phones.\nWe'd welcome pull requests with workarounds for particular hardware, especially for niche or low-marketshare hardware that we are unable to test.. Chrome has very conservative settings for the GPU.  Basically, it disables any 2D or 3D acceleration for certain hardware -- older hardware Google doesn't want to test anymore I guess.\nFor example, Chrome won't enable acceleration for Intel HD 3000 (Sandy Bridge) even though it works just fine on Firefox and Safari.  Software rendering is very slow if that's all Chrome allows. \nOn desktop, chrome://gpu shows whether all rendering is slow in Chrome.  Maybe that also would show info on mobile.  Maybe Firefox for Android would work better if it can use the GPU.. > Disabled Features : accelerated_2d_canvas\nThat looks like the problem.. Use curve-style: unbundled-bezier; control-point-distance: 0; (or curve-style: straight in 3.3).\nCompounds can not use the default haystack edge type, so they fall back on bezier edges.  However, bezier edges are bundled.  That means they have to share the same direction, and that direction is automatically determined in order to maintain consistency as the graph changes.  So basically, you have to use an unbundled bezier for now so that the natural source-target direction is used.. TODO note bundled bezier direction semantics in the docs. I looked into this a bit more, and there is a problem in the code.  I was thinking about the spec of a previous version.  I've put some changes into master.  Let me know if that works for your with your original (non-workaround) code.. The dist only gets updated for a release.\nYou need to build yourself from source.  I just tested it, and it's working OK.. Each browser has limits to the size of files that it can export.  It varies by OS/browser and it's not documented by the browser vendors.  Your best bet if you want high-res exports is to use JPG with a relatively low compression option value.. See\n\nhttps://stackoverflow.com/questions/695151/data-protocol-url-size-limitations\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n\nData URIs are the only reliable cross-browser way to initially export the image from the canvas.  It looks like toBlob() support is a bit better over the past months.  We could potentially do feature detection in cy.png({ output: 'blob' }): Use canvas.toBlob() if available, otherwise use the current data URI to blob conversion.. See \nhttps://github.com/nrnb/GoogleSummerOfCode/issues/61\nhttps://github.com/cytoscape/cytoscape.js/issues/639\nThe GSOC project did not get selected.. Looks like generally the right approach, but I think coreInit needs to be revisited.. I think it may make sense to leave the core constructor the way it was.  Remounting shouldn't be doing most of init work anyway -- the state should remain between mounts.  Only the renderer instance should change.  \nSo it's probably best to duplicate whatever you need in mount() and maybe consider refactoring later.\nAlso we probably don't need a separate mounted flag.  We already have headless().. We may also want to have a cy.unmount() that does the starting bits of cy.mount().  \nUsecase: You may need to unmount some time before you can remount, for example.. It looks like it's a problem on your end.  Node works fine -- so browserify and webpack should work fine as well.\n```\n$ mkdir foobar\n$ cd foobar\n$ npm init -y\nWrote to /private/tmp/foobar/package.json:\n{\n  \"name\": \"foobar\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n$ npm i -S cytoscape\nfoobar@1.0.0 /private/tmp/foobar\n\u2514\u2500\u252c cytoscape@3.2.1\n  \u251c\u2500\u2500 heap@0.2.6\n  \u2514\u2500\u2500 lodash.debounce@4.0.8\nnpm WARN foobar@1.0.0 No description\nnpm WARN foobar@1.0.0 No repository field.\n$ node\n\ncytoscape = require('cytoscape')\n{ [Function: cytoscape]...\ncy = cytoscape()\nCore ...\ncy.add({ data: { id: 'a' } })\nCollection ...\ncy.add({ data: { id: 'b' } })\nCollection ...\ncy.add({ data: { id: 'ab', source: 'a', target: 'b' } })\nCollection ...\ncy.elements().dijkstra({ root: cy.nodes().first() })\n{ distanceTo: [Function: distanceTo],\n  pathTo: [Function: pathTo] }\n```\n\neles.dijkstra() wouldn't work without the heap.  Something must be wrong with your TS config.. Your config probably doesn't support transitive dependencies.. dist/cytoscape.js has bundled dependencies for the download ZIP.  It's only for people who use script tags on simple pages.\nCytoscape 3.2 is confirmed working with Node, Browserify, and Webpack.  You must have something in your own Typescript options that is breaking your build.  Try starting from a simpler, default config and work up to see where you have a mistake in your config.\nIf you can come up with a minimal example that shows that the problem is with the build of Cytoscape by Webpack, then we'll address it.  But I strongly suspect you've just made a mistake in your build config with TS, so I'm closing the issue for now.. Cytoscape is not a Typescript library.  It's a JS library.  You have to configure your build properly to accommodate for that.\nYou have a problem with transitive dependencies.  Check your typings.  Check that you have typings for the npm dependencies of cytoscape@3.2.\nI recommend you read the docs carefully for your tooling:\n\nTypescript\nbrowserify tsify\nwebpack ts-loader\n\nIt works for me with just a single line: \nbrowserify main.ts -p [ tsify --allowJs ] > bundle.js\nFor reference:\n```js\n// main.ts\nimport * as cytoscape from 'cytoscape';\nlet cy = cytoscape();\ncy.add([\n  { data: { id: 'foo' } },\n  { data: { id: 'bar' } },\n  { data: { source: 'foo', target: 'bar' } }\n]);\nconsole.log( 'num eles', cy.elements().size() );\nconsole.log( 'dijkstra return obj', cy.elements().dijkstra({ root: '#foo' }) );\n```\nAnd if we run the bundle, it works just fine:\n$ node bundle.js\nnum eles 3\ndijkstra return obj { distanceTo: [Function: distanceTo],\n  pathTo: [Function: pathTo] }. @somedmguy My initial thought was to just always copy the listener list on removeListener().  That works.  It turns out to be the same approach taken by eventemitter3.  But I think it's only necessary if you call removeListener() while you emit().  Copying isn't good for performance, so I'm only copying if you remove a listener while you emit.  That passes all the tests I added and the case you posted.\nPlease try the latest source on master and let me know whether it works for you in your app.. @somedmguy If this change works for you on 3.x, then I'll look into backporting it to 2.x.. ```js\n    it('removed one event stays removed', function( next ){\n      var n = cy.nodes().first();\n      var count = 0;\n      var inc = function(){ ++count; };\n  n.pon('foo').then( inc );\n  n.one('foo', inc );\n\n  n.trigger('foo');\n\n  setTimeout(function(){\n    expect( count ).to.equal(2);\n    next();\n  }, 50);\n\n  n.trigger('foo');\n  expect( count ).to.equal(2); // not valid\n});\n\n```\nThat's a good test, but the last line isn't valid.  We can't assume that the promise is fulfilled synchronously.  Otherwise, it looks OK to me.\nThe one() / once() listeners should remove themselves with the same copy method as removeListener().  But doing an inline filter() should be a bit cheaper than removeListener().\n\nThen there's the question of a handler that adds another handler.\n\nIt should suffice to store the listener list length at the top of emit().  The list is a snapshot w.r.t. removals, so removals don't need to be considered.  Additions only happen to the end of the list, so caching the length should work.\n\nAlso, is there a reason promiseOn() wraps on() & off() instead of simply one()? (Aside from making it easier to write these tests)\n\nIt's a bit more explicit in when the listener is removed and when the promise is resolved, but yes, it could be refactored in a later feature release.\n\nEdit: Another problem is an event handler triggering another event (e.g. 'tap' handler that converts two quick taps into a 'doubletap') would dirty your emitting control variable.\n\nYes, it's not a simple on-off.  It's like paren balancing; it needs a stack or a counter.. That's expected behaviour.\nFit to everything: cy.fit()\nFit to nothing --- i.e. nop: cy.fit( emptyCollection )\nIt's usually more ergonomic for the dev to see that cy.fit( eles ) is a nop when eles.length === 0.  If something is passed, it generally means you want to fit to it.  So a dev can see that he made a mistake when he calls cy.fit() on an empty set.  Otherwise, fitting to the entire graph may look superficially like fitting to some expected set, leading the dev to believe things are working as expected when they are not.\nWhat is your usecase where cy.fit( empty )  would be useful?. (Replacing with md post)\nAgreed, but it looks like there are other functions that use the same\nlanguage and/or have incorrect behaviour.\nThese functions need to have updates:\n\n[x] eles.center( empty ) : Seems to centre on the origin on empty\ncollection\n[x] cy.animate({ center: { eles: empty } })\n[x] cy.animation({ center: { eles: empty } }) -- this should cover\n.animate()\n\nThese functions need docs updates:\n\n[x] eles.center()\n[x] eles.fit(). Duplicate https://github.com/cytoscape/cytoscape.js/issues/1935. Added beside npm version badge. Please read the docs: http://js.cytoscape.org/#style/edge-line\n\nIn future, please post questions to Stack Overflow.  The issue tracker is for bug reports and feature requests.  It's not a help forum.. In general, you should use babel-polyfill or core-js if you are developing an app for outdated browsers.\nI've addressed this particular instance.  But in future, Cytoscape will need to use more of the JS stdlib than is practical to internally work around or internally polyfill.. @brassard There are different levels of IE support:\n(1) Write everything in ES5.  Use only underlying tech in the env that is directly supported (DOM APIs, drawing APIs, etc.).\n(2) Write everything in ES6+ (incl. stdlib).  Use only underlying tech in the env that is directly supported (DOM APIs, drawing APIs, etc.).  A polyfill is needed for the stdlib and the lib itself is transpiled to ES5.\n(3) Write everything in ES6+ (incl. stdlib).  Use the latest underlying tech in the browser env.  A polyfill is needed for the stdlib and the lib itself is transpiled to ES5.  It would also need several other high-quality polyfills that may or may not already exist.\nAll of these support IE.  (3) isn't really practical.  Nor is it practical in the longterm to do (1).  We can't have each contributor walking on eggshells, worrying if some basic feature in the stdlib is supported by a decade-old browser.  Some future feature or major release will probably go from (1) to (2).  It's too expensive to maintain (1).\nIn the longterm, we'll have to go with (2).  It's a reasonable compromise that would still have the same level of compatibility as (1).  Most modern apps use babel and babel-polyfill anyway.. Yes, it should probably be documented sooner rather than later.  We are already somewhere between (1) and (2), using a subset of ES6 with Babel.. Please refer to the docs: http://js.cytoscape.org/#style/labels\nThere's a demo right at the top of the docs that clearly shows this.. In future, please post questions to Stack Overflow.  The issue tracker is for bug reports and feature requests; it's not a help forum.. Fuzzy c-means has an issue that is erratic: https://travis-ci.org/cytoscape/cytoscape.js/jobs/300396692. Thanks @lorenzorande \nYour patch has been merged into master and cherry-picked into unstable.. Note that fitting to a bounding box is undocumented API.  It's used internally.\nI've added a regression test.. Use a background image, perhaps svg.\nIn future, please post questions to Stack Overflow. Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.  The issue tracker is for feature requests and bug reports.  Thanks. You have elements with missing data.  You either missed some elements, or you created elements elsewhere that you did not consider.  Try inspecting cy.elements().\nIn future, please post questions to Stack Overflow.  The issue tracker is for feature requests and bug reports.  You may get responses faster on Stack Overflow, as more people use it for help questions.  Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.   Thanks. Place the label at center top and use a margin.\nIn future, please post questions to Stack Overflow.  The issue tracker is for feature requests and bug reports.  You may get responses faster on Stack Overflow, as more people use it for help questions.  Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.   Thanks. Ref : https://github.com/cytoscape/cytoscape.js/issues/1921. Looks good.  Merged. C-+ is generally reserved by the browser for page zoom.  You can bind to keypress for just '+'/'=' and call cy.zoom() to zoom in.  You may want to zoom about the rendered centre point.. Please refer to the docs: http://js.cytoscape.org/#style/mappers. From the docs: mapData() specifies a linear mapping to an element\u2019s data field. For example, mapData(weight, 0, 100, blue, red) maps an element\u2019s weight to gradients between blue and red for weights between 0 and 100. An element with ele.data(\"weight\") === 0 would be mapped to blue, for instance. Elements whose values fall outside of the specified range are mapped to the extremity values. In the previous example, an element with ele.data(\"weight\") === -1 would be mapped to blue.\n. Duplcate https://github.com/cytoscape/cytoscape.js/issues/1750. In general Cytoscape probably won't have core support for rendering anything other than the elements.  The work-in-progress Popper extension is supposed to handle usecases like that, allowing arbitrary HTML/DOM over Cytoscape elements.  The browser has performance and usage (API) considerations built into <video>, so re-implementing those inside Cytoscape might not be the best option.\nRefs:\n\nhttps://popper.js.org/\nhttps://github.com/cytoscape/cytoscape.js-popper\nhttps://github.com/cytoscape/cytoscape.js-qtip/issues/28#issuecomment-300247314. You can position divs relative to Cytoscape elements using the cytoscape-popper extension: https://github.com/cytoscape/cytoscape.js-popper\n\nClosing. No, mutating the selected state emits a select or unselect event.  It doesn't matter whether it originated from UI or whether it originated from just API calls.\nYou need additional (gesture) events.  It sounds like most of your app code shouldn't be listening to select directly.  There are already box events, so it would probably suffice to add tapselect and tapunselect events.  If you'd like to see these events in 3.3, please consider making a PR.  We already have a full queue of features we're working on for that milestone.. I'm glad it's working for you, but there is probably value in having direct support in the lib as well.  It would be clearer, and would support more cases.  The selection mode can be set differently from default.  Using selectionType: 'additive' would be different for tap, for example.  Maybe it's select; maybe it's unselect.. You've specified dimensions for your nodes and bezier points for your edges such that it's impossible to calculate the intersection points necessary to place the edge.\nChange the edge style or the node dimensions to fix your issue.\nSee curve-style, control-point-distance, edge-distances, source-endpoint, etc.. Every discrete layout already does this http://js.cytoscape.org/#layouts/preset\nSee /animate.*/ options. @rjmill Thanks for the PR.\n\nDo you have any opinions on what to do with arrays of strings with spaces in them\n\nIt's probably fine to just keep it simple (and less expensive) by just using whatever the user specifies in the array.  If we start to split strings within an array, the dev may expect that you could do this too: \njs\neles.toggleClass(['foo', ['bar', 'baz']]);\n\nIs there anything else that needs to support arrays of classes?\n\nThose are the most important ones.  I think eles.flashClass() would make sense too.. It looks good.  I'll just squash on merge.  Thanks. Use cy.json() or ele.json() to make declarative edits.\nIn future, please post questions to Stack Overflow.  The issue tracker is for feature requests and bug reports.  You may get responses faster on Stack Overflow, as more people use it for help questions.  Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.   Thanks. Cytoscape owns all the events that occur on its container.  There is nothing Cytoscape can do to accommodate resize CSS.\nFurther, each browser can potentially have different UI for representing how to resize a div using CSS.  It usually a good idea to use resize CSS only on elements where what particular (browser implemented) UI for resizing doesn't matter, like a text area.  If your app design depends on a particular way to represent resizing, it's not really safe to use resize CSS.\nIn any case, you should make the parent DOM element resizable rather than the graph container.  That way you can give the parent some padding etc. to make sure there is enough space for interactivity on the parent element.. Unfortunately, IE has several missing and broken SVG features.  If you want to use SVG in IE, you may have to test and potentially audit each SVG file that you include in your app.. Thanks for the PR.\nDo you think there is value to having all of { butt, round, square }?  Since the cap extends beyond the endpoints, a non-butt cap is not visible.  Maybe we should just have { butt, square } or { butt, extend }.\nEither way, we may need to be really clear about the cap positioning in the docs.  I suspect many people would expect the cap to be visible, i.e. to not extend beyond the endpoint.. > A line-cap is visible if the line is as wide or wider than the node...\nThat makes sense.  I didn't consider the case where the edge is wider than the node.. Do you have an example where this causes an issue?  It seems to be with index, not depth.  And the index is reset every call to assignDepthsToEles(), which happens right at the end of the block in question.. OK, I did something slightly different with a sparse array that gets cleaned up.. Your choice of layout and style affects this, though it is not generally possible to do perfectly.. In future, please post questions to Stack Overflow.  The issue tracker is for feature requests and bug reports.  You may get responses faster on Stack Overflow, as more people use it for help questions.  Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.   Thanks. OK, 8533ad2 should do it for the master branch.  Let me know if it works for you.. They both should support the same JSON.  It shouldn't matter if the desktop software uses a deprecated key.. Do you have some sample code that reproduces it?  What version of OSX is this?  I'm on 10.12 (1 major release behind), and I'm on Safari 11.. This affects 3.2.6 and 2.7.26.  I can reproduce this sometimes on Safari, rarely on Firefox, and I haven't been able to reproduce it on Chrome.\n@buffpojken The 0afbc4b commit seems to resolve things for me on the test page you provided.  It's been ported to unstable and 2.x as well.  Let me know whether this fixes things for you in your app.\nSorry for the delayed response.  I've been very busy, and it wasn't easy to reproduce the issue and come up with a solution.. @buffpojken When you build a snapshot, the first number is the commit hash of the build and the second is the timestamp.  I don't see that commit in the repo.  If you're running the latest code, there isn't even the ability to build zips anymore.\nMaybe your local copy of the repo is bad.  I've attached a snapshot build off of master (0afbc4b).\nbuild.zip\n. @buffpojken Any luck with the build I attached?. You're able to reproduce it still with your cytoscape-test-package.zip?  Or are there different conditions causing what you're seeing now?. @buffpojken I tried 7e1d388 on Safari 10 (OSX 10.11) and 11 (OSX 10.12) on two different machines and I couldn't reproduce it.  I was able to reproduce it about 3 times pre-7e1d388 on the test page, though it was difficult to notice.\nI've attached a build.  You probably want the cjs.js file.  Let me know if it works for you.\nbuild-snapshot-7e1d3884e6-1511889525723.zip\n. @buffpojken Great, thanks. There's no way that could work.  You can't query for rendered values without having a proper renderer.  If you run headless, you just have a renderer that does nop for everything.  If you use headless: false, then you're saying to the instance that you're not interested in a renderer.\nIf you want to do rendering things on a server, use PhantomJS or the new headless Chrome.  If you want to do rendering things on the client without visibility, use an off-screen or invisible instance.. (1) You can draw anything on or in place of nodes using SVG background images.  Cytoscape will handle this more performantly than an SVG document.\n(2) You can use the canvas extension if you want to draw on top of the graph: https://github.com/classcraft/cytoscape.js-canvas. I was planning on releasing 3.2.5 today anyway, so I'll just close this for now and publish.. This is a necessary, but not sufficient, change to allow for non-blocking invalid mapper data.  This change would allow the issue to fall through to another error, later in the code.\nSee the following for a more general solution, which incorporates your PR: Fall back on the default style value if a style mapper fails #2010. I think that these changes should go in the unstable branch (i.e. in a new feature release), as they affect only invalid mappers (i.e. broken code/data).  Lib patches generally fix bugs in the lib itself, not the app using the lib.  I'd also like this to have some time to be tested for a while before it's pushed out to npm.. Merged into unstable for #2010. @michaelpj Thanks for the PR!. I would validate the user input, if I were you.  You can never trust the user.. A function may be better suited in that case:\njs\n'background-color': el => isValid( getColor(el) ) ? getColor(el) : 'red'\nYou may want to memoize.. A couple of us were working on the fix but we didn't get a chance to push it for a couple of hours.  Sorry for the duplicated effort.  We appreciate the PR anyway!. Please read the docs carefully before posting an issue.\nYou can write a layout or position programmatically any way you'd like.  You can lock the nodes if you want their positions to be immutable.\nIn future, please post questions to Stack Overflow.  The issue tracker is for feature requests and bug reports.  You may get responses faster on Stack Overflow, as more people use it for help questions.  Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.   Thanks. Thanks for the PR.  Here are some initial points of discussion:\n\n[ ] All non-bugfix changes, like this PR,  should go in the unstable branch.  I think the changes in unstable for 3.3 are just additions (not major refactoring), so your changes should probably just be able to be replayed onto unstable.  Since unstable is probably just a superset of master, there may still be some (new) require()s that need to be addressed.\n[ ]  Has the .mjs extension been finalised for Node.js?  If so, we should probably use that so that the ESM source can be run natively in modern versions of Node.\n[ ] Being able to run Mocha tests without having to do a build is a large benefit to productivity (e.g. mocha -w or mocha -g), and that wasn't possible with ES modules before.  Perhaps now @std/esm could address that usecase.\n[ ] The ESLint config needs to be updated to support ES modules.\n[ ] cytoscape.Stylesheet is undefined.  The debug page doesn't work, for example.\n[ ] We have \"main\": \"dist/cytoscape.cjs.js\" in package.json.  We probably should also have \"module\": \"dist/cytoscape.esm.js\" for ES-module-aware systems.  \"esnext\": \"src/index.mjs\" might also be nice.\n[ ] We probably have to always build with format \"umd\".  Unfortunately, there are still people who use AMD.\n[ ] Should probably use something like commonjs( Object.keys( pkg.dependencies || {} ).map( pkg =>node_modules/${pkg}/**) ) so new dependencies can be added without modifying the Rollup config.\n[ ] Is there a reason we can't use .babelrc?\n[ ] The benchmarking code either needs to be ported to use ES modules and @std/esm (nice to test without having to build each time), or it needs to depend on a prior build and require() the CJS build.. Here's what I get when the missing stylesheet is used:\n\n$ ls -l build\ntotal 3496\n-rw-r--r--  1 max  staff  731039  2 Nov 18:51 cytoscape.cjs.js\n-rw-r--r--  1 max  staff  750783  2 Nov 18:51 cytoscape.js\n-rw-r--r--  1 max  staff  299438  2 Nov 18:51 cytoscape.min.js\nStill a savings of ~12KB off of the min file compared to Webpack.. Closing this one as https://github.com/cytoscape/cytoscape.js/pull/2084 is newer. You can already have full manual control over the edge endpoints: http://js.cytoscape.org/#style/edge-endpoints\n\nbut this affects the angles of parts of the edges\n\nThen you haven't set your control points appropriately.  If you have trouble understanding (or calculating) how bezier curves work, try the segments style instead: It's easier to position straight lines.. >  In cytoscape it takes a lot of hacking\nIt takes two style properties:\ntext-background-color: white;\ntext-rotation: autorotate;\nPlease read the docs carefully before creating an issue.\nIn future, please post how-to questions to Stack Overflow.  The issue tracker is for feature requests and bug reports.  You may get responses faster on Stack Overflow, as more people use it for help questions.  Stack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers.   Thanks. @nicolasamaduro Thanks. > Does this mean that it would include classes as well as other data?\nclasses: ['foo', 'bar'] versus classes: 'foo bar'\n\nIs there any way currently to get the list of classes an element has?\n\nele.json().classes. Yes, but that wouldn't have to be a breaking (v4) change.  The old key could still be supported.\nEdit: We may want to use ele.classNames() with the ideal signature in v3 and then in v4 make a breaking change so that ele.classes() matches ele.classNames().  See #2110. @brassard @buffpojken faea4ce902c52910f8b71941c4323d0c448f8c2b should do it.  Let me know if it works for you.\nsnapshot-faea4ce902-1511986837206.zip\n. As soon as @buffpojken confirms this issue and #1998 working for his app.. @buffpojken @brassard Great, it looks like we're good for release then.  I'll publish within the next couple of hours.. The issue tracker is for feature requests and bug reports.  This is not a support forum.. The issue tracker is for feature requests and bug reports.  This is not a support forum.. https://stackoverflow.com/questions/47925344/cytoscape-js-eles-style-changes-update-immediately. The Github logo links to the source code on Github.  If you have an idea for a clearer icon, feel free to make a pull request that implements your idea.. Not a bug.\nRead the docs, please:\n\nhttp://js.cytoscape.org/#nodes.parent\nhttp://js.cytoscape.org/#notation/compound-nodes. The issue tracker is for feature requests and bug reports.  This is not a support forum.. The issue tracker is for feature requests and bug reports.  This is not a support forum.\n\nTry using cytoscape-popper instead, though qtip works fine if you use it properly.. The issue tracker is for feature requests and bug reports.  This is not a support forum.. Your bezier (loop) edges are not sufficiently far away from the lhs of the node, given the w:h ratio, to allow for intersection calculations to find a proper solution.\nSee http://js.cytoscape.org/#style/bezier-edges\nYou need to adjust the distance (or step size) appropriately for your stylesheet, e.g. https://codepen.io/anon/pen/ypRmjb\nAside: unpkg (https://unpkg.com/#/) works as a cdn for all npm packages. If you try successively smaller distances in your demo, you will see roughly the point at which intersections fail.. There might be some automatic mitigation that could be added as a new feature, but I'd have to investigate.  It probably won't give as good results as manually specifying a good value, so either way there should be a docs addition.. Adding to Future milestone, in case an automatic mitigation can be found to show the edge with an adjusted control point. For 3.3, we'll just use a console warning: #2093. This is something that will not be supported in the core library.  You can use SVG background images to render whatever you want on top of nodes.  Cytoscape will scale and cache them appropriately to keep things fast.\nIf you require HTML labels specifically, you will need to write an HTML-labels extension or wait for the first-party Popper extension, which allows you to position HTML relative to graph elements, to be published.. @elisherer This looks like a great start.  Here are some things to consider:\n(0) New features don't go in the master branch.  Only bug fixes do.  This belongs in the unstable branch.\n(1) Colour handling shouldn't really be happening in the edge drawing function.  There's a more general function that sets stroke colour, and that should be amended instead.\n(2) Supporting gradients means that we should support them wherever a colour property can be specified.  That means support for gradients in strokeStyle() and fillStyle().\n(3) By (1) and (2), you'd almost already have support for gradients on nodes.  Although you yourself probably only need gradients on edges for your usecase, I wouldn't consider a gradient feature complete unless it's universal.\n(4) The method used for checking whether you have a colour or a gradient will be bad for maintenance.  It would be better to use a flag in the style property, and it seems that the style property parsing could be handled a bit cleaner.  For example, there should be no colorOrGradient2tuple.  Colours and gradients should be parsed separately so the style property can better represent which one is detected.\nFurther, you can't assume the browser has Array.isArray().  That's a relatively new feature, and you break support for old browsers if you do that.  Look at the is.js file if you want to do same type checking.  And what if radial gradients were supported in future?  The array check would be ambiguous.\n(5) If you're not iterating, you shouldn't use rs.allpts.  Use rs.source and rs.target.\n(6) Using gradients means that other features, such as animations and style mappers, no longer work on those elements.\n(7) This is going to be a very expensive feature that will not work well for larger graphs.\nThis is my initial review pass.  I think this is an interesting feature, but (6) and (7) are a bit concerning.. @elisherer Could you explain your usecase a bit so I can understand the motivation for gradients a bit better?. > I'd like to have an ability to switch it on/off programmatically.\nThis already exists.  Just toggle whether user panning and box selection are enabled.  If only one is on, it will be the only drag gesture available and will start without modifier keys.. Not reproducible on master/3.2.8\n```js\ncy.nodes().on('position', () => console.log('position'))\n// click node\n// no log\n```. It might be consistent as a result of writing it consistently in the code, but there was no design decision made on order of events.  You have no guarantees.\nThere's a viewport event that \"joins\" pan and zoom events together.  A viewport is either a pan, a zoom, or a same-time pan zoom pair (e.g. wheel zoom).  This was added in 2.4 or 2.5, but it seems to be missing from the docs.... You should probably be checking the time delta between events.  Wheel zoom would generate pan zoom on the same tick. On most hardware, each requestAnimationFrame() tick is ~16ms apart.  Consider also that for two lines you could be close to the end of a discrete ms on the clock for the first line and on the next ms the next line.. For user gestures, you can use the fact that humans are pretty slow in changing input actions, so thresholds of ~100ms or ~200ms are probably fine.. Closing.\nFor people who refer to this in future: The takeaway message is that you can not assume event order for pan and zoom when doing a wheel zoom or a pinch zoom.. That is not a bug report.  The issue tracker is for feature requests and bug reports.  This is not a support forum.. The issue tracker is for feature requests and bug reports.  This is not a support forum.. The issue tracker is for feature requests and bug reports.  This is not a support forum.. Sorry for the delayed response, but I haven't had much time to devote to Cytoscape.js and I wanted to research and address this properly:\n(8) *-color-style : I think the name would be clearer as *-fill*, e.g. background-fill: linear-gradient | radial-gradient | color.  Using none is confusing to me, as I think it means \"draw nothing\".\n(9) *-gradient-direction : Fine, but please use dash-separated enum values.  If you use to bottom for an enum, then to  bottom (double space) doesn't work as it would in real CSS.  Dash-case is more consistent with other properties.  It also avoids making the property parsing more complicated.  Whitespace can be used to separate multiple property values, for instance.\n(10) *-gradient-stop-n-color : I don't think it makes sense to separate the values this way.  There is a multiple flag for property types that allows a property to have multiple values in it.  That could be used for a single *-gradient-stops (e.g. background-gradient-stops: cyan magenta yellow).  \nThe pie properties existed when there wasn't multiple support and when there was no function() property value support in the stylesheets.  But then again, each pie slice has two values to it (colour and size), so a single multiple: true property probably isn't a good fit for pies.  This is why you have properties 1-16 for pies.\nFor just a gradient colour list, I think multiple is OK.  That way we support a dynamic number of stops.  Animations should still work, and users can specify function() mappers if need be.  I've added a colors type that uses multiple:true in afaa979637920a7af7c6514c7ce5f91fe29febf5.\nIt's also important to note that the Cytoscape desktop software supports an arbitrary number of stops, so that should be a requirement here for compatibility.  Further, Cytoscape desktop allows for specifying colour stop positions as percents.  That means we also need another property for stop positions (e.g. background-gradient-stop-positions: 0% 50% 100%), where the indices match up with those of the stops.\n(11) Currently, multiple: true properties only support simple space separation when specified as a string, though JS arrays can be specified directly.  This is something we'd have to consider in the docs.  For instance, rgb(1, 2, 3) rgb(4, 5, 6) would not work but rgb(1,2,3) rgb(4,5,6) would -- where a string is used in place of an array.\n(12) Thinking about it more, I think it would be best to separate the fillStyle() and strokeStyle() functions into separate cases, rather than trying to handle them all in one.  I'd also prefer to avoid creating intermediary objects for arguments for rendering code that we want lean.\nI'm thinking this:\n\neleFillStyle( cxt, ele ) : Set fill style automatically based on element style.\ncolorFillStyle( cxt, r, g, b, o ) : Rename the old fillStyle() to make it clear it's just for colours.\ngradientFillStyle( cxt, stops ) : stops is an array of [r,g,b] tuples -- stops could be received from ele.pstyle('background-gradient-stops').value.\n\nSo all current fillStyle() on unstable would be converted to colorFillStyle().  The next step would be that the draw node code would call eleFillStyle(), which would call colorFillStyle() or gradientFillStyle() as appropriate.  This way, the code is simple for the common element case, but we still have the ability to set manual colours if the renderer needs to do so (e.g. overlays, panning indicator).\nAnd then same applied to strokeStyle().\nWhat do you think?\n. @elisherer This looks great!  Sorry for the delayed response.  I'll try to set aside some time for final testing and merging of PRs tomorrow. The code is merged with some minor cleanup.\nTODO: Fill a ticket for the milestone: https://github.com/cytoscape/cytoscape.js/issues/2091. There is no unstable release.  You have to build yourself if you want to use the unstable branch (at your own risk -- it's labelled \"unstable\" for a reason).. It looks like the Chromium guys may have sorted out the issue.  The cytoscape-klay demo does have its node disappear at low zoom levels in Chrome Canary 66 (Version 66.0.3342.0 (Official Build) canary (64-bit)).. The CoSE demo is another example: http://js.cytoscape.org/demos/cose-layout/. Chrome 64.0.3282.167 on Mac does not exhibit the bad rendering on the Klay demo.\nChrome 64.0.3282.140 exhibits the bad behaviour.\nList of Chrome changes: https://chromium.googlesource.com/chromium/src/+log/64.0.3282.140..64.0.3282.168?pretty=fuller&n=10000\n. @tswcode I can't reproduce this on my Mac (Intel integrated graphics).  But I do see something similar on my Linux machine (Nvidia 1070, Fedora 27, Xorg) -- the whole graph disappears when I switch back to the tab.\nWhat OS and graphics card are you using?. Are you using the Nvidia proprietary driver or Nouveau?  I'm using the proprietary driver. . That's unfortunate.  I hoped that the Chrome team would have resolved this with recent updates.\nWould someone affected by this issue be able to file a bug report with the Chrome team and link to the report here?. Unfortunately, we can not support shadows this way.  Shadows using exactly that implementation were removed from 2.x to 3.0.\nThe built-in shadow features in CanvasRenderingContext2D do not support scaling, e.g.:\nZoomed in, the shadow is small relative to the node:\n\nZoomed out, the shadow is larger than before relative to the node:\n\n. Multiplying the shadow distances by the zoom distorts it, last I checked.  I don't think the built-in shadow features for canvas are sufficient for a system with zoom support.. Would you please structure your extension a bit more like the others?\n\nThere is no demo.\nThere is no documentation in the readme.\nThe source code annotations are not in English.  Most programmers generally know at least basic English, so English should be used for all documentation, comments, etc.\nIt would be nice to have a screenshot in the readme, since this is a UI extension.\nIt's not published to npm.\n\nSeveral of these could be easily addressed by using the scaffolder: https://github.com/cytoscape/slush-cytoscape-extension. This can be re-opened once the above points are addressed.. You can disable and enable user zooming at will, so you're free to implement the feature you described above in your own app code.  \nThere are lots of potential options for setting when zooming can happen.  Cytoscape has a sane default that most users expect.  The iframe Google maps example you linked to even has an instructional overlay shown on wheel because users expect to zoom on wheel.  It's the responsibility of the app author to implement what's appropriate for the app, rather than complicating Cytoscape with N different ways to handle zoom.\nN.b. Cytoscape already handles the case where you start scrolling the page outside the graph and then continue to scroll while over the graph.  If you wheel within the graph while zooming is enabled, the graph is zoomed.. @wrnrlr This looks great.  Would you please make your PR on the unstable branch instead?  All new features go there for the next non-patch/feature release.\nAlso please remove your changes re. vee.  I've addressed that separately.  Generally one PR should only address one thing.\nThanks. You're using some third-party layout.  You should refer to its documentation.\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. All changes that aren't bug fixes should go in the unstable branch.  I've addressed the linting with less changes there, based on your PR.  Let me know what you think.. There was a set of people who worked on the algorithms, mostly students.  They did a good job at making sure that the algorithms that they wrote were correct and that the code was mostly maintainable.  There was no time for performance optimisations.\n\nThere are plans to improve the algorithms, but pragmatically, I'm not sure how many will be able to be addressed for 3.3.  If you'd like to address eles. floydWarshall() in a pull request, that would be great.\nYou mentioned that most of the issue is with use of (or lack of use of) collections.  A collection has been historically immutable -- the set of elements in the collection can not change.  That's great for a lot of things (especially UI usecases), but it's not great for performance in things like algorithms.  \nThat's why there's now functions like eles.merge() and eles.unmerge() to modify a collection in place.  Most collection APIs still treat it as immutable, but there is a concession of mutability for performance-intensive usecases.  The algorithms didn't have access to these APIs, because the algorithms predated them.\n(1) So basically, the main change to make would be to use collections from the start instead of separate maps and arrays.  A collection can be used like a list/set and can be queried performantly for element membership.  Creating a collection at the end duplicates a lot of work being done manually in the algorithm right now. \n(2) The other change to make would be to remove all selector creation/querying and replace it with eles.getElementById() -- which is a quick map lookup rather than a filter (with a selector object created).\nProbably the main change for #1224 would be to address (1) and (2) for each function.  If you want to do that in a PR for floydWarshall() that would be great.  There are facilities in './benchmark' to test performance differences.. Ref https://github.com/cytoscape/cytoscape.js/issues/1224. I've fixed some issues with the shape in #2082. @d2fong Let's discuss this in-person tomorrow.  I'm seeing some weird behaviour when I build on my machine.. Assigning to self for merge & cherry-pick back to master for bug fix #1874. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\n\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. Notes:\n\n\nI've confirmed that the patch corrects the errant behaviour described by @joeybrk372, using the jsbin as a test case.\n\nThis patch is not necessary for the unstable branch (for v3.3.0), as the caches will not take into consideration the overall opacity property.\nThis patch may reduce performance of compound graphs.  I've tried to keep the effect minimal, but I don't have time to thoroughly test this.\nThis should serve as an example for why we should not add more parent-inherited properties in future releases.. @joeybrk372, would you please build the master branch and try it in your app to confirm?\n\nOr try my local build of 84f2965: build.zip\n. Great.  3.2.11 will be released on Thursday.. I'm not convinced that this is an issue with Cytoscape.js.  It looks like you may need to set up Polymer to properly support events, as it seems Polymer doesn't support this out of the box.\nCytoscape.js listens to events on window to give the sort of experience that users expect.  This approach was decided on based on testing and feedback over many releases of Cytoscape.js.  That is not something that can be changed without serious consideration.. Is there a hierarchical relationship in the DOM between the container and the target (i.e. the polymer component)?  Or does Polymer cut off the hierarchy?. Cool extension!  It will be listed on the docs site on the next release.. It looks OK from what I saw before.  I just haven't had time to test and merge...\nI'll try to set aside some time tomorrow to try it out (and possibly merge).. Some questions re. next steps:\n(1) Should we be specifying 'module' in package.json? http://2ality.com/2017/07/npm-packages-via-babel.html\n(2) Does Rollup support everything we're currently doing with Webpack in the webpack.config.js and the package.json?. Re (2), we need:\n(a) Watch support : --watch via CLI: https://rollupjs.org/guide/en#command-line-flags\n(b) Inline source maps toggled on/off via config file: https://rollupjs.org/guide/en#output-sourcemap-m-sourcemap\n(c) A way to minify with Uglify and toggle it on/off with an env var in the config file: Not sure if this is possible. We could just pipe the output to uglify, but then Windows users can no longer build.  For myself, that's not a problem but it might discourage Windows users from contributing to the lib.\n(d) Babel support: https://rollupjs.org/guide/en#babel\n(e) Making a UMD build that supports external refs to dependencies.  Not sure if this is supported.\n(f) Bundling dependencies from npm that aren't ES modules:  It looks like a plugin does this https://rollupjs.org/guide/en#npm-packages\n(g) Something analogous to EnvironmentPlugin from Webpack : Not sure if this exists. It seems the generally standard action performed on touch devices for holding the finger is to show some kind of menu or show some kind of preview.  I don't think that it makes sense for Cytoscape.js to then enforce a default action on taphold.  That would conflict with all apps that expect to show a menu on taphold, for example.\nThe average user does not use box selection much, even on desktop.  I don't expect that many users would use box selection on touch devices.  You can use selectionType: 'additive' to make selection of multiple elements easier.\nAs for tapping the background, you can write a small amount of code to enable this behaviour.  There's nothing in the lib that would conflict with tapping the background to deselect all elements.  The reason that taphold is used instead of tap for deselection by default is that we found from user testing that tap can be too easy to do by accident.. > The \"ctrl-click\" is normally used to select more cells/rows on a spreadsheet file\nThat's exactly what selectionType: 'additive' does.. These are typical touch-based actions that can be performed:\n\none-finger tap\none-finger swipe (i.e. tap and drag -- move a node, pan, etc.)\npinch (i.e. to zoom)\ntaphold\ncxt (two side-by-side fingers) tap\ncxt (two side-by-side fingers) swipe\nmultiple, separated finger swipes -- not supported by Cytoscape.js\n\nThe list is sorted by descending probability of a user making the action. You can expect typical users to only do the top three.  The remainder tend to be performed very rarely.  There is only one of the top three actions that a user would expect to be selection:  Tap.  And thus, selectionType: 'additive' uses tap to be a sane default.\nTaphold is used over tap for deselecting everything, because users tend to accidentally tap the background.  Admittedly, this makes it difficult to deselect everything.  Perhaps it would be better to just use tap for global deselection, and then leave the problem of handling of accidental deselection to devs to handle on their own.\nIf you want to customise the selection behaviour, you are free to do so outside of the lib.  You could even package it as an extension, if you like.\nThe only prerequisite for writing an extension like that would be to add cy.userSelectionEnabled() to allow disabling of the default, built-in selection gesture.  If you're interested in custom selection behaviour and would like to make a PR for cy.userSelectionEnabled(), that would be great!\nNew selection behaviours (e.g. taphold to select) are not going to be added to the core lib.  Eventually, selectionType: 'additive' will no longer be a core feature and will be an extension instead.. If you only want to use built-in gestures in 3.2, you would have to use selectionType: 'additive'.  In 3.2, you could alternatively use additional UI elements, like the cxtmenu, to do custom selection actions.. Ref : Change the default deselect touch gesture to background tap #2190. I think you may have misunderstood how the mappers work.  Either of a custom function ele => [img0, img1, img2] or 'data(imgs)' (where data: { imgs: [img0, img1, img2] } is defined for each element) should work.  \nYou can either use a string like 'data(key)' or a real JS array with image refs in it -- but not a mix.  If you want a real function, you need to use a JS function(){...}.. Could it be you've accidentally misplaced the scope of mouseover_handler?  It seems to me that mouseover_handler would be a reference to a new function each time your select() is called.  In that case, you're not removing any bound handler at all based on your if.. If not, it would be good to identify a minimal test case (without extensions) that could be added to the test suite.. \nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. 2.x is updated only for very small bug fix changes.  Unfortunately, we can not afford the resources to maintain two different APIs for Cytoscape.js with the latest and greatest changes in both.  Eventually, 2.x will be retired altogether -- 2.x has so far received fixes for about a year after the release of 3.0.\n\nYou may want to consider updating to the latest version of Cytoscape.js, which has both the fast behaviour that you're looking for and the correct behaviour w.r.t. z-ordering.  There are instructions on upgrading in the blog, 'Announcing Cytoscape.js 3.0.0'.\nSee also 'The future of Cytoscape.js 2.x'.. Closing, as v2.x is no longer maintained. 3.2.12 will be released with the changes on Thursday.. This looks great!\nI made a small patch: \nrollup-esm-etc.patch.txt\ngit apply rollup-esm-etc.patch\nTweaks\n\nEnabled sourcemaps for watch:fast -- needed for /debug page\nReduce repetition in rollup conf.\nMisc. linting fixes\nAdded esm target and 'module' key in package.json.  Might have made some mistakes here...\nBuilds for dist now include sourcemaps -- except for .min.js file\nAdd build:* targets back -- not used for main build target -- just for easy 1-file building. Let me know what you think and if we need any other changes.  I'm not sure if the esm build is working perfectly, for example, I just inspected the output in vim.. @ortega2247 b253f95 should resolve the bug itself.  However, be aware that it is invalid to specify percent totals greater than 100%.  I tested on a modified version of your demo that used [20%, 10% -> 50%] instead.. 3.2.12 will be released on Thursday 3 May.. In 3.2, wouldn't doing something like cy.on('select', 'node, edge', e => cy.elements().not(e.target).unselect()) suffice?. It's not clear to me what you're asking for.\n\nThe first case you mention has to do with API and model-level restrictions.  There are no restrictions on selection in the model other than selectable(), which the dev can toggle as needed.  This keeps the model simple and flexible.\nThe second case you mention has to do with user (i.e. gesture) restrictions on the renderer-level.  All of the \"click the background to deselect\", \"click another node to deselect the old one\", etc. rules are defined in the renderer.  Those rules don't apply to anything created or mutated with the API.\nIt sounds like you should also be listening to the add event then.  Adding an element never mutates selection state -- it doesn't exist in the graph yet.\nAlso note that there are plans to remove selectionMode: 'additive' for v4.  I think things like that should be extensions.  Unfortunately, it's not for now for historical and compatibility reasons.. Please post all bug reports and feature requests in English using the included template.. > Renamed cytoscape.js to cytoscape.umd.js as a more descriptive name.\numd is usually used for self-sufficient files without external\ndependencies or with only framework specific dependencies like angular\nor react.\nOK, we'll may need a symlink for dist/cytoscape.js to be consistent with previous releases (e.g. CDNJS expects that file name).  \n\nReplace NODE_ENV with production for cytoscape.min.js because\nminified files usually should be ready for production. This is usual\nconvention for this name across many packages.\n\nAgreed.  That looks like an error that was not yet corrected until now -- though I don't think it affected the output of cytoscape.min.js on master/3.2, it will on 3.3.\n\nAllow users to choose development/production mode for its dependencies\nby not replacing NODE_ENV for \"main\" bundle. Currently webpack has\nown modes to provide this replacement. Rollup users are usually cares\nabout with with rollup-plugin-replace plugin.\n\nMakes sense.. @TrySound It looks like we may have to drop support for ESM for consumers.  Webpack doesn't support it properly for consumers using require() (either directly or transitively by a dependency).  It's fine to use ESM internally, but we can only expose CJS (i.e. no module, only main in package.json).\nI guess someone could do import cytoscape from 'cytoscape/dist/cytoscape.esm.js' if he really wants, but that seems fragile.\nRef : https://github.com/webpack/webpack/issues/6584\nWith a lack of good support in Node and Webpack, it looks like consumption of ESM packages is not quite ready for prime time.. If we keep ESM:\n(1) Any package on npm that does require('cytoscape') will break for consumers using webpack.\n(2) Any webpack project that does require('cytoscape') will break.\nPeople could work around (2) but not (1).  And even (2) is a breaking change -- meaning we'd have to bump the version to cytoscape@4.. ele.json().classes. See https://github.com/cytoscape/cytoscape.js/issues/2019\nIt would probably be better to support getting/setting arrays with ele.classNames(), since for v4 it's planned to change the default JSON export to use arrays.  That way, classNames() is future-proofed and only old things would need to be changed.\njs\nel.classNames(['a', 'b']); // set\nel.classNames(); // get\nel.classNames([]); // clear. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. Use a local http server\n\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. The build is OK, so I merged the change.  But is there any reason in particular for the package-lock changes?. I understand your usecase, but couldn't the same be achieved numerically?\n\nweight: edge => edge.data('weight') + epsilon * interfaceIdAsInt(edge). Fair enough, but I suspect we may get false failures if the dev isn't using the same version of npm as Travis.. Good to know.  I'll merge this in then and we can set a threshold later if need be. The docs aren't clear on this point, but word wrapping is only allowed on whitespace.  If you have no whitespace, there is no opportunity for wrapping.\nYou can use manual newlines to indicate where wrapping should occur.  Or you can provide possible break points with whitespace characters like ' ' or '\\t'.\nIf you want to automatically break on non-whitespace characters (i.e. by a style property), that would require a new feature for some future non-patch release.. Proposal : \ntext-wrap: anywhere : Wrap on manual newline characters, or wrap on any character beyond text-max-width.\nThis should work for languages that don't use much if any whitespace.. Similar to #2329, you should probably be using zero-width spaces between characters where you'd like to enable wrapping.\nI suppose an implementation of text-wrap: anywhere would just put '\\u200b' between every character in your input string, but you should be able to do that in your code in the same way using a style mapper function.. Note that breaking on zero-width spaces is currently not supported, since it's not included in \\s.. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. If you pass 70 to a property that is implicitly specified in percent units, then it is interpreted the same as 70%.   It should make no difference.. You're right.  When I looked back at this issue, I scanned it too quickly and thought it was for the pie properties.  The commit should address this for 3.2.13. Are you initialising after DOMContentLoaded on a div in the document tree?. > Is there a simple way to check?\n\nLog when loaded happens versus your mount. A zero area container does not make sense for a rendered instance.  Adding workarounds to bounding box code doesn't sit right with me.  It's just kicking the can farther down the road:  Zero or infinite values aren't going to make the graph render properly or layout properly.  It's a case of garbage in, garbage out.\n\nAre you initialising after DOMContentLoaded on a div in the document tree?\n\nIf the first condition is true, the second is probably not.  This seems like it may be a problem with the framework you're using.  Perhaps it's giving you a pre-mount hook rather than a post-mount hook.\nI don't think there's anything on this side that can properly resolve your issue.  If you can build a minimal demo (no framework) that shows Cytoscape failing, please re-open this issue with the link.. @TexKiller Do you see a way for this to fit in with the changes made to the algorithms regarding refactoring and performance?  It would be nice to have this feature, especially if it could be integrated in a simple way.. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. From the docs:\n\n\ncy.collection( elesArray )\nGet a collection from an array of elements.\n\nYou've passed an array of collections.  The distinction is subtle, so it's easy to make that mistake.  Your code would mean \"create a collection that itself is composed of one or more collections\".  Collections and elements are nearly (at least externally) identical w.r.t. API.  It looks like cy.collection( elesArray ) makes things confusing.\nIt is not necessary for your code to call cy.collection().\nI'm deprecating cy.collection( val ) in 3.2.13.  It will no longer be in the docs to make things simpler. . The only really useful case of cy.collection() is with no args to create an empty collection.  This will remain.. For most cases, it's fine to just eles = eles.union( newEles ).\nIf you profile your app and you find that .union() is too slow, you could start with an empty cy.collection() and .merge() into it.  You have to be careful with .merge(), as normally collections are considered to be immutable.  . Possibilities:\n(1) You're not running an HTTP server.\n(2) You're hotlinking images, and Wikimedia might be blocking that.. I don't think that this is something that would be added in the lib itself, because it would be inconsistent with how every other shape works.\nYou could do something visually similar by hiding the node body and using an ellipse as an SVG background image.  Having this feature would also help:\nExpand drawing box style property #1782. Make sure the styler is enabled on headless instances, i.e.\njs\nconst cy = cytoscape({ styleEnabled: true, headless: true });\nYou can see there are tests for animations in the repo: https://github.com/cytoscape/cytoscape.js/blob/master/test/collection-style.js. Ya, that's not really clear in the documentation.  So I'll re-open this as a docs issue.. For this usecase, doesn't this suffice?\nhttp://js.cytoscape.org/#cy.zoomingEnabled. That sounds a lot like using a Proxy on your model object and then setting the zoom-enabled state in handler.set().  That's a built-in feature of the language.\nIf you would like to make a PR for the boolean toggle functions to accept functions, that would be great.. You need to run an HTTP server.  You can't use file://. There are very few usecases where it is necessary to use the render event.  An example usecase is having an overlay that you want synched to frames of the graph.\nThere are even fewer usecases where it is necessary to use the forceRender() function.  I think it was added for an extension, given prior limitations of the renderer.  I don't think those limitations exist anymore, so forceRender() should be deprecated and removed from the docs.\nYou should be using add and position events instead. . The animation does rewind.  But just like a VCR, rewinding doesn't mean that it starts playing again.\nYou need to call play() again, after it finishes -- a recursive call made by the promise being fulfilled.. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. I did this in the Chrome debug console on the debug page for master, and I got the expected results:\n\nadd = ele => ele.addClass('highlighted-edge')\ncy.edges().forEach(add)\nrm = ele => ele.removeClass('highlighted-edge')\ncy.edges().forEach(rm). All curved edges are a series of one or more quadratic beziers.  The t=1 point for the nth bezier is used as the t=0 point for the (n+1)th bezier.  So for loops, the first bezier has t=0 at the node and t=1 at the midpoint.  The second bezier has t=0 at the midpoint and t=1 at the node.. Maybe in a future feature release, but the API for that would have to be considered.  It probably wouldn't be exposing the internal allpts. Only loops have more than one by default.  For non-loop edges, it's only more than one if you specify more than one control point.. Ref : edge.controlPoints() is undefined for loops #2139 . There is no cursor style property.. I can see how this would be useful for calculating manual bezier points, but it's not really an extension.  Maybe it would be worthwhile to list in the docs elsewhere.. You can use the loop properties for that: http://js.cytoscape.org/#style/loop-edges. It might be better as an option to nodes.layoutPositions(): http://js.cytoscape.org/#nodes.layoutPositions\nThat function is called by each discrete layout to set the positions.  It already includes an arbitrary transform() function to transform the positions.  Maybe there could be a rotate: angle option that just sets the transform() function appropriately.. The advantage in that approach is that you could easily apply rotate: angle to any discrete layout.. > I'm not sure if point to master or unstable as this is a backwards compatible change, let me know.\nNew things should always go in unstable.  Only bug fixes go to master.. It also may make sense to have an IdentityLayout that just sets the existing positions.  That could be used, for example, if you want to apply only transforms.. I'd rather have the feature as an option to layoutPositions() as that would add the feature to all discrete layouts -- even third party extension layouts -- automatically.. There are several errors in your demo.  You can see that the (forward) transition animation works for multiple properties in this demo: https://jsbin.com/wijeqejasa\n. @janithmehta Though the transition animations use the same underlying animation routines, I've added some explicit tests to confirm that the feature works as intended.  (The unstable branch is currently failing unrelated tests due to ongoing work.)  If you have a case where the feature fails, please feel free to re-open the ticket.. Thanks for the PR, but you should be able to run layouts on arbitrary subsets of the graph using the existing API, e.g.\njs\ncy.elements(':visible').layout({ /* ... */ }).run();. Bundled bezier:\n\nUnbundled bezier:\n\nSegments:\n\nStraight:\n\n. The mapper isn't technically valid, since the range of the output values is zero.  An example of a valid block would be:\nedge[score > 2.5002426779747005][score < 4.4712] {\n  line-color: rgb(255,255,0);\n}\nYour mapper is also redundant based on the selector, which would result in unnecessary overhead.  The effect would become more pronounced as the size of the stylesheet grows.\nThe mapping routine could fail more gracefully in cases like these by using the single value, but it should also then at least print a warning message to indicate the error.  I don't see a case for creating a mapping over a range of zero width rather than just using a single value.. Invalid mappings like these are logged to the console in 3.2:\nRef : https://github.com/cytoscape/cytoscape.js/blob/v3.2.14/src/style/parse.js#L138\nE.g.:\n\nThe style property background-color: mapData(weight, 0, 100, red, red) is invalid\n\nCytoscape logs messages like these to the browser's console to indicate things that the client should fix in his code.  This is very similar to how the browser handles invalid CSS.  Also like CSS in the browser, the library will throw away invalid definitions from the style block --- so the specified value in the closest previous block is used in lieu of the invalid one.\nIn 3.3, Cytoscape will autocorrect invalid definitions of this type with a warning message.  Generally though, erroneous definitions ought to be corrected before being passed.\nSee : Autocorrect invalid mapData() style property mappers that have zero output range #2153. What do you get for npm ls browserify?. This looks like it's not a Cytoscape problem:\n```\n$ node --version\nv8.11.3\n$ npm --version\n5.6.0\n$ git clone https://github.com/cytoscape/cytoscape.js.git\nCloning into 'cytoscape.js'...\nremote: Counting objects: 30358, done.\n$ cd cytoscape.js/\n$ git checkout v3.2.14\nNote: checking out 'v3.2.14'.\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\ngit checkout -b \nHEAD is now at 2fd4aa6c Preparing to publish 3.2.14\n$ browserify --version\n16.2.2\n$ npm i\n2083 packages in 14.669s\n$ browserify -s cytoscape dist/cytoscape.cjs.js > bundle.js\n$ node\n\ncytoscape = require('./bundle')\n{ [Function: cytoscape]\n  use: \u001b[36m[Function]\u001b[39m,\n  version: \u001b[32m'3.2.14'\u001b[39m,\n  Stylesheet: \u001b[36m[Function: Stylesheet]\u001b[39m,\n  stylesheet: \u001b[36m[Function: Stylesheet]\u001b[39m }\n\u001b[1G\u001b[0J> \u001b\n```. Alternatively, you can use CDNJS if you want a browser-ready bundle for a particular version: https://cdnjs.com/libraries/cytoscape\n\nOr if you always want the latest version (or a semver pattern), you can use Unpkg: https://unpkg.com/cytoscape/dist/cytoscape.min.js. Lodash doesn't load on that wzrd cdn either: https://wzrd.in/bundle/lodash@4.17.10\nPerhaps the site itself is broken.. It appears that you have performance issues in your code itself.  It seems that you would benefit from going over the tutorials and familiarising yourself with the documentation more.\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\n\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. In future, please post questions to Stack Overflow.  \n\n\nThe issue tracker is for feature requests and bug reports.\n\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. You shouldn't be using Object.assign() with objects that are instantiated from a prototype.. DFS: https://en.wikipedia.org/wiki/Cycle_(graph_theory)#Cycle_detection. I tried this out with a marching ants animation: \n\n\nIt seems to work well, though the gif isn't as smooth as the real thing.. @PeBraz You can verify whether the fix works for you by building off of master.. Ref #2163. Ref https://github.com/cytoscape/cytoscape.js/issues/2160. The bounds are correct.  It's the display that's wrong.  You've specified rotation for the main label, and the same rotation is erroneously applied to the source and target labels for display.  The correct properties are being used for bounds.  \nThe prefixed style properties should be used (e.g. source-text-rotation) in your code.\nThis has the correct bounds but wrong display (unfixed):\n\nWith the properties aligned and with the bounds indicated by the cyan overlay:\nThis is what you've specified:\n\nThis is what you intended:\n\n. @willbeaufoy You can verify whether this works for you by building off of master.. You can already control the zoom-enabled state at-will.  If you want to toggle based on a key or a button in the UI etc., that's up to you.. It's the code you've written that's slow -- rather than the style application itself.  There are tips in the docs re. performance, and there are also some more obvious issues in the demo you posted (consider the big-O cost of the code you've written).. There are several problems with the code you posted.  One of them is using ele.style().  There are very few cases where that should be used.  You wouldn't put all your styles for DOM elements in style attributes, right?  The same applies to Cytoscape elements.  From the docs: \n\nYou should use this function very sparingly for setting, because it overrides the style of an element, despite the state and classes that it has. In general, it\u2019s much better to specify a better stylesheet at initialisation that reflects your application state rather than programmatically modifying style.\n\nIf you use some caching scheme, then you'll be calling the problematic (slow) code less -- which as you noticed gives an improvement.  But if you follow all the instructions and performance tips in the docs, caching isn't really necessary.\nUnfortunately, I don't have time to help everyone who emails me or posts to the issue tracker looking for code help.  There is the possibility of paid support, if you are looking for hands-on help.. I can appreciate the want of more labels on edges.  However, that's something that may not be generally practical.  There are three edge labels, each at predefined positions:\n(1) The main label -- at the midpoint\n(2) The source label -- at the source intersection\n(3) The target label -- at the target intersection\nLabels (2) and (3) may be shifted very slightly by using an offset.  This offset must be relatively small for it to be accurate, as the mechanism used to shift the label uses an inexpensive approximation for most edge types.  The accuracy is high for small offsets, and the accuracy tends to decrease as the offset increases.\nIt may be more practical to use the main label with multiple lines.  That's already supported.\nAnother alternative is to allow image rendering over top of edges, like is already allowed for node background images.  These images can be SVGs, which can contain arbitrary text and shapes.  This feature does not yet exist.. > Overlaying SVGs on top of canvas edges would probably go in the same direction then.\nSVGs are dynamically rasterised by Cytoscape within the canvas, so they're included in any export.. For those also interested in label/overlay customisation, consider the cytoscape-popper extension: https://github.com/cytoscape/cytoscape.js-popper. Would you please make a clear demo that shows the issue?. You've put the edges over top of the nodes.  The element that gets the event is whatever is on top at the position you click, so it doesn't look like a bug here.. > Maybe I can clarify: The z-order of the elements in the example should be: edge.hover > node > edge. Therefore, the cursor should be possible to move off the hovered edge onto the node. However, that does not happen. Instead, the cursor lands on the non-hovered edge behind the node, making that edge into a hovered edge. Effectively, the z-order becomes edge.hover > edge > node whenever any edge is hovered.\nThank you for the explanation.\nThis is not reproducible in v3.2.17.  The provided demo is for v2 -- e.g. cyTarget is used.  The v2 line is no longer supported: http://blog.js.cytoscape.org/2018/06/26/ending-support-of-2.x/\nI modified the example to work in v3, and everything works as expected.  This issue will be closed until a reproducible demo is provided for v3.. Note that the labels do not normally cause events, like mouseover or click.  So hovering over a node's label is not expected to do anything normally.  See http://js.cytoscape.org/#style/events. There may have been a reason for excluding compound depth from the edge override check in the hit test -- for real compound graphs.\n3.2.19 is released with the change, but if this creates unforeseen issues for compound graphs we'll have to re-evaluate.  For non-compound graphs, you should never need to use z-compound-depth at all:  Manual z-index for all elements suffices.. Duplicate : https://github.com/cytoscape/cytoscape.js/issues/1209. Refer to the documentation: http://js.cytoscape.org/#style\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\n\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. Edges are just line strokes in a canvas.  Having variations in the edge width, along a single edge, is not possible.. In future, please post questions to Stack Overflow.  \n\n\nThe issue tracker is for feature requests and bug reports.\n\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. The PSF license is uncommon, but it's as permissive as MIT or BSD.  PSF is also OSI-approved.\n\nI'm not particularly worried about vulnerabilities in the heap library.  It's just a binary heap.  For a well written data structure, I would expect its code to change rarely -- if ever beyond a certain point.  It's open-source.  In the unlikely event that a vulnerability is found, someone can fork the project to patch it if the author doesn't want to do so.\nAdditionally, heap seems to be the only heap module on npm that would meet the functional and performance requirements of Cytoscape.js.\nIt is not a high priority for us to rewrite a heap module, given that heap is good, MIT-compatible, and widely-used.\nIf you are adamant about strict MIT licensing for all dependencies, I think your first step should be to approach Joe Xu and ask him whether he would consider relicensing heap as MIT.   You would need Joe and all the collaborators in the repo to agree to the change.. Note for future: If the performance of @tyriar/fibonacci-heap improves, then we could consider using it in place of heap.  The last time I tested @tyriar/fibonacci-heap in Cytoscape, it dropped performance in places by 10-20%.  Fibonacci heaps don't tend to perform that well in practice, though they look good in theory.. Cytoscape.js is a library -- it's not an editor app.  You can build whatever you want using the library.\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. Please file a bug report in Redmine: http://chianti.ucsd.edu/cyto_web/bugreport/bugreport.php\n\nThis is a Cytoscape desktop issue -- not a Cytoscape.js issue.. This needs to be set up to run only on the unstable branch.. The main branch on this repo has been changed from master to unstable.  This should allow Greenkeeper to properly make PRs.\nClosing. There are no ESM builds until v3.3.  Use Webpack or use globals with v3.2.. The cut has a fixed size, so if you make the shape too small then the corners dominate the shape.  This isn't a bug, so no changes can be made related to this for 3.2.\nIn a feature release, there are the following options:\n(1) A console warning.\n(2) Automatically change the shape to rectangle if the node is too small.\n(3) Disallow cut rectangle shapes from being smaller than about 30x30.. Planning on having options (1) & (2) for 3.3. That would be great.. Yes.\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. Unstable is merged into master only for official releases. Please read the docs.\n\n\nNote that Cytoscape.js uses the dimensions of your HTML DOM element container for layouts and rendering at initialisation. Thus, it is very important to place your CSS stylesheets in the  before any Cytoscape.js-related code. Otherwise, dimensions may be sporadically reported incorrectly, resulting in undesired behaviour.\nYour stylesheet may include something like this (assuming a DOM element with ID cy is used as the container):\ncy {\nwidth: 300px;\n height: 300px;\n display: block;\n}\n\nIf you're not familiar with web fundamentals, there are some good tutorials on MDN.\n. @PeBraz a2c2c0d should resolve the issue, which will be released in 3.2.17 on Friday.. Cytoscape.js doesn't support GraphML. See http://js.cytoscape.org/#cy.boxSelectionEnabled. If it's off it's gone completely.. An animation itself can not be modified.  You can stop a prior animation and start a new one if you want.. Please follow the issue template.  There is not enough information here for an actionable issue.. https://github.com/cytoscape/cytoscape.js/pull/2147#issuecomment-401383112\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. They are a series of quadratic beziers -- one point per curve.. > Thanks Max! Now I understand. That wasn't clear from the doc, though, so maybe it would be good mention it in 'Styles' section?\n\nYes, for 3.3\n\nJust to clarify: if I have two control points, do I understand correctly that endpoint where first segment ends and the second starts is simply the midpoint between control points?\n\nYes, it seems so.  I think that makes most common combinations join fairly smoothly.. There should be an error message in the console if you do this.  A mapper must have valid values defined for all elements that match the containing selector block.  It's up to the programmer to specify the rules for how the style should be applied using the selector blocks.\nThe existence selector should suffice for that, e.g.:\n```\nnode[foo] {\n  background-color: mapData(foo, 0, 100, red, blue);\n}\nnode[^foo] {\n  background-color: yellow;\n}\n```\nIf you use an explicit null value rather than undefined, then [?foo], [foo = 0] matches non-null, non-undefined values of foo.\nThe word \"null\" just means zero, and zero is usually towards the bottom of a mapper.  I suppose that's why the bottom of the range is used, but the value that is used in an error case is arbitrary:  It's just to prevent crashes.  Just as the browser doesn't crash on invalid CSS files, Cytoscape tries not to crash where possible on invalid stylesheets.. The layout is async/continuous.  You've written your file before the layout has finished.. Example\n```js\n!/usr/bin/env node\nconst cytoscape = require('cytoscape');\nvar inputChunks = [];\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('readable', () => {\n  const chunk = process.stdin.read();\n  if (chunk !== null) {\n    inputChunks.push(chunk);\n  }\n});\nprocess.stdin.on('end', function () {\nvar inputJSON = inputChunks.join('');\n  var parsedJSON = JSON.parse(inputJSON);\nvar network = cytoscape({\n    elements: parsedJSON,\n    layout: {\n      name: 'preset'\n    }\n  });\nvar layout = network.layout({\n    name: 'cose',\n    animate: false,\n    randomize: true\n  });\nlayout.on('layoutstop', write);\nlayout.run();\nfunction write(){\n    outputJSON = JSON.stringify(network.elements().jsons(), null, '  ');\n    process.stdout.write(outputJSON);\n  }\n});\n```. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. The plain array format is the preferred form.  Eventually the { nodes: [], edges: [] } form will be deprecated with a warning in the console, and then it will be removed in v4.  For now, either works.  The { nodes: [], edges: [] } form is a remnant from Cytoscape Web -- the predecessor of Cytoscape.js.\n\nThere are inconsistencies in the examples and demos regarding this due to inertia.  I'm making an effort with the 3.3 release to do a full pass of the docs and demos to clean things up.  I'll keep this formatting issue in mind.. On further thought: I don't think it will be practical to drop support for they keyed { nodes: [], edges: [] } format for some future v4 release.\nHowever, I've added docs in v3.3 to cover the two options in the Notation > Elements JSON section.  There is also a flat option to cy.json().  If you call cy.json(true), then you will get the preferred flat array format.  In v4, there will be a breaking change such that flat is true by default -- whereas it is false by default now.. I'll create a separate ticket for that when we're closer to v4.\nClosing. If you don't include edges in the layout, how can there be any BFS?\nhttps://jsbin.com/nafuzijiwi/edit?html,output\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.\n\n. Would you please update the readme to be more descriptive?  It's not clear to me what this extension does.  The readme mentions \"all paths\", but the demo shows a specific subset of paths.  It would be useful to describe exactly what this extension does and what common usecases would be.. If you animate the layout, then the position changes over time to the final position when the layout has finished.  Wait until the layout is finished if you want final positions for an async layout.. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. Special characters need to be escaped: http://js.cytoscape.org/#selectors/notes-amp-caveats\n\nAnd you don't need to use selectors in functions like cc().  You can just cy.getElementById().\n. In future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. There's already gradient support in 3.3/unstable, which is a superset of the feature you propose.\n\njs\n.selector('edge')\n  .css({\n    'line-fill': 'linear-gradient',\n    'line-gradient-stop-colors': ['blue', 'blue', 'green', 'green'],\n    'line-gradient-stop-positions': ['0%', '50%', '50%', '100%']\n  })\nGradients work for every edge type:\n\nFor the simple straight line edge case, it should work exactly as in your example if you use sharp stops.. Ref 3cd84da. https://github.com/cytoscape/cytoscape.js/issues/2091. Merged into unstable, and cherry-picked into master.\nThanks. If you override the style, it's always overridden.  If you don't like that behaviour, you probably should avoid using style overrides (ele.style()).  As the documentation says, there are very few valid usecases for using that function.. https://github.com/mo0om/cytoscape-no-overlap. Would you please add documentation and publish the module to npm?. Fair enough.  However, refresh:0 is redundant given that animate:false is more explicit.. 3.2.21 will be released on Monday. Anything in the DOM is outside of the graph.  Anything outside of the graph can not be rendered to cy.png().\nYou'll need to use another strategy if you want overlay content in an image.  Popper is DOM-only.\nYou should probably render your own canvases or create your own svgs, and then combine those images with the cytoscape image.. Compound nodes are not intended to be used for overlapping sets:  Compounds exist in a strict tree hierarchy.  That can not change in the model.\nIf you're interested in visualising overlays like these, it might be a better fit to use something like cytoscape-canvas.. The compound node model, by definition, is one parent maximum per node.  So we can't change that in the library.\nIt would be great if your usecase could be supported by an extension.  If an existing extension does not meet your requirements, I would encourage you to create one.  An extension can be scaffolded for you, and they're easy to write.\nYou could, for example, create an extension that reads node.data('sets') for a specification of the list of sets (other node IDs).  For each set node, your extension would update the bounds appropriately.. > I think the change I suggested cannot be done with an extension as it required a change to the data structure\nI meant that in the extension case that the extension would not use compound nodes at all:  It would maintain set nodes (that are automatically sized by the extension in a way similar to compound nodes) using a key like sets.\nBecause the definition of compound nodes is a tree of nodes, we can't merge in changes to the main lib that would contradict this definition.. 3.2.21 will be released on Monday. Please provide a reproducible test case, including:\n\nBrowser version\nOS version\nA code sample that reproduces the issue.  Any of the example demos on js.cytoscape.org can be forked on JSBin to easily provide a code sample.. The documentation has a section on this topic: http://js.cytoscape.org/#performance. Eventually for v4, the rendered value case can be removed from style.getStylePropertyValue(): #2221 #2019. Desktop questions should go in the desktop help desk: https://groups.google.com/forum/#!forum/cytoscape-helpdesk. Add a :compound selector that can be used on edges in order to accommodate the main use case for edge selectors (:parent <-> node would be the same as edge:compound).. I was planning on releasing 3.3.0 (and 3.2.22) today, but I can put it off until Monday to give you time to review.  I think the test cases should suffice now.. @josejulio I'll release tomorrow at the start of the morning rather than now:  In the small chance that anything unforeseen goes wrong with publishing the releases, I'd like to have a good amount of time to address it.. It's just a warning.  Your nodes probably overlap a bit during part of CoSE.\n\nExamine your edges that have warnings carefully.  If they are missing when they shouldn't be, then you may need to change your stylesheet.  If you examine things carefully and everything looks fine, then you can ignore the message.  It's a warning, not an error.. Removing from the graph doesn't affect the contents of a collection.  Do you have a reproducible test case?. I've been away and unable to release.  I'll publish tomorrow morning.. (1) cy.json() is synchronous\n(2) It's up to you how many background images you use and how you position them.\n(3) We don't maintain Typescript definitions.  That's up to the community for now.. You can put any of the demos into online editors like Codepen or Jsbin, if you like.. From the same cause: An edge may not be shown at all for certain pan and zoom values, after running a layout.. Explanation: \nThe rendered style may be stale after a connected node is repositioned.  Because the rendered style of an edge is not dirtied when a node is moved, we should force the rendered style of the edge to be recalculated when the bounding box is requested and there is a diff detected for one or both node positions.\nBehaviour without patch: Edge labels can be shown at the wrong location.  Edges can be not shown at all for certain pan and zoom levels.  In both cases, a stale rendered style results in a stale bounding box.  The overall bounding box is used for viewport overlap detection and a label sub-bounding-box is used for label placement etc.. That helps to clarify things.  As described in the code comment, if possible, I'd like to see all the logic within applyParsedProperty() with an early exit condition.  That would keep all the logic in one place, but maybe it's not practical.  I'll take a closer look on Monday.. @ntfink The changes only include the proposals that we discussed.  The overall structure is the same as your initial PR.\nThanks again for the PR, and you should see the change in the 3.4.0 release at the beginning of February.. Ref https://github.com/cytoscape/cytoscape.js/commit/295f66f7db85681670b03937a8dc6da2130a1f2e#diff-4cbda7cf5642b53f0b4ada2eb9e65229. That property does not exist in this lib.  All style properties that are supported are in the docs: http://js.cytoscape.org/#style. What's the use case?. You should use classes or data fields and you can exclude elements with those classes or data fields from the collection you use for querying for neighbours.. This is a Chrome bug that seems to be fixed in newer releases.  Safari and Firefox are fine as well.  For issues like this, there's nothing we can do.  It's up to the browser vendor to fix them.\nSince the Chrome team seem to have fixed the issue, I'm closing the issue.  In cases where they don't fix the issue, you should post the issue on the Chromium issue tracker.. I could not reproduce this on the latest release.  Please provide a reproducible test case, including:\n\nBrowser version\nOS version\nA code sample that reproduces the issue.  Any of the example demos on js.cytoscape.org can be forked on JSBin to easily provide a code sample.. Layouts work fine in PhantomJS.  Otherwise, the cytosnap package never would have worked.  Post a reproducible test case, and properly follow the issue template.  I'll re-open once a test case is posted.. @josejulio See the compound-json-2255 branch, which is based off of your branch in your fork.  You should be able to do a fast-forward merge.\n\nThe branch adds some commits on top of yours, including a test case that fails.  The test case is resolved by 7fe8583c0e466baeab781602eadf66343ff2c8cc.\nPlease review and add any test cases you can think of.. Yes, when drawing from the cache the rotation point is assumed to be the centre of the bounding box.  This isn't true for the way that rotations are applied without the cache or pre-3.3. I've got a fix but it needs to be tested more today before merging.  I'll push the branch within the hour so you can try it out if you like.. @josejulio The patch is in the ele-txr-cache-rotpt branch.  This seems to fix this particular issue, but it shows that there is also a separate bug:  The transformed (rotated) bounds of the labels aren't used properly for overall element bounds calculations.  For top left alignment:\n\nThe case you posted seems to work (top right):\n\n. There is a general inaccuracy, because the browser will draw w.r.t. the baseline whereas a cache can not.  This isn't an issue for center-center labels, because they are always drawn relative to the centre of the text.  But even then browsers make different decisions on where the centre really is, and so there are still inaccuracies --- though to a smaller amount.\nAnother source of inaccuracy is the expansion of the bounding box for labels.  This is necessary to avoid labels getting cut off --- especially for characters with descenders.  This particular issue results in a maximum offset of one model pixel.\nProbably both issues are compounded in your example.  For Helvetica, which has nice font metrics, there's only the second, one-pixel issue that's noticeable.. I think your example might just be a lucky one that lines up in the case of 1a532e4 for the font you have.\nI tried 1a532e4 with a different example page, and it still doesn't quite line up.  The only thing that fixes it for me is to remove this line:\nhttps://github.com/cytoscape/cytoscape.js/blob/v3.3.1/src/collection/dimensions/bounds.js#L356\nBut as I mentioned, that causes labels to get cut off.  For example, the \"g\" in \"Writing\" gets cut off when using Helvetica Neue.. What is the motivation for suppressing the warnings?  Is there a performance impact?. That makes sense, but disabling the warnings comes at a cost:  When a dev creates an edge and its not visible because of the positions of the connected nodes, it would be confusing to not have the warning.\nMaybe the warnings could be collated somehow.. I guess the warning could be suppressed automatically if the connecting nodes both have the default (0, 0) position.\nCollation could more generally be done within a time threshold, but I'd be wary of edgecases.. There is some information here: https://github.com/cytoscape/cytoscape.js/blob/unstable/CONTRIBUTING.md\nThe warning code is here: \nhttps://github.com/cytoscape/cytoscape.js/blob/d0d70c20f7e2cfa4d87e6c44be82aed4d30607ab/src/extensions/renderer/base/coord-ele-math/edge-control-points.js#L127-L138\n. Whether the edge is animated still isn't enough information to suppress the warning properly.\nThe warning is there because there are several cases for edges, with different property value combinations, that make the edge impossible to draw.  It can be confusing to a consumer without the warning:  Did I as the consumer do something wrong or is the library broken?\nSo then:\n(1) The warning must still be shown for all cases except those that are obviously not caused by user error.\n(2) The warning suppression logic must not impact performance significantly.\nBy suppressing the warning for animated elements, (1) is violated.  The consumer can animate elements by ele.animation() -- it is not always a layout causing that.  Generally, the more sophisticated the suppression rules become, the more (2) is violated.. For layout that makes sense, for other cases it could be confusing to see a missing edge but have no warning for it.\nI think the simplest option is to have some init option to suppress all warnings warnings: bool -- basically making util.warn() a nop.  If you opt out, you lose out on useful warning messages.  But if you don't like warnings generally, then you probably want to opt out of all of them anyway.. If it's per-cy rather than per-ele, then (1) is no longer generally true:  For example, you could have one edge that is obviously wrong cause the warning, and then later another non-obvious edge doesn't get any warning.\n\nWarnings are useful. I wouldn't opt out completely - someone may add it, commit the code, and forget about it.\n\nTo me, that's an argument against hard-coding your options --- rather than an argument against the existence of an option itself.  If you're worried about that case, you should use an environment variable at build time, e.g. warnings: process.env.NODE_ENV !== 'production'.  That way, developers get warnings for debug builds but there are no warnings in production builds.. The only way I could see debouncing working generally on util.warn() without violating (1) is if the warnings are debounced per unique message. \nImagine this sequence, at around the same time: A, A, B, C\nI would expect this output: A, B, C\nFor this particular warning, we already have this behaviour by limiting this warning per element.\nDebouncing could work to reduce the overall count of warnings if --- rather than debouncing util.warn() itself --- you debounce each class of warning separately.  Each class would need its own collation logic.  For invalid endpoints, for example, you'd need to maintain a list of elements per debounce cycle.. > Is there a list of warning classes somewhere?\nNo, there is just a set of calls to util.warn().  They aren't organised beyond that, because they haven't had to be thus far.. For (3), a separate collection could be used to store the list of edges.  The debouncing could be independent of ticks, but this raises another point:  The debounce time can't be specified to be very long, or the utility of the warning is decreased:  Knowing when the edge is invalid is useful information, especially if you're dragging it around.. > To me This is expected behaviour when the source node and the target node overlap makes no sense.\nI checked the control point code, and there's a condition to check for node overlap.  That state could be stored for the warning:  If the nodes overlap, we don't need to print the warning.  That case should -- I hope -- be fairly obvious to a developer.\nThe main purpose of the warning is to let the dev know when he specified style properties that sometimes make the edge impossible to draw:  He should update his stylesheet to work more generally with his data.  \nSo if we can automatically eliminate all the node overlap cases to reduce noise, this might be an acceptable compromise.\nI still think the option to turn them all off is a good idea, especially for when a dev makes a prod build of his app.. The refactoring for the following issue makes it so the invalid edge warning is not shown when the nodes overlap: Clean up control point calculation a bit #2300\n. The feature/global-warnings-toggle branch has an addition of cytoscape.warnings() -- which is both a setter and a getter.\nThe benefits of this approach are:\n\nIt's automatically applied to all cy instances that you create.\nIt can be changed dynamically. \nIt's automatically applied to all util.warn() calls.  \nThe rest of the code doesn't have to change.\nThere is no risk of someone accidentally forgetting to check the flag in future code additions.\nIt doesn't create the possibility of cyclic dependencies on the core or the passing of extra cy refs.\n\nI initially thought that it would be simpler to use an init option like options.warnings, but that might be more difficult in practice.. This is a breaking change.\nThis isn't going to happen until either v4 is released or Webpack supports require() properly for packages that specify module in package.json.\nSee https://github.com/cytoscape/cytoscape.js/pull/2103#issuecomment-438434926. You can import cytoscape from 'cytoscape/dist/cytoscape.esm.js' if you want to use ESM.  Or you can set up an alias in your webpack config.. Thanks for the PR though. That's not how to do a class selector.  Please read the docs carefully: http://js.cytoscape.org/#selectors/group-class-amp-id. @josejulio See fe93c0c3c95eba166db391d16e11ea4bf27bd3c9\nI think that approach is a bit simpler and cheaper.. This can be promoted to a bug, rather than a known issue, once an acceptable workaround is found.\nRef #2256 . It probably suffices to just update the entire bundle when a new edge is added:\n```js\ncy.on('add', 'edge', e => {\n  const newEdge = e.target;\nmyUpdateFn( newEdge.parallelEdges().union(newEdge) );\n});\n```. I could not reproduce this on the latest release.  Please provide a reproducible test case, including:\n\nBrowser version\nOS version\nA code sample that reproduces the issue.  A JSBin can be forked to easily provide a code sample.. I tried this out some more, and I can't reproduce this unless I call merge directly on an element (ele[0]).\n\nThe docs have a red warning for merge:   Use this function only on new collections that you create yourself, using cy.collection(). This ensures that you do not unintentionally modify another collection.. The screenshot is just out of date.. You haven't specified any curve style.  If you want to style edges, you should always be specifying this property.\nThe demo doesn't specify a style for some edges either, and the screenshot is out of date.. Closing this ticket, as it's just user error.  There could be a different ticket for the demo if need be.. Basically, if you want to customise edges you need to know exactly what curve style is used.  That affects what other properties are applicable and how some properties behave.  If you're ever not sure whether you are OK with the default, you should set it explicitly.. Regardless, this can't be addressed unless a reproducible test case (preferably a demo) is provided.\nClosing until this is reproducible.. It's probably the one used to get text metrics.  As far as I know, there's no other way to get those dimensions accurately.  (The canvas API is not sufficient.). Console warnings may be more invasive that I originally thought, which may have a performance impact.  For now, just the docs will be updated.. You can already call node.position() on a parent, although the parent doesn't have an explicit position.\nIf you want to restrict the positions of children, you can write an extension to do so or you can use something like the automove extension.. Closing, as we've discussed other solutions. Some renderer options were accidentally removed from being passed to the renderer in the addition of the cy.mount() feature.  Whether the options are specified under options or options.renderer should not matter.. Note: This issue affects both hideEdgesOnViewport and textureOnViewport options.. Explanation: During batching, pre-frame hooks (like rendered style calculations, style calculations) should not occur.  Similarly, no frames should be drawn during a batch.  A race condition could occur, for example, where the layer texture cache draws to a texture before the batch cycle is complete.  This would result in an invalid (mid-batch) layer texture that is considered clean, if no events dirty the texture post-batch.  A redraw would then call upon the texture cache, and the cache being marked clean could result in a scene that is not up-to-date.. Here's the file I used for testing.  I simplified it by removing CoSE so things could be tracked more easily.  You can test it by putting the file beside the cytoscape.js directory for a clone of the repo, running npm run watch:\n```html\n<!DOCTYPE html>\n<!--\nCreated using JS Bin\nhttp://jsbin.com\nCopyright (c) 2019 by jspautsch (http://jsbin.com/fivehaf/2/edit)\nReleased under the MIT license: http://jsbin.mit-license.org\n-->\n\n\n\n\n\n\nImages\n\n <script src=\"https://unpkg.com/cytoscape-cose-bilkent@2.0.2/cytoscape-cose-bilkent.js\"></script> \n\nbody {\n  font: 14px helvetica neue, helvetica, arial, sans-serif;\n}</p>\n<h1>cy {</h1>\n<p>height: 100%;\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}</p>\n<p>\n\n\n\n\nwindow.addEventListener('DOMContentLoaded', function(){\n  var script = document.createElement('script');</p>\n<p>script.src = 'http://' + location.hostname + ':35729/livereload.js';</p>\n<p>document.head.prepend( script );\n});</p>\n<p>window.addEventListener('DOMContentLoaded', function(){ // on dom ready</p>\n<p>var cy = cytoscape({\n  container: document.getElementById('cy'),</p>\n<p>elements: {\n    nodes: [\n      { data: { id: 'cat' } },\n      { data: { id: 'bird' } },\n      { data: { id: 'ladybug' } },\n      { data: { id: 'aphid', parent: 'bird' } },\n      { data: { id: 'rose', parent: 'bird' } },\n      { data: { id: 'grasshopper' } },\n      { data: { id: 'plant' } },\n      { data: { id: 'wheat' } }\n    ],\n    edges: [\n      { data: { source: 'cat', target: 'bird' } },\n      { data: { source: 'bird', target: 'ladybug' } },\n      { data: { source: 'bird', target: 'grasshopper' } },\n      { data: { source: 'grasshopper', target: 'plant' } },\n      { data: { source: 'grasshopper', target: 'wheat' } },\n      { data: { source: 'ladybug', target: 'aphid' } },\n      { data: { source: 'aphid', target: 'rose' } }\n    ]\n  },</p>\n<p>style: cytoscape.stylesheet()\n    .selector('node')\n      .css({\n        'label': 'data(id)'\n      }),</p>\n<p>layout: {\n    name: 'grid'\n  }\n}); // cy init</p>\n<p>// test async batch end\n  console.log('start batch')\n  cy.startBatch()\n  var node = cy.getElementById('rose')\n  node.remove()</p>\n<p>setTimeout(function(){\n    console.log('end batch')</p>\n<pre><code>cy.endBatch()\n</code></pre>\n<p>}, 1000)</p>\n<p>}); // on dom ready\n\n\n\n```. https://stackoverflow.com/questions/23461322/cytoscape-js-wrong-mouse-pointer-position-after-container-change\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. How would you specify an unbundled bezier for a loop?  The source is the same as the target, so the control-point-weights property doesn't make sense.. Closing for now. This isn't reproducible without a full example.  You don't even have any elements defined.\n\nPlease create a jsbin that reproduces your issue in isolation.  It should not depend on your app.. I can't reproduce this on my Mac desktop or on my Macbook Pro.  Generally though, Chrome Canary (currently v74) is not a stable release.\nWhat OS are you using?  What hardware are you using?. The same thing happens on your demo if you call node.shift() after init: eles.shift({ x }) invalidates y #2310. As mentioned in the docs, you can use SVG on nodes.\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. As the warning says, you may not return a null value.  Use a selector block to filter, or use a valid return value like 'none'.\n\nIn future, please post questions to Stack Overflow.  \n\nThe issue tracker is for feature requests and bug reports.\nThere is a large community of users on Stack Overflow who may want to help you with your code.  \nCore contributors to Cytoscape.js have limited time to spend on the project overall, and that time must be spent mostly on code maintenance and updates.\nStack Overflow answers tend to come up in Google searches better than closed GitHub issues, so it benefits other developers with similar questions.. This looks great, but now I wonder if we could make it a bit harder to make mistakes with future additions of warn() to the code.  Maybe a cy.warn() function would be useful.  That way, you can just call cy.warn() anywhere in the code without having to check the flag yourself each time.\n\nOr maybe it would be even simpler to just make this a global option under the cytoscape object itself rather than per-instance.  E.g. cytoscape.warnings(false) would disable warnings on all cy instances.  I like this second option a bit better, because the util.warn() calls don't have to change at all.  It's also a bit more flexible, since the dev could turn the warnings off and on dynamically. . I noticed that some warnings aren't suppressed with this change (e.g. some selector warnings) --- probably because the selector object doesn't have a reference to cy.  It might be simpler to use the global approach.. > Not really a fan to pollute the global scope\nTo clarify, it's global w.r.t. all cy instances -- it's not a global variable under window.. Merged. @bdparrish I've created a branch, bug/emitter-2313 for this issue.  I added some test cases.  I've also added a fix for the second test case, as your fix seems to be for the first one.\nThanks for the PR, and please review the changes when you get a chance.. It could be that the list in the docs is incomplete.  I think at least some of the cases in the code aren't absolutely necessary but are just included just in case (e.g. an old browser doesn't support it directly). . Re. ambiguity, I think the answer is always \"yes\":  Combinations should work, for every applicable data type (with the same semantics as JS itself).  You can combine operator modifiers.  Operators like < work on strings.  Whether the way JS handles automatic type casting etc. is intuitive or not is another matter, though.\nBasically, if you use < you get the same semantics as JS <.  If you use @, both arguments are toLowerCase()ed.  If you use !, your end result is inverted.. The motivation for exceptions within the lib was so that during development, a programmer could identify logical mistakes in his app and amend things appropriately (e.g. sanitise the input).  Those exceptions were originally just warning messages, because ultimately they're all recoverable by just doing nothing.  The reason they were promoted to exceptions is so that a programmer would be more likely to notice and address those issues upfront.\nYou shouldn't be able to add elements with existing IDs ever.. I think there are longterm and shortterm considerations:\nShortterm: We could update the docs for each function in the API that potentially throws.  There aren't many.  If the dev knows the exact function that throws, then if he really wants he could wrap each individual call in try-catch.\nLongterm: We could consider typed exceptions that are exposed as API.  The dev could use instanceof to check the type of exception.\nI'm not completely convinced of the utility of the longterm potential solution given the motivation for this lib's use of exceptions, but I'm open to a PR for the shortterm solution.. The point I'm trying to make is that it's not specific to batching.  That's only one place that the exceptions could be thrown --- based on which functions are used that actually throw (e.g. add).. See https://github.com/cytoscape/cytoscape.js/issues/2321#issuecomment-469718952. I think this was captured, albeit with less detail, in https://github.com/cytoscape/cytoscape.js/issues/1185.\nYour workaround is interesting, and perhaps for now you could make the \".\" invisible by replacing it with a non-whitespace character that is invisible.  Word-joiner seems to fit, as it's not considered to be a whitespace character proper.  It seems in JS regex, it's not matched by \\s.  You could try that character, if it doesn't work you could try another one in the table not matched by \\s.\nEdit: Word-joiner ('\\u2060') seems to be the better fit, since it's not supposed to allow breaking.. There is no definitive way to know when it ends.  You have to debounce using a threshold that feels appropriate.. Please provide a full reproducible demo for your issue.  Follow the instructions in the issue template by creating a demo on jsbin.. Given the code that you've written, it would be expected that memory usage increases over time.  You could do the same thing with any library that supports animations:  You're creating animation objects many times faster than the speed of the animations themselves.  That makes no sense.\nTake a look at the documentation more and read some of the relevant demos.  After that, take a look at the MDN entry for requestAnimationFrame() if you're still having trouble understanding why it would be inappropriate to use that function with an animation object.. It's an interesting idea that's been considered before, but there are several significant drawbacks:\n\nIt's slow.\nIt's no longer practical for the graph to be interactive and dynamic.  It's more like Graphviz, where you just get a static result.\nThe layout must also be appropriate for bundling.\nIt makes a pretty picture, but the interpretation problem is still present.  It can still be ambiguous where an edge begins and ends.  Some edges might even be completely hidden by the algorithm.\n\nHere's a relevant paper:  Towards Unambiguous Edge Bundling: Investigating\nConfluent Drawings for Network Visualization (web)\nOne of the authors is Tym Dwyer, from Monash University (Melbourne), who also worked on Cola.js.\nIt's not really a distinct edge type:  It's an algorithm to set bezier control points.  So if you wanted to implement an algorithm, like confluent graphs, you could make an extension that calculates those control points.  The result could be set in your stylesheet using a mapper.\n. > As for the graph being interactive and dynamic and edges being ambiguous, I do think at a larger scale this issue is present in either case.\nThere are two levels to consider:  The ordinary view is better for granular interpretation, but bundling is better for summarisation.  The ideal would probably be something like the wine and cheese demo, where the overall summary view uses bundling and the circular node detail view uses ordinary edges.. Please provide a reproducible test case, including:\n\nBrowser version\nOS version\nA code sample that reproduces the issue.  A JSBin can be forked to easily provide a code sample.. I think the documentation just has a typo.  At some point (way back) I converted parts of the documentation to use single quotes instead of double quotes and somehow this example became malformed.  The example used to be --- and should be --- ele.classes('') (empty string).  \n\nUnfortunately, this seems to be a mistake in the docs that just happened to work.  Sorry for the confusion. . If you have an issue with an extension, please file an issue in that extension's repo -- as outlined in the instructions in the issue template.  Different groups own different extensions.. I think the cache key needs to take into account the scale.. Don't need extend, just need assign to new pos obj. Could most of the logic in this block be refactored to a separate function to do the vector stuff.  That way, it can be reused for the top case and the bottom case, making things terser.. calculateSpacing( spacing, nodesBb, pos ) would be a more efficient signature to avoid unnecessary bb calcs. Maybe scaleCrossLineYCoord and X can just reference the same impl of a function defined in a block above? . OK.  It's probably just used in most functions in case a ref to this is needed in an inner function.  It may not be needed here, but a side benefit is smaller minified files.  this is always 4 chars minified because it's a keyword; self becomes something 1 char like x.. Should not be called arrowWidth.  That's actually a different value, semantically.  Better to call it edgeWidth or it will be confusing.. I just noticed we're calling .positions() twice.  I think this one has to go.. I think if the previous .positions() call is removed we can just have pos set by fn() with fn() called as described in http://js.cytoscape.org/#nodes.layoutPositions. This file should not be included, nor the Cola lib itself. Please put the graph in a separate json file to keep the demo easier to read.. Please use 2 spaces rather than tabs for indentation.. It would be good to have example values here. Preferable to use same line } else { style . Because this only depends only on the width, we may want another style property (enum) to control the values used.  For example, we may want to use\n\nheight\naverage of height and width\nmin of height and width\nmax of height and width\n\n@d2fong What cases would be needed for SBGN usecases?  Do you think it would be best to just support all above cases with another style property?\nI.e. padding-relative-to: width | height | min | max | average. The padding function should be defined manually.  defineDimFns() is only for brevity in defining width and height.  It may seem to work, but there are cases where using this for padding with break things.. width could be the default if it most dev usecases would use it.  padding-relative-to would be a different property than padding and would just control what padding as a percent would mean.\nIt's not a big deal if we're different than CSS.  We already are in several places, because CSS proper doesn't always fit well with graphs.. Using a switch statement would increase performance here and it would make sense to use default:. Need to return zero if the collection is length zero. Style property values should always be dash-case rather than camelCase.\nI think width, height, average, min, max is fine. .pstyle() / .parsedStyle() gives the parsed style property\n.pstyle().pfValue is the value in preferred units that can be used for calculations easily\n.pstyle().value is the value as specified in the stylesheet (e.g. 20 for 20%)\npfValue should be on [0, 1] for percent units for easy calculations.  Otherwise, you'd have to /100 everywhere. This check isn't safe.  A node can change from parent to non-parent and the value would still be defined.  Similarly, a node could change from % padding to px padding.. @d2fong \nI assume we're supporting percent padding only for compound parents.  That means we should check that the element is both a parent and it's padding is in percent units to use the autopadding.\nWe also need to note then that the percent padding is only for compounds in the docs.  I don't think it would be very useful for non-compound nodes, anyway.. The autopadding could already be defined if changed from a parent node to a non-parent node, so the percent check is still necessary. Parent check. Links like this need to be relative rather than absolute dirs. Looks like I reviewed an old version; merging.... - This is too expensive to run for reading properties.\n- It's potentially mutating the style for the element.\n- It removes other needed info by only giving you the value.  You often need the pfValue and/or the units as well.\nYou can't have a general function like this for style properties.  \nYou should define a general util.arrayValueAt( array, index, fallbackIndex ) function in util and use util.arrayValueAt( ele.pstyle('foo').value, i, 0 ).. You should be passing in image[i].  The function doesn't need an array of images.. If you want to use the default you need to || defaultPropertyValue for each property as it's read (pfValue, value, etc.).  You can't use the approach you have above, especially because you can't ever modify style.  Only the styler does that, and nothing changes the properties once they're created.. May be worth mentioning that it's mostly for discrete layouts.  Continuous ones (e.g. force-directed) wouldn't use this except in cases like cose-bilkent animate: end.. ready should be beside stop. maybe just eles: someCollection. We need to document the node.layoutDimensions() function.  While technically the option could also be read in layoutPositions(), the layoutPositions() function doesn't use it.. Though it's important to be concise in descriptions, it's also important to be clear enough to give users a sense of how one function differs from another.  I think users might confuse this function with ones like width(), height(), and boundingBox().  Maybe it's worth mentioning that it's for layout positioning (e.g. overlap detection) in the top description?\nBy the way, you can run gulp docs to see your spec changes reflected in the docs page.. It should replace nodeW instead I think, as the same value needs to be used for clipping, repeating, etc.. Should be ele instead of node. This function can actually stay in the dims / bb file since it's the only place it should be used. It might make sense to put this in the style / stylesheet object instead of util, as it's style related rather than general object util. I don't think the renderer should be redoing calculations like this.  Can't we use the node.padding() function to read the precalculated value?. Updating the compound bounds should update all the auto values.\nI think percent padding is only supposed to work for parent nodes.  There's not much of a usecase of using percent paddings for non-parent nodes, because they're not dynamic like parents.  The point of having functions like width() and padding() is that you don't want to repeat style rules over several files --- a change just needs to update one function.\nIf it's not documented already, we should mention in the docs that percent padding is for compounds only.. I selected the wrong line.  It's this one that can be replaced with a padding() call: \nvar paddingX2 = util.computePaddingValues(nodeW, nodeH, node.pstyle( 'padding' ), node.pstyle( 'padding-relative-to' ).value ) * 2;. Needs .bind(). Should this second part be considered only for compounds?. That's a good point, so it's probably fine as-is.  Thanks!. This is a good catch, but it should be checking Infinity rather than Math.Infinite.  Looks like a typo. Debug page changes shouldn't be committed unless it's adding a debug feature etc.. [].concat( arrA, arrB, ... ) is cheaper.\n.apply() is expensive. Constants for .05 .95 etc.  These are used in several functions. The duplicate assignment isn't needed with one property now. Same with this prop. Maybe better to name the prop error so it's not a double negative condition . I think the full width is supposed to be passed here.  Could we debug this Wed?. Is is possible to use the same function as the roundrect or could this function be pulled out to math and possibly have the roundrect function use checkInEllipse?. Is this a typo?. You need to require() the set.js file under /src so the polyfill is used in case the code is running in an old environment where Set is not supported.. Your change looks fine on this line, but ? true : false could be removed to make it shorter.. It doesn't make sense to util.copy() a Set, since it's not a plain object ({}).  See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\nOne way to copy a set is new Set( oldSet.values() ), but you might want to experiment with different ways of copying if that's slow.. I think coreInit is doing too much.  Probably mount() only needs a subset of what's going on here.  For example, re-mounting would destroy all the existing elements.... Not sure about this.  The alignment is a bit off for thick edges with small arrows:\n\n. I think the triPts may not be aligned to the endpoint:\n\nDebug page for edge style:\n'width': 5,\n 'arrow-scale': 0.25,\n. Ready doesn't have anything directly to do with rendering: It's about when the data is loaded and the layout has finished, because either could be async.   Indirectly, ready happens around the same time as -- but a bit before -- the first frame.  Ready should just happen once per init -- because it's about init -- so remounting shouldn't affect it.\nYou will have to handle the animation loop.  You'll need to stop the loop at the start of remounting and then start a new one towards the end of remounting:  Rendered instances need to hook into the renderer's render loop to sync animation calculations just before rendering each frame.. Everything in options should only be used by the constructor.  The only exception would be cy.json(), because its output is the options.\nSo you probably only need to modify _p.options.renderer. We can't really assume this generally.  The dev can specify which renderer to use at init, so we also probably need to have a rendererOptions argument for options.renderer.\nIf unspecified, it should use the canvas renderer like you have here.. As for the later refactoring part, we probably just need to address this line (301-310).\nThe defaults handling could be moved into cy.initRenderer() so you'd just pass in options.renderer here and in the constructor.. Should we override instead of extend?  If I specified renderer options it would only be to specify everything new from scratch.. undefined would be set with util.extend() --- which behaves like Object.assign()\nProbably better to fall back on defaults instead of undefined here.. Say I did\n```js\nlet cy = new Cytoscape({ container: div1, renderer: { name: 'canvas', foo: 'bar', baz: 'bat' } }); // 1\ncy.mount( div2, { name: 'webgl', baz: 'bop' } ); // 2\n```\nAt 2, we have { name: 'webgl', baz: 'bop', foo: 'bar' } but I didn't ask for { foo: 'bar' }.. The only usecase for setting the renderer options differently than init -- that I see -- is if you want to change the rendering technology / renderer class used.  If you do that, you probably don't want old values around -- they could potentially conflict in the worst case.. You're right. The correct value is undefined. My mistake. It's because the 'auto'/nil value can only be calculated later by the renderer.\nThe change makes line 58 clearer, though it's not strictly necessary.. Makes sense.. I think so.  Any internal call to mount() that wanted the previous options taken into account would pass the previous options in, I think.. It's usually better to have the NullRenderer.  For dev-facing API, we should use a NullRenderer.  But that means that mount() shouldn't re-use unmount().  We don't want a NullRenderer unnecessarily when we're just about to create a CanvasRenderer.\nRe. headless(), I don't know if that would work generally.  Our internal renderers may follow that pattern, but I don't think that's part of any API contract.  The renderer API is already a bit loosely defined, and I'd rather keep the API space as small as possible for it until it's formally defined for external renderer extensions.  \nI'd rather check something like this._private.renderer.isHeadless() by adding that function to the BaseRenderer (false) and the NullRenderer (true) -- so that future renderer extensions don't have to worry about defining special functions or properties.. I don't think the copying is necessary for these functions.  I don't think we mutate this list in functions like toggleClass(), and whatever json is specified for an element at init is considered owned by that element.  So it would be cheaper to avoid copying, if possible.. Just some background info: We try to avoid copying except where absolutely necessary for performance reasons.  We've run into cases where copying causes issues before.  \nCopying can affect large graphs.  For example, something like this can be common:\n```js\ncy.elements().forEach( ele => { // this callback would have many array copies made\n  ele.toggleClass([ 'foo', 'bar' ]);\nif( eleIsBaz( ele ) ){\n    ele.addClass(['baz']);\n  }\n// maybe even more class calls\n} ); \n```\nIt all adds up, so we try to keep the lib as lean as possible to give the dev who uses the lib more flexibility.. Since the code is the same apart from assigning classes, you could remove the if/else and just use a ternary operator (?) inline in the declaration of classes.. I was thinking of the third one basically:\n```js\nlet classes = params.classes;\nclasses = is.array(classes) ? classes : is.string(classes) ? classes.split( /\\s+/ ) : null;\nif( classes != null ){ for( let i = 0, l = classes.length; i < l; i++ ){\n  let cls = classes[ i ];\n  if( !cls || cls === '' ){ continue; }\n_p.classes.add(cls);\n} }\n```\nWhat you have looks clearer.. The lineCap should be reset to 'butt' at the end of the function.  \nBackground: We don't use .save() or .restore(), because they're expensive.  So you have to clean up the canvas state for things like lineCap, transform, etc. manually.. context: null would be clearer as we also support a headless mode (Node.js).. This might not be necessary if we use .mjs.. This could be automated like external so new deps can be added without changes to the config.. Probably always need umd. It looks like this line was missed. Is babel-register strictly necessary or could we get by with @std/esm?. When I revise this line, I get the following in the debug page while npm run watching:\nUncaught TypeError: Cannot read property 'finiteLinesIntersect' of undefined. The context is used in each emit with Function.apply().  If it's null, it would be window in the browser and global in Node.. The current UMD made by Webpack automatically allows for using external dependencies with each of globals, CJS, AMD.  This was the main reason we switched from Browserify to Webpack.  Is this not possible with Rollup?  \nWould Rollup be able to automatically support CJS and globals with external dependencies?  If we go this route (dropping AMD support), we'd have to release a new major version (v4).. (4) The method used for checking whether you have a colour or a gradient will be bad for maintenance.  It would be better to use a flag in the style property, and it seems that the style property parsing could be handled a bit cleaner.  For example, there should be no colorOrGradient2tuple.  Colours and gradients should be parsed separately so the style property can better represent which one is detected.\nFurther, you can't assume the browser has Array.isArray().  That's a relatively new feature, and you break support for old browsers if you do that.  Look at the is.js file if you want to do same type checking.  And what if radial gradients were supported in future?  The array check would be ambiguous.\n. (1) Colour handling shouldn't really be happening in the edge drawing function.  There's a more general function that sets stroke colour, and that should be amended instead.\n(2) Supporting gradients means that we should support them wherever a colour property can be specified.  That means support for gradients in strokeStyle() and fillStyle().. sp. (5) If you're not iterating, you shouldn't use rs.allpts.  Use rs.source and rs.target.. Also (4):\n(4) The method used for checking whether you have a colour or a gradient will be bad for maintenance.  It would be better to use a flag in the style property, and it seems that the style property parsing could be handled a bit cleaner.  For example, there should be no colorOrGradient2tuple.  Colours and gradients should be parsed separately so the style property can better represent which one is detected.. I don't want this on, as we also support Node.  Each use of a browser global should have to be manually toggled per file with eslint comments.. Fair enough. I don't care about unused arguments.  They're often used here to make function signatures clear.  Because we're not using something like TypeScript, this is probably the clearest we can make it.  So I'd rather turn off the args option in the eslint config rather than changing the code for each of these.\nThe option for eslint errors when a var/let/const variable in a block isn't used is good and should remain.. This gets used to generate docs, so removing the signature is problematic.. This is an example of where it would be OK to remove the args, but I'd rather just remove the eslint rule instead of evaluating which should be removed and which ones not.  I'd rather address those when those particular parts of the code are being worked on and refactored.. I generally don't like ignoring an entire line for all rules.  I think it's better to selectively disable the rule of interest in case there's another actual problem in the line in future.. How about line-dash-pattern?. These properties should all be prefixed by line- to be consistent with the existing line properties.  \nIf we want a global dash-style, clients may expect it to work on things like node borders.  It's probably best to keep things separate.. I don't think these types are necessary.  number and numbers should suffice.    Future rendering implementations might not allow for with-units values.  And I remember some browsers in the past not yielding precise results, so it's probably best to just consider the values to be unitless and relative.. Generally if cxtProp.mapped != null\nThe function case is probably cheaper as cxtProp.mapped === types.fn. Is the copying strictly necessary?  It adds expense.\nIt's certainly not necessary in the non-mapper cases.. Makes sense. If we use this approach, we must delete ele.updateMappers() and style.updateMappers().. Better to use the collection than an array. Better to use merge() on a collection than push. I won't go into too much detail, because they should be removed in any case:  They are internal functions to update only mappers, bypassing the rest of the style checks.  They were used at one point, but they don't seem to be used anymore.  They should be removed as a part of this PR to avoid incompatibilities.. If the goal is to avoid the expense of applyParsedProperty() for function mappers, could we use an early exit condition within applyParsedProperty()?  Then all the logic for this purpose would be contained in the same function.\nAdditionally, the top-level parse() function is just about caching the properties to avoid parsing expense.  It's the parseImpl() function that contains all of the real parsing logic.\nIt's also worth considering that line 39 would copy for all property types, whereas the code in your comment is better scoped:  Copying happens only for function property values in your comment.. ",
    "chrtannus": "started\n. Just do (1). It is a renderer specific thing and that renderer only accepts American spellings. That's it!\nOn 2011-12-16, at 5:27 PM, Max Franz wrote:\n\nDone for core and element/collection APIs.  \n(1) I don't think this can be easily done for visual styles, since the styles are key-value pairs.  We could consolidate to American spellings --- that would fix setting --- but that would mean lookups on English spellings wouldn't work.\n(2) Another alternative is to do preprocessing on style related functions, but this would either fail when returning the whole object or it would return duplicates.\n(3) We can keep the English aliases but without documenting them.  That way, they're a happy accident if they work for someone but we don't guarantee that English spellings work everywhere.\n(4) Another option is to remove style functions that return the whole object.  That means eles.style() and eles.bypass() wouldn't work without any arguments.  Then we can do (2) without issue: Duplicates don't matter anymore.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Cytoweb/cytoscapeweb/issues/70#issuecomment-3183473\n. How about simple text?\n\nvar style = {\n  selectors: '\\\n    node { ... }\\\n    node:selected { ... }'\n};\nShould the client code be able to change the selectors after cytoscape is initialized/rendered? If so, a real object is better, of course. Otherwise, cytoscape can parse the text and create any internal representation that solves the problem.\n. Or provide an object with functions for adding, removing and listing selectors:\nInternally, it can store them in arrays, but the internal structure is not exposed.\n. Depends on https://github.com/cytoscape/cytoscape.js/issues/359\n. ",
    "dlf42": "What if no need in intersections and just need to move a group of nodes? How to implement it? \nI have an idea to select all related nodes on grab and move it, but maybe there's a better way. ",
    "Sattvic": "How can I unsubscribe from email updates?\nThanks\nOn Jan 15, 2014 1:54 PM, \"Max Franz\" notifications@github.com wrote:\n\nClosed #65 https://github.com/cytoscape/cytoscape.js/issues/65.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/65\n.\n. \n",
    "yxl01": "Great idea.  Is there a framework in place in cytoscape.js to allow adding graph theory functions?  There may be multiple use of such graph theory functions, but one use case I always want is to use these functions to highlight or animate the graph: shortest path, spanning tree, etc. \n. I was thinking about this use case scenario: find a spanning tree for the graph -> with edges/nodes found by spanning tree function, find the shortest path from node a to node b -> highlight edges found by shortest path -> animate the shortest path (eg. pulsing node and edge from a to b along shortest path).\nSo chaining is important but what gets passed from one function to another is the collection of edges (or nodes or both). I am not sure the current function chaining would allow this. Maybe the function should return eles instead and use \"underscore.js\" to attach the functions to the eles collection?\n. @gioper86, could you share your workaround?\n. How about relative offset (x,y) from the ends for the labels on both sides that can be set dynamically for each label/edge.\n. How easy would it be to extend this to support L shape (zig-zag) segments for the edges (#  428)?  \nCheck out this implementation: http://jointjs.com/demos/fsa\n. I started writing this plugin usinng edgehandles as an example.  I am almost done with the coding but run into a performance issue.  I am using the node.css() to change the width and height of the node in the mouse move event.  There is a lot lagging.  Am I using the right function to change the width and height of the node?\n\nSent from Kaiten Mail. Please excuse my brevity.\nOn April 10, 2014 11:19:47 AM CDT, Max Franz notifications@github.com wrote:\n\nThat's an interesting idea, but it's more suited to a plugin -- similar\nto how edgehandles is used for editing.  There are edgecases to\nconsider, like size mapped to a data property, that a plugin would\nhandle with options.  It's also outside the scope of the core (managing\ngraph state) and the renderer (drawing elements).\nIf you're interested in writing a plugin, it's documented here:\nhttp://cytoscape.github.io/cytoscape.js/#plugins\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cytoscape/cytoscape.js/issues/490#issuecomment-40106107\n. I would like to add to have appropriate api to interact with these \"edges\" as a whole: hover over one segment of the \"edge\" auto triggers hover effect on all other segments of the same \"edge\", select edge, delete edge, animate edge, events, moving of entire \"edge\" when source and target nodes are moved, etc.\n\nAlso it should also work well with different layout - immediate nodes should not be visible to layout algorithm.\n. ",
    "armish": "thanks a lot!\n. Oh OK; I didn't know about the major refactoring. I have a question on the upcoming release -- but it will probably be better if I ask it on the mailing list then. \nThanks!\n. seems like we don't have the cytoscapeweb google group anymore :\\ Do we have an alternative?\n. Thanks Max -- that fixed the problem.\n(Also upgraded my node to the latest version)\n. ",
    "smwgit": "I should add that I have tested this in Firefox 11 and Chromium 17 in Ubuntu 10.04 64 bit.\n. Oops it looks like this is probably the result of the JQuery layout plugin. Changing the outer pane from \"body\" fixed this up. Sorry!\n. That didn't fix it sorry... I'll look into the CSS once I have some extra time, but I'm not sure if that's the problem. I have the same issue on my home computer (same browser, OS) and, while the screen resolutions are different, the gap there is much larger (~455 px). In addition, the issue is (somewhat) present on the Cytoscape Web demo page - I don't see a selection box at all when using Firefox (it's there in Chromium), even when making the div 500px tall using FireBug. So this might also be a Firefox or JQuery bug? Either way, I'll keep you posted. And (at least for me) it's not a pressing matter... I just happened to notice it.\n. Well it looks like this isn't actually an issue - it now works both on my site and yours. I ended up closing a bunch of stale tabs (Firefox suddenly started crashing continuously which is highly unusual) so I'm thinking there must have been some interference somewhere. I'll try doing the same on my home computer, but it looks like it's not a bug in Cytoscape. Thanks for your time!\n. ",
    "ghost": "The current plan seems to be to use WebGL directly. The size of the minified Three.js library was a bit large (400kb) and this allows for some optimization such as reducing vector dimensions in shader calculations and finer control over how data is sent to the GPU. The current plan for text is to draw directly using the canvas object's 2D context, using the filltext() methods. This was found to be faster than texture-mapped text in previous tests and was much faster than polygon-based fonts tested with Three.js.\n. Good list to start: tap, tapstart, tapend, taphold\n. A few canvas and the Three.js WebGL-based library were tested. It was found that canvas 2D libraries tend to slow down at around 400 draggable nodes with 400 edges. Three.js was able to reach 2000 nodes and 2000 edges with decent framerates (using canvas 2D context to render text, which was found to be the fastest approach, faster than texture-mapped text), but had a large minified library size (400kb).\n. Both methods use bitmap caching. It could be smart to consider the number of canvases used versus the amount of memory they require, such as for devices that have less memory.\n. Resolved few months ago\n. Currently, the tests using the canvas libraries, the Three.js tests, and the direct WebGL approach all have node dragging. The direct WebGL approach currently uses a less sophisticated approach (using distance comparisons).\n. Resolved few months ago\n. e.g. \nmousedown on node => node.trigger(evt)\n. Where can I find a list of the events that the core supports for proxying?\nEdit: In the element prototype, it looks like this would be every function taking in parameters (data, callback)\n. It contains some support for drawing text using triangles. The library has features that make use of premade font data to get coordinates for the triangles that make up the text, such as ones here: https://github.com/mrdoob/three.js/tree/master/examples/fonts. This seems to be the method of drawing text that is most associated with Three.js.\nI think using a loader and putting time-intensive calculations in a web worker to keep the UI responsive are both good ideas. Some of the font script files are larger than 100 kb, a loader would indicate that the application has not frozen or stopped working while it loads scripts and creates object instances.\n. I just did a test using the triangle-based text rendering, with a mild slowdown at 400 nodes and 400 edges. A different approach is to use 2 canvas objects, stacking them together, and using the top one as regular 2D canvas to render text.\n. I did another test using canvas 2D context to render text, and Three.js WebGL for the nodes and edges. Performance was much better, with acceptable framerates with 2000 nodes and 2000 edges. Looks like using the 2D context to produce text is one way to go. A third way to display text is to use HTML div elements containing text and put them on top of the WebGL canvas.\n. That sounds good. I could also do a final test using textures created by canvas that contain text. For this method, canvas is only involved when the text changes, and all the remaining drawing is done by WebGL.\n. I did do a similar test with Three.js that uses canvas 2D to make textures. The speed was a bit lower than just using canvas 2D to draw text. However, it could be still worth another try to test on the direct-WebGL implementation.\n. Sounds good. I've gotten the direct WebGL implementation working with basic node picking and node dragging. The framerate is decent with 4000 nodes and 4000 edges with canvas 2D text rendering. The scene draws in about a second. Perhaps I could start integrating with the core?\n. Ok, the equation is too complicated to solve. This is what it looks like:\n4_(P0_(x-1)+P1_(1-2_x)+P2_x)(-A+P2_x^2+P0(x-1)^2-2_P1_x_(x-1))+4_(Q0_(x-1)+Q1_(1-2_x)+Q2_x)(-B+Q2_x^2+Q0(x-1)^2-2_Q1_x_(x-1))=0\nWhere the mouse is at (A, B), and the control points for the quadratic Bezier are (P0, Q0) to (P2, Q2)\nIf we can't find solutions for it, it means we will have to use approximations, but I can't think of any good ones.\nEDIT: The equation is solvable (it's a cubic polynomial equation), but takes some work.\n. (This was solved using an algorithm for solving cubic polynomial equations)\n. Alright, I'll replace the event binding with regular event binding.\n. Currently, edges use a 3-sided convex hull as the bb. The renderer can simply choose to ignore elements that don't pass the bounding box check when doing selection. Labels can use a 4-sided bounding box, but I'm not sure if it is necessary to make labels selectable.\n. One way is to add a method to the renderer that returns the maximum dimensions of the network. Would that work?\nFor drawing parallel edges, we need this data for every edge:\na) The total number of edges between this pair of nodes\nb) The index of this edge amongst the above edges\n. That's alright too. So the core would calculate the parallel edge dimensions, but this means we would need to specify how parallel edges are drawn.\n. One way to draw them is to align the 2nd control points along a straight line that passes through the midpoint of the distance between the nodes, and is perpendicular to this distance. The current Canvas renderer uses this approach.\nThe parameter would then be how the spacing between the control points is calculated. This spacing will be dependent on the distance between the nodes, and is currently set to 1 / parallelEdgeCount() * nodeDistance.\n. The details of the edge arrangement in this way can be complicated, it might be simpler to just ask the renderer for dimensions. It can still be fast as the renderer doesn't necessarily have to do recalculations for the dimensions; it can just keep track of the dimensions as edges are added/moved around. It may not be a major dependency on the renderer as the method will be an interface method, similar to the renderer's current methods.\n. For the current renderer, because the Bezier edges are clipped (don't extend all the way), the control points are slightly shifted. This is to ensure that at the endpoint, the edge points directly at the center of the target node.\nThis could be specified in the core, but we would have to move some stuff.\n. That's one way to go. For edges, the ends will point at the nodes only if the endpoint, the control point, and the node lie on the same line.\nIt looks like the edges will not only have variable control points, but endpoints as well. Canvas doesn't have a function for drawing part of a Bezier curve, so we need to specify the coordinates of the end of the curve. However, we can find its coordinates once we have the control point, by doing a line-circle intersection using the line connecting the control point and the node centre, and the desired radius around the node (so edges will not get closer to the node than this radius).\n. Here are some functions of interest available in https://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/cytoscape.renderer.canvas.js:\nBounding box rough check if a Bezier crosses a box (useful for drag selection)\nboxInBezierVicinity = function(x1box, y1box, x2box, y2box, x1, y1, x2, y2, x3, y3, tolerance)\n-tolerance gives the padding to the box used for edge width\nPrecise check if a straight edge crosses a box (rough check not needed as this was relatively cheap)\ncheckStraightEdgeCrossesBox = function(x1box, y1box, x2box, y2box, x1, y1, x2, y2, tolerance)\nPrecise check if a Bezier crosses a box\ncheckBezierCrossesBox = function(x1box, y1box, x2box, y2box, x1, y1, x2, y2, x3, y3, tolerance)\nRough check if a point is near a Bezier\ninBezierVicinity = function(x, y, x1, y1, x2, y2, x3, y3, toleranceSquared)\nSquared distance from a point to a quadratic Bezier\nsqDistanceToQuadraticBezier = function(x, y, x1, y1, x2, y2, x3, y3)\n. Hi Max,\nWould it be easier to instead have a method in the style class that calculates control points for all edges? The running time would be O(n), but the current method takes a set of parallel edges. There are O(k!) possible sets of parallel edges for k nodes. I understand that the method was made to take only a set of edges to reduce re-calculating edges whose control points have not changed.\nThanks,\nYue\n. I already wrote a function to calculate edge indices. You can find it here:\nhttps://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/cytoscape.renderer.canvas.js\n(Line 121, function findEdgeMetrics)\nThe function will need to be re-called whenever edges are added or removed. It works by iterating over the current set of edges and keeping track of the number of edges it's seen for each node pair.\nFor node selection colors, does this mean the core is going to handle selections? What about hover events, such as changing the color of an element as a visual indicator of selection when the user moves the cursor close to an element?\n\nOn Wed, Jun 27, 2012 at 8:36 PM, Max Franz <\nreply@reply.github.com\nwrote:\nYou don't need to worry about state.  That's taken care of for you.  I'll\nadd the index function tomorrow.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/cytoscape/cytoscape.js/issues/132#issuecomment-6619335\n. If the network is highly overlapped, it is possible to loosen it by multiplying the coordinates of the position of every node by a certain factor, scaling the network. Zoom out afterwards will achieve the desired effect.\n\nE.g.:\nfor (var i = 0; i < cy.nodes().length; i++) {var a = cy.nodes()[i]; a.position({x: a.position().x * 2, y: a.position().y * 2})}\n. Yes, if you have a style.css file, initially set the width and height of the Cytoscape div.\n. It's possible this is a bug, but if using integers for IDs can work, I would stick with that for now.\n. As an update, the above was found by looking at values returned by cy.pan() and cy.zoom().\n. For clicking edges, the upcoming canvas 2d context based renderer should make it easier, as I'm not sure if the SVG implementation uses the distance calculation.\n. Have you tried var collection = cy.nodes(\"[weight > \" + value + \"]\");\n. Sounds good, we'll have to make some changes to have multiple canvas instead of a single one.\n. This has been resolved since 3f77149e5ae2ab6882a388885bd2a7c731e37d8e\n. Yes, we do:\nCurrently, the following work:\ncy.nodes()[0].css(\"background-image\", \"url(http://regentsparkcollege.org.uk/wp-content/uploads/2012/09/test.jpg)\")\ncy.nodes()[0].css(\"background-image\", \"http://upload.wikimedia.org/wikipedia/commons/7/7b/Hawker_P._1127_-_NASA.jpg\")\n. These functions are of interest:\n``` js\nIntersection.intersectEllipseLine = function (c, rx, ry, a1, a2) {\n    var result;\n    var origin = new Vector2D(a1.x, a1.y);\n    var dir = Vector2D.fromPoints(a1, a2);\n    var center = new Vector2D(c.x, c.y);\n    var diff = origin.subtract(center);\n    var mDir = new Vector2D(dir.x / (rx * rx), dir.y / (ry * ry));\n    var mDiff = new Vector2D(diff.x / (rx * rx), diff.y / (ry * ry));\n    var a = dir.dot(mDir);\n    var b = dir.dot(mDiff);\n    var c = diff.dot(mDiff) - 1.0;\n    var d = b * b - a * c;\n    if (d < 0) {\n        result = new Intersection(\"Outside\");\n    } else if (d > 0) {\n        var root = Math.sqrt(d);\n        var t_a = (-b - root) / a;\n        var t_b = (-b + root) / a;\n        if ((t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b)) {\n            if ((t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1)) result = new Intersection(\"Outside\");\n            else result = new Intersection(\"Inside\");\n        } else {\n            result = new Intersection(\"Intersection\");\n            if (0 <= t_a && t_a <= 1) result.appendPoint(a1.lerp(a2, t_a));\n            if (0 <= t_b && t_b <= 1) result.appendPoint(a1.lerp(a2, t_b));\n        }\n    } else {\n        var t = -b / a;\n        if (0 <= t && t <= 1) {\n            result = new Intersection(\"Intersection\");\n            result.appendPoint(a1.lerp(a2, t));\n        } else {\n            result = new Intersection(\"Outside\");\n        }\n    }\n    return result;\n};\nIntersection.intersectLinePolygon = function (a1, a2, points) {\n    var result = new Intersection(\"No Intersection\");\n    var length = points.length;\n    for (var i = 0; i < length; i++) {\n        var b1 = points[i];\n        var b2 = points[(i + 1) % length];\n        var inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n        result.appendPoints(inter.points);\n    }\n    if (result.points.length > 0) result.status = \"Intersection\";\n    return result;\n};\nIntersection.intersectLineRectangle = function (a1, a2, r1, r2) {\n    var min = r1.min(r2);\n    var max = r1.max(r2);\n    var topRight = new Point2D(max.x, min.y);\n    var bottomLeft = new Point2D(min.x, max.y);\n    var inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n    var inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n    var inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n    var inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n    var result = new Intersection(\"No Intersection\");\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n    if (result.points.length > 0) result.status = \"Intersection\";\n    return result;\n};\n```\n. Resolved since a88bef42b3cf125543f72f6f998b72c99b72ffd7\n. Implemented; may need to adjust spacing, thickness, and length of dashes as a function of edge width\n. I don't think we have a paper for cytoscape.js to cite yet, but I suspect the next release using the faster Canvas renderer may have one. Otherwise, we'd have to ask Max.\n. This is an excellent idea. I'll try to get it done by Thursday.\n. Resolved since de14b2b6773359bb47eaf292a3fe8294dc9d761f\n. Resolved since 90d68900da738edd565f453f7655e63507f6269e\n. Hmm, why not borrow the build from the core? Wouldn't this be easier?\n. Alright, sounds good.\n. The current implementation does use that approximation to check before doing actual calculations. The current precise calculation for nodes is not much more expensive than using a bounding box. It uses several checks, and runs them in order of increasing cpu cost. The overall cost is somewhat comparable to the calculation needed to generate the bounding box.\n. Should be working now.\n. Ok, I'll definitely look into this!\n. Should be working now, especially with 5eb3e73ab1d51047a85f899247a31f604fbd3780 which makes a slightly more general approach than before to the pointer projection problem.\n. Yes, I think not limiting the amount of graphs per page would be great. Thanks for raising the issue.\n. Max, we can probably do this by instead of having a Cytoscape global variable, we could possibly have an array of them.\n. Ah, seems CJS already works with multiple instances. It also makes multiple instances of the renderer, so I need to make the variables per-instance rather than per-page.\n. Implemented since 66c3a3a3992329c83ed277826edf139da92a1e56\n. Hmm, I'll definitely take a look into this once I rewrite the renderer. I can do the rewriting fairly quickly, however.\n. I believe this is not intentional, and indicative of something that had not been entirely completed. I will take a look into this within the week.\n. Ideally, it should work for all the major browsers. This would be easy if the major browsers had some sort of convention they agreed upon so that we don't need many parts of code that check what browser is being run.\nIdeally, we should support IE, Firefox, Chrome, Opera, Safari (iPad one too), and the Android browser. If the remaining browsers follow the conventions of these browsers (if there was such a convention), then they should work as well.\n. This sounds like a good idea.\nIt looks you want to be able to move the nodes, while having them all visible on the screen at the same time. This is like moving nodes, and the viewport refreshing itself smoothly along with the move to keep everything visible.\nThis sounds like a good idea. We could definitely take a look into this. If things go well, I'll have taken a look at this within the week.\n. I tested FF 16.0.1 on MACOSX 10.6.8 using the new updated renderer, seemed to work ok.\n. Implemented since 21c2603753ea132e3f599d7670111ee250c68194\n. I see. I guess either way works.\nEdit: The code refers to the list as the cache, eg. getCachedEdges(). It is a (shallow) cache of the core's elements, updated when needed.\n. Hmm, isn't it kind of important for displaying dialogs using qTip? I thought that was a common feature.\n. Quoting a commenter:\n\"\"\"\nNode position doesn't work because it's relative to graph. If graph gets\nzoomed the node position relative to window changes but relative to graph\nstays the same.\n\"\"\"\nHe may not be fully correct, but I guess there is the convenience factor.\nAll the renderer event triggering now pass in $$.Event(mouseEvent or touchEvent, \"mousemove\"), eg., ele.trigger(new $$.Event(..., {type: \"click\"})), so access to the original event object is guaranteed.\nThe renderer now creates the $$.Event. This is faster because can make 1, pass it in 10,000 times, instead of the previous implementation which I believe called ele.trigger(\"mouseover\") many times and seemed to cause creation of  a $$.Event object 10,000 times. We didn't lose anything in the change, all previous information passed is still available, and now more, including pageX/pageY.\n. I guess that was part justification part explanation of how/why for changes.\n. I've fixed it, but I'm not sure on the status of how the PanZoom plugin will be supported. However, it does seem relatively simple to support, so it shouldn't be a big surprise if it continues to work.\nEdit: Maybe Max can confirm this if he has time. Otherwise, I guess we can assume it will work, as it seems to take advantage of Cytoscape.js's modularity.\n. I recently updated the renderer, and the projection calculation.\nThe reason I started using pageX and pageY versus clientX and clientY is that it seems to behave more consistently across browsers.\nIf you wish to try the updated calculation, type in bash shell or Cygwin for Windows-based systems to build the updated code:\ngit clone git://github.com/cytoscape/cytoscape.js.git\ncd cytoscape.js\nmake clean\nmake all\nThe built files should be in the build directory.\nThe mouse calculation is all done in the function projectIntoViewport(pageX, pageY). If the current solution doesn't work, you can replace the its contents with your solution:\n```\nvar rect = this.canvas.getBoundingClientRect();\nvar x = mouseEvent.clientX - rect.left;\nvar y = mouseEvent.clientY - rect.top;\nreturn [x, y];\n```\n. Sounds good. This is a good way to produce a cost-effective background.\nAlso, with WebGL, we can optionally produce Instagram-like filters on the background and even foreground.\nEdit: It could be optional, and depends on availability.\n. I'll look into it\n. Really sorry about this, will focus on this tomorrow (that's when I happen to be at the workplace). Actually I'll take a look now.\n. Hmm, if the offset happens to be constant, it could be an easy fix.\nNope, it's a constant amount for every additional nested layer. Total offset = k * numLayers.\n. This is actually a very general problem. Making a solution here creates a general solution for pointer calculation in cross-browsers. I've not seen this done before.\nAnyhow, it looks like ordering of elements has to do with it.\nOn the doc page, I added logging to the function with:\ncy.renderer().proto.projectIntoViewport = function (C,A){var i,G;var D=0;var B=0;var F;F=this.data.container;var E=false;while(F!=null){if(typeof(F.offsetLeft)==\"number\"){D+=F.offsetLeft;B+=F.offsetTop; console.log(\"node\", F, \"offsetLeft\", F.offsetLeft, \"offsetTop\", F.offsetTop, \"scrollLeft\", F.scrollLeft, \"scrollTop\", F.scrollTop); if(F==document.body||F==document.header){E=true}if(!E){D-=F.scrollLeft;B-=F.scrollTop}}F=F.parentNode}i=C-D;G=A-B;i-=this.data.cy.pan().x;G-=this.data.cy.pan().y;i/=this.data.cy.zoom();G/=this.data.cy.zoom();return[i,G]}\nThe parent div and the cy div have the same offsetLeft, offsetTop. Thus, it is added twice. However, for some cases, we ought to add it twice, even if it is the same. For other cases, we needn't add again, or at least add a different value.\nGenerally, if you have a div around the container, done by the following:\nvar c = document.createElement(\"div\");\n  c.appendChild(cy.container());\n  var v = document.body.children[1] // \"content\" div\n  v.appendChild(c)\nAnd the top of the cy div is as far as it can be in that div, then we don't need to add.\n. Anyhow, for now, the most short-term solution to your problem is to edit\ncy.renderer().proto.projectIntoViewport and subtract the incorrect offsets from the return value.\n. Anyhow, seems fixed now. After all that, the fix was just a single line of code. :)\n. Awesome! Sounds good to me.\n. This was caused by something related to #198..., the cause is not correctly calculating where the Cytoscape container is, so the program thought the mouse was outside the container and turned off the events. I applied the solution updated solution to the function calculating the container's position and it seems to work now with nested HTML elements.\nAlso, I apologize for my brief health-related absence which delayed the response to this issue.\n. Currently, mouseovers and mouseouts on nodes/edges also cause a mouseover or mouseout on the cy object. Maybe this isn't intended?\n. Hi, as far as I can tell, the values such as data(color) are not dynamic.\nSetting var node = cy.nodes()[0], doing\nnode.data(\"height\", 50)\nnode.css({\"height\":\"data(height)\"})\nnode.data(\"height\", 100)\nDoes not cause the height to increase from 50 to 100.\nHowever, if you wanted to change the height or shape dynamically, you can do node.css(\"shape\", \"triangle\") or node.css(\"shape\", \"pentagon\"), or node.css({\"shape\":\"pentagon\"}). You would have to call this function each time the shape/color should change.\n. We can try caching the current viewport, but when dragging, we may still need to draw the parts that weren't covered in the cached viewport. That's the main part to consider for the caching approach.\n. This would involve drawing a high resolution graph; storing it could take a high amount of memory, and it could take a while to draw. We may need to redraw it every so often, which could cause a delay during the drawing. Also, I think image scaling does use interpolation such as linear interpolation.\nEDIT: However, we could certainly attempt some of these approaches to see how they turn out.\n. Fixed by 1fc062d99e43d11277ac6c708d9d913de65fea34\n. Should be fixed by a4df81d10631ded46bc36072c732067f540e8f15\n. Hi,\nWe currently don't have API for adding node shapes directly, but if you're looking to add an image to a node shape, have you tried looking at the background-image property, such as:\nnode.css(\"background-image\", 'http://regentsparkcollege.org.uk/wp-content/uploads/2012/09/test.jpg')\n. Hi, I already merged the change you made regarding the node border that was discussed in issue #297 (https://github.com/cytoscape/cytoscape.js/issues/297). Thanks for your input.\nYou can make a pull request for this change if you want, or I can merge it in some time in the next few days.\nThanks!\n. Thx for your fast response!\nI'm fine at the moment. These \"warnings\" are not a real pain for me.\n. I am in favor of MIT license.\n. I checked out the nodes.incomers() function, but i didn't get how can I find left, right or center using that function. I am not able to find a way to do the above mentioned procedure. In my case, all the children have a single parent.\n. <canvas id=\"cy\" class=\"testclass\"></canvas> should be changed to <div id=\"cy\" class=\"testclass\"></div>.  \nThe target of cytoscape() is used as the container for the graphs\n-- edit --\n I was having the some issues for a sec :( ... So I thought I'd pipe in. A good place to go are the examples if you wanted to look at more cyto stuff.. ",
    "mephux": "How are you getting 10k nodes / 20edges. I am having problems just getting it to 2k or 1,500k currently. Any tips?\n. Sorry, should have clarified I did that. My perf issues seem to come from .add / Is there a reason it creates another Collection object vs just adding it to cy._private.elements? Is there a way around the cost of creating an $$.Elelemt object for each node and edge?\n. I have the reverse of this issue. fit: true does not seem to keep the viewport resized properly and for some reason the default zoom level does not work. Any ideas?\n. Any status on this issue? Maybe you could point me in the right direction to implement and send a pull request?\n. Thanks for the information @maxkfranz -- I pulled down the unstable branch and will see what I can do. Question, in the debug/index.html examples subgraphs appear to be separated for the following layouts: grid, dagre, circle & breathfirst. Is this just a coincidence or is something being added to make this work?\n. roger.\n. @maxkfranz resize doesn't seem to do anything for me. How can i reposition the graph on window resize?\n. Update: looks like calling window.cy.layout() does what I was looking for.\n. Ah, my mistake - Sorry.\n. I guess i didn't explain this well. So, the issue is when you right click\non a node it will fire the event twice.. I.e you will get an event for\nevent.cyTarget core.. and event.cyTarget Node. The same thing will happen\nfor edges as well. Right now i'm just doing something hacky to work around\nit by caching the last event timestamp and if the current event timestamp\n=== cache_time then ignore.\nDustin Willis Webber\nOn Wed, Jul 2, 2014 at 11:58 AM, Max Franz notifications@github.com wrote:\n\nCheck event.cyTarget. The originating target is either an element or the\ncore (i.e. background case).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/637#issuecomment-47795597\n.\n. @maxkfranz awesome, thanks.\n. \n",
    "naskokam": "Great, thanks!\n. Ah yes this is a great idea, it should do the trick.  Btw, is it possible to set a bigger canvas size even before the network is drawn?\n. Great, thanks! I guess this \"issue\" can be closed then...\n. ",
    "GioT": "I tried sorting out the layout, however the error persists, here is what is said in the console;\nSVG renderer does not recognise undefined as a valid node shape\nconsole.trace()\n$$.console.error\nnodeShape\nSvgRenderer.updateNodePositionFromShape\nSvgRenderer.updatePosition\n$$.fn.collection.each\nSvgRenderer.updatePosition\nSvgRenderer.notify\n$$.fn.core.notify\n$$.fn.collection.rtrigger\ndone\nArborLayout.run.doneHandler\nUncaught TypeError: Cannot call method 'update' of undefined\nAny idea of what is going wrong please? This error only happens the first time I load the network, after refreshing the page the error does not appear any more. \n. I solved it:\nThe issue was in this function in the jquery.cytoscapeweb.all.js file:\nif( window.chrome ){\n                setTimeout(function(){\n                    callback();\n                }, 30);  // has to be more than 30 milliseconds\n            } else {\n                callback();\n            }\nThe timeout in chrome was too short for the network to be configured into an arbor layout, setting it to 2 seconds (2000) did the the trick. Thank you for your patience.\n. ",
    "seeyee": "It worked.\nMany thanks.\n. ",
    "boonelab": "This should probably me made clear in the documentation\n. ",
    "dmackenzie1": "I also ran into this.  To trigger it, I had to set the styling property 'content'  on edges ex:\"content\": \"data(label_text)\".  I then animated the connecting nodes.  When they finished animating, textX and textY were both NaN, throwing the error.\nLocally I fixed it by putting in checked to make sure textX and textY were not NaN isNaN(textX)===false\n. I was able to implement this in my fork. \nIts in core-viewport.js,  fitAnimated()   It actually looks quite nice, though I'm sure there are better ways to do this in the trunk.\nIn short of how it works, I take incremental steps from the current zoom/pan values to the final one, looping until the differences are smaller then some set threshold.\n. ",
    "amergin": "Good to know. Setting these colors are a workaround anyways, I will be using images when they are supported.\n. ",
    "Aurifier": "I'm sure you're going to love hearing this, but talking of browser compatibility, I noticed that cytoscape.js uses jQuery's .browser property in a few places. Unfortunately, the .browser property was deprecated in jQuery 1.3 and removed outright in the newest release (see http://api.jquery.com/jQuery.browser/). The upshot of this is that my javascript console fairly fills with error messages after a few minutes. I'll just use an older version of jQuery for now, but I thought I should pass this info along.\n. ",
    "geemang2000": "https://www.modern.ie/en-us provides prebuilt vms (virtualbox is free)\n. I have the same error 'cytoscape' undefined with IE10 when I use the cytoscape.min.js \nWhen I use the non-min js file it works. Is this a bug with the min tool?\n. ",
    "maehler": "I continue to have problems with this. When having any kind of margin around the container, the cursor position is offset. The more margin, the more offset. I'm curios to why this happens to me while the small example in http://cytoscape.github.com/cytoscape.js/ seems to work fine.\nI solved this temporarily by using the following:\nvar rect = cy.renderer().canvas.getBoundingClientRect();\nvar x = mouseEvent.clientX - rect.left;\nvar y = mouseEvent.clientY - rect.top;\nand the applying the zoom and pan.\nThis works fine in the browsers I have available (Chrome, Firefox, Safari and Opera), even with scroll offset.\n. Nice one! Confirmed to work for me as well.\n. Your health is far more important than this project @yuedong2, no need to apologize. I can confirm that it works for me as well, great job!\n. It seems like this doesn't work as I expected it to. After having selected a bunch of nodes, shift+click does not deselect the selected nodes, I can only add to the selection.\n. Nice, I can confirm that it works on my side as well.\n. I can confirm that I have these problems with arbor. It doesn't display anything, but after dragging around on the canvas, the node shows up. However, it does not respond to all events. Furthermore, the ready event is not triggered when there's only one node in the graph, but the done event is.\n. ",
    "jmchandonia": "Thanks--this works.  Please fix the example in the docs under cy.on(), since that's the code I used as a template.\n. Works for me; thanks!\n. On Tue, Jan 28, 2014 at 10:24:45AM -0800, Max Franz wrote:\n\nFor fitting & beziers: Fitting seems to depend on the renderer drawing the edge at least once, writing bezier points to a struct.  This struct will have to be calculated at init prior to the first draw somehow.\n\nAs a workaround, I can check to see if I have only one node.  If so, I\nuse the grid layout and call fit() from the ready callback upon\ninitialization.  It would probably be OK if the code just does this\ninternally--if it's drawing the graph twice, it happens fast enough\nthat I don't notice.\nJMC\nJohn-Marc Chandonia (JMChandonia@lbl.gov)               We're everywhere...\nPhysical Biosciences Division, Berkeley National Lab    for your convenience.\nhttp://www.strgen.org/~jmc/                                 -- Psi Corps <*>\n. On Tue, Jan 28, 2014 at 02:05:24PM -0800, Max Franz wrote:\n\nIs it even worth considering labels in bounding box or fit operations at all?  This will only be complicated further if we use HTML rather than context.fillText().  In the HTML case, you couldn't measure the size of the label/content at all without rendering it somehow.\n\nNo need for that in my current use case, but it should probably be\non the roadmap.\nJMC\nJohn-Marc Chandonia (JMChandonia@lbl.gov)               We're everywhere...\nPhysical Biosciences Division, Berkeley National Lab    for your convenience.\nhttp://www.strgen.org/~jmc/                                 -- Psi Corps <*>\n. ",
    "dannylhy": "I have this problem as well. I'm also using a nested container and I was wondering why mouseovers weren't firing consistently.\n. ",
    "dtenenba": "Closing this. I see @maxkfranz has added .batchData().\nThanks.\n. ",
    "onursumer": "Currently, the renderer sorts all elements by using the same logic. The\nfunction named elementDepth within the redraw function corresponds to the\n\"level\" function provided here. With the help of this function, the\nelements are sorted wrt their depth, and the renderer goes over the sorted\nlist and draws the elements in order. So, here is a confusing example with\nelements sorted with this logic:\n[image: Inline image 1]\nLooks like the problem is partly related to the built-in array sort\nfunction and partly related to the current logic. For the example graph\ngiven above, n1 and n2 are two different compound nodes at the same level,\nso sometimes n1 is drawn first, sometimes n2. But n4 is a child of n1 and\nit is always drawn after both n1 and n4. So, when a compound node is on\nanother compound node, it is possible to see confusing paintings like this.\nTo avoid this problem, we may introduce an advanced sort algorithm such\nthat a compound node and all its children is drawn before another compound\nnode. So, for this sample graph, if we always draw compound node n1 (and\nall its children) before the compound node n2 (and all its children), then\nwe won't have such confusing paintings.\nBut, drawing edges may be a problem with this approach if we always want to\ndraw them before the nodes at the same level. This can be easily achieved\nfor intragraph edges (edges between nodes that are all descendants of the\nsame compound), but it may not be possible for intergraph edges (edges\nbetween the nodes which are descendants of different compounds). If it\nwon't be a problem to draw all intergraph edges at the end, then I can try\nto introduce a custom element sort function. However, probably the new sort\noperation will be slower than the current one.\nOn Wed, Mar 13, 2013 at 5:36 PM, Max Franz notifications@github.com wrote:\n\nIn Cytoscape.js, we try to follow the conventions of HTML+CSS (layout,\nstyle, etc). So, we should make sure that how we handle z-order is\nconsistent with that.\nIn HTML, z-order is relative to the parent DOM element. In Cytoscape.js,\nz-order should then be relative to the parent node. That means the\npainter's algorithm for the nodes in the graph is like this:\nfor( level i = 0 ... levelMax ){\n  for each( element e in level i, sorted by z-order but with edges before nodes ){\n    draw( element )\n  }\n}\n// to compute the level for an element:\nfunction level( element ){\n  if( element.isNode() ){\n    if( element.parent().nonempty() ){\n      return 1 + level( element.parent() );\n    } else {\n      return 0;\n    }\n  } else {\n    return Math.max( level( element.source() ), level( element.target() ) );\n  }\n}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/227\n.\n. Looks like the example image is not shown in the previous comment. Attaching it here:\n\n. I am a little confused. What is the difference between lower level and\nlower z-order here? Should we assign z-index values for each compound? For\nexample, should we assign z-index value 0 to compound n1 (and all its\ndescendants), and assign 1 to compound n2 (and all its descendants) to\nensure that n1 (and all its descendants) is drawn before n2?\n\nIf we consider the level information as a main sorting criteria, then\ndragging a compound node onto another compound node may still result in\nconfusing paintings. For example, in the given sample graph, n5 looks like\na child of n2, but actually it is a child of n1. It looks like a child of\nn2, because n1 is dragged onto n2, and n2 is drawn before n1. But, since\nthe children of n1 has a higher level than n2, they are all drawn after n2.\nOn Thu, Mar 14, 2013 at 4:34 PM, Max Franz notifications@github.com wrote:\n\nWhen sorting the elements (i.e. in the for each in the pseudocode), we\nshould use these criteria:\n- lower levels first\n- lower z-orders first\n- edges before nodes\n- AND THEN maintain in-place elements order\nThis last criterion helps to make the ordering less arbitrary. The\nelements have a natural ordering (same order as in cy.elements()), based\non the order they were added to the graph.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/227#issuecomment-14927435\n.\n. Looks like we have the same problem while dragging nodes. This happens when you drag a single node, and move it onto another node.\n\nSince the mouseup event handler checks the condition (near == down) to remove the node and the edges adjacent to it from the drag layer, sometimes the near is calculated as the other node, and the nodes and edges stay in the drag layer after the mouse up event.\n. I think, there is no need to add \"textValign\" property.\n. It is not a big problem for simple nodes, but when you drag a hidden compound node its children are also being dragged. This may be confusing for the users.\n. Hidden nodes are not dragable anymore but seems like this fix introduced another bug:\n- Select the test \"Hide on click\" from the pull down menu\n- Click on any node (say n15) to hide it\n- Drag another node (say n20)\n- Immediately after dragging n20, try to drag the hidden node 15\nAfter mouse up (but not during mouse move), you will see n20 will be dragged instead of n15.\nIn general, last dragged node is being dragged again instead of the target hidden node.\n. Constant size sounds good. We can define a default node size value within renderer and use that value for nodes with \"auto\" size but with no child.\nActually, there is a similar case: A parent node may become \"childless\" after interactively removing (or hiding) all of its children. Currently, the renderer solves this problem by using the last calculated value for such parent nodes. But instead of the last calculated value, we can use the default node size if we define it in the renderer.\n. After removing the two children of the parent node n2 at the same time (in the debug page), the style values of height and width still remain \"auto\" for n2.\nAfter a quick debug, I realized that variable parentId (within the code added by rev 79cfedd) is always undefined. \nChanging the line \"var parentId = ele._private.parent;\"  to \"var parentId = ele._private.data.parent;\" solves the undefined parentId problem, but the function \"parent.updateStyle();\" is never called. I think, this is because we are checking the number of children before actually removing the children.\n. Hi Max,\nLooks like the condition (parent.children().length === 0) is never true. Even if we remove all children, the length does not change, because the children are not actually removed from the list, they are just marked as removed.\nWhen I move the whole \"for\" block (the block checking empty parents) to the end of the function, and change the condition to (parent.children().not(\":removed\").length === 0), then the code reaches to \"parent.updateStyle()\". However, it does not change the size of the parent.\nI could not inspect the updateStyle function in detail yet. But, I suspect this is related to the parent's non-empty child list. It may be possible that the updateStyle function updates parent's style only if the list is actually empty.\n. Just pushed a partial fix (commit 5950376) for the bugs mentioned in the previous comment. Now the code reaches to parent.updateStyle(), but it doesn't update the style.\nWhat do you suggest Max? Should we change the logic of style updating, or find another way to force a style update when all child nodes of a parent is marked as removed? Is it a bad idea to handle this within the renderer instead of collection's remove function?\n. This is an interesting one. Actually, shape, position (x,y), and size (width, height) values of the parent nodes are all correct when the function getAllInBox is called. However, for some reason, intersectBox function of the node shape (rectangle) does not calculate the intersection correctly for parent nodes.\nMore interestingly, try this selection box:\n\nAnd, you'll get this result:\n\n. Looks like the problem is not related to the compound nodes. There is something wrong with the intersection function of the shape square (which is also same for the shape rectangle).\nIf you set the shape of the simple nodes (in the first instance of the debug page) to rectangle. You will have an incorrect selection as shown in the figures below.\nselection box:\n\nselected nodes:\n\n. Here is a simple workaround for this problem:\nnodeShapes[\"rectangle\"].intersectBox = nodeShapes[\"ellipse\"].intersectBox;\nThis works, because intersectBox function of ellipse checks the intersection by assuming the node's shape as rectangle. This means that the intersectBox function of ellipse is also incorrect.\n. We need to revisit intersectBox functions of all node shapes to verify that they work correctly.\n. fixed by rev. c66a646\n. We should recalculate the style of a simple node as soon as it becomes a parent node. And, I think we should handle this in the core, not in the renderer.\n. Just added a non-auto sized parent node to the debug page. Everything looks OK except the parent node labels when dragging the children. The bounds of a non-auto sized parent node is never updated while dragging its children, but looks like its label is updated while the children is being dragged. This may be related to the drag layer, since a parent is moved into the drag layer in any case while its children is being dragged.\nAlso there is a case for which we might want to change the renderer behavior:\nTo reproduce this behavior in debug page, select the node n4 (which is parent of the nodes n8 and n9, and child of n1) and randomize its style (by using the button on the right panel). After randomizing its style, n4 becomes a non-auto sized node. So dragging n4 doesn't move its direct children (n8 and n9), but updates the bounds of its parent (n1). I think this the expected behavior.\nHowever, when you drag the topmost parent (n1), you see its grand children (n8 and n9) are also dragged. This is because the current dragging algorithm adds all descendants of an auto-sized parent into the list of elements to drag. This might confuse the user, because those nodes are not taken into account when calculating compound node bounds and are left outside the topmost parent n1. We can prevent this by excluding these children nodes also from the list of elements to drag.\nBTW, you can also observe a very similar behavior if you hide n4 and try to drag n1.\n. Hi Max,\nThanks for the quick fix!\nThe non-auto node gets shifted on init, because actually it is not a non-auto node at init. I set its css style explicitly after init. I guess I have to define its style within the initial style object to make it non-auto at init.\n. Just added an initial style for the specific (non-auto) parent node.\nLooks like we restrict parent nodes to have only rectangular shapes, we just ignore if its shape is set to triangle, octagon, etc. even if it is non-auto. Is this OK, or is it better to revisit the getNodeShape function of the renderer to remove this restriction for non-auto parents?\n. Here are the screen shots for an example case.\nbefore selecting:\n\nafter selecting & deselecting:\n\n. I'm calling a hide() function on the selected elements:\ncy2.elements(\":selected\").hide();\nI guess this is the jQuery hide function.\n. ",
    "ugurdogrusoz": "The z-order could be calculated as follows for compound graph objects given the compound graph's inclusion tree with a virtual root node that is not drawn but includes all at root level (assume lower z-order term is drawn earlier):\n- Each node of the inclusion tree corresponds to a node in the compound graph (leaf nodes are simple nodes, whereas inner nodes are compound nodes). z-order of a node in the compound node is exactly its depth in this inclusion tree.\n- For intra-graph edges, the z-order is the same as z-order of its source or target (since they should equal).\n- For inter-graph edges, the z-order is the maximum of the z-orders of its source and target nodes.\n  I think this should work.\n. Why not just implement bend points (arbitrary points that the users can set) as basis and let the users decide and ensure specific styles like zigzags? I mean people might want to have bend points that aren't orthogonal.\nI suppose a separate issue Ref: #359 is addressing this as a more general feature.\n. Any progress on this? We really need this feature. Thanks.\n. @metincansiper please create a PR for this\n. Limiting compound node sizes is not straightforward at all. Any particular reason that you'd like to limit a compound node's size? Can you share with us some examples where the layout inside compounds are not to your satisfaction? Have you tried increasing gravity if you think layout produces compound nodes that are too large? Also, if your compounds typically include disconnected nodes, you should turn tiling on.\n. I think a layout algorithm's treatment of compound sizes is independent of whether or not the core allows resize of compounds. When you call layout, you should be ready to / expect to see node positions and compound node dimensions change!\nI think there should be an option at the core for compounds for auto resizing of compounds. I would make it true by default (current behavior). If false, however, I would allow compounds to be resized arbitrarily (independent of their children). We might want to restrict the geometry of the compounds in such a way that a compound is always \"bigger\" than its children's bounding rectangle (+paddings). There is no reason to disallow a compound to be \"bigger\" than its content, otherwise.\nThe behavior about moving children as a compound moves, and adjusting compound dimensions to include all children when children are moved as necessary should be kept of course. In addition, when the user tries to resize a compound to be smaller than its content, it should be adjusted to be at least as big as its content, regardless of the current value of this option.\n. @dabobert Now it's possible to size compounds to be bigger than their children's bounds using the options specified under \"Compound parent sizing\" in Cytoscape.js documentation. This is a feature outside a layout. For a layout to support this is a separate issue; in other words, layout might change any specified size for a compound.. It should duplicate any background images as well. Example:\n\n. I agree I think (1) is better\n. @maxkfranz  This is great! But there is a problem. I realize that the rule is all nodes/edges overlapping with our selection box get selected. But if we need to select a proper subset of children of a compound and say move them, we can't do this using this box selection since the compound itself is selected! If the box selection starts and ends inside a compound, can we perhaps make an exception and not select the compound? I can't image a scenario where the user is indeed interested in selecting both the compound and a proper subset of the compound's children.. In fact (2) is exactly what I tried to describe. We only add an exception to the current box selection that we do not select the parent when the box is contained by the parent. Thanks.. @maxkfranz @mj3cheun We upgraded our application (http://www.cs.bilkent.edu.tr/~ivis/ChiSE_daily/) to use Cytoscape.js 3.1 but box selection inside a compound still selects the compound as well?. I confirm it's fine. This is how we see the problem in newt:\n\n. Doesnt look like built-in features can do truncation with ellipses (...) I wonder if it would be difficult to add this feature as a built-in one.. @maxkfranz Looks like in our case, the style of nodes are sometimes defined via functions, and what the function returns actually changes programmatically; thus the state of the node changes indirectly but Cytsocape.js has no way of knowing this. \nSo isn't there a way to force re-rendering of nodes even though their state didn't explicitly change? . This is how we fixed them in our tool with @kinimesi: https://github.com/iVis-at-Bilkent/sbgnviz.js/commit/2cd459ee87f26e31743c689c187f80532742ae2b. I think so. ",
    "nmorse": "(If it helps) I have fixed it by prepending \"r.data.\" before:\n    cy.trigger(new $$.Event(e, {type: \"mouse...\nlike this:\n    r.data.cy.trigger(new $$.Event(e, {type: \"mouse...\n. +1 That would be useful\n. Yes, only bezier curve edges, that makes sense and is within my usecase. I also understand that this may cause some odd visual arrangements if nodes are not placed accordingly. But if it helps here is an example: \n\nI have a self edge that stems out of the top and I was hoping for a side or downward (visual) \"flow\".\n. ",
    "fabienjourdan": "Thanks for your answer !\nI used the following code which seems to be ok to solve the issue on HTML tags\nele.css('content', $(\"< div/>\").html(ele.data('name')).text());\nIn fact I can use the Unicode but the challenge is then when dealing with numbers higher than 9(e.g. C6H12O6. It will require to code a mapping dividing numbers into digits and then applying for each one the right Unicode. For the moment I will stay with the current solution.\nCheers\n. ",
    "alindsay55661": "+1\n. JsPlumb style: http://jsplumbtoolkit.com/jquery/demo.html\n. +1\n. ",
    "georgedavidson": "Just wanted to report that this error persists, even using the latest commit. I'm still getting an \"afterimage\" after calling cy.png().\n. Hi Max,\nI did as you said, and I don't get the error on the debug page. However, I can still reproduce the issue on this simple test page, similar to Armish. Could you please have a look and let me know what could be making the difference? http://pastebin.com/92M62hXq \nI'm using Firefox 20.0 on Linux.\nSteps to reproduce:\n1) Copy HTML file in same directory as latest cytoscape.min.js; Open HTML file\n2) Open Web console\n3) Call cy.png()\n4) Move any of the nodes and notice the afterimage of the network\nI've also tried using the same Javascript (except cytoscape.min.js) from the Cytoscape.js homepage, same effect. http://pastebin.com/2eiLqwZB\n. Hi Max, please see my response here: http://stackoverflow.com/questions/17657107/displaying-large-networks-with-cytoscape-js Setting fit to false does work in the sense that the view is not re-fitted to the network once the arbor simulation completes, if the view had been changed with an initial zoom or pan. It doesn't work, however, in the sense that the elements of the network remain confined to a bounding box delineated by the viewport's initial dimensions (model as opposed to rendered dimensions) during the simulation. You can see this effect by setting an initial zoom out and watching the simulation unfold inside a small box in a fraction of the current view. The option's comment says \"//fit to viewport\", so I wasn't sure which behaviour is implied if it's disabled. Looking into the source code, it seems like it's the former. Thank you for looking into this.\n. @maxkfranz \nJust wanted to let you know that this works fine so far. Thank you.\n. ",
    "cmdcolin": "I used something like this on the client side to put a legend onto the rendered cytoscape PNG\n```\n        var png = cygraph.png({ scale: 2 });\n        var canvas = $('', { id: 'tmpcan' });\n        var ctx = canvas[0].getContext('2d');\n        var data = 'data:image/svg+xml,' +\n                   \"\" +\n                     \"\" +\n                       \"\" +\n                           $(\"#legend\").html() +\n                       '' +\n                     '' +\n                   '';\n    var img = new Image();\n    img.src = png;\n    canvas[0].width = img.width;\n    canvas[0].height = img.height;\n    ctx.drawImage(img, 0, 0);\n\n    img.src = data;\n    ctx.drawImage(img, 100, 100, img.width * 3, img.height * 3);\n    var dataURL = canvas[0].toDataURL('image/png');\n    $('#output').empty().append($('<a/>').attr({ href: dataURL }).append('Download picture'));\n\n```\nHere, \"legend\" is a div containing the HTML legend used on the main app so the look of the legend stays consistent\nThat is just one idea I suppose, sort of a tricky problem to solve in general!\n. X-ref http://stackoverflow.com/questions/10932670/how-do-i-draw-the-content-of-div-on-html5-canvas-using-jquery to render html on canvas\n. Also glad to see new options like this\nI added what I think is a bugfix to this package here https://github.com/Nickolasmv/cytoscape-ngraph.forcelayout/pull/1\n. ",
    "Raven0us": "Any updates on this feature?. ",
    "patrickdevivo": "Do you think this is the main reason for the performance difference?\n. I've done as you said and enabled that init option and see a significant gain in performance, though interacting with the graph is still not at the performance level of sigma - zoming is slow, clicking and dragging nodes is slow (though not impossible as it was before).\nI'd prefer to use cytoscape.js, I'll poke around the source of the cytoscape canvas renderer and sigma's renderer to see the differences.\nThank you for your help!\n. ",
    "pramttl": "Interesting, this is quite needed. \nI wrote up a small function to generate a circular layout for me (for my use case). This function returns N points of a regular polygon centered about a point. The first point is at 12:00 clock (which is the cleanest way I could think to represent any general N-gon)\n```\nfunction polypointscircle(center,R,N) {\n    // Returns an array with the coodrdinates of a regular polygon (which lie on a circle with a center).\n   // center = Center of the circle. Example: {x: x0, y: y0}\n   // R = Radius\n  // N = Number of polygon points to generate lying on the circle.\nvar polypoints = new Array();\nfor (i=0; i<N; i++){\n  alpha = i * (2*Math.PI)/N + (Math.PI/2);\n  x = center.x + R*Math.cos(alpha)\n  y = center.y - R*Math.sin(alpha)\n  polypoints.push({x:x,y:y})\n}\nreturn polypoints;\n\n// Array of objects, where each obj in the array is of the form: {x: , y: }\n};\n```\n. Here is an example:\npramttl.github.io\nThere are some blue/red colored nodes with:\nclasses : 'ganeti-node'\nThey are bound like this (using mousedown):\ncy.$('node.ganeti-node').mousedown(function(){\n  # Show more child nodes around this node.\n  ...\n}\nNow, as per definition of a \"mousedown\", I expect to see the response as soon as I press the mouse button (before I leave it)\nIn this case I see a response only after I have left the mouse button to complete a 'click' event.\n. Yes, I tried this now for mousedown\nThings work fine this way. (as expected)\nI have been using these JQuery like aliases for event binding at a lot other places. I will switch to what you mentioned.\nIn general the 'alias way' is more convenient to use; adding it could help.\n. ",
    "Auriejir": "Hi, I fixed it by moving line 11515 (context.lineWidth = node._private.style[\"border-width\"].pxValue;) to line 11436, after (nodeHeight = this.getNodeHeight(node);)\nit's working fine and fixed both issues.\n. If you can do it, I'm OK with it. I had to fix it anyway... \nthanks you all for your great work.\n. ",
    "tuxalex": "Ok thank you for the answer \nAlex\n. Thank you for your work on this option, it's usful for me. \nThe option maximalAdjustments is present in the version cytoscape.js dated 21 August but not in the latest. Maybe there are the old breadthfirst layout file in the latest commit.\n. Yes, I have tested with the release 2.0.3, 2.0.2 and 2.0.1. \nOk I will be waiting an more stable version for make an other test. \nThank you for you answer. \n----- Mail original -----\n\nDe: \"Max Franz\" notifications@github.com\n\u00c0: \"cytoscape/cytoscape.js\" cytoscape.js@noreply.github.com\nCc: \"alextux\" alexan.andrieux@inria.fr\nEnvoy\u00e9: Jeudi 28 Novembre 2013 15:57:06\nObjet: Re: [cytoscape.js] Graph is hidden with chrome 31 (#385)\nAre you using the release? The repo is undergoing some refactoring\nwith the renderer and is unstable for now.\n\u2014\nReply to this email directly or view it on GitHub .\n. Hi, \nI have the same problem with this build.\n. \n",
    "epochcoder": "Would it not be possible to add this in any case with the default being disabled? \nhttp://stackoverflow.com/questions/5026961/html5-canvas-ctx-filltext-wont-do-line-breaks\nI really don't want to have a custom cytoscape build, and this is a show stopper for me.\n. I modified the drawText method locally:\n```\nCanvasRenderer.prototype.drawText = function(context, element, textX, textY, wrapText) {\n  var style = element._private.style;\n  var parentOpacity = element.effectiveOpacity();\n  if( parentOpacity === 0 ){ return; }\nvar text = this.setupTextStyle( context, element );\nif ( text != undefined && !isNaN(textX) && !isNaN(textY) ) {\n    var lineWidth = 2  * style['text-outline-width'].value; // *2 b/c the stroke is drawn centred on the middle\n    if (lineWidth > 0) {\n      context.lineWidth = lineWidth;\n      context.strokeText(text, textX, textY);\n    }\nif (wrapText) {\n  var lines = text.split('\\n'),\n    rstyle = element._private.rstyle,\n    computedSize = element._private.style['font-size'].pxValue * element.cy().zoom();\n\n  for (var i = 0; i < lines.length; i++) {\n    var words = lines[i].split(' '),\n        line = '';\n\n    for (var n = 0; n < words.length; n++) {\n        var testLine = line + words[n] + ' ',\n            metrics = context.measureText(testLine),\n            testWidth = metrics.width;\n\n        if (testWidth > rstyle.labelWidth && n > 0) {\n          context.fillText(line, textX, textY);\n          line = words[n] + ' ';\n          textY += computedSize;\n        } else {\n          line = testLine;\n        }\n    }\n\n    context.fillText(line, textX, textY);\n    textY += computedSize;\n  }\n} else {\n  context.fillText('' + text, textX, textY);\n}\n\n}\n};\n```\nthe wrapText variable gets set based on the following condition:\ntextValign === 'bottom'\n. Thank you very much for the insight into the problem :) As I currently do not have many nodes to support this will work for me; in the mean time and I will keep updating releases locally.\nAdditionally, I removed the inner for-loop since I am strictly counting on \\n being present and do not want to auto-wrap based on measured length.\nThanks for re-opening the issue\n. ",
    "NoahStahl": "Thanks for this, epochcoder. My graphs are small, so I'm more concerned about the wrapping than performance. Your code seems to do the trick.\n. ",
    "shaheen-syed": "I am using cytoscape 2.3.4 but i am unable to achieve the multiline support. I have tried epochcoder's workaround but it does not wrap by using \\n.\nWhat exactly do you mean with textValign === 'bottom', I am using the text-Valign method within the style\nstyle: cytoscape.stylesheet()\n                  .selector('node')\n                    .css({\n                        'content': 'data(material)',\n                        'background-color': '#BDBDBD',\n                        'shape': 'rectangle',\n                        'width': 400,\n                        'height': 400,\n                        'text-valign': 'bottom',\n                        'font-size': 30,\n                        'min-zoomed-font-size': 3,\n                    })\nExample of the node element:\nelements: {\n                    nodes: [\n                    { data: { id: '001', material: \"hello \\n my \\n friend\" } },\n. I understand your reasons for not making the multiline label support top priority. Whether or not this is bad UI is up for debate. In my case, and I can think of many more, multiline labels are just a way to show some more info that makes reading the graph, and in particular, the relationship between nodes, more informative. It is by no means meant to stuff all info into a single node. \nI have implemented the qtip tooltip to show all information though, so the multiline support would now just be a nice to have. Thanks for the quick reply\n. Hello Wehriam,\nI tested your CSS rendering library for the multilabel support. I managed to get it working and have the following remarks:\n-The position of the label is somewhat on the bottom-right side of the node element when using text-valign: center and text-halign: center.\n-It seems that the labels wrap to the next line after 9 characters automatically.\n-There is a small delay in the old and new position of the label when zooming. The label stays in the old position when zooming. When the zoom is finished, the label gets positioned back in the node. Maybe this could be fixed by using the same optimization method that is used within cytoscape.js to hide edges and labels when zooming.\n-In terms of performance: A network of 6500 nodes and edges gets rendered in 37 seconds with the native label display option and 54 seconds using the CSS rendering method.\nI hope this helps you in improving it.\nThanks.\n. ",
    "wehriam": "https://github.com/wehriam/cytoscape-css-renderer\nI took a pass at this and would appreciate any feedback you have.\n. Great feedback, thanks. A couple questions:\n- Would you mind sharing any files you used in testing, if they are available?\n- What browser(s) did you use?\n. Hrm, I'm unable to reproduce the wrapping.\n\n. ",
    "wilzbach": "Hi guys, I also experienced the annoying slow drawText() function in canvas.\nFor my MSA I used a char cache and draw from the cache instead of drawing with the native command. This might sound insane, but is a massive performance increase (drawing a canvas on a canvas is very fast) - it might be interesting for you. (In the cyctoscape you could have another cache with the actual (multiline) labels, so that you don't need to redraw them every time)\n. >  I had considered that for the full text instead of a charbychar basis\n\nThings like kerning may not work as well.\n\nEhm sorry yes - nobody likes mono space labels. Hmm it could make sense to have a \"word cache\" if words like \"edge\" or \"node\" are part of every label.\n\neffect on performance so I abandoned it. Maybe the same approach with the labels would be more effective.\n\n+1\n\nDoes the charcache affect text rendering quality?\n\nNope, I draw use the same font size to draw chars on the \"cache canvas\". \n. ",
    "oreenge": "Is there a way to enable wrapping for labels which have no whitespace? It doesn't work without whitespaces now http://jsbin.com/qefoxe/edit?html,output.\n. Your suggestion would be to randomly put \\n's in the text even though it may or may not have whitespaces? Just trying to understand what is the best practice here.\n. ",
    "simonsarris": "This bug is closed but still an issue with Firefox, correct?\n. ",
    "Sigfried": "Was this implemented? Is there documentation or an example somewhere?. I think I misunderstood what this was for. I'm trying to figure out if I can use HTML or some kind of piece-by-piece formatting in labels: http://stackoverflow.com/questions/41941784/ctyoscape-js-is-there-a-way-to-use-html-in-labels. I'm running into this same problem, as described at http://stackoverflow.com/questions/41638266/how-to-use-bezier-curves-in-cytoscape-js. I wanted to make edges that avoid passing through nodes like:\n\nSince I couldn't figure out how to add control points (and I'm not sure where I'd put them anyway), I added waypoints that I want curves to pass through. The result is pretty awful:\n\nIs there a another way to accomplish the same end?. I'm starting to use it for an ambitious, open-source, medical research project I'm doing for http://www.ohdsi.org/.\n@maxkfranz: If you have a chance, I could use a little help understanding bezier curves: http://stackoverflow.com/questions/41638266/how-to-use-bezier-curves-in-cytoscape-js.\nCytoscape.js is amazing. Thanks!. @maxkfranz, I'm trying to use cytoscape.js in a React component, just sending a div ref from the component to cytoscape to use as the container. It works fine except that tapping is offset. I tried to fix that with cy.resize() as per http://js.cytoscape.org/#cy.resize, but resizing doesn't fix it.\n...\nIn writing this comment I discovered the problem: the container div I was giving to cytoscape had something in it (an h4), so tapping was offset by the height of that. This might be counted as a doc bug? With the instructions to resize to fix tap offset, it should probably mention that container has to be empty.. Thank you. Yeah, I know I was being dumb, but a doc change would have helped me. I just put in a pull request to add a sentence.. ",
    "jdmswong": "@maxkfranz would this be possible?  Thanks!\n. Appreciate it, thanks!\n. Ok, I'm curious as to why it seems to work the first time, after which it just starts adding.  The elements are new, right, because I removed them?  Did you mean never-before-seen elements?\n. @maxkfranz I think the issue is with remove not removing nodes, so cy.add() keeps adding copies over and over.  \nHow do I use the trunk code?  I just have the cytoscape.min.js from the provided download links.\n. Thanks, is it still possible to have ele.degree() accurately reflect removed nodes?  I would just like nodes to be removed cleanly, so they can be added again if need be.\n. I need to add and remove elements because hidden edges will affect the curvature of visible ones, creating an undesirable looking graph.\n. ",
    "bumbu": "An example of a  problem that may occur is here. If you try to scroll first navigator than you'll observe a strange behaviour (it is not centered based on mouse position and it may jump sometimes). However second navigator works as intended.\nI wasn't able to stop event bubbling/propagation using any (and all) of:\n- return false\n- preventDefault\n- stopPropagation\nAs I found in some older specification - this event is not cancellable. New specifications say the opposite.\nProbably it also depends on hook order.\n. +1\n. ",
    "ruthgrace": ":+1: \n. I would like right-angled \"elbow\" edges, like they have in PathVisio.\n\nEdit : This is a separate request, unrelated to edge bends : Zigzag edges #882 \n. Also the brace type edges\n\nEdit : This is a separate request : Double-bezier edge style #883 \n. Could you do the lightning shaped one for cleavage? And would the transcriptional activation/inhibition ones be best implemented as their own type of arrowhead, or as triangle/tee arrowheads on elbow-style edges?\nthank you!\n. From the Formal MIM Notation Specs http://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0CCYQFjAB&url=http%3A%2F%2Fdiscover.nci.nih.gov%2Fmim%2Fformal_mim_spec.pdf&ei=S7yXU_F_xtTyAcbdgeAJ&usg=AFQjCNGtWdNNz8-4RzAgxpbKhWsnwz8iqw&sig2=6CRKM5odrUCFse4gerRoOw&bvm=bv.68693194,d.b2U\nHere are the specifications for the cleavage arrow:\n\nand here are the specifications for the transcription arrows:\n\nI suppose all of these can be done with nodes and edges positioned that way, rather than as an arrowhead.\n. Hi Max,\nI found out recently that Anders Riutta over at UCSF is working on\nPathVisio.js (https://github.com/wikipathways/pathvisiojs), which will\neventually have all the editing features of PathVisio, including the MIM\narrowheads, and the shapes (like Mitochondria, Endoplasmic Reticulum,\netc.). So it may not be worth it for you to implement some of the\narrowheads if they're not easy to do. Once you've got the vee one, you'll\nprobably have all that most people would want, anyway.\nThanks,\nRuth\nOn Wed, Jun 18, 2014 at 2:35 PM, Max Franz notifications@github.com wrote:\n\nIssues:\n- Pointy arrowhead style #619\n  https://github.com/cytoscape/cytoscape.js/issues/619\n- Triangle-tee arrowhead #620\n  https://github.com/cytoscape/cytoscape.js/issues/620\n- Overshot hollow half arrow #621\n  https://github.com/cytoscape/cytoscape.js/issues/621\n- Hooked arrowhead #622\n  https://github.com/cytoscape/cytoscape.js/issues/622\n- Hypergraph support #623\n  https://github.com/cytoscape/cytoscape.js/issues/623\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/604#issuecomment-46475474\n.\n. I've been making double-lined nodes by making a parent node and a child node that's the same but slightly smaller. So not super essential, I guess. Though the child node goes on top of all the other nodes and I haven't found a good way of preventing that.\n. Thank you! I'll use background images as advised.\n. Sorry, I'm silly - cytoscape.js already has dashed edges.\n. \n",
    "gioper86": "With regard to the bend points, I implemented them by using nodes with a different style and it works quite well for me. If anyone is interested in the code just let me know, I would be happy to share it.\n. Sorry everybody for the late response, I did not see the notifications.\nI have put together a simple example and created a plunk. Here is the link: http://plnkr.co/edit/ug4mVWGPG7WYZPvChbFr\n. ",
    "ayushkr19": "@gioper86 I would be really grateful if you could share the code for your workaround.\n@maxkfranz Can we expect this feature to be implemented anytime in the near future? Thanks!\n. ",
    "shalinibheemavarapu": "@gioper86, could you share your workaround?\n. @gioper86, could you share your workaround? I am looking exactly for the right angled edges\n. ",
    "vivek542": "@gioper86 : Can you please your code workaround ... I am looking for orthogonal elbow edges to connect nodes & compound nodes ..\n@maxkfranz : Is this feature/BUG already resolved in Cytoscape.js 2.3.11 or do we have plans for version 2.4? Please reply asap ... I see such possibilities with Klayjs library ...\n. ",
    "stanleygu": "I no longer seem to have this issue, thanks!\n. I meant that page scrolling is disabled when the cursor is above the element, so you would have to move your mouse off the element to go further down the page, which is a bit annoying if the graph is a large part of the viewport.\nI found I can fix this behavior by moving the e.preventDefault() in the wheel handler, but this unfortunately messes up the coordinate system for selecting nodes when the page is scrolled.\n. Ah, this fixes the issues of the scroll lock on element hover, however, the problem I hinted at above about the mouse position coordinates getting broken by the scrolling is still there.\nIf you scroll down on the page and then click on the graph, you can see that your mouse click registers at the wrong position on the graph. The further you scroll down, the larger the offset is. This seems to be due to the cytoscape click handler not taking into account the scrollTop position of the page.\n. Actually nevermind, everything is working as expected. It turned out to be a CSS issue with body {height:100%; overflow:hidden} where the window.onscroll was not firing and thus window.scrollY was never updated after a scroll event, causing an offset.\n. I could give these a try to see how well it works, what is the best way to modify the weights (I don't see it in the docs)?\n. Also, adding in a setTimeout gets it working.\n. Sounds reasonable to me, thanks!\nOn Tue, Jan 14, 2014 at 1:09 PM, Max Franz notifications@github.com wrote:\n\nLooking through the source code, this would be undesirable to add to the\nlibrary itself for reasons of performance. Setting position should be as\nfast as possible for layouts etc (esp. consider for all elements in the\ngraph with several calls in a row), and so adding parsing is inappropriate.\nPlease make sure to sanitise your position values if they are strings\nbefore you pass them to cy.js. Only numeric values must be used.\nSide node: The reason it seemed to partially work for you with strings is\nbecause of some JS autotypecasting -- a fluke.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/397#issuecomment-32307652\n.\n. \n",
    "dselkirk": "Locally. I may provide you these files tomorrow if you can't reproduce the problem.\n. Ok, I'll give it a try) Sorry for the false issue report)\n. Yep, that's was my fault. Arbor layout works on the web server. I opened my project both in Firefox and IE10. Nevertheless, in Chrome and IE9 arbor layout works even locally (file://).\n. ",
    "bestekov": "Max, totally agree on not using browser zoom. It's just that some of our developers must have already had a zoom level set other than default and so every time they hit our test site it was failing. I'm posting a bug report to firefox now.\nPS - I just learned about cy.js last week, pretty slick library. Great work.\n. The mozilla developers are saying that the Firefox implementation is correct and that it must be a bug in cy.js. FYI\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=934604\n. ",
    "tonnydourado": "Also happens on Chrome (31.0.1650.48), I've spent about half an hour trying to figure it out with a coworker.\n. ",
    "robmosca": "Great! That'd be exactly the layout I was searching for in one of our projects! :+1:\n. Is it possible to disable zooming with the mouse wheel while, at the same time, retaining the possibility of zooming with the panzoom control?\nIn this way the wheel can be used to scroll the page (even if it is accidentally on top of the cytoscape.js view and the user has still the possibility of zooming the network by using the panzoom control.\n. Hi Max,\nsorry for the late response, I came back today from holidays.\nYep, this is exactly what I mean. If I try to zoom with the wheel the event\ngoes through to the page and causes the page to scroll down instead while I\nstill retain the possibility of zooming by using the PanZoom control.\nWould this be possible?\nBest,\nRoberto\nOn Fri, Dec 20, 2013 at 4:55 PM, Max Franz notifications@github.com wrote:\n\ne.g. options.zoomingEnabled = true but something like options.userZooming\n= false\nNote though that for some option like options.userZooming = false, it\nwould mean that both mouse wheel zooming and pinch-to-zoom would be\ndisabled -- since both those zooming mechanisms are \"user event zooming\" on\nthe renderer level.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/386#issuecomment-31019165\n.\n\n\nLa chiocciol@\nhttp://lachiocciola.tumblr.com/\n. Great!\nThanks,\nRoberto\nOn Fri, Jan 10, 2014 at 5:35 PM, Max Franz notifications@github.com wrote:\n\n@stanley-gu https://github.com/stanley-gu , @rmoscahttps://github.com/rmosca\ncy.userZoomingEnabled() and cy.userPanningEnabled() and their init option\ncounterparts have been added. If you make zip on the trunk, you'll get a\nbuilt cytoscape.js with the changes.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/386#issuecomment-32042646\n.\n\n\nLa chiocciol@\nhttp://lachiocciola.tumblr.com/\n. Actually the problem does not only apply to bezier. In my case I had a network with straight edges and it failed in Safari 7.1. After removing the patch #688 I could restore correct functioning also in Safari 7.1.\n. Seems perfect to me! I will make the pull request right now.\nThank you!\nRoberto\n. Hi Max,\nI wanted to help with this (and the other issues related to the spread layout) but the truth is this is too much of a complex Javascript code for my limited capacity in Javascript... ;)\nIf you can give me a few hints I might try to catch up...but I fear my knowledge of Javascript is not quite adequate... :(\nLet me know,\nRoberto\n. dSysMap\nhttp://dsysmap.irbbarcelona.org\n. ",
    "randybb": "Any chance to have this implemented in the next release? Source/target labels could by useful (actually they are really needed) for interface labels in network topology diagrams like this:\n\nIt is very nice implemented in GML (Table 9.14, Item: .position).\n. ",
    "hh-h": "any plans?\n. ",
    "fsedano": "Hi folks - Any update on this? Currently trying to migrate my app from jsPlumb to Cytoscape, but this is a blocker.\n. Thanks Max - Hope it can be done ;-)\n. Thanks folks - Sorry to be late to the thread.\nThe use case I had in mine is to replace jsplumb in our application; \nthis is the current drawing. So this approach would work nicely I believe.\nOn 08/12/15 22:39, Max Franz wrote:\n\nEverything has been refactored to support the new labels. What's left \nis mainly the calculation stuff, which I described above. You can see \nall todos with a search of |TODO #382|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/cytoscape/cytoscape.js/issues/382#issuecomment-163025658.\n. \n",
    "maxruby": "What is the progress on this? I am happy to help implementing this too - it is crucial for my current project.  The labelling now is just not enough... Any update is appreciated.\n. Thanks for the detailed explanation.  I would suggest for now, it would be immensely useful to have:\n-  label always in the middle of the edge (half-way between nodes) \n- source-label-offset : top, bottom\n- rotation: -90, 0, 90 (relative to the edge vector) \nWhat would be involved to do this for at least one edge type?\nHow could I best get started so we can at least test how this works?\n. @maxkfranz \nThis is fantastic - thanks for putting in all this effort.  I will have a look today at the TODO #382\n. Visual Interaction GmbH:  http://www.mygaze.com\n. ",
    "fedmich": "Hey max, \nYes, its the recent version of Android.\nWhen I try without Cordova using just Google Chrome, it renders ok but still flickers.\nI'll try to plug it in and debug it and let you know when I get a chance later on.\n. ",
    "RobyZ": "I have same behaviour on chrome 32 beta. No problem on firefox, ie 11, opera. \n. Hi, the link is not active\nRz\n2013/12/3 Max Franz notifications@github.com\n\nTry this build and let me know if you still run into the issue:\nhttps://dl.dropboxusercontent.com/u/5671307/cytoscape.js-github-snapshot-2013.12.03-11.30.12.zip\n(This link may no longer be active after the issue is closed.)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/385#issuecomment-29725523\n.\n. Hi,\nthe problem persists.\n\nRz\n2013/12/4 alextux notifications@github.com\n\nHi,\nI have the same problem with this build.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/385#issuecomment-29786764\n.\n. \n",
    "ankitdubey": "thanxx maxkfranz for reply , but my client needs as per IE-8/9 . Please suggest me what can i do ,if i want to display graphical connection like cytoscape.js providing ....please please help me ....this very urgent for me....thanxx guyss.............\n. maxkfranz ,thanxx agian for helping me I will try older version of  Cytoscape Web ,hope i will make it like previous .....:))\n. ",
    "mrhoric": "still have the bug now, when i create second instances, the previous instances cant't work, it can not zoom\u3001click\u3001or drag. ",
    "Toxicat": "Yes i tried but i need to apply style node per node (to avoid many stylesheet loaded in the graph).\nThanks, i look at that.\n. ",
    "stuzart": "I should also add, then when I zoom out again using CTRL-- the graph reappears correctly at the default zoom %, but then continues to disappear when zooming further out.\n. ",
    "aschriner": "I tried it out and it works for some styles and not others.  In particular something:hover does not work, while something:selected does work.  FYI my css file is below (it's, um, mostly comments).  The things I would want to check on which I can't see a quick way to check on the debug page:\n-do mappers work?\n-do :selected and :hover work?\n-does compound node styling work (node > node)?\n```\n    / See http://cytoscape.github.io/cytoscape.js/#style /\n    / This file must be parsed to JSON by accompanying cytoscapecssparser.py /\nnode, edge {\n/* These can be applied to both nodes and edges together (as done here with */\n/* the \"node, edge\" selector, or they can be applied individually to nodes */\n/* or edges by copy/pasting them under the \"node\" or \"edge\" selectors. */\n\n/* Labels: */\n\n/*     color : The colour of the element's label. */\n    content : data(n_shortname); /*The text to display for an element's label. */\n/*     font-family : A comma-separated list of font names to use on the label text. */\n/*     font-size : The size of the label text. */\n/*     font-style : A CSS font style to be applied to the label text. */\n/*     font-weight : A CSS font weight to be applied to the label text. */\n/*     text-opacity : The opacity of the label text, including its outline. */\n/*     text-outline-color : The colour of the outline around the element's label text. */\n/*     text-outline-opacity : The opacity of the outline on label text. */\n/*     text-outline-width : The size of the outline on label text. */\n\n/* Size & visibility: */\n\n/*     opacity * : The opacity of the element. */\n/*     visibility : Whether the element is visible; can be visible or hidden. */\n/*     width : The element's width; the line width for edges or the horizontal size of a node. */\n/*     z-index : A non-negative integer that specifies the z-ordering of the element. An element with a higher z-index is put on top of an element with a lower value. */\n\n/* For overlays (e.g. used in :active state): */\n\n/*     overlay-color : 000099; */\n/*     overlay-padding : The area outside of the element within which the overlay is shown. */\n/*     overlay-opacity : The opacity of the overlay. */\n\n}\n\nnode {\n\n/* Labels: */\n\n/*     text-halign : The vertical alignment of a label; may have value left, center, or right. */\n/*     text-valign : The vertical alignment of a label; may have value top, center, or bottom. */\n\n/* Body: */\n\n/*     background-image : The URL that points to the image that should be used as the node's background. */\n/*     background-color : The colour of the node's body. */\n/*     background-opacity : The opacity level of the node's body. */\n/*     border-color : The colour of the node's border. */\n/*     border-opacity : The opacity of the node's border. */\n/*     border-width : The size of the node's border. */\n/*     height : The height of the node's body. */\n/*     shape : The shape of the node's body; may be rectangle, roundrectangle, ellipse, triangle, pentagon, hexagon, heptagon, octagon. */\n\n/*  Compound nodes:  */\n\n/*     padding-left : The size of the area on the left of the compound node that can not be occupied by child nodes. */\n/*     padding-right : The size of the area on the right of the compound node that can not be occupied by child nodes. */\n/*     padding-top : The size of the area on the top of the compound node that can not be occupied by child nodes. */\n/*     padding-bottom : The size of the area on the bottom of the compound node that can not be occupied by child nodes. */\n\n}\n\n$node > node {\n\n/*  Compound nodes:  */\n/*  Use any styles from for nodes, plus these: */\n\n/*     padding-left : The size of the area on the left of the compound node that can not be occupied by child nodes. */\n/*     padding-right : The size of the area on the right of the compound node that can not be occupied by child nodes. */\n/*     padding-top : The size of the area on the top of the compound node that can not be occupied by child nodes. */\n/*     padding-bottom : The size of the area on the bottom of the compound node that can not be occupied by child nodes. */\n}\n\nedge {\n\n/*     line-color : The colour of the edge's line. */\n/*     line-style : The style of the edge's line; may be solid, dotted, or dashed. */\n/*     source-arrow-color : The colour of the edge's arrow on the source side. */\n/*     source-arrow-shape : The shape of the edge's arrow on the source side; may be tee, triangle, square, circle, diamond, or none. */\n/*     target-arrow-color : The colour of the edge's arrow on the target side. */\n/*     target-arrow-shape : The shape of the edge's arrow on the target side; may be tee, triangle, square, circle, diamond, or none. */\n\n}\n\ncore {\n\n/*     active-bg-color : The colour of the indicator shown when the background is grabbed by the user. */\n/*     active-bg-opacity : The opacity of the active background indicator. */\n/*     active-bg-size : The size of the active background indicator. */\n/*     selection-box-color : The background colour of the selection box used for drag selection. */\n/*     selection-box-border-color : The colour of the border on the selection box. */\n/*     selection-box-border-width : The size of the border on the selection box. */\n/*     selection-box-opacity : The opacity of the selection box. */\n\n}\n\nnode.hover {\n    border-color : AliceBlue;\n    border-width : 1px;\n}\n\nedge.hover {\n    width : 2 px;\n}\n\nedge:selected {\n    line-color: red;\n}\n\nnode:selected {\n    overlay-color : #000099;\n    overlay-padding : 2; /* The area outside of the element within which the overlay is shown. */\n    border-color : red;\n    border-width : 1px;\n}\n\n```\nWhich my parser turns into JSON as:\n[\n       {\n          \"css\":{\n             \"content\":\"data(n_shortname)\"\n          },\n          \"selector\":\"node, edge\"\n       },\n       {\n          \"css\":{\n             \"border-color\":\"AliceBlue\",\n             \"border-width\":\"1px\"\n          },\n          \"selector\":\"node.hover\"\n       },\n       {\n          \"css\":{\n             \"width\":\"2 px\"\n          },\n          \"selector\":\"edge.hover\"\n       },\n       {\n          \"css\":{\n             \"line-color\":\"red\"\n          },\n          \"selector\":\"edge:selected\"\n       },\n       {\n          \"css\":{\n             \"border-color\":\"red\",\n             \"overlay-padding\":\"2\",\n             \"border-width\":\"1px\",\n             \"overlay-color\":\"#000099\"\n          },\n          \"selector\":\"node:selected\"\n       }\n    ]\n. Duh, I just realized \"hover\" doesn't work because I hacked an \"addClass\" solution on mouseover to add the \"hover\" class since the :hover selector is not supported.\n. Yeah that makes sense.\nAndy Schriner\nschrinaw@gmail.com\nOn 1/16/2014 12:04 PM, Max Franz wrote:\n\nAll mappers, selectors (incl. compound node selectors), and styles \nshould work equally well in JSON stylesheets and string stylesheets.\nAs you noticed, |:hover| will not work because it's not parsed as a \nvalid selector. We didn't want to add support for something by default \nthat wouldn't support touch devices: |:hover| can either ignore touch \ndevices altogether or it can cause an intermediary state such that the \nfirst tap triggers a hover and the second tap triggers an actual tap. \nBoth solutions almost always result in bad UI, so we don't support \n|:hover| at all.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/cytoscape/cytoscape.js/issues/396#issuecomment-32488700.\n. Can you give me an overall idea - is this plugin something that can be modified to work with edges, or is it built tightly around nodes?  I am going to need some right-click menus on edges so I'm trying to decide how to approach it.\n\nAlternatively, there are lots of jquery context menu plugins out there, but if I understand correctly they can't be attached to cytoscape.js edges because the edges are not \"proper DOM elements\", right?  Or is there some way to trigger a context menu plugin from an edge and hand off the event to it?\n. Interesting...I am getting a  element with z-index =999 and a div with z-index =1000.\nSince I am using Zurb Foundation for styling the page...I suppose it's possible something in there is adding the z-index.  I'm not sure.  In any case I've got a workaround for now (give my dialogs even higher z-indexes). \n. Well I removed everything but cytoscape and jquery, and I'm still getting one div with z-index=1000.\n. I have options.showOverlay: false and the advertising overlay is not shown.  There is still one div with z-index:1000.\n. Sorry this should really be two commits - if you have a problem with the cleanup I can separate it into two\n. Cool; it was not a big change so it can be easily reproduced/patched there.  FYI I believe the way I implemented locating the event does work for any cy div location (it references the offset).  Maybe that is also what you are looking for in #399 \n. Actually if I understand correctly there is no e in scope.  I'm talking about the cxtmenu plugin, not adding a listener via cy.on(...\n$(\"#cy\").cxtmenu({\n        selector: 'node',\n        commands: [\n            {\n                content: '<label>Add child</label>',\n                select: function () {\n                     //can't get the event inside here\n                }\n    ...\nChanging to select: function(e) {... does not help.\n. Got it.  layout: {name: \"preset\", fit: true} did the trick. Thanks!\n. on a related note...it would be nice for ancestors to return somehow an ordered data structure, so that first element=parent, second element=grandparent, third element=great-grandparent, etc.  This would help in determining the relationship between two nodes (e.g. \"what is the closest common ancestor?\")\n. getAncestry recursively builds an array of the parent ids and returns it.  first element is parent, last element is most distant ancestor.\ngetCommonParent compares the ancestry arrays for two nodes, chooses the shorter array, and checks if the first element in the shorter one is in the longer one.  if so, returns it, otherwise return null.\nfunction getAncestry(node, ancestry) {\n            var ancestry = ancestry || [];\n            if (node.isChild()) {\n                ancestry = ancestry.concat(node.parent().data(\"id\"));\n                ancestry = getAncestry(node.parent(), ancestry);\n            }\n            return ancestry;\n        }\n        function getCommonParent(node1, node2) {\n            var ancestry1 = getAncestry(node1);\n            var ancestry2 = getAncestry(node2);\n            var shortArray;\n            var longArray;\n            var commonParent;\n            //find which is shorter\n            if (ancestry1.length <= ancestry2.length) {\n                shortArray = ancestry1;\n                longArray = ancestry2;\n            } else {\n                shortArray = ancestry2;\n                longArray = ancestry1;\n            }\n            //if first element in shortArray is in longArray, then it is\n            //the closest common ancestor\n            if (longArray.indexOf(shortArray[0]) > -1) {\n                commonParent = shortArray[0];\n            } else {\n                commonParent = null;\n            }\n            return commonParent;\n        }\n. ",
    "ignorabilis": "The mentioned reason for the missing hover is not actually true. Not all touch devices are missing the hover option - in fact several high end devices do have such an option when using a stylus. Just because  most of the touch devices are missing this functionality it doesn't mean that all devices should be punished for that. \nIt's the developers job to know that their product might end in an environment that does not support hover and do something about that.\n. ",
    "KWSimon": "I haven't, but I just did and I'm facing the same issue than with the 'breadthfirst' layout.\nIt seems to works fine when used without any node with attribute 'parent' set.\n. I have found a workaround for this issue too.\nIt seems to be caused by the randomizePositions() and nodeRepulsion() functions.\nrandomizePositions() ignores parents nodes (nodes with childs), so  their positions stay undefined. When  nodeRepulsion() process nodes it doesn't ignore parents nodes. As a result the computed direction and the offset values are NaN.\nThese NaN values are propagated in the updatePositions() function.\nTo fix this I did two things : \n- I set a default position to compound nodes in randomizePositions()  : \njavascript\n    // No need to randomize compound nodes\n            if (0 == n.children.length) {\n            n.positionX = Math.random() * width;\n            n.positionY = Math.random() * height;\n            } else {\n                n.positionX = 0;\n                n.positionY = 0;\n            }\n- I added the following code at the beginning of the javascript nodeRepulsion() function :\njavascript\nif ((0 < node1.children.length && 0 == node2.children.length) || (0 < node2.children.length && 0 == node1.children.length)) {\n            // No repulsion between parent and children\n            return;\n        }\nin order to avoid repulsion between parents and children.\nNow I think it's useless to do some repulsion between parents. In this case it should be useless to modify  randomizePositions().\n. ",
    "Trott": "The way I'm reading the logic:\n- this._private.instanceId only gets checked if this._private is truthy ...\n- ... which means that this._private has been defined ...\n- ... which means that instanceId has been set to the value of reg.id in line 56 ...\n- ... and that's the only time instanceId gets set in the code ...\n- ... reg comes from $$.registerInstance() which is defined in line 10 of instance-registration.js ...\n- ... which always sets id to a non-empty string\n- ... ergo, the check for instanceId can actually be removed entirely as it is guaranteed to be a non-empty string.\nSure enough, all the tests pass without that check.\nIs that about right or am I missing something? \n. I've reverted that change. The only non-whitespace change now is adding the semicolon on line 206.\n. ",
    "ikavalio": "\nAssuming O(1) implementation of array.splice(), you can just use an array for Dijkstra. Keep the array sorted by using a binary search for inserts via splice(). This gives O(n log n) overall, with the added benefits that (1) you don't need a heap and (2) the removal for smallestDist() is O(1) rather than O(log n) as in a heap.\n\nSounds reasonable. I'll try to implement it.\n. Hi Max, thank you for your feedback! \nI'll follow your advices and change my code. I think the heap should be primarily specialized for holding graph elements, so I'll remove id generator function and use $$.is.elementOrCollection() in methods you've noted.\n. I've committed changes to my fork (2.2.0 branch). Heap will only store graph elements now and most of heap methods support elements/collections or id's as input. gulp build test shows that all tests including heap tests are passed. Could you please check if it's ok and pull request can be created? \n. ",
    "lanceingle": "Here is the JS fiddle. Try clicking on the right half of the nodes. Left half works as well as the radius width past the node's edge on the left.\nhttp://jsfiddle.net/jBkLb/\nHowever, I just saw the problem. If you remove the \"col-lg-11\" class from the div cytoscape hooks to then the problem doesn't exist. Seems that the bootstrap padding is messing with the coordinates. I set the padding to 0px on my div and it fixes my problem.\nDisregard. :)\n// lance\n. ",
    "mazing": "Any update on this?. See http://jsbin.com/zinojirava/1.\nThe arrows are not shown correctly until you select a node.\n. It works :-)\n. Great! Can't wait :-D\n. It is implemented in https://github.com/cytoscape/cytoscape.js/commit/1bf356f89082678f276ac3bfe7974d3e3e6b1259, but when running unstable, I still get the error Uncaught TypeError: edges.filterFn(...).reduce is not a function.\n. ",
    "kalyankasyap": "ok sure I will check and let u know\n. ",
    "vojtechkral": "Ok, by experimenting I found out the position feres to node's centre (unless I'm wrong). Anyway, this should still be mentioned in the docs imho.\n. Wow, that was quick, thank you!\n. Allright by me. Btw. I love Cytoscape.js, it's the greatest graphing JS lib out there...\n. FYI, another project was recently dealing with a similar problem:\nhttps://github.com/gtk-rs/glib/issues/85\nIf you don't mind I'll re-use their wording :)\n. ",
    "humbertohdl": "Thank you, it works :) \n. ",
    "tjuan": "Thanks Max, but the problem is still there. Do you suggest me anything to solve it? \n. ",
    "kltm": "If you'd just like the patch, I can send a pull request as well.\n. ",
    "kzuberi": "Thanks for the fix! Seems to work for my simple test case if I turn off (what I think is) the caching. e.g. I change:\njavascript\nvar bb = this.containerBB = this.containerBB || container.getBoundingClientRect();\nto \njavascript\nvar bb = this.containerBB = container.getBoundingClientRect();\nGuess its caching the position before the scroll?\n. Ok, maybe I'm doing something weird or wrong. Here's the test case: https://gist.github.com/kzuberi/11299728 running here: http://jsbin.com/wawum/2\nIf it is cache (and there isn't a further fix), would having a disable-cache switch for odd-ball users like me be possible?\n. Yes this works for me, thanks again!\n. For what its worth it seemed to work okay for me after Max's fix. My half baked implementation is here though by now i've forgotten most of how it worked.\n. ",
    "AaronWatters": "I'm seeing this problem in Cytoscape.js 2.4.8.  Is there a patch?\nI'm also using IPython notebooks.\nThe symptom is that the network responds correctly to mouse events until I move the containing scroll bar.  After that the events are responding to the wrong position.\nIf you want to see this in action go to http://mybinder.org/repo/simonsfoundation/jp_gene_viz and then navigate to the I-Python notebook at \"examples/cytoscape demo.ipynb\".\nIn the notebook do \"Cell --> Run All\" to execute the notebook.\n. The problem is that the network has finished initializing before the DOM element is positioned in the document tree.  For this reason the containing divs are not all updated with the onscroll event.  Here is a work around for my Jupyter/IPython notebook widget:\nhttps://github.com/simonsfoundation/jp_gene_viz/commit/b5aa536edc32ceda7bdb1c2f8c8943fc73458fba#diff-2a0de7348fa9ad6d5ebde063aa952462R36\nIt would be nice to add some sort of cy.fix() functionality to fix up the onscroll events after initializations to support applications that do sophisticated DOM manipulation like this.\n. Thanks @kzuberi.  I read and learned from your code.  I didn't get it to work with the latest version of Jupyter, but that may be my fault.  I think the widget framework has changed pretty significantly recently.  The scrolling was definitely an issue before the patch mentioned above.\n. @maxkfranz -- I will request that Jupyter inform plugin widgets when they are (re)positioned in the DOM.  If they implement this then I can simply postpone the \"real\" initialization until after the object is positioned.  I still think it would be nice to have an official interface to allow cytoscape.js client code to say \"please fix up the event callbacks on all ancestor containers\" (unless it already exists and I missed it).\nI'm not sure why the Jupyter widget interface creates objects first and then positions them later, but I'm assuming there may be a good reason for it.  Thanks!\n. ",
    "pkovac": "I agree (1) and (2) would suffice and certainly resolve my problem, and that'd be an adequate solution.\nWe could mitigate (3) by offering an SQL or formatted-string-style placeholder system, ie, \ncy.elements(\"node[ foo = ?][bar >= ?][id != ?]\", [\"baz\", 30, badnode.id()]);\nIt might take a little more work to implement, but generally speaking I think it's worth it to discourage people from building the selector queries via concatenation.\n. I suppose it's reasonable for sanitization to be done in my case; it's not strictly user-facing input, it's input from a configuration mechanism in another web application. We do allow our users to interact with these configuration details, however, and it would be useful if it could perform its own validation.\ncy.layout() already performs some basic validation and logs it using console.error(); all I suggest is that instead of simply logging it but otherwise silently failing, it throws an exception.\n. I agree with you on further reflection. Thanks.\n. ",
    "eallik": "what does \"but position relatively w.r.t. UI\" mean exactly?\n. ",
    "JoshTGreenwood": "This should be tagged with documentation.\n. +1\n. ",
    "zachia": "An example i found : \nhttp://jsfiddle.net/tk7Wv/2/\n. Hi , how can i test it ? \nthank you !\n. ",
    "ckapopoulos": "This is happening on iOS 7. \n. So this might not be just an issue with mobile browsers. I think it is just easier to detect the issue using responsive media sizes.\nThe visibility CSS property is still leaving the space: https://developer.mozilla.org/en-US/docs/Web/CSS/visibility\nThis code only adds new height and width to the CanvasRenderer.CANVAS_LAYERS (this.data.canvases) when maybe it should be done to the CanvasRenderer.BUFFER_COUNT as well (this.data.bufferCanvases).\n``` javascript\nfor (var i = 0; i < CanvasRenderer.CANVAS_LAYERS; i++) {\n  canvas = data.canvases[i];\n\n  if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n\n    canvas.width = canvasWidth;\n    canvas.height = canvasHeight;\n\n    canvas.style.width = width + 'px';\n    canvas.style.height = height + 'px';\n  }\n}\n\n```\n. That did the trick! What did you end up doing? Did you just remove buffers from the DOM?\n. ",
    "hpwdetica": "Great, thanks.\n. ",
    "jtal": "@maxkfranz Is there a way now to autoposition?\n. Here's what was happening. My container is a div with id \"cy\". In a css file I set an initial height for #cy and on document ready I invoke cytoscape then resize height of #cy to fill the window. When the browser window is resized, I call my resize() again so #cy height always matches the browser height.\nThe problem is when I import picnic css something goes wrong. I suspect that at the time cytoscape() is called the height is very small. So it draws all the nodes at what appears to be (0,0).\nI found two ways to get around this:\n1. Call resize() before cytoscape()\n   or\n2. Set initial height inline within #cy div instead of setting it in the css file. This must be a precedence thing.\nHere is an example. I dont think there is anything for you to fix. Thank you for cytoscape by the way. ;)\nhttps://gist.github.com/jtal/ec5a67f547eb038765afc393de0af919\n. ",
    "guimeira": "It's working consistently (tested on Chrome and Firefox), I made it because of some cases in our application where the graph has a lot of details at some part, so a friend suggested that it would be nice if we had \"more levels of zoom\".\n. Changed it to use the inverse transform, but feel free to modify it if you think it's necessary :)\n. ",
    "ktei": "@maxkfranz I think the original issue one of the users mentioned is this: he wishes to select a node (we highlight node border for selected nodes using stylesheet) immediately after he clicks on the node. But as you know sometimes you click on a node with a little bit dragging it, which makes the system think you are dragging so the node will not be selected (highlighted), because the selection occurs in mouseup event. So I changed a bit code to make selection happen in mouse down regardless of dragging or not, as long as the node is hit. The tap distance, if I understand it correctly, is to tolerate users with fat fingers in case that can't tap on a node precisely. As far as I am concerned, none of our users has reported this kind of issue yet. Not sure if this helps you?\n. Okay. I think I misunderstood the tap distance. I need to get your changes and have a try. I will let you know soon.\n. Hi, @maxkfranz \nI just pulled your changes to my forked repository. I think it's working fine. I'm going to push that changes to production soon I think. I do think you can provide the tap distance option to developer users, but maybe warn them in the documentation that this is preferred to stay unchanged unless they know what they're doing?\n. I actually git clone this project and installed gulp to build it myself and this way I could just exclude all the layout files from the build.\n. @maxkfranz, thank you for the reply. Actually in our project we just want to reduce label overlapping. As for the language reading issue you mentioned, yes, it will be a concern but still we want to try it and let users give feedback. If possible, could you give some tips as to how to implement this? So basically whenever you zoom, pan or drag nodes, the labels will keep align with edge direction. Thank you.\n. @maxkfranz thank you! Let me try it first.\n. Hi, @maxkfranz , I did something as you suggested, and I got some result already but I'm having an issue that after what I did, I lost control of the font-size of edge labels and node labels.\nFirst, let me show you what I did:\nIn the file Renderer.canvas.drawing-label-text.js, I found the method drawEdgeText and I added something to it so currently the method is like this:\n``` javascript\n// Draw edge text\n  CanvasRenderer.prototype.drawEdgeText = function (context, edge) {\n      var text = edge._private.style['content'].strValue;\n      if (!text || text.match(/^\\s+$/)) {\n          return;\n      }\n  if (this.hideEdgesOnViewport && (this.dragData.didDrag || this.pinching || this.hoverData.dragging || this.data.wheel || this.swipePanning)) { return; } // save cycles on pinching\n\n  var computedSize = edge._private.style['font-size'].pxValue * edge.cy().zoom();\n  var minSize = edge._private.style['min-zoomed-font-size'].pxValue;\n\n  if (computedSize < minSize) {\n      return;\n  }\n\n  // Calculate text draw position\n  context.textAlign = 'center';\n  context.textBaseline = 'middle';\n\n  this.recalculateEdgeLabelProjection( edge );\n\n  var rs = edge._private.rscratch;\n\n  // Rotate the label to make it align with the edge\n  context.save(); // This might have already messed things up\n  context.translate(rs.labelX, rs.labelY);\n\n  var deltaX = rs.endX - rs.startX;\n  var deltaY = rs.endY - rs.startY;\n\n  var angleToRoate = Math.atan2(deltaY, deltaX);\n  var fmod = function (x, m) { return ((x % m) + m) % m; };\n  var newAngle = fmod((angleToRoate + Math.PI / 2), Math.PI) - Math.PI / 2;\n\n  context.rotate(newAngle);\n  this.drawText(context, edge, 0, 0);//rs.labelX, rs.labelY);\n\n  //this.drawText(context, edge, rs.labelX, rs.labelY);\n\n  context.restore();\n\n};\n```\nAnd I styled the node and edge like this:\njavascript\n                var style = cytoscape.stylesheet()\n                    .selector('node').css({\n                        'width': '15px',\n                        'height': '15px',\n                        'border-width': 1\n                    });\n                    style.selector('edge').css({\n                        'width': 0.5\n                    });\n                    style.selector('node, edge').css({\n                        'font-size': '4px' // Even 4px makes the font super big\n                    });\nBut after these changes, the labels are so large now. So I guess I must have messed up something in drawEdgeText so that the labels (even including the node labels) do not respect the style anymore. It seems like the font size goes back to 10px instead of 4px.\nCould you have a look at what I've done and give some help here? I'd love to make this work and contribute it back to this project actually. Thank you : )\n. We got some progress on this:\nIn src/extensions/renderer.canvas.drawing-label-text.js, we added some code and removed one line like below:\n``` javascript\n     ...\n     // this.recalculateEdgeLabelProjection( edge );\n // Add these lines to make rotated edge text work - start\n var rs = edge._private.rscratch;\n var deltaX = rs.endX - rs.startX;\n var deltaY = rs.endY - rs.startY;\n var angleToRotate = Math.atan2(deltaY, deltaX);\n var fmod = function (x, m) { return ((x % m) + m) % m; };\n var newAngle = fmod((angleToRotate + Math.PI / 2), Math.PI) - Math.PI / 2;\n context.translate(rs.labelX, rs.labelY);\n context.rotate(newAngle);\n\n // Rotate the label to make it align with the edge\n this.drawText(context, edge, 0, -7);\n context.rotate(-newAngle);\n context.translate(-rs.labelX, -rs.labelY);\n // end\n\n // this.drawText(context, edge, rs.labelX, rs.labelY); // This line is removed\n\n```\nThis worked until we noticed a small issue when we do animation. For example, during an animation in which we move one node close to another, there's some collapsed text (very tiny) somewhere on the canvas, flashing all the time until the animation ends.\nCan you give some tips how we can fix this thing? Thank you very much!\n. @maxkfranz I've pulled the code and tried it out, but still I can reproduce this issue:\n\nI can't give you the whole screenshot here because of some company policy, but as you can see that during the animation, there's collapsed text keeping flashing there (upper left). I currently have no idea how this would happen (seems to me something is not cleaned up during the redrawing per frame).\nTo reproduce, you can randomly build a graph and then animate a node to another node. Also note that you probably need to zoom out the graph a bit otherwise you can't see the flashing.\njavascript\nsomeCyNode.animate({\n  position: // put a new position here\n}, {\n  duration: 500\n})\n. So the easiest way to reproduce this. I git cloned the project where you did the tweak, and built it. Then I changed a little bit to one of the demos, and it comes down to this index.html:\n``` html\n\n\n\n\n\n<body>\n    <style>\n      body { \n        font: 14px helvetica neue, helvetica, arial, sans-serif;\n      }\n\n      #cy {\n        height: 100%;\n        width: 100%;\n        position: absolute;\n        left: 0;\n        top: 0;\n      }\n\n      #eat {\n        position: absolute;\n        left: 1em;\n        top: 1em;\n        font-size: 1em;\n        z-index: -1;\n        color: #c88;\n      }\n    </style>\n    <div id=\"cy\"></div>\n    <script>\n        $(function(){ // on dom ready\n\n            // photos from flickr with creative commons license\n\n            var cy = cytoscape({\n              container: document.getElementById('cy'),\n\n              style: cytoscape.stylesheet()\n                .selector('node')\n                  .css({\n                    'height': 80,\n                    'width': 80,\n                    'background-fit': 'cover',\n                    'border-color': '#000',\n                    'border-width': 3,\n                    'border-opacity': 0.5\n                  })\n                .selector('.eating')\n                  .css({\n                    'border-color': 'red'\n                  })\n                .selector('.eater')\n                  .css({\n                    'border-width': 9\n                  })\n                .selector('edge')\n                  .css({\n                    'width': 6,\n                    'target-arrow-shape': 'triangle',\n                    'line-color': '#ffaaaa',\n                    'target-arrow-color': '#ffaaaa',\n                    'content': 'data(label)',\n                    'overlay-opacity': 0,\n                    'edge-text-rotation': 'autorotate'\n                  })\n                .selector('#bird')\n                  .css({\n                    'background-image': 'https://farm8.staticflickr.com/7272/7633179468_3e19e45a0c_b.jpg'\n                  })\n                .selector('#cat')\n                  .css({\n                    'background-image': 'https://farm2.staticflickr.com/1261/1413379559_412a540d29_b.jpg'\n                  })\n                .selector('#ladybug')\n                  .css({\n                    'background-image': 'https://farm4.staticflickr.com/3063/2751740612_af11fb090b_b.jpg'\n                  })\n              .selector('#aphid')\n                  .css({\n                    'background-image': 'https://farm9.staticflickr.com/8316/8003798443_32d01257c8_b.jpg'\n                  })\n              .selector('#rose')\n                  .css({\n                    'background-image': 'https://farm6.staticflickr.com/5109/5817854163_eaccd688f5_b.jpg'\n                  })\n              .selector('#grasshopper')\n                  .css({\n                    'background-image': 'https://farm7.staticflickr.com/6098/6224655456_f4c3c98589_b.jpg'\n                  })\n              .selector('#plant')\n                  .css({\n                    'background-image': 'https://farm1.staticflickr.com/231/524893064_f49a4d1d10_z.jpg'\n                  })\n              .selector('#wheat')\n                  .css({\n                    'background-image': 'https://farm3.staticflickr.com/2660/3715569167_7e978e8319_b.jpg'\n                  }),\n\n              elements: {\n                nodes: [\n                  { data: { id: 'cat' } },\n                  { data: { id: 'bird' } },\n                  { data: { id: 'ladybug' } },\n                  { data: { id: 'aphid' } },\n                  { data: { id: 'rose' } },\n                  { data: { id: 'grasshopper' } },\n                  { data: { id: 'plant' } },\n                  { data: { id: 'wheat' } }\n                ],\n                edges: [\n                  { data: { source: 'cat', target: 'bird', label: 'cat' } },\n                  { data: { source: 'bird', target: 'ladybug', label: 'bird' } },\n                  { data: { source: 'bird', target: 'grasshopper', label: 'bird' } },\n                  { data: { source: 'grasshopper', target: 'plant', label: 'grasshopper' } },\n                  { data: { source: 'grasshopper', target: 'wheat', label: 'grasshopper' } },\n                  { data: { source: 'ladybug', target: 'aphid', label: 'ladybug' } },\n                  { data: { source: 'aphid', target: 'rose', label: 'aphid' } }\n                ]\n              },\n\n              layout: {\n                name: 'breadthfirst',\n                directed: true,\n                padding: 10\n              }\n            }); // cy init\n\n            cy.on('tap', 'node', function(){\n              var nodes = this;\n              var tapped = nodes;\n              var food = [];\n\n              nodes.addClass('eater');\n\n              for(;;){\n                var connectedEdges = nodes.connectedEdges(function(){\n                  return !this.target().anySame( nodes );\n                });\n\n                var connectedNodes = connectedEdges.targets();\n\n                Array.prototype.push.apply( food, connectedNodes );\n\n                nodes = connectedNodes;\n\n                if( nodes.empty() ){ break; }\n              }\n\n              var delay = 0;\n              var duration = 500;\n              for( var i = food.length - 1; i >= 0; i-- ){ (function(){\n                var thisFood = food[i];\n                var eater = thisFood.connectedEdges(function(){\n                  return this.target().same(thisFood);\n                }).source();\n\n                thisFood.delay( delay, function(){\n                  eater.addClass('eating');\n                } ).animate({\n                  position: eater.position(),\n                  css: {\n                    'width': 10,\n                    'height': 10,\n                    'border-width': 0,\n                    'opacity': 0\n                  }\n                }, {\n                  duration: duration,\n                  complete: function(){\n                    thisFood.remove();\n                  }\n                });\n\n                delay += duration;\n              })(); } // for\n\n            }); // on tap\n\n        }); // on dom ready\n    </script>\n</body>\n\n\n```\nIf you copy paste the file to the project root folder, and then build cytoscape, and start index.html in chrome, zoom out a bit, click on a node to let the animation run, and then you'll be able to reproduce the issue.\nNote that in the project you forked, I changed a bit for gulpfile.js to eliminate the layout and some other extensions from the build, but to run this example, you need your original gulpfile.js\njavascript\n    'src/extensions/renderer.canvas.define-and-init-etc.js',\n    'src/extensions/renderer.canvas.*.js',\n    // 'src/extensions/*.js' // I commented this out, so you need to uncomment this\n    'src/extensions/renderer.null.js', // I put this in. Comment this out\n    'src/extensions/layout.preset.js' // I put this in. Comment this out\nA screenshot is also attached here (Please have a look at the upper left, tiny text there):\n\n. @maxkfranz I tested the tweakfix and it fixed the issue. Thank you!\nI also created a new branch, cherry-picked the commits specific to this rotated label feature and made a pull request out of it. Please have a look at the pull request.\n. Merged from your fix. This is awesome fix. Thank you sir!\n. Okay. I changed something in renderer.canvas.load-and-listeners.js:\n``` javascript\nr.registerBinding(r.data.container, 'mousedown', function(e) {\n  // ...omitted\n  if (e.which == 3) {\n    // ...omitted\n  } else if (e.which == 1) {\n    //...omitted\n    // Selection box\n    if ( near == null || near.isEdge() ) {\n      // ...omitted\n    }\n/* To make selection easier */\nvar down = r.hoverData.down;\nif (near == down && !r.dragData.didDrag) {\n  if (near != null && near._private.selectable) {\n    var shiftDown = e.shiftKey;\n    var selectedNodes = cy.$(function(){ return this.isNode() && this.selected(); });\n    if( r.hoverData.dragging ){\n      // if panning, don't change selection state\n    } else if( cy.selectionType() === 'additive' || shiftDown ){\n      if( near.selected()) {\n        near.unselect();\n      } else {\n        near.select();\n      }\n    } else if (selectedNodes.length > 1 && selectedNodes.filter('#' + near.id()).length > 0) {\n        // if we are panning the selected nodes, don't change selection state\n    } else {\n      if( !shiftDown ) {\n          cy.$(':selected').not( near ).unselect();\n          near.select();\n        }               \n      }\n    }\n    r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true; \n  }\n}\n\n}\n}); \n```\nBasically, as you can see, I moved the node selection part from mouseup event handler to mousedown event handler. This seems working for me so far, but not sure if it breaks anything else.\n. And you need to modify the original single selection in mouseup event handler as well:\n``` javascript\nr.registerBinding(window, 'mouseup', function(e) {\n    // ... omitted a lot code\n        // Single selection\n        if (near == down && !r.dragData.didDrag) {\n          if (near != null && near._private.selectable) {\n        // console.log('single selection')\n\n        if( r.hoverData.dragging ){\n          // if panning, don't change selection state\n        } else if( cy.selectionType() === 'additive' || shiftDown ){\n          // Don't do this because it's been handled in mousedown event already\n          // if( near.selected() ){\n          //   near.unselect();\n          // } else {\n          //   near.select();\n          // }\n        } else {\n          if( !shiftDown ){\n            cy.$(':selected').not( near ).unselect();\n            near.select();\n          }               \n        }\n\n        r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n\n      }\n\n    }\n\n}\n``\n. @maxkfranz Thank you very much. I've pulled your changes and will give it a try. This project's been very helpful to us. Thank you for developing this beautiful thing.\n. @maxkfranz I'd love to but I'm not exactly sure how to do that. I was trying something like this:\n![capture2](https://cloud.githubusercontent.com/assets/2195250/5351446/57618782-7faa-11e4-9da2-88ccc00ec651.PNG)\nBut it doesn't look right to me because it has so many changes of yours, and at the bottom (not showing in the screenshot), there are my 4 changes.\n. @maxkfranz The issue I found is that: if I simply use SVG in html, for example`\nThis will work under IE; the image shows up. However, this doesn't show up for nodes in cytoscape. Maybe this is an issue of IE itself (I'm actually surprised even IE11 doesn't work), and if that is the case then I guess I'll need to detect browser and use different formats of images.\n. @maxkfranz I think you're right. I actually just checked Firefox, which doesn't work as well (SVG node not rendered properly). Now it appears to me that perhaps only Chrome works in this case. I realize that I'll just use SVG for chrome, but PNG for other browsers then.\nIf you happen to find something, please let me know, otherwise I think we can close this issue?\n. Bump up this. I currently set font-size and node width and height based on the count of visible nodes, because when there are only a few nodes, without any adjustment, all nodes and labels become very very big. I can work around with this by tweaking zoom level and style dynamically.\nIt'd be nice to see that: if a max node radius is specified, then regardless of how many nodes are there, their size won't go beyond the max node radius (which potentially means that the cytoscape would choose a proper zoom level for the graph when it's loaded...?)\nAlso, it'd be nice to see that: if a max text size is specified, then regardless of how many nodes are there, all the text's size won't go beyond the max value?\nI fully understand that at the moment, cytoscape is just trying to fully fill the canvas on loading, but it doesn't look very good when you just have a handful nodes, but each one of them is so large with very big font size.\nThoughts?\n. @pshannon-bioc I don't think that grey rectangle should be used as a selection indication; its main purpose is just to tell users 'you are selecting it'. However, if you need indication to tell users something, for example, a node has been selected, you can use style, something like this:\njavascript\n            style.selector('node:selected')\n                .css({\n                    'border-color': Settings.NODE_BORDER_COLOR_SELECTED\n                });\nCheck the documentation for more information and you'll understand.\n. I can help if the project uses React (been working on a commercial project which uses this)\n. Thank you @maxkfranz \n. @maxkfranz Yeah, I'll do that.\n. @maxkfranz I think maybe let's just make it easy:\nIf the 'autorotate' is switched on, then we always center the labels on edges. It is true that however if the user does not declare any background, the labels will be strikethrough by edges, but I think most of the time, people will want background.\n. @Braintelligence you can adjust your graph by setting zoom level (cy.zoom(2) for example).\nI think cytoscape automatically adjusts zoom level as per the number of nodes, but it does that in a very generic way.\nWhat I did in my project is to count the nodes of the graph and based on that, I set zoom level. When you see the node size gets ridiculously large, you can check cy.zoom(), and 100% you'll get a very big number, which means you just need to scale it down. Hope this helps ; )\n. @maxkfranz , @kurniaikhwan , please ignore this pull request at the moment. it is buggy. I'll review the code and do better pull request soon ; )\n. @kurniaikhwan , the easiest way for you to do this (for now) is:\n0. fork this cytoscape project\n1. git checkout unstable (switch to unstable branch)\n2. check this pull request. there should be 3 files changed and you could just manually copy paste those lines into your cytoscape. Then you need to run gulp build to build your own cytoscape\nSo basically, my changes are based on unstable branch so you need to use unstable branch and copy paste the changes in this pull request.\n. @kurniaikhwan I don't think the project owner is also maintaining the desktop version. And for this pull request, it is actually about text wrapping, not label rotating.\n. @maxkfranz I merged your changes but found a bug:\nSee the following screenshot:\n\nNote that all the labels show 'cytoscape rocks! cytoscape' but in fact the label content is 'cytoscape rocks! cytoscape rocks!' so all the labels miss the last word.\nThis is my html:\n``` html\n<!DOCTYPE html>\n\n\n",
    "unidesigner": "I'm trying to use SVGCanvas and the renderTo function. I'm running into an issue where cytoscape.js calls \ncontext.translate(centerX, centerY);\nand SVGKit implements:\nSVGKit.prototype.translate = function(elem, tx, ty) {\n    /***\n        SVGKit.prototype.:\n        translate(' translate( 1 ,2 ) ', -10,-20)\n        translate(' translate(1) ', -10,-20)\n        translate(' translate(10,20) ', 0, -20)\n        translate('translate(10,10) rotate(20)', 10, 10)  == 'translate(10,10) rotate(20)translate(10,10)'\n        translate('translate(10,10)', -10, -10) ==  ''\n        translate('translate(10)', -10)  == ''\n    ***/\n    var element = MochiKit.DOM.getElement(elem);\n    if (MochiKit.Base.isUndefinedOrNull(element)) {\n        return this._twoParameter(elem, tx, ty, \n                                   SVGKit.translateRE, 'translate')\n    }\n    var old_transform = element.getAttribute('transform')\n    var new_transform = this._twoParameter(old_transform, tx, ty, \n                                            SVGKit.translateRE,'translate');\n    element.setAttribute('transform', new_transform);\n    return new_transform;\n}\nwhere elem becomes centerX and tx becomes centerY. What would be the proper modification on the SVGKit side to properly pass the context?\nAlso, SVGKit does not implement setTransform, but has its own currentTransformationMatrix and transformations attribute. I'm trying to understand SVGKit's transformation handling better.\n. Do you know another SVG library that could do the trick?\nIt was my mistake that I instantiated an SVGKit instead of an SVGCanvas. The translate/scale transformations worked then fine. However, the library does not implement e.g. the fillText method to draw text . Adding a dummy fillText method to SVGCanvas let me create an SVG with the correct transformation, but other attributes (e.g. stroke width of cytoscape nodes) were not rendered correctly out of the box.\n. Indeed, options to specify dimensions with cy.png() would come in handy. It would be nice if you could add that. And thanks for this great library!\n. ",
    "acardona": "Hi all,\njust to comment that I managed to successfully export with SVGCanvas, with proper transformations and text. It required manglying two API mismatches:\nSVGCanvas.prototype.transform = SVGCanvas.prototype.translate;\n  SVGCanvas.prototype.fillText = SVGCanvas.prototype.text;\n... and filtering the resulting SVG DOM to fix up small issues, for example:\n1. The text of a node is rendered not centered in SVGCanvas. Had to add text-anchor: middle.\n2. Nodes are rendered with the wrong M starting point of the path, almost 0.00 ... that creates an artificial line to 0,0. And with two paths rather than one: one for the contour and one for the fill.\n3. 'triangle' arrowheads have a supernumerary point that makes the 4-point polygon fold over itself, which, in combination with a stroke of 'none', makes them invisible: no area.\nThese were easy to fix, fortunately, with a bit of ad-hoc post-processing.\nThe code is here:\nhttps://github.com/acardona/CATMAID/commit/13d5a30b72de83bb773f265c60f64c409d529c4c\nHope it helps others out there.\nBest,\nAlbert\n. Hi @maxkfranz , my workaround stopped working. Now, all paths rendered are like arrowhead paths--with the properties still correct as if they were the expected edges, arrowheads and node circles.\nAny ideas what could be going wrong?\nWe use cytoscapejs 2.2.8.\n. ",
    "tomka": "Extending the canvas renderer would be nice indeed. If time permits I might have a look at it.\nThe linked commit was in response to @acardona, because I fixed the workaround to work again. Like described in the commit message, it was Path2D which suddenly became a problem: The Chrome browser made it available by default. Cytoscape uses it for path caching as it seems, but SVGKit (which we use) can't deal with it. So I monkey-patched Cytoscape for the export to not use Path2D for the export and it works.\n. Hi @miskar, the commit linked right before my last comment in this issue contains the changes needed to make it work (at least for us). You basically need to do the following:\n```\n// Create a new SVGKit SVG canvas of desired size, it will be used to render from Cytoscape.\nvar svg = new SVGCanvas(width, height);\n// Cytoscape uses Path2D if it is available. Unfortunately, SVGKit isn't able\n// to make use of this as well and silently fails to draw paths. We therefore\n// have to monkey-patch Cytoscape to not use Path2D by overriding its test.\n// We reset to the original function after the graph has been rendered.\nvar CanvasRenderer = cytoscape('renderer', 'canvas');\nvar orignalUsePaths = CanvasRenderer.usePaths;\nCanvasRenderer.usePaths = function() { return false; };\n// Assuming your cytoscape instance is available as 'cy', render it to the SVG canvas\n// created earlier.\ncy.renderer().renderTo( svg, 1.0, {x: 0, y: 0}, 1.0 ); \n// Reset Path2D test of Cytoscape\nCanvasRenderer.usePaths = orignalUsePaths;\n```\n. Yeah we noticed the same. Cytoscape caches previously rendered elements as images. We had some success with overriding the caches during SVG export so that cache look-ups would always fail, which in turn causes the actual drawing routines to be called. However, this also didn't allow previous hack to work completely due to some problems with SVGCanvas.\nSince we only need to export relatively simple nodes and edges and their labels, we wrote our own SVG exporter in the end:\nhttps://github.com/catmaid/CATMAID/blob/dev/django/applications/catmaid/static/libs/catmaid/svg-factory.js\nOn the calling side, all Cytoscape nodes and edges are walked and rendered one by one. Luckily Cytoscape caches some rendering information, so we barely need to do any math ourselves (for now):\nhttps://github.com/catmaid/CATMAID/blob/dev/django/applications/catmaid/static/js/widgets/compartment_graph_widget.js#L2364\nDepending on how complex your graph is and the features you use, a similar approach might work for you.. Thanks for the quick reply and your explanation! Of course, locking doesn't make much sense without a position.\nHowever, I actually had this problem with nodes having a position. When I stepped through the code, _bounds was never set in the particle system during ArborLayour.run(). Sorry for the incomplete example, in this jsFiddle I added a position for the node that is locked, i.e. the first node above is now defined like this { data: { id: 'n1', name: 'n1', size: 50}, position: {x: 0, y: 0} }. So I hope I didn't misunderstand you, but the problem still shows up for me, even with a position provided.\n. Thanks a lot! This fixes this issue for me. The fromScreen() call fails due to _bounds not being set, returning undefined, like explained in the initial post.\n. Indeed, node one's position isn't changed when checked with cy.$('#n1').position(). I just expected that node n1 would end up at the same visual position with every run. Now this is exactly what happens with fit: false. Thanks for the pointer.\nHowever, when I assign a position to every node, I'd expect their relative position to stay the same over multiple layout calls. This doesn't seem to happen, neither with fit: false nor with fit: true. I've created an updated  jsFiddle that gives a position to every node (and uses v2.4.7):\nnodes: [\n          { data: { id: 'n1', name: 'n1', size: 50},\n            position: {x: 0, y: 0} },\n          { data: { id: 'n2', name: 'n2', size: 50},\n            position: {x: 100, y: 100} },\n          { data: { id: 'n3', name: 'n3', size: 50},\n            position: {x: 0, y: 100} }\n        ],\nWhile the visual representation is different with every run, I can retrieve the initial coordinates with cy.$('#n1').position() (and similar calls for the other nodes) when fit: false. With fit: true the initial locked node's position is not respected at all. With fit: false, the retrieved positions are correct, but don't match what is displayed.\n. Thanks for your input on this. I am sorry if discussion around Arbor layout isn't going to change much and I don't want to steal time from you. So please feel free to ignore my thoughts below and I come up with a solution for the problem on our side.\nYes, I read about the distinction of model position and rendered position. As I understood it, rendered positions are model positions with zoom and pan added (which could be introduced by e.g. fit: true or user action). This, however, would mean that rendered nodes would still maintain the same relative positions to each other like they do with their model position (ignoring the zoom here). So at least the direction from one node to another should be the same. This doesn't seem to hold with Arbor layout, though. To make more clear what I am referring to, I created to example image with the last jsFiddle (two different runs with fit: false):\n\n\nThe coordinates printed are the model positions (retrieved with cy.$('#n1').position() after each run). They remain constant, which is expected due to locking, but the output has not only zoom and pan added to them, their relative position to each other is completely different (except for n1).\n\nIn general, you can't expect a force layout to give deterministic results\n\nSo are you saying that all force based layouts can't deal with locked nodes in a deterministic way and will always possibly shuffle them around according to their model? If so, I might have been mistaken all along, because I thought locked nodes can't be moved no matter what (again, of course they can be zoomed/panned for rendering).\n\nNeither can you expect that fitting the graph won't change the rendered position of nodes\n\nOf course not, this makes perfect sense.\n\nCola tends to give more deterministic results.\n\nIndeed, cola respects the locked nodes and they remain at their locked position. With fit: true only zoom and pan is applied (which is expected). And cola produces the result I would have expected with all nodes locked in Arbor layout:\n\n. Indeed, Arbor doesn't move locked nodes. Thanks for your example. It made my mistake obvious: I locked only node n1 instead of all of them (which is what I meant to do). Sorry for the trouble. I didn't intend to have a deterministic layout with unlocked nodes, but thanks for the details.\nStill, the discrepancy between model position and render position in my example above feels somewhat strange, because I would have expected the layout positions to be propagated back to the model.\nAnyway, I now agree that this Github issue is invalid and Arbor does respect locked nodes.\n. ",
    "DSin52": "I noticed that in the recent versions, an option for JPG export has been added in.  Is there any hope that an SVG option will also get implemented soon considering this issue was created several months ago?\n. ",
    "miskar": "Is it possible to have an example code that uses the SVGcanvas approach as developed by acardona and tomka? I am a rookie in javascript and had difficulty in implementing the svg export functionality. Thanks a lot in advance.\n. ",
    "sepro": "I've tried the solution from @tomka , but ran into an error with setTransform (which isn't implemented in SVGKit as mentioned by @unidesigner). How did you get around this?\n. ",
    "eelco2k": "I'm also getting some error's when trying to convert canvas to svg with canvas2svg.js \ncanvas2svg.js:515 Error: Invalid value for <path> attribute d=\"L 54.1865707939973 -189.17190648836421 L 60.196982187342144 -196.81961561481185 L 50.47256805017713 -197.03931925361914\"\nSo i added this piece of code to make sure a path always starts with an \"M\". on line 515 of canvas2svg.js\nd=d.replace(/^L/, 'M');\ni'm using Canvas 2 Svg v1.0.6\n. ",
    "jelmerjellema": "When I use canvs2svg I do not get errors. The first tests however give me a svg that is filled with PNG objects for each node (our nodes have SVG backgrounds). Is cytoscapeJS rendering background SVG as PNG? In that case there is no use for exporting to SVG, because it will always contain bitmaps. \nThis is my code, which does not yet deliver a good SVG anyway.\nvar ctx = new C2S(1000,1000);\ncy.renderer().renderTo( ctx);\nvar mySerializedSVG = ctx.getSerializedSvg();. As far as I know there is no update.\nThere are two roads that people seem to follow:\n\nUse a pseudocanvas library like Canvas2Svg (the one I tried) and make the native cytoscape.js code render to this canvas. (using cy.renderer().renderTo(...))\nCreate special code to directly create a svg from the information in cytoscape.\n\nI tried the first route, because the second one is like building a new graph library for svg, including styling etc. I found out the cytoscape uses a lot of bitmap caching for speed, and as you can read above, people have tried to hack the renderer to forget the caches. What I did was just create a new cytoscape instance, fill this with the same elements - cy2.json(cy1.json()); - and  render this to the pseudocanvas.\nThis kind of worked, but not enough. The real problem in our project was, that we use SVG background images for nodes. These are rendered by CytoscapeJs using canvas.drawImage, with as argument an . At this point, any SVG paths are already turned into bitmaps, so the final SVG will contain a bitmapped image in the right dimensions for the current zoom. Not scalable at all...\nSo I am ready to give up on this. The alternative might be finding a good way to export a PNG in a given resolution. \nThe only thing I can think of right now (using route 1) is make the cytoscape renderer render svg images not through an image tag, but by converting the SVG into canvas. Maybe through Path2D (https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D) or some library?\nThis library seems to have this purpose: https://code.google.com/archive/p/canvas-svg/source/default/source.. I implemented this for our project in 3 changes to the 2.7.9 source tree. It just adds an arrow-resize: number style property for general resizing of arrows. I use it as:\nedge {\n  arrow-resize: 2.5\n}\nSo it just gives me bigger arrows all along. \nI see no issues with selecting the edge.\nShould I push this somewhere?  It quite trivial anyway.\n. I'm sorry @maxkfranz. This slipped my attention. As a bitbucket mercurial user I don't know how to create a PR or what to put in it. Can I just send a patch or something and work from there? Love to help!\n. I'm sorry for my incommunicado, I've been very busy lately and as I said, I don't have any experience with GIT or PR's. I'm a mercurial type. \nIt's really literally 3 lines of code. So maybe this will work? I attach the files that changed. If you search for  you will find the additions that I have done. In this code, the css property I added is called sihw-arrow-resize. (sihw is the abbreviation of my company name Spin in het Web). As @maxkfranz said, maybe arrow-scale is a better name?\nIf that's not enough, maybe you can tell me how to do the PR.\nI don't need the credits, but I'm not against them either. Your call ;-)\nSo here's the \"code\". Can you work with this? If not, I promise I now will make free some time to do the PR.\nAgain, sorry for the delay.\nBest, Jelmer\nsihw-patches.zip\n. Again: it's 3 lines of code. If you give me the steps, I will do it. I'm just too busy right now to play with it for half a day...\nMax Franz notifications@github.com schreef op 11 november 2016 21:28:35 CET:\n\n@ugurdogrusoz Would one of your students be able to search/diff\n@jelmerjellema's zip file and make a pull request from it?\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/cytoscape/cytoscape.js/issues/884#issuecomment-260048322\n\n\nSent from my Android device with K-9 Mail. Please excuse my brevity.\n. @metincansiper Nice, thank you! There seems to be on line missing. In properties.js there is another line (in my zip file line 425) that needs to be added, to add the property to the property map.\n. ",
    "tfjmp": "Is there any update on svg export? My apology if it is already supported through an extension.. ",
    "gexiaowei": "@jelmerjellema I try your way to use your code\nvar ctx = new C2S(1000,1000);\ncy.renderer().renderTo( ctx);\nvar mySerializedSVG = ctx.getSerializedSvg();\nit has no error happend, but it just output and svg with base64 encode image\nif I use ctx.getSvg(); it has an error say Uncaught Error: Attempted to apply path command to node g\nI just want to know if I can output an svg with nodes. ",
    "zfrenchee": "@maxkfranz I just downloaded cytoscape and it seems like this is a feature on the current release. Might be suitable to close this issue. Thanks for providing this feature! . My mistake @VGSebastian!. ",
    "VGSebastian": "@zfrenchee I don't see any mention of this in the release notes or other documentation of cytoscape.js. Are you maybe confusing cytoscape.js and cytoscape? The former is a JavaScript library while the latter is a standalone desktop app. See also http://manual.cytoscape.org/en/stable/Cytoscape.js_and_Cytoscape.html. ",
    "kinimesi": "I have created an extension that exports current graph as an SVG image. It works for most of the simple graphs. Here is a simple demo.\nIt uses canvas2svg library. I know it is hacky, but until we have something better, we can make use of it.. @maxkfranz @ugurdogrusoz https://github.com/cytoscape/cytoscape.js/pull/1896 does not fix this issue. When the padding of parent is small or zero, same problem arises. See the image below (padding of a is 0px):\n\nThis fix https://github.com/iVis-at-Bilkent/sbgnviz.js/commit/2cd459ee87f26e31743c689c187f80532742ae2b only makes sure that the shape still looks like barrel when the width or height of the node is too large.. ",
    "dtritus": "Yes, now it works as expected. Thanks.\n. ",
    "ggirelli": "Edge length is based on vertices position. You could specify the position of the starting states (black nodes) to have an edge of the desired length.\n. Are cy.pan() and cy.panBy() what you are looking for?\nhttp://cytoscape.github.io/cytoscape.js/#core/viewport-manipulation/cy.pan\n. with v2.3.10 (and v2.3.9 too) sometimes the panning does not work: i.e.: the gray circle appears but then I can't pan and instead the box selection is triggered...\n. Tested: the snapshot works perfectly! :D\nSo, can I assume that this bug will be fixed in the next build?\n. ",
    "lynaghk": "@maxkfranz Ah, great idea on customizing the forces. I'm going to assume that will work and close this issue. Thanks!\n. ",
    "IonicaBizau": "I found a workaround to set the width using the content length.\njs\n...\nwidth: label.length * 10\n...\nGlad to hear that this will be added. Thanks!\n. @KristianKarl Something like this: http://jsbin.com/resuwe/2/\njs\ncytoscape.stylesheet()\n    .selector('node')\n      .css({\n        ...\n        width: \"data(width)\"\n      })\nAnd the nodes are:\njs\n[\n { data: { ..., width: ... } }\n]\n. You're welcome! :smile: \n. NIce! :tada: \n. ",
    "KristianKarl": "@IonicaBizau  Where do you set width: label.length * 10?\nCould show using this as an example?\nhttps://gist.github.com/KristianKarl/d9ee356295042ef44504\nThanks in advanced.\n. @IonicaBizau  Works like a charm. Thanks\n. +1\nOn Fri, Jan 8, 2016 at 9:20 AM Jean Ponchon notifications@github.com\nwrote:\n\n[image: :+1:] Excellent\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1213#issuecomment-169929526\n.\n. \n",
    "Braintelligence": "I don't want to open a new issue for this, because my request is closely related to this one.\nI want the nodes to automatically resize with the amount of child nodes they have. Any ideas on how to accomplish this?\n. I'm sorry, perhaps I didn't specify it clearly enough.\nWhat I want is: Let's say node A has 10 child nodes and another node B has 100 child nodes. I want the size of node B to >automatically< be bigger than node A.\nIf you add 90 child nodes to node A I want node A and B to be the same size.\nIf you add 200 child nodes to node A I want it to be the former size of B (big) and node B to be the former size of node A (small).\nSo as I said: Automatically resize the node related to the amount of child nodes they have.\nI don't think I will achieve this with your code, will I? I can't see any relation to the >amount< of child nodes and the size of the parent node. Please tell me where you adress this?\n. Alright, thanks. I'm sorry for derailing this issue.\n. Actually I am interested in creating something like this in the future but with an emphasis on viszualized knowledge bases.\n. Perhaps this could be related to having parent nodes which have edges to their childs? It seems only 'cose' is able to handle this?\nEdit: If I remove all edges who point from parent to child dagre starts to work but the 'Test' node isn't being displayed even though it is clearly in the set of nodes at initialization.\n. Thank you very much. I seem to have missed that not all layouts support compound nodes. From what I gather, I think I won't use compound nodes then.\nI will experiment a bit with your snapshot though for broadening my experience with cytoscape.js.\n. I get what you mean. I think I may have misunderstood the concept of compound nodes, anyway. I thought it was a means to visualize trees (with their parent and child nodes and such), but using compound nodes had brought issues up, that I am not yet experienced enough to solve by myself.\nRelying on the \"traditional\" nodes is sufficient for my purpose for now, though. Cytoscape.js is a great tool :).\n. Thank you very much for answering. In this case I'll implement the needed functionality via cxtmenu.\n. I'm not sure if we're talking about the same thing guys.\nLet me try to explain:\nRight now I have a function that changes all width values of nodes such that their label, that is being displayed within the node, is visible.\nWhat bothers me is that nodes with very short names become very very narrow-elliptic and look strange. I want them to have a minimum width so that they at least are a perfect circle when the content is short.\nI could achieve this by making my width function such that it never returns less than width X or with a css min-width that Cytoscape.js does not support. I'm asking whether Cytoscape.js might support this CSS command in the future.\n. Ok then I'll just change my function :). Thanks.\n. ",
    "MissChocoe": "@Braintelligence In your style, add this information: \n$node > node {   \n    width : auto;\n    height : auto;\n}\nThis will let node that have children be autosize. You can optionally set padding information.\n. In theory the more children you have the more space they will take so the bigger the parent will be. Other than that you could use properties mapper to have a more specific relation between the node size and the amount of children but you will need to put the number of children in the data attribute of the parent.\n. So if we set up cyto but have the data later on, should we used the \"add\" and then run a layout?\n. Performance issue will be address with your none property since no additional shape will be drawn in that case or when opacity is set to 0. I'm sure at some point someone will want rounded corner ;) Might as well put it as an option (but used regular rectangle by default). Properties name make sense.\n. I've created a pull request with this feature. I decided to let go of the round rectangle to simplify rendering of all that but added the border in addition to background color. So here's the full list of new properties: \n- text-background-color : A color to apply on the text background, may be none or a valid color.\n- text-background-opacity : The opacity of the label background.\n- text-border-width : The border width to put around the label.\n- text-border-style : The style of the border around the label; may be solid, dotted, dashed, or double.\n- text-border-color : The color of the border around the label.\n. One more property that could be added is text-margin. For now, I've fixed it to 4px so the text is not glue to the border. Maybe we should let user control that. \n. I agree that the select event that is triggered more than one is a separate issue since it is a bug. I've had my way around it by selecting a property on the node that I removed when the node is unselected.\nIf someone call \"unselect\" on a node, it will be raise the event if that node was never actually selected. This is probably another issue.\nFinally, I do something when a node is unselected and something else when no more node are selected. To know that, I rely on the tap on the canvas at this point which means selection is cleared. It would be simpler to have a selectionChange event that is raised event when the selection is cleared. Or maybe the canvas could raise a select event, but that doesn't seem to jive. But if elements that are removed ought not to raise selection event, than it wouldn't be that useful anyway. I guess you do that so if the node is restored it will come back selected? I'm not clear on why having a node not in the graph selected makes sense.\n. @maxkfranz  Thanks for the \"remove\" event, I've missed it! :+1: \n. @maxkfranz Thanks for your fix!\n. @maxkfranz  My pleasure! When do you plan on closing v2.4? I'll try to download the latest changes to do some testing before the deadline.\n. There is one issue that I didn't know how to fix: when zooming out, the shadow becomes bigger.\n. @ktei That would be the best option. text-border-radius would be the property to addd to do so\n. @maxkfranz totally agree with you, shape property would be enough. \nBy the way, I'm working with the unstable version and it seems to go smoothly!\n. @maxkfranz  Sorry, I had this issue a while ago so when I reported it, I forgot what I've tried which was those property.\nSo the problem is probably more related to the documentation, I don't know how to define this.\nIn my cycss file I tried to add the following:\ncore {\n    outside-texture-bg-color: #fff;\n}\nBut I got the following error message:  \"The selector coreis invalid\"\nSo what should I be using as a selector? The doc says \"You can use the special core selector\"\n. In case someone has the same issue than me... it works. You do have an error message in the console telling your the \"core\" selector is invalid, but changes will be done anyway.\n. ",
    "karlitos": "I do not want to open new ticket for this so I will post my question here:\nThe only way I was able to achieve left-aligned labels inside of nodes was to set:\njavascript\n'width': '300px',\n'text-wrap': 'wrap',\n'text-max-width': '300px',\n'text-valign': 'center',\n'text-halign': 'right',\n'text-margin-x': '-300px',\nHow can I set the margin  depending on the label size ? I tried '-label' and '-1*label', but this seems to be not working. ",
    "zwemarn": "Thanks Max! :)\n. I want to ask another thing max. Now I have function for right click on nodes using this plugin (https://github.com/cytoscape/cytoscape.js-cxtmenu). \nCurrently I have to right-click on node and the commands box (like bookmark, text, change color...) will show. I need to hold that right click to see all those commands and if i un-hold the right click they will gone.\nWhat I want to do now is that I just want to right-click once on that node and able to see those commands, even if I un-hold right-click I still want to see those commands. Is it possible?\nThanks.\n. Oh I see. Anyway thanks Max!\n. ",
    "Giant2": "Thanks maxkfranz,\nbut... if I MUST use IE8/IE10(+IE8Compatibility), what can I use now in 2014 managing graph?\n. Thanks maxkfranz.\nI'm trying to use cytoscape.js in IE8 making some modification to it and using even excanvas.js and html5.js\nDo you have/Is there anyone done it? Any suggestion?\nI changed something (event are different for example) and arrive in a situation where no js error are present, but I see the nodes images on the top left and no edges shown. Any idea?\nThanks\n. Are there any news about this interesting idea?\n. To display the labels I did this:\n'content': 'data(content)', //in the selector node\nfit seems ignored, so I put this:\ncy.fit(); //in the ready method\n. Thanks for the answer, but with the version I use 2.2.12 xy.extent doesn't exist.\nIs there any other manner to take the bounds of the viewport?\n. Ok, I upgrade and patch my code (now I use the version 2.3.9). But I see the number passed in node.position() are not taking care of the eventual label (content) displayed with the node.\nIs there a manner to take care even of this?\n. Good! Is there an example of use?\nIn my case I need all the 3 options to true, but how can I do?\n. ",
    "joaoffalcao": "I tried to adjusting maximalAdjustments and as you can see on my first comment, I'd choose maximalAdjustments=10\nBy the way,my JSON elements are\n{\n\"nodes\":[\n{\"data\":{\"id\":\"R0\",\"name\":\"Ruleset\"}},\n{\"data\":{\"id\":\"R1\",\"name\":\"Rule1\"}},\n{\"data\":{\"id\":\"P0\",\"name\":\"METHOD : DELETE\"}},\n{\"data\":{\"id\":\"A0\",\"name\":\"Actions\"}},\n{\"data\":{\"id\":\"A1\",\"name\":\"Connection : close\"}},\n{\"data\":{\"id\":\"R2\",\"name\":\"Rule2\"}},\n{\"data\":{\"id\":\"O0\",\"name\":\"Or\"}},\n{\"data\":{\"id\":\"P1\",\"name\":\"a\"}},\n{\"data\":{\"id\":\"O1\",\"name\":\"Or\"}},\n{\"data\":{\"id\":\"P2\",\"name\":\"b\"}},\n{\"data\":{\"id\":\"P3\",\"name\":\"c\"}},\n{\"data\":{\"id\":\"P4\",\"name\":\"d\"}},\n{\"data\":{\"id\":\"O2\",\"name\":\"Or\"}},\n{\"data\":{\"id\":\"P5\",\"name\":\"e\"}},\n{\"data\":{\"id\":\"P6\",\"name\":\"f\"}},\n{\"data\":{\"id\":\"A2\",\"name\":\"Actions\"}},\n{\"data\":{\"id\":\"A3\",\"name\":\"Cache-Control:no-cache, must-revalidate, max-age=0\"}},\n{\"data\":{\"id\":\"A4\",\"name\":\"Pragma:no-cache\"}},\n{\"data\":{\"id\":\"A5\",\"name\":\"https\"}},\n{\"data\":{\"id\":\"D0\",\"name\":\"REDIRECT_PERM\"}}\n],\n\"edges\":[\n{\"data\":{\"id\":\"0\",\"source\":\"R0\",\"target\":\"R1\"}},\n{\"data\":{\"id\":\"1\",\"source\":\"R1\",\"target\":\"P0\"}},\n{\"data\":{\"id\":\"2\",\"source\":\"P0\",\"target\":\"A0\"}},\n{\"data\":{\"source\":\"A0\",\"target\":\"A1\"}},\n{\"data\":{\"id\":\"4\",\"source\":\"R0\",\"target\":\"R2\"}},\n{\"data\":{\"id\":\"5\",\"source\":\"O1\",\"target\":\"P2\"}},\n{\"data\":{\"id\":\"6\",\"source\":\"O1\",\"target\":\"P3\"}},\n{\"data\":{\"id\":\"7\",\"source\":\"P1\",\"target\":\"O1\"}},\n{\"data\":{\"id\":\"8\",\"source\":\"P2\",\"target\":\"P4\"}},\n{\"data\":{\"id\":\"9\",\"source\":\"P3\",\"target\":\"P4\"}},\n{\"data\":{\"id\":\"10\",\"source\":\"O0\",\"target\":\"P1\"}},\n{\"data\":{\"id\":\"11\",\"source\":\"O2\",\"target\":\"P5\"}},\n{\"data\":{\"id\":\"12\",\"source\":\"O2\",\"target\":\"P6\"}},\n{\"data\":{\"id\":\"13\",\"source\":\"O0\",\"target\":\"O2\"}},\n{\"data\":{\"id\":\"14\",\"source\":\"R2\",\"target\":\"O0\"}},\n{\"data\":{\"id\":\"15\",\"source\":\"P4\",\"target\":\"A2\"}},\n{\"data\":{\"id\":\"16\",\"source\":\"P5\",\"target\":\"A2\"}},\n{\"data\":{\"id\":\"17\",\"source\":\"P6\",\"target\":\"A2\"}},\n{\"data\":{\"id\":\"18\",\"source\":\"A2\",\"target\":\"A3\"}},\n{\"data\":{\"id\":\"19\",\"source\":\"A2\",\"target\":\"A4\"}},\n{\"data\":{\"id\":\"20\",\"source\":\"A2\",\"target\":\"A5\"}},\n{\"data\":{\"id\":\"21\",\"source\":\"A3\",\"target\":\"D0\"}},\n{\"data\":{\"id\":\"22\",\"source\":\"A4\",\"target\":\"D0\"}},\n{\"data\":{\"id\":\"23\",\"source\":\"A5\",\"target\":\"D0\"}}\n]\n}\nMeanwhile, I will try with the unstable version.\n. ",
    "mchelen": "This would be good, I know JSBin is pretty reliable but it happens to be down at the moment, and it would be nice to still have access to example code.\n. ",
    "dbeanm": "1) I'm loading a saved state, so I do want to reset first but I can achieve the desired effect by first removing all elements, then using cy.add() as you said, thanks.\n2) I want to use preset positions.\n3) Thanks, I thought it probably would be! As I said, I don't want to run a layout on load.\nSo there's no way to use preset node positions with cy.load() now?\n. That fixed it, thanks!\n. ",
    "garetthowardson": "Sorry. I'm just getting the hang of things. I don't think this was the right place for this. Sorry. \n. ",
    "jsalankey": "I believe I can polyfill it with a noop function. It precludes the use of dotted/dashed lines, but I was avoiding them anyway.\n. We had just been using the dist versions for convenience and hadn't had any issues until now. We will look at building it ourselves to see if we can get around this issue. Thanks for looking at it.\n. Is a hyperedge just a grouping of all links between the two same nodes? \nIn the application I work on using Cytoscape, I would have great use for an automated mechanism for grouping edges together based on a bucketing field. I am currently doing it in my own code and building Cytoscape edge elements out of my own group objects, but it's a cumbersome data model that doesn't mesh well with Cytoscape, and a native implementation would be extremely helpful. It significantly reduces the amount of rendered edges, unclutters the graph, and conveys the importance of an edge if you weight it by multiplicity.\n. I have encountered the same thing for a while. Generally it happens worst after the tab has been inactive for a fairly long period of time.\n. Looks good, thanks.\n. Is there any kind of simple FPS capping method that could be implemented as a parameter on instantiating the Cytoscape instance? Something totally optional, but that might help with this IE issue and potentially with anybody who doesn't want or need the renderer to be cranking out as many FPS as possible for other reasons?\n. So on further experimentation, it's not the FPS cap that is the problem. The problem is that startRenderLoop is called every time notifyis called on the renderer.\nEvery time startRenderLoop is called, it re-registers renderFn as an animation frame callback. This results in enormously more calls to renderFn than intended per animation frame, most of which do nothing because r.requestedFrame is false. If you compare it to the registering of the animation loop in animation.js, renderFn gets called potentially hundreds, even thousands of times more often. Every interaction with the graph results in another renderFn call per animation frame.\nChrome and FF seem to handle this well, but IE does not. I also don't think that Chrome and FF will handle it indefinitely--their performance will eventually degrade as well as a result of runaway calls of renderFn (even though they don't actually hit the r.render call).\nAfter further testing, Chrome holds up like a champion, but eventually slows to a crawl. The framerate drops from ~60 to ~20 at around 150k calls per second to renderFn.\n. I like this idea. I'm battling with this problem right now in my app and I'm gonna have to settle on a solution where I just hide labels when the layout is calculated.\n. I've been doing it by setting the private variable on the Cy instance, but yes, it would be nice to have a setter. It's useful for the case of wanting a regular click to select normally and a ctrl+click to select additively.\n. This fixes the problem, thanks.\n. ",
    "nrchaudhry": "I am facing the same problem, How can I solve this? It is in the latest release but it works fine in previous version.\n. ",
    "michalhabala": "Hi Max,\nI looked at this and find out that it's slow on every firefox (not only on Linux) and it's just incorrect constant in file renderer.canvas.load-and-listeners.js in the wheelHandler function. Around line 907 there is this:\nvar diff = e.wheelDeltaY / 1000 || e.wheelDelta / 1000 || e.detail / -32 || -e.deltaY / 500;\nand it should by\nvar diff = e.wheelDeltaY / 1000 || e.wheelDelta / 1000 || e.detail / -32 || -e.deltaY / 17;\nThe last part (e.deltaY) is about Firefox and I've done some tests and number 17 makes the zoom proportional just like in every other browser.\nHope it helps,\nMichal\n. I've tried that snapshot on Windows7 and the result are:\n- firefox (33.1): works fine, but there's some blur effect on zooming and panning which is not in the last cytoscape.js version I use (2.2.12)\n- chrome (38): zoom is fine but this blur effect is causing some major issues. After panning there are still blurred pictures of the graph which persist there or blink (see attached screenshot). I don't know if this is new bug or you know about this issue...\n- explorer (10): was unable to load, there is this error: \"'MutationObserver' is undefined.\" It's on line 17294 in the cytoscape.js file\nLet me know if you want me to test something specific with this snapshot.\n\n. Hey @maxkfranz , here is the style I used.\nI also tried without any styles and it makes the same problems. When I disabled motionBlur on initialization then it was OK (no motionblur artefacts).\n``` javascript\nthis.visualStyle = [\n    /*******\n     NODES\n    *******/\n        {selector: 'node[visibleByDate = 0]',\n            css:{\n                'opacity': 0.4\n            }\n        },\n        {selector: 'node',\n          css: {\n            'content': 'data(label)',\n            'font-family': 'arial',\n            'text-valign': 'bottom',\n            'font-size': 12,\n            'text-outline-width': 0,\n            'text-outline-color': '#fff',\n            'border-width': 3\n          }\n        },\n        // SELECTED\n        {selector: 'node:selected',\n          css: {\n            'background-color': '#B44600',\n            'border-color': '#FF6400',\n            'overlay-color': '#B44600',\n            'overlay-padding': 8,\n            'overlay-opacity': 0.5\n          }\n        },\n        // EXPLORING\n        {selector: 'node[exploring = 1]',\n        css:{\n            'background-image': vizo.basePath + 'images/explore.png',\n            'background-fit': 'contain',\n            'background-repeat': 'no-repeat'\n        }\n        },\n        {selector: 'node[exploring = -1]',\n        css:{\n            'background-image': vizo.basePath + 'images/loading.png',\n            'background-fit': 'contain',\n            'background-repeat': 'no-repeat'\n        }\n        },\n        // SIZE\n        {selector: 'node[typeGroup != \"companySmall\"]',\n          css: {'width': 30, 'height': 30}\n        },    \n        {selector: 'node[typeGroup = \"companySmall\"]',\n          css: {'width': 20, 'height': 20}\n        },    \n        // SHAPE\n        {selector: 'node[typeGroup = \"person\"]',\n          css: {'shape': 'ellipse'}\n        },    \n        {selector: 'node[typeGroup != \"person\"]',\n          css: {'shape': 'roundrectangle'}\n        },\n    {selector: 'node[typeID = 0]',\n    css:{'background-color': '#333333', 'border-color': '#AAAAAA'}\n    },\n    {selector: 'node[typeID = 999]',\n    css:{'background-color': '#999999', 'border-color': '#CCCCCC'}\n    },\n    {selector: 'node[typeID = 1001]',\n    css:{'background-color': '#1D8ECE', 'border-color': '#7DC4ED'}\n    },\n    {selector: 'node[typeID = 1002]',\n    css:{'background-color': '#640082', 'border-color': '#8C50FF'}\n    },\n    {selector: 'node[typeID = 1007]',\n    css:{'background-color': '#1773A4', 'border-color': '#1D8ECE'}\n    },\n    {selector: 'node[typeID = 1004]',\n    css:{'background-color': '#8C0F3C', 'border-color': '#B4326E'}\n    },\n    {selector: 'node[typeID = 1005]',\n    css:{'background-color': '#8C4600', 'border-color': '#C86400'}\n    },\n    {selector: 'node[typeID = 1008],node[typeID = 1009],node[typeID = 1015]',\n    css:{'background-color': '#2D3C50', 'border-color': '#8296AA'}\n    },\n    {selector: 'node[typeID = 1010],node[typeID = 1011]',\n    css:{'background-color': '#463232', 'border-color': '#96828C'}\n    },\n    {selector: 'node[typeID = 1006]',\n    css:{'background-color': '#006428', 'border-color': '#00B450'}\n    },\n    {selector: 'node[typeID = 1012],node[typeID = 1013],node[typeID = 1003]',\n    css:{'background-color': '#325000', 'border-color': '#78A028'}\n    },\n    {selector: 'node[typeID = 1014],node[typeID = 1099]',\n    css:{'background-color': '#5F5F5F', 'border-color': '#C0C0C0'}\n    },\n\n/**************************************************\n EDGES\n**************************************************/\n    {selector: 'edge[visibleByDate = 0]',\n        css:{\n            'opacity': 0.25\n        }\n    },\n    {selector: 'edge',\n      css: {'width': 2, 'target-arrow-shape': 'triangle', 'curve-style': 'bezier', 'control-point-step-size': 10}\n    },\n    {selector: 'edge:selected',\n      css: {\n        'line-color': '#FF6400',\n        'overlay-color': '#B44600',\n        'overlay-padding': 3,\n        'overlay-opacity': 0.5\n      }\n    },\n    // Merged edges\n    {selector: 'edge[merged = 1]',\n      css: {'width': 2, 'target-arrow-shape': 'none', 'curve-style': 'bezier', 'control-point-step-size': 10}\n    },\n\n    {selector: 'edge[typeID = 103]',\n    css:{'line-color': '#32FA32', 'source-arrow-color': '#32FA32', 'target-arrow-color': '#32FA32'}\n    },\n    {selector: 'edge[typeID = 105],edge[typeID = 108]',\n    css:{'line-color': '#646464', 'source-arrow-color': '#646464', 'target-arrow-color': '#646464'}\n    },\n    {selector: 'edge[typeID = 101]',\n    css:{'line-color': '#1D8ECE', 'source-arrow-color': '#1D8ECE', 'target-arrow-color': '#1D8ECE'}\n    },\n    {selector: 'edge[typeID = 104]',\n    css:{'line-color': '#FA32FA', 'source-arrow-color': '#FA32FA', 'target-arrow-color': '#FA32FA'}\n    },\n    {selector: 'edge[typeID = 102]',\n    css:{'line-color': '#FA3232', 'source-arrow-color': '#FA3232', 'target-arrow-color': '#FA3232'}\n    },\n    {selector: 'edge[typeID = 106]',\n    css:{'line-color': '#009600', 'source-arrow-color': '#009600', 'target-arrow-color': '#009600'}\n    },\n    {selector: 'edge[typeID = 107]',\n    css:{'line-color': '#910064', 'source-arrow-color': '#910064', 'target-arrow-color': '#910064'}\n    },\n\n    {selector: '.nodeSizeByCapital',\n    css:{'height': 'mapData(capitalIndex, 0, 100, 20, 60)', 'width' : 'mapData(capitalIndex, 0, 100, 20, 60)'}\n    }           \n];\n\n```\n. Hey @maxkfranz , try this link:\nhttp://demea.sk/fr/\nI reproduced that bug there in static html.\nJSON with data is here:\nhttp://demea.sk/fr/data.json\n. I have reinstalled video drivers on my computer and it's OK, so it was specific to my machine. Thanks for help\n. @swtyler the font part is very interesting for me also. Please can you give some more hints or pieces of code that made it possible? Thank you\n. Graphlytic - Graph BI platform\nhttp://graphlytic.sk/\n. I'm happy to help.\n. Let me know if you need jsBin example or another form of issue reproduction.\n. Works like a charm. There are no issues with it. Thanks for very fast response!\n. @maxkfranz I've tested it and it looks that there is still a small bug. When I change the width of edges (bezier) then the arrows got detached (bug) but when I move some node then the edges of this node are redrawed and the arrows are attached correctly (but only on the redrawed edges). I'm using the /dist/cytoscape.min.js file because the /src/ folder contains unpacked files, which is a bit problem for me. Is there a way how to get the .min.js file from the latest source on master?. I've tested it and everything runs ok, the issue is solved for my case. Thanks. ",
    "yifatblum": "any updates?\n. ",
    "mikekucera": "For bonus points... create an Eclipse Orion plug-in that shows npm package dependencies for an orion project.\n. A quadtree might be useful for speeding up layout algorithms. The Fruchterman-Rheingold paper mentions using a spacial grid to avoid computing forces between nodes that are not in the same grid cell.\n. ",
    "jfarid27": "It looks like the markdown filenames were camel case and gulp didn't like the reference in the docmaker.\n. Fix merged in separate PR.\n. \n. ",
    "makc": "\nIf you could provide some large test data for benchmark tests, it would help in creating those benchmarks\n\njust use any 3d mesh off the net :wink: e g this tshirt has 48386 vertices (nodes) and 96768 triangles (so by euler formula that should be around 145 thousands edges) - that's about 8 times more than in my case. should be pretty good for benchmark. also \"obj\" format is plain text with numbers so you will have no problems to parse.\n. oh and fyi, I just compiled https://github.com/polygonal/ai with haxe (this lib is optimized for flash, not js; and, being cross-compiler, haxe does add some overhead on its own). in the case of #904 their A* completes in under 4ms.\n. FF profiler seems to suggest the most of the time is spent working with node selectors?\n\nLet's see if I can get sane times by finding and passing nodes to a* myself, docs say I can do that...\n. Negative, these .filter calls do not come from a* argument selectors, they are called somewhere inside. No way to get rid of them?\n. Probably these:\njavascript\n      // Main loop \n      while (openSet.length > 0) {\n        var minPos = findMin(openSet, fScore);\n        var cMin = this.filter(\"#\" + openSet[minPos])[0];\n. Okaaaay, so doing this\n``` javascript\n    var elements = pathfinder.elements();\n    var filter = elements.filter;\n    elements.filter = function (str) {\n        if (str.charCodeAt && (str.charCodeAt(0) == 35)) {\n            return nodes[str]; // my cache\n        }\n        return filter.call (this, str);\n    };\nvar result = elements.aStar ({\n\n```\nimproves my performance by the order of 10x, but still some long paths take up to 4 seconds. I don't know, there seems to be nothing else I can do.\n. This is good improvement, although I feel it could still be better. Magenta and cyan paths here\n\ntake 0.38 and 0.96 seconds now (roughly 50x speedup). Here is updated profiler screenshot:\n\n. (allright, let's move to 770)\n. ",
    "bertomaniac": "I encountered this issue as well and went about fixing it slightly differently. The issue with not rendering an image wasn't an option for me and I needed a \"fallback\" or default image to be loaded in its place if the original image URL didn't have width and height > 0. Is there a way to perhaps incorporate a 'fallback' or 'default' image that could be included somehow? I realize this is a specific case, but in my case I don't know if the image is good or not until it is fetched by cytoscape. Right now here is how I'm handling:\nwithin CanvasRenderer.prototype.drawNode in version 2.3.4:\n``` javascript\nif (url !== undefined) {\n    // get image, and if not loaded then ask to redraw when later loaded\n    var image = this.getCachedImage(url, function(){\n      r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n      r.data.canvasNeedsRedraw[CanvasRenderer.DRAG] = true;\n\n      r.redraw();\n    });\n\n    // fallback to default if the image has width/height of 0\n    if(image.width === 0 || image.height === 0){\n        if(node.data().brokenthumb){\n            var altImage = node.data().brokenthumb;\n            node.data({\n                thumbnail: altImage,\n            });\n\n            image = this.getCachedImage(altImage, function(){\n                  r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n                  r.data.canvasNeedsRedraw[CanvasRenderer.DRAG] = true;\n\n                  r.redraw();\n                });     \n        }\n    }\n\n    if( image.complete ){\n      this.drawInscribedImage(context, image, node);\n    }\n }\n\n```\nThis does the job in both Chrome 39 and FF 34 and I'm not left with 'blank' thumbnails.\n. AjitPS, your elements JSON is malformed. Your edge IDs and node IDs overlap. My guess is that only edges 32-41 are being rendered. I believe the IDs have to be unique regardless if the element is a node or an edge.\nRecommend using an id convention like n1, n2, n3 for nodes and e1, e2, e3 for edges. Hope that helps.\n. I'm using 2.3.4 and just tried this out in our environment and wasn't able to reproduce. Perhaps this bug was introduced in 2.3.5+?\n. Any reason for deprecation? I currently use this as a \"reset\" of sorts so that I can persist existing data and load old, saved sets.\n. Perhaps there's a better way to do this, but what I am doing is resetting the core to have 0 data (but to maintain the styles and any additional click handlers I've set up). I don't want to wipe the core, but rather zero it out so that I can call cy.add() and have things work nicely.\nI've extended the core with a 'reset' function that internally calls load() with an empty collection. The callback allows me to pass in a function that can be called after load() has finished.\ncytoscape('core', 'reset', function( callback ){ \n     var cy = this;\n     cy.load(cy.collection(), null, callback);\n     return this; // chainability\n});\nI use this function later when loading in a saved data set:\n```\nvar savedNetworkData = network.get('data');\n// need a detached copy of the elements so changes to the data in the graph\n// don't affect the model                 \nvar elements = $.extend(true, {}, savedNetworkData.elements);\n// clears the graph\nthis.cy.reset(.bind(function() {\n this._cy.startBatch(); \n this._cy.add(elements);\n this._cy.endBatch();\n\n var opts = {\n      name: 'preset',\n };\n\n this._cy.layout(opts);\n\n}, this));\n```\n. ",
    "rzec-r7": "@maxkfranz Did something like this ever get implemented? I am running into weird CORS errors with trying to load images which cause cytoscape to just completely break so it would be nice to have a fallback image that it served locally (like a base64 image you mentioned above) that can be used if that happens to prevent cytoscape from completely crashing (which effectively crashes that application and requires a refresh).. @maxkfranz I am seeing a similar issue to this in 3.2.15.\nIf I have an image that fails to load because of a CORS error, 5% - 10% of the time I will get the same error of the OP but the other 90% - 95% of the time I will get the CORS error in the console but cytoscape does not bomb out (the graph still renders just without the images as expected).\nNot exactly sure why it is inconsistent or what I could do to make sure if the image fails to load for whatever reason, the graph does not bomb out but instead always renders, just without those images that failed to load.. ",
    "AjitPS": "Hi Max,\nI have been working on reproducing the issue for datasets of varying sizes and am strangely also getting the same error (i.e., some edges between nodes aren't plotted) for smaller datasets as well (just 30 nodes). I will look into my elements JSON contents and get back with a full example as soon as possible.\n. For a network graph with just 31 nodes, only 8 have edges plotted correctly despite the elements JSON file having no errors and specifying the source node, target node, node shape, colour, etc. correctly.\nI can provide the elements json and javascript code, if needed.\n\n. ElementsJSON:\nvar networkJSON= { \"edges\": [\n{ \"data\": { \"id\": \"1\", \"source\": \"1\", \"target\": \"2\", \"label\": \"enc\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"2\", \"source\": \"2\", \"target\": \"3\", \"label\": \"has_p\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"3\", \"source\": \"2\", \"target\": \"4\", \"label\": \"has_similar\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"4\", \"source\": \"2\", \"target\": \"6\", \"label\": \"has_similar\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"5\", \"source\": \"2\", \"target\": \"7\", \"label\": \"ortho\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"6\", \"source\": \"2\", \"target\": \"8\", \"label\": \"ortho\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"7\", \"source\": \"4\", \"target\": \"5\", \"label\": \"part_of\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"8\", \"source\": \"4\", \"target\": \"10\", \"label\": \"has_f\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"9\", \"source\": \"4\", \"target\": \"11\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"10\", \"source\": \"4\", \"target\": \"12\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"11\", \"source\": \"4\", \"target\": \"13\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"12\", \"source\": \"4\", \"target\": \"14\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"13\", \"source\": \"4\", \"target\": \"15\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"14\", \"source\": \"4\", \"target\": \"16\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"15\", \"source\": \"4\", \"target\": \"17\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"16\", \"source\": \"4\", \"target\": \"18\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"17\", \"source\": \"4\", \"target\": \"19\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"18\", \"source\": \"6\", \"target\": \"10\", \"label\": \"has_f\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"19\", \"source\": \"6\", \"target\": \"15\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"20\", \"source\": \"6\", \"target\": \"20\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"21\", \"source\": \"6\", \"target\": \"21\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"22\", \"source\": \"6\", \"target\": \"22\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"23\", \"source\": \"6\", \"target\": \"23\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"24\", \"source\": \"6\", \"target\": \"25\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"25\", \"source\": \"9\", \"target\": \"7\", \"label\": \"enc\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"26\", \"source\": \"9\", \"target\": \"10\", \"label\": \"has_f\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"27\", \"source\": \"9\", \"target\": \"24\", \"label\": \"loc_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"28\", \"source\": \"9\", \"target\": \"27\", \"label\": \"part_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"29\", \"source\": \"9\", \"target\": \"28\", \"label\": \"pub_in\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"30\", \"source\": \"26\", \"target\": \"31\", \"label\": \"enc\"} , \"group\": \"edges\"}, \n{ \"data\": { \"id\": \"31\", \"source\": \"29\", \"target\": \"3\", \"label\": \"has_p\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"32\", \"source\": \"29\", \"target\": \"4\", \"label\": \"has_similar\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"33\", \"source\": \"29\", \"target\": \"6\", \"label\": \"has_similar\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"34\", \"source\": \"29\", \"target\": \"7\", \"label\": \"ortho\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"35\", \"source\": \"29\", \"target\": \"8\", \"label\": \"ortho\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"36\", \"source\": \"30\", \"target\": \"29\", \"label\": \"enc\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"37\", \"source\": \"31\", \"target\": \"3\", \"label\": \"has_p\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"38\", \"source\": \"31\", \"target\": \"4\", \"label\": \"has_similar\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"39\", \"source\": \"31\", \"target\": \"6\", \"label\": \"has_similar\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"40\", \"source\": \"31\", \"target\": \"7\", \"label\": \"ortho\"} , \"group\": \"edges\"} , \n{ \"data\": { \"id\": \"41\", \"source\": \"31\", \"target\": \"8\", \"label\": \"ortho\"} , \"group\": \"edges\"} ],\n\"nodes\": [\n{ \"data\": { \"id\": \"1\", \"value\": \"BS_3468DEF53\", \"conceptColor\": \"cyan\", \"conceptShape\": \"triangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"2\", \"value\": \"BS_3468DEF53.1\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"3\", \"value\": \"PF126\", \"conceptColor\": \"grey\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"4\", \"value\": \"D14\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"5\", \"value\": \"3.1.-\", \"conceptColor\": \"cyan\", \"conceptShape\": \"triangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"6\", \"value\": \"D14L\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"7\", \"value\": \"AT3G244\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"8\", \"value\": \"MLOC_688\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"9\", \"value\": \"AT3G244\", \"conceptColor\": \"cyan\", \"conceptShape\": \"triangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"10\", \"value\": \"F420\", \"conceptColor\": \"purple\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"11\", \"value\": \"23301669\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"12\", \"value\": \"19542179\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"13\", \"value\": \"19603144\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"14\", \"value\": \"15659436\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"15\", \"value\": \"18089549\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"16\", \"value\": \"17655651\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"17\", \"value\": \"22713366\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"18\", \"value\": \"strig\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"19\", \"value\": \"shoot\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"20\", \"value\": \"flave\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"21\", \"value\": \"light\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"22\", \"value\": \"sucr\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"23\", \"value\": \"karri\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"24\", \"value\": \"cyto\", \"conceptColor\": \"lightGreen\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"25\", \"value\": \"de-etio\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"26\", \"value\": \"AS_901EDBCC0\", \"conceptColor\": \"cyan\", \"conceptShape\": \"triangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"27\", \"value\": \"bio_proc\", \"conceptColor\": \"teal\", \"conceptShape\": \"pentagon\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"28\", \"value\": \"20736450\", \"conceptColor\": \"orange\", \"conceptShape\": \"rectangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"29\", \"value\": \"DS_2B7B6BBCA.1\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"30\", \"value\": \"DS_2B7B6BBCA\", \"conceptColor\": \"cyan\", \"conceptShape\": \"triangle\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"} , \n{ \"data\": { \"id\": \"31\", \"value\": \"AS_901EDBCC0.1\", \"conceptColor\": \"red\", \"conceptShape\": \"ellipse\", \"visibleDisplay\": \"element\"} , \"group\": \"nodes\"}]} ;\n. Hi Max, thanks for your reply. However, I tried another network graph with a similar elements JSON and that worked despite having individual style mappers for every element. A full running example showing this error can be seen at:\nhttp://jsbin.com/yikatiqela/1/edit?js,output\nKindly let me know what you think is causing this example to fail.\n. @bertomaniac Hi, thanks for your response. I will try that out. However, using the current malformed elements JSON strangely only edges 36-41 are plotted despite edge ID's 32-35 also being unique and not conflicting with node ID's.\n. @bertomaniac Your suggestion (having unique edge and node ID's using \"e\" prefixes for edges) fixed the issue. Thanks.\n. Thanks Max. However, I did not get any error messages in the Console in my case. The edges with conflicting ID's were just not plotted. Glad that the issue is resolved now.\n. Hi Max, my code has functionality to hide nodes one at a time (via this.hide(); ) and a \"Show All\" button that shows everything:\nvar cy= $('#cy').cytoscape('get');\ncy.elements('node').show();\ncy.elements('edge').show();\nWhat I want is to have a \"Show neighbourhood\" button instead of \"Show All\", that allows all hidden nodes just in the selected node's neighborhood to be displayed.\nIs using .show() and hide() not ideal ? How would I achieve this by using a class ?\n. Hi Max, I'm not sure why this doesn't work.\nI have a dataset in JSON format containing information about nodes and edges which I am using to generate a network graph in cytoscapeJS. The JSON data contains id, value, shape, colour and visibleDisplay ('element' or 'none') attributes for nodes and id, source, target and label for edges. My stylesheet uses this 'visibleDisplay' property to show/ hide nodes, as needed, when the cy container is first initialised.\nI want to allow users to unhide nodes with an option to \"Show neighbourhood\". I have modified my old code to make use of collections (without using .neighborhood()) but it still does not work:\nfunction showNeighbourhood() {\n   var eleID;\n   var neighbourArray= new Array();\n   var neighbours= cy.collection(); // collection\ncy.nodes().forEach(function( ele ) {\n       if(ele.selected()) { // get the currently selected node.\n          eleID= ele.id();\n         }\n      });\n// Find its connected neighbours.\n   cy.edges().forEach(function( edg ) {\n       if(edg.data('source') === eleID) {\n          neighbourArray[neighbourArray.length]= edg.data('target');\n         }\n       else if(edg.data('target') === eleID) {\n          neighbourArray[neighbourArray.length]= edg.data('source');\n         }\n      });\n// Add the array to the collection.\n   neighbours.add(neighbourArray);\n// Show neighbourhood, using the collection.\n   neighbours.show();\n  }\nAny suggestions on how to make this work ? Can't I use the show() method on the collection to make the required nodes visible ?\nFurther info. at http://stackoverflow.com/questions/28769541/cytoscapejs-display-selected-nodes-neighborhood\n. Hi Max, thanks for your reply. I will do that.\nHowever, it would be very helpful for potential CytoscapeJS users if there were some simple examples in the Demos showing usage of graph manipulation (using collections), style (via classes), selectors, traversing (neighborhood), etc. like there are for using the cy core.\nThanks.\n. Found the solution for this.\n // Updating the stylesheet for the Network Graph to show background images.\n cy.style().selector('node').css({\n           'background-image': 'data(nodeImage)',\n           'background-fit': 'cover' // can be 'none', 'contain' or 'cover'.\n          }).update();\n. @ktei Thanks for your feedback. I will look into clustering similar nodes into bigger nodes while using Cose layout.\n. I am using CytoscapeJS along with the circular context menu (cxtmenu) plugin. For desktop users, left click using a mouse shows node ID and other attributes while right click brings up the context menu where they can then select a particular menu item to perform some function. \nFor touch devices, tapping on a node brings up its details but I need to to bring up the context menu on taphold and then clicking on a menu item should perform a specific function. \n. @maxkfranz Thanks for your reply. I will look into binding actions to taphold\n. Is plotting bar charts or data series on the nodes possible in CytoscapeJS ?\n. Thanks Max. Yes, I would ideally like to have a data series on the node plotted using some values specific to the node.\nUsing your approach (i.e., the pie slices style nodes), would the plotted data series be a new node placed next to the selected node or can it be like a small image placed next to the node ?\n. Thanks Max. I myself figured it out earlier today as well, using:\n.css({\n          'content': 'data(label)',\n          'font-size': '8px',\n          'curve-style': 'unbundled-bezier',\n          'control-point-distance': '20px',\n          'control-point-weight': '0.7', // '0': curve towards source node, '1': towards target node.\n          'width': 'mapData(edgeWidth, 70, 100, 2, 6)', // edgeWidth varies between 2-5px\n          'line-color': 'gray',\n          'line-style': 'solid',\n          'target-arrow-shape': 'triangle',\n          'target-arrow-color': 'gray',\n          'display': 'element'\n        })\n. Hi @maxkfranz , can the layout for my entire graph be different (cose or cola) when I do this, i.e., can I still set a circle layout on a specific neighborhood ?\n. Hi @maxkfranz , I tried what you said. My graph uses the cola layout but for a node with hidden, connected nodes, I set a circle layout with small radius on the neighborhood with the node as the root. However, it still isn't like the example in the url above where the small spikes show up when hovering over a node with hidden connected nodes.\nHere is what my implemented solution looks like:\n\n. @maxkfranz : I posted this in the WebCola Git repo as well and was told that the spikes were made using D3.js and are basically \"rotated rectangles with a small gradient\".\n. I used the following code to set the circle layout for the selected element's (ele) neighborhood:\nvar neighborhood_Layout= { name: 'circle', roots: ele, radius: '0.1', rStepSize: '0.1' };\n     ele.neighborhood().layout(neighborhood_circleLayout);\n. Hi @maxkfranz , I've made the 2 changes you suggested above. I have managed to implement showing the hidden, connected edges (with opacity 0.5) on a tapdragover event with the opacity of hidden, connected nodes set to 0.1. However, I have a few questions:\n(1) Can I set the layout on just the connected Edges (using ele.connectedEdges()) and Nodes and not the entire neighborhood ? Because setting the circle layout on the node's neighborhood causes the node to also be moved from its original position which results in the tapdragout event handler getting invoked.\n(2) Setting the circle layout (with a very small radius) on the selected element's neighborhood still shows very long edges. Is there a way to reduce edge length except setting it in the layout (like in the cola layout which my graph uses) ?\n(3) I wrote the following code to try and set the circle layout on just the hidden, connected edges for the tapdragover/ mouseover event but it does not work:\n```\nvar eleID= ele.id();\nvar ele_bbox= ele.boundingBox(); // the bounding box of this element (node)\n// Circle layout for connected neighbors.\nvar neighborhood_Layout= { name: 'circle', radius: 0.5, boundingBox: ele_bbox, fit: true, \nanimate: false, avoidOverlap: true, padding: 10 }; \nvar connected_edges= ele.connectedEdges(); // connected edges for this node\n// Set the circle layout only for the hidden nodes in this this element's (node) neighborhood.\nele.neighborhood().filter('node[nodeDisplay = \"none\"]').layout(neighborhood_Layout);\n```\n(4) Also, the event handler also affects my radial context menu (using cxtmenu) as using that triggers the tapdragover event first which now causes all the hidden, connected nodes to become invisible (opacity: 0.1). Is there a way to separate the 2 events or do I need to write the code to re-set the style for all the connected nodes and edges for all my radial context menu items/ events ?\nThanks.\n. Thanks\n. Thanks @maxkfranz, apologies for the delayed response. I noticed that it's working in the demos.\nIt was working fine for me as well, up to the previous version of cytoscapeJS.\nI'll look into why it's failing lately.\n. Thanks, I saw that now.\nHowever, arbor, cola, springy, etc. now do not work by just specifying name: 'arbor' and some basic positioning parameters.\n@maxkfranz : Are there any examples available to get CoLa, Arbor and also Springy to work (similar to the new cose, dagre, concentric, grid layout examples at http://js.cytoscape.org/#demos or new documentation for layouts, like at http://js.cytoscape.org/#layouts) ?\n. @maxkfranz : Also, the Springy layout still doesn't seem to work properly. It just places all the nodes on top of one another in a corner of the cytoscapeJS viewport.\nI am using the new springy.js and the cytoscape-springy.js layout extension and the following code for the layout:\nvar springyNetworkLayout_new= {\n    name: 'springy', \n    animate: true, fit: true, avoidOverlap: true,\n    minDist: 20\n   };\nI was earlier using the setting below but this also caused the same layout error:\nvar springyNetworkLayout= {\n    name: 'springy', \n    animate: true, fit: true, padding: 10, maxSimulationTime: 4000, \n    ungrabifyWhileSimulating: false, \n    boundingBox: undefined, random: false, infinite: false, \n    ready: undefined, stop: undefined, \n    avoidOverlap: true, handleDisconnected: true,\n    nodeSpacing: 10, // for extra spacing around nodes\n    // springy forces\n    stiffness: 400, repulsion: 400, damping: 0.5 \n   };\n. Thanks Max.\nI'll try that and if Springy still doesn't work, I'll use other layouts instead (which all work fine).\n. FYI, I am not using Springy layout anymore as I can't get it to render as required. I'm also encountering errors with the breadthfirst layout when using cytoscapeJS-2.5.4 (it worked fine with the old cytoscapeJS release).\nThe other layouts: CoSE, cose-bilkent, circle, concentric, dagre, grid, spread, arbor, etc. work fine so I am using a few amongst them instead along with CoLa which is still causing problems for larger networks.\n. @maxkfranz: For CoLa layout (which I use as the default layout in my web application; users can otherwise choose circular, concentric, cose or cose-bilkent layout and re-layout the network graph), it works perfectly for smaller networks (with <30 nodes and <50 edges, both nodes and edges have varying sizes and colors) as shown below:\n\nMy CoLa layout settings are defined as:\n```\n   var cola_Layout= {\n    name: 'cola', animate: true,\n    handleDisconnected: true, avoidOverlap: true, \n    randomize: false, fit: true, maxSimulationTime: 4000/1500/, \n    padding: 10, refresh: 1, ungrabifyWhileSimulating: false,\n//    boundingBox: undefined/{ x1: 0, y1: 0, w: 1200, h: 900 }/,\n    nodeSpacing: 5 /20/, \n    edgeLengthVal: 45 /10/,\n    edgeLength: 45\n    //, infinite: false\n   };\n// Set WebCola layout (default).\n  function setColaLayout(eles) {\n// run the default (CoLa) layout, on the visible elements only.\n   cy.$(':visible').layout(cola_Layout);\n  }\n```\nHowever, for larger networks (>50 nodes, >80 edges), the layout is highly clustered horizontally despite there being a lot of free space in the viewport (the cytoscapeJS container div), as shown below:\n\nFirstly, in the CoLa parameter settings, I was previously using edgeLength to define the length of edges but I noticed in your cytoscapejs-cola demo on the cytoscapeJS website that you used the variable edgeLengthVal instead which is later used in the cytoscapejs-cola layout extension file. Which of these 2 should I be using ?\nSecondly, in my web application, at first the network is generated with only a few nodes visible. Users can then gradually un-hide the hidden nodes to eventually see the full, large network. However, CoLa layout doesn't work as expected for larger networks. How can I ensure that the layout spreads wider to make full use of the space in the viewport ?\n. Note: also posted at https://github.com/cytoscape/cytoscape.js-cola/issues/6\n. I am using CoLa: http://marvl.infotech.monash.edu/webcola/cola.v3.min.js with http://cytoscape.github.io/cytoscape.js/api/cytoscape.js-latest/cytoscape.min.js and https://cdn.rawgit.com/cytoscape/cytoscape.js-cola/1.1.1/cytoscape-cola.js (the cola layout extension for cytoscapeJS)\n. I also tried randomize: true and also experimented with disabling fit: true for CoLa. However, I get the same issue (as seen in the 2nd screenshot above).\nIt seems to zoom out and stretch the layout vertically without using the ample horizontal space available. Also, the edge lengths become very long despite setting my specifying the edgeLength value.\nNote: I am running the layout with maxSimulationTime: 4000 (was 1500 initially). Could it be worth allowing the layout to run longer to maybe have it cluster in a better way ?\nOn the other hand, CoSE layout works perfectly for this with the following basic settings:\nvar coseNetworkLayout= {\n    name: 'cose', animate: true,\n    handleDisconnected: true, avoidOverlap: true,\n    idealEdgeLength: 100, nodeOverlap: 20\n   };\n   // run the default (CoLa) layout, on the visible elements only.\n   cy.$(':visible').layout(coseNetworkLayout);\n. Secondly, to hide or show nodes/edges, I was earlier using ele.hide() but after reading the cystoscapeJS documentation, I switched to using selectors/ classes in my stylesheet via: \nvar networkStylesheet= cytoscape.stylesheet().selector('node')\n.css({\n'content': 'data(displayValue)', /*from an attribute in elements JSON*/\n'text-wrap': 'wrap',\n'border-style': 'solid',\n'font-size': '16px',\n'shape': 'data(conceptShape)', /*from elements JSON*/\n'width': '18px',\n'height': '18px',\n'background-color': 'gray'\n'display': 'data(conceptDisplay)', /* from elements JSON: can be 'element' (show) or 'none' (hide) */\n'text-opacity': '0' /*to make the label invisible by default*/\n})\n.selector('edge').css({\n'content': 'data(label)', /*from elements JSON*/\n'font-size': '16px',\n'curve-style': 'unbundled-bezier',\n'width': '2px',\n'line-color': 'black',\n'line-style': 'solid',\n'target-arrow-shape': 'triangle',\n'target-arrow-color': 'gray',\n'display': 'data(relationDisplay)', /*from elements JSON, can be 'element' (show) or 'none' (hide)*/\n'text-opacity': '0' /*to make the label invisible by default*/\n})\n.selector(':selected')\n.css({\n'border-width': '4px',\n'border-color': '#CCCC33'\n})\n}).selector('.HideThis')\n.css({ /*to hide node/edge*/\n'display': 'none'\n}).selector('.ShowIt')\n.css({ /*to show node/edge*/\n'display': 'element'\n});\nWhen users select a node and press Hide, the code does the following:\nele.removeClass('ShowIt');\nele.addClass('HideThis');\nThis works fine but again when switching full screen, this functionality somehow breaks and Hide doesn't do anything from then on.\n@maxkfranz : It would be great to get your thoughts on this.\nI'm wondering if these actions are not retained in the current stylesheet that I use to re-draw when switching to full screen and it breaking later could be because it added the same class multiple times (do I need a hasClass() check here)? Thanks.\n. I just tested by displaying ele.json() in console whenever I hide a node and using the .addClass() approach adds the class to the JSON but doesn't change the display attribute in the stylesheet itself.. Switching to using selectors and classes for node/edge visibility and also label visibility, without directly altering .style() seems to fix both issues :)\nHave added code to fullscreen function to redraw the network but pass current elements JSON and stylesheet which now contains appended classes. In cytoscapeJS 3.2.5, what's the recommended approach to get an instance of the graph object, i.e., to replace the old approach below:\nvar cy= $('#cy').cytoscape('get');. Any suggestions regarding this @maxkfranz ? Thanks.. Also asked at https://stackoverflow.com/questions/47262638/cytoscapejs-3-2-5-get-graph-object-instance-cytoscapeget but got no response yet.. any suggestions?. ",
    "jmanjohns2": "I just encountered this exact problem and did not see an error message? Thank God for this post though or I would have been pulling my hair out.. ",
    "markov00": "Ok, I think I've found the problem: the fact is that I'm rendering subpixel font-size, that on Chrome is directly converted into 0px and on Firefox is converted into 1px. This is why on Chrome I don't see the label and in firefox the labels at that specific zoom remain of the same size.\nSo now I'm asking if there is another way to zoom into a graph keeping the same size for all the nodes/edges/labels, thanks\n. @maxkfranz I've just created a new issue #789 with a jsbin demo\n. I totally agree: my approach was just a workaround, but implementing this at renderer level will be much more efficient and easier for developers.\n. Hi, I think I've found the problem and I've issued a PR. The div is used to calculate the dimension of each labels, but it's appended to the body and never removed during the destroy.\nI've proposed two way to solve it: removing the element during the destroy or appending the element into the cytoscape container. Either methods works correctly.\n. Hi, I think you can listen to mouseover, mouseout events http://js.cytoscape.org/#events/user-input-device-events and issue a http://js.cytoscape.org/#core/viewport-manipulation/cy.zoom\ncy.on('mouseover', function (event) {\n     cy.zoom(options);  \n});\n. Hi, I'm sorry you are right, I mixed up unstabled spread layout with the current master springly. Sorry for that. That's fine using the milestones: I wasn't thinking of checking that because I used to have a changelog directly on the repository. I've seen some automatic generator of changelog like  https://gist.github.com/joelittlejohn/5937573  or https://github.com/lalitkapoor/github-changes\n. @devradhika how do you have placed the charts over the graph? I'm really interested to see how it works, could you share that?\n. Great! +1\n. ",
    "rockshandy": "I was doing some digging into this recently, it seems IE (at least 10 and 11) does not get a width/height for a SVG created with new Image() without appending that image to the DOM. I believe the canvas renderer depends on this working, and it does in other browsers. Using some suggested code from a related question on stack overflow, it seems you could get the width without having to display the SVG image at least.\nWithout modifying cytoscape itself, I found a redraw could work with manual imageCache manipulation, but that is not ideal. Each image element is cached by it's 'src' attribute. Getting the image cache after loading nodes for example:\njavascript\ncy.renderer('canvas').imageCache[\"circle.svg\"].image.width = 20;\ncy.renderer('canvas').imageCache[\"circle.svg\"].image.height = 20;\nI'm not sure what the best overall solution for IE may be in this case though. I've seen some people suggests certain SVGs work, but in my case I have a width,height, and viewBox set for all my intended background icons.\n. I was just about to log this same issue actually.\n. This fixes my issue too. There is sometimes a slight delay between when the shaded circle appears to indicate I clicked long enough to start panning, and switching to panning mode. Box selection starts instead sometimes if I move my mouse right after the panning indicator appears. Waiting a little longer after I click works as expected, and panning happens instead. This doesn't happen very often, but I wanted to mention it incase someone else observed this.\n. Seems to fix the issue I mentioned, thanks for the fix and quick turn around!\n. Did this actually get fixed? It seems like I still need to exclude the related dependencies for the spread layout form being minified.\n. Ah yes, my issue is if I have the dependent libraries (for the spread layout) minified.\n. I think this fix may have introduced a bug where making a box selection also triggers a click event. At least with some light testing a click event isn't fired in 2.4.1, but is fired in 2.4.2. I made a rather large box selection and was surprised to see a click event triggered.\n. Oops a little late to check my notifications, but will do shortly!\n. Thanks for the quick response!\n. That worked great! I'll hope to start using 2.6.8 when it's out then, thanks.\n. ",
    "melborp": "Hi, I really like the library.I also hit this issue in IE.\nThe fix committed will still not work because IE reports img.width and img.height as 0, not as undefined. Even with appendChild and removeChild, the size will remain 0 (as far as i played with IE11, works nicely on Chrome, FF and MS EDGE, ... ). \nThe workaround i have right now is to tweek the function that was changed to make sure that when imgW and imgH are 0, then either take the nodeW / nodeH or take the background-width, background-height as an override value. Works in IE then and everything renders. \nsomething like this in drawInscribedImage:\nvar w = imgW;\n    var h = imgH;\n//COMMENTED OUT, too early to check\n    //if( w === 0 || h === 0 ){\n    //  return; // no point in drawing empty image (and chrome is broken in this case)\n    //}\n```\nvar bgW = style['background-width'];\nif( bgW.value !== 'auto' ){\n  if( bgW.units === '%' ){\n    w = bgW.value/100 * nodeW;\n  } else {\n    w = bgW.pxValue;\n  }\n}\nvar bgH = style['background-height'];\nif( bgH.value !== 'auto' ){\n  if( bgH.units === '%' ){\n    h = bgH.value/100 * nodeH;\n  } else {\n    h = bgH.pxValue;\n  }\n}\nif( w === 0 || h === 0 ){\n  return; // no point in drawing empty image (and chrome is broken in this case)\n}\nif (img.width === 0 || img.height === 0) {\n    imgW = w;\n    imgH = h;\n}\n```\nAlso, i think there is a bug in the workaround itself that was attempted:\n    if ((img.width === undefined || img.height === undefined)) {\n        document.body.appendChild( img );  \n```\n    imgW = img.cachedW = img.width;\n  //IN SOURCE THIS IS: \n  //imgW = img.cachedH = img.height;\n   //SHOULD BE\n    imgH = img.cachedH = img.height;  \ndocument.body.removeChild( img );\n\n}\n```\n. I've done the change here https://github.com/melborp/cytoscape.js/commit/cb2e0f910112d1b4e5602afffc56c76ed59bc9b3\n. actually, if i switch between 2.4.8 (my changes https://github.com/melborp/cytoscape.js/commit/cb2e0f910112d1b4e5602afffc56c76ed59bc9b3) and 2.5 (with this line change here)\ni still dont see the background images in IE. Something else has changed between 2.4.8 and 2.5 ?\n. Hi Max\nIt seems it doesnt render the background image regardless of adding the code i am proposing here.\nThe loading trick deosnt work because of the way IE works with those images, width / height will remain 0.\nallowing to use values from specified width / height seems like a good alternative.\nIn any case, it doesnt seem to be enough in 2.5 anymore. works in 2.4.8\nMy question is, has anything else changed?\n2.5 also breaks navigator https://github.com/cytoscape/cytoscape.js-navigator/issues/15\n. So, regardless of the code on width / heigth setting. I think there is a breaking change in 2.5 after the refactoring of rendering.\nWhen the rendering runs in IE, i get exception on call:\n\u00b4\u00b4\u00b4\n    context.drawImage( img, ix, iy, iw, ih, x, y, w, h );\n\u00b4\u00b4\u00b4\n\u00b4\u00b4\u00b4\n    \"Error: Unexpected call to method or property access.\\n\n    at CRp.safeDrawImage (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:16168:5)\\n\n    at CRp.drawInscribedImage (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:16294:5)\\n\n    at CRp.drawNode (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:16856:9)\\n\n    at drawElements (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:17482:9)\\n\n    at CRp.render (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:17518:5)\\n\n    at CRp.renderTo (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:17204:3)\\n\n    at renderTo (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js:7079:5)\\n\n    at render (http://localhost:40704/scripts/cytoscape/2.5/cytoscape.js-navigator.js:551:7)\"\n\u00b4\u00b4\u00b4\nThe code that breaks it for me is this:\n\u00b4\u00b4\u00b4\n    // workaround for broken browsers like ie\n    if( null == imgW || null == imgH ){\n      document.body.appendChild( img );\n```\n  imgW = img.cachedW = img.width || img.offsetWidth;\n  imgH = img.cachedH = img.height || img.offsetHeight;\ndocument.body.removeChild( img );\n}\n```\n\u00b4\u00b4\u00b4\nchange here: https://github.com/melborp/cytoscape.js/commit/7c0081a9f42f14edabed559005af878e8cd581a0\n. I would like to know more why this is an issue to include.\nThe code would really only run in IE.\n. ",
    "tonymullen": "This is something I'd like to be able to do as well (also for state machines).\n. I'd still definitely like it. As far as I'm aware it's not possible to do just with the edgehandles plugin. \nOn Mar 18, 2016 7:12 AM, \"Lenndev\" notifications@github.com wrote:\n\nSo, this is still on the wishlist?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/783#issuecomment-198377583\n. I can see how too much freedom could result in problems. For me, it would be nice just to be able to set edges to loop up (emerging at NW and entering at NE, for example) or left, right, or bottom, rather than always looping to the northwest (ie. emerging at N and entering at W). \n. In case anybody's interested, I've solved this for my own purposes by making a local alteration in Cytoscape starting at line 12803 (in version 2.6.7) as follows: \n\n```\n        //rs.ctrlpts = [\n        //  srcPos.x,\n        //  srcPos.y - (1 + Math.pow(srcH, 1.12) / 100) * loopDist * (j / 3 + 1),\n        //  srcPos.x - (1 + Math.pow(srcW, 1.12) / 100) * loopDist * (j / 3 + 1),\n        //  srcPos.y\n        //];\n    // my loop alteration\n    rs.ctrlpts = [\n      srcPos.x + (0.4)*(1 + Math.pow(srcH, 1.12) / 100) * loopDist * (j / 3 + 1),\n      srcPos.y - (0.6)*(1 + Math.pow(srcH, 1.12) / 100) * loopDist * (j / 3 + 1),\n      srcPos.x - (0.4)*(1 + Math.pow(srcW, 1.12) / 100) * loopDist * (j / 3 + 1),\n      srcPos.y - (0.6)*(1 + Math.pow(srcW, 1.12) / 100) * loopDist * (j / 3 + 1)\n    ];\n\n```\nIf you have suggestions for how I could incorporate a change like this in a way that was consistent with the design goals of the project I'd be happy to work on integrating it and making a pull request, otherwise I can keep my changes local. \n. Great, thanks!\n. I'm still having the same problem. The edghandles plugin master works as expected with Cytoscape 2.6.7, but with the latest Cytoscape snapshot I'm not able to connect the edge on mobile. Tested on iOS with Chrome and Safari and on Android with Chrome. There doesn't seem to be any event firing when I drag over the target node. \n. I tested the cytoscape-edgehandles demo on android and ios also. The target nodes do not change color and edges are not added, so it seems that the same problem is happening with the demo (which uses the latest cytoscape from github). \nActually, I'm seeing the same issue in the Chrome dev tools device mode emulator. \n. It seems that the issue I'd been noticing is a difference in the drawon/drawoff settings. I'm going to close this issue. \n. I'm still not able to recreate the behavior of the earlier version of Cytoscape. The issue now seems to be related to drawon/drawoff behavior. Let me know if I should open up a separate issue. \nThe problem is that if the edghandles are set to 'drawoff' the handles behave correctly but the edge is not drawn, however, if the edghandles are set to 'drawon' the edge starts to be drawn immediately upon touching the node, making it impossible to drag the node, etc. I've tried calling 'drawon' in the start function and a few other things but I can't get edgehandles to work the way it previously did, where a tap would display the handle, and subsequent drag from the handle created the edge. \n. Ok, thanks. I'll experiment with this. I'm not sure I'm fully understanding the utility of 'drawoff' mode, though, as it does still draw the preview/ghost edge, but just doesn't connect it to the target. Is this also as designed?\nThe previous behavior that I described was important because it was the only way that it was possible to move nodes (by dragging them) and also to create edges (by tapping first and then dragging from the handle). So I hope I can get that behavior back. \n. Still a showstopper for me. \nWith 'drawoff' the edgehandles appear and the preview (or ghost) edge follows the drag, however the edge will not attach to any target node. So no edges can ever be created in 'drawoff' mode. \nI don't see when it would be desirable for edge handles to appear and edge previews to be drawn but not be able to create edges. \n. The issue is with touch interfaces. I'm seeing it in the demo using Chrome (desktop) on Mac in Device Mode (Developer Tools) or on an Android or iOS device. \nSpecifically, I have tested the demo from the current master in Device Mode on Chrome on a Mac, in Chrome and Safari on an iPad mini, and in Chrome on a Samsung Galaxy Core Prime. They all work as you've described using a previous version of Cytoscape, but fail to highlight or connect to target nodes in 'drawoff' mode with the latest version.\n. Great, thanks! It seems to be working now. \n. @maxfranz I'll give some thought to how a manual angle should work. \nI guess the control-point step could be made to come into play only when angles were identical. Should there be minimal increments, or would we want to allow arbitrarily closely positioned loops? \nAlso, should the loop's internal angle be controllable? Currently north, south, east and west are narrower than the diagonal loops, but this could also be styled.\nThe direction angle style could allow any value and just calculate the angle by modulo 360. The loop angle would probably need to be constrained to something reasonable (<=90 or so). Maybe just treat any value larger than 90 as 90?\n. Personally, I find 90 degrees to be too broad a sweep for my needs, so I like the idea of being able to set it, or have it default to something smaller, at least for NSEW options.\nSetting an angle for the leaving edge seems more confusing to me than setting an angle for the overall direction of the loop (i.e. the angle that bisects the leaving and re-entering edge). So, e.g., 90 degrees would make the loop point straight up (or down, I forget). The loop's leaving and entering angles will always be symmetrical, so this seems like the simplest way to think of loop direction to me. \nI hadn't thought about counterclockwise vs clockwise, but that shouldn't be too difficult to implement. Something like 'loop-sweep-direction' with values 'cw' and 'ccw'.  \nSo I think I'd propose something like the following four properties: \n'loop-direction' (north, south, etc.)\n'loop-direction-angle' (specific angle where 90 corresponds with north, etc. would override 'loop-direction')\n'loop-sweep-direction' (cw, ccw)\n'loop-sweep-angle' (default 90, min 1, max 135 (arbitrary but sane)).\n. Yes, I like the idea of having loop-direction denote the angle in the middle. And getting rid of the compass directions would work fine if that were the case. \nAlso, good point about sweep direction being represented by the sign. \nI'll sit down and see about implementing these two properties soon. \n. This is coming along fine so far. The only thing I'm unsure of is how to handle the stepping of overlapping edges. It seems to me that loops should step up (increase in size) only if they overlap directly (i.e. have the same direction and sweep angles). The most straightforward way to do this is to check all the loops on the node and step up from the largest one with identical angles. Let me know if you have other ideas on this.\n. I think I've resolved the stepping question. Everything seems to be working as intended. \n. Still working on getting the deg/rad issues completely sorted out. \n. Sorry, just saw your comment. The code seems to be working now but I'm going to clean it up a bit more with reference to your comment. \n. Is there anything left that needs to be done before these changes can be merged into master?. ",
    "Lenndev": "So, this is still on the wishlist? or is it achievable with the edgehandles plugin? I'd like to be able to configurate the edge's attach/approach angle so i can create a calculusm. like:  node1 -> calcA + calcB = calcC - > node2 . in this case it is important that caclA, calcB and calcC are always in this order... even when they are dragged... \nedit... i guess using a compound node as a calculusholder (so around the calcA-C) is the most convenient method\n. Hi Maxkfranz\nSorry for the slow response and sorry/happy to hear you cannot recreate the bug.\nSince I do not have a codepen/jsbin account I've placed the code underneath  that is responsible for  adding a node and adding a deletebtn/childnode next to it.\nhope you, or any other developer can tell me what mistakes i've made :)\naddChildNode.txt\n. ",
    "danieljue": "Thank you Max, we would really like to use this latest version of 2.3.7+, and this bug came up for us as well.\n. Actually, if we could add our own SVG shapes or FontAwesome shapes, that would be great for everyone!\n. DARPA XDATA / Sotera Defense Solutions, Inc.\nhttp://sotera.github.io/graphene/\nhttp://www.darpa.mil/opencatalog/xdata.html\n. ",
    "jhonatandarosa": "Hi Max, thanks for your immediate attention on this issue.\nI tested the snapshot in our application and on a simple demo from the site.\nThe issue with the box selection seems to be solved, but the pan stopped working.\nTried with both values in boxSelectionEnabled. \nAlso checked if the pan was enabled with userPanningEnabled() and panningEnabled(), both returned true\n. Yep, this snapshot works perfectly. Thanks\n. Thanks for your explanation Max. It really helped =D\n. That would be nice\n. I think it was related. With the code from 2.3.8 on the debug page it occurs, but can't reproduce with the code from master too\n. Sure, I can test it tomorrow morning.\n. Thanks Max. It works perfectly\n. You must enable the property boxSelectionEnabled when creating cytoscape.\nIn older versions this was enabled by default\n. We created a plugin to merge edges between two nodes.\nI think it's not good yet, but we plan to create a public repository for it ASAP.\nFor now you can take a look here:\nhttps://gist.github.com/jhonatandarosa/6bdab4f9020593901176\n. We have a big performance improvemente with haystack.\nNow, we change to bezier only when needed.\nWe are trying to simplify the stylesheet to see if there's a worthy improvement.\n. ",
    "jerchap": "Update:  I also realized that if I just wrap the drawImage call in a try/catch with nothing in the catch, the image still appears to draw fine.  So a little confused here...\n. ",
    "jeremychapman": "Just a note,  my images are being loaded from a database, not from the file system, so this is probably adding some latency.  Essentially what I have is the url being referenced from the graph is an http address serviced by a web server.  That page actually loads the image data from a database and streams it out to the browser.  It's effectively no different from referencing a file system as the data is exactly the same, but it does add some latency.\n. I load from databases using this method in many solutions, never an error.  I really think the fact that a database is the source of the image data is a red herring.    The reason I mentioned it is because it may be introducing latency, and latency could be something that causes this error to manifest.\nTo elaborate, my image would be served up from an http request (captured with fiddler).\nThe actual http request would look like this:\nGET http://mysite.com/imagehandler.ashx?ID=22 HTTP/1.1\nAccept: /\nAccept-Language: en-CA\nUser-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.3; WOW64; Trident/7.0; .NET4.0E; .NET4.0C; InfoPath.3; .NET CLR 3.5.30729; .NET CLR 2.0.50727; .NET CLR 3.0.30729)\nAccept-Encoding: gzip, deflate\nConnection: Keep-Alive\nDNT: 1\nHost: mysite.com\nCookie: ASP.NET_SessionId=dnutvf412suku1rdwm1r2xsd\nAuthorization: Negotiate TlRMTVNTUAABAAAAl4II4gAAAAAAAAAAAAAAAAAAAAAGA4AlAAAADw==\nThe http response would look like this:\nHTTP/1.1 200 OK\nCache-Control: private\nContent-Type: image/pjpeg\nServer: Microsoft-IIS/7.5\nX-AspNet-Version: 4.0.30319\nPersistent-Auth: true\nX-Powered-By: ASP.NET\nDate: Thu, 08 Jan 2015 20:43:15 GMT\nContent-Length: 530\n\ufffdPNG\n\n\ufffd\ufffd\ufffd\nIHDR\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd___\ufffd\ufffd\ufffd\ufffd\ufffda\ufffd\ufffd\ufffd_gAMA\ufffd\ufffd\ufffd\ufffd7\ufffd\ufffd\ufffd\ufffd\ufffdtEXtSoftware\ufffdAdobe ImageReadyq\ufffde<\ufffd\ufffd\ufffdIDAT8\u02e5\ufffd?O\ufffd@\ufffd\ufffdT\ufffdX\ufffdFC\ufffdNJH\ufffd~\ufffd\ufffd\ufffd\ufffd\ufffd&\ufffd\nIt\u2019s no different to how a web page would reference an image, except for under the hood the image comes from a database not the file system, but to the caller it wouldn\u2019t know the difference\nFrom: Max Franz [mailto:notifications@github.com]\nSent: Thursday, January 08, 2015 10:05 AM\nTo: cytoscape/cytoscape.js\nCc: Chapman, Jeremy\nSubject: Re: [cytoscape.js] IndexSizeError in CanvasRenderer.prototype.drawInscribedImage (#785)\n@jeremychapmanhttps://github.com/jeremychapman Is this an IE-only issue for you, or is it a general issue in your case when you load via database?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/785#issuecomment-69221064.\n. ",
    "swtyler": "@maxkfranz Any updates on this? Do you have any suggestions for fixed size labels? Here is an example scenario:\nI am monitoring traffic patterns and use cytoscape to graph those patterns. Now I want to overlay the graph onto a map (which we have working). The problem is that when I zoom in, I have almost no control over the label text size. I've found a way around the node size problem - similar to what @markov00 did in the initial post. However, I am stuck working with the label. I want to zoom in, see more of the map, but keep the node shape and label size the same throughout.\nI've tried some hacks but they only work a little better. I'm not sure why anyone would ever want to keep zooming in on a label after some set zoom level/font size.\nThanks for any info!\n. @maxkfranz Thanks for the response.\nWe went with what we could do today, changing the font size relative to the zoom. Initially we struggled with this because our minZoom-maxZoom values were so large that the font would have had to be less than 1px in size when zoomed in and/or the font kerning was out of whack. After adjusting the zoom values, it's working well enough.\n. We have a custom app with a few setting changes, no plugin necessary.\nTo add on to what @maxkfranz mentioned (this is pseudocode so bear with me):\n// this worked for us compared to a previous min/max like 1-8192 but it's very dependent on your application, the map you're using, etc.\nthis.cy(minzoom : 0.1, maxzoom : 4.096)\n// modify the font based on the zoom\nvar dim = 12/this.cy.zoom();\nvar maxDim = Math.max(dim,2);\nthis.cy.nodes().css('font-size' : maxDim);\n. @tumri & @maxkfranz I am seeing this fail fairly often in 3.1.4.\nBy the time image.error is set, it's too late because drawNode has been called a second time via requestAnimationFrame->render. safeDrawImage then uses the cached image, which does not have error set. The asynchronous nature of the calls does not guarantee error has been set. This breaks the graph and a full refresh is necessary.\nI struggled to come up with a jsbin version but I have consistently made it happen with a node that has a bad url like http://www.oldurlthatisgone.com/image.png\nAny chance you know what's going on? New ticket?\n\nUpdate: I am on an internal network and some of the hosts resolve slowly... might be worth fixing via a naturalWidth check e.g. https://stackoverflow.com/questions/1977871/check-if-an-image-is-loaded-no-errors-in-javascript that fixed it for me locally. @maxkfranz Thanks for the response. It was a combination of both Chrome caching and network issues. I was able to find a workaround by including an error check on icons in our code.\nNot a cytoscape issue - cheers!. ",
    "janblok": "@swtyler Can this cytoscape extension be found anywhere on Github? We are facing the exact same challenge.\n. Would the graph really change or element visibility style map to a zoom level?\n. It only overrides drawNodeText, drawNode, drawEdge and in order to do so properly, these needs the suggested minor pull request code change. \nThe change containing getLabelThreshold, getNodeThreshold and getEdgeThreshold makes it possible to make \"thresholds\" based on other constants and different zoom factor.\nWithout this pull request it's impossible to make a proper working fixed scale solution today...\n. We can definitely have a look at modding the style during zoom, but the pull request is for the threshold!\nAnd the threshold is not part of the style or anything else...and without modding the threshold nothing workable is possible today as you indicated.\n. ",
    "i2shar": "That may not be the case .. if you open the SVG directly in IE, it renders fine. Its only through cytoscape that it doesn't render as a background image. Do you have an example of an SVG that does work in IE?\n. I verified that this was indeed an IE bug (not surprised). I reported it here : https://connect.microsoft.com/IE/feedbackdetail/view/1161278/canvas-does-not-render-scaled-svg-image\nIf you are inclined, you can verify it here: http://plnkr.co/edit/kEMS7G?p=preview\nFor my case, both Chrome and Firefox (both on Mac) worked fine.\n. I tried the plunkr again on Firefox and it doesn't seem to be working. The issue is that clipping the image outside the bounds of the image size doesn't work in both FF and IE, whereas clipping the images inside or outside the bounds of the images size doesn't work in IE at all, but works in FF\nConsider the drawImage() API (as used in the plunkr): https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\nctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\nCase 1: If sx=0 and sWidth <= dWidth\nWorks in FF, not in IE.\nCase 2: If sx=0 and sWidth > dWidth\nDoes not work in FF and IE - throws IndexSizeError in FF.\nBoth cases work in Chrome.\nSo in the plunkr drawImage2() for Firefox,\nctx.drawImage(image, 0, 0, 40, 51, 0, 0, 41, 51); works but \nctx.drawImage(image, 0, 0, 42, 51, 0, 0, 41, 51); throws IndexSizeError.\nI am wondering if cytoscape.js is scaling the image per Case 1 when rendering and if that is causing IE to not render the images at all.\n@maxkfranz can you confirm?\n. ",
    "jstaehli": "Could you check this again please? For me this problem does not only exist in IE but also in Firefox (Chrome works). Normally I have no SVG problems in Firefox. Could this problem be related to Cytoscape.js?\n. Thank you very much for your answer. You are right, the gnu.svg example works in Firefox. Strange... So I probably have to check my SVGs.\nI tried your plnkr.co example. It works great in Chrome. However both Internet Explorer AND Firefox can't draw the second one on my PC... I am using Firefox 36.0.4 on Windows 7. If I click on Draw2 in Firefox the Console outputs \"IndexSizeError: Index or size is negative or greater than the allowed amount\" (script.js:17:0)\n. Thanks. I think I found out what the problem with my SVGs is: They have no width and height attributes in the svg element. If I add something like\n<svg ... height=\"1in\" width=\"1in\" ...>...</svg>\nor\n<svg ... height=\"1cm\" width=\"1cm\" ...>...</svg>\nit works in Firefox! However with Percentages e.g.\n<svg ... height=\"100%\" width=\"100%\" ...>...</svg>\nit does not work anymore. Is this a Browser problem or a Cytoscape.js problem? (Again: Chrome has no problems with the missing width/height attributes)\n. By the way: I just found out that IE sometimes renders SVG in Cytoscape.js if you add \n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=9\">\nto the header... (At least at my local example, not when trying this in jsbin.com) However I'm not sure if I want to have this line in my HTML :-)\n. ",
    "devradhika": "Thanks @markov00 \n.  http://stackoverflow.com/questions/27799220/adding-extra-information-above-the-node-in-cytoscape-js\nhow to set the image on middle of the curved edge using the midpoint method?\n. \nalso want to know about the padding between nodes, so that the charts will not overlap the other nodes\n. These charts are only images, I have created it as an example. I have added nodes using the cy.add() \nReferred:   http://stackoverflow.com/questions/27799220/adding-extra-information-above-the-node-in-cytoscape-js\n. In first figure above if I need to add new nodes to any branch of the tree I want it to be appear in straight line(i.e. vertically). is it possible?\n. http://jsfiddle.net/naL1byg8/ \nI have set the position values for first node however, not refecting anything in the output.\n. Thank you @maxkfranz \nThere is another scenario i.e. tree can have any number of branches, for an example I used four branches. but if number of branches changes dynamically then setting the positions manually will not display the layout correctly. \n.  tapThreshold: defVal( $$.is.touch() ? 18 : 14, $$.is.touch() ? options.touchTapThreshold : options.desktopTapThreshold )}, options.renderer) );\nmaking changes to this line, not working. Am I doing at right place?\ntouchTapThreshold is read only variable, how to configure it manually? \n. ",
    "sylvain-hamel": "+1\n. @maxkfranz Dagre works great, thanks.\n. Regarding:\n\n@ kolesnikova-tavi : 2. I need to select nodes by clicking on their labels. Is it possible?\n@ maxkfranz  : (2) Events on labels are not supported due to expense\n\nI have less then 40 elements to render. Do you think it would affect the performance for such a low number of elements? If not, can you make it an option enableSelectUsingLabel : true that would be set to false by default.\n. @maxkfranz FWIW, I've had two users test my app today and they both tried to select nodes by clicking the text. If you can come up with something cheap I think it would help. Thanks!\n. @maxkfranz Thank you for planing this. Today, two new users reported that they can't select elements, just because they tried to click the label instead of on the image.\n. That's what I expected. Thanks. \n. Hi @maxkfranz, when do you think 2.5.0 will be available?\n. @maxkfranz I patched my 2.4 version with this fix and it works as expected. Thanks\n. @maxkfranz thanks, it works fine. I had to put the code in my layoutstop listener for it to work otherwise it never works on the initial layout.\njavascript\ngraph.on('layoutstop', function() {\n    graph.maxZoom(2.5);\n    graph.fit();\n    graph.maxZoom(100);\n});\n. @maxkfranz, I changed my code based on  https://github.com/cytoscape/cytoscape.js/issues/943#event-310764613. \nI still get the Uncaught TypeError: Cannot set property 'dagre' of undefined error but now I can reproduce it easily in my app.\njavascript\ngraph.remove(graph.elements());\ngraph.add(newElements);\ncurrentLayout.run();\nWhen the currentLayout is cola it works fine but when currentLayout is dagre I always get the error. \n. @maxkfranz yep, works fine. thanks!\n. @maxkfranz : thanks, layout.run() works fine!\n. I tested the same on my Windows Desktop by dragging files, then on my Mac by dragging files too and then in the Microsoft Visio application by dragging objects. And all cases, the newly moved object changes to the selected state as soon as I mouse down on it. I think this is the most common behavior.\n. I need a real text label as well as an image. So I'd need two different label properties on the node with different font-family. One for the icon (the web font character) and one for the real label.\nI guess I'll have to use the real SVG image.\n\nWould it be doable (considering the rendering mechanisms cytoscape uses) to change the library to support custom node templates? Something like this:\njavascript\nvar cy = cytoscape({\n  container: document.getElementById('cy'),\n  elementTemplate : '<h1>{{data(title)}}<h1><img src=\"myimage class=\"{{data(status)}}\"/><div>{{data(name)}}<div>'\n});\n...where one can use {{data(value)}} to include data from the source node. \nThat would solve this problem and a few other content related issues I have.\n. I thought so. Would there be a way to provide a call back that one could use to implement custom rendering code?\njavascript\nvar cy = cytoscape({\n  container: document.getElementById('cy'),\n  renderElement : function(canvas, element, postion, etc...){\n     canvas.font = \"48px serif\";\n     canvas.strokeText(element.Title, 10, 50);\n  }\n});\n. That may work but if it is not rendered as a font then I can't set the font color and other font-related properties. \nI have already changed my code to use SVG files. But because they are not fonts, I have to have different copies of the SVG in different colors and change the background-image based on the element selector. Not as easy but it works.\nBut this does not solve the need to completely control the rendering of an element. As a client of the library, I'd be willing to use renderElement now, knowing that at some point it may no longer be supported. When that happens, I suppose I'll still have a renderElement callback. I'll just have to convert my rendering code from canvas to whatever new technology will be used.\nYou wrote \"add back SVG\", is there a thread somewhere that explains why SVG was dropped?\n. I see. Thanks for your fast replies. We can close this issue.\n. About this feature request, I don't think a custom margin is what we really need to solve this problem. I think improving the label placement based on the incoming edges would be better.\nThe library should automatically set a bottom margin if these two conditions are met:\n1 - the node has an incoming edge\n2 - the edge has an arrow shape\nThe margin value should be equal to the height of the arrow shape (plus a small padding).\nI think this would benefit all users of the library without adding more options.\n. It's true that the new feature should not break existing styling. This new would have to be enabled via an option ('smartLabelPlacement'). But don't you think that generally speaking, users of the library will be happier with if the labels don't overlap arrows? \nIf you don't what to go ahead with this suggestion then I'll have an issue if you implement my original request: The first node in my graph will always have unnecessary padding (there is no incoming arrow). But I can live with that. That's still better then the current situation.\nAnother solution would be a callback to compute the label padding (or the label position). This way I could provide this callback\njavascript\nfunction getLabelPosition(node, x, y) {\n   var hasIncommingEdgesWithArrow = ...;\n   return {\n      x: x,\n      //add padding is needed\n      y : hasIncommingEdgesWithArrow ? y + 20 : y\n   }\n}\n. can you please expand on that?\n. That's too easy! I'll try it tomorrow. Thanks.\n. Oh right :S\n. overlay-color only affects the color while dragging the element (while it is in the :active state). I need an overlay on the :selected state too.\n. That is what I tried (at least I think) but it does not work. \nSee: http://jsbin.com/dunicojeki/2/edit\nAlthough I set the overlay-color: blue; for :selected it becomes blue only while being moved.\n. Hi, it works with all properties set (http://jsbin.com/cejizojina/2/edit), but it does not do what I need because the outline does not include the label. Sometimes my labels are pretty big ( and I use 'text-max-width': '85px').\nCould you add a new set of styles for this use case?\nfull-element-bounding-box-color: blue;\n  full-element-bounding-box-opacity: 0.5;\n  full-element-bounding-box-padding: 5;\nThanks\n. What I'm proposing here is not to extend or modify the current outline styles. I'm now proposing a new set of styles that I would use for the :selected state but that others could use for any other selector.\n. Thanks! That's pretty close to what I need! \nbut I'd need two more things: \n1. Make the outline a rectangle (to follow the shape of the node)\n2. Be able to set a border style and have no fill color.\noverlay-color: none\noverlay-border-color: blue\nThat would allow me to do what I originally asked. It is possible?\nBy the way, thanks a lot for your support.\n. Thanks!\n. lets continue this thread in #937 then.\n. If you don't want to have this \"on\" by default, can you add an option for that (useCtrlTapToExtendSelection : true or something like this)? Because this is a must-have for me.\n. Or you could detect the platform using the User Agent to enable it.\n. By the way, in my case the web browser is embedded in a Windows native application using https://github.com/cefsharp/CefSharp so I'm sure ctrl will do what I need.\n. Hi @maxkfranz, will you add the option to support ctrl+click? I'm still getting bug reports from users who claim they can't multi-select elements (because they intuitively do ctrl+click instead of shift+click).\n. Thanks a lot. I'm going to try it right away.\n. Hi, I tried it and it works as I expected. Selecting multiple items using ctrl+drag still works fine too. \nI read your comment in the code regarding the alt Key. I don't think you should map alt+click because this is not normally used for selection (at least not on Windows).\nLet me know if I can help in any way.\n. A workaround could have been to use the select event instead. However I can't differentiate a user triggered selection from an API trigger selection and I need that. So the workaround does not work.\n. fix confirmed. thanks!\n. I did not add any padding. Maybe 10px of padding would be better. Would you see the padding as an hardcoded value or do you think an option is necessary for that?\n. Hi,\n(1) Sorry about the wrong branch. This is only to get the discussion started. I'll rebase and add the doc if we get to that point.\n(2) No. If you have several nodes and one of the node is really high and all the others are short. Then the cell high of all rows and all columns will be equal to the highest.\n\n(3) boundingBox does not prevent overlap :\n\n(4) In some cases using up all the available space is not optimal. For instance the grid layout produces this:\n\nBut I think that this is more readable:\n\n\nWhat do you think or all this? Will you accept this feature if I clean up the PR?\n. @maxkfranz I have improved the code a little and I have renamed the option to autoCellSize because it now supports both height and width. Do you plan on accepting this PR. Otherwise we are going to fork the grid layout to make our own.\nThanks\n. Hi, I like the result and I like how it extends the current option instead of creating a new option. Next time I'll send PRs on unstable. Thanks\n. ",
    "thSoft": "(This is not perceivable when motion blur is enabled, but when it is disabled, it is apparent.)\n. Here is a minimal example with the latest version: http://jsbin.com/pelofoqufa/1/edit?html,js,output The flickering is reproducible on Firefox, Chrome, Safari.\n. Oh, I see, remove() and add() in batch() works nicely: http://jsbin.com/wicune/1/edit?js,output\n. ",
    "pshannon-bioc": "Hi Rui (and Max),\nMay I disagree, on two fronts?   Hoping I can do so without causing offense...\nThe user interface idiom of selection is widespread; it has been around for a long time.   And it follows a consistent pattern:  mouse selection typically changes some aspect of the rendering, so that in most regards the object is unchanged, but its selection status is clear.\nSelecting text works this way.  The mouse-drag action changes (typically) the background; that change serves as a selection indication; it persists as long as the text is selected.  cytoscape.js is unusual in that the selection indication (a change in local background) disappears immediately.\nYour suggestion (one I have used before) has this limitation:  if you manipulate node size, color, or border, then any information those attribute previously carried is gone.   The beauty of the gray rectangle is that it leaves all other visual attributes essentially unchanged -- just as we expect in ui design.\nSo that's one argument I hope you might find convincing.\nThe second is a meta-argument.  It is that a library (to my mind, anyway!) should provide mechanisms, and should rarely impose policies.    Policies are very important, but they can vary from application to application, from use to use.  \nI think cytoscape.js follows this principle almost all the time, and that is part of its beauty and power.  The developer gets to decide what visual mapping rules to apply, what layout to use, what fonts are appropriate.  \nIn my work, a programmable, non-destructive, persistent indicator of selection would be a very good thing.  That's why I was so pleased to discover the (new?) grey rectangle.  By \"non-destructive\" I mean that other visual attributes are not disturbed.  Now all I wish for -- I hope it is not too much -- is to have, as a programmer, some control over the feature.\n- Paul\nOn Jan 27, 2015, at 2:28 AM, Rui Cheng notifications@github.com wrote:\n\n@pshannon-bioc I don't think that grey rectangle should be used as a selection indication; its main purpose is just to tell users 'you are selecting it'. However, if you need indication to tell users something, for example, a node has been selected, you can use style, something like this:\nstyle.selector('node:selected'\n)\n                .css({\n'border-color':\n Settings.NODE_BORDER_COLOR_SELECTED\n                });\nCheck the documentation for more information and you'll understand.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi Paul & Rui:\n\nI think you can use the box in any state you want.  It's there by default in :active, but you could also use :selected with another colour, for example:  \n:selected {\n  overlay-opacity: 0.666;\n  overlay-color: blue;\n}\nI debated over whether :active should even have the box by default, but since that seems to be the de facto standard on touch -- I decided to just go with the flow.  You could override that with:\n:active {\n  overlay-opacity: 0;\n}\nThanks,\n-Max  \nOn Tuesday, January 27, 2015 at 7:07 AM, Paul Shannon wrote:\n\nHi Rui (and Max),\nMay I disagree, on two fronts? Hoping I can do so without causing offense...\nThe user interface idiom of selection is widespread; it has been around for a long time. And it follows a consistent pattern: mouse selection typically changes some aspect of the rendering, so that in most regards the object is unchanged, but its selection status is clear.\nSelecting text works this way. The mouse-drag action changes (typically) the background; that change serves as a selection indication; it persists as long as the text is selected. cytoscape.js is unusual in that the selection indication (a change in local background) disappears immediately.\nYour suggestion (one I have used before) has this limitation: if you manipulate node size, color, or border, then any information those attribute previously carried is gone. The beauty of the gray rectangle is that it leaves all other visual attributes essentially unchanged -- just as we expect in ui design.\nSo that's one argument I hope you might find convincing.\nThe second is a meta-argument. It is that a library (to my mind, anyway!) should provide mechanisms, and should rarely impose policies. Policies are very important, but they can vary from application to application, from use to use.  \nI think cytoscape.js follows this principle almost all the time, and that is part of its beauty and power. The developer gets to decide what visual mapping rules to apply, what layout to use, what fonts are appropriate.  \nIn my work, a programmable, non-destructive, persistent indicator of selection would be a very good thing. That's why I was so pleased to discover the (new?) grey rectangle. By \"non-destructive\" I mean that other visual attributes are not disturbed. Now all I wish for -- I hope it is not too much -- is to have, as a programmer, some control over the feature.\n- Paul\nOn Jan 27, 2015, at 2:28 AM, Rui Cheng  wrote:\n\n@pshannon-bioc I don't think that grey rectangle should be used as a selection indication; its main purpose is just to tell users 'you are selecting it'. However, if you need indication to tell users something, for example, a node has been selected, you can use style, something like this:\nstyle.selector('node:selected'\n)\n.css({\n'border-color':\nSettings.NODE_BORDER_COLOR_SELECTED\n});\nCheck the documentation for more information and you'll understand.\n\u2014\nReply to this email directly or view it on GitHub.\n. Dear Max and Rui,\n\n\nMax's latest suggestions work very well indeed.  Rui -- thanks for your assistance; I hope I was not too tough a customer!  \nThanks to you both,\n- Paul\nOn Jan 27, 2015, at 6:13 AM, Max Franz notifications@github.com wrote:\n\nMy comment via email did not go through properly. Pasting:\nHi Paul & Rui:\nI think you can use the box in any state you want. It's there by default in :active, but you could also use :selected with another colour, for example:\n:selected {\noverlay-opacity: 0.666;\noverlay-color: blue;\n}\nI debated over whether :active should even have the box by default, but since that seems to be the de facto standard on touch -- I decided to just go with the flow. You could override that with:\n:active {\noverlay-opacity: 0;\n}\nThanks,\n-Max\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "billduddy": "Thanks\n. ",
    "nebril": "I will give you an example:\nI am loading all my graph data to the variable I called allcy:\nvar allcy = cytoscape({\n    headless: true,\n});\nThen I am creating normal \"working\" cy var\nvar cy = cytoscape({\n    container: document.getElementById('thegraph'),\n    //stylesheets, dagre layout options, hideEdgesOnViewport etc.\n});\nI load all my data to allcy\nallcy.load(response); //response is json graph data I got from xmlhttp request\nI add roots and their neighbourhood to cy and reload the layout.\ncy.add(allcy.nodes().roots().closedNeighborhood());\ncy.layout(layout);\ncy.load( cy.elements('*').jsons());\nThen I want to start my graph exploration in another place, so I do the following:\ncy.remove(cy.elements());\ncy.add(allcy.nodes(\"[funcName *= '\" + funcName + \"']\").closedNeighborhood());\ncy.layout(layout);\ncy.load( cy.elements('*').jsons(), function() { cy.center(node)} );\nAnd it is when it fails without fix proposed by me.\n. I'll let you know how it is tomorrow morning european time. Thanks for\ntaking the time to fix this!\n. Applying layout after adding nodes without calling load breaks node positions (they appear in upper left corner). While using load - the issue remains. I will stay with my workaround for now.\n. I do a similar thing as bertomaniac.\nUsing add or remove and layout after them tended to mess with node positions, so every time I add/remove nodes I call \ncy.layout(layout);\n    cy.load( cy.elements('*').jsons(), function() { cy.center(node)} );\nAnd it does the trick.\n. ",
    "farhaanbukhsh": "hi , we want to take it up and work on it if this project is available. \n. I was thinking on using socket.io later but first building a simple editor with CRUD functions. I will try to look into meteor and i looked into cytoscape\n. Hi there, need help regarding integration . \n. ",
    "clemsos": "Hi, I am interested to build a cytoscape+meteor app\n. I added client/db pub/sub to drag and add node so we have the live sync effect. (sorry, I pushed changes directly to master branch...) https://github.com/maxkfranz/cyedit/commits/master\nAbout the specs you wrote here, do you have any ideas for the UI ? The click is already taken for the drag-n-drop. For instance, to delete a node :   should we use double-click ? or display a contextual menu (comment, delete, etc.) ? \n. Looks good. Maybe we will need to create a cytoscape-plugins meteor package for the UI components ?\n. @maxkfranz I just tried but I got an error. Not sure if it is because of the package or because of me that can not use the q-tip lib properly... \nThis is the (basic) code \ncy.nodes().qtip({\n    content: 'Hello!'\n});\nI got an TypeError / undefined error\nTypeError: undefined is not a function\nat null.<anonymous> (cytoscape-qtip.js:90)\nat $$.fn.eles.each (cytoscape.js:13713)\nat null.qtip (cytoscape-qtip.js:83)\nat cyedit.js?ed5760bc2657a3f908d8556f8fed7fb3b714586a:19\nat Tracker.Computation._compute (tracker.js:294)\nat Tracker.Computation._recompute (tracker.js:313)\nat Object.Tracker._runFlush (tracker.js:452)\nat onGlobalMessage (setimmediate.js:102)\nI have also tried to loop through the node array but I get the same error\nvar nodes = cy.nodes();\nfor (var i = 0; i < nodes.length; i++) {\n  // console.log();\n  cy.$('#'+nodes[i].id() ).qtip({\n    content: 'Hello!' // function(){ return this.data('weight'); }\n  });\n}\nAlso when I tried directly\ncy.qtip({\n    content: 'Hello!' // function(){ return this.data('weight'); }\n  });\nI get an undefined error as well.\ncytoscape-qtip.js:175 Uncaught TypeError: undefined is not a functioncytoscape-qtip.js:175 (anonymous function)cyedit.js?82d03f12c6e0dfecbcc3eab77e918f2f74e5bc08:19 (anonymous function)tracker.js:294 Tracker.Computation._computetracker.js:210 Tracker.Computationtracker.js:533 Tracker.autoruncyedit.js?82d03f12c6e0dfecbcc3eab77e918f2f74e5bc08:10 initCycyedit.js?82d03f12c6e0dfecbcc3eab77e918f2f74e5bc08:46 (anonymous function)jquery.js:3143 jQuery.Callbacks.firejquery.js:3255 jQuery.Callbacks.self.fireWithjquery.js:3467 jQuery.extend.readyjquery.js:3498 completed\nlooks like it all bioms down to qtip.$domEle or   qtip.$domEle.qtip which is undefined\nqtip.$domEle.qtip( opts );\n. this doesnt work https://atmospherejs.com/maxkfranz/cytoscape-qtip ?\n. @maxkfranz  ok, I checked in plugins and tried some other things \n- qtip works properly \n- added basic bootstrap app layout.\n- several network layouts available (needs refactoring)\n-  ctx-menu is working (right-click is weird though) \n- edgehandles  crash the app, saying that $container is undefined on this line : https://github.com/cytoscape/cytoscape.js-edgehandles/blob/master/cytoscape-edgehandles.js#L528  The weird thing is that it seems to load before the cytoscape object is ready. I have tried to use the ready : function() callback but didn't work neither.\nYou can try and let me know if it works.\n. Hey, I just tried some more things to get the edge-handles plugin to work in Meteor but it stills fail. It looks like the cytoscape var is not binded to the  $container  so I have the following error:\nTypeError: $container.cytoscape is not a function\nat $.fn.cytoscapeEdgehandles.functions.init\nFailure point here > https://github.com/cytoscape/cytoscape.js-edgehandles/blob/master/cytoscape-edgehandles.js#L528\nThe Github example worked fine though - without Meteor.\nMaybe it is related to the removal of cytoscape from the scope in this commit ?https://github.com/cytoscape/cytoscape.js/commit/c6263feeb29d20628706d2763cc6cdc9ac1b603a#diff-f1a4188732d179e06319dbe924d655f5R2\nAny idea?\n. OK you were right. It was just about loading jquery before cytoscape into .meteor/packages. The project start to look quite decent. Here is a demo with random data  : http://cyedit.meteor.com (click on \"init\" to generate new data)\nFeatures\n- add/remove edges\n- left-click ctx menu : remove/lock/star nodes\n- apply different layouts\n- inline editing of node/edge content (just the name working now)\n- a basic comment system to annotate nodes and edges\nThe next thing to do is to implement user accounts and multiple graphs, for the URL sharing feature.\n. @Soupala glad you like it ! I am a huge d3 fan myself but it is more for drawing stuff. I think Cytoscape is more appropriate for network-based interfaces. I will work on add more features to this gradually\n. I have added user accounts and multiple graphs already, also did a big refactoring of code to separate things in folders (client, server, etc.). Code needs some clean but I will push that by next week on Github. \n@Soupala  Which direction do you want to take ? Agree for a name change as well. Let's work on this together. What about skype call or IRC or sth ?\nAbout the license :  looks like cytoscape.js is LGPL, which implies that we use LGPL as well. @maxkfranz  any thoughts ?\n. thanks @maxkfranz. Yes, there was a basic prototype here : https://github.com/clemsos/cyedit that actually evolves into a more stable software for collaborative graph editing  called Topogram  : https://github.com/topogram/topogram\nAs Max mentionned there was also this hackaton project, mostly by @Soupala  https://github.com/stargraph/stargraph \n. Thanks. I was just working on a solution on this today. Draft here https://github.com/topogram/topogram-client/commit/6460b5e84225b6a9ea207ec0c9558020ac0dce45#diff-20da5320832913eb2fa0ae5ac34984eaR235\n. ok no problem then ...\n. Thank you all for those info, super useful ! \nMy idea is to keep cytoscape as a model and relies on the cy instance, as max mentioned. I am going to dig into those different solutions and will let you know what seems to work best\n. ",
    "Soupala": "Wow.  This is an amazing proof-of-concept. I spent the last week trying to figure out how to do something similar in Meteor w/ either D3 (http://bl.ocks.org/nitaku/7517984) or Famo.us but became very discouraged.\n. @clemsos @maxkfranz I was thinking of cloning and playing with the proof-of-concept for the upcoming Meteor Hackathon (http://info.meteor.com/2015-hackathon), but maybe going a slightly different direction than the specs listed here.  I could call it something else other than CyEdit.   Assuming that I figure out user accounts and multiple graphs, could then maybe share those improvements back to this project. Any objections?  Any thoughts on license?  Does anyone else want to join me for submitting this as a hackathon project?\n. Definitely.  Send me an email, mica.cardillo at gmail to figure out\ncommunication channel, and I can explain what I'm thinking.\n[\n{name : \"Mica Cardillo\"} ,\n{phone : \"541.840.7245\"},\n{love: ['Dahlia', 'Oliver', 'Rachel']}\n]\nOn Fri, Sep 11, 2015 at 4:56 AM, Cl\u00e9ment Renaud notifications@github.com\nwrote:\n\nI have added user accounts and multiple graphs already, also did a big\nrefactoring of code to separate things in folders (client, server, etc.).\nCode needs some clean but I will push that by next week on Github.\n@Soupala https://github.com/Soupala Which direction do you want to take\n? Agree for a name change as well. Let's work on this together. What about\nskype call or IRC or sth ?\nAbout the license : looks like cytoscape.js is LGPL, which implies that we\nuse LGPL as well. @maxkfranz https://github.com/maxkfranz any thoughts ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/821#issuecomment-139528256\n.\n. Yes you should be able to run Stargraph on any version of Node, but\nTopogram is probably a better option for you.\n\nI haven't had time to do anything with Stargraph since the Hackathon.\nHowever I recently joined FlowJo LLC, a software company that provides data\nanalysis software for life scientists. It's exciting stuff.  I'm assigned\nto infrastructure projects right now, but my plan is to eventually get back\nto this as a side project because there's definitely a need for researchers\nto have this kind of tool.\nOn Fri, Sep 30, 2016 at 9:28 AM, Cl\u00e9ment Renaud notifications@github.com\nwrote:\n\nthanks @maxkfranz https://github.com/maxkfranz. Yes, there was a basic\nprototype here : https://github.com/clemsos/cyedit that actually evolves\ninto a more stable software for collaborative graph editing called Topogram\n: https://github.com/topogram/topogram\nAs Max mentionned there was also this hackaton project, mostly by @Soupala\nhttps://github.com/Soupala https://github.com/stargraph/stargraph\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/821#issuecomment-250789979,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABUj-EJg6umOdak9MOltwFplMxAFjpd-ks5qvTi7gaJpZM4DcVp4\n.\n. \n",
    "OAGr": "I've been making a collaborative Estimate editor using cytoscape.  The intention is to eventually support confidence intervals and do monte carlo analysis in the background.\nhttp://www.getguesstimate.com/\n. I was able to get around this by doing,\nmodule.exports.node = {\n  child_process: 'empty'\n}\nOf course, this doesn't seem like the best fix.\n. I didn't realize that batch worked that way.  If it does, that would be a declarative way, assuming that it wouldn't result in a quick flash where everything disappears.  If that does work, I could imagine even making the function cy.json(obj) just do that.\nI think that animations would be cool, but practically, may not be that important.  In my own application only one node is added/removed/moved at a time, and that's typically done by the user, so no external movements are necessary.\nMaking a react component with that in place is not too hard.  I'll look into making a separate module (agree it should probably be a separate npm package).\n. Got it, and agreed. I think my diff algorithm may be a decent prototype, but it's probably a subset of what would be necessary.\n. Hi clemsos,\nI gave up on cytoscape because I decided I didn't want that kind of graph interface. The tool itself was relatively fine. \nIt's been a while since I used it, but you can see how I did there. In general I recommend wrapping cytoscape within a React component so you can treat it more naturally in React.  One issue I ran into was that webpack complained a bit about it, but this didn't seem to prevent anything. \nI think that file you linked to from Guesstimate could actually give you a start in how it's possible to wrap Cyoscape into a React component.  In this case I made one which only exposed the functionality I cared about.\n. ",
    "nodi-andy": "hi, just installed and run the code but cant even add a node... what might the problem? DB error?\n. i solved the problem but dont know how. My current problem is, that the nodes are mislocated on the first load but corrected in the second load (F5)\nofftopic: I would recommend this project https://github.com/rochus/qt5-node-editor if someone want also have a all-platform executable variant. Than will be web, app and exe version available.\n. ",
    "tmad4000": "Hi guys!\nI'm ridiculously pumped to stumble across this thread! Anyone really good at JS want to work with me to solve this problem once and for all? An MIT classmate and I cofounded a startup in the Bay Area building something very related, based on my research with Tim Berners-Lee. We've raised $1.8M and are looking for a lead engineer. Our homepage: http://home.ideapad.io\nThe first thing we've released is a a human-AI hybrid Web platform that enables teams of analysts to create and analyze networks of information collaboratively, one component of which is a collaborative graph editor. \nThis is the first step towards a larger vision making a usable realization of the sort of ubiquitous personal/group knowledge base system AI thinkers have dreamed about across the decades, from Vannevar Bush\u2019s Memex to Niklas Luhmann\u2019s Zettelkasten to Tim Berners-Lee\u2019s Giant Global Graph. We see this, in turn, as necessary step someone  will have to build if humanity is to create machines that can autonomously solve scientific problems. \nBeta users include Fields Medalist mathematician Tim Gowers, and current paying customers include large companies such as Silicon Valley Bank.\nNote that visualizing graphs as networks is only one piece of the puzzle; to make this a tool people can use instead of Workflowy or Evernote personally, we have low-friction list representations of the graph in development as well\nMore generally, I'm trying to build a community of people who are on our wavelength and also think that this is one of the most important problems in the world to be working on! Anyone want me to add them to our Facebook group? \nIf you're interested, or know anyone who might be, please email me at jacob@ideapad.io and/or post here!\n. ",
    "jonorthwash": "Is this what \"text-background-opacity\": 1, \"text-background-color\": \"#ffffff\" is supposed to look like?\n\nI'm happy to file a bug report if something is wrong, but that seems to be heavily discouraged if there's any chance I'm just being being stupid, so I decided to assume I was stupid this time.\nIf the answer is just \"ask on stackexchange\", that's fine too.\n</stupidity>. We're using a version from earlier this summer, so that could be it. \n@maryszmary, could you check whether updating cytoscape works?\nOtherwise, we might need to make an mwe and file a bug.. ",
    "thiagosbrito": "maxkfranz, what about the html5shim , if i force the old browser to render some html5 elements, would the cytoscape work?\n. Tnx Max. Sorry , but it was an back end issue, we are working with neo4j, and there where a problem. But now it's solved.\nTnx by the way!!\n. Max, first of all , thanks for your quick reply.\nI'm trying to reorganize the positions and spaces using this:\ncy.on('zoom', function (e) {\n```\n        var dim = 20 / cy.zoom();\n        var edgeWidth = 5/ cy.zoom();\n    cy.$('edge').css({\n        'font-size': dim\n    });\n    cy.$('node').css({\n        width:dim,\n        height:dim,\n        'text-opacity':1,\n        'overlay-padding':edgeWidth*10\n    });\n  });\n\n```\nBut i'm not getting the proper result. What's happens is, i got lots of nodes as result, and they are too close to each other, when i zoom'em  in, the space beetwen them is the same as before the zoom changed.\nWhat you think i could do?\n. Thanks again, you're right, it works better now, more fluid.\nI will keep working on that, and i'll let you know the results.\nTnx\n. My json are like this:\n{\n  \"vertices\": [\n    {\n      \"id\": 19073,\n      \"nome\": \"BAAMA40\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29450,\n      \"nome\": \"BAAMA01\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29461,\n      \"nome\": \"BAAMA12\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 15289,\n      \"nome\": \"BACEN19\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6248,\n      \"nome\": \"BAAMA07\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29558,\n      \"nome\": \"BACAB05\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29476,\n      \"nome\": \"BAAMA27\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29501,\n      \"nome\": \"BABAR13\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6592,\n      \"nome\": \"BABRO11\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6358,\n      \"nome\": \"BAAMAI1\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29545,\n      \"nome\": \"BABRO11\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6819,\n      \"nome\": \"BACEN04\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29494,\n      \"nome\": \"BABAR06\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29468,\n      \"nome\": \"BAAMA19\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6462,\n      \"nome\": \"BABAR12\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29457,\n      \"nome\": \"BAAMA08\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29617,\n      \"nome\": \"BACEN13\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 290225,\n      \"nome\": \"MBABRO12\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 255841,\n      \"nome\": \"BAAMA35\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29541,\n      \"nome\": \"BABRO07\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29559,\n      \"nome\": \"BACAB06\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6247,\n      \"nome\": \"BAAMA06\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6356,\n      \"nome\": \"BAAMA29\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29462,\n      \"nome\": \"BAAMA13\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29610,\n      \"nome\": \"BACEN06\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6818,\n      \"nome\": \"BACEN02\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29502,\n      \"nome\": \"BABAR14\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29544,\n      \"nome\": \"BABRO10\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 210730,\n      \"nome\": \"BSCBA54\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 22399,\n      \"nome\": \"BAAMA35\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29566,\n      \"nome\": \"BACAB14\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6359,\n      \"nome\": \"BAAMAI2\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29456,\n      \"nome\": \"BAAMA07\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 156286,\n      \"nome\": \"BACEN19\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29624,\n      \"nome\": \"BACENI1\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29495,\n      \"nome\": \"BABAR07\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29469,\n      \"nome\": \"BAAMA20\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6463,\n      \"nome\": \"BABAR13\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6825,\n      \"nome\": \"BACEN10\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29482,\n      \"nome\": \"BAAMAI2\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29508,\n      \"nome\": \"BABARI1\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6832,\n      \"nome\": \"BACENI1\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29499,\n      \"nome\": \"BABAR11\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29536,\n      \"nome\": \"BABRO02\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29463,\n      \"nome\": \"BAAMA14\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 197850,\n      \"nome\": \"BABON30\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6828,\n      \"nome\": \"BACEN13\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29492,\n      \"nome\": \"BABAR04\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 18882,\n      \"nome\": \"BACEN22\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6367,\n      \"nome\": \"BABAR04\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 11286,\n      \"nome\": \"BACEN17\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6360,\n      \"nome\": \"BAAMAI3\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29612,\n      \"nome\": \"BACEN08\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6250,\n      \"nome\": \"BAAMA09\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29543,\n      \"nome\": \"BABRO09\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29625,\n      \"nome\": \"BACENI2\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 15201,\n      \"nome\": \"BAAMA20\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6583,\n      \"nome\": \"BABRO02\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6464,\n      \"nome\": \"BABAR14\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29455,\n      \"nome\": \"BAAMA06\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29507,\n      \"nome\": \"BABAR19\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29454,\n      \"nome\": \"BAAMA05\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29483,\n      \"nome\": \"BAAMAI3\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6827,\n      \"nome\": \"BACEN12\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29500,\n      \"nome\": \"BABAR12\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6348,\n      \"nome\": \"BAAMA19\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29535,\n      \"nome\": \"BABRO01\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6591,\n      \"nome\": \"BABRO10\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6820,\n      \"nome\": \"BACEN05\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29611,\n      \"nome\": \"BACEN07\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 13692,\n      \"nome\": \"BACAB04\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29506,\n      \"nome\": \"BABAR18\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6833,\n      \"nome\": \"BACENI2\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6355,\n      \"nome\": \"BAAMA27\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29542,\n      \"nome\": \"BABRO08\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6245,\n      \"nome\": \"BAAMA04\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 265567,\n      \"nome\": \"BAAMA41\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6242,\n      \"nome\": \"BAAMA01\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29505,\n      \"nome\": \"BABAR17\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29538,\n      \"nome\": \"BABRO04\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29460,\n      \"nome\": \"BAAMA11\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 280738,\n      \"nome\": \"MBACOW08\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29490,\n      \"nome\": \"BABAR02\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29620,\n      \"nome\": \"BACEN16\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6588,\n      \"nome\": \"BABRO07\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6252,\n      \"nome\": \"BAAMA11\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29607,\n      \"nome\": \"BACEN02\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29464,\n      \"nome\": \"BAAMA15\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29497,\n      \"nome\": \"BABAR09\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29453,\n      \"nome\": \"BAAMA04\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 208475,\n      \"nome\": \"MBACENI6\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29504,\n      \"nome\": \"BABAR16\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 270636,\n      \"nome\": \"BAAMA43\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29614,\n      \"nome\": \"BACEN10\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29485,\n      \"nome\": \"BAAMAI5\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6822,\n      \"nome\": \"BACEN07\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29491,\n      \"nome\": \"BABAR03\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6582,\n      \"nome\": \"BABRO01\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6831,\n      \"nome\": \"BACEN16\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29459,\n      \"nome\": \"BAAMA10\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29621,\n      \"nome\": \"BACEN17\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 107410,\n      \"nome\": \"BAAMA37\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29452,\n      \"nome\": \"BAAMA03\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29498,\n      \"nome\": \"BABAR10\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29537,\n      \"nome\": \"BABRO03\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29478,\n      \"nome\": \"BAAMA29\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6251,\n      \"nome\": \"BAAMA10\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29465,\n      \"nome\": \"BAAMA16\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29606,\n      \"nome\": \"BACEN01\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29458,\n      \"nome\": \"BAAMA09\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29609,\n      \"nome\": \"BACEN05\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29503,\n      \"nome\": \"BABAR15\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29481,\n      \"nome\": \"BAAMAI1\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29540,\n      \"nome\": \"BABRO06\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 14039,\n      \"nome\": \"BABRO12\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6370,\n      \"nome\": \"BABAR08\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29466,\n      \"nome\": \"BAAMA17\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6460,\n      \"nome\": \"BABAR10\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 10607,\n      \"nome\": \"BAAMAI5\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29451,\n      \"nome\": \"BAAMA02\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 199755,\n      \"nome\": \"BAAMA40\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 30681,\n      \"nome\": \"BAJUA02\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29480,\n      \"nome\": \"BAAMA33\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 100027,\n      \"nome\": \"BACAE02\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29539,\n      \"nome\": \"BABRO05\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29608,\n      \"nome\": \"BACEN04\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6461,\n      \"nome\": \"BABAR11\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6371,\n      \"nome\": \"BABAR09\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29616,\n      \"nome\": \"BACEN12\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29532,\n      \"nome\": \"BABON19\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 230930,\n      \"nome\": \"BACEN22\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 29496,\n      \"nome\": \"BABAR08\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 10606,\n      \"nome\": \"BAAMA33\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 6587,\n      \"nome\": \"BABRO06\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    },\n    {\n      \"id\": 29474,\n      \"nome\": \"BAAMA25\",\n      \"regional\": null,\n      \"tipo\": \"Equipamento\"\n    },\n    {\n      \"id\": 6823,\n      \"nome\": \"BACEN08\",\n      \"regional\": \"CLARO BA/SE\",\n      \"tipo\": \"Estacao\"\n    }\n  ],\n  \"arestas\": [\n    {\n      \"id\": null,\n      \"origem\": 29450,\n      \"destino\": 6242,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104612,\n      \"origem\": 15201,\n      \"destino\": 6242,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29450,\n      \"destino\": 6242,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104612,\n      \"origem\": 15201,\n      \"destino\": 6242,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29453,\n      \"destino\": 6245,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104617,\n      \"origem\": 15201,\n      \"destino\": 6245,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29455,\n      \"destino\": 6247,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104633,\n      \"origem\": 15201,\n      \"destino\": 6247,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29455,\n      \"destino\": 6247,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104633,\n      \"origem\": 15201,\n      \"destino\": 6247,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29456,\n      \"destino\": 6248,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104615,\n      \"origem\": 15201,\n      \"destino\": 6248,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29458,\n      \"destino\": 6250,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104613,\n      \"origem\": 15201,\n      \"destino\": 6250,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29459,\n      \"destino\": 6251,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104636,\n      \"origem\": 15201,\n      \"destino\": 6251,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29459,\n      \"destino\": 6251,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104636,\n      \"origem\": 15201,\n      \"destino\": 6251,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29460,\n      \"destino\": 6252,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104618,\n      \"origem\": 15201,\n      \"destino\": 6252,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29468,\n      \"destino\": 6348,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 224454,\n      \"origem\": 6348,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29468,\n      \"destino\": 6348,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 224454,\n      \"origem\": 6348,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29476,\n      \"destino\": 6355,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104643,\n      \"origem\": 15201,\n      \"destino\": 6355,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29478,\n      \"destino\": 6356,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229886,\n      \"origem\": 6356,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29478,\n      \"destino\": 6356,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229886,\n      \"origem\": 6356,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29481,\n      \"destino\": 6358,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 253264,\n      \"origem\": 6358,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29481,\n      \"destino\": 6358,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 253264,\n      \"origem\": 6358,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29482,\n      \"destino\": 6359,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104630,\n      \"origem\": 15201,\n      \"destino\": 6359,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29483,\n      \"destino\": 6360,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104610,\n      \"origem\": 15201,\n      \"destino\": 6360,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29492,\n      \"destino\": 6367,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 223248,\n      \"origem\": 6367,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29496,\n      \"destino\": 6370,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 268811,\n      \"origem\": 6370,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29496,\n      \"destino\": 6370,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 268811,\n      \"origem\": 6370,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29497,\n      \"destino\": 6371,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234092,\n      \"origem\": 6371,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29497,\n      \"destino\": 6371,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234092,\n      \"origem\": 6371,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29498,\n      \"destino\": 6460,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 217844,\n      \"origem\": 6460,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29499,\n      \"destino\": 6461,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 268007,\n      \"origem\": 6461,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29500,\n      \"destino\": 6462,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228278,\n      \"origem\": 6462,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29501,\n      \"destino\": 6463,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 221860,\n      \"origem\": 6463,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29502,\n      \"destino\": 6464,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229624,\n      \"origem\": 15201,\n      \"destino\": 6464,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29535,\n      \"destino\": 6582,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 243395,\n      \"origem\": 6582,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29535,\n      \"destino\": 6582,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 243395,\n      \"origem\": 6582,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29536,\n      \"destino\": 6583,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 268009,\n      \"origem\": 6583,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29536,\n      \"destino\": 6583,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 268009,\n      \"origem\": 6583,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29540,\n      \"destino\": 6587,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234104,\n      \"origem\": 6587,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29540,\n      \"destino\": 6587,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234104,\n      \"origem\": 6587,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29541,\n      \"destino\": 6588,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229280,\n      \"origem\": 6588,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29544,\n      \"destino\": 6591,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234093,\n      \"origem\": 6591,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29544,\n      \"destino\": 6591,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234093,\n      \"origem\": 6591,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29545,\n      \"destino\": 6592,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234805,\n      \"origem\": 6592,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29608,\n      \"destino\": 6819,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228310,\n      \"origem\": 6819,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29609,\n      \"destino\": 6820,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229313,\n      \"origem\": 6820,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29609,\n      \"destino\": 6820,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229313,\n      \"origem\": 6820,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29611,\n      \"destino\": 6822,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228375,\n      \"origem\": 6822,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29612,\n      \"destino\": 6823,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 244110,\n      \"origem\": 6823,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29612,\n      \"destino\": 6823,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 244110,\n      \"origem\": 6823,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29614,\n      \"destino\": 6825,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 223710,\n      \"origem\": 6825,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29614,\n      \"destino\": 6825,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 223710,\n      \"origem\": 6825,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29616,\n      \"destino\": 6827,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 252355,\n      \"origem\": 6827,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29616,\n      \"destino\": 6827,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 252355,\n      \"origem\": 6827,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29617,\n      \"destino\": 6828,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228384,\n      \"origem\": 6828,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29620,\n      \"destino\": 6831,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234150,\n      \"origem\": 6831,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29620,\n      \"destino\": 6831,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234150,\n      \"origem\": 6831,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29621,\n      \"destino\": 11286,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 222136,\n      \"origem\": 11286,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29624,\n      \"destino\": 6832,\n      \"enlace\": false\n    },\n    {\n      \"id\": 18258,\n      \"origem\": 6832,\n      \"destino\": 13692,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29624,\n      \"destino\": 6832,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 227145,\n      \"origem\": 6832,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29625,\n      \"destino\": 6833,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228289,\n      \"origem\": 6833,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29485,\n      \"destino\": 10607,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 222006,\n      \"origem\": 10607,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29480,\n      \"destino\": 10606,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234302,\n      \"origem\": 10606,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29500,\n      \"destino\": 6462,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228278,\n      \"origem\": 6462,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29617,\n      \"destino\": 6828,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228384,\n      \"origem\": 6828,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29453,\n      \"destino\": 6245,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104617,\n      \"origem\": 15201,\n      \"destino\": 6245,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29478,\n      \"destino\": 6356,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229886,\n      \"origem\": 6356,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29501,\n      \"destino\": 6463,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 221860,\n      \"origem\": 6463,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29545,\n      \"destino\": 6592,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234805,\n      \"origem\": 6592,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29614,\n      \"destino\": 6825,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 223710,\n      \"origem\": 6825,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29478,\n      \"destino\": 6356,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229886,\n      \"origem\": 6356,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29499,\n      \"destino\": 6461,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 268007,\n      \"origem\": 6461,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29541,\n      \"destino\": 6588,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229280,\n      \"origem\": 6588,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 156286,\n      \"destino\": 15289,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234266,\n      \"origem\": 15289,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 156286,\n      \"destino\": 15289,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234266,\n      \"origem\": 15289,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29544,\n      \"destino\": 6591,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234093,\n      \"origem\": 6591,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29611,\n      \"destino\": 6822,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 228375,\n      \"origem\": 6822,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29476,\n      \"destino\": 6355,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104643,\n      \"origem\": 15201,\n      \"destino\": 6355,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29458,\n      \"destino\": 6250,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104613,\n      \"origem\": 15201,\n      \"destino\": 6250,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29492,\n      \"destino\": 6367,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 223248,\n      \"origem\": 6367,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": 221413,\n      \"origem\": 15201,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29620,\n      \"destino\": 6831,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234150,\n      \"origem\": 6831,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29480,\n      \"destino\": 10606,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234302,\n      \"origem\": 10606,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29450,\n      \"destino\": 6242,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104612,\n      \"origem\": 15201,\n      \"destino\": 6242,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29456,\n      \"destino\": 6248,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 104615,\n      \"origem\": 15201,\n      \"destino\": 6248,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 255841,\n      \"destino\": 22399,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229678,\n      \"origem\": 22399,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 255841,\n      \"destino\": 22399,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229678,\n      \"origem\": 22399,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 230930,\n      \"destino\": 18882,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234293,\n      \"origem\": 18882,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 230930,\n      \"destino\": 18882,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 234293,\n      \"origem\": 18882,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 199755,\n      \"destino\": 19073,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 250405,\n      \"origem\": 19073,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 253654,\n      \"origem\": 6818,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 29502,\n      \"destino\": 6464,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 229624,\n      \"origem\": 15201,\n      \"destino\": 6464,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 199755,\n      \"destino\": 19073,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 250405,\n      \"origem\": 19073,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 253654,\n      \"origem\": 6818,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 290225,\n      \"destino\": 14039,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 253347,\n      \"origem\": 14039,\n      \"destino\": 15201,\n      \"enlace\": true\n    },\n    {\n      \"id\": null,\n      \"origem\": 290225,\n      \"destino\": 14039,\n      \"enlace\": false\n    },\n    {\n      \"id\": null,\n      \"origem\": 210730,\n      \"destino\": 15201,\n      \"enlace\": false\n    },\n    {\n      \"id\": 253347,\n      \"origem\": 14039,\n      \"destino\": 15201,\n      \"enlace\": true\n    }\n  ]\n}\nWhere \"vertices\" stands for \"nodes\" and \"arestas\" stands for \"edges\" . In edges, \"origem\" stand for \"from\" and \"destino\" stands for \"to\"\n. Hi Max,\nYes man, i changed to cola and it worked fine.\nTnx by the way!!\n. ",
    "delihiros": "Nice. Thanks\n. ",
    "kurniaikhwan": "u'r right @ktei, i want that feature.\nmay i know how to do that?\ni really didnt understand about your conversation in this link, (https://github.com/cytoscape/cytoscape.js/issues/714) :D\n. oke @ktei, i'll wait your better code :)\n. @ktei , how to implement your code to my cytoscape's network view?\ni really hard to understand :D\n. @maxkfranz \nplease put this feature in to the cytoscape desktop as soon as possible. :D\n. ",
    "weirdalsuperfan": "So is this implemented in the normal cytoscape.js, or is this still a separate branch? Under http://js.cytoscape.org/#style/labels there's a section about text wrapping, which is why I ask.. ",
    "rasmushandersen": "Hi,\nI see you fixed the bug, thanks. I still think there is room for improvement though. When Connecting from a child to a parent, i would suggest (and assume) that the connecting is made to the inside of the parent and not the outside. Currently the connection from the child to a parent seems really distracting and the compound node is not \"self-contained\" as the connections goes out of the parent. \nI hope you understand what i try to convey, otherwise please ask..\n\\Rasmus\n. ",
    "starqiu": "Thanks,Max.I see the performance page , it's very good.I ingore it before.Now I prefer rich infomation(including Interactivity ) to performance.What I want to render is maybe larger than What I said before and the time is considerable in an hour. So I may try the cytoscpe-gui-distribution.\ncytoscape.js is good , I will use it in my another project.Thanks again.\n. ",
    "jonathanmarvens": "For example, I'd like to be able to do something like this.\n``` javascript\ncytoscapeOptions.ready = function () {\n  let aF\n  let i00\n  let j00\n  let networkManager\nnetworkManager = this\n// From: https://github.com/kof/animation-frame ...\n  aF = new animationFrame()\n// Add the nodes.\n  for (i00 = 0, j00 = data.nodes.length; i00 < j00; i00++) {\n    (function (n00) {\n      aF.request(function () {\n        networkManager.add({\n          data: data.nodes[n00],\n          group: 'nodes',\n        })\n    // For garbage collection.\n    data.nodes[n00] = null\n  })\n})(i00)\n\n}\n// Add the edges.\n  for (i00 = 0, j00 = data.edges.length; i00 < j00; i00++) {\n    (function (n00) {\n      aF.request(function () {\n        networkManager.add({\n          data: data.edges[n00],\n          group: 'edges',\n        })\n    // For garbage collection.\n    data.edges[n00] = null\n  })\n})(i00)\n\n}\n}\n```\n. ",
    "gsateesh28": "i have tried by giving something like\nnode {\n  background-color: green;\n}\nin my styles.css file but it doesn't work.\n. ",
    "akhilcb": "I am new to cytoscape and has same issue. Is there a working example? Above URL is not working. \nI would also like to add something like \nnode {\n   background-color: green;\n} \nin a .less file but couldn't figure out how to do it. Right now the node's background-color has to be defined in js file. . ",
    "HopefulLlama": "What's the plan regarding this issue? This would be a really good feature, and probably the last point of argument around which library to use.\n. ",
    "bruno314": "@jelmerjellema  Could you please upload (pastebin.com, or any other service) the file you've changed for arrow-resize feature? We would greatly appreciate your feature as we could use it as well. \nAdditionally, if you want, I can open PR (with you in credit as original author). But it's OK if you prefer not to.\nThanks and good luck!\nBruno\n. ",
    "metincansiper": "@ugurdogrusoz , @maxkfranz , @jelmerjellema I created the PR please see #1606. I named the new style property as 'arrow-scale' as @maxkfranz  suggested. However, I could not test it. @jelmerjellema would you check the differences in my commit to see if there is a problem?\n. @jelmerjellema thaks for notifing me. I added that line. Please, would you check again to see if it is okey now?\n. I am also in favor of MIT licence.\n. Upgrading the Cytoscape.js version is not so easy for me. Therfore I could not directly try the snapsot. However, I see that I already have the changes in 'e5579e2#diff-0a12ab28e95ef60c35904eebf53d64e7L226'. Then I have adopted the 'elesfn.json' method in 'http://js.cytoscape.org/download/cytoscape.js-snapshot-06af91ea3f-1468853599115.zip'. It seems that this problem is solved for me. Thanks.\n. I tried this snapshot, it seems that scratch is maintained during in move operation. Thanks.\n. @maxkfranz I tried to rebuild (by running 'gulp' command I tried 'gulp build' command as well) and test Cytoscape.js in both unstable and master branches, but in both cases 'src/version.js' is created but 'cytoscape.js' is not changed (Actually I was expecting that the change in your commits will be reflected to 'cytoscape.js' file). However, I tried to reflect the changes to the 'Cytoscape.js' file that I cloned to test this issue manually. It seems that the problem is fixed with your commit in this issue, thanks.\n. @maxkfranz I tried this feature. It worked well for me when any one of the source or target nodes is a compound. However, it does not work for me when both of them are simple.\nI added the following to my stylesheet \n js \n                  {\n                    selector: 'edge',\n                    style: {\n              'source-endpoint': '70% 0%',\n                          'target-endpoint': '-70% 0%'\n                    }\n                  } \nAnd I get the following output \n\nHowever if I remove the 'glyph2' (so 'glyph1' become a simple node and no compound node remains) I get the following output.\n\nAm I doing something wrong or is there a bug here?\nThanks. Sorry, it is my mistake. It works fine when curve style is specified.. @d2fong Thanks, it seems nice. However, there are some points not clear to me. \n- I am not sure if I understand what you mean by config in correct way. What I understand by config is something similar to 'shape-polygon-points' defined for 'polygon' shapes.  Am I correct?\n- If what I understand by config is correct then I think that a config may be defined for the 'pointsTee' (or 'pointsLine' with the new name that you suggested) and users may be able to set it as well (In this way current 'triangle-tee' in cytoscape can be rendered using this arrow type as well and one more arrow type will not be needed). \n- What portion is rendered by phase 0 is clear to me. However, I am not sure if I understand what portions are rendered by phase 1 and phase 2. Please would you number them in the shape that you attached? (Sorry, most probably they are already clear but I could not figure out that portions clearly). @maxkfranz please try the following fiddle (http://jsbin.com/daheveyati/1/edit?js,console,output). In this fiddle, if you resize the window you see that 'window resized' is printed out but 'cy resized' is not. However, in documentation(http://js.cytoscape.org/#cy.resize) it is written that 'cy.resize() is automatically called for you on the window\u2018s resize event'. Though the resize event is not documented yet I think that it is supposed to be called on 'cy.resize()' and 'cy.resize()' is supposed to be called on window resize. I think that there may be a problem here.. @maxkfranz I tried to do the same thing without using jsbin. Please run 'index.html' in the attached zip file. if you resize the window you will see that 'window resized' is printed out but 'cy resized' is not.\ndemo.zip\n. Okey, thanks.. As far as I understand if updateCompoundBounds() emit extra position event we do not need to listen to any event other than position but in the other way we need to listen to bounds event as well. Is it true?. @maxkfranz okey thanks for your answer. \nI need to truncate node labels so that they fit into nodes. Therefore, I need to have node width inside the function where I set node content. \nFor example a node looks like the following when the label truncation is disabled\n\nIt seems like following when it is enabled\n\nIs there a way of having this feature without breaking cytoscape.js functionality?. Thanks for the answer. However, in our application both node labels and node dimensions can be changed dynamically by the users. Therefore, it seems that I cannot do in that way.. @maxkfranz I am not sure if the problem is just related to altering the node state. I think so because if I change the selector as the following I see that the paddings of simple nodes are updated on the screen but the paddings of compounds are not updated (as in the previous case they are updated when we drag them). \n.selector(\"node\")\n          .css({\n            'padding': function() {\n              return getCompoundPaddings(); // Returns the padding value for the compounds\n            }\n          })\nAlso, I tried to alter the node state as you described. I added the following to my stylesheet\n{\n      selector: 'node',\n      css: {\n        'padding': function(ele) {\n            return ele.data('padding') || 5;\n        }\n      }\n}\nWhen I call cy.nodes().data('padding', newPadding) I see that the paddings of simple nodes are updated on the screen but the paddings of the compounds are not updated again.\nTherefore, I think that there may be a problem related to the compounds. . I created another issue which seems similar to this one (https://github.com/cytoscape/cytoscape.js/issues/1836). Yes, actually I was not getting this error from our application but getting it from a demo where I tried something and I thought that it is a bug appearing in the latest version of Cytoscape.js. However, then I realized that in that demo file the style is overridden for the parent nodes. Sorry, I am closing the issue.. Currently I am not using unstable branch I just realized it and filed this issue. If you see no problem you can close the issue.. Sorry, I need to update my question. What I need is not ele.boundingBox(). I need ele.children().boundingBox(). Therefore, my updated question is:\nHow is the performance of ele.children().boundingBox() as compare to ele.width() for a compound node?. @maxkfranz Thanks for the detailed answer. In the latest versions of Cytoscape.js there is a min-width property for compound nodes. As expected this property affects the result of .width() call on a compound. However, sometimes I need to get the value which would be the with of a compound if the min-width of it was not set (I suppose that this value is equal to the result of ele.children().boundingBox() and thats why I asked the question). Is there a proper way of getting this value? . Actually, I gave importance to the performance of this operation because I supposed that I need to get that value (the one I explained in the previous comment) while the user is interactively moving the mouse cursor (on a grapple provided to resize the node). However, now I realized that I do not need to get it consistently on user interaction. Getting it once on mouse down seems to be enough for me (In my case this value will not change while the user is moving the mouse cursor). Therefore, I suppose that even if I use ele.children().boundingbox() it is not a big deal. However, it may be still good to know if there is a better way to get that value.. I do not need child bb to draw the grapples. I need it to determine new values of min-width-bias-left and min-width-bias-right while a compound node is being resized. For example, if the node is resized through the center right grapple these values are calculated so that the extra width put on the left side of the node should not be changed (I need the children bbox to calculate extra spaces around the compound). I am able to resize compounds with this logic.\nAnd as I wrote previously getting children bbox only on mouse down on a grapple is enough for me. Therefore, I think that even if getting children bbox is expensive it seems not to be a big deal.. @d2fong I think that you made that fix in unstable. Testing it in unstable is not straightforward for me now. Therefore, I applied this change (https://github.com/cytoscape/cytoscape.js/pull/1863/commits/82ee37578cf328bd3a1364c85f4411a50d6e690c) on master branch and it seems to be working as expected with this change. . ",
    "JoshB29": "Hi, Has this been fixed. I am using cytoscape and cannot figure out how to change the arrow size without changing the edge width. ",
    "rui-ktei": "@maxkfranz Have you done any change about this yet? If so, could you reference the commit number here? I'd like to see the code you changed because if I merge these changes, I need to make sure it won't break my current project (I've been using eles.hide/show for a few places). Thank you.\n. I don't think this is actually necessary. As I see, moving a node is different from selecting a node. So basically, when you move (drag) a node, it doesn't need to be selected automatically, because maybe all I want is just to move it somewhere. When I DO want to select a node, I single click on (touch) it to make it selected.\n. @maxkfranz Thank you very much. This helps a lot.\n. I'm @ktei by the way.\n. @maxkfranz \nI tried initrender, forceRender, but still got this sort of image:\n\nSo what we did is that in the callback of either initrender or ready, we (even did forceRender to force redraw), we call cy.png to get base64 encoded string of the output image, and create a hidden field with value of this base64, and append it to document.body.\nWe also have a PhantomJS server which keeps running and when it receives a request, it goes to cytoscape-related URL and waits for the hidden field to appear, then it retrieves the value (base64 string) from the hidden field and converts it to an image file.\nSo far we have no clue yet why for some images, their image nodes are not fully rendered.\nCould you think of something else that might cause this to happen?\nThank you very much\n. So what I found in source code is this:\n``` javascript\n        var image = this.getCachedImage(url, function(){\n          r.data.canvasNeedsRedraw[CanvasRenderer.NODE] = true;\n          r.data.canvasNeedsRedraw[CanvasRenderer.DRAG] = true;\n      r.redraw();\n    });\n\n```\nMy guessed theory is that: when you trigger initrender, the images are not loaded yet (because the page is just loaded), and then later on everytime an image is loaded, redraw is called, but in that redraw, initrender flag is set to true already so initrender won't be called again. And as you said, initrender only means the first frame is drawn anyway.\nI think the solution is that, I need to do add some code on application layer to keep checking onRender event, and until all the 4 images (we have 4 kinds of node images) are loaded, in THAT frame where the 4th image is loaded, I can safely say that 'Now I can output canvas'.\nDoes this make sense?\n. Thank you @maxkfranz, I'll try embedded images\n. Thank you @maxkfranz That helped a lot.\n. ",
    "szymonatportland": "Thanks @maxkfranz - I thought that may have been the case with the strictHierarchy option.\nThe dagre layout looks exactly like what I need except that I have a requirement to be able to set the root of the graph which is not an option with dagre.\n. ",
    "guihkx": "Okay, thanks for your help, and I'm sorry!\n. ",
    "elaine-t": "We also use the dist version for conveience and ran into same issue with version 2.4.6. Did updating uglify and building yourself work for you?\n. ",
    "starkfree": "Thanks, totally missed that section in the documentation. :)\n. BioGRID\nhttp://thebiogrid.org/\nExample: http://thebiogrid.org/33257/network/saccharomyces-cerevisiae/msb2.html\n. ",
    "smpaley": "I second the request for a diamond node shape.  And for the ability to add our own simple polygonal shapes.\n. Are you saying this should work now?  I just plugged the above shape line into the Visual Style example linked to from your home page, and it didn't work on either Firefox or Chrome on my Mac.\n. Presumably this will be taken care of by #925 \n. Thanks!\nOn Wed 28 Oct 2015 01:57:43 PM PDT, Max Franz wrote:\n\nThis will make it into 2.5 but not 2.4, as I'm planning to release\ntomorrow\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1142#issuecomment-151987978.\n. \n",
    "MauricioDentz": "I get what you are saying.\nIn my case I don't change the gesture state during the mousemove, but in my custom mouseup and mousedown events.\nMy custom mousedown changes the state and the mouseup restores the previous state. The problem is that the custom mouseup event runs before the cytoscape event, causing the inconsistency.\nI can workaround to avoid this, but the state must be consistent and \"locked\" during the hole process of down, move and up events, because they work as one single event (IMO). \n. I'll take a look at that. Thank you for your time.\n. @maxkfranz \nWorks flawlessly. Seems faster to, but I need to do more tests.\nThanks!\n. Consider this:\nNodeA and NodeB inside a ParentNodeC, and a NodeD outside.\nWhen using the edgehandles plugin to create an edge between NodeD and ParentNodeC, the preview edge \"flickers\" sometimes because the findNearestElement keep changing between NodeA, NodeB and ParentNodeC, due the thresholds.\nTo avoid this, I changed the default values of edgeThreshold and nodeThreshold to a lower value and fixed the issue, but this is not a good solution, because it affects in other operations.\nI think it would be nice to have these Thresholds configurable, or maybe I'm doing something wrong?\nPs. I realize that maybe this is a cytoscape.edgehandles plugin issue.\nThanks,\n. ",
    "keiono": "Also, we are using it:\nCyNetShare\nhttp://cynetshare.ucsd.edu/\n. It's still in beta, but our embedded Jupyter (IPython) Notebook widget uses cytoscape.js:\nhttps://github.com/idekerlab/py2cytoscape\n. I'll try and see what happens.  The output JSON file looks fine to me, so it can be an Cytoscape Desktop issue. \n. What happens if you manually add \"data\" element in the JSON?\n{\n  data: {name: 'foo'},\n  elements: [],\n  .\n  .\n  .\n}\n. Oh, sorry.  I mean adding data:{} for network, not nodes/edges.\n{\n  \"data\": {\"name\": \"my network name\" },\n  elements:[ . . .]\n}\nThis defines name of the network, etc.  Cytoscape Desktop depends on that network-level information, and it maybe the cause of this issue.\n. @maxkfranz \nYes, I think the JSON reader in Cytoscape desktop should seamlessly work with Cytoscape.js outputs.  I've just added new ticket:\nhttps://code.cytoscape.org/redmine/issues/3213\nWill be fixed in the next release.\n. OK, I think I found the issue.\nCYtoscape JSON reader is very strict because it uses default settings for Jackson JSON library for Java, and it does not allow comma at the end of elements in array.  for example, this does NOT work:\njson\n[\n    \"name\": \"foo\",\n]\nbut this does:\njson\n[\n    \"name\": \"foo\"\n]\nAnd here is the fixed JSON:\nhttps://gist.github.com/b96057b9ea11c2602317\nHope this helps.\n. The cy.json() exports both Style and network topology in a single JSON.  Instead, Cytoscape Desktop handle those as two separate files.  Also, Cytoscape desktop can export both Styles and networks, but cannot read Cytoscape.js CSS-like styles because it is VERY different from Styles for Cytoscape desktop.  This is a current limitation in this feature.\n. I've pushed changes for Cytoscape 3.3.0 development branch.  I confirmed that new version reads both outputs from:\n- cy.json()\n- cy.elements().jsons()\nStyle conversion from Cytoscape.js to Cytoscape 3.x is way too complicated and not implemented (yet?).\nYou can try the nightly build if you try this new feature before 3.3.0 release:\n- Cytoscape 3 nightly build\n. Great idea!  Our lab uses MIT for all local projects and it should be less \"scary\" for people outside of academia.\n. Hi clemsos.\nI'm Kei from the Cytoscape Consortium.  We are developing graph visualization components using Cytoscape.js, React, Redux, ES2015, Webpack, etc.  We are doing this as our main project for modernizing the Cytoscape ecosystem, including both desktop and web applications.  Our goal is maintaining reusable visualization components for users who want to develop component-based applications quickly.  \nSince Cytoscape.js project started as a jquery-based library, it is a bit tricky to create React based component.  At this point, we decide to use Cytoscape.js as a simple renderer for graphs and all data management will be done in Redux side.  Here is the list of things we have so far:\n- Shared Redux store\n  - https://github.com/CyComponent/CyNetworkStore\nThis is the store / reducers used by the component.  Just like other Redux applications, all data will be stored here.  In our case, the actual graph and tables will be stored here.\n- Viewer Component\n  - https://github.com/CyComponent/CyNetworkViewer\nThis is a thin React.js wrapper for Cytoscape.js.  This uses the store above and render the network using standard react+redux architecture.  Still needs to add more event handlers, but they are already in our TODO list.\n- Utility to connect store and component (without knowing react/redux details)\n  - https://github.com/CyComponent/CyFramework\nThis is optional if you are an experienced react/redux user, but if you use this, it can render the given data without knowing technical details inside these components.  It's mainly for developers who want to integrate this component to existing applications.\nMaybe you noticed already, but in this approach, graph data exists in both Redux store and Cytoscape.js.  This is the limitation of our current approach, but it covers 90% of our use cases, so we decided to go this way.   If you really need to handle huge networks in web browsers, you may need more dumb/simple renderer for speed and memory space, but I think Cytoscape.js is sufficient for most of real-world graph visualization projects. \nSince we've just started this project, there are tons of TODOs and we need to write more documentations, but eventually we will provide more working examples and documents shortly.  The following is the one I'm working on now using these components and some other UI toolkits, and looks it works fine. \n\nOnce it's ready, we'll publish the application code, too.\nIn any case, if you need a Cytoscape.js based graph visualization component, we are happy to help.\nThanks,\nKei\nUC, San Diego / The Cytoscape Consortium\n. @madebyafox \nSorry, we are experimenting with the component and still testing the component in our test application before separating it out as a complete react component.\nHere is an example:\nhttp://ci-dev-serv.ucsd.edu:8080/?url=https://dl.dropboxusercontent.com/u/161833/gal.json&style=default&bgcolor=white\nThis uses Cytoscape.js/React/Redux, and source code is available here:\nhttps://github.com/idekerlab/web.cytoscape\nhttps://github.com/idekerlab/web.cytoscape/tree/master/client/components/NetworkPanel\nBut again, this is just a test application to see how developer can use network viewer component in real React+Redux applications.  Once we satisfy with the usability of the component, I'll deploy the version 1.0.0 of the CyNetworkViewer component to npm.  The version 1.0.0 will be a pure React Component, and there will be no dependency to Redux/etc.\n. There is a DOT support in Cytoscape desktop:\nhttp://apps.cytoscape.org/apps/dotapp\nAnd once you load your network into it, you can export it into Cytoscape.js JSON from File \u2192 Export \u2192 Network and View menu item.\n. ",
    "EDreven": "video instruction.\nhttp://www.kartoteka.ru/vizual\nThe module itself is not free.\n. ",
    "patbuergin": "GIGRAPH \u2013 Network Visualization for Excel\nhttps://gigraph.io\n(non-commercial, private project)\n. ",
    "mabossert": "I use at Cray inc. as part of a front-end analytics application run on our supercomputers.\nhttp://www.cray.com\n. ",
    "danmaclean": "PINet - http://pinet.tsl.ac.uk\nTool for The Sainsbury Laboratory network analyses\n. ",
    "YMA-MDL": "Ganister - http://www.ganister.eu/\nConfiguration management solution for Electronic/HighTech/Defense&Security companies\n. ",
    "AoDev": "Trace: https://trace.risingstack.com/\nMicroservices Visualized\nAnomaly detection, distributed transaction tracking and process monitoring for your services.\n. I arrived here because I just tried our app, which uses cytoscape.js, in Firefox. Performance is low compared to Chrome. Our graph has around 6 nodes and 6 edges. Panning and zooming are not smooth. I tried in the demos on cytoscape site, and it's the same behaviour.\nI suppose it's more a problem of the browser but shouldn't this be mentioned in the docs? I think it would be useful to mention the expected performance on different browsers.\n. It's a mac book pro late 2013. I don't think there can be a driver issue.\nOn my machine most animations (whether CSS or canvas) are performing worst on Firefox (41.0.1) than on Chrome (45.0.2454.99 (64-bit)) so I don't think the machine has a problem.\n. This is what I'd like to be able to do.\n- I have edited the screenshot to put the icon over the label of the edge\n\n. Hi, yes if you look at the screenshot you can see I'm doing it for the nodes.\nBut using an icon font is not possible if we want a text at the same time. (and we have decided to remove all icon fonts in favor of svg in our app for different reasons)\nI am using utf8 \"icon like characters\" but it's not really a good result. \n. Ok, we could do this. Still is it possible to have such feature? Regardless of how it's done, it would still be nice to be able to use an icon with an optional label on an edge, the same way we can do it for the nodes.\nAbove was just an example, the icon could be on the edge while the label floating above or below it, etc.\nI even saw some issue which idea is somewhat related. Where node labels can be positioned through margin to be able to see the incoming arrows better. https://github.com/cytoscape/cytoscape.js/issues/965\nI still think the idea would be useful regardless of the final exact spec for the feature.\n. @maxkfranz I am getting cytoscape from npm but it seems  the 2.6.8  has not been published yet.\n. ",
    "jfreyreg": "Abasy Atlas: A comprehensive atlas of systems, global network properties, and system-level elements shaping regulatory networks across bacteria\nhttp://abasy.ccg.unam.mx\n. ",
    "diegoalonso78": "APID - Agile Protein Interactomes DataServer\nhttp://apid.dep.usal.es\nExample: http://cicblade.dep.usal.es:8080/APID/InteractionsNetworkApp.action?protein=P26951\n. Thank you for adding APID.\nI noticed that the link isn't working. Could you please link it to http://apid.dep.usal.es ?\nThanks in advance.\n. ",
    "narseo": "ICSI Haystack Project to show tracking activity on mobile apps:\nhttps://haystack.mobi/panopticon/\n. ",
    "Malalama": "A friend and I have been working on Musicalized, a Family Tree of All Music Genres:\nhttp://en.musicalized.com/full\nHappy to receive some feedback!\n. ",
    "tmmurali": "GraphSpace, a web-based system for storing, sharing, and visualizing graphs in order to foster collaborative research. \nSite: www.graphspace.org\nCode: https://github.com/Murali-group/GraphSpace\n. ",
    "BrettJSettle": "BS CytoGraph, a graph visualization and JS algorithm testing environment and sharing site.\nSite: http://www.thesettleproject.com/graph\n. ",
    "xmas": "We're using Cytoscape at rezza.io. Working great for interactive relational database modeling!\n. ",
    "dfcarpenter": "We are using cytoscape all over the place. Great work.\nStringify\nstringify.com\n. ",
    "Tadasu85": "Using cytoscape to develop SteemStars which is a game along side steemit.com\n. Steemstars now also has a live version running here https://steemstars.herokuapp.com/ thank you for adding this.. beautiful thank you.. Alright I have been playing with this for some time, and I have found that the only layout option that actually works with either of these implementations is random ALL of the rest of the layout algos that I have attempted using end up breaking and just displaying as grids. Is there a layout that maybe just considers node weight and sets edge length based on that? I have played with some of the supposed physics layouts but none of them seem to consider node weight...or if they do so they seem to do so in such a minuscule way that it is useless.. ",
    "SergioRonchi": "How-4 an Organizational Network Anaylisis tool\nwww.activevalue.eu\nwww.how-4.com. ",
    "mwang87": "Visualization of structurally related compounds in Mass Spectrometry with Molecular Networks at GNPS at UCSD:\nhttp://gnps.ucsd.edu/ProteoSAFe/result.jsp?view=network_displayer&componentindex=67&task=c95481f0c53d42e78a61bf899e9f9adb#%7B%7D. ",
    "NicolasForget": "Hello, \nI've read the LICENSE file, and I understood that I can use this library as long as I mention it.\nBut this is for using it in the development of a tool which will be sold to customers.\nSo I need to be hundred percent sure (by a feedback) that I can use it without trouble.\nBTW it is for a team in SAP France : https://www.sap.com/france/index.html\nRegards,\nNicolas Forget. ",
    "MartinSchmid2409": "Cytoscape.js is used to visualize the history of Heavy Metal and its numerous genres!\n--- The Interactive Metal Genres Graph ---\n--- https://www.boundbymetal.com ---\n. ",
    "chrisdoman": "https://www.threatcrowd.org uses cytoscape js. ",
    "tumri": "https://www.ventureapp.com\nin...\nhttps://www.ventureapp.com/map/boston-tech/\nhttps://www.ventureapp.com/map/nyc-tech/\nhttps://www.ventureapp.com/map/chicago-tech/\nand more... @maxkfranz - I modified my PR #1815 to check if image exists and if image height and width are both === 0 in drawing_nodes.js where you have the check for image[i].complete.\nthis.drawInscribedImage( context, image[i], node, i );\nto\nif (!image[i] || (image[i].height === 0 && image[i].width === 0)) {\n  console.log('Image Error');\n} else {\n  this.drawInscribedImage( context, image[i], node, i );\n}\nI had also tried using the onload callback by doing\nimage[i].onload = this.drawInscribedImage( context, image[i], node, i );\nand a few other attempts at fixes but couldn't get anything else to work.\nIf you meant something else when you mentioned handling the error at the load event then I would appreciate if you could point me in the right direction(I am a bit inexperienced) and I will update the PR with a more agreeable fix.. Hey @maxkfranz.\nI updated the PR #1815 and was able to get the following onError event to fire and somewhat fix the issue.\nin images.js\nvar onError = function(){ this.width = this.height = 0; }\ncache.image.addEventListener('error', onError);\nand\nimage.addEventListener('error', onError);\nI am setting width/height to 0 manually since the rest of the code seems to check for those values being set to zero as a signal to ignore the image but can change it if you would like.\nHowever, I'm still running into the issue when too many images are loaded or 404 at once, which is fixed by checking at the actual render event as I was before. Is this caused by the onError callback firing after the render attempt? If so is there any way to circumvent this?\nMy particular use case is... https://www.ventureapp.com/map/nyc-tech/. Hey @maxkfranz  I added the app to the list. I also changed the onError event to not use \"this\" so it fixes the issue without any problems.. I noticed this issue pop up again sometime last year and had to revert to using the original fix I had (see OP) since that seemed to work better despite potentially causing issues with other functionality that I wasn't using. If you're having problems you may want to try that.. Changed as requested.. https://www.ventureapp.com/map/boston-tech/ - This consistently produces blank background image nodes as described.\nI seem to have found a fix for it though I don't know if it fixes the root of the issue or just covers it up.\nChanging that line above to node.rtrigger('style'); from node.rtrigger('background'); seems to cause the node to properly redraw.. Did you have Chrome inspector open or have cache turned off? I notice that also masks the issue for some reason.\nMost of the images load fine but when you zoom in you should be able to see a few that are blank until click like this.\nhttp://i.imgur.com/JDXaFu1.png. ",
    "Insulince": "We (younivise) are using Cytoscape in our Hackathon winning project, Virtual Advisor. See http://younivise.com/ for further details and a video demo (currently no live product).. Thank you @maxkfranz, and I do hear you, however, a lot of those don't have to be deal-breaking issues. If a dev enters invalid combinations, simply reject them and/or throw an exception. One way of ensuring valid values would be to only allow setting of x1 and y1, and assume the same w and h (extent zoom cannot be set) then calculate x2 and y2. As for the constraint issues, these are things that I would agree should be left up to the developer to implement. A method of hard pan-limiting is not something I am suggesting here, just a way to set the current view using model coordinates instead of rendered ones. With a tool like that, developers could create their own pan limits by checking the extent, and when it is beyond a predetermined bound, re-setting the extent to the bound limit. The consequences on the rest of the graph are something for the developer to work on themselves.. I agree with you on most everything.\nI think it would be wise to throw the whole operation away if the user passes any invalid values, or perhaps allow for a callback when that occurs as a way to recover.\nA cy.panTo that accepts x1 and y1 would be absolutely terrific, and in my opinion, a dire need for the library. As a user, I have found myself falling off the edge of the graph with trouble finding my way back (for example, zooming very far out is basically a death sentence). I suppose using animations or cy.center/fit in combination with a zoom limit would be a solution, but I think a predefined way to set the pan via model coordinates could be used to make the user stay within a certain region with a more intuitive feel as well as make the dev's development process easier.. I am not quite sure what you mean, please forgive me, I am very new to the world of strictly regulated git (I'm used to working by myself exclusively on master), and it is my understanding that I would have to branch off of master, add some functionality for this, and submit a pull request to have it merged with unstable. I intended this issue more as a feature request. Am I backward in my thinking here? If so, please tell me what you would need me to do.. ",
    "KonradHoeffner": "http://www.snik.eu/graph/ visualizes an ontology of Information Management in hospitals for the SNIK research project at the Institute for Medical Informatics, Statistics and Epidemiology (IMISE).\n. The link that should send the user here from the blog post http://blog.js.cytoscape.org/2017/04/11/3.0.0-release/#summary-of-changes sends the user to the non existing URL http://blog.js.cytoscape.org/2017/04/11/3.0.0-release/(https://github.com/cytoscape/cytoscape.js/issues/1764) instead (hope this is the right place to report that).. Thanks for the information! I had no idea about undocumented file size limits. I will stay with PNG though, as the file sizes are very close for my graph. I think due to the way the lossless PNG compression works, it is much better suited for cytoscape graphs. This could be different with textured backgrounds or color gradients though. JPG on the other hand is very badly suited for high-frequency images with lots of text and the fine edges between nodes.. Our application has a filter function that allows the user to hide certain parts of the graph.\nIt also has several path and neighbor finding functions that hide all graph elements that are not on the path. Those path finding functions should only include elements that are not filtered out.\nAt first, I used one type of hiding for both filters and paths but this lead to bugs when one finds a path and then changes the filters. For example, if I filtered out all blue nodes and then calculated a path between orange nodes and then made the blue filter visible again, all blue nodes would show up again even though they should be hidden as they are not on the path.\nIn order for those two types of operations to interact properly, I had to use both types of hiding, display for filters and visibility for path operations. However that was still not enough, because paths between two visible nodes would go over invisible filtered out nodes even though those would not be shown. As I didn't find a selector for filtered out nodes, I had to perform all kinds of contortions to get all path operations to interact properly with the filters, especially as paths can be extended in the application, for example one could change a filter, then calculate a path, then show neighbours of a node on the path, then change the filters again. In order to add more functionality later and increase maintainability, I would like to just use a selector for elements of one kind of visibility.\nI also tried to temporarily remove filtered out elements from the graph but that led to errors because the filters overlap and sometimes a restored edge would not have its one of its connected node yet.\nIf you are interested, you can see it at http://www.snik.eu/graph/, the code for the paths is at https://github.com/IMISE/snik-cytoscape.js/blob/61925ccdeb15c5b8c6286b72001d6270800b5fe8/js/graph.js.. ",
    "bashao": "TissueNet v.2 http://netbio.bgu.ac.il/tissuenet\nDifferentialNet http://netbio.bgu.ac.il/diffnet. ",
    "gabor-kovacs": "A visual decomposition of Japanese kanji characters.\nhttp://thekanjimap.com/. ",
    "anault": "Classcraft (school gamification)\nInteractive map where students progress through their class content just like as if they were on a quest.\n. @justbill2020 Yeah, change the string ref to a standard ref since string refs are deprecated.\nAccording to React, refs are useful for integrating with imperative libraries (like Cytoscape), so it's definitely not advised against here.\n. A dragfree event is exactly what I'm looking for!. I'll test it as soon as I can!. @maxkfranz It works flawlessly, both desktop and mobile.. Here's the Chrome GPU infos for the Asus Zenfone 2:\n\nAlso, I tested the qTip demo in Firefox Android on the same device, it's actually worst.\n. ",
    "gsoules": "The Southwest Harbor Public Library in Maine is using Cytoscape in its Digital Archive via the AvantRelationships plugin we developed for Omeka. The plugin uses Cytoscape to display a visualization of the real world relationships between people, places, and things.. ",
    "dvas0004": "CyberSift\nVisualization of log anomalies\n\nHow to create a \u201cheatmap\u201d graph network visualization. ",
    "mnelson4": "Just made a basic WordPress plugin that shows this in-use. https://github.com/mnelson4/cytoscape-demo I'm hoping to use this to basically graph a family tree. ",
    "fedarko": "MetagenomeScope (project homepage) uses Cytoscape.js to display sequence assembly graphs.\nThis project is part of the University of Maryland's Center for Bioinformatics and Computational Biology.. Thanks for your response! I didn't know that there were implicit points used in unbundled bezier edges, but that makes sense. It might be something helpful to add to the documentation for unbundled bezier edges, since I don't see it mentioned anywhere.\n\nYes, loops may only be beziers or unbundled beziers. You may customise the control point distance. You may also control the direction in 3.1: #1391\n\nThis is great, thank you for letting me know!\n\nThe more you customise edges, the more likely you are to have problems and the more careful you'll have to be. There isn't much if anything the lib can do to help you in an automated way in those cases.\n\nThat's entirely fair. I'm using another graphing library to generate the layouts of large graphs and then render those layouts in Cytoscape.js, and that library uses static control points (i.e. stored as absolute coordinates) for B-spline edges in order to minimize edge crossings. The 5->6 edge is an example of one of these auto-generated edges; I can automatically convert the control points to the relative format used in Cytoscape.js, but it looks like I might have to do some more work to verify that the edge is a valid Bezier curve.\nOut of curiosity, do you think it would be feasible to implement something in the Cytoscape.js side that, on detecting that an edge is impossible to draw, just draws it as an ordinary bezier/haystack edge? I think a feature like that might be useful\u2014from a few minutes of playing with coord-ele-math.js, I found a simple (if flawed) way to show badBezier edges as visible, simple bezier edges on the graph's initialization by changing line 1327 to\nvar curveStyle = badBezier ? 'bezier' : edge.pstyle( 'curve-style' ).value;\nbadBezier = false;\nHowever, there's more that would need to be done to get this consistently working. If you think it'd be worthwhile, I can try to implement such a feature in Cytoscape.js (and then make a pull request). Ideally, a feature like this would be configurable by the user, so that they can 1) only use it if they want to show beziers/haystacks in place of impossible unbundled-bezier/segments, and 2) choose the fallback edge type (e.g. bezier vs. haystack).\n. Ah, got it. I usually just think of single beziers as straight lines, but I suppose for really small distances or for the case of multi-edges we can't rely on that case.\nA pertinent question: in the original demo I provided (here's the demo's output\u2014I set up a JSBin account and cloned the demo, so the output should be persistent), edge 5->6 actually renders at a smaller distance than what it's originally set to. It also renders fine at most larger distances. Only when the gap between nodes 5 and 6 gets really small, smaller than the original gap size, does the renderer bail out, which brings up an interesting point: it looks like the initial rendering process (on rendering the graph) is too cautious, and rejects what would otherwise be considered valid edges. I've provided another JSBin clone of the demo (output here, code here) in which the initial detection of badBezier edges is commented out, and that fixes this problem: 5->6 shows on rendering the graph, and it only disappears when the gap between nodes 5 and 6 gets small\u2014since, as you mentioned, the edge is \"maldesigned for smaller distances.\" (The effects of this change can be observed by un-commenting-out the initial badBezier detection process, which can be found by ctrl-F'ing for \"README\" in the accompanying cytoscape.js file.)\nIs this \"cautiousness\" of the initial renderer expected behavior, and do you think commenting out the initial bad edge detection is a sustainable solution (or might it have some harmful side-effects)? The commenting-out thing solves most of the \"invisible\" problems I was having with unbundled-bezier edges, and implementing haystacks with a radius 0 as a fallback would solve the rest of the problems.\nThank you for your help!\n. Thank you for the help and advice!\n. The snapshot works for me. Thank you!\n. The snapshot works perfectly\u2014thank you for your help!\n. The snapshot works perfectly for me. Thank you!\n. The snapshot works perfectly for me. Thank you so much for your help!\n. My apologies\u2014this was my fault. I was storing collections of certain elements within the .data() fields for compound nodes.\nI did not notice anywhere in the documentation that certain types of data could not be stored in .data(), although I see now that the documentation does mention that non-JSON data can be stored in .scratch(). I'm sorry for the confusion.. Thanks for the response. Which styles for the :active state should I override to do this? As far as I can tell, I can change the attributes of the overlay but not actually disable the overlay itself.. Sorry to bother\u2014I tried your first suggestion, and using zero padding/opacity for the :active state doesn't seem to result in a noticeable change in time taken to select an individual element. I'll look into using cy.style().clear() when I get some more time, but I'm thinking it might be easier to just modify Cytoscape.js to accomplish this.\nFor context (to hopefully be less vague), in Iceweasel (a slightly modified version of Firefox for Debian) version 38.7.1, the styling upon active nodes seems to be disabled upon tap selection regardless of the padding/opacity settings in place for :active elements. From a bit of looking around it seems like some of the version 2.7 performance enhancements mentioned in #1005 might be related to this. In Chromium (version 55.0.2883.75 on my machine), though, this styling is enabled by default. So when viewing the same region of the same graph in our application in both browsers, element selection in Iceweasel is much faster than in Chromium. Attaching two .gif files I recorded showing this (sorry for the image quality of the recording).\nSelection in Chromium: node is clicked at start of the gif and takes about 4-5 seconds to be selected. (The clock in the top-right of the screen can be used as a reference.)\n\nSelection in Iceweasel: node is clicked about 2 seconds after the start of the gif and takes about 2 seconds to be selected. (The clock in the top-right of the screen can be used as a reference.)\n\nBasically, I'm curious if this difference in styling for Iceweasel/Firefox could be applied to other browsers to speed up user interaction with the graph. If this isn't possible, or if the difference in styling isn't even intentional for some reason, that's fine\u2014this isn't that significant of an issue for our application.\nThank you for your help!. Got it -- that makes sense. It seems like achieving the Chrome speedup wouldn't necessarily be feasible without using .clear() at present, then -- I can work on doing that. Thank you for your help.. ",
    "0xdabbad00": "CloudMapper: An open-source tool for visualizing the network connections in AWS (Amazon Web Services). Demo\n\n. ",
    "sarora2073": "https://BlueSailCRM.com  - we use cytoscape within our marketing automation engine.. ",
    "d47853": "GCHQ uses Cytoscape.js in their UI for Gaffer, an open source graph database. . ",
    "vicscott": "UESTC\nhttp://cefg.uestc.edu.cn/Mslr/index.html. ",
    "ksebby": "xD Bio Inc.\nWe use cytoscape to display bioinformatics workflows. \nMain site truwl.com\nexample: https://truwl.com/workflows/detail/ENCODE%20ATAC-seq%20pipeline. I had the same issue. Had to import explicitly from dist/cytoscape.js instead of the default dist/cytoscape.cjs.js:\nimport cytoscape from 'cytoscape/dist/cytoscape';. ",
    "ortega2247": "Vanderbilt University\nWe use cytoscapejs at the Lopez lab to generate static and dynamic networks of systems biology models pysbjupyter. ",
    "Hoogkamer": "Interactive MetroMap visualisation for process descriptions (DEMO)\n\nhttps://github.com/Hoogkamer/MetroMap\n. ",
    "ghamarian": "We use cytoscapejs to generate tensorflow models graphically.\nhttps://www.machine2learn.com/deep-learning-model-generator/. I have implemented this by allowing parent to be collections, and a couple of minor adaptations. Would you be interested in a pull request or is it against your design policies?. \nI think the change I suggested cannot be done with an extension as it required a change to the data structure, i.e. parent. This was about 10 lines of code change in total. But if that's your decision not to support it, then so be it. Thanks for the nice library btw.\nAnd here is the commit of changes:\nhttps://github.com/ghamarian/newcyto/commit/202644f2ecf07e58997db8e1ad800211ad5bf10c. ",
    "mammmals": "We use cytoscape.js to display protein-protein interaction data for the genome-scale BioPlex Interactome Project:\nhttp://bioplex.hms.harvard.edu/bioplexDisplay/index.php. ",
    "dehmlowm": "This Issue goes away if you set 'a' as the root node\n. ",
    "lmalik12": "My files are rather large, I did however modify one of the demos on the cytoscape.js page and found the edges cross over just like they do in my project.\nAlthough this is a simplified version i hope it still gives you all the information you need.\nhttp://jsbin.com/cuzujunexa/1/edit?js,output\nFrom the visual (in the link above) you will notice my node View2 and View3 cross over when there is no need to do so. I would like View2 to be underneath the node it is connected(VF2) and the same with View3, just like View1 is under VF1.\n. ",
    "kolesnikova-tavi": "{\"elements\":{\n    \"nodes\":[{\n        \"data\":{\n            \"bg_color\":\"\",\n            \"position\":{\"y\":131.399993896484,\"x\":604},\n            \"name\":\"\",\n            \"halign\":\"\",\n            \"text\":\"\",\n            \"valign\":\"\",\n            \"id\":\"node1431016791195\",\n            \"empty\":false\n        },\n        \"position\":{\"x\":604,\"y\":131.399993896484},\n        \"group\":\"nodes\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"bg_color\":\"\",\n            \"position\":{\"y\":190.399993896484,\"x\":566},\n            \"name\":\"\",\n            \"halign\":\"\",\n            \"text\":\"\",\n            \"valign\":\"\",\n            \"id\":\"node1431016792502\",\n            \"empty\":false\n        },\n        \"position\":{\"x\":566,\"y\":190.399993896484},\n        \"group\":\"nodes\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"bg_color\":\"\",\n            \"position\":{\"y\":157.066660563151,\"x\":386.333333333333},\n            \"name\":\"\",\n            \"halign\":\"\",\n            \"text\":\"\",\n            \"valign\":\"\",\n            \"id\":\"node1431016824729\",\n            \"empty\":false\n        },\n        \"position\":{\"x\":382.5,\"y\":164.899993896484},\n        \"group\":\"nodes\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"bg_color\":\"\",\n            \"position\":{\"y\":141.399993896484,\"x\":331},\n            \"name\":\"\",\n            \"parent\":\"node1431016824729\",\n            \"halign\":\"\",\n            \"text\":\"\",\n            \"valign\":\"\",\n            \"id\":\"nodenode1431016824729_0\",\n            \"empty\":false\n        },\n        \"position\":{\"x\":331,\"y\":141.399993896484},\n        \"group\":\"nodes\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"bg_color\":\"\",\n            \"position\":{\"y\":135.399993896484,\"x\":434},\n            \"name\":\"\",\n            \"parent\":\"node1431016824729\",\n            \"halign\":\"\",\n            \"text\":\"\",\n            \"valign\":\"\",\n            \"id\":\"nodenode1431016824729_1\",\n            \"empty\":false\n        },\n        \"position\":{\"x\":434,\"y\":135.399993896484},\n        \"group\":\"nodes\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"bg_color\":\"\",\n            \"position\":{\"y\":194.399993896484,\"x\":394},\n            \"name\":\"\",\n            \"parent\":\"node1431016824729\",\n            \"halign\":\"\",\n            \"text\":\"\",\n            \"valign\":\"\",\n            \"id\":\"nodenode1431016824729_2\",\n            \"empty\":false\n        },\n        \"position\":{\"x\":394,\"y\":194.399993896484},\n        \"group\":\"nodes\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }],\n    \"edges\":[{\n        \"data\":{\n            \"source\":\"node1431016792502\",\n            \"target\":\"node1431016791195\",\n            \"id\":\"edge1431016814928_1\",\n            \"ln_color\":\"\",\n            \"name\":\"\"\n        },\n        \"position\":{},\n        \"group\":\"edges\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"source\":\"nodenode1431016824729_0\",\n            \"target\":\"nodenode1431016824729_1\",\n            \"id\":\"edge1431016807408_1\",\n            \"ln_color\":\"\",\n            \"name\":\"\"\n        },\n        \"position\":{},\n        \"group\":\"edges\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }, {\n        \"data\":{\n            \"source\":\"nodenode1431016824729_1\",\n            \"target\":\"nodenode1431016824729_2\",\n            \"id\":\"edge1431016807408_2\",\n            \"ln_color\":\"\",\n            \"name\":\"\"\n        },\n        \"position\":{},\n        \"group\":\"edges\",\n        \"removed\":false,\n        \"selected\":false,\n        \"selectable\":true,\n        \"locked\":false,\n        \"grabbed\":false,\n        \"grabbable\":true,\n        \"classes\":\"\"\n    }]},\n    \"style\":[{\n        \"selector\":\"node\",\n        \"css\":{\n            \"text-valign\":\"center\",\n            \"text-halign\":\"right\",\n            \"content\":\"data(name)\",\n            \"font-size\":\"14px\",\n            \"height\":\"20px\",\n            \"width\":\"20px\",\n            \"background-color\":\"#dfdfdf\",\n            \"border-color\":\"#000\",\n            \"border-width\":\"1px\",\n            \"border-style\":\"solid\"\n        }\n    },{\n        \"selector\":\"edge\",\n        \"css\":{\n            \"color\":\"#dfdfdf\",\n            \"width\":\"15px\",\n            \"curve-style\":\"haystack\",\n            \"haystack-radius\":\"0\"\n        }\n    },{\n        \"selector\":\"node[?empty]\",\n        \"css\":{\n            \"height\":\"15px\",\n            \"width\":\"15px\",\n            \"border-width\":\"0px\"\n        }\n    },{\n        \"selector\":\"$node > node\",\n        \"css\":{\n            \"height\":\"auto\",\n            \"width\":\"auto\",\n            \"shape\":\"roundrectangle\",\n            \"background-color\":\"#ffffff\",\n            \"padding-left\":\"5px\",\n            \"padding-right\":\"5px\",\n            \"padding-top\":\"5px\",\n            \"padding-bottom\":\"5px\"\n        }\n    },{\n        \"selector\":\"node:selected\",\n        \"css\":{\n            \"font-weight\":\"bold\",\n            \"border-width\":\"3px\"\n        }\n    },{\n        \"selector\":\"edge:selected\",\n        \"css\":{\n            \"line-style\":\"dashed\"\n        }\n    },{\n        \"selector\":\"node[?text]\",\n        \"css\":{\n            \"pie-size\":\"60%\",\n            \"pie-1-background-color\":\"#000000\",\n            \"pie-1-background-size\":\"100%\"\n        }\n    }],\n    \"zoomingEnabled\":true,\n    \"userZoomingEnabled\":true,\n    \"zoom\":1,\n    \"minZoom\":1e-50,\n    \"maxZoom\":1e+50,\n    \"panningEnabled\":true,\n    \"userPanningEnabled\":true,\n    \"pan\":{\"x\":0,\"y\":0},\n    \"boxSelectionEnabled\":true,\n    \"layout\":{\"name\":\"preset\"},\n    \"renderer\":{\"name\":\"canvas\"},\n    \"wheelSensitivity\":0\n}\n. Thanks! It works. But now the labels are included into the parent.\nBefore:\n\nAfter:\n\n. Excellent! Thanks a lot!\n. 1. I'm sorry. It is my mistake. Now It is OK.\n2. I'm making an application that builds metro maps. It is uncomfortably to try to select a tiny station (a node) when there is its large name (a label). Maybe is it possible to switch on/off binding events on labels? \n. > > Could you make your nodes bigger?\nBecause I have a design.\n\n\nYou could alternatively make your nodes bigger and transparent...\n\n\nNames have different lengths. And my application allows to change the color of stations. So it is not a very good solution.\nAnyway, thanks.\n. ",
    "mojitoholic": "Yes. I just tried using the most recent unstable from this morning and the problem is still there.\n. ",
    "pedrodelgado81": "Hi, I found the error and was my fault. \nThe problem was that the image url in my graph are inconsistent for CORS. I change the source and works!\nThanks.\n. ",
    "nellaiiyappan": "Max,\nYes this issue still in 2.4.0 while using the preset . we need the scroll for layout. I have attached the source code with this \nhttps://gist.github.com/anonymous/5e524a6f7631e75fbb6a\nPlease advise me on this.\n. ",
    "dpatte": "I have not used cytoscape (yet), but what you want may be possible if run from within a javascript server framework such as meteor or node.js.\n. ",
    "baso10": "I have included also function call, but kept simple data field. In my case I know length when I am creating edge and there is no need for function calls.\n. ",
    "mafar": "If anyone wants a sample for reference, using font-awesome http://jsfiddle.net/bababalcksheep/ajhnmcrb/\n. http://jsfiddle.net/bababalcksheep/ajhnmcrb/ \nI prepared a sample using font-awesome.\nCan anyone tell me why \\n is not working in edge  label: '\\uf173\\n twitter vs FB',\nI want icon on top and below the text.\n. @maxkfranz \nThank you. it works now as expected/ http://jsfiddle.net/bababalcksheep/ajhnmcrb/8\nBut from http://jsfiddle.net/bababalcksheep/ajhnmcrb/8 is it possible that icon of twitter is inside circle and rest of text is below circle \n. @maxkfranz \nHere is working fiddle:  http://jsfiddle.net/ajhnmcrb/11/ \nPlease check the image below.\nI think its not possible with cy and best way would be \n1. Use image instead of font-icon as background image of node\n2. Use node content to align label below the node\nIs this correct approach ? are there any alternatives\n\n. @maxkfranz  Thank you for the clarification.\nI know this is not the scope of this issue but is there any event where we can manipulate node and add custom labels perhaps ? or is it a wrong approach \n. @maxkfranz \nplease have a look at https://jsfiddle.net/bababalcksheep/ajhnmcrb/16/\nIf I use content:  '\\uf173' , font renders correctly. But If I want to update node label with new font unicode, it does not work. it simply prints \\uf173 instead of font\nI am using input <input type=\"text\" value=\"\\uf173\" id=\"title\"> to change node with id e cy.$('#e') to change its content.\njs\n   $('#title').on('input', function() { \n         cy.$('#e').css({\n          content:   $('#title').val()\n        });\n   });\n. asked at proper location https://github.com/cytoscape/cytoscape.js-dagre/issues/5\n. https://jsfiddle.net/bababalcksheep/nyt8Lupv/8/\nAnother try to return svg_label object from content: function() based on idea from  https://github.com/cpettitt/dagre-d3/blob/master/demo/svg-labels.html\n. i think its not valid as cytoscape does not support html or svg\n.  'roundrectangle'  works.\nIt would be nice to have circle and ellipse  support at least\n. @dpekkle  yes 'roundrectangle' is supported .\n. @min-metal  Thankx. I missed that.\n. ",
    "megawebmaster": "Anything new on this matter? Is it going to be merged into master?\n. Thank you.\n. Hi,\nIt might be weird, but it seems everything is working fine even without this change, I have updated Cytoscape thrice (2.4.2, then master, then master with my fix and then again 2.4.2) and it began to work properly. I'm sorry to bother you.\nP.S. I'm sure yesterday I had this bug and this was the way to solve it!\n. It seems the problem is back. Some images:\nOpened column on the left side:\n\nClosed before fix:\n\nClosed after fix:\n\nAs you can see before fix images are chopped of, BUT the graph is operable in that \"blind spot\" (i.e. I can pan the graph). I tried to create a codepen for this, but Cytoscape worked, although without showing a thing (canvases were right there). It might be the issue with iframes though.\nAs you said about redraw() function I changed pull request to add safer solution.\n. cy.resize() is called after resizing of the div, but the thing is browser itself is doing width recalculation. I even looked through the code and tried to see what's going on with width and height of the cy div, but it really was lower when calling to resize(). Also I think putting resize() call in a timeout is a bit dirty workaround. \nJust curious - why do you want to avoid this 1ms delay in calling resize() function?\n. I'm also in favour of changing. Simpler licence = more contributors, more users. MIT seems to be one of the best solutions for open source projects.\n+1 from me!\n. ",
    "dfsp-spirit": "Thanks heaps man, that was a fast fix. I gave the snapshot a try & confirmed that it is now working.\n. ",
    "swillard-r7": "Any ETA on a 2.4.5 release? Ran into this issue, too.\n. Whoops -- yeah sorry, was depending on an old version, thanks!\n. ",
    "panuganti": "@OAGr  where did you specify \nmodule.exports.node = {\n  child_process: 'empty'\n}. ",
    "jogshraddha": "\n_Module not found: Error: Cannot resolve module 'child_process' in /project/node_modules/serialport/lib/bindings\n\nI am facing above error when I build my react application. My application is created using create-react-app and electronjs. I googled for this issue and the most suggested solutions are related to webpack config which I can not directly modify in create-react-app. I tried those solutions like adding 'target: node' and external config etc by ejecting create react app but that also did not work. Before adding serialport package it was working properly now it looks up for the child_process package into serialport libs. Can someone help me out in this?. ",
    "idoo": "+1\n. ",
    "Killbot5000": "I'm in the process of completing the work of Fabian-Schmidt.\nI'll try to get everything upstream by the end of August, but the process of branching and merging is still new to me, so a delay is possible.\nIn the meantime, feel free to bug me for the latest version.\nRegards, KB5000\n. ",
    "Cyberider": "If it helps:\nIn the discussion at: https://github.com/borisyankov/DefinitelyTyped/issues/4763\n@maxkfranz offers a JSON spec of the API.\nBetween that and this project: \nhttps://github.com/horiuchi/dtsgenerator (TypeScript d.ts file generate from JSON Schema file)\nCan you get the JSON spec to generate the d.ts definition file?\n. What is your typed-typings? A curated list of typed definitions?\nDate: Thu, 23 Jun 2016 11:18:21 -0700\nFrom: notifications@github.com\nTo: cytoscape.js@noreply.github.com\nCC: rickgodwin@hotmail.com; author@noreply.github.com\nSubject: Re: [cytoscape/cytoscape.js] TypeScript Definition for Cytoscape.js - It is being worked on now! (#1012)\nWould you mind it I made this a typed-typings? \nhttps://github.com/typed-typings\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. okay, great. Sure, do what you got to do regarding cytoscape.js\nDate: Fri, 24 Jun 2016 10:51:49 -0700\nFrom: notifications@github.com\nTo: cytoscape.js@noreply.github.com\nCC: rickgodwin@hotmail.com; author@noreply.github.com\nSubject: Re: [cytoscape/cytoscape.js] TypeScript Definition for Cytoscape.js - It is being worked on now! (#1012)\nTyped-Typings is similar to DefinitelyTyped except rather than having all the typing definition files in a single git repository they can be placed in a number of places. \nThis also allows for a registry for different versions of the typings.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Okay sounds great but I have nothing to do with the cytoscape.js project! I have just expressed a desire to have TS defs for it.\nRick\nDate: Fri, 24 Jun 2016 08:10:20 -0700\nFrom: notifications@github.com\nTo: cytoscape.js@noreply.github.com\nCC: rickgodwin@hotmail.com; author@noreply.github.com\nSubject: Re: [cytoscape/cytoscape.js] TypeScript Definition for Cytoscape.js - It is being worked on now! (#1012)\nWhatever way Typescript definitions are published, it would be great if it could be automated on the Cytoscape.js side so that they're automatically kept up to date.\nThe docmaker.js file generates the HTML version of the docs from docmaker.json.  It would be great if docmaker.js could be refashioned into a tsdefmaker.js file to output a .d.ts file.  That way, everything could be automated with each release.\nI'm not an expert an TS or TS defs, so it would be great if someone wanted to make a PR to do this.\nThanks\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Wow, nice work @phreed!\nWhy not PR your work-in-progress to the Typescript Definitions repository DefinitelyTyped so others can help you polish it up?. ",
    "phreed": "Would you mind it I made this a typed-typings? \nhttps://github.com/typed-typings\nThe advantages are described here... \nhttps://github.com/typings/typings/issues/322\n. Typed-Typings is similar to DefinitelyTyped except rather than having all the typing definition files in a single git repository they can be placed in a number of places. \nThis also allows for a registry for different versions of the typings.\n. Pretty soon.\nI do not need them quite yet for my project. \n. I am continuing to work on them.\nYou can use them in there current state from my github project.\n  I add the following to my package.json file \n\"devDependencies\": {\n...\n\"@types/cytoscape\": \"github:phreed/ts-typings#cytoscape\",\n...\n}\nand  then\n npm install @types/cytoscape\nor\n npm install --save-dev github:phreed/ts-typings#cytoscape\n. My plan in May is to update to @types and v3. Alternatively I am\nconsidering a Typescript wrapper.\nOn Thu, Apr 27, 2017, 04:04 Tom Muylle notifications@github.com wrote:\n\nAfaik there are no typings yet for version 3.0.0? :(\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1012#issuecomment-297657057,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAM6vB0CbRCGo0KSF0D6n3camv2qAMhPks5r0FougaJpZM4FZKD3\n.\n. This is where things are now \nhttps://github.com/phreed/ts-typings/tree/cytoscape\nI am working through the v3 api and should have something in @types within the next couple of days. . I have a draft version for the v3 api.\nhttps://github.com/phreed/ts-typings/tree/cytoscape3\n. I believe what you mention was a change from v2.x to v3.x\nI have been working on the typings for v3.x here...\nhttps://github.com/phreed/ts-typings/blob/cytoscape3/index.d.ts\n\nI have completed a pass through the latest documentation...\nhttp://js.cytoscape.org/\n...but there are probably (certainly) errors.\nI am working though the tests based on the examples in that document now\nand would welcome any help.\nMy plan is to release this work as part of DefinitelyTyped...\nhttps://github.com/phreed/DefinitelyTyped\nThanks\nOn Wed, May 17, 2017 at 11:15 AM WaynePlummer notifications@github.com\nwrote:\n\nShould this:\ninterface Stylesheet {\n    selector: string;\n    css: Css.Node | Css.Edge;\n}\n\nactually read:\ninterface Stylesheet {\n    selector: string;\n    style: Css.Node | Css.Edge;\n}\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1012#issuecomment-302141723,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAM6vASI5uXqxd9UEy1I8ay2VImpxUanks5r6x0ugaJpZM4FZKD3\n.\n. Have any of you had a chance to give it a try?\nhttps://github.com/phreed/ts-typings/tree/cytoscape3\nShould I go ahead a push it out to DefinitelyTyped?\nThe typings are working for my current project.\nI am planning on using cytoscape.js from ClojureScript for my next project.\nI won't be able to spend much time on maintenance, so somebody else should probably pick this up. \n. @maxkfranz I am not sure what you mean by TS requiring semantic changes to the underlying JS. From my perspective there are no changes necessary to the underlying JS or semantically or otherwise. The typings simply provide some of the missing description of an otherwise obscure semantic.. @opavader We should move forward with pushing the typings from my ts-typings repo, as they are, into DefinitelyTyped.\nThe DefinitelyTyped location will then be the primary source.\n\nI believe the typings to be complete as far as covering the API.\nWhat remains is testing which includes adding all of the samples into the test file and people like you all kicking it around.. @maxkfranz Is the following the substance of your point?\nThe primary question regarding providing data and function type specifications is... \nWhat would the cytoscape.js people be willing to do?\n keep a set of informal / formal specifications in the jsdocs (current approach)\n keep a set of formal specifications in the jsdocs\n keep a set of type specifications separate from the main javascript but in the cytoscape repository @opavader \n notify a collaborator (us) that the api has changed\nA secondary question... \nWhat should the form of these specifications?\n* flow, typescript, jsdoc, \n. ",
    "aindlq": "@phreed Are you still going to publish the typings?\nfyi I'm successfully using them in my project, so far so good. Also I've made some significant improvements to them in the Styles/CSS part.\n. For people who end-up here from search, there is already extension for collapse-expand functionality - see https://github.com/iVis-at-Bilkent/cytoscape.js-expand-collapse\nSo the issue can be closed.\n. Thank you for explanation! Your proposal works like a charm.\nI'll keep example here for future references: http://jsbin.com/nuvociwudo/1/edit?html,output\n. Sorry for the delay with response. I can confirm that bug was fixed. Thank you!\n. Thank you for suggestions, I've looked into the parser logic and indeed it is quite complex. So I decided to make some pre-processing of selectors and escape URIs before they get into cytoscape.\nE.g \"selector\": \"node[iri('http://www.w3.org/2000/01/rdf-schema#label') *= literal('Alice')]\", then I look for iri and literal patterns and replace them with escaped values.\n. ok, I see. I think the destroy event is the way to go. I've changed title of the issue accordingly.\n. It seems that something is wrong with ^ character. See https://github.com/aindlq/cytoscape.js/commit/bb0e36854016336bdf0f85e14278e15e84e376ab\n. Works fine for me. Thank you!\n. I wonder if it is possible to cherry-pick this onto current master, or it uses something from unstable?\n. Look into selectors. There is node selector with \"width\": \"label\" and \"height\": \"label\". My expectation was that this selector will be applied to the node when it is no longer compound node. But it is not applied.\n. Ok, selector is actually applied. See http://jsbin.com/qeyibukeqi/1/edit?html,output\nNode changes the color from green to yellow, but it doesn't change the size.\n. Sorry for the confusion, I've just added it to show how actually I've ended up in this situation. Initially I was thinking that this is expand-collapse related issue.\n. That was blazingly fast! I can confirm that issue was fixed. Thank you!\n. @Flui I'm successfully using many cytoscape extensions with react and typescript, I assume it is quite similar to ES6.\nMost of the time you need to propagate cytoscape and jquery instance into extension, as well as register jquery in cytoscape:\n```\nimport * as jquery from 'jquery';\nimport * as cytoscape from 'cytoscape';\nimport * as expand_collapse from 'cytoscape-expand-collapse';\ncytoscape.registerJquery(jquery);\nexpand_collapse(cytoscape, jquery);\n```\n. see https://github.com/cytoscape/cytoscape.js-cose-bilkent/issues/25, is it correct that cose have the same issue and this won't-fix?\n. I can confirm exactly the same behavior with 2.7.9, it works without any issues with 2.7.7.\n. ",
    "ktong": "@phreed Would you mind to share me your typed-typings? I am using cytoscape in an angular2 based projects. \nThanks\n. ",
    "calebeaires": "Is there some news about cytoscape typing?. @phreed very thanks for it!. ",
    "felixfbecker": "After https://github.com/cytoscape/cytoscape.js/issues/1012#issuecomment-228372289,\nwhy not do PR to this repo and publish them with npm? That would be even better than DefinitelyTyped. The .d.ts file would have to get updated on interface changes. The alternative would be to actually use TypeScript in this library, which would provide a variety of benefits (type safety => less bugs). In that case .d.ts files would get generated automatically.\nThe official distribution channel for community typings is through DefinitelyTyped (which gets published to @types on npm).. @phreed how's it going? Any update?. TypeScript is way more popular than Flow. Just look at questions asked on StackOverflow:\n\n\n\nFlow definitions won't help TypeScript users of course, and TypeScript definitions don't help Flow users. At least in this thread, people asked for TypeScript definitions, not for Flow definitions ;)\n. @maxkfranz you don't need to add TS types to the source. It's possible to add the .d.ts files alongside the .js files, which means the JS will run fine in any browser. . Understood. I think we can live fine with external typings.. The existing tools to convert JSDoc to TypeScript definitions are all oriented to serve as a starting point for writing definitions, not continuously automating their generation. That is because the TypeScript type system is way more expressive to describe JavaScript APIs than JSDoc.. ",
    "Lambik": "Afaik there are no typings yet for version 3.0.0? :(. ",
    "WaynePlummer": "Yes, I deleted my original post once I realised that this must be what was going on... but thanks, @phreed and @maxkfranz both for confirming :). I am not sure what the best forum is for reporting problems with the cytoscape typings themselves?\nI have seen two issues:\n1. The function scratch() and friends should be available on Core\n2. The function jsons() returns POJOs, not JSON strings as its name might suggest, so \"string[]\" is not the right return type (probably should be \"ElementDefinition[]\").\nThanks for finally getting this up on npm :). ",
    "opavader": "@maxkfranz I think for now TS users will be very much happy with simple inclusion of typedef files created by @phreed . typedef files are fairly easy to maintain as they are limited mostly to api only and there are rarely major breaking changes in any libraries api.\nFor development of library, I guess JSDoc comments will be suffice for most contributors.. @phreed I used your typedefs and so far have worked well and I will be happy to continue with the maintenance. \n@maxkfranz There is such a tool tsd-jsdoc, though this too will require lot of additions & cleanup of current jsdoc comments. . @phreed shouldn't it be bundled with this package itself. PRs to DefinitelyTyped often take multiple days to get merged. Updates & versioning will be eased as well.. Shouldn't cytoscape be declared as a class with a constructor, like its done here types/dygraphs/index.d.ts#L924?\n. transitive dependencies are working for other packages. If it helps using dist/cytoscape.js instead of dist/cytoscape.cjs.js solves the issue.. ",
    "wy193777": "@phreed Do you want to push your definition to DefinitelyTyped now? Usually other users need to use it in typescript could take care of it.. I created a pull request after fix lint and other small errors. Push it to DefinitelyTyped could let other users use it and fix problems when they are using it. Ideally this could be maintained by users automatically without cytoscape developer. https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20511. Today the type definition has been merged to DefinitelyTyped, but it has some problems.\nWhen I import the module: import * as cytoscape from \"cytoscape\";, and call cytoscape(), compiler tell me Cannot invoke an expression whose type lacks a call signature. Type 'typeof \"./node_modules/@types/cytoscape/index\"' has no compatible call signatures.. But the compile result is right in this condition. \nWhen I call with cytoscape.cytoscape(), ts compiler doesn't show an error but compile result is cytoscape_1.cytoscape() which is incorrect because the library supposed to be called directly. \ncytoscape type source on DefinitelyTyped: https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d9ca7d7efff765abe162023a9aa47f51f473bfd7/types/cytoscape/index.d.ts\nCan someone familiar with typescript look into it? I've worked on it for the whole day without any solution.  . I just submitted an fix for it: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/20616. This would solve the import problem. @opavader . @WaynePlummer If you like you could submit a pull request on DefinitelyTyped project to fix the problem. . @CZechBoY The type definition is already in DefinitelyTyped.. I think so. Someone has the permission can close it now.. ",
    "CZechBoY": "Any update here? :-). @wy193777 Ok, so we can closed this issue?. ",
    "Richardsonke": "I just found that the property compound-sizing-wrt-labels was added in 2.4.0 and seems to default to \"include\".  Setting this to \"exclude\" seems to fix it so that the parents don't overlap: http://jsbin.com/wuqimo/6/edit?html,js,output\nIs there any chance that the overlap detection of cola could support this new style setting?\n. I've done a little digging around in the code and have a start to something that might work, even if it's not pretty.\nOriginal code:\n``` javascript\n      // add nodes to cola\n      adaptor.nodes( nonparentNodes.map(function( node, i ){\n        var padding = getOptVal( options.nodeSpacing, node );\n        var pos = node.position();\n    var struct = node._private.scratch.cola = {\n      x: options.randomize ? Math.round( Math.random() * bb.w ) : pos.x,\n      y: options.randomize ? Math.round( Math.random() * bb.h ) : pos.y,\n      width: node.outerWidth() + 2*padding,\n      height: node.outerHeight() + 2*padding,\n      index: i\n    };\n\n    return struct;\n  }) );\n\n```\nUpdated code:\n``` javascript\n      // add nodes to cola\n      adaptor.nodes( nonparentNodes.map(function( node, i ){\n        var padding = getOptVal( options.nodeSpacing, node );\n        var pos = node.position();\n    var nodeStyle = node._private.style;\n    var labelWidth = node._private.rstyle.labelWidth || 0;\n    if (labelWidth > 0 && nodeStyle['text-halign'] !== 'center')\n    {\n        labelWidth = labelWidth + node.outerWidth();\n    }\n\n    var widthIncludingLabel = Math.max(labelWidth, node.outerWidth());\n\n    var labelHeight = node._private.rstyle.labelHeight || 0;\n    if (labelHeight > 0 && nodeStyle['text-valign'] !== 'center')\n    {\n        labelHeight = labelHeight + node.outerHeight();\n    }\n\n    var heightIncludingLabel = Math.max(labelHeight, node.outerHeight());\n\n    var struct = node._private.scratch.cola = {\n      x: options.randomize ? Math.round(Math.random() * bb.w) : pos.x,\n      y: options.randomize ? Math.round(Math.random() * bb.h) : pos.y,\n      width: widthIncludingLabel + 2 * padding,\n      height: heightIncludingLabel + 2 * padding,\n      index: i\n    };\n\n    return struct;\n  }) );\n\n```\nI'm sure that there are a lot of edge cases this would not handle, this is just a proof of concept.  It's likely that the code that is already written for calculating bounding boxes could be used here (but it was not working when I was simply calling the bounding box function, because it would not return a valid value at this point of the code).  It may also make sense to make including the label in the overlap checking an option that can be defined on the layout for cola.\n. Thank you very much for the quick fix and for the information!  I will definitely look into CoSE.\n. When I use the script from the snapshot, my browser hangs with a constant usage of 25% CPU.  The same thing happened when I tried to use the bounding box function in my own testing yesterday.  I attached a debugger right after var bb = node.boundingBox(); and I get bb = Object {x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity, w: -Infinity\u2026}\n. Thanks!  This seems to be working really well.  The compound nodes are no longer overlapping now.  I really appreciate your help!\nI have another question related to compound nodes, but it's not really related so I'll open another thread.\n. Thanks for the information!  Are there any automatic builds that run on the unstable branch, or do I need to build it myself?  It looks like the /dist folder on the unstable branch is out of date (6 months old).\n. ",
    "kunalganglani": "I am facing the same issue, i want all nodes in the compound node in a straight vertical alignment, is there anyway to achieve this?. I want to use dagre layout along with an option to make the child nodes have vertical alignment and compound nodes a fixed height and width. Is this possible?. ",
    "nandankita": "I tried manually adding the data in JSON as follow:\n{\"elements\": {\n    \"nodes\": [\n      { \"data\": { \"id\": \"a\"} },\n      { \"data\": { \"id\": \"b\" } },\n      { \"data\": { \"id\": \"c\"} },\n      { \"data\": { \"id\": \"d\" } },\n      { \"data\": { \"id\": \"e\" } },\n      { \"data\": { \"id\": \"f\"} }\n    ],\n    \"edges\": [\n      { \"data\": { \"id\": \"ad\", \"source\": \"a\", \"target\": \"d\" } },\n      { \"data\": { \"id\": \"eb\", \"source\": \"e\", \"target\": \"b\" } }\n]\n}\n }\nAnd tried opening it in Cytoscape desktop, but the same thing happens, an error dialogue box without any error message. Does Cytoscape desktop need different parameters? or anything else needs to be included in this JSON?\n. Okay sorry, I misunderstood it.  So I generated a JSON from Cytoscape desktop as follow:\n{\n  \"format_version\" : \"1.0\",\n  \"generated_by\" : \"cytoscape-3.2.1\",\n  \"target_cytoscapejs_version\" : \"~2.1\",\n  \"data\" : {\n    \"shared_name\" : \"My Network\",\n    \"name\" : \"My Network\",\n    \"SUID\" : 104,\n    \"__Annotations\" : [ ],\n    \"selected\" : true\n  },\n  \"elements\" : {\n    \"nodes\" : [ {\n      \"data\" : {\n        \"id\" : \"114\",\n        \"shared_name\" : \"Node1\",\n        \"name\" : \"a\",\n        \"SUID\" : 114,\n        \"selected\" : false\n      },\n      \"position\" : {\n        \"x\" : 0.0,\n        \"y\" : 0.0\n      },\n      \"selected\" : false\n    } ],\n    \"edges\" : [ ]\n  }\n}\nI manually edited it to as follow:\n{\n  \"data\" : {\n    \"name\" : \"My Network\",\n  },\n  \"elements\" : {\n    \"nodes\" : [ {\n      \"data\" : {\n        \"id\" : \"1\",\n        \"name\" : \"a\",\n      },\n    } ],\n    \"edges\" : [ ]\n  }\n}\nBut the edited version doesn't work. I think that a manual version of JSON won't work with Cytoscape desktop, since it needs all those parameters. But on the other hand if I am generating a JSON from Cytoscape.js that should be supported in desktop version as well. Or I would request a feature in Cytoscape.js to have a function which can generate the JSON, exactly as supported by the desktop version.\n. Thank you @keiono & @maxkfranz. This is a great help! This new JSON file works perfectly fine with Cytoscape desktop.\nThanks a lot for responding so quickly on this!\n. I tried with the JSON file generated by cy.json(). If we manually add the data, i.e.\n{\n\"data\": {\"name\": \"My Network\"},\n\"elements\":{}\n}\nwe can open the file in Cytoscape desktop, but only the issue is that it doesn't import the exact layout and colors which is there with cytoscape.js.\nHope the next version will address this issue.\nThanks!\n. Yeah it's good for me. Thank you so much for your help and explanation. \n. ",
    "bramson": "I know it's a few years later, but I tried loading a JSON that was generated by NetworkX and I got the same blank error message shown in the first screenshot.  Is there still no way to get Cytoscape to open my standard JSON file?. ",
    "domoritz": "Thanks. \n. ",
    "ayhun": "I implemented this method directly from the algorithm at the 10th page of Brandes' paper on centrality http://algo.uni-konstanz.de/publications/b-fabc-01.pdf . \n\nI checked the code with the algorithm on this paper several times and verified that the code is 1-1 consistent with the algorithm. I tested this with several graphs and observed that this \"+1\" error only happens very rarely on the node that has the highest centrality. Sorry I couldn't be more helpful since I too couldn't resolve how this special case occurs. I will look further and let you know if I can identify an error in the code but for now I can only advise you to use the normalized version of the algorithm.\n. It's a good decision. +1\n. ",
    "istemi-bahceci": "Unfortunately setting opacity: 1 for nodes is not possible in my situation, when i set haystack-radius: 1, i get following result: \n\nis this normal ? i am curious because when i use 'bezier' i do not experience such situation.\n. Thanks for the answers :) \n. @maxkfranz  Well I also tried the code piece in the ready field in somewhere else after initialization. It seems that problem still occurs\n. @maxkfranz  sorry for late response, yes it is working fine now. Thanks for the quick fix :) :+1: \n. That would be great ! Thanks again :)\n. ",
    "cstancu": "This works well for nodes, although it doesn't seem to be working for parent (compound) nodes. Is that not supported? Is there a known workaround to resize parent nodes based on the bigger of either the collected width of the nodes or the width of the label?\nAs a workaround I did this:\nIn function update(parent) from updateCompoundBounds I added:\n/* Adjust compound node's bounding box width to be at least as wide as its label width. */ \nvar rstyle = parent._private.rstyle;\nvar labelWidth = rstyle.labelWidth;\nbb.w = bb.w > labelWidth ? bb.w : labelWidth;\nThis works fine, the compound node width is bigger than the label width, the only problem is that compound nodes can now overlap. I am probably missing another place where the size of the bounding box must be updated. I am using dagre as a layout.\n. Yes, dagre doesn't take into account the the full bounding box of a compound node, I guess it computes its own based on the nodes belonging to the cluster. Even if I specify a very large value for every cytoscape parent node in cytoscape-dagre.js DagreLayout.prototype.run the layout doesn't change.\nSince right now I only need the min-width to match the label width, as a temporary workaround, I am thinking to add a dummy, invisible node (i.e., fully transparent and with a height close to 0) to every compound node. That would probably make dagre happy.\nSure, I could make a pull request and maybe try to find a proper solution when I have some time.\n. I can confirm that 2.6.9 seems to be having some problems with show/hide. In my case I am trying to hide all children of a compound node using : target.children().hide();, triggered by a button press.\nIn 2.6.9 this results in an unwanted effect. The compound node shrinks and moves slightly to the top-left, as if its children have been hidden. However the children as still there, outside the parent node, but neither the children or the parent can be grabbed/moved. They can be selected, clicked, but not grabbed/moved.\nIn 2.6.7 the same happens with the difference that the children are no visible, but the parent node still cannot be moved.\nWhen I call target.children().show();, in both versions, everything is back to normal.\n. I replicated my problem in this jsbin: http://jsbin.com/zamufajata/1/edit?html,js,output . I created it starting with the 'Compound nodes' demo on http://js.cytoscape.org. You should press the 'Hide a&c' button and then zoom out since the 'b' button moves to the top-left. It also looks like edges connected to the hidden nodes are not hidden as I expected. Pressing 'Show a&c' button restores everything. \nIn this jsbin you can see the same example with 2.6.7: http://jsbin.com/qipujejemi/1/edit?html,js,output. \nI also came across this page http://bumbu.github.io/cytoscape.js/debug/ which in the second example has exactly what I need, hiding child nodes. Is this the 'official' debug page? What version cytoscape.js does it run on?\n. Hi Max, thanks for the quick fix. It does indeed fixes some part of the problem, i.e., the hidden children are indeed hidden now. However, in my specific case, the compound node whose children I hide still cannot be dragged. Please look at this example: http://jsbin.com/vowaxinoti/1/edit?html,css,js,output that uses the latest cytoscape.js which includes your fix. Press 'Hide a&c'.\n. @maxkfranz My use case is to collapse a parent node, i.e., hide its children, while shrinking the parent but keeping it visible, then expand the parent node back again, i.e., make the children visible and restore the parent size. I don't think that removing the elements would work for me. I trigger this currently using a context menu, but I would like to do this on zoom level in the future, i.e., zoom-out collapse, zoom-in expand. I also tried using visibility: hidden and visibility: visible; in this case the compound node seems to maintain its dimension, at least visually, but still cannot be dragged.\n. @maxkfranz Thank for your suggestion, it works! Remove/restore is the behaviour that I was looking for.\n. ",
    "thedmitriyk": "If I'm correctly interpreting what I'm seeing, I'd say that the dagre layout does not seem to take into account the actual size of nodes sized using 'label'.\n. Sorry, I may be in the wrong issue. I didn't mean compound nodes; just simple nodes with a label.\n. ",
    "dabobert": "honestly a hint would be amazing.  I understand that if a person were to define too little space for a compound nodes and its child nodes, it would have to \"bust out\" of the size originally designed\nAnd if this could be included in an upcoming release that would be amazing.\n. ",
    "kompiro": "Thank you!\n. ",
    "tangevin": "I asked the question about this on stackoverflow. It looks like this fixed it when making a node larger, but when making a node smaller again it is almost instant. Playing around with it a little, it looks like the node jumps back to the original size, and then animates to the correct size. I updated my original fiddle with an example.\n. That appears to work as expected. Thanks.\n. ",
    "areel": "\u00adI am returning to this codebase after some months, it was functional at that stage. \nIt is JSPM based.\nI updated the applications dependencies. \nA lot of new versions (cytoscape included) was pulled.\nSo the error I am seeing raised within cytoscape could well be due to external structural changes.\nWhat I am seeing is that $ and \u201cjQuery\u201d are defined on window not \u201cjquery\u201d.\nThe code you referred checks for $ (as far as I can see) which would succeed and return, execution then continues to run the code that I changed which checks on window for jquery and fails so it continues on to look for AMD and CommonJS, and is forced to examine require on the last check which is undefined and generates the error I mentioned.\nRegards\nAidan\nFrom: Max Franz [mailto:notifications@github.com] \nSent: 03 September 2015 23:51\nTo: cytoscape/cytoscape.js\nCc: Aidan Reel\nSubject: Re: [cytoscape.js] When attempting to register JQuery, check for jQuery property on window (#1071)\nThe call before the one you modified checks jQuery on window. The second check is for CommonJS and AMD systems.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/cytoscape/cytoscape.js/pull/1071#issuecomment-137594826 .\n. Not familiar with the details, but after some browsing it does appear that MIT is a better fit for a framework.\nFrom: Max Franz [mailto:notifications@github.com] \nSent: 07 January 2016 19:23\nTo: cytoscape/cytoscape.js cytoscape.js@noreply.github.com\nCc: Aidan Reel aidanreel@gmail.com\nSubject: [cytoscape.js] Relicensing Cytoscape.js to MIT (#1213)\n@yuedong2 https://github.com/yuedong2  @gerardohuck https://github.com/gerardohuck  @onursumer https://github.com/onursumer  @ayhun https://github.com/ayhun  @metincansiper https://github.com/metincansiper  @MissChocoe https://github.com/MissChocoe  @bumbu https://github.com/bumbu  @Trott https://github.com/Trott  @ZaWertun https://github.com/ZaWertun  @chrtannus https://github.com/chrtannus  @greenify https://github.com/greenify  @danielryding https://github.com/danielryding  @guimeira https://github.com/guimeira  @mikedias https://github.com/mikedias  @ktei https://github.com/ktei  @robmosca https://github.com/robmosca  @jfarid27 https://github.com/jfarid27  @Ahsanzia https://github.com/Ahsanzia  @markov00 https://github.com/markov00  @ikavalio https://github.com/ikavalio  @sinansonlu https://github.com/sinansonlu  @skasio https://github.com/skasio  @JoshTGreenwood https://github.com/JoshTGreenwood  @kkirsche https://github.com/kkirsche  @AlexanderPico https://github.com/AlexanderPico  @grighetto https://github.com/grighetto  @vojtechkral https://github.com/vojtechkral  @furkansahin https://github.com/furkansahin  @randallElliott https://github.com/randallElliott  @ikwattro https://github.com/ikwattro  @nopnop https://github.com/nopnop  @quatrano https://github.com/quatrano  @areel https://github.com/areel  @megawebmaster https://github.com/megawebmaster  @shakhal https://github.com/shakhal \nThe Cytoscape Consortium would like to change the license of Cytoscape.js from LGPL3 to MIT. MIT is simpler language than LGPL3; it\u2019s easier to understand. LGPL is more restrictive than MIT, but LGPL suffers from uncertainty and hesitation from developers that MIT does not.\nI don\u2019t think it\u2019s productive to have developers worried about licensing. I think we should make it as easy a choice as possible so developers can just use Cytoscape.js without worry.\nI\u2019d like to thank all our contributors and users for their code and feedback. Cytoscape.js has grown a lot as a result.\nWe plan on switching the license by 25 January, unless our contributors object. We hope that the change helps Cytoscape.js to continue to grow, and we hope that our contributors support this decision.\nIf you\u2019d like to leave your thoughts in this thread regarding licensing, I\u2019d appreciate it.\nThanks!\nLGPL3 license (old license)\nTLDR summary: https://tldrlegal.com/license/gnu-lesser-general-public-license-v3-(lgpl-3)\nGNU LESSER GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\nCopyright (C) 2007 Free Software Foundation, Inc. http://fsf.org/\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\nThis version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n1. Additional Definitions.\nAs used herein, \"this License\" refers to version 3 of the GNU Lesser\n   General Public License, and the \"GNU GPL\" refers to version 3 of the GNU\n   General Public License.\n\"The Library\" refers to a covered work governed by this License,\n   other than an Application or a Combined Work as defined below.\nAn \"Application\" is any work that makes use of an interface provided\n   by the Library, but which is not otherwise based on the Library.\n   Defining a subclass of a class defined by the Library is deemed a mode\n   of using an interface provided by the Library.\nA \"Combined Work\" is a work produced by combining or linking an\n   Application with the Library.  The particular version of the Library\n   with which the Combined Work was made is also called the \"Linked\n   Version\".\nThe \"Minimal Corresponding Source\" for a Combined Work means the\n   Corresponding Source for the Combined Work, excluding any source code\n   for portions of the Combined Work that, considered in isolation, are\n   based on the Application, and not on the Linked Version.\nThe \"Corresponding Application Code\" for a Combined Work means the\n   object code and/or source code for the Application, including any data\n   and utility programs needed for reproducing the Combined Work from the\n   Application, but excluding the System Libraries of the Combined Work.\n2. Exception to Section 3 of the GNU GPL.\nYou may convey a covered work under sections 3 and 4 of this License\n   without being bound by section 3 of the GNU GPL.\n3. Conveying Modified Versions.\nIf you modify a copy of the Library, and, in your modifications, a\n   facility refers to a function or data to be supplied by an Application\n   that uses the facility (other than as an argument passed when the\n   facility is invoked), then you may convey a copy of the modified\n   version:\na) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\nb) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n4. Object Code Incorporating Material from Library Header Files.\nThe object code form of an Application may incorporate material from\n   a header file that is part of the Library.  You may convey such object\n   code under terms of your choice, provided that, if the incorporated\n   material is not limited to numerical parameters, data structure\n   layouts and accessors, or small macros, inline functions and templates\n   (ten or fewer lines in length), you do both of the following:\na) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\nb) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n5. Combined Works.\nYou may convey a Combined Work under terms of your choice that,\n   taken together, effectively do not restrict modification of the\n   portions of the Library contained in the Combined Work and reverse\n   engineering for debugging such modifications, if you also do each of\n   the following:\na) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\nb) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\nc) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\nd) Do one of the following:\n  0) Convey the Minimal Corresponding Source under the terms of this\n  License, and the Corresponding Application Code in a form\n  suitable for, and under terms that permit, the user to\n  recombine or relink the Application with a modified version of\n  the Linked Version to produce a modified Combined Work, in the\n  manner specified by section 6 of the GNU GPL for conveying\n  Corresponding Source.\n\n  1) Use a suitable shared library mechanism for linking with the\n  Library.  A suitable mechanism is one that (a) uses at run time\n  a copy of the Library already present on the user's computer\n  system, and (b) will operate properly with a modified version\n  of the Library that is interface-compatible with the Linked\n  Version.\n\ne) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n6. Combined Libraries.\nYou may place library facilities that are a work based on the\n   Library side by side in a single library together with other library\n   facilities that are not Applications and are not covered by this\n   License, and convey such a combined library under terms of your\n   choice, if you do both of the following:\na) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\nb) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n7. Revised Versions of the GNU Lesser General Public License.\nThe Free Software Foundation may publish revised and/or new versions\n   of the GNU Lesser General Public License from time to time. Such new\n   versions will be similar in spirit to the present version, but may\n   differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the\n   Library as you received it specifies that a certain numbered version\n   of the GNU Lesser General Public License \"or any later version\"\n   applies to it, you have the option of following the terms and\n   conditions either of that published version or of any later version\n   published by the Free Software Foundation. If the Library as you\n   received it does not specify a version number of the GNU Lesser\n   General Public License, you may choose any version of the GNU Lesser\n   General Public License ever published by the Free Software Foundation.\nIf the Library as you received it specifies that a proxy can decide\n   whether future versions of the GNU Lesser General Public License shall\n   apply, that proxy's public statement of acceptance of any version is\n   permanent authorization for you to choose that version for the\n   Library.\nMIT license (new license)\nTLDR summary: https://tldrlegal.com/license/mit-license\n\u2014\nReply to this email directly or view it on GitHub https://github.com/cytoscape/cytoscape.js/issues/1213 .\n. ",
    "SrMouraSilva": "I saw http://stackoverflow.com/a/32406098/1524997\nExists another mode to \"lock the position of a cytoscape.js node within its parent node\" without using\njavascript\ncy.nodes().nonorphans()\n  .on('grab', function(){ this.ungrabify(); })\n  .on('free', function(){ this.grabify(); })\n;\n?\n. ",
    "gopib23": "How to disable only drag event to child node. because i need tab event to the child node and also parent node must be move when drag on child node. please help me how to handle this Situation. events: no disable all events in child node so tab event not working. \n. ",
    "aschilling": "Hi Daniel,\nI am struggeling with the same problem as you. Have you already found a solution to your problem?\n. ",
    "yaqwsx": "No bug here, just my silly mistake. Asynchronously loaded model, which determines the style of the node wasn't loaded when the nodes were pushed into the graph.\n. ",
    "01AutoMonkey": "After some tinkering I found out that this is not really webpack specific but babel-loader specific, if I switch babel-loader with jsx-loader the code works, but I still get some non-braking errors in the webpack output. So not really a solution since jsx-loader is deprecated and one should really use babel-loader, but it will work for the moment.\nSo from this:\njs\nmodule.exports = {\n  entry: './modules/main.js',\n  output: {\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      { test: /\\.js$/, loader: 'babel-loader' },\n      { test: /\\.scss$/, loader: \"style!css!sass?sourceMap\"},\n      { test: /\\.less$/, loader: 'style-loader!css-loader!less-loader' }, // use ! to chain loaders\n      { test: /\\.css$/, loader: 'style-loader!css-loader' },\n      { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } // inline base64 URLs for <=8k images, direct URLs for the rest\n    ]\n  }\n};\nTo this:\njs\nmodule.exports = {\n  entry: './modules/main.js',\n  output: {\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      { test: /\\.js$/, loader: 'jsx-loader?harmony' },\n      { test: /\\.scss$/, loader: \"style!css!sass?sourceMap\"},\n      { test: /\\.less$/, loader: 'style-loader!css-loader!less-loader' }, // use ! to chain loaders\n      { test: /\\.css$/, loader: 'style-loader!css-loader' },\n      { test: /\\.(png|jpg)$/, loader: 'url-loader?limit=8192' } // inline base64 URLs for <=8k images, direct URLs for the rest\n    ]\n  }\n};\nWebpack output:\n``` console\nmonk01@HAL:~/dev/experi/graphs/client$ webpack --watch\nHash: 6048fcff5a82f34d26a1\nVersion: webpack 1.12.2\nTime: 15997ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.81 MB       0  [emitted]  main\n    + 212 hidden modules\nWARNING in ./~/cytoscape/dist/cytoscape.js\nCritical dependencies:\n563:63-70 require function is used in a way in which dependencies cannot be statically extracted\n579:59-66 require function is used in a way in which dependencies cannot be statically extracted\n580:10-17 require function is used in a way in which dependencies cannot be statically extracted\n @ ./~/cytoscape/dist/cytoscape.js 563:63-70 579:59-66 580:10-17\nWARNING in ./~/cytoscape/dist/cytoscape.js\nCritical dependencies:\n565:18-33 the request of a dependency is an expression\n @ ./~/cytoscape/dist/cytoscape.js 565:18-33\nWARNING in ./~/cytoscape/dist/cytoscape.min.js\nCritical dependencies:\n18:1160-1167 require function is used in a way in which dependencies cannot be statically extracted\n18:1296-1303 require function is used in a way in which dependencies cannot be statically extracted\n18:1305-1312 require function is used in a way in which dependencies cannot be statically extracted\n @ ./~/cytoscape/dist/cytoscape.min.js 18:1160-1167 18:1296-1303 18:1305-1312\nWARNING in ./~/cytoscape/dist/cytoscape.min.js\nCritical dependencies:\n18:1174-1184 the request of a dependency is an expression\n @ ./~/cytoscape/dist/cytoscape.min.js 18:1174-1184\n```\n. ",
    "mj3cheun": "@maxkfranz Did you remove the Thread method from the cytoscape.js object? I am getting cytoscape.Thread returning a function in 2.x but returning undefined in 3.x.. Ok thanks. For the record, I am using the following hacked together bash script to do the renaming. This script automates all tasks stated above.\nnewName=cose-bilkent-layout-compound\noldName=${PWD##*/}\noldFolder=$PWD\nnewFolder=$oldFolder/../$newName\nmkdir $newFolder\nmv $oldFolder/* $newFolder\ncd ../$newName\nnewFolder=$PWD\ncd ..\nrm -rf $oldFolder\nln -s $newFolder $oldFolder\ncd ../img/demos\nmv $PWD/$oldName.png $PWD/$newName.png\ncd ../..\nperl -pi -e \"s/\"$oldName\"/\"$newName\"/g\" docmaker.json\ncd $newFolder/..\ngit add ../.. Merged in pull request https://github.com/cytoscape/cytoscape.js/pull/1704. Closing.. Merged in pull request https://github.com/cytoscape/cytoscape.js/pull/1705. Closing.. Pull request made: https://github.com/cytoscape/cytoscape.js/pull/1699.. Merged in pull request https://github.com/cytoscape/cytoscape.js/pull/1701. Closing.. Ok sorry thought that this change would be minor enough it can go under bugfix under your versioning scheme.. Ok changes made. I have been doing to more testing and I found that fetch doesn't work on Chrome and Chrome derivative browsers when opening the index.html file manually as url scheme \"file\" is not supported. It works fine when opening the file through a static file server as \"http\" is being used. It also works fine in firefox. Do you see this as a problem?. Ok made changes and also included promise polyfill just in case.. I couldn't find any compound graph smaller in in Dylan's graph list or in Pathway Commons so I just started deleting nodes from the existing graph. The graph probably doesn't make sense biologically anymore but its smaller. Also added ES6 polyfills just in case.. As far as I can tell, they use a different data format. I guess I could figure out how to reconstruct that dataset though.. Ok have made all requested changes and added the padding-relative-to feature. What do you think?. Ok done. Do you want me to use a copy of cytoscape.js from the 3.x branch or will the unstable branch do?. @maxkfranz I have updated arbor and cola, you may want to have a look to see if I am doing it correctly. If I am, I will continue to update the rest of the dependencies.. @maxkfranz Also found that for 3.x after calling the layout function, you need to add a .run() in order to make the layout function actually work. In 2.x, this appears to be done for you so .run() is not required. Is this intentional? See https://github.com/cytoscape/cytoscape.js-automove/commit/b7972e0db1c5fff6d13426edb485fca27a4205bc for example. This is a breaking change and applies to all the built-in layouts (eg. circle etc.).\nOtherwise I am done with all the extensions, which are all backwards compatible.. @maxkfranz Made PR.. @maxkfranz Do you want this to go under cy.style() in the documentation or under Style where all the style properties are.. @maxkfranz Ok I am done making my fixes. Note that the tests fail because getting one numeric value for a property with potentially multiple values does not make any sense. Those tests may have to be modified.. Made PR https://github.com/cytoscape/cytoscape.js/pull/1792.. Note: Ensure external layouts are also updated to use the new function. @maxkfranz Changes made. Also, add an example.. Good to hear!. @maxkfranz @d2fong PR rewrite done. Dylan, you want to test it to make sure it still works for you? Thanks.. Ok. I would prefer the idea of having padding-relative-to: width | height | min | max | average though. I tried to follow the spec here (https://www.w3.org/TR/CSS2/box.html#padding-properties) so that padding behaves like people are used to, which means everything is calculated relative to width. I think if it behaves any other way, it wouldn't really be padding. We can maybe make padding an alias for padding-relative-to: width for backwards compatibility.. Ok sure I will work something out. When a percentage value is parsed, the % sign is removed and the resulting number is divided by 100. This parsed value is retrieved by ele.pstyle( 'padding' ). Technically if you put in 1000%, it will still work though, you will just get a padding larger than the width or whatever, so maybe I should remove that comment.. Sorry I misunderstood your earlier change request. I have made changes so that it uses autoPadding if it is parent. Autopadding then only returns the pvalue if it is in pixel units, so a check might not be necessary.. Ok, so at the moment, if the index is not found, it defaults to the default settings in getDefaultProperty. So it is ok to default to index 0 instead?. I forgot the node.padding() function existed. However, that function doesn't exactly solve the problem. Here is the definition of the padding function above:\n```\nelesfn.padding = function(){\n  var ele = this[0];\n  var _p = ele._private;\n  if( ele.isParent() ){\n    ele.updateCompoundBounds();\nif( _p.autoPadding !== undefined ){\n  return _p.autoPadding;\n} else {\n  return ele.pstyle('padding').pfValue;\n}\n\n} else {\n    return ele.pstyle('padding').pfValue;\n  }\n}\n``\nAs you can see, it does not make special allowances for percentage padding values. However, what I can do is update the padding function to usecomputePaddingValues(nodeW, nodeH, node.pstyle( 'padding' ), node.pstyle( 'padding-relative-to' ).value )which should solve issue, and then go ahead and use.padding()for everything.. PS: _p.autoPadding only works for parent nodes. Images can be placed on child nodes.. Ok I see so percentage is only for use on parent nodes so autopadding is fine. Will update commit thanks!. @maxkfranz In testing I have not noticed any weirdness with normal nodes. I have no idea how it is set up but!math.boundingBoxInBoundingBox( nodeBb, boxBb )is true ifboxBbinsidenodeBb. IfnodeBb` is essentially a point value, this condition is virtually impossible to meet.. ",
    "philippe46": "This call (setting timeout) is used frequently during some time after \nswitching to the tab that was inactive for some time in Google Chrome \n(which is strange). Chrome limits timeouts to 1 sec when page is \ninactive. When you switch page back after some time: zooming, panning \nbecomes laggy for 6-10 secs. I've tried to make timeout zero and \nrendering become better, but few lags remain after page switch. I guess it's a Google Chrome issue, because Firefox make it better after changing timeout to zero.\nWill add video later.\nOn 28.09.2015 16:43, Max Franz wrote:\n\nThat call is made only if (1) you system is not capable of keeping up \nwith 60fps for the given graph or (2) a request to render has been \nmade that would result in greater than 60fps (i.e. unnecessary frames).\nI can not reproduce the behaviour you describe. Switching back to a \npreviously inactive tab allows for resuming of drawing as normal. Note \nthat inactive tabs themselves will not update -- this is expected \nbehaviour in a browser. Please post an example that clearly reproduces \nthe behaviour you describe.\nYou may also want to try unstable/2.5, as it uses a slightly different \nrendering mechanism.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/cytoscape/cytoscape.js/issues/1105#issuecomment-143747188.\n. It's not your problem, @maxkfranz\nProblem belongs to my update code that's fire on timer. Browser throttles down timers that causes probem. Switching my code to WebWorker. Sorry for distrurbing.\n. \n",
    "igorcc": "Hi Max,\nThat\u2019s pretty easy:\n$(function () { // on dom ready\n```\ncy = cytoscape({\n    container: document.getElementById('cy'),\n    elements: $.getJSON('/elements/'),\n    style: $.getJSON('/style/'),\n    headless: false,\n    renderer: {\n        name: \"canvas\"\n    }\n    // ,layout: {name: \"random\"}\n});\ncy.layout({name: 'random'});  // I call this according to the documentation\n```\n});\nbrings an exception to the console:  Uncaught TypeError: Cannot read property 'recalculateRenderedStyle' of null\nIt doesn\u2019t matter if layout is defined in the constructor or not.\nThank you!\n\nKindest regards,\nIgor Koshkarov\nkoshkarovigor@gmail.com\nOn 13 \u043e\u043a\u0442. 2015 \u0433., at 16:57, Max Franz notifications@github.com wrote:\n\nThanks for your feedback.\nRef : https://github.com/cytoscape/cytoscape.js/blob/v2.4.8/dist/cytoscape.js#L13076\nA renderer is always defined, or you can't init. If you specify the null renderer, nothing is done in recalculateRenderedStyle(): https://github.com/cytoscape/cytoscape.js/blob/v2.4.8/dist/cytoscape.js#L26364\nHow would this change alter the lib's behaviour at all? Could you explain your usecase?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thank you, Max\n\nI\u2019ll look into the documentation again.\nSorry for pestering you.\n\nKindest regards,\nIgor Koshkarov\nkoshkarovigor@gmail.com\nOn 14 \u043e\u043a\u0442. 2015 \u0433., at 21:26, Max Franz notifications@github.com wrote:\n\n(1) The renderer normally initialises after the data has loaded. I've changed the 2.5/unstable branch to init the renderer right away, but this isn't really your problem.\n(2) Even with the change in (1), it doesn't really fix your problem. The problem is: You have decided to load your data asynchronously and then try to manipulate is synchronously (before it's loaded). Either init after your data has loaded or use ready. Please refer to ready : http://js.cytoscape.org/#core/initialisation\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "mmillman": "Great, thank you!\nAlso, just a small thing, I noticed you left out the \"var j = 0\", so I just wanted to note that without it, there may be accidental assignment to the global object in future refactoring, since there's a for-loop in that function that does not redeclare j, and just does \"for (j...)\". It currently does not assign to the global object because of other for-loops declaring j with \"for (var j...)\" and hoisting, but if all the for-loops were converted to the non-redeclaring style, that may cause trouble down the road. Since the (re)declaration style is inconsistent, that predeclaration can act like a \"style safeguard\".\n. And regarding the tests, they are failing locally as well.\n. Ah, whoops, tests were failing because I missed the quotes around the 'name' values in the exprs object in my commit. Looks like you didn't copy over that error, which explains the earlier Travis test failure and current test pass.\n. ",
    "tambeta": "I am unclear on the concept of \"selectification\". The documentation on eles.unselectify()  states\n\nMake the selection states of the elements immutable.\n\nObviously I would like the selection state of my nodes to be mutable, as otherwise I wouldn't be able to mark them as selected? Wouldn't it make more sense to allow prevention of an event's propagation / default effect?\n. I see, your example clarifies how you meant using [un]selectify() to this end. Thanks a lot; closing the issue.\n. I'm reopening the issue for some more feedback.\nI'm now trying to use box selection in conjunction with the custom selection behavior as explained above. What is the \"cytoscape.js way\" to do this? When I enable box selection, it obviously doesn't work, as node selection state has been set to immutable, as you recommended above. But I don't notice any box selection events for capture. If there were events like boxSelectionBegin and boxSelectionEnd, this would not pose a problem.\n. > Adding new events like those sound like a good idea, though keep in mind that only unselected elements would have select triggered afterwards.\nOK. My idea is along the lines that a separate boxselect (or such) event would be fired for all nodes in the box, allowing the library user to implement any selection behavior. I.e. the box selection event would be similar to any other user input (click, tap, etc.).\n. ",
    "chriscr": "Thank you.\nI am using safari 5.1.7.\nI am afraid to upgrade to cytoscape 2.5.0.\nI am using several layout extensions and basically use the following\n\"template\", but it seems as though this extension is no longer used in\n2.5.0.\nCan you direct me to the latest layout extension template.\nChris\n// this class is adding a new layout using Cytoscape extension API\n;\n(function($$) {\n    'use strict';\n```\n// default layout options\nvar defaults = {\n    ready : function() {\n    }, // on layoutready\n    stop : function() {\n    } // on layoutstop\n};\n// constructor\n// options : object containing layout options\nfunction ThreeColumnLayout(options) {\n    this.options = $$.util.extend(true, {}, defaults, options);\n}\n// runs the layout\nThreeColumnLayout.prototype.run = function() {\nvar options = this.options;\nvar eles = options.eles; // elements to consider in the layout\nvar layout = this;\n\n// cy is automatically populated for us in the constructor\nvar cy = options.cy; // jshint ignore:line\n\nlayout.trigger('layoutstart');\n\n\n//code for calculating 3 column layout positions for nodes\n\n\n// trigger layoutready when each node has had its position set at\n\n```\nleast\n        // once\n        layout.one('layoutready', options.ready);\n        layout.trigger('layoutready');\n```\n    if (options.fit) {\n        cy.fit(options.padding);\n        cy.center();\n    }\n// trigger layoutstop when the layout stops (e.g. finishes)\nlayout.one('layoutstop', options.stop);\nlayout.trigger('layoutstop');\n\nreturn this; // chaining\n\n};\n// called on continuous layouts to stop them before they finish\n//ThreeColumnLayout.prototype.stop = function(){ return this; //\n```\nchaining };\n    ThreeColumnLayout.prototype.stop = function() {\n        var options = this.options;\n        var cy = options.cy;\n        cy.one('layoutstop', options.stop);\n        cy.trigger('layoutstop');\n    };\n// register the layout\n$$('layout', 'trhree-column-layout', ThreeColumnLayout);\n})(cytoscape);\nOn Mon, Nov 2, 2015 at 11:49 AM, Max Franz notifications@github.com wrote:\n\n(1) You're using an old version of Safari. You're not using Safari on\nWindows that Apple abandoned long ago, right? setLineDash() is supported\nin any modern version of Safari.\n(2) You're using an old version of the library. Newer versions have had a\ncheck for this for a long time:\nhttps://github.com/cytoscape/cytoscape.js/blob/v2.5.0/src/extensions/renderer/canvas/drawing-edges.js#L95\n2.3.3 is not even the latest version in the 2.3 line (2.3.16).\nAddress (1) or (2). If you don't want to upgrade the lib, you'll have to\nfork an old version from its tag and patch yourself.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1148#issuecomment-153137946\n.\n. When I popped in cytoscape.js and cytoscape.min.js for version 2.5.0 it did\nnot like the $$.util in firefox now.\n\nfunction TruthSift3ColumnLayout(options) {\n    this.options = $$.util.extend(true, {}, defaults, options);\n}\nI get the error\nTypeError: $$.util is undefined three-column-layout.js:22:3\nTypeError: $$.is is undefined\nOn Mon, Nov 2, 2015 at 12:04 PM, Max Franz notifications@github.com wrote:\n\nOld extensions should still work as long as they're not referencing\nprivate data.\nThis is the extension generator:\nhttps://github.com/cytoscape/slush-cytoscape-extension\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1148#issuecomment-153141534\n.\n. I cant get to that url.\n\nI want to control my own IDs before the node gets added to the core, which is I guess is at this point\nvar oNewNode = cygraph.add( nodeConfigurationData ).eq(0);\nSo I guess I need to set the ID in my nodeConfigurationData first.\nRight now my ID is empty and the core creates an ID for me.\nWhat does eq(0) do ?\nLooking at\nhttp://cytoscape.github.io/cytoscape.js/#ele.json\nthis means I can get the json of the object and update the ID if I want.\nIs this the only API documentation\nhttp://cytoscape.github.io/cytoscape.js\n. ",
    "yurynix": "The error shown in console when using cytoscape (2.5.0) with spread layout is:\nUncaught SyntaxError: Unexpected token var \n...and some blob url with random GUID.\n. Tnx! =)\n. ",
    "benjaminaaron": "Ok thanks Max. Too bad, but understandable. \n. ",
    "vivekvs1": "Hi - is it possible now?. ",
    "gopeter": "Thank you very much! I'm going to try it tomorrow :)\n. Works like a charm, thank you very much! :-)\n. ",
    "klysak": "Hi, maxkfranz! How to determine the selected nodes? Inside callback function i try to find selected nodes by cy.$(\"node:selected\") but i get zero-length collection Collection\u00a0{length: 0, _private: {\u2026}}. . @jspautsch thank you! It works fine for me!. ",
    "dovs": "Hi,\nI support Andreew4x4's request.\nLike with other features which may affect performance a mention for this under the Optimizations  section could be added, while still allowing those who could benefit from this feature to use it in situations where it can provide added value and does not necessarily cause a noticeable slowdown in performance.\n. ",
    "CanntAim": "Crap... must have scrolled passed that property setter multiple times... Anyways, thanks for the response and awesome library!\n. ",
    "danielpes": "Just to inform, the problem also occurs when the curve-style is set to segments, with the edge data mapped to the segment-distances and segment-weights properties.\nAdditionally, I tried setting the data to strings instead of arrays ( edge.data('cpDistances', '1 2 3') ) and then I tried using functions instead of data mapping, but I was not able to work around the problem.\n. Now it works fine. Thanks a lot!\n. Hi Max, thank you for your response. \nWe noticed the doubling of CPU usage during interactions, however, the main problem for us is that the usage is not lowering enough after we stop all interactions. In the case shown here, the CPU usage level did not get below 25%, and in our project it keeps above 80%. Only if we pause script execution using F8 in Chrome Developer Tools the CPU usage goes back to normal.\n. Hi,\nWe managed to solve the problem in our project by using startBatch() and endBatch() around some loops that update all elements data. We noticed that these loops were being called frequently and causing too many redraws. Now the CPU usage behavior in our project is similar to the \"Performance Tuning\" example and we considerer it good for our use.\nThanks for the support and sorry for any inconvenience.\n. That's great, thank you!\n. ",
    "d2fong": "Bottom implemented in pr.  cose-bilkent in progress - https://github.com/cytoscape/cytoscape.js-cose-bilkent/pull/53. @metincansiper \nNote\nFirst note that I should have made clear in the original post:\nThis is a translation of my notes from talking with Max about how to implement custom arrow \nshapes.  They represent a skeleton implementation and they are not fully fleshed out. \nConfig Values\nThe config values refer to how the arrow part is drawn in each phase.\nConfig values will be defined in the triangle-tee implementation.\nPhase Map\nI am not exactly sure which phase will draw which part of the arrow yet.  I really only have the concept of associating a part of the arrow with a specific phase.  \nMy guess is that the normal arrow shape will be drawn in one phase, and then the line parallel to the base of the arrow head would be drawn in a separate phase.\nPrototype Code\nHere are some of the ideas that me and Max talked about:\nConfig value definition idea:\nsrc/extensions/renderer/base/arrow-shapes.js\n```js\n  defineArrowShape( 'triangle-tee', {\n    points: [\n      -0.15, -0.3,\n      0, 0,\n      0.15, -0.3,\n      -0.15, -0.3\n    ],\npointsTee: [\n ....        // user specifies the points here \n],\n\nmultiphased: true,\n\nmatchEdgeWidth: [true, false],\n\nforceStroke: true,\n\n ...\n ...\n\n} );\n```\nExample: src/extensions/renderer/canvas/drawing-edges.js\n\nadd a phase parameter, and then conditionally render portions of the arrow based on the phase\n\n```js\nCRp.drawArrowShape = function( edge, arrowType, context, fill, edgeWidth, shape, x, y, angle, phase, forceStroke ){\n  // truncated implementation\n  if( phase === 0 ){\n        // render first part of arrow\n  }\nif ( phase === 1 ){ \n      // render second part of the arrow\n   }\n};\n```\n\nusing the values in the config, render the part to be drawn in the specific phase differently:\n\n```js\nCRp.drawArrowShape = function( edge, arrowType, context, fill, edgeWidth, shape, x, y, angle, phase, forceStroke ){\n// truncated implementation\n  if( fill === 'hollow' || fill === 'both' ){            // render edge width based on config value\n    context.lineWidth = ( shapeImpl.matchEdgeWidth || shapeImpl.matchEdgeWidth[phase] ? edgeWidth : 1 );   \n    context.lineJoin = 'miter';\nif( usePaths || forceStroke ){                    // forceStroke config value example (not necessarily where it is exactly used)\n  context.stroke( path );\n} else {\n  context.stroke();\n}\n\n}\n```\n. We want to split up drawing the arrow parts so that each part can have more control over how each part is rendered.  . Okay I can do that.  Do I use the same workflow (work on my fork then pull request) ?. Okay, I have updated the docs, should I close this issue?\n(I have just added triangle-cross to the list of documented arrow shapes.  Is that suffcient?). @maxkfranz  I have made the changes that you have suggested. \nList of Changes:\n- Reverted the self -> this change\n- Renamed the incorrect arrowWidth name to edgeWidth \n- Renamed variables with prefix 'tee' to the prefix 'crossLine' in the triangle-cross implementation\nThis new arrow head scales both with edge width and arrow scale.  EdgeWidth scales the edge width, arrow scale scales the arrow head (and the cross line). \nWhen both values are large, it makes it look a bit wonky i.e the arrows are large, but I believe it is working. \nHere is a pic w/ arrow-scale: 7, width: 6\n\n. It works when I specify padding as a percent now. Okay I'll get back to you after I test it.. \nHere is a pic of the three shapes. Left:  bottomroundrectangle Middle: concavehexagon Right: tag. This is a continuation of the work to port some of the polygon shapes from the sbgn lib to cy.js.\nconcavehexagon and tag use the generatePolygon function.  bottomroundrectangle uses a similar approach for checkpoint and line intersection like the roundrectangle shape.. Okay, we can review in person on Wednesday.. Okay I will look into it. @metincansiper it should be fixed now can you confirm it and see that it works?. Okay I can cherry-pick it. I think the behaviour has always been like this for every iteration of the barrel shape.  I can try to fix it but am currently unsure of how.. I tried fixed constants but I couldn't get it to work but I think I see that you fixed it here: http://www.cs.bilkent.edu.tr/~ivis/ChiSE_daily/#\nIf you have a working fix please submit a pull request I can review it.\nThanks,\nDylan. Okay thanks I'll port it over.. Okay thanks for reporting this, I will look into it.. ### Initial steps to fix (For those who care)\n\n\nRead triangle arrow cross scaling code\nhttps://github.com/cytoscape/cytoscape.js/blob/unstable/src/extensions/renderer/base/arrow-shapes.js#L211\nhttps://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/renderer/base/arrow-shapes.js#L217\nhttps://github.com/cytoscape/cytoscape.js/blob/master/src/extensions/renderer/base/arrow-shapes.js#L221\n\n\nAlter the scaling function so that it scales properly for values < 1\n\n\nWhy this bug exists\nI didn't realize that the arrow scale property could be < 1\n. Do you mean check if arrow-scale < 1 and if it is just return some constant distance value?. Yeah that makes sense to always keep a constant distance between the arrow head and the crossline.  . Ok. ## New Implementation Notes\n\nbase the implementation off triangle tee\nmake crossline points an array of four points instead of two to form a rectangle\nget rid of forceStroke, match edgewidth\ncalculate bottom two rectangle points such that the distance between the top and bottom rectangle points equals edgewidth. Hi Max, yes we should. It won't be ready for a 3.2.2 release.\n\nThanks,\nDylan\nOn Wed, Aug 30, 2017 at 9:03 PM, Max Franz notifications@github.com wrote:\n\n@d2fong https://github.com/d2fong Should we defer this to 3.2.3? I need\nto release 3.2.2 this week.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1921#issuecomment-326160043,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACOG4ypMf9rcDYV6IPUTvq2YVBA2UoX0ks5sdgZrgaJpZM4O0kq8\n.\n. @maxkfranz I can work on this feature.  I was able to implement mount for the basic case.  I tested it with the pathways search app and I could pass cy instances as props to child components without errors.. Thanks.  Good to know it is working well.. Related to https://github.com/cytoscape/cytoscape.js/issues/1921. WIP -- not fully tested.  Changed coreInit to not destroy existing elements, etc. Load external data only on Core constructor call, not on calls to coreInit.. Okay, ill just copy over what is needed by mount(). I now use two t values for better curve approximation.. These two functions could be changed to just one with the costant as a parameter, but I thought it would be more clear that both the x and y coordinates of the cross can be scaled independently. . I found that I could make the scaling functions more accurate if I used the edgeWidth parameter to calculate the scale values.  \n\nNot sure if adding this parameter is appropriate though.  What do you think?. I don't think self is needed in this case?. Removes old code like you said.. Uses arrowWidth, arrowShape variables instead of getting the value again.. This is where I send the edgeWidth to the 'triangle-cross' draw function.  Again, thoughts on this?. base function to scale a coordinate. renamed variable to edgewidth. Yes I think it would be nice to have these options supported.  I can think of cases where I can use all of these options.. I think bullet form would be easier to read as opposed to a sequence of if statements.\ne.g\n\nwhAverage:  padding will be the average of the node height and width\nwhMin:  ....\n\nIt will be easier for people to understand what these properties actually do.. If you assume the number is from 0 to 1, where do you convert a users value from '50%' to 0.5? Does pfValue do it automatically?. Ok.  Maybe the comment is fine,  I just didn't understand how the pfValue worked in this case.. Not sure if I should be creating a new Collection every time coreInit (i.e mount) is called, or if this should only be called once during the Core constructor.. @maxkfranz \nWhen I call mount(), do I need to:\n call the ready functions associated with the container?\n call cy.startAnimationLoop()?. Not sure if mount() needs to mutate the option values to keep the options and private fields in sync.. Alright I will remove the unnecessary operations.. I am not sure.  If you specify everything new from scratch then your options should override everything right?  If someone wants to only specify a few new options this approach would also support that I think.\n. pixelRatio had a undefined default value from before these changes.  Not sure if there is a more appropriate default value.. So get rid of options.renderer in the extend call?. Does it make sense to ignore previous renderer options for both cases (when rendererOptions is supplied and when  it is not? ). Do you think unmount should create a null renderer?  That is what currently happens if you set headless: true in the core initialization.  Right now unmount() makes cy._private.renderer null.\nIf we create a null renderer on unmount, it means we would be calling initRenderer twice in mount() but it would make unmount() consistent with setting headless to true.  \nWe could also change the core headless() function to read cy._private.renderer.options.name instead of reading cy._private.options.renderer.name so that headless() returns true once unmount() is called.. ",
    "arthurchipdean": "1) I tried setting the pie opacity, again it has no effect. See this fiddle: https://jsfiddle.net/nmyLa8xL/1/\n2) Yes, thank you. I'm well aware that I should use a stylesheet. I'm trying to get this to work first. Thanks a lot....\n. Are you saying that this will not work unless I use a stylesheet?\n. This is definitely not working properly:\nThis one works: https://jsfiddle.net/nmyLa8xL/3/\nWhy doesn't this work? https://jsfiddle.net/nmyLa8xL/2/\nIt seems to only work if you set the pie-style initially, which I cannot do because I'm loading data dynamically. Must I open a new issue?\n. @maxkfranz please see my previous comment......\n. Hi Max,\nThank you for the explanation, but I feel like you are missing my point. I'm not looking for code style tips. The examples I provided were to demonstrate that a feature is not working properly, code style is irrelevant unless it is the reason the feature is not working properly which it is not.\nWhat I'm saying is that pie style will only work if you set pie style at the same time you are initializing cytoscape. If you try to set pie style afterwards it has no effect, regardless of if you set opacity. The workaround I am using right now is to just set it on a non-existent node when initializing cytoscape.\nI hope these two fiddles demonstrate what I'm talking about, setting pie style using a style function works in the first but not in the second:\nhttps://jsfiddle.net/nmyLa8xL/3/\nhttps://jsfiddle.net/nmyLa8xL/2/\nThanks @maxkfranz \n. @maxkfranz Why does the second example work without passing randomize if you call cy.layout({name:'cose'}); inside cy.ready()? I'm also not passing the randomize parameter but that one works for some reason.\n. Ahhh that makes sense. Thanks for your help! :+1: \n. ",
    "yzohar": "This is happening in 2.5.3 as well as older versions\n. Thanks for checking it out.\nI used the supported type RoundRectangle, but I forked and added a style parameter for the radius of the corners. Now I see that for some reason it causes the problem, I'll check it further.\nThanks\n. ",
    "sathishpaul": "This is a very useful API, please consider implementing it.. ",
    "dwjohnston": "The problem is the label will move around on style change (eg mouse over or\nselection) which is distracting. There should be some way of fixing the\nlabels in place.\nOn Tue, Jan 12, 2016 at 6:59 AM, Max Franz notifications@github.com wrote:\n\nClosed #1211 https://github.com/cytoscape/cytoscape.js/issues/1211.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1211#event-511415099.\n. @maxkfranz - Hi Max - the performance issue is specifically on dragging the nodes. \n\nThough to be honest, I've tried to reproduce it, and I'm not sure there's a consistant performance difference. \nTry: \n    <!DOCTYPE html>\n    \n\n```\n    \n\n\n\n<div id = \"foo\" style = \"width: 1500px; height: 750px; background-color: light-grey\"></div>\n\n\n\nvar cy = cytoscape({\n    container: document.getElementById('foo'),  \n    style: [\n                {\n                    selector: '.round', \n                    css:    {\n                        shape: 'ellipse', \n                        width: 20, \n                        height: 20\n                    }\n                    },\n\n                {\n                    selector: '.square',\n                    css: {\n                        shape: 'rectangle', \n                        width: 20, \n                        height: 20\n                    }\n\n                }\n            ],\n      elements: {\n        nodes: [\n                { data: { id: 'a'}, position: { x: 215, y: 85 } },          \n                { data: { id: 'c'}, position: { x: 300, y: 85 } },\n                { data: { id: 'd'}, position: { x: 215, y: 175 } },         \n                { data: { id: 'f'}, position: { x: 300, y: 175 } }\n                ],\n\n                edges: [\n                        { data: { id: 'ac', source: 'a', target: 'c' } },\n                        { data: { id: 'df', source: 'd', target: 'f' } }\n                        ]\n      },\n\n        layout: {\n            name: 'preset'\n        }\n    });\n\n    function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    for (var i = 0; i<500; i++){\n        cy.add({\n            group: 'nodes', \n            position: {\n                x: getRandomInt(0, 1500),\n                y: getRandomInt(0, 750)\n            },\n\n            classes: (i%2==0) ? 'round' : 'square'\n            //classes: 'square'\n        }\n        );\n    }\n\n\n\n\n```\n. > Node shape paths are cached \n@maxkfranz do you have any more info about this? - I'm really looking for some ways to improve performance for interactive styling (highlighting node on mouseover etc). \n. For example, the following mouseover seems a bit slow: \n```\n<!DOCTYPE html>\n\n\n<script src = \"jquery.js\"       type =\"text/javascript\"></script>\n<script src = \"cytoscape.js\"    type =\"text/javascript\"></script>\n\n\n\n<div id = \"foo\" style = \"width: 1500px; height: 750px; background-color: light-grey\"></div>\n\n\n\nvar cy = cytoscape({\n    container: document.getElementById('foo'),  \n    style: [\n                {\n                    selector: '.round', \n                    css:    {\n                        shape: 'ellipse', \n                        width: 20, \n                        height: 20\n                    }\n                },\n\n                {\n                    selector: '.square',\n                    css: {\n                        shape: 'rectangle', \n                        width: 20, \n                        height: 20\n                    }\n\n                },\n\n                {\n                    selector: '.mouseover',\n                    css: {\n                        'background-color': 'red'\n                    }\n\n                }\n\n\n\n            ],\n      elements: {\n        nodes: [\n                { data: { id: 'a'}, position: { x: 215, y: 85 } },          \n                { data: { id: 'c'}, position: { x: 300, y: 85 } },\n                { data: { id: 'd'}, position: { x: 215, y: 175 } },         \n                { data: { id: 'f'}, position: { x: 300, y: 175 } }\n                ],\n\n                edges: [\n                        { data: { id: 'ac', source: 'a', target: 'c' } },\n                        { data: { id: 'df', source: 'd', target: 'f' } }\n                        ]\n      },\n\n        layout: {\n            name: 'preset'\n        }\n    });\n\n    cy.on('mouseover', 'node', function(event){\n        event.cyTarget.toggleClass('mouseover', true); \n    }); \n\n    cy.on('mouseout', 'node', function(event){\n        event.cyTarget.toggleClass('mouseover', false); \n    }); \n\n    function getRandomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    for (var i = 0; i<500; i++){\n        cy.add({\n            group: 'nodes', \n            position: {\n                x: getRandomInt(0, 1500),\n                y: getRandomInt(0, 750)\n            },\n\n            classes: (i%2==0) ? 'round' : 'square'\n            //classes: 'square'\n        }\n        );\n    }\n\n\n\n\n``\n. @maxfranz Hi Max - Probably not to be honest: \n- I have to work out how the code is structured on Github. The modification I've made are on the single compiled 2.5.0 JS file. \n- I don't have access to tools likegulpnpmornode` here. (FML). \n- My current solution is a hard coded label to make the specific change I need to make. \nThat said - I'll see what I can do. \n. Apologies for the lack of code indentation. I'm stuck working with Firefox 11 here. \n. Hmmm now that i've revisted this, I'm unable to reproduce it reliably. :-/ \n. Definitely still an issue. \n. The issue isn't just the selection box, it's all mouse clicks. \n. ",
    "kkirsche": "Go for it\n. @srinikom wouldn't they have agreed by default per this issue as it said the deadline for objection was January 25th. To me, this means they agreed by not responding. \n. ",
    "gerardohuck": "Good idea!\nOn Thu, Jan 7, 2016 at 4:30 PM, Kevin Kirsche notifications@github.com\nwrote:\n\nGo for it\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1213#issuecomment-169782130\n.\n. \n",
    "shakhal": "fully support, \n+1\n. ",
    "skasio": "+1\n. ",
    "ikwattro": "Good move in my opinion !\n. Awesome !\nSent from my iPhone\n\nOn 19 May 2016, at 17:47, Max Franz notifications@github.com wrote:\nNot one contributor objected to the change.  Cytoscape.js is firmly MIT now.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. \n",
    "nopnop": ":+1: Excellent\n. ",
    "ZaWertun": "+1 from me :)\n07.01.2016 22:22, Max Franz \u043f\u0438\u0448\u0435\u0442:\n\n@yuedong2 https://github.com/yuedong2 @gerardohuck \nhttps://github.com/gerardohuck @onursumer \nhttps://github.com/onursumer @ayhun https://github.com/ayhun \n@metincansiper https://github.com/metincansiper @MissChocoe \nhttps://github.com/MissChocoe @bumbu https://github.com/bumbu \n@Trott https://github.com/Trott @ZaWertun \nhttps://github.com/ZaWertun @chrtannus \nhttps://github.com/chrtannus @greenify https://github.com/greenify \n@danielryding https://github.com/danielryding @guimeira \nhttps://github.com/guimeira @mikedias https://github.com/mikedias \n@ktei https://github.com/ktei @robmosca \nhttps://github.com/robmosca @jfarid27 https://github.com/jfarid27 \n@Ahsanzia https://github.com/Ahsanzia @markov00 \nhttps://github.com/markov00 @ikavalio https://github.com/ikavalio \n@sinansonlu https://github.com/sinansonlu @skasio \nhttps://github.com/skasio @JoshTGreenwood \nhttps://github.com/JoshTGreenwood @kkirsche \nhttps://github.com/kkirsche @AlexanderPico \nhttps://github.com/AlexanderPico @grighetto \nhttps://github.com/grighetto @vojtechkral \nhttps://github.com/vojtechkral @furkansahin \nhttps://github.com/furkansahin @randallElliott \nhttps://github.com/randallElliott @ikwattro \nhttps://github.com/ikwattro @nopnop https://github.com/nopnop \n@quatrano https://github.com/quatrano @areel \nhttps://github.com/areel @megawebmaster \nhttps://github.com/megawebmaster @shakhal https://github.com/shakhal\nThe Cytoscape Consortium would like to change the license of \nCytoscape.js from LGPL3 to MIT. MIT is simpler language than LGPL3; \nit\u2019s easier to understand. LGPL is more restrictive than MIT, but LGPL \nsuffers from uncertainty and hesitation from developers that MIT does not.\nI don\u2019t think it\u2019s productive to have developers worried about \nlicensing. I think we should make it as easy a choice as possible so \ndevelopers can just use Cytoscape.js without worry.\nI\u2019d like to thank all our contributors and users for their code and \nfeedback. Cytoscape.js has grown a lot as a result.\nWe plan on switching the license by 25 January, unless our \ncontributors object. We hope that the change helps Cytoscape.js to \ncontinue to grow, and we hope that our contributors support this decision.\nIf you\u2019d like to leave your thoughts in this thread regarding \nlicensing, I\u2019d appreciate it.\nThanks!\nLGPL3 license (old license)\nTLDR summary: \nhttps://tldrlegal.com/license/gnu-lesser-general-public-license-v3-(lgpl-3) \nhttps://tldrlegal.com/license/gnu-lesser-general-public-license-v3-%28lgpl-3%29\n|GNU LESSER GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright \n(C) 2007 Free Software Foundation, Inc. http://fsf.org/ Everyone is \npermitted to copy and distribute verbatim copies of this license \ndocument, but changing it is not allowed. This version of the GNU \nLesser General Public License incorporates the terms and conditions of \nversion 3 of the GNU General Public License, supplemented by the \nadditional permissions listed below. 0. Additional Definitions. As \nused herein, \"this License\" refers to version 3 of the GNU Lesser \nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the \nGNU General Public License. \"The Library\" refers to a covered work \ngoverned by this License, other than an Application or a Combined Work \nas defined below. An \"Application\" is any work that makes use of an \ninterface provided by the Library, but which is not otherwise based on \nthe Library. Defining a subclass of a class defined by the Library is \ndeemed a mode of using an interface provided by the Library. A \n\"Combined Work\" is a work produced by combining or linking an \nApplication with the Library. The particular version of the Library \nwith which the Combined Work was made is also called the \"Linked \nVersion\". The \"Minimal Corresponding Source\" for a Combined Work means \nthe Corresponding Source for the Combined Work, excluding any source \ncode for portions of the Combined Work that, considered in isolation, \nare based on the Application, and not on the Linked Version. The \n\"Corresponding Application Code\" for a Combined Work means the object \ncode and/or source code for the Application, including any data and \nutility programs needed for reproducing the Combined Work from the \nApplication, but excluding the System Libraries of the Combined Work. \n1. Exception to Section 3 of the GNU GPL. You may convey a covered \nwork under sections 3 and 4 of this License without being bound by \nsection 3 of the GNU GPL. 2. Conveying Modified Versions. If you \nmodify a copy of the Library, and, in your modifications, a facility \nrefers to a function or data to be supplied by an Application that \nuses the facility (other than as an argument passed when the facility \nis invoked), then you may convey a copy of the modified version: a) \nunder this License, provided that you make a good faith effort to \nensure that, in the event an Application does not supply the function \nor data, the facility still operates, and performs whatever part of \nits purpose remains meaningful, or b) under the GNU GPL, with none of \nthe additional permissions of this License applicable to that copy. 3. \nObject Code Incorporating Material from Library Header Files. The \nobject code form of an Application may incorporate material from a \nheader file that is part of the Library. You may convey such object \ncode under terms of your choice, provided that, if the incorporated \nmaterial is not limited to numerical parameters, data structure \nlayouts and accessors, or small macros, inline functions and templates \n(ten or fewer lines in length), you do both of the following: a) Give \nprominent notice with each copy of the object code that the Library is \nused in it and that the Library and its use are covered by this \nLicense. b) Accompany the object code with a copy of the GNU GPL and \nthis license document. 4. Combined Works. You may convey a Combined \nWork under terms of your choice that, taken together, effectively do \nnot restrict modification of the portions of the Library contained in \nthe Combined Work and reverse engineering for debugging such \nmodifications, if you also do each of the following: a) Give prominent \nnotice with each copy of the Combined Work that the Library is used in \nit and that the Library and its use are covered by this License. b) \nAccompany the Combined Work with a copy of the GNU GPL and this \nlicense document. c) For a Combined Work that displays copyright \nnotices during execution, include the copyright notice for the Library \namong these notices, as well as a reference directing the user to the \ncopies of the GNU GPL and this license document. d) Do one of the \nfollowing: 0) Convey the Minimal Corresponding Source under the terms \nof this License, and the Corresponding Application Code in a form \nsuitable for, and under terms that permit, the user to recombine or \nrelink the Application with a modified version of the Linked Version \nto produce a modified Combined Work, in the manner specified by \nsection 6 of the GNU GPL for conveying Corresponding Source. 1) Use a \nsuitable shared library mechanism for linking with the Library. A \nsuitable mechanism is one that (a) uses at run time a copy of the \nLibrary already present on the user's computer system, and (b) will \noperate properly with a modified version of the Library that is \ninterface-compatible with the Linked Version. e) Provide Installation \nInformation, but only if you would otherwise be required to provide \nsuch information under section 6 of the GNU GPL, and only to the \nextent that such information is necessary to install and execute a \nmodified version of the Combined Work produced by recombining or \nrelinking the Application with a modified version of the Linked \nVersion. (If you use option 4d0, the Installation Information must \naccompany the Minimal Corresponding Source and Corresponding \nApplication Code. If you use option 4d1, you must provide the \nInstallation Information in the manner specified by section 6 of the \nGNU GPL for conveying Corresponding Source.) 5. Combined Libraries. \nYou may place library facilities that are a work based on the Library \nside by side in a single library together with other library \nfacilities that are not Applications and are not covered by this \nLicense, and convey such a combined library under terms of your \nchoice, if you do both of the following: a) Accompany the combined \nlibrary with a copy of the same work based on the Library, uncombined \nwith any other library facilities, conveyed under the terms of this \nLicense. b) Give prominent notice with the combined library that part \nof it is a work based on the Library, and explaining where to find the \naccompanying uncombined form of the same work. 6. Revised Versions of \nthe GNU Lesser General Public License. The Free Software Foundation \nmay publish revised and/or new versions of the GNU Lesser General \nPublic License from time to time. Such new versions will be similar in \nspirit to the present version, but may differ in detail to address new \nproblems or concerns. Each version is given a distinguishing version \nnumber. If the Library as you received it specifies that a certain \nnumbered version of the GNU Lesser General Public License \"or any \nlater version\" applies to it, you have the option of following the \nterms and conditions either of that published version or of any later \nversion published by the Free Software Foundation. If the Library as \nyou received it does not specify a version number of the GNU Lesser \nGeneral Public License, you may choose any version of the GNU Lesser \nGeneral Public License ever published by the Free Software Foundation. \nIf the Library as you received it specifies that a proxy can decide \nwhether future versions of the GNU Lesser General Public License shall \napply, that proxy's public statement of acceptance of any version is \npermanent authorization for you to choose that version for the Library. |\nMIT license (new license)\nTLDR summary: https://tldrlegal.com/license/mit-license\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/cytoscape/cytoscape.js/issues/1213.\n. \n",
    "srinikom": "Hi Guys, First of all thanks for the change. Did you guys get all contributors' approval? Our legal wants to make sure every committer is fine with the change. \n. Great. Thanks. \n. ",
    "Konard": "This is not a duplicate, because described above does not match definition of hyperedge direclty. Hyperedge is N to N connection, edge is 1 to 1. Link is also 1 to 1 connection, but difference is that each one (of these 1s) are also links (or edges), and there is no separate verticies type. For example link that starts from itself and ends with itself is a point, or actually a verticle. The actual needed feature is to allow source and target of edges to reference other edges (not only nodes).\nhttps://en.wikipedia.org/wiki/Associative_model_of_data (here vertices/nodes/items coexist with links/edges).\n. > One of the premises of graph theory is that edges connect nodes.\nThis is still true here. However if also an edge can connect edges then new possibilities for algorithms are open. One way to use this is to get an ability to describe ordered set (or sequence).\nJavaScript\nedges: [\n      { data: { id: 'ad', source: 'a', target: 'd' } },\n      { data: { id: 'eb', source: 'e', target: 'b' } },\n      { data: { id: 'adeb', source: 'ad', target: 'eb' } } // Added this edge\n    ]\nIf we take this example, we can interpret 'adeb' edge as tree of edges ((a -> d) (e -> b)), and at the same time as sequence of nodes (a -> d -> e -> b) or just \"adeb\" (string), if 'a', 'd', 'e' & 'b' nodes represent corresponding letters/symbols itself. It can be an N-gram of words (not only letters). For example a sentence (builded with nodes).\nAll previous logic with nodes still ok. And new can be added. I`m not sure it should be so difficult as hyperedges implementation. Because cytoscape already has an ability to click on edges, name edges. So the addition is, to render edges, that starts from center(middle) of one edge to center(middle) of other edge. May be it can be done as a plugin or switch/option that can be turned on or off.\nOther visualizations (from book by SIMON WILLIAMS, \"THE ASSOCIATIVE\nMODEL OF DATA\", http://www.sentences.com/docs/other_docs/AMD.pdf ):\n\n\nHere is an example of semantic type system, that uses links/edges as node/pairs to continue an English sentence (fact) about some real world event.\n. http://iacis.org/iis/2009/P2009_1301.pdf\nhttps://en.wikipedia.org/wiki/Associative_model_of_data\n. Ok there are other possible solutions:\n1. Possibility to remove arrow from edge (just a straight line between nodes) So the edge is always an node with exacly two edges (one in and one out), and both edges should be synchronized (continue the same path).\n2. Possibility to embed another cytoscape graph inside the node. So that node will have inner structure. For example to embed a small visualization with two nodes and one edge inside other node.\nCan you please point out are these options possible with cytoscape?\n\nFor now, I'm closing this and you can use intermediary nodes.\n\nOr.. What exactly do you mean by intermediary nodes?\n. Implemented examples:\n1. http://linksplatform.github.io/cytoscape-intermediate.html \n2. http://linksplatform.github.io/cytoscape-compound.html\n(taphold to expand/collapse)\n. http://gojs.net/latest/samples/linksToLinks.html (implementation at go.js)\n. ",
    "dhakehurst": "I too would like this option.\nintermediate nodes are not a solution due to layout.. ",
    "jri": "@maxkfranz talks about graph model.\n@Konard talks about associative model, which is inherently different.\nAlthough I'm a Cytoscape.js user myself and looking for a visualization/interaction solution for the associative model too, Cytoscape.js might not be the proper foundation for that.. I've created a Cytoscape extension that allows edges to be connected to other edges, according to the Associative Model of Data:\nhttps://github.com/jri/cytoscape-edge-connections. Yes, you're right! Your fiddle works.\nSorry for not isolating the problem properly.\nThe problem occurs if in the node style width or height (or both) are set to label. With a number, e.g. 50 it works, with label it doesn't work.\nYou can check it in my updated fiddle: https://jsfiddle.net/ra9jcch9/4/\nThank you for testing and replying!. Now it works!\nGreat :-)\nThank you very much for the quick fix!. I want to achieve this node rendering:\n\nYes, I can use text-margin-x to move the label to the left. But still, the horizontal padding needs to be larger than the vertical padding.\nWhat approach would you generally suggest to customize individual node rendering beyond style properties? I mean node renderings and interactions programmatically created by the user? Like a customizable per-node render function. I guess the DOM would be more appropriate here but is in contrast to Cytoscape's canvas based approach.\nI'm sure you (and others) already have considered a hybrid approach: using the canvas for edge rendering and superimpose it with a DOM layer for the node rendering. (I did that in my former application and it works very well, but it lacks parallel edges, and self-edges.) Are you aware of a Cytoscape plugin that goes for this hybrid approach?\nI've evaluated several graph libraries, and Cytoscape seems to be the only one which supports both out-of-the-box, interactive parallel edges (multigraphs), and interactive self-edges. To me Cytoscape is very strong on edge rendering, but falls back when it comes to node rendering flexibility.\nWould Cytoscape's render event be the basis for customizing the node rendering?\nI like Cytoscape's clear concepts and API, mature implementation, and excellent documentation very much. Thank you for your effort!\n. > You can do all the rendering for nodes yourself if you want as an svg background image. An svg is pretty well as customisable as a dom node and it's drawable for canvas (and cacheable as a bitmap).\nOK, very good.\nRendering the entire node as an SVG background image is the approach I'm trying now.\nStill I want to achieve this node rendering:\n\n(Note the extra \"right padding\" to make room for the icon. The icon is meant to be a fontawsome text character, with the color set programmatically.)\n\nIn either case, you'll need to figure out dimensions for the node yourself --- probably based on the svg dimensions.\n\nOK. But once I've figured out the node's dimensions how tell I Cytoscape about it?\nWhat I have at the moment:\nstyle: {\n  'background-image': renderNode,\n  ...\n}\nThe function to render the node's background image:\nfunction renderNode (ele) {\n  var label     = ele.data('label')\n  var icon      = ele.data('icon')\n  var iconColor = ele.data('iconColor')\n  var width = 100    // TODO: calculate based on label, add padding\n  var height = 25    // TODO: calculate based on label\n  var svg = `<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n    <g>\n      <rect x=\"0\" y=\"0\" width=\"${width}\" height=\"${height}\" fill=\"#d0e0f0\"></rect>\n      <text x=\"${width - 20}\" y=\"${height}\" fill=\"${iconColor}\">${icon}</text>\n    </g>\n  </svg>`\n  return 'data:image/svg+xml;base64,' + btoa(svg)\n}\nHow can the render function tell Cytoscape the calculated node dimensions? Cytoscape needs to know the node's bounding box for hit tests and border drawing, right?. OK. Thank you very much!. @jesuspc Eventually I got SVG node background images working, in all major browsers, including european <text> chars, and FontAwesome icons.\nSome gotchas:\n\n\nDon't use Base64 encoding in SVG data URLs. Use URL-encoding instead. See https://github.com/cytoscape/cytoscape.js/issues/1873\n\n\nThe node render function has to return an object containing the SVG (e.g. as data URL) and its dimensions. See https://github.com/cytoscape/cytoscape.js/issues/1802#issuecomment-310386514\n\n\nYou can't SVG draw beyond a node's bounding box. See https://github.com/cytoscape/cytoscape.js/issues/1865\n\n\nWebfonts (e.g. FontAwesome) do not work in SVG <text> elements. As fas as I understand this is due to browser oddities (Canvas/SVG/Webfonts), and is not a Cytoscape problem. A workaround is to render the plain SVG glyphs as <path> elements instead. See https://github.com/cytoscape/cytoscape.js/issues/1867\n\n\nThe XML namespace (<svg> element's xmlns attribute) is required. A XML declaration (<?xml version=\"1.0\" encoding=\"...\"?>) is not required. See https://github.com/cytoscape/cytoscape.js/issues/1873\n\n\nAs an example see the Cytoscape code in my project, in particular the renderNode function:\nhttps://github.com/jri/dm5-topicmap-panel/blob/master/src/cytoscape-renderer.js#L350\n. Hint: the mentioned fiddle uses a SVG image. The clipping appears also with PNG images.\n\n. > Because of how caching is done, you can't draw anything beyond a node's bounding box.\nI can't acknowledge that.\nTry this modified fiddle. It uses a graph with just one node:\nhttps://jsfiddle.net/sh0a4w5p/2/\nHere NO clipping appears. The background image definitely exceeds the node's bounding box.\nBut strangely this works ONLY if the canvas is wide enough (at least 310px or so).\nTo check it change the fiddle's result frame width and press Run again.\n\nTo me this is the expected behavior and a must-have possibly not only for my application.. Now I understand 2 things:\n in general, you can't draw beyond a node's bounding box at the moment\n in future this restriction might vanish (#1782)\nBut what you say regarding caching basically means: sometimes you CAN draw beyond the bounding box, and IF you can depends on the caching state, which is completely intransparent to the developer.\nPossibly it would developers give less odd experience if they NEVER can draw beyond the bounding box, and if the docs for background-clip would be more clear.\nThank you for the explanations!\nI appreciate your work very much!\n. A modified fiddle shows that Webfonts in HTML embedded SVG do work. But not in Cytoscape.\nhttps://jsfiddle.net/jri_/b23Lg89f/1/. > See\nhttps://stackoverflow.com/questions/5495952/draw-svg-on-html5-canvas-with-support-for-font-element#5505861\nSorry, I don't understand what part of it relates to my question.\nCan you explain?\nAre you saying that fonts are not supported in Cytoscape's Canvas SVG rendering?\nI would not acknowledge that.\nIn a Cytoscape background-image function I can do e.g. <text style=\"font-family: Arial\"> or Verdana or Monaco or Trebuchet MS. These fonts render properly. But FontAwesome does not, despite it is loaded.\n. > See\nhttps://stackoverflow.com/questions/5495952/draw-svg-on-html5-canvas-with-support-for-font-element#5505861\nThis posting mentions canvg (https://github.com/canvg/canvg).\nDoes Cytoscape utilizes canvg for SVG-to-Canvas rendering?\ncanvg does support <text font-family=\"FontAwesome\">.\nFontAwesome icons are properly rendered:\nhttps://jsfiddle.net/jri_/6r2jug6o/448/\n(Probably you need to clear the browser cache)\n. I'm not so much interested in the Cytoscape internals. I just have a simple need: render a FontAwesome icon on a node, and set its color programmatically. Is this possible with Cytoscape?\ncanvg shows us that a SVG <text font-family=\"FontAwesome\"> CAN be rendered on a canvas. So, in principle it should be possible with Cytoscape as well.. In the Cytoscape docs on Core Initialization I stumbled upon this one:\n\nNote that in order to guarantee custom font usage, the fonts in question must be loaded before Cytoscape is initialised.\n\nI thought this might the problem and did further tests. But no success.\nThis fiddle definitely loads the FontAwesome font before it initializes Cytoscape. Cytoscape initialization is not done before you press the \"Init\" button. At this time some divs and a <svg> using the font are rendered already. Also in the browsers Network panel you can see that the woff(2) file is loaded already.\nhttps://jsfiddle.net/jri_/b23Lg89f/5/\n\nIn order to exclude one other possible problem -- cross-origin requests -- I run the same demo on my local machine, serving all assets (html, css, woff) from the same server. Still no success.\nAt the moment I have no idea why Cytoscape can't render the FontAwesome font.\nDear Max,\ncan you acknowledge that problem?\nDo my fiddles demonstrate the problem to you?\nDid it possibly already work in an older Cytoscape version? Some issues suggests that:\nhttps://github.com/cytoscape/cytoscape.js/issues/964\nhttps://github.com/cytoscape/cytoscape.js/issues/1322\nDo you see any solution?\nGreetings,\nJ\u00f6rg\n. One more hint to isolate the problem: in node labels FontAwesome works.\nstyle: {\n  'font-family': 'FontAwesome',\n  'label': '\\uF007 User'\n}\nhttps://jsfiddle.net/jri_/fh11wo5k/\n\nBut in SVG background images FontAwesome does not work.\nSo, the problem seems to be in the SVG-to-Canvas render code.\n. > You might want to consider using plain svgs, rather than fonts, to programmatically make your overall svg. Most good icon fonts have the source svg available for download.\nThat's a good idea. I'll try that. FontAwesome comes with SVG glyphs as well.\nThank you!\n. Sorry, only now I've realized that I can use unicode numbers. This works properly:\n<text>N&#x00f6;de</text>\nDo I have to transform my DB text content before rendering?\nOr is there any way to specify the encoding at rendering time, like\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg>...</svg>\nI tried that in Cytoscape but it does not work:\nhttps://jsfiddle.net/jri_/hrxp965e/1/\n(Note: jsfiddle's result html has <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">). Sorry again. Now I've tried ISO encoding, and it works!\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"no\"?>\n<svg>...</svg>\nhttps://jsfiddle.net/jri_/hrxp965e/2/\nWhat puzzles me is that source entered/rendered at the JSFiddle site is apparently encoded in UTF-8 but properly rendered only when ISO-8859-1 is specified as XML encoding (see above).\nhttps://jsfiddle.net/jri_/fkmvs6qL/\n\n. There are browser differences too.\nThis works in Safari, and Firefox, but not in Chrome:\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"no\"?>\n<svg>...</svg>\nhttps://jsfiddle.net/jri_/hrxp965e/3/. > 'background-image': 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svg)\nIndeed, not using Base64 encoding and encode with encodeURIComponent instead solves the problem!\nThis way it works in all my browsers (Safari, Firefox, Chrome) even without specifying charset in the data URL and without the XML declaration (<?xml version=\"1.0\" encoding=\"...\"?>), provided the source file contains a proper <meta charset=\"...\"> header (in case of ISO-8859-1 even that header is not necessary).\nThis was a very helpful hint!\nThank you very much!\n:-)\nThis issue can be closed.\nYou're right, we should file browser bug reports.\n. The hint about not listening to the select/unselect event was fruitful. Now I kind of simulate tapselect and tapunselect by interpreting plain tap-node/edge and tap-background events. This solved my problem.\nThank you for helpful response!. I fully agree. Having tapselect/tapunselect events in the library would be good. Unfortunately at the moment I can't make a PR. Sorry.. Great! Thank you!. https://github.com/jri/cytoscape-edge-connections. To me This is expected behaviour when the source node and the target node overlap makes no sense. When it is expected behavior why issue a warning in the first place?\nWhile moving nodes it happens a lot that \"source node and the target node overlap\" and is no problem.\nIn my experience 100% of these warnings are \"false alarm\" and clutter the dev console. It hinders recognizing the real warnings issued by my app.\nI think @maxkfranz already suggested a perfect simple yet flexible solution:\n\nI think the simplest option is to have some init option to suppress all warnings warnings: bool\n\nA big thumb up for this!\n. Thank you for detailed response!\n\nI still think the option to turn them all off is a good idea, especially for when a dev makes a prod build of his app.\n\n+1. @maxkfranz Congratulations for 3.5.0!\nThe new cytoscape.warnings() approach is well conceived and does a good job.\nThank you!. Yes, doing the update on create by using parallelEdges() is a good idea! I'll try that.\nThank you!. It works as expected and is now released as cytoscape-edge-connections 0.3.2\n. @dallemang thank you for sharing the \\n\\n text-wrap trick! @maxkfranz thank you for the \\u2060 hint! Together it unexpectedly solved a long-lasting problem :-). Let me clearify my question: does Cytoscape provide support to let my app detect when the user ended a pan/zoom operation?. OK. Thank you!. Meanwhile I've solved that in my app by debouncing and it works fine. Thanks!. ",
    "andrewlouis93": "Interesting - can you link me some more reading about that?\nI also noticed that edgeWeight didn't seem to alter the appearance of any edges? Is this normal behaviour: http://codepen.io/anon/pen/pgdLVd ?\n. ",
    "louisgv": "Work around:\n```\n  var cy = cytoscape();\ncy.add({\n    data: {\n      id: 'user',\n      weight: 0\n    },\n    position: { // the model position of the node (optional on init, mandatory after)\n      x: u_gp.longitude(),\n      y: u_gp.latitude()\n    }\n  });\n```\n. ",
    "Frankzxliu": "How does the font-size for a node's label calculate? On my android tablet, I am using Webview, the font-size of a node's label never changed?\nThank you in advance!\n. @maxkfranz  Thank you for your prompt reply!\nIs there a way to set boundary on a graph, so that the graph will not move out of canvas view?\nIn this case, when a user drags the graph to the edge of canvas view, the graph will stop moving.\nThank you in advance!\n. ",
    "jharwig": "While i think something like a selection tool would work, it requires disabling panning (which is fine) but also disables zoom. Which could be just as confusing to the user.\nThe other issue is now users have learned knowledge of the selection by default, and click and hold to pan. So, we have to choose to break that experience or upgrade cytoscape. We're on 2.4\n. Thanks for your thoughtful responses, and your work on cytoscape. It's much appreciated. A selection mode is what I'll probably go with.\n. Just hit this too on IE11 (which supports CORS), loading urls on the same origin with a crossorigin=\"anonymous\" on the image won't send credentials, so was getting 403s because the images are protected. Testing with crossorigin=\"use-credentials\" did work.\nCan the renderer check the domain and set one or the other? Or some way to tell the renderer what to use?\n. Thanks for the reply, I wasn't suggesting to replace it to send credentials. Unfortunately the images have to be protected (They are uploaded by users with expectation of privacy). Other browsers work fine, it's just IE that takes anonymous literally, and doesn't send credentials even when there's no cross origin.\nBut why do I even need CORs here if I'm serving images from the same origin (even using relative urls)?\n. okay, thanks for your help. For now I'm just replacing getCachedImage with an implementation that switches the crossOrigin value to 'use-credentials'.\n. Given that I needed the fix, thanks for pushing it through \ud83d\udc4d . ",
    "mbeynon": "Running CoSE first on everything and then grid on each parent after is possible.  I would expect that CoSE will position the children much less compact than grid and thus have a much larger/different bb for the parent.  When grid is later run on the parent, it will cause shifting and gaps/overlaps at worst, or a poor visual row/col aspect ratio at best.\nAnother idea ... what about running grid on each parent as I am now, then duplicating the entire graph but replace the children with a single large node of the grid layout compound size.  Run CoSE on the entire temp graph to get a nicely formatted result.  Finally, extract the positions from the temp graph to update the original graph.  No gaps or overlaps because CoSE cannot resize the node.  Expensive, but my graphs are all fairly small and it only needs to happen once.  Thoughts?\nThanks, I'll post the question on StackOverflow to get any other feedback.  I posted here because I thought it would require a new hybrid layout.\n. I posted the question on StackOverflow, so I will close this issue.  Thanks.\n. Appreciate the feedback.  I'm motivated to find an agreeable approach to avoid living on a fork.\nI don't consider the global option as being styling.  Rather it controls the hard-coded nodes-on-top logic heuristic deep in the collection sort code.  Elements already have a z-index style that should affect when it's drawn, but it's ignored in some cases.  That behavior seems wrong.  Fixing it by adding another style to actually use the existing style feels redundant.  My global option was meant to support backward compatibility while changing the logic to be more in line with what I expect z-index means.\nHow does the global option conflicts with cached style calculations?  If the global option is set at init, then all cached style calculations are based on the collection zsort order.  Don't see how that's any different to what you have now -- cached style calculations and a particular collection zsort ordering.  All this PR does is change the arbitrary collection ordering.  I must be missing something.\nThe current logic ignores z-index unless the elements are in the same depth of the compound node tree structure.  Sort of breaking ties.  The odd part is this happens not just for the same compound node, but any that happen to be at the same compound node depth.  It that intentional?\nHere's what I would expect:\n1.  If no z-index is provided, then primary sort is compound node depth (or perhaps this should be the bfs total order?) and secondary sort is nodes on top of edges.\n2.  If a z-index is provided for a compound node, then all children inherit it by adding it to their potential z-index value.  (this may be too complicated to implement)\n3.  If a z-index is provided for a node or edge, then use it.  For ties, use nodes on top of edges.\nThoughts?  Would like to agree on the approach before implementing on unstable.\nNote that I updated the dist files because I found it required when using npm install to the github url of my forked version.  Appears to only copy from dist on install.  Happy to do another way if you have a better suggestion.\n. My use case is actually a compound graph that is used to visualize a network diagram.  Subnets are compound nodes that contain hosts.  Network devices are the routers and firewalls that connect the subnets.\nTo make it clear what I'm trying to do, here is a screenshot that shows one level of subnet breakdown and some annotations and overlays.  In the future there could be more levels of compound nodes in the baseline network diagram.  Annotations will also include nodes with dynamic placement to animate different behavior along an arc from source node to dest node, so z-index of such overlay nodes to be above all other compound node children is needed.  Annotations and overlay arrows need to be on top of the baseline graph nodes and edges regardless of the depth.\nSingle node annotations are easy, because they are relative to a given node.  Edges can be handled given the discussion we had earlier.  Dynamically placed nodes for animated behavior may also require a similar style.\nLet me know your take, so I can ensure PR agreement at least on the approach.  I'll then rework a PR against unstable.\nI also need two edge labels drawn at the proper side of the connection (to label interface addresses), but I've not started that PR yet.  That change is larger because the notion of multiple labels breaks much of the code I looked at.  May require some kind of separator in the single label string and a flag to say split it up and draw at the ends.\n. Yes, I think it would be equivalent.\n. Since it's per-node and per-edge, need to consider conflicts of policy.  How would it work for an edge { z-index-compare: orphan-manual; } between two nodes with { z-index-compare: auto; } and say { z-index-compare: orphan; } ?\n. So top-manual would always be drawn on top?  The -1 would have to be special cased, or it would draw before depth 0 and positive depth values for compound nodes.  Seems that infinity is how it would be treated.\n. Still some edge cases to consider.  To handle different z-index-compare property per-element, we should find a way to compute tuple values for a and b, and numerically compare them to sort.  Can short circuit them for efficiency.\nGiven (depth, ele, z-index) to describe sort order ...\n1. For depth, we have a z-index-compare property of:\n   bottom is -1\norphan is 0\nauto is depth of compound node 0+, or just 0 if not a compound node\n   top is Number.MAX_SAFE_INTEGER - 1\ntop-manual is Number.MAX_SAFE_INTEGER\n2. For ele:\n   for auto use 0 for edges or 1 for nodes\n   otherwise use 1\n3. For z-index:\n   if specified, use the provided value, otherwise use 0\nQ: current logic broke ties between two nodes or two edges with indicies in the core.  Do we drop this, or include somehow?  If used, should it be a 4th item in the tuple?  Would not want it to compete with a user-specified z-index.\n. edge < node suffices if auto for both, but need to consider other z-index-compare values.  What I listed was intended to solve combinations in a generic way to handle auto and other values in the same sort comparator call.\nIf we leave it as always edge < node, it will interfere with top-manual and explicit setting of a z-index value to purposely place an edge over a node.\n. That's equivalent to what I described above by assigning manual a 1 for the edge/node digit.  Assigning values for this digit forces a total ordering of elements which is required for a stable sort.\nI will implement and submit a new PR as soon as I can.\n. I was starting to think the name z-index-compare wasn't a good fit for all the depth concerns.  I like this much better and will be easier to read the code.\n. This PR replaced with #1409 \n. That's ironic, since I rebased unstable to include that change and didn't realize that was my problem.  I posted the question on SO.\n. ",
    "marteber": "Thanks for the suggestion! I have seen similar examples but had trouble getting a function mapper to work - I am not overly fluent in Javascript and the Cytoscape.js documentation often makes me feel like I am lacking crucial background knowledge. That is why I thought it would be a nice pre-defined addition for an assumedly frequent use case. \nAnyway, I will try my luck with a function mapper for now. Thanks again!\n. I see. I had the idea in my head that an animation should behave differently from a transition, in that it should revert to the original state on its own (despite my own code's reverse() proving already that that idea is incorrect).\nThanks for the explanation and workaround!\n. ",
    "jaschaephraim": "In the case I checked it was undefined, so how about checking for falsy:\njavascript\nif( rscratch.labelWrapKey && rscratch.labelWrapKey === rscratch.labelKey ){\n. ",
    "pra85": "@maxkfranz Apologies, didn't know that index.html was built. I have updated the PR to do changes in the sources\n. ",
    "josephst": "Note: breadthfirst layout already includes a spacingFactor option which appears to work identically to the suggested spacingFactor option. For now, I'm going to call this the scalingFactor option so that there isn't a conflict with existing extension options.\nAdditionally, does it make sense to define the scaling/ spacing option for the preset layout?. Newest additions to #1673 should check the bounding box for the elements that the layout is being run on. I've taken out the spacingFactor option from bfs now that spacing is handled in core layout. I verified that the bfs demo produces an identical result. . http://blog.js.cytoscape.org/2017/04/11/3.0.0-release/\n\nFrom: Fernando Hurtado notifications@github.com\nSent: Wednesday, August 9, 2017 12:58:07 AM\nTo: cytoscape/cytoscape.js\nCc: Joseph Stahl; Assign\nSubject: Re: [cytoscape/cytoscape.js] 3.0.0 upgrade guide (#1352)\nWhere can I find the blog post?\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHubhttps://github.com/cytoscape/cytoscape.js/issues/1352#issuecomment-321160413, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABNduTqFPRYJFq7ldjnQcLXkf1G21D0Kks5sWUpugaJpZM4ISG_J.\n. @tongbin Re not animating: telling cose to animate will animate the force-directed algorithm (rather than animating the move to the finished layout, like other algorithms do). With a small graph, cose will run so quickly that it looks like there's no animation. This also explains why cose doesn't have an animationDuration property like most other layouts: the duration is however long it takes to run the algorithm.\n. If you want to structure your selectors like that, try cy.nodes(\"[foo = 'true'][bar = 'true']\") (i.e. wrap the boolean values in quotes). However, I would recommend using the boolean-specific selectors. It's more concise to write your code as cy.nodes('[?foo][?bar]').. Caching now uses edgeWidth + ', ' + scale for the key (I played around with using various punctuation as a delimiter, or some kind of hash function, before settling with the easy thing and using the comma).\nGaps between edge lines and arrows should also be fixed; the gap property now takes into account arrow-scale for relevant shapes (all shapes except tee).\nUpdated JSFiddle showing the updated rendering. 1. Thanks for fixing that.\n2. I agree that there's something wrong. With the small gap (not multiplying by 2) the edge will overshoot the arrow on small scaling values. If I multiply by two (bringing it in line with the halfGap() calculation method) it will never overshoot but will leave an empty space at the bottom of the arrow (between concave base and flat end of edge). I'll play around with it and see if there's a way I can balance the two.\n3. Absolutely.. Refactored to a new method called calculateSpacing.. Should be fixed now. In the non-animated case, nodes.position(fn) is called if spacingFactor doesn't matter (same behavior as before). If spacingFactor specified, it'll get the new position via fn(i, node), then use this position in calculateSpacing(). Only calls nodes.positions() once.\nThanks for the help with reviewing this change!. Thanks for the heads up on this. My code there was definitely wrong; I've updated the code and tutorial to work properly and bumped the version of Cytoscape.js that's used in the example to 2.7.13. The blog should have the changes now. Here's my changes so you can easily see what's been updated. . Done. #1720 . @maxkfranz @KonradHoeffner fixed now. Updated with your feedback. @maxkfranz I'm open to writing a tutorial on this after I finish the contributing guide but need to make sure I understand the content well enough. As I understand it:\nUse a background SVG image so that scaling is not an issue. Chose a node shape that is similar to the background content so that hit tests for the node serves as a proxy for hitting the background SVG. Made the node entirely transparent to see background SVG. Cache the SVG-generation function (something like Lodash's memoize?) so that (re)rendering many identical nodes can reuse previously-calculated results. \nThe one part of this I'm not clear on is how to generate this SVG on the fly. Would the recommended way be to use a tool such as snap.svg to create a new SVG element, cache it, call it for the various graph elements, convert the generated SVG to a string, convert XML string to URI, and pass the data URI to Cytoscape.js? . Yes, new changes have gotten everything working now. Just compared with the previous build and (1,0,0,0) now looks distinctly different than (1,0,1,1) whereas these options previously were producing identical animations.. Okay I think I figured it out. The tests were failing because of the break command on the next line. Previously, the comparison smalletsDist === Math.Infinite was never true, so the break command was never hit. Changing the comparison to === Infinity meant that the comparison was true for disconnected nodes; this then caused break to exit the while-loop early, causing calculated distances to be incorrect.\nI changed the comparison to === Infinity and changed break to continue so that only the current loop iteration is terminated rather than the entire loop. I think this is the correct behavior; plus, it might speed up some calculations since the current iteration of the loop can be ended here instead of after finding that u.neighborhood().intersect( nodes ) is empty, as (I think) happened previously when the comparison was always false. . Should be merged at same time as blog post https://github.com/cytoscape/cytoscape.js-blog/pull/8. Thanks. Wasn't sure if the newPos object had other properties I would wipe by reassigning it.. Done. Right now var spacing = Math.abs(options.spacingFactor) is outside the function so that it doesn't get called n times in the no-animation case. It could also be moved inside the function which would make everything more concise (and would be one less argument that needs to be passed).. I initially had it changed to Infinity but that was causing tests to fail. Going to take another look at this to see why that is.. ",
    "AlexJF": "Changed it to a more conservative approach. Retested, cxttap and taphold work as expected as do all drags I tested.\n. ",
    "ckapop": "I did try that originally. It seemed like ele animations in the loop washed out the cy animation at the end after the loop (it never animated). I will try it again. Thanks!\n. ",
    "sndre": "@maxkfranz, setting dir on the canvas works for our use cases. Thank you!\n. ",
    "appunnicer13": "You can use CSS on the shadow elements , so rotate the whole cy by 90 deg and then rotate each element by -90deg . I think that will solve the problem , no need of options\n. ",
    "gig177": "Thanks for your reply! This snippet doesn't solve this problem:\ncss\ncanvas {\n    transform:rotate(-90deg);\n}\nIt isn't work perfectly cause axis is break now (demo).\n. Dagre calculates edge's length in unexpected way. For dynamic CRUD system it's unsuitable.\nTherefore breadthfirst layout is ideally for me.\n. ",
    "chirchiAbdelhamid": "You can make a rotate function like that\nfunction rotate() {\n       setTimeout(function (){\n              cy.nodes().positions(function( i, node ){\n                     return {\n                             x: node.position('y')*6,\n                            y: -1*node.position('x')*0.2\n                     };\n              });\n       cy.fit()\n       },100); \n}. ",
    "pmall": "Just to be clear, this should do the trick ?\n```\nvar cy = cytoscape({\n    container: container.find('.canvas').get(0),\n    elements: data,\n    layout: { name: 'preset' },\n});\ncy.on('layoutstart', function (e) {\n// Notice the layoutstart event with the layout name.\n  console.log('layoutstart', e.cyTarget.options.name);\n});\ncy.on('layoutstop', function (e) {\n// Notice the layoutstop event with the layout name.\n  console.log('layoutstop', e.cyTarget.options.name);\n});\ncy.layout({name: 'cose'});\n```\nIf so, yes, update the docs. I started my project two years ago and still haven't figured this out.\n. This is now working, thanks for the explanation.\n. I also have to mention that sometimes cose layout don't fire any stoplayout event. Only cola works as expected everytime.\n. > but adding array of element support doesn't really have a compelling usecase as far as I can see.\nFor example in my viewer I have buttons to expand network based on selected nodes. So I send an ajax request to retrieve the selected nodes neigbours, I use cy.add with the returned array of elements.\n. It is working now thanks a lot. Please can you check this for arbor too https://github.com/cytoscape/cytoscape.js-arbor/issues/2 ?\n. ",
    "Jacksoor": "The function/documentation I was referring to is http://js.cytoscape.org/#eles.union which has an alias eles.add(). \nMy usecase is that I split up my graph in subsets using algorithms to traverse it in specific ways. To show the user which elements are currently active, I tried to create one collection containing all these subsets and since I doing something like subset.add(subset1.add(subset2.add( ...))) seemed odd to me, I tried using subset.add([subset1, subset2, ...]). The issue is that these subsets are generally collections and the only way to combine them again is to chain the add function.\nThe main problem in my case is that there's no function that combines collections/elements like collection.add(collection1, collection2, ...) which returns a new collection containing all elements.\nHowever if this hasn't been an issue until now, I guess I just need to work my way around it.\n. > Usually, that's done something like this\nI know how it's done now, I just thought that it would be more comfortable for the developer and better performance wise, if you could just add multiple Elements/Collections to a Collection with one function call instead of calling union for each Element/Collection separately.\nAnyway I just wanted to add this as an enhancement and you can close this issue if you don't consider this as something useful. Thanks for the replies.\n. I don't think you got my point quite right yet, so I'll make an example:\njavascript\nvar col1 = cy.elements('[x=1]');\nvar col2 = cy.elements('[x=2]');\nvar col3 = cy.elements('[x=3]');\n//I use a function for each of these collections returning a new collection\ncol1 = myFunction(col1);\ncol2 = myFunction(col2);\ncol3 = myFunction(col3);\n//Now I want to combine all these collections into one collection\nvar total;\ntotal = col1.add(col2,col3); //Opt.1: Doesn't work as intended\ntotal = col1.add([col2,col3]); //Opt.2: Exception\ntotal = col1.add(cy.collection(col2,col3)); //Doesn't work as intended\ntotal = col1.add(cy.collection([col2,col3])); //Exception\ntotal = col1.add(col2.add(col3)); //This works but gets quite complicated\n...\nNow imagine that I got a lot of collections in my code or an array of collections and I just want an easy and performant way to add them all at once, like with option 1 or 2.\n. ",
    "ivansglazunov": "In cose layout.\n. ",
    "thpani": "Thanks, the snapshot works for me.\n. ",
    "jakinto": "You are right. I haven't read that you must use shift, control, meta, or alt down to initiate box selection. Apologize for the inconvenience.\n. ",
    "byllyfish": "This works. Thanks for the quick turnaround!\nThis snapshot has one new behavior. If my elements graph is empty,\nthere's a type error. This is true even if I hard-wire it.\nFirefox: \"TypeError: v is undefined\" at cytoscape.js:870\nChrome: \"Uncaught TypeError: Cannot read property 'length' of undefined\" at\n\"bfs-dfs.js:64\" (line number is off)\nThe line is: \"for( var i = 0; i < v.length; i++ ){\"\nHere's my code:\n``` javascript\n$(function(){ // on dom ready\ncy = cytoscape({\n  container: document.getElementById('cy'),\n  layout: {\n    name: 'cose',\n    padding: 10\n  },\n  elements: {\"edges\":[], \"nodes\":[]},\n});\n}); // on dom ready\n```\nOn Thu, Mar 17, 2016 at 11:44 AM, Max Franz notifications@github.com\nwrote:\n\nSnapshot :\nhttp://js.cytoscape.org/download/cytoscape.js-snapshot-b5f7581b78-1458240150429.zip\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1301#issuecomment-198028225\n. \n",
    "john-bai": "Thanks for the explanation and parent \"move\" strategy @maxkfranz! I'll close this issue for now as it sounds like I'm on the right path.\n. ",
    "AntoniBertel": "Many thanks for the answer. I removed 'bathes' frames and joined arrays.\nIs 'unstable' branch close to the 2.7 release? I can build it and use.\n. I changed layout.run() to cyGraph.layout(layoutParams) and it fixed the problem.\nBut how can i pre-compile template to spend less time?\n. Thank you for the answer.\nIt looks like with modified collection i spent less time to re-render graph.\n. ",
    "juancroca": "Ok I get we have to generate our own ids but would be a good idea to expose the idFactory to be overwritten if necessary. Think its cleaner that going where all the different, add elements actions are. \n. ",
    "d4ndruff": "yup - i did. which is why i see a box 300 x 300 in size. but nothing in it. could it be because the div is not big enough for the cytoscape.\n. I have a basic blank html file with just a code below in the body:\n<div id=\"cy\"></div>\nmainapp.txt\n. Actually this was fixed just now. I moved the script reference in to the bottom of the body tag and it works correctly now.\n. ",
    "fahimulhaq": "http://jsfiddle.net/xuxptna0/2/. \nLook at this fiddle and try adding \"foo\\nbar\" and then click add Node.\nI'm using latest version of Chrome on Mac (Version 50.0.2661.75 (64-bit))\n. That's correct. I'm closing the issue. Thanks for your help.\n. ",
    "vcebotari": "i talking about alignment line, what show position of draggable node to his neighbour, sorry for my bad english,\nthis project have this functionality, for example:\nhttp://freegroup.github.io/draw2d_js.app.shape_designer/\n\n\n. ok, can you tell to me, how i can get closest neighbour of grabbing node, all node are not grouped\n. ",
    "dpekkle": "Ah, thank you. Default behaviours are hard to figure out.\n. Fair enough, perhaps a section with all the 'default' behaviours for touch and KBM would be helpful. \nHad a team member tell me that functionality for multiple selections (by holding control) was already added when I suggested we implement it, and I couldn't find any mention in there.\n. Seems like \\src\\extensions\\renderer\\canvas\\drawing-label-text.js and \\src\\style\\properties.js are where I'd work on it? \nNot sure what part you're referring to with tests.\n. Here's what I managed to get working:\nplnkr\nI've made it so there's a single attribute 'text-border-padding', if you'd rather separated into top/bottom/left/right I can do that instead.\nHad to modify dimensions.js#L325 as well so that the larger labels were included in the bounding box, and thus fully displayed.. Here's where I'm at: http://plnkr.co/edit/pCHSRccMDNkiOIOD40Sd?p=preview\nNode and edge labels work with the text-events attribute, but I'm hitting a bit of a wall with auto-rotating edge labels.\nI've modified checkLabel such that.\nvar lw = preprop( rstyle, 'labelWidth', prefix ) + bw/2 + 2*th + 2* borderPadding;\n      var lh = preprop( rstyle, 'labelHeight', prefix ) + bw/2 + 2*th + 2* borderPadding;\nIt will then correctly tell if the mouse intersected with the rotated label (outputting inside/outside to console). However this result appears to be ignored in that the actual bounds of the label (which is a bounding box aligned with X/Y axes) are what will determine if the label was clicked. \n\nA click anywhere in the red region will select the edge, while checklabel itself checks the rotated label bounds (black box).\nThis bug is present in a fresh unmodified build from the unstable branch, and in the padded build I made myself, so I'm not sure where I should take it from here. The plunker includes each of these files as cytoscapebuild, cytoscapepadded. Doesn't seem to be present in unstable's dist/cytoscape.min.js\n. Pull request is up. Squashing the commits didn't work as I expected but it should be fine.\n. Define it as such\nvar cy = cytoscape({\n    ...\n    style: [\n        {\n            selector: '.disconnected',\n            style:{\n                'border-color': 'red',\n            }\n        },\n    ]\n    ...\n})\nAnd bind it\n```\ncy.on('tap', function(event)\n{\n        event.cyTarget.addClass('disconnected');\n});\n```\n. Shape seems to have limited support, 'roundedrectangle' does work but ellipse and star don't appear to be. If rounded rectangles dont work for you something else might be supported, but I doubt it.\nCompound node sizing is based on the child node positions and size, so any ellipse support would likely be an ellipse surrounding a rectangle with the compound's actual size - outside of which children don't exist.\n. Not sure what to say, this works for me:\n{\n            selector: ':parent',\n            style:{\n                'shape': 'roundrectangle',\n            },\n        },\nIf you could update your jsfiddle so that it works (doesn't include jquery for one?) that would help.\n. Ah my mistake. \n. Also ran into this. Were you using dynamically added nodes? For me it was only happening to the most newly added nodes (though I don't know what determined the cutoff point for newness).\ncy.redraw and other such functions have no effect.\nHowever for some reason updating the data attribute of any node temporarily fixes the issue, so my hacky fix was to use setInterval to update a 'fake' attribute in one of the nodes.\n. Firefox is also affected. Can't say for edges.\nHere's a modification of the compound demo http://embed.plnkr.co/7st3eBJeXrw3xB8yrXw8/\nTap on background to create nodes, then zoom/pan. \nAdded code:\n```\ncy.on('tap', function(event)\n{\n    var evtTarget = event.cyTarget;\n    if (evtTarget === cy) //tap on background\n    {\n        cy.add(\n        {\n            data:\n            {\n                id: cy.nodes().size() + 1,\n            },\n            group: \"nodes\",\n            renderedPosition: event.cyRenderedPosition,\n        });\n        }\n});\n```\nIt seems as if the combined \"render\" bounding box of all nodes isn't updated with each add.\n. Removed the parents to check, and yes its also normal graphs. \nOtherwise, you can see a bit of what is happening in these picture.\nAdding nodes:\n\nZooming out:\n\nIt looks like the dynamically added node's positions aren't being considered in the pan/zoom's idea of the total graph area, rather the initial nodes position determines that cut off. Note I did not cut off the picture at those bounds, there is empty canvas surrounding it.\nI tried to check edges as well in my main application, as dynamically adding edges is a more complicated process. However much like my 'fakeattribute' fix that process makes ALL the problem nodes stop misbehaving. New nodes added later will still disappear on pan/zoom however.\nI can simplify the process from my application and check at a later point.\n. Works fine for me, thanks.\n. ",
    "duskan": "@maxkfranz : Thank you for your help. \nI can solve  that problem!!\nbut ... I have another  problem during upgrade my Cytoscapejs version. \nafter change newest Cytoscape js file, \n generated canvas area (using cytoscape js ) has wrong height value like this .\n<div id=\"cy\" class=\"chrome\" style=\"overflow:auto;-webkit-tap-highlight-color: rgba(0,0,0,0);\">\n  <div style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0); position: relative; z-index: 0; overflow: hidden; width: 685px; height: 2695px;\">\n      <canvas style=\"-webkit-user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); outline-style: none; position: absolute; z-index: 3; width: 685px; height: 2695px;\" data-id=\"layer0-selectbox\" width=\"685\" height=\"2695\"></canvas>\n      <canvas style=\"-webkit-user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); outline-style: none; position: absolute; z-index: 2; width: 685px; height: 2695px;\" data-id=\"layer1-drag\" width=\"685\" height=\"2695\"></canvas>\n      <canvas style=\"-webkit-user-select: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); outline-style: none; position: absolute; z-index: 1; width: 685px; height: 2695px;\" data-id=\"layer2-node\" width=\"685\" height=\"2695\"></canvas>\n  </div>\n</div>\nin my css files, \"#cy\" has 700px width & height value , but generate result  has 9938 px  height value. \n before upgrading , that area's height was  600~ 700px.    \ni try to find solving this problem. can't find documentation or issue about this....\ncan you tell me an advice for this problems?   thanks. \n. ",
    "PinaGamer": "And if I want to get the shortest paths? With eles.dijkstra() or eles.bellmanFord() algorithms I can't get the shortest path in the above graph because the edges are directed.\n. But then, how can I create an undirected graph? Because I don't know yet how to create it.\n\nIn the above image, you can see that the shortest path is 25 units, but the bellmanFord algorithm return the edge which its weight is 51 :(\n. Hello again! I'm stuck with my problem because I can't get the shortest path between two nodes. Algorithms like eles.dijkstra() or eles.bellmanFord() are keeping in mind directionality and I know that these algorithms, by default, directed option is false.\nSorry if I bother you, but I'm unable to do this easy task whether I have multiple edges between two nodes and I want the shortest edge.\nThanks one more time.\n. Finally, I could solve it! The problem was in algorithm's option. I had not defined a function that returned me the value of every edge. So, if someone else has the same problem only have to add this: \njavascript\n//Define the options var with your preferences\n    var options = {\n      root : nodes[i],\n      weight : function (edge){\n        var minEdge = edge.data('weight');\n        return minEdge;\n      },\n      directed : false //this is not necessary\n    }\n//And execute he algorithm with these options\nelements.dijkstra(options);\nIf I finish my project, I will show you. Thanks @maxkfranz for everything! \n. ",
    "ccaper": "That works like a champ.  Will this snapshot be merged into a release?\nThanks for looking into this so quick.\nIf you are curious as to what/how I am using cytoscape for, I'm tracking graffiti in Chicago, noting the names of taggers, and attempting to track which taggers tag together, and make up some of the sets.  Cytoscape has been amazing for this.\n. Thanks Max for quick turnaround!\n. ",
    "pumpadump": "I would be very interested to try such a feature, we are currently displaying several graphs on one page, and if some of the graphs are huge the ui is blocked while they render.. Please paste your full layout configuration, do you configure pan or fit somewhere in your code?. if you look at the default config of the preset layout the fit option is set to true. I believe \"fit\" adjusts panning and zoom so that the nodes appear inside of the view port after they got relayouted. Try setting fit to false in your layout config and see if this leads to your expected results.\nhttps://github.com/cytoscape/cytoscape.js/blob/92000782b9e77fc85ec59ed3c063243f14481119/src/extensions/layout/preset.js\n. You have to set it as part of your layout options currently you only set the layout to preset and configure animate: false\nlayout: {\nname: 'preset',\nanimate: false\n}\nabove should be:\nlayout: {\nname: 'preset',\nanimate: false,\nfit: false\n}. ",
    "fhur": "Where can I find the blog post?. ",
    "dominique-vassard": "Ok for me.\nIn fact, I am using Neo4j as database and was using internal ids for graph display.\nAs using Neo4j's internal ids is considered a bad practice (should use uuid for nodes and edges), it's fine to have this kind of behavior in Cytoscape.\nThank you\n. ",
    "doaa-altarawy": "I have this issue too, the edge labels are very close to the edge. I used a workaround and set:\n'text-margin-y': -10\nBut it doesn't look pretty with autorotation.\n. ",
    "Nickolasmv": "Hi yes it's integrated with https://github.com/anvaka/ngraph.forcelayout .\n. ",
    "elecnix": "Actually, two recent versions of Chrome scale the background differently. On Chrome 48, the image is scaled to fit the node, while on 51 it appears scaled to the size of the whole window, but cropped into the node.\nYou may try it here: http://jsbin.com/hobuzijubu/1/edit?html,css,js,output (source also at https://gist.github.com/anonymous/70297f91b23f8e176de5dfa60b086be5)\nHere's how it looks on Chrome 48:\n\nAnd here's Chrome 51:\n\n. I tried removing the width, but that didn't fix it. Also, I played with background-width & background-height and various siblings without success.\nThe Chrome changelog shows changes related to SVG scaling, so it may be related. I don't know if it's a change in behavior to comply with a spec, or if it's a regression. What would help is having a test that does not use cytoscape, and I haven't wrapped my head around it yet.\n. If you zoom out in the sample mentioned above (link) you will notice that at a certain point, the background is scaled properly. There is a threshold where the background image becomes too big.\nWhen there are two nodes (code here), the default zoom shows two smaller nodes, and their background is too small to cover the node. Zooming in, it becomes scaled properly (covers the node), and if you zoom further, then it becomes too big.\n. The scaling in Chrome 51 is done properly by changing the height and width from percentages to fixed pixel values.\n. ",
    "machow": "I swapped this branch in for the current version of cytoscape. It threw this error in the browser:\ncoord-ele-math.js:1331 Uncaught ReferenceError: eStyle is not defined\nIt's clear eStyle is never defined in that file (but I don't know how cytoscape does globals)\n. ",
    "xzhu06": "It is third party web platform app - \"motion\" which using npm install dependencies, when start our web app, it complains \"version\" not exist. After coping version.json to version will solve the problem. \n. Thanks! We will.\n. ",
    "sindhukothe": "I have made an attempt to fix this in my fork with the following changes:\nhttps://github.com/sindhukothe/cytoscape.js/commit/5215432ead19cc6b25d4de0fcba991a1eb0f092d\nThis seems to be working. Please let me know if these changes are correct.\n. @maxkfranz, Thanks for the comment. I assumed that they do. Because each prefix (source/target) label would have different content and the content would change the dimensions of the label.\n. It is working as expected. Thank you for your help;.\n. This fix seems to have fixed this issue. Please let me know if this is correct:\nhttps://github.com/sindhukothe/cytoscape.js/commit/70fb00f9c3aa4b653b3647c3f85c1fd9da1f7d6b\n. I verified and it is working good. Thank you for your help.\n. ",
    "danbars": "@maxkfranz Did you have any progress with it?\n. ",
    "chrjs": "Thank you @maxkfranz: I solved my case by increasing control-point-step-size to 100.\n. ",
    "fracz": "The question on SO\n. ",
    "selimfirat": "It works, thank you.\n. Makes sense now, thanks.\n. ",
    "gouldingken": "I tried using opacity 0.0001 but is not an acceptable solution because it's not the same as setting display to none. Edges will still be displayed for those nodes. If you set display \"none\" on either node, the connected edges will be hidden.\nAlso, your solution #1416 won't help in the example I outlined because the nodes won't be dragged and when they reappear they will no longer maintain the same relativePosition.\nRemoving and restoring may be a better way to go ultimately, but it's simpler to control the visibility based on a style and I don't see why it can't work this way.\n. This is working great now. Thanks for the quick fix!\n. ",
    "EyMaddis": "Just a small heads up that the title is not correct, since the variable i does not actually have any helpful info for propertynames. Array iterations would/should not use Object.keys().\nAnother thing to note is that .map() and .forEach() might be a better choice when it comes to function without side effects since it is easier for engines to optimize (and more readable), (not really a reference, but) see this article\n. see PR #1527\n. This happens when destroy() is called in between frames.\nFor example the line within cose.js (156) which @Zigur mentions runs asynchronously due to requestAnimationFrame:\nhttps://github.com/cytoscape/cytoscape.js/blob/75a15818da5662c9e78930b157f8745885aca6a8/src/extensions/layout/cose.js#L154-L155 \nWhen the instance gets destroyed before the animation frames is executed, refreshPositions() will crash because the renderer was set to null.\n. @maxkfranz it seems that all node are now on the same position and huge.\nCould you provide a git commit hash/branch? That way I can use npm as dependency management as I did before testing the snapshot. I could then make sure that it is loaded exactly as the release version.\nThanks\n. @maxkfranz sorry for the delayed response.\nI installed it via npm and can confirm, that the problem mentioned above does not change based on the dependency management.\n\nit seems that all node are now on the same position and huge.\n. @maxkfranz in that case it \"works\" \ud83d\ude1b . Sorry for the misunderstanding.\n\nWhat I would have expected was some randomisation, but based on a fixed seed, that is how cose-bilkent does it.\n. I created a PR: https://github.com/cytoscape/cytoscape.js/pull/1527\n. duplicate of https://github.com/cytoscape/cytoscape.js/issues/1440\n. ",
    "kikki": "Hi maxkfranz :-).  Thanks for Input\nI thought this at first, too.\ncy is init in $(document).ready(function(){cy});\nI tested $(document).ready(function(){\n                    setTimeout(function() { cy}, 200);});\nand $(window).load(function() {cy}); too. \nI don\u00b4t tested (function () {}) ();\nSometimes  r.container :  [object HTMLDivElement] it invites.\nSometimes is r.container : [object Object] and Error.\nIf I set r.container = this.cy.container(); Error exist  too.\nWhat makes cytoscape.js: 14505? What will be set on this position in cy?\n. For information:\nI had initialized controller after DOM with\nangular.bootstrap(...);\nNow I initialize angularjs in HTML-Code.\nUntil now I had no error message ....\nThus, I  assume that the processes require asynchronous of mutual resource ...\n. ",
    "finger563": "Why can the parent not be sized based on either set or default width, height, and padding properties?  It doesn't make sense to have to remove the child elements, keep track of them, and then restore them later when all we want to do is hide the children from being rendered (and have the parent size and total used area recalculate accordingly).. @maxkfranz I think that might have been my issue then; I was using an older cytoscape install that was v2.x.  I'll try porting my code over to v3.x and see if that performs how I like :)  Thanks!. Ah yes, I forgot to explicitly state that B does already exist ( it was actually the scenario I showed as the example from my deployment of cytoscape in the top image ).  \nRegarding A and the issue you referenced, so if that were the case, then for a child going to a parent the arrow would terminate on the inside edge of the parent state (as in the bottom image of A)?  If so, then yes, that is exactly what I'd like to have :)\n. That being said, I do feel like the line routing for the edges in B could use some work, but I suppose that would be a separate issue?. Related to this, the behavior you describe differs if the edge is within another node, where no panning / dragging happen even if they're enabled.  I agree we should allow the developer to programmatically specify how / where / when dragging or panning is enabled even on a per-node / per-edge basiss.  For instance, I'd like to be able to disable dragging objects (which I can) but enable panning by clicking anywhere, not just on the background of the graph (which I can't: clicking / dragging inside compound nodes does nothing in that case). . I think it's at that point that the programmer / user should be able to select what actions are enabled by ctrl, alt, meta/super; e.g. drag is default, pan is ctrl, box select is alt, and the programmer can have another option for meta/super (e.g. copy / re-parent). @rdecapomaranca have you seen https://github.com/cytoscape/cytoscape.js-panzoom ? I'm currently using that in my project until this feature gets implemented.. I'm also seeing this on Linux with Nvidia GTX 1080 and proprietary drivers - clicking within the canvas shows some nodes / edges from the canvas randomly. specifically when I switch tabs - every time i go to another tab and then back to the tab with cytoscape my nodes have disappeared or are incompletely shown. ",
    "gulian": "Update: I've try to update to 2.6.12\nBatching isn't working (fail on `endBatch()'), got theses errors : \n\n\nWithout batching, everything is working properly, but I really need it for performance reasons ...\n. Hi, \nThanks for answering so quickly. \nI might have reproduce my batch related issues : JSBin\nThe result is not the same when using batch or not.\nMaybe I'm using it in the wrong way ? \n. Hi,\nSorry for the late answer. \nI am unfortunately not available to test it until monday. \nBut I Will tell you as soon as possible. \nRegards, \nGulian \n. Hi @maxkfranz, \nThe good news are : \n- Batch seems to work better, no more error in console, and this is a great great news (~20 seconds without batching, ~2 seconds with) \n- Nothing seems to be broken more\nI still having issues on compounds nodes, when moving it in and out from other nodes (they are loosing styles). Do you want me to create another issues, or do we continue on this one ? \nI'll try to reproduce it on a small JSBin quickly. \n. I finally succeed to reproduce the issue with a few lines of code (Firefox, Safari & Chrome) : http://jsbin.com/quricilavu\nHere a screen capture, just in case : \n\n. Ok thanks.\n. Hi, \nMay be related to https://github.com/cytoscape/cytoscape.js/issues/1452\nGulian\n. The snapshot works for me too ! And the performances doesn't seems to be affected. \nWhen do you plan to release v2.7.6 ?\nThanks a lot!\nEdit: My bad, you've already released it.\n. ",
    "okoriko": "It seems this bug appear from 2.7.3 to 2.7.4. Reverting to 2.7.3 fixed it in my case.\n. ",
    "soomin-maeng": "Thanks for the suggestion!\nI reuploaded it!\n. It works perfectly.\nThank you for the quick response!\n. Hi,\nI tried the background option, but the display for other edges became weird as the edges become thicker.\nThanks for the quick reply!\n. Thank you for the prompt reply.\nI did try the text-background-color property.\nBut, I encountered a number of problems.\nThe first problem I had with the background colour is that it starts to break other lines when two edges become close enough.\nwith break,\n\n\nwith background color,\n\n\nThe second problem is that when the edges become thick, the option with background color is not sufficient to do the same job as the line style 'break' does unless the border of the test gets calculated for that width of an edge. Also, even with the calculation, the first problem is not solved.\nwith break,\n\n\nwith background colour,\n\n\nLastly, when there are lots of thick edges, it becomes too obvious that the lines are not cut but rather covered with a box due their uneven cut near the labels.\n. Yes, but it creates same problems as it was with background colour.\nAlso, the cut in the edges is even stranger than than the cut with the background colour.\n\n\n\n\n. Thank you for the suggestions.\nI will come back to this when I get a better idea to solve the problem.\n. Thanks for the reply!\nI see why it is difficult to implement this.\nthank you!\n. I see. Thank you for the reply!. Sure, I attached a zip file that contains a video of the bug behaviour and the javascript file. The javascript file is the modified version of one of the demo on js.cytoscape.org to show the behaviour. Sorry for the confusion.\nbug.zip\n. ",
    "YacoobHolden": "@maxkfranz apologies about the delay - snapshot resolves my issues! Thanks!\n. ",
    "arddor": "The general way I implemented cytoscape components is like the following.\nI have a component which renders cytoscape:\n``` javascript\nimport React, {Component} from 'react';\nimport cytoscape from 'cytoscape';\nimport conf from './conf';\nlet cyStyle = {\n  height: '400px',\n  display: 'block'\n};\nclass Cytoscape extends Component{\n  cy = null;\ncomponentDidMount(){\n    conf.container = this.refs.cyelement;\n    let cy = cytoscape(conf);\nthis.cy = cy;\ncy.json({elements: this.props.elements});\n\n}\nshouldComponentUpdate(){\n    return false;\n  }\ncomponentWillReceiveProps(nextProps){\n    this.cy.json(nextProps);\n  }\ncomponentWillUnmount(){\n    this.cy.destroy();\n  }\ngetCy(){\n    return this.cy;\n  }\nrender(){\n    return \n  }\n}\nexport default Cytoscape;\n```\nThen in a parent component:\n``` javascript\nimport React, {Component} from 'react';\nimport Cytoscape from './Cytoscape';\nclass Parent extends Component{\n  componentDidMount(){\n    // this is a good place for events\n    this.refs.graph.getCy().on(....)\n  }\nrender(){\n    return (\n        \n    )\n  }\n}\nexport default Parent;\n```\nThis allows you to pass down json elements and still access all other functionalities with getting access to the cy in the child component. You could for example add an event listener which on add dispatches a redux action and pass down the props.\nI would be interested if anyone sees problems with this approach.\n. ",
    "mmaclach": "I'm working on implementing something similar using redux, but not in react. Thanks for the tips above.\nWhat I'm looking at is keeping a cy object as the state and returning that cy object (or selections of it) to components.\n. @ketysek why not try removing the old elements and reusing the same graph instance?. Solved, thanks. \n. sounds great, thanks. ",
    "madebyafox": "Hi guys  - this is FANTASTIC - thank you for taking the time to work on reusable components for cytoscape!  I understanding you're actively developing... but wondering if you have any examples or tutorials available?  \n@keiono I've been trying to use the CyNetworkViewer component, but can't seem to get past the setup stage :-/   (is there an npm package for CyFramework?)   \nThanks!\ncontext: I'm working on an open source cybersecurity project involving the visualization of a MASSIVE knowledge graph. I hope to leverage cytoscape.js for its graph layout capabilities, but as we are using React - everything is more complicated. \n. @keiono  Thanks for the link to your work-in-progress application, as well as the source code.  This is super helpful!  \nWe'll be eagerly awaiting your progress and news about the 1.0 release! \n. ",
    "Flui": "Hi I am also using cytoscape with React-Redux written in ES6. Has anybody wrote an cytoscape extension and got it work with react. Beacause everytime I tried to import an cytoscape extension I got the following error for registrating that extension to cytoscape \"Uncaught ReferenceError: cytoscape is not defined\".\nEven though the variable cytoscape exists.\n. it seems as it has to do with the segment. my poblem is that sometime i need segments and sometimes not . Is there a way to use segment syle, node-position for edge-distance without segmentation?\n. My usecase is, hat I have two nodes and there positions in x and y coordinates and edge should go along a couple of supporting-points that are also defined with x and y coordinates.\nSo my fist problem was to get the weights and distances of these supporting points. Or is it possible to use x and y coordinates instead of weight and distance. Calculating he weight and distance is no the problem bu I would make some things easier id I could use the coordinates.\nAnd If i got it right bezier can only show one supporting point.\n. ",
    "guangningyu": "My dataset is not large and @arddor 's method works fine for me. \n. ",
    "bjonnh": "@keiono  Any updates ?. ",
    "justbill2020": "@arddor  what is the conf.js file you're importing in your example?\nalso, is there any changes you would recommend it seems that refs is advised against now i'm using react v15.6.1. ",
    "ketysek": "Hello, I've got one small problem with destroying cytoscope ... Imagine a list of posts, each post has its own graph ... when I click to view some post's detail, the graph is rendered, but then I go back and click on another post's detail -> at this moment, I can see the graph of previous post for a while, then it renders actual post's graph. How can I prevent this? I've adapted @arddor solution and got this in my componentWillUnmount method...nothing works\ncomponentWillUnmount(){\n    this.cy.json({ elements: undefined })\n    this.cy.destroy()\n    console.log(\"cy:\", this.cy) // not destroyed yet\n  }. @mmaclach Ok, so I've tried this, but it doesn't solve the the problem\n```\ncomponentDidMount() {\n    if(this.cy === null) {\n      const container = {\n        container: this.containerDOM\n      }\n  this.cy = cytoscape(\n    Object.assign({}, container, cytoscapeDefaults)\n  )\n}\n\n}\ncomponentWillUnmount() {\n    this.cy.elements().remove()\n  }\nshouldComponentUpdate() {\n    return false\n  }\n```. ",
    "byF": "@keiono hi, has this effort been abandoned?. ",
    "frozenL": "@arddor hi, I tried to do it in your way but an error occurred:\nTypeError: Heap is not a constructor\nnew LayeredTextureCache\nnode_modules/cytoscape/dist/cytoscape.cjs.js:24691\n  24688 |   return b.reqs - a.reqs;\n  24689 | };\n  24690 | \n  24691 | self.layersQueue = new Heap(qSort);\n  24692 | \n  24693 | self.eleTxrCache = eleTxrCache;\n  24694 | \nin the same file, on line 24641, it has\n24641 | var Heap = __webpack_require__(8);\nDo you know what's going on...?. ",
    "pconihout": "I don't really agree with you, there is always a delay with me between adding elements and applying layout i guess...\n. ",
    "Divyanshu07": "How do i position the nodes without giving the x & y position? \n. ",
    "jiangliu": "I never call .destroy:) Just call showSpaceCy.prototype.showRoom() and alike repeatly.\n    showSpaceCy.prototype.showRoom = function(row) {\n        var self = this, eles = this.generateRoomEles(row);\n        if (this.uiInfo.autoSize) {\n            this.$container.height(this.yOffset * 2 + \"px\");\n            this.xPanBy = 0;\n            this.yPanBy = 0;\n            this.uiInfo.padding = 10;\n        } else {\n            this.xPanBy = -30;\n            this.yPanBy = 25;\n        }\n        this.initUI({container : this.container,\n                     elements : eles.cnodes,\n                     style : roomStyle,\n                     layout : { name : 'preset', fit : autoFitRoom, padding : self.uiInfo.padding },\n                     minZoom : 0.2,\n                     maxZoom : 3,\n                     selectionType : 'additive',\n                     wheelSensitivity: 0.4,\n                     ready : function(evt) {\n                         if (autoFitRoom) {\n                             evt.cy.panBy({x:self.xPanBy,y:self.yPanBy}).$('node').lock();\n                             //Trick to work around a issue of cytoscape\n                             if (!self.uiInfo.readyCalled)\n                                 setTimeout(function(){ self.fit(); }, 1);\n                         } else {\n                             evt.cy.pan({x:self.xOffset,y:self.yOffset + 50}).$('node').lock();\n                         }\n                     },\n                    }, 'node.parent', 'node.device');\n        return eles.tnodes;\n    };\n. One more note, the above code works with a previous version of cytoscape, but I can't figure the specific version number now.\n. The .destroy() is implicitly called, please refer to attached image for call stack.\n\n. \n\n. sorry, failed to upload screen shot, so the call stack is\ncyWrapper.init() -> cytoscape() -> Core -> util.extend.destroy() ->corefn.destroyRenderer(),\nthen _private.renderer is set to null, thus cause null reference later.\n. I feel it has some relationships to mouse event handling. We implemented a file directory like structure. Upon a mouse click event on an element, it will reinitialize the cytoscope instance to redraw child objects.\nAnd we have enabled click, select, unselect etc on all cytoscape objects.\n. got it, thanks:)\n. ",
    "Zigur": "I am having a similar issue using 2.7.8 (2.7.6 works fine, instead) :\nUncaught TypeError: Cannot read property 'recalculateRenderedStyle' of nullelesfn.boundingBox \n@ dimensions.js:758 getFitViewport \n@ viewport.js:250 fit \n@ viewport.js:201(anonymous function)\n@ cose.js:156\nEDIT: sorry I had to remove the demo at the moment, if you are interested in reproducing it, please let ,e know.\n. ",
    "buffpojken": "Hmm, not really sure I understand your thought on extension vs layout. The logic of determining which node is visible at a given zoom level should then be in an extension since it doesn't map a node to a position - but the actual calculation for x,y should be kept in a custom layout? Since that's dependent on current zoom level? \nOr am I misunderstanding and the extension should basically calculate this on any relevant change, set x,y for any nodes dependent on zoom for position and just pass it on to a (perhaps parameterized) layout for actual rendering/positioning? \n. Also - thanks for taking the time to reflect on this, want to make sure I implement it cleanly according to how it should be done.\n. So, your recommendation on working with layouts applied to subsets of graph lead me straight to the right place. \nA dynamically calculated bounding box together with calculating the radius-option on a circle layout on zoom changes and then just re-running the pre-created layout works like a charm. \nThis leads me to a another \"best practice\"-question. How \"expensive\" is ele#makeLayout? Is it better to create a lot of layout-objects with different sets of nodes in them or is it better to create them dynamically on changes in zoom? \n. Okey, check - then I'll probably pre-create all layouts - their immutability isn't a problem, the exact set of nodes they need to be applied to is known at all times, so I can just recreate layout whenever required. \nMany thanks for your patient replies!\n. I'm having repro of this reliably as well on 3.1.4, see linked movie (please mute the sound - I'm travelling so recorded on a train) - https://www.youtube.com/watch?v=4ej2o6n8be0&feature=youtu.be\nWhen the user enters \"123\" and hits the green button, I perform a Bellman-Ford traversing the graph from current node, calculating some weights based on items in data() and then revisits all nodes and add/remove a class setting the background-image to a lock based on calculated weight. Any kind of styling change - such as having a style-change on hover (as shown by the smaller, yellow node) refreshes the image correctly, as does clicking. \nWhat I believe to be the relevant styles: \n{\n            selector: 'node',\n            style: {\n                'width': '120', \n                'height': '120',\n                'background-color':'#5a5a5a', \n                'border-opacity':0,\n                'background-image': function(el){\n                    if(el.data('image')){\n                        return el.data('image');\n                    }else{\n                        return \"none\";\n                    }\n                }, \n                'z-index': 2,\n                'background-width': 'auto', \n                'background-height':'auto',\n                'background-fit': 'cover'       \n            }\n          },\n          {\n            selector: '[metaLockedBy=\"locked\"], [lock_state=\"locked\"]', \n            style: {\n                'background-image': function(el){\n                    if(el.data('image')){\n                        return el.data('image') +  ' /assets/images/theme-2/icons/graph/node-locked.png';\n                    }else{\n                        return ['/assets/images/theme-2/icons/graph/node-locked.png'];\n                    }\n                }\n            }\n          },\nMight this be related to using a function for setting the value? Or having variously one / two background images?\n. Nope, I'm very sure it's not an image-issue because it is only when this specific class-change happens. We have non-function based image changes which are 100% reliable.\nI'll see if I can isolate the issue - but I have verified using other images without any change/fix in behavior.. Okey, I have more info. I have 100% repro when the selector used is only data-based, as in: \n{\nselector: '[metaLockedBy=\"code\"], [lock_state=\"code\"]', \n  style: {\n   'text-opacity': 1,\n   'background-image': function(el){\n      if(el.data('image')){\n        return el.data('image') +  ' /assets/images/theme-2/icons/graph/node-passwd-protected.png';\n      }else{\n        return ['/assets/images/theme-2/icons/graph/node-passwd-protected.png'];\n      }\n    }\n  }\n}\nbut if I switch to using classes instead, it works just fine?. I\u2019ll see if I can extract it!. Hmm. Sorry for butting in again - but I just realized we actually found a workaround for our version of this issue by changing the relevant styling changes to use explicit classes instead of data-selectors, and then (due to other, unrelated refactoring) separating the removal of the \"outdated\" classes and the adding of the new, relevant ones into two separate method calls - just after one another so still within the same context and similar.. Aah, I understand - so basically no change of \"permitted\" actions mid-gesture. \nHaving had a quick read through automove I believe it suits my purposes just fine, thanks for the headsup!\n. Will do, thanks!\n. Aaah, I see - it makes a lot of sense if cy.batch() didn't exist at the time of implementation. \nI'll use collection.map for this - thanks for the prompt reply!\n. Roger that, thanks for taking the time to provide the example!. Oh, sure thing - the weird behavior I was seeing was regarding font-size and opacity - which ought to be numeric? \nBut I'll try to isolate a test case - will update here!. Hmm, never mind - I can't seem to isolate a test case anymore. I'll re-open this if I manage to isolate one in the future.. Hmm, further thought - maybe not a bad fit after all, due to the zoom-pan interdependency? . Hmm, sure thing - but that doesn't make it possible to animate/pan the viewport to a corresponding position? \nAs in: \nWhen tapping a node, animate viewport so as to place said node 300px right of canvas edge? . That was my initial thought as well - but the moment you also throw a zoom into that animation, that pan goes all over the place?. That was my thought as well - but no go (or I've gone completely blind in which case I apologize): \nlet pos     = node.renderedPosition();\n    let currentZoom     = this.graph.cy.zoom();  // 0.6\n    let desiredZoom     = 1; \n// Pan the viewport so as to place node 300px from right edge and vertically centered on canvas\n    let newPan          = {x: this.graph.cy.width()-300, y: this.graph.cy.height()/2}\n    let desiredPanBy    = {x: newPan.x-pos.x, y: newPan.y-pos.y}\n    let scaledPanBy     = {x: desiredPanBy.x*(desiredZoom/currentZoom), y: desiredPanBy.y*(desiredZoom/currentZoom)}\n    this.graph.cy.animate({\n      zoom: desiredZoom,\n      panBy: scaledPanBy\n    })\nbecause this results in all sorts of weird panning animations?. So, some further investigation. I'm pretty sure there's some confusion (probably) on my part regarding model positions vs. rendered positions. \nSince cy.animate({zoom: N, center: {eles: aNode}}) works exactly like my desired behavior, I've read through the implementation. By re-implementing my own implementation based on that very same implementation, it now works - but according to my understanding of model positions vs. rendered positions it shouldn't. \n```\n    let zoom    = 1.1;\n    let xDiff   = (this.graph.cy.width()/2)-300;\n    let bb = node.boundingBox(); \n    let w   = this.graph.cy.width()\n    let h = this.graph.cy.height();\n    var pan = {\n      x: ((w - zoom * ( bb.x1 + bb.x2 )) / 2)+xDiff,\n      y: (h - zoom * ( bb.y1 + bb.y2 )) / 2\n    };\nthis.graph.cy.animate({\n  zoom: 1.1, \n  pan: pan\n})\n\n```\nThis works exactly as intended. But boundingBox returns model positions, not rendered positions? How can I just mix-n-match the positions provided with boundingBox (which ought to be model positions) with my renderedPosition-based offset (300px), scale them - and then throw them both to pan - which ought only handle rendered positions? . Hmm, check - the only reason I filed it as a possible regression was due to the description of #1331.\nI get why you'd want to model a tapstart as a grab - I'll use a debounced drag instead then! \nThanks!. Exepcted look: \n\n. This is the latest version of OS X and a freshly updated Safari. I'll see if I can isolate a test case.. Just for context - this is now the zoom-changes are implemented: \n```\n    useZoomDependentStyles(){\n         this.zoomHandler = Utils.debounce((e) => {\n            this.updateZoomDependentStyles()\n         }, 25);\n     this.graph.cy.on('zoom', this.zoomHandler);\n}\n\nupdateZoomDependentStyles(){\n    let zoom = this.graph.cy.zoom();\n    let _add        = '';\n    let _remove = ''\n    switch(true){\n        case (zoom > 1.3): \n            _remove = 'zoom_2 zoom_3 zoom_4'; \n            break;\n        case (zoom > 0.96 && zoom < 1.3):\n            _add = 'zoom_2'\n            _remove = 'zoom_3 zoom_4';\n            break;\n        case (zoom > 0.4 && zoom < 0.96):\n            _add = 'zoom_3'\n            _remove = 'zoom_2 zoom_4';\n            break;\n        case (zoom < 0.4):\n            _add = 'zoom_4'\n            _remove = 'zoom_2 zoom_3'\n            break;\n    }\n    let that = this;\n    this.graph.cy.batch(function(){\n        that.graph.cy.$('node').addClass(_add).removeClass(_remove);\n        that.graph.cy.$('edge').addClass(_add).removeClass(_remove);\n    });\n}\n\n````\nAre we doing something obviously wrong that could result in this? \nI've tested not using cy.batch but apart from lower performance, the rendering issue still occurs.. Along with these style-definitions for classes: \n{\n            selector: 'edge.zoom_2', \n            style: {\n                width: 4\n            }\n          },\n          {\n            selector: '.zoom_3[?group]', \n            style: {\n                \"content\": \"\", \n                \"border-width\": \"3px\"\n            }\n          },\n          {\n            selector: '.zoom_3[!group]', \n            style: {\n                \"font-size\":36\n            }\n          },\n          {\n            selector: 'edge.zoom_3', \n            style: {\n                \"width\": 6\n            }\n          },\n          {\n            selector: '.zoom_4[?group]',\n            style:{\n                \"display\": \"none\"\n            }\n          },\n          {\n            selector: '.zoom_4[!group]', \n            style: {\n                'font-size': 45\n            }\n          }, \n          {\n            selector: 'edge.zoom_4', \n            style: {\n                'width': 8\n            }\n          }. So, I've managed to isolate a very, very simple test-case which exhibits the bug (sometimes). The attached zip contains a super-simple graph, two nodes and an edge with some styling and scrolling back/forth in Safari will sometimes (not everytime but often enough) result in the render bug - see the attached screenshot. \ncytoscape-test-package.zip\n\nThe test uses the latest stable version of cytoscape and the screenshot is taken in Safari Version 10.1.2 (12603.3.8).. Unfortunately, I'm able to reproduce on latest Safari as well, Version 11.0.1 (12604.3.5.1.1) with the attached screenshot: \n\n. Your reproduction matrix matches ours - it happens sometimes (but still often) on Safari, once or twice on Firefox and we've never managed to reproduce it on Chrome. \nI'll see if I can run unstable against the case and reproduce. \nNo worries at all, grateful for all the time you're spending on cytoscape and making it available to all of us!. It seems to be fixed for me as well, can't repro at all with unstable - neither the test case nor our full application. \nI've now deployed unstable to our internal testing setup and tasked QA with prioritising this today, so hopefully we'll have any recurring repro back from them during the day.. Hmm, just to check - unstable has apparently reverted the cyTarget => target change from a while back - is this intentional? . I've got bad news. Unfortunately both me and QA could reproduce it on latest Safari, both in the test case and in the actual application using unstable, reporting version as \"snapshot-564e9ad5ee-1466537151217\".\nSee attached screenshot from an instance running this cytoscape-version.\n\n. Hmm, weird - but thanks! I'll test it asap tomorrow morning!. Well, I have good news and bad news. \nThe good news is that it's -almost- fixed. The bad news is that while it now occurs a lot more seldom, it still occurs. Our QA-people used to able to trigger it quite regularly - today (with the new build) it occurred very rarely in their testing, but still occurred?. Yes, though - as stated above, much more rarely.. @maxkfranz - I've put this on the QA pipeline, will hopefully have results from them tomorrow!. I can confirm from QA that they can no longer reproduce at all with latest snapshot. Awesome work! . Sure thing! I\u2019ll check with them later today when people are back from the weekend.. QA can no longer repro at all with the latest snapshot!. Hmm, I see.\nThe thing is that we need to differentiate between an explicit pan and a zoom-caused pan due to implementing a parallax-effect in the background. Based on current event ordering we\u2019re setting a flag on zoom, and breaking on it in pan if set - which works just fine.\nNot sure the viewport-event would help us out with that - unless that event has a fixed order in regards to pan?. Oh, I see - I did not know that, that makes a lot of sense! Many thanks for the pointer!. Unfortunately, that's not the case. It's almooooost the case. In the attached screenshot, I've just hooked up a console-print as follows: \n````\n        this.graph.cy.on('pan', this.panHandler = (e) => {\n            console.log(\"pan:\" + e.timeStamp)         \n        });\n    this.graph.cy.on('zoom', function(e){\n        console.log(\"zoom:\" + e.timeStamp)\n    })\n\n````\nand roughly 2/3 of the times, they reflect the same tick, however, 1/3 of the times - on of them is off by 1. \n\nFor my case, that doesn't really matter since I can check if it's within X for acceptable results, but in case something else depends on them having the same timestamp I'm reopening the issue? \n. Sure thing, this turns off the selection itself - but it still draws the selection box? . ",
    "StewFidgeon": "Thanks Max.\n. ",
    "webwizrd": "Partially fixed: numbers now show up in selectors for all \" = \" selectors. The one with \"<=\" still doesn't work correctly, but extracts as \"selector\":\"node[<=status]\"\n. ",
    "JGMarshall": "A quick test confirms that your snapshot fixed the issue for me on Chrome, Edge, and FireFox.\nThanks for your help!\n. The version you are using is older than the one I made the original report on, and Max has tagged it in a milestone released in September of last year. I don't see the point you're trying to make?. ",
    "omeriko": "I'm facing the same issue with Cytoscape.js 2.7.7, is there a regular version that includes the fix, since we want to work with bower? . When you say man has \"tagged it in a milestone released in September\" im not sure i understand what u mean? Does \"tag\" meas \"version\" that is some version number of the library that includes that fix? . ",
    "leots": "Hello all, \nI am using version 3.1.1 of Cytoscape, and this issue still appears for me sometimes under the following circumstances: using latest version of Firefox, the Cola.js layout, and it happens most often when having the development tools open. \nI have a demo here: https://jsbin.com/hinuhowoji/edit?js,console,output\nIt appears to not happen in Chrome at all, or when using Cytoscape 2.7.X versions after 2.7.9. Is this a misconfiguration on my end, or is there some other cause?\nThanks a lot!\nEdit: it seems to be reproduced more often when you have the \"disable HTTP cache when toolbox is open\" in the Firefox console's settings. Hmm, can you try again? I didn't change anything but the lines that include Cola.js and Cytoscape cola from rawgit are in the HTML... On the 2 computers that I tried the demo link, the nodes are using Cola and the problem is shown, without any error in the console.. ",
    "dbrodie": "This is happening to me intermittently with cytoscape 3.1.1 on Chrome and with the dagre layout. I will sit on the page and do a Hard Reload and once every ~5 times it will happen. Clicking the node or restyling the graph will fix it. My nodes are a bit complicated with a pie, image and background/border.\nCurrently, to fix it, I am reapplying the styling to the graph in dagre's stop function.. Sorry I was busy getting the code working, I'll sit on it next week to try and create a reproducible demo.. ",
    "trustao": "I have the same problem. When I zoom or click on the operation, the image is rendered. How can I solve this problem?@JGMarshall. ",
    "brassard": "@dbrodie : did you ever fix your issue with this? I'm seeing identical behavior.. FYI @maxkfranz : the behavior described in the comments from @leots and @dbrodie have surfaced for us in Firefox after upgrading from 2.4.1 to 3.2.2.\nThe graph uses cola and using spread instead renders correctly.\nWe've also seen only the end arrows of the edges show up on a rare occasion. \ud83d\ude33\nSo in summary:\n- Firefox v57.0\n- cytoscape v3.2.2\n- cola layout v2.0.0. Also, clicking on a node in the graph shows it, but also occasionally shows other nodes in the graph (not always adjacent). In the case where only the edge arrows showed up, clicking on the nodes never showed the svg background images\nThis seems to indicate that some kind of rendering queue may not be draining properly and selection triggers some number of render events to be emitted.\nSort of shooting in the dark here, but maybe this would ring a bell for somebody.. Thanks @buffpojken. \nStill sounds like a bug in cytoscape or cytoscape-cola.js, since things appear randomly on node click. I don't know enough about how styling events are triggered in the layouts to know why this might happen.. Yea... I know I need to boil it down more to get a resolution. Still plugging away... going to try a few more avenues. Will take a look at these links too. Thanks.. @maxkfranz I updated the original demo in this ticket to use cytoscape-cola layout and grab the versions that we are currently on: http://jsfiddle.net/g83Lpaxh/11/\nInterestingly, the behavior shows up for both Chrome and Firefox. There is some caching that fixes it on some subsequent loads, but with the dev tools open and cache disabled, it repeats reliably.\nUPDATE: Here is a working (failing) version with the current masters of cytoscape, cytoscape-cola, and webcola: http://jsfiddle.net/g83Lpaxh/13/\nYou'll see that that the bgimages fail to load sporadically or all the time. They load on click.. Thanks @maxkfranz !. Thanks @maxkfranz. As I understand it, IE is currently listed as a supported browser for the library, but I completely agree with your points and would understand if Cytoscape dropped support for IE in the future. \nUnless support was already dropped with 3.x! In that case, I apologize for opening an issue!. Thanks for the thorough response, @maxkfranz.\nI'm totally on board with your perspective and believe that contributors should ultimately be able to use the latest tech and not be concerned with breaking awful, obsolete browsers.\nUsage of babel and babel-polyfill definitely seems like an essential piece for IE support here and any other modern JS libs. Do you think that we should update the documentation to mention it? If nothing else, we can add notes to the issue template and also quickly close tickets like these in the future. \ud83d\ude04 . Looks like that fixed it!\nWhen do you expect 3.2.7 to land?. @buffpojken -- will your QA team be looking at this one too? Anything yet?. ",
    "benc-uk": "I tried it in an plain old <div class='test'> and <img class='test'/> with a css class defined as follows\n.test {\n    width: 200px; height: 200px;\n    background-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"50\" width=\"50\" viewBox=\"0 0 50 50\"><path fill=\"#3999C6\" d=\"M49.7 25.7c.5-.5.4-1.3 0-1.8l-2.4-2.4L36.5 11c-.5-.5-1.2-.5-1.7 0s-.6 1.3 0 1.8l11.3 11.1c.5.5.5 1.3 0 1.8L34.6 37.2c-.5.5-.5 1.3 0 1.8s1.3.4 1.7 0L47 28.4l.1-.1 2.6-2.6zM.3 25.7c-.5-.5-.4-1.3 0-1.8l2.4-2.4L13.5 11c.5-.5 1.2-.5 1.7 0s.6 1.3 0 1.8L4.1 23.9c-.5.5-.5 1.3 0 1.8l11.3 11.5c.5.5.5 1.3 0 1.8s-1.3.4-1.7 0L2.8 28.5l-.1-.1-2.4-2.7z\"/><path fill=\"#7FBA00\" d=\"M18.2 24.8c0 1.9-1.6 3.3-3.3 3.3s-3.5-1.6-3.5-3.3 1.4-3.3 3.5-3.3c2 0 3.3 1.6 3.3 3.3zM28.3 24.8c0 1.9-1.6 3.3-3.3 3.3s-3.5-1.6-3.5-3.3 1.6-3.3 3.5-3.3 3.3 1.6 3.3 3.3z\"/><circle fill=\"#7FBA00\" cx=\"35.2\" cy=\"24.8\" r=\"3.3\"/></svg>');\n}\nAnd this displays fine in Chrome with the expected image displayed in the background\n. I tried encoding the SVG data and it still doesn't work in Cytoscape, it still thinks it is an external URL and attempts to fetch it over HTTP\nstyle:{'background-image': \"url('data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20height%3D%2250%22%20width%3D%2250%22%20viewBox%3D%220%200%2050%2050%22%3E%3Cpath%20fill%3D%22%233999C6%22%20d%3D%22M49.7%2025.7c.5-.5.4-1.3%200-1.8l-2.4-2.4L36.5%2011c-.5-.5-1.2-.5-1.7%200s-.6%201.3%200%201.8l11.3%2011.1c.5.5.5%201.3%200%201.8L34.6%2037.2c-.5.5-.5%201.3%200%201.8s1.3.4%201.7%200L47%2028.4l.1-.1%202.6-2.6zM.3%2025.7c-.5-.5-.4-1.3%200-1.8l2.4-2.4L13.5%2011c.5-.5%201.2-.5%201.7%200s.6%201.3%200%201.8L4.1%2023.9c-.5.5-.5%201.3%200%201.8l11.3%2011.5c.5.5.5%201.3%200%201.8s-1.3.4-1.7%200L2.8%2028.5l-.1-.1-2.4-2.7z%22%2F%3E%3Cpath%20fill%3D%22%237FBA00%22%20d%3D%22M18.2%2024.8c0%201.9-1.6%203.3-3.3%203.3s-3.5-1.6-3.5-3.3%201.4-3.3%203.5-3.3c2%200%203.3%201.6%203.3%203.3zM28.3%2024.8c0%201.9-1.6%203.3-3.3%203.3s-3.5-1.6-3.5-3.3%201.6-3.3%203.5-3.3%203.3%201.6%203.3%203.3z%22%2F%3E%3Ccircle%20fill%3D%22%237FBA00%22%20cx%3D%2235.2%22%20cy%3D%2224.8%22%20r%3D%223.3%22%2F%3E%3C%2Fsvg%3E')\"}\nBoth the encoded and unencoded SVG data string work when I try <img src='data:image/svg+xml,{svg_data_string}'\n. ",
    "monprin": "Yes that appears to fix it! Thank you!\n. It also appears that doing layout.run() twice on the last transformation fixes it, if that helps pinpoint the cause.. Yes that one does appear to fix it as far as I can tell! \nAnd no problem with the delay, thank you for all you work on this project.. ",
    "machineghost": "Thanks for the explanation.  However, I would argue that a better place for that explanation (than here) would be in the documentation.  For instance, you said that the \"how node positions are set is based on the used layout\" ... but the entirety of the \"breadthfirst\" layout documentation is:\nThe breadthfirst layout puts nodes in a hierarchy, based on a breadthfirst traversal of the graph.\nSimply adding a single sentence to that documentation would greatly clarify how the library works:\nIn a breadthfirst layout the distance between nodes is controlled by __________.\nIf similar lines were added to each layout's documentation section I believe it would be a significant improvement.\n. > A generalised note could be added to the \"Layout\" section, but otherwise there's not much I can do.\nHave you ever heard the quote \"Don't Let the Perfect Be the Enemy of the Good\"?\nIf you can control the documentation for X layouts, then why does it matter that you can't control the documentation of Y layouts ... why not improve the documentation of the X layouts you can control?  Especially since we're only talking about a single sentence per layout.\nEDIT\nOk, to be fair maybe two sentences:\nIn a breadthfirst layout the overall distance between nodes is controlled by the `spacingFactor` option, or the `boundingBox` option if the `fit` option is set to `true`.\nThe distance between specific nodes is controlled by ____ (their relative weight?).\nBut the point is, these two simple lines would be of immense help to someone new to the library, and having them for some layouts would be better than not having them at all.\n. Well the location isn't really important: I'd appreciate improved documentation anywhere.\n. Well, thanks for trying, but I really don't think the new documentation is any better.  Telling people \"Each layout has its own algorithm for setting the position for each node.\" doesn't help anyone.\nRemember, the point of documentation is to inform people who don't know what you do.  You know how the algorithm for each layout works.  You know how to control the edge distance in each layout.  But someone trying to use your library has no way of knowing that, and your latest changes don't provide them any way to learn.\n. > Would you be able to suggest better wording?\nThere's a real disconnect here.  I'm saying \"it is impossible to figure out how to control edge length by reading the documentation.\"  The response has been \"we'll update the documentation to mention that it's impossible to figure out\" ... because that's what you're saying when you write \"Each layout has its own algorithm for setting the position for each node\" and don't actually explain what those algorithms are.\nThis isn't anything complex: all you need to do to fix this ticket (if you genuinely want to) is tell people how they can control edge length in the documentation.  Since this evidently varies by layout, that means updating the documentation for each layout (or at least each layout whose documentation you can control) to say something like \"In the breadthfirst layout, edge distance is controlled by A, B, and C\".\n. > Have you taken a careful look at the options for the layout(s) you are interested in? Have you tried experimenting with different values for the options, especially the types of options I mentioned in the docs update?\nWhen I started this project I reviewed several different libraries.  I looked at Cytoscape, D3, Sigma, Vis.js, and Treant.  Every library had an example which was close to what I wanted.  However, with every library except Cytoscape, I was able to use the library's documentation to convert the example to something that looked like what I actually wanted.\nCytoscape was the only library where my nodes were really far away, and despite poring through the documentation I was unable to figure out how to move them closer together.  It's not like the other libraries have a neon red sign saying \"here's the magic option that does what you want!\"  However, with all of them I was able to read the documentation, understand the relevant arguments, and then play with those arguments until I had a graph with nodes closer together (or whatever other aspect I was trying to control; distant nodes wasn't always a problem).\nLook, D3 charts involve math too.  However, D3 has documentation explaining what each programming argument does.  If the foo arg affects how far apart every node on the graph is, the library's documentation says as much under the definition of foo.  But with Cytoscape, when I started with an example and tried to read the documentation to take the example to the next level, I couldn't because the documentation didn't tell me how even a single options impacted something as basic as node distance.\nPersonally, I've given up on Cytoscape, and I'm giving up on trying to convince you that you could serve your users better by explaining further what your arguments/options actually do.  Let's blame the user and my insufficient understanding of geometry, ignore my experience with all those other libraries, and close this ticket.\n. > I think you're taking things personally. Don't. \nRest assured, it's nothing personal.  But a person can only spend so much time/energy trying to convince an open source author before they start feeling like the author would rather defend their documentation than improve it.\n\nAs I've explained before in more detail: Force-directed layouts \n\nLet's stop right there: what is a force-directed layout?  I mean, I know what one is, but as a new user of your library, how do I know?  The term \"force-directed\" appears exactly once in the documentation, where it only refers to (not defines) them.\nSimilarly, nothing in the documentation says \"these layouts are force directed\", nor does the documentation for the layouts themselves say \"This is a force directed layout\".  Breadth-first has a directed option, but that's just whether the tree goes up or down.\nSo, with your knowledge of the library, you may well be aware of commonalities between a certain set of layouts.  But as a new user, I have absolutely no way of knowing that the bezier layout even is force-directed, let alone what the magic common option, shared by all force-directed layouts, controls edge length.\n\nyou must have noticed that those layouts have options called idealEdgeLength and edgeLength\n\nI feel like you're a little out of touch with your own documentation.  edgeLength is literally not mentioned on http://js.cytoscape.org/.  A single layout (cose) has an idealEdgeLength.  And that layout isn't bezier or breadth-first, so once again I'm left with documentation that gives me no indication of how I can possibly move my nodes closer together.\n\nIf you have specific, constructive feedback on how options like these can be made clearer\n\nHonestly, I feel like I've been doing nothing but that throughout this thread.   So allow me to simplify further, with a \"unit test\":\n\nIf you can grab a random person who doesn't know Cytoscape, show them the documentation page, and then ask them \"how do I make nodes closer together in a Bezier layout?\", and they can answer correctly, you've won.\n\nClose the ticket, drop the mic, pop the champagne.  But until then, there's nothing else I can really offer you.\n. ",
    "gbader": "Would you be able to suggest better wording? The best perspective on these things comes from people reading the docs for the first time and that feedback from new readers is highly valuable.\n. ",
    "yujunjie0603": "thanks a lot !\n. srcX = val._private.rstyle.srcX\nsrcY = val._private.rstyle.srcY\ntgtX = val._private.rstyle.tgtX\ntgtY = val._private.rstyle.tgtY\ndistance = Math.sqrt(Math.pow((srcX-tgtX), 2) + Math.pow((srcY-tgtY), 2));\n. thank you for your remind !\nbut i saw that the value srcX is differente of boundingBox.x1 !\nwhat is differente of them plz ? \n. I used the style unbundled-bezier at the edge .\n1 :\n            position_ini = val.boundingBox();\n            srcX = position_ini.x1\n            srcY = position_ini.y1\n            tgtX = position_ini.x2\n            tgtY = position_ini.y2\n            distance = Math.sqrt(Math.pow((srcX-tgtX), 2) + Math.pow((srcY-tgtY), 2));\n2 :\n            srcX = val._private.rstyle.srcX\n            srcY = val._private.rstyle.srcY\n            tgtX = val._private.rstyle.tgtX\n            tgtY = val._private.rstyle.tgtY\n            distance = Math.sqrt(Math.pow((srcX-tgtX), 2) + Math.pow((srcY-tgtY), 2));\nThe result are diffrente between these two means !\n. ok, thanks a lot !\n. Thank you !\nHow to change the position of node plz ?\nI try\n cy.(\"#id\").position({x:100, y:200});\nbut it don't work !\n. for example, Exchange places between two nodes !\nhttp://jqueryui.com/sortable/#default. thank you !. ",
    "tongbin": "I've checked out the latest code and find out this issue has been fixed, so there is an latency between the npm repository and the master code? \n. Thanks for replying. \n. Sounds workable, I'll try it. Thanks.\n. Actually I want to implement something like this:\n\nThe image on the right top corner indicates that the node is locked.\nAnd the text is left aligned at the bottom.\nIf you have any suggestions, it will be great. Thanks. @maxkfranz \n. So I'm considering to add some styles like\n1. top-right-image to add a top right image\n2. text-scale as an one-zero number to make spaces in the label\n3. text-fit-node to make the label starts from left border of the node which only could be applied to valign == bottom and halign center\n. Looks like the layoutstart, layoutready or layoutstop event is triggered too much time. This issue could occur unstably when continuing changing layout.\nAnd BTW, it looks like the cose layout doesn't has animated when set animate true. Need I do something additional to make it animate?\n. Are you looking for something like \njavascript\n{\n    selector: 'node:selected',\n    css: {\n      'border-color': 'red',\n    }\n}\n. ",
    "bastianleirpo": "Thanks a lot @maxkfranz\nThe mapper solved my problem. And yes unfortunately i need to do these kind of unpretty things due to the existing application where Cytoscape should be used.\nFor those who run also in this problem:\nSetup the graph with styling and a mapper for the value of the background-image eg.:\n[...]\nstyle: [\n  {\n    selector: \"node\",\n    style: {\n      \"label\": \"data(label)\",\n      \"font-size\": \"0.7em\",\n      \"background-fit\": \"contain\",\n      \"background-image\": \"data(background)\",\n     }\n[...]\nEverytime you add a node, set the background\nvar label = \"myNode\";\nvar x = y = 0;\nvar background = \"foo.jpg\";\ncy.add({\n  group: \"nodes\",\n  data: {label:label,background:background},\n  renderedPosition: {x: x, y: y}\n})\nGreetings\nBastian\n. ",
    "somedmguy": "Here's a gist that should show the problem\nhttps://gist.github.com/anonymous/fb4d659d9318f71516f4a42e360fecb6\nTo see the problems I mentioned:\n1. tap a node to select it\n2. right-click it to make it disappear\n3. tap the background to unselect it (this will cause its edges to reapper)\n4. try dragging the background (this will freeze cytoscape in firefox)\nIf you switch to visibility:hidden instead of display:none, then the node reappears as well in step 3, but firefox remains working in step 4.\n. Using the snapshot, I removed all of the ':visible' modifiers and have not seen any problems.\n. That's a clever optimization, but here's a unit test that fails it.\n```js\n    it('removed one event stays removed', function( next ){\n      var n = cy.nodes().first();\n      var count = 0;\n      var inc = function(){ ++count; };\n  n.pon('foo').then( inc );\n  n.one('foo', inc );\n\n  n.trigger('foo');\n\n  setTimeout(function(){\n    expect( count ).to.equal(2);\n    next();\n  }, 50);\n\n  n.trigger('foo');\n  expect( count ).to.equal(2);\n});\n\n```\nThen there's the question of a handler that adds another handler.  e.g.\njs\n      n.one('foo', () => { \n        inc();\n        n.one('foo', inc );\n      });\nShould the added handler be executed in the same pass?  I wouldn't expect it to, but it would under the old code, and it may or may not (if another handler removed itself) under the new code.\nAlso, is there a reason promiseOn() wraps on() & off() instead of simply one()?  (Aside from making it easier to write these tests)\nEdit:  Another problem is an event handler triggering another event (e.g. 'tap' handler that converts two quick taps into a 'doubletap') would dirty your emitting control variable.. Ok, it looks like you've covered every edge case I can think of.. And that's what I get for not comparing the latest code with what I'm using before writing an issue.  Thanks!. ",
    "Remimstr": "I am considering implementing this extension so that I can use DOT to define my cytoscape graphs. Clearly there seem to be some unique challenges with this that I'd like to get your opinion on.\nThe DOT language doesn't seem to specify information about the position of the nodes (a feature that I actually prefer for my particular use case). How would you suggest addressing this? I am currently thinking this solution will likely involve trying to space the nodes evenly across the canvas in the X and Y directions.. Ok I guess for my specific use case I'll have to build out additional functionality on top of dot. I'll give implementing this a go using the dotparser library you suggested.. ",
    "jiwpark00": "Awesome, thank you.\n. ",
    "catobus": "Has this feature ever been implemented? I do cannot find any references to line-style-offset style property. \nThanks! . Do you have a suggestion how to achieve such marching ant effect on edges in cystoscape.js? \nThanks! . ",
    "ron23": "On the same manner, do we have a way of adding icons/glyphs AROUND nodes? \nFor example a small icon that represents the country of the node, or some score about the node.\nIv'e found THIS:  But I feel this is really hacky.\nI'm basically looking to do something similar to THIS \n. ",
    "Krewn": "Have you tried to reproduce with a larger graph, perhaps one larger than half the maximum size?. ",
    "aayush-aditya": "Hi Max,\nWent the same way as suggested by you, helped me to get the requirements\ndone.\nRegards,\nAayush Aditya,\n+91-9206251938/ + 91-7079227109\naay.adityapat@gmail.com\nOn Fri, Jun 23, 2017 at 10:52 PM, Max Franz notifications@github.com\nwrote:\n\nClosed #1578 https://github.com/cytoscape/cytoscape.js/issues/1578.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1578#event-1136837314,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APXn_7f6qsZQAdA2y6rEw66tIiTAuteFks5sG_RwgaJpZM4KaosB\n.\n. \n",
    "kavinnagul": "Hi @maxkfranz ,\nQtip not working on mouse over. Below code working for Click event. \nCan you please suggest what  changes i have to do for mouseover event.\ncy.$(\"#\"+this.id()).qtip({\n              show: { event: 'directtap' },\n              //hide: { event: 'mouseout' },\n              content: function(){ return 'Example qTip on ele ' + this.id() },\n              position: {\n                my: 'top center',\n                at: 'bottom center'\n              },\n              style: {\n                classes: 'qtip-bootstrap',\n                tip: {\n                  width: 16,\n                  height: 8\n                }\n              }\n            }).on('tap', function( e ){\n              var eventIsDirect = e.target.same( this ); // don't use 2.x cyTarget\n          if( eventIsDirect ){\n            this.emit('directtap');             \n          }\n        }).on('directtap', function( e ){\n          e.stopPropagation();\n        });\n\n. ",
    "ibas87": "@maxkfranz, just tested the snapshot version, it is working perfectly! \nCheers!\n. While importing cytoscape, it starts at cytoscape/src/index.js and it loads everything until \"require('./is')\" but not \"require('./core')\". Seems that some dependency is failing to load.. Also I forgot to mention that I am using Traceur.\nAfter some deep ivestigation I found why some files fail to import.\nFor example:\ncytoscape/src/collection/animation.js\n(...)\nvar elesfn = ({\n    animate: define.animate(),\n    animation: define.animation(),\n    animated: define.animated(),\n    clearQueue: define.clearQueue(),\n    delay: define.delay(),\n    delayAnimation: define.delayAnimation(),\n    stop: define.stop()\n});\n(...)\nthis code fails while importing, wrapping it with a try catch:\n(...)\ntry {\n    var elesfn = ({\n        animate: define.animate(),\n        animation: define.animation(),\n        animated: define.animated(),\n        clearQueue: define.clearQueue(),\n        delay: define.delay(),\n        delayAnimation: define.delayAnimation(),\n        stop: define.stop()\n    });\n} catch(e) {\n    console.log('error', e);\n}\n(...)\nI got the following error: \nPhantomJS 2.1.1 (Mac OS X 0.0.0) ERROR\n  TypeError: Requested keys of a value that is not an object.\n  at /my-project/tests/spec.bundle.js:2382 <- webpack:///~/traceur/bin/traceur-runtime.js:2316:0\nRemoving the parentheses seems to work:\n(...)\nvar elesfn = ({\n    animate: define.animate,\n    animation: define.animation,\n    animated: define.animated,\n    clearQueue: define.clearQueue,\n    delay: define.delay,\n    delayAnimation: define.delayAnimation,\n    stop: define.stop\n});\n(...)\nThis problem is happens across multiple files, have you experienced anything similar?. ",
    "minhzzz": "I guess you can use evtTarget.isNode() and evtTarget.isEdge() if you wanted to.\n. Yeah, I was dynamically adding new nodes, redraw didn't work for me either. My hack was to re-update the position of one of the node on pan/zoom, ( I used lodash's debounce to optimize it ). LOL.\n. Yep, works for me as well. Thanks\n. ",
    "SumNeuron": "Can you walk me through what you did there?\n. Could you please be a tad more specific. I get the tertiary operator, I am confused about the 1st, 4th, and 5th line\n. Ok so simply define the function has and instead use nonempty for a similar logic as the function proposes. \n. Yes and no. bfs.path gives an object for the path. Your code yields just a long list without separation of paths. If on squints one can try and find where the node and the next edge are inconsistent, but not ideal.\nIt is clear even by your naming convention that bfs.path is meant to return one path, not many thereof.  Thus this should not be closed as the features requested are not existent.. ",
    "lzuliuyun": "It's my mistake, shape style property doesn't support circle by named 'circle', but named 'ellipse'\n. ",
    "xandris": "Hey, this doesn't appear to work correctly. The PR does this:\n```javascript\n    var bgImgCrossOrigin = node.pstyle( 'background-image-crossorigin' );\n// get image, and if not loaded then ask to redraw when later loaded\nimage = this.getCachedImage( url, bgImgCrossOrigin, function() {\n\n```\nand then treats bgImgCrossOrigin like a string. The trouble is that node.pstyle returns an object instead. This works for me:\n```javascript\n    var bgImgCrossOrigin = (node.pstyle( 'background-image-crossorigin' )||{}).value;\n// get image, and if not loaded then ask to redraw when later loaded\nimage = this.getCachedImage( url, bgImgCrossOrigin, function() {\n\n```\nunless I'm doing something wrong in my stylesheet JSON:\njson\n      \"css\": {\n        \"background-color\": \"rgb(124, 130, 140)\",\n        \"background-image\": \"/resources/src/img/question.svg\",\n        \"background-image-crossorigin\": \"use-credentials\"\n      }\nDid the behavior of pstyle change since this PR was merged? I can work around it but it's ugly.. ",
    "tbaeg": "Apparently, I was on something when I said '0' was falsy.. apologies, you are absolutely correct.. ",
    "lszanto": "I pulled out the colour with a colour picker so I could simply change the backround in node:active node however it doesn't seem to be working when the parent is selected. Elements that I target with\nnode node\nseem fine however\nnode:active node\ndoesn't seem to be picking anything up, is this correct?\n{\n    selector: 'node:active node',\n    style: {\n        'background-color': '#9a9a9a'\n    }\n}. Fixed this another way @maxkfranz ended up setting background opacity of the child to 0 so that all background color/overlay changes simply come through, thanks for the help.. @maxkfranz can confirm this now works for me. Tested with :selected and :active descendants.. I just have the container set to: \n```\ncy {\nposition: absolute;\nleft: 50px;\ntop: 0;\nbottom: 0;\nright: 0;\n\n}\n```\nCould the 50px allocated for the toolbar be the issue? Could I get the CSS for what you are applying to the box when it's working?\nI also tried instead of setting the container normally to include a width and height and it seemed to center the node more but still not in the middle.\n1500px wide container:\n\n1800px wide container:\n\n. This is roughly what i'm working with and shows the error: https://jsbin.com/poquvalazi/. Yet this snippet works fine if you're outputting on the same page but if you view on it's own page it doesn't work: https://jsbin.com/solevoluju/1/edit?js,output. Thanks heaps mate, thought I was going nuts. This makes a lot of sense. . ",
    "righettime": "That did the trick!  Thanks @maxkfranz. ",
    "markgoffin": "Also, sorry I haven't added any tests. I'm not a javascript dev by trade and am not familiar with mocha. . ",
    "TrySound": "https://github.com/que-etc/resize-observer-polyfill. mjs is still discussed. And considered by many not necessary.\nWatch has a problem yet, so we can wait a bit. https://github.com/standard-things/esm/issues/138 As a workaround we can test only bundled version since only entry point is used in tests.. before\ncytoscape.js 815.1K\ncytoscape.min.js 325.2K\ncytoscape.umd.js 795.9K\nafter\ncytoscape.js 888.0K\ncytoscape.min.js 327.0K\ncytoscape.umd.js 868.8K\nseems like currently size increased with 2kb, but it should be fixed with rollup's scope hoisting. Benchmarks has a lot of lint errors so I'd like to convert them later.. @maxkfranz Thoughts?. 1. Yes. module field will make sense when we will land esm bundle.\n2. Yes. Rollup support everything we need.\na. rollup-watch\nb. yes\nc. There is cross-env package which works for all shells.\nd. rollup-plugin-babel\ne. yes\nf. rollup-plugin-node-resolve and rollup-plugin-commonjs\ng. rollup-plugin-replace. @maxkfranz esm build I planned to add later with a couple of suggestions. This is just 1:1 migration from webpack. Repetition is a step to simplicity which I also gonna propose in the next PR.\nLet's do thing step by step and discuss them separately.. What is the reason to use commonjs with webpack?. I thought breaking change is expected after so many changes. Well, yeah. To not break users just remove module field and add it back when you will be ready for major bump.. No reason. I installed today npm6. Probably it's breaking change. However I got this and with npm5 too. With yarn my lockfile never changes without a reason.. I added threshold option in size snapshot plugin for such cases.. Here I decided to use window module, because this in es modules is not allowed.. So context is not used since it's always null?. This is necessary to resolve index.js as node specific rule and node_modules dependencies for dev mode.. There is already umd here with bundled dependencies. This version is clean node module. Also umd will require global aliasing for missing deps.. ",
    "kittsville": "A fair point. Sorry for missing that part of the docs and thanks for the clarification.. ",
    "pshannon": "Thanks, Max.  I am must seeing your reply today.  I will give this a try.\n\nPaul\n\n\nOn Dec 24, 2016, at 5:20 AM, Max Franz notifications@github.com wrote:\nYou need the CORS header set on the server. If you use the http-server package for local development, you can just use the --cors option.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n\n. ",
    "Fannon": "I think I could narrow it down:\nIf 'text-wrap': 'wrap', is removed, everything works as expected. ",
    "pwichmann": "You're a star, mate.\nI was sure I had tried [visible = 'true'] but - in any case - the shorthand boolean notation works like a charm. Many many thanks!\nSolved.. ",
    "hyoo": "I found a closed issue #1500, based on the discussion, here is a fix\n```\n-       var concentricLayout = cy.makeLayout({\n+       var concentricLayout = {\n                name: 'concentric',\n                concentric: function(node){\n                        return 10 - node.data('level');\n...\n                        return 1;\n                },\n                animate: false\n-       });\n+       };\n...\n    concentricButton.addEventListener('click', function(){\n\n\nconcentricLayout.run();\ncy.layout(concentricLayout);\n        });\n\n...\n\noptions.layout.run();\ncy.layout(options.layout);\n```\n\nhttps://github.com/hyoo/cytoscape-tutorials/commit/3a0c13cb6f855863117598ea6b7af9f3f7533077. ",
    "ericleef0522": "Thanks maxkfranz for taking this question, does this mean there is no way to different event source between \"edge\" and \"edge label\" for now ? :). Hi maxkfranz, I understand, really appreciate for taking time on my question.  I will try to figure something out if have enough time. Will also contribute to you guys if i made this happen. Thanks.\n. ",
    "LuiSlacker": "I can't go with fixed node dimensions though, since the svgs from the API vary in size quite a bit.\nI'm rendering an abstract syntax tree of two merged mathematical formulas with some of the (math-syntax)nodes being collapsed and therefore having the SVG render math in infix notation, which certainly requires more space.\n\nNow with the style option of 'background-fit': 'contain' the equal or multiply sign are displayed way too big, whereas highly collapsed nodes(e.g. the sum) might be too small.\nAlso, with the SVG object approach you mentioned, how would I create these object async within the cytoscape mapper function? See 2ndsnippet in original question?. ",
    "dtapuska": "It appears you are binding pointer events and touch events. ie; https://github.com/cytoscape/cytoscape.js/blob/2816df20bb7410a6b9450ab689c7a03674046768/src/extensions/renderer/base/load-listeners.js#L1954 \nand you are preventDefaulting the pointer events so you won't get touch events. Could this be that your pointer event code isn't setting touch-action correctly and that this is in fact broken in Microsoft Windows Phone as well?\n. Also you appear to be using fastclick in the documentation directory. Avoiding fastclick has been suggested for some time now. See ftlabs/fastclick#498. ",
    "albayraktaroglu": "Hi, I updated my question, sorry about my bad english!. ",
    "Kurtas": "Thanks, but I think that there should be also be an event when chart is ready for export.. ",
    "vigneshdv": "Updating to 2.7 is not an option all development environments.\nWouldn't it make sense to allow people to choose the version of the docs\nthey want to look at on the website? The latest version can be the default.\nAnd yes currently I've pulled the older docs by using the tags.\nOn Feb 22, 2017 10:04 PM, \"Max Franz\" notifications@github.com wrote:\n\nYou can checkout a tag for that version and view the docs, or you can\nupgrade to 2.7.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1721#issuecomment-281723490,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFQLpvPAxuUO2ObfBU4yCYLzgzC3I_Diks5rfGOigaJpZM4MIcsU\n.\n. \n",
    "jspautsch": "I tried again and cannot reproduce on Chrome, but was able to reproduce on Firefox 51 with Cytoscape 2.7.15 (Win 7), using this demo page: http://js.cytoscape.org/demos/444dc95703caa319c147/\n\nHit (Ctrl+) to zoom in the browser\nHit (Ctrl-) to zoom back out to 100%\nTry dragging the cytoscape canvas. You'll see the :active marker is not correctly aligned with your mouse position, and dragging the graph to the bottom-right corner shows it gets cut-off early (the graph failed to resize when zooming back to 100%).\n\n\n. My bad, I thought I searched for this one. I'll keep an eye on the original ticket.. Gotchya, sounds reasonable.. This is how I do it, but maybe there's a better way:\njavascript\nconst ext = cy.extent()\nconst nodesInView = cy.nodes().filter(n => {\n  const bb = n.boundingBox()\n  return bb.x1 > ext.x1 && bb.x2 < ext.x2 && bb.y1 > ext.y1 && bb.y2 < ext.y2\n})\nWill check if the entire node body is in view. If all you want is the centerpoint, use position() instead of boundingBox() and use x and y on the returned value instead of x1, x2, y1, y2.. ",
    "HugoSalt": "Actually this seems to be similar to #1692 , but for me it's not linked to whereas the font is set to Bold or not, it's the fact of using this custom font that triggers this issue. And also the font is not swapped but just gets cropped past a certain zoom level. Indeed this was the issue thanks a lot ! If there's no plan to implement in Cytoscape the checking that fonts are loaded I guess both issues can be closed. But maybe it would be worth it adding to the doc (for eg in the initialization chapter) a mention that we must wait for fonts to be loaded before initializing ?\nFor those having the same issue , on Chromium, having an external styleseet as recommended here does not solve the issue, neither does document.fonts.ready or document.fonts.onloadingdone the only thing that worked for me is the hack function waitForWebfonts described here. It's kinda dirty but it's the only thing that works for me. ",
    "dukexor": "Thanks for the prompt response, Max. I made a kludge, but will update that\ntomorrow. Thanks for your continued work on this great software!\nOn Mar 2, 2017 6:27 PM, \"Max Franz\" notifications@github.com wrote:\n\nIf the empty string is the only falsey value it can take on, you can use\n[!bar] for now.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/cytoscape/cytoscape.js/issues/1735#issuecomment-283827211,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA1_jYZbW9e135pwc50x8GnuL42P0efvks5rh15_gaJpZM4MNmDh\n.\n. That did the trick, thanks!. \n",
    "benjaminlees": "+1. ",
    "alikr": "@maxkfranz \ndead_code: false, no errors\nbut\ndisplay nothing\ncytoscape(2.7.15)\nmodfiy code:\nvar flag = false;\ndo{\n...\nflag = false;\n} while( flag);. @maxkfranz it's ok!. ",
    "royludo": "@maxkfranz What would you recommand for setting any style property to any value dynamically for any element? Using cy.style().selector('#id').style() ? . ",
    "CarlosZaldivar": "Ok, I get it. Thanks for pointing me in some other directions. (JxBrowser seems very interesting but it's also tremendously expensive.). ",
    "stan-golembivsky": "Here is a small code sample\nhttps://codepen.io/stan_golembivsky/pen/LWJVvG\ni've found out that if i use some value to scale the image than the bug reproduces:\nvar base64 = core.png({\n      full: true,\n      scale: 0.5\n    });\nand if there is current zoom value instead than everything works fine:\nvar base64 = core.png({\n      full: true,\n      scale: core.zoom()\n    });\ni'm using cytoscape-navigator extension and can't change this value... so the best solution for me is to write the extension by myself((\nplease correct me if i'm mistaken somewhere\nThank you.. ",
    "dwitvliet": "We are having the same problem. We are using 2D CSS transforms (currently supported by all main browsers) to scale the Cytoscape container down when not in focus, which scales down everything drawn by Cytoscape. It works well until resizing the window, which causes cy.resize() to be triggered, downsizing the canvas even further as @davidsundell describes it. \nShouldn't it be easy for Cytoscape to account for scaling of its container, when setting the canvas height and width with cy.resize()?\n. It might be possible to use offsetWidth and offsetHeight, which gives the unscaled sizes of an element (e.g. see jsfiddle example). . > Unfortunately, that's not a standard property (yet anyway), and it looks like several browsers don't support it\nI tried both offsetWidth and offsetHeight in the most recent versions of GC, FF, IE, Safari, Opera. All of them seem to work, but slightly older versions might not.\n\nThe spec says this function would ignore transforms\n\nI think that's point; you'll get the width and height before any transforms are applied, which means it would work for all 2D transforms, not just scaling.\n\nCytoscape already has built-in functionality for scaling the viewport: Just change the zoom level. If you want a smaller viewport extent as well, then you can change the width/height on the container.\n\nThe problem for us is that we want to animate the transition. When doing multiple independent animations on the same elements at the same time (cytoscape zoom and container size), the resulting animation is laggy and almost impossible to ease. Additionally, the container has to be re-positioned if the origin isn't top-left. All of this can be done perfectly in one css scale animation. That's what we were doing in Cytoscape.js v2, but it does not work in v3 because of the resizing issue. It's preventing us from updating to the newest version.\n. Awesome, thanks for being so supportive! We'll happily test out any changes in an unstable branch!. Thank you for implementing this! We tried it, and as far as we can tell, it works perfectly with our transforms!. Maybe I can clarify: The z-order of the elements in the example should be: edge.hover > node > edge. Therefore, the cursor should be possible to move off the hovered edge onto the node. However, that does not happen. Instead, the cursor lands on the non-hovered edge behind the node, making that edge into a hovered edge. Effectively, the z-order becomes edge.hover > edge > node whenever any edge is hovered.. I have managed to reproduce the behavior on v3.2.17.\nAll you need to reproduce it are the following lines:\n```javascript\nvar cy = cytoscape({\n  container: document.querySelector('#cy'),\n  layout: {'name': 'grid', 'row': 3},\n  style: [\n    {\n      selector: 'edge.hover',\n      css: {\n        'z-compound-depth': 'top',\n        'line-color': '#FF0000'\n      }\n    }\n  ],\n  elements: {\n    nodes: [\n      {data: {id: 'n1'}}, {data: {id: 'n2'}}, {data: {id: 'n3'}},\n      {data: {id: 'n4'}}, {data: {id: 'n5'}}, {data: {id: 'n6'}},\n      {data: {id: 'n7'}}, {data: {id: 'n8'}}, {data: {id: 'n9'}}\n    ],\n    edges: [\n      {data: {id: 'e1', source: 'n1', target: 'n5'}},\n      {data: {id: 'e2', source: 'n2', target: 'n5'}},\n      {data: {id: 'e3', source: 'n3', target: 'n5'}},\n      {data: {id: 'e4', source: 'n4', target: 'n5'}},\n      {data: {id: 'e5', source: 'n6', target: 'n5'}},\n      {data: {id: 'e6', source: 'n7', target: 'n5'}},\n      {data: {id: 'e7', source: 'n8', target: 'n5'}},\n      {data: {id: 'e8', source: 'n9', target: 'n5'}}\n    ]\n  }\n});\ncy.on('mouseover', 'edge', function(e) {\n  e.target.addClass('hover');\n});\ncy.on('mouseout', 'edge', function(e) {\n  e.target.removeClass('hover');\n});\n```\nThe result is a network where the center node is almost impossible to select because the edges appear on top of it.\nI've attached a working example with both the html and js file.\nbug_v3.2.17.zip\n. Thank you for fixing it so promptly. Everything seems to behave as it should on our end in 3.2.19, but we'll let you know if anything odd comes up.. ",
    "Anishka0107": "The next three commits aim to fix the issue https://github.com/cytoscape/cytoscape.js/issues/1651\nThey have a reference added to the eles.move() method in the documentation for both the the webpage and the .md files. ",
    "ftyers": "Ok, looks like I can answer my own question: This plugin seems to be what is required: https://github.com/cytoscape/cytoscape.js-edgehandles. Thanks for the tip and for your advice @maxkfranz! :) We've posted the issue on Stackoverflow:\nhttps://stackoverflow.com/questions/47230857/how-can-labels-be-embedded-within-edges-in-cytoscape-js. ",
    "pihish": "I am pretty sure the style is valid.  When I look at the canvas elements and also the container element after I call $('#my-element').css('height', 'calc(100% - 410px)');, the height is the calculated height I have defined with the code.  \nIt seems that while the canvas elements are redefined with the appropriate height, the nodes and edges are not resized to fit with this new height.. It had nothing to do with styling.  cy.resize() needs to be followed by a call to cy.fit()\n$('#my-element').css('height', 'calc(100% - 410px)');\ncy.resize();\ncy.fit();. ",
    "volk-s": "also need the option to drag a node and trigger an event ( to drag it above another node and create a compound). Can't think of another solution - input welcome!\n@disovi did you find a solution to trigger such an event? . ",
    "disovi": "@volk-s i've finished with such workaround. Don't have time for contributing now:(\n```javascript\n_distanceTo(pos1, pos2) {\n  return Math.sqrt(((pos1.x - pos2.x)  2) + ((pos1.y - pos2.y)  2));\n}\ngetGraphIntersectionFix(e) {\n  let nodes = [];\n  if (this.cy) {\n    const pos = e.cyTarget.position();\n    nodes = this.cy.nodes();\n    nodes = nodes.filter((i, el) => el !== e.cyTarget &&\n        !el.edgesWith(e.cyTarget).length &&\n        this._distanceTo(pos, el.position()) <= 20);\n  }\n  return nodes;\n}\njavascript\nthis.cy.on('drag', 'node', .throttle((e) => {\n  const els = this._getGraphIntersectionFix(e);\n  ...\n}), 100);\n```. ",
    "Kawrantin": "Same error here, I'm trying to set a qTips like :\ncy.nodes().qtip({\n               content: function() {\n                   return \"Nb instances : \" + this.data('instances'); \n               },\n               style: {\n                   classes: 'qtip-bootstrap'\n               },\n               position: {\n                   my: 'bottom center',\n                   at: 'top center'\n               },\n               show: {\n                   effect: function() {\n                       $(this).slideDown();\n                   }\n               },\n               hide: {\n                   effect: function() {\n                       $(this).slideUp();\n                   }\n               }\n           });\nAnd I get : \nTypeError: ele.scratch is not a function\nThe graph generation works, but there is no layout and no qTips. \nAll was ok before the 3.0.0, I changed cytoscape.js and cytoscape.min.js in 2.7 but nothing happened. ",
    "solo7773": "Thanks Max. I didn't realise I referred to  a wrong document. Now everything works very well.. Hi Kawrantin, I haven't used tip function in 3.0, I am not sure I will face the error you pointed. Let me figure out first.. ",
    "kumarmj": "Hi, I am interested, please assign me this issue. I might not be able to change\n\nOn the Github repo page. I don't get that bug checkout here https://jsfiddle.net/owsmmj/ra9jcch9/. Changed added, I wasn't able to checkout changes, I didn't found any script for building documentation in package.json. Please guide with following. \n",
    "winni2k": "I would be very interested in an example of this in the cytoscape.js gallery.  \nThe problem I'm trying to solve is to embed histograms in nodes.  I'm super new to javascript, so I'm not even sure that'll work.. Thanks @maxkfranz.  \nI saw those notes as well, but I could not figure out how to translate them into code that would work.  \nFor now I am exploring d3, which has native support for SVG tags and lots of compatible charting libraries.. With a little work I got d3 + cola.js to do everything I need.... ",
    "jesuspc": "Is there any update on this? I have been trying to use SVGs for node backgrounds without much luck.. ",
    "sveinp": "In case someone drops by this thread:\nWe have been using SVG background images with cytoscape for a couple of years with great success. We draw shareholder maps, and need to put in a lot of information in the nodes. A couple of things to be aware of: Earlier we to some extend modified the node data within the rendering functions, and also changed classes for the node in question. In later editions of cytoscape, this causes a racing condition.\nI'm attaching a sample of our maps. Works well in all major browsers, including IE9+ (for IE, we convert the SVG's to PNG):\n\n. ",
    "giudicelli": "Hello,\nI'm using version 3.2.22, I have the same problem, source image is returning a 404, and yet I do have values for iw and ih in CRp.safeDrawImage. img.error is undefined so the check in drawImages is useless in this case.\nMaybe the easiest solution would be to surround context.drawImage with a try cactch ?\nUsing Chrome Version 70.0.3538.110 (Build officiel) (64 bits). ",
    "jamelt": "It did some more research and I'm going to investigate integrating a simple r-tree. Maybe use that as a benchmark and see what results are produced.. @maxkfranz I just checked it out and everything is working fine. Thanks for the fix, I wouldn't have known where to begin to fix that issue.. ",
    "namcigar": "Fixed by adding\nvar options = {\n name: 'circle',\n fit: true, // whether to fit to viewport\n};\nvar layout = cy.makeLayout(options);\nlayout.run();. ",
    "vision8tech": "Thanks, Max! \ud83d\udc4d \nI'll take a look into it.. ",
    "wydewy": "import cytoscape from  'cytoscape' in a component\n. ",
    "andres-k": "@vision8tech  Did you work something out? If so, could you share an example, please. ",
    "hannesN": "@vision8tech I'd like to see that too.. ",
    "xMarkusSpringerx": "Ok I'll have a look at that.\n@maxkfranz do you know a smooth way where I can additional info to a node which is only displayed when I click on the node? Like a toggle box which can be clicked to get detailed info to a node.. The qtip extension only covers the case when I want to show a tooltip. I want to rebuild something like that\ngorgeouscode. When I doubleclick on an entity it show the additional info. @maxkfranz do you have any ideas how to do this?. @maxkfranz it's ok. My problem is way more complex as I thought. I switched to plain d3.js.\nShould I just pull out the canvas implementation of the double arrow and delete the circle shape so that you can close the pr with at least one additional feature? . ",
    "askari12": "I have worked on an algorithm to find the control points for unbundled Bezier edges. With a little change , I think it can be used for other curves as well. It uses coordinate geometry and reflection.. As in a get a method ?. Or do they exist somewhere that I can somehow access and use ?. I would also like to have the points of the start and the end of an edge at the edge of a node. Also the control points for an edge of a node to the same node. I guess that is also covered in the bezier curve edges. Other edges are also covered in #1552 as far as I can see, right ? Thanks!. ",
    "jasonhornsby": "You still have to register the add on with cytoscape if you use require().\ncydagre( cy ); . ",
    "shabble": "is this as simple as something like:\nfunction (ele) {\n    let compEles = new Set(); \n    cy.elements().breadthFirstSearch({ root: ele, visit: (v) => { compEles.add(v) }} );\n   return compEles;\n}\nor is there some better algorithm to use?\nIf it's as simple as above I can try to look at making a PR for it.. if you mean that you're calling cy.nodes().on('click', ...) to set some handler, and then sometime later adding additional nodes with cy.add() which aren't responding, that is to be expected because only the nodes that existed (ie: the collection that cy.nodes() returns) at the time of the handler setup will be bound. You might find the jQuery docs on delegate handlers helpful (although cyto isn't using the exact same mechanisms, it's close enough to be useful).\nYou might want a delegated handler (cy.on('click', 'nodes', ev => { ... })) instead.\nThis seems like a support question better suited for cytoscape tag on Stack Overflow though.. ",
    "qtttttttttting": "Do you have any suggestions if I have to satisfy this need?. var cy = window.cy = cytoscape({\n          container: document.getElementById('cy'),\n          layout: {\n            name: 'preset',\n            animate: false\n          },\n          elements: [\n        {\n        \"data\": {\n          \"id\": \"1\",\n        },\n        \"position\": {\n          \"x\": 0,\n          \"y\": 0\n        },\n        \"group\": \"nodes\",\n      }]\n        });. Sorry to bother you again.\nFollowing your advice,I have tried to set the properties as follows.But the node remains in the center. \nvar cy = window.cy = cytoscape({\ncontainer: document.getElementById('cy'),\nlayout: {\nname: 'preset',\nanimate: false\n},\n          fit:false,\n          zoom:1,\n          pan: { x: 0, y: 0 },\nelements: [\n{\n\"data\": {\n\"id\": \"1\",\n},\n\"position\": {\n\"x\": 0,\n\"y\": 0\n},\n\"group\": \"nodes\",\n}]\n});. ooooooh,I come to understand suddenly. Thank you so much !. ",
    "jlaw9": "Ok makes sense. Thank you for your response.\nI tried using z-compound-depth: orphan, but the edges are still drawn on top of the parent node. I think I can get a pretty good solution for my usecase using the z-index option by setting the parent node above the edges (and the children above the parent node) and then setting the opacity of the parent node to be pretty low so the edges are still fairly visible.. ",
    "SkBlaz": "Hello all! Has there been any improvement on the subject yet?\nThank you!. ",
    "rdecapomaranca": "I would also like to know if there has been any progress on this issue. It is an essential feature when dealing with dense graphs where nodes take the majority of the space.. Thank you all for sharing different approaches. We have (temporarily) solved the problem by fixing the layout to be less dense. . ",
    "lambdalisue": "I'm using the following code for workaround. fyi.\n```typescript\nfunction globalPanning(cy: cytoscape.Core, enabled: () => boolean) {\n  let startPosition: null | {\n    readonly x: number;\n    readonly y: number;\n  };\n  cy.on('mousedown', 'node, edge', (evt: cytoscape.EventObject) => {\n    const e = (evt.originalEvent as any) as MouseEvent;\n    if (enabled() && e.button === 0) {\n      startPosition = evt.position;\n    }\n  });\n  cy.on('mouseup', (evt: cytoscape.EventObject) => {\n    const e = (evt.originalEvent as any) as MouseEvent;\n    if (e.button === 0) {\n      startPosition = null;\n    }\n  });\n  cy.on('mousemove', (evt: cytoscape.EventObject) => {\n    const e = (evt.originalEvent as any) as MouseEvent;\n    if (startPosition) {\n      const zoom = cy.zoom();\n      const relativePosition = {\n        x: (evt.position.x - startPosition.x) * zoom,\n        y: (evt.position.y - startPosition.y) * zoom,\n      };\n      cy.panBy(relativePosition);\n    }\n  });\n}\nconst cy = cytoscape({...});\nglobalPanning(cy, () => true);\n```. I made a plugin. fyi https://www.npmjs.com/package/cytoscape-anywhere-panning. ",
    "jalagar": "How about underlines? text-decoration: underline?. ",
    "YonathanMeguira": "@maxkfranz. found the solution by doing\nnode.move({parent: 'new Parent'})\n. simply specifiy upon canvas initialization in the style array \nselector: 'node',\n    style: {\n      'content': 'data(id)' ,\n/* here instead of 'id' any custom property that the node may have,*/\n      'background-color': 'white'\n    }. ",
    "Brendan92": "got it by setting background-opacity: '0'. ",
    "alexcli": "@maxfranz Probably not. I'm gonna be busy today and tomorrow cleaning up and finalizing my data science stuff for Gary since I'm flying home on Friday.. ",
    "simarsenault": "I've come across https://stackoverflow.com/a/36769200/1362049\nDoes what I need :). ",
    "IvyBerry": "I don't get the answer. It is common practice to deliver a web app with assets in its own assets folder. Thus a relative path indeed does make sense.. ",
    "BTruer": "http://js.cytoscape.org/#style/background-image\nFor example my project structure is something like:\n/js\n     cytoscape.min.js\n     jquery.js\n/imgs\n    pic.jpg\n    cat.png\ncode.js\nindex.html\nand within code.js  I can write something like:\nstyle: [{\n            selector: 'node',\n            style: {\n                'shape': 'roundrectangle',\n                'background-image': './imgs/cat.png',\n               'background-fit': 'contain'\n            }\n        },\nbut you can't just open up index.html in chrome/FF and expect it work.... you have to keep a development server up so in the terminal/cmd  if you have python for example you can just do something like python -m http.server 8000  at the root of your project and then it should work! here are alternatives (https://gist.github.com/willurd/5720255). ",
    "izabellaszlosarczyk": "Hello. Sorry for the delayed response.\n It works perfeclty., thank you!. ",
    "josephrocca": "Thanks! Works great :+1:. I just updated the cytoscape.js script src in that jsbin and it seems to work fine now, except that it doesn't look like arrow-scale is being respected: http://jsbin.com/roherazoji/2/edit?html,output. ",
    "agaurav": "The same configurations are working for all previous versions(3.0.x,3.1.x) so I thought the cause might be the changes in v3.2.0. I will look into the commits see if it can be narrowed down to the edit.. I very much appreciate you putting extra effort to have this solved but for now I have made peace with using the bundled version :)\nWhile it sure seems to be an issue with my tsconfig (or may be webpack config), but I am unable to identify it.\n I tried various combination for compiler option target,module & allowSyntheticDefaultImports, allowJs & isolatedModules but none seems to be able to work. The imported Heap variable seems to be an empty object,when editing the dist file as \njavascript\nvar Heap = __webpack_require__(8);\nconsole.log(Heap);\nThe peer dependencies are working for all other of packages (almost all of them having react,d3 & lodash as one). I also have both \"@types/heap\": \"^0.2.28\" & \"heap\": \"^0.2.6\" installed.\nThanks to bundles version it's not an issues for me as heap is quite a small lib.\nAgain thanks for your help.\nFor anyone else facing same issue with webpack & typescript, a workaround is to have the following in your webpack config.\njavascript\nalias: { \n    cytoscape: path.join(process.cwd(), 'node_modules/cytoscape/dist/cytoscape.js'),\n},. Also I am using the more popular awesome-typescript-loader instead of ts-loader.. ",
    "jaydenlin": "I have the same issue.\nI used dist/cytoscape.js instead of dist/cytoscape.cjs.js to solve the issue.. ",
    "joeframbach": "The documentation states this:\nhttp://js.cytoscape.org/#cy.fit\n\nIf an empty collection or no collection is specified, then the graph is fit to all nodes and edges in the graph.\n\ncy.$('#matches-nothing') is an empty collection, so the graph is fit to all nodes and edges in the graph.. A documentation update would be an acceptable resolution for this issue.. ",
    "rjmill": "\njust using whatever the user specifies in the array.\n\nSounds good!\n\nI think eles.flashClass() would make sense too.\n\nI'll take a look at it.. I looked into eles.flashClass(), and it uses eles.addClass() and eles.removeClass() under the hood (which in turn use eles.toggleClass() under the hood.) So eles.flashClass() should \"just work.\". Refactored classes initialization in elements.js to the third option we discussed. Is there anything else you'd like me to take care of for this PR? Should I go ahead and squash all these commits into one?. That makes sense. I didn't check to see if it gets mutated or not, but if I remember correctly, the array gets put into a Set pretty quickly anyway. I'll remove the copy.. It's probably more sensible to check if it's a string instead of if it's not an array, but this way will preserve the current error behavior if someone puts something that's not a string in here (ie throwing errors about doing string stuff to something that's not a string.). Doing an \"if/else if\" where both blocks only differ by one line feels messy. I have a few refactors in mind, but I held off because I wanted to preserve as much of the original code as possible for my initial PR. Also, this is arguably simple/small enough that refactoring might not make a huge difference anyway.. If I understand correctly, doing that would make it something like\nif ( is.array( params.classes ) || is.string( params.classes ) ){\n  let classes = is.string( params.classes ) ? params.classes.split( /\\s+/ ) : params.classes;\n  // ...\nwhich still feels kind of wonky to me. One of the refactors I had in mind was pulling the for loop out of the conditional and having the conditional just set the value for the classes variable. If params.classes is not a string or array, it'll just default to being an empty array (and therefore would be skipped by the for loop without causing errors.)\nMaybe something like\n```\nlet classes = params.classes || [];\nif ( is.string( classes ) ){\n  classes = classes.split( /\\s+/ );\n}\nfor( let i = 0, l = classes.length; i < l; i++ ){\n  let cls = classes[ i ];\n  if( !cls || cls === '' ){ continue; }\n_p.classes.add(cls);\n}\nThis is probably the cleanest option I have in mind, but it now will throw an error when you put an invalid type in for `classes` instead of silently passing through, which might break some people's code. To avoid that, I'm thinking something like\nlet classes = [];\nif ( is.array( params.classes ) ){\n  classes = params.classes;\n} else if ( is.string( params.classes ) ){\n  classes = params.classes.split( /\\s+/ );\n}\nfor( let i = 0, l = classes.length; i < l; i++ ){\n  let cls = classes[ i ];\n  if( !cls || cls === '' ){ continue; }\n_p.classes.add(cls);\n}\n``\nIt's not as clean as the other one, but it won't run the risk of breaking people's stuff. On the other hand, one could argue that anything that depends on passing invalid data in forclasses` is stuff that should break anyway.\nAt the end of the day, it's a matter maintainer preference. I'm fine with any of these options (including the option of just leaving it as is and calling it a day.). ",
    "Aerilius": "A line-cap is visible if the line is as wide or wider than the node.\nThe default butt ends in the center point of the node, so that two lines that are not exactly at 180\u00b0 will always have a \"crack\", some \u03b5\u00b0 gap on one side. To cover the gap one can extend the line over the center point (ideally rounded, my usecase). \nOf course if the node is wider than the line then this is not visible. I have no usecase yet for square, but I thought I just reflect all possible values from the canvas API.. ",
    "adhusson": "assignDepthsToEles() is called outside of the loop which iterates over elesToMove, so the call to splice on line 257 may use a stale index if 2 elements from the same depth have to be moved and the one with the smallest index is moved before the one with the larger index.\nEdit: Actually I believe that with this commit, there is no need to call assignDepthsToEles() after the block. I'm not certain, but it looks like since the last call to this function, the only time scratch.breadthfirst.depth or scratch.breadthfirst.index are changed for any element is inside the for loop I modified. This loop already adjusted depth on the fly and with my edit, it also adjusts index on the fly.\nThis should trigger the issue:\n[\n  {\n    \"data\": {\n      \"id\": \"1\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"2\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"3\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"4\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"5\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"6\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"7\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"5-7\",\n      \"source\": \"5\",\n      \"target\": \"7\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"5-6\",\n      \"source\": \"5\",\n      \"target\": \"6\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"5-3\",\n      \"source\": \"5\",\n      \"target\": \"3\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"4-6\",\n      \"source\": \"4\",\n      \"target\": \"6\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"3-7\",\n      \"source\": \"3\",\n      \"target\": \"7\"\n    }\n  },\n  {\n    \"data\": {\n      \"id\": \"1-4\",\n      \"source\": \"1\",\n      \"target\": \"4\"\n    }\n  }\n]. ",
    "shean42": "1583 .",
    "renyaoxiang": "I got it, Thank you!. ",
    "juliepagano": "Thanks for the feedback! We were trying to find a quick way to get enough information (positions, etc.) to do our own rendering, and headless mode worked well for nodes, and we were hoping we'd get enough for edges too. I'll give rendering without visibility a try, and if that doesn't suit our needs, we can look into making a custom renderer.. ",
    "jack5678": "Sad. ",
    "epatters": "Thank you both for the quick fix! I will give this a whirl when you cut the next release.. ",
    "michaelpj": "Happy to wait for a more thorough version - I've worked around it in my own code. I simply noticed the inconsistency here when I was debugging why I got an exception.. FWIW, here's why I want this to work: I'm working on a graph viewer that will accept user graph data, and I'd like to use some pre-specified properties for styles, labels, etc. However, it should also work if the user doesn't provide those. So gracefully degradation is very much a desirable feature in this case.. Sure - but in this case I want the properties to be optional. An alternative would be to have some kind of explicit marking for optional accesses/fallbacks, but I guess you don't want to complicate the styling language too much.. ",
    "joeybrk372": "Whoops, looks like this has already been addressed in: https://github.com/cytoscape/cytoscape.js/commit/0954ada89789a296d442e6f2343c4d91a76fef38. Closing. Yep, tried it out with your changes and opacity is updating correctly now.. ",
    "pmackay": "\nele.json() returns classes as an array\n\nDoes this mean that it would include classes as well as other data? \nIs there any way currently to get the list of classes an element has? . ",
    "StevenLangbroek": "Since a class is a concept in Javascript now, maybe it's better to use classNames? Ecosystem seems to be standardising on this.. ",
    "BMahabir": "I finally figured this out, it was by clicking on the tiny cat-icon next to each demo.  This is not obvious at all, I would include it as an instruction on the main page.. ",
    "jvilk": "Excellent; thanks for your help! That solution works for me.\nIf it's possible / easy to do, maybe you could emit a warning when this happens? When I noticed some edges were missing, I spent some time thinking my application had a bug that produced invalid graphs. It took a bit longer to realize they weren't being rendered at all!\nOther than that, feel free to close this bug. Thanks for the excellent library.. ",
    "elisherer": "Replaced with #2058. Closed in favor of #2060 . First of all, thanks for the comprehensive review,\nSecond, as shown in the screenshot, I need a fast way to show the direction of money flow (red to green), and the arrows are not enough.\nNew suggestion:\nNew style property type colorStyle (enum)\nValues: none (default), linear-gradient, radial-gradient\nAll new properties will be:\nline-color-style: linear-gradient; (type colorStyle)\nline-gradient-stop-1-color: red; (type color)\nline-gradient-stop-2-color: green; (type color)\n(we could add stop-#-offset in the future)\nbackground-color-style: linear-gradient; (type colorStyle)\nbackground-gradient-direction: to right; (new enum type gradientDirection) values can be: to bottom (default), to top, to left, to right, to bottom right, to bottom left, to top right, to top left.\nbackground-gradient-stop-1-color: red; (type color)\nbackground-gradient-stop-2-color: green; (type color)\nbackground-color: radial-gradient; (type colorStyle)\nbackground-gradient-stop-1-color: red; (type color)\nbackground-gradient-stop-2-color: green; (type color)\n. I changed virtual-style demo (hope it's OK)\n\nResponding to your CR:\n(0) New features don't go in the master branch. Only bug fixes do. This belongs in the unstable branch.\nFixed, new PR was created.\n(1) Colour handling shouldn't really be happening in the edge drawing function. There's a more general function that sets stroke colour, and that should be amended instead.\nCorrect, changed it to use the strokeStyle function\n(2) Supporting gradients means that we should support them wherever a colour property can be specified. That means support for gradients in strokeStyle() and fillStyle().\nChanged strokeStyle() and fillStyle() to have another argument called colorStyle\n(3) By (1) and (2), you'd almost already have support for gradients on nodes. Although you yourself probably only need gradients on edges for your usecase, I wouldn't consider a gradient feature complete unless it's universal.\nAdded support for background-color too\n(4) The method used for checking whether you have a colour or a gradient will be bad for maintenance. It would be better to use a flag in the style property, and it seems that the style property parsing could be handled a bit cleaner. For example, there should be no colorOrGradient2tuple. Colours and gradients should be parsed separately so the style property can better represent which one is detected.\nNow irrelevant, since I use already existent property types\nFurther, you can't assume the browser has Array.isArray(). That's a relatively new feature, and you break support for old browsers if you do that. Look at the is.js file if you want to do same type checking. And what if radial gradients were supported in future? The array check would be ambiguous.\nNot assuming that anymore\n(5) If you're not iterating, you shouldn't use rs.allpts. Use rs.source and rs.target.\nI moved to passing the element and getting the points through the API since edgs and nodes are different\n(6) Using gradients means that other features, such as animations and style mappers, no longer work on those elements.\nshould work now, since all parameters are passed by regular property types\n(7) This is going to be a very expensive feature that will not work well for larger graphs.\nthis is something to consider when using every visual aspect (such as labels), maybe add it to the optimizations section in the readme?\nThis is my initial review pass. I think this is an interesting feature, but (6) and (7) are a bit concerning.. Went with all of your comments,\nYou can see example usage at the debug page with:\nedge {\nline-fill: linear-gradient;\nline-gradient-stops-colors: red blue green;\n}\nnode {\nbackground-fill: linear-gradient;\nbackground-gradient-direction: to-left-bottom;\nbackground-gradient-stops-colors: rgb(10,50,100) #77ffaa;\nbackground-gradient-stops-positions: 30 70;\n}. @evgarik, Are you using the unstable release?. Can we scale it somehow?. ",
    "aprudnikoff": "@maxkfranz thank you. It works.\nCan you add some words about it to docs? It's not clear enough now.. Checked it one more time. Very sorry, it's my bad.. ",
    "evgarik": "I enter a command in the console:\ncy.edges().map(function( ele ){\n  ele.style( \"line-fill\", \"linear-gradient\" );\n  ele.style( \"line-gradient-stop-colors\", \"red blue green\" );\n  ele.style( \"line-gradient-stop-positions\", \"0% 10% 100%\" );\n});\nI receive an error:\nThe style property `line-gradient-stop-colors: value` is invalid\nThe style property `line-gradient-stop-positions: value` is invalid\nwhat am I doing wrong?. yes. in file properties.js not enough lines\nlet edgeLine = [\n    ....\n    { name: 'line-gradient-stop-colors', type: t.colors },\n    { name: 'line-gradient-stop-positions', type: t.percentages },\n    ....\n]. ",
    "tswcode": "There is another strange behaviour with Chrome Version 64.0.3282.167 (64-bit).\nNo matter which cytoscape canvas, e.g. http://js.cytoscape.org/demos/cose-layout/ ,\nwhen I switch browser tabs or window for some seconds and switch back to this tab with the canvas,\nthen the canvas is empty. \nWhen I try to redraw it using \n$(window).focus(function() { cy.fit( 50 ); } \nonly the edges are shown.\n. I am using Linux as well: Nvidia gtx960, Gentoo x64, Xorg.. I also am using proprietary driver.. ",
    "wrnrlr": "Done in PR2072. ",
    "piuccio": "Thanks for the message. The algorithms works pretty well. Yesterday just for the fun I forked the code and removed all things cy specific, so leaving just the algorithm working on plain arrays. The speed is comparable to what I obtained with those couple tricks.\nObviously I'm not too familiar with the code base but I'll see if I can make a PR, at least to fix (2), it seems more approachable.. ",
    "csmatt": "Thanks for your quick reply. I was able to get it working by setting cy.renderer().hoverData.capture to true.\nI tried for a long time to get eventInContainer() to return true, but when the event comes in (through the mousemove handler), it's target is the webcomponent rather than the canvas. I'm guessing that's Polymer's fault and not cytoscape's.. There is a hierarchical relationship, but when I set the breakpoint inside cytoscape's 'mousemove' handler, it shows the target as 'custom-element' rather than 'canvas' even thought 'canvas' exists in path. It's almost like it can't see anything in the shadow dom.. ",
    "maurocasonato": "Ok thanks for the first and last clarification, but for \"ctrl-click\" I mean merely ctrl-click not the ctrl-mousedown-drag-mouseup, that is the box selection. The \"ctrl-click\" is normally used to select more cells/rows on a spreadsheet file, more strings on a text file, and more nodes on a cytoscape graph, and for this reason it should be translated in a simple gesture.. > That's exactly what selectionType: 'additive' does.\nIt's not true. What selectionType: 'additive' does is to add an element in the selection set with a simple \"click\" not \"ctrl-click\", and for this reason this option cannot be used, because it changes the normal behaviour expected by any user for any application. Using this option only on touch screen devices is not a good idea.. So for the moment the only way to select more than one node on a touchscreen device is to set the core with selectionType: 'additive', right?. - selectionType: 'additive' cannot be used because on mouse-input devices it changes the normal behaviour for additive selection, expected by any user for any application. \n- The cxtmenu cannot be used because on touch devices it's impossible to point to a node with two fingers; sometimes the node is pointed by one finger and sometimes by the other finger, unpredictably.\nAny other suggestion?. ",
    "sjneph": "That appears to be exactly the case - sorry for the trouble and thanks for the help!. For the cose layout.. This is a minimal example that throws an error:\n```\nfunction loadme() {\n  const layout_name = 'cose';\n  const layout_opts = {\n    name: layout_name,\n    nodeDimensionsIncludeLabels: true,\n  };\nconst options = {\n    container: $('#cy'),\n//    elements: GlyElements,\n//    style: GraphElementStyles.style,\n//    layout: layout_opts,\n  };\ncy = cytoscape(options);\n  const layout = cy.layout(layout_opts);\n  layout.run();\n  layout.run();\n}\n```\nTypeError: thread.stopped is not a function. ",
    "davidhockey22": "From what I can tell, programmatically setting a node to selected does not trigger this select event though. For instance, if I create a new node and mark it selected as part of the node creation it does not call the event, which adds more edge cases. \nI am doing what you describe as well though for my other cases. \nThe change for removing multi selection seems minor since there's already a check for both additive and multSelKeyDown. Adding a property that makes this function isMultSelKeyDown return false in load-listeners.js seems like it would handle this. \n. ",
    "harsimerkaur": "@vjcoder33 did you find any solution for this?. ",
    "emelendez": "sorry, but applying \"70\" again is reinterpreted as \"70px\" by default, not \"70%\" as in the original JSON style. So, with:\n var jsonStyle = cy.style().json();\n  cy.style.fromJson(jsonStyle)\n, some units miss \"%\" and then are reinterpreted as \"px\".. your work is awesome!!!. ",
    "trombonehero": "That's a good question... I'm initialising when my Marko component \"mounts\" into the DOM:\nhttps://markojs.com/docs/components/#codeonmountcode\nThe div element does exist at this point, but I'm not sure if DOMContentLoaded has fired yet. Is there a simple way to check?\nJust for reference, this issue occurs on Chrome but not Firefox.. Ok, yes: DOMContentLoaded fires before this error occurs. I don't see DOMContentReady, but I do see DOMContentLoaded before the \"mount\" event.. Going slightly further upstream, there is another potential fix for my immediate issue:\n```diff\n--- src/core/viewport.orig.js   2018-05-30 14:36:50.000000000 -0230\n+++ src/core/viewport.js        2018-05-30 14:36:34.000000000 -0230\n@@ -510,7 +510,10 @@\n return ( _p.sizeCache = _p.sizeCache || ( container ? (function(){\n   let style = window.getComputedStyle( container );\n\n\nlet val = function( name ){ return parseFloat( style.getPropertyValue( name ) ); };\nlet val = function( name ){\nvar str = style.getPropertyValue( name );\nreturn (str == \"\") ? 0 : parseFloat(str);\n\n};\nreturn {\n     width: container.clientWidth - val('padding-left') - val('padding-right'),\n```\n\n\nHowever, I still think it'd be a good idea to ensure that all code paths through https://github.com/cytoscape/cytoscape.js/blob/master/src/math.js#L118 return something.... ",
    "TexKiller": "Sorry about the delay, I'll get on that. Thanks!. ",
    "mikpom": "I understand the behavior now.\nMore general question then would be: if I iteratively create collections with cy.add and then want to join them, what is the efficient way to do that? I imagine I could create an array of collections and then do array.reduce with eles.union. But won't it create unnecessary intermediate unions in memory? \n. Many thanks for sensible reply!\nI was looking for something named like push and missed the merge function.. It works now!! Thanks!\nAlso needed to add  cy.destroy() at the end of the test to terminate execution.. ",
    "franklarryx": "Any news about this issue?\nI have the same problem!\nThanks,\nFrank. ",
    "iamjli": "File was formatted improperly. . ",
    "janithmehta": "The d3.zoom.filter has a constant listener for value changes. So if I dynamically set the value to false, zooming is disabled. I used the javascript 'wheel' event, but since zooming is enabled at that time, it zooms 1 level before disabling zoom (using cy.zoomingEnabled). So before the zooming starts, I need to be able to check for the flag value. @maxkfranz I would've loved to do it, but don't have time at the moment. I have looked into the code, I can send you a PR for this. @maxkfranz Made the required changes. @maxkfranz While I know the code I've written isn't the optimal, d3.js with the same graph and code renders it fast. I was hoping to achieve the same performance from Cytoscape since I want to replace my existing d3 visualization with Cytoscape. ",
    "MatthijsBon": "I've tested with several timeout functions and found that apparently, forceRender() is not working inside the 'render' event callback, probably to not cause any loops. . I suggest creating a JSBin/JSFiddle to let us see / reproduce your buggy behaviour. . Well not exactly performance impact, but showing all these warnings in the console is a pain in the ***.. Yes, that would be a great solution I think! I'm not that well into the codebase of Cytoscape to submit a Pull Request, but I could try with some pointers maybe?. ",
    "amirmohammadkz": "you can visit this stack overflow link for more details and see the failed tries. ",
    "bdparrish": "Ok.  Closing the issue.. bug/emitter-2313 looks good. simple but effective \ud83d\ude04 . ",
    "Tarek-B": "Hi,\nwhat do you think of just making 2 edges?\nA<=>B  \nedges:  [\n      { data: { id: \"blue\", source: \"A\", target: \"B\" } },\n      { data: { id: \"green\", source: \"B\", target: \"A\" } },\n    ]. ",
    "josejulio": "\nAll curved edges are a series of one or more quadratic beziers. The t=1 point for the nth bezier is used as the t=0 point for the (n+1)th bezier. So for loops, the first bezier has t=0 at the node and t=1 at the midpoint. The second bezier has t=0 at the midpoint and t=1 at the node.\n\nThank for the explanation!. Question, could we also expose the \"allPoints\" ? Or do i need to compute the all points (as done here) \nThanks. Thanks, I'll currently stick to computing the values from the controlPoints.\nIs there edges that have more than 3 control points (such as the loop)? If so, does that depend on the layout or to decide or is an internal of cytoscapejs?. I'm wondering if an extension over core or collection would be better approach.\ncy.rotate(-90) or cy.nodes().rotate(-90)\nI don't think rotating a few nodes would be useful for anyone, so maybe for the core?. I'm going to close this as there is already a transform() function.\nMaybe adding a cy.makeTransformWithRotation(angle) could be created, and the layouts accepting this function could use.. Ok @maxkfranz I'll try to update the PR with the requested changes. @maxkfranz Let me know if there is anything I could help with.. @maxkfranz There is also the other case: When a compound parent is added via cy.json, current parentless nodes could be added to that compound node. Check the example 1.\nShould i open other issue or attempt to fix it?. Thanks @maxkfranz I'll review. All the code looked good, thanks @maxkfranz . Thank you!. I think the bug was introduced here:\nhttps://github.com/cytoscape/cytoscape.js/commit/47a354eba7d5143ceb3778446921bdd3ae3924d1#diff-4cbda7cf5642b53f0b4ada2eb9e65229R339\nThe for goes from 0 to eles.length, but the content of the loop is removing elements, thus updating eles.length.\nI'm working on the bug, but we should either go from eles.length to 0, or filter all the nodes that are going to be deleted and iterate over that array.. Is reproducible in the context of the application, but couldn't reproduce in a jsbin.\nLet me try again.. Also, not sure if this helps, but the collection used is the mutableElements defined in core/search.js as:\njs\nmutableElements: function(){\n    return this._private.elements;\n  }\nedit:\nAlso, I debugged the code and saw that the value of eles.length was decremented by every remove().. got this reproducer: https://jsbin.com/qulepikabe\nClick the cat and it will remove about the half, when it should remove all but one.. Smaller one, which might be better for unit testing. I'm going to add to my PR:\nhttps://jsbin.com/muyebuhana. Is 3.3.1 scheduled for any day of this week? I'm wondering to know how to deal with an issue, thank you!. Thank you. Added test case. Without this fix, the test fails:\n```\n  1 failing\n1) Core graph manipulation\n       cy.json()\n         cy.json() can remove all elements:\n  AssertionError: expected 1 to equal 0\n  + expected - actual\n\n  -1\n  +0\n\n``. Hello, I suggest to create one issue per request/bug for easier tracking. \nCurrently you have 3 bugs/requests here :). @maxkfranz Updated the code, please let me know what you think. Thanks!. Mergedcompound-json-2255` into my branch. > Please review and add any test cases you can think of.\nIt look good to me, added a test to check if removing a middle parents works well (it does).. @maxkfranz Let me know if I can help with this. Will try to find where the code to handle the labels is.. From my tests, It seems to be rendering from the cache [1] when showing the \"wrong\" behavior, and when zooming, is not [2].\n[1] https://github.com/cytoscape/cytoscape.js/blob/7482fdf3c61463ad574b9bea4a85a8efe6acdcbe/src/extensions/renderer/canvas/drawing-elements.js#L42-L50\n[2]\nhttps://github.com/cytoscape/cytoscape.js/blob/7482fdf3c61463ad574b9bea4a85a8efe6acdcbe/src/extensions/renderer/canvas/drawing-label-text.js#L223-L232. Ok, I'm going to look the code to see how the bounding box is being build, to be able to do the right operations when drawing from the cache.. I'm also wondering if you tested with text-margin-x or text-margin-y, it looked like they were not taken into account too. \nI'll test with branch ele-txr-cache-rotpt\nThanks!. There is still a little, but noticeable difference:\n\n. There is a little jump that i'm not sure from where is coming:\n\n. Ok, just wanting to be sure that you are aware of these. \nIIRC it wasn't an issue with https://github.com/cytoscape/cytoscape.js/pull/2261/commits/1a532e4ddb5c074028f7bf23e23b6d3f651d4437 - maybe is something else?. I see, thanks for the clarification, no big deal with the \"jumpy\" label. I agree, is better to reuse the values :) \nClosing this.. i used array and merge, because I can't be sure of the order in a collection, as I'm in a for-loop I rely on the order so i ensure that the moved objects are in the end. I'm using it as a \"queue\", but not removing any element of it, just incrementing the index.\nedit: but i think that if using two lists, this need will likely go away.. ",
    "zmitry": "ended up with using d3-graphvis. ",
    "cappslock": "Hi, does this feature exist somewhere currently?. ",
    "bgross37": "Aw man, how come I did not think of this?!\nSorry to bother you, I should have realized this on my own.. ",
    "vrynkov": "Yes, I modified our code to check the range of values mapped to in  mapData; if they are the same (the last two arguments), then I just use the constant (like you showed in your example above).. I just wanted to let you know about this case.  It still seems to me that mapData should set the color to (255,255,0) and not to a random (gray) color.  But that is fine, we can close this issue if it is not going to be changed.  Thank you for looking into it.. ",
    "RK-Veltec": "I partially solved this issue, but the animation glitches when I deselect a node.\nTo make it return to its original layout (lets say its breadthfirst, because its positions are fixed) after selecting and deselecting a node, I created the following var, and added it to the \"return Promise.resolve()\" found originally at line 208. See below:\n```js\n// added this code above the return at line 208\nvar restoreLayout = function(){\n      var layout = cy.layout({\n        name: 'breadthfirst'\n      });\n  return layout.run();\n\n}\n// changed the return at line 208 to this below:\nreturn Promise.resolve()\n      .then( resetHighlight )\n      .then( hideOthers )\n      //.then( restorePositions ) You can delete this line\n      .then( showOthers )\n      .then( restoreLayout )\n;\n```\nThis solution, however, generates the following error: \n\nPossibly unhandled TypeError: layout.run is not a function . \n",
    "RaheelaKhan1172": "@maxkfranz @janithmehta Other than supplying line-dash-offset and line-dash-pattern, are there other steps/options necessary in order to get the marching ant animation to work? \nGot it! Here is what I did if anyone else if interested: \nanimate() {\n    offset++\n   cy.edges().animate({\n     style: {'line-dash-offset': -offset}\n   });\n   requestAnimationFrame(animate);\n}\n ( cy is my cytoscape container) \ncy.ready(() => {\n    animate()\n})\nalong with supplying line-dash-offset and line-dash-pattern to the edge style sheet. ",
    "PeBraz": "Just tried it, works great!. ",
    "willbeaufoy": "Great, thanks.. ",
    "dlangerenken": "I'm working with @janithmehta  on this issue. Essentially, the problem is the following:\nedges = {} \ncy.on(\"mouseover\", \"edge\", event => {\n  cy.edges().forEach(a => {\n    if (a.id() === event.target.id()) {\n      cy.edges(`#${event.target.id()}`).style(\"line-color\", \"black\");\n      edges[a.id()] = 'black';\n    } else {\n      if (edges[a.id()] !== 'gray') {\n        cy.edges(`#${a.id()}`).style(\"line-color\", \"gray\");\n      }\n      // cy.edges(`#${event.target.id()}`).style(\"line-color\", \"gray\"); // will make rendering slow\n    }\n  });\n});\nIf we use a map to store the color of an edge, and only call into cy.edges(...).style(\"line-color\", ...) when the color varies from the map - the rendering is very fast (despite the for-each loop).\nIt seems like cytoscape does not really do a check of the current values and inserts those updates into a queue, which takes a long time to clear. Is there anything on cytoscape-side that can be improved to help our specific use-case? The for-each-loop is an abstraction of what we're internally doing. The purpose is that technically, every edge/node can have a different color in every \"update\". We would like to not having to store the delta on our side and have cytoscape be a bit smarter about required/non-required updates.\nSee here my modifications where WE do the caching: https://jsbin.com/pufedumiku/1/edit. ```\n  updateVertexData(edgeId: string, key: string, value: any) {\n    this.updateElement(edgeId, key, value, 'data', 'nodes');\n  }\nupdateVertexStyle(edgeId: string, key: string, value: any) {\n    this.updateElement(edgeId, key, value, 'style', 'nodes');\n  }\nupdateEdgeData(edgeId: string, key: string, value: any) {\n    this.updateElement(edgeId, key, value, 'data', 'edges');\n  }\nupdateEdgeStyle(edgeId: string, key: string, value: any) {\n    this.updateElement(edgeId, key, value, 'style', 'edges');\n  }\nupdateElement(elementId: string, key: string, value: any, attribute: string, type: string) {\n    const cacheId = ${elementId}_${key}_${type};\n    if (this.styleCache[cacheId] !== value) {\n      this.styleCache[cacheId] = value;\n      let elements;\n      if (type === 'edges') {\n        elements = this.cy.edges(elementId);\n      } else {\n        elements = this.cy.nodes(elementId);\n      }\n      if (attribute === 'data') {\n        elements.data(key, value);\n      } else {\n        elements.style(key, value);\n      }\n    }\n  }\n```\nadding this on our side increases the performance significantly.... ",
    "sebthaele": "Hello Max, \nThanks for the reply. I already use multiple edge labels (4+) with another library called jsplumb. But it achieves that by having divs as the nodes and SVG paths as edges. That hybrid-approach comes with some disadvantages when it comes to exporting the state of layout or simply rendering pngs or pdfs out of it. Overlaying SVGs on top of canvas edges would probably go in the same direction then. \nWill think about the next steps... thanks!. ",
    "greenkeeper[bot]": "Hey there \ud83d\udc4b,\nwe noticed that this PR isn\u2019t merged yet. Just to let you know: if you don't merge this PR, Greenkeeper will not be enabled on this repo, and you won't receive updates for your dependencies.\nIf you don't want to enable Greenkeeper here, just close or ignore this PR, we won't nag you again. \u270c\ufe0f\nHave a great day! \ud83c\udf34\n. \nHey there \ud83d\udc4b,\nwe noticed that this PR isn\u2019t merged yet. Just to let you know: if you don't merge this PR, Greenkeeper will not be enabled on this repo, and you won't receive updates for your dependencies.\nIf you don't want to enable Greenkeeper here, just close or ignore this PR, we won't nag you again. \u270c\ufe0f\nHave a great day! \ud83c\udf34\n. After pinning to 0.67.3 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency rollup was updated from 0.67.4 to 0.68.1.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v0.68.1\n2018-12-19\nBug Fixes\n\nFix an issue with UMD wrappers where a variable is used without being defined (#2600)\n\nPull Requests\n\n#2600: Fix UMD and IIFE wrapper issues and add comprehensive functional wrapper tests (@lukastaegert)\n\n\n\nCommits\nThe new version differs by 6 commits.\n\n5516591 0.68.1\n591692a Update changelog\n8f71071 Fix UMD wrapper issues and refine wrappers (#2600)\n7708970 Update changelog\n824f942 Update changelog\n790b270 Update changelog\n\nSee the full diff\n\n. - The devDependency rollup was updated from 0.67.4 to 0.68.2.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\nf860199 0.68.2\ndc5233c Update changelog\nf8600a9 Hoisting fixes (#2607)\nb42e7fb Update docs for latest rollup 0.x (#2604)\n325d65f Inline docs (#2602)\n\nSee the full diff\n\n. - The devDependency rollup was updated from 0.67.4 to 1.0.0.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n7cc2f62 1.0.0\n5f876b2 Update changelog\n4f19233 1.0 changes (#2293)\n5328122 Fix hook's name in test's description (#2611)\n84cb5b5 Fix a self-contradiction comment in the docs (#2612)\n\nSee the full diff\n\n. - The devDependency rollup was updated from 0.67.4 to 1.0.1.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v1.0.1\n2019-01-03\nBug Fixes\n\nProperly handle reexporting an external default export for non-ESM targets when using named exports mode (#2620)\nDo not (wrongly) re-declare input options in the merged RollupOptions type (#2622)\n\nPull Requests\n\n#2620: Fixed issue with reexporting default as default with {exports: named, interop: true} options (@Andarist)\n#2622: Simplify RollupOptions (@Kinrany)\n#2627: Show how to skip imports for optional plugins (@chris-morgan)\n\n\n\nCommits\nThe new version differs by 6 commits.\n\nfbb5f9e 1.0.1\ne7b3c78 Update changelog\neda15fa Update changelog\n5ff6352 Show how to skip imports for optional plugins (#2627)\n6d32530 Simplify RollupOptions (#2622)\nf5364d9 Fixed issue with reexporting default as default with {exports: named, interop: true} options. (#2620)\n\nSee the full diff\n\n. - The devDependency rollup was updated from 0.67.4 to 1.0.2.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for v1.0.2\n2019-01-05\nBug Fixes\n\nMake sure the transform hook is always reevaluated when a file watched by the hook changes (#2633)\nFix a crash when generating hashes for tree-shaken dynamic imports (#2638)\nFix a crash and some inconsistencies when using the acorn-bigint plugin (#2640)\n\nPull Requests\n\n#2633: Document this.addWatchFile and make sure it also declares transform dependencies (@lukastaegert)\n#2635: Make sure code is optional in warning type (@lukastaegert)\n#2638: Do not fail when generating hashes for tree-shaken dynamic imports (@lukastaegert)\n#2640: Always treat bigints as unknown (@lukastaegert)\n#2641: Make sure all CLI options are listed in the summary (@lukastaegert)\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n27cde2a 1.0.2\n6b55518 Update changelog\n6ac23e9 Make sure all CLI options are listed in the summary (#2641)\nbe7afed Treat bigints as unknown for now on all systems to avoid accidentally (#2640)\nee6db13 Do not fail when generating hashes for tree-shaken dynamic imports (#2638)\n29b8c64 Make code optional again in rollup warnings (#2635)\n6b343ab Make sure this.addWatchFile also declares transform dependencies, (#2633)\n\nSee the full diff\n\n. After pinning to 0.8.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 9.14.2 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. - The devDependency highlight.js was updated from 9.15.1 to 9.15.2.\nYour tests are still failing with this version. Compare changes. - The devDependency highlight.js was updated from 9.15.2 to 9.15.5.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80. - The devDependency highlight.js was updated from 9.15.5 to 9.15.6.\nYour tests are passing again with this update. Explicitly upgrade to this version \ud83d\ude80. After pinning to 6.0.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. ",
    "sebkajeka": "Sorry, I should have posted this on the GraphML extension https://github.com/iVis-at-Bilkent/cytoscape.js-graphml. ",
    "donshikin": "\nThey are a series of quadratic beziers -- one point per curve.\n\nThanks Max! Now I understand. That wasn't clear from the doc, though, so maybe it would be good mention it in 'Styles' section?\nJust to clarify: if I have two control points, do I understand correctly that endpoint where first segment ends and the second starts is simply the midpoint between control points?. ",
    "mimadrid": "Thanks so much for the solution, I thought it was a bug\nI hope to cite Cytoscape.js in my work very soon. ",
    "kortschak": "Thanks.\nThe reason this came up is https://github.com/gonum/gonum/pull/621 where I add Cytoscape.js serialisation support in https://github.com/gonum/gonum/pull/621/commits/76d94d72aedea5aae83d13f387992d67308c72ed. Given that the deprecated form exists, and code will continue to exist in the wild, I'll keep both forms, but can note that the object form is deprecated when that happens, sadly from a perspective of efficiency (graph size and order are constant time operations in that form, but are O(n+m) in the plain array format).. Thank you. The code we have will be unaffected by that as it's the responsibility of the user to use the appropriate import type in our package.\nI'm happy for this to be closed unless you want it kept open for the breaking change at v4.. ",
    "daniel-dx": "Ok, i have updated the readme, review again pls.\n\nThe background of this extension\nWhen I develop the microservices call chain display diagram ( like zipkin ), I need to get all the call paths and then display them one by one. So I developed this collection function extension.\n\n\n\n. ",
    "kuzinmv": "Gradient it is great! Thank you so much it's more than enough.. ",
    "mo0om": "Done.\nhttps://www.npmjs.com/package/cytoscape-no-overlap\n. ",
    "djy2017": "I`m sorry ...\n- But I try to explore the peformance demo https://cytoscape.org/js-perf/\n- When elements reach 20,000 ,it renders slowly, even the chrome( V67.0.3396.87) crash when use dagree layout (20,000 nodes).\n- While my work is show more than 20,000 nodes and edges at the graph , and change the layout , so how to overvome the performance limitation.\n. ",
    "zy19940510": "I seem to know the problem.\n->\nI updated D3.js to the latest version and that's it.\nI have no problem using version 4.12.0. ",
    "aryoxp": "This message also being reported during cose-bilkent layout animation. I use this layout extension on my graph project. This error can also be reproduced on cose-bilkent demo page. Try to click the CoSE-Bilkent button several times, and the message will be shown in browser's console window. (Cytoscape JS 3.3.3). ",
    "MorayM": "I'm having this issue too, using the cose-bilkent layout. I'm on 3.3.3.. ",
    "knomdlo": "Issue was with the version I used. More details & an example here.. ",
    "ntfink": "And then I was on vacation and failed to respond in a reasonable time - sorry for the delay!\nThanks much for the in depth feedback! I added a couple in-line comments, but also wanted to address your more general question about (2) vs. memoize. I think they both contribute to improved performance but solve different problems. \nMemoize would definitely speed up the actual computation of the property value via its caching functionality. The performance gains from (2) are not from caching the previous value (which is just a means to compare it to the new value), but from from bypassing the applyParsedProperty function chain for mapped properties that haven't changed since the last style update which you can't achieve with memoize at the consumer level. For large graphs with complicated (i.e., lots of mapped properties), cutting out that one function chain for each element adds up.\nThat being said, I do recognize the added overhead of copying (if it ends up being necessary). But (2) would still provide performance gains, even for memoized style properties, since they're impacting different parts of the process.\nDoes that make any more sense than before?. Makes sense!. I was making an assumption that the un-parsed value could be a type (ex: array) that would require copying. But if that's not the case, I can certainly remove it!\nAlternatively and/or in addition to, another option would be to move this statement to applyParsedProperty:\ncase types.fn:\n  ...\n  flatProp = this.parse( prop.name, fnRetVal, prop.bypass, flatPropMapping );\n  flatProp.previousValue = fnRetVal; // or util.copy(fnRetVal)\nThen regardless of whether copying is required or not, only previous values for mapper cases get cached. Which would make sense as that's the only case where it gets used.. I'm afraid I'm not too familiar with these functions, what makes them incompatible with this approach?. ",
    "okbexx": "I found this problem comes from wheelSensitivity not work on v3.3.0 . ",
    "pkhera": "maxZoom is broken for me as well on upgrade to v3.3.1. Is there a work around for this?. Looks like zoomRange function has a bug at line no. 309\nelse if( is.number( max ) && min === undefined && max <= _p.minZoom ){\nmax should be >= _p.minZoom instead of <=. > maxZoom is broken for me as well on upgrade to v3.3.1. Is there a work around for this?\nI found the workaround to use both minZoom and maxZoom, for maxZoom to come into effect. maxZoom is only broken when there is no minZoom set.. ",
    "sakopqiu": "@maxkfranz Dear author, could you take a look and give me some suggestions? Thank you. ",
    "Spaxe": "I'm not sure if checking the \"default\" (0, 0) position is good enough. Bumping into this same problem:\nEdge `696` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.\nI can see edge 696 on my screen and it's drawn. I'm also using cose, so I suspect this warning was just a problem during animation.\nI did a dump at line 132 in the edge-control-points.js above for rs, and this is what I can see:\n{\n  \"source\": { \"x\": -0.671090240243881, \"y\": 0.7413756736293753 },\n  \"target\": { \"x\": -0.9993383998881852, \"y\": -0.03636980215675652 },\n  \"allpts\": [\n    300.4806980317775,\n    787.4451734721404,\n    305.7636176983382,\n    704.2101958135996\n  ],\n  \"haystackPts\": [\n    300.4806980317775,\n    787.4451734721404,\n    305.7636176983382,\n    704.2101958135996\n  ],\n  \"midX\": 303.12215786505783,\n  \"midY\": 745.82768464287,\n  \"lastCurveStyle\": \"bezier\",\n  \"edgeType\": \"straight\",\n  \"haystack\": true,\n  \"srcArrowAngle\": 0.06338492479368618,\n  \"midtgtArrowAngle\": -3.078207728796107,\n  \"midDispX\": 5.282919666560701,\n  \"midDispY\": -83.23497765854074,\n  \"midsrcArrowAngle\": 0.06338492479368618,\n  \"tgtArrowAngle\": -3.078207728796107,\n  \"targetLabelAngle\": 0,\n  \"sourceLabelAngle\": 0,\n  \"labelAngle\": 0,\n  \"badBezier\": false,\n  \"lastSrcCtlPtX\": 0,\n  \"lastSrcCtlPtY\": 0,\n  \"lastSrcCtlPtW\": 32,\n  \"lastSrcCtlPtH\": 32,\n  \"lastTgtCtlPtX\": 0,\n  \"lastTgtCtlPtY\": 0,\n  \"lastTgtCtlPtW\": 32,\n  \"lastTgtCtlPtH\": 32,\n  \"lastEdgeIndex\": 0,\n  \"lastNumEdges\": 1,\n  \"lastCtrlptDists\": null,\n  \"lastCtrlptWs\": \"0.5\",\n  \"lastSegmentDs\": \"20px\",\n  \"lastSegmentWs\": \"0.5\",\n  \"lastStepSize\": 16,\n  \"lastLoopDir\": -0.7853981633974483,\n  \"lastLoopSwp\": -1.5707963267948966,\n  \"lastEdgeDistances\": \"intersection\",\n  \"lastSrcDistFNode\": 0,\n  \"lastTgtDistFNode\": 0,\n  \"lastSrcEndpt\": \"outside-to-node\",\n  \"lastTgtEndpt\": \"outside-to-node\",\n  \"lastSrcArr\": \"none\",\n  \"lastTgtArr\": \"triangle-backcurve\",\n  \"lastLineW\": 1,\n  \"lastArrScl\": 0.75,\n  \"srcIntn\": [],\n  \"tgtIntn\": [],\n  \"srcManEndpt\": {\n    \"name\": \"source-endpoint\",\n    \"value\": \"outside-to-node\",\n    \"strValue\": \"outside-to-node\"\n  },\n  \"tgtManEndpt\": {\n    \"name\": \"target-endpoint\",\n    \"value\": \"outside-to-node\",\n    \"strValue\": \"outside-to-node\"\n  },\n  \"endX\": null,\n  \"endY\": null,\n  \"arrowEndX\": null,\n  \"arrowEndY\": null,\n  \"startX\": null,\n  \"startY\": null,\n  \"arrowStartX\": null,\n  \"arrowStartY\": null,\n  \"badLine\": true,\n  \"loggedErr\": true\n}\nHow would one surpress this warning? Maybe during animation, don't warn, but if animation has finished and it's still not visible?. Yep, checking for animation suppresses the warning properly, at least for this use case. PR coming.. Thanks @maxkfranz. To satisfy both (1) and (2), perhaps the warning can be printed just once - for the first edge that was not drawn, so as not to fill the console with similar information, thus becomes noise?. Warnings are useful. I wouldn't opt out completely - someone may add it, commit the code, and forget about it. \nInstead I suggest that the warnings be printed once per cytoscape instance, instead of per edge/node. That still satisfies 1 & 2, and it doesn't have the need to be configured.. I agree that is one safeguard option against hard-coded options. What I am advocating is making it impossible to make that set-and-forget mistake, and not having that configurable option.\nIf I may offer a compromise: make util.warn debounce. This way, the console will print less warnings (and therefore less noise), and it will collate multiple warnings that came in a short period of time. I can make a PR if you think this is a good compromise.\n. Yes, that's exactly what I was thinking.. Is there a list of warning classes somewhere?. I gave this a try for an hour and ran out of time. Just wanted to document my findings so far.\n\n\nDiscounting dist/, node_modules/, and test/, there are 25 uses of util.warn(). All of them appear to be slightly different in messaging. A rough guess is that there are 22 classes of warnings in Cytoscape.js\n\n\nTherefore, it is by far the easiest to write a function warnDebounced() that would replace some of the more noisy warning calls. However, lodash.debounce does not have an accumulator, meaning the previous warning context would be lost, and we can't collate information to be printed just once.\n\n\nLogically, the most noisy function is the one in edge control points, so I looked at if I can constraint this PR to just this function. Unfortunately the scratch pad is stored per edge, meaning that they do not know each other's existence. A naive way to write this is to store the edge IDs first, flag them for invalid endpoints, and then at the end loop through all of the flagged edges and print the warning. However, that still means the warning would be printed once per animation frame, even debounced.\n\n\nI ran out of time and decided that this is too hard to tackle with the present constraints and the one hour I gave myself to do this.\n\n\nThat said, I am currently not using animations in our production code, and only displaying the graph after layout animation has finished, and it is not noisy anymore... so I will sit on this one for now.. I should be able to whip up a PR today to add an option to turn them all off.. Please note that I only ran npm test and have not done further investigations to confirm that the option actually works. In theory, it should. Tests are welcome - I'm not as familiar with this code base.. Correct. I didn't have a way to reference the cy object.\nNot really a fan to pollute the global scope. Maybe someone else can write a PR and send in a global version. No harm done. :). OK, I see in your commit that's how you did it.\nIt might be easier to cherry pick your commit out of this branch and do another PR - since yours is branched after util.warn is called, not before.. Simplest option is almost always the best. Thanks!. ",
    "hator": "Thanks for your feedback. I didn't realize there was a problem with Webpack. I am closing this for now, feel free to reopen it whenever the problem is resolved. Have a good day :). ",
    "jbouecke": "Last comment is just partialy true. The arrow heads shoud be there according to the code and are not visibel. I observed the problem also in any other graph with compound nodes.\nAnother example: https://beta.observablehq.com/@jbouecke/test-cytoscape. > You haven't specified any curve style. If you want to style edges, you should always be specifying this property.\n\nThe demo doesn't specify a style for some edges either, and the screenshot is out of date.\n\nThank you very much for that information. I didn't knew becaus there was always a default value named in the documentation, thus I thougth I didn't have to specify it.\nThanks for taking a closer look!!!. ",
    "woshipipia": "I am not pretty sure but I think the version might be the reason.\ntry 3.3.3?. ",
    "PioArchiver": "Below is the element that gets appended to the bottom of the body of the html dom [From my app].  Thanks for the quick response :) \nAlso, so yeah the text content of the Cytoscape node is present there.\n<div style=\"font-family: Helvetica Neue, Helvetica, sans-serif; font-style: normal; font-size: 16px; font-weight: normal; position: absolute; left: -9999px; top: -9999px; z-index: -1; visibility: hidden; pointer-events: none; padding: 0px; line-height: 1; white-space: normal;\">\nWorkspace\n</div>. ",
    "yxngl": "Move cy from data() to\ncreated() {\n  this.cy = null;\n}\nYou do not want cy to be reactive and managed by Vue. . ",
    "liub1934": "\nMove cy from data() to\ncreated() {\n  this.cy = null;\n}\nYou do not want cy to be reactive and managed by Vue.\n\nThank you. ",
    "ghosttie": "Sorry, here's a jsbin repo. Sorry, looks like the jsbin saved when I had pixelRatio set to 2 not 'auto' - try this one\nI'm on the Chrome dev channel not canary, but you're right that it's not the current stable version.  I don't get the same error on Edge and Firefox but I do get errors when pixelRatio is set to 'auto'\nI'm using Windows 10. ",
    "pmeijer": "Thanks @maxkfranz. I didn't realize 'none' was a valid return. Couldn't there be a conflict if an image was served under '/none'  (although that's a pretty non-descriptive name)?\nSince I have multiple optional fields like the one above, from a performance perspective, which approach would you recommend? Selectors or logic implemented in the function mappers? (I will post this on slack as well).\n. ",
    "einsweniger": "Hm. I \"fixed\" it by adding <meta id=\"__________cytoscape_stylesheet\"> so it satisfies the check for the style sheet. The check is sloppy enough to allow this.\nhttps://github.com/cytoscape/cytoscape.js/blob/d9424465f7a90303fa122cdef9df476ed6151072/src/extensions/renderer/base/index.js#L31-L33. aside: I really, really like that you built a parser instead of lazily calling eval on strings, the library in general and the awesome documentation!. would you be interested in a PR for the caveat or do you think that's unnecessary?. Ah, I did not mean the exceptions, rather the warning for batching in the documentation. Sorry for the confusion.. Ah, it's that way around. That's fine as well. . ",
    "dallemang": "Thanks, @maxkfranz  - that works like a charm.  And I learned a bit about character sets (I was hunting for something like \\u2060, but didn't even know how to google it).\nAs far as I am concerned, this topic solved, so I'll close it. . ",
    "QuynhNguyen": "\nPlease provide a full reproducible demo for your issue. Follow the instructions in the issue template by creating a demo on jsbin.\n\nDone - https://jsbin.com/wubuwopeje/edit?js,console,output\nOpen your chrome task manager and watch the memory footprint.. ",
    "ar-stackrox": "All very valid points @maxkfranz \nAs for the graph being interactive and dynamic and edges being ambiguous, I do think at a larger scale this issue is present in either case. Without user interaction on a node, it becomes difficult to select or interact with an edge that is stacked between many other edges.\nOne example for interaction with edge bundling that I found to be useful is here - https://mbostock.github.io/d3/talk/20111116/bundle.html\nMousing over a name highlights its corresponding edges. Also has a tension slider to let the user decide the degree to which edges are bundled.\nAnd thanks for the tip!. 100% agree. I was hoping to create something very similar to that effect. I think implementing it on our end is probably a bit beyond our scope at the moment (also how slow it might get is unclear), but I appreciate the clarification. . Also before I close the issue, @maxkfranz I was hoping if you could tell me if there was an option to click+drag selection of nodes? I understand it pans by default, but maybe that could be binded to a spacebar + click.\nI found the option!. ",
    "wiredgril666": "https://github.com/rcarcasses/vue-cytoscape/issues/2.\nThis is same issues with vue-cytoscape.This doesn't seem like a vue-cytoscape issue but a webpack build config.I get this issue with webpack 3.11.0,not vue,is react. Chrome, 62.0.3202.94. \nIt alse doesn't seem like with Browser version.My workmate's browser also have this problem.. TypeError:e.registerBinding is not a function at trace.250f3d48.js:formatted:165896\nfunction(e,t){\n    for(;null!=e;)\n      (function(t){\n       e.registerBinding(t,'transitionend',m),//  line 165896\n}\n}\n. Thanks a lot, this problem has been solved, and the introduction method has been changed. Download cytoscap.min.js and import it in index.html. ",
    "ohemsted-thales": "We had previously used this.chart.elements().classes(); to clear all styles. This looks like a change in behaviour rather than a documentation issue. \nI wasn't sure if this change in behaviour was intended, it was broken as part of a minor release.. ",
    "utkarshagarwal01": "Because one of the cytoscape library versions was causing the error, I thought i should raise an issue here. Sorry about that.\n. "
}