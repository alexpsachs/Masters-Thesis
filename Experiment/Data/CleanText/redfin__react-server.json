{
    "gigabo": "So many tritons to deal with...\n. Let's get this working with @aickin's CLI (#17).\nIt's got a bunch of stuff that helps with newbie-friendliness:\n- Nicer routes.js format\n- No need for a server.js\n- Hot loading\n- ...\nCan be set up to work via npm run, I think?\n. I still like the idea of a generator...\n. This seems cool.\nLooks like we could use our own domain, but it will still be under domain.com/react-server-docs?\nMight get more flexibility with a simple static site generator for a github pages site.\n. Let's revisit this when we've got the content of our docs under control.\nI'd actually like to see us set up a react-server instance for a docs site. \ud83d\ude80 \n. Success!\n. Note that this actually runs the tests twice. Filed https://github.com/redfin/react-server/issues/6 for that.\nOnly runs eslint once.\n. Thanks @aickin.  This is way nicer default behavior.\n@davidalber is getting the CLA set up, then we can get this merged in.\n. > Longer term, I think it may be best to follow the eslint/babel convention of having a .reactserverrc\nYeah, that sounds cool.  Also, when there's a CLI, being able to point to config with a command-line option would nicer than setting an environment variable.\n. So are you going to sign or what? ;)\n. Whoa, it updates the PR comment when all contributors have signed.  Slick.\n. Thanks for setting this up @davidalber!\n. > All committers of the pull request should sign our Contributor License Agreement\nYikes.  These folks were all Redfin employees at the time the commits were made... @davidalber can we ignore the CLA for this one?\n. LGTM.  Name seems as good as any.\n. @roblg - I agree with your last comment here.  Any tickets to shake out of that before closing this?\n. Okay, at long last.  Working.\n. Thanks @kcjonson.  It would be nice to get rid of the extra level of nesting.  I'll see if I can make that work.\n. So... I've tried:\n- Cloning each root element with a data-triton-root-id prop.  Doesn't work, prop not propagated down to actual dom element.\n- Walking down through children to find first actual dom element to clone with a data-triton-root-id prop.  Doesn't work, some elements don't have the dom node in their children until render time, which is too late.\n- Doing string-replacement to add a data-triton-root-id attribute to the HTML on the way out.  Doesn't work, React freaks out and blows away the DOM branch.\n- Doing string-replacement, and then calling removeAtribute(...) before rendering into the root.  Doesn't work, React still somehow freaks out and blows away the DOM branch.\nNot sure we're going to be able to eliminate the wrapping div.\nWhat about being able to set properties on it?  Like className, style, id, etc?  Would that get you what you need for layout purposes?\n. Okay, cool.  That should actually be pretty easy and fairly clean.\nI'll just add support for those props to <RootElement />.\n. Available in v0.0.9.\n. Yeah, we've got a lot of that sort of thing to deal with. :p\n. \"Fixed\" by https://github.com/redfin/react-server/commit/35f7a71c430a71b9618ae00b61ccfcc1446619bd.\n. Horked again.  lerna bootstrap just isn't npm linking on Travis?  Is that what's happening?\n. @dtothefp Nope, we've just been working around it by updating versions manually.\n. This was resolved by upgrading to lerna@v2.0.0-beta.5.\n. I've only just started looking through this, but I have a few immediate rambling thoughts.\n1. This is awesome!  It provides a lot of what react-server is missing.\n2. You do good READMEs.\n3. There's a lot in here besides the CLI.  In my mind the CLI package should just provide a tool to help get things set up and running.  I'd like general react-server improvements to be generally available.  Seems like some of this should move into packages/react-server/ or into new packages that can be used independently.\n4. Why not global?  I'd like a tool that helps me bootstrap a project from nothing.  Or is that just a different thing?  I guess that's what #2 is about.  How do these two play together?\n5. I really like the idea of providing a batteries-included setup.  react-server works as an express middleware, but for users who are just getting started it's nice to set the server up for them so they can focus on setting up pages as soon as possible instead of worrying about just getting things running.\nI'll dig into this more.  Just wanted to get those first impressions out there.\nThanks for this!\n. > it's hard to review this much code at once\nYep.  But worth it.  Definitely want this!  Just need to digest. :meat_on_bone: \n. I've added some comments for minor things.  None of those is a blocker.\nI'd like to get some of the build stuff pulled out into a separate package, but that doesn't have to happen immediately, either.\n@roblg, @doug-wade: This looks good to me.  Have you guys had a chance to look closely?\n\nRegarding @aickin's bikeshedding topics:\n\nIs react-server-cli even a good name?\n\nSeems appropriate to me.\n\nShould routes just be a JSON file rather than a JavaScript file?\n\nUgh.  There are definitely benefits to that, but actual JSON is a pain.  No comments, quotes all over the place, commas breaking things.   I vote no.\n\nIs it right to have a bin directory with an executable file?\n\nUh.... yes?  @doug-wade?\n\nCurrently react-server is a peer dependency, but should it be a runtime dependency of react-server-cli instead?\n\nPeer dependency seems right to me.\n\nHow important is allowing customizing of webpack loaders and config? What about custom middleware for Express?\n\nProbably eventually important, but near term not?\n\nI'd like to get this merged in so we can move on to @aickin's next awesome thing.\n. :rocket: \n. > Adding someone at Redfin as an npm owner for react-server-cli. (Who should that be? @gigabo?)\nOh, hmm... yes, please.  Additionally would you mind if I add others here as necessary?\n. Uhhh...  Step 2 of creating an organization:\n\n. @kcjonson - I love that that's what bothers you about that image. :grinning: \n. Thanks @aickin.  We should get another version out this week.\nExcited to see what you drop next!\n. Nice, thanks!\n. :+1: \n. Yes, lerna supports per-project prepublish scripts, but it doesn't look like they check the output at all.  So if our tests failed, we'd still proceed to publish.\nIs running our tests (and linter) in CI enough?\n. > I don't think we want anyone other than the CI bot to publish.\nUhh... we've been publishing by hand so far. :grin: \n. Merging this.  Publishing fails too often.\n. \n:scream: \n. This still bugs me:\n.........................................................[object Object]\n..[object Object]\n.[object Object]\n..........................................................\n. I'm going to set up some tests for 500 pages, too.\nPutting this out for feedback on the interface first.\n. Oops.  Accidentally deleted the branch, which closed the PR... uh...\n. Okay, I added basic tests for 500 pages with and without document render.\nTests uncovered some weird behavior WRT exceptions arising during handleRoute() which I'll patch with a separate PR.\n. >  I'm a little uncertain about the setHaveDocument(...) API.\nYeah, same.  Feels weird.\n\nsomething like: return {code: 500, haveDocument: true}?\n\nYeah, thought about that initially, but I was worried about introducing another magic key in the handleRoute() response object.  I guess maybe that's just a matter of documentation?  I like the look of it more, and it ties the \"... but I have a document\" more closely to the \"my response code is 500\".\n\nwouldn't allow us to render a document in the case where there's a throw\n\nThat's explicitly disallowed here, but no special handling would be necessary with a new key in the handleRoute() response object...\nOkay, you've convinced me!  I'll push an update that moves the trigger into the response object.\n. @roblg: :+1:?\n. Ugh.  Just realized I pushed my changes to redfin/react-server last night instead of gigabo/react-server. :disappointed: \n. Thanks.\n. Oh, didn't even notice that this wasn't happening in the initial CLI PR.\nThanks!\n. @doug-wade - That sounds like a good breakdown.  Not sure how easy it will be to disentangle those from each other.  The runner needs to be able to host the webpack hot loader, for instance... but that's probably just a matter of finding choke points for the API between the modules.\nSeems worth a shot.\n@aickin - Any thoughts?  You still have the deepest knowledge of the internals of react-server-cli, I think.\n. LGTM.  I guess we should get our dependencies up to date in packages before adding badges there. :)\n. Sweet. :+1: \n. I think this is a dupe of #26.\n. Thanks @doug-wade and @indexzero!\n. Nice!  Leaner and meaner! :+1: \n. LGTM\n. This is starting to get into the realm of stuff that seems nicer to have in a config file.\nCome to think of it most of the options to the CLI seem that way.\nThis seems good to me as far as https support goes.\n. @aickin - Looks like this has some conflicts with master again.\n. Thanks!\n. > I'm uncomfortable with making the TritonAgent Cache's CacheEntry part of its public API\nYou mean the class itself?  It's still not exported in common.js and there's no path to it via anything that is.\n. Instances are available via getCacheEntry().\nI guess I don't see the harm...  Why make ourselves jump through hoops?\n. Okay.\n. > the issue we're resolving\nA page wants to use the history navigation API itself.  For example a list page updates its URL when sorting options change.  It can re-sort without re-rendering the whole page.  In pushes onto the history stack when the user changes sort options.  In order to handle re-sorting when the back-button is pressed it needs to listen to the browser's popstate event.\nWe're also listening to popstate.  This PR just lets the page handle its popstate events (when possible).\nImportantly in this scenario the page must also be able to render with a given sort order just given the URL.  This is generally true of all history navigation API usage that modifies the URL.  That means it's safe for us to clobber any of its history frames (which we need to do at client-transition boundaries).  We pay the perf penalty of a re-render when the page could have updated in-place, but the display and behavior remain correct.\n. Also should be noted that the page is responsible for ignoring any popstate event with reactServerFrame in its state.\n. This is cool.\n. Please add the v0.1.0 tag, too.\n. Sounds like we're going to be able to disable in a more targeted way on our end.  Closing this.  phew\n. Very nice.\nThe only thing I worry about is the PageConfig toggle.  We'd like to be able to turn this on and off based on a value in an http response (\"bouncer\").  But PageConfig is synchronous, so we couldn't do that as this is currently set up.\nI can think of a few other ways to toggle.  Unfortunately, I don't think any would be as clean as what you've got here:\n- Add a lifecycle method to PageUtil (e.g. getPreloadScripts).  Could return a boolean, but a list of scripts would be more consistent with other page methods.  This would be pretty redundant with getScripts and getSystemScripts.\n- Add a key to the handleRoute response object (e.g. {code: 200, preloadScripts: true}).  I'd rather not add a bunch of magical keys there.\n- Add a key to the script objects returned by the getScripts and getSystemScripts lifecycle methods.  This would allow us to have a middleware that waits for our http response and modifies scripts on the way back up the stack.\nThat last one's not pretty, but maybe the least ugly of the bunch?\n@roblg, @bartkusa, any better ideas?\n. > I don't think there's any value in waiting for async data to turn this on.\nI place a pretty high value on the ability to dynamically control features at runtime using the aforementioned \"bouncer\" endpoint.\n\nthe goal is to tell the client ASAP what JS to start downloading\n\nTo be clear, this is async data that the preloads will be waiting on anyway (at Redfin) since handleRoute won't resolve until it's available.\n\nI'm struggling to think of a scenario where this is only valuable sometimes.\n\nHow about a script that I don't care about loading quickly?  Presumably omitting that from preload would free up resources for other more important scripts?  We currently have a single LABjs chain, but we've been talking for a while about supporting branches.  I don't want a preload from a secondary branch preempting a script in my critical path!\n. 200ms would be huge! :rocket: \nStill would like an interface that supports asynchronous opt-in and per-script opt-in. ;)\n. Yeah, that's definitely a tradeoff.\nIn the context of a real-world site running react-server the extra ~16KB is generally going to be a less significant percentage of overall page weight, but as far as weight of react-server itself it's pretty big.\nAs far as run-time benefit: We're seeing a ~10% improvement in server-side response time for one of our highest traffic pages, which is pretty hard to resist.  We also see measurable reductions in GC pause time and setImmediate delay.\nAside from the performance benefit we're also taking advantage of the monitoring events emitted by bluebird to instrument our usage of promises.  We had monkey-patched Q to get coarse stats on usage, but it turns out we hadn't done a very good job: We were under-counting our promise-creation by nearly a factor of 10!  bluebird gives us finer-grained events via a public API.\nHere are some stats from a pair of load tests in isolation (first with Q, then bluebird):\n\nI'm definitely sensitive to increases in library size.  Every byte matters, especially on mobile!  But in my opinion the benefits outweigh the cost in this case.\n. Not doing this now.\n. Whoa.  Cool.\n. Thanks @chris-voss!\n. I'm not sure we have a sufficient volume of issue/PR activity to warrant bot assistance. ;)\nThose eslint bots are awesome, though!\n. Sounds cool! \ud83d\udc4d \n. Nice.  Thanks @TonyHYK.\n. Moved to #78.\n. @doug-wade - This seems really close to being ready to merge.  Do want.  Ping.\n. @doug-wade - Looks like some conflicts have crept in here.\nLooks like there are also still a few non-leading tabs.\n. Dooouuuugggg.....\n. Oh, hey... I upgraded eslint as part of #132.\n@doug-wade - Anything you'd still like to pull in here beyond the simple upgrade?\n. Hi @TonyHYK, what's a use case for this?\n. Oh, I see.  The masterTitle was only being set in the constructor.  nice fix!\n. Turns out <RootElement>s are actually fine on client transition, and <RootContainer>s are fine on normal client transition.  But <RootContainer> with reuseDom doesn't update.  #218 addresses that (and adds a test page for it).\n. > pre-loading of the JavaScript and CSS bundles\nOoh, yeah! \ud83d\ude80 \nLet's see... For the JS bundle webpack will fetch it for us (and get it all prepped) if we call the loader in the routes object.\nFor CSS, unfortunately, I'm not sure if we can cheaply preload since the URLs are returned from getHeadStylesheets and it's not safe to call page methods out of order.\nGood idea!\n. @aickin - That's perfect!\nI'm going to freeze the scope of this PR to try to get some \ud83d\udc4d s and get it merged.  Filed #77 to capture JS and CSS asset prefetch as the next step for client transition performance improvement.\n. > And FWIW, @aickin you have my vote to be allowed to say \"lgtm\" ;)\nAgreed.  Thanks for reviewing!\n. This is awesome!  Thanks @RobKopp!\n. This is a nice fix.  Please get the indentation cleaned up for eslint and do something about the duplicate construction of frame identifiers and let's get this merged in!\n. Thanks @jmhwang7!\n. BTW - As mentioned in https://github.com/doug-wade/react-server/pull/2: Still need to deal with root container/element attribute differences, but probably should fix redfin#73 first.\n. Added some commentary to explain the DOM re-use strategy and hopefully help ease review here.\n. ~~Oh, just realized I need a README.  Will update probably in the morning.~~\nAdded.\n. Unless there are objections (bad name? bad idea?) I'm just going to merge this later this morning, since I have actual test pages I want to build to work on new features.\nStill interested in ideas for better build/run workflow here.\n. Not much, I guess?  The pages I'm thinking of for working on features aren't showcase-y things.  They're just simple pages that exercise certain react-server features.\n. react-server-examples is available.  Like that better?\n. > Asking because I'm interested in porting my react-server-examples over.\nOh, sweet!  Those are definitely better showcase examples than what I'm imagining here.  I think they make sense to maintain as separate packages.\nWe've historically built test pages on our internal react-server consumer, but I'd like to start putting that sort of thing out where:\n- It's useful to other react-server users.\n- It takes advantage of newer react-server features (cli).\n- It builds faster (our internal build is... not thin).\nBut these aren't the sort of pages where I'd say \"go here to learn how to do the right thing with react-server\".  They're more: \"go here if you want to test out how your changes to react-server render scheduling affect the feel of client transitions\".\n. Okay, gonna merge this.  I've got another branch with feature work that's based on it.\nIf you've got lingering objections please let me know!\n. I'm actually going to hold off on this until #83 lands so you don't get stuck with merge conflicts again. ;)\n. Should we do this for 0.4.0?  I feel like we should do this for 0.4.0...\n. Well... Didn't make it for 0.4.0, but React 15 support is now available in react-server@0.5.0. :metal: . This also fleshes out the test pages packages a little bit.  Might make the goal there a little clearer.\n. Thanks for reviewing.  I've been working on a change set based on this, so I'll be glad to get it merged. :)\n. BTW - I'd also like to start using https://github.com/redfin/react-server/pull/78, so please have a look there if you get a chance.\n. This is cool.  Next step in my mind is pulling startServer out of react-server-cli and into something that the CLI wraps.  These tests don't actually use the CLI. ;)\n. Nice, thanks @aickin!\n. > Bundling data is pure :fire:.\nMore to come! \ud83d\ude80 \n\nquestions\n1. A data bundle is only as fast as the slowest contributing upstream request.  If the upstream requests necessary to render content above the fold are much faster than that long pole it's probably better not to use a data bundle.\n2. That's a good point.  A page that makes many upstream requests, none of which are very slow, will generally benefit from data bundling.  I like having control in the linking page because it makes it easy to enable/disable bundling at run time and monitor the impact.  It may also turn out that some pages benefit from bundling in some contexts but not others (e.g. mobile vs desktop).  Maybe a page could override the default of false via setConfigValues(), but a request has ultimate authority?\n3. Yeah, I guess in theory this should be a non-issue with HTTP/2.  We'll see. :)\n. Ticket to set default bundling policy via page config: https://github.com/redfin/react-server/issues/92.\n\nAnybody feel ready to give this a \ud83d\udc4d ?\n. Hi guys.  I've got a big batch of frameback improvements nearly ready to drop that's based on this branch.  If you get a chance, please give this a look over and \ud83d\udc4d / \ud83d\udc4e .  Thanks!\n. Sweet.  Thanks @aickin!\n. Oh, I meant a separate package in the monorepo!  packages/react-server-examples.  Bring it!\n. > a .reactserverrc \nAw yeah!\n\na reactServer section of package.json\n\nHuh, cool.  I have mixed feelings about tucking config into package.json generally.  I see the appeal of having package config in one place.  On the other hand small single-purpose configuration files provide good separation of concerns.  Not opposed to this, and it seems to be a trend.  Just voicing my skepticism. :)\n\nIf you send in any arguments at the command line, nothing changes.\n\nThis seems unusual.  More typical behavior with configuration files is to allow command-line options to override values individually, right?  Whereas here if I add any command-line option (e.g. --log-level=debug) I'm then responsible for also re-specifying everything that would otherwise have been picked up from my config?  I'd prefer a merge sieve of defaults => config file => options.\n\nit doesn't try to find multiple configs and merge them.\n\nThis is another common pattern.  Not sure if it makes sense for react-server or not, but it's a logical extension of per-option command-line config overrides.\n\nconfig overrides on a per-environment basis.\n\nAwesome!  I don't get the example, though.  I would have expected the value associated with production to be an object with key/value configuration pairs rather than a single value:\njavascript\n{\n  \"port\": 4000,\n  \"env\": {\n    \"production\": {\n      \"port\": 5000\n    }\n  }\n}\n. This is awesome!\nNext question: Can this merge with this config?  Should it?\nSome values here probably shouldn't be exposed to the client.  Feels weird to have two config files, though...\n. I don't think anything is put in it or used from it by react-server itself.  But react-server transfers it automagically from the server to the browser, which is convenient.  We use it for things like asset versions and server domains.  I guess all stuff that can be transferred via a separate script include?\n@roblg - Any reason not to just kill it?\n. > filing it as a bug and separating it from this PR\nDone.\n. > YAWP\n\ud83d\ude06 ... \ud83d\ude02 ... \ud83d\ude22 \n. @aickin - Was this covered by #96, or is there more you'd like to see done here?\n. Thanks!\n. Okay, I'm done fiddling with it. :)\n. >  I think lerna doesn't like the fact that hello-world is not a direct subdirectory of packages.\nHmm... I think lerna might be on to something there, too.  hello-world is already taken, for one thing.\nWould it make sense for react-server-examples (still available!) to be the public module and have the individual examples be private?\n. > do we really need a public module at all?\nYeah, I guess not.  Doesn't even really make sense.  Same with react-server-test-pages.  Maybe we need something next to packages to contain modules that we don't publish?  Or maybe we need to augment lerna to bypass private modules (if it doesn't already)?  Or we need to ditch lerna?\n. Thanks @aickin! \ud83c\udf89 \n. @lidawang - It looks like this will prevent focus from being called on a second navigation to the same frame (when the frame URL is the same).  Have you tested that case?\nnavigate to page in frame => click back => navigate to _same_ page in frame\n. Thanks @lidawang!\n. Nice catch.  It also needs the next version of react-server, which hasn't been published yet.\nShould probably publish again soon.\n. This is addressed by #80.\n. Just landed #80.\n. This looks good to me, too.  Unfortunately some conflicts with master have snuck in.\n. Thanks @aickin! \ud83d\ude80 \n. > used npm install ../react-server-cli from the react-server-test-pages package and all was well.\nUgh.  Yeah, I'm not sure if we're somehow mis-using lerna or if it just doesn't do what we want it to do: Link together the cross dependencies within our monorepo.\nThe react-server-test-pages in this branch also needs the react-server from this branch.\n. Awesome.  Thanks for looking at it.\nBTW - I think I got one behavior wrong here that I'm going to address before I merge: Frameback links in a frame are only safe to convert to normal client transitions if reuseFrame is set.  Currently they're always converted.  If reuseFrame isn't set, I think it's (unfortunately) only safe to convert them to top-level full browser navigation.\n. > If reuseFrame isn't set, I think it's (unfortunately) only safe to convert them to top-level full browser navigation.\nTurned out not be as bad as all that.  Converting instead to a direct non-reuseFrame frameback navigation.  Nice that things like this can finally be pretty straightforward.  Used to be that any change to frameback logic was a nightmare. \ud83d\ude31 \n. (Moving this from edited PR description.  Progress bar didn't how up in list view... maybe it will if this is in a new comment? *edit: nope...)\nStill have a few of items to deal with that came up since this PR was created:\n- [x] Handle non-reuseFrame frameback links within the frame.\n- [x] Set history nav state on page load\n- [x] Test interaction with non-react-server history nav users\n. Okay, I've addressed the remaining issues here.\nGoing to merge once the build passes.  If you want to look at this before I do, stop me before then. \ud83d\ude1b \n. Looks like #102 is related to this.\n. >  PR for the first step of integrating streaming into React core.\n\u2728 Awesome! \u2728 \n/me furiously clicks emoji on that PR.\n. Aw yeah! :metal: \n. This one's only three lines if someone has a moment to review. \ud83d\ude07 \n. Related to #95.  Also addressed by #80.\n. Just landed #80.\n. This went out with 0.2.0 yesterday.  Thanks for reporting @kcjonson!\n. Hi.  I want to start using this.  Please give it a look over if you get a chance.\n. This looks good to me.  Nice improvement!\n. Note that travis is failing on this in master right now, so PRs may need to be rebased once this lands.\n. Added a few more changes here: Upgraded to the latest beta of lerna because that's what it took to get the dependency change in react-server picked up at bootstrap time.  I also cleaned up our .travis.yml (modeled after what I did for stratocacher) because that had been bugging me for a while.  Runs a little faster without the redundant global installs of gulp and lerna.\n. Gonna merge this to get other PRs unblocked.\nNext time you update from master be sure to upgrade lerna.\n. This PR moves all dev dependencies into the individual packages.  I think a next step might actually be to move in the opposite direction and get all of the dev dependencies factored out to the root.  That would speed up bootstrap and keep us on consistent tooling across packages.\nDefinitely a separate PR, though.\n. This is pretty small.  Please take a look when you have a moment.\n. > @gigabo encouraged me to be cute\n\ud83d\ude18 \nThis is great!  Plus you found a bug while you were working on it!\n. I think this was fixed by #501.  @roblg does that look right?. @mahalie - Pretty please? \ud83d\ude4f \n. @kcjonson - oooOOOOOoooohhhh!\nBut... don't we want something square-ish?  Seems like most logos are either square or landscape.\n. Other examples of logos in the React ecosystem:\nhttps://github.com/react-bootstrap\nhttps://github.com/Legitcode\nhttps://github.com/rackt\n. Thanks @careylin!\n. :drool:\n. Also, any other keywords that we should add?\n. Thanks @doug-wade.  Added those + \"universal\".\nGonna merge when this build passes unless someone comes up with more improvements first.\n. \ud83d\udc4d \n. Nice catch @nampas!  Thanks for reporting!\n. Nice, good idea @TonyHYK.\n. Any objections here?  Pretty basic improvement.  I've got another round of patches that I'd like to build on top of it, so please give it a quick look over if you get a chance.\n. Oh YEAH!  That's awesome!\n@careylin - Please sign the CLA (just click the yellow badge that @CLAassistant spammed into this PR), and we'll get this front and center on the project landing page!\n. This needs #137 to get bootstrap working.\n. Pulled #141 out of this.  Will rebase when that lands.\nGetting close!\n. As @TonyHYK and @lidawang have discovered, getting set up with a test server is really awkward without this.  Adding to the Announcement milestone.\n. @doug-wade - This is going to conflict with #150.  Go ahead and merge that when you're ready and I'll rebase this.\n. Whelp... looks like #150 has already sprouted conflicts, and this one's been a long time coming.\nMerging! \ud83d\udca3 \n. Thanks!\n. Oh... huh. :)\n. Okay, pushed a version that's modularized.\nStill ~4KB bigger, but probably worth it to be off of creaky ancient technology.\n. This is just eslint/nsp.  Merging.\n. Those are pretty sweet, but... I've already npm install --save-dev babel-preset-stage-1 in like 200 places. :whine:\n. Thanks @davidalber.\n. Anybody want to take a stab at salvaging the still-relevant topic overview here and putting it into a context that's up-to-date with current react-server?\nSpeak now before I nuke it. \ud83d\ude2c \n. I was actually thinking more of the \"Design Principles\" section.\n. Thanks for reporting @lidawang.  That's definitely confusing.  I think omitting RootContainers entirely from the above-the-fold count makes the most sense.\n. Good bug @lidawang.  @bartkusa came up with a better API that doesn't have this sort of confusing behavior to deal with.  We're going to migrate to that, so closing this ticket as not relevant to the future.\n. Nice!  That will be a good improvement.  Thanks @TonyHYK!\nFeel like taking it on? ;)\n. Straightforward documentation improvement.  Merging.\n. @TonyHYK - I like the look of this!\nLooks like travis caught a bug: Need to handle undefined window.performance.\n. That seems reasonable, though maybe it would be less work to just have a fallback?\nLike:\njavascript\nwindow.__reactServerTimingStart = window.performance\n    ?window.performance.timing.navigationStart\n    :new Date\nWhatever's easiest.  Not too concerned about IE8. :)\n. Yep, it's just npm test from the repo root.\n. This is great @TonyHYK!  Glad to have that <script> out of the beginning of the <head>!\n. Yeah, those bug me, too.  But if we're going to ignore them we need to also avoid publishing them.\nTwo approaches:\n- Get them into all of our .npmignores\n- Have a \"cleanup\" step that runs as part of publish.  This would also help avoid publishing stale code (#44)\n. Once #150 and #151 have landed, \ud83d\udc4d  here from me!\n. Nice!  I had been imagining putting gulp clean everywhere, but this is even easier. \ud83d\udc79 \n\ud83d\udc4d \n. Belt and suspenders. \ud83d\udc4d \n. Sweet.  There are probably a number of design principles involved in react-server that aren't covered by this doc, but I'm glad to at least have these there. :)\n\ud83d\udc4d \n. /me has no principles. \ud83d\udc79 \n. Uh oh... looks like some of the automated tests are failing.\n@lidawang - You can run those locally with npm test at the repo root.\n. @lidawang - Sounds like your gulp-eslint is out of date.  Try an npm update in your repo root.\n. Oh, whoa, just read that again.  Looks like it's picking up an eslint in your packages/react-server/node-modules.\nMight be easiest to start fresh (in your repo root):\nbash\nfor d in `ls -d packages/*/node_modules`; do echo $d; rm -r $d; done\nnpm run bootstrap\nnpm test\n. @lidawang - Given the test weirdness here, I'm tempted to say let's just ditch this and wait for #161. \ud83d\ude16 \nThat's going to obsolete it, anyway.\n. This is awesome @lidawang!  Worth mentioning in packages/react-server-test-pages/README.md.\n. Yikes.  Nice find @doug-wade.\n. Good call!\n. :squint:\n. @doug-wade - Look like this conflicts with your other recent badge PRs that just landed on master.\n. @doug-wade - This one's conflicting, too.\n. @bartkusa - That's an awesome idea!  SO much better than the current API!\n. Build passed.  Merging.\n. > generator-react-server is already taken.\n:hurtrealbad: \n. As I think about this more, I think we need to choose a different name.\nreactserver isn't the name of our project.  It's confusing that the name is different in this one place.\nI wonder if @steveniseki would be willing to trade names with us?\n. Hi @steveniseki - We've got a project named react-server that we'd like to set up a generator for.\nYou've currently got the generator-react-server name in npm.  Would you be willing to change that to generator-reactserver or some other name so we can use our project name?  We'd really appreciate it!\nThanks,\nBo\n. Thanks @StevenIseki!  We're not entirely sure how it works, either, so we're going to open a ticket with NPM support to get it figured out.  Do you mind if we CC you on that?\n. @doug-wade - We should add a thanks to @StevenIseki in the README here.\nSomething like this:\n``` markdown\nThanks\nThanks to Steven Iseki Martin for letting us\nuse the generator-react-server npm package name!\n```\n@StevenIseki - Is there somewhere besides your github account you'd like us to link that to?\n. @doug-wade - This is awesome!  Once this lands we should update the README in packages/react-server to recommend it.  I left a couple of comments on the README here, but once those are addressed, \ud83d\udc4d  from me!\n@StevenIseki - Thanks again!\nIt's really nice that our users will be able to type yo react-server to stand up a react-server instance.\n. Thanks for taking this on @doug-wade.\n. This is great.  Thanks @doug-wade!\n. Isn't this covered by getLinkTags()?\nIs there any other use of the canonical URL beyond adding a <link rel=\"canonical\" ...> tag?\n. Sweet.  Thanks @aickin.\n. This is awesome.  Thanks @TonyHYK!\n. The data-react-server-timing-offset hack has bugged me from the beginning.\nUnfortunately as far as I know there's really no other way for us to get display timings for elements above the fold.  I'd say it's better to have accurate timings where we can than to have inaccurate timings everywhere.\n. It looks like #168 was just for displayAboveTheFold.fromStart, whereas this ticket is for improving all display timings.. @sresant Did #699 fix this?. Thanks @gitter-badger.  Closing in favor of #172.\n. Closing this in favor of #177.\n. Lovely.  Thanks for filing @doug-wade.\n. Yes.  Fixed... forever. \ud83d\ude10 \n. Here's what this looks like for a page load => frameback navigate => back (with #173 for logging in the browser).\n\n. Thanks for tracking this down @bw070908!\n. Awesome, thanks @lidawang!  This will help with work on #161.\n. Gonna merge this so I can get 0.2.10 out the door.\n. \ud83d\udc4d \n. Yikes!  Thanks @conorcussell!\n. Thanks @notatestuser!  Merged #183.\n. Hi @mattiasewers,\nThanks for looking at react-server!  You're right, we actually don't use react-server-cli in production, but that's mostly because it didn't exist until much later.  We pulled the core of react-server out into a stand-alone package so we could open source it, and @aickin set up the react-server-cli to fill in some of the gaps that were left.  It actually provides much more than just a CLI:\n- A build that generates javascript bundles for client-side use\n- Middleware that handles loading those bundles as needed\n- A basic express server that ties it all together\n- A CLI for configuring it all\nThose are all bits that we do separately at Redfin, but actually react-server-cli does a nicer job in some ways than we do with our internal build.  The \"routes\" file format is much nicer, for example.  Medium term we're thinking about how to make those available independent of the \"CLI\" part of react-server-cli.\nThere are, still, some things that we use internally that we haven't pried out into packages we can share yet (but we're working on it!)\nFor example:\n- A server cluster with:\n  - Fault tolerance/isolation\n  - Graceful restart\n  - Log file management\n- A beacon framework for gathering stats and errors from the browser\n- A statsd interface to track all those logger.time values (this is crucial for us)\nOur goal is to make those available as soon as we can and let them integrate easily with react-server and react-server-cli.\nIn the short term, I think the answer is probably: Use react-server-cli --compile-only and run the build it produces in a custom production server.  We need some documentation on how to do that.\nThanks for calling this out.  I've opened #188 for adding \"running in production\" documentation.\n. Thanks @aickin!\n. Yep!\nJust hand the server and the (compiled) routes to the middleware function exported by react-server:\n`` javascript\nconst express = require(\"express\");\nconst rs      = require(\"react-server\");\nconst routes  = require(\"./routes\"); // Compiled byreact-server-cli`.\nconst server  = express();\nrs.middleware(server, routes);\n``\n.installDependenciesandnpmInstallare provided byyeoman`?\nWhat is the difference between these two?  They're interchangeable?\n. Got it.  Thanks!  LGTM \ud83d\udc4d \n. Whoa... that's not good.  Thanks for reporting @nampas.\n. Hi @nampas.  I'm having trouble reproducing this.\nPlease have a look at #197 and see if anything jumps out at you.\n. Yep, needs to be discoverable.\n. Oops, looks like @doug-wade covered this in #191.\n. Yes!\n. Indeed.  Thanks @doug-wade.\n. This turns out not to have been a bug.  The tests are still useful, though, so going to merge.\n. > I dig all this test infrastructure!\nYeah, but we really need to automate it to stave off regressions.\n. Gonna merge this.  Need stack traces for server-side exceptions!\n. Yeah it would be tough to automatically merge a whole webpack.config, though maybe webpack-merge could help?  Targeted afterBabelLoader-type hooks might be easier to tame, but I wonder how many of them we'd eventually wind up with...\nThanks for looking at this @tsnieman!\n. I think #598 took care of this (and #709 added a CLI option for it). \ud83c\udf89 . Yeah! :metal: \nThis is awesome!  I need to get set up with a modern docker to try it out.\n@doug-wade - You're most familiar with this yeoman generator.  Take a look at this!\n. This looks great to me. \ud83d\udc4d \nI'd like to wait until @doug-wade has had a chance to look over it, too, since he knows this generator well.\n@doug-wade - Is this something that would be easy for us to prompt the user for down the road?  Like want to run in a docker container? Yes/no and conditionally include this stuff?\n. Hey, I just tried this locally.  The README changes showed up, but the dockerfile and the docker-compose.yml didn't... @doug-wade is there something else that needs to happen for new files to get picked up?\n. > wait for #203 before generating the config\nMakes sense.\n. Alright!  It's loading for me!\nBut... static assets aren't, yet.\n\nStill trying to fetch through localhost.  Did I mess up my config, or is there a bug somewhere?\njson\n$ cat .reactserverrc\n{\n  \"port\": \"3000\",\n  \"env\": {\n    \"docker\": {\n      \"host\": \"192.168.99.100\"\n    }\n  }\n}\n. > modify the script in package.json\nSweet, that worked.  Thanks.\nMind rebasing this branch to pick up your fix from #206 now that it's merged?\nI'll see if I can track down what's going wrong with the tests.\n. @doug-wade - Uhh.... why aren't the tests passing here?  Seems right.\n. This is awesome!  Thanks @withinboredom!\nI hope we'll see more cool stuff from you soon. \ud83d\udc79 \n. BTW - I'm testing out a changelog generator.\nThe next version's shaping up to be the @withinboredom show:\n\nUnreleased (2016-05-25)\nBug fix\n\nreact-server-cli\n#206 Default options for cli overwrite config file options. (@withinboredom)\n\nEnhancement\n\ngenerator-react-server\n#200 Add docker to yeoman generator. (@withinboredom)\n\nCommiters: 1\n\nwithinboredom\n. Looks pretty easy to set up slackin for slack auto-registration.\n. @mattiasewers - Yeah, there are a few other potentially good chat setups out there.  Given the market dominance of slack (and my personal bias \ud83d\udc79 ), though, I'd be hesitant to jump from gitter for anything less.\n. @mattiasewers - Yeah, that's a real concern.  I hadn't realized that lerna was using a custom registration setup.\n\nLike @doug-wade said, though, it's really easy to auto-register for their slack org!\nIf all we need is to set up a host running this somewhere, that's not a huge barrier.\nbash\n$ npm install -g slackin\n$ slackin \"your-team-id\" \"your-slack-token\"\n. Huh.  Looks like babel's on slack, too.\n. @aickin - Noticed your vote on the \ud83d\udc4e  side.  Anything to add to the \"cons\" list?\n. Tried out conventional-changelog.  It produced a totally empty changelog.  Empty items for each release tag.  Not helpful.\n. @doug-wade - That second one looks like a ruby version of @hzoo's changelog generator for babel.\n@hzoo - That seems pretty self contained.  Would you be interested in spinning it off as a stand-alone tool?\n. @hzoo - It's the closest thing to an it-just-works solution for us.\nBut I've got a laundry list of changes I'd like to make to it, too:\n- Configurable tags\n- Tag => heading mapping (toTitleCase(tag.slice(5)) doesn't work for ours that aren't tag: prefixed)\n- API response caching.  Requests are the same each time I run with a tweaked configuration.\n- Skip changes to files in publishConfig.ignore.  Don't need to include README updates, etc.\nIt's not tied to lerna, in that it doesn't really depend on it (though it would for publishConfig.ignore), but it's really meant for use on lerna repos.  Seems to make the most sense as a lerna command, but it sounds like there isn't a path to get it merged in?\nI don't want to maintain a fork of lerna with my changes to lerna changelog.\n. We've got a changelog in next now.  Generated using lerna-changelog.\n. Yeah, that sounds good.\nWould it make sense just to populate with all the defaults so it's clear how to override?\n. Nice fix @withinboredom!\n. Thanks for fixing that up @doug-wade! \ud83d\udc4d \n. :squint: \ud83d\udc4d \n. This looks good.  Thanks for adding it @doug-wade! \ud83d\udc4d \n. Looks good.  Thanks @doug-wade. \ud83d\udc4d \n. Good call @nampas.  We have a failsafe render timeout on the server, but not in the client. \n. @doug-wade - lerna bootstrap runs multiple installs concurrently.  Maybe the clean during one is clobbering the build for another?  We might not be able to run clean during prepublish.  Maybe we could add it instead as lerna prepublish script?\n. @doug-wade - Looks like it requires a scripts/prepublish.js to live in each package.\nShort term let's at least just get the clean out of our npm prepublish to get builds passing.  Just having the option to clean before publishing is a good step forward. :)\n. Seems to have done the trick. \ud83d\udc4d \nThanks @doug-wade!\n. /me is not that patient. \ud83d\udc79 \n. Nice. \ud83d\udc4d \n. Note that this is merging into next.  Once I merge this I'll rebase next onto master and look at publishing a prerelease of 0.3.0.\n. @doug-wade - This is awesome!  What a great example!\n. So, this is cool.  It's a good example of the stated use-case for frameback.  But... in order to actually demonstrate the benefit the list page needs to be slow.  I haven't pulled this to try it out, yet, but something to keep in mind.  If the list page isn't slow then you're better off with normal client transitions.\n. @doug-wade - Hit an error trying to get this running:\n\n. @doug-wade - Just tried this out.  Looks like it's blocked by #228?  Details pages are failing to load for me, and that error's appearing in the log.\n. Oh, no, I see.  It's actually the second details page that fails, due a CORS violation.\n\nWe'll need to either pass those requests through a data endpoint or disable reuseFrame.\n. Awesome!  Looks great!\n. Thanks for reporting @winkler1.  Not sure what happened there.\nMaybe someone was testing something? @doug-wade?\nAnyway, looks like it's gone, now.\n. > How does the CHANGELOG generation work?\nI made a changelog generator based on @hzoo's lerna changelog PR.  Working on getting it opened up.\n. Gonna merge this in so I can point to the CHANGELOG on next for what's included in the 0.3.0 beta.\n. Changelog generator's up on npm: https://www.npmjs.com/package/lerna-changelog\n. @aickin, @withinboredom - I think you two are probably the most familiar with this code.  Have a look?\n. Ooh... fonts...\nWe have a ticket open for custom loader support.  But a new asset type might be easier have built-in support for, since the development asset servers will need to know about it.  They live right in startServer.js for now.\nGood issue @withinboredom!\n. @withinboredom - Closing this as \"not a dumb question\", and giving the web font issue that spawned from it a dedicated ticket: #233.  Thanks. :)\n. LGTM\n. Even better. :)\n. @doug-wade - You want to try to get this in for 0.3.0?\nLooking to cut a (hopefully) final beta with changes from master this afternoon.\n. Thanks @doug-wade. :)\n. \ud83d\udc4d \n. Nice, thanks @doug-wade! \ud83d\udc4d \n. @withinboredom - You interested in looking at this?\n. Awesome.  Thanks @aickin!\n. Oh, yep!  Thanks @aickin.\n. Could we separate the data bundling (ReactServerAgent.cache) from the request library?  Give it a clean API so that a fetch wrapper/interceptor could talk to it as easily as a superagent wrapper?\nThen, I could do import SuperAgent from \"react-server-superagent\" or import fetch from \"react-server-fetch\" depending on my preference.  And it would be easy to add support for other libraries.\n\nthat would require documentation and is the kind of thing developers miss.\n\nYeah, that's a concern.  It has the advantage of being explicit, though, so the potential for surprise is lower once you know about it.  But it doesn't have the same magic factor of \"hey, this just works!\"\n. From @withinboredom in #259:\n\nI lately implemented a wordpress plugin for my workplace that turns this on. This is actually simpler than you'd think. I'm going to take a look under the hood of react-server and document the work that needs to be done and then we can figure out what to do about it.\n\nThanks @withinboredom!\n. Oh, yep.  Thanks.\n. > update react-server-cli to use react-server-gulp-module-tagger as part of its compile step\nI totally thought it did that.\n. This was closed by #288.\n. This is a surprisingly little amount of code to make all of those assets work.  Magic.\nRelated: @aickin's back, baby! \ud83c\udf89 \n. Related: https://github.com/redfin/react-server/pull/850\nCC @lidawang. Ouch.  Thanks for reporting @DanielFGray.\n. \n\ud83d\ude2c \nThat's ~10 minutes added to our (already painfully slow) travis build.\nThese are high value tests, but... ouch.\n. Yeah, that's worth considering.  I think it's valuable to have it in the main repo with everything else just for visibility, even if lerna's not helping us keep versions in sync.\nOur latest master build took almost 10 minutes even though the build for the PR that merged to kick it off only took 7.  I've seen complete tests hang for a while after finishing locally on my laptop.  I wonder if our test servers are somehow not exiting cleanly or if we could speed that up somehow...\nI guess my point is I'd rather try to make the tests faster than to start spinning packages out of the repo to speed the build up.\n. Filed: #262.\n. Ugh, that's frustrating.  Guess we'd better figure out what's going wrong there...\n. Nice!  This is looking slick.  Will be good to have real tests on the generated server.\nI noticed one issue with the docs, but other than that this looks good to me! \ud83d\udc4d \n. Oops, the screen shot in the description left out some key info. \ud83d\ude06 \n\n. Thanks @roblg.  Good fix.\n. Ooh, good one.\n. Awesome!  Thanks @careylin!\n. Thanks for taking this on @doug-wade.  The image in the README seems not to be working?\n\n. Also, BTW - What is the purpose of the [XXX] commit message prefix?  Without a leading # it isn't recognized by github (or other consumers of the commit message).  Do you have something interpreting this?\n. Awesome!  Thanks @doug-wade!\n. Sounds cool!  Some of those timings are already logged on the server, and it should be straightforward to instrument the rest.  The real feature here is getting server-side timings sent to the client and presenting them somehow.\nFor a waterfall-style presentation we would need start/end times relative to the beginning of the request as well as durations.  This is straightforward to get for all timing events that happen in a request context.\nIdeas for how to send the timing info?  Seems like easiest would be to just send it in the primary document like late data responses and node arrival alerts.  There's a little bit of a chicken/egg problem at the end of the request there, but maybe the very tail-end timings don't matter?  Could alternatively open up a secondary channel, but that's more complicated.\nIt would be extra awesome to be able to accurately merge server/client stats in the same waterfall!  Would just need an offset for the server's request start time relative to the browser's navigation timing API start time... Not sure how well we can estimate that...\nThe more I think about this the more excited I get!  Good idea @aickin!\n. @bharath-rengarajan has an amazing chrome plugin that generates a waterfall graph from the server timing data.  Gotta get that into this repo and up on the chrome store!. Note that even with this patch the integration tests hang around for ~20 seconds after completion.  Looked at process._getActiveHandles(), and there are a bunch of 20 second timers.  Some timeout on something?  Would be nice if those were unref'd.\n. @roblg - Yes!  Nice find!\n. I had to patch lerna to track this down.\n. > wanted to get some early feedback on the general approach.\n:metal: \n. Some candidates:\nxo:\n22M    node_modules/eslint\n 82M    node_modules/xo\nava:\n256M    node_modules/ava\n820K    node_modules/jasmine\nThese are modules that have equivalents already in our repo.  Standardizing on one can reduce our dependencies without sacrificing functionality.  Just dropping xo and ava would eliminate 300MB!\n. Okay, we need to get this done.  I've rebased and pointed this at master.\nReady to merge once the next version goes out.\n. Okay, I've rebased and changed to support both 0.14 and 15 as suggested by @auskast.\nGoing to remove the breaking change label. \ud83c\udf89 . React 15 support is now available in react-server@0.5.0. :metal: . Mind. Blown.\nThis is an awesome idea!\n\na skeleton page with one empty RootElement and performs a client transition to the page in question\n\nI'd been thinking about pre-loading the frameback frame with something like that, which could improve first load performance on frameback nav.  Another skeleton page use case to keep in mind.\nSo... You working on this?  When can I play with it? \ud83d\udc79 \n. \ud83d\udc4d \nMaybe we should keep track of the ports we're using for tests somewhere?\n. Yeah, great. \ud83d\udc4d \nI thought we had one more, but I don't remember where it is... so, :shipit: \n. Hi @karanjthakkar thanks for taking this on!\nYeah, I think react-server is the biggest offender.\nLooks like react-server-core-middleware has a couple, too.\n. Thanks @aickin! \ud83d\udc4d \n. I wonder if any of this should go into packages/react-server/README.md, too, so it shows up on npmjs.com?\n. > I don't think that there's anything in react-server that's really based on Flux\nOh, yeah, nice catch. \ud83d\ude2c \nLooks like there are two references to big pipe in there now, though?\n. This is great.  Thanks again @aickin!\nGuess I'll get to try out Lera's new --skip-npm flag for v0.3.3. \ud83d\ude01 \n. This is awesome!  This could provide a big improvement on pages with lots of root elements! \ud83c\udf89 \n. This addresses #250.\n. Whoa.  @doug-wade - Is that new?  Didn't it used to just start with npm start?\n. I see.  In that case let's get #280 out (and revert that portion of this PR when we do)!\nThanks for clearing this up @aickin.\n. Yikes.  Nice catch, @aickin. \ud83d\ude2c \n. Thanks for dealing with this, @doug-wade.\n. This is sweet.  Thanks @doug-wade!\n. Looks like this was brought up again in #759 and there's some more discussion there so let's merge this one into that.  Thanks @mattiasewers!. \ud83d\udc4d \n. Awesome.\n. Yeah, LGTM, too.  \ud83d\udc4d \nI've got some interface shuffling itches, but nothing prohibitive.\n. @doug-wade - Blocking on 0.4.0 of what?\n. It requires breaking changes?\n. Ooh, yeah that's a tricky thing about webpack loaders.  The underlying module name is built up from partial input.  Here's where babel-loader is referenced... just as \"babel\". \ud83d\ude2c . Thanks @roblg. Added a security tag just for this. \ud83d\udc4d \n. \ud83d\udc4d \n. :feelsgood: \n. Oh, probably off by more than one, actually.  That should have more than one element in the module tag.\n. Yeah, same. \ud83d\ude0c \n. Tracked this down to the webpack-dev-server upgrade in 0a7396593b9a38790bd6c0d5a68e730f13b8dfe9.\n. It does not appear to have a changelog. :feelsgood: \n. Found the commit that introduced this via bisection, and submitted a PR for a patch.\n. Oh, yeah... we actually have an old ticket open for that internally from before we even open-sourced react-server...\nAs a workaround you can actually just leave it method: \"get\" and it will accept POST requests. \ud83d\ude2c \nThanks for reporting @mattiasewers.  Good to have that tracked here.\n. Ah, yeah.  We use the body-parser express middleware internally.  #249 is open to add that to the server set up by react-server-cli.  Should be a straightforward patch.\n. Nice! Please do!\n. @kimgronqvist - The mocha dep actually can't be pulled up to the repo root because it's being used as an executable in an npm script.  But it looks like the dependency is there, so...  Maybe it just failed to build?  Posted some more error output in #534.\n. Oh, man... don't tell me lerna run doesn't work on windows. \ud83d\ude2c \n. \ud83d\udc4d \n. \ud83d\udc4d \n. > Does this fix that?\nYep.\n. Nice. \ud83d\udc4d \n. Yeah, it would be nice to have this pluggable somehow.  JSON is a pretty good stopgap, though. ;)\n. Weird. \ud83d\udc4d \n. I think we need to do this with react-server, too...?\n. Hi @decoy31, please rebase this again to pick up #365, which just landed.\n. AARRARARARRRGHGHGHHHHH!!!!! :goberserk: \n. Hi @egid, please rebase this to pick up #365, which just landed.\n. Nice!  Thanks @egid! :metal: \n. Hi @SteveVitali.  Thanks for fixing these!\nUnfortunately... the docs have moved since you opened this PR. \ud83d\ude07 \n. Hi @SteveVitali - The diff for this PR looks weird, now...\nYour merge of master seems not to have gone quite right?\n. AAAAAAAHHHHTRTTRRGHBHJGJHHFHGHH!!!! GitHub!!!!!!! :goberserk: \n. Nice. \ud83d\udc4d \n. This nearly cuts build time in half (~8 1/2 min => ~4 1/2 min).\n\n. With one final tweak (avoid unnecessary cache store):\n\nMore than twice as fast. \ud83d\ude80 \n. Wow, that's a great resource!\nMaybe we could start with these?\n\n. This is done.  Thanks @davidalber!\n\n. > Disabling hashed assets\n\ud83d\ude3f \n. \ud83d\udc4d \n. Awesome.  Thanks @egid!\n. Do we just need to pass --js-url /assets/ in build-assets?\n. Fiiinnaalllyyyyyyy!!!!! Figured it out.\nTurns out jasmine's default timeout applies to asynchronous beforeAll functions, too.  Just need to pass an override to increase it for server start up. :feelsgood: \n. > sinkhole@gmail.com\n\ud83d\ude2c \n. Oh, right... CSS...\n. Together we take on webpack and we shall prevail! \ud83c\udf8f \n. (Please let me know if I'm doing anything dumb here... \ud83d\ude01 )\n. Also pushed a text change to avoid this weird wrap:\n\nNow looks like:\n\n. This is actually failing CI.  Must be some change to eslint behavior.\n. No longer necessary due to #495.\n. No longer necessary due to #495.\n. Maybe an About section?\n. Yeah! \ud83d\ude80 \n. Awesome.  Thanks @davidalber!\n. Superseded by #484.\n. Awesome!  Thanks @davidalber!\n. This was fixed by #500.  A more thorough fix is in #501.\n. Gonna merge this because I want to build on it.\n@aickin - If you get a chance please take a look!\n. Hmmm... dev tools are showing that the html response is compressed, at least for the homepage:\n\n@patrick-mcdougle - Which page are you seeing uncompressed HTML on?\n. Ooh, nice catch!\nWe're using nginx as a caching reverse proxy and letting it handle encoding.  Looks like it's being smart about un-chunking response bodies that fit in the window.\nHere's a longer one that it leaves chunked:\nhttps://react-server.io/docs/intro/why-react-server\n\nHadn't realized it was doing that.  Nice little optimization. :)\n. Oh, actually... maybe we should reduce the window size.\n@davidalber Is that configurable with nginx?\nHere's what we do at Redfin:\njavascript\n        if (gzipEnabled) {\n                // The default value for `windowBits` is 15 (32K).  This is too\n                // large for our CSS/script includes to make it through before\n                // we start waiting for the body.  We _really_ want to kick off\n                // secondary resource requests as early as possible, so we'll\n                // decrease the window size to 8K.\n                //\n                // TODO: allow gzip opts to be specified via config?\n                server.use(require('compression')({ windowBits: 13 }));\n        }\nOr, rather, what we used to do before we offloaded encoding to nginx internally.\nMaybe we should look at tuning that again on redfin.com, too. \ud83d\ude01 \n. Doesn't repro on Chrome. :feelsgood: \nhttp://www.webpagetest.org/result/160803_7X_140/\n. How does one use this in development?\n. Okay, uh... LGTM, then? \ud83d\udc4d \n/me has no idea what this does.\n. Thanks @davidalber!  How about compressing the HTML output, too? \ud83d\ude01 \n. @doug-wade \ud83d\ude01 \n. Whoops!  Thanks @davidalber!\n. Oh, wait... the env-specific config just needs to be removed.  The outer port is 3010.\n. Talked with Nancy about this offline.  Currently there's no event that fires consistently across all navigation types (page load, client transition, frameback, ...) until loadComplete.  That's pretty late to fire a pageload event for analytics.  There may be other analytics events that fire before that which may wind up associated with the wrong page.\nSo, this will be an event that fires consistently as soon as the data for an analytics page view event (url, title, navigation type) is ready.\nThanks for filing @nancydo.\n. Thanks for reporting @Noirbot.\n(And thanks for fixing @doug-wade \ud83d\udc4d )\n. Worth looking at.  Our use of winston isn't superficial.  Custom log levels.  Custom transports.  Custom client logger that implements the same interface.  That's not even counting the extensions we have at Redfin that we haven't pried out to open source yet.\n. Thanks @davidalber. \ud83d\udc4d \n. \ud83d\udc4d \n. Nice! \ud83d\udc4d \n. Thanks @dharamgollapudi!  Guess we missed this one in #503.\n. Oops... \ud83d\ude07 \nThanks @doug-wade!\n. I think we've done this.  Tag line is now:\n\nBlazing fast page load and seamless navigation.. Whoa, nice catch @nattofriends!\n. Thanks @lidawang!  Will be nice to pick up https://github.com/lerna/lerna/pull/192 when it lands so we can drop the extra two copies of cli.js here. \ud83d\ude1b \n. @doug-wade - This is actually just the top-most entry point for react-server-cli.  We have a couple of extra copies laying around until the next version of Lerna lands, but after that it will just be this one tiny file that needs this treatment. :)\n\n(Note the require(\"babel-core/register\"); at the top)\n. > 44.40%  CSS\n\nEh, close enough. \ud83d\ude01 \nThanks @egid!\n. Thanks for filing @kcjonson.  In the future, if you've already implemented a feature there's no need to file a separate ticket for it.  A PR is worth a thousand tickets. \ud83d\ude01 \n. I like this.  It's going to be a cool improvement!\n. Hi @kcjonson, I just took another pass through here and realized that the root elements created during client transitions will also need to respect tagName.  Take a look at _createReactServerRootNode and _createContainerNode in ClientController.js.\nIt would be good to have a test page set up to play around with this.  You could either create a new page, or modify an existing page like the navigation playground to use non-div root containers/elements.  That could actually really simplify the playground, which is table-like, but uses CSS on divs to lay it out.  The other benefit there is you can use it to test all of the navigation variants (client transitions with and without DOM reuse, etc).\nSo, I think the remaining things I'd like to see here are:\n- [ ] Separate tagName from attrs\n- [ ] Support client transitions\n- [ ] Add a test page that uses tagName (or modify an existing page)\nBTW - You'll probably want to pull and bootstrap to pick up #533 before you work on test pages.\n. @doug-wade - Looks like there were some build failures higher up.\n\nMaybe mocha (or one of its deps) just failed to build?\n. Thanks @doug-wade. \ud83d\udc4d \n. Thanks @doug-wade.  Dropping the enhancement label here.  Doesn't improve the functionality of the plugin.  Does clean it up nicely, though! \ud83d\udc4d \nDo we need a devDependency on eslint here, since it's using the binary?\n. Yeah, it's preferable for dev dependencies unless we use them in an npm script. \ud83d\ude01 \nDid some testing the other day and discovered that lerna run ... doesn't actually have any magic for making binaries from the repo root available in packages' npm scripts.  Guess it works sometimes, though?  Pretty confused by the whole situation.\nI guess as long as it's passing in travis... \ud83d\udc4d \n. Thanks @amilajack.  This is funny looking, right?  We originally had the indentation this way, but it turns out the travis CLI actually converts to the weird indentation we've got now.\nI think it's easier to read with your patch, though, and we don't run the travis CLI often so we'll take it! \ud83d\ude01 \n. Nice, this is a saner interface. ;)\n\ud83d\udc4d \n. The stack's getting too tall here.  Will review when #560 lands.\n. Looks awesome to me! :metal: \nThanks for humoring my obsession with factoring out the regexp line noise @doug-wade. \ud83d\ude05 \n. Nice. \ud83d\udc4d \n. Nice catch!  Thanks @davidalber.\n. Oooh, nice catch @CreepGin!\nBetter still would be to have a consistent return value in the if (httpsOptions === true) case, but that may not be straightforward to get patched through...\nThis at least avoids trying to start everything twice. \ud83d\ude06 \n. ^ File #569 to track that.\nThanks @CreepGin!\n. Nice. \ud83d\udc4d \n. Nice, thanks @alex88!\nIf you're feeling ambitious you could also add a .sass import to the sass test page.\n. Heh, yep some basic instructions in the README.\n~~You'll need to npm run prepublish in packages/react-server-cli once to get your patch built.~~\n^ That's actually covered by the npm run bootstrap step mentioned in the README.\nIf you run into any trouble just ask here or on slack!\n. Whoa, that's not good!\n@davidalber - Looks like slackin's rejecting people!\n. ^ Ticket for slack issue: https://github.com/redfin/react-server/issues/580\n@alex88 - I tried to send you a manual invite, but ran into the same issue. :(\n\n. Yeah, I reached out via their help form. :fingers_crossed:\nNo need to squash.  Your commits represent discrete logical changes.\nThanks for improving React Server!\n. @alex88 We've just been trying to publish frequently so the latest features/fixes are available.\nI'll publish 0.4.4 to get your patch out now. \ud83d\ude80 \n. You bet!  Here you go: https://github.com/redfin/react-server/releases/tag/v0.4.4\n. Not even allowed to send manual invites. :(\nDetails: https://get.slack.help/hc/en-us/articles/201330256#invitation_limits\n. Posting here:\n\n. We recently moved from gitter.im. :hurtrealbad: \n@CreepGin - What drove you away from slack?  How has discord been in comparison?\n. > all your customers are developers\nYeah, exactly. \ud83d\ude1b \nWe use slack internally, too, and figured it would work well for React Server.\nAnd it has been working great... until now.\n. Three cheers for Slack support! \ud83c\udf89 \n\n@alex88 - I've sent you a manual invite to the email address in your PR commit message.\nThanks for the link to the facebook post, and the food for thought about discord.  Didn't know it supported markdown and syntax highlighting.\nNow that we're back on track with slack invitations I'm hesitant to consider another move, since we just got onto slack, but it's a relief to know there are good alternatives available.\n. \ud83d\udc4d \nAlso \ud83d\udc4d  to the trim/prefix idea.\n. Hmm... yeah, I think this is the first event that's actually worth listening to from the client controller.\nA doc on analytics would be good.  Makes sense to ship with the analytics middleware to serve as an example, I think.\n. > adding event listeners to the client controller\n\n...\nWe emit the following events: render, showFrame, loadComplete, page, navigateDone, pageview.\n\nOnly render is emitted by the client controller...?\n. Gotcha.  Yeah, maybe a doc on events in general would be good.\nYou know... to go along with our thorough API docs. \ud83d\udc79 \n. Thanks @careylin! \ud83c\udf89 \n. This LGTM, though I'm confused by the babel/sass-loader deps.\n. Yeah, lerna bootstrap can't help us with the examples (yet) because they're not direct children of packages/.  But... the install from ^0.4.5 should work. \ud83d\ude15 \n. Nice. \ud83d\udc4d \n. Oooh, interesting... I guess we'll need to set CORS headers on the dev webpack server's output?\nThanks for reporting @evgeny-matveev.  I think the only safe solution to unblock your dev process in the short term until we get this patched would be to put a reverse proxy (nginx, apache, ...) in front of your dev servers. \ud83d\ude16 \nIf you want to live dangerously you could temporarily relax your browser's CORS enforcement.\nIf you're feeling ambitious (and saintly \ud83d\ude07 ) you could look at adding CORS headers with dev server hostname/port to startStaticJsServer and startHotLoadJsServer. \ud83d\ude01 \nI think that's all it should take to fix this for real.\n. Wait... the hot load server has an Access-Control-Allow-Originheader! \ud83c\udf89 \n@evgeny-matveev - Could you try running your dev server with --hot to see if that clears it up for you?  If so, then it's just a matter of also setting the header on the static development asset server.\n. Awesome!  Thanks @egid!\n. Not loading right for me? \ud83d\ude15 \n\n. Yeah, looks awesome now! \ud83c\udf89 \n\n. @SteveVitali This is awesome!\n@lidawang Have you seen this?!\n. Hrm... travis doesn't like it.\nI'll pull it down and see if I can figure out what's going on with the build.\n. Oh... @SteveVitali looks like you're on a pretty (~1 month) old base.\nA rebase onto current master might clear up the travis error.\n. Thanks @SteveVitali.  Closing this in favor of #626.  @lidawang has preserved your authorship there, and we won't squash the merge.\n. This fix will be included in 0.4.6.\n. Don't thank me, @doug-wade fixed it! \ud83d\ude01 \n0.4.6 is out.\n. Whoa! @hzhu that's awesome!\nWe should link to that example from our docs.  Leaving this open as a reminder.\n. Even better!  Thanks @hzhu!\n. Thanks @doug-wade. \ud83d\udc4d \n. Thanks @doug-wade!\n. \n. @vinsewah This is cool!\nCollecting all of the log output in the queue could get a little heavy in terms of GC churn.\nMaybe better to skip putting anything into the queue if !req.query._debug_output_logs?\n. This is awesome!  Thanks @hzhu!\n. Nice.  Should there be a corresponding hideMaster?\n. Thanks @vinsewah!\n. This picks up the new isActive() method.\n. Yeah... I keep hoping we'll come up with something better. \ud83d\ude16 \n. Nice find @mpatnode-si.\nI'm a little confused here, though... Shouldn't this._type be json for a JSON endpoint?\n. Oh, glad you got it working @galkinrost!  Sorry this fell through the cracks yesterday.\n. Hi @incubus8 - On the server the footer will render right away, but the resulting HTML string obviously needs to be held until the preceding content is sent.\nIn the browser we render elements in order to avoid having content appear and then get pushed down the page.  Rendering later elements as they become ready could work well in a context where they won't get moved around later, but that's not the common case.  Might work as an option?\n. Thanks @davidalber.\n. Nice, thanks @lidawang.  Have you tried this out?  Does it give you what you're looking for?\n. Remind me why superagent is a peer dependency instead of a normal dependency?\n. Yeah, I think we do everything through RSA... not dealing with superagent at all from outside?\nWould be nice to eliminate the need for another explicit dep for node 6 users.\n. Made https://github.com/redfin/react-server/issues/628.  Doesn't need to hold this up, I guess.\nThough users will need to update their superagent deps when they upgrade to the next version of React Server...\n. :metal: This is a headline improvement.\n(If it works) \ud83d\ude01 \n. Your original title was actually good.  We use lerna-changelog to generate our release notes.  It automatically groups changes by package.\n\n. Thanks @jbenesch!\n. Thanks @jbenesch!\n. Man, how many of these did we have?!\nThanks @jbenesch. \ud83d\ude1b \n. So, the setContentType call for the page and fragment lifecycles were basically noops?\nIs express just giving us a charset=utf-8 itself?  And this one is just not used?\nJust want to make sure the charset will still be set explicitly in the content-type header...\n. Awesome.  Thanks for verifying @nampas.\n. No need.  We'll squash on merge. \ud83c\udf46 \n. Oh, whoops!  Thanks @alanbares!\n. Oops, nice catch @hzhu!\n. Seems to have settled down.  @doug-wade ready to go here?\n. Closing this in favor of #661.\n. Ugh.  Thanks for reporting @roblg.\n. Hi @stanonyime that's a good question!\nThe code you tried above actually just resolves to when={this.authors} if this.books is truthy.  It's equivalent to when={this.books ? this.authors : this.books}.\n@SeverS is on the right track for merging two promises, but there's actually one extra bit that's necessary: Merging the objects that each promise resolves with.\nSomething like this should work:\n``` javascript\nfunction mergePromises(...promises) {\n  return Promise.all(promises)\n    .then(resolutions => Object.assign(...resolutions));\n}\n...\n\n\n\n```\nThat obviously assumes you have access to Object.assign, which isn't broadly supported, but an implementation with lodash or just manual merging wouldn't be hard.\nSomething like that might be nice to make available as a helper exported from React Server...\n. Oh, good question @mocheng.  GreenKeeper was always a little weird with React Server, since it only updates deps at the repo root, and our packages are all in subdirectories.  Not sure what, if any, effect this had.\nThere was a PR recently for updating SuperAgent in the react-server package: #627.\nDoesn't look like it got up to 2.3.0, though.. @sresant Does this also get the CLI working in node 4 outside the repo?  Like, even when it's installed globally?\n. @sresant Looks like this needs a rebase.  Does this plus #691 get everything working in node 4?  How about the superagent issue you were seeing?\n. Great, thanks @sresant.\n. Wait... :squint:\nThis doesn't look like the right diff anymore.  Something go wrong with the rebase?\n. That's better. \ud83d\ude0c \n. Thanks @sresant.\n. Nice fix @TonyHYK.\n. If it's just a matter of internal consistency I'd prefer json over js, since that's easy to manipulate with the CLI (react-server add-page ...).  A js routes file will still work, but I'd rather not make it the recommended first choice.  Generally I'd say json is better until/unless you need js for some reason.\n. @sresant What was the resolution on the superagent errors you were seeing?\n. > all of our examples use routes.js instead of routes.json\nThis is a good point.  Regardless of which we default to it would be good to add some documentation explaining that they're both supported and the pros/cons of each.\nAdded https://github.com/redfin/react-server/issues/693 to track that.\n. @doug-wade Does @sresant's explanation clear things up for you here?\nThis fixes a pretty bad bug with the CLI, so I'd like to get it into the next release if possible.\n. Hi @mlolson that's actually possible already!  The CLI wraps that up for you, but at its core all it's doing is creating an express instance and inserting middleware for you.  It looks a little funny, because it's inverted so the app.use happens inside of a method call, but this method call can go wherever you'd ordinarily want to put app.use(ReactServer({routesFile: './routes.js'});.\njavascript\napp.use(ReactServer({routesFile: './routes.js'});\n. Nice!  Thanks @sresant! \ud83d\udc4d \n. Thanks for dealing with this @davidalber.\n. Nice, thanks @sresant!\n. Thanks @greenkeeperio-bot I got this one (and #701) covered in #702.\n. Covered by #702.\n. This is superseded by #732.\n. Hi @doug-wade!  It looks like @sresant has actually accounted for that.  The default behavior remains to apply the various other middlewares (compression, etc) in a certain order and then apply the React Server middleware.  But if the new hook is used the caller becomes responsible for applying all middleware, including compression, etc and React Server's, in whatever order is desired.\n. @sresant Please rebase this when you get a chance.. This is no longer a dependency at the repo root.\n. This looks good to me now.  Nice work @sresant!\n. Oh, that's so much nicer.  Thanks @karanjthakkar!\n. Hi @mocheng looks like travis is failing during npm install here.  I think that's due to an unrelated issue that has since been resolved in master.  If you get a chance please rebase so we can get a clean test run. Thanks!\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. Oh, sweet.  The travis build was about twice as fast as recent master builds.\n\n. @doug-wade This will render GreenKeeper useless, unfortunately.  The only dependency remaining at the root is Asini, and that can't be upgraded without re-running asini init.\n... maybe Asini should only require re-running asini init on breaking changes. :thinking: \n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. This is no longer a dependency at the repo root.\n. Hi @drewpc, we've just published v0.4.10.  Is this still causing you trouble?\n. This is no longer a dependency at the repo root.\n. Thanks for reporting @svassr.  Are you using the React Server CLI to run your server?\n. Ugh, yeah this is pretty broken. \ud83d\ude2c \nThe __LOGGER__({ label: \"foo\" }) syntax is supported by react-server-module-tagger, but not the babel-plugin-react-server wrapper that the CLI uses.  Totally unimplemented!\n. Oops, looks like this got auto-closed by #778, but it's not quite resolved yet.\nThe label key is getting passed through but not appended to the name.\nThere's some more discussion here.. That did the trick. \ud83d\udc4d \n. Thanks @emecell!\n. Asini can't be updated without re-running init... yet.\n. Hi @erdillon thanks for tackling this!\nLooks like the build is failing on _webpack2 being undefined...\n/home/travis/build/redfin/react-server/packages/react-server-cli/src/compileClient.js\n  225:34  error  '_webpack2' is not defined  no-undef\n\u2716 1 problem (1 error, 0 warnings)\n. Nice!  Thanks @erdillon!\n. Updated to eliminate the change in above-the-fold timing logic.  I added a renderComplete performance mark, so the renderAboveTheFold mark isn't useful unless <TheFold/> is actually present.\n. Hi @devoiddesign this sounds cool!  But it looks like something didn't work right with this PR.  Instead of the change you described the diff shows the removal of the <Link> element...\n. Ooh, nice find!  Progress toward #277!\n. Thanks @doug-wade!\n. :squint: Hard to see how those travis failures would be related to this change.\nIs this based on an up-to-date master?\n. Good thought @rodrijuarez.  The package.json this ticket refers to is actually a template that's used by generator-react-server.  It lives way down in a nested directory where greenkeeper can't see it, unfortunately.. Looks like the indentation is cleaned up (thanks for catching that @doug-wade).\nI've created https://github.com/redfin/react-server/issues/765 to capture the need to re-introduce a \"debug\" script to test pages.\nGonna get this merged to unblock folks on node 7.  Thanks @drewpc!\n. Oh, it actually looks like #769 addresses this. \ud83d\udc40 . > Do you have any examples of the \"listen\" prop working after the initial data load?\nYeah, it works well for us internally at Redfin, but this does look buggy.  Specifically this looks like it will fail if listen calls back synchronously.\n@aickin I fear you'll find a lot of no-use-before-define violations. \ud83d\ude2c \nBut if you're willing to take it on and it can help us avoid this sort of subtle bug then I'm all for it!. Okay, I think #769 took care of this, and #770 should prevent this whole class of issues from happening again.  Available in v0.5.0.  Thanks!. Nice!  This is a really useful improvement.  Thanks @drewpc!\n. Yeah!  Asini can be upgraded without re-running asini init now! \ud83c\udf89 \n. This makes a lot of sense. So generally we would want --host=... to be a domain name now?\nThe description in parseCliArgs.js is:\n\nHostname to start listening for react-server\n\nShould probably update that.\n... is this a breaking change? :thinking: . I'm suddenly confused. Wondering how react-server.io works a all with \"host\": \"localhost\". \ud83d\ude15 . > where host is now used.\nIt's still used in packages/react-server-cli/src/run.js to build up static asset URLs.\njavascript\noptions.outputUrl = jsUrl || `${httpsOptions ? \"https\" : \"http\"}://${host}:${jsPort}/`;. Whoa!  Glad you tracked this down before the website horked!\nNice investigation, @roblg thanks for fixing this! :metal: . Yeah, do it!. Yep!  Thanks @rodrijuarez!. > this will have merge conflicts with PR #769... I'll happily do the merge\nOh, thanks for pointing that out.  Yeah, let's merge that first and have you handle the conflict resolution, since the author over there is a pretty new contributor.. Oh, man, that's so much better! \ud83d\ude0c . > I converted some functions that didn't strictly need to be converted in order to make the linting rule pass. I thought it was better to do that than to have functions defined a bunch of different ways in the same file.\nYeah, much nicer that way.  Thanks for thinking of that.. Okay @aickin I've just merged #769.  Please rebase this when you get a chance.. Thanks @aickin!. Yikes, nice catch @bharath-rengarajan!. I guess another option here would be to run webpack bundles on the server.  I remember thinking at one time that there were some benefits to that, but I can't recall what they were at the moment. \ud83d\ude05 . @aickin Oh, interesting.  Maybe we could set process.env.BABEL_CACHE_PATH to the build directory and ship that (along with the webpack manifest.json) for fast startup in production?\n@drewpc Not off topic at all!  That's a good point about keeping the client and server as close to each other as possible.  I'm not so familiar with webpack on the server.  Is that a common practice?. > server-side \"hot reload\"\n\n. Awesome.  Thanks for the links and the summary of benefits @drewpc!\nAnyone know of any drawbacks to webpack for the server build? . I think we suffer from that second problem already.  We're running everything through babel with a fixed configuration.  We could use babel-preset-env to address that, but AFAICT it's not affected by whether or not we're using webpack on the server.\nThe first one is interesting... :thinking: . Thanks for tracking down the cause here @auskast.  Are you interested in taking this on?. Oh, right... good question @aickin.  Maybe pass in a path to a build output directory?\nThat would also help us find pre-babelified server code.\nIt could probably default to a known relative path so that it would generally be unnecessary. :thinking: . Oh, option 3 is interesting.  Hadn't thought of that. \nI think my suggestion above is a variant of option 2. The only difference is rather than passing in the file path to manifest.json, my thought was we could pass in the directory that contains it.  That directory could then also contain other build artifacts that might be useful to make available at run time (such as pre-transformed babel output) without requiring additional CLI flags.\nThen, as an extension: if react-server compile puts the output directory into a default location and react-server run looks for it that same location then ideally the option wouldn't even be necessary in the default case.\n\nmanifest.json is required on the server-side because it contains the names of the chunks with their content hashes. Without manifest.json, all the JS and CSS URLs will be wrong.\n\nThanks for the context!. Closed by #880. \ud83c\udf89 . Hi @mischah thanks for looking at this!\nWhat is the github object that it's looking for?  Is it separate from the repository field?\nI tried using hosted-git-info as suggested in npms-io/npms-analyzer#112.  It seems to work:\n```\n\nrequire(\"hosted-git-info\").fromUrl(\"redfin/react-server\")\n{ type: 'github',\n  protocols: [ 'git', 'http', 'git+ssh', 'git+https', 'ssh', 'https' ],\n  domain: 'github.com',\n  treepath: 'tree',\n  filetemplate: 'https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}',\n  bugstemplate: 'https://{domain}/{user}/{project}/issues',\n  gittemplate: 'git://{auth@}{domain}/{user}/{project}.git{#committish}',\n  sshtemplate: 'git@{domain}:{user}/{project}.git{#committish}',\n  sshurltemplate: 'git+ssh://git@{domain}/{user}/{project}.git{#committish}',\n  browsetemplate: 'https://{domain}/{user}/{project}{/tree/committish}',\n  docstemplate: 'https://{domain}/{user}/{project}{/tree/committish}#readme',\n  httpstemplate: 'git+https://{auth@}{domain}/{user}/{project}.git{#committish}',\n  shortcuttemplate: '{type}:{user}/{project}{#committish}',\n  pathtemplate: '{user}/{project}{#committish}',\n  pathmatch: /^\\/\\/(?:[.]git)?$/,\n  protocols_re: /^(git|http|git+ssh|git+https|ssh|https):$/,\n  user: 'redfin',\n  auth: null,\n  project: 'react-server',\n  committish: null,\n  default: 'shortcut' }\n```. Oh wow.  That's a bummer.\n\nThanks for tracking that down @mischah.. Oh yeah!  @aickin @roblg @doug-wade Check this out!. This addresses #188.. Hmm... we should actually be able to have Asini keep React Server deps up-to-date for us now that it supports configurable package locations. :thinking: . Thanks @doug-wade!. @markthethomas Awesome! This will make the UI more consistent / less confusing.  Thanks for taking it on!. Thanks @doug-wade!. Wow, thanks for dealing with this @doug-wade!\nThis seems like a generally pretty high-risk change... :thinking: \nAny additional testing we should do for this?. (Edited the title to reflect that this PR actually updates deps). @doug-wade Thanks for manually regressing.  Bombs away! \ud83d\udca3 . Yes, good point @mocheng!. Oh, nice catch @mocheng.  I wonder if we should fix the docs here, or fix handling of null? :thinking: \nGiven that the docs claim that null is supported I guess this is a regression?. Ugh.  Thanks for reporting @kaytcat.\nhttps://github.com/redfin/react-server/issues/783 would resolve this.. Yikes, config files outside the package root sounds like a recipe for pain.\nThis option seems worthwhile, though, if it supports a workflow that's awkward without it.  Would be nice to have a note about it in the CLI docs with some explanation about why you might want to do this to yourself. :feelsgood: \nThanks for contributing @karlhorky!. > I've added an option to the CLI docs.\nThanks! \ud83c\udf7b \n\nI also wanted to add a test for this\n\nHmm... the CLI tests are pretty thin (as you pointed out), but that seems like the right place for this.. LGTM \ud83d\udc4d \nThanks @drewpc!. Thanks for jumping on that.. This is a cool solution.  Thanks for working it out @drewpc!\nLGTM \ud83d\udc4d . @feychou Thanks for this.  Nice to address so many issues at once!\nIt's unfortunately already diverged from master and has a conflict.  Please rebase if you get a chance.. Yeah, it would be nice to have a document to point to instead of continually re-hashing things.\nGood idea @drewpc.. Awesome.  Thanks @drewpc!. This makes sense to me.  One approval and someone else merges.\n@roblg, @sresant what do you think?  Anyone else?. What about for PRs submitted by maintainers?  Still two additional sign-offs?. BTW - I turned on branch protection for master and made reviews required.\n\nWondering if the two-sign-off requirement is too strict... \ud83e\udd14 . @sresant Good call on the merging thing.  Basically: Squash and merge. \ud83d\ude01 . Yes, I was just doing the same thing. \ud83d\ude01 \nThis is awesome!. Thanks @feychou!. Thanks for tracking down the problem in react-server-cli and getting this all cleaned up @drewpc!. Thanks @jhnns!. Nice improvement @karlhorky.  Love the tests! \ud83e\udd18 . Thanks @drewpc.. Yeah, this is cool.  I like that it's just exported from react-server and not some magic, but... we kind of need the magic for conditional imports. \ud83d\ude2c . > This is still a breaking change for people who explicitly set method: \"get\"\nOh, yeah.  That'll hork Redfin.  Thanks for the heads up. \ud83d\ude2c . Thanks for reporting @davidalber.. Meta.. Thanks @helenaut!\n@davidalber This will require a redeploy of the site. \ud83d\ude01 . Oh good! \ud83d\ude05 \nContent in the docs/ directory gets picked up automatically, but anything in packages/react-server-website requires a re-deploy.. Yeah!  This thing is awesome! \ud83e\udd18 . Only reason I could think of to have it in packages/ is if we had tests for it (or if we wanted to lint it).\nIf it's in packages/ it needs to be private and it needs a test script that exits zero.. Nice catch @helenaut!. I guess we could pre-build two copies (normal and debug) and select among them with an option... \ud83e\udd14 \nThat would actually let us turn on debugging at run-time which could be useful.. Heh. \ud83d\udc79 \n\n. Oh, good thought.  I'm going to make some modifications for its use in React Server, so if anything it would probably have to be react-server-labjs or something like that.  But really, I'm not sure that it would be useful externally?  It's basically part of the React Server runtime in the browser.. > hope that we can take a dependency on the npm package when it comes out.\nWe already can't.  We would need https://github.com/getify/LABjs/pull/81 to land for non-debug.. But anyway once this (or whatever this turns into) lands I've got another PR coming on its heels that starts really hacking it up. \ud83d\ude08 . I've updated this PR to put LAB into a dedicated package and move the minification to build time. \ud83c\udf7b . Hard to believe flab wasn't taken. \ud83d\ude08 . Okay, got rid of the use of /dev/stdin. \ud83d\udc4d . Oh, nice.  Thanks for the link.. Onward! \ud83d\udc49 . @lidawang You've got it right. display => visible, render => interactive.\nWhat names would your propose for these metrics?  Keep in mind that the *AboveTheFold metrics themselves are part of a family that includes other display and render metrics on a per-RootElement basis.  Those would also have to be renamed to keep everything consistent.\nIs this something we could address with documentation?. > interactiveAboveTheFold?\nAnd interactiveElement (where previously there was renderElement)?\nMakes sense.  Most other metrics are verbs, but I don't think that's a rule.  I don't even know how consistent we are with it.  But generally metric names coming from React Server core slot well into the question \"how long did it take to ____?\".. Yeah, that might be an okay place.  We might also want a \"guide to timings\" sort of document at some point.  There are a lot of stats coming out of React Server but it's not always clear what they mean if you're not super familiar with the inner workings (this ticket is a case in point).. > what's the difference between those two folders' intentions?\nreact-server-integration-tests is for automated tests.  No easy way to view the pages that are tested.\nreact-server-test-pages is a React Server site with pages that exercise interesting behavior in React Server.  You can view them and play with them.  It would be awesome to have some automated tests around these pages.\nI'd say if you have a page that works in react-server-test-pages that's a nice place to have it.  Wanna take on #147? \ud83d\ude4f \ud83d\ude01 \n. I feel like this feature needs to come with a big warning saying \"DON'T USE THIS!!!\".\nWhich makes me wonder if this is the right way to accomplish the image preloading.  Is there a more targeted API we could expose?. > custom tracking, or do some setup with a third party integration?\nDon't do that in the <head/>. \ud83d\udc7f \nWe control where JS goes so the page author can't accidentally block the critical rendering path.  I worry that getCustomScripts is a performance foot gun.  I like your getPreloadedImages idea.  It's safer, and actually more helpful for page authors who actually want to do this.. @dfabulich Wow, good point!. Support matrix for rel=preload:\n\n. BTW - We have https://github.com/redfin/react-server/issues/253 open for rel=preload of JS bundles.\nSomething to consider for your API.\nMaybe not getPreloadedImages but a slightly more general getAssetPreloads?. Thanks @drewpc.. Hopefully https://github.com/lerna/lerna/pull/507 will merge soon and we can get back on Lerna.. @doug-wade How would that work?. @doug-wade I see.  That would be a pretty big breaking change.\nWorth discussing, but I'd still like to get a fix for the bug out in the meanwhile. \ud83d\udc1b . It's not dead yet!  It could pull through!. > don't we need to parse the JSON in both the if and else blocks?\nGood call.  Done.\n\nshould we do the same thing for error responses\n\nI don't think so, actually.  Error responses are less likely to be mutated, and their handling is out of band.\n\nadding some tests\n\nThe coverage here was already pretty good (thanks @roblg), so I just modified existing tests to verify that values are deeply equal, but not references.\nSo... how about it? \ud83d\ude01 . Thanks @krisxw! \ud83e\udd18 \nFYI - If you prefix issue/PR numbers with a # GitHub will link them. Like: #866.. Nice, good idea!. @davidalber This will require a re-deploy of the website. \ud83d\udc79 . @roblg Have your concerns been addressed here?. Thanks @mocheng. \ud83d\udc4d . Oh, nice catch on the .gitignore.  Didn't check hidden files.  Seems like no harm in leaving it?\nThe website references are actually for the Asini slackin site, which we're keeping up for now.. Any objections here?  Users are running into issues that have already been fixed on Lerna.. @drewpc That's fair.  Asini's dead, though, so it's a matter of getting back onto a tool that's maintained.\nGonna merge this.  You'll need to npm i again when you pull it, but other than that it should be a seamless transition. \ud83e\udd1e \nLet me know if you run into any trouble!. Oh, interesting.  Can we just remove that?  @jhnns any danger here?. Thanks @jhnns.\n@mtrabelsi @kafeltz I think https://github.com/redfin/react-server/pull/892 should do the trick?. @mtrabelsi Yep, it's not documented anywhere unfortunately, but you can use local docs for website development with:\nsh\n$ LOCAL_DOCS=1 npm start. This is awesome @szhou8813!  It makes the history navigation stack management so much simpler!\nI think there's probably some documentation that will need to be tweaked, too.. Awesome!  Thanks for dealing with this @szhou8813!. > 139 specs, 85 failures\n\ud83d\ude33 \nThat must be some sort of record.... Ugh, looks like the XHR loading doesn't work in the jasmine tests.  I guess they were falling through to cache-preloading?  That doesn't work in modern Chrome.\nHow does React Server even work? \ud83e\udd26\u200d\u2642\ufe0f . Okay, tests all passing. \ud83d\udc4d . > I ran into a similar issue with the tests failing after combining the HTML + JS servers\nYeah, ZombieJS is just weird enough to stumble on things that browsers don't have trouble with.  In this case I was able to address it with a check that wasn't literally if (test), which I prefer when possible.  Thanks for the context.\nAny objections to this?  Pretty excited to try it out!. Thanks @cashhh.  Nice to have this consistent with the other methods. \ud83d\udc4d . > run mobile-detect on the server and then just send down the string \"mobile\"/\"phone\"/\"tablet\",\n@aickin Ooh!  Good idea!  I think we're currently exposing a full mobile-detect instance, so that would probably be a breaking change.  Or maybe... we could send down a thin dummy that implements the interface with values hard-coded by the server? \ud83e\udd14 . This is addressed by #950 which landed in react-server@0.7.0.. Thanks for reporting @salehhamadeh.\nI wonder if this broke with the React 15 upgrade... \ud83e\udd14 \nAny idea what we could do here to get it working?. React Server RootElements set props on first render.  Seems weird to change that to state later?. > Is there a way to define the 404 status code in the page lifecycle?\nYep, it's not well documented, but you should be able to do this by adding hasDocument to your response from handleRoute:\n```js\nclass NotFoundPage {\n    handleRoute() {\n        return {code: 404, hasDocument: true};\n    }\ngetElements() {\n    return <Awesome404 />;\n}\n\n}\n```. @feychou Yeah, that would be awesome!. Sounds good to me, but I don't know anything about David. :grin:\n@doug-wade?. Oh, cool.  Is it pretty easy to run?  Maybe put instructions in MAINTAINING.md?. Nice catch @dfabulich.  These should be consistent.\nIn the future if you have a patch ready please don't bother with a separate issue.  A PR is worth a thousand issues!. Thanks @dfabulich!. Awesome!  Thanks @feychou!. Looks like something weird happened with Travis.  It's stuck \"waiting for status to be reported\", and it's not even giving me a link to the build so I can re-start it. \ud83d\ude15 . Yep, that did the trick.  Thanks @feychou!. I wonder if we could trick Lerna into treating the generator template directory as a package so it would manage the versions for us... \ud83e\udd14 . Oh, yep.  Thanks @doug-wade.. Thanks @doug-wade!. Thanks for reporting @matthewdwong.  Shouldn't be too hard to get it patched through.. LGTM.  Thanks @sresant.. Looks like the CLA integration had a hiccup.  Bypassing.. LGTM.. Yep!. Thanks @nashio!. Ugh, no idea why those zombie tests are failing.  Everything looks good browser-side in react-server-test-pages and react-server-website. :hurtrealbad: . @mlolson Was this fixed by #937?. Wow, this is awesome.  Thanks for getting this stuff all fixed up @mlolson!. Nice find @edsonlo!\nLooks like this is browser-side only.  Likely here (in ClientRequest.js):\njs\n    getQuery() {\n        var indexOfQuestion = this._url.indexOf(\"?\");\n        if (-1 === indexOfQuestion) {\n            return {};\n        }\n        return decode(this._url.substring(indexOfQuestion + 1));\n    }. Awesome!  Thanks @mlolson!. @mlolson This is awesome!  There's a lot in here.  Way more than just a stack trace in dev. :)\nI left some comments and questions.  Thanks for working on this!. I've updated the dependency versions in the generator in v0.7.1.. Good idea. Thanks @monicatie. Please sign the CLA when you get a chance so we can merge.. Nice fix. Thanks @hbucius!. Awesome! Thanks @dfadev!. This addresses #883.. @mcarlson Sorry you're running into trouble.\nA link to a repo would be nicer than a zip file if you could provide one.. Hi @sofiia-hlyniana sorry you're running into trouble.\nThis is a surprising finding to me. One solution you might try is the jsBelowTheFold option, which may be set on the return value from handleRoute.\njs\nclass Page {\n    handleRoute() {\n        return {code: 200, jsBelowTheFold: true};\n    }\n}\nBeyond that if you'd like the requests to be started above the fold you could look into adding support for an async attribute on the script tags produced our copy of LABjs.. Thanks @JennHaggerty!. Oh, whoops, didn't notice that this was pointing at gh-pages instead of master.\nWe actually don't serve react-server.io on github pages, since the site itself is run on React Server. :). Gonna cowboy this. https://github.com/redfin/react-server/pull/956 is taking too long. :hurtrealbad: . React 16 support landed in react-server@0.8.0. \ud83c\udf89 \nThanks @salehhamadeh!. Awesome @davidk107! Thank you!. Really wish we had https://github.com/redfin/react-server/issues/147 done. \ud83e\udd15 . Thanks @negativetwelve!. Yikes, that's not good. Thanks for reporting @anuragsn7.. This looks good to me with the latest changes. Nice fix @j-beatzz.. rs, huh?  I like it.\n. These lines are too long to get within-line change highlighting.  Would be nice to break them up at some point.\n. I thought we couldn't use the name corvair because it's a registered trademark?\n. I want to \"like\" that comment about the \"like\" button... but alas. :disappointed: \n. generator-react-server?  react-server-example?\nI get that yeoman requires a package that starts with generator-, but in general isn't the monorepo convention to have packages with a common prefix?\n. Wait... it looks like it's called main.js above.  Does this work?\nFWIW - I think index.js is the more common convention.\n. Oh, this is wrong.\n. Yeah, so much cleaner!\nIncidentally I couldn't get lerna to link the two packages together without requiring react-server-gulp-module-tagger with a caret.  It looks like an exact version match should work.  I haven't traced it through to figure out why it didn't.\n. This is a much nicer interface!\nIt seems like a good direction for react-server in general.  Could the transformation machinery be pulled out into a separate package so that it's generally accessible?\n. Heads up: The navigator now supports objects at route.page for adaptive routing based on device classification.\n. Eesh.  That's a lot of dots.\n. What if we moved the test helpers into a separate package?  Then they could be required without worrying about relative location.\n. This README is a little buried now.  It's too good to be so hidden.\n. Yeah... once this lands I want to set up some tests for <RootElement /> and <RootContainer />.\n. Well, not urgent.\nI can't say how many times I'll be willing to type ../../../ before I snap and do something, though. ;)\n. Why don't we want react-server-test-helpers in npm?  Could they be useful for users to test their pages?\n. Ugh, this diff wound up looking weird...  Moved some things around in here, but the behavior should still be appropriate:\n- If the page hasn't advertised hasDocument then we're done no matter what err is.  301, 500, whatever.\n- If the page has advertised hasDocument then we'll proceed to render.\n\n301, 302 aren't supposed to have additional content?\n\nIt's valid (and recommended) to provide a small body for redirects.\nhttps://tools.ietf.org/html/rfc2616#section-10.3.2\n\n\nUnless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).\n. >  I think res.redirect adds the appropriate body\n\n\nOh, I see.  Thanks, I didn't realize that.  I'll push a patch to make hasDocument work for redirects.\n\nI don't think there's ever a case where we'd want to fall through\n\nThe case is: I want to customize the content of my redirect body.  It's cool that express provides a helper that populates a default, but I want the ability to render my own.\nThat means I'm responsible for actually putting the link in, but presumably if I'm claiming hasDocument on a redirect I know what I'm doing?\n. Wow... That's... wow.  Braces.  I bet the output of this is nicely indented, huh?\n. Can this be made to use react-server-gulp-module-tagger so we don't have a hard-coded __LOGGER__ object here?\n. I think that's done implicitly to the return-values of .then() callbacks.\n. Yeah, it gets no context and the logger.error() message is about failing to bind the context instead of about failing to navigate.  The message includes the thrown text either way.\nThis diff is mostly just about not leaving examples of anti-patterns laying around in tests. :sweat_smile: \n. > Do you have any better ideas\nNo!  Code generation is just inherently awkward.\nThe fact that you're producing readable code outweighs the eye-crossing-ness of this function, IMO.\n. Please add an \"eslint\" task so this will get linted by travis.\nIf you can think of a clean way to get the one in packages/react-server/gulpfile.js factored out, even better. :)\nYou'll also need to patch the top-level gulpfile to pick up gulpfile.babel.js files (it currently looks only for gulpfile.js).\n. @roblg Any lingering concern here?\nAFAIK Q().then(foo) handles arbitrary return values from foo appropriately here.\n. > ...next(),\nOoh, that's slick.\n. It bothers me a little that these modules export functions that produce middleware instead of just the middleware classes themselves.  I wonder if there's another way we could get pathToStatic in here.\nWould it be terrible to just make it a global server-side also?  Already doing that browser-side...\n. No, you're right.  A global would be far worse.  I wonder about a static method that sets the prefix?\nAnyway, not something that needs to hold this PR up!\n. jsPort is camel.  compileonly is not.  Would match code if it were.\nWould be extra slick if it were --dash-separated and auto-camel'd \u00e0 la meow.\n. Why the big explicit copy?\nSeems like less friction:\njavascript\nstartServer(argv.routes, argv)\n(Assuming the compileonly option gets camel'd somehow)\n. Sweet!\n. Huh.  Cool.  Didn't know about editorconfig.\nBut... why is this different from the rest of the react-server repo?\n. Didn't know about this either.  Sweet.\nSeems worth putting at the top level rather than down here.\n. Missing a URL here.\n. Yeah, so... two-spaces is my default.  I like it.  I have to switch to tabs every time I start vim (which is, admittedly, rarely).  I like the look of this!\nBut... it's different from the rest of the repo.\n. Already out of date. :stuck_out_tongue: \n. Should we do this for react-server itself, too?\n. > For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same shortcut syntax you use for npm install\nhttps://docs.npmjs.com/files/package.json#repository\njson\n  \"repository\": \"redfin/example-react-server\"\nThough, admittedly, I don't actually know what that repository is...\n. Oh, please let's have our generated example use JSX!\n. Please add an eslint task.\n. Maybe slightly less frowned upon than leaving commented-out code laying around? ;)\n. What's the hash fragment at the end of this URL for?\n. An extra ) snuck in after the README.md URL.\n. Seems like these badges make more sense at a package level.  Our monorepo package.json is private.  It doesn't correspond to any package on npm.\n. Aha:\n\n\n. Maybe that email address should be to a group?\n. Yes, though maybe useful to also put version badges in the packages?\nNot all packages are published with each version.\n. ... but not data-triton-content, data-triton-css or data-triton-link? ;)\n. Thanks for getting this group set up.\n. Looks like the directory here is still TritonAgent. :stuck_out_tongue: \n. Below here is all just moved to a dedicated module so CacheEntry can be imported into Request.\n. Here are the two new methods.\n. Because we don't want it to go into the cache!\nThis is to support out-of-band requests:  I make a request whose response I'm going to stash away and re-use a bunch of times.\nWhen I make the actual request I'll do:\njavascript\nTritonAgent.get(url).noCacheResponse().then(stuffIntoCache);\nThen, later, when I'm using the response I'll do:\njavascript\nTritonAgent.get(url).getCacheEntry().setResponse(getFromCache()).requesters++;\n. Yes, for sure.\nIf you're caching responses yourself you're responsible for getting them into the TritonAgent cache when they need to be.\n. Boy, this PR would be a lot easier to grok if it had the use of these new methods along side of it. :-/\nI made this comment while you were making this one.  Does that clear things up?\n. Yes, it affects performance.  If client code behaves correctly, though, it won't affect content or behavior.\n. Yep.  This only addresses routing of existing logger methods.  It doesn't add any new ones.\n. Thanks.  Added a link in the comment.\nI'll also link here, so it shows up in the PR over there: https://github.com/TimBeyer/cls-bluebird/pull/1\n. The binding of this within the resolve method.\nIn practice, I expect Promise.resolve doesn't use its context so .map(Promise.resolve) would be fine.  I'd have to read Promise.resolve to be sure, though.\nDefinitely looks way cleaner that way!\n. Come to think of it I'm already using Promise.resolve unbound all over the place.\nSo I guess it works. :D\n. Oh, there's also the question of what Promise.resolve does with extra arguments...  The index will be passed in with .map(Promise.resolve).\n. Yeah, that's a good idea.\nNow that I look at the documentation for Promise.all it looks like this actually isn't equivalent to Q.allSettled(), since Promise.all short circuits on rejection, whereas Q.allSettled() waits for resolution or rejection of all promises.\nThere were a few Q.allSettled calls that I ported this way.  I'll need to come up with a better equivalent.\n. Bluebird's cool with other libraries' promises.  If it .then()s it's good.\n. Updated to a correct port of Q.allSettled() using promise.reflect.\nNot going to change the error handling behavior here.  Trying to stick to a straight port.  Goal is no change in behavior (aside from performance increase :rocket:).\n. This diff chunk looks bigger than it is because of the indentation change.  It's just replacing the if/else with what was previously the body of the else branch (eliminating the if case).\n. No space between : and require?  \ud83d\ude10 \n. What?  Is github just rendering this weirdly?  Where did all the whitespace go?\n. Uh...\n. Whoa, and now that I see this on the main PR page the tabling is all off... is it using tabs for tabling?  That's generally not a good idea.  People set their tab stops at various positions.  Tabs work for initial whitespace, but they don't work well for whitespace within a line.\n. Ah, yeah, I see now.   A bunch of spaces were just changed to tabs.\nLet's not have tabs except at the beginning of lines.\n. Thanks @aickin, I've pushed a patch that uses DATA_BUNDLE to disambiguate.\n. I don't like having two places where frame identifiers are created (inline here and in pushFrame).\nThe initial frame isn't used (new frames are always obtained via pushFrame()), so this could just be declared without assignment (left undefined) or made explicitly null:\njavascript\nvar CURRENT_STATE_FRAME; // No frame until `pushFrame()` is called.\nCould also initialize with a valid (though unused) identifier while still avoiding duplication by just calling pushFrame() and burning the first frame:\njavascript\nvar CURRENT_STATE_FRAME = pushFrame();\npushFrame gets hoisted and the enclosed variables are all defined before CURRENT_STATE_FRAME so this wouldn't require re-ordering anything.  Kind of weird to always burn a frame identifier, though.\n. Heh.  Good call.  Pushed a patch that both adds a comment and also just makes DATA_BUNDLE_CACHE undefined on the server.\n. Okay, got it.  I had this thing totally inside out.  Patch inbound that uses react-server-cli as intended.\n. @aickin - This is something that the old index.js in this package provided that react-server-cli didn't.\nDoes this new option look okay to you?\n. > a simple babel transform\nThaaaaat's better.  Thanks @aickin!\n. eslint-plugin-react should make this unnecessary...\n. What rules are forcing the parentheses and non-self-closing components?\n. I don't get this one.  Removing leading/trailing whitespace?\n. Oh, it's another set of mid-line tabs.  Weird that it renders differently in the PR's diff view vs the conversation view.\n. But I guess that's kind of the nature of mid-line tabs. ;)\n. rendered is initialized to element upon declaration.\n. Pulled the declarations out next to the one for mountNode.\n. This looks like more robust handling of server start failure than https://github.com/redfin/react-server/pull/80.\n. That's nice. :)\n. This just disables the prefix in the browser since it causes cross origin errors.\n. Added a val parameter to /data/delay.  It just gets echoed back after ms milliseconds.\n. Page looks like this:\n\nThose check-marks are hour-glasses until the client render happens (between when they're visible and when they're interactive).  They revert to hour-glasses on navigateStart and switch back on re-render.  Nice way to see the flow of render even when the DOM is preserved.\nThe arrow points to the current \"page\" (last row clicked).\n. I think this broke with DOM preservation, though I'm not sure.  Don't want to hand container control objects off to React.\n. And, to be clear, this just eliminates log noise.\n. Nice catch!\n. > it's a little easier to understand\nI disagree but acquiesce.\n. I think this wording isn't quite right anymore with your latest changes.  Command-line options no longer cause react-server to stop searching for additional sources of options.  Same with the pseudo-code below.\n. Nice to have this pulled out into a dedicated module!  Also nice to have consistent defaults between the CLI and a direct call startServer.\n. > do { ... } while (dir !== (dir = path.dirname(dir)))\nYeah! \ud83d\ude08 \n. What's up with the explicit undefined => remove undefined dance?\n. Ahhh... That's nice. \ud83d\ude0c \n. I like that this happens when I call startServer directly now.  I'd like it more if it happened in the browser, too! ;)\n. Nice.  Will these need to change at all when the eslint upgrade lands?\n. Maybe simpler still to just return <HelloWorld/>;?\n. That's one of the error types addressed by #80.\n. Have a lot of links now.  Gave them shorter names.  Added a legend to the page.\n\n. This is attached to the request context now, since the navigator needs to get at it.\n. We were pushing state after running handleRoute.  Moved it up into _startRequest.\n. Oops, this is just an incidental fix to hush React's deprecation warning.\n. This could get big for a large site, right?  And it is, itself, static for a build?  I wonder if there's a way we could sneak it into the common bundle...\n. This looks good.  I have a feeling we'll want to generalize it pretty soon.  We have other packages that don't really make sense to publish (e.g. react-server-test-pages).\n. Heh, wonder how long that's been there.  Will fix.\n. Yeah, I was thinking something sneakier, like just appending some extra JS to the end of the common bundle after webpack's done with it. \ud83d\udc79 \nMaybe not worth the evil until someone with a large site decides it would make a difference.\n. Oh, just realized I introduced a bug here.  It's tough to see because this whole block of code had to move, but I also eliminated the replaceState on PAGELOAD.  My reasoning was that any client transition away from the initial page would handle the replaceState, so the one at load time seemed redundant.  I had forgotten about non-react-server users of the history navigation API. :hurtrealbad: \n. Nice one-line fix, @lidawang. :)\nA blank line above this would make it clearer that the comment for the setTitleFromFrame isn't also meant to apply to the .focus() call.  A comment for the .focus() call would make it even more clear. ;)\n. This is part of #80 that I re-did in place because I needed to unmask some errors during development.  Forgot to undo before committing, and now it's buried in history.  I can squash if it bugs you, but I won't unless prompted.\n. Rebased away. :)\n. >  Github using 2 spaces for tabs makes the indentation hard to read. Sorry :(\nI think that's because of this?\n. Seems like a good reason to fail the render...\n. Seems like these should be chained?  We want to get the first stylesheet <link/> tags down to the browser ASAP.  If later stylesheet promises are slower they could delay earlier writes to the browser.\n. Oh, I totally mistook the context here.  Thought we were in renderMiddleware.  I'll go gripe over there. \ud83d\udc79 \n. This needs to be a chain, right?  <link/> tags could get written out of order with this map.\n. Yeah!  That was the flip side to dropping the synchronous render (which turned out to be pretty confusing for devs and the source of tricky bugs).\nNow data is either available for the server render or it's not.  We've got a helper in our store class that makes it easy to configure which values will block the server render and which will get populated after the initial client render (to avoid checksum mismatch).  There's nothing in between.\nHaven't figured out how to split that scheduling/filtration out of our stores yet to make it open.  Our stores are based on reflux, and I wouldn't want to impose that as a requirement for core functionality in react-server.\n. I'm a firm believer in 8-column tabs, but I'll gladly take 4 over 1!\n. The diff chunking in here isn't great.  Really everything after the first paragraph is new.\n. Try cat-ing the source and see how many columns the tabs are.\nOr try less.  Or git diff, for that matter. ;)\nThat's not to say that I prefer tabs for indentation in source code.  I like 4-column indentation!\n. We've got to make this easier.  I want to be able to initiate a client transition with a single import.\nSomething as simple as:\n``` javascript\nconst {navigateTo} = require(\"react-server\");\nnavigateTo(path, {options});\n```\n. Yep.  Only if you use the plugin.\nAnd it would be anyway by stratocacher, so I figured I might as well use it here, too.\n. Yep, that's right.\n. Yep, that should do it!\n. Nice!\n. Trying to eschew Q?  It's already in the deps for the test pages...\n. Oh, did you git add these CSS files?  I don't see them here.\n. Isn't it actually the page winding up red that we're looking out for?  In other words out of order CSS includes?\n. Got it.  Thanks!\n. This is probably easier to look at with a split diff rather than unified.  The entire body of this method changed.\n. Yep, it's doing the same stuff in a different way.  Each browser has a different set of implementation quirks.  Last October one such FF quirk caused the introduction of the awkward unload/load dance (see RED-70527 for details).  That doesn't seem to be necessary anymore.  Or else I've settled on a different simple implementation than we were on previously that happens to also work in FF.\nOr else I haven't tickled the repro case for the FF quirk correctly and this is going to bounce right back to me. :p\n. It's the main react-server package.  I argued against it at one point, too.\nI'll remove it if you think it's misleading.  I just like the look of more badges. :)\n. \n. Nope, just did an npm install --save lodash@latest.\nI'm not as paranoid about pinning as I once was.  I'd actually like to automatically pick up patch-level changes.\nUnless they break everything.  That would suck.\n. Oh, actually, this could be pulled out to the top level, right?\n. Nice to avoid distributing devDependencies around, when possible.\nHad just finally gotten rid of most packages devDependencies. ;)\n. > If I were to pull this dep to the monorepo root, I'd have to specify a path to the bin script\nI think npm just figures it out, actually.  As with gulp, for instance.\n. Might be nice to have some text in the content here that says what the viewer should expect to see if things are working properly.\n. Huh... just realized that this will emit nodeArrival events for container control elements... Guess that's okay?\n. Could get rid of the awkward - 1 here if you move the elementCount increment above.\nIf you do, don't forget to adjust the conditional in the else if, below, too.\n. No version?\n. They tell the ClientController that the server-rendered HTML for a RootElement has been loaded into the DOM, so it's safe to to the client-side ReactDOM.render into it.\n. Generally the easiest way to add a dependency like this is to use:\nbash\nnpm install --save-dev node-inspector\nThat will install it and add it to the devDependencies in package.json for you, with an appropriate version.\n. :metal: \n. Indentation looks off here.\n. Good call.\n. Hmm... react-server-test-pages doesn't actually have any automated tests (yet).\nBut I guess that makes sense.\n. Hmm... maybe better to track this sort of thing in issues with milestones?\nCould link to milestones from this doc, but the individual work items are easier to track in the ticketing system.\nExample: https://github.com/redfin/react-server/milestones/v0.3.0\n. This example is still really weird slash just wrong.\n. :metal: \n. This needs to return.  It can either return {code: 200} itself, or take next and return next() to get the default.\n. I'd take this out of the array.  Want to steer folks toward RootContainer for multiple root elements, and here there's actually only one root element.\n. This _getStoreOpts method seems superfluous.  Doesn't really contribute to understanding of react-server.  Simpler's better.\n. Yikes.\nMaybe:\njavascript\n<RootElement when={this._store.whenResolved()}>\n  <exampleComponent />\n</RootElement>\nRootElements isn't part of react-server.\n. Whoa, this is cool!  Didn't even know about performance.mark.\nI appreciate this being broken onto two lines from a readability perspective, but because this is an es6 template string it will insert a literal newline and tabs into the output document.\nThis might be a good place for an old-fashioned string concatenation:\njavascript\n[{text:'__displayAboveTheFold=new Date;'+\n'window.performance && ...'}],\n. So, this could be negative if !window.performance?  Should we handle that case?\n. So... this avoids negative numbers, but it still reports incorrect values.\nSeems like if we don't have window.performance we don't have anything useful to report, so we just shouldn't report at all?  That skews results because some data points are omitted, but it may skew by less than reporting incorrect data points would.\n. Maybe worth filing a ticket to fix them all up and saying it's outside the scope of this PR.\n. Done: #170.\n. I think this needs to be this?  Looks like you may have been trying this out on the target/module and copied back to the source?\n. Should this be Redfin at this point?  You're still listed as the author of the package, but Redfin is assigned copyright?\n. Looks like these badges need some love?\n\n. Should probably either iterate over Object.keys(this.props) here or add a this.hasOwnProperty(k) check.\n. Actually, this could all just be a one-liner with _.assign:\njavascript\nthis.props = _.assign({}, this.props, {childProps});\nWe're already using the assign method from lodash elsewhere, so this won't increase our bundle size.\nOur pattern for including lodash methods is:\njavascript\nconst _ = {\n        assign: require('lodash/assign'),\n};\n. Nice catch @roblg.  Definitely want to keep this an object.\nLooks like this broke during the lodash upgrade.  _.pick used to take a key array or a predicate, but the predicate variant got split out into _.pickBy in v4.0.0:\n\nSplit .omit & .pick into .omitBy & .pickBy\n\nWill update to use _.pickBy.  Thanks!\n. Thanks.  Nice to have syntax coloring on these.\n. Uh... maybe a little more explanation for docker n00bs like me?  It's not clear to me what in the react-server-cli docs will help me with configuration for docker-machine or docker daemon. \ud83d\ude2c \n. Is this react just a label for the service?\nIf so, could we make it react-server, or react_server if dashes aren't allowed?\n. This is cool.  Nice use of environment configuration.\nThanks for the added documentation.  Clears it right up for me.\n. All these comments are really helpful!\n. Oh, thanks for renaming the volume, too.  Didn't even catch that one.\n. Just occurred to me that we should probably generate this config.  https://github.com/redfin/react-server/issues/203\n. This is safe to just omit because it's defaulted somewhere deeper than defaultOptions.js?\n. \n. @doug-wade - How did you track that down?  I don't see anything about it in travis...\n. I've been leaning toward this convention:\njavascript\nimport {logging} from 'react-server';\nThoughts?\n. Link to the source here?\n. Would benefit from syntax highlighting.\njavascript\nconst gulp = require('gulp');\nconst tagger = require('react-server-gulp-module-tagger');\ngulp.task('compile', () => {\n    gulp.src('src')\n        .pipe(tagger())\n        .pipe(gulp.dest('dist'));\n});\n. Would be nice to also mention the trim option as a way to strip that src. from the module name.\n. Why the other globals?  They're not used, right?  Just __LOGGER__?\n. If this were alphabetized it would be pure addition. \ud83d\udc79 \n. Added a big=<size> param to the test data endpoint that just tells it to return a JSON object with size keys.  It's easiest to see the fold when there's a bunch of JS to for the browser to slurp up right after.\n. Another breaking change: Unless a page includes <TheFold /> there are now no renderAboveTheFold stats.\n. Awkward to pull out .default here, but IMO worth it for the cleaner implementation in TheFold.js.\n. Glad I never updated the tabling around this.  It's almost like I knew it was an ugly hack that should be replaced... \ud83d\udc79 \n. Looks like there may be a word missing here? \"which only server rendering\".\nAlso, please break these long lines up.  Long lines are problematic for a number of reasons.\n. s/hello-world/bike-share\n. What's this key?\nAlso, doesn't seem like there's any need for a <RootContainer> here...?\n. Soon to be out-of-date. \ud83d\ude1b \n. Does this reuseFrame actually trigger?  I suspect it might need a truthy value.\n. Yep, exactly.  The normalized elements array contains only root elements and control objects.\nThis introduces a new control object: {isTheFold: true}.\n. Yeah, I actually thought about that.  AFAIK the reason React does that is to avoid injection attacks via JSON.  I don't see that as a concern here, so I opted to just keep it simple.\n. I think this would actually need to be 'src.' to trim the dot, too.\n. Might be nice to have these in list format to make them jump out at someone who's scanning for them.\n. I guess the only down-side of having all of the config defaults listed here is we need to make sure it stays in sync with the actual defaults. \ud83d\ude1b \n. Good to know!  Thanks. :)\n. I don't think those warnings should arise from the root level, since we don't actually let React render root containers or the outer array.  Would be nice to keep the example JSX clean of extraneous attributes.\n. Wow, that's a lot of file types!\nShould this be /.../i to pick up upper-case extensions?\n. Any easy way to test that the secondary assets are served and referenced correctly?\n. Yikes.  Yeah, sounds worth punting.  Maybe it'll be easier when tests are converted to selenium... ;)\n. Nice.\n. Shouldn't matter.  These are intra-request timers, and we're going to wait for requests to wrap up on a graceful shutdown, anyway.\n. What is pm2 giving us here?  Seems easier (and lower overhead) to just exec the server directly...\n. I like this async/await style!\n. > bring the server down\nKill it!\n\ntail the logs in real time in a separate window\n\nIs that a requirement for automated tests?\n. Does travis do anything with this?  I thought it just looked in the repo root...\n. Email address got doubled up.\n. I think we've generally used lower-case redfin/ for other packages.\n. Missing a comma?\n. Nice!\n. Just hushing some old warnings while I looked for new errors.\n. Turns out this was turning each character of the child text into a child component.  In React 0.14.x, this resulted in each character getting wrapped in <span>s, which was easy to miss, visually.  In React 15 each character got wrapped by a pair of HTML comments, which jumped right out. \ud83d\ude06 \n. No longer using pm2, it looks like?  Docs out of date?\n. wakeElement seems a little mis-named now that it may wake multiple elements. \ud83d\ude15 \n. Yeah, that's kinda weird.  I guess it's just the convention with yo? \ud83d\ude15 \n. \n. Maybe we should change the instructions to include:\nbash\n$ mkdir myServer\n$ cd myServer\nBut... ugh.\n. > Protects some browsers (Chrome, IE) against MIME sniffing attacks.\n^ That would be nice to include in the comment here.\nIt gives the headline so I know whether I'm interested in following the link.\n. Nice.\n. fn is no longer used?\n. It expects to find data in its context, right?  Doesn't need to be on the prototype.\n. ... in its context...\n. Really, a nicer interface would be to accept the context object as an argument and return opts as an object.  The binding and serialization seems more relevant to the calling environment in the gulp module tagger.\n. file isn't used for anything other than the path in here, right?  Might be nicer to just take the path rather than the file object, which is particular to gulp.\n. Yeah, a nicer interface for the module tagger would eliminate the need for this nonsense.\n. Agreed.\n. Arithmetic order of operations is not language-specific.  Seems reasonable to expect devs to be familiar.\n. What rule is requiring single-quotes?  Kinda bugs me that this is the opposite of lerna.\n. What rule prohibits single-line if statements?  They're useful for this sort of thing.\n. Wait... why is this using xo instead of eslint?\n. We already have a linter config for the project.\nIt is confusing to have different parts of the repo require conflicting conventions.\nAlso:\nsh\n$ npm install xo\n$ npm install eslint\n$ du -sh node_modules/*\n 22M    node_modules/eslint\n 82M    node_modules/xo\nSeems like the perfect candidate for #277.\n. This one will go away (become part of bootstrap) with the next version of Lerna.\n. ?\n. We've gotta stop copy/pasting this everywhere...\n. This slack link will probably not be what we want.  We're going to have a slackin gateway.\n. Is decrypt_credentials.py something we can check in?\n. ReactServerAgent actually won't transfer text/html responses.\nRequests to this endpoint weren't getting bundled.\n. Unfortunately rs generally already exists:\n```\n$ man rs\nRS(1)                     BSD General Commands Manual                    RS(1)\nNAME\n     rs -- reshape a data array\n...\n```\nFWIW - I'm targeting react-server start rather than react-server startServer.  Doesn't require the shift key, at least. \ud83d\ude06 \n. Thank you!  That's exactly the wheel I was about to re-invent!\n. Hmm... yeah, with npm 2 that may wind up being necessary.  In npm 3 land, though, those should be accounted for once these top level deps are handled.\nI'd say let's only add others on an as-needed basis.\n. > npm link\n\n. I don't think so.  I think react-server-integration-test uses a dummy static asset server.\n. Nope, you're right. \ud83d\ude1e \n\n. I don't actually know.  I had totally forgotten about the package.json configuration until I started editing this doc. \ud83d\ude01 \n. Huh?  Isn't this the docs?\n. Oh... I did a bunch of long-line shortening here, so I could see what I was editing.  I should have done that in a dedicated commit.\n. There's no concurrency among subprocesses here.  Easier flow of control this way.\n. Maybe?  My thought was if you want a page you can generate it with react-server add-page.  If you don't then this way you won't have to go in and delete something you didn't ask for.\n. Hmm... yeah, I like it.\n. Nice catch.\n. ^ That still throws.  This is just a helper that returns boolean.\n. Meh.  The only reason for the ConfigurationError is to provide a clean UI when we short circuit out due to a simple problem (file already exists, etc).  For ordinary errors where stack trace is actually desirable I don't see any need to subclass.\n. Actually probably better not to default here.  You may have specific configuration for env.development, but if your NODE_ENV is actually undefined it won't get picked up.\n. Which manifest?\n. Oh.  Yeah, if we ever add tests for the website we'll definitely need to update the manifest. ;)\n. This is just to see errors that come out of the npm test inside the generated package.\n. Need to remember to add a server entry for a new domain here before we set up DNS to avoid accidental 301.\n. This is great!  Might be nice to have in the README, or another .md for discoverability and ease of reading.\n. Nice.  We'll probably need to provide some way to pass configuration to bodyParser, eventually, but this will work great for now.\n. > Can this be an else if block? or even an else block?\nIt can't, actually.  You'll notice that previously the bodies of the two cases were together, and the conditionals were anded.  In the case where the frame's load event fires before the client controller finishes rendering we still need both to happen.\n. Basically: We always need to wire up our listener (once).  And, in the case where the event we're listening to hasn't fired yet, we'll bail out early and wait for it.\n. > there's asynchrony and users may perform navigations before we've finished loading?\nIt's actually just a race between the browser's load event and the client controller finishing its render.  No user interaction needed.\n. This bit actually isn't necessary.  The attributes we pass through are white listed in RootElement.js.\n. Oh, I hadn't gotten far enough... looks like it's being added as an attr there now.  Hmm...\n. I wouldn't bundle this in with attrs.  That's really meant to just be HTML attributes.\nThe tag name is a different beast.\n. Something like {containerOpen: tagName, attrs} would be nicer here, to keep attrs and tagName separate.\n. Then this could just be {containerClose: tagName}, and the (irrelevant for a close tag) attrs can be omitted.\n. Yikes.  We need a way to keep these up to date automatically.  Maybe https://github.com/lerna/lerna/issues/126?\n. :metal: \n. @davidalber - Nice, you're a real React Server hacker now! \ud83d\udc79 \n. Maybe this should be the React Server documentation for google juice?\n. Don't like having the regexp machinery duplicated...\nMaybe this could be in a function, and the default could be defined using it?\nLike:\njavascript\nDEFAULT_REPLACE_TOKEN = tokenToRegexp(\"__LOGGER__|__CHANNEL__|__CACHE__\")\n. \n. Yeah, that's a good consideration.  I think in this case we can have our cake and eat it, too, though.  So long as DEFAULT_REPLACE_TOKEN stays at the package level where it is, the penalty for running it through the RegExp constructor will only be paid once.  After that it's just a compiled RegExp.  What we want to avoid for performance reasons is new RegExp(...) at run time.\n. This looks like it masks the outer REPLACE_TOKEN?\nNeeds a different name inside this function, right?\njavascript\nvar token = REPLACE_TOKEN;\nif (config.token) {\n    token = rokenToRegExp(config.token);\n}\n. But... don't we still want the value of the outer REPLACE_TOKEN as a default if config.token isn't passed in?\n. But the var REPLACE_TOKEN declares a new variable inside the function that masks the outer variable, making it no longer accessible...?\n. Oh, it's been updated again since this comment thread started. :)\n. So... it looks like this replaces the default.  If I use the module tagger once with config.token and then later once without I'll get the previous invocation's config.token value instead of the default?\n. Wow, so much cleaner!\nShould we move the hot into a .reactserverrc?\n. This shouldn't even be necessary?\nShould only need the packages that are installed by react-server init.\n. Yeah, this shouldn't be necessary either. \ud83d\ude15 \n. Have you run npm i in packages/react-server-cli since the dep was added there?\n. Whoa, does this always work?  Can we ditch PageUtil.getElementDisplayName (or gut it and put this in there)?\n. :squint:\nI'm so confused by windows.\nI thought forward slashes were actually okay now, but you might receive backslashes from getters?\n. I think the guard here isn't necessary?  We've just created root, so it shouldn't already have a \"key\" attribute.\n. This LGTM.\n@roblg - Do I remember you adding some special handling for this outside of React Server core?\nAny conflict here?\n. Whoa.  This is sweet!\n. Seems easier to just require(path.resolve(...)) here... what's the benefit of reading and parsing like this?\n. Oh, I see.  Yeah, that's the source file, which hasn't gone through babel yet.\nI think the nicest here would be to export defaultOptions from react-server-cli?\nThen you could just do:\njavascript\nimport {defaultOptions} from \"react-server-cli\";\nIf you're up for that, the CLI exports are set up here.  Because the CLI has a build step that does babel transpilation you'll need to cd in there and npm run prepublish for the changes to become available.\n. Should this be an &&?\n. Looks like some funny whitespace snuck in here after the var.\n. Let's make this even lower overhead by skipping tuple creation and pushToQueue call if !RLS().doLog.\nReally want to be doing as little as possible when not enabled.\n. I think this part already landed in #617.  A rebase should get it out of the diff here.\n. Nice catch @roblg.  Gotta get your eyes on more PRs here! \ud83d\udc40 \n. Yeah, this is great.\nWe've gone back and forth here.  It's nice to factor out devDependencies into the repo root to cut down on bootstrap time and storage requirements.  But for modules where we use the \"bin\" script that breaks things.  In this case I think adding it back into the package is the right move.\nEventually I'd like to have a lerna bootstrap --hoist-external or something that will let us define deps where they're actually used but then install them at the root and link bin scripts in where needed.  Some day. :)\n. I think you'll need to import this first?\nLike:\njavascript\nconst defaultOptions = require(\"./defaultOptions\").default;\nUp at the top?\n. Actually this should fail travis with a linter violation.\n. Right on cue. \ud83d\udc79 \n\n. Yeah, we probably have other packages that will need similar treatment. \ud83d\ude2c \n. Ooh, that's nice!  Didn't know about babel-plugin-add-module-exports.\n. Wait, so how does --js-url get turned into options.jsUrl now?\n. :metal: \n. > ... await new Promise(...)\nMind. Blown.\n. Okay, so let me make sure I understand this: Because sslize is an async function now it implicitly returns a promise, which we chain off of here?\n. Oh, man this is so great!  Thanks @jbenesch for working this out and locking it down with these tests!\n. Oh, just read your summary. \ud83d\ude05 \n\nthe yargs package already does that for us.\n\nNice.\n. Thanks for adding these new tests!\n. Yeah... no real way around it, though.\n. I might use wording that makes it clear that this is an alternative to the option in the config file.  As it stands it's possible to misinterpret this to mean that even with the option in the config file you must also pass a CLI option to trigger its use.\nMaybe something like:\n\nThis may also be specified on the command line with the --webpack-config=<FILE> option.\n. This doesn't match the parameter name above (reactServerMiddleware there).\n. I think we've generally used the camelCase variants in the config file?  Like customMiddlewarePath?\n\nNot sure if either will work, or even if I'm remembering right. ;)\n. This needs rejection handling, too, right?\njavascript\npromise.catch(orPromise.reject);\n. I don't think this is enough.  It's addressing the symptom (we're not sending the close tags) rather than the cause (we're short-circuiting out of the normal control flow, which includes sending the close tags).\nCan we handle individual element render failures without rejecting the writeBody return promise?\n. Yeah, probably safer to match up exactly with react-server.\n. Whoa routes.json doesn't work on Windows?\n. Oh, yikes.  Totally forgot about this thing... I wonder if we can use Asini's configurable package locations to get this updating automatically. :thinking: \n. Captured: https://github.com/redfin/react-server/issues/758\n. I actually suggested on slack that we just drop it for now and re-add with node --inspect once someone figures out how to do that.\nDidn't want to put that on @drewpc for this PR, since getting node 7 working is already tangential to what he's actually trying to do. \ud83d\ude06 \n. Whoa, nice extra fix here!\n. What is this I don't even. :squint:\nCool inline default syntax.  Shouldn't defaults go in defaultOptions.js, though?. If we call it bindIp internally to disambiguate, maybe the CLI option should be --bind-ip, too?. Oh, that's a good idea! :thinking: . Oh, nice.  I think this addresses #763.. Ugh.  This is exactly what you said would happen, but it's just as painful as expected.\nIt's nice to have default exports at the top of modules!\nI guess this is the price we pay for the safety this rule provides. \ud83d\ude16 . Since this is set up with {functions: false}, would it work to just turn these into normal functions to avoid having to move them above the default exports?\nLike, could this stay where it was and turn into:\njavascript\nasync function sslize(argv) {\n    ...\n}. Oh, heh, you had the same thought. \ud83d\ude01 . Yeah, IMO the little bit of hoisting magic there is worth it for the benefit of having the first thing you see when you open a module be the part you're looking for.. Hmm... this is moving a bunch of private helpers up to the top, where the data structures that define the public interface used to  be.  This one's trickier, isn't it... :thinking: \nIf nothing else the comments above here should stay with the section with those data structures.. > I was unclear if those comments were for clients of this file... or folks who are going to muck with the impl of this file\nBoth. \ud83d\ude39 . Yeah, definitely.  Good idea @auskast!. Heh, whoops. \ud83d\ude05 . Ooh, this is nicer output even without a label!. loggerSpec actually expects the label to be passed in, and it incorporates it into the name.\nSo I think something like this would work:\njavascript\nconst label = arg.properties[0].value.value;\nconst options = JSON.parse(loggerSpec({ filePath, trim, prefix, label }));\nThough we might be able to more confidently pull out the value associated with a label key (rather than the value associated with the first key) with something like:\njavascript\nconst {label} = arg.properties.reduce((o,p) => (o[p.key.value] = p.value.value, o), {});\nNot familiar with babel plugins, so don't know if that's the right structure for the entries in arg.properties.. This is awesome. :metal: \nThanks for tackling this @doug-wade!. > the first introduces a risk of regression on all the other module taggers\nWe control them all, though, right?  So it's just a matter of updating our modules to conform to a new interface?  Or am I misunderstanding this option?. \n. Should this also run david on the repo root?  Then we could disable the GreenKeeper integration and just manage everything with david?. Yeah, the eval hack was pure evil, but it worked well. \ud83d\udc79 . This is still requiring label to be the first item in the opts object.  Would be nice not to have that restriction.\nPulling an idea from the original labels PR in here:\n\nWe might be able to more confidently pull out the value associated with a label key (rather than the value associated with the first key) with something like:\njavascript\nconst {label} = arg.properties.reduce((o,p) => (o[p.key.value] = p.value.value, o), {});\nNot familiar with babel plugins, so don't know if that's the right structure for the entries in arg.properties.. javascript\n_.range(80).map(() => JsonResponseMiddleware);\n;). I think @roblg might be suggesting a replacement for the hard-coded 7 here.\nI'll add that this can be a const. \ud83d\udc79 . Yeah, these should get kicked off in handleRoute, and then we should make root elements wait for them.\nIdeally we could style the root elements so they all fit above the fold and affect the WPT speed index.. Whoa, cool!. We've got enough of these that maybe we should break them out into a bullet list?\nWould also be helpful to link them to the project pages so people who aren't familiar with them (I'd never heard of helmet) can learn more.. Looks like there's an extra level of indentation here?\nSurprised eslint didn't catch that. \ud83d\ude15 . Nice to get rid of this.. Oh, interesting.  Glad you caught this... could have been a real source of frustration. \ud83d\ude2c . \ud83d\ude40 . Hmmm... we just run asini run test in CI.  So each package is responsible for making sure that linting is part of its test script.  It looks like the CLI's package.json should be running tests as part of the gulp test phase of its test script.\nWonder where that's breaking... \ud83e\udd14 . Oh, nice catch on the missing dep.  Yeah, some modules (like react-server-cli) use the eslint gulp plugin instead of the executable.  It's all kind of a weird mishmash right now. \ud83d\ude16 . Ugh, thanks for going through all this!. I think we still actually need the rm -r node_modules here, since the root isn't a package that's managed by Asini.. :squint: Isn't this just an unshift?. Huh?  What's this about?. :squint:  Something fishy's going on here.  Did this PR just remove all of the + characters?. Yep, this module is only used in the render middleware.  Its output is a string of JS that is put into an inline script tag.. > What am I missing?\nThe full extent of my laziness. \ud83d\udc79 \nAs I think about it more I like @doug-wade's idea of pulling this out into a separate package.  Going to manage it inside the React Server repo for now just for convenience.  We'll be able to pull it out later using lerna export if we want to.. Wow, that's... quite a regex! \ud83d\ude33 . Oh, yeah, good call!. Oh, just realized this was left outstanding.\n@drewpc @doug-wade Should we file a followup ticket for this?. Talked with @drewpc.  Turns out this did get resolved. \ud83d\ude0c . Ugh... this is only at build time.  Do we need to support windows even for that? \ud83d\ude29 . Oh cool thanks @drewpc.\nI'm tempted to use get-stdin, which is a bit more targeted to what this little one-liner needs to do.. Nice catch @drewpc.  Wonder how we could automate this check... \ud83e\udd14 . This heading wound up the same as the one above with the test packages removed.  Could just kill it and merge the groups.. LABjs is MIT.  Can MIT be converted to Apache 2?. Oh, maybe... \ud83e\udd14 . Yeah, it's annoying that you can click to see those lines but can't comment on them. \ud83d\udc7f . Nice catch, didn't realize those were handled separately. \ud83d\udc4d . Oh, probably. \ud83d\ude01 \nNice catch @drewpc!. Huh, TIL.. Why is this adding helmet here now?. Oh, somehow I thought we were adding it automatically now.  Makes sense. \ud83d\udc4d . Oh, I see, and users are responsible for adding it themselves if they override the default with custom middleware.\nNice catch.. There should be some styling (strikethrough, I think) associated with the not-available class that can be removed from the CSS, too.. @mtrabelsi Trailing commas in object literals are supported in node.\nWe actually require them in multi-line object literals like this specifically so we don't need to clutter our diffs with modification of the previous line when we add/remove the last item in an object literal. ;)\nThanks for the bug report and for looking at he patch!. Nice catch!. Looks like a debug statement got left in.. Nice!. I think host should actually have the port included.\nhttps://developer.mozilla.org/en-US/docs/Web/API/Location\n\n. Whoa.  This is way nicer!. This should be a once, right?. Should unref() this timeout.. Nice, been meaning to get rid of these forever. :). This looks like it switches the order of execution between endResponse and handleResponseComplete.\nTrying to think if that could cause any problems... \ud83e\udd14 . Thank you.  These little bits of cleanup are great.. This looks like an XSS vector.\nNeed to escape err.message, I think, to avoid malicious values in the requested URL for 404s (for example).. Does err need to be converted to an HttpError here?  With code 500?  Or is that already done and I'm just missing it?. The client controller will also need to be updated to handle this new interface, right?. Oh, nice catch. We use it for stat partitioning. I'll reintroduce that.. Thank goodness you're reviewing this carefully. \ud83d\ude33 . May be easier to look at with whitespace changes hidden.. It looks like this will always create a new element from the componentLoaderDeferred if there was one.\nShould this only use loadedComponent.value on the first pass?. Does this need to also include rendered.state.childProps now?. This should be you. :). Is this version compatible with the older versions of React that are supported below?. Could we avoid this new dependency by making FragmentDataCache an es6 class?. Why are the older version numbers changing here?\nLerna will only hoist if version strings match exactly.. ",
    "roblg": "Talked w/ @doug-wade IRL (virtually). The gist is:\n1. I suggested moving the examples to the top-level as a sibling of packages/, where the expected use case is something like:\ngit clone ....:react-server.git\n   cd react-server/examples/someExample\n   npm install && npm start\nIt's not obvious to me that we need to publish an example server to npm where the source isn't readily available. Seems like it would be more useful w/ the source checkout, and this gets us out of having to work around name collisions w/ other example-y npm packages. \n2. Doug clarified for me that the goal of the yeoman generator is to bootstrap a small, functional react-server(which was probably obvious, but I'm dense sometimes). I suggested generator-react-server-bootstrap as an alternative name? \n. @aickin I don't necessarily think the generator is complete. I would think that in order for us to call it \"complete enough\" we'd want client-rendering at the very least. Code splitting seems like a nice-to-have. I'm working on adding the gulp plugin we use as a package here as well.\n. I'm not sure I fully understand the implications of going with this format. The output looks pretty though. Would we host these on github pages?\n. LGTM\n. LGTM\n. My plan was totally to do that. :)\nOn Thu, Feb 11, 2016 at 3:52 PM, Bo Borgerson notifications@github.com\nwrote:\n\nAll committers of the pull request should sign our Contributor License\nAgreement\nYikes. These folks were all Redfin employees at the time the commits were\nmade... @davidalber https://github.com/davidalber can we ignore the CLA\nfor this one?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/redfin/react-server/pull/10#issuecomment-183115457.\n\n\nROBERT GAY | REDFIN | Technical Leadrobert.gay@redfin.com\nrobert.gay@redfin.com | Tel:206-576-5824\n. > during the build step output a server and a client version of the routes.\nThat definitely does not sound worse than existing weirdness.\nAre you doing a rewrite at the place the routes file is required? Or do you output the two different routes files, and then replace the existing routes file with something like:\njavascript\nmodule.exports = if (SERVER_SIDE ) ? require(\"./routes-server\") : require(\"routes-client\");\n. @aickin I'm finally getting around to thinking about this PR again, and I think there are a couple of things I hadn't considered before.\nThe big thing is that the routes file format in the react-server-cli examples is almost JSON -- there are no requires. This is pretty different than what we're doing internally at the moment, for better or worse. :grin: I think it'd be doable, but a PITA to read our routes files, and modify only the routes property of the exported object.\nSo I'm not sure where to go from here. I'm not super-excited about the __LAZY_REQUIRE__ thing, but the use-a-string-for-page-property thing is going to take more thought on our end.\nI think I'm inclined to close/abandon this PR in favor of adding a route loading plugin more similar to your approach, and we'll just publish our __LAZY_REQUIRE__ route loading plugin internally and go on with life for now, and we can revisit internal adoption of the string-for-page-property approach at a later date. (Or maybe we don't need a route loading plugin if react-server-cli is going to be the primary build tool for new arrivals?)\nThoughts?\n(cc: @gigabo @doug-wade)\n. Erm... I think not, unless we want to extract @aickin's route loading thing from react-server-cli into a separate plugin, which seems probably unnecessary?\n. The names of these build plugins are outta control, but I think the diff looks reasonable. :+1: \n. LGTM :+1: \n. @gigabo @aickin I've now attempted to look at this numerous times and also seem to get distracted. I doubt I'd be spotting many bugs w/o pulling it down and trying to break it.\nI like the direction, and it fills a need that we have, so I say let's get it in, and we'll squash any bugs that pop up.\n:+1: \n. Yep. We've been meaning to do this for awhile.\n. I think it makes sense to be conservative w/ React versions for now. They're pretty good about not breaking things unexpectedly between releases, but I think it still probably makes sense to know what's in the release before we claim to support it. But then again, I'm pretty conservative myself...\nIn any event, this patch makes sense. \n. Going to merge to unblock more test-writing. Other feedback can be addressed in new PRs\n. I think lerna has a way to specify a per-project prepublish file, or something - maybe that could run gulp test. I have no idea if that's better than what's going on here, but it seems like it might be, because it wouldn't be running during npm's prepublish step.\n. I'm a fan\n. Love the tests!\nAnd I know I'm a little late on this, but I'm a little uncertain about the setHaveDocument(...) API. If it's something that's going to be very rare to use, it's probably OK, but I wonder if it makes more sense as something like: return {code: 500, haveDocument: true}? That wouldn't allow us to render a document in the case where there's a throw, but if someone really wanted that behavior, they could wrap their whole handleRoute in a promise or a try/catch?\n. LGTM\n. LGTM. :+1: \n. Sweeeeeet. (Where's the dancing corgi emoji Github? Come on.)\n. I think these are error conditions that we're intentionally inducing, so the logging is scary but the output is correct. We should figure out how to silence the logger.\n\ninternalServerError/pages/InternalServerErrorException.js\n. LGTM :+1: \n. I probably should have mentioned that this brings the package.tgz file size down from 1.2MB to 350K. :joy_cat: \n. I also also should have mentioned that I published a pre-release version of 0.0.24 w/ only this change, and wired up our internal app and all of its dependencies to use it. It was a PITA to plumb that change through everywhere, but once I did, everything started, so I don't think I'm missing anything important.\n. I want :shrug: back!\n\nLGTM :+1: \n. Replace superagent with fetch\nDo you mean replace TritonAgent with fetch? Or you mean still have TritonAgent with the same/similar API, and use fetch under the hood? I'm not really opposed either way. superagent has some quirks that are annoying, and builder patterns are obnoxious to mock in tests.\nI also don't quite understand this:\n\nrather than sending in a loader argument to the page API and then explaining superagent, we'd just say \"use fetch like you already do\".\n\nWe currently just have pages require(\"triton\").TritonAgent, and fetch willy-nilly, unless something changed while I wasn't paying attention :grin:\nPort to webpack 2 with tree shaking\nThis mostly affects react-server-cli, right?\nAdd support for HTTP/2 with server push\nI have a prototype of this running w/ the http2 module, but it's based on our old internal version of react-server. I think with a little work, I should be able to port it to work w/ this react-server if that's interesting. The main problem I ran into when I was poking at this is that the http2 module expects a certain API for request and response objects, and express 4.x does not have that API -- I had to switch us to use connect instead. I think express 5.x was supposed to have a compatible API, but there's a whole lot of drama in that project, last I checked.\nLong-term caching of static assets\nThis isn't too big of a project - we're doing it internally, implemented as a middleware+a one-line webpack plugin to drop the assetsByChunkName.json (or whatever) file in the build output directory. We ran into some fun issues w/ this though -- webpack's DedupePlugin can cause the output bundles to not change hashes, even if the contents change :crazy:\nPort the react-server tests to use react-server-cli\nI'd be interested to see this. I noticed while I was going through the react-server-cli PR that a lot of the setup stuff is the same. :) This would probably be easier if react-server-cli exposed a start function, as suggested above.\nSimplify the use of routr\nYep.\nExplore using react-router for routing instead of routr\nI've thought about this briefly a couple times after you and I discussed it months ago. The streaming thing is where it really starts to break down.\nAdd more documentation and example projects about how to do data loading\nMost definitely. We've been tossing around the possibility of open-sourcing our reflux Stores as well, but there are a couple of nasty known bugs that I'd like to fix first (and I don't know how long it's going to be before I get to that...)\n. :+1: we should have done this a long time ago ;)\n. After some thinking about this, I think I'm uncomfortable with making the TritonAgent Cache's CacheEntry part of its public API. Currently, the CacheEntry is basically \"package-private\". There's a little usage in renderMiddleware, and we depend on the cache serialization format in FragementDataCache.jsx, but everything is internal to react-server, and for the most part it's all in Request.js and Cache.js. I feel like client apps shouldn't be manipulating that cache directly.\nI do think supporting external caching would be awesome though. Would it make sense to extend the plugRequest API to be able to affect the response? (We'd probably also want to extend it to allow plugins that aren't globally registered...) I could also imagine pulling some (or part) of executeRequest out of Request.prototype.end, and providing an extension hook so that a request plugin could monkey-patch a particular request to change the way the data is fetched when end is called? Or something along those lines?\nThoughts? \n. > It's still not exported in common.js and there's no path to it via anything that is.\nIt's accessible via TritonAgent.get(...).getCacheEntry(), which I'd consider part of the public API. (or the transitive closure of the public API, or something fancy like that?)\n. > Instances are available via getCacheEntry().\n\nI guess I don't see the harm... Why make ourselves jump through hoops?\n\nIn this case, I feel like we should be the ones jumping through hoops, instead of clients. In order for a client to use this object, they have to understand deeply the lifecycle and internal state of a CacheEntry, which seems not good.\nOnce we give clients access to that object, we're also tying ourselves to this particular implementation, since now changing basically any of the cache entry could potentially require a semver major version bump (including renaming the requesters field, with the proposed usage). Previously it was private, and anyone who is in there mucking with it, and calling methods on it should expect to be broken by any little thing we wanted to do, but if we went with this approach we'd have to expect people to use it. I'd much rather TritonAgent itself was the boundary of things we had to support. (And the fact that TritonAgent exposes its cache publicly via cache() is also something that we should probably clean up -- we only have one usage for it internally, and it's a hack. :) )\n. Code seems sound. Not 100% sure I understand the issue we're resolving though.\n. SGTM :+1: \n. LGTM\n. LGTM\n. LGTM\n. WHEEE!\n. I'm about to go on vacation, so I trust that y'all have spent more time thinking about this than me. :grin:\n:+1: \n. LGTM :+1: \nAnd FWIW, @aickin you have my vote to be allowed to say \"lgtm\" ;)\n. LGTM :+1: (with the exception of the vars-inside-if-block thing I left a comment on)\n. What's the difference between \"test pages\" and \"examples of react-server features\" in this case?\n. I don't feel that strongly either way, but since I expect these would actually be reasonable examples to link to from documentation (since they'll be simple, and exercise a fairly limited feature set), it might make sense to advertise them that way. We've talked about actually pulling out the page tests into a separate project, and having \"page tests\" and \"test pages\" seems likely to cause confusion. :)\n. LGTM. Not that that matters that much, because I'm obviously incapable of reading today.\n. LGTM. I like the simplification+reuse for test startup.\n. Seems fine to me.\n. Seems good to me.\n. > Any reason not to just kill it?\nOnly the reasons that you already outlined -- mainly that it's available both on the client and server. I think it's baked into the lifecycle in ClientController a little bit, but I can't imagine it'd be that hard to replace w/ a separate script.\n. We actually implemented something like this internally that sounds similar to option 2. We have a roughly five line webpack plugin that outputs a file called assetsByChunkName.json that we use to tell the server about the entrypoints. For lazy-loaded JS bundles, webpack keeps its own mappings internally, and just knows what files to load. AFAIK, we don't use the assetsByChunkName.json file on the client at all. (cc @bartkusa, who worked on this originally)\n. Interesting. We definitely expected to have issues w/ non-deterministic behavior, and looked for it, and didn't find it. Although I think we were worried about hashes changing for no reasons. Maybe they all change if any file changes? I don't recall if we checked for that (but @bartkusa may remember).\nThere's a comment from sokra on the issue linked in the blog post saying that occurrence order is the default. (And then some comments from people after that saying they're still experiencing the issue, though maybe in very particular circumstances.) So maybe it's fixed, maybe not? If we can get away with not adding a dependency on YAWP (Yet Another Webpack Plugin), that would be my preference. IME, the more plugins you have in the build, the more bugs you find in plugins in the build. :)\nIn any event, to answer your actual question: I don't think see a problem with downloading the file from the static content server at startup.\nAlternatively, what's preventing us from just outputting the file in the frontend build, and then having that file copied into the server deploy tar or whatever as a step outside r-s-c? Just convenience?\n. re: determinism - Le sigh. I suppose we probably have a bug to fix now internally as well.\n\nI suppose those instructions could be changed to say something like \"step 2.5: Copy manifest.json to your server somewhere\" and then \"step 3: when you start up the HTML server, pass the manifest file in at the command line using --manifest=location/of/manifest.json along with jsUrl\".\n\nYep, that's what I was thinking. That's basically what we do today internally. I'm assuming that there should be another step somewhere in there that's like \"copy your server code to <not the static file server>\" as well, right? I would think it would go along with that. \n. LGTM.\n. LGTM\n. I tried to pull this branch to play with it, and I can't get react-server-cli to work in react-server-test-pages.\nI ran:\nlerna bootstrap\ncd packages/react-server-test-pages\nnpm start\nand got:\nsh: react-server-cli: command not found\nI can't run react-server-cli via node_modules because lerna bootstrap does the funky not-an-npm-link thing.\n(worth noting that nothing about my stumbling around here is related to this branch, I think. I probably should have just opened a separate issue...)\nI also ran into #98 futzing around with things.\nAny advice on how I might go about getting the server running? :grin:\n. Figured out a workaround: used npm install ../react-server-cli from the react-server-test-pages package and all was well.\n. react-server worked, I think. I think the issue that I was running into w/ react-server-cli is that is has a binary defined in package.json. (Which lerna doesn't propagate)\n. BTW, I reviewed it I think as throughly as I'll be able to. I pulled it down and it works, and it seems to remember things through forward and back buttons. \ud83d\udc4d \n. Doh. Apparently I was pointing to the private registry in that terminal... Ignore me.\n. I'm not opposed to investigating a switchover, for sure. I love the ease of use of zombie, but I definitely don't feel confident that it's going to catch anything browser-specific.\nre: cons -\n\nA lot slower: Each command to the browser is run independently, over the Internet, as opposed to in-process JavaScript with Zombie. It's fairly easy to parallelize different testing different browsers in Travis, but parallelizing individual tests is harder.\n\nI'd be interested to get an idea of how much slower they are. I know they're slower than running in zombie, but our tests aren't doing that much. Hopefully it wouldn't be awful?\n\nMore confusing to run tests locally: ... Selenium would require either a webdriver/selenium server local installation, or that the dev have Sauce Lab credentials and set up Sauce Connect.\n\nHow much more confusing? I haven't ever had to set up selenium tests locally, but internally we have Java-based selenium tests that are run just like JUnit tests; basically no additional configuration needed. I would hope that we could get something working like that in this case? I think not being able to easily run tests locally would probably be a deal-breaker to getting people to write new ones. \n. Yes please! \ud83d\udc4d \n. \ud83d\udc4d \n. Left a couple questions, but otherwise SGTM. (For what that's worth... I'm pretty tired today ;) )\n. \ud83d\udc4d \n. LGTM\n. \ud83d\udc4d \n. \ud83d\udc4d \n. BTW, I noticed some weird behavior that I filed as #116. I didn't have time to dig into it though.\n. Seems plausible, yep.. I think the changes make sense to me. \nAlso, I think if you pull from master, you'll get more than 1 space for tabs in your diffs :)\n. \ud83d\udc4d \n. +1 on \"slots\" as opposed to \"dots\".\nI like that the rounded squares look kind of like floppy disks, even though I'm sure that that is not how they were intended. :)\nI like the Redfin red scheme, but I also like how futuristic-looking the blue react atom on gray floppy disk w/ slots looks.\n(Disclaimer: I am not a designer.)\n. \ud83d\udc4d \n. \ud83d\udc4d \n. LGTM\n. Seems reasonable to me\n. \ud83d\udc4d \n. I was under the impression that lodash v4 was supposed to be better at modularization that v3? \nI can't link into headers in release notes, but... https://github.com/lodash/lodash/releases/tag/4.0.0\n. \ud83d\udc4d \n. \ud83d\udc4d \n. \ud83d\udc4d \n. Change lgtm\n. Looks reasonable to me. This is way nicer than getAboveTheFoldCount(). Three cheers for @bartkusa!\n. \ud83d\udc4d \n. re: express-state -- we actually don't do anything interesting with that. In my internal http2 prototype branch, I'm pretty sure I just replaced it with JSON.stringify.\nHaven't thought about this rest of this deeply yet.\n. I'm not personally married to the idea of ReactServerAgent/anything-built-on-superagent. The builder pattern makes writing tests a bit of a PITA.\nI think provided we maintain feature compatibility (and at least have an upgrade path) there's no reason we wouldn't entertain the idea of switching? In particular, I think it'd be nice to have plugRequest and plugResponse continue working, or at least be possible. Since fetch is such a simple API, maybe just allow users of react-server to do something like\nconst RS = require(\"react-server\");\nRS.setFetchImpl(myFetchImplFunction)\nI know we're using ReactServerAgent internally for file uploads in at least one scenario, so it'd be good for that path to keep working as well (seems like it would, since github/polyfill seems to support it)\nI also agree with the things @gigabo said, I just type slower so he beat me to them. :)\n. FYI, I started this upgrade for Redfin's code internally, and one issue that I ran into that I haven't figured out yet is that the ExtractTextPlugin is still busted in watch mode, and the little hack we use in react-server-cli to \"subclass\" ETWP and make in non-cacheable didn't seem to work to fix it this time. :(. Oh! One other thing I just remembered about webpack 2 that we should be careful about: I can't find the exact numbers, but it slowed down our internal 90s build by >1min. For now, it's just an FYI, but I'd hate to force all users to suffer through perf problems because of us upgrading from webpack 1-2. . \ud83d\udc4d \n. (Will work on PR momentarily)\n. :tada:\nre: 20s timers -- setTimeout(navigateDfd.reject, FAILSAFE_ROUTER_TIMEOUT); in renderMiddleware?\n. LGTM. Curious about maybe adding .unref(), but changes look good.\n. \ud83d\udc4d \n. LGTM \ud83d\udc4d \n. Looks reasonable to me, though I didn't go line by line through the stuff that was moved from react-server-gulp-module-tagger to react-server-module-tagger. \ud83d\udc4d to more documentation there.\n. @doug-wade do you mean what to be done in general about the failing check? I'm pretty sure I have permissions to merge without it passing.\n. Previously, I think we'd get a flash of unstyled (or broken-styled) content as stuff was being added into the dom and stylesheets were being swapped. Does this fix that? \n. \ud83d\udc4d \n. > Remind me why superagent is a peer dependency instead of a normal dependency?\nI think because we wanted to make sure it's a singleton. Internally, we're installing custom response parsers. If we added the ability to install custom response parsers via ReactServerAgent (do we have that? We have response plugins..?) then it maybe wouldn't matter. \n. > we can use plugRequest and plugResponse for that, yeah?\nI think plugResponse may actually be too late, but I found this: https://visionmedia.github.io/superagent/#parsing-response-bodies, which definitely wan't around when we were hacking things up initially, and should make our lives easier. :)\n. I think this changeset is in line with the overall philosophy of the page class: all things response-related are represented by methods on the Page. There are pros and cons to that philosophy, but it's mostly been OK so far.\nI'm tempted to say we should also allow getHeaders in rawResponseLifecycle, since that's in line with getContentType. \n. Seems reasonable to me. I was able to pull the branch, run nuke, bootstrap and start react-server-test-pages with npm3, so it can't be that broken, amirite?\n. > So generally we would want --host=... to be a domain name now?\nI was under the assumption that that is how it was being used already (if it's used at all?), since whatever you put there seems to end up in the URLs for static content when you're developing.\n\nThe description...\n\nWill update to 'the public host name used to construct URLs for static content'?\n\n... is this a breaking change? :thinking:\n\nI think it is, technically, though the broken case I can come up with seems vanishingly unlikely right now.\nIf my understanding is correct, the default behavior now will be to bind to any (or maybe \"all\" is more correct?) IP address on the machine were react-server is running, whereas previously, it would bind to whatever IP address the hostname resolved to. If anybody was relying on react-server being bound to a specific interface in production, I think that behavior will change. If foo.com resolves to 1.2.3.4 and bar.com resolves to 2.4.6.8, but both are hosted on the same machine, and both are running react-server, it seems like one of those two servers won't start up without passing --bind-ip to both of them.. > I thought (though maybe I'm misremembering?) that host was used to construct URLs to the static server.\n@aickin That's correct. --bind-ip shouldn't be used instead, it should be used in addition, and only then if you want that the binding behavior. I expect 99% of folks will just use --host exactly like they used to, and will be none the wiser. For weirdos like me using cloud IDEs in docker containers with a ton of different network interfaces with different IP addresses, they'll use --host like normal (to set the host from which static content is loaded), but also set --bind-ip to whatever their container's mapped IP address is.\nThe trigger for this change was that we're passing the value of --host into server.listen, which is incorrect in some cases. . > I'm suddenly confused. Wondering how react-server.io works a all with \"host\": \"localhost\". \ud83d\ude15\n@gigabo not sure, but trying to figure it out. My pet theory (with no hard evidence) is that the answer rhymes with \"docker\" or \"nginx\".. > And outputUrl is trickily passed through start.js to compileClient.js without being referenced in start.js.\n@aickin Not even going to tell you how long I spent trying to understand that flow this morning. I saw the expected behavior (--host did the right thing), but couldn't figure out wth was going on. Even more confused because of the default syntax for outputUrl in compileClient.js.. The fog is clearing. Turns out the broken behavior being targeted by this PR is a regression introduced relatively recently by #665, which started passing the value of --host into server.listen.\n@gigabo turns out that the \"host\": \"localhost\" in the react-server website doesn't work right now, as it was also broken by #665. It exhibits the same behavior I was seeing in cloud9, where no connections will be accepted because it's only listening to connections from localhost. This PR makes it work again with no additional change, since --bind-ip defaults to accepting connections from all interfaces (\"0.0.0.0\"). \n@SeverS after this PR merges, if you want to bind react-server to a particular IP address, you'll need to add --bind-ip in addition to --host. (You can pass a hostname to --bind-ip if you want, and node will do a DNS lookup automatically, e.g react-server --host foo.com --bind-ip foo.com)\nFor those following along at home, there's some additional context in this SO post about what happens to the hostname parameter to server.listen: http://stackoverflow.com/a/3173447/567229. Also, apparently I'm not the only one on the internet who was confused why it's called hostname, when it appears to actually relate to IP addresses. :)\n. Is it safe to merge this at this point? Are we worried about the possibly-breaking part of these changes?. > One use I cannot for the life of me decipher is at renderMiddleware.js#945:\n@aickin IIRC that's part of express-state. The stuff that gets exposed with res.expose ends up there.\nAlso, if anybody wants to get rid of express-state, I'll thumbs-up that PR. We're not really using it much, and it ties react-server to express. It could be replaced by properly-escaped JSON.stringify. ;). I think next.js is using webpack on the server as well. One benefit is that then you can just delete the single built asset from the require.cache, and you get server-side \"hot reload\". (Or if you have multiple bundles, you have to delete more than one, but still). @drewpc sorry for the delay getting to this. I got sick right before Christmas and wasn't in any shape to think :(\nThis looks really good. I'm taking it for a spin right now, and I might have more feedback, but overall I'm really excited.\nre: @jhnns 's suggested architecture -- that architecture looks eerily similar to what Redfin is using internally right now (our internal build predates the react-server-cli package), and I'm pretty confident that getting Redfin onto react-server-cli would require a similar architecture. I also hadn't seen happypack before -- I'm going to try that out internally and see if it can't solve some other problems we've been having :grin:\nI'm curious to hear @gigabo's thoughts as well, but I think I'm OK merging this first (when it's ready), and then @jhnns (or whoever) can submit a patch for the proxy/separate process architecture at some point in the future. The main downside I see to that is that there's a little bit of back-and-forth code shuffling around webpack-dev-middleware vs. webpack-dev-server, and we need to solve the chunk manifest thing, but the upside is better support for hot reload in the meantime.\nThoughts? . > Before merging it, you should run this PR against a sufficient big code base to check the build time.\n@jhnns I don't think we need to go that far. I'm almost positive it'll be slower than it is in master. :) (I'm not sure it'll be 2x slower, because with @drewpc's setup here, there's no webpack-ing of node_modules for the server.) As an example, the react-server-test-pages project takes 9s for the client webpack and ~3s for the server webpack. My suggestion that we merge this first was under the assumption that there aren't currently very large apps using react-server-cli for their build. (Redfin is using react-server, and our code base is pretty large IMO, but we have a custom build for our app that predates react-server-cli.) I could totally be wrong about this though, and I would actually be pleased to find out I'm wrong. I definitely agree that getting the compilations into separate processes will be a prerequisite for large apps.\n@drewpc as I understand the proposed architecture, there are multiple processes, but there's only one \"public\" port. @jhnns correct me if I'm wrong, but my understanding is there are:\n\nThe proxy (\"main development process\") that dispatches incoming requests to the right server, (based on URL prefix, I presume)\nThe webpack-dev-server process that handles compiling and serving the client assets\nThe webpack watch process that watches src files and re-webpacks them when they change\nThe react-server express server, which just points to the output of the webpack server build, and is killed by the proxy and restarted when the server build changes (or maybe it just ejects the webpack assets from the cache)\n\nWith this setup, the additional port occupied by the webpack-dev-server would be an implementation detail, as opposed to something that has to be handled and set by the developer. On the flip side, it does seem like as long as we can fork the server compilation into a separate process, we should be able to get the same perf benefits that way without needing the multiprocess architecture initially.\nIn hindsight and from an architectural standpoint, the fact that react-server-cli both compiles its sources and runs the server in the same process for dev seems somewhat messy, but that's on us for initial implementation, not the fault of this PR :). > We could also move this to a different package, like react-server-express.\nI think I'm in favor of that approach. I also agree that having a CLI too that embeds the server in it is confusing, and I think it makes it more difficult to do other things we've discussed (e.g., have separate processes for server and client webpack builds).. > All the dynamic stuff like logging options and routes should be provided by static objects that are generated on build time (and are not actually written to disk).\nDoes this mean that require('react-server/options') and react-server/routes would be \"intercepted\" by webpack, and would be filled in with content at build time, but would never be written to disk?\nSo I think what I'm hearing is:\n- clientBootstrap.js would be a static file, provided by react-server. (e.g., the webpack config might have react-server/clientBootstrap, or similar in each entrypoint.\n- we'd have a webpack plugin (or alias?) in the webpack config that identified react-server/routes, and react-server/options requires, and replaced them with JSON representations of routes/options objects from memory.\nIf that's what you're suggesting, I'm on board, with the possible addition that clients should have a way to provide a path to their own clientBootstrap.js file. From the perspective of a new user of react-server, the change s/b transparent, and I think it makes things simpler for a more advanced user.\n. > I don't think that option is necessary.\nIt's possible that it's not required, and I think I'm OK with this change moving forward without it, it just feels a little strange to me to require magic in whatever bundler you choose in order to use react-server. That being said, I'm also OK leaving out the option to specify a different clientBootstrap file initially to see if anybody asks for it. Seems like it wouldn't be that hard to add if we decide we need it later.. For sure. My \"magic\" comment was referring to the webpack-generated file being located in react-server/options in your example (var options = require(\"react-server/options\");) -- I wouldn't be comfortable generating a file and putting inside my-app/node_modules/react-server in order to make that default clientBootstrap file work, so I'd either have to use a bundler like webpack or browserify, or  I'd need to override the default clientBootstrap to make it work. Not a huge deal in the immediate term though.. (edited; I read some code and my thoughts clarified ;) )\n__reactServerBase, __setReactServerBase are being used to set the domain from which static assets (webpack JS and CSS) are loaded. Since we're generating the JS/CSS react-server middleware at runtime, I suppose it's possible to seed those classes with the appropriate value from server startup params. It seems like we might want to use them in other places though? e.g., if we wanted to reference some image that lives on the CDN next to the webpack assets, but wasn't rolled up by webpack CSS, we'd want that base URL. I suppose you could argue that react-server shouldn't care about that, and clients of react-server could add their own globals for those values if necessary. \nIn master, __reactServerManifest does hold the output of chunk-manifest-webpack-plugin -- it's built in compileClient.js, and then passed to coreJsMiddleware. It's possible we may have misunderstood how chunk-manifest-webpack-plugin works -- if we can get it included in the bundle somehow in a way that doesn't unnecessarily regenerate hashes when unrelated things change, I think it makes sense to use it as intended, rather than circumventing it. :). LGTM. Shoot. I feel like I should have seen this one coming. In retrospect, we had to set up CORS headers for our static assets at Redfin, I'm pretty sure because of webpack jsonp loading of require.ensure bundles. We definitely had issues when we first released where things worked in dev, and not in production, and it was tough for the people debugging to figure out why.\nSo... what to do...\nOne thought: I could imagine keeping the separate server approach, but having the JS HMR server send down the CORS response headers that allow cross-corigin requests. Whether or not this is a good idea depends on if the CORS issues in dev are HMR-specific, or are a symptom of something that would show up in production. I haven't looked myself -- @drewpc do you know if issues you're seeing also appear in bundled JS that isn't using HMR? (On further looking, it appears that we are attempting to send Access-Control-Allow-Origin headers via WebpackDevServer in start.js in master?)\nI think I could also imagine just consolidating and calling it a day, maybe with an FAQ entry or something in the \"productionizing\" docs about the same-origin policy, when you might need to work around its restrictions, and how you'd go about doing that. I think that would make react-server's dev setup simpler (good), and less production-y (bad), but maybe it's good enough. Relatedly, if there's anything in \"vanilla\" react-server that requires CORS headers when deploying to a CDN, we should add that to the docs. We also develop with a single host/port at Redfin, and it's not like we run into CORS issues every week -- it's basically just been once, AFAIK. Take what you will from that information. I will stop short of saying that because we do it that way, it's the right thing to do. :)\nTagging @gigabo directly on this, since I believe he worked on our CORS issue initially.\n@drewpc sorry this is taking so long to land. Thanks for sticking with it -- it's much appreciated!. Added breaking-change to this, due the moving of the express middleware and express-state setup out of renderMiddleware. (Which is a change that has been overdue. Thanks!). Thanks @markthethomas!. Not sure how detailed we want the guidance to be, but I could imagine that there are areas of the code base where we'd definitely prefer a specific maintainer, e.g. the person who most recently made significant changes to that part of the code?\nThanks for writing this down @doug-wade. My strategy up until now has basically just been waiting for @gigabo to merge things. I hear that doesn't scale... :grin:. \ud83d\ude80!\nDoes this depend on #809 to be merged first? If not, let's merge!. Just so I'm clear on the intended users, this is targeted more towards clients of react-server than internal code, right? The one concern I have is that someone might try:\nif (!isBrowser) {\n    require(\"database-client\");\n}\nwhich could blow up once webpack gets to it.\nInternally, Redfin uses process.env.IS_SERVER, which is set to true server-side, and is replaced by webpacks' DefinePlugin client-side, resulting in a boolean literal, which allows webpack to ignore that code, and uglify to strip it out completely. I suppose it might be possible to do the same thing with a smart-ish webpack loader that understood react-server requires, and could identify the isBrowser variable?. > We can use process.env.IS_SERVER, no issues... my only recommendation for this way was to make it super obvious to new users how to use that.\n@drewpc Agreed, that would be my primary concern as well, since it's not super discoverable as an env var. > accessing process.env while doing react server-side rendering is generally frowned upon for performance reasons,\n@doug-wade yep. I was imagining that we'd replace it w/ webpack when we do that server-side. The key is that it's an easily identifiable global \"constant\" that doesn't require any context to replace.. > When you run the compressor, uglify will remove the dead code because a was declared as a const\nOh that's neat. Did not know uglify could do that.\nIt seems like we'd still have a problem though, since we're doing something like const isBrowser = require(\"react-server\").isBrowser, and there's no way for a transform that's only looking at a single file at a time to know that the expression on the right is a constant (unless we replace it with a constant in a plugin). I also think we can't send const in the final webpack bundle, so we'd have to make sure whatever the final step is in the transform converts that const to var?\nre: babili -- is babili itself actually doing the ES2015->ES5 transform there? I removed some presets to see if I could tell, and it seems like it is. If so, that could potentially solve our problem. It looks like uglify doesn't do that, at least based on their demo page.. To clarify, this is a breaking change due to the reasons outlined here: https://github.com/redfin/react-server/pull/787#discussion_r96300438\nI actually wonder based on that discussion whether we should downgrade routr in this PR (but include the new tests!), and open up another one to upgrade it? I'm torn because the earlier we change this, the better for clients of react-server, but...dang... this could be a nightmare to test for regressions, since get/post weren't being respected before anyway.. > I actually wonder based on that discussion whether we should downgrade routr in this PR\n(replying to myself...)\nOr do we at least have a way of making it extremely obvious what one would do to verify their code doesn't break with this change in react-server? Do we get to publish notes about breaking changes? @gigabo . > publish a HUGE notice that the bug identified in #312 was squashed\nI dig it. \ud83d\udc4d . @drewpc I was just thinking about spring framework over in Java-land. I think that they default to anything unless you specify something? \n\nThe above example does not specify GET vs. PUT, POST, and so forth, because @RequestMapping maps all HTTP methods by default. Use @RequestMapping(method=GET) or @GetMapping to narrow the mapping.\n\n-- https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html\nThat might actually be simpler to explain, and might be a little more intuitive? \"it'll respond to anything by default; you can limit it if you want\". @drewpc I'm on board with matching everything by default. Curious if @gigabo has strong feelings either way as well.. I'd like to take a closer look at this one. I'll try to get to it this morning. . Gah. I clicked 'approve' went I meant to just leave the review comments.. This looks sweet!\nDoes it make sense to put this in packages? It doesn't seem like it's being managed as an npm package, so it could probably be another top-level folder or something.. I'm in favor of whatever works. :) (Not super familiar with how the site is structured yet.). @gigabo yeah, seems reasonable to me. Added breaking-change. I believe it's probably unused, but you never know ;). Closed by #889. Thanks @mcskinner! Sorry for the slow turnaround.\n@hatfarm if you have a repro for what you're seeing, can you file a separate issue? I verified that these changes fix the issue described in #971, so yours might be slightly different. I think I'm in favor of this proposal. It makes sense to me to let react-server users ship ES6/esnext directly to browsers that support it.\nI haven't thought deeply about what would be required from the technical side, but it seems like we'll probably want to ship both pre-transpiled and non-transpiled code for at least a little while to give existing users a chance to migrate. \nAlso, I assume that as part of this proposal we'd be renaming all the files in react-server to .esm.js? \nAnd looking further down the road, if we're shipping untranspiled code, we'll probably want some way of communicating what level of ES we support in that code, to make it easy for users to know what all the need to transpile it, if necessary?. > If I use ES6 in my project and React Server uses ES7, Babel will transform all of code to whatever the transform target is.\nIn this scenario, I was imagining that React Server would tell the user via docs \"We're using ES7, so transpile that however you want.\", or \"We're using ES7 + >\", as a sort of contract between us and them. It'd be super annoying if users had to figure out what they needed to transpile by trial and error.\nI thin the rest makes sense to me. \ud83d\udc4d . Hi @Syed-Saad-Qamar. Thanks for the submission, but unfortunately we can't accept it in its current form. The PR is much too large to review carefully, and at a minimum it should be broken up change type. Even then, the JS changes would likely make a giant PR and should be split.\nI skimmed the changes in the first few files, and I have a few concerns with the content of the change as well from what I saw there:\n\nI don't think I agree with the changes to the documentation. Ending the headings with a : looks reasonable in the markdown, but I don't think it makes sense when the docs are deployed to react-server.io\nIt looks like the changes were generated by a tool of some sort? In addition to nice-to-have changes (consolidating on one quote style), it also picked up some spacing/alignment issues that were intentional and we would prefer not to change. It also looks like at least some of the changes violate our lint checks, since the build failed.\n\nHappy to re-review if changes are split and re-scoped. Thanks for your interest in react-server! \nedit: submitted too early.. Seemed simple enough\n. We're going apache license on the other projects. Probably makes sense on this one too?\n. I'm not opposed to the TRITON_CONFIGS --> REACT_SERVER_CONFIGS change, but since it breaks all clients, I probably wouldn't normally roll it into an examples PR. \n. Apache License here too?\n. License\n. I wish github had a \"like\" button, but I'll settle for this instead :+1: \n. Super-weird that we can use 4.3.2, especially since that's the LTS version? \nWeird. https://docs.travis-ci.com/user/languages/javascript-with-nodejs#Provided-Node.js-Versions\n. Prooobably not. I knew there was something I hadn't tested. I'll fix it.\n. YES. I actually meant to leave this comment on one of the PRs from yesterday. bootstrap seems like the way it should be.\n. > What if we moved the test helpers into a separate package? Then they could be required without worrying about relative location.\n\nI had that thought too, but it seems like a weird thing to publish a separate module for? I'm not opposed to it though.\n. Seems like that would work, assuming lerna does sane things with local dependencies. I'll give it a try.\n. > the500=it\n\nClever :)\n. It looks like the previous behavior was to issue res.redirect, and then return; since the return statement moved inside if (done) down below, it's not obvious that that's the case anymore. (In any event, I was under the impression 301, 302 aren't supposed to have additional content?)\n. Sorry, yeah, I was unclear in what I meant. I think res.redirect adds the appropriate body -- the target URL for the redirect. I don't think there's ever a case where we'd want to fall through past the if (done) call below, and it's hard to tell whether or not that's the case just by looking at this code. (Though it probably is the case? Unless somebody says setHaveDocument and then sends a redirect?).\nI wonder if just saying done = true right under the res.redirect call would be clearer.\n. > That means I'm responsible for actually putting the link in, but presumably if I'm claiming hasDocument on a redirect I know what I'm doing?\nw/ the updated impl that moves hasDocument into the return object, I think I agree. It's weird (I have literally no idea how you'd implement that behavior w/ spring or raw java servlets), but as long as supporting it doesn't make the code more complicated, I think it seems reasonable. I think w/ the setHaveDocument approach, it'd be possible to intend for setHaveDocument to work for 500s or something, and accidentally have it apply to 503s as well. (Weird/strange edge case either way, I know. :) )\n. :+1: I like this better.\n. If somebody in app code were to throw a string, it just gets no context, right (it doesn't blow up or anything?). I'm pretty sure we've done this before accidentally...\n. Since handleRoute can return a constant, I think we want Q().then(Q(page.handleRoute))...?\n. Ah, um, hmm, weird. I swear that I tried this exact thing before I wrote that message earlier, and it didn't resolve the promise.\n```\n\nvar foo = () => { return {foo: \"bar\"} };\nundefined\nQ().then(foo).then(x => console.log(x))\n```\n\nBut I just did it again, and it resolved so... :shrug:\nLGTM :+1: \n. Didn't like my prose, eh? ;)\n. It does if the goal was to make a silly insinuation that they stole our project name after overhearing us use it in the elevator. (Admittedly, the silly insinuation was poorly executed.) It's cool to remove it though.\n. for the uncached responses, this.cache could be null here on the client-side. (Not that I'd expect anybody to want to do that, since things on the client-side aren't cached anyway...)\n. why not just pass this._cache in here?\n. It feels a little weird that calling a public getCacheEntry will create an entry in the cache. I feel like maybe getCacheEntry should always pass false for createIfMissing, and we can leave the call to this._cache.entry(..., SERVER_SIDE, ...) in Response.prototype.end?\n. Tricky . business.\n. Still trying to read through this PR, but this looks like a module-level variable? Does it have request-specific stuff in it?\n. Oh, I see. Can't preload server-side. Still, this variable as a global gives me the heebie-jeebies. Can we add a comment here to that effect as well? I literally almost had a heart attack....\n. I'm unsure of the complete flow here, but it seems like if listen isn't specified on props, rendered will never be set, which seems like it means the promise would resolve w/ undefined?\n. :facepalm:\n. Code style nit: defining these vars inside the if-statement with intent to use them outside. Works in JS, but is not what I would call expected. :)\n. This comment is super-helpful. :+1: \n. Nit: can we use index = index || 0 here? I think it's a little easier to understand the intent. (And it's actually two characters shorter ;))\n. typo: \"in the bar location bar\"\n. Incidental or not, good change :)\n. routesCRC --> routesMD5?\n. do Error objects get a stack in JS if you return them as opposed to throwing them?\n. In the past when using a promise library, we just throw, and it rejects automatically. It seems like that's probably not true w/ native promises. In any event, I'm OK with trying out this pattern and changing it if it doesn't work for some reason.\n. Changes above here are almost entirely whitespace. (minus ensureCss now returning a promise). Github using 2 spaces for tabs makes the indentation hard to read. Sorry :(\n. This forces meta/link/base writing after stylesheets. I don't know if it's necessary, but I wanted to draw attention to this section and any ordering issues I might be introducing.\n. Hmm... should probably change this to Q.allSettled.\n. Will change this to Q.allSettled too.\n. Q.all maintains backwards-compatibility in the case that a malformed style object was passed, but it introduces new behavior where failure to figure out what stylesheet to load can cause the page to fail to render. Thoughts?\n. Oh. That makes sense. I apparently have no idea what that .editorconfig file does.\n. Hmmm... good point.\nPreviously (and as written in this PR) the swap of \"remove old and add new\" is relatively atomic. The remove/add of the dom nodes happen in the same time slice (which I assume matters, but I haven't actually tested extensively, I don't think). I could imagine adding all the new styles as they come in, then removing the old ones all at once? Seems like that could have some unintentional side effects with styles though. \nThoughts?\n. Yep, probably \ud83d\udc79 \n. \ud83d\ude0c \n. This obviously assumes that this is a desirable change. I can modify it / remove it if not.\n. > I'm a firm believer in 8-column tabs\nI... don't think there's an emoji for how I feel about 8-column tabs. \ud83d\udc7a \n. Does this result in all of lodash being pulled in to the client-side bundle?\n. :heart: \u231b \n. Just to make sure I'm understanding: DataBundleCache.install() is something we'd typically put somewhere central, rather than per-page, right?\n. @gigabo does this chaining look better?\n. I... have no idea why I felt like I needed to do that...\n. I was lazy and just didn't add any. But per our conversation on slack, I added some: https://github.com/redfin/react-server/pull/115\n. It would be, but for #116. ClientCssHelper getting confused + the fact that it actually waits until all promises are resolved means that everything currently ends up correct at the end (after a 1s pause w/ a red background)\n. Er. That is, everything works in this PR. You have to hand-modify renderMiddleware to the not-chained behavior in order to see the flash of red\n. It looks like the main changes here are some 1:1 refactorings, plus removing the this.frame.contentWindow unload listener layer of indirection?\n. Just out of curiosity, did we intentionally unpin this? (\"Yes\" is a reasonable answer, just curious.)\n. This is... confusing to me. This changes the return value from an object w/ message and stack keys to an array, right? That seems weird, given that later in this method we return an object. \nI'm also interested to know when this stopped working, because I'm pretty sure (though not 100%) that it worked at some point. \n. Does it make sense to keep the not production warning above if we're adding this?\n. \"transpile your React\" confused me here for a sec. Maybe \"transpile your JS\" instead? \"transpile your source\"?\n. __CACHE__ and __CHANNEL__ seem like funny examples to use here w/ a logger. They plop in the same info, but they're typically used in different contexts. (Which leads me to believe maybe our replacement string should be __MODULE_CTX__ or something)\n. I think I like the \"reserved for future functionality\" approach for now. It keeps the documentation for the common case (__LOGGER__) cleaner, and we don't have to expose what that module context is yet. Eventually, I can imagine documenting the exposed module context and allowing extensions via the tagger, particularly if we're allowing arbitrary tags -- the cache may not need color, but the logger certainly does. \n. If I understand correctly, this is just converting a React element to an object that looks like {isTheFold: true} for the purposes of switching on it during render, right?\n. This we should unref these setTimeouts too? Or does it even matter?\n. \ud83d\udc4d \n. This misses a case. Will push fix shortly.\n. Can do\n. Done.\n. @gigabo It's possible :grin:. I don't recall anything though. There's some special handling of ReactServerAgent responses in Cache.js (sibling to Request.js), and there's some special handing of error objects in Redfin-internal code, but I don't think I recall any Request-related handling.\n@doug-wade there's also a _cacheWhitelist property (whose name doesn't make any sense unless you look at the implementation) that includes an array of headers that we're interested in from the response. It's technically state on the request; not sure if it's in interesting in a JSON representation of the request.\nSomewhat related, are we sure we want to include the raw agent object in a toJSON method? If set, it's a node HTTP Agent, which doesn't really seem JSON-y to me (though maybe it has properties we want to expose?)\n. Yeah, I think setResponseHeaders or setHttpHeaders would be clearer, since we already have writeHeader, referring to <head>\n. > Shouldn't defaults go in defaultOptions.js, though?\nI... um. Yes, probably. Will do.. Can do. . javascript es6 seems to be confusing github's markdown renderer. (based on https://github.com/SoprisApps/react-server/blob/5cfe98d563bdca8612e4d6695afee53ba7920720/docs/guides/production.md). It gets really confused and then starts making code blocks out of strange things. . Couple questions about this regex:\n- it looks like it assumes the label in opts will use a double quote, which is true in literally every case I could find, except for one: PageUtil.js :)\n40365:      var logger = __webpack_require__(303).getLogger({ \"label\": \"{label: 'PageConfig'}\", \"name\": \"react-server.core.util.PageUtil.{label: 'PageConfig'}\", \"color\": { \"server\": 217, \"client\": \"rgb(212,127,127)\" } });\nSeems easy enough to support either quoting style though.\n\nI'm not sure if we care all that much, since I couldn't find any of these usages, but it looks like with the previous impl, we could write:\nlogger.getLogger(__LOGGER__({\n   label: \"foo\"\n}));\nand it would work correctly. This regex causes invalid syntax to be output in this case, which causes the gulp build to barf. (I tested by adding a multiline options object to PageUtil.js and running npm run prepublish). I've only really skimmed this changeset so far (it's going to take some quality time for a deep dive), but I don't think I saw changes to where we stash things/read things off of express-state\n\ne.g.\nlines ~938-939\nres.expose(initialContext, 'InitialContext');\nres.expose(getNonInternalConfigs(), \"Config\");\nand ~945:\nrenderScriptsAsync([{\n    text: `${res.locals.state};rfBootstrap();`,\n}], res);\nIn general, it makes sense to ultimately take the cookie middleware out of this file (seems like clients can add it if they want), and remove express-state, but this PR is already really big as it is, so I think I'd prefer those changes be submitted separately. . Do the comment and module.hot check no longer apply?. Seems like this can be removed if it's commented out?. :facepalm:. I see what happened. github didn't render the start.js diff at page load (I had to click on it), so it looked like these had been removed rather than just moved. I get it now. :). Good find!. Not a problem!\nI added the breaking change label to this so that we remember to update our code internally when we merge it. . LABjs allows us to load the webpack scripts themselves at page load as async as possible in all browsers to prevent blocking paint, etc.. Technically I think we'd want the data requests to be kicked off in handleRoute. Practically, I'm not sure if that will make a difference.. javascript\nlet selection = Math.floor(Math.random() * ColorWheel.length)\n?. Do we want to return a single element here with 100k children? Or 100k elements?. Sounds good to me. Let's file the multi-line options issue? It's probably on the challenging side, but I think building on top of this PR would make it super narrowly-scoped, so there might be someone out there who wants to tackle it.. I think this comment can go away now :). I'm not sure if it's better in the overall scheme of things (mockery is black magic), but could we use mockery to intercept requires of callerDependency from the spec itself? At least that way the complexity is in the spec, rather than here.. The other usage allows a CLI flag on the tests themselves to override specs (e.g. gulp test --specs Foo) and then appends a * to turn it into a glob prefix match if it isn't one already. I think here we could get rid of the if, unless we plan on supporting the CLI flag later.. I found myself wondering: how come we don't need type in here anymore? And then I found myself wondering: why did we need it in the first place?\nThe only thing I can think of offhand that might break here, is if type is being stored on the route object that's returned and we're reaching into it instead of using the type we're passing around everywhere.\nI looked at the commit in routr, and did some grepping, and I think we're probably in the clear. \ud83d\udc4d . THANK YOU FOR THESE TESTS!. Does react-server even understand head, or does it just return the same thing as with get? (You'd think I'd know the answer to this...). Oh... is it common to have an API respond to, e.g. POST or HEAD? (i.e., should we be auto-adding head, to everything-ish?). I don't understand why it was necessary either, since it didn't really seem to be used. It might have been used with fluxible, which routr was originally built for. But we basically picked the History API and routr from that project (and then modified the history API, IIRC) and called it a day. So it's not particularly surprising that we weren't using the extras on route. . > Another note, is that host should be 0.0.0.0 to make it relative\n\n// to the hostname being used.\n\nWhoa! Is that a thing that browsers support in general, or something special about what we're doing here? . Interesting. . Nit: I think these can be const?. I think there might be an edge case here. It seems like one should be able to POST an empty JSON object to an endpoint, and I think we can't anymore. (Though to be fair, I think that may have been the default before, which probably also doesn't make sense?)\nI suspect that there have always been lots of edge cases here that we just haven't run into yet. (I just realized that superagent accepts strings and objects for send, and we only accept objects.. Nice and nice!. FWIW, I have no recollection of why I thought it was a good idea to combine set/get. I think I was probably thinking of properties, or looking at something else. I doubt they need to be getters as well, but I haven't poked around to see what would need to be updated.. I feel like I should know this, but... do we officially support windows? Seems like /dev/stdin wouldn't work there?. Was going to suggest putting a link here to the section on using custom express middleware, but then realized that you can't link to the headers. Filed #862.\n. I apparently can't leave comments willy-nilly in this file, but should we do the same thing for error responses (line ~209). nit: I find the parentheses around this expression make it harder to parse visually.. should this be Object.freeze(require(\"configFilePath\"))?. Do we not need this route.name override thing anymore for some reason?. I guess maybe it's a product of eliminating mobile?. This still includes mobile, but the PR comments say we're eliminating that. Can it be removed here?. For once ;). Couple requests for this section:\n\nI think for the purposes of this PR, I'd prefer not to log anything in the case an \"invalid\" URL was provided. We could/should validate the URL that we're given, but if we were doing that I'd probably want to throw rather than just log, and that's considerably more involved than stripping the hash off the end, so we can put that aside for now.\nI'd like to keep the two assignments to this._url in constructor closer together. Feel free to move the first one down into your first if-case.\n\nThis doesn't apply to this specific PR, since I'd like to remove the new logging anyway, but for future react-server submissions, we've got a logger set up in react-server that ensures that we get log messages to the appropriate places w/ the appropriate severity levels. In general, rather than console.error, we should use that setup (if you search for \"logger\" in the code, it should be easy to find examples). . Thanks for adding tests!\nOne additional test I'd like to see here is a test that has a URL with a ? following the #. e.g. /react-server/foo#?bar=3&foo=7. I feel like I've seen libraries that store data in the hash in that format, and because we're looking for both # and ? in regexes in ClientRequest, it seems like a place we could have regressions in the future.. Right, I'd expect that everything after the # is stripped -- it's still part of the hash, and not the query string. The concern would be that something in the code changes later, and all of a sudden we start matching the ? before the # or something, and it accidentally gets included as the query string. A test case should help prevent that kind of regression.. ",
    "aickin": "\nDoug clarified for me that the goal of the yeoman generator is to bootstrap a small, functional react-server\n\nI'm a little confused about this goal. I'm pretty sure (although not certain) that the projects generated from this generator won't have any client-side interactivity. When I followed the README.md instructions, for example, I got a project that would generate server-side renderings, but it didn't bundle code or even put script tags in the HTML, so it did nothing on the client side. Is the goal to have this example be interactive on the client side? What about things that are not strictly necessary, like code splitting?\n. @doug-wade If you want an extremely minimal example of a project working with react-server-cli, I have a \"Hello, World\" project in my react-server-examples repo to look at. (And based on your excellent suggestion, it launches with npm start!)\n. Embarrassingly, I'm not sure it's working at the moment; last time I looked at it there were some glitches, and I haven't had a chance to look at it again. If you want to have at it, though, feel free.\n. I had that problem earlier this week, and I vaguely recall that it had something to do with ES6 imports interacting strangely with require (although I may be wrong about that; my memory is terrible).\nFor me, the hello world app works out of the box if I do:\ngit clone https://github.com/aickin/react-server-examples.git\ncd react-server-examples/helloworld\nnpm install\nnpm start\nDoes that work or fail for you?\n. Oh, I think I may see the issue. In the helloworld example, npm start maps to react-server-cli, whereas in this template it maps to server.js. \nThe issues is that the routes file format that I used in the example can't be fed directly into reactServer.renderMiddleware; it needs to first be transpiled to get client side code-splitting trickiness.\n. The version of react-server-cli checked in to npm doesn't have bin in the package.json, so you need npm start to map to ./node_modules/react-server-cli/bin/react-server-cli instead of react-server-cli. I did that and got it to run, although I then hit an error because Simple.js doesn't import React.\n. > Also, I'd like the generator to support different js transpilers, like coffescript and clojurescript; how do I do that with react-server-cli?\nThere's no way to do that right now, though it could be added as a feature!\n. > Seems a little onerous...\nAgreed. I struggle with the correct API here, and I think there's a balance between complexity and functionality. I worry that opening up the entire webpack config as an API is way too broad, and allows folks to do things that can easily shoot themselves in the foot and/or make it really difficult to upgrade react-server, but, as you note, adding loaders at runtime is a totally reasonable feature request. I could imagine allowing folks to pass in additional loaders, I think.\n\nAnd I npm linked a patched version of react-server-cli\n\nDid you link it globally or locally? As a reminder, react-server-cli doesn't work when globally installed.\n. Actually, here's an idea to see what's going on that's different between our systems. The following commands start up the server on my system:\n1. git clone https://github.com/doug-wade/example-reactserver.git\n2. cd example-reactserver/\n3. npm install\n4. ./node_modules/react-server-cli/bin/react-server-cli\nFor me, this starts up the server, and then if I go to http://localhost:3000/ I get an error with Simple.js not including React (which is a different issue). Does this work the same for you?\n. > react-server-cli is definitely broken for node 5\nHmmm... I've mostly tested it on node 5, and just ran both my hello world and your hello world (after patching the React import in Simple.js) successfully in node 5.5.0, so I don't think that's it, or at least it's not the only factor.\nOK, let's step back for a second. What do we know is different between our machines? I can think of two things that I know:\n1. npm version. Looks to me like you're using a 2.x version, while I'm using a 3.3.12.\n2. react-server-cli is npm linked on your machine and not on mine.\nIs there anything else that you know of? \nI'm looking suspiciously at the npm difference, given that the problem is with resolving libraries. Would you mind switching to npm 3 and re-running the test above? Are there things I should try on my machine?\nThanks, and sorry for the hassle.\n. It's totally npm; with npm 2.14.20 I was able to repro the issue where it can't find webpack-dev-server:\nERROR in multi HelloWorld\nModule not found: Error: Cannot resolve module 'webpack-dev-server/client' in /Users/sashaaickin/code/example-reactserver\n @ multi HelloWorld\nI'll file an issue and probably look at it in the next day or two (I'm in a hackathon today which is going to take up most of my time).\n. \ud83d\udc4d Thanks, @gigabo!\n. Read and signed. Thanks!\n. Dunno if it's interesting or not, but I ended up taking a slightly different approach in the CLI project. Instead of putting a token like LAZY_REQUIRE and replacing it at build time, I just had the page entry be a string, like:\njavascript\nroutes: {\n        Simple: {\n            path: ['/simple'],\n            method: 'get',\n            page: \"./SimplePage\"\n        },\n}\nand then during the build step output a server and a client version of the routes. The former just directly calls require, while the latter calls require.ensure. I figured it'd probably be easier to document that page is the path to the page module, rather than __LAZY_REQUIRE__(pathToPageModule). Thoughts?\n. @roblg: I output two different route files, one called routes_server.js and one called routes_client.js. Then when starting up the server I have a line that looks something like:\njavascript\ntriton.middleware(server, require(\"./routes_server\"));\n(yes, it's still triton... ;)\nThen in the webpack build for the client I include routes_client.js in the entrypoints portion; something like:\njavascript\nentry: {Simple: [\"./routes_client\", \"./pages/SimplePage\"]}\nDoes that make sense? If you want the full ugliness, check out compileClient.js.\n. 1. Glad you think so, and thanks so much for taking the time to look at it!\n2. Aw shucks, thanks.\n3. Yeah, I think proper scope of this project is the thing I have the least clarity on, and I'd love feedback. I wrote it as a separate project this summer partially just because it felt like I couldn't really merge changes back to react-server; it wouldn't surprise me if some parts of it belong in react-server itself. I feel like there are at least five semi-separate tasks that react-server-cli performs right now:\n   - Transpile the routes.js file into a code-split version for client and a non-code-split version for server.\n   - Add CSS and JavaScript middleware to the routes config so that they will load properly on the client side.\n   - Bundle JavaScript and CSS for the client with webpack.\n   - Start an HTML server that will render the pages.\n   - Start a static server that will serve up bundled JavaScript and CSS for the pages.\n     These tasks are somewhat separable, but they have interdependencies, especially when you do things like start in hot-reload mode. Do you have any opinions on what the proper project boundaries are?\n4. I think my issue with it being global is that it doesn't do project bootstrapping/scaffolding (which would make a lot of sense as a global install), and I fear that react-server will change rapidly enough that it will be hard to make one globally installed version of react-server-cli understand how to compile code and run servers for multiple different locally installed versions of react-server on the same machine. I do agree that bootstrapping is important, and I'm totally agnostic about whether that's a feature of react-server-cli or is a yeoman generator a la #2. I could even imagine renaming the yeoman generator react-server-cli and this project something like react-server-compile-start.\n5. Could not agree more. I know from experience that it's actually really complicated to get react-server running if you only have the react-server middleware; it took me two weeks or so to get this CLI project to where it is now, and I knew a lot about the internals of react-server. If we want devs to make sites with react-server, the time between npm install and getting in to the code-run loop has to be as small as humanly possible.\n. Answering my own question:\n\nCurrently react-server is a peer dependency, but should it be a runtime dependency of react-server-cli instead?\n\nI remember now why I made it a peer dependency. It's because the app code needs to access react-server sometimes, specifically for things like the logger and the Link component.\n. Commit 11a8fa1 should address the issue of route files having page values that are objects. I tested it locally with a project that served up one page to phones and another to desktops, and React connected correctly in both cases. Thanks for letting me know about it, @gigabo!\n. Hey there! I know that this is a big, rough PR, and it's hard to review this much code at once, but I'm wondering if there's anything I could be doing to help it along. Would it help, for example, if I removed some features (like, for example, hot loading) or spent some more time commenting the code? Let me know what would be helpful, and I'll see what I can do.\nOn the flip side, if you don't want this to be the direction of react-server (or if it's too much to maintain or whatever reason really), that's totally OK, and you won't hurt my feelings if you don't want to pull the code. Cheers!\n. Totally fair; I know it's a lot. Thanks for your time!\n. :tada: \nw0000000t. Thanks so much for your time and work, @doug-wade, @roblg, and @gigabo. Yeehaw.\nTwo things still on my todo list for this (I'm in an all-day meeting and shouldn't actually be looking at this today :smile: ):\n1. Responding to the rest of @doug-wade's comments.\n2. Adding someone at Redfin as an npm owner for react-server-cli. (Who should that be? @gigabo?)\n. Of course not. In fact:\nDear lawyers,\n I hereby donate the npm name `react-server-cli` and `react-server` to this project.\nI would love to be left on as an owner, but it's your call.\n. Yeah, I already added @gigabo as an owner to react-server; I just need to do the same for react-server-cli. I happily leave the team/owner structure decisions to @gigabo. :smile: \n. @gigabo officially added as an owner to npm react-server-cli. Do your worst!\n. @doug-wade thanks for the thoughtful post, and sorry for my delay in jumping in. Life intervenes sometimes. First a small point:\n\nAlso, since we Babelify the code for clients, how would clients opt in or out of language features? \n\nThis is currently supported by the .babelrc in the project, so it's under the control of the project, not react-server-cli, but your larger point absolutely still holds.\nI hear what you are saying here, and I asked a lot of questions trying to get at the same issues in my react-server-cli pull request. I agree that react-server-cli right now doesn't have a flexible API, and in an ideal world it would. My problem is that I can't figure out how to expose extension points in a way that doesn't multiply complexity and chances of breakage tremendously.\nMy motivation for react-server-cli was originally just to get react-server working and provide some path for other devs who wanted to do the same. Last summer, @gigabo and @roblg gave me access to the triton codebase because I volunteered to write some example projects for documentation. It took me something like a solid week of work to get a simple \"Hello, World\" that had client-side React working because setup had so many pitfalls. It took me another week or so to get bundle-per-route and hot reload working. If that's what it took me, as someone who had been working with the code base for 2-3 months, I figured no one in the open source world would be able to unravel it, so I packaged together what I had learned in react-server-cli.\nI think you are asking the right questions: what API will we support, how will we deal with new requirements, and what's the guarantee of what will work and what won't? And I think you are arguing that the current react-server API is near the right level of abstraction, when combined with a one-time project generator. Is that a fair characterization? (And to be clear, because tone on the internet is so, so hard, I'm genuinely curious about your position here, and I'm only characterizing your argument to see if I understand it correctly, not to put words in your mouth.)\n. > react-server-config\n\nreact-server-compiler\nreact-server-runner\n\nAt high level, this seems like a good breakdown to me, although I'm not 100% sure how it will work without seeing and thinking about the APIs for each of the modules.\nWhat's the goal of making separate modules? Is there a case where you'd use one but not the others? Or is it more about understandability?\n. Update: looks like I can fix production mode if I install the following:\nnpm install --save babel-loader\nnpm install --save babel-runtime\nHot reload still doesn't work, though. I added webpack-dev-server and react-hot-loader, and it ended compilation errors, but there are still runtime errors on the client.\n. Fixed in 81b9802. Thanks!\n. I found a better way to do this that fixes both hot and non-hot mode, so I'm going to close this PR to make it clearer.\n. May I gently bump this thread? I think that @doug-wade's PR #2 might be blocked on this, and I would love to unblock him. \nThanks! \n. Added config file for react-server-cli in #87. If we merge that one, I'll update this PR to include https in the config file options.\n. This branch got out of sync with master because of the programmatic API changes. Fixed in fee2e26.\n. Thanks. Should be fixed now!\n. Thanks for the feedback and enthusiasm, @kcjonson!\nA few unprioritized reactions: \n\nTree shaking is awesome but good linting goes a long way for blocking unused imports, especially if everything is on ES6 syntax\n\nI think you probably already know this, but tree shaking goes one step further than linting. For example, right now if you code\njavascript\nimport { Link } from \"react-server\"\nyou import everything from react-server (~85KB gzipped) into your codebase, even if you are linting. With tree-shaking, you import just Link and its dependencies. I have no earthly idea how much of an effect this would actually have; would probably be best as a research project at first.\n\nHowever, its in beta so are we ok with the following items being held up by it?\n\nI personally don't think it makes a lot of sense, no. While webpack 2 is still in beta, I think it's an interesting research project, but I probably wouldn't worry too much about its effect on other stuff. Depending on unreleased open source versions is a dangerous game.\n\nFor this generic body of work, do we want to consider killing CSS and JS bundles for HTTP/2 requests?\n\nI don't know, and I think it's an empirical question. I did some experimentation with HTTP/2 in Apache in January to see how unbundling would affect a test page, and the results were pretty terrible when large numbers of JS files were unbundled. I don't know what caused my results, though; it could have been HTTP/2 implementation immaturity, bad default settings, increase in size due to gzip inefficiencies when unbundled, the absence of server push in Apache, or something else entirely. Khan Academy wrote a blog post about HTTP/2 unbundling slowing them down, but it's a deeply unsatisfying post from a technical explanation standpoint. Basically, I think we'd have to experiment with differing levels of bundling and see how browsers respond.\n\nWe'll still need to look at the dependency tree for a given route so that we know what to push, and we'll probably still need bundles deployed for non HTTP/2 browsers.\n\nAgreed 100% on both counts.\n\nDo we still use webpack to create the common chunk? How does the work across routes and root elements? If each root element is an entry point then the only things that would end up in the common bundle are things that appear in every root element, which is most likely not the behavior we want.\n\nShort answer is that I have no idea. To be clear, I'm not even sure this task is possible with webpack's current feature set. All I'm sure of is that it would require some webpack wizardry combined with some changes to the Page API.\nTo be frank, I think that RootElements having their own CSS is an interesting feature, but it doesn't seem nearly as important to me as some other more fundamental perf optimizations (e.g. far-future expiration) or smoothing the dev rampup experience (e.g. routes file complexity, requirement to have routes file for simple sites, doc around data loading).\n. Another Q, @kcjonson: do you have any feelings about things like CSS Modules or PostCSS support?\n. > Do you mean replace TritonAgent with fetch?\nSorry, yes, this is what I mean.\n\nWe currently just have pages require(\"triton\").TritonAgent, and fetch willy-nilly, unless something changed while I wasn't paying attention.\n\nYou're right, I was going off some incorrect memories. I think the point about not having to document TritonAgent vs. fetch stands, though.\n\nThis mostly affects react-server-cli, right?\n\nMostly. I think (?) to get the most benefit it might require switching to ES6 imports inside the react-server codebase, though, and mucking with the build so that they aren't transpiled to CommonJS before the webpack build. But otherwise, yes, it's a react-server-cli thing.\n\nI had to switch us to use connect instead.\n\nI remember you saying that. I don't think we depend on anything in express that isn't in connect, but I wouldn't be surprised if I was wrong about that.\n\nI think express 5.x was supposed to have a compatible API, but there's a whole lot of drama in that project, last I checked.\n\nTruth. I went looking for info on express 5 yesterday, and after 3 hours of reading github issues I think it seems like it's not being released. \n\nto drop the assetsByChunkName.json (or whatever) file in the build output directory.\n\nI think this gets a little more complicated if you separate the client build and server build (i.e. you want to pre-compile client code for a static server), but it's still not super hard.\n\nI noticed while I was going through the react-server-cli PR that a lot of the setup stuff is the same. :)\n\nIt's almost like the same person wrote them both... ;)\n\nThe streaming thing is where it really starts to break down.\n\nYep, although I think they may have changed a few things to make it better? But I'm not sure?\n. > Port the react-server tests to use react-server-cli\n@roblg: one other question about this. I can't exactly figure out what the package dependencies would look like. I think that since react-server-cli depends on react-server, we'd have to move all the tests from react-server out into their own project that could take both react-server-cli and react-server as dependencies. A bit ugly to not have the tests right next to the code, but I can't see another way. Does that seem correct to you?\n. I think the runtime perf differences are great, but I'm wondering if you've looked at how this affects the initial bundle size. I think Bluebird is something like 20k while Q is just 4K (gzip + minify). For a minimal hello world project, react-server is currently about 84k, so this could be a pretty big increase. \nWhat are your thoughts?\n. This is an absurdly elegant way to deal with bundling and preloading data. @roblg mentioned the bundling to me the other night and I was blown away. Bravo.\nOne thought, perhaps parallel to this PR: I wonder if it's also worthwhile to write some code that allows the pre-loading of the JavaScript and CSS bundles, which are the other potentially significant drivers of latency. It seems to that this solution will be awesome when going from one page of a particular type to another of the same type (like LDP --> LDP), but less so when switching types. I could imagine it just using the built-in browser prefetch, which currently works in about 2/3rds of browsers. Thoughts?\n. Hmmm... good point. You don't want to call handleRoute on the client; that kind of defeats the entire purpose.\nHere's a wacky idea: could you call getHeadStylesheets and getScripts (or whatever it's called) on the server side and pass the JS/CSS URLs down in the JSON with the data? Then you could add <link rel=\"prefetch\"> for each resource immediately, with the hope that the browser will download them before the user navigates. This would also help in the situation where a needed JS file isn't part of the page bundle (e.g. third party scripts), which the webpack loader will not be able to prefetch.\nOne downside with this idea vs. your current solution is that you'd need to parse the JSON from the server when it's downloaded, rather than when it's needed, which I really like about the current solution. If that was really a problem in practice, you could conceivably make some easier-to-parse format.\n. Sounds great. Thanks! \nAnd fwiw, this PR lgtm (am I even allowed to say that?).\n. Do you have a citation for when that was true? At least according to this presentation by Ilya Grigorik, at least, prefetch hints \"have lowest possible priority\". \n. @bartkusa Thanks for the warning and the cite!\n@gigabo & @roblg Aw shucks, thanks!\n. As @bartkusa noted, there may still be a bug in Chrome that makes rel=prefetch links have higher priority than they should.\n. Is the idea that it's all in one big server project, or is it possible that there would be multiple projects?\nAsking because I'm interested in porting my react-server-examples over.\n. LGTM. Sorry about my sloppiness. :(\n. I see the build failed; could be because I'm using node 4/npm2. I'll look at it when I get back to desktop. \n. I've delved into the build a bit, and it looks like the way I set up the test package is not to lerna's liking; seems like lerna can't correctly handle projects with peer dependencies. Dunno exactly what to do, other than to pull react-server-integration-tests out of the packages directory entirely, hoping that lerna will leave it alone. That means then I have to write a gulp script to npm install the test dir, though, which is annoying, but I don't have any other good options.\n. Hooray, my scheme in 4fc2b67 of moving the integration tests out of packages pleased the build gods!\nIn summary, if you're interested: at first I had the integration tests under packages/react-server-integration-tests and in the package.json had lines like this:\njavascript\ndependencies: {\n  <snip>\n  \"react-server\": \"file:../react-server\",\n  \"react-server-cli\": \"file:../react-server-cli\"\n}\nThis worked fine for testing locally, but lerna was not a fan, and lerna bootstrap errored out with this format in the package.json. I then tried to use normal dependencies and have lerna figure it out, but this failed because react-server is actually a peer dependency of react-server-cli, and lerna doesn't handle those kinds of dependencies correctly.\nEventually, I moved the integration tests out of packages altogether (which makes a certain amount of sense, since they aren't a package we ever intend to publish). This let me use the file: style local references in the package.json. I had to add a few extra gulp tasks to the root gulp file, one to npm install the integration test directory, and one to run the integration tests, but now it seems to work.\n. As an added bonus, in cdf17e3 I think I finally squashed the intermittent test failures I was seeing; looks like they were due to the module cache being poisoned, and my strategy of manually deleting from the cache was not working consistently.\n. And back to the merge conflict mines.\nSiri, remind me to not commit three simultaneous conflicting branches next time, ok?\n. Can I gently bump this PR? I'm starting to accumulate things behind it.\n. Bundling data is pure :fire:. Excited for it.\nMy questions:\n1. Why is false the default? I would have assumed that true would be the default given current browser performance characteristics with lots of HTTP requests, but I have not thought about it deeply.\n2. Why is this an attribute of a link and not of the page that you are transitioning to? It seems to me that bundling is more likely to always be good for a particular page class or not, versus desirable on some links to that page and not on others.\n3. Have you thought at all about what will happen in an HTTP/2 world? I'm guessing this is probably HTTP/1-only given the perf characteristics of HTTP/2, but I'm not entirely sure.\n. I'm happy to give a :+1:, given that you filed #92. Cheers.\n. Closing, I got my answer and filed a PR. Thanks!\n. > I have mixed feelings about tucking config into package.json generally... it seems to be a trend. Just voicing my skepticism.\nI hear that. I was basing it off babel (which you probably knew), and I thought it was kind of neat, but I'm not wedded to it. It's very removable if you want.\n\nMore typical behavior with configuration files is to allow command-line options to override values individually, right?\n\nI'm actually not sure which is more common; I'll investigate with babel.\nWhat I was worried about is reproducibility of a particular CLI invocation. It just felt potentially confusing to me to have the same command line set of options do different things depending on your working directory. (Of course, I recognize at some level that having react-server-cli work differently in different directories is the entire point of this PR, but it somehow felt more constrained when it only applied to option-less invocations of the CLI. I'm not sure that's rational on my behalf.) \nI also was thinking that a single config's values probably have some interdependencies (which is why I also didn't want to merge config from different sources in the file system), but I may be wrong about that, too. Your example of just changing the log level is illuminating.\nI'll look at babel's behavior and think about it a little more. Implementation should be easy no matter what the decision.\n\nAwesome! I don't get the example, though.\n\nOh, yeah, the example is just plain wrong. D'oh. Your version is correct, as is the example in the README.md. Thanks for catching it.\n. Played around with babel, and it follows your proposal for merging (defaults => config file => options). I've also just thought about it more, and I think you are right and my original idea was wrong. \nImplemented the new options merging in 4120e21, which actually meant I got to delete a bit of code. Yay!\nAs for package.json config, in the absence of major resistance, I'm going to leave it in. If you change your mind and want it out, though, just let me know.\nThanks as always for the feedback!\n. Changed the README and added comments on the CLI undefined dance. Thanks!\n\nNext question: Can this merge with this config? Should it?\n\nOh hey. I'd completely forgotten about that file's existence (even though blame says I wrote significant parts of it... sigh). I can't easily figure out what was in that config; do you know, or do I need to go code spelunking?\n. > I don't think anything is put in it or used from it by react-server itself.\n\n@roblg - Any reason not to just kill it?\n\nIf that's the case, how would you feel about filing it as a bug and separating it from this PR? It seems like it's not something that most folks writing app code need to know about?\n. Thanks, @roblg!\n\nFor lazy-loaded JS bundles, webpack keeps its own mappings internally, and just knows what files to load.\n\nFYI, the Medium article I linked to above explains that this is not enough to keep the hashes constant from build to build; any change to any module changes all the hashes of all entry chunks, even if the entry chunk doesn't include that module. You have to use ChunkManifestPlugin as well; see the section on \"Deterministic Hashes\".\nAny thoughts on using HTTP(S) to download a manifest when the client build is being served up by another server?\n. > Although I think we were worried about hashes changing for no reasons. Maybe they all change if any file changes?\nYeah, this issue is not about non-determinism from one build to the next when the code doesn't change. It's about a small code change changing all hashes for all chunks, including completely unrelated ones. To quote the article: \n\nThe problem with this is the same as before: whenever we change any part of the code, it will, even if the rest of its contents wasn\u2019t altered, update our entry chunk to include the new manifest.\n\nThe problem is that every entry chunk keeps a map of all chunk names, which of course includes the chunk hashes in the chunk names. So, when any chunk changes, its hash changes, which means that the chunk name map changes, which changes the text of the entry chunk, which changes the entry chunk's hash. Yay.\n\nThere's a comment from sokra on the issue linked in the blog post saying that occurrence order is the default. (And then some comments from people after that saying they're still experiencing the issue, though maybe in very particular circumstances.) So maybe it's fixed, maybe not?\n\nOccurrence order is a different problem, which can cause hashes to change between different builds of the same codebase. You also need the OccurrenceOrderPlugin (which also is in the linked article).\nIn that thread, sokra says it's on by default in the next major version (i.e. webpack 2), which is confirmed in this webpack 2 feature list.\n\nwhat's preventing us from just outputting the file in the frontend build, and then having that file copied into the server deploy tar or whatever as a step outside r-s-c? \n\nI'm trying to decide what to do when react-server-cli is used to build the client code separately from starting up the HTML server, as described here in the docs. I suppose those instructions could be changed to say something like \"step 2.5: Copy manifest.json to your server somewhere\" and then \"step 3: when you start up the HTML server, pass the manifest file in at the command line using --manifest=location/of/manifest.json along with jsUrl\". Is that what you mean? \n. Sorry, yeah, I think this is covered. Closing!\n. LGTM!\n. Ugh. I think lerna doesn't like the fact that hello-world is not a direct subdirectory of packages. It was erroring for me locally too but I figured I had done something wrong.\n. > I think lerna might be on to something there, too. hello-world is already taken, for one thing.\nYeah, but the actual module name is react-server-examples-hello-world, so maybe that's not an issue?\n\nWould it make sense for react-server-examples (still available!) to be the public module and have the individual examples be private?\n\nPerhaps, although do we really need a public module at all? I'm not sure what we gain from making any of it public. Do you know of any good documentation for lerna (other than its git README)? I feel like I don't really entirely even understand the problem it's trying to solve.\nI'll fiddle with it today or tomorrow.\n. Figured it out. lerna doesn't care about whether a module is private or not, but it does throw an error on modules without a name. Added name to the react-server-examples package.json, and lerna stopped complaining. \nAlso addressed @gigabo's suggestion to not return an array in getElements().\nShould be good to merge now!\n. > It also needs the next version of react-server\nOh yeah, didn't notice that because lerna linked them locally.\n. >  Unfortunately some conflicts with master have snuck in.\nI have no one to blame but myself \ud83d\ude04 \nShould be fixed in de4d003. Had to do a little bit of surgery to startServer.js, all concentrated at the end of startImpl and the new function startDummyJsServer. The HTTPS changes in master which moved the starting of the servers into startServers were not playing well with the changing of serverRoutes from value to Promise in this branch.\nThe rest of the merge was pretty trivial.\n. To make this discussion more concrete, as an experiment I converted the (very simple) HelloWorld test spec to Selenium/Sauce; you can see it here. A few thoughts:\n- The tests look pretty good: I think the actual test code in the spec looks pretty good/readable, especially considering it all became much more async. Might be even better if we integrated jasmine-promises, which allows you to just return a Promise from a test rather than mucking around with done().\n- Write once, test on many renders works: I really liked the strategy in the existing tests of writing a test once that can be run three times, once each on the server render, client render, and page-to-page transition. That strategy is still doable on Selenium/Sauce.\n- Added complexity has a cost: As with all projects like this, there were integration oddities that took a while to figure out; I think most of the complexity is hidden now from the test writer, but it could definitely rear its head again.\n- OSX tests are pokey, but mobile tests are SLOOOOOOOOOOOOOOOOOW: I've observed a huge perf difference depending on the OS/browser combo (rough times per test in the HelloWorldSpec):\n  - Linux/Chrome: 3-6s\n  - Win 10/Chrome: 5-9s\n  - Linux/Firefox: 8-11s\n  - Win 10/IE 11: 8-12s\n  - OSX/Safari: 12-15s\n  - OSX/Chrome: 12-15s\n  - Win 10/Edge: 10-12s (with a couple test failures)\n  - Android/Android Browser: 53-67s \n  - iOS/Safari: 58-65s\nThose mobile numbers are eye-popping; it would take hours to run even a reasonably modest test suite on mobile browsers. According to this thread, the startup times aren't unusual, and it's that the simulator frequently boots slowly and crashes. There's a potential that you could start up just one simulator for a whole Spec or Suite, although that obviously runs a risk of introducing test dependencies.\n. > I'd be interested to get an idea of how much slower they are. I know they're slower than running in zombie, but our tests aren't doing that much.\nWas working on that last post for like the last 2 hours; collided in midair with your question.\n\nHow much more confusing?\n\nHaven't tried it yet, but I think it involves installing the Selenium Server jar, the Chrome WebDriver, and then starting up the jar with Java before running the tests. Or something like that.\n. Actually, I just found webdriver-manager, which claims to be an npm installable package that handles all you need to get a local Selenium Server going. It's forked out of protractor, which seems to be a well-used project.\n. @doug-wade Thanks for the response! I want to make sure I understand what you're saying, though. Do you mean:\n1. that there should be a disjoint set of tests A & B, where A tests run on Selenium and only run in CI and B tests don't use Selenium at all and run both locally and in CI? or\n2. that there should be a single set of tests that all use Selenium, but locally we run them against a headless browser and in CI we run them against a browser matrix?\nAnd a follow-on question if you meant 2: do you have a suggestion for a headless browser? AFAIK Zombie doesn't support Selenium, which is why I was thinking of it as an either-or kind of thing. Thanks!\n. Thanks, @doug-wade, that clarifies things for me, and I think we're basically on the same page.\nOne question for you: how do you feel about testing with a non-headless Firefox? I've been experimenting with webdriver-manager, and I'm pretty impressed at how well it seems to work with Firefox and Chrome, and Travis supports running Firefox locally with xvfb. I even just opened an experimental PR that runs some of the existing tests against FF/xvfb on Travis, and the build passed (much to my surprise).\nIt also seems to work locally, although it may require Firefox to be on the dev box. Thoughts on that?\n. Indeed. It was (afaict) totally working, but then it started to be a little flaky, so I didn't think it should merge yet. Then since last Wednesday, I've been sidetracked by my PR for the first step of integrating streaming into React core.\n. Closing and reopening to rerun the build.\n. Reopening to rerun the build.\n. Closing and reopening to see if test failure is intermittent, which it looks like to me.\n. Reopening to test.\n. Making that options was just merged to master yesterday, and may not have been published to npm yet. are you using master or a published version?\n. Definitely better; love the section on aggressive rendering. \nLGTM after my comments are addressed.\n. As someone who probably wrote/might have written/vaguely remembers writing that function prototype, I think that getLinkTags is enough and don't think it's worthwhile to have a specific getCanonicalUrl method.\n. > Use react-server-cli --compile-only and run the build it produces in a custom production server. We need some documentation on how to do that.\nYou're going to want --production on there as well. Also, there's a section of react-server-cli's doc that addresses how to use it in production. \nYou are right that it doesn't cover server clustering, beacons, or logging, but I think it's the best answer we have right now, and for many sites it'll be a reasonable answer.\n. > Noticed your vote on the \ud83d\udc4e side. Anything to add to the \"cons\" list?\nNope, I think you pretty much summed it up. Please see it as a weakly held \ud83d\udc4e; I don't care that much and am happy to do what others decide.\n. This is a good change! \ud83d\udc4d \n. @withinboredom Question: I'm assuming you just want to leave the URL in the CSS file, right? You aren't looking for any kind of inlining of the font, I presume.\nI could imagine two paths:\n- Quick and dirty: just add a catch-all loader config with file-loader.\n- Comprehensive: add an extensible, configurable way to add custom loaders.\nI'd vote for quick and dirty for now. Thoughts?\nAnd FYI, I think the particular lines involved are at https://github.com/redfin/react-server/blob/master/packages/react-server-cli/src/compileClient.js#L130\n. FYI, I'm working on the quick and dirty solution in a branch. Hopefully a PR within a few days, depending on other commitments. \n. I believe this should be closed now that #251 is merged. \nMight be worth opening a bug for more generically applicable file handling, but the use case for this bug is fixed, I think.\n. I'd like to bump this feature request, because I'm curious how folks feel about it as a future direction. Would you accept a PR with it? Do you think it's a step forward or a step back?\nAlso, if you do think it's a good idea, I'm curious if you'd want it to be opt-in or opt-out. Right now client code opts in to the ReactServerAgent cache by requiring ReactServerAgent. If we instead intercepted all calls to fetch, it's possible that we could end up sending down some secret information in the cache that was not intended to be sent to the client. This could be alleviated by making client code opt in by doing something like import fetch from \"react-server/fetch\", but that would require documentation and is the kind of thing developers miss. Thoughts?\n. FYI for anyone thinking of working on this issue: I know that @roblg poked at it and built a working prototype. Also, the biggest problem he ran into was that Express is not compatible with node's http2 library (for extremely byzantine reasons). He had to migrate from Express to connect to get it to work. \ncc @withinboredom\n. FWIW, my thinking on this has changed a bit since I filed it in #50 after I went to Velocity this past fall and started poking at server push for a few weeks.\nOne of the talks I saw at Velocity (lightly) suggested that server push is generally probably a bad idea at this point. It turns out that, at least as of October or so, no browsers implement client cancellation of push streams when a resource is already in cache. So if you always blindly push all your affiliated static resources, you will lose the entire benefit of the browser cache on repeat visit, at least as far as bandwidth is concerned.\nAdditionally, the speaker I saw suggested that even if browsers did support cancelling push streams, it wouldn't result in a lot of perf saving because in many cases the server would end up sending down a lot of the pushed resource before getting the cancellation. (I vaguely remember the speaker saying something about a situation where the server can easily get most of the pushed resources into the network buffers before the stream cancellation comes back from the client, but don't quote me on that.)\nThere is a rough plan to fix this situation but it's pretty early days. There's a draft spec for Cache Digests, which would allow browsers to send a compressed digest of all the server's URLs in the browser cache. The server can check what's in the client's cache and use that to decide what to push and what not to push. Due to some clever math, the digest is quite compact over the wire, although that compactness comes at a price: the digest is probabilistic and allows for some chance of false positives. In case of a false positive, the server incorrectly will believe that the client has the resource in cache, but that turns out to be fine; it just means the browser will request the resource as usual.\nI believe that no current browsers support cache digests, but I might be wrong. Until they do, though, I feel like http/2 push is probably not a great feature for react-server. There are some implementations, like the h2o server, that have hacked together cache digests implemented in HTTP cookies, but that feels pretty brittle to me and not worth the effort if real cache digest support is on its way eventually. YMMV, of course.\nThere's a good, long article about some of the tradeoffs here: http://calendar.perfplanet.com/2016/cache-digests-http2-server-push/. FYI, I'm trying to get streaming in to react core in https://github.com/facebook/react/pull/6618 and https://github.com/facebook/react/pull/6836 . I think we shouldn't work on this until it's in core (or they reject the PRs).\n. @drewpc Sigh... I think the PRs are dead, and we should probably close this too, as I haven't updated the core react-dom-stream to React 15.\nI'm still looking at how to do this with Fiber (the upcoming React architecture), and hope to have some convos with the core team in the coming weeks.\nBut in the meantime, I'd just close this issue as WONTFIX.. I think that this may be fixed by https://github.com/redfin/react-server/pull/100\n. Fixed the case sensitivity issue in f15fc83. Thanks, @gigabo!\n\nThis is a surprisingly little amount of code to make all of those assets work. Magic.\n\nI think I spent about 90% of the time of this PR on getting the tests running and finding a font file with a permissive license. The code was like 10 minutes, most of which was looking up file extensions. \ud83d\ude04 \n\nRelated: @aickin's back, baby! \ud83c\udf89\n\nAw shucks. For the record, I'm probably not going to be as intensely involved as I was earlier in the year, but it sure feels great to be so welcomed. Thanks, @gigabo!\n. > I've seen complete tests hang for a while after finishing locally on my laptop.\nThis always happens for me, and I'm convinced (without any other data) that something in the test setup code I wrote isn't cleaning up servers correctly. I spent a while trying to find out what it could be and failed. \ud83d\ude22 \n. To be clear for whoever works on this: the tests usually pause for a ton of time (minutes!) after the specs are all finished but before the gulp task exits, but to my knowledge they don't just hang forever.\n. > Ideas for how to send the timing info? Seems like easiest would be to just send it in the primary document like late data responses and node arrival alerts.\nYeah, that's what I was thinking. If we wanted to be really fancy, we'd send the timings down as the occur throughout the page so that the waterfall could be built and updated as the page loads. But frankly, that sounds like a lot of work for not a lot of payoff. I think I'd just put all the timings below the late arrivals and have the devtools panel say \"Waiting for data...\" until it comes in.\n\nThere's a little bit of a chicken/egg problem at the end of the request there, but maybe the very tail-end timings don't matter?\n\nGood point! I would just punt on getting the true end-of-response time.\n\nCould alternatively open up a secondary channel, but that's more complicated.\n\nNot worth it. If you read out the timings after late arrivals and right before </body>, you're close enough to the end of the response.\n\nWould just need an offset for the server's request start time relative to the browser's navigation timing API start time... Not sure how well we can estimate that...\n\nI think that's one of those \"seems not that hard but is actually functionally impossible\" problems in computer science.\n\nThe more I think about this the more excited I get!\n\n\ud83c\udf89  Yeah, the more I think about it, the more I think it could be super powerful to see the server-side waterfall with a single click in DevTools. (Makes a great demo, too... ;)\n. > So... You working on this? When can I play with it?\nI'm only thinking about it as of yet, and I may work on it, but I wanted to share the idea in case others wanted to run with it (and to get folks' thoughts).\nI should also say that I have a competing implementation idea, which is essentially that the ServiceWorker just runs the server render code (with a hopefully extremely quick ping to the server to make sure that the SW's copy of the app is up to date and fallback logic when it needs to update). Chrome, Firefox, and Edge will all soon support the ability of Service Workers to stream content to the browser, so the browser could display early RootElements before later RootElements had been rendered. You'd basically just substitute the web stream response write method for Node's res.write().\nA maybe cool side effect of this implementation strategy is that you could implement the ReactServerAgent cache using the Cache API rather than the <script> tag cache. As the page is being rendered in the ServiceWorker, just clone every data response and throw one copy in the cache using the Cache API. Then, when the browser requests that data endpoint, pull it from the cache and delete the entry. This would have the benefit of being less code (and perhaps more dependable?) than our <script> tag-based cache. \nThe downside to running the server side renderer in the ServiceWorker is that in HTTP/1 you might hit connection limits when retrieving the data from a bunch of different API endpoints. In HTTP/2, that shouldn't be a problem.\nAnother potential pitfall of this strategy is that I don't know what the JS parse/execute perf would be like for loading up the server renderer in the Service Worker, and I also don't know how frequently Service Workers are evicted from memory.\nIt does have the potential to be more maintainable, though, and it has a certain elegance. Thoughts?\n. Oh, sorry to double post, but one other thought.\nIn any case, a good first step might be a Service Worker that just aggressively downloads and caches the JS and CSS bundles. That would be useful even without any rendering hijinks.\n. > My intuition is that browsers do \"just handle this\", since the \"whole point\" of web workers, iiuc, is to do work in the background that doesn't affect the ui thread.\nI agree, but it wouldn't be the first time a web feature had a point-defeating bug... \ud83d\ude09 \n\nif push came to shove, couldn't we postpend a script tag to the initial page load that starts the ServiceWorker only after the full page was received?\n\nYes, although to nitpick, that wouldn't guarantee that it wouldn't interfere with later AJAX requests, inflight image requests, etc. But it would help!\n\nYou mean if there were two different groups of hosts, one running v1 and one running v2, and we got different webpack hashes from the different pools, and you were randomly assigned to one of them, we would reload the page unnecessarily?\n\nYes, although there's the added wrinkle that the v2 ServiceWorker would cause the v1 ServiceWorker to uninstall (and vice versa). Since installing the ServiceWorkers downloads the whole app for offline, you could have a lot of extra downloading of the app if you swap between v1 and v2.\n\nCould we use the data bundle preloading that we do for client transitions to offset this cost?\n\nI'm not sure. How would we do that?\n\nIt seems surprising to me that the cost of transmitting the data bundle across the wire would take significantly longer than the amount of time to create the data bundle\n\nThe worry I have is that the case where there are 10 data requests, and 9 are fast and 1 is slow. If you do the requests individually, you can render pieces of the page as soon as the individual requests come in, whereas if you ask for the bundle, all the data goes as slow as the slowest request. Does that make sense?\n\nThe more I think about this, the less I feel like I \"get\" web workers -- I thought the intent was to do work in the background that didn't affect the main ui thread, but this has got to be true -- there's no way you can open inifinite xhrs in a ServiceWorker and not exceed the browser max conns.\n\nI think that vanilla web workers are intended primarily to do work in the background, but service workers are really more about caching, proxying the network, offline behavior, and responding to events that occur when the web page is no longer open, like notifications.\n\nwould love to see us come up with a use for the reserved CHANNEL with isomorphic cluster + ipc modules that wraps up ServiceWorkers and the node cluser api into a single api that \"just works\" \u2122\ufe0f\n\nI think we've overstepped the bounds of my knowledge. \ud83d\ude06  Is __CHANNEL__ a react-server concept? What does \"isomorphic cluster + ipc modules\" mean?\n\nIn any event, this is a really long way of saying: I think you're on the right track\n\n\ud83d\ude80\ud83d\ude80\ud83d\ude80  Thanks for the feedback.\n. I've seen that but haven't yet played with it. If it works, I think it could implement a simple \"cache the static assets\" strategy, but not a more complex strategy where the sw proxies the root HTML page.\n. Sure, I can take a swing at it.\n. That's fair. Removed!\n. Actually, wait. This may be a mistake on my part. Gimme a sec to see if I screwed up.\n. > Actually, wait. This may be a mistake on my part. Gimme a sec to see if I screwed up.\nNo, I was right the first time; got confused looking at the wrong package.json. \nLooks like what the yeoman project does is: npm run compile calls gulp, which runs the JS files through react-server-gulp-module-tagger and babel with react-server preset, dumping the output in the build directory. Then npm run start runs react-server-cli with build/routes.js.\nI think that after #280 is merged, the compile step can be skipped altogether. This will enable hot reloading (which currently doesn't work because of the build step) and CSS and other assets (which currently don't work because the gulp script doesn't copy them to build.\n. Between this, #458, and #459, um, thanks for picking up after me! \ud83d\ude1f\ud83d\ude1f\ud83d\ude1f\n. I think that you're right that this isn't ideal, but practically it shouldn't cause a bug because the subscribe reference on line 151 is in a callback, so it happens after subscribe has been assigned. But you're right, the code would be cleaner with the definition above, and it'd be a great first PR to help the project. Would you be willing to submit it?. @jjunkin: Thanks for the info and for tracing through the code! I stand corrected.\n@gigabo: how would you feel about activating the no-use-before-define ESLint rule? That rule would have caught this bug. I think the main downside would be that you would have to define functions in order in a file, even when defining them out of order will never practically cause a bug. For example, this code would error:\n// this would cause a linting error.\nexport default x => addOne(x);\nconst addOne = y => y + 1;\nBut, as I say, the upside is that this bug would have been caught.\nIf you think this is a good idea, I'd be happy to implement the change and update any code that needs to be updated to lint correctly. Thoughts?\n. I thought (though maybe I'm misremembering?) that host was used to construct URLs to the static server. If bindIp is used instead, then won't the static URLs end up being https://0.0.0.0:3001/somestatic.bundle.js?\nI might be totally confused about this, it's been a while.. > @aickin That's correct. --bind-ip shouldn't be used instead, it should be used in addition, and only then if you want that the binding behavior. I expect 99% of folks will just use --host exactly like they used to, and will be none the wiser. \nI get that, I'm just confused because this PR seems to me like it deletes host as a parameter completely, but I think that might just be me misunderstanding how the code works these days. I'm grepping through to try and figure out where host is now used.. @gigabo Got it. That's what I was missing. And outputUrl is trickily passed through start.js to compileClient.js without being referenced in start.js.\nThanks for listening to the mumblings of a frequently confused man. ;). @roblg best part is: it was probably my doing, and even I couldn't understand it any more! \n. FYI, because I didn't use comma-chained declaration in RootElement.js, this will have merge conflicts with PR #769. If you choose to merge #769 first, I'll happily do the merge; it should not be difficult at all.. OK, I updated the PR with a version that just converts var foo = function() {} to function foo() {} and depends on hoisting. It's much less disruptive (~300 lines changed vs. ~630 in the previous version), and it allows you to keep default exports at the top of the file if that's what you're into.\nThere are a couple files (logging/server.js and logging/stats.js) where I converted some functions that didn't strictly need to be converted in order to make the linting rule pass. I thought it was better to do that than to have functions defined a bunch of different ways in the same file.. Great! It's rebased, and I'll keep an eye on the CI build; let me know if you need anything more.. One use I cannot for the life of me decipher is at renderMiddleware.js#945:\nrenderScriptsAsync([{\n        text: `${res.locals.state};rfBootstrap();`,\n    }], res);\nI can't figure out where res.locals.state gets set, if ever. Probably harmless, but worth double-checking.. @roblg got it, then it should be safe.\nThe other one that scared me at first was in FragmentDataCache.jsx, but then I realized it gets sanitized since it's inside JSX.. @gigabo are you talking about the use of babel-register to transform files as part of require on the server side? If so, I'm pretty sure that it keeps a cache in between runs automagically. \nNow, maybe it's not using the cache for some reason, but if it is, I'd guess that pre-transforming isn't going to help very much.. @drewpc I agree with you totally about the benefits of server webpack, but there are some tradeoffs (or at least there were last time I looked at this). The biggest issue for me with server side webpack is timing of the debug-test cycle and debugging/sourcemaps experience. A lot has changed since we went with the server not using webpack, though, so the downsides have probably changed. \nCertainly a good thing to investigate!. Big +1 to what @doug-wade said, though browsers are in the process of optimizing ES2015+, so the landscape is ever changing. My total shot-in-the-dark guess is that the balance will be in favor of native impls in v8 by maybe mid-next year and hopefully in Node by late 2017. We'll see.\nThere can be a significant perf benefit in browsers to not transforming code because native ES2015+ code is often fewer bytes than Babel-transformed code, which makes it smaller over the wire and faster during parse. But in node, the wire size is moot, and the parse benefit is, I think, a pretty tiny sliver of the overall server time.. How would you bypass it? Pass in a manifest at the command line?\nOne other thing to note: I intended but never implemented a safety check here, where the hash in the manifest could be compared between the server and the static JS to make sure they were the same version. If you bypass the build on the server side, you'll never be able to do that check. But maybe that doesn't matter?. Just so we are all on the same page: manifest.json is required on the server-side because it contains the names of the chunks with their content hashes. Without manifest.json, all the JS and CSS URLs will be wrong.\nWhen I wrote this, I thought that there were three reasonable ways to get the manifest info on the server-side on startup:\n\nRebuild the static files and generate manifest.json, throwing away the client build. (This is the currently implemented strategy.)\nPass in a manifest.json file path (which was presumably previously generated during an earlier client build step) at the command line.\nInclude manifest.json in the client output, and then download http(s)://{jsUrl}/manifest.json when the server is started up.\n\nThe benefit of option 1 is that you can in theory do an integrity check to make sure that the server codebase and client codebase are in fact identical. If you don't care about that, I'd personally prefer option 3. I do, however, have moderate worries that the requirement that the HTML server can reach the jsUrl server might trip up folks in some configurations. Thoughts?. > Those requests are considered part of a different domain according to the CORS same-origin policy.\nFor what it's worth (which, frankly, is maybe not much?), I considered this to be an advantage, because I've often run into problems when my dev experience serves static files and dynamic HTML from the same server. In every production setup I've used, static files are placed on a CDN, so they are subject to CORS restrictions. But when you serve static and dynamic from the same server, the dev experience isn't subject to CORS, and you end up with confusing CORS bugs in prod that are hard to reproduce in the (non-CORS) dev setup. My solution has generally been to simulate a CDN in dev so that both environments are subject to CORS. Thoughts?. > I imagine that this was an unintended side effect instead of an architecture decision, don't you?\nI mean, my memory is notoriously faulty, but I'm pretty sure I set up the CLI with separate JS and HTML servers in order to make sure to simulate CORS issues in dev. Whether that's a good idea or not remains an open question. ;) \n\nDo you think that many people realize that myhost.com:3000 and myhost.com:3001 are considered different origins?\n\nI don't know, although I do think that dev understanding of CORS issues in general is fairly low, and CORS errors are indeed extremely confusing for many devs IME.\n\nI agree that simulating CORS issues prior to moving to production is important.   I'd say its not obvious and therefore wouldn't be expected when someone sets up a simple HMR environment.\n\nIf it's important to simulate CORS issues before production but simultaneously non-obvious/non-expected to have CORS issues in dev mode, what do you think is the right thing to do in dev? Do you want to have two different dev modes, one with CORS and one without?. Totally; it's almost all in compileClient.js. \nIn a general sense, I feel very unsure about the question of how many different packages with public APIs this project should be. It feels too monolithic to me right now, especially munging code compilation and server setup. But I'll admit that I don't know right now what the right divisions are.\n. Oooooh; I'll need to fix that. Are there any documentation or examples outside of the code? Thanks!\n. OK, so I think I understand it, although for some reason reduce always scrambles my already addled brain a bit :cry: . \nMy plan: allow page in the routes file to be a string or an object of strings. If it's a single string, I will compile it to:\npage: {\n default: {\n  done: {\n   function(cb) {\n    cb(require(THE_MODULE_STRING)); // or require.ensure for client-side\n   }\n  }\n}\nand if it's an object of strings, it'll look just like that but with multiple entries named appropriately instead of a single entry named default. I'll work on this now.\n. How about:\n- helpers in a separate directory under packages\n- don't publish to npm\n- include a dev dependency in react-server package.json of \njavascript\n\"react-server-test-helpers\": \"file:../react-server-test-helpers\"\nThen you can require the package like normal, and I think dev dependencies get wiped away when published to npm. \n. Yeah, it's... not ideal, although, yes, the output is nicely indented. Do you have any better ideas on code that outputs code? I'm not particularly proud of this solution.\n. I certainly could; only reason I didn't was that I didn't have access to that code when I wrote this. Thanks!\n. Thanks; should be fixed in b48525e. (I did not try to factor out the eslint task, though...)\n. > Already doing that browser-side...\nYeah, although I think we could remove it as a browser-side global now (i.e. get rid of window.__reactServerBase; it shouldn't be used any more.) We still have to leave the method that assigns it to __webpack_public_path__, though, or else the webpacked code freaks out that it's on a different server than the base HTML.\nI hear what you are saying, but these two middlewares are not intended to be externally available, so the only client should be the transpiled routes file, which calls the constructor with the path to the static files. That seems better to me than adding a global that others might start depending on; globals have a way of becoming impossible to modify/remove because it's so hard to find their dependents. I also worry about having a global that's defined in react-server-cli; if app code depends on the global, the app won't be portable between react-server-cli and raw react-server.\nSo: I'd prefer this not depend on a global, but if it's what's needed to get the code pulled, I can totally do so. ;)\n. I don't think that window.__reactServerBase is used any more. I should test taking it out in a few different scenarios.\n. Ugh, I think I was wrong about being able to get rid of window.__reactServerBase. It's used when the JS is compiled using compileOnly and the server is launched with jsUrl to tell the server code where the compiled client code lives.\nIn that case, the compiled client JS has null for pathToStatic, whereas the server code has the real runtime pathToStatic. window.__reactServerBase is a sneaky way to pass the path from the server to the client without having to recompile the client routes file.\n. See above note; I think I was wrong in the case where compileOnly is used to make a compiled client bundle that can be deployed at any URL. Sigh.\n. Good point; fixed in aa5411c. Thanks!\n. Good point. Standardized the args in aa5411c so that the command line args are all hyphenated and the JavaScript representations are all camelCased. The changed args are log-level, js-url, js-port, and compile-only. Thanks!\n. Fixed in 01a40ab; thanks!\n. Oh huh, it looks like you're right. \nFor some reason I thought that because the loop variable is reassigned each iteration that it had to be let. Looks like that's not the case, so it should totally be const. Thanks!\n. Hmmmm... interesting point. The issue is that I believe React still doesn't minify fully unless you set NODE_ENV to production, so that the env checks for dev mode can be minified out. Without production in the minification step, it won't truly be minified. I see your point, though, and I don't know how to reconcile it. \n. Eventually, I would love to be able to send differently compiled versions of the code to different browsers based on their native ES2015 capabilities, but that would require a minifier that understands ES2015. Uglify is working on ES2015 support, but it's somewhat slow going. I've heard through the grapevine that Babel may be working on a minifier plugin that would be totally ES2015 compatible, though, which is tempting.\nAll of this is theoretical for now, though, so no real reason to fight over it. :smile_cat: \n. What's the project feeling about suppressing linting rules? I sort of assumed that it would be frowned upon unless completely necessary.\n. Annoying that renaming makes it look like the entire file is new. :(\nSo you don't have to look for yourself: this is one of the two lines changed in this file. I used \".\" so that it would be sure use the exposed API function.\n. And this is the other changed line, just changed startServer to start.\n. Happy to switch to ./index if you want. Felt slightly DRYer this way but slightly more confusing. \n. Very nitpicky thought: we currently use \"bundle\" to talk about the static JS bundles, so maybe its worth using a different term here, or a more specific one like DATA_BUNDLE_CACHE. \nAs always, feel free to ignore.\n. So, it's worth noting that IIRC that react-server-cli will do babel transformation by itself, so this build step is (I think?) superfluous. But maybe you want this for consistency with the other packages, so I guess it's ok.\nThe upside for allowing react-server-cli to do the babel compile is that I think you could just add an entry for scripts.start that was react-server-cli, and then the install instructions would just be npm start. Also, watching/hot loading works by default. Thoughts?\nOh, and if you want an example of this working, check out https://github.com/aickin/react-server-examples/tree/master/helloworld\n. It's all right, though not my 100% favorite, for a few reasons:\n- Just a general aversion to magic globals when a module system exists. Also, does this put a React global in both server and client global scope?\n- Components that are written assuming a global React will not work in environments that use standard module import, which then forces more apps to add React to global scope if they want to share that code. In this way, it infects the ecosystem and causes compatibility problems.\n- It maybe has the potential to confuse packagers and other new dev tools that depend on ES2015 imports to understand module dependency graphs.\n- If the issue is that you don't want to have to type import React from 'react' at the top of component files with JSX and no reference to React, there is a simple babel transform that will do that for you. The output of your babel build will then be compatible with projects that don't use global React and will have parseable dependency trees.\nAll that said, would I really mind terribly? No, not really. Your call!\n. I think this is misspelled (bunndleData vs. bundleData).\n. Values that aren't sent in on the command line come in as undefined (except for boolean values, which come in as false.\nSending in a value with undefined overrides the default, because I used Object.assign to merge options, so I remove them before sending in to startServer.\nI'll comment it.\n. Eek. Thanks, @RobKopp!\nShould be fixed in e686258, and I filed bug #95 to look into the root cause for the error swallowing.\n. Yikes. An earlier version was CRC; I'll change it. Thanks.\n. Helpfully, it's completely non-standard! From the MDN doc on Error.prototype.stack:\n\nDifferent browsers set this value at different times. For example, Firefox sets it when creating an Error object, while PhantomJS sets it only when throwing the Error, and MSDN docs also seem to match the PhantomJS implementation.\n\nGiven that the method that calls this method doesn't throw the error (because it uses it for a Promise reject()); I think the question is moot? (Although admittedly, promise error handling consistently makes me feel stupid, so I may be thinking about this wrong.)\n. It could get big; it's probably ~100 bytes per entry point (that's a guess; I haven't looked at it to measure).\nI believe the issue with it being in the bundle is that putting it in the bundle would change all bundle hashes any time any file changes and defeat the purpose of long-term caching.\n. Oh that is sneaky. I like it! But yes, probably best to address if/when it becomes a real problem. ;)\n. Should be ReactDOMServer to follow conventions elsewhere, I think. \nETA: Facebook documentation uses this convention.\n. nitpick: this doesn't have parallel structure; the rest of the bullets are all actions (i.e. have a verb). How about \"Bundle data requests\" or \"Bundle data for transfer\"? \nAnd same for the section header below.\n. Nice. I write more better English. \ud83d\ude1b \n. Oh, I didn't know it did this. THAT'S AWESOME.\n. In order for require(\"foo.css\") to work on server-side in tests, I had to move this to index.js.\n. This is an unrelated bug fix that I noticed.\n. This is still a bit of a hack, but probably the best thing if we don't want to do server-side webpack.\nNote that we only include CSS here, which means that this PR will not support JS files that directly require a font or image file. This PR only supports fonts and images when they are included in CSS using the url(foo.png) syntax.\n. The tests were only copying over JS files in the build, but they need to copy over CSS/images/fonts too.\n. I did a bit of searching on the Internets for different font and image types. I started including audio file types and then decided that was stupid.\n\nShould this be /.../i to pick up upper-case extensions?\n\nGood catch! I'll patch it up.\n. Sigh. There's a way but not easy. Also, I'm lazy.\nI first wrote this test to check the computed styles in the HTML to see if the CSS was applied, but it turns out that ZombieJS doesn't download CSS \ud83d\ude22. So, I think the good way to do this would be to download the CSS with node's http module and insert the text into a <style> node, then test the computed style. Then, for styles that are of the form url(foo.bar), try to download the asset referenced.\nHowever, the test as written was failing and showing the bug that @withinboredom found, and I was too lazy to do all of that in this PR. Can we leave that for down the road? \ud83d\ude2c \n. I wanted to put the require extension before the call to require to be 100% sure that no CSS gets loaded. There's no way to do that with import \ud83d\ude22 \n. If folks want to, it's fine by me. Could also consider other media files (i.e. video, audio, and 3D/VR).\nHowever, remember that with this PR that require(foo.txt) will still throw an error server-side, because the only require.extension we set is \".css\", so adding txt or csv here will only help for txt and csv files that are referenced by CSS. That seems pretty unusual to me, and probably not worth it?\n. I guess so, but I don't really know.\nI also ran into the problem that it defaulted to calling the project by my current directory name, replacing - with a space, but when it tried to npm install, that failed. I should file that.\n. Filed as https://github.com/redfin/react-server/issues/290\n. FWIW, I just tried yo generator-webapp, which is the example on Yeoman's README, and it drops all its files in the current directory, so I guess that's the standard. Interestingly, they don't tell you to make a sub-directory in their example.\n. I hear you; I think I was the original author of a few of those files in that format.\nAnother option is to convert functions in those files from const foo = (bar) => { /* body */} to function foo(bar) {/* body */} and rely on function hoisting, which I think would allow you to put the exports at the top in most cases (but maybe not all? haven't thought it through). Less ES6-y and relies on some hoisting magic, but maybe more readable? (Maybe?). OK, gimme a sec. I'll try it out.. OK. I was unclear if those comments were for clients of this file (in which case they make more sense to me at the top of the file) or folks who are going to muck with the impl of this file (in which I case they definitely belong below). I'll move them!. And, I should say, I skimmed the comments at best ;). Hahahahahaha. \nIn any case, the PR is updated, and the comment was reunited with the code. Onwards!. ",
    "CLAassistant": " All committers have accepted the CLA.\n.  All committers have accepted the CLA.\n.  All committers of the pull request should sign our Contributor License Agreement in order to get your pull request merged.4 out of 11 committers have signed the CLA.:white_check_mark: roblg:white_check_mark: jmhwang7:white_check_mark: gigabo:white_check_mark: doug-wade:x: redfin-sasha-aickin:x: Llewellyn Botelho:x: Kevin Anderson:x: Sean Wu:x: dfabulich:x: Alex Hanson:x: decoy31Llewellyn Botelho, Kevin Anderson, Sean Wu, Alex Hanson seem not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account (for further information, click here).\n.  All committers have accepted the CLA.\n.  All committers have accepted the CLA.\n.  All committers have accepted the CLA.\n.  All committers have accepted the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Brad Wang seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: doug-wade:x: invalid-email-address\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: kcjonson:x: Kevin JonsonKevin Jonson seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Vincent Chang seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Robert Law seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it.. ",
    "doug-wade": "@aickin actually, this TODO mvc project is a much more reasonable scaffold for building a real app on top of -- mind if I generate that instead?\n. As is, the HelloWorld app is throwing 500s\n```\ndougwade ~/example \u00bb npm start\n\nexample@0.0.1 start /Users/doug.wade/example\nnode server.js\n\nStart server...\nListening on port 3000\nStarted!\n2016-02-23T07:47:43.886Z - error: [react-server.core.renderMiddleware] Failed to navigate after FAILSAFE_ROUTER_TIMEOUT page=HelloWorld, path=/\n[object Object]\n2016-02-23T07:48:18.299Z - error: [react-server.core.renderMiddleware] Failed to navigate after FAILSAFE_ROUTER_TIMEOUT page=HelloWorld, path=/\n[object Object]\n```\nAnd instead of the expected Hello World!, I'm getting [object Object], so this still needs some work before it can merge\n. I'm really struggling to understand how react-server-cli is supposed to work.  I'm getting the following error\n```\ndougwade ~/example \u00bb npm start\n\nexample@0.0.1 start /Users/doug.wade/example\nreact-server-cli\n\nmodule.js:341\n    throw err;\n    ^\nError: Cannot find module 'react-server'\n    at Function.Module._resolveFilename (module.js:339:15)\n    at Function.Module._load (module.js:290:25)\n    at Module.require (module.js:367:17)\n    at require (internal/module.js:16:19)\n    at Object. (index.js:21:15)\n    at Module._compile (module.js:413:34)\n    at loader (/Users/doug.wade/react-server/packages/react-server-cli/node_modules/babel-register/lib/node.js:128:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/doug.wade/react-server/packages/react-server-cli/node_modules/babel-register/lib/node.js:138:7)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\nnpm ERR! Darwin 15.0.0\nnpm ERR! argv \"/usr/local/bin/iojs\" \"/usr/local/bin/npm\" \"start\"\nnpm ERR! node v5.6.0\nnpm ERR! npm  v3.6.0\nnpm ERR! code ELIFECYCLE\nnpm ERR! example@0.0.1 start: react-server-cli\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the example@0.0.1 start script 'react-server-cli'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the example package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     react-server-cli\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs example\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls example\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/doug.wade/example/npm-debug.log\n```\nI tried fixing it by adding a peer dependency on react-server, but the error persists.  I don't want to add an actual dependency on react-server, since then the cli would have a different instance of react-server than the one that the generated package has, which is clearly bad.  I've posted the generated boilerplate to a separate repo to make this easier to review: https://github.com/doug-wade/example-reactserver.  Note that I'm on node 5.6.0, so peerDependencies are handled differently (better) than they were in npm 2.\n. Also, I'd like the generator to support different js transpilers, like coffescript and clojurescript; how do I do that with react-server-cli?\n. @aickin So to change the transpiler to a non-supported one, you have to open a pr with us first?  Seems a little onerous... \nAnd I npm linked a patched version of react-server-cli that fixed the bin issue and still got the error -- I'm worried you're using a separate instance of react-server in your local testing than what the client instantiates.\n. ```\ndougwade ~/example-reactserver \u2039master\u203a \u00bb npm install                                                                                                                                                                                     1 \u21b5\nnpm WARN example-reactserver@0.0.1 No repository field.\ndougwade ~/example-reactserver \u2039master\u203a \u00bb ./node_modules/react-server-cli/bin/react-server-cli\nmodule.js:341\n    throw err;\n    ^\nError: Cannot find module 'react-server'\n    at Function.Module._resolveFilename (module.js:339:15)\n    at Function.Module._load (module.js:290:25)\n    at Module.require (module.js:367:17)\n    at require (internal/module.js:16:19)\n    at Object. (index.js:21:15)\n    at Module._compile (module.js:413:34)\n    at loader (/Users/doug.wade/react-server/packages/react-server-cli/node_modules/babel-register/lib/node.js:128:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/doug.wade/react-server/packages/react-server-cli/node_modules/babel-register/lib/node.js:138:7)\n    at Module.load (module.js:357:32)\n    at Function.Module._load (module.js:314:12)\ndougwade ~/example-reactserver \u2039master\u203a \u00bb node -v                                                                                                                                                                                         1 \u21b5\nv5.6.0\n```\n. @aickin react-server-cli is definitely broken for node 5\n```\ndougwade ~/example-reactserver \u2039master\u203a \u00bb node -v                                                                                                                                                                                        1 \u21b5\nv4.3.1\ndougwade ~/example-reactserver \u2039master\u203a \u00bb rm -rf node_modules\ndougwade ~/example-reactserver \u2039master*\u203a \u00bb npm install\nnpm WARN package.json example-reactserver@0.0.1 No repository field.\nnpm WARN deprecated css-list@0.1.3: Deprecated.\nnpm WARN peerDependencies The peer dependency express@>=3.x included from express-state will no\nnpm WARN peerDependencies longer be automatically installed to fulfill the peerDependency\nnpm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.\n\\\n\nfsevents@1.0.8 install /Users/doug.wade/example-reactserver/node_modules/react-server-cli/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents\nnode-pre-gyp install --fallback-to-build\n\n[fsevents] Success: \"/Users/doug.wade/example-reactserver/node_modules/react-server-cli/node_modules/webpack/node_modules/watchpack/node_modules/chokidar/node_modules/fsevents/lib/binding/Release/node-v46-darwin-x64/fse.node\" is installed via remote\nreact-dom@0.14.7 node_modules/react-dom\nsuperagent@1.2.0 node_modules/superagent\n\u251c\u2500\u2500 extend@1.2.1\n\u251c\u2500\u2500 cookiejar@2.0.1\n\u251c\u2500\u2500 methods@1.0.1\n\u251c\u2500\u2500 component-emitter@1.1.2\n\u251c\u2500\u2500 reduce-component@1.0.1\n\u251c\u2500\u2500 mime@1.3.4\n\u251c\u2500\u2500 qs@2.3.3\n\u251c\u2500\u2500 debug@2.2.0 (ms@0.7.1)\n\u251c\u2500\u2500 readable-stream@1.0.27-1 (string_decoder@0.10.31, isarray@0.0.1, inherits@2.0.1, core-util-is@1.0.2)\n\u251c\u2500\u2500 formidable@1.0.14\n\u2514\u2500\u2500 form-data@0.2.0 (async@0.9.2, mime-types@2.0.14, combined-stream@0.0.7)\nreact-server@0.0.10 node_modules/react-server\n\u251c\u2500\u2500 cookie@0.1.2\n\u251c\u2500\u2500 q@1.4.1\n\u251c\u2500\u2500 eventemitter3@0.1.6\n\u251c\u2500\u2500 rimraf@2.2.8\n\u251c\u2500\u2500 querystring@0.2.0\n\u251c\u2500\u2500 debug@2.1.0 (ms@0.6.2)\n\u251c\u2500\u2500 cookie-parser@1.3.3 (cookie-signature@1.0.5)\n\u251c\u2500\u2500 mobile-detect@1.3.0\n\u251c\u2500\u2500 cls-q@1.1.0 (shimmer@1.1.0)\n\u251c\u2500\u2500 mkdirp@0.5.0 (minimist@0.0.8)\n\u251c\u2500\u2500 routr@0.1.3 (path-to-regexp@1.2.1)\n\u251c\u2500\u2500 continuation-local-storage@3.1.4 (emitter-listener@1.0.1, async-listener@0.5.6)\n\u251c\u2500\u2500 winston@0.8.3 (cycle@1.0.3, async@0.2.10, stack-trace@0.0.9, eyes@0.1.8, isstream@0.1.2, colors@0.6.2, pkginfo@0.3.1)\n\u251c\u2500\u2500 body-parser@1.9.2 (media-typer@0.3.0, raw-body@1.3.0, bytes@1.0.0, depd@1.0.1, qs@2.3.2, on-finished@2.1.1, iconv-lite@0.4.4, type-is@1.5.7)\n\u251c\u2500\u2500 express@4.13.4 (escape-html@1.0.3, array-flatten@1.1.1, cookie-signature@1.0.6, utils-merge@1.0.0, methods@1.1.2, content-type@1.0.1, vary@1.0.1, merge-descriptors@1.0.1, parseurl@1.3.1, path-to-regexp@0.1.7, serve-static@1.10.2, cookie@0.1.5, content-disposition@0.5.1, range-parser@1.0.3, fresh@0.3.0, etag@1.7.0, depd@1.1.0, qs@4.0.0, on-finished@2.3.0, finalhandler@0.4.1, debug@2.2.0, proxy-addr@1.0.10, type-is@1.6.11, send@0.13.1, accepts@1.2.13)\n\u251c\u2500\u2500 express-state@1.2.0\n\u251c\u2500\u2500 bundle-loader@0.5.2 (loader-utils@0.2.12)\n\u2514\u2500\u2500 lodash@3.10.1\nbabel-plugin-transform-runtime@6.5.2 node_modules/babel-plugin-transform-runtime\n\u2514\u2500\u2500 babel-runtime@5.8.35 (core-js@1.2.6)\nreact@0.14.7 node_modules/react\n\u251c\u2500\u2500 envify@3.4.0 (through@2.3.8, jstransform@10.1.0)\n\u2514\u2500\u2500 fbjs@0.6.1 (whatwg-fetch@0.9.0, ua-parser-js@0.7.10, loose-envify@1.1.0, promise@7.1.1, core-js@1.2.6)\nbabel-preset-react@6.5.0 node_modules/babel-preset-react\n\u251c\u2500\u2500 babel-plugin-transform-flow-strip-types@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-syntax-flow@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-react-display-name@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-syntax-jsx@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-react-jsx-source@6.5.0 (babel-runtime@5.8.35)\n\u2514\u2500\u2500 babel-plugin-transform-react-jsx@6.5.2 (babel-helper-builder-react-jsx@6.5.0, babel-runtime@5.8.35)\nbabel-preset-es2015@6.5.0 node_modules/babel-preset-es2015\n\u251c\u2500\u2500 babel-plugin-transform-es2015-spread@6.5.2 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-arrow-functions@6.5.2 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-literals@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-for-of@6.5.2 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-destructuring@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-check-es2015-constants@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-typeof-symbol@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-template-literals@6.5.2 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-block-scoped-functions@6.5.0 (babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-object-super@6.5.0 (babel-helper-replace-supers@6.5.0, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-shorthand-properties@6.5.0 (babel-types@6.5.2, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-sticky-regex@6.5.0 (babel-helper-regex@6.5.0, babel-types@6.5.2, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-unicode-regex@6.5.0 (regexpu-core@1.0.0, babel-helper-regex@6.5.0, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-function-name@6.5.0 (babel-types@6.5.2, babel-helper-function-name@6.5.0, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-parameters@6.5.0 (babel-helper-get-function-arity@6.5.0, babel-helper-call-delegate@6.5.0, babel-template@6.5.0, babel-types@6.5.2, babel-traverse@6.5.0, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-block-scoping@6.5.0 (babel-template@6.5.0, babel-types@6.5.2, babel-traverse@6.5.0, lodash@3.10.1, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-computed-properties@6.5.2 (babel-helper-define-map@6.5.0, babel-template@6.5.0, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-classes@6.5.2 (babel-helper-optimise-call-expression@6.5.0, babel-helper-replace-supers@6.5.0, babel-messages@6.5.0, babel-helper-function-name@6.5.0, babel-helper-define-map@6.5.0, babel-template@6.5.0, babel-types@6.5.2, babel-traverse@6.5.0, babel-runtime@5.8.35)\n\u251c\u2500\u2500 babel-plugin-transform-es2015-modules-commonjs@6.5.2 (babel-plugin-transform-strict-mode@6.5.2, babel-template@6.5.0, babel-types@6.5.2, babel-runtime@5.8.35)\n\u2514\u2500\u2500 babel-plugin-transform-regenerator@6.5.2 (babel-plugin-syntax-async-functions@6.5.0, private@0.1.6, babylon@6.5.2, babel-types@6.5.2, babel-traverse@6.5.0, babel-core@6.5.2, babel-runtime@5.8.35)\nreact-server-cli@0.0.21 node_modules/react-server-cli\n\u251c\u2500\u2500 null-loader@0.1.1\n\u251c\u2500\u2500 q@1.4.1\n\u251c\u2500\u2500 mkdirp@0.5.1 (minimist@0.0.8)\n\u251c\u2500\u2500 compression@1.5.2 (bytes@2.1.0, vary@1.0.1, on-headers@1.0.1, compressible@2.0.7, debug@2.2.0, accepts@1.2.13)\n\u251c\u2500\u2500 react-hot-loader@1.3.0 (react-hot-api@0.4.7, source-map@0.4.4)\n\u251c\u2500\u2500 express@4.13.4 (escape-html@1.0.3, array-flatten@1.1.1, cookie-signature@1.0.6, utils-merge@1.0.0, methods@1.1.2, vary@1.0.1, merge-descriptors@1.0.1, content-type@1.0.1, parseurl@1.3.1, fresh@0.3.0, cookie@0.1.5, content-disposition@0.5.1, range-parser@1.0.3, etag@1.7.0, path-to-regexp@0.1.7, serve-static@1.10.2, depd@1.1.0, qs@4.0.0, on-finished@2.3.0, finalhandler@0.4.1, debug@2.2.0, proxy-addr@1.0.10, accepts@1.2.13, send@0.13.1, type-is@1.6.11)\n\u251c\u2500\u2500 yargs@3.15.0 (camelcase@1.2.1, window-size@0.1.4, decamelize@1.1.2, cliui@2.1.0)\n\u251c\u2500\u2500 extract-text-webpack-plugin@0.8.2 (async@1.5.2, loader-utils@0.2.12)\n\u251c\u2500\u2500 style-loader@0.12.4 (loader-utils@0.2.12)\n\u251c\u2500\u2500 babel-loader@6.2.3 (object-assign@4.0.1, loader-utils@0.2.12)\n\u251c\u2500\u2500 webpack-dev-server@1.12.1 (connect-history-api-fallback@1.1.0, stream-cache@0.0.2, supports-color@3.1.2, strip-ansi@3.0.1, http-proxy@1.13.2, optimist@0.6.1, webpack-dev-middleware@1.5.1, socket.io@1.4.5, socket.io-client@1.4.5, serve-index@1.7.3)\n\u251c\u2500\u2500 node-libs-browser@0.5.3 (https-browserify@0.0.0, tty-browserify@0.0.0, constants-browserify@0.0.1, path-browserify@0.0.0, punycode@1.4.0, string_decoder@0.10.31, os-browserify@0.1.2, process@0.11.2, assert@1.3.0, domain-browser@1.1.7, querystring-es3@0.2.1, timers-browserify@1.4.2, stream-browserify@1.0.0, events@1.1.0, vm-browserify@0.0.4, readable-stream@1.1.13, util@0.10.3, console-browserify@1.1.0, url@0.10.3, http-browserify@1.7.0, buffer@3.6.0, browserify-zlib@0.1.4, crypto-browserify@3.2.8)\n\u251c\u2500\u2500 css-loader@0.15.6 (postcss-modules-scope@0.0.8, postcss-modules-extract-imports@0.0.5, postcss-modules-local-by-default@0.0.11, css-selector-tokenizer@0.5.4, source-list-map@0.1.5, postcss@4.1.16, loader-utils@0.2.12, cssnano@2.6.1)\n\u251c\u2500\u2500 babel-runtime@6.5.0 (core-js@1.2.6)\n\u251c\u2500\u2500 babel-core@6.5.2 (slash@1.0.0, babel-messages@6.5.0, babel-template@6.5.0, shebang-regex@1.0.0, path-exists@1.0.0, path-is-absolute@1.0.0, babel-helpers@6.5.0, private@0.1.6, babylon@6.5.2, convert-source-map@1.1.3, debug@2.2.0, source-map@0.5.3, babel-types@6.5.2, minimatch@2.0.10, babel-code-frame@6.5.0, babel-generator@6.5.0, babel-traverse@6.5.0, json5@0.4.0, lodash@3.10.1, babel-register@6.5.2, babel-runtime@5.8.35)\n\u2514\u2500\u2500 webpack@1.12.14 (interpret@0.6.6, tapable@0.1.10, async@1.5.2, clone@1.0.2, esprima@2.7.2, supports-color@3.1.2, enhanced-resolve@0.9.1, optimist@0.6.1, memory-fs@0.3.0, webpack-core@0.6.8, loader-utils@0.2.12, uglify-js@2.6.2, watchpack@0.2.9)\ndougwade ~/example-reactserver \u2039master\u203a \u00bb npm start\n\nexample-reactserver@0.0.1 start /Users/doug.wade/example-reactserver\nreact-server-cli\n\nmodule.js:327\n    throw err;\n    ^\nError: Cannot find module 'react-server'\n    at Function.Module._resolveFilename (module.js:325:15)\n    at Function.Module._load (module.js:276:25)\n    at Module.require (module.js:353:17)\n    at require (internal/module.js:12:17)\n    at Object. (index.js:21:15)\n    at Module._compile (module.js:409:26)\n    at loader (/Users/doug.wade/react-server/packages/react-server-cli/node_modules/babel-register/lib/node.js:128:5)\n    at Object.require.extensions.(anonymous function) [as .js] (/Users/doug.wade/react-server/packages/react-server-cli/node_modules/babel-register/lib/node.js:138:7)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\nnpm ERR! Darwin 15.0.0\nnpm ERR! argv \"/usr/local/bin/iojs\" \"/usr/local/bin/npm\" \"start\"\nnpm ERR! node v4.3.1\nnpm ERR! npm  v2.14.12\nnpm ERR! code ELIFECYCLE\nnpm ERR! example-reactserver@0.0.1 start: react-server-cli\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the example-reactserver@0.0.1 start script 'react-server-cli'.\nnpm ERR! This is most likely a problem with the example-reactserver package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     react-server-cli\nnpm ERR! You can get their info via:\nnpm ERR!     npm owner ls example-reactserver\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /Users/doug.wade/example-reactserver/npm-debug.log\ndougwade ~/example-reactserver \u2039master*\u203a \u00bb ./node_modules/react-server-cli/bin/react-server-cli                                                                                                                                           1 \u21b5\n2016-02-23T21:27:02.764Z - warning: [react-server-cli/index.js] PRODUCTION WARNING: the following current settings are discouraged in production environments. (If you are developing, carry on!):\n2016-02-23T21:27:02.765Z - warning: [react-server-cli/index.js] -- Hot reload is enabled. Pass --hot=false, pass --production, or set NODE_ENV=production to turn off.\n2016-02-23T21:27:02.766Z - warning: [react-server-cli/index.js] -- Minification is disabled. Pass --minify, pass --production, or set NODE_ENV=production to turn on.\n2016-02-23T21:27:02.766Z - warning: [react-server-cli/index.js] -- NODE_ENV is not set to \"production\".\n2016-02-23T21:27:05.399Z - notice: [react-server-cli/startServer.js] Starting servers...\n2016-02-23T21:27:05.399Z - info: [react-server-cli/startServer.js] Starting hot reload JavaScript server...\n2016-02-23T21:27:05.425Z - info: [react-server-cli/startServer.js] Starting HTML server...\n2016-02-23T21:27:05.480Z - info: [react-server-cli/startServer.js] Started HTML server on port 3000\n2016-02-23T21:27:05.592Z - info: [react-server-cli/startServer.js] Started hot reload JavaScript server on port 3001\n2016-02-23T21:27:05.592Z - notice: [react-server-cli/startServer.js] Ready for requests on port 3000.\nHash: 22a0d3906fbc6214957a\nVersion: webpack 1.12.14\nTime: 108ms\n               Asset     Size  Chunks       Chunk Names\nHelloWorld.bundle.js  22.3 kB       0       HelloWorld\nchunk    {0} HelloWorld.bundle.js (HelloWorld) 64 bytes [rendered]\n    [0] multi HelloWorld 64 bytes {0} [built] [4 errors]\nERROR in multi HelloWorld\nModule not found: Error: Cannot resolve module 'webpack-dev-server/client' in /Users/doug.wade/example-reactserver\n @ multi HelloWorld\nERROR in multi HelloWorld\nModule not found: Error: Cannot resolve module 'webpack/hot/only-dev-server' in /Users/doug.wade/example-reactserver\n @ multi HelloWorld\nERROR in multi HelloWorld\nModule not found: Error: Cannot resolve module 'react-hot' in /Users/doug.wade/example-reactserver\n @ multi HelloWorld\nERROR in multi HelloWorld\nModule not found: Error: Cannot resolve module 'react-hot' in /Users/doug.wade/example-reactserver\n @ multi HelloWorld\n```\nAnd I still suspect its not sharing its react-server instance with the example-reactserver\n. @aickin I'd much prefer to generate a gulpfile that handles transpilation, and then generate one with one of: coffeescript, clojurescript, babel, or no transpiler based on a response to an inquirer question.  Then, clients who want to use SML or F# or whatever can swap out the transpilation step in the gulpfile with their transpilation step.  See, for example, generator-koa-angular\n. Declined in favor of https://github.com/redfin/react-server/pull/90\n. :+1: \n. To allow using different tokens in client code, rather than LOGGER?  And we should def keep the current values as defaults so that you can still .pipe(tagger())\n. This is now possible with the babel plugin, but I think we should leave the issue until we support it in the gulp plugin as well.\n. Maybe we should close this issue in favor of an omni \"remove all instances of the word triton\" issue?\n. Finally made it through.  re: Is it right to have a bin directory with an executable file? -- iiuc, yes.\nI had some thoughts, but my feeling is let's merge this and sort them out later. \n. iiuc, owner can be an array (https://docs.npmjs.com/cli/owner).  We may instead want to create a team and grant permissions to team members, rather than making everyone an owner (https://docs.npmjs.com/cli/access and https://docs.npmjs.com/cli/team).\n. I swung by the npm irc channel, and they seem to recommend setting up an organization to manage our permissions.  @gigabo -- wanna be the super-admin (https://docs.npmjs.com/orgs/roles#super-admin) ?\n. :+1: \n. seems reasonable to me -- I don't think we want anyone other than the CI bot to publish.\n. ed: ideally, no-one other than the CI bot would publish.\n. This was resolved in https://github.com/redfin/react-server/pull/113, imo.  Here's my npm test output; seems pretty reasonable to me.\n. I'm struggling to understand the scope of react-server.  As far as I can tell, we seem to believe that we are going to manage all of the complexity of the build for every client of react-server, which I think is unrealistic, as it requires new clients that want to do something we haven't considered.  Consider a client that wants to set up a react-server instance with browserify, clojurescript, and support a dev, test, staging, perf testing, and multiple prod environments (say, for instance, they would like to have different build for China vs the US).  As I understand the proposal, that client would need to open a pr to what is you are proposing would be named react-server to add browserify support, clojurescript support, jshint for linting, and to change the existing way of handling environments to allow them to use react-server.  As I understand it, you'd either fork react-server and use that (which would be frustrating when you want to get new features, since you'd have to rebase onto/merge redfin/react-server), or you'd use react-server-core and lose any other configuration that is exported by the proposed react-server solution.  \nThere's also a question of support -- in our use of react-server, we've had to spend a lot of time debugging webpack errors.  If we hide all the complexity of webpack in the react-server-cli, when there is an error (which although I would love to guarantee would never happen, I think realistically will), then rather than using the existing webpack documentation, clients would have to rely solely on the code from react-server-cli to figure out the source of their failure, fork the cli, build and deploy with the fork, and then submit the fork upstream.\nAlso, since we Babelify the code for clients, how would clients opt in or out of language features?  Do they simply have to accept the variant of es6 exported by react-server?  Or what if they want a different set of webpack plugins?  Or a different set of eslint settings?  Do we plan on consuming the config files of every possible bundler, transpiler, linter, etc as part of our api?\n. I've been thinking about this one, and I think we can do better.  I'd like to keep react-server-core in react-server, and I'd like for our packages to be more granular, if possible.  What about if we split out three modules\nreact-server-config\nreact-server-compiler\nreact-server-runner\nreact-server-runner would start/run React Server instances, and would mostly just be startServer.js.  I imagine that eventually this would contain our clustering module.\nreact-server-config would handle .reactserverrc, and provide a way to merge its options with the default options (which it provides) and override options (like from the cli), and would contain findOptionsInFiles, defaultOptions, and mergeOptions\nreact-server-compiler would do babelification and run the module tagger, and might (?) include a watch mode.  It would contain compileClient and the middleware templates.\nThoughts?\n. :+1: \n. needz moar badges -- maybe codeclimate? coveralls? powered by hipsters?\n. @gigabo that means don't update the dependencies, yeah?\n. :+1: \n. The number of specs seems to change too?\n```\ndougwade packages/react-server \u2039better-readme\u203a \u00bb gulp build && gulp test\n[17:35:18] Warning: gulp version mismatch:\n[17:35:18] Global gulp is 3.9.0\n[17:35:18] Local gulp is 3.8.10\n[17:35:19] Using gulpfile ~/code/react-server/packages/react-server/gulpfile.js\n[17:35:19] Starting 'compileClient'...\n[17:35:19] Starting 'compileServer'...\n[17:35:20] Finished 'compileClient' after 951 ms\n[17:35:20] Finished 'compileServer' after 941 ms\n[17:35:20] Starting 'compile'...\n[17:35:20] Finished 'compile' after 14 \u03bcs\n[17:35:20] Starting 'build'...\n[17:35:20] Finished 'build' after 4.85 \u03bcs\n[17:35:20] Warning: gulp version mismatch:\n[17:35:20] Global gulp is 3.9.0\n[17:35:20] Local gulp is 3.8.10\n[17:35:21] Using gulpfile ~/code/react-server/packages/react-server/gulpfile.js\n[17:35:21] Starting 'compileServer'...\n[17:35:21] Starting 'compileClient'...\n[17:35:21] Finished 'compileClient' after 102 ms\n[17:35:21] Finished 'compileServer' after 113 ms\n[17:35:21] Starting 'test'...\n.................................(node) OutgoingMessage.flush is deprecated. Use flushHeaders instead.\n...2016-02-27T01:35:26.302Z - error: [react-server.core.renderMiddleware] Error in renderPage chain message=Timed out rendering., timeWaited=196, elements=[P]\n...[object Object]\n..2016-02-27T01:35:29.287Z - error: [react-server.core.context.Navigator] Error while handling route message=died, stack=Error: died\n    at InternalServerErrorException.handleRoute (/Users/doug.wade/code/react-server/packages/react-server/target/server/tests/integration/internalServerError/pages/InternalServerErrorException.js:26:10)\n    at /Users/doug.wade/code/react-server/packages/react-server/target/server/util/PageUtil.js:358:25\n    at /Users/doug.wade/code/react-server/packages/react-server/target/server/util/PageUtil.js:350:15\n    at /Users/doug.wade/code/react-server/packages/react-server/node_modules/continuation-local-storage/context.js:74:17\n    at _fulfilled (/Users/doug.wade/code/react-server/packages/react-server/node_modules/q/q.js:834:54)\n    at self.promiseDispatch.done (/Users/doug.wade/code/react-server/packages/react-server/node_modules/q/q.js:863:30)\n    at Promise.promise.promiseDispatch (/Users/doug.wade/code/react-server/packages/react-server/node_modules/q/q.js:796:13)\n    at /Users/doug.wade/code/react-server/packages/react-server/node_modules/q/q.js:857:14\n    at runSingle (/Users/doug.wade/code/react-server/packages/react-server/node_modules/q/q.js:137:13)\n    at flush (/Users/doug.wade/code/react-server/packages/react-server/node_modules/q/q.js:125:13)\n    at /Users/doug.wade/code/react-server/packages/react-server/node_modules/async-listener/glue.js:188:31\n    at nextTickCallbackWith0Args (node.js:415:9)\n    at process._tickCallback (node.js:344:13)\n[object Object]\n.2016-02-27T01:35:29.293Z - error: [react-server.core.context.Navigator] Error while handling route rejected\n[object Object]\n.............................................................................................................\n151 specs, 0 failures\nFinished in 0 seconds\n[17:36:00] Finished 'test' after 39 s\n```\n. :+1: \n. @DanielFGray This issue is getting pretty large; would you mind filing the Koa issue on its own?\n. This issue is too big for my puny brain; I'm going to split it into individual issues.\n. Talked with @bartkusa offline and ran some WPT tests against our details pages (specifically against this test page ) and got the following results from WebPageTest\nWithout preload\nPerformance Results (Median Run)\nDocument Complete   Fully Loaded\nLoad Time   First Byte  Start Render    User Time   Speed Index DOM Elements    Time    Requests    Bytes In    Time    Requests    Bytes In\nFirst View (Run 10) 10.628s 0.306s  1.894s  10.233s 2038    3997    10.628s 157 4,096 KB    11.185s 164 4,119 KB\nWith preload\nPerformance Results (Median Run)\nDocument Complete   Fully Loaded\nLoad Time   First Byte  Start Render    User Time   Speed Index DOM Elements    Time    Requests    Bytes In    Time    Requests    Bytes In\nFirst View (Run 8)  10.401s 0.330s  1.594s  9.825s  2099    4094    10.401s 157 4,102 KB    14.859s 165 4,125 KB\nPlot Full Results \nWhich seems to imply that we're gonna improve our page load by 220 millis.\n. lgtm :+1: \n. @gigabo We had two prs recently that failed with linting errors https://github.com/redfin/react-server/pull/598 and https://github.com/redfin/react-server/pull/606.  Do you think having the eslint bot would have helped?\nAlso, as part of https://github.com/redfin/react-server/issues/605, what do you think about adding integration for the snyk bot?\n. lgtm :+1: \n. dougwade code/city-story \u2039master*\u203a \u00bb npm config get registry\nhttps://registry.npmjs.org/\ndougwade code/city-story \u2039master*\u203a \u00bb npm view react-server dist-tags.latest\n0.1.4\n?\n. I don't think this needs to be an either/or question.  I'd like to see a setup where during local development we run the integration tests against a headless browser, and on the CI server we run against Selenium in real browsers.  This allows local development to continue to be as fast or faster, while improving our safety on PRs.\n. iiuc, selenium automates any browser that has a driver, headless or otherwise, which means we could run our selenium tests on phantomjs locally, and on real browsers for ci.  I think the Phantom driver would work okay, though we could try to HtmlUnit driver or EventFiringWebDriver, which both seem headless.\nAt second reading, my first response was needlessly confusing.  What I meant was: I think moving to Selenium is a good idea because we could still use headless browsers to do local testing, which should be relatively quick.  \nI also believe that we can make setup pretty simple, using webdriver-manager and phantom-prebuilt and selenium-webdriver, such that you wouldn't have to leave npm and gulp to do your testing/setup.\n. @drewpc its easy to set up travis to track your remote;  assuming @aickin doesn't touch this in the next couple of days, I'm down for just closing it -- it's unclear whether the WIP is worth the merge conflicts.\n. \ud83d\udc4d \n. \ud83d\udc4d \n. I dig \n. I vote \n\n. fixed in #133 \n. Other keywords: express framework middleware?\n. The version we have (1.6.9) actually contains the fix: https://github.com/socketio/engine.io-client/commit/2a7a011932094d4970dc68abd32e78265495a621.  Looks like https://github.com/socketio/engine.io-client/issues/468 can be closed. I opened https://github.com/nodesecurity/nsp/issues/105; do we want to add .nsprcs with exceptions until its fixed?\n. checks out: https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname (which is where the location docs link to)\n\ud83d\udc4d \n. lgtm \ud83d\udc4d \n. \ud83d\udc4d \n. lgtm\nhttp://i.imgur.com/vqD8jZh.gif\n. \ud83d\udc4d \n. I dunno, both stage 0 proposals look pretty sweet: http://babeljs.io/docs/plugins/transform-function-bind/ http://babeljs.io/docs/plugins/transform-do-expressions/\n. :+1:\n. @gigabo you mean the \"Key Concepts\" portion?\n. I'll rescue \"design principles\" in a separate pr.  lgtm \ud83d\udc4d \n. I did both, just to be safe.\n. So, @gigabo and I talked about this offline, and cleaning is different than our other build targets in that it must be called before a module is published.  We thought a little bit about adding a clean target the the root package.json that was called in a prepublish step for the monorepo, but it would required a lot of gymnastics to get it to work, and that (like gulp) devs would have to have rimraf installed globally to use lerna instead of npm to do their builds, so we opted to keep distributed rimraf dependencies.\n. I'm still working on this, just blocked on https://github.com/redfin/react-server/issues/210 for a quick sec\n. The travis build failed with ECONNREFUSED 127.0.0.1:8769, which is weird.  I restarted it with the hopes that it is transient (since it seems unrelated to my changes).\n. @gigabo if you know of any, let me know; I'm more than happy to add them to the doc before merging/announcing.\n. I got that transient An error occurred running zombie tests TypeError: connect ECONNREFUSED 127.0.0.1:8769 again; kicking the build.\n. rolled into #160 \n. coupla nits, otherwise lgtm.  Thanks!\n. \ud83d\udc4d \n. See the previous pr to add a yeoman generator for more information; generator-reactserver was the name we decided on last time, since generator-react-server is already taken.\n. @StevenIseki From npm support:\nnpm owner add douglas.wade generator-react-server\nI did the following\n\u00bb npm owner add steveniseki generator-reactserver\n+ steveniseki (generator-reactserver)\nso I think you should be good to go to publish your generator to our name\n. Got an exit status 1 error from data-bundle-cache; kicking the build and hoping for the best\n. I got that transient An error occurred running zombie tests TypeError: connect ECONNREFUSED 127.0.0.1:8770 error again; that's three separate branches, so I've filed https://github.com/redfin/react-server/issues/175.  I also kicked the build again\n. oops \ud83d\udc11 \nlgtm \ud83d\udc4d \n. \ud83d\udc4d \n. \ud83d\udc4d \n. @gigabo didn't you fix this in https://github.com/redfin/react-server/pull/456 ?\n. \ud83d\udc4d \n. \ud83d\udc4d  thanks!\n. \ud83d\udc4d \n. http://yeoman.io/authoring/dependencies.html\ngenerator.bowerInstall() -- install bower deps\ngenerator.npmInstall() -- install npm deps\ngenerator.installDependencies() -- install bower + npm deps\n. We spent some time talking about pm2 in slack today and discovered that you should use pm2 start npm --watch --ignore-watch=\"__clientTemp\" -- start, given \"scripts\": { \"start\": \"react-server start\"} in your package.json, which seems like worth adding to this doc (once we have it \ud83d\ude00 )\n. This was fixed in #777; closing. @gigabo I think you fixed this in https://github.com/redfin/react-server/pull/484\n```\ndougwade ~ \u00bb react-server --help\nUsage: react-server  [options]\nCommands:\n  start     Start the server\n  compile   Compile static assets\n  init      Initialize a React Server site\n  add-page  Add a page to an existing site\nOptions:\n  --routes-file        The routes file to load. Default is 'routes.js'.\n  -p, --port           Port to start listening for react-server. Default is 3000\n                       .\n  --host               Hostname to start listening for react-server     [string]\n  --js-port            Port to start listening for react-server's JavaScript.\n                       Default is 3001.\n  --https              If true, the server will start up using https with a self\n                       -signed certificate. Note that browsers do not trust self\n                       -signed certificates by default, so you will have to\n                       click through some warning screens. This is a quick and\n                       dirty way to test HTTPS, but it has some limitations and\n                       should never be used in production. Requires OpenSSL to\n                       be installed. Default is false.                 [boolean]\n  --https-key          Start the server using HTTPS with this private key file\n                       in PEM format. Requires https-cert to be set as well.\n                       Default is none.                                 [string]\n  --https-cert         Start the server using HTTPS with this cert file in PEM\n                       format. Requires https-key to be set as well. Default is\n                       none.                                            [string]\n  --https-ca           Start the server using HTTPS with this certificate\n                       authority file in PEM format. Also requires https-key and\n                       https-cert to start the server. Default is none.\n                                                                        [string]\n  --https-pfx          Start the server using HTTPS with this file containing\n                       the private key, certificate and CA certs of the server\n                       in PFX or PKCS12 format. Mutually exclusive with https-\n                       key, https-cert, and https-ca. Default is none.  [string]\n  --https-passphrase   A passphrase for the private key or pfx. Requires https-\n                       key or https-pfx to be set. Default is none.     [string]\n  -h, --hot            Load the app so that it can be hot reloaded in the\n                       browser. Default is false in production mode, true\n                       otherwise.                                      [boolean]\n  -m, --minify         Optimize client JS when option is present. Takes a bit\n                       longer to compile. Default is true in production mode,\n                       false otherwise.                                [boolean]\n  --long-term-caching  Use long-term cache headers for the static JS & CSS files\n                       . Default is true in production mode, false otherwise.\n                                                                       [boolean]\n  --log-level          Set the severity level for the logs being reported.\n                       Values are, in ascending order of severity: 'debug', '\n                       info', 'notice', 'warning', 'error', 'critical', 'alert\n                       ', 'emergency'. Default is 'notice' in production mode, '\n                       debug' otherwise.                                [string]\n  --timing-log-level   Set the severity level for the timing logs. Values are,\n                       in ascending order of verbosity: 'none', 'slow', 'fine\n                       ', 'fast. Default is 'none' in production mode, 'fast'\n                       otherwise.                                       [string]\n  --gauge-log-level    Set the severity level for the gauge logs. Values are, in\n                       ascending order of severity: 'no', 'hi', 'lo', 'ok'.\n                       Default is 'no' in production mode, 'ok' otherwise.\n                                                                        [string]\n  --compile-only       Compile the client JavaScript only, and don't start any\n                       servers. This is what you want to do if you are building\n                       the client JavaScript to be hosted on a CDN. Unless you\n                       have a very specific reason, it's almost alway a good\n                       idea to only do this in production mode. Defaults to\n                       false.                                          [boolean]\n  --js-url             A URL base for the pre-compiled client JavaScript.\n                       Setting a value for jsurl means that react-server-cli\n                       will not compile the client JavaScript at all, and it\n                       will not serve up any JavaScript. Obviously, this means\n                       that --jsurl overrides all of the options related to\n                       JavaScript compilation: --hot, --minify, and --\n                       bundleperroute.                                  [string]\n  --stats              Output webpack stats to __clientTemp/build/stats.json.\n                       Recommended for use with webpack-bundle-size-analyzer.\n                                                      [boolean] [default: false]\n  -?, --help           Show help                                       [boolean]\n```\n. Even if it doesn't repro the behavior, the change looks good to me \n\ud83d\udc4d \n. \ud83d\udc4d  I dig all this test infrastructure!\n. @withinboredom This is pretty awesome!  As @gigabo notes, there are still some things we'll want you to do before you merge\n1) I don't match files with globs currently, even though I should.  For now, you'll need to enumerate the new files in one of the two lists of files that are operated on by the generator (one is for dotfiles that are used by git and babel for configuration, which I preface with _ rather than . to prevent them interacting with the monorepo; you may want to add your docker config there to make it easier to develop on Docker, though I'm not sure; if there isn't a risk of interaction, there is also one for files that are not renamed.\n2) Not all clients will want to include a Docker container with their new react-server project, so we should prompt them (Yeoman uses Inquirer for prompting ), and only generate the Docker config if the user asks for it (my first intuition is to default to no Docker config, personally, since we push the Yeoman generator as an easy way to get started, and the Docker config makes react-server look bigger and scarier to a new developer; honestly I should put the linter behind an Inquirer prompt for the same reason)\n. @withinboredom The bug was in the tests, not in your changes \ud83d\udc11 .  #207 should unblock you\n. @withinboredom I think its failing with a (well-obscured) linter failure; I've added a line comment\n. lgtm \ud83d\udc4d \n@gigabo anything else before we merge this?\n. I love Slack, and I'm totally in favor of moving to it, but I think we need a solution that has open registration, or a way for new users to \"let themselves in\" to the chat, and iirc, Slack doesn't have that.  How do new users that want to ask a quick question get access to our Slack channel? (ed: I just joined the lerna slack channel; that flow seems pretty reasonable; how do we set it up?)\n. Seems like we'd have to use something like commitizen to enforce commit messages to make conventional-changelog work.\nJust searching about for a quick second turns up this ?\n. see https://travis-ci.org/redfin/react-server/builds/132703974\nError: Command failed: npm install lodash@^4.8.2 q@^1.4.1 react@~0.14.2 react-dom@~0.14.2 react-server@../react-server react-server-cli@../react-server-cli rimraf@^2.5.2 superagent@1.2.0\n(node:3788) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! addLocal Could not install /home/travis/build/redfin/react-server/packages/react-server\n(node:3871) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.0/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.0/bin/npm\" \"install\" \"lodash@^4.8.2\" \"q@^1.4.1\" \"react@~0.14.2\" \"react-dom@~0.14.2\" \"react-server@../react-server\" \"react-server-cli@../react-server-cli\" \"rimraf@^2.5.2\" \"superagent@1.2.0\"\nnpm ERR! node v6.2.0\nnpm ERR! npm  v3.8.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server@0.2.12 prepublish: `npm run clean; gulp build`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the react-server@0.2.12 prepublish script 'npm run clean; gulp build'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-server package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run clean; gulp build\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs react-server\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls react-server\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/packages/react-server-integration-tests/npm-debug.log\n    at ChildProcess.exithandler (child_process.js:202:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.0/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.0/bin/npm\" \"run\" \"bootstrap\"\nnpm ERR! node v6.2.0\nnpm ERR! npm  v3.8.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! @ bootstrap: `lerna bootstrap`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ bootstrap script 'lerna bootstrap'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     lerna bootstrap\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs \nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/npm-debug.log\nThe command \"npm run bootstrap\" failed and exited with 1 during .\n. This only applies to 0.2.7; use 0.2.6 instead\n. Here's what it looks like\n\n. https://travis-ci.org/redfin/react-server/builds/132744187\nnpm ERR! node v6.2.0\nnpm ERR! npm  v3.8.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server@0.2.12 prepublish: `npm run clean; gulp build`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the react-server@0.2.12 prepublish script 'npm run clean; gulp build'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-server package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run clean; gulp build\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs react-server\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls react-server\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/packages/react-server-integration-tests/npm-debug.log\n    at ChildProcess.exithandler (child_process.js:202:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.0/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.0/bin/npm\" \"run\" \"bootstrap\"\nnpm ERR! node v6.2.0\nnpm ERR! npm  v3.8.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! @ bootstrap: `npm i; lerna bootstrap`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ bootstrap script 'npm i; lerna bootstrap'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm i; lerna bootstrap\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs \nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/npm-debug.log\nThe command \"npm run bootstrap\" failed and exited with 1 during .\nYour build has been stopped.\n. https://travis-ci.org/redfin/react-server/builds/132732945\nErrored while running npm script 'test' in 'react-server-cli'\nError: Command failed: npm run test \n(node:4128) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.0/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.0/bin/npm\" \"run\" \"test\"\nnpm ERR! node v6.2.0\nnpm ERR! npm  v3.8.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server-cli@0.2.12 test: `gulp test`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the react-server-cli@0.2.12 test script 'gulp test'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-server-cli package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     gulp test\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs react-server-cli\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls react-server-cli\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/packages/react-server-cli/npm-debug.log\n    at ChildProcess.exithandler (child_process.js:202:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nErrored while running RunCommand.execute\nError: Command failed: npm run test \n(node:4128) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.0/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.0/bin/npm\" \"run\" \"test\"\nnpm ERR! node v6.2.0\nnpm ERR! npm  v3.8.9\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server-cli@0.2.12 test: `gulp test`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the react-server-cli@0.2.12 test script 'gulp test'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-server-cli package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     gulp test\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs react-server-cli\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls react-server-cli\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/packages/react-server-cli/npm-debug.log\n    at ChildProcess.exithandler (child_process.js:202:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nnpm ERR! Test failed.  See above for more details.\nThe command \"npm test\" exited with 1.\nDone. Your build exited with 1.\n. @gigabo I can't find anything in the lerna docs or site about a lerna prepublish; do I just add a scripts hash to lerna.json?  Does it support the full npm lifecycle, like postinstall &c?\n. \ud83d\udc4d  awesome\n. lgtm \ud83d\udc4d \n. \ud83d\udc4d \n. gigabo The page loads in between 2.17s and 4.74s in my testing, which is slower than the recommended 2 second page load time.  We could consider adding a map to this using something free and key-less like leaflet or open layers or open street map or something, but I don't know anything about those apis, and I thought this was a useful enough addition to our examples to justify merging without needing a map as well.\n. Listing page\n\nDetails page\n\n. @gigabo the revision I just pushed should resolve your npm i problem.\n. I did the quick 'n' dirty \u2122\ufe0f thing and pulled reuseFrame, but I'm going to work on adding a rawResponse page as a passthrough data endpoint (edited: my initial response didn't actually make any sense)\n. I added the rawResponse endpoint, migrated to react-server 0.3.1, and cleaned up the props.  I think this should be good to merge.\n. I uh... wat\n\n. Not in incognito mode either?!?\n\n. weird. huh.\n. \ud83d\udd25 \ud83d\udd25 \ud83d\udd25 \n\ud83d\udc4d \n. How does the CHANGELOG generation work?\n. \ud83d\udc4d \n. I get them by require-ing them: https://github.com/careylin/ui-kit/blob/master/www/index.js#L3\n. Based on https://github.com/joshbuchea/HEAD\n. I poked at this for a while today, and I wanted to put my findings somewhere.  \nThe change in react-server-cli is actually fairly straightforward; i've attached it at the end of this comment.  The real fun comes in when you get into renderMiddleware.  React Server uses express-state to expose the React Server cache to the client side, which seems to be replaced with ctx.state in koa, but since koa expects you to use this to access ctx where express-state has you call res.expose(), the amount of refactoring required is pretty large.  Unfortunately, its hard to do because the server just never starts, rather than throwing, so identifying the next step and taking it is pretty hard; we might want to look into our error handling in renderMiddleware to make sure we aren't swallowing any before digging further into this.  The request object is already wrapped with an adapter, though, so adding a new wrapper around a koa request that has the same api shouldn't be too hard.  I think we'll need to make a similar adapter for the servers themselves; even just to even out the different between express's \nconst httpServer = httpsOptions ? https.createServer(httpsOptions, server) : http.createServer(server);\nand koa's\nconst httpServer = httpsOptions ? https.createServer(httpsOptions, server.callback()) : http.createServer(server.callback());\nwithout an awful switch statement in react server.  We may want to block on #33, however, so we can swap out startServer implementations, or add better documentation so that users' configure their own express/koa/hapi instance (so they can put their api server on the same server instance as their html or js server).\n```\ndiff --git a/packages/react-server-cli/src/startServer.js b/packages/react-server-cli/src/startServer.js\nindex 474a295..21c72ae 100644\n--- a/packages/react-server-cli/src/startServer.js\n+++ b/packages/react-server-cli/src/startServer.js\n@@ -1,7 +1,8 @@\n import reactServer, { logging } from \"react-server\"\n import http from \"http\"\n import https from \"https\"\n-import express from \"express\"\n+import koa from \"koa\"\n+import serve from \"koa-static\"\n import path from \"path\"\n import pem from \"pem\"\n import compression from \"compression\"\n@@ -117,29 +118,28 @@ const startImpl = ({\n // http://localhost:port/. returns an object with two properties, started and stop;\n // see the default function doc for explanation.\n const startHtmlServer = (serverRoutes, port, httpsOptions) => {\n-   const server = express();\n-   const httpServer = httpsOptions ? https.createServer(httpsOptions, server) : http.createServer(server);\n+   const server = koa();\n+   const httpServer = httpsOptions ? https.createServer(httpsOptions, server.callback()) : http.createServer(server.callback());\n+   httpServer.on('error', (e) => {\n+       console.error(\"Error starting up HTML server\");\n+       console.error(e);\n+       reject(e);\n+   });\n    return {\n        stop: serverToStopPromise(httpServer),\n        started: new Promise((resolve, reject) => {\n            logger.info(\"Starting HTML server...\");\n\nserver.use(compression());\n\nreactServer.middleware(server, require(serverRoutes));\n\nhttpServer.on('error', (e) => {\nconsole.error(\"Error starting up HTML server\");\nconsole.error(e);\n// server.use(compression());\ntry {\nreactServer.middleware(server, require(serverRoutes));\nhttpServer.listen(port);\n} catch (e) {\nloger.error(e);\n                reject(e);\n});\nhttpServer.listen(port, (e) => {\nif (e) {\nreject(e);\nreturn;\n}\nlogger.info(Started HTML server over ${httpsOptions ? \"HTTPS\" : \"HTTP\"} on port ${port});\nresolve();\n});\n}\nlogger.info(Started HTML server over ${httpsOptions ? \"HTTPS\" : \"HTTP\"} on port ${port});\nresolve();\n        }),\n    };\n };\n@@ -149,8 +149,12 @@ const startHtmlServer = (serverRoutes, port, httpsOptions) => {\n // static compiled JavaScript. returns an object with two properties, started and stop;\n // see the default function doc for explanation.\n const startStaticJsServer = (compiler, port, longTermCaching, httpsOptions) => {\nconst server = express();\nconst httpServer = httpsOptions ? https.createServer(httpsOptions, server) : http.createServer(server);\nconst server = koa();\n// TODO: make this parameterized based on what is returned from compileClient\nserver.use(serve(__clientTemp/build, {\nmaxage: longTermCaching ? '365d' : '0s',\n}));\nconst httpServer = httpsOptions ? https.createServer(httpsOptions, server.callback()) : http.createServer(server.callback());\n    return {\n        stop: serverToStopPromise(httpServer),\n        started: new Promise((resolve, reject) => {\n@@ -162,10 +166,6 @@ const startStaticJsServer = (compiler, port, longTermCaching, httpsOptions) => {\n                }        logger.debug(\"Successfully compiled static JavaScript.\");\n\n\n// TODO: make this parameterized based on what is returned from compileClient\nserver.use('/', compression(), express.static(__clientTemp/build, {\nmaxage: longTermCaching ? '365d' : '0s',\n}));\n            logger.info(\"Starting static JavaScript server...\");    httpServer.on('error', (e) => {\n\n```\n. More evidence in favor of rollup instead of webpack https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/\n. > Maybe even today \ud83d\ude0f\n\n\n\n\nWoah.  Let's land #809 so that @drewpc doesn't have to entirely rewrite that super awesome pr, and then jump on this.. I've been trying to keep my eye on this.  Work has been progressing pretty well on http2 in node core -- it looks like they're targeting having it available behind an experimental flag in node 8.  I've been periodically building and tinkering with the in-progress http2 branch, and I believe that barring anyone else having implemented this, I should have a PR open sometime in April.. Duplicate of #88 \n. I added a styled-components example that demonstrates how to set styles for a single RootComponent -- does that resolve this issue @aickin @hzhu ?. This was fixed by the inimitable @mattiasewers in https://github.com/redfin/react-server/pull/513\n. > For the record, I'm probably not going to be as intensely involved as I was earlier in the year\n\ud83d\ude3f\n. lgtm \ud83d\udc4d \n. \ud83d\udc4d \n. Check out how sweet next.js prefetching is\nimport Link from 'next/prefetch'\n// example header component\nexport default () => (\n  <nav>\n    <ul>\n      <li><Link href='/'><a>Home</a></Link></li>\n      <li><Link href='/about'><a>About</a></Link></li>\n      <li><Link href='/contact'><a>Contact</a></Link></li>\n    </ul>\n  </nav>\n). @gigabo I think we want to generate the tests regardless; I think the question here is whether we should run the generator's tests as part of the monorepo build.  Turns out we're not actually getting a lot of benefit from keeping the generator in the monorepo -- given that we don't keep the versions in sync for the generated server any way, we may want to consider moving this to its own repo so it doesn't affect the build times for other React Server prs.  The other option is that we could not run the generated tests, but I don't like the idea that we would have tests that could catch bugs, but we just don't run.\n. Looks like I'm blocked on #265 \n. Used npm run nuke && npm run bootstrap to get around #265, but now I seem to be stuck on #262.  I'm getting \nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\nThe build has been terminated\nfrom travis, which is strange, because local testing passes much faster than that\ndougwade code/react-server \u2039start-server-tests*\u203a \u00bb time npm test\n...\nnpm test  98.81s user 19.06s system 117% cpu 1:40.27 total\n. Final build time\n\nseems about in line with recent build times\n. \ud83d\udc4d \n. Not sure if this is the right place to add this, but we can track our overall build time with this here graph\n. I borrowed the idea from nodejs \ud83d\ude00 \n. maybe related to these warnings?\ndougwade code/react-server \u2039master*\u203a \u00bb lerna bootstrap\nLerna v2.0.0-beta.14\nLinking all dependencies\nVersion mismatch inside \"react-server-integration-tests\". Depends on \"react-server@0.3.0\" instead of \"react-server@../react-server\".\nVersion mismatch inside \"react-server-integration-tests\". Depends on \"react-server-cli@0.3.0\" instead of \"react-server-cli@../react-server-cli\".\nVersion mismatch inside \"react-server-test-pages\". Depends on \"react-server@0.3.0\" instead of \"react-server@../react-server\".\nVersion mismatch inside \"react-server-test-pages\". Depends on \"react-server-cli@0.3.0\" instead of \"react-server-cli@../react-server-cli\".\nVersion mismatch inside \"react-server-test-pages\". Depends on \"react-server-data-bundle-cache@0.3.0\" instead of \"react-server-data-bundle-cache@../react-server-data-bundle-cache\".\nSuccessfully bootstrapped 9 packages.\n. This was resolved with an npm run nuke && npm run bootstrap\n. \ud83d\udc4d \n. \ud83d\udc4d \n. lgtm \ud83d\udc4d \n. @gigabo I didn't realize I needed the octothorpe\n. lgtm \ud83d\udc4d \nthanks @gigabo \n. \ud83d\udc4d  cool stuff.  Thanks @gigabo \n. This has backwards-incompatible changes; rebasing onto next\n. Bonus points if they are slow dependencies\n. Oops\n:+1:\n. \ud83d\ude80 \u2728 \u2764\ufe0f \ud83d\udc4d \ud83d\udea2 :shipit: \n. Look at all these nice things!  https://github.com/facebook/react/releases/tag/v15.3.1\nWe could have them all!\n. @gigabo it would be really great to be able to use https://facebook.github.io/react/blog/2016/11/16/react-v15.4.0.html#profiling-components-with-chrome-timeline .  Let's merge this stat -- I'm willing to do a dedicated release just for this one pr.\n. This has gotten unwieldy, so I'm breaking it into multiple prs (see #300, #294, and #297, with more to follow)\n. > I don't know how effectively browsers balance bandwidth between the current active page and an installing ServiceWorker. I think browsers just handle this, but it's possible that installing the app could interfere with first load.\nMy intuition is that browsers do \"just handle this\", since the \"whole point\" of web workers, iiuc, is to do work in the background that doesn't affect the ui thread.  I also suspect that even if they don't, it shouldn't be too hard to work around -- I mean, if push came to shove, couldn't we postpend a script tag to the initial page load that starts the ServiceWorker only after the full page was received? \n\nLoad balancing between multiple versions of an app would likely cause the ServiceWorkers to thrash, but load balancing multiple versions is probably already a bad scenario.\n\nYou mean if there were two different groups of hosts, one running v1 and one running v2, and we got different webpack hashes from the different pools, and you were randomly assigned to one of them, we would reload the page unnecessarily?  I don't think we'd thrash too hard; in the worst case, you'd have a 50/50 split on two versions, where 50% of second page loads would incur an extra page load (25% chance of v1 -> v2, and 25% chance of v2 -> v1), and you could completely eliminate the thrashing with a more sophisticated load balancing solution (consistent hashing, pooling, etc).\n\nLoading a data bundle with the ServiceWorker means that we don't get any data until the last byte arrives, which may slow down client-side rendering vs. parallel client requests. However, the new client-side streaming APIs could probably fix this.\n\nCould we use the data bundle preloading that we do for client transitions to offset this cost?  It seems surprising to me that the cost of transmitting the data bundle across the wire would take significantly longer than the amount of time to create the data bundle, but I'll admit that's based on intuition and bias and not on data, and I might be wrong altogether.\n\nThe downside to running the server side renderer in the ServiceWorker is that in HTTP/1 you might hit connection limits when retrieving the data from a bunch of different API endpoints. In HTTP/2, that shouldn't be a problem.\n\nThe more I think about this, the less I feel like I \"get\" web workers -- I thought the intent was to do work in the background that didn't affect the main ui thread, but this has got to be true -- there's no way you can open inifinite xhrs in a ServiceWorker and not exceed the browser max conns.  In any event, can we bundle up the data + static assets on the server and send that to the ServiceWorker in a single request?\n\nit has a certain elegance\n\nYes, yes it does.  I would love to see us come up with a use for the reserved __CHANNEL__ with isomorphic cluster + ipc modules that wraps up ServiceWorkers and the node cluser api into a single api that \"just works\" \u2122\ufe0f, and it sounds like you're gesturing towards that in a way that is both elegant and practical.\nIn any event, this is a really long way of saying: I think you're on the right track\n. @gigabo this was your suggestion; do you have any thoughts?\n. :+1:\n. Awesome!  Thanks so much!\nlgtm \ud83d\udc4d \ud83d\ude80 \n. @gigabo no, you have to run compile then start because module tagging.  @aickin's summary is 100% spot-on\n. We'll need the 118 exception until my prs to readdirp and babel land\n. Here's a build that includes the result https://travis-ci.org/redfin/react-server/builds/139049381\nThe relevant part of the log is\n``\nErrored while running npm script 'test' in 'react-server-gulp-module-tagger'\nError: Command failed: npm run test \n(node:4100) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.2/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.2/bin/npm\" \"run\" \"test\"\nnpm ERR! node v6.2.2\nnpm ERR! npm  v3.9.5\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server-gulp-module-tagger@0.3.0 test:gulp testnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the react-server-gulp-module-tagger@0.3.0 test script 'gulp test'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-server-gulp-module-tagger package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     gulp test\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs react-server-gulp-module-tagger\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls react-server-gulp-module-tagger\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/packages/react-server-gulp-module-tagger/npm-debug.log\n    at ChildProcess.exithandler (child_process.js:207:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:852:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nErrored while running RunCommand.execute\nError: Command failed: npm run test \n(node:4100) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! Linux 3.13.0-40-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v6.2.2/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.2/bin/npm\" \"run\" \"test\"\nnpm ERR! node v6.2.2\nnpm ERR! npm  v3.9.5\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server-gulp-module-tagger@0.3.0 test:gulp test`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the react-server-gulp-module-tagger@0.3.0 test script 'gulp test'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the react-server-gulp-module-tagger package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     gulp test\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs react-server-gulp-module-tagger\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls react-server-gulp-module-tagger\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/redfin/react-server/packages/react-server-gulp-module-tagger/npm-debug.log\n    at ChildProcess.exithandler (child_process.js:207:12)\n    at emitTwo (events.js:106:13)\n    at ChildProcess.emit (events.js:191:7)\n    at maybeClose (internal/child_process.js:852:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nnpm ERR! Test failed.  See above for more details.\nThe command \"npm test\" exited with 1.\nafter_failure\n0.97s$ npm run debug\n\n@ debug /home/travis/build/redfin/react-server\nfor d in packages//npm-debug.log; do echo $d; cat $d; done\npackages/react-server-gulp-module-tagger/npm-debug.log\n0 info it worked if it ends with ok\n1 verbose cli [ '/home/travis/.nvm/versions/node/v6.2.2/bin/node',\n1 verbose cli   '/home/travis/.nvm/versions/node/v6.2.2/bin/npm',\n1 verbose cli   'run',\n1 verbose cli   'test' ]\n2 info using npm@3.9.5\n3 info using node@v6.2.2\n4 verbose run-script [ 'pretest', 'test', 'posttest' ]\n5 info lifecycle react-server-gulp-module-tagger@0.3.0~pretest: react-server-gulp-module-tagger@0.3.0\n6 silly lifecycle react-server-gulp-module-tagger@0.3.0~pretest: no script for pretest, continuing\n7 info lifecycle react-server-gulp-module-tagger@0.3.0~test: react-server-gulp-module-tagger@0.3.0\n8 verbose lifecycle react-server-gulp-module-tagger@0.3.0~test: unsafe-perm in lifecycle true\n9 verbose lifecycle react-server-gulp-module-tagger@0.3.0~test: PATH: /home/travis/.nvm/versions/node/v6.2.2/lib/node_modules/npm/bin/node-gyp-bin:/home/travis/build/redfin/react-server/packages/react-server-gulp-module-tagger/node_modules/.bin:/home/travis/.nvm/versions/node/v6.2.2/bin:/home/travis/.nvm/versions/node/v6.2.2/lib/node_modules/npm/bin/node-gyp-bin:/home/travis/build/redfin/react-server/node_modules/.bin:/home/travis/.nvm/versions/node/v6.2.2/bin:/home/travis/.nvm/versions/node/v6.2.2/bin:/home/travis/bin:/home/travis/.local/bin:/home/travis/.gimme/versions/go1.4.1.linux.amd64/bin:/usr/local/phantomjs/bin:./node_modules/.bin:/usr/local/maven-3.2.5/bin:/usr/local/clang-3.4/bin:/home/travis/.gimme/versions/go1.4.1.linux.amd64/bin:/usr/local/phantomjs/bin:./node_modules/.bin:/usr/local/maven-3.2.5/bin:/usr/local/clang-3.4/bin:/home/travis/.gimme/versions/go1.4.1.linux.amd64/bin:/home/travis/.rvm/gems/ruby-1.9.3-p551/bin:/home/travis/.rvm/gems/ruby-1.9.3-p551@global/bin:/home/travis/.rvm/rubies/ruby-1.9.3-p551/bin:/usr/local/phantomjs/bin:./node_modules/.bin:/usr/local/maven-3.2.5/bin:/usr/local/clang-3.4/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/travis/.rvm/bin:/home/travis/.rvm/bin:/home/travis/.rvm/bin\n10 verbose lifecycle react-server-gulp-module-tagger@0.3.0~test: CWD: /home/travis/build/redfin/react-server/packages/react-server-gulp-module-tagger\n11 silly lifecycle react-server-gulp-module-tagger@0.3.0~test: Args: [ '-c', 'gulp test' ]\n12 silly lifecycle react-server-gulp-module-tagger@0.3.0~test: Returned: code: 1  signal: null\n13 info lifecycle react-server-gulp-module-tagger@0.3.0~test: Failed to exec test script\n14 verbose stack Error: react-server-gulp-module-tagger@0.3.0 test: gulp test\n14 verbose stack Exit status 1\n14 verbose stack     at EventEmitter. (/home/travis/.nvm/versions/node/v6.2.2/lib/node_modules/npm/lib/utils/lifecycle.js:245:16)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at EventEmitter.emit (events.js:191:7)\n14 verbose stack     at ChildProcess. (/home/travis/.nvm/versions/node/v6.2.2/lib/node_modules/npm/lib/utils/spawn.js:24:14)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at ChildProcess.emit (events.js:191:7)\n14 verbose stack     at maybeClose (internal/child_process.js:852:16)\n14 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\n15 verbose pkgid react-server-gulp-module-tagger@0.3.0\n16 verbose cwd /home/travis/build/redfin/react-server/packages/react-server-gulp-module-tagger\n17 error Linux 3.13.0-40-generic\n18 error argv \"/home/travis/.nvm/versions/node/v6.2.2/bin/node\" \"/home/travis/.nvm/versions/node/v6.2.2/bin/npm\" \"run\" \"test\"\n19 error node v6.2.2\n20 error npm  v3.9.5\n21 error code ELIFECYCLE\n22 error react-server-gulp-module-tagger@0.3.0 test: gulp test\n22 error Exit status 1\n23 error Failed at the react-server-gulp-module-tagger@0.3.0 test script 'gulp test'.\n23 error Make sure you have the latest version of node.js and npm installed.\n23 error If you do, this is most likely a problem with the react-server-gulp-module-tagger package,\n23 error not with npm itself.\n23 error Tell the author that this fails on your system:\n23 error     gulp test\n23 error You can get information on how to open an issue for this project with:\n23 error     npm bugs react-server-gulp-module-tagger\n23 error Or if that isn't available, you can get their info via:\n23 error     npm owner ls react-server-gulp-module-tagger\n23 error There is likely additional logging output above.\n24 verbose exit [ 1, true ]\nDone. Your build exited with 1.\n``\n. Huge thanks!  lgtm \ud83d\udc4d \n. I don't care to admit how many times I forget to includerun` with npm scripts \ud83d\udc11 -- thanks! \nlgtm \ud83d\udc4d \n. This is blocking on 0.4.0 to publish\n. @gigabo React Server!\n. Whichever version we publish next.  Semver versions before 0 are kinda squishy -- adding two new packages to the ecosystem seemed like it might merit more than patch version change.\n. oh shit I didn't realize the appveyor stuff had snuck out of #304 \ud83d\udca9 \n. I disabled the webhook, but I'm not sure what is to be done about the failing check\n. \ud83d\ude0c \n\n. oh wait snap updated too many deps\n. I apparently haven't learned my lesson; Ima do this per-dependency\n. I don't repro this on master after a nuke and rebuild\n\n\n. This was resolved in https://github.com/redfin/react-server/commit/98a95771f8dcccb644987cdce01316e7b47a34d8. > complains about a missing source folder\nthis source folder?\n\nthere's an issue with node-gyp\n\nLooking at the link you included, it seems like we'd need to have admin permissions on the ci instance to install windows-build-tools, which I don't think we have.  The Appveyor vms do have visual studio 2015 preinstalled, so I'll try adding\nnpm config set python python2.7\nnpm config set msvs_version 2015\nas part of init and see if that helps mocha build.\n. I tried both installing windows-build-tools and the manual configuration steps, but the error doesn't seem to change.  Reading the error text a little more carefully\nC:\\projects\\react-server\\node_modules\\bufferutil>if not defined npm_config_node_gyp (node \"C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin\\\\..\\..\\node_modules\\node-gyp\\bin\\node-gyp.js\" rebuild )  else (node \"\" rebuild ) \nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\n  bufferutil.cc\n  win_delay_load_hook.c\nC:\\Program Files (x86)\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\src\\win_delay_load_hook.c(34): error C2373: '__pfnDliNotifyHook2': redefinition; different type modifiers [C:\\projects\\react-server\\node_modules\\bufferutil\\build\\bufferutil.vcxproj]\n  C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\delayimp.h(134): note: see declaration of '__pfnDliNotifyHook2'\ngyp ERR! build error \ngyp ERR! stack Error: `msbuild` failed with exit code: 1\ngyp ERR! stack     at ChildProcess.onExit (C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\lib\\build.js:276:23)\nit seems like we might be hitting https://github.com/nodejs/node-gyp/issues/972, so I think I'm going to try a different version of node maybe?\n. Neither 4.4.7 or 6.3.1 resolves the issue.  I wonder, considering how long after the error is emitted, whether the C:\\Program Files (x86)\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\src\\win_delay_load_hook.c(34): error C2373: '__pfnDliNotifyHook2': redefinition; different type modifiers [C:\\projects\\react-server\\node_modules\\zombie\\node_modules\\ws\\node_modules\\utf-8-validate\\build\\validation.vcxproj]\n  C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\delayimp.h(134): note: see declaration of '__pfnDliNotifyHook2' error is really the root cause of 'mocha' is not recognized as an internal or external command, operable program or batch file.  Strangely, even after I change the test target to ./node_modules/.bin/mocha --compilers js:babel-register, the error is unchanged, which makes me feel like something is going on that I don't understand.\n. That's awesome @knoxzin1 ! What version of npm are you using? I see that lerna 26 is the version of lerna that worked for you.  I'm going to pull your commit into my branch to try to maintain authorship.\nThe test failures are discouraging, though -- looks like the color chooser isn't stable across OSes.  I feel like the tests are kind of hacky, though -- the guarantee isn't that the colors will be stable across systems and runs, but instead visually distinct.  We'll need to change the assertions to be more savvy about how they check that the modules were tagged correctly.\n. I rebased onto #833 and kicked off the build again: https://github.com/doug-wade/react-server/pull/14\n:crossed_fingers: . All the Bad Things :tm:; EPERM: operation not permitted, rename 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz.2807194044' -> 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz'. I'm not sure who's renaming tarballs.  I know asini does hoisting, but I thought it was by moving the root package.json, writing a new package.json, running the install and then replacing the package.json.  If it actually fiddles around with the npm-cache, that'd be a good candidate.  If its not, that would point to npm, but iirc the npm-cli has extensive testing on Windows, so that would surprise me.  Maybe a race condition with running multiple installs simultaneously causes one process to move the tarball before the other?\nEven more puzzling is the parent: 'babel-cli' part -- why is babel renaming tarballs?  Feels like a :fish: \nHere's the full error trace:\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\nnpm ERR! node v4.4.7\nnpm ERR! npm  v2.15.8\nnpm ERR! path C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz.2807194044\nnpm ERR! code EPERM\nnpm ERR! errno -4048\nnpm ERR! syscall rename\nnpm ERR! Error: EPERM: operation not permitted, rename 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz.2807194044' -> 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz'\nnpm ERR!     at Error (native)\nnpm ERR!  { [Error: EPERM: operation not permitted, rename 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz.2807194044' -> 'C:\\Users\\appveyor\\AppData\\Roaming\\npm-cache\\source-map\\0.5.6\\package.tgz']\nnpm ERR!   errno: -4048,\nnpm ERR!   code: 'EPERM',\nnpm ERR!   syscall: 'rename',\nnpm ERR!   path: 'C:\\\\Users\\\\appveyor\\\\AppData\\\\Roaming\\\\npm-cache\\\\source-map\\\\0.5.6\\\\package.tgz.2807194044',\nnpm ERR!   dest: 'C:\\\\Users\\\\appveyor\\\\AppData\\\\Roaming\\\\npm-cache\\\\source-map\\\\0.5.6\\\\package.tgz',\nnpm ERR!   parent: 'babel-cli' }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\projects\\react-server\\npm-debug.log\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"bootstrap-no-i\"\nnpm ERR! node v4.4.7\nnpm ERR! npm  v2.15.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! @ bootstrap-no-i: `asini bootstrap`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ bootstrap-no-i script 'asini bootstrap'.\nnpm ERR! This is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     asini bootstrap\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs \nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR! \nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\projects\\react-server\\npm-debug.log\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"i\"\nnpm ERR! node v4.4.7\nnpm ERR! npm  v2.15.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! @ postinstall: `npm run bootstrap-no-i`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ postinstall script 'npm run bootstrap-no-i'.\nnpm ERR! This is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm run bootstrap-no-i\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs \nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR! \nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\projects\\react-server\\npm-debug.log\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"bootstrap\"\nnpm ERR! node v4.4.7\nnpm ERR! npm  v2.15.8\nnpm ERR! code ELIFECYCLE\nnpm ERR! @ bootstrap: `npm i`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the @ bootstrap script 'npm i'.\nnpm ERR! This is most likely a problem with the  package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     npm i\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs \nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR! \nnpm ERR!     npm owner ls \nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     C:\\projects\\react-server\\npm-debug.log\nCommand exited with code 1\nSee more at https://ci.appveyor.com/project/doug-wade/react-server/build/1.0.114. We should definitely support nodes 4 and 6, as they are still supported, so I'd be resistant to running CI exclusively on node 7.\n\nEither we go through each test and make them all work on multiple platforms (huge pain) or we disable lint somehow on the Windows tests.\n\nI think I lean towards the \"go through each test and make them all work on multiple platforms\" approach here.  My goal is not only to test that React Server instances can run on Windows machines, but also to make sure that developers on Windows machines can contribute to React Server -- I think I might even value making it possible to develop on Windows more than making it possible to run on Windows.  Being able to run the tests and linter locally are a big part of a good developer experience.. I just rebased and re-ran the tests https://ci.appveyor.com/project/doug-wade/react-server/build/1.0.124.  Looks like the colors are operating system dependent.. @Noirbot seems like a reasonable place to start.  If you were really feeling ambitious, you could test it using something like nave or n\n. Thank you! \ud83c\udfc6 \n\ud83d\udc4d \n. \ud83d\udc4d \n. \ud83d\udc4d \n. woah a meaningful and useful contribution from the greenkeeper bot.  @davidalber how do we sign the cla for robots?\n. declining in favor of https://github.com/redfin/react-server/pull/279\n. declining in favor of https://github.com/redfin/react-server/pull/279\n. declining in favor of https://github.com/redfin/react-server/pull/340\n. declining in favor of https://github.com/redfin/react-server/pull/279\n. \ud83d\udc4d \n. declining in favor of https://github.com/redfin/react-server/pull/345\n. declining in favor of https://github.com/redfin/react-server/pull/338\n. declining in favor of https://github.com/redfin/react-server/pull/338\n. declining in favor of https://github.com/redfin/react-server/pull/341\n. declining in favor of https://github.com/redfin/react-server/pull/345\n. declining in favor of https://github.com/redfin/react-server/pull/345\n. > it may be worth noting in docs somewhere that loading files that we don't have a loader coded in for will cause failures/bugs\nI find this to be a very compelling suggestion, and I'd kinda like to get it into this pr, but I'm not really sure where in the docs it belongs.  react-server-cli's README, maybe?\n. Thank you @Noirbot.  lgtm!\n. This is a duplicate of #361\n. @breeswish you can already add custom webpack loaders. \ud83d\udc4d \n. There's a \"every damn size, sir!\" button on this page that seems promising: http://www.favicomatic.com/\nMaybe also https://realfavicongenerator.net/?\n. :+1:\n. \ud83c\udd92 \n\ud83d\udc4d \n. coupla things left outstanding, but nothing we need to hold up this pr over.\nlgtm \u26f5 \n. this landed in https://github.com/redfin/react-server/pull/787. I had a lot to say about this pr, but its super awesome and I like the new interface way better and I whole-heartedly endorse this plan.  Thanks for pulling this together @gigabo \n. \ud83d\udc4d \n. lgtm \u26f5 \ud83d\udc4d \n. Can you update the port testing manifest to include that this test is using 3010/3011?\n. \ud83d\udc4d \n. lgtm \ud83d\udc4d \n. The github inline editor is pretty cool\n. woo!  thanks @mattiasewers \ud83d\udea2 \ud83d\udc4d \n. lgtm \ud83d\udc4d  (https://github.com/omerzach/react-server/tree/patch-1/docs) -- we just need you to sign the CLA and we'll merge\n. thanks so much @omerzach \n. lgtm \ud83d\udc4d \n. woo! \ud83d\udc4d \n. lgtm \ud83d\udc4d \n. Yeah, I removed that command in https://github.com/redfin/react-server/pull/361, but missed some of the docs.  Thanks for the pr @dharamgollapudi ! It looks good to me, but you'll need to sign the cla before we can merge.\n. Jeez, how many places did we write the same command \ud83d\udc11 \nThanks @rwood, lgtm\n. This seems like its going backwards to me.  Node 4 supports destructuring, but its behind a flag; can you try adding the --harmony_destructuring flag to https://github.com/redfin/react-server/blob/master/packages/react-server-cli/bin/react-server-cli#L1, rather than removing the destructuring?  I don't think we want to try to support node < 4.\n. @gigabo oh, I see.  sorry @lidawang, lgtm \ud83d\udc4d \n. Js is the plurality? good enough for government work \ud83c\udfdb\n. \ud83d\udea2 \n. \ud83d\ude80 i dig it\n. @kcjonson looks like you may have committed as a different user than your github user -- maybe as your work user?  Its possible adding another email address to your gh profile would resolve this, or git commit --amend --author\n. Awesome! \ud83d\udc4d \n. @kimgronqvist I would love to get react server up and building on windows, but I don't have a machine to debug on.  We hit some errors trying to set up appveyor to prevent these kinds of compatibility issues from sneaking in.  Would you be willing to help us get the build passing on windows?\n. Yay! \ud83c\udf89 \nI opened up a pr to add appveyor to the build in my fork, since I'm not sure how to set it up so that it only builds for a single branch and not for a whole repo.  \nYou can see the full logs here, or by following the link in the failing check, but currently its failing npm test with \nError: Command failed: npm run test \n'mocha' is not recognized as an internal or external command,\noperable program or batch file.\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\\\Program Files (x86)\\\\nodejs\\\\node.exe\" \"C:\\\\Program Files (x86)\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"run\" \"test\"\nI don't really understand why that would be the case, though, since its passing our ubuntu build just fine.  The dev dependency we've declared should be added by npm to the path at runtime.\n. Also, the issue is https://github.com/redfin/react-server/issues/316\n. Resolved in https://github.com/redfin/react-server/pull/538\n. closed in #541 \n. @gigabo it uses the eslint at the monorepo root, which we prefer because it keeps bootstrap times and disk utilisation low \n. :+1:\n. See also #235\n. Woo!  Thanks @hzhu.  Lgtm \ud83d\udc4d \n. builds on #558 \n. builds on #560 \n. @gigabo #560 merged and I rebased onto latest master\n. I've run them on ec2 instances, but never heroku.  Heroku's pretty easy to use, and pretty platform-agnostic -- I've run other Express-based apps on them before -- so I'd be surprised to discover there are an gotchas lurking.  Is there something in particular you're worried about?\n. @hzhu We have been seeing some problems with the static asset server and secure connections recently -- the wrong URL is being passed to the loading middleware.\n. @hzhu yeah go ahead and file it.  I haven't had a chance to take a look at it -- the fire's burning pretty hot here at Redfin -- but hopefully I can get to it by EOW\n. lgtm \ud83d\udc4d \n. I'm not seeing this logged in\n\nor incognito\n\n. I guess my first question is why can't you use dotenv as is?\nFor how we do config management, there are two places.  The first is you can store environment-specific react server config in .reactserverrc with the env key. The second is we have config.js, which allows you to share config between the server and the client. \n. @mcianc what version of yeoman are you running (yo -v)?  Stackoverflow seems to think that this can be solved by upgrading to the latest version of yo (npm update -g yo)\n. Hooray :tada:\n. lgtm \ud83d\udc4d \nThanks @alex88 \n. \n. \ud83d\ude80  works for me locally \ud83d\udea2 \n. Oh, and I'm hoping its a coincidence that react-server-cli.src.commands.start and react-server-cli.src.logProductionWarnings are apparently using the same color \ud83d\ude13 \n. I don't think we mention adding event listeners to the client controller anywhere in the docs, let alone which events might be emitted.  We should probably do that.\n. Dear future intrepid soul searching for docs on events emitted by React Server,\nWe emit the following events: render, showFrame, loadComplete, page, navigateDone, pageview.\nGood luck,\n<3 The React Server Team\nlgtm \ud83d\udea2 \n. yeah, that's all of them from everywhere -- frameback controller, navigator, the whole lot\n. lgtm \ud83d\udea2 \n. @gigabo pulled the sass and babel deps.  I had to run a relative install (npm i ../react-server-cli) to get it to pass locally -- lerna bootstrap didn't seem to fix it -- and I'm not sure what that means about whether we should merge this.\n. @hbussell This change is awesome and amazing and incredible, but your build failed with some linting errors\n/home/travis/build/redfin/react-server/packages/react-server-cli/src/compileClient.js\n  43:2  error  Mixed spaces and tabs                                 no-mixed-spaces-and-tabs\n  43:6  error  Expected indentation of 2 tab characters but found 0  indent\n  44:2  error  Mixed spaces and tabs                                 no-mixed-spaces-and-tabs\n  44:6  error  Expected indentation of 2 tab characters but found 0  indent\n  45:2  error  Mixed spaces and tabs                                 no-mixed-spaces-and-tabs\n  45:6  error  Expected indentation of 2 tab characters but found 0  indent\n\u2716 6 problems (6 errors, 0 warnings)\nYou can check locally that you've resolved them with npm test in the monorepo root or gulp eslint in packages/react-server-cli.\nThanks so much for your contribution; this is awesome! \u2728 \n. #199\n. Whoops!  Sorry about that @jamesphe -- hopefully there aren't more of those lurking\n. @hzhu @gigabo what about pulling it into react-server-examples?\n. Repro'd -- it's fixed, I promise (repro is in closed-source code)\n. Please don't kick the build; I'm filing an issue with nsp\n. Got a response from nsp:\n\nApologies for the trouble. We've been experiencing some instabilities related to infrastructure lately. We're working diligently to address these issues and scale up so we can meet demand. Thank you for your patience.\n\nGuess #605 is more important than I thought.  Restarting the build.\n. I chatted with @drewpc about this a bit, and there are a couple of other problems with our approach to auditing our dependencies.  The first one is that it is unclear how this will work with asini hoisting -- both nsp and snyk use the dependencies that are checked out on disk to try to figure out if there are vulnerable packages in the dependency closure, and asini moves them out of their respective node_modules.  We may be able to circumvent this by testing the root node_modules, and all the distributed node_modules, but for now it is somewhat unclear.\nThe second is that security failures appear on unrelated pull requests, which is frustrating for contributors.  What happens is that a security issue appears on their pull request, someone else has to commit something, and then they have to rebase.\nTo resolve these, we'll need to figure out something more than just switching providers; maybe our security auditing should be offline like our dependency upgrades?. @vinsewah your build failed with some linting errors\n1:5   error  'common' is defined but never used   no-unused-vars\n   2:19  error  Unexpected use of process.env        no-process-env\n   9:2   error  Expected space(s) after \"if\"         keyword-spacing\n  40:3   error  Expected space(s) after \"if\"         keyword-spacing\n  68:2   error  Expected space(s) after \"if\"         keyword-spacing\n  68:11  error  Expected '===' and instead saw '=='  eqeqeq\n  71:7   error  Expected space(s) after \"if\"         keyword-spacing\n  71:16  error  Expected '===' and instead saw '=='  eqeqeq\n  79:61  error  Duplicate key 'TimeResponseLogger'   no-dupe-keys\n\u2716 9 problems (9 errors, 0 warnings)\nYou can verify that they've been resolved locally with an npm test in the monorepo root, or a gulp eslint in packages/react-server\n. Talked to @gigabo irl about this -- turns out this pr doesn't actually resolve the issue.  Ima switch the bike share example to use a RootContainer to get a better repro, then come at this again.\n. This was resolved in https://github.com/redfin/react-server/pull/779. Here's a screenshot for the interested\n\nlgtm \ud83d\udea2 \n. \ud83d\udea2 \nMostly unrelated: I don't think our docs mention getCurrentRequestContext at all?\n. @incubus8 Currently, React Server uses webpack only for the client, and not for the server.  We've had some discussion recently about moving to webpacking the server too, but for now, we use require.extensions to override how files are loaded server side.\nAs to your question about the footer being rendered before the main content, this is intentional.  One of the things we've focused on for React Server is that the page loads smoothly and consistently, and that it avoids the \"popping\" effect that you get when you allow elements lower on the page to render before elements higher on the page.  We believe that this leads to better customer experience, since it avoids behaviors like buttons moving out from under your cursor or thumb when you go to click a button on a page -- you know that once it is rendered, it shouldn't \"jump\" down the page. \n. omg this is the best and you are the best and I \u2764\ufe0f  everything about this forever \u2728 \ud83d\ude80 \ud83d\udea2 :shipit: \n. That's fantastic!\n. @roblg we can use plugRequest and plugResponse for that, yeah? https://github.com/redfin/react-server/blob/master/docs/guides/using-react-server-agent.md#extending-superagent\n. @gigabo we'll see how far we get -- I also opened #630 \n. > If it works\nThe build's passing locally, and the examples all seem to work :fingerscrossed:\n. Re: installing gulp as a dev dependency -- I dig it.  We shouldn't rely on globally-installed tools at all, and personally I'd like to see us go one step further and find some way to prefer the locally-installed gulp even if there is a globally-installed gulp\n. I would accept a pr that made it a default middleware -- I believe react-server applications should be secure by default.. I'm going to have to think about this one for a while.  All of the lifecycle methods on pages so far have to do with the document that is returned by the request, and nothing to do with the http request/response lifecycle that underpins it.  While I understand and agree that we'll need to have some support for http headers, I wonder if this is the way to do it, or if we should expose some abstraction or api for the underlying request object to keep the page api small and coherent.\n. Closing in favor of https://github.com/redfin/react-server/pull/648\n. Closing in favor of https://github.com/redfin/react-server/pull/648\n. This looks like bad times for jsdom -- we've gotten three of these in an hour -- and the latest commit on master doesn't look to be passing its build (https://github.com/tmpvar/jsdom/commit/c38e903d7c6c7a296bdd139a5c532813f52c7b93).  Let's hold of merging until things stabilize\n. \ud83d\udc4d \n. @drewpc this was fixed in #836?. Links from https://github.com/alanbares/react-server/tree/add-anchor-to-website-docs/docs work as expected.  Lgtm :+1: \n. I also pulled the website and ran it and made sure everything was still working\n. I haven't pulled it and run it locally, but the change lgtm. :+1: :boat: \n. Pulled it and ran it locally -- I reproed the issue with the hello world example\n```\ndoug-UX301LAA react-server-examples/hello-world \u2039f1dcc30*\u203a \u00bb react-server start --host http://my-host.com\n2016-10-02T08:37:42.517Z - warning: [react-server-cli.src.logProductionWarnings] PRODUCTION WARNING: the following current settings are discouraged in production environments. (If you are developing, carry on!):\n2016-10-02T08:37:42.519Z - warning: [react-server-cli.src.logProductionWarnings] -- Hot reload is enabled. To disable, set hot to false (--hot=false at the command-line) or set NODE_ENV=production.\n2016-10-02T08:37:42.520Z - warning: [react-server-cli.src.logProductionWarnings] -- Minification is disabled. To enable, set minify to true (--minify at the command-line) or set NODE_ENV=production.\n2016-10-02T08:37:42.520Z - warning: [react-server-cli.src.logProductionWarnings] -- Long-term caching is disabled. To enable, set longTermCaching to true (--long-term-caching at the command-line) or set NODE_ENV=production to turn on.\n2016-10-02T08:37:42.520Z - info: [react-server-cli.src.logProductionWarnings] NODE_ENV is set to undefined\n2016-10-02T08:37:42.550Z - notice: [react-server-cli.src.commands.start] Starting servers...\n2016-10-02T08:37:42.551Z - info: [react-server-cli.src.commands.start] Starting hot reload JavaScript server...\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: getaddrinfo ENOTFOUND http://my-host.com\n    at errnoException (dns.js:28:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:76:26)\n```\nand my made-up host worked just fine -- because it was using localhost.  I switched to use this branch, linked the cli and got the expected error\n```\ndoug-UX301LAA react-server-examples/hello-world \u2039f1dcc30*\u203a \u00bb react-server start --host http://my-host.com\n2016-10-02T08:37:42.517Z - warning: [react-server-cli.src.logProductionWarnings] PRODUCTION WARNING: the following current settings are discouraged in production environments. (If you are developing, carry on!):\n2016-10-02T08:37:42.519Z - warning: [react-server-cli.src.logProductionWarnings] -- Hot reload is enabled. To disable, set hot to false (--hot=false at the command-line) or set NODE_ENV=production.\n2016-10-02T08:37:42.520Z - warning: [react-server-cli.src.logProductionWarnings] -- Minification is disabled. To enable, set minify to true (--minify at the command-line) or set NODE_ENV=production.\n2016-10-02T08:37:42.520Z - warning: [react-server-cli.src.logProductionWarnings] -- Long-term caching is disabled. To enable, set longTermCaching to true (--long-term-caching at the command-line) or set NODE_ENV=production to turn on.\n2016-10-02T08:37:42.520Z - info: [react-server-cli.src.logProductionWarnings] NODE_ENV is set to undefined\n2016-10-02T08:37:42.550Z - notice: [react-server-cli.src.commands.start] Starting servers...\n2016-10-02T08:37:42.551Z - info: [react-server-cli.src.commands.start] Starting hot reload JavaScript server...\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: getaddrinfo ENOTFOUND http://my-host.com\n    at errnoException (dns.js:28:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:76:26)\n```\n. thanks @SeverS \n. :+1: \n. Closing in favor of https://github.com/redfin/react-server/pull/673\n. Hi @jay3dec, I pulled the latest master (4b4efd7d54989a01b86f18512a1d03923bc9ba31), ran an npm bootstrap and and npm update in react-server-examples/hello-world and started the server and couldn't repro the issue.  Could you give me some more details, like what version of node and npm you're running on, to try to help me repro?\n. declining in favor of https://github.com/redfin/react-server/pull/679\n. Closing as a duplicate of https://github.com/redfin/react-server/issues/672\n. Closed in #819 . I don't think either of these changes are good.  We removed superagent as a peer dependency and replaced it with a regular dependency in 0.4.7, so client code shouldn't declare a dependency on superagent, lest there are duplicate superagents.  Also, all of our examples use routes.js instead of routes.json, so we should use routes.js rather than routes.json.\nI'm not sure what you're trying to accomplish, so I can't give you better feedback than that -- you may want to come talk about it in our Slack channel or open an issue to clarify the problem you're having.\n. :+1: \n. fixed in https://github.com/redfin/react-server/pull/756\n. @mlolson almost certainly you've installed generator-react-server v1.0.0, which is an unrelated project.  We got the name from the very gracious @StevenIseki, but there are still some versions of of his previous project with that name on npm.  Make sure you have v0.4.13 installed before you scaffold out a new project.\n. closing in favor of https://github.com/redfin/react-server/pull/706\n. @sresant I didn't merge this immediately in case @gigabo wanted to take a look; seems like he doesn't.  Rebase this onto master and lets get it merged.\n. lgtm :+1: \n. Got it up and running locally -- it's pretty slick.  Thanks @emecell \n. @gigabo I merged up from master, rebased, and pushed. \ud83c\udf40 \n. @drewpc lemme know if there is somewhere you think it makes sense to have that explained in the docs -- I'm more than happy to add more formal documentation; users shouldn't have to dig through old issues to get what's going on.\n. Awesome! Thanks @rodrijuarez !. :+1:\n. @gigabo the reason that I remember off the top of my head is making the server and the client build easier to reason about.  Currently, you have to ship everything twice, once as a require hook server-side, and once as a webpack hook client-side.  If we moved to webpack-only, it would likely be easier to reason about and explain (and would give users the ability to modify how modules are loaded server-side, which they can't do currently, by modifying their webpack config).. @drewpc surprisingly, using the newest js features in node often leads to worse performance, rather than better.. @egid I don't know what's up -- its working for me \nIt might be a dep thing -- can you try using yarn to install the deps so we can be sure we have the same closure?. This is a one-off implementation of https://github.com/redfin/react-server/issues/783 for only this config key. Generally, we're trying to head in the opposite direction, per #277.  If, however, decamelize is already in our dependency closure, and yargs doesn't have a way to support this natively, then I don't see any harm.. :rocket: \n. @gigabo I've done all the testing I think I can -- it's passing ci, I linked up all the examples and ran them, and I ran through the test pages.  I agree there are risks, but I think we should try to keep the ecosystem up-to-date as much as reasonable.. Hi @jaredpalmer!  The bike share example does this.  To get the page title of the network page, I retrieve the network name in handleRoute, and then retrieve it off the context in getTitle. Hi @jaredpalmer -- does my earlier comment answer your question?  Can we close this issue?. @helenaut I linked up generator-react-server and ran it, and also ran npm uninstall -g yo && npm uninstall -g generator-react-server && npm i -g yo generator-react-server and couldn't repro either way. Also, neither npm nor github shows browserify as a dependency.  Are you sure you didn't install generator-reactserver? Or generator-react-server@1.0.0 (an unrelated package)? . @jhnns I would definitely prefer to break this issue up into 7 separate issues -- trying to follow discussion in a single issue seems like it will quickly become overwhelming.. Thanks!. I think I might be opposed to this one; at least, it is at disharmony with #547, #536 and #247.  Personally, I'd prefer to allow users to have a connect/express/koa/hapi/http-server/whatever instance and register react-server as a middleware on that server.  In practice, we might not be able to support everything, but it seems strange that a requirement of using react-server is that you have to have a separate api server; seems like it should at least be an option to have a single server have both your api and your front-end on it.. I dig it.  If I understand https://github.com/redfin/react-server/pull/791 correctly, __clientTemp is a particularly bad name, since it will also be the server temp directory. I'm leaning towards build, personally, though either strikes me as an improvement.. If I understand https://github.com/redfin/react-server/pull/96#discussion-diff-60105576 correctly, this is a good idea that we haven't implemented yet.. Disclaimer: haven't thought about this one very carefully.\nMaybe we can put them into config.js, rather than attaching them to window?. I think the tests for this would belong in packages/react-server-cli/test.  There isn't a lot of precedent; I can lend a hand if you need some help setting up more testing.. lgtm :shipit: . lgtm :+1: -- let's wait to merge until @gigabo or @roblg takes a look, though.. > What about for PRs submitted by maintainers? Still two additional sign-offs?\nOh, my intention was that any pr can be merged with approval from any two maintainers, regardless of who the author is.  I suppose it's a good idea, though, to always have two extra pairs of eyes.  Maybe go the other way -- any pr can be merged with the approval of any one maintainer, as long as that maintainer isn't the author?. woo! credit where credit is due.  I :heart: contributors.. @feychou you might wanna consider joining our slack channel so we can chat about changes and plans and stuff: https://slack.react-server.io/ (I only suggest it cuz I just went to slack you about why you closed this and then you weren't there :stuck_out_tongue:). Uh... I did a bad job titling #680 -- I named it after how I thought we'd fix the issue, rather than the actual issue.  This closes #680, which I've updated to better describe the issue.. Looks like this is fixed on master and we just need a publish to resolve.. @drewpc I pulled master, ran npm run bootstrap && npm run nuke && npm run bootstrap && npm test and I still get Error: Cannot find module '@satazor/eslint-config/addons/node'\nEven my machine is the only one affected, we should still accept the pr so we stop linting the examples node_modules folders, since they're not in packages/react-server-examples, they're one layer out, in packages/react-server-examples/bike-share and packages/react-server-examples/meteor-site &c.. First off, thank you for this contribution!  I :heart: :blue_heart: :green_heart: having a custom express middleware example; its something that's been on my wishlist for a long time, and I very much appreciate you taking the time to write this @jhnns.  \nI'm not sure what the build failure was, so I kicked the build -- turns out it was transient; lemme know if it happens again.\nAs to @drewpc's comment about making this a separate example, I agree that we should keep the isomorphic api call as part of the bike share example, but I don't know that it has to be a separate example.    I think we've sort of let our vision drift on react-server-examples; some of them demonstrate a single idea succinctly (redux-basic, for instance) and some of them are more \"this is what a realistic app might look like\" (bike-share and meteor-app).  I don't think we should try to tighten our vision in this pr in particular, but I think we might want to revisit how the examples work and whether we want to better curate the examples.  \nFor this pr, my thought is that if you would like to include this custom express middleware in the bike share example specifically, change the isomorphic api call to call the express api instead of the remote api directly, instead of replacing the isomorphic api call with the express api.  If you would like, you could also spin up a separate example only for adding custom express middleware, but that's above and beyond, and I don't think we should require that before merging.. hey @jhnns reading back over what I wrote earlier, I'm not sure whether it actually makes any sense.  Ima page @gigabo and @roblg in case they have a moment to look over this in the meantime, but I'm going to need to tinker a little bit with the existing example to make sure I understand what its doing before I approve this.  Sorry \ud83d\ude1e . Hi @karlhorky @kaytcat!  Thanks for pitching in!\nI definitely agree that's a really unhelpful error, and that we need to improve the user experience.  Unfortunately, since our test coverage for the cli is pretty low, I can't quite be certain whether this change is good.  In particular, we added that when we made react-server-cli globally installable, and I suspect that this change will introduce a regression for when you're using react-server-cli outside of an existing React Server project.  What happens when you're bootstrapping a new project with react-server init?  Won't the require throw an equally-confusing error?\nI think we'll need to keep the try-catch, and inspect the error.  I think something like this should work\ntry {\n  options.routes = require(options.routesPath);\n} catch (e) {\n  if (isParseError(e)) {\n    throw e;\n  }\n  if (isNonDefaultRoutes(options.routes) && isFileNotFoundError(e)) {\n    throw new Error(\"You've specified a custom routes file that does not exist.  Please add it\");\n  }\n  // Pass. Commands need to check for routes themselves.\n}\nTests would also be wonderful.. > Error: Cannot find module '~/projects/rs/packages/react-server-cli/src/routes.json'\nThat seems reasonable to me. @roblg note that accessing process.env while doing react server-side rendering is generally frowned upon for performance reasons, so its likely that the isBrowser flag will improve performance for clients, including Redfin.. I linked this up and started it locally, and got the following error from the hello-world example:\n2017-01-24T22:58:24.585Z - notice: [react-server-cli.src.commands.start] Ready for requests on 0.0.0.0:3000.\nTypeError: Cannot set property 'expose' of undefined\n    at Object.extendApp [as extend] (/home/dwade/foss/react-server/packages/react-server-examples/hello-world/node_modules/express-state/index.js:18:25)\n    at Object.module.exports [as middleware] (/home/dwade/foss/react-server/packages/react-server-examples/hello-world/node_modules/react-server/target/server/renderMiddleware.js:48:15)\n    at /home/dwade/foss/react-server/packages/react-server-cli/target/commands/start.js:152:28\n    at Layer.handle [as handle_request] (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:312:13)\n    at /home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:280:7\n    at Function.process_params (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:330:12)\n    at next (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:271:10)\n    at cookieParser (/home/dwade/foss/react-server/node_modules/cookie-parser/index.js:56:14)\n    at Layer.handle [as handle_request] (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/layer.js:95:5)\nTypeError: Cannot set property 'expose' of undefined\n    at Object.extendApp [as extend] (/home/dwade/foss/react-server/packages/react-server-examples/hello-world/node_modules/express-state/index.js:18:25)\n    at Object.module.exports [as middleware] (/home/dwade/foss/react-server/packages/react-server-examples/hello-world/node_modules/react-server/target/server/renderMiddleware.js:48:15)\n    at /home/dwade/foss/react-server/packages/react-server-cli/target/commands/start.js:152:28\n    at Layer.handle [as handle_request] (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:312:13)\n    at /home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:280:7\n    at Function.process_params (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:330:12)\n    at next (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/index.js:271:10)\n    at cookieParser (/home/dwade/foss/react-server/node_modules/cookie-parser/index.js:56:14)\n    at Layer.handle [as handle_request] (/home/dwade/foss/react-server/packages/react-server-cli/node_modules/express/lib/router/layer.js:95:5)\nwhat gives?. @drewpc repros on master.  I'll file it separately, but let's not hold up this pr.. Embarrassing disclosure: I don't think I've ever made a HEAD request in my life.  Iiuc, a HEAD request is just a GET with the body pulled; if we can implement it such that if you write a reasonable GET method, we give you a reasonable HEAD method for free (by calculating the full GET and pulling the message-body), I'm down with making it a default, but otherwise, I wouldn't add it (unless of course everyone always write a HEAD method by default and I'm in the minority here).. Could you also update the redux example?  The test-pages are a great start, but I'd like a \"minimal example\" so I can think about the api.. I vote to keep it as a package and add at least a linting target to the test script.  It might not need to be an npm package, but it'd sure be easier to manage and test if we pretend like it is.  Also this is super awesome and also amazing and huge thanks to @sbr1601 . > include it in everyone's node_modules folder when they can't interact with it that way\nI don't follow.  Which node_modules folder is it going to end up in?  We build lots of projects that aren't distributed through npm in the monorepo.... @drewpc the monorepo design doesn't affect how users install React Server, only how developers work on it.  Since none of the other modules declare a dependency on react-server-chrome-extension-timeline, it won't ever end up in their dependency closure.  Once react-server-chrome-extension-timeline is marked private, it won't even end up on npm, so it'd be impossible for a react server user to get it in their node_modules.. :thinking: iiuc, we're just checking in the source of lab.js to react server core, but is that really where it belongs?  Maybe it makes sense to make it a separate npm package?  Maybe it even makes sense to make it into an npm package that lives outside of the react server repo, maybe something like https://npmjs.com/package/labjs?  It's under and MIT license, and it doesn't really seem like its something react server specific...\nWe could also add a git dependency to react-server/package.json. Actually, looks like there's plans to put it on npm. Makes sense.  I vote we pry it out into react-server-labjs (which also means you can postpone fixing the linting errors if you'd like :japanese_ogre:) and hope that we can take a dependency on the npm package when it comes out.. @lidawang can we close this pr, then?. thanks @drewpc \u2764\ufe0f . we'll need to update https://github.com/redfin/react-server/blob/master/packages/react-server-examples/hello-world/package.json#L20 to 0.6.0, then.. @breeswish what's ncu?. Rather than pass a different mutable copy to each requester, why not pass a single immutable reference to each requester?\n. If we were willing to add a library for immutability, it'd be really simple\nconst Immutable = import(\"immutable\");\nthis.dfd.resolve(Immutable.map(res));\nIf instead we wanted to roll our own, we could do a recursive freeze:\n```\nthis.dfd.resolve(deepFreeze(res));\nfunction deepFreeze (o) {\n  Object.freeze(o);\nObject.keys(o).forEach((prop) => {\n    if (typeof o[prop] === \"object\") {\n      deepFreeze(o[prop]);\n    }\n  });\nreturn o;\n}\n```\n. iiuc, @drewpc is on the case: https://github.com/redfin/react-server/pull/869. Thanks @ptomasroos . @mtrabelsi I'd have to look at the website again, but I seem to recall it pulls the docs from github, rather than the locally checked-out repo, so I think that's expected.  It makes it so we don't have to redeploy every time we change the docs.. This was fixed in #893; closing. @gigabo its what allows us to do mass updates of dependencies, a la #903 (which is the checked-in result of testing this branch).  I've checked it locally, and this change lgtm :shipit: . Hi @xaviertung!  You can configure your webpack loaders with the cli.  You're looking for the section \"Webpack options\" in https://react-server.io/docs/guides/react-server-cli. Thanks @Qoyyuum . Thanks @Qoyyuum . I'm pretty sure the build failure is transient, but I've kicked the build to be sure.  Thanks @Qoyyuum . I hope the build failure is transient, but I've kicked it just to be sure.  Thanks @Qoyyuum . Please reopen with a description. yolo!\n. done\n. afaict, the corvair trademark has expired, plus I'm pretty sure that's not how trademarks work -- if a reasonable person can tell that our node module is different from the car/clothing line, then it's not infringement -- for instance, there is a trademark on \"karma\", but the testing tool still uses the name, as does gulp trademark, or express, which is okay despite the clothing store of the same name or pm2 which is okay despite being a computer consulting firm.\nThat being said, I don't really care what the name is, just tell me what to rename it and I'll do that.\n. You can avoid the \"uncomment to use\" by suppressing the eslint no-unused-vars rule for just these two lines with an eslint enable/disable block, if you prefer: http://eslint.org/docs/user-guide/configuring#configuring-rules\n. why do you use let for route and formats but const for absolutePathToPage?  Iiuc, you never change the reference for route or formats, so you could use const?  (I'm not really recommending a change, mostly just trying to catch up)\n. this seems unintuitive -- I feel like I should be able to minify my js for local testing without using all the rest of my production environment config.\n. Probably not?  We don't want to uglify server side, and I'd like to try to keep the babel config as similar as possible on the server and client (I think we should be transpiling them both pretty aggressively, since V8 features often start out pretty slow, and we want to support the oldest browsers reasonably possible)\n. probably out-of-scope, but I generally prefer using a templating engine for code generation, personally\n. Fixed\n. Ima say this is out of scope; I created https://github.com/redfin/react-server/issues/30\n. :heavy_check_mark: \n. :heavy_check_mark: \n. :heavy_check_mark: \n. :heavy_check_mark: \n. oops, we shouldn't point everyone's apps at the same repo\n. I shamelessly copy-pastaed @aickin 's example\n. I'll toss in a david task to boot.\n. That's the license for the generated project, not for our package.\n. I dunno, that's just what http://todogroup.org/opencodeofconduct/ spat out at me\n. I'd say per React's example, let's keep the version one in this README, but move the dependencies ones to their package's README. Seem reasonable?\n. Here's some examples:\nopensource+codeofconduct@twitter.com (https://engineering.twitter.com/opensource/code-of-conduct)\noss-conduct@box.com (http://opensource.box.com/code-of-conduct/)\nopensource@fb.com (https://code.facebook.com/pages/876921332402685)\nso\nopensource@redfin.com ?\n. Why do things by halves?\n. It doesn't help us to mention where Joyent's office is.\n. @davidalber lemme know when you've completed whatever offline review you feel is necessary.\n. can't this effect perf, which effects ux?\n. I would include a link (on the off-chance it ever merges) and a quick explanation of why we need/example of where we use invoke\n. What's the difference between this and .map(Promise.resolve)?\n. should we emit these into the logs or at the error beacon or something?\n. As I understand it, we require our clients to use the same promise library that we use internally (which makes sense), which means that they need to take their own dependency on bluebird.  A week ago, I'd have said that's not a problem, since we'll always be on the same promise library, yet here we are.  Would it make sense to export an austensibly custom promise implementation that is just bluebird stripped down to the parts of the api that we actually use and then guarantee that if you use that implementation (as stored in the monorepo), that you'll always be able to upgrade cleanly between react-server versions (even if we change promise implementations under the covers)?  Or to use a peerDependency to communicate that clients need to use bluebird (and which versions we support)?\n. Yeah, Atom's \"convert spaces to tabs\" function got a little overzealous...\n. Turns out we were missing some rules we should've enabled: https://github.com/yannickcr/eslint-plugin-react#user-content-recommended-configuration\n. and*\n. What is this the version of?  Other lerna-style monorepos (https://github.com/babel/babel, https://github.com/meteor/meteor, https://github.com/emberjs/ember.js) don't do this.\n. You better prepare yourself for my inevitable \"add 400 more badges\" pr, then ;)\n. The downside of pulling them to the monorepo root is reduced portability.  In particular, dependencies that define a bin script have the script added to node_modules/.bin, which is available to scripts defined in the package.json scripts hash.  If I were to pull this dep to the monorepo root, I'd have to specify a path to the bin script (i.e. ../../node_modules/.bin/rimraf), which would break our scripts for developers on windows machines.  A gulp solution would require me to add gulp devDependencies to packages like babel-preset-react-server, which seems pretty heavyweight to me.  I'd love to be able to use rm -rf directly, but again, windows.  I also considered adding a monorepo-wide clean script in the monorepo root package.json, but it was unclear to me how to ensure this was called on publish, and I like confining the build logic (as much as possible) to each module independently.\n. I would link to http://npmjs.org/package/react-server-cli ; the easiest way to get started is not to learn about how monorepos work.\n. I would move the sentence at ll 15 to after \"Do it!\" -- it explains how to do smoke testing.  As is, its a little imposing\n. Filed as https://github.com/redfin/react-server/issues/167\n. I don't actually know if the badges are going to work out of the box, because of the monorepo stuff.  I do know that they won't work as instrumented because the redfin fork of this package doesn't exist yet.  I'd like to merge with the understanding that I'll have to iterate, then publish a 0.2.7\n. \ud83d\udc4d   Thanks for adding this!\n. I think this is causing the linter failure that's failing your build; it should be }, {\n. I ran the branch locally to find #207 and when I verified that it made the existing tests pass, I noticed there was still a linter failure.\n. As far as I can tell, we support __CACHE__ and __CHANNEL__ for historical, internal uses, like our ipc for our cluster.  I'm not sure if we plan to release them, but I gather we want to support arbitrary tokens, per #12.  \nI would prefer to document __CACHE and __CHANNEL__ though, in the meantime, since it would be pretty mystifying if someone were to stumble across them; I think my question is how.  My first intuition was to give an example using __CACHE__ and __CHANNEL__ with a destructuring assignment\nlet {name, color} = __CACHE__;\nlet {name, color: {server, client}} = __CHANNEL__;\nbut I'm not sure if we want to make the structure of the tags part of our public api.  The other option (if we decide to keep the api small by only documenting that \"a module context is substituted\") would be to document __CACHE__ and __CHANNEL__ as \"reserved for future functionality\", with the assumption that caching and clustering are forthcoming.  Which do you think is a better approach?\n. const isTheFold = Symbol();\nTheFold.defaultProps = { [isTheFold]: true };\nexport function isTheFold(e) => e && e.props && e[isTheFold];\nis, I think, privater\n. This is awesome\n. I added the key because of this eslint rule that comes from xo-react.  If I understand correctly, its to address this  jsx gotcha.  I believe it addresses the Each child in an array should have a unique \"key\" prop. message I see so often in our React Server implementation.\n. See #230 \n. jsx-boolean-value errors when I provide a truthy value; iiuc, ={true} is no different than providing attribute alone.\n. Should we use the file loader for other kinds of files, like csv and txt?\n. why the switch from es6 modules to commonjs?\n. got it -- you're right, it doesn't make sense.\n. \ud83d\udc11\n. \ud83d\ude80 \n. I'm not sure how I would bring the server down when the tests are done, or how to make it possible to tail the logs in real time in a separate window.  We may very well be able to overcome both of those when execing the server directly; pm2 is not a small dep, and I'd be happy to get rid of it.\n. yup, that's just how yeoman works.  I guess I didn't think to add it to the README because its also what I expect; change lgtm\n. I have to add the exemption due to https://github.com/expressjs/serve-index/issues/56\n. this is pretty unfortunate tbqh\n. These version changes resolve nsp 106, but we can't remove the exception from generator-react-server in this pr due to this nsp issue\n. Despite many hours trying to resolve nsp advisories, I'm disabling it because its broken only on travis (the error looks like https://travis-ci.org/redfin/react-server/builds/139052220).  I've filed a ticket with nodesecurity.io.\n. I make this transitive dependency a direct dependency so that react-server-module-tagger's prepublish script is called; otherwise, we get module not found errors from react-server-gulp-module-tagger and babel-plugin-react-server\n. \"But Doug\", you might say, \"surely setting up a watch mode can't be this simple!\", and yet it is.\n. So, given var hoisting, this isn't actually necessary.  The linting rule would allow this to be at the bottom of the file were it a function declaration, but the simple transformation breaks the closure we use and fails the tests, so I opted for the simplest fix (manually hoisting it), and I'll make this and getName function declarations when I fix #314 \n. Maybe I should add parens because expecting devs to know about order of operations is too much?\n. this technically moves len outside of the scope in which it is used, but :yolo:\n. Turns out just copy-pasting from the node terminal is not the best way to get regression test values \ud83d\ude06 \n. I don't actually know -- xo comes with a reasonable set of defaults and I just took them as-is and called it a day.\n. Its what we use for the generator and the bike share example so I figured it wouldn't be an issue.  Mostly I like it because its really easy to set up.\n. build is passing locally with my lerna built off master (which runs prepublish as part of bootstrap), but not on ci so I tried pulling from master.  However, lerna's master branch isn't a functioning node module, so this isn't working either.  Next, I'll try a lerna run prepublish on ci, but if that doesn't work, we may just need to wait for lerna-2.0.0-beta.24\n. /Users/perry.shuman/Code/react-server/packages/react-server/core/logging/stats.js\n76:10 error Arrow function should not return assignment no-return-assign\n\u2716 1 problem (1 error, 0 warnings)\n[13:22:52] 'eslint' errored after 2.11 s\n[13:22:52] ESLintError in plugin 'gulp-eslint'\nMessage:\nFailed with 1 error\n. \ud83d\udc4d  this is way better\n. react-server startServer is kinda cumbersome, though easily discoverable.  Iirc, you can have as many bin aliases as you want -- would it make sense to have an rs alias by default, or should we leave users to create their own aliases in .bashrc or .zshrc?\n. Maybe use https://www.npmjs.com/package/look-up to look up the file system until you find .reactserverrc and treat that as the root of the project?\n. Iiuc, if you want to break all your react components into modules that export the component, actions, stores &c, this means you'll all agree on the same react and react-server.  Should we also resolve q? reflux? react-dom?\n. Not if you're doing local dev with npm link -- npm can't/doesn't/won't (one of those, not sure which) flatten the dependency tree across multiple modules.\n. doesn't 3001 conflict with react-server-integration-test?\n. I feel like the routes.json format should be stored in the docs, and this should be a link to those docs instead of a code snippet\n. which takes precendence, .reactserverrc or package.json?\n. brew install openssl?\n. run?\n. run?\n. We might want to consider using VError for our custom error classes\n. I thought we were trying to set the pattern of import {logging} from 'react-server'; const logger = loggin.getLogger(__LOGGER__);?  Or is that a non-goal?\n. I'd prefer spawn, personally -- we're using babel afaict, so you can use async/await w/ promises to smooth out the pyramid of doom.\n. yes please\n. should we init with a single page/route?\n. spawnSync('npm init --yes') seems more reasonable than a config error\n. https://nodejs.org/api/fs.html#fs_fs_accesssync_path_mode ?\n. that thing with the destructured import\n. Maybe worth adding a CompilationError?\n. ${process.env.NODE_ENV ? process.env.NODE_ENV : 'development'}?\n. If we decide to go all-in with good error handling (probably out-of-scope), maybe a ParseError?\n. this should probably go in the manifest\n. :facepalm: I totally thought I was in the README.md. \ud83d\udc11 \n. >  For ordinary errors where stack trace is actually desirable I don't see any need to subclass.\napplies here too\n. docs/testing-ports.md\n. previously, we docker-compose pulled AND docker-compose built, but now it seems like we don't build anymore?  Is that expected?\n. Can this be an else if block?  or even an else block?  clientController.__parentIsListening is set on the first load, as is clientController._previouslyRendered -- are the two separate checks because there's asynchrony and users may perform navigations before we've finished loading?\n. fingers crossed\n. I didn't reuse the second capture group based on this advice from MDN\n\nThe literal notation provides compilation of the regular expression when the expression is evaluated. Use literal notation when the regular expression will remain constant. For example, if you use literal notation to construct a regular expression used in a loop, the regular expression won't be recompiled on each iteration.\nThe constructor of the regular expression object, for example, new RegExp('ab+c'), provides runtime compilation of the regular expression. Use the constructor function when you know the regular expression pattern will be changing, or you don't know the pattern and are getting it from another source, such as user input.\n\nThe benefit of using a pre-compiled regex is ~10% -- if the code reuse tradeoff seems worth the lost performance in the default case, I'm more than happy to make the change.\n. @gigabo like this?\n. we want it to replace the outer REPLACE_TOKEN. \n. Yeah, which is why the if (config.token) { ... } check guards against replacing it\n. new diff\n. this feels like a bug in react-server-cli, tbqh\n. This is a react-server example, keep it as simple as possible.\n. So, the error was Module not found: Error: Cannot resolve module '..pageshello-world' in C:\\mydev\\reactserver__clientTemp.  What sticks out to me is that there are no slashes in the error message at all, which makes me think that the / is being interpreted as an escape character.  I'm hoping that path.join has the logic to do the right thing.\n. Isn't it a lot of overhead to add a whole new file to eliminate one flag?\n. I just slapped everything into the json that I could find on this -- lemme know if I missed anything.\n. @roblg Thanks!  I've removed _agent and added _cacheWhitelist\n. The module is named q, but I thought we use a patched version called cls-q\n. https://github.com/redfin/react-server/issues/680\n. https://github.com/redfin/react-server/pull/683\n. https://github.com/redfin/react-server/issues/681\n. You're missing react-server-cli as a dev dependency, so npm start horks if you don't have react-server-cli installed globally (which is nice if you have multiple react-server projects using different versions of the cli).\n. Iirc, its not that routes.json doesn't work on Windows, its that windows uses \\ where everything else uses / to delimit file paths fail, so while using a routes.json you have to provide Windows-compliant file paths or POSIX-compliant file paths, and that path.join smooths out those differences. It has been 3 or 4 months since we were dealing with the Windows failures, though, so it may have been something else that was horked -- I can pull the line if we wanna roll the dice.\n. I'm pretty sure we want to keep the debug target for test pages -- it's purpose is a place to repro and debug issues.\n. Looks like the indentation is off here\n. Out of curiosity, is there a deps that needs escaping, or is this defensive in case we add one? I think the change is good either way\n. I think I'd prefer this TODO in an issue, rather than the doc itself. oooo I'd never heard of recluster before, but it seems like it fits in to the ecosystem really well, and fills a pretty big gap.  Do you think we should ship with a recluster config out of the box?  Or add a react-server-recluster module to the monorepo?. additional*. I think I would move this example to a \"putting it all together\" section at the end, and slim down this example to focus on only a few environment-specific examples -- this feels like a lot of concepts to introduce at once, and might make it hard to focus on the part that you want them to focus on.. The thing you're referencing is ~185 lines away, which is a long way to scroll or a long time to remember.  I think I'd add another example here.. I wish it was that nice; optString also requires the parens from the function invocation; e.g. \nconst label = arg.properties[0].value.value;\nconst options = JSON.parse(loggerSpec({ filePath, trim, prefix, optString: `{( label: ${label })` }));\nI deferred implementation, though, since I'm unclear what the better change is: should I change the loggerSpec api to take an options object, or should I use babel-generator to turn the ObjectExpression I have in hand from the AST into a string, put some parens around it and pass that to loggerSpec.  Both have downsides: the first introduces a risk of regression on all the other module taggers, and introduces a breaking change; but the second introduces a dependency I shouldn't really need (and using a code generator in a code generator feels... dicey).. yeah that hack was pretty hacky.... hypothetically, someone could be using react-server-module-tagger directly. :+1: . I can't quite tell because babelification messes with line numbers, but it looks like the problem is that you're not returning the require.ensure result.. I added a test case for single quotes.  I'd be okay with postponing multiline options until we have more than one key supported by logger options (which might make it unreasonably difficult to maintain a reasonable maximum line width) or there's a concrete need for it -- what do you think?. I've added a test case. I don't understand this at all -- you just declared specGlob? How can it have changed already?. This doesn't seem right.. how do those changes affect us?  and why didn't the automated tests catch the problems?. . the fact that case sensitivity matters smells to me. don't leave in commented-out code without an explanation. Can you add some failure cases here too?  E.g. doesn't respond to a POST request when configured with PUT only &c.. \nWhat about the other http methods (CONNECT, OPTIONS, TRACE)?  I feel like we should at least have a default case to emit a warning or error or something.. prefer native promises -- no need to take a dep. Maybe it would be easier to read if you used a forEach?\nObject.keys(this.stateWaitMap).forEach(stateKey => {\n  if (stateKey.promise.isPending()) {. new Promise().... Promise.all().... nit: include the braces here. prefer a symbol for this, e.g.\n```\nconst rootProviderSymbol = Symbol();\nclass RootProvider extends React.Component {\nstatic isRootProvider(elem) { \n    return elemrootProviderSymbol;\n  }\n}\n``. :frowning_face: . why disable the linter for all these?. maybe toss a react server mention in there?. I think it might be self-evident its a package, so maybe just \"Redux support for React Server\"?. should we have a warning or error or something for the default case?. I always get a little skittish whenundefinedandnullare treated differently; is there some way we can consolidate them?. Destructuring with defaults doesn't seem to be supported in node 4.0.0 (at least in my little experiment in the repl just now), so I don't think you'll be able to use it before you require babel.. hmm... babel users can also put their [configuration in package.json](https://babeljs.io/docs/usage/babelrc/#use-via-package-json).  I _think_ we currently support that; does this change break that?. Why are you removing the ability to override dir?. \"Path to a directory that contains configuration files...\" (right?). Make sure to add\"private\": true` so this doesn't get published to npm inadvertently.. \ud83d\ude06 . \ud83d\ude06 . Apache 2?. out-of-scope: should we update all of the modules to point to react-server.io as their homepage?. ",
    "davidalber": "Thanks for jumping right in, @aickin! We have added a CLA and integration to this repository since you opened this PR. Please take a look here.\n. @gigabo: Definitely.\n. CLAassistant is looking at the usernames of the committers, not the username of the PR creator. You committed with the @redfin-andrew-bartkus account, so that's the one that needs to sign the CLA.\n. @gigabo: Not to make the react-server-website app launch. I'm not sure if something else is broken that needs this.\n. This change is duplicated in the already-merged #358.\n. How obsessive do we want to be with this? Take a look at this and consider the answer.\n. I opened #452 to track getting hashed assets working again.\n. Seemingly not. I tried using the following patch in react-server-website/package.json.\ndiff\n@@ -5,8 +5,8 @@\n   \"main\": \"HelloWorld.js\",\n   \"private\": true,\n   \"scripts\": {\n-    \"build-assets\": \"npm run docs && node ./cli.js --compile-only --minify\",\n-    \"start-prod\": \"node ./cli.js --port 3010 --minify --js-url /assets/\",\n+    \"build-assets\": \"npm run docs && node ./cli.js --compile-only --minify --long-term-caching --js-url /assets/\",\n+    \"start-prod\": \"node ./cli.js --port 3010 --minify --long-term-caching --js-url /assets/\",\n     \"start\": \"node ./cli.js --port 3010 --js-port 3011\",\n     \"test\": \"eslint routes.js gulpfile.js pages/ components/ && nsp check\",\n     \"docs\": \"docco -o docs ./components/*.js ./lib/*.js ./middleware/*.js ./pages/*.js *.js && node build-dir-contents.js\"\nThe same issue occurred.\n. This was resolved by #517.\n. We are going to want a different email for Slackin. Before setting a name in Slack on the account, this is what the email from Slack looks like after submitting the form:\n\nAfter setting a name, the email was still present.\n. Better!\n\n. I created checks for https://react-server.io/ and https://slack.react-server.io/ in Walk Score's Pingdom account. This will alarm to us internally and to the #alerts channel in React Server's Slack organization.\n. There are a couple things:\n1. Some NGINX configuration needs to be done to turn the connection into a WebSocket. See here.\n2. ELB does not support WebSockets. \ud83d\ude1e See below.\nThe WebSocket is used by Slackin to show the number of users on Slack in the badge in realtime. The realtime badge updates work in spite of the error because socket.io has a fallback mechanism. Still, we have the error in the console.\nThere are options to make the WebSocket work, but ugh. These mostly are the same:\n- https://blog.jverkamp.com/2015/07/20/configuring-websockets-behind-an-aws-elb/\n- https://gist.github.com/obolton/071be4c926f9cf0b6fd8\n- https://www.built.io/blog/websockets-on-aws-s-elb\n. I've removed the use of the WebSocket from the Slackin that we are using. That was done in a fork I made (see here).\nI deployed this last night after realizing the operational impact that the WebSocket errors were having on us with high traffic. I haven't investigated why, but each client was making many more of these requests than we previously observed. That was overloading the service. We had a baseline of load balancer 5xx responses with some spikes yesterday. That all went away after this change was deployed.\n\nWe were getting tens of thousands of these requests per minute. You can see the drop in requests when the deployment was done.\n\nThose request counts now that are just under 10,000 per minute are mostly 4xx responses:\n\nChecking the logs, the vast majority of those are the socket.io polling requests. Here are our 2xx responses:\n\nI don't see any socket.io requests when I load the site now. Given that, and a little reinforcement from the general downward trend of the 4xx line, I conclude that those requests are coming from browsers that loaded the site -- and remain open -- from before the updated Slackin service was deployed. It's a surprising volume!\nI will keep watching it independent of this ticket.\n. Relevant information:\n- http://nginx.org/en/docs/http/ngx_http_gzip_module.html\n- https://www.nginx.com/resources/admin-guide/compression-and-decompression/\n. > @davidalber Is that configurable with nginx?\n\nIf it is, it isn't immediately obvious, but I don't yet believe that it's not configurable.\n. Here you go: https://community.letsencrypt.org/t/ocsp-requests-to-identrust-com-slow/16992.\n\nHere's their ticket for it (now closed): https://github.com/letsencrypt/boulder/issues/1929.\n. I've switched us to use AWS ACM, not really due to this issue, but because it simplifies our setup. As a result, this issue no longer impacts us.\n. That's funny. I was positive I had addressed this in the commit message, but it's not there.\nWhen I committed this I planned to call this out and say that it is on my list for a subsequent commit. It's a little more detailed than just \"run this command\".\n. Well, you don't have to merge it. I'm the only one impacted by this right now anyway.\nI'll create this again when I have a chance to document it.\n. @doug-wade: I created #499 to update the port testing manifest with the website's ports.\n. > I think it can also be an unmodified container that specifies the command in the compose file.\nThis part is no longer true. We modified Slackin in #487 to not use a WebSocket.\nI will still publish the image to the reactserver organization in Docker Hub.\n. I thought the text would overwhelm the existing content in the README, so I made these changes:\n1. Left a comment in the docker-compose.yml file to direct viewers to the file mentioned in the next point.\n2. Moved most of the content into a new Markdown file dedicated to documenting the use of Docker Compose for the website (running-with-docker-compose.md).\n3. Put a small blurb about it in the README and linked to the new Markdown file.\n. Deployed.\n. This is cleanup and modification to the deployment. Merging immediately.\n. Deployed.\n. Deployed.\n. How do we feel about deploying a new version of the website while this bug exists? I couldn't detect any usability issues, but I didn't look very thoroughly.. Thanks, @drewpc!. Yeah, there are a couple other changes that are waiting for a deployment. I've been meaning to ask a question in #840 about how we feel about that, which I just did here.. The content on react-server.io is queried from GitHub. If you update the appropriate docs in the repository it will be reflected on the site within one minute of merging to master.. I think we should give other people, who are not watching this repository, a chance to weigh in on the code of conduct before we merge.\n. When I go to the code of conduct, the top of the page has this now:\n\n. Done. Ship it! The Contributor Covenant one (c127c1e), that is.\n. I will pin the version on the base image.\n. It is checked in: https://github.com/redfin/react-server/blob/master/packages/react-server-website/provisioning/decrypt_credentials.py.\n. Yes, the build step was an attempt to address #511 before I had reproduced it or understood what was going on. In fact, doing a build there has no effect because we are deploying pre-built images.\n. ",
    "egid": "From my perspective, yes - allowing us to add attributes to root elements solves most of the issue. It still winds up being messier than needed, and I'm sure has some cases where it's not a full solution, but it solves the immediate problem.\n. I helped set up slackin for another project. It's been solid.\nThe only downside, imo, is that popular projects on free plans start losing access to message history very quickly.\n. Blergh, disregard\n. Closing - we got just the pieces we need in a separate PR.\n. \ud83d\udc4d \n. This may take a bit of a refactor of how we do the 2-column source display Docco gets us.\nI'll do some fiddling, and probably have a solution Monday.\n. So, Monday has come and gone. With the display-table setup we use, scrolling is gonna be a bit weird.\nIt might make more sense to switch the whole layout to flexbox and go from there.\n. \ud83d\udea2\n. We could probably fiddle with z-indexes and/or try tricks with visibility: hidden;, but I have nothing concrete off the top of my head. I'll try to get this on my plate soonish.\n. Like I mentioned last night, everything looks good aside from swapping themes on the fly, which updates the props but doesn't apply them to the child components. I don't know enough about styled components to provide any meaningful help with that, though.. Good call, that fixed it. Working as expected!. We weren't ever actually using it!\n. ",
    "kcjonson": "Yea, that solves the technical problem.  Still feels a bit dirty to have all the extra nodes lying around, but if its going to open a can of worms we can move on.\n. \n. There are a couple things in this list that get me excited.  As you may expect they're around HTTP/2, Bundling, and CSS.  However, my hunch is that we should carefully consider the order in which we take a look at a couple of these.  Heres my two cents:\nPort to webpack 2 with tree shaking\n- Tree shaking is awesome but good linting goes a long way for blocking unused imports, especially if everything is on ES6 syntax :wink: \n- Seems like we should do this before we look at RootElements having their own CSS.  Highly theoretical but we could use the new System.import syntax to write CSS dependencies in as RootElements are encountered, or even resolved.\n- If we're planning on upgrading to webpack 2, seems like we should do it first since there were \"major changes\" to the resolver which might effect other work.   However, its in beta so are we ok with the following items being held up by it?\nAdd support for HTTP/2 with server push\n- When we took a look at this one at a Hackathon, Redfin was limited by our CDN, Akamai, on actual HTTP/2 deployment.  I'm SUPER SUPER excited about HTTP/2 and the benefit for end users, so I'd love to help out with this in any way possible.\n- For this generic body of work, do we want to consider killing CSS and JS bundles for HTTP/2 requests?  We'll still need to look at the dependency tree for a given route so that we know what to push, and we'll probably still need bundles deployed for non HTTP/2 browsers.\n- What does this mean for our loaders on the client?  How does it relate to the other work item of allowing RootElements to have their own CSS?\nAllow RootElements to each have their own CSS\n- This seems super dependent on webpack, so we might want to do the Webpack 2 upgrade first.  Highly theoretical but some approaches to this may have us using dynamic expressions in System.import \n- Do we still use webpack to create the common chunk?  How does the work across routes and root elements?  If each root element is an entry point then the only things that would end up in the common bundle are things that appear in every root element, which is most likely not the behavior we want.\n- Do we still use webpack to compute the list of dependencies for a given root element?  A first baby step could be to get webpack to create a bundle for each root element and go from there.\n- Are the <link> tags for each file in the entire css dependency tree for the root element written into the body before the element?  Would be messy to look at but in HTTP/2land it may be the right answer.\n- Related note: Recently @roblg took a look at moving the LESS processing and preamble prepending out of webpack into a gulp step which could in theory reduce the complexity of Redfins webpack config and afford us more flexibility when it comes to implementing HTTP/2\n. Re: CSS Modules or PostCSS\nWe should be clear exactly what problem were trying to solve here.  The most dangerous thing about css is that all selectors on a page are essentially global to all components.  Selectors from any stylesheet can target any dom node on the page. This is bad for scale software projects that have more than one or two people working in the css.\nWe currently solve this purely by convention.  Our convention to make things simple for devs is that we match three things.  Forgive the pseudo code below.\nFilename: /common/Button.js\njavascript\nimport './Button.less';\nexport default class Button extends Component {\n   static displayName: 'Button';\n   render() {\n      return(<button className='Button'>...</button>);\n   }\n}\nFilename: /common/Button.less\ncss\n.Button {\n  color: blue;\n}\nThe first thing I see with this is that the string \"Button\" appears seven times.  Lets count them:\n1. The name of the JS file\n2. The name of the LESS file\n3. The import statement of the less file\n4. The javascript class declaration\n5. The component display name\n6. The className on the root element of the component\n7. In the stylesheet as a parent of all selectors\nOur convention is to keep them all in sync.  We teach all new hires that they should be in sync by verbally telling them or catching the pattern in their first pull requests.  We really haven't even documented it anywhere (which is totally my fault btw)  This is certainly a broken system in my opinion.  It's learning process is broken, there are no tests to enforce it, and major regressions are regularly caused when its not adhered to.\nNow that we're all pissed off at how silly we're being with CSS  and how much work we're causing the devs just trying to do daily feature work , what can we do about it?\n- We could create our own base module or build system that does things such as automatically adding its classname to the root element of the template, setting its display name to its class name, and possibly even importing a less file that has the same name and is a sibling.\n- There are also a systems that automatically create and apply a unique class name to the root element of the component and wrap the components css file with the same selector. Webpack and CSS modules can sorta do that, but its not 100% automatic, most that I've seen still rely on some sort of :local { syntax in the css.\n- I would support a linter setting that insists on keeping all seven of those names matched up as a matter of convention if we don't build an automated solution to match class names and selectors up.\nSo, you mentioned PostCSS of which the most relevant part to trying to solve the aforementioned problem of styles seeking into the global scope is the react-css-modules plugin.  Its base webpack only implementation is such:\njavascript\nimport styles from './table.css';\nexport default class Table extends Component {\n    render () {\n        return <div className={styles.table}>\n            <div className={styles.row}>\n              // More stuff here\n            </div>\n        </div>;\n    }\n}\nWhich results in:\nhtml\n<div class=\"table__table___32osj\">\n    <div class=\"table__row___2w27N\">\n        <!-- More stuff here -->\n    </div>\n</div>\nA couple things that I see about this approach.  It certainly does solve the problem of styles leaking into the global scope, which really should be our number one issue.  Still, there is a lot of convention, and a it doesn't really solve anything about the dev annoyances either. I don't personally find it easier to understand or reason about, but I could see myself getting used to it.  There are a couple things you can do outside of webpack in the JS code to clean it up a bit, but I still find it a bit cumbersome and messy.\nTo be perfectly clear, I do believe that adopting react-css-modules will reduce the number of global style regressions at Redfin.\nSo, here's where I'll add some controversy and some open questions.  To me, most of solutions out there don't do enough to solve the dev annoyances part. Here is an extreme proposal, that addresses all of the issues that I have mentioned above.\nSource Files\nFilename: /common/Button.js\njavascript\nexport default class extends Component {\n   render() {\n      return(<button>...</button>);\n   }\n}\nFilename: /common/Button.less\ncss\ncolor: blue;\nor alternate syntax \ncss\n:local {\n    color: blue;\n}\nGet transformed at build time into:\njavascript\nimport './Button.less';\nexport default class Button extends Component {\n   render() {\n      return(<button className=\"Button x0ns8\">...</button>);\n   }\n}\ncss\n.Button.x0ns8 {\n   color: blue;\n}\nWhich ultimately outputs:\nhtml\n<button class='Button x0ns8'>...</button>\ncss\n.Button.x0ns8 {\n   color: blue;\n}\n- I don't think that everyone will like this, because its too damn magical. \n- The source JS is still a 100% valid ES6 module, there aren't even any special imports or syntax.  It won't have any styles on it if its used directly.  If we want to swap out for other build processes in the future, our entire codebase isn't caught up in a syntax that is very specific to a particular loader or transpiler. \n- The javascript class name should be automatically added to the root dom node, all other classes need to be left there too.\n- A unique id should also be inserted as the base class, but not with any weird underscore syntax or duplication.  I find table__row___2w27N incredibly janky.  I feel strongly that we should allow people to write normal global css and those crazy custom class names make it impossible, we really don't want to lose the ability to provide good global defaults on things.\n- If a dev really wants to write the declaration as export default class Button extends Component we should totally allow that, its more correct.\n- If the default export is anything other than anonymous or \"Button\" there should be a linter and build failure.\n- The import statement for the CSS will be inserted automatically if there is a css file of the same name as a child.  Other css import statements will be allowed and treated as normal.  Manually importing a file of the same name should also work.\n- The css file should be wrapped in a selector that targets the javascript class name and the unique identifier.\nAnyway, those are my initial thoughts, but I'll let people chew on that for meow.\n. Thanks Doug!\n. \n. I'm leaning towards having red in the color as a hat tip to Redfin.  That said, I like the \"slots\" graphic element a bit more than just \"dots\"\n. I was able to use the spdy module to get an HTTP2 example together with express, code here: https://github.com/kcjonson/http2-boilerplate/tree/master\nEdit: link to spdy: https://www.npmjs.com/package/spdy\n. Likewise, I think we may needs parts of this work for client side transitions.  I'm imagining that we use prefetch to grab the CSS bundles eagerly for some set of routes so that when a client transition occurs its a seamless transition.  The hard part is determining which ones should be prefetched...\nEdit: Found #77 which is pretty much this.\n. Proposed fix in #532 \n. Good catch on the transition bug, will address that and moving the tagName out of attrs which was a dubiously good decision to put them there in the first place.\nWill put some time into the playground too, as you know CSS/HTML is my jam.\n. Yea, its a kinda ugly bit of code.  No harm arises by putting the attribute on the node, but its redundant information because the node with be of the type specified so I chose to exclude it.\n. Yea, I was waffling a bit on that one, flipped a coin and came out this way.  I think I agree with you that the other way is easer to read.\n. ",
    "dtothefp": "@gigabo did you ever get this figured out, my lerna bootstrap in a module I'm creating completes but fails to link the packages. Wonder if you have some insight?\nhttps://github.com/dtothefp/build-boiler\n\n. @gigabo so this is happening to me when only one package updates, and it isn't boiler-utils so the version should be correct in the package.json of the updated dependency. I'm a little unclear about what is actually happening here? To me it looks like the npm link is failing all together but I'm not sure?\n. ",
    "drewpc": "This is no longer noisy.. The separation that I see between these two is that .reactserverrc allows me to configure react-server whereas the config.js stuff allows me to configure my own application in an isomorphic fashion.  Meaning: they accomplish two different things.  There's been no further action on this in almost a year, so I'm closing this.. Can we merge this into a WIP branch for @aickin, give him edit rights to that branch, and close this PR?  Travis will still pickup builds on pushes to that branch and it will cleanup the PR list.. @doug-wade sweet.  Closed!  It can easily be reopened if needed in the future.. @gigabo I'm confused: was this issue addressed & merged in #168?  Or is there more work to be done?. Already completed.  The link is in the main navigation header and points here: https://react-server.io/source. Webpack 2 is out of beta now...maybe worth taking a look at migrating from Webpack 1 to Webpack 2 and using the tree shaking stuff there: https://medium.com/modus-create-front-end-development/webpack-2-tree-shaking-configuration-9f1de90f3233. @doug-wade thanks for the shout out!  Unfortunately....that super awesome PR was kinda thrown out.  I'll need to rewrite it anyway.  There's a number of architecture decisions that need to be made first, including when/if to move to Webpack 2.. @aickin Are you still working this on the React core side?  Both of the mentioned PRs look outdated and have merge conflicts.. Okay, thanks for the update.. Solving this issue and addressing the breaking changes when upgrading routr from 0.1.3 to >1.0 need to be addressed prior to the next release.. Fixed!. Can we restart this after #833 is merged?  The dependency node-inspector is what was causing the build to fail before--no node-gyp.  That dependency was removed a few weeks ago.. @doug-wade \ud83e\udd41 \ud83e\udd41 \ud83e\udd41 and?. Try changing node versions: nodejs_version: \"7\".  The builds install fine for me, it's the tests + CRLF/LF issues that are the problem.  The Babel tests rely on generating a file and comparing it with an expected.js file in the repo--which has CRLF.  The generated file has LF.  Here's the Appveyor output: https://ci.appveyor.com/project/drewpc/react-server/build/1.0.1\nIf we change the settings and have git checkout every file with LF automatically, lint blows up:\nhttps://ci.appveyor.com/project/drewpc/react-server/build/1.0.1\nEither we go through each test and make them all work on multiple platforms (huge pain) or we disable  lint somehow on the Windows tests.. Closing this PR since there is no movement.. This line in the code shows where the problem is.  It seems like there's not really a good way to work around this without a change to react-server because of the http vs https check on that line.  One change might be modifying the offending line to look like this:\noptions.outputUrl = jsUrl || `//${host}:${jsPort}/`;\nAnother option for changing this would be to consolidate the HTML and JS servers as described in #807.\nAdditionally, you would need to change your host parameter to be 0.0.0.0 so that the Javascript loader pulled the JS/CSS files from the browser location instead of hardcoding to localhost.. @girvo There's an example of how to do this on the Running a Production Server guide.  On the client side, the config object is rehydrated automagically for you.  All you need to do is use the config() function inside a React object instance instead of at the root of a module.. @doug-wade can we close this PR if it doesn't resolve the issue?. I have a fix!  Turns out this is the problem: https://github.com/redfin/react-server/blob/master/packages/react-server/core/ReactServerAgent/Request.js#L236. The next release of react-server will include a fix to handle the issue described here.  After it is released, please try it again and let us know if there are any further issues.. Yes, because it uses a protocol relative request now.. This has already been merged.  Closing.. @dsdharam91 It's totally possible!  Do you want to take a look at the existing examples and develop a new example showing this?. @mocheng Thanks for the contribution!  This PR has been sitting out there for a while and still needs to be fixed so that the tests passed.  I'm closing it until you can fix the test issues.  Feel free to reopen after that!. 0.4.9 still isn't published, but everything else is up to 0.4.13.  Thanks!\n. @gigabo What is the intended action to take after detecting IE8 & IE9?  I think that's important to add if we're going to \"resolve\" the TODO items in this function.\n@devoiddesign Thanks for the contribution!  Can you rebase with master and work through any issues with the build?  Once we have a good way ahead on what action to take after detecting IE8/IE9, we can provide feedback and then merge.. Closing this PR after no forward movements.. I tracked this down a few weeks ago and concluded that react-server uses Webpack to produce the client side version of an isomorphic app.  If you look here you'll see the webpackConfig code that is used to compile the client.  Therefore, expecting Webpack to process require statements on the server side is not valid.  After I get to a stable point in my app over the next few weeks, I'm going to tackle this because I have the same problems.\nMy temporary solution was to use nginx as a fronting HTTP server for my static assets and reverse proxy connections to react-server.\n. Looks like I should've read through other issues before spending a bunch of time experimenting with this!  See the comment here\n. @doug-wade I appreciate the offer to update the documentation.  I think time would be better spent adding Webpack to the server side.  With an isomorphic app, the more in sync server/client features are, the easier it is to grasp.  In my case, I was trying to use a third party, non-React JS library and spent hours trying to figure out why none of the Webpack loaders were working on the server side.\n. @aickin great article & reminder...I think this is still a good review to do.  The serialize-javascript library suggested in the article looks like a great option.  I could see issues with these areas:\n\nhttps://github.com/redfin/react-server/blob/master/packages/react-server/core/ReactServerAgent.js#L101\nhttps://github.com/redfin/react-server/blob/master/packages/react-server-core-middleware/src/coreJsMiddleware.js#L28\nhttps://github.com/redfin/react-server/blob/master/packages/react-server/core/logging/response.js#L76\nhttps://github.com/redfin/react-server/blob/master/packages/react-server/core/ReactServerAgent/Cache.js#L193\nhttps://github.com/redfin/react-server/blob/master/packages/react-server/core/renderMiddleware.js#L552. Maybe this is a bit off topic, but I'm for anything that makes the client and server sides mirror each other.  If Webpack is used for the client side, it should be for the server side as well.  It seems easier to understand/develop a truly isomorphic app if the client and server are as close to the same as possible.. @gigabo I'm new to Webpack as a whole--not an expert!  From what I've read and messed around with in planning my current project, you can generate Webpack chunks for the browser and for use in node in a server environment.  It would be pre-compiled, pre-babelified, etc.  Here's some links I was looking at a while back:\n\nhttps://webpack.github.io/docs/configuration.html#target\nhttps://www.npmjs.com/package/universal-webpack\nhttp://jlongster.com/Backend-Apps-with-Webpack--Part-I\nhttps://medium.com/@ad_harmonium/build-to-both-electron-js-and-browser-targets-using-webpack-59266bdb76a#.orvlc5bi7\nEssentially, I see moving to Webpack on the server solves three problems:\n1.  Consistency between client/server (i.e. \"requiring\" SCSS/images)\n2.  Handles pre-babelify case\n3.  Facilitates server-side HMR\n4.  And, if my spidy-senses are working right, we can remove the second port react-server uses to serve module updates and do it in a single server.. I can think of two that I'm considering/researching right now:\n\nIt seems like Webpack will output two separate sets of libraries (one for client and one for server) depending on what the output target is.  That could lead to a duplication of assets (like images, CSS, etc).  I'm looking into what people do to address that now.\nThere might be a performance penalty of using babelified code in a modern version of Node.  This is just a theory--no data to back it up.  I can imagine someone writing a kick ass app in ES6 or ES7, running it on the hottest versions of Node and React and then Webpack transpiles the code down to (essentially) a lowest-common-denominator version.  Having said that, maybe that would be a reason to keep Webpack outputting two sets of libraries.  We could keep the server side at a more recent Javascript version and dumb down the browser side.\n\nSorry...my fingers are typing the stream of consciousness as I think this through.... @jhnns I'm working on adding this capability right now and would love your input when I submit the PR in a few days.  I'm still refactoring the code based on conversations on Slack, but here's the diff as it stands now:\nhttps://github.com/redfin/react-server/compare/master...SoprisApps:patch-server-side-webpack. Sorry for closing, I didn't realize this was moving to camelCase and dash-delimited for both sets of configs.  Open again!. Fixed.. @jhnns I'd love to discuss this further on Slack if you have signed up.  A couple of points that I'd like to respond to:\n\nThere are two reasons I chained the two compile processes together (listed below).  I do not want them chained together...parallel is much better\n    a.  webpack-dev-middleware only supports one compiler output\n    b.  As of right now, the server compilation requires the chunk manifest from the client compilation.  I want to do some more testing to see if I can rip that part out and not make them dependent on each other.  That's part of why I asked for some assistance in that area.\nI don't want to use webpack-dev-server because we don't need to have applications listening on different ports (it creates complexity where it doesn't need to be).  We can use webpack-dev-middleware and accomplish the same goals--combining the WDS and AS components from your diagram.  That also allows us to use relative URLs in various places, which further reduces complexity.\nI added the WWP component from your diagram already, but I was only watching for changes to specific react-server files such as .reactserverrc and routes.js[on].  If I remove the chain between client and server, I can still use the webpack-dev-middelware compile event notifications to trigger a compilation of the server code, therefore not needing a WWP component that is different than what I already have now.\n\nCan we achieve the same concept that you're recommending by adding webpack-dev-middleware as a forked process to ExpressJS?  That way it's still \"middleware\" but in a separate process?  The server-side compilation can definitely be forked.. @jhnns I'm all for your suggestions, thanks for helping out!  Here's my defense of webpack-dev-middleware over webpack-dev-server:\n\n\nThe middleware component is written by @webpack as well.\n\nThe dev server component uses the middleware component for all of the actual compilation (see https://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L53)\nI assume  react-server is using webpack-dev-(server|middleware) for the file watching + compilation, not necessarily to have an additional TCP port to listen on.\nI TOTALLY agree that having this in a separate process would be better for CPU utilization.  Can we do this without listening on a  separate TCP port?\n\nI'll look at detaching the server side compilation so that it runs in parallel instead of in sequence today.. trivago/parallel-webpack has some nice features on creating multiple Webpack variant configurations that could be useful.  It doesn't hook into webpack-dev-(server|middleware), so you don't get some of the in-memory and direct HTTP serving stuff, but it could be a good fit in other areas.  I'll look into the worker-farm stuff too.  That may be the best way to fork at least some of the compilation stuff.. @karlhorky There's some discussion about how to move forward with some of the ideas that I've proposed in this PR.  That and I kinda went \"big\" here, so it's harder to validate that it won't completely break everything.  Have you tried beta testing this patch in your project(s) to see if it works well for you?  I know I'd appreciate that!. Lots of great discussion on here.  In an effort to shrink the complexity of all this, I will close this PR and break it up into three separate PRs: replace webpack-dev-server with webpack-dev-middleware, server-side HMR, and then multiple webpack configs.. @jhnns Okay--I give in.  I'll try to refactor that PR so that it uses webpack-dev-server, still uses a single web server, and doesn't need to know the hostname/port in the client entry script.. @karlhorky Awesome!  Let me know if there are any issues and I can help work through them.  I closed this PR because there were some changes that I suggested which may not be the right direction for where we want to take react-server.  The end result of server-side Webpack is the right direction, but this may require some refactoring.  #809 has been integrated into the master branch as of yesterday.  #808 is still being discussed.  The rest of the changes that are not included in #808 and #809 are still in this branch.  Specifically, the rely on the changes in #808, so it would be very hard to completely separate the two.\nMy recommendation would be to continue using this branch until we decide on a new architecture approach (should be a few days/weeks).  Then I'll refactor this branch to use the new architecture.  Does that help?. Isn't this a duplicate of #33? Maybe the name of that issue needs to be changed to something more descriptive.. Looks good, thanks!. I forgot to add a 'normal' values check!  I'll do that now.. No changes since I submitted the PR.  I saw that there were merge conflicts based on the latest dependency changes in the master branch and resolved the conflicts.. @aickin Fair point.  I imagine that this was an unintended side effect instead of an architecture decision, don't you?  I agree that simulating CORS issues prior to moving to production is important.  Do you think that many people realize that myhost.com:3000 and myhost.com:3001 are considered different origins?  I didn't until I looked it up to determine what was causing certain issues.  I'd say its not obvious and therefore wouldn't be expected when someone sets up a simple HMR environment.  Just my $0.02.. My initial thoughts were that this secondary port was an unintended consequence of trying to use webpack-dev-server in combination with the application server itself.  Therefore, this issue & PR was to remove that and consolidate the servers to make it simpler.  I figured the CORS issue (or feature) was a side effect of whatever the architecture decision was.  If the consensus is that the architecture decision was to introduce a server with a different origin in order to simulate client code being served from a CDN, then that's a whole different thing.\nI'm gonna bow out of the discussion.  As the project maintainers, you all need to figure out what architecture decisions make sense in the long term.  My contributions are simply suggestions.  If consolidating servers is not where you want to go, I'll refactor the server side HMR to not rely on this feature and await the architecture decisions on server side Webpack.\nI'm still involved; I just want to contribute things that other people want too!!. FWIW, I refactored PR #809 (server side HMR) and removed the reliance on consolidating servers since this is controversial too!. Closing this PR, pending further architecture discussion.. @jhnns Great point!  I hadn't looked deeply into this until you mentioned it.  I did some basic testing on memory leaks with regard to deleting require.cache entries (modifying this code)  and came to the following conclusion: my server side patch HMR solution doesn't do anything good or bad to resolve those memory leaks.  In other words, if memory leaks exist in the code being required delete require.cache[<module>] doesn't \"fix\" that.  Your solution of restarting a separate process would fix the symptom, but not the problem: memory leaks still exist.\nThe topic of memory leaks would be a great documentation item: patterns to avoid, ways to detect memory leaks, etc.  The page cycle of react-server would be the most vulnerable, especially since it is called for each HTTP request.  I'll have to look into this, but I see it as a different problem than server side HMR.. Maybe something like:\n\nDocumentation changes and bug fixes that include automated tests can be merged by a single maintainer who is not the author.  All other changes must be approved and merged by two maintainers who are not the author.\n\nThat should encourage automated test development in combination with the squash + merge strategy?. Sounds like this change is \"good enough\" for now.  I'll squash && merge. No problem!  It's all happy now:\n$ asini run lint\nSuccessfully ran npm script 'lint' in packages:\n- babel-plugin-react-server\n- generator-react-server\n- react-server-cli\n- react-server-core-middleware\n- react-server-data-bundle-cache\n- react-server-examples\n- react-server-gulp-module-tagger\n- react-server-module-tagger\n- react-server-test-pages\n- react-server-website\n- react-server. @roblg Nope, no dependencies at all.  The only reason that start.js was modified is because ESLint complained about functions being used before they were defined in that file.. Correct.  Thanks @richiethomas!. This makes sense to me now.  We do need to decide on a way forward for cleaning/linting/building/testing packages underneath the react-server-examples directory.. I think this should be a different example rather than a modification of the bike-share example.  This example is great because it specifically highlights how to create an isomorphic call to an API.. @jhnns my understanding was that the calls to /api/network were made through the PageUtil and thus were isomorphic.  After looking into it further, it seems that's not the case, so my initial comment about that was incorrect.. @karlhorky Thanks for continuing to work on this.  Often the smallest changes take the longest time to write tests!  I wasn't so much as concerned with the wording as the question of: why output an error + stack trace instead of something like \"The routesFile specified doesn't exist.  Please create a proper routesFile and re-run this command again.\" followed by process.exit(1) . @karlhorky Agreed.  So maybe a happy medium?  Something like this:\ntry {\n    if (options.command !== 'init') {\n        options.routes = require(options.routesPath);\n    }\n} catch (e) {\n    console.error(chalk.red(`The routes file '${options.routesPath}' failed to load properly`));\n    throw e;\n}. @roblg Yes, definitely for clients of react-server...not internal code.  We can use process.env.IS_SERVER, no issues.  We discussed it on slack and my only recommendation for this way was to make it super obvious to new users how to use that.  We can put it in process.env and document that it's there. and why.. Here's an interest tidbit regarding uglify removing dead code.  Copy/paste the following into the Uglify Demo Page:\nconst a = false;\nif (a == true) {\n    console.log('this is dead code and should be removed');\n} else {\n    console.log('this is live code');\n}\n(hint: output is pasted below)\nconst a=!1\nconsole.log(\"this is live code\")\nWhen you run the compressor, uglify will remove the dead code because a was declared as a const.  If you change it to var, uglify won't remove it.  Neat!  The problem is, we're babelifying the code prior to running uglify, so we lose the const declarations....gah!\nHere are the steps we take now:\n1. In react-server, gulp performs the following task when building client and server libraries: .pipe(replace(\"SERVER_SIDE\", serverSide ? \"true\" : \"false\")).  This replacement creates dead code, but it isn't removed by gulp, babel, or uglify at this stage.\n2. Babel is run on the react-server code, effectively removing all of the ES6 features (like const variable declarations).\n3.  The webpack config includes the uglify plugin, so client application code (including the react-server components) is uglified and dead code is removed only for client side.  Dead code remains in the server side code at this stage.\nIf isBrowser were declared as a const in the package, it would be transpiled to a var by babel and not removed by uglify.  If we could keep isBrowser as a const and let Webpack/Uglify handle transpiling and removing, then we'd be in business!. babel's babili handles it properly%3B%0A%7D%20else%20%7B%0A%20%20console.log('live')%3B%0A%7D) using var, const, and let.. @roblg yeah...after some testing, it seems that you're right.  Importing the variable using require() means that the transform can't optimize it because it's looking at a single file.\nNo, Babili is doing the minification of ES2015 code only...no transform.  If you apply both the es2015 and babili presets, however, it does both.  See their blog post for more info.  Kinda neat!. I'm going to close this and put together an \"architecture decision record\" instead.  This should be implemented after server side compiling/Webpack is finished to meet all of the requirements.. Dup of #534 but this also identifies other issues with paths on UNIX such as ' or \" in them.. This also fixes #534.  I tested it specifically on Windows and it's working like a charm.. @roblg I can try to refactor that using a mock.  That would be much cleaner, you're right.. Finished refactoring the PR to use a mock of callerDependency instead of mangling it like I did before.  Thanks for the ideas, guys!. Lemme check it out on my end.. This also fixes #649.. @roblg I think the latter: publish a HUGE notice that the bug identified in #312 was squashed and it everyone should check their routes to make sure they are explicitly specifying what the kinds of methods they expect.. What's the consensus on changing the default methods from 'get' to ['get', 'head']?  I'm happy to drop it if you all think it's weird.  Users of react-server can certainly implement it themselves if you think it would be an unexpected default.. @doug-wade run the following two commands:\ncurl -I 'https://api.citybik.es/v2/networks/opole-bike'\ncurl 'https://api.citybik.es/v2/networks/opole-bike'\nThe first one performs a HEAD request.  The second one performs a GET request.  If you have a fronting server like nginx, it makes it even weirder because the fronting server can transform the HEAD request into a GET request and then strip the body itself!. @doug-wade @roblg Looking at the latest version of routr, their matching algorithm is here.  If we remove all of the defaults, then it routr will match any method and it wouldn't be such a huge breaking change.  Thoughts?. The more I think about it, the more I like getting rid of the default.  That's definitely the best option and it makes it sooooo much smoother for our users.. After much discussion, I modified the PR/documentation to show that the default method is now undefined.  That tells routr to match any method.  This is still a breaking change for people who explicitly set method: \"get\" and are trying to do POST, HEAD, PATCH, PUT, etc methods to the same route.  It won't be a breaking change for those that left method unset.. @gigabo I updated my previous previous comment slightly for further clarification.  May still hork Redfin \ud83d\ude09 . I haven't looked into this yet because I'm working on an enhancement to ReactServerAgent right now, but when I was working on #869 I ran into this same error with react-server-cli.  You can see my basic fix here.  Essentially, what I found was that react-server-cli broke the promise chain in this line:\ncli.parseCliArgs().then(cli.run).catch(console.error);\ncli.run for all commands except start had an implicit return value, so the promise chain continued without issue.  The start command, however, returned an object structure instead of a promise.  So, I slipped in a little fix that returned the started promise if the command was start, otherwise it continued to do the same thing as before.\nThis might fix the issue that you're seeing in the website package as well.  FWIW, it took me about an hour to track the issue down.. Fixed in #882 . @gigabo @doug-wade @roblg If this is something that a dev can install with npm install react-server and use with Chrome simply by opening up some magic plugin file from the node_modules folder, then I'm all for it.  If it's a plugin that needs to be installed through the Chrome App Store, then it doesn't make sense to me to include it in everyone's node_modules folder when they can't interact with it that way.. @doug-wade I may not fully understand how the monorepo interacts with the rest of the world.  If it doesn't get included in a normal install, then my comment is irrelevant \ud83d\ude01 . While you're involved in this, it probably is a good idea to look into https://github.com/getify/LABjs/issues/113.  It might address #77 and #253 without much work from this end.  Whoops... @doug-wade was on it and already mentioned this!. @krisxw Thanks!  I have the following in my http { } block.  Based on what you worked through, do you think this would help or be a good addition too?\n```\nhttp {\n        #...other stuff....\n    ##\n    # Gzip Settings\n    ##\n\n    gzip on;\n    gzip_disable \"msie6\";\n\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;\n\n    #...other stuff....\n\n}\n``. Sounds good, thanks @krisxw!. As a workaround, if you runasini bootstrapagain, it will link the hoisteddoccopackage.. @davidalber I submitted a PR to asini (https://github.com/asini/asini/pull/80) which fixes this issue.  Once a new version of asini is published, we can upgrade our dependency to use that and you'll be good.. This should've been fixed in version 0.6.0, released on Friday.  What version are you using?  See #832 . I was thinking the same thing.  Something like [this](https://github.com/jonschlinkert/remarkable/issues/122#issuecomment-150011254) maybe? . Seems like there's more work and it's failing the tests.  Should I close the PR for now?. The guide for [Running a Production Server](https://react-server.io/docs/guides/production) describes how to use different configs per-environment.  Do you think that accomplishes what you're trying to do here?. Closing & reopening PR to force a Travis rebuild.. @gigabo Because the build onmasteris failing right now, I'm going to approve & merge this PR right now without a maintainer's approval to see what's happening.  If there's public outcry about it, let me know and I'll reverse it.. Sweet!  Looks like there's still some [asini references](https://github.com/redfin/react-server/search?p=1&q=asini&utf8=\u2713) in the codebase:.gitignoreand somereact-server-websitereferences.  Do those need to be changed as well?. Conceptually, I'm all for it.  Practically, however, I obstain on this one because I don't know enough about either lerna or asini to provide any insight.. It depends on how far you want to go with 'dynamic routes'.  Take a look at thereact-server-websitepackage [routes.js`](https://github.com/redfin/react-server/blob/master/packages/react-server-website/routes.js#L19-L23) file.  It uses regex to identify path name variables\nreact-server uses yahoo/routr for pattern matching.  That documentation is not so great.  It complies with pillarjs/path-to-regexp, which has pretty decent documentation.\nOur documentation could be improved greatly.  Interested in helping with that?  . Yup, just a regular PR in this repo.  The website pulls documentation in the Markdown format from the docs directory.. This may not have anything to do with anything, but when I was working on the server-side webpack stuff I ran into a similar issue with the tests failing after combining the HTML + JS servers (thus removing the separate CORS domains).  I placed the following comment in my file when I made the change:\nif (process.env.NODE_ENV === \"test\") { // eslint-disable-line no-process-env\n            // ZombieJS does not handle loading async scripts in the proper order and ensuring that .wait() waits for\n            // execution.  Thus, we need to force LABjs to not use local XHRs in order for all tests to work properly.\n            // This used to work prior to combining the HTML and JS servers into a single server because the JS files\n            // were considered part of a different domain when running tests, so it never used XHR preloading, it used\n            // \"cache preloading\".\n            // https://github.com/getify/LABjs/blob/master/LAB.src.js#L152-L175\n            res.write(\"$LAB.setGlobalDefaults({UseLocalXHR:false,AlwaysPreserveOrder:true});\");\n        } else {\n            // We always want scripts to be executed in order.\n            res.write(\"$LAB.setGlobalDefaults({AlwaysPreserveOrder:true});\");\n        }. @roblg My plan was to submit a PR that uses Rollup to generate a non-transpiled ESM bundle and a transpiled UMD bundle (same as what is currently being produced).  No need to change any existing filenames to .esm.js...just the final bundle.\nI was also planning to create an entry in the documentation on how to use the ESM bundle and that the implementer has to take ownership of transpiling any features as they see fit (i.e. recommend the Babel settings).  I've been thinking through the question of \"do we need to share what level of ES is supported in the code\" in my personal projects and I think the answer, in general is \"no, we don't.\"  If I use ES6 in my project and React Server uses ES7, Babel will transform all of code to whatever the transform target is.  If that target is ES5, then both ES6 and ES7 code is transpiled/polyfilled to ES5.  If that target is ES6, then just the React Server ES7 code is transpiled.  None of that is ever communicated by the React Server project though...just that fact that it must be transpiled by the end user...that's it.. I'm planning to work on this over the next 2 weeks, so I'll have a rough codebase to share soon.. when the current path has spaces in it, it screws up the cp.exec() call.  Example:\ncp.exec('npm install /my path with spaces/react-server-cli')\nWhat should happen instead is something like this:\ncp.exec('npm install /my\\ path\\ with\\ spaces/react-server-cli')\nSame thing would happen if there were a ' in the path...it would mess up the JavaScript string.\n. Fixed.. I fixed it by adding a link to the section where that example is.  Not perfect, but I figured it works for now.. Thanks!  fixed.. Removed.. Good point.  I didn't move it yet though--just trying to get something out there first.  I'm sure people other than me are much better at organizing stuff like this!. Thanks!  Fixed.. Yes, it can be. I commented it out until I figure out what needs to be done with chunking/long term caching.. Yes, they don't.  Here are the references:\nhttp://code.fitness/post/2016/02/webpack-public-path-and-hot-reload.html#overriding-the-public-path:12018ae465828e3168201053550649e1\nhttps://github.com/webpack/webpack/issues/1650\n. I purposely didn't touch that...although it was tempting \ud83d\ude04 . Sorry for the massive amount of changes.  If it makes it easier, I can try splitting it into 3 or 4 different patches/pull requests.. 1. This is a single loader that loads external script files, internal script files, and inline <script> tags for consistency.\n2. It notifies the caller when scripts have finished loading\n3. It guarantees order of execution and can wait() for required scripts to load before execution.\nI'd recommend moving this type of discussion to a different area to discuss architecture decisions.. Fixed.  I don't think that eslint is working properly.  asini run lint blows up and there's no script in the root level package.json to run lint.  I'll look into it.. (at least in my setup it's blowing up). This is what I get when I run asini run lint in my setup:\n```\nasini run lint\n\nreact-server-module-tagger@0.4.10 lint /Users/drewpc/Documents/Juno Tech/git-repos/react-server/packages/react-server-module-tagger\neslint *.js\n\nNpmUtilities.execInDir        (\"run lint\", [], \"./packages/react-server-module-tagger\")\n\nreact-server-module-tagger@0.4.10 lint /Users/drewpc/Documents/Juno Tech/git-repos/react-server/packages/react-server-module-tagger\neslint *.js\n\nNpmUtilities.runScriptInDir   (\"lint\", [], \"./packages/react-server-module-tagger\")\n\nreact-server-module-tagger@0.4.10 lint /Users/drewpc/Documents/Juno Tech/git-repos/react-server/packages/react-server-module-tagger\neslint *.js\n\nErrored while running npm script 'lint' in 'react-server-module-tagger'\nError: Command failed: npm run lint \nsh: eslint: command not found\n```. When I fix that issue (and the resulting things eslint complains about), I get this:\nasini run lint\nSuccessfully ran npm script 'lint' in packages:\n- generator-react-server\n- react-server-module-tagger. so...lint doesn't exist anywhere else.  There's a weird mix of gulp tasks and package.json run scripts though.  And it really bothers me that they're not named the same.  In some packages, it's gulp build in others it's gulp, and in other cases, you have to do npm run build.. I'll clean it up and submit a PR.  I already have the previous issue fixed.. This is the offender: https://github.com/redfin/react-server/blame/master/packages/react-server-cli/gulpfile.babel.js#L7  Need to use globs.... PR #818. Can you refactor this section a bit to limit code reuse?  Something like this should work:\nconst pageName = (res.body % 2 === 0) ? \"./forwardEven\" : \"./forwardOdd\";\nif (typeof window !== 'undefined') { //would be nice if this is `process.env.isServer`\n    return require.ensure([pageName], () => {\n        return {\n            page: require(pageName).default,\n        };\n    });\n} else {\n    return {\n        page: require(pageName).default,\n    };\n}. If you change this comment to be a // TODO:, we can track it better.  Eventually when we get server side Webpack up and running, it'll include a fix for this.. thanks!  I fixed that.. @doug-wade @gigabo The upgrade of routr from version 0.1.3 to >1.0 introduced some breaking changes that impact us.  These changes and the bug in #312 are related, so I'll track it there.. See #837 and #312.  The change had a few impacts:\n\nRoutr no longer does anything with the navigate option in https://github.com/redfin/react-server/blob/master/packages/react-server/core/context/Navigator.js#L53.  I have NO idea what the type variable is really referring to in our code...it seems super weird to me.  The Routr project said in their commit message: \"If needed, the navigation logic should happen at a higher level or remove that special case.\"\nAccording to #312, we have never been passing the HTTP method information to Routr anyway, so Routr never checked the method properties.\nWe are improperly encoding the page attribute method in the routes_(client|server).js file  because our documentation says it can be an array or string (Routr now supports an array), but we're encoding it as a string only.. The tests didn't catch this because all of our tests only send GET requests, no POST/HEAD/etc.  I added some unit tests in #837, but we should probably add full integration tests for at least POST requests.. Let me rephrase this.  The breaking change in Routr may or may not impact us.  It all has to do with what we use/expect regarding the type property on this line.  Our tests might not catch this for two reasons: we don't have test coverage of this case or the change in Routr actually doesn't impact us.\n\nSecondly, the bug identified in #312 means that we're not even passing the HTTP method to Routr for it to check.  The fix for their API change and #312 is to pass the HTTP method to Routr.  That change is a breaking change for our project because now people will have to allow POST requests in their routesFile or else Routr won't select them.. I just copied that from the other gulp files where jasmine was being used.. I agree.  Got any other ideas on how to bypass callerDependency when running unit tests inside the same directory?. This is testing that case sensitivity doesn't matter in the Routr package.  In versions <0.1.1, it did a case sensitive match.  >=0.1.1, it added a toLowerCase() call first.  We want to make sure that doesn't regress.. Not strictly necessary and if people disagree, it can easily be changed back.  I like to have parity between GET/HEAD in most cases.. Fair point.  We don't have functions for those methods, so I didn't implement a check for those.  I can make this more generic.. As it stands right now, react-server throws a 404 error for all HEAD requests because routes being passed to routr don't send the method attribute with it.  Therefore, routr defaults to 'GET' and checks the request.  head !== get, therefore there's no route found for HEAD/POST/PUT/PATCH/etc.. I'm confident in all of the changes here except this type thing.  I really don't understand it at all.. Nope, it's included in the webpack-dev-server client package though:\nhttps://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L113-L121. Correct...any thoughts on the right way to handle this?  Here's the basic situation: on GET/HEAD requests, if we set type and/or send to any value (even empty values), the GET/HEAD requests will send a CORS preflight.. @roblg I handled the edge case were someone wants to send an empty JSON object now.  And there's a test for it!. I 100% agree.  However, it seems that the current implementation of all of these functions does something different if you call it like .send() (returns the currently set post parameters) vs .send({}) (which saves the post parameters and returns this).  In my opinion, that is a bad design for all of those functions...trying to combine setters + getters.  That's outside the scope of this PR though.. I don't think so.  If someone is using a method other than GET, HEAD, POST, PUT, or PATCH and they're setting query/post parameters, then they probably know what they are doing and aren't worried about a CORS preflight request being emitted.. FWIW, looking at the corresponding SuperAgent functions, they always return this.  They are not trying to combine a setter with a getter function.. Doesn't this mean that this module can't be used on the client side?. We already run this whole package through Babel with Gulp, why not uglify it there and save the uglified version in target/(client|server)/util/LABString.js?  What am I missing?. Great catch, @roblg.  @gigabo use the memory-stream package for that!  Examples:\n\nmock socket: https://github.com/redfin/react-server/blob/master/packages/react-server/core/tests/reactMiddlewareSpec.js\nmock fs: https://github.com/redfin/react-server/blob/master/packages/react-server-cli/src/tests/compileClient/compileClientSpec.js. Ignore the mockery stuff.  The memory-stream package allows you to pass a stream object to a library and then call .toString() on what was written to the stream.. Change to match the rest of the project: \"react\": \"~0.14.2 || ^15.1.0\". Change to match the rest of the project: \"react-dom\": \"~0.14.2 || ^15.1.0\". we also need to add the BIG. FLASHING. SIGN. about what changed.. This is causing the Travis CI tests to fail.  Please add automated tests to this package so that we can keep it up to date!. don't we need to parse the JSON in both the if and else blocks?. Me too.  Here's the issue I have: I defined serverRoutes and compiler previously using let.  ES6 destructuring only works like this:\nlet {a, b} = stuff;\nconst {c, d} = stuff;\nlet e, f;\n({e, f} = stuff);\nThis is a syntax error: {a, b} = stuff;.  I could put a comment above that line so that it's clear?. I read through the documentation to update it with compileOnStartup stuff and noticed that the custom express middleware example wasn't updated previously.  I can remove it if it's an issue.. well...we are because of #812, but we missed updating this example to depict the new default express middleware.. Whoops.  I had to add the Object.freeze and removed the require() part.  Fixed!. gah!. \n",
    "DanielFGray": "Personally, and I'm just gonna throw this out there, I would love to see a future version of this that uses Koa instead of Express.\n. ",
    "bartkusa": "BTW, I signed the CLA. Twice. Dunno what the problem is.\n. Given that the goal is to tell the client ASAP what JS to start downloading, I don't think there's any value in waiting for async data to turn this on.\nI was imagining that we'd enable this conditionally for some pages with a query param, eg, ?preload=1. That'd let us measure it. If it looked good in controlled scenarios, we'd just hardcode it on for everybody on those pages.\nI'm struggling to think of a scenario where this is only valuable sometimes. It seems like it's either always valuable or never valuable.\n. I need to make some adjustments. This shouldn't merge in as-is.\n. As an aside, <link rel=\"prefetch\"> is/was kinda bad in Chrome. Last time I looked (a year ago?), it took priority over the current page's requests, like images.\nJust check Chromium's bug tracker before forging ahead.\n. https://code.google.com/p/chromium/issues/detail?id=61476\n(Maybe this is a bug in Webkit but not in Blink?)\n(Maybe we should move this conversation to an Issue instead of yammering in this PR?)\n. Update: I tried running an experiment on my Redfin dev box. The results weren't promising.\n\u2022 When I ran tests locally w/ Chrome, our homepage downloaded its JS twice. I think the preload-request fires first, then the LABjs-request fires second, and the browser doesn't dedupe that request for some reason.\n\u2022  When I ran our private WebPageTest instance against my changes in a VM, I didn't see any difference in the waterfall. It looked like the browser ignored my preload directive. Maybe it's a bug w/ our WPT instance, or the browsers it uses? (Also, it was a pain in the butt to get WPT to block 3rd-party assets like Facebook and Google Analytics, but necessary for reducing deviation in e2e tests.)\nI encourage others to repro and prove me wrong. My changes are in Redfin's main repo, pull request 27572 (declined).. ",
    "TonyHYK": "An example on the map page is...\n1. Land on Berkeley map page: notice that the title is \"Berkeley, CA Real Estate...etc\"\n2. Search for San Francisco and the document title will change to San Francisco Real Estate\n3. Now go to the LDP and back to trigger frameback.\nIf we don't update masterTitle, the document title will revert to Berkeley while the map is pointing to San Francisco.\n. maybe also\n- optimizing on TTFB by making sure that things in the header (e.g. getTitle, getMetaTags, and getLinkTags) are as light-weight as possible\n. yup I will take it!\n. Closing issue as this is addressed in this PR: https://github.com/redfin/react-server/pull/148\n. Yeah I thought about having a fallback but I wasn't too sure if there's other things out there I can use. Navigation timing is supported by IE9+. So we could potentially not log the timings if the API is not available?\nThoughts?\n. Ah ok sounds reasonable, I wasn't sure to what extent we want to support old browsers. Fixed and rebased. Also, is there a way to run the build locally?\n. Addressed feedbacks and squashed the changes.\n. yeah just as wakeTime falls back to a zero-ish value, I'll just handle the edge case as 0. Seems more sensible than some large negative number and easier to filter out.\n. Good catch!\n. yeah... I feel like this is also true for any values logged in ClientController that relies on __reactServerTimingStart , do you think we want to change those also?\n. Agreed!\n. it's a bit awkward that I have to \"reach in\" to grab the existing childProps\n. ",
    "lidawang": "Hoho! Nice catch - it does not handle that case.\n. This PR should have the fix for the 2nd-navigation-to-child-frame-not-getting-focus + no conflicts with the base branch \u2600\ufe0f \n. Huhm I'm having some trouble with npm test - when I tried that I got errors, all originating from react-server's gulp test, something about eslint?\n```\nErrored while running npm script 'test' in 'react-server'\nError: Command failed: /bin/sh -c npm run test\n/Users/lida.wang/code/react-server/packages/react-server/node_modules/eslint/lib/eslint.js:646\n                    throw new Error(\"Definition for rule '\" + key + \"' was not found.\");\n                    ^\nError: Definition for rule 'keyword-spacing' was not found.\n    at /Users/lida.wang/code/react-server/packages/react-server/node_modules/eslint/lib/eslint.js:646:27\n    at Array.forEach (native)\n    at EventEmitter.module.exports.api.verify (/Users/lida.wang/code/react-server/packages/react-server/node_modules/eslint/lib/eslint.js:619:16)\n    at processText (/Users/lida.wang/code/react-server/packages/react-server/node_modules/eslint/lib/cli-engine.js:201:27)\n    at CLIEngine.executeOnText (/Users/lida.wang/code/react-server/packages/react-server/node_modules/eslint/lib/cli-engine.js:361:26)\n    at verify (/Users/lida.wang/code/react-server/packages/react-server/node_modules/gulp-eslint/index.js:19:17)\n    at Transform._transform (/Users/lida.wang/code/react-server/packages/react-server/node_modules/gulp-eslint/index.js:37:18)\n    at Transform._read (_stream_transform.js:166:10)\n    at Transform._write (_stream_transform.js:154:12)\n    at doWrite (_stream_writable.js:292:12)\n```\nIt also repros when I try to run gulp test in /packages/react-server\n. This change would make life sooo much easier for the DP!\n. OMGGGG finally got my build to work + figured out how to verify this + verified it! It does give me better logging \ud83d\udc4d \n. Woops I went and neglected this PR, but looks like @drewpc got a handle on things, thank you very much for fixing + merging!. Some documentation could address the issue for now (and probably wouldn't hurt after a rename). Does adding a blurb on https://react-server.io/docs/guides/understanding-rendering seem like the right place?. We could expose a getPreloadedImages method that just takes an array of image urls and creates a bunch of Image's with them (which is what we would have done with our custom script). That would certainly be more targeted, though I wonder if there are other applications where we'd want some custom script executed in the <head/>, like custom tracking, or do some setup with a third party integration? Granted, if that request comes by, we could always open up this more flexible (albeit more vulnerable) API in the future.. I am convinced! I'll get cracking on that change then \ud83d\ude0a. @doug-wade omg I have the power to close things? \ud83d\ude2e It shall be done!. What exactly do the nodeArrival events do?\n. Yea tbh I'm not sure which to pick! The latest stable version that I used for getting this to work is 0.12.8 - I wasn't sure if I should pin to that specific version or accept patches (~0.12.8?), etc. Any guidance?\n. Oh oops - thanks for the catch!. Oops I might indeed have done that... gimme a sec. ",
    "careylin": "@doug-wade mentioned to me that y'all were looking for a little logo, I could play around with some things and send you guys some ideas\n. Me and mahalez are on the same thought train hah. I did some silly stuff, but these were the actual good stuffs \n. \n. I can update the full logo to a svg soon\n. Fixes https://github.com/redfin/react-server/issues/271\n. hmm, will investigate\n. Oh duh, @doug-wade already encountered this bug https://github.com/isaacs/github/issues/316 which is why he used the permalink >.< \n. ",
    "mahalie": "Hi there, just seeing this. My github mentions go to my personal email account (and get filtered into 'Forums' apparently). Didn't know Redfin had a Github repo \ud83c\udfed \nHere's some quick 'react server' icon explorations. I'll checking with @careylin and see what she's got going as well before spending any more time on it.   \n\n. Carey was able to spend some time Friday and has some neat isometric options. Stay tuned.\n. ",
    "jmhwang7": "I vote this. Maybe even without the dots on the bottom 2 layers.\n\n. @helenaut What if we don't have dots. Just solid layers? I like that. It's simple and elegant.\n. ",
    "dfabulich": "A1 or C1, I think. C1 reminds me of the Nintendo Entertainment System, for what that's worth.\n\n. That blog post mentions that Service Workers can polyfill HTTP/2 cache digests. On first load, the H2 server pushes everything. On second load, the browser hits the Service Worker, which can compute the cache digest itself and add it as a custom header to the request. The server can use the cache header to decide what to push and what not to push in the subsequent response.. The discussion in this bug seems confused. link rel=preload and rel=prefetch have nothing to do with each other. https://css-tricks.com/prefetching-preloading-prebrowsing/\npreload (previously known as subresource) is a hint to the browser's HTML parser to immediately begin downloading scripts that LAB will eventually request as part of the same page load. http://caniuse.com/#feat=link-rel-preload preload is currently only supported in Google Chrome, but Apple has enabled support in the Safari Technical Preview, so it will presumably become available in iOS/Safari 11 later this year. rel=preload support would improve performance on Google Chrome today.\nprefetch is a hint to wait for an idle moment to begin downloading other off-page resources that we predict the user will want. http://caniuse.com/#feat=link-rel-prefetch It's supported on Chrome, Firefox, and IE11, but not Safari. In the past, we've used prefetching on Redfin's home page to request map JS, or on the map to request LDP JS. prefetch is a bit perilous because it's making a prediction about what the user will want to do next; it can be a waste of bandwidth/battery.. Do you think this actually works? https://github.com/NekR/offline-plugin\n\nThis plugin is intended to provide offline experience for webpack projects. It uses ServiceWorker and AppCache as a fallback under the hood. Simply include this plugin in your webpack.config, and the accompanying runtime in your client script, and your project will become offline ready by caching all (or some) output assets.\n. interactiveAboveTheFold?. Long term, the \"right\" way to handle this is with link rel=preload (not to be confused with rel=prefetch, preconnect, prerender) but Safari doesn't support rel=preload yet.\n\nSo I think it makes total sense to have a getPreloadedImages (getPreloadedResources?!) that renders rel=preload on browsers that support it (currently just Chrome, but it's spec'd/standardized) and renders optimized inline script on browsers that don't support it.. Yeah, just Chrome (and Opera, which is Chrome wearing a funny hat and mustache). I vote for one of these (no preference between them)\ngenerator-react_server\ngenerator-reactserver\ngenerator-redfin-react-server\n. ",
    "StevenIseki": "Hi @gigabo no problem, you can definitely have the name. I don't need it.\nWhat is the best way to transfer it over, I am a bit busy on other projects at the moment, so if you can just send through some quick instructions to transfer it over i can do that straight away.\nThanks\n. No problem, yes that sounds good just link through to my github profile\nWill have to check out this project I have worked on a few universal apps in redux and react, but worked much on express middleware's.\nMy most up to date app at the moment is https://github.com/StevenIseki/flixz feel free to give it a look I will be updating it quite a bit over the next few months.\n. okay I have run npm owner add douglas.wade generator-react-server do I need to publish the module now, or it is all good for you now to start using it?\n. ",
    "sresant": "@gigabo Yes it should have, closing.. cc @dfabulich . This was fixed with #668 \n. @gigabo rebased and tested globally using node 4 and everything worked! And no superagent issue \ud83d\ude16 \n. @doug-wade - yeah i undid the superagent changes. However the routes change will be needed but couldn't decide on whether js should be the default or json. The current problem is that if you create a new react-server project with our current HEAD start does not work because we set the default to routes.js inside of parseCli but init generates routes.json. The other solution would be to change to init to generate routes.js instead.\n. @gigabo yea not seeing that superagent error anymore \ud83d\ude15 so i just took those changes out.\n. @mlolson Hey! Sorry to hear you are having issues can you outline what the error is and the version of node you are using? I recently filed a bug related to node 6.2.2 #698. Maybe open up a new issue.\n. I am in support of this for the most part. I think we might want to have a stricter policy on breaking changes like that previous React 15 upgrade that we did not merge for the longest time. Maybe in that situation we should have a larger consensus, rather then just 1 maintainer. In general however for regular bug fixes and enhancements this makes sense and would take the load off the regular people doing the merging. I think we might want to add more documentation for the breaking changes aspect and provide a more strict policy for that. Additionally would be worth documenting how we do merging on this project.. Hey @MikeJSX not quite sure I follow? are elements not being sent down? Or are the initial values not correct? Did you modify the example code at all aside from calling createStore with the initial state value? is there an error?. @MikeJSX weird, i can start up the example and even use an initial value of say value = 1 and it works fine? are you doing something else in the code or starting up react server with different settings? . @mocheng This was a problem that I figured would come up and the current solution looks for undefined or null in this case you should be able to set elementData initial state to null and then the when functionality will work. Of course there is a problem of sometimes the resolved value of that state value might actually be null...Banged my head multiple times i still cant think of a more clever way to handle this. The other idea I had was to provide a middleware into the store so that we could instead listen on actions and resolve things as certain actions occur. Would love to hear what you think we could do?. @mocheng What is the value of whenPromise? I modified the test page available in react-server-test-pages for the ReduxAdapter (look inside pages/root/reduxAdapter.js for reference) and it seems to work fine with the combinedReducer call the only difference in my code and from what i can see you have is what I passed into when.. Hey @ptomasroos thank you for working on this! LGTM just need you to sign the CLA.. LGTM, thanks for doing this @ptomasroos!. @nashio I have noticed a problem with the license/cla agreement taking some time to update itself, I also noticed an issue with it forgetting that a commiter had already signed the agreement...its flaky. No need to worry \ud83d\udc4d . @gigabo i am the worst at documentation so let me know what you think\n. @gigabo i am the worst at documentation so let me know what you think.\n. You are correct, i was just tired when writing up the documentation good catch!\n. Good catch!\n. @gigabo Opinion on the tilda here? or do we need to be strictly on 1.8.4?\n. should this be splitJsLoad?. ",
    "Noirbot": "I can reproduce it consistently on my personal laptop:\nModel Name:   MacBook Air\n  Model Identifier: MacBookAir6,2\n  Processor Name:   Intel Core i7\n  Processor Speed:  1.7 GHz\n  Number of Processors: 1\n  Total Number of Cores:    2\n  L2 Cache (per Core):  256 KB\n  L3 Cache: 4 MB\n  Memory:   4 GB\n. What would be the correct version though? >4.2.1?\n. Lovely! My only question is if this ends up just being a stopgap? Json is far from the only data-file format, but it doesn't seem feasible to add in loaders for all of them.\n. CSV would be the only other one that seems common enough to warrant default inclusion.\nEither way, it may be worth noting in docs somewhere that loading files that we don't have a loader coded in for will cause failures/bugs so that people don't come complaining in the future.\n. Perhaps? In general, it may be worth having a more general inventory of what comes pre-packaged with the core react-server package, since most of it's not obvious/apparent. This would help people understand what's possible.\n. It really is a wonderful thing. Been using it all day for small fixes.\n. ",
    "notatestuser": "Oh, #183 \n. ",
    "mattiasewers": "@gigabo Thanks, very thoughtful answer! This is arguably the easiest way to scaffold a react app with ssr, very promising!  \nAlright, so ssr would not work in production as of yet? Rather use the client side code splitting that react-server-cli outputs? This I have already set up in my production but will definitely use this once sir works in production, get it up and great work! I'll be watching closely!\n. Closing this in favour of #188 \nAlso, If you don't mind me asking, will react-server work with an existing express server without the use of react-server-cli, aside from compiling? \n. How about discord?\n. @gigabo yes you're right, but discord is probably easier for new users to join. \n. @gigabo ahh I see, cool. Another thing, how do I get the payload sent with the request? this.getRequest().getBody() returns undefined, although I get the data in the config object return from the request....weird\n. @gigabo ok I got it working, I could make a PR?\n. ",
    "nampas": "Hrm ok thanks for throwing that example together, I'll take a look and get back to you.\n. Ok, so it turns out that we had a RootElement that didn't resolve in the case of a data request failing. That made react-server think that page B never finished rendering (Navigator.finishRoute was never invoked). Then, when we tried to execute the transition back to page A, Navigator.startRoute wouldn't emit navigateStart because it was waiting for the current page load to finish.\nClosing this ticket, but it might be worth adding a timeout for finishRoute()\n. > All of the lifecycle methods on pages so far have to do with the document that is returned by the request, and nothing to do with the http request/response lifecycle that underpins it. \nThat's not quite true, we already have getContentType(). Also several other methods in the render flow set their own headers, e.g. writeHeader()\nBut, I understand your concern for separating out the logic. Seems like that would require a fairly major API change, considering the page object is really the main way of creating the response right now.\n. Because I'll be adding setHttpHeaders() to rawResponseLifecycle, I'll just roll setContentType into the function too.\n. After consolidating setContentType and setHttpHeaders, my tests are failing. setHttpHeaders is correctly setting the content-type header, but then somehow the default implementation kicks in and by the time my asserts run, the value is \"text/html; charset=utf-8\". Will revisit soon.\n. So yeah, turns out that getContentType() does nothing in the page/fragment lifecycle, likely due to the res.type('html'); call in writeHeader().\nI'm now preparing a final commit which will split out getContentType again from setHttpHeaders, and remove it from the page/fragment lifecycles. Also adding an integration test for rawResponseLifecycle\n. Yes, getContentType() on pages and fragments were basically noops.\nSee here for the test to support this claim: https://github.com/nampas/react-server/pull/1\nI also tested by setting content type on a Corvair page (Redfin's react-server implementation), and got the same result.\n. No prob. Let me know if you want me to squash these commits down\n. Ha, whoops\n. ",
    "withinboredom": "+1\n. @doug-wade,\nI added the docker files as a prompt, and included changes to the unit tests. I can't get the new test (where dockerCfg is true) to pass, although I tested locally and it seems to function as expected. Maybe you can take a gander and give me a hint as to what I did wrong?\n. Also, it seems like a good idea to wait for #203 before generating the config for a dockerish runtime and I think its a good idea to leave that in the README for now. What do you think?\n. I had issues with the config as well, I figured it was environmental ... guess I should open an issue. You can modify the script in package.json, here's mine for example:\njson\n{\n  \"name\": \"reactFrontend\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A react-server instance\",\n  \"main\": \"HelloWorld.js\",\n  \"scripts\": {\n    \"start\": \"react-server-cli --host 192.168.99.100\", \n    \"test\": \"xo && nsp check\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"babel-plugin-transform-runtime\": \"^6.8.0\",\n    \"babel-preset-es2015\": \"^6.6.0\",\n    \"babel-preset-react\": \"^6.5.0\",\n    \"babel-runtime\": \"^6.6.1\",\n    \"react\": \"~0.14.2\",\n    \"react-dom\": \"~0.14.2\",\n    \"react-server\": \"^0.2.10\",\n    \"react-server-cli\": \"^0.2.10\",\n    \"superagent\": \"1.2.0\"\n  },\n  \"devDependencies\": {\n    \"eslint-config-xo-react\": \"^0.7.0\",\n    \"eslint-plugin-react\": \"^5.1.1\",\n    \"nsp\": \"^2.3.3\",\n    \"xo\": \"^0.15.1\"\n  },\n  \"xo\": {\n    \"esnext\": true,\n    \"extends\": \"xo-react\",\n    \"ignores\": [\"__clientTemp/**/*\"]\n  }\n}\n. You can verify that the environment is set right by changing the hello world:\njavascript\nHello, World: {process.env.NODE_ENV}\n. I think I found the bug ... trying a fix and PR if that was it. Not really setup to debug CLI scripts, so console.logging all over ;)\n. Yep, fixed in #206 ... that was a fun one.\n. What specifically should be generated in the default? Def want to have a default docker env setup ... Would make sense for a generic staging/prod, maybe a local env too?\n. lol ... woops :smiley: LGTM \n. :facepalm:\n. Uh oh: \nERROR in ./build/assets/fonts/glyphicons-halflings-regular.eot\nwebsite_1  | Module parse failed: /app/build/assets/fonts/glyphicons-halflings-regular.eot Line 1: Unexpected token ILLEGAL\nLooks like a need a custom loader ... any tips to getting that to work?\n. Closing in favor of #238 \n. Yeah, sure thing.\n. It's already the default in defaultOptions.js\n. ",
    "Pashtunzoy": "I second that. \n. ",
    "tsnieman": "Some freeflow thoughts to help get the conversation started:\n- Imagining something like routes config (either CLI or .reactserverrc) where you can point it to a webpack.config file. Then you have the problem of loader ordering - are the configured loaders from the end-user's webpack used BEFORE the ones provided by react-server? Maybe there's concepts like afterBabelLoaderor afterServerLoaders? Seems a bit funky..\n- Loaders might cause some issues if they're not isomorphic-friendly, I imagine. (I also haven't tried something that uses window yet but curious to see how react-server handles it)\nI'll definitely be poking through the source soon to see if there's anything I can help do to improve this issue, as it's probably the only thing really holding me back from using react-server.\n. ",
    "CreepGin": "Agree with the complexity involved with custom webpack configuration. But in the case of CSS Modules, we can safely consider enabling it by default. \n. When I'm signed into google:\n\nWhen I'm not signed in:\n\nIn my experience, google search results can be highly inconsistent depending on your session + geo.\n. Hot reloading only works for changes to components right now. Modifications to routes.js or the page classes still require manual reload. But pm2 can solve that nicely:\npm2 start npm --watch --ignore-watch=\"__clientTemp\" -- start\n. My team actually switched to using Discord (from Slack) for customer-facing communications. Other friends also had good experiences with gitter.im\n. Oh no, we still use slack internally and like it very much. But for our non-developer customers, all of them preferred Discord over slack (just in the realm of online chatting) mostly due to:\n- Straight-forward Invites\n- Simpler UI\n- Snappier native clients\n- Good localization (we have a lot of international users)\nBut then again, I just realized that all your customers are developers =(\n. Though I think even for developers, it should be fine since Discord does have Markdown and code highlighting support.\n. Oh another big reason we switched was because Discord doesn't force users to sign up in order to join chat.\n@alex88 Oh yes!\n. ",
    "jamen": "I've used both Slack and Discord for a good amount of time, and I still like Slack a lot and would prefer it.  It's just unfortunate they're not more open to the community aspect of things.  But as @gigabo mentioned, there are things like Slackin that make it really easy.\n. ",
    "hairthing": "@gigabo FYI your quoted thumbs down got counted as a vote\n. ",
    "hzoo": "We could publish a specific release of lerna with it as a workaround with that isn't a prelease/normal version based on 2.x since that would be the least work. Yeah I'm ok with making it standalone too\n. ",
    "winkler1": "@gigabo hmm, seems to still be happening here-\n\nUpdate: Looks like caching wierdness on the GH side. Two windows, different results \ud83d\ude4a \n\n. @doug-wade Looks like caching strangeness from Github. Looks fine in Firefox also. See updated screenshot above where two chrome windows show different results!\nthx\n. ",
    "karlhorky": "webpack 2 has released a final release candidate before shipping the final version 2: https://twitter.com/TheLarkInn/status/819215334590783489. cc @jhnns regarding v2 performance problems. @withinboredom Any news on this?. @doug-wade great, thanks for the update!. Wow, didn't know about the downsides, good points. This is something that should be communicated loud and clear in the infrastructure / performance communities.\nEdit: Doing my part: https://twitter.com/karlhorky/status/817515226564329473. I guess this will be enabled by #791?. Looking forward to this change! What is remaining to get this merged?. Ok, let me know if I can help in any way to resolve the problems.\nAs for beta testing, we're going to build something off of it next week. I will post feedback here if I have any!. @drewpc we've started building a large-scale distributed codebase on the changes in this pull request. It's working so far, and I'll post any further updates once we have any. We will open a few pull requests to react-server to fix some nits that we've run into.\nI noticed that this pull request is being split up to ease reviewing and discussion. Are all the changes from this PR contained in #808 and #809?. Great, that sounds good. I'll continue working with this branch and subscribe to #808 for any followup PRs for the server-side webpack. Thanks!. > Would be nice to have a note about it in the CLI docs with some explanation about why you might want to do this to yourself.\nI've added an option to the CLI docs.\n\nI also wanted to add a test for this, but maybe it would be good to get some guidance on where to put this. I took a look at packages/react-server-cli/test but this folder appears to contain only tests for the parsing of the CLI arguments - not whether the option actually has any effect. Another location that I checked was packages/react-server-integration-tests/src/__tests__ - maybe some tests for this CLI argument would fit here?. Just getting my head into some modern techniques for writing tests for CLI tools (looking at babel, next.js, jest) and then I'll come up with a strategy that can work for more than just one test (since #828 also needs this).. Based on the test setup added in #828, I've added a test for the configPath argument. Because of this, this PR is blocked on #828.. Rebased on master and added a test. Ready for review.\ncc @gigabo @doug-wade . Closing as a result of reasons mentioned in https://github.com/redfin/react-server/pull/804#discussion_r98417797. Ah cool, so does that mean that we can move forward with this PR as it is? Or should it be changed still?. Ah right, good catch. Looking through the commands, they all need the options.routes except for init. I've wrapped the require in a conditional to test for that. The error message now complains about a missing routes.json, which would lead to a clearer debugging experience:\nsh\n\u279c  src git:(add-error-output) \u2717 node cli.js start\n{ Error: Cannot find module '~/projects/rs/packages/react-server-cli/src/routes.json'\n    at Function.Module._resolveFilename (module.js:472:15)\n    at Function.Module._load (module.js:420:25)\n    at Module.require (module.js:500:17)\n    at require (internal/module.js:20:19)\n    at run (~/projects/rs/packages/react-server-cli/src/run.js:29:20)\n    at process._tickCallback (internal/process/next_tick.js:103:7)\n    at Module.runMain (module.js:609:11)\n    at run (bootstrap_node.js:420:7)\n    at startup (bootstrap_node.js:139:9)\n    at bootstrap_node.js:535:3 code: 'MODULE_NOT_FOUND' }\nI'm open to improving this though, if we think this error message is still too confusing.. As for tests, I will take a look at how other popular command line libraries like babel test their CLI tools and do something similar in packages/react-server-cli/test.. > why \"fail hard\" instead of output an appropriate, specific error and then end the process\nAh maybe that's just bad wording on my part, sorry. I do mean that what you're describing, I think. I'll change the title of the PR.. Tests are coming along! It took a bit of work but I have AVA now executing the start command and checking some output.\n```shell\n\u279c  react-server-cli git:(add-cli-tests) \u2717 npm run ava\n\nreact-server-cli@0.5.1 ava ~/projects/rs/packages/react-server-cli\nava\n\nTAP version 13\n2017-01-16T16:10:54.061Z - warning: [react-server-cli.src.logProductionWarnings] PRODUCTION WARNING: the following current settings are discouraged in production environments. (If you are developing, carry on!):\n2017-01-16T16:10:54.064Z - warning: [react-server-cli.src.logProductionWarnings] -- Hot reload is enabled. To disable, set hot to false (--hot=false at the command-line) or set NODE_ENV=production.\n2017-01-16T16:10:54.065Z - warning: [react-server-cli.src.logProductionWarnings] -- Minification is disabled. To enable, set minify to true (--minify at the command-line) or set NODE_ENV=production.\n2017-01-16T16:10:54.066Z - warning: [react-server-cli.src.logProductionWarnings] -- Long-term caching is disabled. To enable, set longTermCaching to true (--long-term-caching at the command-line) or set NODE_ENV=production to turn on.\n2017-01-16T16:10:54.066Z - info: [react-server-cli.src.logProductionWarnings] NODE_ENV is set to undefined\n2017-01-16T16:10:54.172Z - notice: [react-server-cli.src.commands.start] Starting servers...\n2017-01-16T16:10:54.172Z - info: [react-server-cli.src.commands.start] Starting hot reload JavaScript server...\n2017-01-16T16:10:54.285Z - info: [react-server-cli.src.commands.start] Starting HTML server...\n2017-01-16T16:10:54.400Z - info: [react-server-cli.src.commands.start] Started hot reload JavaScript server over HTTP on 0.0.0.0:3001\n2017-01-16T16:10:54.401Z - info: [react-server-cli.src.commands.start] Started HTML server over HTTP on 0.0.0.0:3000\n2017-01-16T16:10:54.401Z - notice: [react-server-cli.src.commands.start] Ready for requests on 0.0.0.0:3000.\ntest\nok 1 - test\n1..1\n```\nDoing this work over here: https://github.com/kaytcat/react-server/pull/1\nGoing to add a few test cases including a routes.js file with an error in it.. > why output an error + stack trace instead of something like \"The routesFile specified doesn't exist. ... \"\nGood point, in the case that it doesn't find the file we may want to improve the error message if the error I posted above (https://github.com/redfin/react-server/pull/828#issuecomment-272211072) isn't a good enough Developer Experience. I'm good with changing it if that's what we want to do!\nIn the case that there is really an error in routes.js, because it could be anything we probably shouldn't try to be smart about that one - just let it crash with the real error message.. Ok, tests are done (inspired by Babel's testing system from babel/babel#1978), I'll now improve the messaging guided by @drewpc 's suggestion and then we can get this one in!. I've improved the error message. Summoning @drewpc and @doug-wade for review!. @drewpc Fixed the versions, please re-review. The integration tests I introduced in #828 are failing. These are starting an actual react-server via the CLI - not sure if this is an issue.. Would peer dependencies help?. I removed it because it wasn't used in any of the function calls. I can add it back though!. Hm, allowing Babel, ESLint, etc config in package.json is a really important feature here, and feels like it is getting into deep complexity.\nI think for now I'll make a note in the description above and close this pull request, because:\n- less configuration is better\n- there's not a concrete use case for this right now\n- this may create weird edge case bugs. ",
    "jhnns": "I haven't heard of such a big increase in build time, but it can be. We still don't have big test projects to check performance regressions in build times \ud83d\ude22 \nOne thing I wanted to point out is that tree shaking will currently have little effect because many libs are still published in CommonJS. So, this optimization will still take some time to be effective.. That's correct, you will also need to compile the server code with webpack to make this work.\nMy usual configuration for this looks like:\njavascript\n            {\n                test: /\\.css$/,\n                loader: ExtractTextPlugin.extract(\n                    'style-loader',\n                    `css-loader${ isNodeTarget ? '/locals' : '' }?` + JSON.stringify({\n                        modules: true\n                     })\n                )\n            },\njavascript\n        new ExtractTextPlugin('[name].[contenthash].css', {\n            disable: isNodeTarget || isDev\n        }),. Hi, just chiming in as a webpack contributor - I have been looking at your project and I'm quite impressed by what you've achieved with universal rendering, especially the streaming!\nWhen trying to integrate this in a project, I noticed that the server code was not being webpacked, which caused a bit of confusion.\nWith the current setup this uses two different module runtimes: one that allows asynchronous transforms via loaders (your client bundle) and one that doesn't (your node code).\nIf the server code was webpacked, this would open up opportunities such as:\n\nimporting images into React modules (like import someImage from './someImage.jpg)\nusing CSS modules as in #689 (because the hashed class names are needed in the markup)\nsetting split points via require.ensure (webpack 1) or dynamic import()) (webpack 2)\n\nI would be happy to shed some light on integration methods if this is something you're interested in.\nWhat were the original reasons to not use webpack for server-side code?. @drewpc Thank you for your suggestions. I reviewed your PR and tried to understand as much as possible about what's going on in react-server under the hood. I haven't a full understanding yet, but I've already built some universal javascript apps and know the pitfalls. Let me share my experience with you all (@roblg @doug-wade).\nFirst of all, I think it is very important to also bundle your server-code with webpack as it streamlines your environment. Code re-use is easier when the client and server environment is as similar as possible. That's why this change feels like a \"must have\" for me. It also fixes some common problems with the current setup as already mentioned in https://github.com/redfin/react-server/issues/773#issuecomment-268033323 \nUnfortunately, building your project with webpack two times can lead to an unsatisfying developer experience. In a recent project of mine, the initial build time in development was around 50s. The project is medium-sized, so I'd expect even longer build times in bigger projects.\nThe main reason for this was that the build was done sequentially, very similar to your current implementation (first client, then server). You could try to start both builds in parallel, but this leads to another problem: Many webpack loaders, like the babel-loader and the postcss-loader, are hogging the CPU. Since these loaders perform AST transformations entirely in node, node's single-threaded architecture becomes a real problem. With this architecture, you can't benefit from multi-core processors. In order to illustrate the problem, I've recorded a flame graph in this medium sized project I've already mentioned:\n\nYou can clearly see the client and the server compilation \u2013 and that the CPU is always busy :)\nWe've spotted this issue already in the webpack community and are currently reworking the loader API so that loader execution can be pushed to different processes in the future. But this will still take some time.\n\nI've refactored the build architecture in this project and came to the following solution.\nIn development, you have:\n\n\nthe main development process (MDP) was invoked by the developer (like npm start) and is in charge of orchestrating the following processes\nthe webpack-dev-server (WDS) process which watches and compiles the client code in memory\na webpack watcher process (WWP) which watches and compiles the server code to an output folder (like dist)\nthe application server (AS) (usually just your express server) which picks up the server code from dist\n\nAll 3 child processes are forked by the MDP and report their status to the MDP via node's built-in IPC channel.\nThe AS is the only process which is killed and restarted as soon as the WWP reported a successful build.\nThe WDS proxies all requests that do not match a static resource generated by webpack to the AS (usually your HTML pages). One gotcha is, that you have to defer all incoming requests as long as the AS is restarting \u2013 otherwise the developer will get ugly 404s because the proxy is broken during that period.\nIn production, this setup is much simpler of course. You just need to invoke webpack with two different configs and output the result into dist and public. Then you start the AS which picks up the server built from dist and serves the static files from public.\nWith this architecture and by using happypack for parallel loader execution, I was able to reduce the initial build time from 50s down to 9s.\n\nSince I will be using react-server in production, I would be happy to contribute to this. If you're interested in this solution, I can also give more explanations and create a PR for it. I would use @drewpc 's PR as a starting point.\n. > webpack-dev-middleware only supports one compiler output\nThat's ok since the webpack-dev-middleware should only be concerned with bundling and serving the client code\n\nAs of right now, the server compilation requires the chunk manifest from the client compilation\n\nYes, I've already seen this in universal javascript setups. I don't think that this is a regular dependency because the contents are unknown at build time. It's a dynamic dependency which can not be handled by webpack. I think it's better to fs.readFileSync the JSON on application startup.\n\nI don't want to use webpack-dev-server because we don't need to have applications listening on different ports\n\nI do understand this. It feels a little more complex but I think it's necessary. You need a server that accepts all requests while the application server is restarting. There will always be the case where HMR is not possible (for instance when the module can not be replaced without side-effects). In this case, the webpack client will automatically refresh the page. If the server is currently restarting, the developer would be left with a broken 404 page.\n\nI can still use the webpack-dev-middelware compile event notifications to trigger a compilation of the server code\n\nI'm not sure if I understood this correctly, but you need to keep in mind that it is possible that client and server do not share the same set of files. It's also more efficient to keep the webpack compilation on hold (with all the dependencies in memory) than to \"just\" trigger a new compilation.\nI'll sign up to Slack during the next days so that we can discuss this further :) although I think it's good that it's documented here.. > that architecture looks eerily similar to what Redfin is using internally right now\nThat's funny. I'm not a spy, I promise \ud83d\ude01. But I think it confirms that this solution has some real benefits. It's probably possible to omit the webpack-dev-server, but for me, this is a clean separation of concerns. And with the webpack-dev-server you will be using a module that is maintained by the webpack team and widely used in the webpack community (no offense to the author(s) of webpack-dev-middleware, it's definitely a great addition to the eco system \ud83d\udc4d).\n\nbut I think I'm OK merging this first (when it's ready), and then @jhnns (or whoever) can submit a patch for the proxy/separate process architecture at some point in the future\n\nBefore merging it, you should run this PR against a sufficient big code base to check the build time. If my assumption is correct, it would double the build time which can be pretty annoying for your existing users.\nAgain: No offense against @drewpc 's awesome work. For me, it's a great blueprint! It's just that I went this way already and I know the downsides of it.\nI'm able to dedicate some time for my proposal starting with Jan, 2th. I just need to know if you're still interested in and what my branch should be based upon (this PR or master).. @drewpc\n\nThe middleware component is written by @webpack as well.\n\nI'm sorry, you're right. Must have mixed something up here \ud83d\ude01 \n\nI assume react-server is using webpack-dev-(server|middleware) for the file watching + compilation, not necessarily to have an additional TCP port to listen on.\n\nThe most important benefit of the webpack-dev-server is that you have always a server that accepts incoming requests, even when the application server is currently restarting. We could implement HMR for the server, but in my experience there are always parts of the application that cannot be hot replaced and thus need to be restarted.\nImagine, there is a module that cannot be hot replaced. webpack will bail out from hot replacement and reload the website. If the server is currently also restarting, the developer will get a broken page. It could be possible that HMR will always be possible in react-server's case (I don't know), but only as long as the user sticks to the react-server architecture with its pages and components. \n\n@roblg\n\nI'm not sure it'll be 2x slower, because with @drewpc's setup here, there's no webpack-ing of node_modules for the server.\n\nThat optimization might make sense in many use cases, but in my particular use case this would be a problem. We have separate application modules located in node_modules that need to be webpacked. We cannot webpack them before publishing them because that would make some optimizations impossible. So, hopefully I'm able to override the webpack config in this regard.\n\nMy suggestion that we merge this first was under the assumption that there aren't currently very large apps using react-server-cli for their build. (Redfin is using react-server, and our code base is pretty large IMO, but we have a custom build for our app that predates react-server-cli.) I could totally be wrong about this though, and I would actually be pleased to find out I'm wrong\n\nThe client I'm working for is currently going to build a large scale app using react-server-cli :grin:. That's why I would like to help to improve the build process.\n\nThe proxy (\"main development process\") that dispatches incoming requests to the right server, (based on URL prefix, I presume)\n\nThe \"main development process\" does not listen on a port. It just receives messages from and sends messages to its child processes. The webpack-dev-server allows to configure a proxy that proxies all urls that are not provided by the webpack bundle. So, instead of showing a 404, it just proxies the request.\n\nWith this setup, the additional port occupied by the webpack-dev-server would be an implementation detail, as opposed to something that has to be handled and set by the developer\n\nThe additional port is definitely an implementation detail the developer does not need to know. Especially since there is no additional port in production. That's why I don't see that the additional port is any problem that makes things more complex. It's just the result of separated processes.\n\nThat being said, it is possible to build this without the webpack-dev-server. But then I don't know how you could safely restart the server without risking to break the page in the browser. How is this currently done?\nPersonally I don't think that the multi-process architecture makes things more complicated. It just separates things more cleanly and gives us the ability to restart parts of the application without affecting other parts.. > replace webpack-dev-server with webpack-dev-middleware\nIs everyone convinced in doing that? As I already said, I would not replace the webpack-dev-server. It already takes care of serving the client bundle and HMR out-of-the-box. And by using the proxy feature, the react-server user does not need to know that there is actually a webpack-dev-server in place. It's an implementation detail.\n\nAs I already mentioned in the chat: Your PR is solving some issues and should be merged/published if it's not degrading the DX with long build times too much. . @drewpc I just noticed that the react-server-cli is still calling babel-core/register inside cli.js. Is this still necessary? The babel-loader has already compiled everything.\nThe only problem I see is when calling a custom webpack config, it won't be compiled with babel.\nIf the cli and the application server were two different processes, you could use babel-core/register just inside the cli without affecting the (already compiled) application server.. > I'd prefer to allow users to have a connect/express/koa/hapi/http-server/whatever instance and register react-server as a middleware on that server\nFair enough.\nFor me it's surprising that a CLI tool hosts the actual application server. We could also move this to a different package, like react-server-express.. > Isn't this a duplicate of #33\nSeems so, yes.. > Does this mean that require('react-server/options') and react-server/routes would be \"intercepted\" by webpack, and would be filled in with content at build time, but would never be written to disk?\nYes\n\nclientBootstrap.js would be a static file, provided by react-server. (e.g., the webpack config might have react-server/clientBootstrap, or similar in each entrypoint.\n\nExactly.\nIn fact, my suggestion is not that different than the current implementation. I would just push dynamic stuff into dedicated modules instead of assembling code.\n\nwe'd have a webpack plugin (or alias?) in the webpack config that identified react-server/routes, and react-server/options requires, and replaced them with JSON representations of routes/options objects from memory.\n\nYou just need a loader for that. Loader generate code on build time, that's it.\n\nIf that's what you're suggesting, I'm on board, with the possible addition that clients should have a way to provide a path to their own clientBootstrap.js file. From the perspective of a new user of react-server, the change s/b transparent, and I think it makes things simpler for a more advanced user.\n\nI don't think that option is necessary. If you want to use react-server outside the react-server-cli, you need to instruct your bundler of choice to replace react-server/routes and react-server/options with the result of a given generateRoutes() or generateOptions() function. browserify can do that.. > it just feels a little strange to me to require magic in whatever bundler you choose in order to use react-server\nIt does not necessarily require \"bundler magic\". You could also write that file to disk before calling webpack, pretty similar to the current implementation. The third option is to put this information on window and read it on runtime, but that wouldn't be my choice :wink:. I think, we will need to put one manifest on the window object because this needs to be rendered into the HTML (which is not long-term cached). And if something is rendered into the HTML, it can only be accessed via window from the bundle.\nBut we should use the chunk-manifest-webpack-plugin for this task.. Yes, that's a duplicate of #689. Thanks for splitting up the pull-request @drewpc. This makes reviewing it a lot easier \ud83d\udc4d \nThe solution is very simple and works as long as you stay within the page lifecycle. However, this solution will probably leak memory over time in more advanced use-cases, since cleaning the require.cache is not a guarantee that all references have been removed. Especially if you do side-effecty things like opening connections (and keeping them open), this will become a problem because the connection won't be closed in this case.\nTo me, a cleaner solution is to have a separate application server process that receives a KILL signal when a new bundle has been generated. This will make sure that the server cleans up everything before it is restarted. A downside of this approach is that restarting a process takes longer than cleaning the require.cache. In my project setup, the server restart takes about 1s.. > my server side patch HMR solution doesn't do anything good or bad to resolve those memory leaks. In other words, if memory leaks exist in the code being required delete require.cache[] doesn't \"fix\" that.\nOf course, you're right. These memory leaks exists in the code because you don't write tear-down code if you don't need it. But usually you don't just delete require.cache, so it's not an actual memory leak in production because the module is not replaced in production. It just becomes a (potential) memory leak when the cache is deleted. \nBut besides the memory leak I rather worry about the unknown application state after modules have been swapped out without actually tearing down everything. Your application may behave strangely in development after a while (because of stale connections, etc.). I'd rather prefer to restart the server cleanly than having to deal with an unknown application state. That's why create-react-app is also using HMR just for CSS, because CSS can be replaced without introducing side-effects.\nI've explained some details of HMR in this SO answer.. > change the isomorphic api call to call the express api instead of the remote api directly, instead of replacing the isomorphic api call with the express api\nWhich isomorphic api call do you mean? api/network.js is never executed on the client.. @doug-wade @drewpc I'm willing to improve this, but I don't know in what direction.\nIn particular, I don't understand what call should be changed:\n\nFor this pr, my thought is that if you would like to include this custom express middleware in the bike share example specifically, change the isomorphic api call to call the express api instead of the remote api directly, instead of replacing the isomorphic api call with the express api\n\nBut maybe we need to separate two things here:\n\nIt would be useful to have an express middleware example\nI want to change the current bikeshare example because it imposes a possible security problem\n\nIf you agree with me on 2., we could merge this PR and we would also have an express middleware example. If you do not agree with me, I can create a separate PR with just the express middleware. But in that case I would like to understand why you want to keep the current example.. One source of confusion to me is the isormorphic api call @drewpc has mentioned. Could you show me which call you mean?. Yay! \ud83d\ude01 . No, even the opposite: I think, the exclude option has no real benefits here. Usually, you use the exclude node_modules option in conjunction with the babel-loader (or any js-loader) to speed up the build. This is because you can expect to get pre-compiled JS via npm. But CSS files need to be processed.\nThere is no performance benefit here because if you don't process CSS, the build is simply broken \ud83d\ude01 . You probably forgot the return here :). Ahh... that's why I mixed this up. I meant that webpack-hot-middleware is not maintained by the webpack team. . It looks like this module is not actually required. The generated JSON file is never read. Or am I wrong?. I know that this function was already called at this location before the PR, but why is it necessary?. If the file is not needed, why not remove the chunk-manifest-webpack-plugin?. This plugin and devtool: \"source-map\" are mutual exclusive. In fact, the devtool option is a shortcut for the plugin. You should only use one of them. I would stick to the devtool option.. This is a well intended performance improvement, but it breaks CSS modules. In order to determine CSS class names, we must compile all CSS files for the server code as well. We just need to omit the style-loader because it depends on the DOM.. This file doesn't need to be actually written to disk. There are several possibilities to achieve the same effect. You could use the DefinePlugin to define the log levels. You could also use the imports-loader to inject build time variables. . What was the original motivation to change the resolving behavior?. It would be sufficient to put this in our routes_server.js. I don't know enough about react-server yet, but why is LAB necessary at all? Shouldn't all scripts be bundled with webpack?. Why is it no option to include a <script> tag with a defer attribute?. I don't know if that's a problem but it looks like the compression() middleware is used two times in non-hot mode. . ",
    "Rud156": "Can you explain the issue is slightly more detail? I would like to work on it.. ",
    "jaredpalmer": "cc @mjackson\n. ",
    "mjackson": "I don't know if anyone from either the react-router or react-server teams fully understands the others' technology. Might take a while to understand the integration points w/out a little guidance.. ",
    "SOSANA": "any updates?. ",
    "GeoDoo": "Hi, how are you? I am new to open source contribution and I would like to help out here!\nIs this ok with you? I suppose I should get started here, right?\nhttps://github.com/redfin/react-server/blob/master/CONTRIBUTING.md. ",
    "joncancode": "@doug-wade i'd love to help out on here if any outstanding tasks are still around.. ",
    "iAmao": "@doug-wade If there are still outstanding TODOs I would love to contribute. ",
    "jmsjtu": "@doug-wade I'd also love to help out on anything outstanding and would love to contribute!. ",
    "abhidevmumbai": "@doug-wade Are these todos still pending? I would love to start my first contributions through these.. ",
    "VolantTyler": "Are there TODOs still pending here? I would like to help (first-time contributor). ",
    "vinsewah": "Redfin will be looking to tackle this soon. Stay tuned! \n. The work to do this has been merged!\n. Nitty: Would probably rename this to setResponseHeaders to be extra explicit?\n. ",
    "pconerly": "It'd be awesome to have this merged in and a npm release cut! If only to silence npm's complaints. :)\n. ",
    "adaniliuk-edmunds": "Would be so great to have this merged. \n. ",
    "addyosmani": "Heya. Over on Chrome, we also work on a few Service Worker libraries that might come in handy for your offline caching strategy.\n- sw-precache - build-time static asset precaching for Service Worker (good for static HTML/CSS/JS application shells)\n- sw-toolbox - runtime caching for more complex strategies. \nThese have been used in production for simple to relatively complex SW setups by Alibaba, Flipkart, Washington Post, Walgreens and a bunch of other sites. If you find them useful enough to experiment with, feel free to holler and we can answer any questions you have.\nI might also recommend looking at the PRPL pattern which tries to incorporate HTTP/2 push for delivering resources to render requested routes with SW precaching of other routes. We found it leads to some relatively decent perf wins (checkout how fast the deployed demo app is)).\n. ",
    "jeffposnick": "It's really exciting to hear that you're thinking about this pattern.\nIn case it's of any help, I gave a talk/have some sample code illustrating how something similar could be done using universal React (via my own, hand-rolled server) and adopting the App Shell + dynamic content model:\n- https://www.youtube.com/watch?v=jCKZDTtUA2A\n- https://github.com/GoogleChrome/sw-precache/tree/master/app-shell-demo\nThe sample doesn't do any code splitting, which means that the logic in the App Shell \"skeleton page\" is pretty straightforward\u2014there's always a single, large JS bundle that gets pulled in. I'm not familiar with how react-server decides what code bundles are needed for a given page, so that would be one area that would need to be tweaked.\nI'm happy to chat about the App Shell model a bit more, along with how sw-precache can handle service worker generation to ensure that your static, critical resources are cached and kept up to date. The sw-toolbox library can be used in conjunction with sw-precache, to help with defining runtime caching policies for bundled resources that are loaded dynamically and only used on certain pages.\n(CC: @addyosmani, who beat me to commenting on this issue by like 5 seconds...)\n. ",
    "karanjthakkar": "@gigabo I was looking into this and think I can help. Is this something that you want only in the react-server package or throughout all packages?\n. @gigabo I've set it up locally but running into this issue on my local machine: https://github.com/redfin/react-server/issues/292 on node 4.2.3. Trying it out now with the latest node.\n. ",
    "helenaut": "+1\n. Yes, it was an error on my end. @doug-wade noticed that I was referring to a private repo that hadn't been updating react-server versions. npm config set registry https://registry.npmjs.org && npm i -g generator-react-server@latest fixed me right up. Thank you!. if it requires a redeploy, maybe we should hold off? I'm finding more broken links.. ok, I've changed it to an unshift. ya that would be better. :) let me change it to that.. ",
    "rodrijuarez": "It is even used babel-loader in react server @doug-wade ? I have searched for references inside the project but I haven't found anything, maybe we could remove it in this issue #277 . Please tell me if I'm wrong I don't have a lot of knowledge about this repo . @gigabo can't we use something like Greenkeper? In the docs from asini they also recommend to use it to keep all the dependencies up to date (see this). Can we close this one? @gigabo . ",
    "kimgronqvist": "Mocha is not installed in any node_modules folder. I checked the docs for Lerna, and this seems to be by design. From their readme:\n\nNote that devDependencies providing \"binary\" executables that are used by npm scripts still need to be installed directly in each package where they're used.\n\nThey recommend pulling up the dependency to the root repo.\nNot sure why it works for you on Linux, maybe you have mocha installed globally?\n. Looking at the logs, there's an issue with node-gyp. There's instructions for setting it up properly for Windows here: https://github.com/nodejs/node-gyp\nI have node-gyp configured already, and didn't get any errors during bootstrap. But when I tried to run the tests, it couldn't find Mocha because of how Lerna handles devDependencies that run as scripts.\nWhen I run npm install manually in babel-plugin-react-server, it finds Mocha fine. However, at that point the tests complain about a missing src folder.\n. Upgrading to lastest Lerna and npm, I can see that it didn't actually link dependencies before - it just failed silently.\nHowever, now I get this error message (during linking):\n```\nErrored while running BootstrapCommand.execute\nError: Command failed: npm run prepublish\n(node:4488) fs: re-evaluating native module sources is not supported. If you are using the graceful-fs module, please update it to a more recent version.\nnpm ERR! Windows_NT 6.3.9600\nnpm ERR! argv \"C:\\Program Files\\nodejs\\node.exe\" \"C:\\Users\\kg\\AppData\\Roaming\\npm\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"prepublish\"\nnpm ERR! node v6.3.1\nnpm ERR! npm  v3.10.6\nnpm ERR! code ELIFECYCLE\nnpm ERR! react-server-test-pages@0.4.2 prepublish: gulp build\nnpm ERR! Exit status 1\n```\nEverything seems to be working on the build server though, so it's most likely something specific on my system.\n. Sure! On what command is the build failing? I've tried running npm run bootstrap, which worked nicely.\n. ",
    "knoxzin1": "I managed to run the tests here, the node-gyp problem is related to npm version not node, you'll need to update lerna too in order to run the tests on windows.\n. @doug-wade I'm using the latest npm version 3.10.6\n. ",
    "brainkim": "Don't feel like signing the CLA, but feel free to merge it or redo the work to unbreak the links yourselves!\nCheers!\nBrian\n. ",
    "SteveVitali": "Hey guys, sorry for the confusion. Towards the end of the hackathon I'd meant to do some git surgery to isolate the error logging commit and file it as a PR, but I ended up not getting around to it. I'm going to close this PR and file a proper one later.\n. ",
    "axelson": "Support for SASS was added in #543 \nI'm really looking forward to CSS Modules\n. This doesn't really add anything that differentiates it from #199 (which I didn't notice before), so I'm going to close it.\n. ",
    "patrick-mcdougle": "hot reloading in dev would be really swell.\n. I don't think this was fixed by #494 (at least in the HTML case) It'd be swell if each of the RootElements were gzipped before transport. Is this possible?\n. @gigabo you've got a content length header there. That means that the whole payload must have fit and the response wasn't chunked at all, but it doesn't matter because it doesn't look like there's any issue. Sorry for the false alarm.\n. If you end up needing to change anything, please tell!\n. ",
    "breeswish": "Are there any plans to make SASS optional? There could be a lot of things to compile besides SASS, e.g. Stylus, TypeScript, etc. It may be better to implement a plug-in system to include and install SASS as needed.. Yeah I know. I'm suggesting a plugin system so that undesired components won't be included.. Could you also make it configurable? Currently we have deployment phase and dev phase. Currently they use the same directory and affect each other.. Hi. I've updated to 0.6.0 but problem still exists. Any ideas? My project is generated by yoeman and I updated my package.json to the follows (and run npm install):\njson\n{\n  \"name\": \"demo\",\n  \"version\": \"0.0.1\",\n  \"description\": \"A react-server instance\",\n  \"main\": \"HelloWorld.js\",\n  \"scripts\": {\n    \"start\": \"react-server start\",\n    \"lint\": \"eslint test.js pages\",\n    \"test\": \"npm run lint && nsp check && ava test.js\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"dependencies\": {\n    \"babel-preset-react-server\": \"^0.6.0\",\n    \"babel-runtime\": \"^6.6.1\",\n    \"react\": \"~15.4.2\",\n    \"react-dom\": \"~15.4.2\",\n    \"react-server\": \"^0.6.0\",\n    \"react-server-cli\": \"^0.5.1\",\n    \"superagent\": \"1.8.4\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.18.0\",\n    \"babel-eslint\": \"^7.1.0\",\n    \"eslint\": \"3.14.1\",\n    \"eslint-plugin-react\": \"6.9.0\",\n    \"nsp\": \"^2.3.3\"\n  }\n}. Oh, strangely, ncu does not update my react-server-cli to 0.6.0. Manually updating it to 0.6.0 fix this issue.. Oops. Notification missed :(\nI was using node-check-updates (ncu) to update my package.json.. Sorry my fault. already having ability to control all middlewares.. Sorry. it is getRouteParams.. Strange.. After changing the order of then it worked.. :(. ",
    "omerzach": "Al set\n. ",
    "willcode4food": "I would be interested in understanding how AMP would be implemented in this stack \ud83d\udc4d \n. ",
    "DraconPern": "Related, in react-server-cli/target/compileClient.js  there's a few calls to require.resolve where the result is used in a string output.  For example, require.resolve(\"react-server-core-middleware\");\nThe problem is that on windows, the path is something like \"C:\\xyz\\blah\\blah\".  The '\\' are seen as escape sequences.  May be the long term solution is to use webpack?\n. ",
    "DylanPiercey": "@doug-wade, thanks for the link.\nWould be good to support all frameworks for sure, didn't realize this was in progress.\nLet me know if you are still at all interested in integrating Rill though, I think it would be of good use for the client side of things.\n. Gonna close this since the discussion is in #235 . ",
    "hzhu": "@doug-wade, You're welcome. \nThank you for the example! It was very helpful.\n. @littletower I just got my first deploy of react-server on Heroku. It requires only a one liner in a Procfile. You can see the app here.\nI am however getting these log errors from the JS assets server:\n(index):6 Mixed Content: The page at 'https://react-server-redux.herokuapp.com/' was loaded over HTTPS, but requested an insecure script 'http://localhost:3001/common.b3f98eeedb50d3031abd.bundle.js'. This request has been blocked; the content must be served over HTTPS.(anonymous function) @ (index):6P @ (index):6S @ (index):6(anonymous function) @ (index):6script @ (index):6(anonymous function) @ (index):7\n(index):6 Mixed Content: The page at 'https://react-server-redux.herokuapp.com/' was loaded over HTTPS, but requested an insecure script 'http://localhost:3001/HomePage.7cdf21b5a5bf0911d1f3.bundle.js'. This request has been blocked; the content must be served over HTTPS.(anonymous function) @ (index):6P @ (index):6S @ (index):6(anonymous function) @ (index):6script @ (index):6(anonymous function) @ (index):7\n@doug-wade I'm not using some sort of CDN to serve these static assets. I know a custom port could be passed in on as an argument in the CLI but it's weird that Heroku starts it on \"localhost\". Have you ran into this issue in EC2?\n. @doug-wade thx for the link to the chat, shall we post a separate GitHub issue for that? Or is there already an existing one?\n. @doug-wade no worries, I'll file that. Ya'll are doing a wonderful job btw. Thanks a bunch.\n. Here's a basic example, a reimplementation of the Redux counter app in react-server:\nhttps://github.com/hzhu/react-server-redux-basic\nAll you need is redux and react-redux. Setting it up is similar to plain Redux. Now how you structure a react-server, Redux application is up to you. \n. Yeah I was planning on that! How about I submit a PR for review in a day or two?\n. @incubus8 I realized that the Counter example isn't too useful once one introduces data fetching & user interaction. Here's a better use case with react-server & redux. It's still a work in progress, but seems to work. https://github.com/hzhu/react-server-redux\nIt's a bit messy, but once I learn how to cleanly setup a redux project with react-server, I'll make the PR to react-server-examples\n. @woomike, did you mean RootElement's when attribute?\nYou can try representing your async data fetching as a promise, and put that, as the value to when.\nFor example..\n```\nconst myPromise = new Promise((resolve, reject) => {\n  // data fetch\n  // async stuff here\n})\n\n```\nOr more likely you might want to use ReactServerAgent.get() to fetch data from an api.\nReactServerAgent is a promise that represents the eventual result of the fetch.\nI have a working demo of rendering async data using redux and react-server. The specific line you might want to check out is https://github.com/hzhu/react-server-redux/blob/master/src/pages/explore/index.js#L35\nNote: I'm finding it very difficult to structure a redux app properly in react-server, i.e. how to manage store/stores & reducers. Let me know if you have some tips :)\n. ",
    "BenBBear": "Oh I should use the handleRoute method better... \n. ",
    "littletower": "thanks @doug-wade \nI was just wondering if anyone had tried it, since I really don't have enough time at the moment. I've see other react projects with deployment issues on Heroku, but I don't think they were Express-based. So like you said, there probably should not be any issues :)\nI'll let you know once I've tried! \n. @hzhu thanks a lot! I really need to give it a try now \ud83c\udf89 \n. ",
    "eduardoboucas": "Any movement on this? Just deployed the app to Heroku and I'm getting the Mixed Content errors as well.\nThanks!\n. ",
    "stanleycyang": "Yeah looks like the URLs for the assets are pointing to the wrong place. \n. ",
    "girvo": "@doug-wade How does config.js work? From the looks of the code, the rehydrate method in the client means it's still empty client-side?\nEdit to add: dotenv won't work client-side unfortunately, and attempting to add a webpack plugin like webpack-dotenv-plugin doesn't appear to work: process.env is always undefined...\n. ",
    "mcianc": "my yoeman was v 1.7.0 .. for a strange reason an old version of yo was placed in global and I was not able to remove. After some tricks I finally have the last version 1.8. Now all work.. thanks \n. ",
    "alex88": "Ok gotcha, thank you @CreepGin \nJust seen that also hot reloading is not enabled by default in development but I have to add --hot in the npm start command\n. Ok let me do that right now, just a quick question, how you test those pages? create a project using the local linked version of the cli?\n. Oh nvm, RTFM  to me :D\n. Already tried to join slack before\n\n. Damn, so strict :) Maybe contact them directly, or have an IRC channel too :)\nAnyway, better to squash the commits?\n. @gigabo is there a way to use the master version in a project? I've seen that npm doesn't support using packages directly from a git subfolder, you guys ever found a solution?\nExcept linking a local folder obviously.\n. Awesome! \ud83c\udf89  I just tried to checkout locally and seems the sub-dependencies can't be loaded..\nThanks a lot for publishing!\n. If you need an example, whole react community is there https://facebook.github.io/react/blog/2015/10/19/reactiflux-is-moving-to-discord.html\n. ",
    "mocheng": "To same late comer's time, I met same problem and managed to find it is the hot field in .reactserverrc controlling hot-reload. Just set it to be true and Hot-Module-Reload is enabled for npm start.\nAdding --hot in the npm start command doesn't work. I suppose there was some feature change after @alex88 closed this issue.\n. When I get to know react-server, I thought it could work in bigpipe mode. Unfortunately, it counld not. The react component is a nice encapsulation that is perfect for bigpipe.\nI believe there could be better customer experienve if ther is bigpipe(or async browser rendering as @incubus8 named). Image we have three components in page: Header, Left panel and Right panel. The markup is in the same sequence.\n+------------------------------+\n|              Header          |\n+---------------------+--------+\n|                     |        |\n| Left                | Right  |\n| Panel               | Panel  |\n+---------------------+--------+\nThe backend API of Header takes 300ms; the Left Panel takes 500ms and the Right Panel takes 300ms. So, even tough Right Panel markup is ready in 300ms, it still has to wait for another 200ms to get Left Panel ready. \nIf the server can push down markup and hydradated data of Right Panel in time point of 300ms. It would bring better user expereince.\n. On latest master branch, package react-server still depends on superagent v1.8.4. \nIs this change reverted?. As this code https://github.com/redfin/react-server/blob/master/packages/react-server/core/ReactServerAgent/Cache.js#L417-L418 states, there is implicit dependency from Cach on Request, even though there is no explicit require/import from each other. \nI suppose the \"key customization\" logic should resides in Cache.\n. The cache structure is two level. The first level is indexed by key urlPath according to _findEntry https://github.com/redfin/react-server/blob/master/packages/react-server/core/ReactServerAgent/Cache.js#L401-L412 \nIf cache key is customizable, the _findEntry method should be updated.\n. To keep react-server data-management-framework agnostic, it would be better to have this enhancement as another package if possible.. @jbenesch There are companies that builds products on react-server with data-management-framework other than Redux. For exmaple, redfin is on Reflux, I suppose. So, I would say it is preferred to make  react-server framework agnostic.\nIt looks it would be more straightforward to manage data with Redux other than RLS. Actually, RLS really upsets me from time to time. But, it would be better to have react-server customizable to adopt Redux, not have Redux bound together.\n. @drewpc It is feasible to have different REACT_SERVER_CONFIGS in npm script. But, in case there are a lot common config values in different config files, e.g. 100 config values is same for both development and beta env, it would be a burden to keep two config json file same. In this case, yaml file would be a better choice which need to be run by js not json.\n. @drewpc Nice suggestion.. Update code per @drewpc 's suggestion.\n. I have rebased this branch to master, but the travis unit test still failed. \nInterestingly, I beheld some PR passed the travis check. Anybody has any clue to make it work?. After changing default state of elementData to be string can remove the weird message.\nrouteData: (state={}, action) => {\n    if (action.type === 'ACTION_ROUTE') {\n      return action.data;\n    }\n    return state;\n  },\n  elementData: (state='Hello', action) => {\n    if (action.type === 'ACTION_ELEMENT') {\n      return action.data;\n    }\n    return state;\n  }\n});\nBut, the root issue still exists. The page doesn't wait 500ms to render BasicReduxComponent, but render \"Hello\" directly as when is done. In browser side, \"Hello\" is rendered as it is; then it changes to \"Element Data\" after 3s due to State update. This is not as expected.\n. @sresant Setting initial state to be null is a solution for me. In case resolved value is actually null, I thought ReduxAdapter.when can check the change of given state, but it might be complicated.\nOn more thing, I tried to update reduxAdapterReducerwith default value null as below.\nconst reduxAdapterReducer = combineReducers({\n  routeData: (state=null, action) => {\n    if (action.type === 'ACTION_ROUTE') {\n      return action.data;\n    }\n    return state;\n  },\n  elementData: (state=null, action) => {\n    if (action.type === 'ACTION_ELEMENT') {\n      return action.data;\n    }\n    return state;\n  }\n});\nIt works for routeData. However, I found that BasicReduxComponent gets rendered before elementData is resolved. As a result, the HTML rendered by server doesn't have element data. I haven't dig into this deeper, but obviously the root cause must be in RootProvider.\nIn the example code, JSX in getElements method is like this.\n<RootProvider store={this._store}>\n  <RootElement when={whenPromise}>\n    <BasicReduxComponent></BasicReduxComponent>\n  </RootElement>\n</RootProvider>\nAfter I change it to be without RootProvider as below. It works well.\n<RootElement when={whenPromise}>\n  <Provider store={this._store}>\n    <BasicReduxComponent></BasicReduxComponent>\n  </Provider>\n</RootElement>\nSeems existence of RootProvidercould make wrapped children component rendered before when promise resolved.. @sresant  Sorry for the inconvenience. I extracted whenPromise from this._storeAdapter.when(['elementData']. So, basically the getElements method is as below.\ngetElements() {\n  const whenPromise = this._storeAdapter.when(['elementData']);\n  whenPromise.then(() => {\n    console.log('#whenPromise is resolved');\n  });\n  return [\n    <RootProvider store={this._store}>\n      <RootElement when={whenPromise}>\n        <BasicReduxComponent></BasicReduxComponent>\n      </RootElement>\n    </RootProvider>,\n  ]\n}\nI also have console.log in render method of BasicReduxComponent. The console.log shows that BasicReduxComponent get rendered before whenPromise is resolved.\nIn Browser, \"View Page Source\" also shows no actual payload of BasicReduxComponent. It is the browser side rendering that make \"Element Data\" filled.\n. One more interesting side effect: If not all UI common modules go into common.js, so are css modules. As a result, on page navigation, page specific CSS files are switched, which makes page flickering.. This issue might related to the fact that react-server-redux is not transpiled in publishing.. @edmorley Thanks for the head-up. I re-read the DNS rebinding vulnerability and got it. \nHm~, then I have to update my local file in node_modules to workaround it.\n. But, even webpack-dev-server takes request with hostname localhost is fine (https://github.com/webpack/webpack-dev-server/blob/29578537c1ad38f29a445237c57a52c373183e75/lib/Server.js#L412 ), which is for better developer experience.\nWithout tweak on react-sever code, developer has to work on http://localhost or http://127.0.0.1. This might be enough. For example, local development depends on some cookie only available to xxx.com. It is preferred to develop on http://localhost.xxx.com so that it can access cookie in that domain. localhost.xxx.com can be resolved to be 127.0.0.1 in hosts file.\nIs there anything we can do in react-server to make it work and secure?\n. eslint-disable in original code actually disable eslint check for all below code. So, I just update it with eslint-disable-next-line.. ",
    "evgeny-matveev": "@gigabo Oh, I thought I tried \"--hot\", but it seems not :( Sorry and thanks!\n. Oh, I figured it out. I should have returned this.data instead.\n. ",
    "hbussell": "Hey @doug-wade, fixed up the linting problems. \nAlso added a little bit of doco to for the website.\nThanks for the feedback on the PR!\nCheers :)\n. ",
    "jamesphe": "Thanks @gigabo \n. I also meet the problem\uff0cany one can help\uff1f\n. ",
    "gpltaylor": "I am running version 0.4.6 and I get getting the same error?\nThere were errors in the JavaScript compilation.\n./__clientTemp/routes_client.js\neact-serverfound: Error: Cannot resolve module 'C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js' in C:\\Users\\gtaylor\\Documents\\react-server__clientTemp\neact-serverule C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js in C:\\Users\\gtaylor\\Documents\\react-server__clientTemp\n  looking for modules in C:\\Users\\gtaylor\\Documents\\react-server\\node_modules\neact-servers\\gtaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js doesn't exist (module as directory)\neact-server 'file' C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js in C:\\Users\\gtaylor\\Documents\\react-server\\node_modules\n      resolve file\neact-serverUsers\\gtaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js doesn't exist\neact-serverUsers\\gtaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.webpack.js doesn't exist\neact-serverUsers\\gtaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.web.js doesn't exist\neact-serverUsers\\gtaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.js doesn't exist\neact-serverUsers\\gtaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.json doesn't exist\neact-servertaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js]\neact-servertaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js]\neact-servertaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.webpack.js]\neact-servertaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.web.js]\neact-servertaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.js]\neact-servertaylor\\Documents\\react-server\\node_modules\\C:UsersgtaylorDocuments\neact-server-core-middlewareindex.js.json]\n @ ./__clientTemp/routes_client.js 7:23-120 8:24-121\n./__clientTemp/routes_client.js\nModule not found: Error: Cannot resolve module '..pageshello-world' in C:\\Users\\gtaylor\\Documents\\react-server__clientTemp\nresolve module ..pageshello-world in C:\\Users\\gtaylor\\Documents\\react-server__clientTemp\n  looking for modules in C:\\Users\\gtaylor\\Documents\\react-server\\node_modules\n    C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world doesn't exist (module as directory)\n    resolve 'file' ..pageshello-world in C:\\Users\\gtaylor\\Documents\\react-server\\node_modules\n      resolve file\n        C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world doesn't exist\n        C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.web.js doesn't exist\n        C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.webpack.js doesn't exist\n        C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.js doesn't exist\n        C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.json doesn't exist\n[C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world]\n[C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world]\n[C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.web.js]\n[C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.webpack.js]\n[C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.js]\n[C:\\Users\\gtaylor\\Documents\\react-server\\node_modules..pageshello-world.json]\n @ ./__clientTemp/routes_client.js 19:7-21:9 20:27-58\n. ",
    "dennisat": "same here\n$ npm version\n{ 'generator-react-server': '0.5.1',\n  npm: '3.10.9',\n  ares: '1.10.1-DEV',\n  cldr: '30.0.2',\n  http_parser: '2.7.0',\n  icu: '58.1',\n  modules: '51',\n  node: '7.2.0',\n  openssl: '1.0.2j',\n  tz: '2016g',\n  unicode: '9.0',\n  uv: '1.10.1',\n  v8: '5.4.500.43',\n  zlib: '1.2.8' }. ",
    "incubus8": "@hzhu thanks a lot!!\n. @doug-wade  @gigabo Sorry late reply, I think let us firstly forget about customer experience. Since it is just for demo purposes. I know well that it will have \"popping\" effect / the content pushed down the page.\nApart from that, I also think it is important to have async browser rendering, not just holding data in server and pushed it sequentially after the waited request timeout/error. I have found some other implementations, it may differ from what ReactServer does. Here are the resource examples I found:\n1. http://www.juhonkoti.net/bigpipe/example.php\n2. http://chrischandler.name/\nNow, notice that above demo examples are displaying the loader or giving user feedback interaction to wait for the data being streamed from server. What do you think? Can we make similar loader?\n. ",
    "woomike": "@hzhu Any chance you've had any luck using the RootElement's 'when' with Redux?  I'd like to render a component only when an async data call has completed, but 'where' requires a Promise, and my dispatch will no longer work if I return a promise instead of a function.\nhttps://react-server.io/docs/guides/understanding-rendering\n. @hzhu Thanks so much for getting back to me.  My apologies on the typo, yes I meant when.  I ended up being able to properly implement when and dispatch by using the handleRoute built into react-server.\n```\n    handleRoute(next) {\n        this.data = Promise.resolve(store.dispatch(getFoo()));\n        return next()\n    }\n<RootElement key={0} when={this.data}>\n\n```\n. ",
    "mpatnode": "Making the following change to node_modules/react-server/target/client/ReactServerAgent/Request.js Request constructor seemed to do the trick:\nthis._type = (method === \"GET\") ? \"text/plain\" : \"json\"; // Don't force CORS on simple GETs\n. Well Content-Type in https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html says \"indicates the media type of the entity-body sent to the recipient\".  Since the GET request typically doesn't contain any JSON, it think \"text/plain\" is more correct.   On the other hand, most the POST done in this code probably will be JSON, so the default makes sense in that case.\n. To further complicate matters, it seems the CORS problem is only in the Client code, and my recommend fix actually breaks when executed on the server, so someone smarter than me will need to rectify that.\n. ",
    "galkinrost": "Solved:\nhandleRoute() {\n  if(typeof window !== `undefined`){\n       require('autotrack/lib/plugins/outbound-link-tracker')\n  }\n  ...\n}\n. ",
    "feychou": "I know this is a website issue but I noticed this and related issues https://github.com/redfin/react-server/issues/638 and https://github.com/redfin/react-server/issues/639 in my react-server backed application  and I am adding helmet as a custom express middleware to tackled them. Would having it enabled as a default middleware in the react-server project itself be a good way to go about it or is it out of scope?. Cool, will open one. As for Frameback, I guess the framed object will be on the same domain, so helmet's default value SAMEORIGIN for  X-Frame-Options should not break it since it allows the website to frame itself.. Related https://github.com/redfin/react-server/commit/a23199e5506794feeefca16228001645b19b1a27. @doug-wade @gigabo Sure! The reason why I closed this is that I noticed it listed old commits in my fork and I did not understand why since they have been merged, but now I suspect it is just because I merged the upstream master after all.. @gigabo That works, thank you. I had figured how to return the code, however I was still missing the hasDocument option.\nI could open a PR for documenting this somewhere in the docs (maybe where I would have expected to find it). Maybe one of the examples could also have a custom 404 page?. Odd, I was just wondering where the link is. Anyway I wrote something else in the docs, hope this triggers the build.. ",
    "kennethormandy": "I\u2019m having this same problem.\nThe only way I can think of to get around it is to publish the static assets elsewhere and then pass in a --js-url, but even that would all need to get deployed on the server because the hashes change vs. compiling locally.\nIt looks like this is the line where the outputUrl is used and I think it\u2019s being set incorrectly here.\nI think the protocol is based on the https config option instead of whether the request coming into the server is using https, which probably only makes sense in development mode. Maybe a quick fix would be to just use // instead of the protocol? I know that\u2019s not the fastest option, but it would be a start.\n\nEdit\nOkay here\u2019s what I\u2019m doing in the meantime.\nAdd Surge or a different static deployment service to your dependencies (no dev dependencies since you want it to run on the server) and then for npm run scripts in package.json:\njs\n{\n  // \u2026\n  \"dependencies\": {\n    // \u2026\n    \"surge\": \"0.18.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-server start\",\n    \"compile\": \"NODE_ENV=production react-server compile --compile-only\",\n    \"deploy-static\": \"npm run compile; surge ./__clientTemp example.surge.sh\"\n  }\n}\nAnd you\u2019ll also have to add SURGE_TOKEN and SURGE_LOGIN as environment variables so you will be logged into Surge when npm run deploy-static is run. You can read more about doing that on Travis CI here, but I\u2019m applying the same thing to Heroku.\n``` sh\n./node_modules/.bin/surge --token\nWill give you a long string\u2026 \u201cabc123\u201d\nheroku config:set SURGE_LOGIN=you@example.com\nheroku config:set SURGE_TOKEN=abc123\n```\nThen in my .reactserverrc I set the jsUrl to point to my Surge URL instead.\njs\n{\n  // \u2026\n    \"production\": {\n      \"hot\": false,\n      \"minify\": true,\n      \"log-level\": \"notice\",\n      \"jsUrl\": \"//example.surge.sh/build/\"\n    }\n}\nYou can set that subdomain to whatever you want, or whatever other static host you are using. The important part is to remove the protocol so it\u2019s just // or https:// and not http://. Surge and Heroku both use https by default if you are using a subdomain on their domain, so https:// would be fine in this case I suppose.\nThen in the Procfile I am running the npm run deploy-static command I added before starting the server:\nweb: npm run deploy-static; NODE_ENV=production npm start -- -p $PORT\nThis will compile the JS and deploy it to Surge on the server, so the hashes will be the same, and the protocol will be correct.\nObviously this is a pretty complicated work-around, but I needed something that worked in the short-term, and I couldn\u2019t figure out the in React Server itself. If there\u2019s anything I can do to help move that forward, though, just let me know. I\u2019d like to avoid doing this if possible.\n. ",
    "SeverS": "Hello, \nAssuming that this.books and this.authors are promises,  you can do when={ Promise.all([ this.books, this.authors]) }. \n. ",
    "stanonyime": "Ok. I thanks you all.\n. My thoughts exactly\n. ",
    "mpyan": "I see www.redfin.com has a Sign In button at the top. I'm curious as to how the user auth/session is implemented in cases like this (e.g., handling auth/session on client and render on the server).. ",
    "jay3dec": "Ok, it seemed like my yo was old version and once updated it all ran fine. the following link helped\nhttp://codehandbook.org/typeerror-cannot-read-property-then-of-undefined-yo-react-server/\n. ",
    "mlolson": "Question I was pondering: Would it be feasible to re-factor react server so that it could be used as middleware in an express application? Like:\nimport ReactServer from 'react-server';\n//routesFile tells react server where to find the routes file...\napp.use(ReactServer({routesFile: './routes.js'});\nIn my experience it's easier to adopt something when you can use it within an existing framework like express, rather than having to buy the whole enchilada.\nDoes that make any sense? :)\n. Interesting! PS Is the README up to date? I tried to use the generator to get started but it seemed to fail.\n. @sresant After I follow the instructions in the README, when I run npm run start it produces this error:\nError: Cannot find module 'express'....\nMy directory doesn't look right. The app that is installed does not look like a react server app at all... looks like a sample express app. Very odd\nRunning Node 4.3.1\n. Lol! Thanks\n\nOn Nov 14, 2016, at 10:50 PM, Douglas Wade notifications@github.com wrote:\n@mlolson almost certainly you've installed generator-react-server v1.0.0, which is an unrelated project. We got the name from the very gracious @StevenIseki, but there are still some versions of of his previous project with that name on npm. Make sure you have v0.4.13 installed before you scaffold out a new project.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @markthethomas Any update on this? Mind if I take it?. good to merge?. @gigabo Ok to merge?. @roblg I'm going through trying to clean up old PR's. Looks like linting errs on this one\n\n[21:03:37] Starting 'eslint'...\n[21:03:40] \n/home/travis/build/redfin/react-server/packages/react-server-cli/src/compileClient.js\n   5:8  error  'callerDependency' is defined but never used  no-unused-vars\n  96:8  error  Missing trailing comma                        comma-dangle\n/home/travis/build/redfin/react-server/packages/react-server-cli/src/webpack/webpack.config.fn.js\n  104:5  error  Expected indentation of 1 tab but found 4 spaces   indent\n  105:9  error  Expected indentation of 1 tab but found 8 spaces   indent\n  106:5  error  Expected indentation of 0 tabs but found 4 spaces  indent\n  107:5  error  Expected indentation of 1 tab but found 4 spaces   indent\n  107:5  error  Expected indentation of 0 tabs but found 4 spaces  indent. Yes I believe so.. @gigabo For sure! I think you need to hit merge FYI. I don't have authorization. @gigabo Yeah no problem! Hope it's useful. It was mostly a learning exercise for my own benefit, so no worries if you want to push back on some parts of it. I can break it out into smaller PR's if that's more convenient. . I think it's best to stick with  the same syntax that superagent uses. Yeah, good call. Good call!. That's a good question- I think one could make the argument either way. Let's discuss further this afternoon.. Ah yeah, I can switch those back if need be.. Oh good. Wasn't sure if that was going to work . HttpError should have members status and redirectUrl same as the object that was being returned before, but this should be tested further.. ",
    "emecell": "Fails on 6.9.1 as well.\n. I am able to verify that react server does not start up using 6.2.2 using the steps above:\nbash\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ node --version\nv6.2.2\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ react-server init\n(output cut)\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ react-server add-page '/' Homepage\nGenerating pages/Homepage.js\nUpdating routes.json\nAll set!\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ react-server start\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\nHowever, it looks like if I just add superagent to the package.json, it starts up fine:\n``` bash\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ vim package.json (add superagent 1.8.4)\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ npm install\ntemp@1.0.0 /Users/robert.law/code/js/react-server/packages/react-server-examples/temp\n\u2514\u2500\u252c superagent@1.8.4\n  \u251c\u2500\u2500 component-emitter@1.2.1\n  \u251c\u2500\u2500 cookiejar@2.0.6\n  \u251c\u2500\u2500 extend@3.0.0\n  \u251c\u2500\u252c form-data@1.0.0-rc3\n  \u2502 \u251c\u2500\u2500 async@1.5.2\n  \u2502 \u251c\u2500\u252c combined-stream@1.0.5\n  \u2502 \u2502 \u2514\u2500\u2500 delayed-stream@1.0.0\n  \u2502 \u2514\u2500\u252c mime-types@2.1.12\n  \u2502   \u2514\u2500\u2500 mime-db@1.24.0\n  \u251c\u2500\u2500 formidable@1.0.17\n  \u251c\u2500\u2500 methods@1.1.2\n  \u251c\u2500\u2500 mime@1.3.4\n  \u251c\u2500\u2500 qs@2.3.3\n  \u251c\u2500\u252c readable-stream@1.0.27-1\n  \u2502 \u251c\u2500\u2500 core-util-is@1.0.2\n  \u2502 \u2514\u2500\u2500 string_decoder@0.10.31\n  \u2514\u2500\u2500 reduce-component@1.0.1\nnpm WARN express-state@1.2.0 requires a peer of express@>=3.x but none was installed.\nnpm WARN temp@1.0.0 No description\nnpm WARN temp@1.0.0 No repository field.\nrobert.law at rlaw in ~/code/js/react-server/packages/react-server-examples/temp on master\n$ react-server start\n2016-11-03T20:38:20.033Z - warning: [react-server-cli.src.logProductionWarnings] PRODUCTION WARNING: the following current settings are discouraged in production environments. (If you are developing, carry on!):\n2016-11-03T20:38:20.036Z - warning: [react-server-cli.src.logProductionWarnings] -- Hot reload is enabled. To disable, set hot to false (--hot=false at the command-line) or set NODE_ENV=production.\n2016-11-03T20:38:20.036Z - warning: [react-server-cli.src.logProductionWarnings] -- Minification is disabled. To enable, set minify to true (--minify at the command-line) or set NODE_ENV=production.\n2016-11-03T20:38:20.036Z - info: [react-server-cli.src.logProductionWarnings] NODE_ENV is set to undefined\n2016-11-03T20:38:20.082Z - notice: [react-server-cli.src.commands.start] Starting servers...\n2016-11-03T20:38:20.082Z - info: [react-server-cli.src.commands.start] Starting hot reload JavaScript server...\n2016-11-03T20:38:22.253Z - info: [react-server-cli.src.commands.start] Starting HTML server...\n2016-11-03T20:38:22.294Z - info: [react-server-cli.src.commands.start] Started hot reload JavaScript server over HTTP on host localhost:3001\n2016-11-03T20:38:22.371Z - info: [react-server-cli.src.commands.start] Started HTML server over HTTP on host localhost:3000\n2016-11-03T20:38:22.372Z - notice: [react-server-cli.src.commands.start] Ready for requests on host localhost:3000.\n```\nSo digging deeper it looks like we're just swallowing up the error in cli.js. \n. @doug-wade I think you might have an older version of Chrome: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Browser_compatibility\nI just switched it to use lodash's find instead though.\nI updated the dependencies to include the react-server-cli.\n. Right now we're ranked 20 for when you search for \"react server side rendering\". Let's try to at least get onto the first page and hopefully top 5. We probably also want to explore adding some more content to our home page like companies using React Server and community stats.. Does this still only allow logger.warning vs. being able to do logger.warn?\n. I could drop this but otherwise it requires switch statements to be formatted like:\nswitch(a) {\ncase \"blah\":\ndefault:\n    return true;\n}\n. ",
    "svassr": "Yes I am. I added the version up here\n. ",
    "devoiddesign": "Bo,\nThat is odd. I closed the previous pull request and started a new one under the title \u201cIE8-9 Detection\". Sorry for the confusion.\nJames Wolensky\nOwner | Lead Programmer Devoid Design www.DevoidDesign.com\nOn Mon, Nov 14, 2016 at 12:46, Bo Borgerson notifications@github.com wrote:\nHi @devoiddesign [https://github.com/devoiddesign] this sounds cool! But it looks like something didn't work right with this PR. Instead of the change you described the diff shows the removal of the  element...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub [https://github.com/redfin/react-server/pull/752#issuecomment-260457297] , or mute the thread [https://github.com/notifications/unsubscribe-auth/ARs3bZNkKeTmi7GtGc_4s36Cb5SSQbuCks5q-MiQgaJpZM4KxwIt] .\n. ",
    "kafeltz": "@drewpc did you manage to make it work without nginx? I have the same issue and its so annoying not being able to requiring and image with file-loader!.\nI couldn't make it work yet.. How to fix this? I had to export the file from node_modules and imported manually. Super ugly.. @mtrabelsi I found the issue.\nBy default, the CSS loader from react-server has an exclude filter for folder. I have overwritten the config:\n```\nexport default (webpackConfig) => {\n     webpackConfig.module.loaders.unshift({\n        test: /.css$/,\n        loader: '/Users/ismael/projects/react-server/node_modules/react-server-cli/target/NonCachingExtractTextLoader.js?{remove:true}!css-loader',\n        //exclude: /node_modules/   <------------------ this is the problem!\n    })\nreturn webpackConfig\n\n}\n```. Cool!. ",
    "pr1ntr": "Same here, I can't require images through react. I also can't get the svg-loader to work either. I think part of this hardship is due to the fact that react-server gives absolutely no way to just have a folder of static assets without using a fronting-server. Wouldn't it be easier to just allow for express static middleware?\n. My current solution to this problem is I have to compile on one (or Travis) server and then SCP it to the others and restart all those servers. Not ideal for all deployments IMO.\nHow about this. Can we base the HASH on an MD5 Checksum of the files that are generated? That way as long as the source doesn't change you will always get the same hash, thus you can compile it as many times as you want without conflicting manifests.. ",
    "jjunkin": "When I stepped through the code with the chrome debugger, subscribe was always undefined - including within the callback function. I realize this could be different on various browsers (using chrome on osx).\nFrom my understanding the \"listen={emitter}\" functionality (documented in Understanding Rendering) depends on this subscribe function being defined, therefore does not work as documented. Using the \"listen=\" prop I am able to get data to load in the initial render but I am unable to trigger a data reload after that.\nDo you have any examples of the \"listen\" prop working  after the initial data load? I was unable to find any in the codebase. I noticed the test PropsFromEmitterRootElement.js but this only tests the initial data load using a single setTimeout. Examples of this functionality seem critical for the project and would be helpful.\nI would be happy to try and submit a change if I get the time next week. Thanks for the response!. ",
    "mischah": "We had some problems after having more than 5000 generator in that list.\nThe generator list is totally new and shining and should be merged in master soon. See yeoman/yeoman-generator-list#52\n :sparkles:\n. More insights:\nWe are now using the npms.io API to fetch generators.\nHaving a look at https://api.npms.io/v2/package/generator-react-server shows that the result is missing the github object.\nYou find an answer about how to fix this over here: https://github.com/npms-io/npms-analyzer/issues/112\n. Hej @gigabo, \nthe github object should be in the JSON response from the npms.io API.\nCompare the following two responses.\n\nExample Yeoman generator which has the github object\nhttps://api.npms.io/v2/package/generator-http-fake-backend\nThe React server Yeoman generator\nhttps://api.npms.io/v2/package/generator-react-server\n\nThe github object has a property called starsCount among others.\nI have no idea about the reason for the absence of the github object in your case. Because the package.json of your Yeoman generator references to this Github repo:\njson\n\"repository\": \"redfin/react-server\"\nMaybe it has something to to with your unusual setup having different npm packages in this Github repository in the packages subdirectory?!?\nSo I would suggest opening an issue over here: https://github.com/npms-io/npms-analyzer/issues. Oops. This is a known issue with so called \u00bbmonorepos\u00ab.\nSee https://github.com/npms-io/npms-analyzer/issues/83\nYour setup doesn\u2019t seem to be that unusual, though \ud83d\ude33 \nEdit: Never heard of that monorepo thing before. Quite interesting: https://github.com/babel/babel/blob/master/doc/design/monorepo.md. Yeah. Going to zero stars in the generator list really is a bummer \ud83d\ude16 \nI just left a message over here: npms-io/npms-analyzer#83 :disappointed:. ",
    "markthethomas": "@gigabo I can take this on if it's still a thing, looking to help out where I can w/ the project \ud83d\udc4d . \ud83d\udc4d\ud83d\udcaf\nOn Mon, Jan 9, 2017 at 2:08 PM Bo Borgerson notifications@github.com\nwrote:\n\n@markthethomas https://github.com/markthethomas Awesome! This will make\nthe UI more consistent / less confusing. Thanks for taking it on!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/redfin/react-server/issues/783#issuecomment-271423289,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEstAZWL4S5BXdKbe-DKFPwOp7QX7Lbmks5rQq_kgaJpZM4LEwFQ\n.\n-- \nMark Thomas\n\n\n@markthethomas everywhere\nifelse.io\n. @gigabo I'd also be interested in helping clear up some of the docs and/or helping w/ the component API documentation, there are a few things I've run into when integrating this w/ my projects that I've yet to overcome all the way \ud83d\udc4d  think I saw a few other issues where this came up. @gigabo is there any general objection to bringing in deps to address things like this? was thinking of decamelize, which I think yargs already depends on and uses to address this case. jw before I commit and PR anything \ud83d\udc4d . Sounds good, thanks!\nOn Wed, Jan 11, 2017 at 4:07 PM Douglas Wade notifications@github.com\nwrote:\n\nGenerally, we're trying to head in the opposite direction, per #277\nhttps://github.com/redfin/react-server/issues/277. If, however,\ndecamelize is already in our dependency closure, and yargs doesn't have a\nway to support this natively, then I don't see any harm.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/redfin/react-server/issues/783#issuecomment-272036119,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEstAZgnal7c7cwnP_gk2hpvDwVX7Ipcks5rRW7MgaJpZM4LEwFQ\n.\n-- \nMark Thomas\n\n\n@markthethomas everywhere\nifelse.io\n. Shoot, this totally got away from me - go ahead \ud83d\udc4d\nOn Thu, Jun 15, 2017 at 3:57 PM Matt Olson notifications@github.com wrote:\n\n@markthethomas https://github.com/markthethomas Any update on this?\nMind if I take it?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/redfin/react-server/issues/783#issuecomment-308885150,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AEstATzVURvgbxleT3XaE1dUhzMcIpEdks5sEbMWgaJpZM4LEwFQ\n.\n-- \nMark Thomas\n\n\n@markthethomas everywhere\nifelse.io\n. FWIW, this was something I ran into when initially bringing RS into my project. Had a primary express app server that sent client code down and wanted this to replace the additional server I had set up for the public-facing server (it basically served user sites) \ud83d\udc4d . ",
    "jbenesch": "\nTo keep react-server data-management-framework agnostic\n\nI don't really get this... React Server IS a data management framework. State is kept in a RLS object (The Model) which is handed to the Page API (The View) in the Client Controller. React is simply the templating language in an otherwise normal MVC OO app.\nReally your React \"actions\" should just be View methods which have a two way data binding with the RLS Model. Very similar to a typical Backbone application.\nIf React Server wanted to be more Fluxy and support Redux, it would seem like you would want to do something a long the lines of:\n\nRemove RLS in favor of creating a redux store\nRemove Page API in favor of firing a series of well defined actions\nRemove current custom middleware implementation in favor of Redux Middleware (check out the thunk middleware for an example)\n\nThen my app layer would provide React Server with a Root component (which gets wrapped in a Redux Provider), I could add custom redux middleware to respond to well defined actions that React Server dispatches, and I would provide a root reducer that React Server would use in creating the store.\n. So maybe React Server Page API has a concept of a store; getStore and the user can provide whatever store they desire. React Server just manages the \"if we have a store don't create another one\" on every route. Also the serialization of the store's current state and the reboot/rehydration of the store on the client.\nYou'd still have to deal with dual state managers but I guess you can look at RLS as a global context rather then a store. Would seem like RLS could be evented and you could just subscribe to RLS changes to rerender your views. Then you wouldn't need any other store, just use the built in RLS.. I completely agree but when I try and require it I get this error:\n```\ngenerator-react-server:app .reactserverrc matches react-server-cli default option keys\nnot ok 1 - failed with \"Unexpected token export\"\n\noperator: undefined\nexpected: undefined\nactual: undefined\nat: SyntaxError: Unexpected token export\n\n...\n```\nThoughts? There's gotta be a babel plugin different between react-server-cli and the generator but I couldn't quite figure it out and didn't really want to add a package for a unit test.\n. I get this error when I try and import the file at the top:\nimport defaultOptions from '../../react-server-cli/src/defaultOptions.js';\nTAP version 13\n/Users/jason/Projects/react-server/packages/react-server-cli/src/defaultOptions.js:14\nexport default {\n^^^^^^\nSyntaxError: Unexpected token export\n    at Object.exports.runInThisContext (vm.js:76:16)\n    at Module._compile (module.js:513:28)\n. Maybe I'm missing the correct dev entry point... but when I cloned and then ran npm run bootstrap I hit the same gulp error.\n. I was just testing the CI... Making sure it was still working correctly :)\n. if (/-/.test(key) && !(flags.aliases[key] && flags.aliases[key].length) && configuration['camel-case-expansion']) {\n      var c = camelCase(key)\n      flags.aliases[key] = [c]\n      newAliases[c] = true\n    }\nhttps://github.com/yargs/yargs-parser/blob/master/index.js#L336-L340\n\ud83d\udc2b   \ud83c\udfb8  :metal: \n. \ud83d\udc4d \nan Async Function always returns a Promise. (ref)\n. ",
    "ptomasroos": "This can be closed since #839 @sresant ?. This should be closed now since #869 is merged?. I think this is a great idea. Every page starts with a response form the server, moving as many bits as possible and letting the output be a bool just nails it.. Sure thing, missed the comment.\nYou're welcome!. ",
    "curio77": "Well, in retrospect, this seems related to #689.. ",
    "richiethomas": "I'd like to take this one, if possible.\nI assume this fix will not address the 2nd warning about \"prefer global npm\", correct?. ",
    "cashhh": "I'd like to give this a shot. Awesome. Glad I could help.. ",
    "MPjsx": "@sresant I didn't, used default code. As I understood store.getState() runs only on the client, I see redux value blinking after I try to reload page and also getting  warning \nwarning.js:36 Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) !-- /react-text --><!-- react-text: 4 --\n (server) !-- /react-text --></div></div>. Also I noticed next error in server logs Warning: Failed prop type: The propvalueis marked as required inCounter, but its value isnull.\n    in Counter (created by Connect(Counter))\n    in Connect(Counter)\n    in RootElement\n    in Provider (created by RootProvider)\n    in div (created by RootProvider)\n    in RootProvider\n    in RootElement But default value in redux is 0. ",
    "krisxw": "@drewpc overall I like your gzip configuration settings, but I'm not too sure they're good to include in this particular guide. My intention of these changes was to just point the user in the right direction to get them to use gzip with nginx, not necessarily to fully configure the file.\nThat said, there's real merit to at least defining some of these terms (particularly the gzip_disable, since the special value msie6 is not intuitive). I wouldn't object if you added in that full gzip configuration, though I think it might be slightly against the spirit of the guide, which I thought was to ramp people up on production react-server with minimal distractions. If I'm wrong about that though, then go for it!. I can comment this if it's confusing to read. Basically, I wanted a site that served something a bit more interesting than a bunch of monochrome elements, so it serves a random assortment of various elements from the colors of the rainbow. A bit unnecessary maybe, but it was very little effort.. I didn't appreciate the difference. I'm wanting 100k elements, so I'll adjust this accordingly.. After changing this behavior such that I was correctly returning a large number of elements (not one element with a large number of children), I found myself running out of heap space in javascript, so this number came down intentionally. . I did not incorporate this feedback into my most recent commit. I'll address this in the next commit.. I only have a cursory familiarity with LABjs, but I wonder if this comment is discoverable enough, since I'm not sure it's obvious that you need xhr access in order to use this (though I would imagine access would generally be granted unless it's cross-domain or some such). Will this actually pop up for people in the real world?. It's tough for me to tell how the options object is set for LABjs. Looks like we pass just a couple of parameters into the LABjs globaldefaults and let our typical defaults dictate all of the other options. This is a nit pick, but I find that flow a bit confusing. It's certainly the most line-efficient way to go about it, though, and if it doesn't matter most of the time then feel free to ignore this.. ",
    "mtrabelsi": "You can also reproduce the same behavior when importing css directly from node_module!. I just reviewed the PR, otherwise thanks for your time guys :-). Nice! that's exactly what I'm looking for. Thanks for your comment.\nI wonder how to contribute to the doc? Should I create a regular PR in this repo?. @drewpc : \nI cloned the repo: \n$ git clone https://github.com/redfin/react-server.git\nthen ran : \n$ npm run bootstrap\nAfter that, I made some changes to the file docs/guides/react-server-cli.md then compiled the files : \n$ cd packages/react-server-website\n$ npm run build-assets\nFinally started the website : \n$ npm start\nActually I find that my change doesn't take effect -completely ignored- is that expected? If not can you reproduce that in your side?\nThanks in advance. Please do not forget to remove the comma as well, we don't know when it breaks :-). ",
    "szhou8813": "Oh I guess we ll need to update tutorials/docs on react-server.io too. How do I do that?. Sure, I ll check that out!. ",
    "salehhamadeh": "Can we use setState instead of updating the props and forcing an update?. PR is submitted here https://github.com/redfin/react-server/pull/965. Bo and I talked offline. We decided to update react-hot-loader to v3.1.1. Server-side hot reloading will continue to work, so making a change and refreshing the page will show the changes. However, client-side hot reloading is broken because React 16 does not have ReactMount, which react-hot-loader v1 depended on. I will open an issue for the broken client-side hot module replacement.. Sure I'll do that.. I added a comment below. Yes it is compatible, but we will lose client-side HMR because react-hot-loader now needs us to use module.hot.accept and rendering the component tree in our entrypoints rather than using the no longer supported ReactMount.\nSee step 2 here http://gaearon.github.io/react-hot-loader/getstarted/. prop-types is only compatible with these versions. In previous versions, React will log console warnings if we use prop-types with previous versions https://www.npmjs.com/package/prop-types. ",
    "zlegein": "PR with issue #905 . I was able to achieve what was needed by using getBodyStartContent and passing in scripts there.\nIf you are looking to place a script synchronously in the HEAD then you can assign a type=\"application/javascript\" and force the loading of all scripts synchronously, not very elegant, but works, just note any browser incompatibilities. \nThis PR may is no longer needed, closing.. ",
    "peorth80": "I have the same issue in Windows\n\n. ",
    "kokno": "nobody found a solution for this error ?. ",
    "nete": "try using http://localhost:3000\nand inside your \".reactserverrc\" file add the host, so it looks something like this\n{\n  \"routesFile\": \"routes.json\",\n  \"host\":\"localhost\",\n  \"port\": 3000,\n  \"env\": {\n    \"production\": {\n      \"port\": 8080\n    }\n  },\n  \"customMiddlewarePath\": \"express.config.js\"\n}\n. ",
    "lochstar": "After further investigation, I have solved this issue using babel-plugin-module-resolver and removing .babelrc from the style-guide repository, replacing it with a webpack babel configuration.. ",
    "mkozhukharenko": "same question, can anybody answer?. ",
    "nashio": "Hi, @sresant , do you know why this licence is pending?\nlicence/cla \u2014 Waiting for status to be reported. ",
    "edmorley": "\nHotLoadJsServer` tends to be only used in development. So, this change would not bring security issue.\n\nThis unfortunately isn't true. The security issue here is a DNS rebinding attack which will still affect development - see the explanation in:\nhttps://github.com/webpack/webpack-dev-server/issues/887\n. If it helps, recent versions of webpack-dev-server now auto-whitelist hostnames that are IP-address-like (eg 192.168.0.123 would not require any additional configuration to be permitted out of the box), plus allowedhosts now supports wildcards for subdomains:\nhttps://webpack.js.org/configuration/dev-server/#devserver-allowedhosts\nWith those changes there should hopefully be very few cases that require the use of disableHostCheck.. ",
    "charlierlee": "Did anyone come up with a solution to this?. ",
    "hollinwilkins": "Nevermind, I see that the server object being passed is an express server and I need to use a plugin like bodyParser now.. ",
    "dfadev": "See PR #947. See PR #947 . npm publish?  lerna publish?. ",
    "EthanOrange": "npm run start error. ",
    "AlecBoutin": "Seems to be a problem with Node 8.x. The require.cache object no longer has a hasOwnProperty method. Change is reproducible by openning node REPL and running require.cache.hasOwnProperty.\nFull stack trace\n```C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\react-server-cli\\target\\serverSideHotModuleReload.js:37\n                if (/node_modules/.test(filename) === false && require.cache.hasOwnProperty(filename)) {\n                                                                             ^\nTypeError: require.cache.hasOwnProperty is not a function\n    at C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\react-server-cli\\target\\serverSideHotModuleReload.js:37:64\n    at Array.map (native)\n    at serverSideHotModuleReload (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\react-server-cli\\target\\serverSideHotModuleReload.js:36:37)\n    at Compiler. (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\react-server-cli\\target\\compileClient.js:213:45)\n    at Compiler.applyPlugins (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\tapable\\lib\\Tapable.js:26:37)\n    at Watching._done (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\webpack\\lib\\Compiler.js:78:17)\n    at Watching. (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\webpack\\lib\\Compiler.js:61:18)\n    at Compiler.emitRecords (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\webpack\\lib\\Compiler.js:282:37)\n    at Watching. (C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\webpack\\lib\\Compiler.js:58:19)\n    at C:\\Users\\Alec\\Code\\react-server-test\\node_modules\\webpack\\lib\\Compiler.js:275:11```. ",
    "gestone": "Running into the same issue. Any fixes besides downgrading the version of node?. ",
    "hugotox": "Same issue. Mac 10.12.6, node 8.3.0. ",
    "johndturn": "It appears that this has been merged, though projects built with the Yeoman generator still have this issue. Any ETA on when the generator will be updated? . ",
    "monicatie": "Thanks @gigabo , CLA signed!. ",
    "hbucius": "fixed.. who can help me review it ?. Currently, Link do not have any callbacks. It is very inconvenient. For , besides hrefs, It can also add callbacks. We need to add this for Link.. ",
    "joseantonjr": "Hi, I'm new to open source and I would like to work on this.. ",
    "hatfarm": "I also had to add serialize-javascript to get it to start up.. ",
    "mcskinner": "guess this project is on low maintenance mode.... @roblg no problem, sorry for the snark haha :). ",
    "RobKopp": "Mind adding a reference to 'babel-runtime' here to make this truly plug and play?  Because of the routes file construction the error is consumed if installing this example onto a totally fresh machine.  And yes, I did not read the dependencies :)\n. ",
    "decoy31": "Missing semicolon.\n. Was this change just a personal preference of yours or is there an additional benefit I don't know about?\n. Why are you removing the resets?\n. fdescribe -> describe\n. Change this to: if (typeof on === 'undefined').. If this._withCredentials is expected to be a boolean, I'd recommend changing this to: this._withCredentials = !!on;. To me, the property name _withCredentials is vague. One of/variant of the following would be more self-documenting:\n- _enableCORS\n- _isCORSEnabled\n- _corsEnabled\n- _withCORSEnabled\n- _withCrossOriginHTTPRequestsEnabled. Oh right. I didn't notice we were modeling this after superagent. That's unfortunate. Go ahead and stick with what you have then.. ",
    "auskast": "Is it possible to target ~0.14.2 || ^15.1.0? That will let users still on react 0.14 catch up. might actually make it easier for you guys to manage your upgrade as well. ",
    "davidk107": "Took a look into React internals and it appears that setting this.props = ... has no effect whatsoever. Thus the subsequent call to this.forceUpdate() re-renders the component without any prop updates. By using setState this will also fix the issue described in https://github.com/redfin/react-server/issues/884. I tested it out and it seems that at this point the constructor for RootElement has not been called (which is to be expected) Thus rendered.state.childProps will be undefined. However even if the constructor is called, both rendered.state.childProps and rendered.props.childProps will be the same object and so we are fine with just relying on using rendered.props.childProps here. \nI can say that I am confident that rendered's componentDidMount will not have been called. That is what hooks up the listener to listen which might cause changes to rendered.state.childProps. . Not sure I understand. What do we mean by on the first pass? . One downside to doing this is that if nextProps.childProps is empty, then newChildProps will still retain old keys/values from this.state.childProps. The workaround to this would be to pass in null as the new value for those keys if that behavior is desired. . ",
    "jleoirab": "In this case, what would the expected behavior be? Based on this:\nhttps://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Syntax\nIt seems like it will be wrong to store the part after the ? as as query params in this case since it does not comply with the uri syntax.. "
}