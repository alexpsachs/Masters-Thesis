{
    "3lvis": "Thanks!\n. @kostiakoval It's there https://github.com/hyperoslo/Sync#nsmanagedobject-hyppropertymapper\nI think relationships and inverse can be named in any way, can't remember adding a convention for that\n:)\n. @kostiakoval Oh, understood. I'll verify and update the readme.\n. @kostiakoval I wonder if this is fixed too\n. ok :)\n. Sweet :star: :cake: :star:\n. So a child has many parents (but it's a person) and a parent has many childs (he's also a person).\nHow would you represent this on a JSON? Something like this?\njson\n{\n  \"id\":0,\n  \"name\":\"Parent name 0\",\n  \"children\":[\n    {\n      \"id\":1,\n      \"name\":\"Child name 0\"\n    },\n    {\n      \"id\":2,\n      \"name\":\"Child name 1\"\n    }\n  ]\n}\n. @kostiakoval Thanks :) I think it's clear now\n. Totally agree :+1: \n. Awesome!\n. @kostiakoval thanks for adding the JSON and the model, both help a lot to reproduce the issue. Maybe this should be a requirement in our contribution guidelines.\n:star2:  You are awesome :star2: \n. @kostiakoval Would you mind adding a test for this?\nThe common workflow is to add a bug that proves the failure, then fix the thing.\n. @kostiakoval Great work Konstantin!\n. Fixed! https://github.com/hyperoslo/Sync/tree/master/Examples/DesignerNews\n. @kostiakoval do you mind adding a test?\n. @kostiakoval No, I meant a test that showed what was failing.\nLike:\n- Add test that fails\n- Add fix\n- Push\n. Nice!\n. It's not :) Only possible for attributes\n. At the moment we are only supporting custom mapping for attributes.\nThe idea is to support relationships too =>https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/releases/tag/2.9\n. Linked to => https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/issues/52\n. Fixed by @RamonGilabert on https://github.com/hyperoslo/Sync/pull/36\n. @RamonGilabert thanks for taking the time, you're awesome :)\n. Overall looks pretty nice, can you also drop the test target (delete it completely)? Since we are not going to support tests in the Demo project.\n. Awesome work :tada: !!!\n. @RamonGilabert: wow, you're fast :D\n. Fixed\n. :broken_heart: \n. https://github.com/hyperoslo/Sync/pull/27 :(\n. @zenangst ....\n. :+1: \n. Pointing to master is not better\n. As soon as you change one line of code the URL is no longer valid.\nI this case moving the folder\n. Might be even better to point to a tag/release! In case you break API\nhttps://github.com/hyperoslo/Sync/tree/0.6/Examples/AppNet\n. I can't get the comments to show, it says \n2015-03-27 07:44:43.809 DesignerNews[6416:120824] *** -[NSKeyedUnarchiver initForReadingWithData:]: data is NULL\n. Damn, still get the error\n. I thought you could use concatenated attributes as a key.\nFor example body + created_at could be a key since joining them makes it \"unique\"\n. For now making body the primaryKey would do the job\nhttps://github.com/hyperoslo/Sync/issues/31\n. The main problem is that a comment in https://news.layervault.com/?format=json it doesn't have an id so it doesn't get mapped.\nThe idea is to make body a primary key so it gets the behavior of id.\n. @RamonGilabert I removed it from PropertyMapper because it's not connected in any way, it should go here.\nThe issue in Sync is here => https://github.com/hyperoslo/Sync/issues/31\n. Still it's only showing the root comment, not the child ones\n. I wonder if hyper.remote.key would be better, it would make it consistent at least\n. > Hell, if DATAStack does what I think it does, what about\u2026\n\nobjective-c\n[Sync changes:notes as:@\"Notes\" on:self.dataStack ...]\n\u2026? Too crazy!?\n\nThat's very Swift of you, we should totally change the API once we make a Swift bridge.\n. @RamonGilabert I like that!\n. @RamonGilabert I haven't choose that direction because of NSEntityDescription, in a Core Data context when you say entity most of the time you are referring to a NSEntityDescription instance.\nWe could go for \nobjc\n+ (void)changes:(NSArray *)changes\n   inEntityName:(NSString *)entityName\n      dataStack:(DATAStack *)dataStack\n     completion:(void (^)(NSError *error))completion\nAnd when we rewrite the entire thing in Swift we make it simpler :)\n. Fixed on #40!\nThanks @RamonGilabert :star2:  :bouquet: :star2: \n. Fixes #38\n. This wasn't working O_O?\n. It doesn't matter what you use, this only saves into Core Data.\n. It's an interesting idea, and probably would make this process a bit easier.\nBut downloading images should be done only when the user needs it, otherwise you'll end up storing a huge amount of images, using a lot of phone power for nothing.\nThe best way to download images in a UITableView for example is to start the download as soon as the user sees the view, and start the download only for the visible cells, when the user stars scrolling the in-progress downloads should be canceled and new ones should be started for the new visible cells.\nWe could probably make a different library to handle this, I've made it in many apps and is something I always wanted to do, but I don't think it belongs to Sync.\n. This could be a different project, might be better if we keep Sync with dates, strings and numbers.\n:)\n. Thanks :dancers: \n. Thanks Chris <3\n. @RamonGilabert I'm already on it, I'll ping you when I get more progress\n. Oh no! Is this going to be fill with :+1: too?!\n. Now that I know this is a good idea, no need to keep an issue on it. Will update when done. \n. Fantastic initiative Chris!!!! :scream: \n. This PR should contain migration of the Objective-C example too (in case we find some issues there).\nAlso, do we need a special Tests-Swift target? Maybe we can update the existing Tests target so it's also in Swift.\n. @zenangst @RamonGilabert @kostiakoval: \nWould making Sync a struct work when using Objective-C? It doesn't need to be a subclass of NSObject\n. Looks like Travis doesn't work with Swift 1.2\n. @kostiakoval What a piece of swift.\n\n. @kostiakoval I understood what you meant, I was having fun with what it says in the docs\n. WHY ARE THE TESTS STILL PASSING?!\n. Still not sold to the Sync.process stuff.\nCurrent API reads much nicer \n[Sync changes:....\nSomething we could do is make Sync an instance method on NSObject so you'll do\nsync(changes:...\n. @zenangst I think they are not needed now. I remember Mr @kostiakoval posting out that things get prefixed behind the scenes.\nSync.localKey\nMeanwhile in Objective-C land you'll have non-guaranteed results.\n. @markvaldy I thought that only applied to Objective-C.\nDamn.\n. @zenangst Before we had \"use this instead\". Can we add this here? It's ok to see that it's deprecated but we should point out what's the new method or what has changed.\n. Damn, sucks big time that we'll have to change our minimum deployment target to iOS 8 when merging this.\n. Doesn't seem that there has been more activity here in a while and the codebase has changed quite a lot. Might be better to leave this one in Objective-C and start focus in Swift for future pods.\n. I really like how you think but sadly this spans over the scope of Sync.\n\nSync eases your every day job of parsing a JSON response and getting it into Core Data. It uses a convention over configuration paradigm to facilitate your workflow.\n\nBut this seems like a wonderful idea for a project on top of what we have!\n. @kostiakoval You mean from the actual API?\n. Hi @skywinder, interesting thought, at the moment MagicalRecord and DATAStack clash and they couldn't live together.\nCould be interesting to replace DATAStack with MagicalRecord thought.\nWe'll make a pros and cons list and think about it.\nPersonally I think MagicalRecord it's a pretty massive dependency that I would rather not have.\n. @skywinder Any reason why you would prefer MagicalRecord over DATAStack?\n. @skywinder Interesting points :point_up: \n. Hi Petr! At the moment we will keep only supporting DATAStack it's pretty lightweight and it fits our needs.\nWe will reconsider it if we get more requests.\nDATAStack provides a simple way to create a Core Data stack, if there's anything you miss from MagicalRecord let us know and we could collaborate into make it more awesome. :grin: \n. @skywinder Hi Petr, thanks for your contribution. Sadly, we use GitHub's release notes for this and it's been great so far.\nhttps://github.com/hyperoslo/Sync/releases\n. Hi Ben!\nThanks for reporting this issue, I'll see if I can reproduce it.\nIs there any reason why you would need to use imageId instead of the default remoteID?\n. Fair enough :grin: \n. @bmnick fantastic! Would be great to hear what do you think about us uppercasing acronyms? Looks like you use imageId while we use imageID.\nhttps://github.com/hyperoslo/NSString-HYPNetworking#acronyms\nID being acronym for Identifier\n. @bmnick Does your JSON looks like this?\n``` json\n[\n  {\n    \"ImageId\": 0,\n    \"url\": \"http://sample.com/sample0.png\"\n  },\n  {\n    \"ImageId\": 1,\n    \"url\": \"http://sample.com/sample1.png\"\n  },\n  {\n    \"ImageId\": 2,\n    \"url\": \"http://sample.com/sample2.png\"\n  }\n]\n```\n. @bmnick Looks good! I'll add some tests \\o/\n. Don't worry! Thanks for contributing, let us know if we can help with anything else.\n:bouquet: \n. Hi Bart!\nWe'll add this to the README, but today you can achieve what you just mentioned by supplying a NSPredicate.\nSo for example you could say \"Sync Users excluding offline ones\".\nHere your Users that have the isOffline flag set to YES will be skipped.\nobjc\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"isOffline = %@\", @NO];\n[Sync changes:JSON\ninEntityNamed:@\"User\"\n    predicate:predicate\n    dataStack:dataStack\n   completion:^{\n       // New objects have been inserted\n       // Existing objects have been updated\n       // And not found objects have been deleted\n    }];\nI hope this was helpful to you :)\n. :tada: :smile: :tada:\n. Hi @risp!\nYes we have support for that but your JSON would have to look a bit different.\njson\n{\n  \"id\":12345,\n  \"name\":\"My Project\",\n  \"category\":{\n    \"id\":231,\n    \"title\":\"Category name\"\n  },\n  \"members\":[\n    {\n      \"id\":1,\n      \"name\":\"Member 1\"\n    },\n    {\n      \"id\":2,\n      \"name\":\"Member 2\"  \n    }\n  ]\n}\nThen in your Core Data Model you'll have\nProject ----- (to one)----> Category\nProject ----- (to many)----> Member\n. Is that what you meant?\nTake a look at the Tests project, it has various Core Data entities supporting all sorts of combinations.\nWe also have all sorts of JSON files that could help you as examples\nhttps://github.com/hyperoslo/Sync/tree/master/Tests/Tests\n. Oh, I totally understand why this is build.\n@risp I see, what do you use the ids for? You still have to ask for their data right?\nI agree, this is a common use case. Lets see if we can find a way to support it in Sync :)\n. Let me know how we can help :)\n. I think you can still use Sync and in your main JSON just skip this IDs, and then when you get to the object detail you'll retrieve the JSON with the full details.\nI might be wrong but let me know if we can improve Sync in a way the is more helpful for you. :)\n. I've been working on this in #140\nShould be ready at the end of next week.\n. Hi Ben,\nYou're right, at the moment Sync requires you to have a primary key per JSON object. It doesn't really have to be id, it can be anything but by default it tries to use id.\nAt the moment you'll have to preprocess the JSON in order for Sync to work.\nI hope this was useful for you :)\n. Hi Petter!\nIt's a requirement that all JSON objects have an id if they have a matching Core Data model.\nYou could either add an id to foo or mark bar as primary key by doing:\nfoo => hyper.isPrimaryKey : YES\n\n. I hope this was helpful! Let me know if we can help in anything else.\n. PR would be awesome! Crashing is never the right solution.\n. Fantastic catch Stephane! \n\n. Interesting! I'm planning to move those categories to separate projects and unit test them, I added them as convenience methods for Sync but I also find myself needing them sometimes.\nThanks for this!\n. Thanks @Tif-tof! \\o/\n\n. @Tif-tof mentioned you on our latest release. Thanks again for your work.\nhttps://github.com/hyperoslo/Sync/releases/tag/1.0.2\n. Hi @bonebox,\nIt already does this, take a look at the DesignerNews Example => https://github.com/hyperoslo/Sync/tree/master/Examples/DesignerNews\nThere we have posts that have a to-many relationship to comments. If something is not clear please let me know. :)\n. Hey, just read your last comment, let me take a look by adding an example to our tests project.\nThis is a Market can have many Items and an Item can belong to more than one Market.\n. I took a look at our examples located in the Tests project and we have one for many-to-many. \nIt's a Note <--> Tag relationship, A Note has many Tags and a Tag points to many Notes.\nThe JSON looks like this:\njson\n[\n  {\n    \"id\": 0,\n    \"text\": \"Shawn Merril's diary, episode 0\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"diary\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"neverforget\"\n      }\n    ]\n  },\n  {\n    \"id\": 1,\n    \"text\": \"Shawn Merril's diary, episode 1\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"diary\"\n      }\n    ]\n  },\n  {\n    \"id\": 2,\n    \"text\": \"Shawn Merril's diary, episode 2\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"diary\"\n      }\n    ]\n  },\n  {\n    \"id\": 3,\n    \"text\": \"Shawn Merril's diary, episode 3\",\n    \"tags\": [\n      {\n        \"id\": 1,\n        \"name\": \"diary\"\n      }\n    ]\n  },\n  {\n    \"id\": 4,\n    \"text\": \"Shawn Merril's diary, episode 4\"\n  }\n]\nThe main Core Data Model looks like this:\nModel\n\nNote\n\nTag\n\n\nIs there anything you notice that could be off?\n. I made a branch to look into this issue, I was able to reproduce it by adding custom local primary keys. Sync was optimized to work with a \"convention over configuration\" paradigm, that's why is easier to use if you follow certain \"rules\". A workaround for your issue would be to move from uniqueId to remoteID.\nI'll look closely into this issue and figure out what's wrong :)\nThanks for your helping finding this issue Jeremy, you are the best!\nIssue => https://github.com/hyperoslo/Sync/pull/74\n. That's quite interesting. I made the change to remoteID and everything works fine. => https://github.com/hyperoslo/Sync/blob/fix/many-to-many-markets/Tests/Tests/Tests.m#L431-L469\n. @bonebox Do you have a stack trace by the way? Which method is the one that is crashing?\n. @bonebox Looks like you added remoteID to Market but not to Item, would mind checking again?\n. @bonebox Will have a look :)\n. Hey @bonebox, nice to hear again from you. Could you try this with master? Pushed a few improvements a few days ago.\n. @bonebox Hi, found the problem in your predicate, you should use the relationship instead of the entity name. I changed the predicate from market to markets and works.\nThis:\nrequest.predicate = NSPredicate(format: \"ANY markets.remoteID = %@\", market.remoteID)\nInstead of this:\nrequest.predicate = NSPredicate(format: \"ANY market.remoteID = %@\", market.remoteID)\n. :scream: \n. Hi @bonebox! \nAt the moment Sync requires your entities to have a primary key, this is important for diffing otherwise Sync doesn't know how to differentiate between entries.\nYour primary key doesn't have to be remoteID, uniqueID or anything like that. In the Designer News example we have a Comment entity that uses body as the primary key.\nhttps://github.com/hyperoslo/Sync/tree/master/Examples/DesignerNews\n. @bonebox I'll improve the README to state that. \nI hope this helps :)\nPR => #80\n. It takes the parent in account too, so a child ID should be unique per parent, not globally.\nI guess this would be different in a many-to-many relationship, in that case child IDs are required to be unique globally since their parent can't be used for uniquing.\n. @bonebox Hey Jeremy! Damn, this sucks, could you provide me an example of your model and the JSON that you're using, please?\n. Thanks! I'll make a test case to reproduce the issue.\nHave a great day (or night\ud83c\udf1a)!\n. @bonebox We did a bunch of improvements for many-to-many relationships on Sync 1.0.3. Would you mind verifying if this is still an issue? Thanks in advance :)\n. Hi @bonebox, you're right. The documentation on using isPrimaryKey in addition to remoteKey could be improved. I'll make a PR fixing it :)\nThanks!\n. Moved to #101 (documentation missing)\n. @ashkan18 Hi!\nIf you are posting about a crash in your application or a feature request, an example of your JSON and your Core Data model or a stacktrace would be really helpful for us to be able to reproduce your issue or understand your request.\n. Thanks for explaining the issue is such detail, I'll look into it.\n. Hi @ashkan18, everything seems to be working fine for me, I tried your JSON and your Model and the new tests are passing.\nhttps://github.com/hyperoslo/Sync/pull/90\nI wonder if it's something that's been fixed in Sync 1.0.3.\nWould you mind verifying? Thanks!\n. Thanks! \ud83c\udf7b\n\n. @ashkan18 Woah, that's weird. I was able to reproduce it. Will have a look :)\n. Hi again @ashkan18! I took some time to work in this issues, I found a few issues with using SQLiteStore that should be fixed in Sync 1.0.4, let me know how it goes.\nhttps://github.com/hyperoslo/Sync/releases/tag/1.0.4\n. Haven't found this to be a problem, sounds like an edge case. Closing.\n. Hi @bonebox!\nVery interesting write up, you have valid points and we indeed considered storing dictionaries and arrays, I hope is what you were looking for.\nFor mapping for arrays and dictionaries just set attributes as Binary Data on the Core Data modeler\n\nArray\n``` objc\nNSDictionary *values = @{@\"hobbies\" : @[@\"football\",\n                                        @\"soccer\",\n                                        @\"code\"]};\n[managedObject hyp_fillWithDictionary:values];\nNSArray * hobbies = [NSKeyedUnarchiver unarchiveObjectWithData:managedObject.hobbies];\n// ==> \"football\", \"soccer\", \"code\" \n```\nDictionary\n``` objc\nNSDictionary *values = @{@\"expenses\" : @{@\"cake\" : @12.50,\n                                         @\"juice\" : @0.50}};\n[managedObject hyp_fillWithDictionary:values];\nNSDictionary *expenses = [NSKeyedUnarchiver unarchiveObjectWithData:managedObject.expenses];\n// ==> \"cake\" : 12.50, \"juice\" : 0.50\n```\nPlease let me know if this is what you wanted :)\n. We use snake_case for the JSON keys. This is part of HYPPropertyMapper, you can find the code here.\njson\n\"elements\" : [\n     {\n      \"type\": \"input\",\n       \"label\": \"Any Input\",\n       \"reference\": \"anyInteger\",\n       \"input_configuration\": {\n            \"justAHint\" : [\"a\", \"b\", \"c\"]\n          }\n     },\n    ...\n]\nobjc\nNSDictionary *configuration = [NSKeyedUnarchiver unarchiveObjectWithData:object.inputConfiguration];\nNSArray *elements = configuration[@\"justAHint\"];\n// elements => [\"a\", \"b\", \"c\"]\n. I've been thinking on supporting mapping depth entities like the one in your example but haven't got around into doing it.\nFor example if you had the following JSON: \njson\n\"elements\" : [\n     {\n       \"input_configuration\": {\n            \"just_a_hint\" : [\"a\", \"b\", \"c\"]\n          }\n     },\n    ...\n]\nMapping the contents of just_a_hint to input_configuration could be done by adding the following key to the user info of your attribute:\n\"hyper.remoteKey\" : \"input_configuration.just_a_hint\"\nAnd then when you want to make the JSON representation of your element:\nobjc\n// This makes a JSON representation of your NSManagedObject subclass\n[self.managedObject hyp_dictionary];\nThis would be (we will have to use the . as a separation between levels:\ninput_configuration.just_a_hint\njson\n{\n    \"input_configuration\": {\n      \"just_a_hint\" : [\"a\", \"b\", \"c\"]\n    }\n}\n. > That looks really cool! Would it support having multiple entries in the dictionary? For example:\nInteresting! I'll add this to the main task for reference.\nhttps://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/issues/64\n. @bonebox We tried to model Sync to work out of the box for the most used scenarios, you could say that it has been \"optimized\" to work with Ruby or Rails kind of backends. Having less options helps the app to have less ways to fail.\n:smile: \n. :tada: \n. Added to the FAQ, that should work\n. Didn't made any changes to the code, just added new tests. Merging.\n. Interesting :)\n Maybe we can make Sync a subclass of NSOperation\n. \u201cAdvanced NSOperations (WWDC 2015)\u201d by @davedelong.\n. Fixed on https://github.com/hyperoslo/Sync/pull/216\n. Thanks @kostiakoval!\n. Looks good @kostiakoval! What's left to remove the WIP badge?\n. Ideally the helper methods should me moved to a category of NSManagedObject or NSEntityDescription\n. Document using hyper.primaryKey in addition to hyper.remoteKey:\nWell, the thing is that if you add hyper.primaryKey it would uses the normal attribute for the local primary key, but the remote primary key is the snake_case representation of it. Some people might expect that the local keeps been the same (remoteID), or that the remote keeps been the same (id).\nFor example if you add the flag hyper.PrimaryKey to the attribute article_body then:\n- Remote primary key: article_body\n- Local primary key: articleBody\nIf you want to use id for the remote primary key you also have to add the flag hyper.remoteKey and write id as the value.\n. Document how uniquing works (many-to-many, one-to-many):\nIn a one-to-many relationship IDs are unique for a parent, but not between parents. For example in this example we have a list of posts where each post has many comments. When syncing posts 2 comment entries will be created:\njson\n[\n  {\n    \"id\": 0,\n    \"title\": \"Story title 0\",\n    \"comments\": [\n      {\n        \"id\":0,\n        \"body\":\"Comment body\"\n      }\n    ]\n  },\n  {\n    \"id\": 1,\n    \"title\": \"Story title 1\",\n    \"comments\": [\n      {\n        \"id\":0,\n        \"body\":\"Comment body\"\n      }\n    ]\n  }\n]\nMeanwhile in a many-to-many relationship childs are unique across parents.\nFor example a author can have many documents and a document can have many authors. Here only one author will be created.\njson\n[\n  {\n    \"id\": 0,\n    \"title\": \"Document name 0\",\n    \"authors\": [\n      {\n        \"id\":0,\n        \"name\":\"Michael Jackson\"\n      }\n    ]\n  },\n  {\n    \"id\": 1,\n    \"title\": \"Document name 1\",\n    \"comments\": [\n      {\n        \"id\":0,\n        \"body\":\"Michael Jackson\"\n      }\n    ]\n  }\n]\n. Not sure if this is relevant but this model doesn't seem right.\nI would do\nCompany -->> Deparment -->> Employee\nA company has many departments.\nA department has many employees.\n. I'm trying very hard to find an example where\nParent A -->>> Some child <<<-- Parent B\n. Any ideas @hyperoslo/ios ?\nHaving a concrete example is very important in order to understand why this is needed.\n. @kostiakoval \nHaving that makes a lot of sense.\nCompany ->> Department ->> Projects ->> Employee\nJust because it's difficult doesn't mean that you shouldn't do it.\n. I'll close it until we find a real use case, so far for me this just seems that the entities are not modeled correctly.\n. @tomvo Hi Tom! I'll update one of our demos to have a pull to refresh to make sure that updates are working properly.\nOther thing, is important that you call Sync again only when you know the previous Sync operation has finished, otherwise Core Data might go nuts with threading.\n. @tomvo Don't worry! Have a great day :grin: \n. Hi @bonebox, the predicate attribute might be helpful here. Giving a predicate to Sync it tells it to only sync the attributes that comply to the predicate. When a predicate is not present Sync will diff all the changes removing the Core Data elements that are not present in the JSON.\nFor example you could do:\n``` objc\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"remoteID == %@\", @1];\n[Sync changes:JSON\ninEntityNamed:@\"Market\"\n    predicate:predicate\n    dataStack:dataStack\n   completion:^{\n       //...\n    }];\n```\n. @bonebox How many entries there are in the JSON you're using for updating? 2 or 1?\nI can make a test case in out tests projects to check what's the problem behind it, personally I've only used Sync for the main sync (the one with all the entries in the JSON). For updates I fetched the item in a background thread and made the updates there.\nIf this is something we can automate it would be fantastic!\n. @bonebox If you're using AFNetworking I would recommend something like AFUniqueGet, works quite well for multiple GET calls to the same resource.\nhttps://github.com/3lvis/AFHTTPSessionManager-AFUniqueGET\n. @bonebox Two or more syncs to the same entity shouldn't happen at the same time, there could be some inconsistency in the persistent store and you'll get crashes saying.\n\"Couldn't not fullfill fault..\"\n. Interesting idea @lukaszmargielewski! \n. This would be a nice feature but the downsides will be quite considerable. For example an increase of support cause by bugs in other frameworks.\nClosing this one, sorry.\n. Hey Pascal! You can change users in Collection to be an attribute instead of a relationship, then you could set it as Binary Data, this will tell Sync to store it as an array of strings. Also I would advise you that maybe renaming it to userIDs might be a good idea so you know it's not an array of users. Also so you can keep your original relationship to users.\nhttps://github.com/hyperoslo/Sync#arraydictionary\nFinally Sync will try to map userIDs to user_ids, so you might need to change the hyper.remoteKey to make it point to users.\nhttps://github.com/hyperoslo/Sync#attribute-mapping\n\nI hope this was useful, just ping me if this doesn't work. \nBest,\n. Hey! It's nice to hear that you go it working.\n\n1st:Can I use multiple primary keys? \n\n1.- We don't have support for this out of the box, but it shouldn't be difficult to add support for it if you feel like doing that.\nFirst, DATAObjectIDs should support multiple attributes, second DATAFilter, finally it would be needed to add support in Sync.\n\n2nd: Is it possible to disable deletion in sync on special requests?\n\n2.- Yes, it's possible, when you use Sync you should provide a predicate that gives you only the elements that you want to sync, if you want to skip some you can do.\n\nAlternatively if you only want to sync users that have been created in the last 24 hours, you could do this by using a NSPredicate.\n\nThis will disable deletion in all the items that don't apply to the predicate.\n``` objc\nNSDate now = [NSDate date];\nNSDate yesterday = [now dateByAddingTimeInterval:-246060];\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"createdAt > %@\", yesterday];\n[Sync changes:JSON\ninEntityNamed:@\"User\"\n    predicate:predicate\n    dataStack:dataStack\n   completion:^{\n       //...\n    }];\n```\nLet me know if I can help in anything else, I'll be closing this issue for now.\n. I don't really understand your last question. You want to sync only items in the array of PhotoItem where collectionID is not nil?\nOr you want to sync PhotoItem only for the elements where collectionID is for example e393ed8b0c1368fc?\n. @Gerungofulus something like this could work in an array of GrocliPhotoItems\n``` objc\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"collectionID == %@\", @\"3393ed8b0c1368fc\"];\n[Sync changes:JSON\ninEntityNamed:@\"GrocliPhotoItem\"\n    predicate:predicate\n    dataStack:dataStack\n   completion:^{\n       //...\n    }];\n```\n. Or maybe\nobjc\nCollection *collection = //... fetch collection for ID 3393ed8b0c1368fc\n[Sync changes:JSON\ninEntityNamed:@\"GrocliPhotoItem\"\n       parent:collection\n    dataStack:dataStack\n   completion:^{\n       //...\n    }];\n. @Gerungofulus Any suggestions on how to make it more clear? Maybe adding appledocs to Sync would help.\n. @Gerungofulus that would be fantastic :star2: :star2: :cake: :star2: :star2: \n. > Okay obviously I can delete items with mandatory realtionships by using the cascade deletion rule, but it be cool to get at least the deleted items in return.\nHey Pascal,\nI don't really understood your last comment, is there anything specific that we could do to help you? I don't understand the get the deleted items in return. You mean that instead of automatically deleting the items you would do it manually?\n. @Gerungofulus like improved logging on what's going on?\n. @Gerungofulus got it! I made a task for it. https://github.com/hyperoslo/Sync/issues/109 :)\n. @Gerungofulus Don't worry Pascal! Thanks for taking the time to comment here. I hope everything is good in Berlin :grin: \n. @tommypeps :clap: \n. This is much better than what I thought. I'll add it to the FAQ\n. https://github.com/hyperoslo/Sync#logging-changes\n. Hi @bilics, Sync uses the built-in notification system by Core Data to send notifications. I'm not sure if adding another layer of notifications would be a good thing to do at this point. Maybe changing your Core Data stack would let you achieve what you are looking for. Sorry for not being more helpful :). @ares-huy-le Hi Ares, this is very tightly coupled with Core Data, although the same principles could be applied to Realm.\nWe don't have any plans to support Realm in Sync, if this changed in the feature, it will probably be placed in a different repo.\nBest,\n. Hi Huy!\nWe don't have support for flattening dictionaries. One way you can achieve this with the current version of Sync is storing contact as a dictionary. \n- Add a contact attribute to your Core Data model\n- Set the type of contact to Binary Data\nThis issue can help you: https://github.com/hyperoslo/Sync/issues/87\nLet me know if this was useful for you, have a nice day :sun_with_face: \n. Hi Pascal, sorry for not following up this before, I've been out in vacation-mode :sunglasses: \nWere you able to fix this?\n. @Gerungofulus I haven't had anything like this happen to me before, sorry I can't be more helpful.\n. @Gerungofulus Don't worry, good luck :)\n. @ashkan18 @altyus Thanks guys for pointing that you both had a similar problem.\nI'm trying to figure out how to reproduce this bug.\nDid you also had the problem in this method?\nhttps://github.com/hyperoslo/Sync/blob/master/Source/Sync.h#L18-L22\n. @Gerungofulus I'm trying to reproduce this issue. Just to clear things up.\n1.- You create a photo item with general information in the main context\n2.- You upload this photo to the backend (in a background thread?) and update the photo created in step 1 with the new information that you get from the backend.\n3.- You retrieve all the photo items for the current collection.\n4.- (Expected) All the photo items should be inserted/removed/updated including the one that you added on step 1.\nIs this correct? \n. @cyupa this might be related to something different thought. https://github.com/3lvis/DATASource/issues/32#issuecomment-150020808 ?\n. Looks like https://github.com/3lvis/DATAStack/releases/tag/5.0.0 fixes the issue. Let me know if the problem still occurs and I'll reopen it.\n. Could you share an screenshot of your Core Data model and an example of your JSON, please?\nhttps://github.com/hyperoslo/Sync/blob/master/CONTRIBUTING.md\n. Thanks @Nik09! I'll take a look later today.\nCould you share an screenshot of your Core Data model? Might help to check how the relationships have been set.\n. @Nik09 This should be fixed on master, would you mind checking it everything is fine now? :dancers: \n. @Nik09 I just pushed 1.0.6 this should fix your problem <3\nhttps://github.com/hyperoslo/Sync/releases/tag/1.0.6\n. So a Post can have an Original Post inside and this Original Post can have an Original Post inside, right?\nYou can have Post ==(to many)==> Original Post ==(recursive to itself)==> Original Post\n. Here's an example of a recursive relationship. You can find it in the Tests project:\nhttps://github.com/hyperoslo/Sync/blob/0cb90bfd2c53386f6adb74e31706e70530719ace/Tests/Tests/Tests.m#L334-L366\n\n\n\nI hope this was helpful :v: \n. Hey, there's no such \"feature\" in Sync at the moment, but it could be way simpler than having a predicate with all the existing tweets. You could use the latest created date, updated date or the latest date when you refreshed items from the backend and say.\n``` objc\n// Only sync tweets created after \"02-01-2015 21:21:00 +000\". Of course using an NSDate instead of the string that I wrote.\nNSPredicate *predicate = [NSPredicate predicateWithFormat:@\"createdAt > \"02-01-2015 21:21:00 +000\"]; \n[Sync changes:JSON\ninEntityNamed:@\"Tweet\"\n    predicate:predicate\n    dataStack:dataStack\n   completion:^{\n       //...\n    }];\n```\nI don't know of other libraries that do the same than Sync that have this feature.\nI hope this was useful!\n:v: \n. This is taking too long and this errors don't appear when running storeType:DATAStackSQLiteStoreType, will leave it as it is.\n. The problem seems to relay in the fact that NSPredicate works only against the Core Data elements, it doesn't filter what you are sending in the changes array.\nA crazy approach to fix this would be to pre-parse the changes and apply a NSPredicate filter to remove the unwanted elements.\nExample of what's going on:\nCurrent state and server response:\n| Local | Server |\n| --- | --- |\n| 3 | 4 |\n| 4 | 5 |\nMethod: Sync elements that are higher than 4\nSync (Now): \n- Looks for local elements higher than 4, finds nothing\n- Thinks it should insert 4, 5 since it didn't found any elements to compare to\nSync (Ideally):\n- Looks for local elements higher than 4, finds nothing\n- Checks in server elements and removes all elements that aren't higher than 4\n- Syncs remaining elements\n. Damn, Travis!\n\n. Hi galinyonchev!\nOne of the dependencies of Sync is NSManagedObject-HYPPropertyMapper, this pod provides a method that converts your NSManagedObject into a JSON object.\n``` objc\nUser *user = //...\nuser.firstName = @\"John\";\nuser.lastName = @\"Hyperseed\";\nNSDictionary *userJSON = [user hyp_dictionary];\n```\nYou could make a fetch request to retrieve all the managed objects for an entity, then loop the result array and create a JSON array.\nI hope this is useful for you :)\n. @galinyonchev We don't support for that out of the box. Feel free to contribute if you do it, someone else might find this useful :)\nI created an issue for the task https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/issues/76\n. @galinyonchev hey! Now doing:\nobjc\nNSDictionary *dictionary = [user hyp_dictionaryUsingRelationshipType:HYPPropertyMapperRelationshipTypeArray];\nWill also go to the entities attached to this entity and make an array representation.\nhttps://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper#json-representation-from-a-nsmanagedobject\n. @galinyonchev Is it freezing now and it was working before? Or this is the first time you're implementing Sync?\nMight be useful if you could share your Core Data model + an example of the JSON that you're using.\nIs it freezing in hyp_dictionary?\n. @galinyonchev I'll take a look this weekend :)\n. @galinyonchev It seems that this could be caused by the inverse relationships missing.\nYou need inverse relationships.\nIf patient has many weights, then weight needs a patient.\n\n. @galinyonchev https://github.com/hyperoslo/Sync/pull/123\n. :clap: \n. @galinyonchev Have you also set the delete rule to Cascade in the one-to-many relationships? I always forget that :grin: \n. Core Data Content\nxml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<model userDefinedModelVersionIdentifier=\"\" type=\"com.apple.IDECoreDataModeler.DataModel\" documentVersion=\"1.0\" lastSavedToolsVersion=\"8195\" systemVersion=\"14F27\" minimumToolsVersion=\"Automatic\">\n    <entity name=\"Alcohol\" syncable=\"YES\">\n        <attribute name=\"remoteID\" optional=\"YES\" attributeType=\"Integer 32\" defaultValueString=\"0\" syncable=\"YES\"/>\n        <attribute name=\"text\" optional=\"YES\" attributeType=\"String\" syncable=\"YES\"/>\n        <relationship name=\"measure\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Cascade\" destinationEntity=\"Measure\" inverseName=\"alcohol\" inverseEntity=\"Measure\" syncable=\"YES\"/>\n        <relationship name=\"patient\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Patient\" inverseName=\"alcohols\" inverseEntity=\"Patient\" syncable=\"YES\"/>\n    </entity>\n    <entity name=\"Baseline\" syncable=\"YES\">\n        <attribute name=\"remoteID\" optional=\"YES\" attributeType=\"Integer 32\" defaultValueString=\"0\" syncable=\"YES\"/>\n        <attribute name=\"text\" optional=\"YES\" attributeType=\"String\" syncable=\"YES\"/>\n        <relationship name=\"patient\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Patient\" inverseName=\"baselines\" inverseEntity=\"Patient\" syncable=\"YES\"/>\n    </entity>\n    <entity name=\"Fitness\" syncable=\"YES\">\n        <attribute name=\"remoteID\" optional=\"YES\" attributeType=\"Integer 32\" defaultValueString=\"0\" syncable=\"YES\"/>\n        <attribute name=\"text\" optional=\"YES\" attributeType=\"String\" syncable=\"YES\"/>\n        <relationship name=\"measure\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Cascade\" destinationEntity=\"Measure\" inverseName=\"fitness\" inverseEntity=\"Measure\" syncable=\"YES\"/>\n        <relationship name=\"patient\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Patient\" inverseName=\"fitnesses\" inverseEntity=\"Patient\" syncable=\"YES\"/>\n    </entity>\n    <entity name=\"Measure\" syncable=\"YES\">\n        <attribute name=\"remoteID\" optional=\"YES\" attributeType=\"Integer 32\" defaultValueString=\"0\" syncable=\"YES\"/>\n        <attribute name=\"text\" optional=\"YES\" attributeType=\"String\" syncable=\"YES\"/>\n        <relationship name=\"alcohol\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Alcohol\" inverseName=\"measure\" inverseEntity=\"Alcohol\" syncable=\"YES\"/>\n        <relationship name=\"fitness\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Fitness\" inverseName=\"measure\" inverseEntity=\"Fitness\" syncable=\"YES\"/>\n        <relationship name=\"weight\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Weight\" inverseName=\"measure\" inverseEntity=\"Weight\" syncable=\"YES\"/>\n    </entity>\n    <entity name=\"Patient\" syncable=\"YES\">\n        <attribute name=\"remoteID\" optional=\"YES\" attributeType=\"Integer 32\" defaultValueString=\"0\" syncable=\"YES\"/>\n        <attribute name=\"text\" optional=\"YES\" attributeType=\"String\" syncable=\"YES\"/>\n        <relationship name=\"alcohols\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Cascade\" destinationEntity=\"Alcohol\" inverseName=\"patient\" inverseEntity=\"Alcohol\" syncable=\"YES\"/>\n        <relationship name=\"baselines\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Cascade\" destinationEntity=\"Baseline\" inverseName=\"patient\" inverseEntity=\"Baseline\" syncable=\"YES\"/>\n        <relationship name=\"fitnesses\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Cascade\" destinationEntity=\"Fitness\" inverseName=\"patient\" inverseEntity=\"Fitness\" syncable=\"YES\"/>\n        <relationship name=\"weights\" optional=\"YES\" toMany=\"YES\" deletionRule=\"Cascade\" destinationEntity=\"Weight\" inverseName=\"patient\" inverseEntity=\"Weight\" syncable=\"YES\"/>\n    </entity>\n    <entity name=\"Weight\" syncable=\"YES\">\n        <attribute name=\"remoteID\" optional=\"YES\" attributeType=\"Integer 32\" defaultValueString=\"0\" syncable=\"YES\"/>\n        <attribute name=\"text\" optional=\"YES\" attributeType=\"String\" syncable=\"YES\"/>\n        <relationship name=\"measure\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Cascade\" destinationEntity=\"Measure\" inverseName=\"weight\" inverseEntity=\"Measure\" syncable=\"YES\"/>\n        <relationship name=\"patient\" optional=\"YES\" maxCount=\"1\" deletionRule=\"Nullify\" destinationEntity=\"Patient\" inverseName=\"weights\" inverseEntity=\"Patient\" syncable=\"YES\"/>\n    </entity>\n    <elements>\n        <element name=\"Baseline\" positionX=\"-270\" positionY=\"-63\" width=\"128\" height=\"88\"/>\n        <element name=\"Patient\" positionX=\"-9\" positionY=\"-63\" width=\"128\" height=\"133\"/>\n        <element name=\"Alcohol\" positionX=\"259\" positionY=\"-115\" width=\"128\" height=\"103\"/>\n        <element name=\"Fitness\" positionX=\"261\" positionY=\"9\" width=\"128\" height=\"103\"/>\n        <element name=\"Weight\" positionX=\"232\" positionY=\"146\" width=\"128\" height=\"103\"/>\n        <element name=\"Measure\" positionX=\"574\" positionY=\"-9\" width=\"128\" height=\"118\"/>\n    </elements>\n</model>\n. json\n[\n  {\n    \"id\": 0,\n    \"text\": \"Melisa White\",\n    \"baselines\": [\n      {\n        \"id\": 0,\n        \"text\": \"Baseline 1\"\n      }\n    ],\n    \"alcohols\": [\n      {\n        \"id\": 0,\n        \"text\": \"Alcohol 1\",\n        \"measure\": {\n          \"id\": 0,\n          \"text\": \"Alcohol Measure 1\"\n        }\n      }\n    ],\n    \"fitnesses\": [\n      {\n        \"id\": 0,\n        \"text\": \"Fitness 1\",\n        \"measure\": {\n          \"id\": 0,\n          \"text\": \"Fitness Measure 1\"\n        }\n      }\n    ],\n    \"weights\": [\n      {\n        \"id\": 0,\n        \"text\": \"Weight 1\",\n        \"measure\": {\n          \"id\": 0,\n          \"text\": \"Weight Measure 1\"\n        }\n      }\n    ]\n  }\n]\n. hyp_dictionary\nalcohols =     (\n                    {\n                        id = 0;\n                        text = \"Alcohol 1\";\n                    }\n                    );\n    baselines =     (\n                     {\n                         id = 0;\n                         text = \"Baseline 1\";\n                     }\n                     );\n    fitnesses =     (\n                     {\n                         id = 0;\n                         text = \"Fitness 1\";\n                     }\n                     );\n    id = 0;\n    text = \"Melisa White\";\n    weights =     (\n                   {\n                       id = 0;\n                       text = \"Weight 1\";\n                   }\n                   );\n. @galinyonchev it's hard for me to tell what's exactly failing in your set up. Something tells me that the issue might be how your Core Data model is set up. If you follow what I did in the example that I've shown you, it should work with no problems.\n\n. Hey Denis!\nWe don't have anything for transformables in the foreseeable future. Any examples on use cases for this (meaning, why would you want to store as UIColor instead of just storing the strings?). \n. @damienromito Why not just create a new Core Data table for the new object?\n. There are 3 observations here.\n1.- All entities need a primary key. User entity and User JSON need a primary key. You can either add a remoteID attribute to your User table and a id to your User JSON, or you could tell Sync to use the name as the primary key.\nMore info here: https://github.com/hyperoslo/Sync#primary-key\n2.- If your JSON says \"access_token\" Sync will map it to accessToken in Core Data. But if your JSON says \"accessToken\" it doesn't know how to transform it to accessToken because it only does automatic transformations for snake_case. So if you wan to use accessToken from your JSON you need to tell Sync this. You do it by adding hyper.remoteKey (key) and accesstToken as value in the user Info.\nMore info on Attribute Mapping here: https://github.com/hyperoslo/Sync#attribute-mapping\n3.- You need an inverse relationship for UserSpotify and User. Meaning that in UserSpotify you need a user relationship that point back to the spotify relationship on User.\n. @damienromito let me know if you have any more issues, or if there's something that I should include in the README, :heart: \n. Hi @bonebox!\nWe use the release feature from GitHub to present the changelog.\nhttps://github.com/hyperoslo/Sync/releases\nThe biggest thing that has changed since 1.0.8 in Sync was how predicates where handled. => https://github.com/hyperoslo/Sync/issues/119 https://github.com/hyperoslo/Sync/pull/120\nMaybe this was the issue? \n. Wait, you're saying that 1.0.9 works fine, right? Nothing critical changed on 1.0.11 so it must be 1.0.10 then. \n1.0.10 only includes this change => https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/releases/tag/3.3.0 which involves hyp_dictionary.\n. This is a bit strange, since before hyp_dictionary also was doing nested objects. Are you using that method in your code? hyp_dictionary.\nWould be great if you could help me to figure out what is failing since the Sync unit tests are working fine after the update, there must be something I'm missing.\n. @bonebox could you provide please some insight of your Core Data model and the used JSON so I can debug the nil relationships?\nIt would be super helpful. :heart: \n. So strange :disappointed: \nI got this running\n``` objc\n- (void)testNilRelationshipsAfterUpdating_Sync_1_0_10 {\n    NSDictionary formDictionary = [self objectsFromJSON:@\"bug-125.json\"];\n    DATAStack dataStack = [self dataStackWithModelName:@\"Bug125\"];\n[Sync changes:@[formDictionary]\ninEntityNamed:@\"Form\"\n    dataStack:dataStack\n   completion:nil];\n\nXCTAssertEqual([self countForEntity:@\"Form\"\n                          inContext:dataStack.mainContext], 1);\n\nXCTAssertEqual([self countForEntity:@\"Element\"\n                          inContext:dataStack.mainContext], 11);\n\nXCTAssertEqual([self countForEntity:@\"SelectionItem\"\n                          inContext:dataStack.mainContext], 4);\n\nXCTAssertEqual([self countForEntity:@\"Model\"\n                          inContext:dataStack.mainContext], 1);\n\nXCTAssertEqual([self countForEntity:@\"ModelProperty\"\n                          inContext:dataStack.mainContext], 9);\n\nXCTAssertEqual([self countForEntity:@\"Restriction\"\n                          inContext:dataStack.mainContext], 3);\n\nNSArray *array = [self fetchEntity:@\"Form\"\n                         inContext:dataStack.mainContext];\nNSManagedObject *form = [array firstObject];\nNSManagedObject *element = [form valueForKey:@\"element\"];\nNSManagedObject *model = [form valueForKey:@\"model\"];\nXCTAssertNotNil(element);\nXCTAssertNotNil(model);\n\n[dataStack drop];\n\n}\n``\n. @bonebox Could you provide the predicate, please? Before the predicate was only applied to the local data, now the predicate also filters the elements in thechanges` array.\n. @bonebox I was able to find the bug, thanks!\nFixed on https://github.com/hyperoslo/Sync/pull/126\n. @bonebox Thanks for your help and sorry for the inconvenience. \nhttps://github.com/hyperoslo/Sync/releases/tag/1.0.12\n. @bonebox Hi Jeremy,\nCould you please check if you have the same issue as before on the recently released 1.0.13? \nhttps://github.com/hyperoslo/Sync/releases/tag/1.0.13\n. Hi @bonebox,\nI changed the Examples and the Tests suite to use modules now. So after adding use_frameworks to your code everything should work fine.\nThanks for reporting this issue :heart: \n. @bonebox I did that a while ago, with Sync 1.1.0 => https://github.com/hyperoslo/Sync/blob/master/Sync.podspec\n. https://github.com/hyperoslo/Sync/releases\n. @bonebox Thanks for giving it a try, I'll check what's going on.\n. @bonebox I found what was the issue, it should be working again on 1.1.1 thanks for your input, I can't imagine all the bugs if it wasn't for your help. :heart: \n. Hi @MauMaxxa, \nCould you please share an example of your JSON too? Also, are you using any predicates? Or just calling:\nobjc\n[Sync changes:JSON\ninEntityNamed:@\"Pagina\"\n    dataStack:dataStack\n   completion:^{\n    }];\n. Closing since we didn't got more information about this issue.\n. @richardoti That makes sense :)\n. This seems to be gone now that we have a Swift codebase. Closing.\n. I'll have a look :)\n. Hi @0ff!\nSorry for this. It should be fixed now. I changed the Examples and the Tests suite to use modules. So I added use_frameworks. and then I did @import DATAStack;.\nhttps://github.com/hyperoslo/Sync/releases/tag/1.1.0\nThanks for reporting this issue :heart: \n. Fixed on 1.1.1\n. @galinyonchev could you share your test.json file and an screenshot of your Core Data model?\n. @galinyonchev Hi, I got an example of this Core Data model in the Tests project => https://github.com/hyperoslo/Sync/tree/master/Tests\nThe issue is that your Core Data models don't have a primary key and your JSON doesn't have a primary key neither. You need this in order for Sync to differentiate objects. So you can either add remoteID to each of your models and id to each of your JSON objects or you can just select a unique Core Data attribute and make it a primary key. => https://github.com/hyperoslo/Sync#primary-key\nFinally, Sync maps your API that should use snake_case into your Core Data models that should you camelCase. => https://github.com/hyperoslo/Sync#attribute-mapping\nFor example:  In the JSON object_deleted would be objectDeleted in Core Data.\nLet me know if you need more information, but primary key and snake_case and camelCase are the only requisites for Sync to work.\nWe also have two Examples, one in Swift and another in Objective-C:\nObjective-C => https://github.com/hyperoslo/Sync/tree/master/Examples/DesignerNews\nSwift => https://github.com/hyperoslo/Sync/tree/master/Examples/AppNet\n. Hi @zavod,\nWe have something like this in the Tests project.\nIt goes like this\nJSON\njson\n[\n  {\n    \"id\": 0,\n    \"text\": \"Shawn Merril's diary, episode 0\"\n  },\n  {\n    \"id\": 1,\n    \"text\": \"Shawn Merril's diary, episode 1\"\n  },\n  {\n    \"id\": 2,\n    \"text\": \"Shawn Merril's diary, episode 2\"\n  },\n  {\n    \"id\": 3,\n    \"text\": \"Shawn Merril's diary, episode 3\"\n  },\n  {\n    \"id\": 4,\n    \"text\": \"Shawn Merril's diary, episode 4\"\n  }\n]\nCore Data\n\nCode\n``` objc\n- (void)testObjectsForParent {\n    NSArray objects = [self objectsFromJSON:@\"notes_for_user_a.json\"];\n    DATAStack dataStack = [self dataStackWithModelName:@\"Notes\"];\n[dataStack performInNewBackgroundContext:^(NSManagedObjectContext *backgroundContext) {\n\n    // First, we create a parent user, this user is the one that will own all the notes\n    NSManagedObject *user = [NSEntityDescription insertNewObjectForEntityForName:@\"User\"\n                                                          inManagedObjectContext:backgroundContext];\n    [user setValue:@6 forKey:@\"remoteID\"];\n    [user setValue:@\"Shawn Merrill\" forKey:@\"name\"];\n    [user setValue:@\"firstupdate@ovium.com\" forKey:@\"email\"];\n\n    NSError *userError = nil;\n    [backgroundContext save:&userError];\n    if (userError) NSLog(@\"userError: %@\", userError);\n\n    [dataStack persistWithCompletion:nil];\n}];\n\n// Then we fetch the user on the main context, because we don't want to break things between contexts\nNSArray *users = [self fetchEntity:@\"User\"\n                         predicate:[NSPredicate predicateWithFormat:@\"remoteID = %@\", @6]\n                         inContext:dataStack.mainContext];\nif (users.count != 1) abort();\n\n// Finally we say \"Sync all the notes, for this user\"\n[Sync changes:objects\ninEntityNamed:@\"Note\"\n       parent:[users firstObject]\n    dataStack:dataStack\n   completion:nil];\n\n// Here we just make sure that the user has the notes that we just inserted\nusers = [self fetchEntity:@\"User\"\n                predicate:[NSPredicate predicateWithFormat:@\"remoteID = %@\", @6]\n                inContext:dataStack.mainContext];\nNSManagedObject *user = [users firstObject];\nXCTAssertEqualObjects([user valueForKey:@\"name\"], @\"Shawn Merrill\");\n\nNSInteger notesCount = [self countForEntity:@\"Note\"\n                                  predicate:[NSPredicate predicateWithFormat:@\"user = %@\", user]\n                                  inContext:dataStack.mainContext];\nXCTAssertEqual(notesCount, 5);\n\n[dataStack drop];\n\n}\n```\nSo, basically after doing:\nswift\nSync.changes(json as Array!,\ninEntityNamed: \"Category\",\ndataStack: self.dataStack,\ncompletion: { error in\ncompletion(error)\n})\nJust fetch the Category with ID 4 and use \nobjc\n[Sync changes:types\ninEntityNamed:@\"Type\"\n       parent:categoryWithIDFour\n    dataStack:dataStack\n   completion:nil];\n. @zavod not at the moment, but the API should be simple. Let me know if you need anything else :heart: \n. @zavod for that you will need the full Category structure inside each Type, like in this example:\nA user has one company:\njson\n[\n  {\n    \"id\": 0,\n    \"name\": \"Melisa White\",\n    \"email\": \"melisawhite@ovium.com\",\n    \"created_at\": \"2014-02-14T00:00:00+00:00\",\n    \"updated_at\": \"2014-02-17T00:00:00+00:00\",\n    \"company\":{\n      \"id\": 0,\n      \"name\": \"Apple\"\n    }\n  },\n  {\n    \"id\": 1,\n    \"name\": \"Glass Oconnor\",\n    \"email\": \"glassoconnor@ovium.com\",\n    \"created_at\": \"2014-02-15T00:00:00+00:00\",\n    \"updated_at\": \"2014-02-18T00:00:00+00:00\",\n    \"company\":{\n      \"id\": 1,\n      \"name\": \"Facebook\"\n    }\n  }\n]\nThis will create 2 users, user with ID 0 will have a company \"Apple\" and user with ID 1 will have a company \"Facebook\".\n. You can do objects that have many parents too, in this JSON a note \nYou send the parents in an array, but each of the parents need the complete JSON.\nLike in this example, you get an array of tags, each tag has many notes.\njson\n[\n  {\n    \"id\": 1,\n    \"name\": \"diary\",\n    \"notes\": [\n      {\n        \"id\": 0,\n        \"text\": \"Shawn Merril's diary, episode 0\"\n      },\n      {\n        \"id\": 1,\n        \"text\": \"Shawn Merril's diary, episode 1\"\n      }\n    ]\n  },\n  {\n    \"id\": 2,\n    \"name\": \"neverforget\",\n    \"notes\": [\n      {\n        \"id\": 0,\n        \"text\": \"Shawn Merril's diary, episode 0\"\n      },\n      {\n        \"id\": 1,\n        \"text\": \"Shawn Merril's diary, episode 1\"\n      }\n    ]\n  }\n]\n. @samouds this could be a threading issue, are you making sure a Sync request doesn't start before the other ones are finished? Core Data is not so good at handling multiple writes to the database.\n. @samouds any reasons for not using Sync 1.1.1? :eyes: \n. @samouds A simple way can be using booleans to check if an operation has finished. O more fancy way can be using NSOperations.\n. Closing this for lack of steps to reproduce, please reopen if there's a way we can reproduce this bug.\nThanks :heart: \n. Thanks John, this is great! :heart: \n. Hi Felipe,\nThe only way at the moment is using a predicate for this. Your predicate says which items will be synced. For example you can say: \"only sync items that belong to page 2\", or \"only sync items created after this date\", or also \"only sync items higher than ID: 125\".\n. The items that don't belong to this predicate will not be deleted or updated.\n. I have been thinking about adding something like this, I'm just afraid that adding something like this would increase the amount of support since people will suddenly start wondering why my items are not been updated or been deleted. I'll be implementing infinite scrolling on one of my apps so I'll check how to properly do this and if just having predicates will work.\nI'll let you know how it works, and please let me know how challenging doing the ID predicate is for you.\nThanks!\n. Hi @FelipeDocil, I would like your feedback with something.\n\nThere's an option to just add the response objects? Not deleting if there's not in the request JSON\n\nIf you were using something like that, how would you delete non existing items then? What happens if items get deleted from your backend?\n. @FelipeDocil when you search you could include the search predicate to your Sync method, though.\n. Hi @jairobjunior!\nI'm not a Carthage user myself, but feel free to add it with a pull request, would be awesome to have this. :heart: \n. Closing since @jairobjunior, doesn't seem to be interested in adding support for this :cry: \n. Added Carthage support on the latest version.\n. Hi @jkblgithub,\nCould you share your Core Data model? Would be nice to understand the relationships.\nAlso I guess the exception is thrown here because the category contains just an id instead of a full category object. Which is what Sync wants.\nSync requires the full category object with id: 1 because if it's not found it will create it and attach it to project id: 12345.\nWhat's the use case for teamMemberIDs? Do you have a relationship for this? Does it mean that a project has many team members?\n. @jkblgithub that's correct, a workaround would be to just replace the \"category\": 1 with the full object.\njson\n{\n   \"project\":{\n      \"id\":12345,\n      \"name\":\"My Project\",\n      \"category\":{\n         \"id\":12345,\n         \"name\":\"My category\"\n      }\n   }\n}\nThere's a simple way to generate the json representation of a category. For example this is how to convert a user managed object to JSON.\nobjc\nUser *user = [self entityNamed:@\"User\" inContext:dataStack.mainContext];\nuser.remoteID = @111;\nuser.age = @25;\nuser.driverIdentifier = @\"ABC8283\";\nNSDictionary *dictionary = [user hyp_dictionaryUsingRelationshipType:HYPPropertyMapperRelationshipTypeNone];\njson\n{\n   \"id\":111,\n   \"age\":25,\n   \"driver_identifier\":\"ABC8283\"\n}\nhyp_dictionaryUsingRelationshipType comes from one of the dependencies of Sync.\n. Let me know if this fixes your problem, otherwise feel free to reopen the issue.\nI'll make a new issue to see if we can add support for this in the feature.\n. @jkblgithub you're welcome :heart: \n. I've been working on this in #140\nShould be ready at the end of next week.\n. We could add a flag to the user info in the relationship, to clarify that only the ID has been provided.\nMaybe something like hyper.justForeignKey : YES\n. @tpmullan regarding https://github.com/hyperoslo/Sync/pull/147\n\nbreak backwards compatibility\n\nI meant that if today there are people using category_id to just store the category_id then it could break, but we could just find a way to not break it. :)\nRight now I'm trying to figure out the other case scenarios.\n1.- We have two entities: User and Category. Each category has an id and a name, each user has an id, a name and a category_id.\nHere it would be easy, you first sync all your categories, then when you sync your users the categories will just get mapped. If you do it the other way (first sync users then categories there's nothing we can do, that was probably what I didn't like about this system).\n2.- We have one entity: User. Each user has an id, a name and a category_id.\nHere the elements get mapped, relationships don't get made.\n3.- This is similar to number 1, the difference is that a user can be part of many categories. We have two entities: User and Category. Each category has an id and a name, each user has an id, a name and a category_ids (an array).\nThis works similar to number 1, the difference is that a user gets mapped to multiple categories.\n. Right now number 1 is being added and tested, I even added test for entities that have multiple words so: \"ChallengingGoal\" gets mapped to challenging_goal_id, if you do lowercase then it gets changed to challenginggoal_id which is not what we want.\n. Case number 2 should work fine in the current setup but I would like to add a test for it. Then I'll have a look at number 3, then let this feature cooldown for a bit on master and make a new release next Friday.\n. Might be interesting to handle a special case for people that have category instead of category_id.\n. @violabg Only on master.\n. I made a separate issue for the to-many mapping. https://github.com/hyperoslo/Sync/issues/151\nClosing this.\n. I also improved the README so it shows that this is possible.\nhttps://github.com/hyperoslo/Sync/blob/master/README.md#one-to-one-simplified\nThanks a lot @tpmullan for getting the ball rolling, you're awesome.\n. This is included on 1.3.0 now\nhttps://github.com/hyperoslo/Sync/releases/tag/1.3.0\n. @violabg I made a new issue for this https://github.com/hyperoslo/Sync/issues/152\n. I think this is caused because handling of microseconds on ISO dates is not optimal. You'll see that if you remove the microseconds it works.\nMade an issue to check this https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/issues/88\n. Hi Anton,\nThanks for commenting on this, but I'm afraid I don't follow. Today the changes get merged to the main context like doing:\nswift\nself.mainContext.mergeChangesFromContextDidSaveNotification(notification)\nWhat's the specific use case for using refreshObject(_:mergeChanges:)?\n. I guess this is for something that's not using NSFetchedResultsController. Would you mind sharing a snippet of what are you doing?\nWould be great to get this fixed :)\nThe notification gets triggered in the when the save method gets called by the temporary backgroundContext.\nswift\nfunc createUser() {\n    self.dataStack.performInNewBackgroundContext { backgroundContext in\n        let entity = NSEntityDescription.entityForName(\"User\", inManagedObjectContext: backgroundContext)!\n        let object = NSManagedObject(entity: entity, insertIntoManagedObjectContext: backgroundContext)\n        object.setValue(NSDate(), forKey: \"createdDate\")\n        try! backgroundContext.save() // Here the changes will get merged with the main thread\n    }\n}\n. I guess you're trying to do something like this?\n``` swift\nfunc createUser() {\n    self.dataStack.performInNewBackgroundContext { backgroundContext in\n        let entity = NSEntityDescription.entityForName(\"User\", inManagedObjectContext: backgroundContext)!\n        let object = NSManagedObject(entity: entity, insertIntoManagedObjectContext: backgroundContext)\n        object.setValue(\"123\", forKey: \"remoteID\")\n        try! backgroundContext.save() // Here the changes will get merged with the main thread\n    self.dataStack.mainContext.performBlock({\n        let fetchRequest = NSFetchRequest(entityName: \"User\")\n        fetchRequest.predicate = NSPredicate(format: \"createdDate = %@\", date)\n        let user = try! self.dataStack.mainContext.executeFetchRequest(fetchRequest).first\n        print(user)\n    })\n}\n\n}\n```\n. I think I found your use case, this is what I have in my app, and two ways of doing it:\nFetcher:\n``` swift\nfunc updateAlbum(id: String, title: String, description: String, completion: (error: NSError?) -> ()) {\n    let parameters = [\n        \"title\": title,\n        \"description\": description\n    ]\n    self.networking.POST(\"/photos/v1/albums/(id)\", parameters: parameters) { JSON, error in\n        self.dataStack.performInNewBackgroundContext({ backgroundContext in\n            guard let JSON = JSON as? [String : AnyObject] else { fatalError(\"Album JSON has inconsistent structure\") }\n        let fetchRequest = NSFetchRequest(entityName: Album.entityName())\n        fetchRequest.predicate = NSPredicate(format: \"remoteID = %@\", id)\n        let album = try! backgroundContext.executeFetchRequest(fetchRequest).first as! Album\n        album.hyp_fillWithDictionary(JSON)\n\n        try! backgroundContext.save()\n\n        dispatch_async(dispatch_get_main_queue(), {\n            completion(error: error)\n        })\n    })\n}\n\n}\n```\nController (version A):\nswift\nfunc albumInfoController(albumInfoController: AlbumInfoController, didSaveWithTitle title: String, description: String) {\n    self.fetcher.updateAlbum(self.album.remoteID!, title: title, description: description) { error in\n        self.dismissViewControllerAnimated(true, completion: nil)\n        self.album.managedObjectContext?.refreshObject(self.album, mergeChanges: true)\n    }\n}\nController (version B):\n``` swift\nfunc albumInfoController(albumInfoController: AlbumInfoController, didSaveWithTitle title: String, description: String) {\n    self.fetcher.updateAlbum(self.album.remoteID!, title: title, description: description) { error in\n        self.dismissViewControllerAnimated(true, completion: nil)\n    let fetchRequest = NSFetchRequest(entityName: Album.entityName())\n    fetchRequest.predicate = NSPredicate(format: \"remoteID = %@\", self.album.remoteID!)\n    self.album = try! self.album.managedObjectContext!.executeFetchRequest(fetchRequest).first as! Album\n}\n\n}\n```\nFill with dictionary method\n. We could re-fetch all the items on the main thread and call refreshObject but this might be an overkill since if you're using NSFetchedResultsController it does it for you. I guess you want only one item to be refreshed the same way that I showed in my example above. In that case it's easier for you to just refresh that item doing:\nswift\nself.album.managedObjectContext?.refreshObject(self.album, mergeChanges: true)\nClosing this for now. Thanks for your input. Let me know if there's anything else we can do for you :heart: \n. You're right, internally there's a array of messages that got updated or inserted, but this items belong to a background thread, returning them wouldn't be safe.\nNormally I use Sync in conjunction of NSFetchedResultsController which means that I don't face the need of fetching an array of changes. This is what I've been using: https://github.com/3lvis/DATASource\nI hope this makes sense to you. \n. Yeah, DATASource is not connected to Sync. DATASource is just a NSFetchedResultsController wrapper.\n. I think I found your use case, this is what I have in my app, and two ways of doing it:\nFetcher:\n``` swift\nfunc updateAlbum(id: String, title: String, description: String, completion: (error: NSError?) -> ()) {\n    let parameters = [\n        \"title\": title,\n        \"description\": description\n    ]\n    self.networking.POST(\"/photos/v1/albums/(id)\", parameters: parameters) { JSON, error in\n        self.dataStack.performInNewBackgroundContext({ backgroundContext in\n            guard let JSON = JSON as? [String : AnyObject] else { fatalError(\"Album JSON has inconsistent structure\") }\n        let fetchRequest = NSFetchRequest(entityName: Album.entityName())\n        fetchRequest.predicate = NSPredicate(format: \"remoteID = %@\", id)\n        let album = try! backgroundContext.executeFetchRequest(fetchRequest).first as! Album\n        album.hyp_fillWithDictionary(JSON)\n\n        try! backgroundContext.save()\n\n        dispatch_async(dispatch_get_main_queue(), {\n            completion(error: error)\n        })\n    })\n}\n\n}\n```\nController (version A):\nswift\nfunc albumInfoController(albumInfoController: AlbumInfoController, didSaveWithTitle title: String, description: String) {\n    self.fetcher.updateAlbum(self.album.remoteID!, title: title, description: description) { error in\n        self.dismissViewControllerAnimated(true, completion: nil)\n        self.album.managedObjectContext?.refreshObject(self.album, mergeChanges: true)\n    }\n}\nController (version B):\n``` swift\nfunc albumInfoController(albumInfoController: AlbumInfoController, didSaveWithTitle title: String, description: String) {\n    self.fetcher.updateAlbum(self.album.remoteID!, title: title, description: description) { error in\n        self.dismissViewControllerAnimated(true, completion: nil)\n    let fetchRequest = NSFetchRequest(entityName: Album.entityName())\n    fetchRequest.predicate = NSPredicate(format: \"remoteID = %@\", self.album.remoteID!)\n    self.album = try! self.album.managedObjectContext!.executeFetchRequest(fetchRequest).first as! Album\n}\n\n}\n```\nFill with dictionary method\nThere's no safe or performant way for Sync to give you back the message object.\n. Hi @bonebox,\nThis certainly looks like a bug, in Sync if the object is in the JSON and in Core Data, it should be updated. If it's in the JSON and not in Core Data is inserted. Finally if it's in Core Data and not in the JSON then it's deleted.\nSame should be for relationships. Would you mind sharing some details on how I can reproduce this issue so I can ensure we get the desired behaviour? Thanks a lot for your help :heart: \n. Also if an object is updated but the values are the same as before then the object doesn't get updated at all.\nhttps://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/blob/master/Source/NSManagedObject%2BHYPPropertyMapper.m#L33-L36\n. @bonebox that could be. Both items need to have the same remoteID in order to be considered the same.\n. sure, although NSDate doesn't seem like the best primary key since a slightly millisecond change or timezone change would cause your objects to think they are not unique.\n. Do you have an example of the date that you're getting from the backend? Miliseconds could make the entire difference between dates.\n. I wish we could figure out a way to reproduce this bug, it's not happening on my unit tests.\n. Hi @bonebox, by any chance is this new behaviour (meaning that it was working before) or is the first time you find the issue.\n. @bonebox Thanks! And congrats on the new project :tada: \n. Related to https://github.com/hyperoslo/Sync/issues/162\n. Working on a way to specify Sync operations. https://github.com/hyperoslo/Sync/pull/223\n. @f1nality Hi Denis,\nI tried the AppNet demo (I also added logging to that Demo).\nYou can try it with pod try Sync on your terminal.\nThe things that you have mentioned work without problems. Also logging works fine.\n\n. @f1nality I think the issue might be due the mapping between your Core Data model and your JSON.\nDo you have id in your JSON and remoteID in your Core Data model? Could you share an screenshot of your Core Data relationship and an example of your JSON?\n. How does your Sync method looks like? Would be nice to see your predicate :) \n. @f1nality Could you try un-commenting the following lines in your local copy of Sync?\nhttps://github.com/hyperoslo/Sync/blob/master/Source/Sync.m#L90-L98 \n. > But when I fetch from api - i get inserts instead of refresh\nThis sentence sounds similar to this other issue. https://github.com/hyperoslo/Sync/issues/144\nI'll use your example to check what's going on. Thanks :heart: \n. > But if don't provide predicate, all objects are being deleted and only objects I have passed to \"changes\" argument are created.\nThat sounds like expected Sync behaviour: If the object is in the JSON and in Core Data, it should be updated. If it's in the JSON and not in Core Data is inserted. Finally, if it's in Core Data and not in the JSON then it's deleted.\nUsing a predicate: Sync fetches the objects from Core Data using the predicate, then it does the same procedure as the one mentioned before but instead of using all the elements in Core Data, it only diffs using the elements that apply to the predicate.\n. > wow, ok then. But if I specify no predicate and pass objects - it also deletes and inserts objects which were in coredata (this was original problem).\nThis definitely looks like a bug. I'll have a look when I get some time.\n\nBy the way, how in this case should api pagination should be implemented using sync? I make requests to api with specified \"page\" and get only part of data. When I try to sync it - all other pages in core data will be deleted.\n\nYou'll need to find a way to differentiate objects that belong to each page (this is why the predicate is needed). Otherwise Sync doesn't have a way to know what got deleted in each page.\n. @f1nality so you have been calling sync.changes multiple times? sometimes before it has even finished? That should definitely cause duplicates.\nDuplicates get deleted because we have a method that clears duplicates. If there's two objects with the same remoteID (primary key) those items get deleted.\nhttps://github.com/3lvis/DATAObjectIDs/blob/master/Source/DATAObjectIDs.m#L39-L47\n. If you were using something like that, how would you delete non existing items then? What happens if items get deleted from your backend?\n. Related to https://github.com/hyperoslo/Sync/issues/162\n. Working on a way to specify Sync operations. https://github.com/hyperoslo/Sync/pull/223\n. @antonholmquist This is correct, syncing the same resource isn't safe. I think this is related to #93.\nWhen I have many Syncing methods I usually chain them so one doesn't start before the other one. Having NSOperation support would work great too.\n. @antonholmquist you're right, would be great if we could handle this internally. Any ideas? So far I only could come up with the NSOperation way.\n. @antonholmquist Hi Anton,\nInteresting workaround, I remember having a shared backgroundContext before, but Core Data is very fragile. Sharing managed object contexts means even more shared state. I would prefer to keep this as it is. I have checked other \"Core data wrappers\" for example the Big Nerd Ranch one and they do something similar, and I think it's because is more safe. I would love to share more details on where exactly having a shared background context causes more harm than gains but at the moment I can't come up with anything concrete.\nYou could work around by keeping a copy of the backgroundContext and using it for your imports, though. Might have the same effect as changing the logic for sharing the background context.\nI think this wouldn't be a problem if Sync operations where treated as NSOperation operations. Where you could queue them or just cancel them as needed. \n. I agree, although changing the behaviour of background contexts sounds more like a workaround to me. If we add NSOperation support we'll be killing two birds with one stone, since we would also be able to cancel Sync operations https://github.com/hyperoslo/Sync/issues/93\n. Hi @tpmullan!\nThanks for your PR. I was thinking on having hyper.justForeignKey : YES because it doesn't break backwards compatibility, meanwhile using {model}_id will break some things that have already worked for some people.\n. This is how we added primary key support to Core Data\nhttps://github.com/hyperoslo/NSEntityDescription-SYNCPrimaryKey\n. @tpmullan makes sense :) I'll add a few test cases, and try this on master.\n. Thanks :heart: \n. Good catch, thanks @AnthonyMDev :heart: \n. @adrienjt Thanks for writing, haha, if you didn't said anything this probably wouldn't have been done.\n. Hi @violabg.\nFirst of all, change the id for remoteID. Also change sortId in Brochure and PdfCategory to sortID. Finally, PDFCategory might be better than PdfCategory. :)\n. if your JSON is a list of brochures then you need something like this:\njson\n[\n  {\n    \"id\": 0,\n    \"is_current\":..,\n    \"is_local\":..,\n    \"is_new\":..,\n    \"modification_date\":..,\n    \"name\":..,\n    \"needs_update\":..,\n    \"sort_id\":..,\n    \"thumb\":..,\n    \"url\":..\n    \"category\": {\n      \"id\":..,\n      \"name\":..,\n      \"sort_id\":..,\n      \"thumb\":..\n    },\n    \"language\": {\n      \"id\":..,\n      \"name\":..\n    }\n  }\n]\n. @violabg I see, if you have all the categories and languages synced then you can do:\njson\n[\n  {\n    \"id\": 0,\n    \"is_current\":..,\n    \"is_local\":..,\n    \"is_new\":..,\n    \"modification_date\":..,\n    \"name\":..,\n    \"needs_update\":..,\n    \"sort_id\":..,\n    \"thumb\":..,\n    \"url\":..\n    \"category_id\":..,\n    \"language_id\":...\n  }\n]\n. You need to separate the syncing of categories and languages first. Then you should do the brochures syncing.\n. Great!\n. @violabg What do you mean? Are you getting errors?\n. @violabg lets keep the conversation on #153 :)\n. Hi, I just tried running the AppNet example and inserts, updates and deletes are working fine. Also getting the notifications works, too.\n\n. I'll close this since I'm not able to reproduce your error. Could you provide an screenshot of your Core Data model? And example of the used JSON(s)? I'll reopen this issue if we manage to reproduce your problem.\n. Sync is fully unit tested so everything should be fine but I'll have a look. :)\n. Hi @violabg! Thanks for reporting this issue. Indeed, I'm not getting any notifications for updated objects. I'll have a look.\n. @violabg Related to reacting to deleted elements, normally I would do it with something like DATASource where it has a delegate that tells you about deleted elements but might be nice to get something like that for Sync. I'll think about it. I have a similar use case and having that logic in Sync might be better than having it in DATASource which lives in the ViewController.\n. There you go\nhttps://github.com/hyperoslo/Sync/blob/master/AppNet/Networking.swift#L27-L57\n. \n. @violabg > updatedObjects it is always dispatched even if you don't cache anything on the JSON.\nI don't follow, could you explain, please?\n. @violabg that's how it works, it updates existing items, so it should do it only if changes happen.\nIs this critical for you?\n. This is the code that checks if the value has changed before doing any updates, I guess it's not so smart for elements that have relationships.\nhttps://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/blob/master/Source/NSManagedObject%2BHYPPropertyMapper.m#L33-L36\n. @violabg Made an issue for it :)\nhttps://github.com/hyperoslo/Sync/issues/156\n. Feel free to submit a fix :bouquet: \n. @violabg Thanks! That helps :)\n. Just submitted a fix for this\nhttps://github.com/hyperoslo/Sync/pull/163\n. No changes have been made in Sync's source so this should be fine with Travis.\n. File NSManagedObject+Sync\nCrash on [filteredObjectDictionary andy_valueForKey:remoteKey]\n\n. Proposed fix:\nOn line 133\nif (filteredObjectDictionary && [filteredObjectDictionary isKindOfClass:[NSDictionary class]]) {\n. Method\nself.networking.GET(\"/location\", completion: { JSON, error in\n    if let JSON = JSON {\n        Sync.changes(JSON[\"results\"] as? [AnyObject], inEntityNamed: \"Location\", dataStack: self.dataStack, completion: nil)\n    }\n})\n. Fixed on https://github.com/hyperoslo/Sync/pull/215\n. @doohoo Hi Doo!\nAt the moment only category_id is supported. \nYou could workaround this by modifying your JSON first.\nIn the future would be nice to add support using hyper.remoteKey.\n. @galinyonchev Hi could you share an screenshot of your Core Data model, please? Having the structure is important to see what's going on behind the scenes.\nThanks!\n. @galinyonchev first of all you're missing the reverse relationship onAlcohol, Fitness and Weight with Measure.\n\n. @galinyonchev as you can see in my example, every entity has a primary key. Also, every element needs it's own JSON object.\nFor your structure, Sync would expect something like this.\njson\n[\n  {\n    \"id\": 0,\n    \"text\": \"Melisa White\",\n    \"measures\": [\n      {\n        \"id\": 0,\n        \"baselines\": [\n          {\n            \"id\": 0,\n            \"text\": \"Baseline 1\"\n          }\n        ],\n        \"alcohols\": [\n          {\n            \"id\": 0,\n            \"text\": \"Alcohol 1\",\n            \"measure\": {\n              \"id\": 0,\n              \"text\": \"Alcohol Measure 1\"\n            }\n          }\n        ],\n        \"fitnesses\": [\n          {\n            \"id\": 0,\n            \"text\": \"Fitness 1\",\n            \"measure\": {\n              \"id\": 0,\n              \"text\": \"Fitness Measure 1\"\n            }\n          }\n        ],\n        \"weights\": [\n          {\n            \"id\": 0,\n            \"text\": \"Weight 1\",\n            \"measure\": {\n              \"id\": 0,\n              \"text\": \"Weight Measure 1\"\n            }\n          }\n        ]\n      }\n    ]\n  }\n]\n. The biggest problem here is that Sync doesn't understand object_type. So, if you want to use Sync with your same JSON structure, I would recommend you to move all the attributes from Alcohol, Fitness and Weight and move them to the Measure entity, something like this:\n\nThe use the objectType with a predicate to get the alcohol items, fitness items and weight items.\nI hope this was useful for you, otherwise, let me know. \nBest,\n. @galinyonchev What's the primary key of the measure object? Also, wouldn't measures be better? Since it's an array.\n. If date is the primary key, then in your example, those items will be replaced since both have the same date. I'll have a look at what's going on. I guess the guid is the primary key of Patient.\nWill try to reproduce your issue and get back to you :) \nThis should work just fine.\n. @galinyonchev of course, primary key needs to be unique. And also only one primary key is supported per entity.\n. @SirSJR thanks :heart: :bouquet: \n. Hi @wuxiao356,\nI remember this been reported earlier. Could you try saving your new data entry using a new backgroundContext instead of a mainContext?\nWe didn't set up the main context to be mutable, that's why you probably have this issues. If this fixes your problem I'll improve the documentation to be clear about this.\nHave a great day :)\n. Closing since no feedback has been received from @wuxiao356 \n. Hi Henry,\nThanks for writing us, it's great to hear that you like Sync, I use it in all my projects :grin:! \nI've been thinking on how to expand the functionality for the rest of methods, your proposal for delete makes a lot of sense and looks beautiful btw.\nRegarding:\n\nwhere update records would be a true update, not a delete and replace, which is what Sync seems to currently do.\n\nI guess having a separate update method could work here instead of adding more complexity to the main Sync method.\nFinally, Sync fetch sounds awesome! I already have something like that in place in my private repos and works quite well.\nThanks again, \u2764 :bouquet: \n. Insert would be cool, too.\n. Hi @rafalwojcik,\nThanks for adding this. I think it's enough requests for me to consider adding this requests. I'll do it in the following days.\nYou are awesome :bouquet: \n\n. Working on a way to specify Sync operations. https://github.com/hyperoslo/Sync/pull/223\n. Fetch and delete should be coming at some point. But if someone feels like it, feel free to submit a PR.\nDelete\nswift\n//  deletedKeys could be strings or numbers\npublic class func delete(primaryKeys: [AnyObject], inEntityNamed entityName: String, dataStack: DATAStack, completion: ((error: NSError?) -> Void)?) {\n    // ....\n}\nFetch\nswift\n// primaryKeys could be strings or numbers\n// synchronous method, it runs in the same thread that is called\n// could also use generics instead of `[NSManagedObject]\npublic class func fetch(primaryKeys: [AnyObject], inEntityNamed entityName: String, context: NSManagedObjectContext) -> [NSManagedObject] {\n    // ....\n}\n. Added operation types in 1.9.0\nhttps://github.com/hyperoslo/Sync/releases/tag/1.9.0\n. I guess this issue was too big and covered lots of stuff. One part of the issue was fixed, adding operations, but having different methods for delete and fetch haven't being implemented yet.\n. Fixed in https://github.com/SyncDB/Sync/pull/332. If you have any feedback regarding the API let me know \u2764\ufe0f . # Current API\nInsert or update\nswift\ntry! Sync.insertOrUpdate([\"id\": \"id\", \"name\": \"name\"], inEntityNamed: \"User\", using: context)\nUpdate\nswift\ntry! Sync.update(\"id\", with: [\"name\": \"Elvis\"], inEntityNamed: \"User\", using: context)\nDelete\nswift\ntry! Sync.delete(\"id\", inEntityNamed: \"User\", using: context). @defal7 Probably you could update the AppNet demo to use Alamofire.\n. Checkout https://github.com/3lvis/SyncAppNetDemo\n. Hi Anton,\nLuckily, Sync already has support for this. It's as simple as using the hyp_dictionary method in any NSManagedObject:\n\n. I added that information to the README, hopefully is one less dependency that you have to take care of. Thanks!\nhttps://github.com/hyperoslo/Sync/pull/166\n. Hi @henryhardy,\nThanks for this PR! I added a few comments. I hope it's ok for you.\n:sparkles: :heart: :sparkles: \n. I'm going to clean up this myself :)\n. Done https://github.com/hyperoslo/Sync/commit/c454f91a2376d941a09ecc2e355adb8c741ad90d!\n. Hi Henry!\nI have a fix for this, we can use Swift's better type system to enforce the right type in this cases.\n. Hi @henryhardy,\nI rewrote some parts of Sync in Swift and type safety is now 93,56% better! For example now it's very clear that the changes part requires an array of dictionaries.\nhttps://github.com/hyperoslo/Sync/blob/master/Source/Sync.swift#L8\nPlease try it out and let me know how it works for you.\n```\nuse_frameworks!\npod 'Sync', git: 'git@github.com:hyperoslo/Sync.git'\n```\n. Hi Michal,\nThanks for your contribution. I'll have a look later today. \n:bouquet: \n. Hi @StarWars,\nI added a fix for this with some unit tests. https://github.com/hyperoslo/Sync/pull/176\nThanks for pointing this one I bet it was causing headaches for ordered relationships users.\n. Haha, thanks! I had to find something to do between waiting for Travis CI and compiling my humongous Swift project.\nHave a good day :cake: !\n. Hi @GlaucoNeves,\nThanks for reporting this. I'll see what we can do but I can't promise so much since it could be an edge case.\nDo you have any possible solutions in mind?\n. Thanks for your comments, @GlaucoNeves!\n. @GlaucoNeves Hi Glauco, I have been investigating performance issues with saving things and have create a sample project where I'm syncing more than 60 000 objects and I have found the freeze when merging the background objects with the main context. I'm looking for different ways to fix this but so far your suggestion seems like it would be a good candidate, meaning, sending a notification to the UI for fetching instead of merging items to the main context seems like something it could work.\nThanks again for your time and suggestions.\n. Check https://github.com/hyperoslo/Sync/pull/249\n. I guess this is related to https://github.com/hyperoslo/Sync/pull/180\nGreat work, @wainglaister! \nThanks a lot :bouquet: \n. Hi Wain!\nSorry for not looking at this before, I have been in vacation mode. Travis is acting weird when it comes to running tests, I'll clone your branch and check the changes.\n. Freaking good job, @wainglaister. \nThanks! \n\n. Hi @wh33ler,\nWe don't have anything like what you mention built-in.\nRight now you could use notification changes to let the user know how many items have being updated/deleted or inserted.\nhttps://github.com/hyperoslo/Sync#logging-changes\nIf you plan to work on this, you might want to consider using notifications for this. \n. Closing for now. Let's reconsider re-opening in the future if more people want this feature. :cupid: \n. Hi @szwicker,\nI'm afraid this could take some time since all the dependencies would have to have Carthage support too. But please, feel free to add that if you want it (in a PR). I'll take some time to maintain it in the future if you get this done.\nThanks a lot!\n. Added Carthage support on the latest version.\n. Hi @macfurin, can I have a look at your Core Data model, please?\nI'll look into an example on Syncing only workouts with nil distance. To be clear, you are saying, taking this JSON, only update workouts in Core Data that have nil distance, right?\n. I'm sorry that this took AGES.\nThis a first approach at syncing what you are asking. Doing this with workout inside plan is going to be more complicated. I know this is not exactly what you asked but I hope is useful for you.\nhttps://github.com/hyperoslo/Sync/pull/194\n. Again, sorry for the late response!\n. https://github.com/hyperoslo/Sync/pull/194 \n. Hi @Raghvendra7, \nCould I get a peek at your Core Data model and an example of your JSON structure?\n. I had to convert your JSON to valid JSON first. I'll check now :)\n``` json\n{\n   \"rmcorganization\":[\n      {\n         \"id\":\"41da96ba-e818-7edf-7658-e26ec2a91600\",\n         \"name\":\"Find My Employee Staging\",\n         \"web_url\":\"http%3A%2F%2Fraremediacompany.in%2F\",\n         \"domainName\":\"findmyemployeestaging\",\n         \"rmcobject\":\"rmcorganization\",\n         \"rmcphoto\":{\n            \"thumbnailUrl\":null,\n            \"photoUrl\":null,\n            \"orgUrl\":null\n         },\n         \"address\":\"G-84, Connaught Place New Delhi -110001\",\n         \"updated\":\"2016-02-26T06:02:49+05:30\",\n         \"rmcosd\":[\n            {\n               \"rmcservice\":[\n                  {\n                     \"id\":\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n                  }\n               ],\n               \"name\":\"User State\",\n               \"object\":[\n                  \"rmccheckin\"\n               ]\n            }\n         ],\n         \"rmcservice\":[\n            {\n               \"id\":\"8574eca3-1d30-9d95-bdd2-a73812ff796a\",\n               \"rmcssd\":[\n           ]\n        }\n     ]\n  }\n\n]\n}\n```\n. Added an example here https://github.com/hyperoslo/Sync/pull/188\n. The problem was that RMCOsd didn't had a primary key, I improved the error that gets shown when this happens.\n. This is how you mark an attribute as primary key.\n\n. Not important anymore.. :heart_eyes: Thanks @zenangst! \nOverall looks quite good, thanks for taking the time on improving the implementation!\n. Hi @alexsanderskywork,\nWhich error?\n. @alexsanderskywork Can I have an example of your JSON file, please?\n. @alexsanderskywork Thanks! I'll get back to you later today :bouquet: \n. Hi Alexsander,\nYou had some errors when creating your Core Data model.\n. Check the full example on how I did it, here. It's working with no problems, although you might want to check the performance issues after syncing so many items.\nhttps://github.com/hyperoslo/Sync/pull/193\n. \n\n. Closed for lack of feedback from @macfurin, I'll reopen if required.\n. Tests are passing locally\n\n. This is working even though :man: says something else.\n\n. Hi @ali59a,\nIt has the same effect but dictionary[relationshipName] seems a more readable approach than (dictionary as NSDictionary).valueForKeyPath(relationshipName).\nAny special reason on why you would prefer this?\nBest,\n. Hi @meoz,\nSync has partially this feature, you still have to implement the networking part of it, since Sync doesn't do any networking at all.\nBut for example, if you update a user object and you want to update it in your server using a PUT you can generate the JSON for this NSManagedObject.\nMore information here:\nhttps://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper#json-representation-from-a-nsmanagedobject\nI hope this works for you! Let me know if you have any other questions.\nHave a great day \u2600\ufe0f \n. Oh Travis, WHY ARE YOU SO RETARDED?!\n. \n. Travis you're the reason why computers aren't ruling us. A disgrace for your kind.\n. You should learn a thing or two from AlphaGo.\n. Hi Patrick,\nI'm sorry you're having troubles with the latests versions of Sync. What you're reporting seems like it's something in our side, but is going to be hard to tell without being able to reproduce the bug.\nWould you mind sharing with me a example of your JSON structure and your Core Data model? I would love to isolate the issue in order to find a fix.\nThanks!\n. @pschneider Just being able to see the kind of relationships in both the Core Data model and the JSON would help, I don't need to see which attributes you're using.\n. Closing for lack of more information. Please let me know if you want me to reopen this.\n. Travis you're so freaking retarded.\n\n. Hi @xTheRamon,\nYou're right, looks like it's on our side. By making a quick Google search it seems that the problem is related to a wrong predicate.\nhttp://stackoverflow.com/questions/4217849/core-data-nspredicate-for-many-to-many-relationship-to-many-key-not-allowed\nIn the method [DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:]\nCould you share the complete call stack? Would be nice to see in which Sync method the crash is happening, although with some debugging I could check too.\n. BOOM! Thanks!\n. @xTheRamon Looking into it, at least I was able to reproduce the crash\n. @xTheRamon Could you confirm if this has been fixed on master?\n. @xTheRamon \ud83d\ude0a \nwoah, which version of CocoaPods are you using?\n. Weird, I just published a new version of Sync with this change 1.6.5. Could you check if it's working?\n. I'm glad you find it useful, let me know if I can help in anything else. \ud83d\udca5 \n. @falkobuttler Hi Falko! It's great that you're giving Sync a try, I hope you like it.\nThere are two ways you can sync a JSON object that doesn't have a remoteID. You can either set one of it's attributes as the primary key, or you can store the JSON object as NSData, I have done this myself in a couple of apps works pretty well. You can find more information on how to store dictionaries using Sync here.\nI hope this helps, let me know if we can do anything else to make the transition easier. \ud83d\udc90 \n. @falkobuttler Hi Falko, sounds like we don't have a solution for your requirements out of the box. The quickest way for you to add this would be as you say to modify your JSON so it adds the parent ID as the ID of the child object.\nI'm sorry that there isn't a better way to do this.\n. Hi!\nYou should be able to cast the result of unarchiveObject to Array.\nSomething like this:\nswift\nif let array = NSKeyedUnarchiver.unarchiveObjectWithData(data) as? [String: Any] {\n    //...\n}. I see, looks like the solution was casting to [String: String].. Updated the README https://github.com/SyncDB/Sync/blob/master/README.md#retrieving-mapped-arrays. Hehe, Travis your work wasn't required this time, but thanks anyway.\n. No need to make it longer. Tests are passing locally, also there are other 1000 things that could go wrong anyway.\n. Dear Travis,\nYou suck.\n\n. https://github.com/hyperoslo/Sync/pull/249\n. Jesus, this was a lot of work.\n. Around 100 lines of implementation the rest is only tests \u00af_(\u30c4)_/\u00af \n. \nTravis you slow, I'm not.\n. Hi @tanmaybaranwal!\nWhich version of Xcode are you using? Could be something related to the new #selector syntax on Swift 2.2.\n. Just gave it a fresh clone + install. I'm 99% sure, this will get fixed if you update your Xcode.\nLet me know otherwise and I'll reopen the issue.\n. I added some simple unit tests but if you encounter any issues with this implementation, please just open an issue with your Core Data model and an example of your JSON file.\n. Hi @Jonge,\nDo you have any crashes in specific that we should look at? Usually is hard to recover from Core Data failures that's why the default for some cases it has been to just crash, but there's also the chance that the crashes are our fault and would be great to reproduce them to provide a solution.\n. Thanks @Jonge,\nThat's pretty useful. I'll add an issue on that repo to follow up later.\n\ud83d\ude4f \n. Most errors should be propagated now, if you have any other suggestions please let me know.. @xTheRamon Hi! Thanks for reporting this issue, I'll try to reproduce it in a unit test. \n\ud83d\udc90 \n. @xTheRamon Reproduced, I'm sorry this is taking so long. Crazy mix between deadlines and WWDC.\n. Hi! Working on a fix for this.\nI'm using this model:\n\nThen I'm working on 3 cases\nCase 1: Replacing a tag with another tag (Fixed)\nFirst tag 10 gets inserted and assigned to user.\njson\n[\n  {\n    \"id\": 1,\n    \"tags\": [\n      {\n        \"id\": 10\n      }\n    ]\n  }\n]\nThen tag 10 gets removed and tag 20 gets assigned to user instead. Tag 10 gets removed.\njson\n[\n  {\n    \"id\": 1,\n    \"tags\": [\n      {\n        \"id\": 20\n      }\n    ]\n  }\n]\nCase 2: Removing a tag with an empty array (Fixed)\nFirst tag 10 gets inserted and assigned to user.\njson\n[\n  {\n    \"id\": 1,\n    \"tags\": [\n      {\n        \"id\": 10\n      }\n    ]\n  }\n]\nThen tag 10 gets detached from user. Tag 10 gets removed.\njson\n[\n  {\n    \"id\": 1,\n    \"tags\": []\n  }\n]\nCase 3: Removing a tag with null (Fixed)\nFirst tag 10 gets inserted and assigned to user.\njson\n[\n  {\n    \"id\": 1,\n    \"tags\": [\n      {\n        \"id\": 10\n      }\n    ]\n  }\n]\nThen tag 10 gets detached from user. Tag 10 gets removed.\njson\n[\n  {\n    \"id\": 1,\n    \"tags\": null\n  }\n]\n. Please let me know if any of this doesn't make sense. I'm still yet to refactor and do some clean up but the main feature should be available shortly.\n. # Released in 1.13.1\nI'm sorry this took so long. Let me know if there are issues with this fix. \n. Hi! It's already on CocoaPods https://github.com/CocoaPods/Specs/commit/20264d703e2c9691856e57e7b5ab1d77c31134d1\n. Hi @justinackermann,\nI just verified this and the date parsing is correct. How did you generated the timestamp?\n``` swift\nlet resultDate = NSDate.hyp_dateFromDateString(\"2016-07-16T01:32:00-04:00\")\nprint(resultDate)\nprint(resultDate.timeIntervalSince1970)\n// parsed date => 2016-07-16 05:32:00 +0000\n// unix timestamp (timeIntervalSince1970) 1468647120.0\n```\n\n. Hi @kikanny\nI'm happy that you have found this library useful, personally I use it in all my projects and I'm always happy to see that some use cases have already been solved thanks to the community.\nRegarding your problem. I think this could be solved be removing the status from the NSPredicate that you send to Sync.\nIs there a reason why that wouldn't work? Then Sync would just update those entries instead of making new ones. I hope you don't find dumb this question, just trying to understand the full scope of the problem to find different solutions.\nHave a great weekend!\n. You could remove the predicate and to avoid objects being deleted you can limit the operations to Insert and Update.\nswift\nSync.changes(secondImport, inEntityNamed: \"User\", dataStack: dataStack, operations: [.Insert, .Update]) {\n    // Here new users have been imported, existing users have been updated, and not found users have been ignored\n}\nThat got implemented here: https://github.com/hyperoslo/Sync/releases/tag/1.9.0\n. Closing this waiting for further response, last suggestion should fix the issue.\n. I guess to summarize this, would be great if there was an option where, even when using a predicate, DATAFilter made sure that there's only one item for one id, and did a insertOrUpdate instead of the current behaviour.. Hi @batjo! Any chance to get a failing unit test to get a full scope of the possible solutions?\n. Would doing something like this would work for you?\nOf course, this assumes that you either get an endpoint that returns objects just for a certain status or you do some preprocessing to remove objects with a certain status.\nI changed the predicates so it only works with the items contained in the JSON.\n```swift\n// https://github.com/3lvis/Sync/issues/227\nfunc test227() {\n    let dataStack = Helper.dataStackWithModelName(\"227\")\n// Here the user wants to get all tags with status 0\nvar tags = Helper.objectsFromJSON(\"227-status-0.json\") as! [[String: Any]]\nlet status0IDs = (tags as NSArray).value(forKey: \"id\") as? [Int] ?? [Int]()\ndataStack.sync(tags, inEntityNamed: \"Tag\", predicate: NSPredicate(format: \"ANY id in %@\", status0IDs), completion: nil)\nXCTAssertEqual(Helper.countForEntity(\"Tag\", inContext: dataStack.mainContext), 1)\n\n// Now the user wants to get all tags with status 1, but meanwhile the status of Tag with id has changed to 1. \n// Currently this creates a second tag object with the same ID\ntags = Helper.objectsFromJSON(\"227-status-1.json\") as! [[String: Any]]\nlet status1IDs = (tags as NSArray).value(forKey: \"id\") as? [Int] ?? [Int]()\ndataStack.sync(tags, inEntityNamed: \"Tag\", predicate: NSPredicate(format: \"ANY id in %@\", status1IDs), completion: nil)\nXCTAssertEqual(Helper.countForEntity(\"Tag\", inContext: dataStack.mainContext), 1)\nlet tag = Helper.fetchEntity(\"Tag\", predicate: NSPredicate(format: \"id = 1\"), inContext: dataStack.mainContext).first\nlet status = tag?.value(forKey: \"status\") as? Int\nXCTAssertEqual(status, 1)\n\ndataStack.drop()\n\n}\n```. @batjo I think pushing local elements first sounds like the most sensible approach to keep your local database always in sync. . Haven't seen any other issues related to this so might be an isolated case and not something related to the library, closing unless anything changes.\n. It's a similar issue. I have started looking into it here: \nhttps://github.com/hyperoslo/Sync/pull/229\n. This should be fixed as far as I know.\n. Hi @tboetig! For what I can see it was part of 1.13.1 https://github.com/SyncDB/Sync/issues/225#issuecomment-242726492\n. This branch was outdated, trying here again: https://github.com/hyperoslo/Sync/pull/266\n. Ideally public methods should be really limited to prevent people from shooting themselves in the foot and make it easier for us to debug problems. I'll merge this and we can revaluate which methods stay public when migrating to Swift 3.0\n. @Pyroscout Hi! We don't support calling Sync for the same resource at the same time, unexpected behavior is bound to happen. You can either find a way to only call Sync for a resource once at the time, or you can use a NSOperationQueue with maxConcurrentOperationCount = 1.\nswift\nlet queue = NSOperationQueue()\nlet operation = Sync(changes: users, inEntityNamed: \"User\", predicate: nil, dataStack: dataStack)\nqueue.addOperation(operation)\nIn that way a sync will only be called when the previous one has finished.\nI hope this is useful for you!\n. Hi @Pyroscout, \nI added a unit test to verify this, and everything is working as expected. https://github.com/hyperoslo/Sync/pull/235\nTo be able to follow up on this, could you please share your Core Data model and an example of your JSON?\nI have the suspicion that it might be related to changing primary keys but I can't say for sure until I get that information.\n. Check this GitHub issue, if has an screenshot of the Core Data model and the JSON file.\nhttps://github.com/hyperoslo/Sync/issues/184\n. Is postid the primary key?\n. I'm sorry but I'm not able to reproduce this error, having a sample project would help a lot. Closing until receiving further instructions.. Hi @dersvenhesse,\nYou're right, this isn't handled correctly. The piece of code that should include this functionality is here.\nRight now it just checks if the relationship has being added, before it adds it, it doesn't check if the index has changed. It does this to avoid triggering KVO notifications if changes haven't been made.\nTo be able to implement this feature, I think we would need to know the previous index of the evaluated relationship, if it has changed we could use any of the fancy NSMutableOrderedSet methods to move elements.\nDo you have any suggestions on how we could do that?\nAlso, why using sorted relationship instead of sorting by X using a NSSortDescriptor?\n. Maybe pulling the entire list of changes, looping through it and verifying if the index is the same. Could be a good option. If the index is not the same, figure out the new index and change it's position on the set.\n. \ud83d\udca5  -> https://github.com/SyncDB/Sync/issues/327. Thanks @dersvenhesse, you're correct this is related to #225 this is on the top of my list.\n. That's great news! Thanks for reporting back, @dersvenhesse.\n\n. Hi @wainglaister!\nI think we could do something about your use case, although I'm not sure if I fully understand what you're trying to achieve. Would you mind providing an example of a JSON file or JSON files, and your Core Data model to reproduce this in a unit test?\nThanks!\n. I see what you mean now. I think it can be solved with the current set up. I'll put an example when I'm more available. Thanks \u2764\ufe0f \n. Hi had a second look, given the JSON:\njson\n{\n  \"id\": 1,\n  \"name\": \"PS\",\n  \"memberships\": [\n    {\n      \"id\": 3,\n      \"team_id\": 5,\n      \"name\": \"bob\"\n    }\n  ],\n  \"teams\": [\n    {\n      \"name\": \"Pro Sprots\",\n      \"id\": 5\n    }\n  ]\n}\nI'm afraid you have to process the teams first before Sync knows about matching to the team_id.. Sorry for not being more helpful here, if you have any suggestions let me know and I'll create a detailed issue to follow up.. Funny, enough. I've noticed if Sync processed first teams, then memberships this works.\nhttps://github.com/SyncDB/Sync/pull/336. We could probably sort the relationships based on how they come from the backend https://github.com/SyncDB/Sync/blob/8337de7fb7370fbc431e968f325971fb494c176e/Source/Sync/NSEntityDescription%2BSync.swift#L8. Reopening this since that's actually something we could do :D. Closing this and leaving the PR.. Thanks a lot for this. I'm very sorry it took this long to merge. I moved your test case here to fix the conflicts and simplified a bit the test case.\nHave a fantastic week!\nhttps://github.com/hyperoslo/Sync/pull/264\n. Hi @Jonge \nThanks a lot for this. I agree, would be great if you could add a test, or provide a model + JSON that helps reproducing this, I think I could add the unit test.\n. Thanks a lot for this. I'm very sorry it took this long to merge. I moved your test case here to fix the conflicts and simplified a bit the test case.\nHave a fantastic week!\nhttps://github.com/hyperoslo/Sync/pull/264\n. I'm glad you got it fixed! Let me know if there's anything I can do for you :)\n. Added Carthage support on the latest version.\n. I'm glad you got it working. Please just let me know if there's anything that I can help with :) Sorry for not replying faster.\nHave an awesome day.\n. Fantastic!\n. Released on https://github.com/hyperoslo/Sync/releases/tag/1.10.0.\nSorry for being so slow. \ud83d\udc80 \n. Hi @tbechtum,\nThat's a weird bug, I can only think of it as a Swift bug, nothing related to Sync. I'm sorry I can't be more helpful. Maybe you need to add CoreData to your Test bundle?\n. It works, I tried in a throw away branch. https://github.com/hyperoslo/Sync/blob/9fb41745daee0b7a843967e776aecc8c1aa4994b/Tests/SyncTests.swift#L647-L649\n. Hi @FrancisBehnen,\nI'm sorry this took so long. I finally went through the article. In my current app I have a similar requirement and I'm using Sync.\nBasically every local element has a needsUpload attribute, this is a Boolean. When I call Sync, I provide the predicate: NSPredicate(format: \"needsUpload == %@\", false), meaning, only sync items where the needsUpload item is false, using this predicate makes sure that my \"offline\" items will get ignored from the sync process.\nLater I will use a NSFetchRequest to fetch all the items with needsUpload == true and send them to the backend one by one. Once one upload is completed, the local item receives an remote ID, and the needsUpload attribute is set to false.\n. Gonna close this since it could be achieved by using the predicate to skip attributes that should be ignored from the Sync process.\n. \n. \n. @RobinFalko Thanks! I'll look into it. Makes sense that this is a bug at the moment since the camelCase support was added to https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper first for attributes and we didn't made the change in Sync for relationships.\nThanks for reporting this issue!\nBest,\n. Should be fixed here https://github.com/hyperoslo/Sync/pull/258\n. Hi @smartjx!\nCan I get an example of your JSON file? Or just your JSON date object?\n. Yay!!! Let me know if there's anything else I can help with :) Have a fantastic day \n. I'll have a second look :)\n. I'm glad you found the source. That sounds 100% correct. I'm handling dates like this because is MUCH MUCH MUCH more performant than using NSDateFormatter.\n. Yeah, that's very strange.\n. @smartjx does this fixes your problem?\nhttps://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/pull/110\n. Fixed here https://github.com/hyperoslo/Sync/releases/tag/1.11.2\n. Oh god, I'm sorry that I didn't had the chance to look at this earlier.\n. I'll double check.\n. I was able to reproduce this bug.\n. Fixed! To explain it a little bit better. \nSync first will check the houses in the JSON. It will find one house with id 0. It will create the house, then it will move to residents.\nSync then, will go through all the residents, it will find one with id 0. It will make a Human entry and will connect the residenthouse with the residents. Then it will continue the loop and check for ownhouses and this is where the bug was located.\nSync wasn't very good at handling Entities that point to each other multiple times, so it would think that both ownhouses and residenthouse in Human are the same.\nI fixed this issue by sending which relationship was supposed to be evaluated for an array of residents. Meaning if I'm parsing residents, then I should only connect residenthouse and ignore ownhouses.\n. Published fix here https://github.com/hyperoslo/Sync/releases/tag/1.12.2\n. @xTheRamon is completely right. This was a change made in NSManagedObject-HYPPropertyMapper because we found that it's better to be explicit about nilling attributes. Avoids a lot of bugs.\nIf you want to nil an attribute or use a default parameter as @xTheRamon said, is better for you to do this in another method.\nTo be clear, the way to nullify an item would be by sending null in JSON:\njson\nturned_on: null\n. @tbechtum This is related to date parsing, nothing to do with testing. Could you share an example of the JSON you're using?\n. Fixed on https://github.com/hyperoslo/Sync/releases/tag/1.11.3\nPlease update your Sync pod and try again :)\n. 2015-11-09T18:05:32 should work too.\nHave a nice day!\n. Now the latest one should be https://github.com/hyperoslo/Sync/releases/tag/1.11.3\nForgot to pull the trigger \ud83d\ude02 \nAdded a section about supported date formats in the FAQ too\nhttps://github.com/hyperoslo/Sync#which-date-formats-are-supported-by-sync\n. Hi! It's because your primary key is _id instead of the default ones that can either be id or remoteID.\nYou can fix this by changing it's remote key to map to _id.\nhttps://github.com/hyperoslo/Sync#primary-key\n. \n. I hope this fixes your issue!\n. wait, this is weird. I'll have a look.\n. I was able to reproduce this.\n. The bug is related to the relationship name workoutExercises. Instead of using it as is, is converting it to workoutexercises, so it's failing. I'll look for a fix for this, meanwhile you could exercises instead of workoutExercises until a better solution is posted.\n. I'm certain that this is a bug. \n. Fixed here, thanks a lot for posting this well described bug. All the information that you posted was very useful to find the issue.\nYou can find a new release that fixes this: https://github.com/hyperoslo/Sync/releases/tag/1.12.1\nHave an awesome week.\n. \n. \n. I'm afraid that has nothing to do with Sync or DATAStack but more with Core Data. I'm sorry. Let me know if I'm wrong and I'll reopen this issue.\n. Having that aside, maybe Core Data is faulting the object since the controller that invoke it is no longer being used, for example when you push the new controller. I would either just pass the primary key to the new controller and make a new fetch there. Or I would try to use DATASource to see if it helps with the faulting related issues.\n. It's better if you don't create multiple DATAStacks, but reuse the same one. Otherwise unexpected things might happen.\nI guess you're using Storyboards, I have a demo on how it's the recommended way of doing it if you're interested.\nProject: https://github.com/3lvis/StoryboardDATASourceAndDataStackDemo\n. If you don't use Storyboards then this might be useful: https://github.com/3lvis/SyncAppNetDemo\n. Awww, thanks! I'm glad you like it.\n. \n. \n. > I can provide more information about the exact issue if needed.\n@realtec that would be very useful, specially so I make sure to support your use case as well.\n. This was one of the most complex models so far :D\n\n. The issue that you pointed out here @realtec is not really referred to what this issue was about, but I did found something :D. I believe this works fine in master.. \n. \n. Good idea. I'll come up with something.\n. Expanded a bit on the README, I'll consider adding more in the future.\n. A proposed fix was submitted here, please give it a try and let me know if there are any issues: https://github.com/3lvis/Sync/pull/418\nThanks for you patience <3. Thanks! Feel free to send a fix :)\nOtherwise I'll have a look on the weekend, I've been pretty busy lately.\n. Fix for: https://github.com/hyperoslo/Sync/issues/270\nThis is the simplest way that I've found to support this feature, using regular expressions instead of simple string comparison has it's drawbacks, the method calculation went from 0.01 to 0.02. Since date parsing is a common thing that could be done thousands of times in a JSON mapping, I would prefer to keep the performance instead of handling this edge case, as I've found online most current unix timestamp parsers don't even support this feature.\nPlease let me know what you think.\n. That's very nice of you, I wish you an amazing week \ud83c\udf1e \n. Thanks a lot for providing such detailed bug report! I'm quite busy this week, I'm sorry if I don't have a look earlier.\n. Hi @normand1!\nI hope you're doing fine, it's been a long time since this issue. Looks like this was fixed in a previous release, added a unit test and everything seems working like it should.\nhttps://github.com/SyncDB/Sync/pull/351\nHugs.. Hi @bonebox,\nThanks for reporting this bug, I'm quite busy this week, sorry if I don't have a look earlier. \ud83d\ude1e \n. @bonebox could you please share this in JSON format? Also, this JSON is a list of Forms?\n. I'm trying to reproduce this bug :)\n. Damn, I'm still due to ship my next project and haven't had the time to look at this. I'm sorry if that's causing you troubles.\n. @bonebox This should be fixed in the latest release of Sync 1 and Sync 2. Please let me know otherwise.\nFixed on Sync 1.14.2\n. Hi! That's because list_image_url maps to listImageURL! \n. It works like that because URL is an acronym. You can find the complete list of acronyms here.\nhttps://github.com/hyperoslo/NSString-HYPNetworking#acronyms\n. Updated the README to clarify this, sorry for not adding that before :)\nhttps://github.com/hyperoslo/Sync/blob/master/README.md#attribute-mapping\n. Fantastic idea! I remember wanting to do something like this before. Looking forward to mark this as done.\n. # BOOM! Added in 2.1.0\nhttps://github.com/hyperoslo/Sync/releases/tag/2.1.0\nAnd Sync 1.14.0 if you're still in Swift 2.3\n. # BOOM! Added in 2.1.0\nhttps://github.com/hyperoslo/Sync/releases/tag/2.1.0\nAnd Sync 1.14.0 if you're still in Swift 2.3\n. Hi! I'm having a hard time migrating because lots of issues regarding pushing new builds with CocoaPods. I'm working on it :)\n. Hi! It's coming later today. Already migrated some of the dependencies, just need to finish some migration on this repo.\n. The main blocker so far was CocoaPods, but they have been very helpful to fix things. Did you knew that now you have to add a .swift-version file to your repo in order to ship a pod with Swift 3? No? Me neither. Mindblown.\n. Branch in progress here https://github.com/hyperoslo/Sync/pull/279\n. It's on master now, for now just point directly to :head\n. pod 'Sync', git: 'git@github.com:hyperoslo/Sync.git'\n. Seems like a CocoaPods problem\n. Released as Sync 2.0.0\nhttps://github.com/hyperoslo/Sync/releases/tag/2.0.0\n. Noted, I'll see if I can reproduce it.\n. Thanks a lot for reporting this issue, sadly at the moment I'm really busy at work. Hopefully I'll get time to have a look at this issue early next week, I hope that's ok for you. Have a good weekend!\nBut as always PRs are very welcome, if there's something hard to understand I can take some time to give some guidance.\n. I was able to reproduce this issue. Unit test here -> https://github.com/SyncDB/Sync/pull/350. Fixed in https://github.com/SyncDB/Sync/pull/350. Oh, no, so you're getting crashes? In which version of Sync are you on?\n. @Proper-Job You're also using Firebase? \nAny pointers on how I can reproduce this? I don't have the same log. Xcode version? Swift version?\n. Do you run Sync multiple entities at the same time? Maybe that's causing issues with the lock, since things are locked in one thread and unlocked in another one. \n. The locks are located here, btw. \nhttps://github.com/hyperoslo/NSString-HYPNetworking/blob/master/Source/NSString%2BHYPNetworking.m#L69-L87\nI use a singleton to store old versions of your remoteKeys to localKeys to improve performance.\n. I needs the locks because NSMutableDictionary is not thread safe.\n. @pwestrich interesting :) thanks! I think that confirms what the issue is.\n. https://github.com/hyperoslo/NSString-HYPNetworking/pull/16\n. @pwestrich thanks a lot!\n. # BOOM! Fixed in 2.1.0\nhttps://github.com/hyperoslo/Sync/releases/tag/2.1.0\nAnd Sync 1.14.0 if you're still in Swift 2.3\n. \n. Thanks a lot for reporting this issue, sadly at the moment I'm really busy at work. Hopefully I'll get time to have a look at this issue early next week, I hope that's ok for you. Have a good weekend!\nBut as always PRs are very welcome, if there's something hard to understand I can take some time to give some guidance.\n. @pwestrich Could you help me by saying what are you using for primary key in each entity?\n. Working on a fix here, but need more info to reproduce: https://github.com/hyperoslo/Sync/pull/290\n. @pwestrich Thanks!\n. Hi again @pwestrich \nI haven't been able to reproduce the issue. Do you have any idea what I might be missing?\nhttps://github.com/hyperoslo/Sync/pull/290\n. @pwestrich Don't worry! Have a great weekend \ud83c\udf89 \n. @pwestrich I was able to reproduce the bug by calling Sync two times, one after the other. Seems like the crash is related to updating.\n. Issue fixed here: https://github.com/hyperoslo/Sync/pull/290 \ud83c\udf89 \nShould be available through CocoaPods in the upcoming Sync release.\n. # Fixed on Sync 2.1.2\n. @ro22e0 Would you mind proving an example of your Core Data model and the JSON that you're using? \nShould be easy to figure out what's missing with some more info.\n. Yeah, this shouldn't be 2 objects but just one. Every thing looks in place. I guess we'll need a sample project to reproduce.\n. Closing this one for lack of more information from the original author. Let's revisit this later when we know more.\n. Hi @AnnieNinaJoyceV!\nThis should be different on Sync 2.0.0 => https://github.com/hyperoslo/Sync/blob/2.0.0/Source/NSArray%2BSync.swift#L16\nTry deleting your Pods folder, cleaning your CocoaPods cache folder and trying again.\nCleaning your CocoaPods cache folder:\nruby\npod cache clean --all\n. Awesome! Have a great weekend \ud83c\udf89 \n. Hi @Sorix,\nWhich version of Sync are you using? :)\n. Nevermind, found it in the included project. Thanks!\n. Hahaha, fantastic detective work!\n. Fixed here https://github.com/hyperoslo/Sync/pull/291\n. This was a bigger issue than what it seemed, but most people probably haven't reached since it's not a common scenario to have 2 relationships point to the same entity.\n. Hi! OMG. You're already iOS 10 only? \nI haven't had the chance to look at this closely, but there's the chance to make it work, although we could lose some features.\nIs there a reason on why you're using NSPersistentContainer instead of something like DATAStack?\n. Main reasoning for decoupling so far has been that owning the entire stack means it's easier to fix any potential issues. In theory it should be able to work with NSPersistentContainer.\n. parent/child context have been really buggy for me in the past. Meanwhile merging has been more stable. Also then I'm able to do this: https://github.com/3lvis/SyncPerformance aka loading tons of tons of objects into Core Data without blocking the UI since there's no merging into the main thread.\n. \ud83c\udf89 Let's keep this task open, would be awesome to try Sync with NSPersistentContainer. \n. @RolandasRazma sounds smart!\n. Added basic support for NSPersistentContainer in theory Sync could be used with any NSManagedObjectContext.\n. The main issue is that not using DATAStack might increase the amount of support since we would lose more control over the Core Data stack.\n. Thanks for reporting this bug, @AnnieNinaJoyceV. I was able to reproduce it. https://github.com/hyperoslo/Sync/pull/286\n. @pwestrich Yeah, looks like they could be related.\n. @AnnieNinaJoyceV I was able to reproduce, probably because I'm using id as primary key. What are your primary keys for this entities?\nhttps://github.com/hyperoslo/Sync/pull/286\n. Hi @AnnieNinaJoyceV I'm having a hard time reproducing this bug. Seems to be working fine from here.\nhttps://github.com/hyperoslo/Sync/pull/286\n. Any ideas on what I could try to reproduce the crash? \n. @AnnieNinaJoyceV I'll try to reproduce on the Swift 2.3 branch. If it works there as well, a demo project would be very useful.\nThanks for following up! Have a great weekend \ud83c\udf3b \n. Thanks for supplying the demo project. I used it to verify that this was fixed on the latest Sync release. \nFixed on Sync 2.1.2\n. Already fixed\n. Hi @Sorix!\nI was able to reproduce your bug here https://github.com/hyperoslo/Sync/pull/291\nSadly the suggested fix doesn't fix the issue. Thanks for looking into this!\n. Fixed here :) https://github.com/hyperoslo/Sync/pull/291\n. Hi @cflorion,\nThanks for sharing your ideas :) \n1.- Do you know why Firebase does this? First time I see this in a backend.\n2.- Is there any reason why you won't save all your players first, then save the teams, so the players are linked correctly to the team they belong?\n. Hi @cflorion,\nSorry for not taking care of this PR as it should. :( \nWould be nice to add Firebase support in an extension. Instead of on the main Sync.swift mainly to keep it agnostic.\nRegarding the additional flag, I'm not sure if it would be a good idea since I can see people using it and reporting bugs because things didn't got saved.\n. Closing since Firebase support is not considered as a main feature and could increase the complexity of the project.. \n. Found the bug, not related to a specific version of Swift. So I'll continue on https://github.com/hyperoslo/Sync/pull/291\n. @kikanny fantastic work! I verified and this fixes the issues. \nYou find a test case and a fix for the Swift 3 branch here. \nhttps://github.com/hyperoslo/Sync/pull/290\n. Great suggestion, @xTheRamon. That should fix the issue @jimijon. Let us know otherwise.\n. @jimijon it is :) \nhttps://github.com/hyperoslo/Sync#faq\n. Moved the mentioned information from FAQ to it's corresponding section.\nhttps://github.com/hyperoslo/Sync/blob/master/README.md#primary-key\n. You have to add both to the attribute. \n. Not to the table :)\n. @RolandasRazma Great suggestion! Seems very useful.\n. I think something like:\nswift\nnewMO.sync_fill(with: [String: Any])\nCould fit your needs.\n. @RolandasRazma there's already this\nswift\nlet userJSON = JSON[\"user\"]\nuser.hyp_fill(with: userJSON)\nFrom Sync's dependency SYNCPropertyMapper.\nI think it would fill your needs. Let me know otherwise.\n. Hi @ro22e0,\nHow would you normally do that? I'm not sure if we have support for that.\n. @ro22e0 that's not supported at the moment but should be possible to add it.\nCould you please share your use case (Core Data model + JSON) to reproduce it?\n. Can you try again? The latest release should fix this problem.\nhttps://github.com/SyncDB/Sync/releases/tag/1.15.0\n. Let me know if I should re-open this issue. Thanks for reporting it!\n. Hi @klivin,\nIt's possible to add your own formatting.\nhttps://github.com/SyncDB/NSManagedObject-HYPPropertyMapper/blob/master/Tests/NSManagedObject%2BHYPPropertyMapper/HYPFillWithDictionaryTests.m#L173\nBut the format that you requested is in the list as well.\nhttps://github.com/SyncDB/DateParser/issues/4\n. Link fixed!\n. Hi @klivin,\nI'm sorry for not looking at this before, quite busy at work. As a workaround I would recommend you to pre-process your JSON to have ISO 8601 dates. I'll try to put some time later this week to fix the issues that you mentioned.\nBest,\n. @klivin Hi, I took a second look and added a demo on how value transformers should be used. Basically, you need to add a key to your User Info. I would recommend to not use Transformables since they don't seem very reliable.\nhttps://github.com/SyncDB/SYNCPropertyMapper#dealing-with-bad-apis\n. Moved to https://github.com/SyncDB/SYNCPropertyMapper/issues/134\n. Fixed here https://github.com/SyncDB/SYNCPropertyMapper/pull/135\n. I think this is related to this https://github.com/SyncDB/Sync/pull/189\nBasically today we run the predicate through the local/Core Data objects. Ideally we should also run the predicate through the JSON file, so we make sure that all objects (remote and local) are ignored if they don't comply with the predicate.\n. @Proper-Job You're right, for that use case at the moment in one of my apps I take the JSON and take the IDs as an array.\nswift\nlet ids = (json as NSArray).value(forKey: \"id\") as? [String] ?? [String]()\nlet predicate =  NSPredicate(format: \"synced == true AND id IN %@\", ids)\nThis would mean, sync this JSON, excluding all the attributes marked as true, and at the same time, exclude overwriting or deleting all the local items that have one of this IDs.\n. Hi @Proper-Job, I think you're right. Thanks for taking the time to explain this.\n. @allemattio I would advise that locally the id that you assign to your item is an id that you won't find in the backend. You can either have a local-only id, so you're sure this won't get overwritten, or you can make a fake (remote) id that has low collision rate with the remote one.\n. Hopefully this will give a better perspective on how to handle this scenarios.\nhttps://github.com/SyncDB/OfflineCRUDDemo\nLet me know if something is unclear.\nThanks a lot for your patience.\n. Hi!\n@AnnieNinaJoyceV check if your Core Data attribute has a default value. Sounds like that's the issue.\n. \\o/\n. This is fixed then?!\n. http://stackoverflow.com/questions/26977812/should-i-check-the-use-scalar-properties-for-primitive-data-types-when-generat\n. @AnnieNinaJoyceV Btw, Sync would normally map to \nadminTransactionID instead of adminTransactionId\nadminID instead of adminId\n. Let me know if there's anything else I can help with.\n. Damn, Travis is crap. It's green but it fails.\n. Oops\n. Thanks @dersvenhesse!\n. \n. Yeah. Need to refactor a bit to use the same methods.\n. Hi @Jonge,\nShould be working now :). This application is modifying the autolayout engine from a background thread after the engine was accessed from the main thread. This can lead to engine corruption and weird crashes.\nYour error has nothing to do with Sync or Core Data but more with UIKit. Make sure you're only accessing UI related code in the main queue.\n. You can use this to check where your app is accessing UI from a background thread.\nhttp://stackoverflow.com/a/32680772/717416\n. @ivoindriksons Hi,\nThe latest version of Sync uses a Swift only protocol called OptionSet for this reason it's not available in Objective-C.\n. Do you have any ideas on what we could do there?\n. Have you seen a framework combining Objective-C and Swift code? As far as I know this is not supported.\n. Maybe we could have a separate API just for Objective-C that used strings instead.\n. It doesn't work because you can't have both Objective-C and Swift in the same framework. I think there might be a workaround but I haven't seen any library doing it.\n. \ud83d\udc4f \n. This is the perfect workaround. Closing this issue.\n. Hi @fedros, thanks a lot! Can I get a JSON and a Core Data model to unit test this?\n. A test case is a great step towards finding a solution. Awesome @dersvenhesse!\n. Hi @dersvenhesse, I'm quite busy this week. I'll put some time to look into it this Monday. I hope this won't cause troubles for you.\n. @dersvenhesse nice solution! . \ud83d\udc4f . Let's merge this and make a separate issue for sync_toManyRelationship. Hi @risp, you need null to clear the relationship. Your second example should work. I'll have a look. \nThanks for reporting this!\n. Fixed here https://github.com/SyncDB/Sync/pull/324/commits/f6a32e97403530036e53a51e1a0370a9fb451fe8\nI'm sorry this took that long. It usually doesn't take much before things are fixed, it's just that things at work have been quite chaotic. Let me know if you have any other issues.\nHave a great weekend :). Hi! Could you check if this is related to Sync mapping to ID instead of Id?  meaning change eventSourceId to eventSourceID.\n. You might need to change this in the hyp.remoteKey as well.\nIn your Core Data attribute eventSourceID\nhyp.remoteKey =  eventSourceId\n. Regarding plannedTo. I believe that Sync would expect planned_to_ids to do an automatic mapping. I don't remember testing this with camelCase. But it should look for plannedToIDs. I'll have a closer look when my plane lands. \n. Awesome! I think is fine to close this issue then. Let me know if anything goes wrong and I'll reopen this one.\nHave a great weekend!\n. This is really helpful. Thanks!\n. \n. Hi @fedros, thanks a lot! Can I get a JSON and a Core Data model to unit test this?\n. We need to add unit tests before being able to merge this, would be very nice if you could help me with that @fedros :). Hi @neil-morrison44,\nThere isn't such thing at the moment but should be simple to add.\nI think it could look something like this.\nswift\nfunc update(_ object: NSManagedObject, with changes: Any, in context: NSManagedObjectContext, completion: ((_ error: NSError?) -> Void)?) {\n    context.perform {\n        let fetchRequest = NSFetchRequest<NSFetchRequestResult>(entityName: entityName)\n        fetchRequest.predicate = NSPredicate(format: \"id = %@\", object.hyp_primaryKey())\n        let object = try! backgroundContext.fetch(fetchRequest).first!\n        object.hyp_fill(with: changes)\n        do {\n            try backgroundContext.save()\n            DispatchQueue.main.async {\n                completion(nil)\n            }        \n        } catch let error as NSError {\n            DispatchQueue.main.async {\n                completion(error)\n            }\n        }\n    }\n}\n. Probably related to https://github.com/SyncDB/Sync/issues/162 as well.\n. @neil-morrison44 sync_fill maybe works better there.\n. Although that's a private method right now.\n. I was wondering what's better\nswift\nfunc update(_ object: NSManagedObject, with changes: Any, in context: NSManagedObjectContext, completion: ((_ error: NSError?) -> Void)?) {\nvs\nswift\nfunc updateObject(with id: Any, with changes: Any, in context: NSManagedObjectContext, completion: ((_ error: NSError?) -> Void)?) {. Fixed in https://github.com/SyncDB/Sync/pull/332\nIf you have any feedback regarding the API let me know \ud83c\udf89 . Hi @Sfynx!\nThanks for this PR. \ud83d\udca5 . \n. \n. I think a simple solution for this might not be possible.. Here right now we're getting 2 instead of one.\nThe reason that this is happening is because when Sync starts looking for the second player, it doesn't find it, so it creates a new one.\nThe reason why it doesn't find it is that there are two reasons:\n1.- In the DATAFilter it uses an inverse predicate, so it asks for a player that has a player group, and the already inserted player doesn't have a group.\n2.- The DATAFilter fetch doesn't return a result, even if the predicate was nil, because the fetch needs that the relationship is saved first.. Thanks @dersvenhesse!. @jimijon Hi James,\nCould you share your Core Data model and also the JSON that you're using. Before being able to help you I need to reproduce the issue. :)\nThanks!. Could you share your Core Data model as well? Also would be nice to know in which places you're using custom user info attributes.. Nope, no model. https://github.com/SyncDB/Sync/issues/339. Hi James, there's no model here, something must be going on with GitHub.. Could you try adding it using the web client instead of through email? Maybe that was the problem.. @jimijon I got your model, but I am crazy busy at work. I'll see if I can get try it out this weekend :). @jimijon Some bug fixes, mainly for to-one relationships using only the id. Like a user that links to a company using company_id. And a fix for syncing ordered to-many relationships.\nhttps://github.com/SyncDB/Sync/releases/tag/2.4.0. Gave it a try, seems like everything is working as it should, let me know if I'm missing something.\nhttps://github.com/SyncDB/Sync/pull/349. @jimijon Have a look here -> https://github.com/SyncDB/Sync/pull/349. @jimijon Let me know how it goes. Good luck on the new release. \u2764\ufe0f . \n. Hi @MojtabaHs,\nCould you share your Core Data model as well? Thanks :). I gave it a try, looks like it's working. Please double check, maybe I'm missing something.\nhttps://github.com/SyncDB/Sync/pull/348. The models are the same as in #348. I can double check with the mentioned operation types.. Works fine on master.. This works fine on master.. \n. Hi Florian, would you mind sharing a bit of what's this trying to solve? Would be nice to get some perspective in order to see if we can provide a better alternative.. @thestr4ng3r That makes total sense! Damn, I get what you mean now.. Hi @neil-morrison44,\nThanks for reporting this issue. Is most likely that this was introduced in https://github.com/SyncDB/Sync/pull/328.\nMatching with ids, has a few caveats, one of this is that is ideal that the objects that you reference by id are already in Core Data. Otherwise, it might work sometimes, meaning, it will work only if the entity is already there.\n. I think adding a safety check to silently fail instead of crashing might be the solution for this.. This shouldn't be a problem anymore.. Hi @jim-dev2rights,\nI think this could be related to many-to-many relationships, if you have an array of objects that references another element inside, you need to make sure that the referenced object already exists in the database. The easiest way is just by making sure that your JSON doesn't have references to other objects but instead it sends the full object.\nI hope I explained myself well. I know it took a long time before I could reply to this issue. Gonna close this for now if you need any help you can also contact me on Gitter. https://gitter.im/SyncDB/Sync. Thanks for reporting this issue Ramzi. \ud83d\udc90 \nIt was fixed here: https://github.com/SyncDB/Sync/commit/0ca78cdc488f963cc5ea78258c9db8f4e38c1bd4. It's been sometime after this issue was opened, let's open a new one if it's still relevant.. Hi @MojtabaHs,\nIf you sync the second JSON, of course it will replace the contents of the first one, that's how Sync works. It diffs the local with the remote and acts on it.\nIf you want to keep the old contents try using only insert and update operations. Something like this:\nswift\nSync.changes(secondImport, inEntityNamed: \"User\", dataStack: dataStack, operations: [.Insert, .Update]) { _ in\n}\nI hope this fixes your problem, otherwise just let me know. :). @MojtabaHs There's no issue in reopening if the problem is not fixed. Could you post your Core Data model, please? Wanna check out if it's a many-to-many relationship or just to-many.. It's been sometime after this issue was opened, let's open a new one if it's still relevant.. Hi Mukul,\nThanks for reporting this issue. Can I have some information to reproduce the issue? JSON file & Core Data model or sample project would help.. Closing for lack of response.. Hi Jovito,\nThanks for reporting this issue. Could you share your Core Data file and JSON file to reproduce the issue? It seems like something related to update operations.. Thanks <3, I'll have a look when I've got some time.. I'll double check the issue with the ordered relationship but in general Sync works better with not ordered since that's what I use :(.. Hi! Sorry for the late response, might be faster to contact me on Gitter as well (https://gitter.im/SyncDB/Sync). \nRegarding your problem maybe something like this:\nswift\nlet listOfProducts = // the array of JSON recipes\nfor jsonProduct in listOfProducts {\n    try! Sync.insertOrUpdate(jsonProduct, inEntityNamed: Product.entityName, using: backgroundContext)\n}. Would you mind sharing your Core Data model and JSON if that doesn't work? I can double check what's going on.. It's been sometime after this issue was opened, let's open a new one if it's still relevant.. Hi! Yes, that's exactly what it does.. @ihor-vovk-lohika Can you share your entire Cartfile? I think it could be dependencies referencies other subdependencies.\nMake sure you don't have SyncDB/DATAStack or SyncDB/SYNCPropertyMapper in your Cartfile. Or any other dependencies that point to those.. Looking into it.. Still checking for a proper way to solve this, probably the Carthage guys know more about it, how to archive when a project has framework dependencies.\nI got it working by keeping the root DATAStack.framework and SYNCPropertyMapper.framework, but deleting the ones inside the Sync.frameworks folder.\n. \n. Will do! And I'm glad you got it working.. I've been playing with removing all the dependencies from Sync but damn, it's way more work than it seems. Might be good to check how other Carthage libraries are handling this.. Should be fixed in 3.0.0\nhttps://github.com/SyncDB/Sync/releases/tag/3.0.0. Hi @rlester, \nDarn, I need to double check what's going on in there. Thanks for reporting this issue!. Haven't had the chance to look into it, but might be related to the operation status not being set properly internally.. @dneykov Hi,\nThis is a bit strange. If there's a JSON field that is not present in Core Data it should get ignored, if there's a field in Core Data but you don't get it in the JSON then it also gets ignored.\nI can try to reproduce your use case but might be useful to clarify the issue.\nJSON\njson\n[\n    {\n        \"id\": 1\n    }\n]\nCore Data\n```\nUser\n\nid: Int\nfirstName: String\n```\n\nYou're saying that my example, won't work, right?. Thanks! I'll have a look.. Hi Daniel,\nI gave it a go and it seems to be working fine.\n\n```swift\nfunc test367() {\n    let dataStack = Helper.dataStackWithModelName(\"367\")\n    let changes: [[String : Any]] = [[\"id\": 1, \"first_name\": \"Daniel\", \"timestamp\": 1486756142]]\nSync.changes(changes, inEntityNamed: \"User\", dataStack: dataStack, completion: nil)\nXCTAssertEqual(Helper.countForEntity(\"User\", inContext: dataStack.mainContext), 1)\n\ndataStack.drop()\n\n}\n```. https://github.com/SyncDB/Sync/pull/369. No worries, looking forward to see what was the issue. Have a great weekend!. Closing this for now. Let me know if you need any other feedback.. @ArdentZeal Hi,\nAre you calling hyp_dictionary for Task, Tag or MapLocation? I'll try reproducing your issue.\nI remember seeing something regarding infinite loops here: https://github.com/SyncDB/SYNCPropertyMapper/issues/112\nThe solution was to add a \"hyper.nonExportable\" flag to the relationship. https://github.com/SyncDB/SYNCPropertyMapper#excluding\n. @ArdentZeal Great to hear. I'll add to the FAQ.. Added! https://github.com/SyncDB/Sync/blob/master/README.md#infinite-loop-in-hyp_dictionary-with-relationships. Hi @eman8519,\nNot sure if this fixes your issue but you could use Core Data's notification system to be notified of progress.\nhttps://github.com/SyncDB/Sync#logging-changes. Hi Huy!\nThat's strange, got the unit test working fine.\nhttps://github.com/SyncDB/Sync/blob/master/Tests/Sync/SyncTests.swift#L242-L269. @jetstar89 Could you try doing it this way?\nhttps://github.com/SyncDB/Sync/blob/master/Tests/Sync/SyncTests.swift#L242-L269\nMeaning get the parent in the main context, then use the method\nswift\nSync.changes(objects, inEntityNamed: \"SuperNote\", parent: users.first!, dataStack: dataStack, completion: nil)\n. Hi @yonat!\nInteresting workaround, would you mind sharing a little bit more of your use case? How does the child JSON and parent JSON look like? I would be happy to include your case as a unit test to make sure we support that case in the future!. Thanks for the extra info! I'll hope to have some time to reproduce it :). Hi @andersblehr, \nI'm glad Sync helped you getting started in open sourcing your work! Looking forward to borrowing some features back :)\nIf you ever feel like contributing back you're completely welcome.. @andersblehr Btw, it is possible to produce JSON out of NSManagedObjects https://github.com/SyncDB/Sync#json-exporting.. A proposed fix was submitted here, please give it a try and let me know if there are any issues: https://github.com/3lvis/Sync/pull/418\nThanks for you patience <3. Thanks for clarifying this @dersvenhesse!. @padlocked17 \nHi! Thanks for reporting this, sorry for the late response. The issue is most likely that deep mapping, meaning using \"custom_meta.wpfc_series\" for relationships is not very well supported in Sync. We did the work for attributes not for relationships.. @padlocked17 Should be fixed now. Hi @markst,\nWe don't have support for it out of the box, adding support for it doesn't seem like a bad idea, though. Sadly, all the APIs that I've used don't use that, that's the main reason it hasn't been prioritized.. Hi!\nWhich command were you running for that to happen?. Should be fixed in 3.0.0\nhttps://github.com/SyncDB/Sync/releases/tag/3.0.0. @eman8519 Nice one!. Could you fix the merge conflicts, please?. Moved to https://github.com/SyncDB/Sync/pull/383, that branch doesn't have the merge conflict.. @mzgnr Help on this would be fantastic! Should be similar than https://github.com/SyncDB/Sync/pull/385 but in this method instead.\nhttps://github.com/SyncDB/Sync/blob/master/Source/Sync/NSManagedObject%2BSync.swift#L328. I believe this should be fixed now in master.. @pgawlowski Hi! Having an screenshot of your JSON model and the JSON that you're using will help me to reproduce your issue, could you help me sharing that?. Hi @pgawlowski,\nI know it's been some time and I'm not able to reproduce the issue, just hoping it was fixed in the newest release. . Hi @jassimkm,\nAnything that's specially difficult?\n. Hi @jassimkm,\nSorry for the lack of response, did you get it working?. @dneykov Updated, now it says iOS 9.. One sec changing 3.* to be iOS 8.. Ready!\nhttps://github.com/SyncDB/Sync/releases/tag/3.2.2. Hi @Zarakas,\nIn what iOS version are you?. @kleber11 could you try this branch? fix/persistent-store-not-recreating\nhttps://github.com/3lvis/Sync/pull/423. I'll make a new release with that feature then :). https://github.com/3lvis/Sync/releases/tag/3.3.1. Hi @jkblgithub,\nForking the project and adding a failing unit test will help a lot to get this issue resolved since it's usually the part that takes most time when fixing issues.\nThanks for your understanding <3.. Haven't seen any other issues related to this so might be an isolated case and not something related to the library, closing unless anything changes.\n. Hi @jetstar89,\nI hope you're having a nice weekend :) Can I get some more information in the operation that you're doing? Having your Core Data model and an example of your JSON file might help a lot to profile the save.\nAlso, is it blocking your main thread or you don't have problems with that?. @jetstar89 Could you help me providing an example project I can use to reproduce this issue?\nThanks in advance :). @jetstar89 you can write me in a privat channel in https://gitter.im/SyncDB/Sync. Haven't seen any other issues related to this so might be an isolated case and not something related to the library, closing unless anything changes.\n. Hi @methebao,\nGonna try to check it out soon, shouldn't be hard to implement. :). For the record: this should be possible, check the tests for test375toOneSimplified\nhttps://github.com/3lvis/Sync/issues/375. I'm glad you got this working :). Sadly, I haven't had enough time to work on this, if anyone else would like to look into it I'll be happy to provide support. In my opinion should be straightforward to have a demo using NSFetchedResultsController.. Closing this for now, Sync should work on all the platforms, sadly at this time, I won't be able to find the time to work on making an example for macOS.. <3 I'm glad you got it working. @MicMat68 Wow, that's a lot of data. I think using plain Core Data the issue would be similar, not sure if it's something Sync related.. :( not sure what we can do about it. 300 000 could be considered an edge case.. Closing since this should be considered an edge case. Sorry for that.. Hi @lm2343635,\nIt's using OptionSet which isn't available in Objective-C. We would have to make a bridge API using Objective-C enums and methods that can be accessed on Objective-C. Shouldn't be hard to make, I can see if I have time next week but I can't promise anything, if you're willing to work on it, it would be very nice!\nHere's where the enum is defined. https://github.com/SyncDB/Sync/blob/master/Source/Sync/Sync.swift#L19-L30\nI'm thinking a Swift file with something like the following method. \nswift\nSync.objc_changes(secondImport, inEntityNamed: \"User\", dataStack: dataStack, operations: {objc_enums}) {\n    // Likely after some changes have happened, here usually Sync would remove the not found items but this time\n    // new users have been imported, existing users have been updated, and not found users have been ignored\n}. Fixed on https://github.com/SyncDB/Sync/releases/tag/3.3.0, still needs a CocoaPods release.. Need to wait until I arrive home, this computer doesn't have CocoaPods trunk set up.. Ready on CocoaPods!. @lm2343635 Thanks!. Hi @jimijon,\nCould you help me giving some information or sample project to reproduce your issue? Thanks!. @jimijon all the old tests are still passing so nothing broke as far as I was concerned =/. Hi! The current tests test pretty much everything.\nSync Tests:\nhttps://github.com/SyncDB/Sync/blob/master/Tests/Sync/SyncTests.swift\nEntire tests folder:\nhttps://github.com/SyncDB/Sync/tree/master/Tests. That's included in the Core Data model, for example here.\n\n. Have a look at the tests, please, I believe the problem might be something else. Having a failing unit test or a project to reproduce this issue would help a lot to get it fixed. Thanks and sorry for taking so long in replying :). Haven't seen any other issues related to this so might be an isolated case and not something related to the library, closing unless anything changes.. I'm glad you got it working @ValeriiVV! Sorry for the late response :). Hi @lm2343635!\nI'm trying to keep the codebase as simple as possible, is it possible that you include these helpers just in your project? We can always revisit if someone else needs this.\nThanks!. The instance method is just a convenience method. They work the same, the difference is that in the instance method you avoid sending the dataStack.. Closing since it can be added as a local helper method. . Hi @alijaza,\nYou could have a relationship like this:\nConversation has many messages\nConversation has one lastMessage\nHere messages and last message are two different entities.\n. @alijaza I'm afraid Sync doesn't support your use case out of the box, I would suggest you pre-process your JSON in your app so it fits with what's expected by Sync or roll your own implementation based on the basic Sync functionality. Sorry for not being more helpful.. Hi @alijaza,\nI believe you could achieve this by using the predicate, the predicate tells Sync which items should use for the diffing part, for example if you have 100 local items you could tell sync to avoid syncing with those elements. I don't have a demo project for that right now but that should work.. Hi @allemattio,\nMaking the sync process to fail and pass an error was something quite challenging, that's most likely why it wasn't done like that before. . Was able to verify here that this isn't an issue anymore: https://github.com/3lvis/Sync/pull/434. @alijaza Thanks for describing your solution!. I can concur with what @dersvenhesse. Having a primary key is a key part of how Sync works, this primary key doesn't have to be an integer, it can be anything that can be used to differentiate one element from another.. @aamir-nazir Closing this for now, let us know if you have any other questions.. @busu90 Hi! Sync doesn't have a way to do that, you would have to get the full nested object and get the relationship that you need.. Closing until I hear back from @busu90.. Terrific job @batjo! You are great :). Fixed in https://github.com/3lvis/Sync/pull/418. \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f . @mrDyos This is expected behavior sync we've got reports that having null ids would create an exception. So we went for just discarding objects with NSNull ids.. Interesting, I'll give it a try :) Thanks for taking the time to share some sample code.. I wasn't able to see the difference... hopefully we can get back this on track if @mrDyos is still looking for this change. Sorry for taking long in replying.. Hi @celiagomezdev \ud83d\udc4b \nI'm sorry but once you change the model schema and run the app the cached data will be wiped out and you need to download it again. The reason DataStack does this is that it assumes that the source of truth lives in your backend and instead of having corrupted data it removes everything and expects to download everything from scratch. . You're welcome :) Just send me a DM on Twitter if I can help in anything else. https://twitter.com/3lvis. Thanks!. Hi @alijaza! I think we've got a similar request before. We don't have support for it out of the box. I think using predicates for this could be possible. \ud83e\udd14 . I'll think about this and get back to you :). Hi, I don't think this would be possible with predicates, using predicates we could avoid doing any changes to relationships but if you want to update them then I think we will have to add a new OperationOption https://github.com/3lvis/Sync/blob/master/Source/Sync/Sync.swift#L19-L30. @. @iballistic I'm afraid this might not be related, Sync uses CoreData's lightweight importing when you change your schema, if it's not possible to auto-migrate the data, it wipes out the entire dataset, CoreData's out-of-the-box solution here is to crash your app. Might be useful to verify that this is indeed a failure in the migration. If you come to this point then it was a failure in migration.\nhttps://github.com/3lvis/Sync/blob/master/Source/DataStack/DataStack.swift#L431. @iballistic Could you please make a new issue with the JSON and a picture of your schema? Thanks :). Work in progress branch to solve this: https://github.com/3lvis/Sync/pull/433. Gonna include a unit test so it's easier to contribute into completing this. Let me know if that's something you're interested in @alijaza :). Did a first go at this, should be working for one-to-many now.\nhttps://github.com/3lvis/Sync/pull/433\nswift\ndataStack.sync(updated, inEntityNamed: \"User\", operations: [.insert, .update, .delete, .insertRelationships, .updateRelationships], completion: nil). Hi! Try pointing to master in your Cartfile, I'll be making a Xcode 9/Swift 4 release later today.. Check Sync 4 https://github.com/3lvis/Sync/releases/tag/4.0.0. @Baza207 Thanks James! I'll make the change now.. Hi @jassimkm, this update has been available for some time :)\nhttps://github.com/3lvis/Sync/releases/tag/4.0.0. Hi @sagargondaliya,\nThis has been mentioned before, when Sync gets new data it will try to diff the data that is getting with the local data, and removes the local elements that aren't found in your JSON, it does this because Sync tries to match what you have on your servers. If you want to stop this behaviour you need to use a predicate, a predicate basically tells Sync: \"Hey,  locally only Sync the elements that conform to this predicate\", so if you want to avoid local elements you could make a query where you get all the ids and tell Sync to avoid any element with those ids.\nLet me know if it's unclear and I'll try to clarify.. I believe using operations could solve your issue as well, of course assuming you don't want to remove records and do the removing part in a separate process.\nswift\n// This only inserts and updates, no deletions.\ndataStack.sync(usersB, inEntityNamed: \"EntityUser\", operations: [.insert, .update], completion: nil)\nI hope this helps, otherwise let me know and we'll figure it out.. Hi @MichalAlgor,\nDoes it work if you name your relationship racecar instead of car?\n {\n     \"id\": 7,\n     \"name\": \"Kimi Raikkonen\",\n     \"racecar\":{\n         \"id\": 31,\n         \"max_speed\": 370,\n     }\n }\n\n. Thanks for getting back to me. I'm not sure how we could make it work given the constraints. My only suggestion is that you perform some JSON pre-processing so it changes the key before calling Sync. If you have any other ideas let me know :).. Closing for now, waiting to hear back from @MichalAlgor.. Hi @mailforkumar,\nNot sure if this is a Sync related issue or a Core Data specific one. To see if I understood correctly. After filling your User with elements you want to replace all the elements where DeptId (a field in your model) are different from EmpId another field in your model? Maybe having an example of your JSON file and Core Data model could also help to give even more information.\nThanks!. Closing for now for lack of response, will reopen once we get more info.. Hola Alejandro, gracias por tu contribuci\u00f3n, intentare a\u00f1adir tests para que esto no vuelva a ocurrir. Que tengas buen d\u00eda :). https://github.com/3lvis/Sync/releases/tag/4.0.1 Shipped!. Hi! I wasn't able to reproduce the issue, could you check the code?\nhttps://github.com/3lvis/Sync/pull/432. Thanks for the extra info. I\u2019ll have a look. :). Hi pulled your changes into https://github.com/3lvis/Sync/pull/432. \nI think there is a misunderstanding and Sync is doing what it's supposed to. In your second JSON none of the first elements is present, meaning Sync believes it was removed from the database. If you want Sync to assume that the new elements are just meant to be inserted or updated and not deleted you can do the following:\nswift\ndataStack.sync(usersB, inEntityNamed: \"EntityUser\", operations: [.insert, .update], completion: nil)\nI updated the test to show what this does.. @aamir-nazir Need to get the other operations in place, I'm happy to receive some help :). @aamir-nazir Added you as a collaborator https://github.com/3lvis/Sync/invitations\nI think a good place to start would be to understand the unit tests added in this PR and add more unit tests for the remaining cases. Right now we only have tests for one-to-many\n\n[ ] Many-to-many\n[ ] One-to-one\n\n. @aamir-nazir For Many-to-many and One-to-one I've added a JSON and a Core Data model but the unit tests were just copied from One-to-many, so we still need tests for many-to-many and one-to-one. Thanks for your help!\n. I agree @batjo! Is better to get it out and get feedback as well. Thanks for your help!. Hi! Found the same problem here:\nhttps://github.com/magicalpanda/MagicalRecord/issues/461\nCan you try upgrading to the latest version of Sync and wiping derived data and simulator data?\nI think the problem is related to dropping the database, we rolled back the method that we were using on Sync 3.3.1, so I hope you don't get the same warning again.. Hi @dneykov,\nSadly, I'm not able to reproduce your issue. \ud83d\ude15 . I'm not sure how I would be able to help here, this seems like a Core Data related issue more than anything. Sorry for not being more helpful. . I wonder what the problem is, I haven't been able to reproduce this myself. Fixed, thanks @altyus!. Hi @Lailan \nCould you share a screenshot of your Core Data model as well?. Hi @Lailan,\nClosing until we get more info :) Hopefully the issue was resolved.. I was able to reproduce your issue, I'll see what I can do.\nhttps://github.com/3lvis/Sync/pull/446. There you go, I hope it helps!\nhttps://github.com/3lvis/Sync/pull/441\nBasically two changes were required to the Core Data model.\n\n\nclientID \nNeeds sync.isPrimaryKey equal to yes\n\n\nid\nNeeds sync.remoteKey equal to _id. Added demo project including Alamofire, I hope it helps :)\n\n\nhttps://github.com/3lvis/Sync/tree/master/iOSDemo . Nice catch!. >Btw I just became a Patreon, thanks for your open source libraries, they are awesome!\nWoah! Thanks for your support Bart :). You're awesome \ud83c\udf39.. Hi Bart,\nThe issue here was that since your website can have many tags and this tag can have many websites then there should be a many-to-many relationship. After updating to this model the tests pass again.. A website has many recent tags.\nA (recent) tag has many websites.\n\n. Hi @batjo,\nI remember this issue has to do with diffing and the fact that in order to syncronize tags between multiple tables then we need to use many-to-many, if we use many-to-one, when diffing the best way to ensure that we are only deleting tags that you want to delete is if we make an exclusive tag for the relationship, otherwise we might end up deleting tags that you are using in other places or we might end up not deleting tags at all.. But I guess in your case if you don't include a tag inside \"recent_tags\" then we are supposed to delete it? Or what was your logic for diffing in this case?. Reopening until we find a good alternative.. Tests pass now :). Modified the query and seems to be working. I wonder what was the issue. https://github.com/3lvis/Sync/pull/455/commits/5c93bf01082aace2a1cf0c79ad4e97276eb9e9d3. Closing for now until we get more feedback.. For the inboxTotalCount Core Data attribute, Sync will look for inbox_total_count or inboxTotalCount in your JSON but you only have inbox_totalCount. To enable Sync to work with this case you need to be explicit about the used remoteKey. So, adding sync.remoteKey equal to inbox_totalCount as well as sync.isPrimaryKey to your User Info should do the job.. Hi @max-pfeiffer, \nThanks a lot for adding a unit test for this issue, makes it a lot easier to follow up, let me give it a try and I'll see what we can do.\n. Hi @kikanny,\nFirst of all, sorry for taking so long to reply. Could you help me out with a way to reproduce this so I can add a unit test?. If I understood correctly, it means that the index of the element coming from the server is after the element located in the database?. I'm sure this is still an issue sadly I haven't been working much with sorted relationships, I usually use unsorted relationships then sort using NSFetchResultsController and NSSortDescriptors.. Hi Brahim,\nIf your Core Data model is located inside your framework you need to do this.\nswift\nlet frameworkBundle = Bundle(identifier: \"com.framework.identifier\")!\nself.dataStack = DataStack(modelName: \"NameOfTheModel\", bundle: frameworkBundle, storeType: .sqLite). I updated the iOSDemo to use DataStack instead of persistency container: https://github.com/3lvis/Sync/blob/master/iOSDemo/Library/Fetchers/Fetcher.swift. >do I have to use dataStack? and if I do! will I have to use it for all communication with my model?\nlike adding, updating, deleting and fetching from my model will go through it ?\nYou don't have to but is better if you do, DataStack is an abstraction over Core Data's boilerplate.. >mainContext and viewContext are the same, it's just a convenience name.. >I get a list of [User] with length of 2 as I inserted (my json from server has two users in it) but when I try to access to any property (i.e id or name) i get nil even\nCould you share a sample of your implementation so I can check the issues?. That's correct they should be either snake_case or the same as your Core Data model.\nExample:\nCore Data field: userID\nJSON: user_id or userID. Let me know if this was resolved so we can close this issue, otherwise I'm happy to help :). That's correct but there are two exceptions: reserved attributes and acronyms.\nI'm pasting the section about attribute mapping from the README here.\nAttribute Mapping\nYour attributes should match their JSON counterparts in camelCase notation instead of snake_case. For example first_name in the JSON maps to firstName in Core Data and address in the JSON maps to address in Core Data.\nThere are some exception to this rule:\n\nReserved attributes should be prefixed with the entityName (type becomes userType, description becomes userDescription and so on). In the JSON they don't need to change, you can keep type and description for example. A full list of reserved attributes can be found here\nAttributes with acronyms will be normalized (id, pdf, url, png, jpg, uri, json, xml). For example user_id will be mapped to userID and so on. You can find the entire list of supported acronyms here.\n\nIf you want to map your Core Data attribute with a JSON attribute that has different naming, you can do by adding sync.remoteKey in the user info box with the value you want to map.\n. @zhihuilong firstName to firstName should just work.. I need to update the documentation to point this out but now we support snake_case and camelCase in the JSON.. After modifying the query seems to be working fine, I didn't do any logic changes in Sync.. Hi @max-pfeiffer,\nLooking forward to getting your feedback on this.. Thanks for the additional info, @max-pfeiffer!. Hi! You can set both. sync.isPrimaryKey and sync.remoteKey . I think I see what\u2019s going on now. Could you share with me your JSON and Core Data model, please?. Closing for now, will reopen once we get more information.. Hi James,\nI think I understand what you mean, having an example of your JSON and Core Data model would help me a lot.\nThis is what I understood so far.\nStep 1: Add category with ID 1\nswift\nlet category = //... new category with ID 1\ntry! dataStack.mainContext.save()\nStep 2: Sync subcategories of category with ID 1\njson\n[\n  {\n    \"id\": 100,\n    \"category_id\": 1\n  },\n  {\n    \"id\": 101,\n    \"category_id\": 1\n  },\n]\nswift\ndataStack.sync(json, inEntityNamed: \"Subcategory\", parent: category1....\nStep 3: Sync product with subcategory\njson\n[\n  {\n    \"id\": 900,\n    \"subcategory\": {\n      \"id\": 100\n    }\n  }\n]\nswift\ndataStack.sync(json, inEntityNamed: \"Product\"...\nThen if you do, product.subcategory.category it gives nil instead of giving the category with the ID 1.\nIs this correct?. Hi @jimijon,\nHaven't had the chance to look into it yet but would be helpful to get a unit test that reflects the issue. \n. Hi @jimijon,\nI can't seem to find it, could you share the link?\nhttps://github.com/jimijon/Sync/branches/all. Thanks for taking the time to write a test, @jimijon!. I can confirm the bug, the relationship should only be removed when sending\njson\ncategory: {}\nor \njson\ncategory: null\nTracing back changes to https://github.com/3lvis/Sync/pull/324\nand https://github.com/3lvis/Sync/issues/320. \ud83d\udd25 \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f \ud83d\udd25 . ## Deep mapping\njson\n{\n  \"id\": 1,\n  \"name\": \"John Monad\",\n  \"company\": {\n    \"name\": \"IKEA\"\n  }\n}\nIn this example, if you want to avoid creating a Core Data entity for the company, you could map straight to the company's name. By adding this to the User Info of your companyName field:\nsync.remoteKey = company.name\nhttps://github.com/3lvis/Sync/blob/d8e7f24664e82b166585206fcf84919b0f0eb171/docs/PropertyMapper.md#deep-mapping. I hope it works out, otherwise I'll reopen this issue :). Hi @aalikhokhar,\nI'm not sure what could be failing, would it be possible to get a unit test or a sample project reproducing the error? Would be of great help. Thanks in advance.. I see :), closing this then.. Hi @aamir-nazir,\nSadly at the moment the .insert, .update will only work for the users, the products will do all three operations: insert, update and delete. I saw your comment on #433, I think that would solve your problem but I haven't had time to wrap it up. \n. Could you try that branch and see if it fixes your issue?. Nice to hear that you got this fixed, Daniel. Happy new year!. Hi Frank,\nThanks for this fix, I believe what you share is correct, doesn't really make much sense to use the managedObjectContext when provided by a parameter. The reason was that the context as a parameter was introduced later to fix a different issue and pass it down to one of the methods called inside this method, since at the moment I didn't find any use cases that required the change I didn't do it.\nNow, I agree that your change makes more sense and I see that all the tests work fine but I would like to reproduce the crash to make sure we don't break it again in the future. Is there any chance you could help me reproduce the issue with a unit test?. Hi!\nI've never seen this before. Would you mind sharing the JSON and Core Data model that is causing this issue?. Closing for lack of activity.. Hi @ewstrand,\nI'm not sure I understand could you share a code example?. @ewstrand thanks for your contribution!\nhttps://github.com/3lvis/Sync/pull/472. Looks good @batjo! Thanks for taking the time to look into this.. I guess we'll see if anyone finds any regressions, I agree with the changes you've done but we never know until people have tried.. Hi @siempay,\nWe don't have support for that or have considered until now. . Hi @siempay,\nAs I understand, in your JSON you have id and in Core Data you have customID?\nOr could you help me understand what's your JSON primary key and your Core Data primary key? . Does this work?\nCore Data:\ncustomID (sync.isPrimaryKey: YES) (sync.remoteKey: id). Perfect! Let me know if I can help with anything else :). Hi @kaszap82,\nCould you try adding\nimport Sync in the top of your project?. what about\nimport Sync.NSEntityDescription_PrimaryKey at the top of the file?. I'm glad you got it working and sorry for breaking so much of your code!. Hi @achirkof,\nThanks for reporting this issue :), the little app to reproduce the bug was really helpful. \ud83d\udc4f  \nFix incoming \ud83d\udc1e \nhttps://github.com/3lvis/Sync/pull/477. @achirkof The fix is not released yet, need to make a new release :). I'm thinking this bug probably applies for many to many as well since the predicate is \"ANY %K IN %@\" but that could be solved in a separate PR.\nhttps://github.com/3lvis/Sync/blob/87cfe00cc93b758431a205991a7044915d2d3169/Source/Sync/NSManagedObject%2BSync.swift#L310-L317. Hi @rajtharan-g,\nSadly I haven't got the time for it but check the DateParser class (and tests), so you can add a fix for it. https://github.com/3lvis/Sync/tree/master/Source/DateParser\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Nice catch \ud83d\udc4f . Nice catch, @joeboyscout04! . Hi @iOSUser110,\nWould you mind sharing an example of your JSON as well as your Core Data model?. Sadly, this is all hidden behind Core Data's magic. But you can log what changes are done by Core Data following these steps: https://github.com/3lvis/Sync/blob/master/docs/faq.md#logging-changes. Closing for now, let me know if this is still an issue.. Hi @Drenov, I think this is because of the way you've setup the Core Data Delete Rules, could you verify if changing the Delete Rule to \"Nullify\" helps?\n\nMore info on deletion rules here: https://cocoacasts.com/core-data-relationships-and-delete-rules. I'm glad you were able to fix this issue @Drenov, let me know if I can help in anything else :). Hi @joeboyscout04,\nSorry for not being so active, I think there's an unused method. Could you verify please? Besides that this is looking good, thanks for your help!. \ud83d\udc4f Thanks!. Hi @Sydney-o9! Good question and sorry for the late reply, I've been on vacations \ud83c\udfd6. I do remember we added some support for inheritance but as you mention it might not cover your case. Could you please make a unit test with a fork to see if I can add a fix for it? Thank you in advance.. I'm glad you got it working, @JupiterJones \u2764\ufe0f . Let me know if I can help with anything else.. Continuing work in https://github.com/3lvis/Sync/pull/519. Hi @jimijon this is very strange. Maybe you can try after adding the new sync operations.\nswift\nSync.changes(data[\"resource\"] as! [[String : AnyObject]],\n             inEntityNamed: \"Product\",\n             dataStack: appDelegate.dataStack!,\n             operations: [.insert, .update, .insertRelationships, .updateRelationships]) {\n                error in\n                //......\n    }. Fixed in https://github.com/3lvis/Sync/pull/494\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi @joshxplor,\nCan you help us reproducing the issue by adding a unit test or sharing your Core Data model?. Fixed in the latest version, sorry for the delay :)\nhttps://github.com/3lvis/Sync/releases/tag/4.1.3. That is quite strange, might be some derived data or CocoaPods caching issue.. Works fine for me, did a fresh install and everything seems to be working.\nhttps://github.com/3lvis/Sync/pull/529. Hi @pgawlowski,\nCan you help me with a unit test? Thanks for your time :). Send me a sample JSON, I can set up the rest of the test :). I'm glad you found the problem \ud83d\udc4f . Thanks for reporting \ud83e\udd26\u200d\u2642\ufe0f! . I can see how that should have been a breaking change. My bad.. I rolled back the extended operations. I know it's a bit late but I think it's the right thing to do. If you update to 4.3.0 you'll get the same functionality as before 4.1.0 plus all the bug fixes that happened after this.\nIf you want the new functionality you'll have to jump to 5.0.0.\nRelease notes for 4.3.0\nhttps://github.com/3lvis/Sync/releases/tag/4.3.0\nRelease notes for 5.0.0\nhttps://github.com/3lvis/Sync/releases/tag/5.0.0\nI'm sorry for the issues that this caused if there's anything else I can help with just let me know :)\nAnd thanks for using Sync!. Closing for now, let me know if this is still an issue.\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi @BrenoVin,\nShould be completely compatible. :) I can see how using Sync in your project would provide a battle tested, unit tested solution and you'll get to remove a bunch of code :). Closing for now, let me know if this is still an issue.. This is another alternative to solve performance issues. https://github.com/3lvis/performance. Difficult part here is that we don't handle notifications that's done by Core Data, if you have any other suggestions I'll be happy to look at it. <3. The problem with not saving is the relationships, you saw how the tests break when you stop saving.... The main challenge right now with not merging is many-to-many. If you don't merge when you get to the many-to-many operation then Sync doesn't know about the new relationships so it doesn't work. In theory we could potentially see if there's a many-to-many operation involved and if not then avoid merging until the very end.. Hi @montechristof,\nMight be good if you could isolate the case so I can see what's happening. You could fork this project and try to reproduce the issue in the unit tests then I could have a look :). \ud83d\udc4f . Hi! That's how the console prints arrays, if you want a prettier version use:\nswift\nprint(String(data: try! JSONSerialization.data(withJSONObject: dict, options: .prettyPrinted), encoding: .utf8)!)\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi @Arvoreniad,\nSorry for the realllllyyyy long wait, but yes, I think this is something we could actually do, I'll close the PR for now if you are still interested on it, I'll be happy to revisit.. Hi! Can you share your Core Data model as well?. Closing for now, let me know if this is still an issue.\n. Hi @petkrein!\nWhat's a good question, I haven't got around thinking how it could work. Right now Core Data makes it very easy since I can inspect the objects and attributes using the Core Data model. In order to make it work with Decodable I would have to generate somehow a relationship model to be able to do the Sync. If you have any ideas on how to do this I would be happy to collaborate on it. :). Closing since this isn't part of the roadmap at the moment, but thanks for your feedback @petkrein! Happy to help in anything else.. Thanks, @rajtharan-g!. I believe this was fixed as in 4.2.0: https://github.com/3lvis/Sync/releases/tag/4.2.0. Should be working now https://github.com/3lvis/Sync/pull/511. :). Thanks for your patience and let me know how it goes \ud83d\udd25 . Hi Alberto!\nIt works fine in the unit tests so there might be something different in your scenario. Could you check the unit tests added in https://github.com/3lvis/Sync/pull/511/files or if possible, isolate your issue in a unit test so I can find what the problem is?. What about Xcode 9.4?. I wonder what could be wrong seeing as all my tests are passing fine. \ud83e\udd14 . Closing for lack of feedback.. Hi @saraseif!\nMy recommendation is never do calls from the main thread. Another recommendation is: use NSFetchedResultsController when possible. I've got a nice wrapper that should simplify things. https://github.com/3lvis/datasource\nLet me know if I can clarify anything and have a great day! :). Closing since the issue appears to be resolved.. Hi @mariusschoenefeld,\nMy guess is that the primary key hasn't been configured properly. Check the PrimaryKey section on the README for more information: https://github.com/3lvis/Sync#primary-key\nLet me know if this doesn't solve your problem and I'll dig into it.\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi @arrchhy! Looks like your issue was different than the remote key. Could you expand a bit so I can add it to the README?\nThanks \ud83d\ude4f \n\nLike Sync? Don't forget to support this and other projects in Patreon!. I see! I'm glad you got it working. Have an epic weekend \ud83c\udf89\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi!\nSadly not, you would have to preprocess the JSON so the key is static. You could also save the entire responses as data then convert it into a dictionary.. Closing since this feature at the moment doesn't form part of Sync's plans.. Hi @arasu01,\nIt's most likely a naming issue. I'll see if I can find some time to reproduce this but you might want to check the README for how to handle camel case vs snake case especially when using Id, ID, or id.. Closing this since the issue is quite old.. Please let me know if the issue persists and I'll reopen this.. Hi @himu243! To get some inside in how Sync works you can refer to the following guide: https://github.com/3lvis/Sync/blob/master/docs/how-it-works.md\nBasically, what is happening is that Sync compares your JSON against your Core Data items, then it makes a diff and deletes, inserts and updates the relevant items. In your case the new JSON is comparing your items from the first page, since they are different it replaces them. \nOne way to fix this is to use a predicate with Sync, when you call the method you can say: \"Only compare the JSON with items with id: 1, 2, 3, 4, 5 and so on\".\nIn order to do this before calling Sync you can make a query to get all the IDs then in your Sync predicate you can say: \"id in %@, array\" for example. I hope this makes sense otherwise let me know and I'll try to expand.\nHave a nice day!\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Closing for lack of feedback.. Missing unit test before merging.. Closing since it was implemented here: https://github.com/3lvis/Sync/pull/544. Hi! I think the issue could be related that now there's\nswift\n[.insert, .update, .delete, .insertRelationships, .updateRelationships, .deleteRelationships]\nSo if you want the relationships to update you need to add \nswift\n[.insert, .update, .insertRelationships, .updateRelationships]\nThis was added in October 2017, not sure if that could be the cause of your issues but let me know if it helps.\nAdded here: https://github.com/3lvis/Sync/pull/433. Closing for lack of feedback.. @bilics We don't have Objective-C support for that, but you can create a Swift extension for your class and have the Swift method there, then it will work fine :). Mmm, I don't know if any tutorials for this but..\nMyClass.m\n```objc\n// This header is autogenerated and it usually goes as \"MyProjectName-Swift.h\"\nimport \"MyProjectName-Swift.h\"\n\n(void)doSomethingInObjectiveC {\n    [self callSwiftMethod];\n}\n```\n\nMyClass.swift\n```swift\nimport Sync\nextension MyClass {  \n    func callSwiftMethod() {\n        // Use Swift\n    }\n}\n```\nLet me know if that helps.. @jimijon damn, I think I found the issue https://github.com/3lvis/Sync/pull/522. Hi James, I've made a new release please let me know if this fixes your issue.\nhttps://github.com/3lvis/Sync/releases/tag/4.2.1\nAlso in order to make the tests run in the CI I had to switch between caches folder and documents folder so might be better if you could use    FileManager.sqliteDirectoryURL.\nFix for CircleCI here: https://github.com/3lvis/Sync/pull/518/files. Yay!. Hi @himanshuNetsol!\nYes, you can! Check https://github.com/3lvis/Sync#json-exporting. \n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi! Could you please share your data model and your JSON so I can reproduce the issue?. Got your files! I'll look into it when I get some time :). Damn.. I'll try to set some time aside today to get to the bottom of this.. @himanshuNetsol From your model I can see two things, your relationship is called \"cakeOrder\" but is a to-many, should it be a to-one? Also you are using \"customerId\", \"storeLocationId\" and so on when Sync expects \"customerID\" and  \"storeLocationID\" for example. \"ID\" instead of \"Id\".. Changed orderId to just id and seems like it works https://github.com/3lvis/Sync/pull/525. \n. @fshbn Could you please make a separate issue with your JSON file and Core Data model to see if I can reproduce it?. @himanshuNetsol Hi, I'm having a hard time reproducing your issue, I'm going to need an isolated project so I can inspect the problem. Could you help me with that?. @himanshuNetsol that's good news!. \ud83c\udf89 . The fetch method is used only to fetch one item if you need to fetch all you need to do a fetch request, something like:\nswift\nguard let entity = NSEntityDescription.entity(forEntityName: entityName, in: context) else { abort() }\nlet fetchRequest = NSFetchRequest<ResultType>(entityName: entityName)\nlet objects = try context.fetch(fetchRequest). Closing for now, let me know if this is still an issue.\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Hi @crock!\nIt's working for me, I think cleaning and destroying DerivedData might be helpful.\nI made a CocoaPodsTest repo for you to check out:\nhttps://github.com/3lvis/Sync/pull/529\nLet me know if this helps and have a nice day! :). Closing for now, let me know if this is still an issue.\n\nLike Sync? Don't forget to support this and other projects in Patreon!. Sorry for not replying before Dennis, I hope you figure it out. . Hi @dneykov,\nWhen performance is an issue, I would advise you to try a solution closer to your problem instead of Sync, sadly Sync trades convenience for performance, I have tried to make it more performant but I think I have reached the point where more performance will come at the cost of maintenance.. Hi Daniel, I'm not sure, it really depends on your use case. . Closing for now, I wish I could be more helpful.. Thanks for reporting this @bonebox, the issue seems to be connected to https://github.com/3lvis/Sync/commit/8ee867884196a5dd38e2c512ff2e08639af01703. Hi @bonebox! Delivered a fix in master, let me know if it helps :). @bonebox Wasn't hard to add support for your other dates requirements so I just went for doing that :) https://github.com/3lvis/Sync/pull/536\n\nLike Sync? Don't forget to support this and other projects in Patreon! . @bonebox Shipped! https://github.com/3lvis/Sync/releases/tag/5.0.1. \ud83d\ude01 . Haven't downloaded the new Xcode yet . Released! https://github.com/3lvis/Sync/releases/tag/5.1.0. Hi @siempay,\nMight be a strange key or a recursive export call. Can you share an image of your core data model?. Hi @siempay!\nI can't think of a scenario that would be causing this from the top of my head. Any pointers on what can I do to reproduce the issue?. Hi @siempay!\n is what Core Data uses instead of the full object, it's used for optimization purposes, you can read more about faults here: https://cocoacasts.com/reading-and-updating-managed-objects-with-core-data\nWhen using po you need to do po self.willAccessValue(forKey: nil) so it converts from  to data, then we will be able to find the issue. I think the best is for us to figure out first if this isn't a data issue and would be nice to get a po of the full object if you could do that.\nI believe the error has to do with either Core Data trying to access a deleted relationship, so in your JSON in one entry the relationship is deleted and in other entry the relationship is trying to be read. This can be solved by changing your relationships from \"one-to-many\" to \"many-to-many\" a lot of times when we are building our models we would make assumptions that are different in the backend and that could cause this issue. Changing from \"one-to-many\" to \"many-to-many\" (or the other way) changes the policy for deleting relationships.\nMy other theory is that there's some data corruption happening that is causing Core Data to fail, we'll only resolve this by seeing the full object. \nI hope this helps even a bit, these things are a bit hard to explain on written so if anything is not clear please let me know and I'll try to explain a bit more.. I haven't had a similar report and it's very strange that sometimes happens and sometimes not. Sorry for not being more helpful but without being able to reproduce it's very little I can do besides speculating on what could be the issue.. Hi! Yes, had a look and it could be a problem. It's better if you run export on an object retreieved from the main context.. Hi @KaiqueDamato, \nIs there any chance you could help me to isolate the issue? Maybe with a JSON file and a Core Data model?. Thanks @philip-zhan !. Hi! Sync uses (NS)Operations, so if you make an OperationQueue and add sync to it then you can cancel it at any point.. I'll see if I can add some docs later, but here are you see Sync is a subclass of Operation: https://github.com/3lvis/Sync/blob/b51324ec8368066624c603c98e63cb417b2bccf5/Source/Sync/Sync.swift#L17. Hi Zoltan,\nYou're right, error handling wasn't 100% finished, I'm using try and throws as much as possible but for the cases where this can't be used (closures and overriding methods) I haven't been able to find the time to complete error handling.\nI think we might need to introduce a delegate to the operation in order to inform what failed, or do you have another suggestion in how to inform about an error from inside an operation. :)\nBest. Double checked and this has been the same behaviour for long time now.. I think you're right, ideally, Sync should have been handling this type of cases but in practice, I guess most people using the library has backends that only return one instance per unique item so it hasn't been a problem before.. Hi @siempay,\nI guess you're referring to Sync, I haven't added export to DateParser.. I'll move this issue to Sync :D. Hi @siempay! \nIn the export method you can use the ExportOptions which has a dateFormatter inside.\npublic func export(using options: ExportOptions) -> [String: Any]\nYou can provide your own dateFormatter to get the format that you want.. Thanks Joe!. Hi!\nYes,\nswift\nvar exportOptions = ExportOptions()\nexportOptions.inflectionType = .camelCase\nLet me know if that works for you :). Would be very useful to improve the README with some of this information, the file where this is implemented is here https://github.com/3lvis/Sync/blob/master/Source/PropertyMapper/NSManagedObject%2BExport.swift. Ahhhhhh, I didn't understand correctly. it should just work for camelCase.. it dose work for attributes but not for relationships\nSeems like a bug or a missing feature, it should work for relationships as well.. Hi @markst,\nGreat initiative! Any chance you could add a unit test to make sure these changes don't get reverted by accident?\nThanks again :) . Regarding your question on making it an enum, it's beacause it should be possible to combine multiple options, like setting inflectionType, relationshipType, dateFormatting and so on. If it's an enum you can only do one.. Added the help-wanted flag, the feature works well just needs the unit tests.. @svrzii Core Data can be cryptic sometimes, I'm glad you got it working!. Hola @jahir8a!\nUn poco extra\u00f1o tu problema, en tu ejemplo estado es PrimaryKey de Servicio? O de frente estas pasando el array de Establecimientos a Sync?. Hola @jahir8a, perdona por no responder antes, las vacaciones me agarraron ocupado. Espero que hayas logrado solucionar tu problema.\nFeliz a\u00f1o!. Looks great, thanks @rlester \ud83d\udc4f . Hi @ltAldoRaine \nWhy is everything Binary Data? That doesn't seem right. \nYou might want to try doing something like\nsync_remoteKey: userID.value\nsync_remoteKey: nickname.value\nAnd make things Strings or numbers depending on the value\nAnd so on. Looking good @rlester, thanks for your contribution \ud83d\udd25 \n. Thanks @Kemmey!. Thanks @petkrein!. You might want to use isEqualToString instead of ==\n. Do you mind using modules across your app?\n@import UIKit; instead of #import <UIKit/UIKit.h>\nDo a global search for #import\n. Might be better to use https://news.layervault.com/?format=json\nSo we also show comments if we want\n. objc\n- (void)fetchStoriesUsingDataStack:(DATAStack *)dataStack;\nMight be better naming\n. Can you use com.example. as CFBundleIdentifier instead of com.ramongilabert?\n. Please drop the code attribution on this file.\n. Please drop the code attribution on this file.\n. strong in @properties is default and would be better if you remove them :)\n. All this setup could be moved to the custom cell DesignerNewsTableViewCell\nAlso this cell could have a method \nobjc\n- (void)updateWithStory:(Story *)story;\nSo you can update the UI of the cell\n. Please drop the attribution comments.\n. Please drop the attribution comments.\n. The bundle identifier can be something more generic like com.example\n. Can you update to CocoaPods 0.36? We've been using that :)\n. Here you could do \nobjc\nNSString *relationshipName = (relationshipKey) ?: relationship.name;\n. I like how now you add tests for everything :heart: \n. Check http://jsonformatter.curiousconcept.com/ for a JSON prettifier\nThe difference is subtle but it helps :)\njson\n[\n  {\n    \"id\":10,\n    \"name\":\"Legen Dary\",\n    \"email\":\"melisawhite@ovium.com\",\n    \"created_at\":\"2014-02-14T00:00:00+00:00\",\n    \"updated_at\":\"2014-02-17T00:00:00+00:00\",\n    \"annotations\":[\n      {\n        \"id\":30\n      },\n      {\n        \"id\":50\n      },\n      {\n        \"id\":70\n      }\n    ]\n  }\n]\n. You might want to remove the test targets since you're not adding tests\n. Remove the logs, please\n. Are you even using the storyboard?\n. Are you supporting landscape? If not might be better to remove this options\n. Is this the correct syntax? @kostiakoval \n. Mind adding an space after URL:\n. Create a new queue otherwise it will block the main thread\n. Notifications are awful, can you use a completion block?\n. The order of methods is:\n- Initalizers\n- Getters\n- Setters\n- View lifecycle\n- Public methods\n- Private methods\n. Remove commented code\n. He changed it for an else\n. @kostiakoval @zenangst  let SyncCustomPrimaryKey = \"hyper.isPrimaryKey\"\nDo we need to keep the Sync prefix here? Or we can drop that now\n. @kostiakoval I don't know, the main difference with using self for properties is that you are forced to use self. in some cases, meanwhile I think self. for methods is completely optional.\n. Do you guys have any use case where you are forced to do self.methodName() ?\n. Mind sharing an example?\n. Using self everywhere would mean that you don't even face this problem, right?\n. HehehehehehehHehehehehehehHehehehehehehHehehehehehehHeheheheheheh\n. Was this needed?\n. I think we can drop the prefix now \nsync_\n. if let O_O\ncrazy\n. Can this just be userInfo = attributedDescription.userInfo,?\n. Beautiful\n. I think we can drop the prefix now \nsync_\n. I think we can drop the prefix now \nsync_\n. I guess it makes sense, it's declared as AnyObject\n. The plan was to use it but I guess something got lost there\n. Nevermind, I saw what happens with 0. Updated the sample code on develop\n. @markvaldy I don't if it has something do to with this but for what is worth DATAStack could be nil if your modelName is not found\n. That could be a problem. We should have one test where DATAStack is nil, just in case.\nWould you like to add that?\n. Oh, that's correct\n. This colon at the end makes it invalid JSON, would you mind removing it?\n. Changed the IDs so it's more readable when debugging.\n. @kostiakoval Just to prove that this fixes the issue, this isn't the real solution.\n. What's this for?\n. The problem was here, this works only if the parent entity has one child in a many-to-many. If it has more than one it does\nremoteID == {2, 3} Which doesn't work since the == doesn't work with collections.\nDoing ANY remoteID IN {2, 3} works perfectly for this.\n. @vadymmarkov I don't know, Xcode didn't said anything, also I think you would need that if the method looked like this:\nswift\nfunc fetchNewData() {\n  self.fetchItems { _ in\n    self.fetchCurrentObjects()\n  }\n}\nI might be wrong.\n. Could you remove this whitespaces?\n. Could you remove this whitespaces?\n. Could you remove this whitespaces?\n. Also, please remove the commented code.\n. Could you remove this logs?\n. Please remove this comment too.\n. Good question, uncomment when this test passes\nhttps://github.com/hyperoslo/Sync/blob/1.3.0/Tests/SyncTests.m#L258-L310\n. I don't know if we prefer guard let in 1 line. Is just what I've been doing so far and is consistent with the rest of the project.\nI prefer simple formatting rules, and just having everything in one line and letting Xcode handle the wrapping sounds fairly good to me.\nAlso I have a 27-inch screen :D\n. I think it reads better too, but I can't stand Xcode's formatting of this.\nThey do\nswift\nif let predicate = predicate as? NSComparisonPredicate, selfArray = self as? [[String : AnyObject]]\n  where validClasses.contains({ $0 == predicate.rightExpression.classForCoder }) {\nInstead of\nswift\n// let and where are aligned\nif let predicate = predicate as? NSComparisonPredicate, selfArray = self as? [[String : AnyObject]]\n   where validClasses.contains({ $0 == predicate.rightExpression.classForCoder }) {\nThat's why I prefer to have it in one line, so I don't have to smash my head agains my desk.\nAlso, I really don't agree in using where with things that haven't been declared in the same sentence, but isn't really critical.\nPreferred:\nswift\nif let firstChild = childs.first as? Magician where firstChild.magicType == .Dark {\nNot preferred:\nswift\nif let firstChild = childs.first as? Magician where castleIsOnFire {\n. I'm going to go with keeping it in one line. I've tried splitting it in two lines but it really doesn't help with Swift's formatting, for me it makes it harder to maintain the code. I might reconsider it in the future, but for now I'm going to keep it this way.\n. Here right now we're getting 2 instead of one.. The reason that this is happening is because when Sync starts looking for the second player, it doesn't find it, so it creates a new one.\nThe reason why it doesn't find it is that there are two reasons:\n1.- In the DATAFilter it uses an inverse predicate, so it asks for a player that has a player group, and the already inserted player doesn't have a group.\n2.- The DATAFilter fetch doesn't return a result, even if the predicate was nil, because the fetch needs that the relationship is saved first.. Doesn't seem like this method is used. \ud83e\udd14 . ",
    "kostiakoval": "@NSElvis  It seams like not.\nYou are using  relationship.name as Entity name. so if I name my relationship \nbigNumber instead of number it wont parse it, because it will look for Entity Bignumber\n- (void)sync_processToOneRelationship:(NSRelationshipDescription *)relationship\n                      usingDictionary:(NSDictionary *)objectDict\n{\n    NSString *entityName = [relationship.name capitalizedString];\n    NSManagedObject *object = [Sync safeObjectInContext:self.managedObjectContext\n                                             entityName:entityName\n                                               remoteID:[filteredObjectDict andy_valueForKey:@\"id\"]];\n  ...\n}\n. @NSElvis  but this one was changed in lat PR, so it's not valid anymore. \nJust close this one\n. unit -> maps properly to OrganizationUnit now\n\n. yes like that + parents, similar to children\njson\n{\n  \"id\":0,\n  \"name\":\"Parent name 0\",\n  \"children\":[\n    {\n      \"id\":1,\n      \"name\":\"Child name 0\"\n    },\n    {\n      \"id\":2,\n      \"name\":\"Child name 1\"\n    }\n  ],\n  \"parents\": [\n    {\n      \"id\":3,\n      \"name\":\"Mom\"\n    },\n    {\n      \"id\":4,\n      \"name\":\"Dad\"\n    }\n  ]\n}\n. I mean it's always nice to give declarative names for properties like parents, children, etc not just it should be the same as Entity name\n. This one should be working now with latest fix\n. I would prefer to ass test maybe for that?\n- This is exactly what last RP was. :) Im :drunk:\n. It was hard to describe that problem :(\n. :+1: \n. :smile_cat:  I did it.\nto test. just revert last change it Sync \n\nif (parent && relationship.destinationEntity.name == parent.entity.name) {\nif (parent) {\n\nAnd it will crash in test\n@NSElvis \n. I was thinking it would work without test. hehe I will add\n. Done. If you disable my fix, the test will crash. Why -> \nthe name for the relationship in no the same as entityName: \n\"parent\" -> type of Collection\n\n@NSElvis \n. Could you also update Sync.podspec to use DATAStakc 3,0\n.  failed: caught \"NSInvalidArgumentException\", \"-[NSRelationshipDescription attributeValueClassName]: unrecognized selector sent to instance 0x7bf662c0\"\n[\u2014\u2014\u2014\u2014 REMOVED PRIVATE INFORMATION\u2014\u2014\u2014\u2014 ]\n. @RamonGilabert\nwhen you use property getters, they are evaluated every time. It means it will create new DataStack every time. when you use lazy, it's created only once, when you access it first time.\nThis is about my last commit\n. you should use latest beta Xcode with Swift 1.2\n. Yes, but for me project don't compile in Swift 1.2 and I think it's better to use newest Swift version.\n. This would give huge buff!!  Great idea!\n. @3lvis no it wont. struct are not visible to objc \n. you have to mark it with @objc annotation or subclass NSObject.\nhere is list of no available stuff in objc from swift.\nhttps://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_87\n. you can mark class, protocol or function. This is what meant by word 'piece'\n. :D \n. :heart_eyes: @zenangst \n. @zenangst  just the one that's gonna be exposed to Objective-C? \nand you can add prefix in them \nlike @objc(HYP) Mapper -> would be HYPMapper in objc \n. @RamonGilabert Yes!!  +1 from me\n. I agree with that example.\nOther example I wouldn't rename is fetchInContext:(...) when it's name of the function\n. don't use NSObject in Swift if you don't need it!\nyou can make it as an global function if you need\n. just remove it :)\n. Yes I also was thinking about it\n. How about this one? @hyperoslo/ios @3lvis We need it in our project. \n. and if you would like to find all people in company? In my model it is very easy.\nIf you would like to add projects and assign people to projects ? Wound it be \nCompany ->> Department ->> Projects ->> Employee\nThis was you would need to change existing model and code (Departments and  Employee)\n. do you need yo store it as a property, or just local var would be enough?\n. example in Swift use Objc class? Why?\n. if error != nil {\n. use let everywhere possible. Always, Always 1000% start with let. Forget about var exist :)\nand when you need mutable variable then you make it var \n. don't use self. on accessing variables. \nreturn arrayWithData.count\n. don't use NSArray, use Swift Array\n. Swift Array wouldn't require casting with as\n. no self on calling methods as well\n. guess what's wrong here var networking = Networking(dataStack: self.dataStack) :)\n. I was only working on the ViewController part. haven't look on the networking. \n if error != nil { ... use this style\n. Good one! @3lvis  :+1: \n. Great lib for that called Async\nhttps://github.com/duemunk/Async\n. networking will be deallocated when you leave this method, save it to instance property.\n. don't need this method tableView.registerClass if you use storyboards.\nif you use ... :) \n. you removed this yearly return statement. didn't it have any impact on functionality?\n. if let userInfo = attributedDescription.userInfo  - Skip type when possible\n- use 1 if let a = a, b = b, c  = c {\n  }\n. we can drop it. Swift adds hidden Module prefix.\nyou can access it by: \nSync.SyncCustomPrimaryKey or just SyncCustomPrimaryKey\nbut it you need and extra namespace inside your module you can make a struct and put keys there \nswift\nstruct Keys {\nlet CustomPrimaryKey\n...\n}\n. Do we use self. for methods calls :scream: \nIf no I have fixed version. I can commit it :)\n. What is those [ ] braces for here? \n.  @3lvis @zenangst how about this one? \n. when capturing self in closure.\nthe same as for properties.\n. ``` swift\nclass A {\nfunc testA(x: Int) -> Int {\n    return x + 1\n  }\nfunc other() {\nvar arr = [1,2,3,4]\narr.map {\n  self.testA($0)\n}\n\n}\n}\n``\n. must useself.testA. Swift has the same problem with strong reference capturing cycle. \nAnd not using self (everywhere except closures) helps to spot it.\n. For usingself.` with properties I agree with your point (show that life-time is longer than a function)\nbut for function calls this don't apply\n. > Using self everywhere would mean that you don't even face this problem \nwhat do you mean?\nUsing self everywhere don't solve the strong reference cycle problem. \nIt makes it explicit. you reference self, it's up to use to handle it (nut no one handled it usually)\n. Why do you specify (error) -> Void ? remove it\n. at least remove -> void \n. hardcoded parentUnit in Sync ?\n. it fails here, 4 object instead of 2. (wit the same ID)\n. Ups, forgot to remove it :) \n. can you use entityvariable instead of making currenthere. It's the same right?\n. It took me some time to understand this code. maybe it would be smart to add some comment or making a method for it ?\n. You don't need it. Here is why\n- Cerate self ( referenceCount = 1)\n- Closure capture self (+ 1 to referenceCount, = 2)\n- Closure finishes executing and being deallocated, it's not saved anywhere (- 1 to referenceCount, = 1)\nYou need to say unowned if you don't  store the closure in the proper\nhttps://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-ID56\nYou need it if you save closure that captures self to the property\nself.worker = { self.name .... }\n. ",
    "RamonGilabert": "Nice! All is well! :smile: \n. Nice, so I left the comment thing to talk about here, the rest is fixed! Easy stuff! :smiley_cat:\n. Oh thank's :smile_cat: You're awesome!\n. You're right about the refactoring you did! :)\n. Jajajaja or Travis slow! \ud83d\ude1c\n. Oh, I fixed that... I'll try it again... :/\n. Fixed two problems, I guess @NSElvis that, if we fix the problem you put today in Property Mappers, then we could do it the other way, also, we could add a label with the author and the date into the comments, this was just a quick way to do it! :snail: \n. This was fixed here: #33 :dancers: \n. Right, here I am, but @NSElvis you deleted the issue to support custom keys!\n. Looks awesome!\n. This looks perfect already.\n. Nice! :smile: now, what do you think about changing the name from: sync.remote.key to mapper.remote.key?\n. Right, but then I would change it too in PropertyMapper\n. What about\nobjc\n+ (void)changes:(NSArray *)changes\n   inEntityName:(NSString *)entityName\n      dataStack:(DATAStack *)dataStack\n     completion:(void (^)(NSError *error))completion\n. @3lvis I was thinking in adding just changes inEntity dataStack (or just stack) the user will see the placeholder saying, entityName so I think they'll know what to put.\n. All right, let me finish a small surprise and I'll go for it! :dancers: \n. I reverted, and then reverted again because I wanted to change the word test to the word Example! :|\n. Oh @kostiakoval nice, I didn't know how to do it! :)\n. @kostiakoval all is well! :) Oh I thought I was already using Swift 1.2! It has been in beta for a long time right?\n. @kostiakoval:\n2015-04-04 19:28:45.363 AppNet-Swift[14548:3178564] CoreData: warning: Unable to load class named 'Data' for entity 'Data'.  Class not found, using default NSManagedObject instead.\n2015-04-04 19:28:45.366 AppNet-Swift[14548:3178564] CoreData: warning: Unable to load class named 'User' for entity 'User'.  Class not found, using default NSManagedObject instead.\nfatal error: NSArray element failed to match the Swift Array Element type\n. Fixed! :)\n. I'll do it! :P I'll first write the app, send it to you, correct it, and then record it, if u want :)\n. @3lvis awesome :)\n. I added the categories, if you want to work on one and you cannot continue, then the other know where to start, anything else to add?\n. We said two spaces right?\n. I'm having a problem here, the: // Generated by Apple Swift version 1.2 (swiftlang-602.0.49.3 clang-clang-602.0.49) file says that the class is duplicated. Also, I cannot call the public methods in Sync to add the values.\n. @hyperoslo/ios I would drop the: inEntityName and inContext in Swift, I would use entityName: and context: What do you think? In the class methods\n. @zenangst we had:\n``` swift\nclass func process(#changes: [AnyObject],\n    inEntityNamed: String,\n    predicate: NSPredicate?,\n    parent: NSManagedObject?,\n    inContext: NSManagedObjectContext,\n    dataStack: DATAStack,\n    completion: (error: NSError) -> Void) {\n}\n```\nAnd my idea is to change the inEntityNamed and inContext to:\n``` swift\nclass func process(#changes: [AnyObject],\n    entityName: String,\n    predicate: NSPredicate?,\n    parent: NSManagedObject?,\n    context: NSManagedObjectContext,\n    dataStack: DATAStack,\n    completion: (error: NSError) -> Void) {\n}\n``\n. So I'm stuck here, I cannot call Sync.process() in the example, I think the other stuff is good already. Correct it if I'm wrong\n- [x] Refactor tests\n- [x] Rewrite categories into extensions\n  - [x] Rewrite sync\n  - [x] Rewrite NSManagedObject\n  - [x] Rewrite NSEntityDescription\n- [x] Migration of the Demos\n- [x] Update README with Swift support\n. Well, as the methods that use sync_ are used within the class, I think the compatibility would be fine!\n. Oh man, I love that! :P\n. Right, in the JSON you need which key it's going to contain your dictionary, so I guess the method would add a line:withKeyInJSON:` or something.\n. Right, so you want to show the comments of a story in a separate view?\n. I love them! :)\n. That was what Xcode suggested :/\n. It says: Ambiguous use of userInfo\n. I would stick with Void too\n. The compiler says, Ambiguous use of userInfo...\n. ",
    "jgorset": "Haha, oh no!\n. I WIN\n. That\u2026 that's true.\n. Coming from Ruby, I like how the old one reads like a sentence (or at least the first part of it). Maybe you could still do that with less verbosity, though.\n. Actually the first argument of the proposed syntax reads better (Sync changes [...]), but the second worse ([...] entityName).\n. So I'm totally bad at this, but what about\u2026\nobjective-c\n[Sync changes:notes as:@\"Notes\" ...]\n\u2026?\n. Hell, if DATAStack does what I think it does, what about\u2026\nobjective-c\n[Sync changes:notes as:@\"Notes\" on:self.dataStack ...]\n\u2026? Too crazy!?\n. So ahead of my time, you know. ;-)\n. I'd watch this!\n. Thanks @pra85!\n. ",
    "zenangst": "@jgorset pointed to master\n. It's not?\n. Oh... well... that's awkward.\n. \n. :star2: \n. @salimos for Travis?\n. @3lvis: @RamonGilabert will be the first guy out the door. We will compile a list of things to do in the initial description so that anyone can pick up the PR.\n. @3lvis I think we could add an Objective-C demo project and find out :+1: \n. @RamonGilabert correct! :)\n. @3lvis fixed now\n. @kostiakoval do we need the objective-c annotation on all classes or just the one that's gonna be exposed to Objective-C?\n. @3lvis because it's still running the Objective-C source? :sunglasses: \n. We had some discussions at the office today about that (and other things).\n@RamonGilabert could you share two examples? Before and after.\n. I think it looks good, @3lvis, @markvaldy thoughts?\n. @kostiakoval I meant the Sync(changes:, not having it live on NSObject :sunglasses: \n. Is dropping the prefix on Extensions a good idea? I guess it's the same debate as having them on Categories in Objective-C.\n. I think that only applies to classes, extensions don't have namespacing as far as I know. Also, how does this affect Objective-C compatibility? Maybe it doesn't and then I'm all for it :)\n\u2014\nSent from Mailbox\nOn Mon, Apr 13, 2015 at 7:21 AM, Elvis Nu\u00f1ez notifications@github.com\nwrote:\n\n@zenangst I think they are not needed now. I remember Mr @kostiakoval posting out that things get prefixed behind the scenes.\nSync.localKey\nMeanwhile in Objective-C land you'll have non-guaranteed results.\nReply to this email directly or view it on GitHub:\nhttps://github.com/hyperoslo/Sync/pull/50#issuecomment-92215390\n. Right, as long as they are not public it should be fine. You still have the issue with potential collision with Core Framework classes, but for me that is not as critical.\n\n\u2014\nSent from Mailbox\nOn Mon, Apr 13, 2015 at 7:48 AM, Ramon Gilabert notifications@github.com\nwrote:\n\nWell, as the methods that use sync_ are used within the class, I think the compatibility would be fine!\nReply to this email directly or view it on GitHub:\nhttps://github.com/hyperoslo/Sync/pull/50#issuecomment-92223708\n. @3lvis \n\n\nWorks like a charm!\n. @3lvis https://github.com/hyperoslo/Sync/commit/27be9ccf95891a340b2660d36addd4839dc70ea5\n. :star: \n. @bmnick some tests seem to be failing.\n. :star: \n. Always waiting for Travis! :cry: \n. Ohai @antonholmquist  waves :grin: \n. @3lvis \n\n. @kostiakoval agreed, I made this before updating Xcode yesterday.\n. Fixed\n. Do we prefer Void over ()? My vote is on Void, loads and loads of () can quickly become confusing.\nWhat do you guys think?\n. I would format this differently;\n``` swift\nSync.changes(json[\"data\"] as! Array, \n  inEntityNamed: \"Data\", \n  dataStack: self.dataStack, \n  completion: { error in\n}\n``\n.AppNetURLmight be better?\n. @kostiakoval I sent the-> Void` into the void.\n. Fixed in 9716643\n. @3lvis  Wouldn't this become tomorrow?\n. The change I made was intentional to improve readability. This works too but lines tend to get really long if you only allow one line.\n. Ref my previous comment\n. Oh snap!\n. I prefer to split the optional binding and the condition to clearly show where one ends and another begins. I think it reads better\n. I kind of agree on the second part but I added the variable for clarity; I tried this first.\nswift\nif let predicate = predicate as? NSComparisonPredicate, selfArray = self as? [[String : AnyObject]]\n  where [NSDate.classForCoder(), NSNumber.classForCoder(), NSString.classForCoder()].contains({ $0 == predicate.rightExpression.classForCoder }) {\nBut having so many different NS class prefixes in that array made my sick to my stomach when  I looked at it.\n. I find it much clearer to read when it is split on multiple lines, at least in this context, and it kind of ensures that the code looks the same regardless of your setup.\nPlus, GitHub doesn't have word wrapping like Xcode does, not really a huge issue but\nit kinda makes it harder to review... maybe.\nAlso, kudos on the 27-inch screen.\nWhat do you guys think? @vadymmarkov @RamonGilabert @onmyway133 \n. ",
    "salimos": "already waiting \ud83d\udc96\n. @zenangst  actually the Screencast :D \n. ",
    "vadymmarkov": "I like it too.\n. There could be potential collisions and if the system introduces a public method with the same name as ours, but as @zenangst said, I think it's not critical.\n. +1 on Void. I think it's more readable.\n. Redundant line?\n. Why do we use DATAStack! here?\n. @3lvis But DATAStack! is declared as Implicitly Unwrapped Optional only in this place, and in all others we have DATAStack.\n. @3lvis I see that Chris has already changed to DATAStack in https://github.com/hyperoslo/Sync/commit/702a9db6c7f7e5f67f46ce7bc7f30cde66daa6d7\nTrying to pass nil from Objective-C produces a warning \"Null passed to a callee that requires a non-null argument\". In Swift compiler will not let you do that. So I believe we are good there now.\n. Do we need [unowned self] here?\n. That's right. Thanks @kostiakoval.\n. ",
    "skywinder": "According:\n- NShipster reference\n- Github  page (over 6500 :star:'s)\n- A lot of references to MR as \"best Core Data wrapper\" over the internet (SO, raywenderlich, e.t.c)\nI tend believe that this is most common \"Core Data wrapper\". \nAnd a lot of apps already use it in their apps\nAs a particular case: I would like to use Sync in my app too, but have no idea, how to integrate it with my project, that use MagicalRecord already.\nI will let you know, if I found some solution for it.\n. Ok! Just want to help with logging changes. This script can be also useful to create release notes. I will add integrations with GitHub Releases in next version. More info there: https://github.com/skywinder/github-changelog-generator/issues/56\n. ",
    "bmnick": "Nope, no particular reason for the naming on the local side, that's just what was used when I wrote the original data layer.\n. I've got a partially complete fix locally, let me polish it up a bit and I can send over a PR. \n. I'm not opposed to either case style. Convention here at work is for objectId, but I believe that objectID is more conventional in Cocoa/Cocoa Touch overall. Downsides of working at a primarily non-iOS shop... :confused: \n. Well, so much for just making the changes in line... let me get a clone and fix the tests on this.\n. Cool, thanks! Wasn't 100% sure about your mock data setup, so I didn't want to mess with too much as far as adding new tests.\n. ",
    "batjo": "Great just what I was looking for! Thanks\n. Thanks, I found the Tests project already and it helped a lot. But in this case we designed our API to use as less bandwidth as possible so therefore we are only sending the id instead of the object. Of course in this example the difference in bandwidth is small but when there are a lot of objects in the response it increases fast.  It would be really nice if this could be supported as well because there are also external API's that use this kind of foreign keys in their JSON.\n. > @risp I see, what do you use the ids for? You still have to ask for their data right?\nYes, that's right. In my project, objects have a category, project, paymentMethod. When the user logs in I preload these all so that from then on IDs can be used instead of the object.\n. Hi @3lvis I'm having the same issue and I think I found a way to fix this. The only thing is I'm not sure where I should add the insertOrUpdate parameter. First I though about adding an extra Operation but that doesn't play nice with the .all operation. But adding an extra argument to the sync function also doesn't seem a good idea. Any thoughts?. Of course, please have a look here: https://github.com/3lvis/Sync/tree/fix/227. Thanks, this works indeed. \nOnly thing that I still find hard is that currently I use an attribute called synced to determine if an object has local changes. If the object has local changes, I want to ignore updates from the backend on this object. Therefore I use the predicate but that generates duplicate primaryKeys (this issue). In my project the predicate would look like this:\nswift\nNSPredicate(format: \"ANY id in %@ AND synced == true\", status0IDs)\nBut I guess in this situation I should just make sure to push all objects with synced == false first before requesting the list of objects from the server, right? Because now it would create new objects that have synced == false. I dug a bit deeper and found out that the parentRelationship is always set as nil when using an Operation. See here:\nhttps://github.com/SyncDB/Sync/blob/8ae41b52d2fd3f9bb6b6a279d7fe46c3d8e39890/Source/Sync/Sync.swift#L106\nAnd here: https://github.com/SyncDB/Sync/blob/8ae41b52d2fd3f9bb6b6a279d7fe46c3d8e39890/Source/Sync/Sync.swift#L113\n. I just noticed that even when the server is sending null, still the relationship isn't removed. I tried the following 2 cases:\njson\n[\n  {\n    \"id\": 6,\n    \"name\": \"Shawn Merrill\",\n    \"email\": \"shawn@ovium.com\",\n    \"note\": {}\n  }\n]\njson\n[\n  {\n    \"id\": 6,\n    \"name\": \"Shawn Merrill\",\n    \"email\": \"shawn@ovium.com\",\n    \"note\": null\n  }\n]\n. Hi @3lvis any idea when you have time to look at this? . @3lvis Thanks a lot!. While I was at it, I also implemented the to-one and to-many simplified.. This also solves issue #373 and #269 . Both issues should be fixed in the master branch. If you still have problems syncing json, please reopen at if possible add a failing test case. Thanks!. @3lvis I don't think this needs to be implemented for one-to-one right? I can see the use case for one-to-many and many-to-many. But for one-to-one you would always like to insert/update/delete the changes in my opinion. I just fixed the tests for the many-to-many relationships. Code was already working, it was just that the tests where wrong. Still I don't see the use case for a one-to-one relationship. The use case that has been described by others (where the server only sends the last x messages instead of all messages) makes sense to me. But for a one-to-one relationship it doesn't make sense since the json will always contain the object. So I think this can be merged. Please check #446 there was an issue with your json. You can still sync it by adding a sync.remoteKey to the entity. . Seems the problem was that it was looking for key codigo_atividade while in the json it\u2019s codigoAtividade. Fixed by adding a remote key. Hi 3lvis thanks for having a look. In my case each website has it's own tags and they are not shared between websites. So although a website can have many tags, a tag belongs to only 1 website.\nIs there a specific reason why I need to model this has many-to-many? . Yes in my case tags that aren't included in \"recent_tags\" should be deleted. I guess for now I just use a many-to-many relationship as I don't see any downsides to it other then that my core data model differs slightly from the web server model.. I think the main issue here is that Sync doesn't know the Tag belongs to a Website, when it's in a Category. So the frist tags gets synced correctly and belongs to a Website, while the second tag doesn't have a Website according to sync.\nSo in the database it looks like this:\nid | website\n-- |--------\n10 | 1\n10 | null\nFor now I fixed this by preprocessing all the json and assigning a website_id to each tag.\n. Yes I get the complete website object with tag.website\nMaybe you can try stage: id instead of stage_id: id. Hi @donghd, I think I fixed your issue, please check both these pull requests (you need them both) and let me know if that solved your issue:  #471 #459 . Forgot that I already created a failing test for this. This test is now included in pull request #470 . Hi @jimijon, I was having the same issue and was able to fix it. Please check my changes: https://github.com/3lvis/Sync/commit/112520071007f83c8af48328fc477d705f97cdc4 and let me know if that fixed your issue as well. Hi @3lvis I found the problem of this issue: if the json couldn't be casted as [String: Any] it would always delete the relationship. I changed it so it checks if the relationship name key exists with a nil value and if it does only then deletes the relationship.\n. Any Swift code will crash when you assign a nil value to a non-optional so I don't think this is related to Sync. You could change your model to be an optional or you can do some JSON preprocessing and throw an exception when invalid data is coming from the server.. This has been merged in the master branch now. If you still have problems please reopen.. Hi @3lvis, I fixed the merge conflicts so it can be merged with master if that's ok with you. Thanks for merging my other pull request as well!. I noticed the same problems, didn't know it was because of the many Notifications. Would be nice if there's a solution that passes all the tests. I\u2019m seeing the same problem. I don\u2019t have a solution, tried to debug it but so far wasn\u2019t able to reproduce. . ",
    "benvium": "Ok, thanks for the response.\n. ",
    "pettersamuelsen": "Thanks for the quick reply, Elvis!\nIs it required for all entities to have a primary key by design or are you open for a PR that will fix this?\n. ",
    "stephanecopin": "Thank you! Appreciate it\n. Ah damn, you're right. Let me remove that\n. ",
    "bonebox": "Hi @3lvis,\nThanks for the reply.  The first problem I had was with primary keys.  My Core Data primary keys are different than remoteID, so I added the hyper.isPrimaryKey to the respective primary key attributes on my entities, as described in the README.  However, after doing this, the app crashes.  I noticed that Sync was trying to match my entity's primary key attributes to entityName_id in the JSON.  It is just id in my JSON, so I assumed that would be automatic.  So then I also added hyper.remoteKey to the primary key and set it to id, and I can get a little further now, but it still crashes. \nNow the error I'm seeing is:\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'keypath items.uniqueId not found in entity <NSSQLEntity MKItem id=1>'\nWhere items is the relationship name and uniqueId is the local primary key for MKItem.\n. To clarify, I have an entity called MKMarket that has the items relationship to many MKItem entities, and the property is also called items in the JSON.\n. It turns out the issue is because my relationship is many-to-many, and apparently Sync currently only supports one-to-many.  So let me change my initial question: are there plans to support many-to-many relationships?\n. Yes, that's exactly right.  When I removed the many relationship from item back to market, the data gets populated successfully.  But unfortunately in the data I need to model, an item can also exist in many markets, so I need to have a many-to-many relationship between them.  \nFYI, I'm currently using RESTKit to populate the data and it works with the many-to-many relationship, but I'd like to switch to Sync.\n. Just for example, it's possible I could have something like this in the JSON:\n[\n  {\n    \"id\":\"1\",\n    \"other_attribute\":\"Market 1\",\n    \"items\":[\n      {\n        \"id\":\"1\",\n        \"other_attribute\":\"Item 1\"\n      }\n    ]\n  },\n    \"id\":\"2\",\n    \"other_attribute\":\"Market 2\",\n    \"items\":[\n      {\n        \"id\":\"1\",\n        \"other_attribute\":\"Item 1\"\n      }\n    ]\n  }\n]\n. My model is set up very similar to that.  Are there any User Info key/value pairs that should be defined for the relationship?  How does Sync determine what the inverse relationship is?  My inverse relationship was originally called market, and I changed it to markets thinking that might be the issue, but I still get the same error.  From the error it seems as if it's looking for the items relationship in the Item entity, instead of the markets relationship.\n. @3lvis thanks a lot for taking the time to work through this with me!  I totally understand the paradigm for Sync, and think it's a great idea.  I should mention that I did finally change all of my primary keys to remoteID, and in fact still get the same crash.  Now it looks like the following (only difference is reference to items.remoteID instead of items.uniqueId):\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'keypath items.remoteID not found in entity <NSSQLEntity MKItem id=1>'\nFWIW, I do have a few other attributes that do not match the JSON property names, so I am using hyper.remoteKey with those, so perhaps that is still causing an issue.  Thanks again!\n. I ended up changing all my other attributes to match the JSON to further simplify things, and double-checked the sample project to ensure my settings match as closely as possible, and I still get the same crash. The only difference I can think of is I used mogenerator to create my model objects, so they are subclassed.  It might still be worth looking into the crash when using custom primary keys--perhaps the fix will indirectly fix my problem as well. \n. Here you go. It's occurring in [NSManagedObjectContext performWithOptions:andBlock] called from [DATAStack performInNewBackgroundContext] (line 250 of DATAStack.m).\n```\n Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'keypath items.remoteID not found in entity '\n First throw call stack:\n(\n    0   CoreFoundation                      0x000000010d85dc65 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x000000010f905bb7 objc_exception_throw + 45\n    2   CoreData                            0x000000010d060bbc -[NSSQLGenerator newSQLStatementForRequest:ignoreInheritance:countOnly:nestingLevel:] + 1724\n    3   CoreData                            0x000000010d04cdc4 -[NSSQLAdapter _statementForFetchRequest:ignoreInheritance:countOnly:nestingLevel:] + 244\n    4   CoreData                            0x000000010cf64e0c -[NSSQLAdapter _newSelectStatementWithFetchRequest:ignoreInheritance:] + 316\n    5   CoreData                            0x000000010cf64a86 -[NSSQLCore newRowsForFetchPlan:] + 118\n    6   CoreData                            0x000000010cf6433c -[NSSQLCore objectsForFetchRequest:inContext:] + 524\n    7   CoreData                            0x000000010cf63dbb -[NSSQLCore executeRequest:withContext:error:] + 299\n    8   CoreData                            0x000000010d03ea6c __65-[NSPersistentStoreCoordinator executeRequest:withContext:error:]_block_invoke + 3356\n    9   CoreData                            0x000000010d047c30 gutsOfBlockToNSPersistentStoreCoordinatorPerform + 192\n    10  libdispatch.dylib                   0x00000001103ec614 _dispatch_client_callout + 8\n    11  libdispatch.dylib                   0x00000001103d2002 _dispatch_barrier_sync_f_invoke + 365\n    12  CoreData                            0x000000010d039245 _perform + 197\n    13  CoreData                            0x000000010cf63a58 -[NSPersistentStoreCoordinator executeRequest:withContext:error:] + 504\n    14  CoreData                            0x000000010cf622ca -[NSManagedObjectContext executeFetchRequest:error:] + 586\n    15  DATAObjectIDs                       0x000000010cabbf17 __78+[DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:]_block_invoke + 599\n    16  CoreData                            0x000000010cfa8a79 developerSubmittedBlockToNSManagedObjectContextPerform + 201\n    17  CoreData                            0x000000010cfa8951 -[NSManagedObjectContext performBlockAndWait:] + 257\n    18  DATAObjectIDs                       0x000000010cabbb0b +[DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:] + 491\n    19  DATAFilter                          0x000000010cab620a +[DATAFilter changes:inEntityNamed:localKey:remoteKey:context:predicate:inserted:updated:] + 442\n    20  Sync                                0x000000010ceb8e51 +[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:] + 913\n    21  Sync                                0x000000010cebaa4a -[NSManagedObject(Sync) sync_processToManyRelationship:usingDictionary:andParent:dataStack:] + 1882\n    22  Sync                                0x000000010ceb9f99 -[NSManagedObject(Sync) sync_processRelationshipsUsingDictionary:andParent:dataStack:] + 537\n    23  Sync                                0x000000010ceb91d8 __78+[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:]_block_invoke + 152\n    24  DATAFilter                          0x000000010cab67fe +[DATAFilter changes:inEntityNamed:localKey:remoteKey:context:predicate:inserted:updated:] + 1966\n    25  Sync                                0x000000010ceb8e51 +[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:] + 913\n    26  Sync                                0x000000010ceb8379 __61+[Sync changes:inEntityNamed:predicate:dataStack:completion:]_block_invoke + 121\n    27  DATAStack                           0x000000010cad076a __43-[DATAStack performInNewBackgroundContext:]_block_invoke + 58\n    28  CoreData                            0x000000010cfa8a79 developerSubmittedBlockToNSManagedObjectContextPerform + 201\n    29  libdispatch.dylib                   0x00000001103ec614 _dispatch_client_callout + 8\n    30  libdispatch.dylib                   0x00000001103d36a7 _dispatch_queue_drain + 2176\n    31  libdispatch.dylib                   0x00000001103d2cc0 _dispatch_queue_invoke + 235\n    32  libdispatch.dylib                   0x00000001103d63b9 _dispatch_root_queue_drain + 1359\n    33  libdispatch.dylib                   0x00000001103d7b17 _dispatch_worker_thread3 + 111\n    34  libsystem_pthread.dylib             0x0000000110759637 _pthread_wqthread + 729\n    35  libsystem_pthread.dylib             0x000000011075740d start_wqthread + 13\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n```\n. It is definitely on both. I just checked again to verify. Here's a screenshot in case you don't believe me ;)\n\n. @3lvis just FYI, I updated to the latest (1.0.3) and still get this exact same crash when doing many-to-many.\n. Thanks!!! Let me know if I can provide any other data that might be helpful to you.  FYI the screenshot above is the entire model, so it's not too complex, but there are quite a few markets and items in the JSON.\n. Wanted to check back in on this, and provide some additional data. Not sure if it helps or not, but I decided to attempt this with an in-memory store just to see what happened, and it still crashes, but with a different error:\n*** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[<NSDictionaryMapNode 0x7fd36c48ad30> valueForUndefinedKey:]: this class is not key value coding-compliant for the key items.'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x0000000104a25c65 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x0000000106acdbb7 objc_exception_throw + 45\n    2   CoreFoundation                      0x0000000104a258a9 -[NSException raise] + 9\n    3   Foundation                          0x000000010519d82a -[NSObject(NSKeyValueCoding) valueForUndefinedKey:] + 226\n    4   Foundation                          0x00000001050f6b23 -[NSObject(NSKeyValueCoding) valueForKey:] + 251\n    5   CoreData                            0x0000000104193516 -[NSDictionaryMapNode valueForKey:] + 358\n    6   Foundation                          0x000000010510d963 -[NSObject(NSKeyValueCoding) valueForKeyPath:] + 245\n    7   Foundation                          0x0000000105131fbf -[NSFunctionExpression expressionValueWithObject:context:] + 1071\n    8   Foundation                          0x0000000105131aac -[NSComparisonPredicate evaluateWithObject:substitutionVariables:] + 243\n    9   CoreData                            0x0000000104191f41 -[NSDictionaryStoreMap handleFetchRequest:] + 465\n    10  CoreData                            0x0000000104191251 -[NSMappedObjectStore executeFetchRequest:withContext:] + 241\n    11  CoreData                            0x0000000104206a6c __65-[NSPersistentStoreCoordinator executeRequest:withContext:error:]_block_invoke + 3356\n    12  CoreData                            0x000000010420fc30 gutsOfBlockToNSPersistentStoreCoordinatorPerform + 192\n    13  libdispatch.dylib                   0x00000001075b4614 _dispatch_client_callout + 8\n    14  libdispatch.dylib                   0x000000010759a002 _dispatch_barrier_sync_f_invoke + 365\n    15  CoreData                            0x0000000104201245 _perform + 197\n    16  CoreData                            0x000000010412ba58 -[NSPersistentStoreCoordinator executeRequest:withContext:error:] + 504\n    17  CoreData                            0x000000010412a2ca -[NSManagedObjectContext executeFetchRequest:error:] + 586\n    18  DATAObjectIDs                       0x0000000103c79f17 __78+[DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:]_block_invoke + 599\n    19  CoreData                            0x0000000104170a79 developerSubmittedBlockToNSManagedObjectContextPerform + 201\n    20  CoreData                            0x0000000104170951 -[NSManagedObjectContext performBlockAndWait:] + 257\n    21  DATAObjectIDs                       0x0000000103c79b0b +[DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:] + 491\n    22  DATAFilter                          0x0000000103c7422a +[DATAFilter changes:inEntityNamed:localKey:remoteKey:context:predicate:inserted:updated:] + 442\n    23  Sync                                0x0000000104082fbc +[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:] + 1484\n    24  Sync                                0x0000000104081632 -[NSManagedObject(Sync) sync_processToManyRelationship:usingDictionary:andParent:dataStack:] + 1986\n    25  Sync                                0x0000000104080a9e -[NSManagedObject(Sync) sync_processRelationshipsUsingDictionary:andParent:dataStack:error:] + 558\n    26  Sync                                0x00000001040832ac __78+[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:]_block_invoke + 172\n    27  DATAFilter                          0x0000000103c74806 +[DATAFilter changes:inEntityNamed:localKey:remoteKey:context:predicate:inserted:updated:] + 1942\n    28  Sync                                0x0000000104082fbc +[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:] + 1484\n    29  Sync                                0x0000000104082259 __61+[Sync changes:inEntityNamed:predicate:dataStack:completion:]_block_invoke + 121\n    30  DATAStack                           0x0000000103c8e76a __43-[DATAStack performInNewBackgroundContext:]_block_invoke + 58\n    31  CoreData                            0x0000000104170a79 developerSubmittedBlockToNSManagedObjectContextPerform + 201\n    32  libdispatch.dylib                   0x00000001075b4614 _dispatch_client_callout + 8\n    33  libdispatch.dylib                   0x000000010759b6a7 _dispatch_queue_drain + 2176\n    34  libdispatch.dylib                   0x000000010759acc0 _dispatch_queue_invoke + 235\n    35  libdispatch.dylib                   0x000000010759e3b9 _dispatch_root_queue_drain + 1359\n    36  libdispatch.dylib                   0x000000010759fb17 _dispatch_worker_thread3 + 111\n    37  libsystem_pthread.dylib             0x0000000107921637 _pthread_wqthread + 729\n    38  libsystem_pthread.dylib             0x000000010791f40d start_wqthread + 13\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. Hey @3lvis, well a bit of good news--the sync works now without crashing!  However, I still get a crash when I attempt a fetch request.  Here's the predicate I'm using (this worked previously when fetching after importing to Core Data via RestKit):\nrequest.predicate = NSPredicate(format: \"ANY market.remoteID = %@\", market.remoteID)\nAnd the stack trace:\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'keypath market.remoteID not found in entity <NSSQLEntity Item id=1>'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x000000010a8d1c65 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x000000010c979bb7 objc_exception_throw + 45\n    2   CoreData                            0x000000010a0d4bbc -[NSSQLGenerator newSQLStatementForRequest:ignoreInheritance:countOnly:nestingLevel:] + 1724\n    3   CoreData                            0x000000010a0c0dc4 -[NSSQLAdapter _statementForFetchRequest:ignoreInheritance:countOnly:nestingLevel:] + 244\n    4   CoreData                            0x0000000109fd8e0c -[NSSQLAdapter _newSelectStatementWithFetchRequest:ignoreInheritance:] + 316\n    5   CoreData                            0x0000000109fd8a86 -[NSSQLCore newRowsForFetchPlan:] + 118\n    6   CoreData                            0x0000000109fd833c -[NSSQLCore objectsForFetchRequest:inContext:] + 524\n    7   CoreData                            0x0000000109fd7dbb -[NSSQLCore executeRequest:withContext:error:] + 299\n    8   CoreData                            0x000000010a0b2a6c __65-[NSPersistentStoreCoordinator executeRequest:withContext:error:]_block_invoke + 3356\n    9   CoreData                            0x000000010a0bbc30 gutsOfBlockToNSPersistentStoreCoordinatorPerform + 192\n    10  libdispatch.dylib                   0x000000010d460614 _dispatch_client_callout + 8\n    11  libdispatch.dylib                   0x000000010d446002 _dispatch_barrier_sync_f_invoke + 365\n    12  CoreData                            0x000000010a0ad245 _perform + 197\n    13  CoreData                            0x0000000109fd7a58 -[NSPersistentStoreCoordinator executeRequest:withContext:error:] + 504\n    14  CoreData                            0x0000000109fd62ca -[NSManagedObjectContext executeFetchRequest:error:] + 586\n    15  CoreData                            0x000000010a01d1c2 -[NSManagedObjectContext(_NestedContextSupport) _parentObjectsForFetchRequest:inContext:error:] + 418\n    16  CoreData                            0x000000010a091c1d __82-[NSManagedObjectContext(_NestedContextSupport) executeRequest:withContext:error:]_block_invoke + 589\n    17  CoreData                            0x000000010a01cfd4 internalBlockToNSManagedObjectContextPerform + 84\n    18  libdispatch.dylib                   0x000000010d460614 _dispatch_client_callout + 8\n    19  libdispatch.dylib                   0x000000010d446002 _dispatch_barrier_sync_f_invoke + 365\n    20  CoreData                            0x000000010a01ceed _perform + 221\n    21  CoreData                            0x000000010a01cd18 -[NSManagedObjectContext(_NestedContextSupport) executeRequest:withContext:error:] + 296\n    22  CoreData                            0x0000000109fd62ca -[NSManagedObjectContext executeFetchRequest:error:] + 586\n    23  CoreData                            0x000000010a0edace __43-[NSFetchedResultsController performFetch:]_block_invoke + 270\n    24  CoreData                            0x000000010a01ca79 developerSubmittedBlockToNSManagedObjectContextPerform + 201\n    25  CoreData                            0x000000010a01c951 -[NSManagedObjectContext performBlockAndWait:] + 257\n    26  CoreData                            0x000000010a0ed8ac -[NSFetchedResultsController performFetch:] + 524\n    27  DATASource                          0x0000000109b2b44f -[DATASource initWithFetchRequest:cellIdentifier:mainContext:] + 431\n    28  DATASource                          0x0000000109b2b18e -[DATASource initWithCollectionView:fetchRequest:cellIdentifier:mainContext:configuration:] + 206\n    29  IntelligentHospital                 0x00000001096e275f _TTOFCSo10DATASourcecfMS_FT14collectionViewGSQCSo16UICollectionView_12fetchRequestGSQCSo14NSFetchRequest_14cellIdentifierGSQSS_11mainContextGSQCSo22NSManagedObjectContext_13configurationGSQFTGSQPSs9AnyObject__GSQPS3___GSQCSo11NSIndexPath__T___GSQS__ + 495\n    30  IntelligentHospital                 0x00000001096e0b49 _TFCSo10DATASourceCfMS_FT14collectionViewGSQCSo16UICollectionView_12fetchRequestGSQCSo14NSFetchRequest_14cellIdentifierGSQSS_11mainContextGSQCSo22NSManagedObjectContext_13configurationGSQFTGSQPSs9AnyObject__GSQPS3___GSQCSo11NSIndexPath__T___GSQS__ + 185\n    31  IntelligentHospital                 0x00000001096eff1a _TFC19IntelligentHospital18ScrollingItemsCell12performFetchfS0_FT_T_ + 1402\n    32  IntelligentHospital                 0x0000000109719530 _TFC19IntelligentHospital12StoreBrowser9tableViewfS0_FTCSo11UITableView21cellForRowAtIndexPathCSo11NSIndexPath_CSo15UITableViewCell + 4512\n    33  IntelligentHospital                 0x000000010971979f _TToFC19IntelligentHospital12StoreBrowser9tableViewfS0_FTCSo11UITableView21cellForRowAtIndexPathCSo11NSIndexPath_CSo15UITableViewCell + 79\n    34  UIKit                               0x000000010b7aea28 -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:] + 508\n    35  UIKit                               0x000000010b78d248 -[UITableView _updateVisibleCellsNow:isRecursive:] + 2853\n    36  UIKit                               0x000000010b7a38a9 -[UITableView layoutSubviews] + 210\n    37  UIKit                               0x000000010b72da2b -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 536\n    38  QuartzCore                          0x000000010b530ec2 -[CALayer layoutSublayers] + 146\n    39  QuartzCore                          0x000000010b5256d6 _ZN2CA5Layer16layout_if_neededEPNS_11TransactionE + 380\n    40  QuartzCore                          0x000000010b525546 _ZN2CA5Layer28layout_and_display_if_neededEPNS_11TransactionE + 24\n    41  QuartzCore                          0x000000010b491886 _ZN2CA7Context18commit_transactionEPNS_11TransactionE + 242\n    42  QuartzCore                          0x000000010b492a3a _ZN2CA11Transaction6commitEv + 462\n    43  UIKit                               0x000000010b6aa626 _UIApplicationHandleEventQueue + 2140\n    44  CoreFoundation                      0x000000010a805431 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17\n    45  CoreFoundation                      0x000000010a7fb2fd __CFRunLoopDoSources0 + 269\n    46  CoreFoundation                      0x000000010a7fa934 __CFRunLoopRun + 868\n    47  CoreFoundation                      0x000000010a7fa366 CFRunLoopRunSpecific + 470\n    48  GraphicsServices                    0x000000010f6dda3e GSEventRunModal + 161\n    49  UIKit                               0x000000010b6ad900 UIApplicationMain + 1282\n    50  IntelligentHospital                 0x00000001096fbb57 main + 135\n    51  libdyld.dylib                       0x000000010d494145 start + 1\n    52  ???                                 0x0000000000000001 0x0 + 1\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. Wow, sorry for that!  Pretty obvious, I should have caught that. My original model was one-to-many, so the original relationship was called \"market\", after changing it to many-to-many, I didn't bother to change it to \"markets\" until I was working on integrating Sync and made further changes to the model to work better with Sync.  Totally forgot to update the stupid string references!\n. Thanks for the clarification. So what happens if the body property of a Comment entity just so happens to have the same value as a completely different comment in the JSON?  If there are 2 of the same type of object that have the same value for a property designated as primary key, only one is kept, correct?  I may have a nested object off a root object that could potentially have the same property value(s) as another of the same type of object off another root object--but they should be considered separate objects in the database.  So then that's not possible with Sync?\n. Ok, that's good to know.  Thanks again for the clarification!\n. I think I figured out where the problem is occurring, and it actually exists in 1.0.1 as well, but just doesn't cause a crash. I have an entity that that has a one-to-many relationship with itself.  After performing the sync, I noticed that the parent object gets populated ok, but none of the child objects do.  There are 4 of them, which I think is where the count of objects (4) differs from count of keys (0) is coming from.  \nHere's the data you requested. Let me know if you need anything else.\n...       \n \"element\" : {\n            \"type\" : \"group\",\n            \"label\" : \"Triage\",\n            \"elements\" : [\n                {\n                    \"type\": \"select\",\n                    \"label\": \"Reason for Visit\",\n                    \"reference\": \"reasonForVisit\",\n                    \"selection\": \"open\",\n                    \"items\": [\n                        { \"value\": \"none\", \"label\": \"None\" }\n                    ]\n                },\n                {\n                    \"type\": \"select\",\n                    \"label\": \"Allergies\",\n                    \"reference\": \"allergies\",\n                    \"selection\": \"open\",\n                    \"items\": [\n                        { \"value\": \"none/no known allergy\", \"label\": \"None/No Known Allergy\" }\n                    ]\n                },\n                {\n                    \"type\": \"select\",\n                    \"label\": \"Last Vital Signs\",\n                    \"reference\": \"lastVitalSigns\",\n                    \"selection\": \"open\",\n                    \"items\": [\n                        { \"value\": \"none\", \"label\": \"None\" }\n                    ]\n                },\n                {\n                    \"type\": \"select\",\n                    \"label\": \"Current Medications\",\n                    \"reference\": \"currentMedications\",\n                    \"selection\": \"open\",\n                    \"items\": [\n                        { \"value\": \"none\", \"label\": \"None\" }\n                    ]\n                }\n            ]\n        }\n...\n\n. Well, I discovered the problem!\nI have hyper.isPrimaryKey on the property elementType of the Element entity.  The corresponding JSON property is type (as you can see in my previous post), so I set it up this way according to the README since you have type listed as a reserved attribute.  Once I moved hyper.isPrimaryKey to a different property, it works!  So it seems there is a bug that has something to do with reserved attributes can't also be used as primary keys.\n. Hey @3lvis sorry, forgot about this.  I just tested it, and it does work using a reserved type as primary key.  What I found though, is in addition to specifying the isPrimaryKey value, you also have to specify the remoteKey value, otherwise it will crash.  That may be worth clarifying in the documentation, as it could be confusing for people, since they normally wouldn't need to specify remoteKey (if the attribute is named appropriately).\n. Hey @3lvis, that sounds awesome! Unfortunately I can't seem to get it working.  The binary data attribute value remains nil after mapping.  Is there any other configuration that needs to be done?  Do you have a test project where this is working? Thanks!\n. Here's an actual example that's not working for me.  Trying to map inputConfiguration into a binary data (NSData) attribute.\n\n\"elements\" : [\n     {\n      \"type\": \"input\",\n       \"label\": \"Any Input\",\n       \"reference\": \"anyInteger\",\n       \"inputConfiguration\": {\n            \"justAHint\" : [\"a\", \"b\", \"c\"]\n          }\n     },\n    ...\n]\n. > We use snake_case for the JSON keys.\nAh, that did the trick!  I did remember reading that if the JSON uses snake_case then the core data equivalent needed to be camelCase, but didn't realize that snake_case was an actual requirement for the JSON key. Thankfully we control the JSON also, so I can have that updated. \n\nI've been thinking on supporting mapping depth entities like the one in your example but haven't got around into doing it.\n\nThat looks really cool!  Would it support having multiple entries in the dictionary?  For example:\n\"inputConfiguration\": {\n       \"justAHint\" : [\"a\", \"b\", \"c\"],\n       \"anotherHint\" : [\"d\", \"e\", \"f\"]\n }\nThanks again for all the help!\n. Awesome, thanks!!!\n. @3lvis Out of curiosity, is there reason for the snake_case requirement for JSON keys?  It seems like as long as the JSON key matches the core data attribute (with the exception of reserved types), that should work as well.\n. @3lvis I probably should have tried this before, but I was able to get it to work with the existing JSON key by simply doing \"hyper.remoteKey\" : \"inputConfiguration\".\n. Hey @3lvis! Thanks for the info. I'm having trouble determining what the predicate would look like in this case.  I tried let predicate = NSPredicate(format: \"remoteID = %@\", marketID) which seemed to work at first--the second market entity was added without removing the first.  But then I also noticed that when I inserted the second market, the items in the first market got duplicated.  Syncing the first market again fixes the duplication.\n. Well the duplication I'm seeing seems to be somewhat random--I tried some different markets (that had fewer items) and it didn't occur with them.  The multiple markets get retrieved and subsequently Sync'd more or less concurrently--I'm wondering if that could be an issue?\n. @3lvis I was syncing a single market at a time, just testing with 2 of them, so 2 calls to the sync method.  Each market has varying items, but typically between 25-50.  The markets and items have a many-to-many relationship, not sure if that makes a difference.\nThe duplication issue was partially my own fault--I had set up a test and forgot to disable it so it was attempting to sync the same markets twice. So the sync method was getting called 4 times instead of 2. Still not sure why it duplicated the market items instead of replacing them since it was the same market, but after disabling the additional syncs it stopped duplicating things.  So using the predicate I posted above seems to be working for my situation.  Thanks for the help!\n. Also wanted to mention that my app re-syncs the data whenever the page is refreshed, and that is working correctly (no duplicated items), so it seems that the issue has something to do with the sync method calls occurring so close together.  I did a test by wrapping the sync method call in a GCD synchronous queue and the duplication still occurred when doing the 4 concurrent calls to sync like I mentioned above.\n. > 1.0.10 only includes this change => https://github.com/hyperoslo/NSManagedObject-HYPPropertyMapper/releases/tag/3.3.0 which involves hp_dictionary.\nThis is probably it.  From this, it looks like you are using nested objects as the default, whereas my JSON objects are in array format.  So how do I get Sync to still work with the latter?\n. No, I'm not directly calling methods from any of Sync's dependencies.  The only method I'm calling is changes:inEntityNamed:predicate:dataStack:completion:.  Then when I fetch the newly inserted entity, the attributes are mapped fine, but any relationships are nil.  I'm happy to help, but not sure what would be useful for you.  Let me know if you'd like me to test anything specific.\n. See below for the core data graph and JSON.  I'm importing the JSON as a Form entity.  Both the model and element relationships are nil with 1.0.11 and 1.0.10, and everything gets mapped fine in 1.0.9 and prior.  Let me know if you need any more specifics on the model or anything else.\njson\n{\n  \"model\":{\n    \"uri\":\"http://tempuri.org/any/path/mymodel/1.0/\",\n    \"type\":\"http://tempuri.org/any/path/mymodel/\",\n    \"version\":\"1.0\",\n    \"properties\":[\n      {\n        \"id\":\"anyString\",\n        \"type\":\"string\",\n        \"restrictions\":[\n          {\n            \"restriction\":\"enumeration\",\n            \"items\":[\n              \"option1\",\n              \"option2\",\n              \"option3\"\n            ]\n          }\n        ]\n      },\n      {\n        \"id\":\"anyBoolean\",\n        \"type\":\"boolean\",\n        \"restrictions\":[\n          {\n            \"restriction\":\"minLength\",\n            \"value\":2\n          },\n          {\n            \"restriction\":\"maxLength\",\n            \"value\":50\n          }\n        ]\n      },\n      {\n        \"id\":\"anyDecimal\",\n        \"type\":\"decimal\"\n      },\n      {\n        \"id\":\"anyInteger\",\n        \"type\":\"integer\"\n      },\n      {\n        \"id\":\"anyDateTime\",\n        \"type\":\"dateTime\"\n      },\n      {\n        \"id\":\"anyDate\",\n        \"type\":\"date\"\n      },\n      {\n        \"id\":\"anyDuration\",\n        \"type\":\"duration\"\n      },\n      {\n        \"id\":\"anyMultimedia\",\n        \"type\":\"multimedia\"\n      },\n      {\n        \"id\":\"anyLocation\",\n        \"type\":\"location\"\n      }\n    ]\n  },\n  \"uri\":\"http://tempuri.org/any/path/mydescriptor/1.2?language=en-US\",\n  \"type\":\"http://tempuri.org/any/path/mydescriptor/\",\n  \"version\":\"1.2\",\n  \"language\":\"en-US\",\n  \"element\":{\n    \"type\":\"group\",\n    \"label\":\"Any Form\",\n    \"elements\":[\n      {\n        \"type\":\"input\",\n        \"label\":\"Any Input\",\n        \"reference\":\"anyInteger\",\n        \"inputConfiguration\":{\n          \"justAHint\":[\n            \"a\",\n            \"b\",\n            \"c\"\n          ]\n        }\n      },\n      {\n        \"type\":\"group\",\n        \"label\":\"Any Group\",\n        \"elements\":[\n          {\n            \"type\":\"selectSingle\",\n            \"label\":\"Any Single Select\",\n            \"reference\":\"anyString\",\n            \"selection\":\"closed\",\n            \"items\":[\n              {\n                \"value\":\"option1\",\n                \"label\":\"Option One\"\n              },\n              {\n                \"value\":\"option2\",\n                \"label\":\"Option Two\"\n              }\n            ]\n          },\n          {\n            \"type\":\"selectMultiple\",\n            \"label\":\"Any Multiple Select\",\n            \"reference\":\"anyString\",\n            \"selection\":\"open\",\n            \"items\":[\n              {\n                \"value\":\"option3\",\n                \"label\":\"Option Three\",\n                \"aliasLabels\":[\n                  {\n                    \"label\":\"Option Three A\"\n                  },\n                  {\n                    \"label\":\"Option Three B\"\n                  }\n                ]\n              },\n              {\n                \"value\":\"option4\",\n                \"label\":\"Option Four\"\n              }\n            ]\n          }\n        ]\n      },\n      {\n        \"type\":\"textArea\",\n        \"label\":\"Any Text Area\",\n        \"reference\":\"anyString\",\n        \"comment\":\"This is a Comment for Any Text Area\"\n      },\n      {\n        \"type\":\"image\",\n        \"label\":\"Any Image\",\n        \"reference\":\"anyMultimedia\",\n        \"maximumFileSize\":12000\n      },\n      {\n        \"type\":\"location\",\n        \"label\":\"Any Address Location\",\n        \"reference\":\"anyString\",\n        \"locationRepresentation\":\"address\"\n      },\n      {\n        \"type\":\"custom\",\n        \"label\":\"Any Custom\",\n        \"reference\":\"anyString\",\n        \"customType\":\"http://tempuri.org/path/to/custom/element\"\n      },\n      {\n        \"type\":\"input\",\n        \"label\":\"Any Input With Keyboard\",\n        \"reference\":\"anyString\"\n      },\n      {\n        \"type\":\"form\",\n        \"label\":\"Any Form Link\",\n        \"formURI\":\"http://tempuri.org/path/to/another/form\"\n      }\n    ]\n  }\n}\n\n. Ok, it seems the problem is in fact related to the predicate. I removed that and the relationships now get sync'd correctly in 1.0.11.  But it works with the predicate in <= 1.0.9.  In the past, I needed the predicate in order to prevent Sync from deleting existing forms in core data whenever I sync a new form.  Has that changed?\n. let uri = JSON[\"uri\"] as! String\nlet predicate = NSPredicate(format: \"uri == %@\", uri)\n. Great, thanks!\n. No worries, sorry you had to rollback some prior changes!\n. Hey @3lvis ,\nI can't get it to build.  It looks like you added a new class extension NSArray+Sync.h that is importing DATAStack like #import \"DATAStack.h\" and that is causing the issue.  If seems like I've seen this before when using an Objective-C dependency in a Swift framework (which is what I'm doing).  Anyway, changing it to #import <DATAStack/DATAStack.h> lets it build successfully for me.\n. @3lvis, sure thing and thanks!  Will you be releasing an updated CocoaPod with those changes?  Since I'm using this in a framework with its own podspec I can't point directly to a specific branch within a podspec like with a Podfile.\n. Thanks, I see it now. It wasn't showing up for me when I checked earlier.\n. Ok, updated to 1.1.0, and now I get a crash when calling Sync.changes.  Looks to be an incompatibility with ordered sets.\n2015-10-12 16:31:46.229 mForms-Test[5687:468759] -[_NSFaultingMutableOrderedSet hyp_dictionaryWithDateFormatter:parent:usingRelationshipType:]: unrecognized selector sent to instance 0x7fb0db20a760\n2015-10-12 16:31:46.231 mForms-Test[5687:468759] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[_NSFaultingMutableOrderedSet hyp_dictionaryWithDateFormatter:parent:usingRelationshipType:]: unrecognized selector sent to instance 0x7fb0db20a760'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x000000010bb97f65 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x000000010d829deb objc_exception_throw + 48\n    2   CoreFoundation                      0x000000010bba058d -[NSObject(NSObject) doesNotRecognizeSelector:] + 205\n    3   CoreFoundation                      0x000000010baedf7a ___forwarding___ + 970\n    4   CoreFoundation                      0x000000010baedb28 _CF_forwarding_prep_0 + 120\n    5   NSManagedObject_HYPPropertyMapper   0x000000010b656010 -[NSManagedObject(HYPPropertyMapper) attributesForToOneRelationship:relationshipName:usingRelationshipType:parent:dateFormatter:] + 208\n    6   NSManagedObject_HYPPropertyMapper   0x000000010b655ce0 -[NSManagedObject(HYPPropertyMapper) hyp_dictionaryWithDateFormatter:parent:usingRelationshipType:] + 1536\n    7   NSManagedObject_HYPPropertyMapper   0x000000010b656010 -[NSManagedObject(HYPPropertyMapper) attributesForToOneRelationship:relationshipName:usingRelationshipType:parent:dateFormatter:] + 208\n    8   NSManagedObject_HYPPropertyMapper   0x000000010b655ce0 -[NSManagedObject(HYPPropertyMapper) hyp_dictionaryWithDateFormatter:parent:usingRelationshipType:] + 1536\n    9   NSManagedObject_HYPPropertyMapper   0x000000010b6556a0 -[NSManagedObject(HYPPropertyMapper) hyp_dictionaryWithDateFormatter:usingRelationshipType:] + 96\n    10  NSManagedObject_HYPPropertyMapper   0x000000010b65557c -[NSManagedObject(HYPPropertyMapper) hyp_dictionaryUsingRelationshipType:] + 92\n    11  Sync                                0x000000010b679a99 -[NSArray(Sync) preprocessForEntityNamed:usingPredicate:parent:dataStack:] + 1913\n    12  Sync                                0x000000010b67cef2 +[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:] + 1378\n    13  Sync                                0x000000010b67c1c9 __61+[Sync changes:inEntityNamed:predicate:dataStack:completion:]_block_invoke + 121\n    14  DATAStack                           0x000000010b63360a __43-[DATAStack performInNewBackgroundContext:]_block_invoke + 58\n    15  CoreData                            0x000000010b72bf17 developerSubmittedBlockToNSManagedObjectContextPerform + 199\n    16  libdispatch.dylib                   0x000000010f06249b _dispatch_client_callout + 8\n    17  libdispatch.dylib                   0x000000010f048988 _dispatch_queue_drain + 2215\n    18  libdispatch.dylib                   0x000000010f047ea9 _dispatch_queue_invoke + 601\n    19  libdispatch.dylib                   0x000000010f04aaf2 _dispatch_root_queue_drain + 1420\n    20  libdispatch.dylib                   0x000000010f04a561 _dispatch_worker_thread3 + 111\n    21  libsystem_pthread.dylib             0x000000010f3934f2 _pthread_wqthread + 1129\n    22  libsystem_pthread.dylib             0x000000010f391375 start_wqthread + 13\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. Hey @3lvis, glad I can help!  It's the least I can do for getting to use such a nice library :+1: \nI tried 1.1.1 and everything looks like it's working properly!  Thanks!\n. Actually, I just thought of a much simpler solution--after retrieving the JSON and before running Sync, do my own fetch to determine if the object already exists and if so, just don't run Sync.  This works in my case, since the attribute values never change for the same object.  This of course wouldn't work if an object's attributes can potentially change on the server.\n. Hmm, the object I am testing with is definitely getting deleted each time and it's the same object.    The only thing I can think of is I am comparing date attributes in the predicate (this date attribute is also the primary key).  Below is what my code looks like for the predicate (saveTimestamp is set as a date attribute in Core Data).  I verified that valid date objects are being created.\nlet timestamp = JSON[\"saveTimestamp\"] as! String\nlet saveDate = NSDate.hyp_dateFromISO8601String(timestamp)!\nlet predicate = NSPredicate(format: \"saveTimestamp == %@\", saveDate)\n. > Finally if it's in Core Data and not in the JSON then it's deleted.\nPerhaps this is what's happening?  It's not seeing it as a match so the current object is being deleted, and the new inserted?\n. I am setting the saveTimestamp attribute as the primary key using hyper.isPrimaryKey, so wouldn't it be treated as such?\n. True, although in my case this is fine, since if the date changes at all it means the object has been updated on the server and thus I want a new entry in Core Data.  Also, the server object has no other unique attributes to use as a primary key.\n. Yes, I'm feeding it dummy JSON at the moment, so the date never changes for my testing. It is always 2015-10-07T22:39:49.585Z.  After passing it to NSDate.hyp_dateFromISO8601String the NSDate output is 2015-10-07 22:39:49 +0000.  This matches what's already in Core Data.\n. @3lvis well this is a new project, so it was doing this from the beginning with the latest version of Sync.\n. Hey @3lvis!  Just checking to see if you had an update on this. I'm experiencing the same issue.\n. Thanks, @3lvis!  When you get a chance, would you mind pushing this version to CocoaPods?  Thanks again!\n. Sorry! Needed to refresh my local repo.\n. I understand completely, no worries!\n. Thanks for looking into it!  I updated my original post with the correct format. It's a single form.\n. Looking good, thanks @3lvis !\n. I'm having the same issue. It seems to have been introduced somewhere between versions 4.0.3 and 4.1.3.  It was working fine with 4.0.3 and have the issue after updating to 4.1.3.  Reverting to 4.0.3 fixes it again.. Hey @3lvis! Thanks for the quick fix! That does indeed fix dates with 2 millisecond precision. Apparently some dates from our server also have only 1 decimal place for milliseconds (ie. 2017-11-02T17:27:52.2Z) and that is still crashing. I just realized that after testing this or would have also mentioned it, sorry!  Not sure if you want to handle that possibility as well. Fortunately these dates are coming from a service my team controls so I have a ticket open to enforce the 3 digit length for milliseconds.. Cool, thanks @3lvis! It appears from this that there is no restriction on decimal length, so probably good to have those supported anyway:\n\nThere is no limit on the number of decimal places for the decimal fraction. However, the number of decimal places needs to be agreed to by the communicating parties. For example, in Microsoft SQL Server, the precision of a decimal fraction is 3, i.e., \"yyyy-mm-ddThh:mm:ss[.mmm]\".\n\nAny idea when the next version will be released with these updates?  Thanks!. ",
    "coveralls": "\nChanges Unknown when pulling 43125a5277d33413361d529a77ef402d8df0d286 on improve/add-code-coverage into * on master*.\n. \nCoverage remained the same at 97.85% when pulling 457d6f3a13edf18e6e19978e346bac713f51f889 on gitter-badger:gitter-badge into 2d94d90b575781dcd703adbf662337d70f3f5580 on hyperoslo:master.\n. \nCoverage increased (+2.15%) to 100.0% when pulling 44df6e57731f653ac0a36e314b712d809e4e64f4 on improve/split-dependencies into 1ebd9e17cd113256556ddecb256e39da370bf3e9 on master.\n. \nCoverage remained the same at 100.0% when pulling a1fcd2645d6c60374596545588974fd9c04b522c on improve/readme-with-custom-primary-key into 4cfaa7f07f7d4e013a4e81e76f804062422b6b0e on master.\n. \nCoverage remained the same at 100.0% when pulling a1fcd2645d6c60374596545588974fd9c04b522c on improve/readme-with-custom-primary-key into 4cfaa7f07f7d4e013a4e81e76f804062422b6b0e on master.\n. \nCoverage remained the same at 100.0% when pulling 05a3a9c002acabbf5e802ca3e94acc01c0cab946 on migrate/sync-primary-key into c52d8500a77d83af08f67a06333e6b1645dea5b5 on master.\n. \nCoverage remained the same at 100.0% when pulling 05a3a9c002acabbf5e802ca3e94acc01c0cab946 on migrate/sync-primary-key into c52d8500a77d83af08f67a06333e6b1645dea5b5 on master.\n. \nChanges Unknown when pulling d4612c0aa6381a6eaebd5e6bec0f5bfd122e9b1a on refactor/sync-managedObject-category into * on master*.\n. \nCoverage remained the same at 100.0% when pulling bad03ceb3b54d98df68fd19c9d4b6a39636f3e3c on fix/bug-many-to-many-custom-keys into fb18acb47864561f1174cc813e59a1cfbac21a22 on master.\n. \nCoverage remained the same at 100.0% when pulling 596970bd2376b34f72a7c8f31a87922c2630f30e on improve/readme-table-of-contents into 4b4d6d127d105946ba663338d2d22009258f3495 on master.\n. \nCoverage remained the same at 100.0% when pulling 596970bd2376b34f72a7c8f31a87922c2630f30e on improve/readme-table-of-contents into 4b4d6d127d105946ba663338d2d22009258f3495 on master.\n. \nCoverage remained the same at 100.0% when pulling 03cc171e0a7ee045b7ce0006f9f67088bffa0e3b on fix/bug-84 into 81410a0ea9ee79ef78aa5ea585c280b6087fe43a on master.\n. \nCoverage remained the same at 100.0% when pulling 9fadc502f1b719394c8074b762a802b8f9025ac8 on fix/sqlite-mode-erros into 8cd2803d5ae707e7a1b8ae78ef71298c9979edcd on master.\n. \nCoverage remained the same at 100.0% when pulling 192d8abb22ca6adf03f9e8b2a4477984f8f0665d on improve/tests into 5cc1f6c45dbe746ae925d7f99a0fe63b55988f45 on master.\n. \nCoverage remained the same at 100.0% when pulling 192d8abb22ca6adf03f9e8b2a4477984f8f0665d on improve/tests into 5cc1f6c45dbe746ae925d7f99a0fe63b55988f45 on master.\n. ",
    "ashkan18": "Sorry I was still writing the issue that I accidentally submitted :)\n. @3lvis Works like a charm! Thanks man and great work!\n. hey @3lvis so our tests with latest code are passing but when I tried it in the actual app I ended up seeing the same issue again, I tracked down the issue and it seems the predicate i was talking about crashes on DATAStackSQLiteStoreType and it works fine when we use DATAStackInMemoryStoreType.\nThat kind of exactly matches the giphy you posted :)\n. in your test if you change line 19 in your Test.m to switch to SQLiteStore you'll see the test fails:\nObjective-C\nDATAStack *dataStack = [[DATAStack alloc] initWithModelName:modelName\n                                                         bundle:[NSBundle bundleForClass:[self class]]\n                                                      storeType:DATAStackSQLiteStoreType];\n. Thanks @3lvis ! works great!\n. @3lvis Thanks man, I'll test it and let you know. Awesome library!\n. we had similar problem on our side, for us the issue was faulted objects which our fetched result controller couldn't access. We ended up following this which fixed our issue:\nhttp://stackoverflow.com/questions/3923826/nsfetchedresultscontroller-with-predicate-ignores-changes-merged-from-different/3927811#3927811\nI hope this helps.\n. ",
    "attila-at-hyper": "Sync\u2019s changes:inEntityNamed:predicate:dataStack:completion: crashes if first parameter (NSArray *) contains any nil values\n. ",
    "tomvo": "I solved my problem, it had nothing to do with your library but it had to do with the SwiftRecord library. (https://github.com/arkverse/SwiftRecord) I was using that to fetch the new results in the onComplete callback but it did not return the new values synced. I'll raise an issue there.\nThanks for your reply and all your efforts!\n. ",
    "Gerungofulus": "Hi Elvis, \nthanks for your great help! It works just fine now. Just let me ask two more questions:\n1st:Can I use multiple primary keys? \nIn this specific case I would want to have the fileurl and the remoteID to be unique, because again I don't get to change the API, but I would like to add a PhotoItem with a given url. I would then get the id created on the server when polling all photo items later on and I would need to update the photo item in my local database to the id returned from server.\n2nd: Is it possible to disable deletion in sync on special requests?\nThanks again for your great help!\nTake care,\nPascal\n. Hey Elvis, \nthanks again for that quick response! I will definitely take a look at adding multiple primary keys. If I do so, I will inform you about it.\nFor so long the next quesiton should be the last: The property collectionID in my GrocliPhotoItem happens to not be the id of the collection itself, but the whole collection. Now I would want to use the PhotoItem I retrieve (JSON):\n{\n    collectionId = e393ed8b0c1368fc;\n    fileurl = \"e393ed8b0c1368fc/437BBC0F05384B9B822A.jpg\";\n    id = b53b9e849a129978;\n    isBought = 0;\n}\nand add those to my database but obviously this would not work since. collectionID in my database is an object of type collection. CouldI use a predicate saying that I want to only update PhotoItems with collectionID.remoteID == collectionId ?\nHave a great evening! Whenever you come to Berlin reach out and we will get you a beer or whatever your heart desires ;)\n. Yes I want to sync those Photoitems, where collectionID.remoteID == 3393ed8b0c1368fc\n. The latter one helped. Thanks made! Though I find the name for parent somehow confusing since I expected it to be inheritance related.\n. Yeah some kind of documentation in that regard would definitely help. If you didn't mind I would write some documentation on those functions and send it to you in about a week\n. BTW I have another issue. When syncing the collections, sometimes collections are deleted but the pictures belonging to those collections are not. Of course I get an CoreData Error when doing this. Since I made the relationship to a collection mandatory this will make the managedObjectContext save with an error, which I would like to avoid. So the question is: Can I make Sync perform additional deletes on items that lost a mandatory relationship? Is there any possibility to get control on all changed items? Is anything in that regard planned? \n. Of course I could just make this relationship optional and update all items which lost that connection after the sync but I would rather like the database to be consistent at all times.\n. And I think that using the contextWillSaveNotification would be strange since I might also have other core data using frameworks (like Googe Analytics etc.) Since I could not listen for a specific managedObjectContrext because Sync uses background managedObjectContexts. And I'd rather not wait for errors to occurr.\n. Okay obviously I can delete items with mandatory realtionships by using the cascade deletion rule, but it be cool to get at least the deleted items in return. \n. I just thought that there might be usecases where one would like to get some information about what has been changed by Sync. Which items have been deleted/updated/added for example\n. Yes for example. Or if you would like to be informed when certain items change or things like that. \n. I won't make it with the Apple Docs this month, but I'll try to get it done in August. I'm really sorry about it. \n. Yeah man, vacations are important, I hope yours have been great! :)\nI am really sorry to say, that I could not fix this problem. Do you have any idea what went wrong?\n. I won't have any time to spent on this particular issue within the next two weeks, but I'll investigate it later on and keep you updated\n. I'm going to test the solution given by @ashkan18 Thanks for your support! @3lvis Yes, this is correct. Thank to all of you for trying to solve the problems I was supposed to solve. Sadly I am not skilled enough yet to come up with a solution of my own. I should have some free time to spent on this issue next week, so I'll let you guys know whether it worked out!\n. ",
    "tommypeps": "Which this line you can see  any change over the main context \n``` Objective-C\n- (void)viewDidLoad\n{\n.\n.\n.\n[[NSNotificationCenter defaultCenter]addObserver:self\n                                        selector:@selector(NotificatorChange:)\n                                            name:NSManagedObjectContextObjectsDidChangeNotification\n                                          object:self.dataStack.mainContext];\n\n.\n.\n.\n}\n...........\n-(void)NotificatorChange:(NSNotification)notification\n{\n    NSSet updatedObjects   = [[notification userInfo] objectForKey:NSUpdatedObjectsKey];\n    NSSet deletedObjects   = [[notification userInfo] objectForKey:NSDeletedObjectsKey];\n    NSSet insertedObjects  = [[notification userInfo] objectForKey:NSInsertedObjectsKey];\n}\n```\n. Check structure of JSON\n``` javascript\n[{name:nameExample,\nid:uniqueID,\nusername:username,\ndata:[\n{created_at:date,\nid:uniqueID,\ntext:text},\n{created_at:date,\nid:uniqueID,\ntext:text}\n,{created_at:date,\nid:uniqueID,\ntext:text}\n]\n}]\n```\n. the json work with Sync must be perfect ;)\n. NSProgress\nhttps://developer.apple.com/library/prerelease/ios/documentation/Foundation/Reference/NSProgress_Class/index.html\n. ",
    "bilics": "Hi, great library - thanks!\nI am trying to use NSNotifications to update the UI (a progress bar).\nHowever, NSManagedObjectContextObjectsDidChangeNotification only gets called at the very end \n - after all objects have been added (or updated). Since I am updating ~10.000 objects, the user keeps waiting for the UI to start moving... \nIs there a way I can force the notifications to be fired during execution ?\nThanks!. That's ok, no problem!. Hi! \nHow do I use these options with Objective C ?\nThanks!. Thanks @3lvis!\nI am kinda new to this... can you give me some pointers or tutorials so I can dig through ?\nThanks again. Thanks!! I will go from here and post back if I find any problems.\n. ",
    "altyus": "what ^ said \n. ",
    "cyupa": "Me again :open_mouth: It seems to me that Sync has some issues with synchronising contexts. I'm also using it with a NSFetchedResultsController... and Storyboards.\n1. I load some data\n2. Setup a NSFetchedResultsController on the main thread\n3. Fetch (even with huge delays) -> NO DATA\nThe funny thing is that it sometime works, if I loose myself through breakpoints. And data is loaded in the UITableViewController.\n. I did some rework on DATAStack (still need to learn Swift - https://github.com/cyupa/DATAStack/blob/master/Source/DATAStack.swift) and I was able to get the data into the UI.\nI changed the context mapping to:\nwriterContext - mainContext - backgroundContext\nWhere writerContext is parent for main and main is parent for backgroundContext.\nThey all share the same persistent store coordinator via writerContext.\nThe problem now is that after I load the data on the first launch and everything is ok, if I kill the app and relaunch, it does not load the SQLite file. I need to check how the persistentStoreCoordinator is set because it has a really complicated getter.\n. Ok, so my issue was related to the fact that the NSFetchResultsController sorting key was a transient property. You can't do that.\n. ",
    "nikolai42": "Sure.\n[\n  \"id\": 2\n  \"text\": \"test\"\n  \"liked\": [\n    {\n      \"id\": 1\n      \"name\": \"user test\"\n    }\n]\nCore Data:\nPost (remoteID, text, liked[has_many: User])\nUser (remoteID, name, likedPosts[has_many: Post])\nSo what it does, it tries to call #mutableSetValueForKey: on User with liked_posts, ie using remote name\n. ",
    "samouds": "Thanks @3lvis, I will try this one :)\n. Hello @3lvis and thanks for your answer, I need to support iOS 7 that's why I'm sticking to 1.0.0. \nHow can I be sure that a request doesn't start before ?\n. Thanks @3lvis I am going to check this and tell you if it fix the problem. Thanks a lot\nBut one more question, why it's happening only in iOS 9 and not 8 and 7 ? do you have any idea ?\n\nI tried to simulate multiple Sync request at the same time for the same Entity and object and I can't reproduce the crash. Maybe it's something else which cause this bug.\n. ",
    "galinyonchev": "And what If I have a single Patient entity object with some other entity objects like fitness data, personal data and etc. I want to export the single Patient object, but with other entities attached to it. Is this possible? Like, not loop through all objects and create the JSON array myself, but with single line of code, like this:\nNSDictionary *userJSON = [patient hyp_dictionary];\nI think it is something connected with the PrimaryKey or not?\n. Hm, it is not working in my project. The app just freezes without any error messages. \nDo I have to add somewhere this \"PrimaryKey\" or I can go without it?\n. This is the first time I am implementing this method.\nIt is freezing when I push the button that calls this one:\npatient.hyp_dictionaryUsingRelationshipType(.Array))\nHere is my Core Data model (sorry for hiding some things):\n\n. I found the problem - it was because of a property with digits in its name. Now, I am trying the export my Patient object with his Baseline relationship attached to it.\nI have a single Patient object with some properties and another object - Baseline (with its properties). I have a relationship between these two - inversed and of type \"to-one\". I am trying to export it using \nNSDictionary *dictionary = [user hyp_dictionaryUsingRelationshipType:HYPPropertyMapperRelationshipTypeArray];\nbut it only exports the Patient object with its properties. Any idea why? \nNOTE: Baseline is not a property of Patient, it is another NSManagedObject with a relationhip to Patient.\n. I tried with inversed relationship and it was not successful. I am out of ideas and I hope you can find a solution.\n. I found that on line 80:\nid relationships = [self valueForKey:relationshipName];\nAnd guess what -  relationship is nil here. There is no value for the chosen key in self. \n. Here is the Patient object. The value for baseline is nil, although there is a Baseline object with some data in it. Any ideas what I have to do to make it work?\nP.S. There is no attribute named \"baseline\" in Patient, this is the relationship!\n\n. Thank you! Solved! It was because of my Core Data model.\n. Hm, I just can not make it work.\nLook what I do and tell me if it is correct:\n1. Create DataStack:\n   let dataStack = DATAStack(modelName: \"Model\")\n2. Then I fetch the Patient object:\n   let patient: Patient = self.fetchEntity(dataStack.mainContext)\n3. After that I go with this one:\n   patient.hyp_dictionaryUsingRelationshipType(.Array)\nAnd it returns only the patient object without other objects (baseline and etc.)\nMy objects do not have attribute \"ID\", is this a problem? And one more thing - I do NOT use this lines of code:\nNSArray *objects = [self objectsFromJSON:@\"patients.json\"];\n[Sync changes:objects\n    inEntityNamed:@\"Patient\"\n        dataStack:dataStack\n        completion:nil];\n. JSON: http://pastebin.com/fwrucLzx\nCore Data model:\n\nself.fetchEntity function:\n// fetch entity in chosen context\n    func fetchEntity(context: NSManagedObjectContext) -> Patient? {\n        let fetchRequest = NSFetchRequest(entityName: \"Patient\")\n        fetchRequest.returnsObjectsAsFaults = false\n        let objects = (try! context.executeFetchRequest(fetchRequest)) as! [Patient]\n        if let obj: Patient = objects.first {\n            return obj\n        }\n        return nil\n    }\n. Have a look here:\n\n. OK, now I use predicate as you said in your last comment. The problem is that I try to sync my Core Data object (Patient) with JSON that contains only two of patient's attributes - GUID (my primary key) and the measures. It just does not update the Patient object. To make it work I have to add two more attributes and then Sync recognizes it and updates the Patient object. Do you know what is wrong?\nFor example the Patient object have 10 attributes - first name, last name, email, bla, bla, guid (primary key), measures. JSON looks like this:\njson\n \"guid\": \"some-guid-here\",\n\"measure\": [\n  {\n    \"beer\": 0,\n    \"object_deleted\": 0,\n    \"long_drink\": 0,\n    \"wine\": 0,\n    \"date\": \"2015-10-16\",\n    \"object_type\": \"Alcohol\",\n    \"alcohol_qty\": null,\n    \"short_drink\": 0\n  },\n  {\n    \"object_deleted\": 0,\n    \"weight\": 39.916128557262,\n    \"object_type\": \"Weight\",\n    \"date\": \"2015-10-16\"\n  }\n]\nThis way it does not work. I have to add two more attributes to make it sync and update. Any ideas?\n. Primary key of measure object is \"date\". Yes, measures will be better, I will change it.\n. Yes, guid is the primary key of Patient. \nPrimary key of measure is date.\nSo, is it a problem that my measure items have the same primary key?\n. OK, I made the change, now Measure has an attribute \"remoteID\" which is the PrimaryKey. It still needs 4 attributes in the JSON (measures, guid and two others) to update the Patient object. I have no idea why this is happening... :(\n. ",
    "damienromito": "It would be very usefull if we can use Transformable objects with Sync. Of course, we can use Dictionary or Array with Binary Data, but it's a too complexe if we want get objects with real properties from those Dictionary:\nprint(\"value => \\(myNSManagedObject.myTransformableObject.myProperty)\")\n...rather than :\nlet myProperty = myNSManagedObject.myTransformableObject[\"myProperty\"] \nprint(\"value => \\(myProperty)\")\n. Cause it would be a one-to-one relationship. To understand, my user object look like this:\n{\n  user : \n      { \n        name : \"myname\",\n        spotify : {\n                 accessToken : \"myaccessToken\",\n                 refreshToken : \"myrefreshToken\",\n                 id : \"myid\"\n                 }\n           }\n      }\n}\nThis should be work with Sync? I just tried with a one-to-one relationship ...\n\nand i have a \"EXC_BAD_ACCESS\" on all my spotify properties  :\nprint(\"my token => \\(user.spotify.token)\")\n. 1 - as you explained to me here: http://stackoverflow.com/questions/33397102/assertion-failure-in-sync-changesinentitynamedpredicateparentincontextdat/33407185#33407185 I added the key hyper.isPrimaryKey = YES on the name attribute (thank you again)\n 2 -I setted   \"hyper.remoteKey\" = \"accesstToken\"\n3 - it works without\n4 - the probleme : My UserSpotify was an NSObject and not an NSManagedObject #fail  \nthank you for your help and your work!\nthis question on stackoverflow : http://stackoverflow.com/questions/33440899/map-a-multi-level-json-object-to-nsmanagedobject-with-hyperolso-sync/\n. I don't find no use of Sync in your DATASource Project https://github.com/3lvis/DATASource\nThat is great but I have to excecute an API request to get JSON data:\n``` objective-c\n    NSFetchRequest *request = [[NSFetchRequest alloc] initWithEntityName:@\"User\"];\n    request.sortDescriptors = @[[NSSortDescriptor sortDescriptorWithKey:@\"firstLetterOfName\" ascending:YES], [NSSortDescriptor sortDescriptorWithKey:@\"name\" ascending:YES]];\n_dataSource = [[DATASource alloc] initWithCollectionView:self.collectionView\n                                          cellIdentifier:CollectionCellIdentifier\n                                            fetchRequest:request\n                                             mainContext:self.dataStack.mainContext\n                                             sectionName:@\"firstLetterOfName\"\n                                           configuration:^(UICollectionViewCell * _Nonnull cell, NSManagedObject * _Nonnull item, NSIndexPath * _Nonnull indexPath) {\n                                               CollectionCell *collectionCell = (CollectionCell *)cell;\n                                               User *user = (User *)item;\n\n                                               [collectionCell updateWithText:user.name];\n                                           }];\n_dataSource.delegate = self;\n\n```\n. ",
    "richardtop": "I guess it is related to Apple's API style.\nFor example, if you take a look at CoreData code:\nObjective-C\nNSError *error;\nNSArray *fetchedObjects = [context executeFetchRequest:fetchRequest error:&error];\nif (fetchedObjects == nil) {\n    // Handle the error.\n}\nWe're checking whether method returned something or not. I don't remember any void methods in Apple's API that take NSError * as an argument.\nSource of the code:\nhttps://developer.apple.com/library/ios/documentation/DataManagement/Conceptual/CoreDataSnippets/Articles/fetching.html\n. ",
    "0ff": "In fact I think the reason is Swift. If you follow these guidelines (https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#//apple_ref/doc/uid/TP40014216-CH7-ID10 - namely return a BOOL to indicate success), the API can be ported to Swift 2.0 automatically.\n. Wow, you guys rock! Fastest time from Issue to perfect resolution I've seen in a very long time! Thanks, please keep on the great work :)\n. ",
    "zavod": "Thak you for your answer! Do you have some example for swift?\n. Got it, thank you!\nWhat about two parents? I mean three jsons and two parents\n. ",
    "FelipeDocil": "Ok thanks, I'll try work with predicates, perhaps your idea using ID work for me.\nAny plans to implement that in the future? \n(btw, you can close the issue if you want)\n. Actually that's a nice question that I haven't think about. Until now I'll have a 'ghost' User at my database.\nTo fix my problem I made a method at User.m doing something like that.\n``` objective-c\n+ (void)addUsers:(NSArray )elements completion:(void (^)(NSError ))completion\n{\n    NSMutableArray *body = [[NSMutableArray alloc] init];\n    [body addObjectsFromArray:elements];\nNSArray *allUsers = [self fetchAllUsers];\n[allUsers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {\n    [body addObject:[self dictionaryFromUser:obj]];\n}];\n\n[Sync changes:body\ninEntityNamed:@\"User\"\n    dataStack:[Constants dataStack]\n   completion:completion];\n\n}\n```\nAnd at dictionaryFromUser: I reparse all User I have at CoreData, something like @{@\"id\" : user.remoteID} and so on with all attributes User has.\nActually I have to think about how I'll do that, that's a really problem. For a work around perhaps I'll need another request just to delete the 'ghosts' Users, I don't know. Have you think a good solution?\n. Btw the id solution didn't work for me because I use it at a SearchView so, every time I searched a few Users I got all my Users deleted.\n. ",
    "jkblgithub": "Hi @3lvis ,\nThanks for your quick reply. Our category entity is:\nname (NSString)\nremoteID (int)\ncolor (NSString)\noverview(NSString - quite a long string)\nprojects (toMany relationship)\nThe reason why we dont want to serialize the category with each project is that it would be a massive duplication of data (we have many projects and each category can have quite a lot of text in overview). That is why we import categories first using Sync and then try to import projects - we were hoping that Sync would be able to get the category record from Core Data as it had already been imported. If this cant be done with the current version of sync, perhaps a way to do this for a future release would be for a flag to be set in userinfo, indicating the relationship will be presented by an id?\nI am guessing the best solution for now is for us to replace the category id in project with the necessary json ourselves before passing to sync?\n. Thanks @3lvis \nDid not know about using HYP to create json from a managedobject - very handy.\nOnce again thanks for Sync and your help.\n. Excellent - thank you!!\n\nOn 28 Nov 2015, at 08:39, Elvis Nu\u00f1ez notifications@github.com wrote:\nI've been working on this in #140 https://github.com/hyperoslo/Sync/issues/140\nShould be ready at the end of next week.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/hyperoslo/Sync/issues/139#issuecomment-160253530.\n. @3lvis Thanks - We ended up removing the microseconds and it works\n. Has this library now been abandoned?. \n",
    "tpmullan": "Where would be the best place to add this change?  My first guess is to add a function like sync_processToOneRelationship that only takes an id.   Then I can reuse sync_safeObjectInContext and add the relationship.\nThe function would only be called when \"hyper.justForeignKey : YES\" was set or it could also use something like \"category_id\". \n. Good set of edge cases.  The way I structured my data made it work for me, but it wasn't very generic.  I will test your version this week.  Thanks!\n. Just curious, what would this break?  It should only add the relationship if the other model exists, and if for some reason the same key was present in Core Data it should still sync the field.  The main reason I went with this representation was because our backend is in Ruby on Rails and this is how relationships are present in json by default.  I see the advantage in also supporting the feature the way you describe, but why not both?\n. ",
    "violabg": "Is this already available in the current release?\n. Thanks for the reply.\nI can't figure it out the way to structure my json in order to be converted to my model.\n\nbasically I have a list of languages and categories, plus a list of Brochures that are group by language and category.\ncould you help me understand what kind of json I would need in order to achieve this, or if it is possible at all?\n. Thanks 3lvis,\nI thought so, but I have a problem with that.\nyou see the property thumb for category? that is an image (binary data).\nI have maybe 500/800 brochures and only 10/15 categories and I don't want to repeat the same category (including thumb) for 500/800 times.\nthat is why I was looking at\nSync relationships by only providing the id #140\nsomething like this:\njson\n{\n    \"brocures\": [\n        {\n            \"id\": 0,\n            \"is_current\": true,\n            \"is_local\": true,\n            \"is_new\": true,\n            \"modification_date\": \"\",\n            \"name\": \"\",\n            \"needs_update\": true,\n            \"sort_id\": 0,\n            \"thumb\": \"\",\n            \"url\": \"\",\n            \"category_id\": \"\",\n            \"language_id\": \"\"\n        }\n    ],\n    \"categories\": [\n        {\n            \"id\": 0,\n            \"name\": \"\",\n            \"sort_id\": 0,\n            \"thumb\": \"\"\n        }\n    ],\n    \"languages\": [\n        {\n            \"id\": \"\",\n            \"name\": \"..\"\n        }\n    ]\n}\n. thanks, is working\n. I'm using your AppNet sample as a test base for may data and syncing the data this way:\n``` swift\nfunc fetchItems(completion: (NSError?) -> Void) {\n    if let urlAppNet = NSURL(string: AppNetURL) {\n        let request = NSURLRequest(URL: urlAppNet)\n        let operationQueue = NSOperationQueue()\n\n        NSURLConnection.sendAsynchronousRequest(request, queue: operationQueue) { [unowned self] _, data, error in\n            if let data = data, json = (try? NSJSONSerialization.JSONObjectWithData(data,\n                options: NSJSONReadingOptions.MutableContainers)) as? Dictionary<String, AnyObject> {\n                    Sync.changes(json[\"languages\"] as! Array,\n                        inEntityNamed: \"Language\",\n                        dataStack: self.dataStack,\n                        completion: { error in\n                            self.syncCategories(json)\n                    })\n            } else {\n                completion(error)\n            }\n        }\n    }\n}\n\nfunc syncCategories(json:Dictionary<String, AnyObject>) {\n    Sync.changes(json[\"categories\"] as! Array,\n        inEntityNamed: \"PdfCategory\",\n        dataStack: self.dataStack,\n        completion: { error in\n            self.syncBrochures(json)\n    })\n}\n\nfunc syncBrochures(json:Dictionary<String, AnyObject>) {\n    Sync.changes(json[\"brochures\"] as! Array,\n        inEntityNamed: \"Brochure\",\n        dataStack: self.dataStack,\n        completion: { error in\n            print(\"syncBrochures\")\n    })\n}\n\n```\ndo you think is the correct way=\n. No errors, since you said \"if you have all the categories and languages synced then you can do\njson\n[\n  {\n    \"id\": 0,\n    \"is_current\":..,\n    \"is_local\":..,\n    \"is_new\":..,\n    \"modification_date\":..,\n    \"name\":..,\n    \"needs_update\":..,\n    \"sort_id\":..,\n    \"thumb\":..,\n    \"url\":..\n    \"category_id\":..,\n    \"language_id\":...\n  }\n]\nI was wondering if doing it on the same json fetch on each completion block was the appropriate way to do it.\n. Actually I'm getting some problems, related to notifications, when the json changes I'm getting correct notification only from the language entity, while for PdfCategory and Brochure I'm only getting inserted notification, (the core data always get updated). it is similar to issue #153.\nFor me it is important to keep track of changes from one json to another one, since I have to do some clean up, especially for the entities been deleted.\nIs there another way to keep track of deleted entities between syncs, other the trough notifications?\n. I have used your AppNet example, only thing i did I saved a local copy of the json to test the changes manually\njson\n{\n    \"meta\": {\n        \"min_id\": \"57030525\",\n        \"code\": 200,\n        \"max_id\": \"57030547\",\n        \"more\": true\n    },\n    \"data\": [\n        {\n            \"created_at\": \"2015-04-06T15:07:06Z\",\n            \"text\": \"Hello World!\",\n            \"id\": \"10\",\n            \"user\": {\n                \"username\": \"10albarjeel1\",\n                \"created_at\": \"2015-03-28T13:01:31Z\",\n                \"id\": \"1\"\n            }\n    },\n        {\n            \"created_at\": \"2015-04-06T15:07:06Z\",\n            \"text\": \"20Hello World!\",\n            \"id\": \"2\",\n            \"user\": {\n                \"username\": \"2albarjeel1\",\n                \"created_at\": \"2015-03-28T13:01:31Z\",\n                \"id\": \"2\"\n            }\n    },\n        {\n            \"created_at\": \"2015-04-06T15:07:06Z\",\n            \"text\": \"3Hello World!\",\n            \"id\": \"3\",\n            \"user\": {\n                \"username\": \"3albarjeel1\",\n                \"created_at\": \"2015-03-28T13:01:31Z\",\n                \"id\": \"3\"\n            }\n    },\n        {\n            \"created_at\": \"2015-04-06T15:07:06Z\",\n            \"text\": \"4Hello World!\",\n            \"id\": \"4\",\n            \"user\": {\n                \"username\": \"4albarjeel1\",\n                \"created_at\": \"2015-03-28T13:01:31Z\",\n                \"id\": \"4\"\n            }\n    }\n  ]\n}\nif I change the data text property, I see it on the ui (table view), but not updatedObjects is trigger.\nShould't it count has an update?\nEven on your screenshot the updatedObjects is nill\n. ok, great\n. Hi 3lvis, I'm trying your new build with the local example, but now updatedObjects it is always dispatched on every app launch, even if you don't change anything on the json\n. I have changed the code to use the local json:\n`` swift\nfunc fetchNewData() {\n        // Use thenetworking.fetchLocalItems` method to try change notifications\n        networking.fetchLocalItems { _ in\n            self.fetchCurrentObjects()\n        self.refreshControl?.endRefreshing()\n    }\n}\n\n```\nnow every time I run the up the console always print this: (no changes were made on the json)\n\nyou can reproduce this by running the app many times\n. but it does even if there are no changes\n. what I see is that with the same json, no property or entities changes, just running the app many times, I get the screen shot above, where it prints updatedObjects, but it shouldn't since the data is the same.\n. I debugged NSManagedObject+HYPPropertyMapper and non changes where found, but still get updatedObjects notification\n. I can confirm that this only happens to entities that have relationships \n. ",
    "antonholmquist": "Hi, thank for the quick reply. I get it, but I wonder when that notification is sent. Maybe not always at the exact same time the context is saved.\nWe are experiencing that the main context is not always updated by the time the completion block is called when merging changes, which could possibly be due the notification being sent when a small delay. I have not confirmed this though.\nForcing a refresh on updated objects with refreshObject before calling the completion block solved this issue for us.\n. Yes, exactly. Basically we are trying to fetch the updated object in the completion block using a fetch request. I'm not sure why the merge is not done at the done the completion block runs. Could possible be due the notification being delayed, but I'm not sure.\nWill start by investigating and see if I can can track down what is happening. \nAppreciate your support!\n. I'm a little confused. The notification is indeed called like expected, before the completion block.\nNot sure this is a framework error. Will continue looking into it..\n. Thanks, I will have a look at this\n. Yo @zenangst!\nThanks for a useful lib :)\n. Thanks. But don't you think this should be handled by the library? It can sometimes be tricky to know if other parts of your app is syncing simultaneously, but it is pretty easy to enforce in the library.\n. My quickfix was just to rewrite the performInNewBackgroundContext: method to use a single context instead of a new one each time. It makes the blocks performed by the context run synchronously and should eliminate the current risk of duplicates.\n```\nvar backgroundContext : NSManagedObjectContext!\npublic func performInNewBackgroundContext(operation: (backgroundContext: NSManagedObjectContext) -> ()) {\nif (backgroundContext == nil) {\n    backgroundContext = NSManagedObjectContext(concurrencyType: DATAStack.backgroundConcurrencyType())\n    backgroundContext.persistentStoreCoordinator = self.persistentStoreCoordinator\n    backgroundContext.undoManager = nil\n    backgroundContext.mergePolicy = NSMergeByPropertyStoreTrumpMergePolicy\n\n    NSNotificationCenter.defaultCenter().addObserver(self, selector: \"backgroundContextDidSave:\", name: NSManagedObjectContextDidSaveNotification, object: backgroundContext)\n}\n\nlet context = backgroundContext!\n\nlet contextBlock: @convention(block) () -> Void = {\n    operation(backgroundContext: context)\n}\n\nlet blockObject : AnyObject = unsafeBitCast(contextBlock, AnyObject.self)\ncontext.performSelector(DATAStack.performSelectorForBackgroundContext(), withObject: blockObject)\n\n}\n```\n. I would actually argue that a backgroundContext should be more stable! Having multiple contextes, each on its own thread, syncing in pararell introduces both a risk for duplicates (which we saw here) as well as potential merge conflicts. \nYes, having sync operations as NSOperations could pretty much solve the same issue. As would using a single background dispatch queue for all sync code. It's all about avoiding sync operations running in pararell.\n. ",
    "f1nality": "@3lvis \nI have noticed that when I have used Sync.changes with predicate logging started to contain \"inserted\" key with lots of entries (400+) though it should containt \"update\" key. When I use Sync.changes without predicate only \"refreshed\" key is being logged.\nYes, I have id and remoteID fields.\nHere is my data:\n\n\n. By the way, my remoteID is Integer32 (in comparison to demo)\n. swift\n        let predicate = NSPredicate(format: \"online == true\")\n        Alamofire.request(Method.GET, URL).responseJSON { response in\n            if let channels = response.result.value?[\"results\"] as? [AnyObject] where response.result.isSuccess {\n                Sync.changes(channels, inEntityNamed: \"Channel\", predicate: predicate, dataStack: dataStack, completion: nil)\n//                Sync.changes(channels, inEntityNamed: \"Channel\", dataStack: dataStack, completion: nil)\n            }\n        }\n. Now it crashes:\n2015-11-22 16:10:17.218 my_app[93724:5917983] *** Terminating app due to uncaught exception 'NSGenericException', reason: '*** Collection <__NSCFSet: 0x7fba48d23b80> was mutated while being enumerated.'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x000000010dfd80b5 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x000000010d6dfdeb objc_exception_throw + 48\n    2   CoreFoundation                      0x000000010dfd7a14 __NSFastEnumerationMutationHandler + 132\n    3   CoreData                            0x000000010dc388c4 -[NSManagedObjectContext executeFetchRequest:error:] + 2932\n    4   Sync                                0x000000010cb7b1df +[NSManagedObject(Sync) sync_safeObjectInContext:entityName:remoteID:parent:parentRelationshipName:error:] + 543\n    5   Sync                                0x000000010cb7c7fb -[NSManagedObject(Sync) sync_processToOneRelationship:usingDictionary:andParent:dataStack:error:] + 1035\n    6   Sync                                0x000000010cb7b9fd -[NSManagedObject(Sync) sync_processRelationshipsUsingDictionary:andParent:dataStack:error:] + 1277\n    7   Sync                                0x000000010cb7a536 -[NSArray(Sync) preprocessForEntityNamed:usingPredicate:parent:dataStack:] + 1206\n    8   Sync                                0x000000010cb7dbd2 +[Sync changes:inEntityNamed:predicate:parent:inContext:dataStack:completion:] + 1378\n    9   Sync                                0x000000010cb7cea9 __61+[Sync changes:inEntityNamed:predicate:dataStack:completion:]_block_invoke + 121\n    10  DATAStack                           0x000000010caaa16f _TTRXFdCb_dCSo22NSManagedObjectContext_dT__XFo_oS__dT__ + 31\n    11  DATAStack                           0x000000010caaa12f _TFFC9DATAStack9DATAStack29performInNewBackgroundContextFS0_FFT17backgroundContextCSo22NSManagedObjectContext_T_T_U_FT_T_ + 63\n    12  DATAStack                           0x000000010caaa0e7 _TTRXFo__dT__XFdCb__dT__ + 39\n    13  CoreData                            0x000000010dc7e997 developerSubmittedBlockToNSManagedObjectContextPerform + 199\n    14  libdispatch.dylib                   0x0000000110eaf49b _dispatch_client_callout + 8\n    15  libdispatch.dylib                   0x0000000110e958ec _dispatch_queue_drain + 2215\n    16  libdispatch.dylib                   0x0000000110e94e0d _dispatch_queue_invoke + 601\n    17  libdispatch.dylib                   0x0000000110e97a56 _dispatch_root_queue_drain + 1420\n    18  libdispatch.dylib                   0x0000000110e974c5 _dispatch_worker_thread3 + 111\n    19  libsystem_pthread.dylib             0x00000001111e04f2 _pthread_wqthread + 1129\n    20  libsystem_pthread.dylib             0x00000001111de375 start_wqthread + 13\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. @3lvis \nwhere is it checked whether model should be updated or not (is it changed or not)?\nBy the way, when I do initial fetch (no data in db) there are duplicates in my collectionview, but when I fetch one more time - duplcates are removed from collection view (looks like because I make two simultaneous fetch requests)\n. hmm, when I try to manually update one object everything ok\n``` swift\n            let predicate = NSPredicate(format: \"self == %@\", channel)\n        Sync.changes([[\"id\": channel.remoteID, \"liked\": !channel.liked.boolValue]], inEntityNamed: \"Channel\", predicate: predicate, dataStack: dataStack)  { (error: NSError!) -> Void in\n            self.updateLikeButton()\n        }\n\n```\nBut when I fetch from api - i get inserts instead of refresh\n. Yes, very similar. Looks like old object is being deleted and inserted again. \n. @3lvis \nI've noticed strange behavior:\nIf if specify concrete objects in predicate and try to update them - everything ok.\nBut if don't provide predicate, all objects are being deleted and only objects I have passed to \"changes\" argument are created.\n. This workaround at least works for me as expected (objects are refreshed and not recreated)\nswift\n                let predicate = NSPredicate(format: \"remoteID IN %@\", channels.map() { $0[\"id\"] as! NSNumber })\n                Sync.changes(channels, inEntityNamed: \"Channel\", predicate: predicate, dataStack: dataStack, completion: nil)\n. wow, ok then. But if I specify no predicate and pass objects - it also deletes and inserts objects which were in coredata (this was original problem).\nBy the way, how in this case should api pagination should be implemented using sync? I make requests to api with specified \"page\" and get only part of data. When I try to sync it - all other pages in core data will be deleted.\n. > This definitely looks like a bug. I'll have a look when I get some time.\nI have found out that I was wrong about reason of this bug, it's not about predicate. This happened because I made simultaneous requests that fetched the same data. As a result sync added duplicates (but shouldn't?) and possible has broken something in db. After that this delete/insert operations happens after every request (even with predicate and without it). Only db clearing helps.\nWhat it interesting, duplicates disappear from collectionview after few more requests, but delete/insert operations happens after each request until I clear my db and stop making simultaneous requests with th same data.\n\nYou'll need to find a way to differentiate objects that belong to each page (this is why the predicate is needed). Otherwise Sync doesn't have a way to know what got deleted in each page.\n\nIt would be great if it can be customizable, don't you think? Not to delete objects which are not in changes I mean. Deleting happens in DATAFilter, am I right?\n. @3lvis  yes. Looks like duplicates are being deleted after later requests, but something still stays broken and I begin to receive delete/insert notifications on data which hasn't changed.\n\nIt would be great if it can be customizable, don't you think? Not to delete objects which are not in changes I mean. Deleting happens in DATAFilter, am I right?\n\nThis is not about this issue's problem - I mean it would be nice if I can turn off deleting of objects in core data which were not present in API request response. e.x. Sync.changes(data, inEntityNamed: \"Model\", dataStack: dataStack, completion: nil, deleteNonexistent: false)\n. 1. I add `deleted' boolean property. Than I can manually delete them in core data by this field, or just hide them and not delete at all (its often useful not to really delete objects as they may be deleted occasionally or something else).\n2. More often I don't need ability to delete at all\n. ",
    "rafalwojcik": "@f1nality Look at my response in #162 \n. @henryhardy You can do delete uding data stack, to prevent deleting objects that don't exist in JSON use method swizzling like this:\n```\nimport Foundation\nimport CoreData\nimport DATAFilter\nextension DATAFilter {\noverride public class func initialize() {\n    struct Static {\n        static var token: dispatch_once_t = 0\n    }\n    dispatch_once(&Static.token) {\n        let originalSelector = #selector(DATAFilter.changes(_:inEntityNamed:predicate:operations:localKey:remoteKey:context:inserted:updated:))\n        let swizzledSelector = #selector(DATAFilter.swizzled_changes(_:inEntityNamed:predicate:operations:localKey:remoteKey:context:inserted:updated:))\n        let originalMethod = class_getClassMethod(self, originalSelector)\n        let swizzledMethod = class_getClassMethod(self, swizzledSelector)\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }\n}\n\nclass func swizzled_changes(changes: [AnyObject]!, inEntityNamed entityName: String!, predicate: NSPredicate!, operations: DATAFilterOperation, localKey: String!, remoteKey: String!, context: NSManagedObjectContext!, inserted: (([NSObject : AnyObject]!) -> Void)!, updated: (([NSObject : AnyObject]!, NSManagedObject!) -> Void)!) {\n    DATAFilter.swizzled_changes(changes, inEntityNamed: entityName, predicate: predicate, operations: [.Insert, .Update], localKey: localKey, remoteKey: remoteKey, context: context, inserted: inserted, updated: updated)\n}\n\n}\n```\n. @3lvis since DATAFilter change implementation with new version change, here you have actual code:\n```\nimport Foundation\nimport CoreData\nimport DATAFilter\nextension DATAFilter {\noverride public class func initialize() {\n    struct Static {\n        static var token: dispatch_once_t = 0\n    }\n    dispatch_once(&Static.token) {\n        let originalSelector = #selector(DATAFilter.changes(_:inEntityNamed:predicate:operations:localPrimaryKey:remotePrimaryKey:context:inserted:updated:))\n        let swizzledSelector = #selector(DATAFilter.swizzled_changes(_:inEntityNamed:predicate:operations:localPrimaryKey:remotePrimaryKey:context:inserted:updated:))\n        let originalMethod = class_getClassMethod(self, originalSelector)\n        let swizzledMethod = class_getClassMethod(self, swizzledSelector)\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }\n}\n\nclass func swizzled_changes(changes: [AnyObject]!, inEntityNamed entityName: String!, predicate: NSPredicate!, operations: DATAFilterOperation, localPrimaryKey: String!, remotePrimaryKey: String!, context: NSManagedObjectContext!, inserted: (([NSObject : AnyObject]!) -> Void)!, updated: (([NSObject : AnyObject]!, NSManagedObject!) -> Void)!) {\n    DATAFilter.swizzled_changes(changes, inEntityNamed: entityName, predicate: predicate, operations: [.Insert, .Update], localPrimaryKey: localPrimaryKey, remotePrimaryKey: remotePrimaryKey, context: context, inserted: inserted, updated: updated)\n}\n\n}\n```\n. @GlaucoNeves to prevent deleting objects you can do swizzling like this:\n```\nimport Foundation\nimport CoreData\nimport DATAFilter\nextension DATAFilter {\noverride public class func initialize() {\n    struct Static {\n        static var token: dispatch_once_t = 0\n    }\n    dispatch_once(&Static.token) {\n        let originalSelector = #selector(DATAFilter.changes(_:inEntityNamed:predicate:operations:localKey:remoteKey:context:inserted:updated:))\n        let swizzledSelector = #selector(DATAFilter.swizzled_changes(_:inEntityNamed:predicate:operations:localKey:remoteKey:context:inserted:updated:))\n        let originalMethod = class_getClassMethod(self, originalSelector)\n        let swizzledMethod = class_getClassMethod(self, swizzledSelector)\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }\n}\n\nclass func swizzled_changes(changes: [AnyObject]!, inEntityNamed entityName: String!, predicate: NSPredicate!, operations: DATAFilterOperation, localKey: String!, remoteKey: String!, context: NSManagedObjectContext!, inserted: (([NSObject : AnyObject]!) -> Void)!, updated: (([NSObject : AnyObject]!, NSManagedObject!) -> Void)!) {\n    DATAFilter.swizzled_changes(changes, inEntityNamed: entityName, predicate: predicate, operations: [.Insert, .Update], localKey: localKey, remoteKey: remoteKey, context: context, inserted: inserted, updated: updated)\n}\n\n}\n```\n. ",
    "adrienjt": "\"3lvis self-assigned this 2 days ago\"\nVery much looking forward to it!\n. ",
    "FrancisBehnen": "Shouldn't this be closed as added?\n. I have not used this in a real application yet, but I have a pretty good idea of how I'm going to use it (See use case in DATAFilter PR). If you have any suggestion, feel free to comment.\n. Hi Gerry, thanks for your comment! Do you have an idea on how we can implement this without adding more requisites for users? Elvis likes the idea too, but is hesitant to pull this implementation into the library since it adds the need for a very specific attribute in the entity you want to have two way sync with. If you have any ideas on how to overcome this, please comment in the DATAFilter pull request\n. ",
    "henryhardy": "I'll do this for you and chuck a pull request up this evening for you @iroller \n. Thanks man. Will sort out and update =]\n. ",
    "iroller": "Thanks @3lvis :+1: \n. ",
    "StarWars": "Hi 3lvis, \ngosh, sorry, I did not create a branch for this pull request and my private changes got attached. I am closing this pull request and I'll create a new one.\n. Cool, thanks for the prompt response! I wish I had waited these few minutes, instead of creating a submodule with Sync's fork in my project. I definitely did not expect this bug to be fixed so quick, great job ;)\n. ",
    "GlaucoNeves": "Hi @3lvis \nI had to go with an in house solutions, the limitations I had with Sync were:\n- We use paginated request, but we don't have the identification inside each page, so we didn't find a way to not lose the objects from Core Data that weren't in that page.\n- There wasn't a mechanism to detect duplicates inside the json.\n- We have more than one property that composes the 'primary key'\n- And the freeze time.\nTo solve the GUI freeze I used another Core Data Stack model. To make the background operations I created a backgroundContext with the same persistentStore as my main context, and instead of merge contexts I send a notification saying the new data is in the persistentStore, and then the responsibility goes to the controller to refetch and refresh the view. I don't know if this approach could work for you.\nOnce more, great work, your library served as an inspiration. Congrats!\n. ",
    "wh33ler": "would you mind to make a release for this change? Would appreciate it :+1: \n. ",
    "wainglaister": "Not sure what the failures are, the log says no tests failed but that there are failures...\n. Hi @3lvis :)\nSee the single new commit in https://github.com/wainglaister/Sync/tree/Issue237 for a test case demo. The test is a bit messy as I copied&pasted to put it together quickly but it shows the log of the issue and the test fails as the relationship isn't setup.\n. ",
    "pra85": "No problems :+1: \n. ",
    "macfurin": "Hi @3lvis, there my model : \n\nI'm trying to sync Plan and only workouts with nil distance. I don't want those with distance being deleted or updated because this ones are completed and should not change.\n. Thanks 3lvis, I considered this approach and that's good for my needs.\n. ",
    "Raghvendra7": "\nmy json response is\n```\nrmcorganization:[\n   {\n      id:\"41da96ba-e818-7edf-7658-e26ec2a91600\",\n      name:\"Find My Employee Staging\",\n      web_url:\"http%3A%2F%2Fraremediacompany.in%2F\",\n      domainName:\"findmyemployeestaging\",\n      rmcobject:\"rmcorganization\",\n      rmcphoto:{\n         thumbnailUrl:null,\n         photoUrl:null,\n         orgUrl:null\n      },\n      address:\"G-84, Connaught Place New Delhi -110001\",\n      updated:\"2016-02-26T06:02:49+05:30\",\n      rmcosd:[\n         {\n     },\n     {\n        rmcservice:[\n\n        ],\n        name:\"Version Code And Name\",\n        object:[\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"User State\",\n        object:[\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"User Type\",\n        object:[\n           \"rmcdevice\",\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"Activation Code\",\n        object:[\n           \"rmcperson\",\n           \"rmcdevice\",\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"User Name\",\n        object:[\n           \"rmcdevice\",\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"Location Address\",\n        object:[\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"App Anlaytics\",\n        object:[\n           \"rmcdevice\",\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"App Analytics\",\n        object:[\n           \"rmcdevice\",\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"Password\",\n        object:[\n           \"rmcperson\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"PhotoUrl\",\n        object:[\n           \"rmcperson\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"Email\",\n        object:[\n           \"rmcdevice\",\n           \"rmccheckin\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"IMEI\",\n        object:[\n           \"rmcthing\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"Activated Activation Code\",\n        object:[\n           \"rmcperson\"\n        ]\n     },\n     {\n        rmcservice:[\n           {\n              id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\"\n           }\n        ],\n        name:\"Battery Percentage\",\n        object:[\n           \"rmccheckin\"\n        ]\n     }\n  ],\n  rmcservice:[\n     {\n        id:\"8574eca3-1d30-9d95-bdd2-a73812ff796a\",\n        rmcssd:[\n\n        ]\n     }\n  ]\n\n}\n```\n. what should i do what my mistake\n. ",
    "alexanderkhitev": "I changed my model but I am getting this error \nhttps://www.dropbox.com/s/mppurak0rgqxlc9/newmodel.png?dl=0\n. @3lvis yes, you can. Please look at it https://www.dropbox.com/s/k8gzujrdc587j6t/allStations.json?dl=0\n. @3lvis * Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '* -[NSDictionary initWithObjects:forKeys:]: count of objects (439) differs from count of keys (0)'\n. @3lvis Thank you! I used this library in another project and I liked it\n. ",
    "pschneider": "Thanks for your fast response! Unfortunately I can't show you the real source code from our App. but I will try to reproduce the behaviour in an example Project by today or tomorrow.\n. ",
    "xTheRamon": "@3lvis, thank you for your fast response! Amazing!\nPlease find the complete callstack below:\n\n* Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'to-many key not allowed here'\n* First throw call stack:\n(\n  0   CoreFoundation                      0x000000010e1fdd85 exceptionPreprocess + 165\n  1   libobjc.A.dylib                     0x0000000111d9adeb objc_exception_throw + 48\n  2   CoreData                            0x000000010de54fff -[NSSQLGenerator newSQLStatementForRequest:ignoreInheritance:countOnly:nestingLevel:nestIsWhereScoped:] + 1583\n  3   CoreData                            0x000000010dd477e3 -[NSSQLGenerator newSQLStatementForFetchRequest:ignoreInheritance:countOnly:nestingLevel:nestIsWhereScoped:] + 35\n  4   CoreData                            0x000000010de3a7b8 -[NSSQLAdapter statementForFetchRequest:ignoreInheritance:countOnly:nestingLevel:] + 344\n  5   CoreData                            0x000000010dd4767c -[NSSQLAdapter _newSelectStatementWithFetchRequest:ignoreInheritance:] + 316\n  6   CoreData                            0x000000010dd472f6 -[NSSQLCore newRowsForFetchPlan:] + 118\n  7   CoreData                            0x000000010dd46bac -[NSSQLCore objectsForFetchRequest:inContext:] + 524\n  8   CoreData                            0x000000010dd46549 -[NSSQLCore executeRequest:withContext:error:] + 377\n  9   CoreData                            0x000000010de2beaf __65-[NSPersistentStoreCoordinator executeRequest:withContext:error:]_block_invoke + 3311\n  10  CoreData                            0x000000010de354dd gutsOfBlockToNSPersistentStoreCoordinatorPerform + 189\n  11  libdispatch.dylib                   0x0000000112c423eb _dispatch_client_callout + 8\n  12  libdispatch.dylib                   0x0000000112c26ef5 _dispatch_barrier_sync_f_invoke + 393\n  13  CoreData                            0x000000010de265d5 _perform + 197\n  14  CoreData                            0x000000010dd461b4 -[NSPersistentStoreCoordinator executeRequest:withContext:error:] + 500\n  15  CoreData                            0x000000010dd44973 -[NSManagedObjectContext executeFetchRequest:error:] + 579\n  16  DATAObjectIDs                       0x000000010ee2b2b7 __78+[DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:]_block_invoke + 599\n  17  CoreData                            0x000000010dd8c127 developerSubmittedBlockToNSManagedObjectContextPerform + 199\n  18  CoreData                            0x000000010dd8bfee -[NSManagedObjectContext performBlockAndWait:] + 222\n  19  DATAObjectIDs                       0x000000010ee2aeab +[DATAObjectIDs objectIDsInEntityNamed:withAttributesNamed:context:predicate:] + 491\n  20  DATAFilter                          0x000000010ee20514 +[DATAFilter changes:inEntityNamed:predicate:operations:localKey:remoteKey:context:inserted:updated:] + 468\n  21  Sync                                0x000000010f29db07 _TZFC4Sync4Sync7changesfTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSErrorTT + 3959\n  22  Sync                                0x000000010f296581 _TFE4SyncCSo15NSManagedObject23sync_toManyRelationshipfTCSo25NSRelationshipDescription10dictionaryGVs10DictionarySSPs9AnyObject6parentGSqS0__9dataStackC9DATAStack9DATAStack_T + 5281\n  23  Sync                                0x000000010f296f87 TToFE4SyncCSo15NSManagedObject23sync_toManyRelationshipfTCSo25NSRelationshipDescription10dictionaryGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack_T + 151\n  24  Sync                                0x000000010f299d24 TFFE4SyncCSo15NSManagedObject23sync_fillWithDictionaryFTGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack_T_U_FCSo25NSRelationshipDescriptionT + 1988\n  25  Sync                                0x000000010f29a773 TTRXFo_oCSo25NSRelationshipDescription_dT_zoPs9ErrorType__XFo_iS__dT_zoPS0 + 35\n  26  libswiftCore.dylib                  0x0000000112586999 TFEsPs12SequenceType7forEachfzFzWx9Generator7Element_T_T + 361\n  27  Sync                                0x000000010f294d8b TFE4SyncCSo15NSManagedObject23sync_fillWithDictionaryfTGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack_T + 811\n  28  Sync                                0x000000010f2950c2 TToFE4SyncCSo15NSManagedObject23sync_fillWithDictionaryfTGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack_T + 130\n  29  Sync                                0x000000010f29fdd9 _TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSErrorTTU0_FTGSQGS1_CSo8NSObjectPS2GSQS4T + 537\n  30  Sync                                0x000000010f29ff17 _TTRXFo_oGSQGVs10DictionaryCSo8NSObjectPs9AnyObject_oGSQCSo15NSManagedObject__dT__XFo_iTGSQGS_S0_PS1_GSQS2_iT + 55\n  31  Sync                                0x000000010f29e251 _TPA__TTRXFo_oGSQGVs10DictionaryCSo8NSObjectPs9AnyObjectoGSQCSo15NSManagedObject_dTXFo_iTGSQGS_S0_PS1_GSQS2_iT__ + 81\n  32  Sync                                0x000000010f29ff54 _TTRXFo_iTGSQGVs10DictionaryCSo8NSObjectPs9AnyObjectGSQCSo15NSManagedObjectiT__XFo_oGSQGS_S0_PS1_oGSQS2dT__ + 36\n  33  Sync                                0x000000010f2a002a _TTRXFo_oGSQGVs10DictionaryCSo8NSObjectPs9AnyObjectoGSQCSo15NSManagedObject_dTXFdCb_dGSQCSo12NSDictionary_dGSQS2dT_ + 202\n  34  DATAFilter                          0x000000010ee20d7c +[DATAFilter changes:inEntityNamed:predicate:operations:localKey:remoteKey:context:inserted:updated:] + 2620\n  35  Sync                                0x000000010f29db07 _TZFC4Sync4Sync7changesfTGSaGVs10DictionarySSPs9AnyObject_13inEntityNamedSS9predicateGSqCSo11NSPredicate_6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__TT + 3959\n  36  Sync                                0x000000010f29ec86 _TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject_13inEntityNamedSS9predicateGSqCSo11NSPredicate_9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__TTU_FCSo22NSManagedObjectContextT_ + 374\n  37  Sync                                0x000000010f29c28f _TPATFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSErrorTTU_FCSo22NSManagedObjectContextT_ + 239\n  38  DATAStack                           0x000000010ee3e423 TFFC9DATAStack9DATAStack29performInNewBackgroundContextFFT17backgroundContextCSo22NSManagedObjectContext_T_T_U_FT_T + 67\n  39  DATAStack                           0x000000010ee3e3d7 _TTRXFodT__XFdCb__dT__ + 39\n  40  CoreData                            0x000000010dd8c127 developerSubmittedBlockToNSManagedObjectContextPerform + 199\n  41  libdispatch.dylib                   0x0000000112c423eb _dispatch_client_callout + 8\n  42  libdispatch.dylib                   0x0000000112c2882c _dispatch_queue_drain + 2215\n  43  libdispatch.dylib                   0x0000000112c27d4d _dispatch_queue_invoke + 601\n  44  libdispatch.dylib                   0x0000000112c2a996 _dispatch_root_queue_drain + 1420\n  45  libdispatch.dylib                   0x0000000112c2a405 _dispatch_worker_thread3 + 111\n  46  libsystem_pthread.dylib             0x0000000112f7f4de _pthread_wqthread + 1129\n  47  libsystem_pthread.dylib             0x0000000112f7d341 start_wqthread + 13\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n(lldb) \n. @3lvis did you happen to track down this error? Any idea when this fix will be put through? Cheers and thanks in advance!\n. @3lvis You sir, are an absolute legend! Thanks! Fixed and working as expected. Splendid!\n\nI've noticed one thing though, you might find this interesting. Whenever I pod update, it tries to downgrade Sync to an ancient version. I'm not very familiar with configuring pods, but I've attached the log anyhow. There might be an issue in the config. Anyhow, superb job on the many to many! Great!\nAnalysing dependencies\nRemoving DATAFilter\nRemoving DATAObjectIDs\nRemoving NSEntityDescription-SYNCPrimaryKey\nDownloading dependencies\nUsing AFNetworking (3.1.0)\nUsing Crashlytics (3.7.0)\nInstalling DATAStack 4.3.0 (was 4.2.4)\nUsing Fabric (1.6.7)\nUsing NSDictionary-ANDYSafeValue (0.3.1)\nInstalling NSManagedObject-ANDYMapChanges (0.7)\nInstalling NSManagedObject-ANDYObjectIDs (0.4)\nUsing NSManagedObject-HYPPropertyMapper (3.6.0)\nUsing NSString-HYPNetworking (0.4.0)\n**Installing Sync 0.5.1 (was 1.6.4)**\nGenerating Pods project\nIntegrating client project\nSending stats\nSending stats\nSending stats\nPod installation complete!\n. @3lvis I'm on version 0.39.0. Not using any --pre version.\n. Yep, works perfectly now! Weirdest thing ever. I think we've just found a bug in CocoaPods ;)\nAnyhow, thank you @3lvis for your support and time! Great library, best there is!\n. Setting the date as the primary key is the solution here though. Your approach was right. We'll only have to find out what went wrong. Why didn't it work? Did you use YES as the value? Did you set a remote key too? I believe it is necessary to set both sync.remoteKey and sync.isPrimaryKey. \nPS. The Any (id) object returned from Binary data can simply be typecasted. But let's take the above approach! \ud83d\udc4d\ud83c\udffc. @achirkof Yeah! I believe for isPrimaryKey you explicitly need to set remoteKey too.\nI would definitely try this approach since you want to sort values too.\nRegarding the second approach, well, the value you printed is already an array. You probably have something like this:\nobjc\nid unarchivedObject = [NSKeyedUnarchiver unarchiveObjectWithData:managedObject.userWeight];\nNSLog(@\"%@\", unarchivedObject);\nThe only thing you need to do is:\nobjc\nNSArray *arrayObject = (NSArray *)[NSKeyedUnarchiver unarchiveObjectWithData:managedObject.userWeight];\nNSLog(@\"Array: %@\", arrayObject);\nNSLog(@\"Dictionary entry: %@\", arrayObject[1]); // Should be weightValue: 62.0. @dneykov please see https://github.com/SyncDB/Sync/issues/204#issuecomment-294754585, this is the recommended way to solve this 'bug'.. Hi @3lvis, did you manage to reproduce the issue or do you need some more debug information? \ud83d\udc4d\ud83c\udffc\n. You sir, are an absolute hero. I have just tested this (Your commit from a few seconds ago) and can confirm this is working again!\nSo many thanks @3lvis !!!!!! \u2764\ufe0f\n. I think this is a duplicate of #225. Please correct me if I'm wrong.\n. It sounds like your problem could be solved by using a predicate. Try using that same sync call with the following NSPredicate: remoteID == 42. You will see that only car 42 gets updated/deleted/inserted (.All) and the other values will not be touched.\n. Hi Jonge,\nI think this is the way we want the Sync to work.\nMany API's are not sending all fields, just the changed ones. This has to do with unnecessary overhead. They assume the client keeps the last value in mind.\nI think in your case you should create a method that overwrites the whole object with default values just before the sync. \ud83d\udc4d\ud83c\udffc\n. I'm not sure, but try adding a \u2019hyper.remoteKey\u2019 as well. Might be working after that!\n. ",
    "falkobuttler": "Hey @3lvis, neither of your recommended solutions works in this case though.\nStoring it as NSData would discard all of the benefits of an object model. And I can't use any of the properties as primary key because they are not unique. \nI was thinking more about of either a way of using the parent's primary key as the child's primary key or to generate a unique id based on the parent, i.e. user_578613fc037aaaa70a829 as guid for the address. \nI was able to do something similar with RestKit using the metadata property or by using something like parent.id as allowed name as primary key.\n. ",
    "achirkof": "@3lvis Hi!\nToday I met same problem when I decided to move all my synchronisation to Sync. Before I use Sync only for part of my app model and part of them I managed by \"hand\".\nI would say it is very common situation when you have JSON with object or array of objects without id.\nIn my case JSON looks like this:\njson\n\"_id\" : \"Ryw7TgD69JYEgixL5\", \n...\n    \"userWeight\" : [\n        {\n            \"weightValue\" : 65.0, \n            \"measuredAt\" : ISODate(\"2017-01-11T14:39:11.125+0000\")\n        }, \n        {\n            \"weightValue\" : 62.0, \n            \"measuredAt\" : ISODate(\"2017-03-04T17:55:49.290+0000\")\n        }, \n        {\n            \"weightValue\" : 63.4, \n            \"measuredAt\" : ISODate(\"2017-03-07T22:15:00.290+0000\")\n        }\n    ], \n    ...\nI don't need id's for userWeight in my application and add it only to be able to sync is not very clean way.\nI also tried to save userWeight as Binary Data, but I can't work whit it after unarchive because it returns Any instead of Array.\nI also tried to set measuredAt as sync.isPrimaryKey but it didn't help.\nMaybe we can think on another possible solution how to create related objects without id?. Hi @xTheRamon !\nYes, the idea to use Date field as id make sense. I set only property sync.isPrimaryKey equal to true for measuredAt and didn't set sync.remoteKey because remote field name in JSON equal to name of the field in core data entity. I thought it only needs when field name different. I will set also sync.remoteKey and check tonight.\nAbout second approach. After unarchive the value and print it I see somthing like this:\n__NSArrayI\n(\n        {\n            \"weightValue\" : 65.0, \n            \"measuredAt\" : ISODate(\"2017-01-11T14:39:11.125+0000\")\n        }, \n        {\n            \"weightValue\" : 62.0, \n            \"measuredAt\" : ISODate(\"2017-03-04T17:55:49.290+0000\")\n        }, \n        {\n            \"weightValue\" : 63.4, \n            \"measuredAt\" : ISODate(\"2017-03-07T22:15:00.290+0000\")\n        }\n    ) \nI don't know how to deal with it. Ideally I want to get array of dictionaries:\n[\n    [\"weightValue\" : 65.0, \"measuredAt\" : ISODate(\"2017-01-11T14:39:11.125+0000\")], \n    [\"weightValue\" : 62.0,  \"measuredAt\" : ISODate(\"2017-03-04T17:55:49.290+0000\")], \n    [\"weightValue\" : 63.4,  \"measuredAt\" : ISODate(\"2017-03-07T22:15:00.290+0000\")]\n]\nbecause I want to sort an array by date and get weight value.. My difficulty is in type of fitnesProfile entity because it is array of single value:\nswift\nlet requestFitnesProfile = NSFetchRequest<NSFetchRequestResult>(entityName: \"FitnesProfile\")\nlet userFitnesProfile = try! dataStack.mainContext.fetch(requestFitnesProfile) as! [FitnesProfile]\nNow userFitnesProfile is array of single FitnesProfile. After that i do:\nswift\nlet weight = NSKeyedUnarchiver.unarchiveObjectWithData(userFitnesProfile[0].userWeight as! Data)\nThen weight is __NSArrayI. As I understand it is Obj-C NSArray type. And after I can't typecast it. I have no access to Xcode right now to check. I will try both approaches tonight.. @xTheRamon you are right. When I set both properties isPrimaryKey and remoteKey for measuredAt field synchronisation works as expected. \nAbout second approach. I can't get subscripts of weight[0] because type Any have no subscriptions. And I don't understand how to cast it to Array. I also have no any methods to do anything with weight.\n\n. @3lvis unfortunately can't\n\n . @dneykov no, I have decided to use separate entity.. Hi @3lvis !\n\nThe bug is related to the relationship name workoutExercises. Instead of using it as is, is converting it to workoutexercises, so it's failing. I'll look for a fix for this, meanwhile you could exercises instead of workoutExercises until a better solution is posted.\n\nYes, you are right, this is a cause. And also, because I receive from server exercises array named workoutExercises, I have to add hyper.remoteKey with value workoutExercises to my relation named exercises.\nI don't sure if it is a bug, maybe you just need to add some instructions to documentation?\n. Now it is working well! Thanks!\n. Oh, my goodness!\nThank you @3lvis for the idea \n\nmaybe Core Data is releasing the object since the controller that invoke it is no longer being used\n\nThe reason was that function fetchCurrentWorkouts calls once when view loads and destroy after and remove context. That's why I have entity: <null>.\nDeclaring constant dataStack \n``` swift\nclass WorkoutSectionCell: BaseUserProfileCell, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\nlet dataStack: DATAStack = DATAStack(modelName: \"smartworkout_rest\")\n\n//... rest code\n```\nand call it in fetch request\nswift\nfunc fetchCurrentWorkouts() {\n        let request = NSFetchRequest(entityName: \"Workout\")\n        self.workouts = try! dataStack.viewContext.executeFetchRequest(request) as! [Workout]\n        print(workouts)\n        self.collectionView.reloadData()\n    }\nsolve the issue.\n. I don't use storyboard :-) because it is more easy for me to use code. But anyway it will be very interesting. I'm just studying iOS development and any examples will be very useful for me.\nThanks! \n. Yes, already studying it. Great example, thanks! You made perfect pod's. I spend several days dealing with native JSON parsing and saving data to Core Data. Sync make this job much simpler and just with several lines of code. Awesome!\n. Hi @3lvis !\nI can confirm that if I set field name to eventSourceID and hyp.remoteKey = eventSourceId for Calendar and\nplannedToIDs for Workout field ZEVENTSOURCEID have been filled by workout id's now.\nIn Workout entity there is no new field and I think it is not necessary.\nEverything works!\nThanks.\n. Thanks @3lvis !\nI\u2019ll check it a little bit later today. . Looks like it's OK now. Thanks!. Hi @3lvis !\nIt's strange, but pointing to pod 'Sync', '~> 4' I still have this issue. Only if I pointing directly to commit issue not appear.. ",
    "dneykov": "I'm stuck with same problem cannot use unarchiveObject.\nAny advice?. My situation is little bit different. Here is my json:\njson\n{\n    \"id\": \"2\",\n    \"name\": \"Test name\",\n    \"description\": \"test\",\n    \"max_distance_walk\": \"250\",\n    \"max_fee_hour\": \"3\",\n    \"options\": {\n        \"option1\": \"0\",\n        \"option2\": \"0\",\n        \"option\": \"0\"\n    },\n    \"updated_at\": 1486644111\n}\nI have options as Binary Data and I want to access them as Dictionary as it says here https://github.com/SyncDB/Sync#retrieving-mapped-dictionaries\nIs returning Any and I cannot convert it to anything.. Finally it works. Here is my solution.\n``` swift\nfunc checkOption(key: String) -> Bool {\n    guard let options = self.getOptions() as? [String: String] else {\n        return false\n    }\nguard let option = options[key] else {\n    return false\n}\n\nreturn option.isEqual(\"1\")\n\n}\nprivate func getOptions() -> Any? {\n    return NSKeyedUnarchiver.unarchiveObject(with: self.options! as Data)\n}\n. Hi,\nno my case is the other way. Here is example:\nJSON\n[\n  {\n    \"id\": 1,\n    \"first_name\": \"Daniel\",\n    \"timestamp\": 1486756142\n  }\n]\nCore Data\n```\nUser\n\nid: Int\nfirstName: String\n```\nThe example above will not be inserted, if I remove timestamp from the response everything will work. In my exact case there are more fields that should be ignored, this is just basic example.\n\nThanks.. That is strange. I will give it another shot next week. Thanks for quick replies.. That was quick :)\nIf I have time I can make PR to fix the warnings in 2.*\nEdit: Already saw your commit. Big Thanks.. I cannot use 2.7.1 because it requires iOS 9.0.\nI thought iOS 9.0 is required for Sync 3+. This is awesome.\nI never had so quick response on GitHub :). Never mind I was checking before sync completion. Hi,\nI was using 4.0.1 and just updated to 4.0.2 Installing Sync 4.0.2 (was 4.0.1) and delete derived data but warnings still appears. I'm using real device for testing.\nThanks.. Any suggestions where to look about the warnings?. Sorry for opening this issue is totally logical error, nothing related to the library.. Hi @3lvis,\nThanks for your quick reply. Sync is great library. Can you give me any advise how can I achieve that? Will be better if I iterate over my response and insert everything manually?. ",
    "Jonge": "I have some crash logs, but I'm pretty sure it is my fault, as I am not yet cancelling Sync operations. So there might be an issue when parsing a JSON with an object that meanwhile gets deleted, but not 100 % sure.\nSorry those are a bit mangled, this is how i got it from HockeyApp.\n1   Sync                                 0x00000001010b04a4 _TTSf4g_n___TFE4SyncCSo15NSManagedObject18sync_copyInContextfCSo22NSManagedObjectContextS0_ (NSManagedObject+Sync.swift:20)\n2   Sync                                 0x00000001010afb08 _TToFE4SyncCSo15NSManagedObject18sync_copyInContextfCSo22NSManagedObjectContextS0_ (NSManagedObject+Sync.swift:0)\n3   Sync                                 0x00000001010baab4 _TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject___13inEntityNamedSS6parentCSo15NSManagedObject9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__T___T_U_FCSo22NSManagedObjectContextT_ (Sync.swift:159)\n4   Sync                                 0x00000001010b942c _TPA__TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject___13inEntityNamedSS6parentCSo15NSManagedObject9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__T___T_U_FCSo22NSManagedObjectContextT_ (Sync.swift:0)\n5   CoreData                             0x000000018426d08c developerSubmittedBlockToNSManagedObjectContextPerform + 192\n1   Sync                                 0x00000001010a578c _TTSf4gs_g_g_g_n___TFE4SyncCSo22NSManagedObjectContext15sync_safeObjectfTSS15localPrimaryKeyGSqPs9AnyObject__6parentGSqCSo15NSManagedObject_22parentRelationshipNameGSqSS__GSqS2__ (NSManagedObjectContext+Sync.swift:20)\n2   Sync                                 0x00000001010a5058 _TToFE4SyncCSo22NSManagedObjectContext15sync_safeObjectfTSS15localPrimaryKeyGSqPs9AnyObject__6parentGSqCSo15NSManagedObject_22parentRelationshipNameGSqSS__GSqS2__ (NSManagedObjectContext+Sync.swift:0)\n3   Sync                                 0x00000001010a0200 _TTSf4g_n___TFE4SyncCSo15NSManagedObject18sync_copyInContextfCSo22NSManagedObjectContextS0_ (NSManagedObject+Sync.swift:20)\n4   Sync                                 0x000000010109fb08 _TToFE4SyncCSo15NSManagedObject18sync_copyInContextfCSo22NSManagedObjectContextS0_ (NSManagedObject+Sync.swift:0)\n5   Sync                                 0x00000001010aaab4 _TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject___13inEntityNamedSS6parentCSo15NSManagedObject9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__T___T_U_FCSo22NSManagedObjectContextT_ (Sync.swift:159)\n6   Sync                                 0x00000001010a942c _TPA__TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject___13inEntityNamedSS6parentCSo15NSManagedObject9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__T___T_U_FCSo22NSManagedObjectContextT_ (Sync.swift:0)\n7   CoreData                             0x000000018549508c developerSubmittedBlockToNSManagedObjectContextPerform + 192\nAlso, I am getting these crashes in DATAFilter, which I would say are not my fault, but again not sure. Didn't yet have the time to dig into it. Also happens much more often than the ones above.\n```\nApplication Specific Information:\n Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: ' -[NSDictionary initWithObjects:forKeys:]: count of objects (6) differs from count of keys (2)'\n4   DATAFilter                           0x0000000100ae1404 +[DATAFilter changes:inEntityNamed:predicate:operations:localPrimaryKey:remotePrimaryKey:context:inserted:updated:] (DATAFilter.m:43)\n5   Sync                                 0x0000000101011928 TTSf4g_gs_g_g_g_g_n_g_dTZFC4Sync4Sync7changesfTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate_6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation10completionGSqFT5errorGSqCSo7NSError__TT (Sync.swift:219)\n6   Sync                                 0x000000010100fd5c _TZFC4Sync4Sync7changesfTGSaGVs10DictionarySSPs9AnyObject_13inEntityNamedSS9predicateGSqCSo11NSPredicate_6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation10completionGSqFT5errorGSqCSo7NSError__TT (Sync.swift:191)\n7   Sync                                 0x000000010100a880 _TTSf4g_g_g_g_n_n_TFE4SyncCSo15NSManagedObject23sync_toManyRelationshipfTCSo25NSRelationshipDescription10dictionaryGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation_T (NSManagedObject+Sync.swift:165)\n8   Sync                                 0x0000000101007e3c TToFE4SyncCSo15NSManagedObject23sync_toManyRelationshipfTCSo25NSRelationshipDescription10dictionaryGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation_T (NSManagedObject+Sync.swift:0)\n9   Sync                                 0x000000010100cc34 TTSf4g_g_g_g_g_nTFFE4SyncCSo15NSManagedObject23syncfillWithDictionaryFTGVs10DictionarySSPs9AnyObject6parentGSqS0__9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation_T_U_FCSo25NSRelationshipDescriptionT (NSManagedObject+Sync.swift:46)\n10  Sync                                 0x00000001010088cc TTSf4g_g_g_n_nTFE4SyncCSo15NSManagedObject23syncfillWithDictionaryfTGVs10DictionarySSPs9AnyObject6parentGSqS0__9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation_T (NSManagedObject+Sync.swift:0)\n11  Sync                                 0x0000000101007c34 TToFE4SyncCSo15NSManagedObject23sync_fillWithDictionaryfTGVs10DictionarySSPs9AnyObject__6parentGSqS0__9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation_T (NSManagedObject+Sync.swift:0)\n12  Sync                                 0x0000000101013260 TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation10completionGSqFT5errorGSqCSo7NSErrorTTU_FGSQGS1_CSo8NSObjectPS2T_ (Sync.swift:215)\n13  Sync                                 0x0000000101012144 TPA__TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation10completionGSqFT5errorGSqCSo7NSErrorTTU_FGSQGS1_CSo8NSObjectPS2__T (Sync.swift:0)\n14  Sync                                 0x000000010101337c _TTRXFo_oGSQGVs10DictionaryCSo8NSObjectPs9AnyObject_dT_XFdCb_dGSQCSo12NSDictionarydT (Sync.swift:0)\n15  DATAFilter                           0x0000000100ae16b8 +[DATAFilter changes:inEntityNamed:predicate:operations:localPrimaryKey:remotePrimaryKey:context:inserted:updated:] (DATAFilter.m:72)\n16  Sync                                 0x0000000101011928 _TTSf4g_gs_g_g_g_g_n_g_dTZFC4Sync4Sync7changesfTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS9predicateGSqCSo11NSPredicate_6parentGSqCSo15NSManagedObject_9inContextCSo22NSManagedObjectContext9dataStackC9DATAStack9DATAStack10operationsVSC19DATAFilterOperation10completionGSqFT5errorGSqCSo7NSError__TT (Sync.swift:219)\n17  Sync                                 0x0000000101012fe0 _TFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject_13inEntityNamedSS6parentCSo15NSManagedObject9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError__TTU_FCSo22NSManagedObjectContextT_ (Sync.swift:168)\n18  Sync                                 0x000000010101142c _TPATFZFC4Sync4Sync7changesFTGSaGVs10DictionarySSPs9AnyObject13inEntityNamedSS6parentCSo15NSManagedObject9dataStackC9DATAStack9DATAStack10completionGSqFT5errorGSqCSo7NSError_T_T_U_FCSo22NSManagedObjectContextT (Sync.swift:0)\n19  CoreData                             0x00000001837d508c developerSubmittedBlockToNSManagedObjectContextPerform + 192\n```\nI might try to do a bit of debugging to make sure that I am doing something wrong.\nThank you so far!\n. Hi again.\nThe only crash I really care about now is the last one in DATAFilter. From my observation, it happens when the primary keys are not unique (e.g. when the JSON contains multiple primary keys of equal values).\nWhile I agree that it should not really happen if everything is correctly set up, it can't be guaranteed that the output from JSON is valid.\nI think in this case, the error could be easily caught (if changes.count != remoteObjectIDs.count on line 42 in DATAFilter.m) and probably just throw an error.\nI'm pretty busy right now, but I can try to find some time for a pull request if needed.\n. Sure, on it, will add the model + JSON at least.\n. @3lvis Added sample model, JSON and unit tests for this (single-level superentities only).\n. Oh alright then. Guess our APIs have different approaches, but that makes sense.\nI wanted to keep it simple, but I think processing the JSON before passing it to Sync should work fine.\nThanks to both of you!\n. @3lvis You're the man! Many thanks! :) Will try it out soon.. OK so the issue is that parentRelationship is nil and is not automatically created.\nThe workaround is to do something like this in the perform(...) method in Sync.swift. (Which is ugly but works.)\n```\n    func perform(using context: NSManagedObjectContext) {\n        do {\n            if let parent = parent, parentRelationship == nil {\n                let safeParent = parent.sync_copyInContext(context)\n                guard let entity = NSEntityDescription.entity(forEntityName: entityName, in: context) else { fatalError(\"Couldn't find entity named: (entityName)\") }\n                let relationships = entity.relationships(forDestination: parent.entity)\n                var predicate: NSPredicate?\n                let firstRelationship = relationships.first\n            if let firstRelationship = firstRelationship {\n                predicate = NSPredicate(format: \"%K = %@\", firstRelationship.name, safeParent)\n            }\n\n            try Sync.changes(self.changes, inEntityNamed: self.entityName, predicate: predicate, parent: safeParent, parentRelationship: firstRelationship?.inverseRelationship, inContext: context, operations: self.filterOperations, shouldContinueBlock: { () -> Bool in\n                return !self.isCancelled\n            }, objectJSONBlock: { objectJSON -> [String: Any] in\n                return self.delegate?.sync(self, willInsert: objectJSON, in: self.entityName, parent: self.parent) ?? objectJSON\n            })\n        } else {\n            try Sync.changes(self.changes, inEntityNamed: self.entityName, predicate: self.predicate, parent: self.parent, parentRelationship: self.parentRelationship, inContext: context, operations: self.filterOperations, shouldContinueBlock: { () -> Bool in\n                return !self.isCancelled\n            }, objectJSONBlock: { objectJSON -> [String: Any] in\n                return self.delegate?.sync(self, willInsert: objectJSON, in: self.entityName, parent: self.parent) ?? objectJSON\n            })\n        }\n    } catch let error as NSError {\n        print(\"Failed syncing changes \\(error)\")\n    }\n\n    self.updateExecuting(false)\n    self.updateFinished(true)\n}\n\n```\nI'm not sure how we want to behave when for instance:\n- a predicate is already set,\n- both parent relationship and parent are set,\n- only parent relationship is set.. I understand. Well the notifications are sent every time you save() the main context. In theory, we should merge to the main context and save() it only after syncing all objects.\nHowever, DataStack uses notifications and merges to main context on every background context save, and I don't see an easy way to change that currently.. Yes, I know. :(\nSorry I only have theoretical knowledge here, but it should be possible to have an \"intermediate\" context, fetch and update the relationships there, then merge into main context. But again, doesn't seem easy to do with the notifications merging it into main context every time.\nI might try looking at this in-depth, mainly how the relationships are fetched and updated.. ",
    "kikanny": "Thanks for you reply @3lvis. If I don't pass the status and page predicates, Sync would update the existing objects like you said. However, it would also delete other entries that are not in this status or page. I've tested it without predicates and thats what seems to happen. I hope that made sense?\n. Hi @3lvis ! Apologies for the really late reply. Got a bit busy! With regards to your suggestion about limiting the operations to Insert and Update, here's the problem. For example, if object A exists in the second page that we receive from the API and it doesn't exist any more in a consecutive call because the status has changed or the object has been removed, we would want to perform a delete operation for this object within that page.\n. @3lvis I'm sorry! I got very busy and forgot about this. For now, I've removed this block of code in our apps. To give you an idea, modify the 237.json file to the following.\n[\n {\n    \"id\": 1,\n    \"slides\": [\n      {\n        \"id\": 3\n      },\n      {\n        \"id\": 2\n      },\n      {\n       \"id\": 1\n      }\n    ]\n }\n]\nNow, if you run the test327OrderedToMany() test, you should see the out of bounds crash.. ",
    "tboetig": "Which release did this fix make it into? Does it require updating to v2 ?\n. ",
    "dersvenhesse": "Yep, using a predicate should work. Thanks. \nBut anyhow, shouldn't there be a method allowing to use a specific context and set operations as well?\n. Since the data structure itself does support ordering, I don't see why an extra attribute should be used to order. ;) \nFurthermore, the ordering might be an attribute on the relation rather than an object. For example, when using images, the same image might be on first place in one object, but on third in an other.\nI do think as well it will be necessary to compare indexes and then use something like moveObjectsAtIndexes or exchangeObjectAtIndex. But, tbh, I don't have an exact implementation in mind yet.\n. I just checked this again with 1.13.1. Now it works for me. \ud83d\udc4d\n. Since your JSON contains two entries respectively two model instances, Sync is totally right to create two objects as well.\n. @3lvis \nI do think I solved the problem for syncing lists with ids. Do you mind taking a look at that and maybe help me out by finding a similar solution for sync_toManyRelationship? Thanks.\n. @3lvis works for me. Thanks a lot!\n. Do you mean SwiftyJSON? \nIn my opinion there is no need to convert your response to JSON and convert it back directly to [[String : Any]]. Why don't you just use response.data as! [[String : Any]] directly?\nIf you intent to stay with SwiftyJSON their methods like json.rawData() or json.rawString() or the attribute json.object might come handy.. I suppose an auto increment will not suit your case either. \nAn example: The first time your JSON will be inserted with the IDs 1 and 2 and the second time the IDs will be 3 and 4. The existing products in CoreData won't be updated when auto incrementing. So you'll need a way to recognize existing entries, e.g. by name. But that will be basically the same as using name as isPrimaryKey in Sync.\nAlternatively you should update your API to deliver IDs as well.   . ",
    "Pyroscout": "@3lvis do you know if this is correct or if I am just doing something wrong?\n. @3lvis Thanks for your quick response! \nI made sure that the first Sync was completed before the second call was made and the information is still being inserted twice. I am using NSNotificationCenter to track changes. Here is what is being called the first time:\nNSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(Networking.changeNotification(_:)), name: NSManagedObjectContextObjectsDidChangeNotification, object: self.dataStack.mainContext)\nSync.changes(JSON, inEntityNamed: entity, dataStack: self.dataStack, operations: [.All], completion: { error in\n            NSNotificationCenter.defaultCenter().removeObserver(self, name: NSManagedObjectContextObjectsDidChangeNotification, object: nil)\n})\nAnd here is the second call:\nNSNotificationCenter.defaultCenter().addObserver(self, selector: #selector(Networking.changeNotification(_:)), name: NSManagedObjectContextObjectsDidChangeNotification, object: self.dataStack.mainContext)\nSync.changes(JSON, inEntityNamed: entity, dataStack: self.dataStack, operations: [.Insert], completion: { error in\n           NSNotificationCenter.defaultCenter().removeObserver(self, name: NSManagedObjectContextObjectsDidChangeNotification, object: nil)\n})\nJSON contains the same data both times\nAny other ideas?\n. I went home for the day a bit ago so I will get those to you tomorrow. How would you like me to give you that information though? Im pretty new to github so I dont know what the best way is\n. Here is the Core Data model and the example of my JSON\n\n\n. Yes\n. @osmarogo All of my keys are Strings so that definitely is not what is wrong with mine. Thanks anyway\n. ",
    "osmarogo": "Hi everyone.\nI'm facing a similar issue with my sync process.\nAfter some testing, I noticed that SyncDemoApp has a primary key defined as String type, the model I am working on has a primary Key defined as NSNumber.\nI've changed the primary key in my model as String type, after that, the process works as expected.\n. ",
    "normand1": "@3lvis I'd be interested in an example too, thanks!\n. ",
    "kolisko": "SOLVED\nit is not a bug - it is my stupidity - is neccessary to open the project 'em' as\nopen em.xcworkspace\nand NOT\nopen em.xcodeproj\n. ",
    "AnnieNinaJoyceV": "Found what was wrong.. Should have used SportsDetailCD entity instead of SportsCD since I'm passing the ctlphotos value from response.\n. Yes, that fixed it. Thanks for the help! \ud83d\udc4d \n. @3lvis thank you for having a look on this issue. The original response doesn't have 'id' included. Thus mine has category and film as primary keys. \n. @3lvis ah, I'm not sure.. Even it works for me if I use swift 2.3 branch. The live app uses 2.3 branch. Is there something I might have probably missed? \n. Or I will try to make a demo project and share by Monday? \n. Sure, great weekend to you too :) \n. Hi @3lvis I hope you had a great weekend. Here is a very rough demo project for this issue - https://www.dropbox.com/s/mcmrigrnczxh5ku/Sync285.zip?dl=0\nPlease let me know after checking :)\n. I tried unchecking the default 0, it still returns 0.\nThe resultCode variable has the same settings and it holds the values just fine.\n\n. Unchecking Use scalar type returns nil.\n. Thanks for the help @3lvis \nI didn't know that Sync will automatically map _id as _ID, that was the error.\n. ",
    "tbechtum": "Thanks for your quick reply 3lvis!\nYes importing CoreData and the test unit is compiling, the exception is at runtime in the test environment.\n. Thanks for your immediate reply. Here is a JSON example, so I must adapt the date mapping e.g. \"2015-11-09T18:05:32\\\", how is the best approach for this with Sync?\n{\\\"AchievementApprovedOn\\\":null,\\\"Begin\\\":\\\"2016-01-01T00:00:00\\\",\\\"ChildId\\\":null,\\\"Created\\\":\\\"2015-11-09T18:05:32\\\",\\\"CurrentWorkflowId\\\":null,\\\"Decisions\\\":null,\\\"DepartmentTypeId\\\":2,\\\"Description\\\":\\\"Es m\u00fcssen Mitarbeiter des Facility Management umgeschult werden.\\\",\\\"DescriptionDe\\\":null,\\\"DescriptionIt\\\":null,\\\"DoneComment\\\":null,\\\"DoneOn\\\":null,\\\"End\\\":\\\"2016-12-31T23:59:59\\\",\\\"GoalApprovedOn\\\":null,\\\"Id\\\":10343,\\\"IsEditable\\\":false,\\\"IsIndependent\\\":false,\\\"IsLocked\\\":false,\\\"IsYearGoal\\\":true,\\\"LastModifyStamp\\\":\\\"username\\\",\\\"ManDaysAchieved\\\":null,\\\"ManDaysPlanned\\\":null,\\\"Modified\\\":\\\"2015-11-09T18:05:32\\\",\\\"NextDeciderUsername\\\":\\\"\\\",\\\"NextDeciderFullName\\\":null,\\\"Objective\\\":\\\"Erstellung eines Ma\u00dfnahmenkataloges mit Deadlines der einzelnen Ma\u00dfnahmen, welche entsprechend umzusetzen sind.\\\",\\\"ObjectiveDe\\\":null,\\\"ObjectiveIt\\\":null,\\\"OwnerDepartmentId\\\":109952,\\\"OwnerDomain\\\":\\\"some\\\",\\\"OwnerHrisId\\\":201143,\\\"OwnerName\\\":\\\"Full name\\\",\\\"OwnerSubdepartmentId\\\":null,\\\"OwnerUsername\\\":\\\"username\\\",\\\"ParentId\\\":null,\\\"PointsAchieved\\\":null,\\\"PointsToAchieve\\\":null,\\\"ReferenceGoalId\\\":10122,\\\"ReferenceGoalTitle\\\":null,\\\"Status\\\":\\\"Draft\\\",\\\"Title\\\":\\\"Umsetzung von Synergien\\\",\\\"TitleDe\\\":null,\\\"TitleIt\\\":null,\\\"Year\\\":2016,\\\"OwnerImageUrl\\\":\\\"http://test.scientificnet.org/Image/Get/?domain=some&username=someone\\\"}\n. Hi Elvis!\nin your documentation on github you are using e.g. \"2014-03-11T19:11:00+00:00\u201d. We are using e.g. \"2015-11-09T18:05:32\u201d. How to adapt to our format?\nThanks for your help,\ncheers,\nThomas\nOn 17 Aug 2016, at 10:17, Elvis Nu\u00f1ez notifications@github.com<mailto:notifications@github.com> wrote:\n@tbechtumhttps://github.com/tbechtum This is related to date parsing, nothing to do with testing. Could you share an example of the JSON you're using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/hyperoslo/Sync/issues/256#issuecomment-240344566, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AH4doftofvij61-pOqwdtxq6GrIibn1Xks5qgsN8gaJpZM4JmMCh.\n. I was using 1.11.2 by pod that is the newest one I can get with cocoa pods.\nSent from my iPhone\nOn 17 Aug 2016, at 11:16, Elvis Nu?ez notifications@github.com<mailto:notifications@github.com> wrote:\nFixed on https://github.com/hyperoslo/Sync/releases/tag/1.11.3\nPlease update your Sync pod and try again :)\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/hyperoslo/Sync/issues/256#issuecomment-240358011, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AH4doYBLxWYAhhJZ7YV7OrFkOJiXFWblks5qgtFDgaJpZM4JmMCh.\n. OK I pre-downloaded 1.11.3 and the date mapping is working now again\nusing pod 'Sync', :git => 'https://github.com/hyperoslo/Sync.git'\nThanks a lot,\nCheers\nThomas\nBegin forwarded message:\nFrom: Bechtum Thomas Thomas.Bechtum@unibz.it<mailto:Thomas.Bechtum@unibz.it>\nSubject: Re: [hyperoslo/Sync] Xcode testing does not work (#256)\nDate: 17 August 2016 at 11:31:00 GMT+2\nTo: hyperoslo/Sync reply@reply.github.com<mailto:reply@reply.github.com>\nI was using 1.11.2 by pod that is the newest one I can get with cocoa pods.\nSent from my iPhone\nOn 17 Aug 2016, at 11:16, Elvis Nu\u00f1ez notifications@github.com<mailto:notifications@github.com> wrote:\nFixed on https://github.com/hyperoslo/Sync/releases/tag/1.11.3\nPlease update your Sync pod and try again :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/hyperoslo/Sync/issues/256#issuecomment-240358011, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AH4doYBLxWYAhhJZ7YV7OrFkOJiXFWblks5qgtFDgaJpZM4JmMCh.\nBegin forwarded message:\nFrom: Thomas Bechtum TBechtum@unibz.it<mailto:TBechtum@unibz.it>\nSubject: Re: [hyperoslo/Sync] Xcode testing does not work (#256)\nDate: 17 August 2016 at 11:16:42 GMT+2\nTo: hyperoslo/Sync reply@reply.github.com<mailto:reply@reply.github.com>\nHi Elvis!\nin your documentation on github you are using e.g. \"2014-03-11T19:11:00+00:00\u201d. We are using e.g. \"2015-11-09T18:05:32\u201d. How to adapt to our format?\nThanks for your help,\ncheers,\nThomas\nOn 17 Aug 2016, at 10:17, Elvis Nu\u00f1ez notifications@github.com<mailto:notifications@github.com> wrote:\n@tbechtumhttps://github.com/tbechtum This is related to date parsing, nothing to do with testing. Could you share an example of the JSON you're using?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/hyperoslo/Sync/issues/256#issuecomment-240344566, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AH4doftofvij61-pOqwdtxq6GrIibn1Xks5qgsN8gaJpZM4JmMCh.\n. ",
    "gerrypower": "This would be an excellent addition - two way sync open source is rare.\n. ",
    "RobinFalko": "Thanks for looking into into it and keep up the great work. I really like your framework. \n. ",
    "smartjx": "Hi 3lvis,\nThank you so much for your reply. \nPlease find my json data object below. Thank you for taking time for investigate this issue again.\n[{\"Project_ID\":1,\"Name\":\"\u5de5\u7a0b\u52a0\u56fa\\r\\n\",\"Type\":null,\"Project_FB_ID\":1,\"Scale\":\"\u226420m\\r\\n\",\"OrderNo\":100,\"UpdateTime\":\"2016-01-09T21:29:29.41\",\"Status\":0},{\"Project_ID\":2,\"Name\":\"\u5de5\u7a0b\u964d\u6c34\\r\\n\",\"Type\":null,\"Project_FB_ID\":1,\"Scale\":\"\u226420m\\r\\n\",\"OrderNo\":100,\"UpdateTime\":\"2016-01-09T21:29:29.41\",\"Status\":0}]\n. I can't find anything wrong during the date parsing.  I add the following line to parse the 2016-01-09T21:29:29.41 in order to prevent it from falls to else condition but still crash.\nNSDate+HYPPropertyMapper.m \n- (NSDate )hyp_dateFromISO8601String:(NSString )dateString\n  {\n  else if (originalLength == 23 && originalString[19] == '.') {\n          strncpy(currentString, originalString, 19);\n          //hasTimezone = YES;\n          hasMiliseconds = YES;\n      }\nelse {\n            strncpy(currentString, originalString, originalLength > 24 ? 24 : originalLength);\n        }\n}\n. Hi 3lvis,\nSorry for waste your time investigate this issue. This is non-issue. It's the MBPROGRESSHUD that I used to load the sync stopped the process that right after date parsing.\nI closed this issue and thank you again for your time.  \nAs I searched online, most of the time signal sigabrt related to storyboard or view related issues.\n. Hi 3lvis,\nI have to re-open this issue. And I found it's not MBProgressHUD issues. \nMy app always crash at the the Sync.changes.  \nPlease refer to the project below. Thank you.\n. I've locate the crash due to  hyp_dateFromDateString date parsing\nI comment it out and it works fine now. But the issue still hasn't resolved.\n```\n//  value = [NSDate hyp_dateFromDateString:remoteValue];\n    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n    formatter.dateFormat = @\"yyyy-MM-dd HH:mm:ss\";\n\n    value = [formatter dateFromString:remoteValue];\n\n```\n. Hi 3lvis,\nI found the reason. Any unkonwn date format will crash \nNSDate+HYPPropertyMapper.m-> +hyp_dateFromISO8601String\nat line 164 \nstruct tm tm;\n        if (strptime(currentString, \"%FT%T%z\", &tm) == NULL) {\n            return nil;\n        }\nI add my date format here and it works now. \n```\n      // Copy all the date excluding the miliseconds.\n        // Current date: 2014-03-30T09:13:00.000\n        // Will become:  2014-03-30T09:13:00\n        // Unit test G\n        else if (originalLength == 23 && originalString[19] == '.') {\n            strncpy(currentString, originalString, 19);\n            hasMiliseconds = YES;\n        }\n```\n. But still, I don't get why this works on simulator without any crash. \n. Hi 3lvis,\nThank you for your confirmation. I've modified my local copy of NSDate+HYPPropertyMapper.m and   commited to your repo:NSManagedObject-HYPPropertyMapper/Source/NSDate+HYPPropertyMapper.m.\nIf you are ok with the change , please kindly merge it, thank you. \n. ",
    "realtec": "I would love to see this implemented since I have the same issue while syncing deeper nested json from my API.\nI'm ending up with duplicated records atm.\nI can provide more information about the exact issue if needed.\n. Alright here is my situation.\nWhen sucessfully authenticated I want to fetch most of the user data in one call.\nThis is my data model:\n\nFor some reason xcode wants me to specify a reverse side for \"owner\" which is a player, thats why I dont see the relation in the diagram.\nMy JSON response (I left out the timestamps for simplicity):\njson\n{\n  \"id\": 1,\n  \"email\": \"my@email.com\",\n  \"players\": [\n    {\n      \"id\": 1,\n      \"name\": \"Player 1\",\n      \"game\": {\n        \"id\": 1,\n        \"name\": \"Game 1\"\n      },\n      \"player_group\": {\n        \"id\": 1,\n        \"name\": \"PlayerGroup 1\",\n        \"players\": [\n          {\n            \"id\": 2,\n            \"name\": \"Player 2\",\n            \"game\": {\n              \"id\": 1,\n              \"name\": \"Game 1\"\n            }\n          }\n        ],\n        \"game\": {\n          \"id\": 1,\n          \"name\": \"Game 1\"\n        }\n      }\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Player 2\",\n      \"game\": {\n        \"id\": 1,\n        \"name\": \"Game 1\"\n      },\n      \"player_group\": {\n        \"id\": 1,\n        \"name\": \"PlayerGroup 1\",\n        \"owner\": {\n          \"id\": 1,\n          \"name\": \"Player 1\",\n          \"game\": {\n            \"id\": 1,\n            \"name\": \"Game 1\"\n          }\n        },\n        \"players\": [\n          {\n            \"id\": 1,\n            \"name\": \"Player 1\",\n            \"game\": {\n              \"id\": 1,\n              \"name\": \"Game 1\"\n            }\n          }\n        ],\n        \"game\": {\n          \"id\": 1,\n          \"name\": \"Game 1\"\n        }\n      }\n    }\n  ]\n}\nP.s. I am using jms serializer in my php api and jms doesn't serialize the owner in the player_group from the first player. I guess to prevent infinite recursion. Maybe I should serialize the id for owner?\n. ",
    "AndrewSB": "Awesome \ud83d\ude43\nOn Mon, Aug 29, 2016 at 9:02 PM Elvis Nu\u00f1ez notifications@github.com\nwrote:\n\nGood idea. I'll see what we can do.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/hyperoslo/Sync/issues/268#issuecomment-243326907, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADo1dInjV2i9N4KW5IRRiDtwlsnE4mb_ks5qk6s2gaJpZM4JwGQn\n.\n. I see the value now.\nThank you for building this \ud83d\ude0a\n. \n",
    "teripaquitinho": "Hi @norikachi  I am experiencing the same issue... \nI managed to solve it by removing all empty arrays in the dictionary before passing it to the sync function... \nvar data: Array<[String : Any]>? = nil\nfor element in originalData {\n  data.append(element.emptyRemoved)\n}\nSync.changes(data, inEntityNamed: myEntity, dataStack:myDataStack)\nwhere  emptyRemoved is placed within an extension for Dictionary as suggested here http://stackoverflow.com/a/35787010\nvar emptyRemoved: [Key: Any] {\n        let tup = filter {\n            //if let detailsDict = details as? NSDictionary\n            if let element = $0.1 as? Array<Any> {\n                return !element.isEmpty\n            }\n            return !($0.1 is NSNull)\n        }\n        return tup.reduce([Key: Value]()) { $0.0.updatedValue($0.1.value, forKey: $0.1.key) }\n    }\nDid you find a better solution for this?\n@3lvis i believe this should be the default behaviour for this case but maybe this can also be a param \n. @3lvis I found it... apparently if I create an entity with the attribute id being a String the mapping for the reverse relationship does not work properly... Now I changed my configuration to accept id being a Integer32 and everything works.\nif you change the type for the IDs from integer to String in the your Notes.xcdatamodeld then you can run the  func testTaggedNotesForUser() test and see for yourself.\nI updated the name of the issue.. check here https://github.com/SyncDB/Sync/issues/373, might be helpful.. ",
    "AnteyA": "I forgot to answer.\nI had to change function hyp_dateType: so it solve my problem\n- (HYPDateType)hyp_dateType {\n  if ([self containsString:@\"-\"] && [self length] > 0 && ![[self substringToIndex:1] containsString:@\"-\"]) {\n      return HYPDateTypeISO8601;\n  } else {\n      return HYPDateTypeUnixTimestamp;\n  }\n  }\nAlso i had to change function hyp_dateFromUnixTimestampString, because in this function is using fixed timestamp length (but timeStamp length may be from 0 to 14/more):\n- (NSDate )hyp_dateFromUnixTimestampString:(NSString )unixTimestamp {\n  NSString *parsedString = unixTimestamp;\n/\n  NSString validUnixTimestamp = @\"1441843200\";\n  NSInteger validLength = [validUnixTimestamp length];\n  if ([unixTimestamp length] > validLength) {\n      if ([unixTimestamp length] == 14) {\n          parsedString = [unixTimestamp substringToIndex:(validLength + 1)];\n      } else {\n          parsedString = [unixTimestamp substringToIndex:validLength];\n      }\n  }\n  */\n  if ([parsedString length] > 3) {\n      parsedString = [parsedString substringToIndex:[parsedString length] - 3];\n  }\nNSNumberFormatter numberFormatter = [NSNumberFormatter new];\n  numberFormatter.numberStyle = NSNumberFormatterDecimalStyle;\n  NSNumber unixTimestampNumber = [numberFormatter numberFromString:parsedString];\n  NSDate *date = [[NSDate alloc] initWithTimeIntervalSince1970:unixTimestampNumber.doubleValue];\nreturn date;\n  }\nin any case, thanks for the answer, and especially for your library.\nyour library is very cool and has helped me in my project.\n. ",
    "Proper-Job": "@3lvis thank you for that!\n. @3lvis I see the same log message sometimes but I don't get crashes.\n. @ro22e0 You might need to set the predicate in your Sync.changes call.\n. @allemattio I think what you're describing is actually a valid use case.\nOne thing I noticed though is that I believe you have a syntax error in your predicate format string. I think equality testing should be done with two equal signs == as described here.\nI agree with you that in some cases it can be necessary (imperative even) that certain objects be excluded from any INSERT, UPDATE, DELETE operations. \nIn my understand Sync uses the mapping predicate is like this: \n\nCompare the server payload to the objects in the local database retrieved through the specified predicate. Perform INSERT, UPDATE, DELETE as necessary by comparing the server object ids to the device object ids.\n\nIt would be great if Sync exposed an exclude predicate that amends the functionality like this: \n\nDo the mapping as described above, but exclude objects retrieved through the exclude predicate from all mapping operations.\n\nThat way objects in the device database that have been altered on the device can be protected from inadvertent changes.\nI'm not sure if Sync already provides this functionality. I don't specifying the mapping operations completely covers this situation.\n@3lvis what are your thoughts on this?\n. @3lvis that won't have the same effect as an exclude predicate.\nIn the example above all local objects with synced == FALSE should be excluded from any mapping operations. What if the field synced isn't present in the server payload, or is always true?  Wouldn't the local objects still be overwritten?\n. @3lvis I don't actually see how taking the ids from the JSON payload into the predicate will help avoid inadvertent overwriting of local objects.  I'll sketch out an example to illustrate what I mean.\nLet's say I have the following CoreData model:\nswift\npublic class ToDo: NSManagedObject {\n    @NSManaged public var id: NSNumber?\n    @NSManaged public var name: String?\n    @NSManaged public var completed: NSNumber?\n    @NSManaged public var inProgress: NSNumber?\n}\nAnd the following JSON payload that comes from the server:\njson\n[\n    {\n        \"id\": 1,\n        \"name\": \"Go shopping\",\n        \"completed\": false\n    },\n    {\n        \"id\": 2,\n        \"name\": \"Do the washing up\",\n        \"completed\": false\n    },\n    {\n        \"id\": 3,\n        \"name\": \"Buy flowers for your girlfriend\",\n        \"completed\": false\n    }\n]\nNow let's say I've synced my todos to the app and I'm on my way to buy flowers for my girlfriend.  I set the inProgress flag to true in the app.  That gives me the following states in my CoreData model instances:\nNSManagedObject(id=1,name='Go shopping',completed=false,inProgress=false)\nNSManagedObject(id=2,name='Do the washing up',completed=false,inProgress=false)\nNSManagedObject(id=3,name='Buy flowers for your girlfriend',completed=false,inProgress=true)\nLet's say I now Sync.changes again with the predicate you suggested:\nswift\n// JSON ids == [1,2,3]\nlet ids = (json as NSArray).value(forKey: \"id\") as? [String] ?? [String]()\n// fetched ids == [1,2]\nlet predicate =  NSPredicate(format: \"inProgress == FALSE AND id IN %@\", ids)\nIf I understand the underlying mapping algorithm correctly this should result in the server objects with ids = [1,2,3] being mapped against local objects with ids = [1,2].\nOne of two things could happen now:\n1. The local object(id=3) is overwritten.  That is, the inProgress flag is reset to false\n2. A second local object(id=3) is created: https://github.com/SyncDB/Sync/issues/301\nBoth cases are clearly not what we want.\n. @3lvis You also suggested running the predicate against the incoming JSON.  How would this help in my example above?  The JSON object are missing the in_progress flag, so none of the JSON objects would get dropped from the JSON payload.\nI believe the solution to this conundrum is to employ 2 predicates.\n1. An include predicate that fetches a list of local objects that are to be included in mapping operations:\n   1. Local objects in this list that are missing from the JSON are DELETED\n   2. JSON objects that are not part of this list are INSERTED\n   3. Objects that are in the JSON and in this list are UPDATED\n2. An exclude predicate that fetches a list of local objects that are to be excluded from mapping operations. This predicate essentially vetoes operations i and iii from the include predicate.\n   1. Local objects in this list that are missing from the JSON are NOT DELETED\n   2. JSON objects that are not part of this list are ARE INSERTED\n   3. Objects that are in the JSON and in this list are NOT UPDATED\n. Actually come to think of it, I believe it's necessary to split the predicates even further. In some cases it is necessary to differentiate between which objects are to be excluded from UPDATES and which are to be excluded from DELETES.\nI can build a use case for this if you like.\nNaturally this only becomes necessary once you start changing properties of objects that come from the server.  In read-only situations this fine grained distinction is not necessary.\n. Hi @allemattio \nAre you aware of the acronym normalization.\nWhat is your CoreData  entity's property name?. ",
    "jimijon": "Do you have an approximate ETA? I have to finish up for an upcoming Demo. So if it is in the next couple days I can wait, otherwise I need to rollback.  Thanks! Or. if there is something very specific that you can point me to. I might be able to help fix things.\n. did you lock down the repo? Or cocoa pod problem? This is what I get ::\n[!] Error installing Sync\n[!] /usr/bin/git clone git@github.com:hyperoslo/Sync.git /var/folders/08/3tkjvm5n33dgcs3b285qjgmm0000gn/T/d20160914-97058-muxjqr --template= --single-branch --depth 1\nCloning into '/var/folders/08/3tkjvm5n33dgcs3b285qjgmm0000gn/T/d20160914-97058-muxjqr'...\nWarning: Permanently added the RSA host key for IP address '192.30.253.113' to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n. OK, I got it to work by adding hyper.remoteKey. However, this should be reflected in the documentation.\n. Back to this. It doesn't work for me. In my core data model I do have remoteID BUT I don't want to use that. So, I first added, hyper.remoteKey = nfCode to the table, and then I added, hyper.isPrimaryKey = true on the nfCode attribute.\nThe JSON data is \"nfCode\" also. Thoughts? \n. Might be red-herring\u2026. I changed my sync call and removed Operations. This is seemingly causing records to be created and then deleted.\nI guess I don\u2019t understand how those operations work. I am setting it back to insert and update explicitly.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 2, 2016, at 1:31 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon Hi James,\nCould you share your Core Data model and also the JSON that you're using. Before being able to help you I need to reproduce the issue. :)\nThanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-264541649, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StVXIfHSZ-609jed4hEbjegir11k_ks5rEHIrgaJpZM4LC3h7.\n\n\n. hmmm now I am getting some random crash.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 2, 2016, at 1:31 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon Hi James,\nCould you share your Core Data model and also the JSON that you're using. Before being able to help you I need to reproduce the issue. :)\nThanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-264541649, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StVXIfHSZ-609jed4hEbjegir11k_ks5rEHIrgaJpZM4LC3h7.\n\n\n. \n{\n    \"resource\": [{\n        \"id\": \"2148\",\n        \"upc\": \"678523040102\",\n        \"nfCode\": \"zq30f\",\n        \"plu\": \"PLU\",\n        \"vlu\": \"VLU\",\n        \"brandNFCode\": \"0719\",\n        \"shelfCategoryId\": \"413\",\n        \"sectionKey\": \"P\",\n        \"productName\": \"Pretzel Stick\",\n        \"productDescription\": \"Pretzel Stick\",\n        \"packageType\": \"Bag\",\n        \"packageSize\": \"14.1\",\n        \"packageUOM\": \"oz\",\n        \"ingredients\": \"Corn Starch, Potato Starch, Rice Flour, Soluble Corn Fiber, Pal Oil, Sugar, Salt, Cellulose Gum, Soy Lecithin, Yeast Extract, Sodium Bicarbonate, Sodium Acid Pyrophosphate, Citric Acid.\",\n        \"productUrl\": \"\",\n        \"imageSmallUrl\": \"\",\n        \"imageLargeUrl\": \"\",\n        \"disLikeCount\": 0,\n        \"likeCount\": 0,\n        \"glutenFreeYN\": \"Y\",\n        \"deleteYN\": \"N\",\n        \"hasCouponYN\": \"\",\n        \"isHighlightedYN\": \"\",\n        \"origin\": null,\n        \"originProductId\": null,\n        \"lastUpdate\": \"2016-10-28 14:56:14\",\n        \"glutenFreeCertYN\": null,\n        \"glutenFreeCert\": null,\n        \"organicYN\": null,\n        \"organiCertYN\": null,\n        \"organicCert\": null,\n        \"gmoYN\": null,\n        \"gmoCert\": null,\n        \"fairTradeYN\": null,\n        \"kosherYN\": null,\n        \"halalYN\": null,\n        \"dairyYN\": null,\n        \"lactoseFreeYN\": null,\n        \"sugarFreeYN\": null,\n        \"hfcsFreeYN\": null,\n        \"cornFreeYN\": null,\n        \"soyFreeYN\": null,\n        \"veganYN\": null,\n        \"vegetarianYN\": null,\n        \"shelfCategory\": {\n            \"id\": \"413\",\n            \"shelfId\": \"1\",\n            \"sectionKey\": \"P\",\n            \"shelfCategoryDesc\": \"Pretzels\",\n            \"productCount\": 23,\n            \"originUpdate\": null,\n            \"deleteYN\": \"N\",\n            \"lastUpdate\": \"2016-11-22 16:18:01\",\n            \"shelfCategoryNFCode\": null\n        },\n        \"brand\": {\n            \"id\": \"167\",\n            \"nfCode\": \"0719\",\n            \"manufacturerNFCode\": \"mnfcode\",\n            \"sectionKey\": \"G\",\n            \"brandName\": \"Glutino\",\n            \"glutenFreeCount\": 0,\n            \"productCount\": 91,\n            \"deleteYN\": \"N\",\n            \"lastUpdate\": \"2016-11-22 16:18:01\"\n        }\n    }, {\n        \"id\": \"2149\",\n        \"upc\": \"678523038444\",\n        \"nfCode\": \"6cjn6\",\n        \"plu\": \"PLU\",\n        \"vlu\": \"VLU\",\n        \"brandNFCode\": \"0719\",\n        \"shelfCategoryId\": \"524\",\n        \"sectionKey\": \"C\",\n        \"productName\": \"Crackers - Cheddar\",\n        \"productDescription\": \"Crackers\",\n        \"packageType\": \"Box\",\n        \"packageSize\": \"4.4\",\n        \"packageUOM\": \"oz\",\n        \"ingredients\": \"Corn Starch, White Rice Flour, Organic Palm Oil, Modified Corn Starch, Cheese Preparation (mix Of Gouda, Cheddar And Camembert Cheese Powder [milk, Salt, Starter Cultures, Rennet, Annatto And Beta-carotene For Colour, Cheese Cultures], Sodium Citrate, Salt), Dextrose, Sunflower Lecithin, Eggs, Sunflower Lecithin, Natural Flavor, Dextrose, Sugar, Salt, Guar Gum, Sodium Bicarbonate, Ammonium Bicarbonate.\",\n        \"productUrl\": \"\",\n        \"imageSmallUrl\": \"\",\n        \"imageLargeUrl\": \"\",\n        \"disLikeCount\": 0,\n        \"likeCount\": 0,\n        \"glutenFreeYN\": \"Y\",\n        \"deleteYN\": \"N\",\n        \"hasCouponYN\": \"\",\n        \"isHighlightedYN\": \"\",\n        \"origin\": null,\n        \"originProductId\": null,\n        \"lastUpdate\": \"2016-10-28 14:56:14\",\n        \"glutenFreeCertYN\": null,\n        \"glutenFreeCert\": null,\n        \"organicYN\": null,\n        \"organiCertYN\": null,\n        \"organicCert\": null,\n        \"gmoYN\": null,\n        \"gmoCert\": null,\n        \"fairTradeYN\": null,\n        \"kosherYN\": null,\n        \"halalYN\": null,\n        \"dairyYN\": null,\n        \"lactoseFreeYN\": null,\n        \"sugarFreeYN\": null,\n        \"hfcsFreeYN\": null,\n        \"cornFreeYN\": null,\n        \"soyFreeYN\": null,\n        \"veganYN\": null,\n        \"vegetarianYN\": null,\n        \"shelfCategory\": {\n            \"id\": \"524\",\n            \"shelfId\": \"17\",\n            \"sectionKey\": \"C\",\n            \"shelfCategoryDesc\": \"Cheese & Peanut Butter\",\n            \"productCount\": 7,\n            \"originUpdate\": null,\n            \"deleteYN\": \"N\",\n            \"lastUpdate\": \"2016-11-22 16:18:01\",\n            \"shelfCategoryNFCode\": null\n        },\n        \"brand\": {\n            \"id\": \"167\",\n            \"nfCode\": \"0719\",\n            \"manufacturerNFCode\": \"mnfcode\",\n            \"sectionKey\": \"G\",\n            \"brandName\": \"Glutino\",\n            \"glutenFreeCount\": 0,\n            \"productCount\": 91,\n            \"deleteYN\": \"N\",\n            \"lastUpdate\": \"2016-11-22 16:18:01\"\n        }\n    }\n http://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 2, 2016, at 1:31 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon Hi James,\nCould you share your Core Data model and also the JSON that you're using. Before being able to help you I need to reproduce the issue. :)\nThanks!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-264541649, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StVXIfHSZ-609jed4hEbjegir11k_ks5rEHIrgaJpZM4LC3h7.\n\n\n. Maybe my extensive use of my own named primary keys? . Rolled back to 3.2.4 and it is working again. \nI had sent the model with the JSON. Did you not get it?\n\nOn Dec 2, 2016, at 2:20 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\nCould you share your Core Data model as well? Also would be nice to know in which places you're using custom user info attributes.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-264552851, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StRXM3lmOVIH7IUSayvmMT5IqSgw9ks5rEH18gaJpZM4LC3h7.\n\n\n. did you get the model? Plus the custom user info attributes are in \"nfCode\". send me your email\u2026 I attached it both as the model and as a zip file.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 3, 2016, at 1:32 AM, Elvis Nu\u00f1ez notifications@github.com wrote:\nHi James, there's no model here, something must be going on with GitHub.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-264623491, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StSZWwLaIjU2pfhOqYhSr5ZiM1SdFks5rERsfgaJpZM4LC3h7.\n\n\n. Ever get the model? Would love to upgrade.. Understood. The older version is working fine. Just releasing a new version of the app to the store next week.\nWhat is new in 4 anyway?\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 9, 2016, at 1:40 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon I got your model, but I am crazy busy at work. I'll see if I can get try it out this weekend :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-266103464, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StWcyMz9Ty6WBTGT910k9Z2p9ekDIks5rGa6jgaJpZM4LC3h7.\n\n\n. What did you find?\n http://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 12, 2016, at 3:17 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\nGave it a try, seems like everything is working as it should, let me know if I'm missing something.\n349 https://github.com/SyncDB/Sync/pull/349\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-266555346, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StfRuKWobipUF_G8G6M2fLhp-9eN_ks5rHbnagaJpZM4LC3h7.\n\n\n. I will try next week\u2026 this week we are pushing.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 12, 2016, at 3:32 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon Have a look here -> #349 https://github.com/SyncDB/Sync/pull/349\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-266559287, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StUp8vyzLhtGqyOphTkDG4KlR56duks5rHb1_gaJpZM4LC3h7.\n\n\n. Thanks and will do.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 12, 2016, at 4:10 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon Let me know how it goes. Good luck on the new release. \u2764\ufe0f\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-266568993, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StXKvovylcsnr2uLw9aAmRdpbNFu5ks5rHcZDgaJpZM4LC3h7.\n\n\n. Not quite.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com\n http://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 12, 2016, at 4:10 PM, James Cicenia james@jimijon.com wrote:\nThanks and will do.\nhttp://www.jimijon.com/ \nJames Cicenia\nFounder / CEO\nDirect: (773) 398-4649\nMail: james@jimijon.com james@jimijon.com\nhttp://www.linkedin.com/profile/view?id=4226928&trk=tab_pro\n\nOn Dec 12, 2016, at 4:10 PM, Elvis Nu\u00f1ez notifications@github.com> wrote:\n@jimijon https://github.com/jimijon Let me know how it goes. Good luck on the new release. \u2764\ufe0f\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/339#issuecomment-266568993, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StXKvovylcsnr2uLw9aAmRdpbNFu5ks5rHcZDgaJpZM4LC3h7.\n\n\n. Hmmm, in my storeProduct table I have productNFCode. This points to nfCode in my Product table.\nIs there a way to tell Sync to use productNFCode and map it to nfCode?. I just tried making hyper.remoteKey = \"nfCode\" to no avail.. As requested:\n\n```\n{\n      \"id\": \"1\",\n      \"sectionKey\": \"S\",\n...\n  \"announcements\": \"\",\n  \"lastUpdate\": \"2017-01-05 02:02:37\",\n  \"nfCode\": \"5sqf\",\n  \"storeProducts\": [\n    {\n      \"id\": \"2\",\n      \"storeNFCode\": \"5sqf\",\n      \"productNFCode\": \"nj8g3\",\n      \"lastUpdate\": \"2017-01-05 02:03:37\"\n    },\n    {\n      \"id\": \"6\",\n      \"storeNFCode\": \"5sqf\",\n      \"productNFCode\": \"4889v\",\n      \"lastUpdate\": \"2017-01-05 02:03:37\"\n    },\n    {\n      \"id\": \"9\",\n      \"storeNFCode\": \"5sqf\",\n      \"productNFCode\": \"8rfm3\",\n      \"lastUpdate\": \"2017-01-05 02:03:37\"\n    },\n    ...`\n\n. In your response you have \"jsonProduct\", which I assume contains a relationship with a list of jsonImages. How will the insertOrUpdate delete images?\nHow about a switch in the userInfo table/relationship for insert, update, delete?\n. Well it's pretty big application, etc. With the v3 it seems to import records but something goes awry and the relationships are not there, plus other weirdness. Are you sure v3 works well with\"\nhyper.isRemoteKey\nhyper.remoteKey \nin all my records?\nI also noticed it went from DATAStack to DataStack. Maybe something there?. do your tests only use a string key? And not an id or remoteId ?\n\nOn Jun 29, 2017, at 3:30 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\n@jimijon https://github.com/jimijon all the old tests are still passing so nothing broke as far as I was concerned =/\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/408#issuecomment-312095031, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StQvg5WnCXgLmImzyIpIFcQzu4AnBks5sJAl3gaJpZM4OIFHm.\n\n\n. Where in the tests do you read the user info settings?\n\nOn Jun 29, 2017, at 4:50 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\nHi! The current tests test pretty much everything.\nSync Tests:\nhttps://github.com/SyncDB/Sync/blob/master/Tests/Sync/SyncTests.swift https://github.com/SyncDB/Sync/blob/master/Tests/Sync/SyncTests.swift\nEntire tests folder:\nhttps://github.com/SyncDB/Sync/tree/master/Tests https://github.com/SyncDB/Sync/tree/master/Tests\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/408#issuecomment-312118541, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StUc9mO8zki6-nbewRG8cgO_tCzsHks5sJBw4gaJpZM4OIFHm.\n\n\n. Ok see the model.\nHow come there are two user info remoteKeys?\na) current \u2014>   sync.remoteKey\nb) old        \u2014> hyper.remoteKey\nWon\u2019t these interfere? Does it make a difference using \u201chype\u201d or \u201csync\u201d ?   I have been using hyper.\nALSO:\nThere is no \u201chyper.isPrimaryKey\u201d for \u201ccurrent\u201d.\nThoughts?\nJames\n\nOn Jun 30, 2017, at 1:42 AM, Elvis Nu\u00f1ez notifications@github.com wrote:\nThat's included in the Core Data model, for example here.\nhttps://user-images.githubusercontent.com/1088217/27724003-032ddf0c-5d70-11e7-9b8c-dc930c6b8d76.png\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/SyncDB/Sync/issues/408#issuecomment-312188594, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StQSv4bf2IR21uQSEPKiXhWTX3jMyks5sJJjVgaJpZM4OIFHm.\n\n\n. It\u2019s pretty big\u2026. but yes, you have it correct here as you described.\n\nOn Nov 30, 2017, at 1:42 PM, Elvis Nu\u00f1ez notifications@github.com wrote:\nHi James,\nI think I understand what you mean, having an example of your JSON and Core Data model would help me a lot.\nThis is what I understood so far.\nStep 1: Add category with ID 1\nlet category = //... new category with ID 1\ntry! dataStack.mainContext.save()\nStep 2: Sync subcategories of category with ID 1\n[\n  {\n    \"id\": 100,\n    \"category_id\": 1\n  },\n  {\n    \"id\": 101,\n    \"category_id\": 1\n  },\n]\ndataStack.sync(json, inEntityNamed: \"Subcategory\", parent: category1....\nStep 3: Sync product with subcategory\n[\n  {\n    \"id\": 900,\n    \"subcategory\": {\n      \"id\": 100\n    }\n  }\n]\ndataStack.sync(json, inEntityNamed: \"Product\"...\nThen if you do, product.subcategory.category it gives nil instead of giving the category with the ID 1.\nIs this correct?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/3lvis/Sync/issues/457#issuecomment-348298529, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StfgQjU_bmt01G3Eu2xShRwEKBvG5ks5s7wUtgaJpZM4QxETM.\n\n\n. Any news?. I created the unit test in my fork. Really would like to get this working again.. D\u2019oh, forgot to push.\nShould be there now with a pull request.\n\nOn Dec 14, 2017, at 4:59 AM, Elvis Nu\u00f1ez notifications@github.com wrote:\nHi @jimijon https://github.com/jimijon,\nI can't seem to find it, could you share the link?\nhttps://github.com/jimijon/Sync/branches/all https://github.com/jimijon/Sync/branches/all\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/3lvis/Sync/issues/457#issuecomment-351678596, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StQuOlbQxe201bxu52DPzZZ1orsCtks5tAP-dgaJpZM4QxETM.\n\n\n. Any news on this?. That didn't do anything. Maybe it is the .wal file. Is there a way to pass parameters to the data stack?\n@{NSSQLitePragmasOption: @{@\"journal_mode\": @\"delete\"}}\nThanks. It\u2019s back! Thanks for the prompt fix.\n\nOn Jul 24, 2018, at 4:48 AM, Elvis Nu\u00f1ez notifications@github.com wrote:\nHi James, I've made a new release please let me know if this fixes your issue.\nhttps://github.com/3lvis/Sync/releases/tag/4.2.1 https://github.com/3lvis/Sync/releases/tag/4.2.1\nAlso in order to make the tests run in the CI I had to switch between caches folder and documents folder so might be better if you could use FileManager.sqliteDirectoryURL.\nFix for CircleCI here: https://github.com/3lvis/Sync/pull/518/files https://github.com/3lvis/Sync/pull/518/files\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/3lvis/Sync/issues/521#issuecomment-407348251, or mute the thread https://github.com/notifications/unsubscribe-auth/AA7StYaM9Citk3CphzjCzadI_48PzyiYks5uJu1pgaJpZM4Vb45Q.\n\n\n. ",
    "Sorix": "I don\u2019t get crashes, but I\u2019ve catched it in debugger as XCode suggested to show you trace. I will try to reproduce it in test project, but I think it won\u2019t be an easy task :)\n. That diff is solved my issue after my investigations. I can't open pull request because I'm not sure that it is complete and correct solution, it was discovered more like \"random\", also I don't know if it work for whole Sync (I've fixed only in sync_fillWithDictionary method), I haven't look at all Sync sources yet :)\nBut I've check at my more complex database and I don't see any bugs yet.\nBut that maybe helpful for you in fixing that bug.\ndiff\n--- a/Source/NSManagedObject+Sync.swift\n+++ b/Source/NSManagedObject+Sync.swift\n@@ -46,7 +46,7 @@ public extension NSManagedObject {\n                 } else {\n                     sync_toManyRelationship(relationship, dictionary: dictionary, parent: parent, parentRelationship: parentRelationship, dataStack: dataStack, operations: operations)\n                 }\n-            } else if let parent = parent , !parent.isEqual(value(forKey: relationship.name)) && relationship.destinationEntity?.name == parent.entity.name || relationship.destinationEntity?.name == parent.entity.superentity?.name {\n+            } else if let parent = parent , !parent.isEqual(value(forKey: relationship.name)) && relationship.destinationEntity?.name == relationship.name || relationship.destinationEntity?.name == parent.entity.superentity?.name {\n                 setValue(parent, forKey: relationship.name)\n             } else if let localPrimaryKey = dictionary[keyName] , localPrimaryKey is NSString || localPrimaryKey is NSNumber || localPrimaryKey is NSNull {\n                 sync_toOneRelationshipUsingIDInsteadOfDictionary(relationship, localPrimaryKey: localPrimaryKey, dataStack: dataStack)\n. ",
    "pwestrich": "I can confirm that this same error is present using Xcode 8.0 with Sync 2.0.0 in another project I'm working on. It seems all you have to do is call some variation of Sync.changes(...) to reproduce it. I'm having difficulty getting the debugger to break at _NSLockError() at the moment, so unfortunately I can't say for sure yet.\n. I do have two calls to Sync one shortly after another. I believe Sync does make use of GCD to do some work, so perhaps that's causing the issue? I'm not near my development machine right now, so I can't try to disable the second call. I'll get to it tomorrow morning and let you know.\n. It appears the warning about the lock only shows up sometimes whenever I have both my calls to Sync in my program, but when I remove one of them, it consistently doesn't show up.\nFrom what I can read in the documentation about NSLock, the second thread wanting the lock should park until the first one has released it, and the lock should live as long as the singleton who olds it, which is the duration of the program. I don't understand how either of the messages are popping up.\n. Perhaps the guide here coulee be of help? It seems Apple is discouraging the use of traditional threads and locks these days. Similar locking behavior could be accomplished by making a serial dispatch queue and making calls to dispatch_sync() to make sure they're done synchronously.\n. I just submitted a pull request on the other repository that implements this.\nI had some free time, so seeing as you're so busy and I use this project a ton, figured why not.\n. busId is the primary key for both Bus and Route, and index is the primary key for RouteStop and RoutePolylineItem.\n. I'm not sure. From what I can see your managed object model and JSON look like mine. I'm nowhere near my work computer at the moment. I'll see what I can do Monday morning when I'm back.\n. I do have two calls to Sync, but removing the second one has no effect; it's the first one that causes it, which is the one that updates the Route and its subset of objects.\nI have confirmed that your model and JSON do look like mine.\n. Awesome. Thanks a lot.\n. However, if id is the primary key for the Owner object, we shouldn't allow two objects with the same primary key, as they should be unique.\n. I think this might be similar to the problem I'm having in #280.\n. I performed the changes locally in my project and this fixes #280 for me. I'm on 2.1.0 however.\n. ",
    "ro22e0": "my model\n\nand the json\n``` json\n[\n  {\n    \"events\": [\n],\n\"owners\": [\n  {\n    \"status\": \"owner\",\n    \"school\": null,\n    \"promotion\": null,\n    \"id\": 3,\n    \"company\": null,\n    \"image\": null,\n    \"email\": \"thomas@mail.com\",\n    \"mutual_friends\": [\n\n    ],\n    \"group\": null,\n    \"job\": null,\n    \"name\": null\n  }\n],\n\"participating_users\": [\n\n],\n\"id\": 3,\n\"refused_users\": [\n\n],\n\"invited_users\": [\n\n],\n\"name\": \"default\"\n\n},\n  {\n    \"events\": [\n],\n\"owners\": [\n  {\n    \"status\": \"owner\",\n    \"school\": null,\n    \"promotion\": null,\n    \"id\": 3,\n    \"company\": null,\n    \"image\": null,\n    \"email\": \"thomas@mail.com\",\n    \"mutual_friends\": [\n\n    ],\n    \"group\": null,\n    \"job\": null,\n    \"name\": null\n  }\n],\n\"participating_users\": [\n\n],\n\"id\": 3,\n\"refused_users\": [\n\n],\n\"invited_users\": [\n\n],\n\"name\": \"default\"\n\n}\n]\n```\n. \"includesSubentities\" a property of NSFetchRequest and the default value is true.\nHere : Apple doc\n. Yes I'll reopen it when it's done\n. ",
    "cflorion": "Yes, iOS 10 only :)\nAll our B2B users update their OS quickly \ud83d\udc4c\ud83c\udffb #lucky\nNo wise reason to use NSPersistentContainer no. Only that the more code in Apple's hands is less code in mine (and less bugs hopefully).\nBut that's probably a wrong reason. I noticed that DATAStack dont use parent/child context, is there reason for that ?\n. I see, good point. I'll give DATAStacka try right now.\nThanks 3lvis!\n. 1. This is an assumption but: Firebase is just a key-value store. Strings as keys, and dictionary as values. So it cannot store arrays.\n2. The reason is true in my use case: I import the whole object graph at once. What I like about Core Data is its validations of data: property optional or not, relationship optional or not, default values etc. In my case a Player MUST have a team, so in the Core Data model I put this attribute as non-optional. But if I import players first and them teams, of course Core Data will raise an exception indicating that the data validation is wrong if I save (when the validation occurs) after each entity import.\n   But what I'm saying is only true if you import everything at once. If you import objects as they arrive, it's not possible to do the validation since it will always raise an exception. In that case I should put optional for the relationship, even though I don't like that a player without a team is technically possible...\nIt's hard to explain my thoughts, but I hope you get what I mean a bit :) \nI don't so if this is a common case, that's why I put a \"save\" parameter to the method so it gives you the choice when implementing. In my case I use both options.\n. ",
    "RolandasRazma": "@3lvis you could use https://github.com/inspace-io/INSPersistentContainer for now to support it on lower iOS versions. Logic would be: replace DATAStack with INSPersistentContainer for now. Remove INSPersistentContainer dependancy when dropping support for iOS9 later\n. ",
    "PiotrOlszewski": "I had exactly the same problem:\nPods combination:\npod 'Alamofire', '3.5.0'\n  pod 'Sync', '1.14.3'\n  pod 'NSManagedObject-HYPPropertyMapper', '4.1.1'\n  pod 'DateParser', '0.1.0'\nworks for me as a temporary fix :)\nHope it helps.\n. ",
    "klivin": "That's great, I would like to add my own formatter, trying what you put in your docs: \nhttps://github.com/SyncDB/NSManagedObject-HYPPropertyMapper#dates\nHowever, the link to the example is broken where it says:\nYou can find an example of date transformer in DateStringTransformer.\nGetting a not found error.\nI am left wondering what DateStringTransformer should look like?\n. Hi there, I am trying to get dates mapping using ValueTransformer in Swift 3.\nI register the ValueTransformer as such:\nValueTransformer.setValueTransformer(DateStringTransformer(),\n                                             forName: NSValueTransformerName(rawValue: \"DateStringTransformer\"))\nHere's my actual transformer:\n```\nimport Foundation\nclass DateStringTransformer : ValueTransformer {\n    override class func transformedValueClass() -> AnyClass {\n        return Date.self as! AnyClass\n    }\noverride class func allowsReverseTransformation() -> Bool {\n    return false\n}\n\noverride func transformedValue(_ value: Any?) -> Any? {\n    guard let setvalue = value as? String else {\n        return value\n    }\n    let date = DateFormatter.utcDateFormatter().date(from: setvalue)\n    print(\"transformed date \\(date)\")\n    return date\n}\n\n}\n```\nThe transformed date is getting returned with a valid date when Sync starts mapping i see output:\ntransformed date 2016-10-11 15:30:00 +0000\ntransformed date 2016-10-11 07:00:00 +0000\n...\nHowever, Sync will crash on context.save() (Sync.swift line 242)  with the stack trace:\n*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '-[__NSTaggedDate bytes]: unrecognized selector sent to instance 0xe41bdad3cf800000'\nIf I print out the object it is looking at, it's a Date??\npo 0xe41bdad3cf800000\n2016-10-11 15:30:00 +0000\n(lldb) po [0xe41bdad3cf800000 class]\n__NSTaggedDate\nPlease let me know if you see anything obvious I am missing\n. ",
    "ivoindriksons": "Well. This functionality is very useful. \nMy idea probably would be to use to typedef\nsomething like: \ntypedef NS_ENUM(NSInteger, SyncOperations)\n{\nInsert,\nUpdate,\nDelete,\nAll\n};\nand based on value use the method needed\n. Since typedef is available on both objective-C and swift, if i remember correctly.\n. I found some info regarding this could help regarding this implementation: \nIn Objective-C: \ntypedef NS_OPTIONS(NSInteger, FulfillmentOption) {\n    FulfillmentOptionPickup = 1 << 0,\n    FulfillmentOptionShipping = 1 << 1,\n    FulfillmentOptionUserShipping = 1 << 2,\n};\nin an Objective-C header, this would be imported into Swift as\n```\npublic struct FulfillmentOption : OptionSetType {\n    public init(rawValue: Int)\npublic static var Pickup: FulfillmentOption { get }\npublic static var Shipping: FulfillmentOption { get }\npublic static var UserShipping: FulfillmentOption { get }\n\n}\n```\nMore Information can be found in the \"Using Swift with Cocoa and Objective-C\" reference:\n\"Interaction with C APIs\":\nSwift also imports C-style enumerations marked with the  NS_OPTIONS macro as a Swift option set. Option sets behave similarly to imported enumerations by truncating their prefixes to option value names.\n. http://stackoverflow.com/questions/32530018/accessing-swift-optionsettype-in-objective-c\nHere I think is the same problem, and solution on this provided.\nWhat do you think ? \n. Also Could be an option. The solution that i provided earlier with NS_OPTIONS, is not good ? \n. Ok maybe then your provided solution with strings ? \n. It seems for now i have found workaround. \nI Created Class in Swift, that uses the new operations. And then i used it as a bridge, to use it in objective-C. For now it seems to work. \nExample: \n```\npublic class func syncsData(_ data: [Any], inEntityNamed entityName: String, dataStack: DATAStack, completed:  @escaping (NSError?) -> Void) {\n        Sync.changes(data as! Array, inEntityNamed:entityName, dataStack:dataStack, operations:[.Insert, .Update], completion: {error in\n            completed(error)\n        })\n    }\n```\n. ",
    "neil-morrison44": "@3lvis I tried something similar, however I'm using JSON  with \"*_ids\" suffixes, which are dealt with in the NSManagedObject+Sync extension rather than within the hyp_fill method, so that solution works for the basic properties but not the relationships\n. @3lvis Yeah, it's that sync_fillWithDictionary method I want to be getting at, but since extensions are private to the module in swift there's no way of accessing it (I think, at least?)\n. @3lvis Any plans to expose this functionality publicly on the Sync class?. Think it needs to be the first one, could be the second one if you also specified the entity name though?\nSince id doesn't have to be unique between different entity types, and isn't unique in my case - there's things and comments and users who all share the same id number.\nI actually like the 2nd one more since it cuts down on having to do a fetch before it's updated - would move the logic of handling when an update has been requested for a thing that doesn't exist yet into Sync though ( probably just create? ). \ud83d\udc4d  the insertOrUpdate method seems like exactly what I was looking for. ",
    "MojtabaHs": "\nOh and one more thing : \noperations = [.Insert, .Update]\n.delete will handle later with thumb stones ;). Yes, if you set productCode as primary key in Product entity and storeProduct is a relation.. This will done by setting primary key and remote key automatically. Perhaps a look on your data model and a sample of JSON response could help to resolve your issue faster ;). Operations are .Insert and .Update already. @3lvis I check this things before posting here ;) \nDude, Don't close issues without confirm of opener too fast.. It's meny to meny @3lvis. Setting operations only works on main object I think. Nested objects not respecting to it. I double checked.. ",
    "thestr4ng3r": "When using Sync by creating an instance of Sync instead of directly calling Sync.changes(), which is necessary in some cases, the error that can appear when Sync.start() calls changes is not accessible anywhere.\nThat's why I I'm saving it to a variable in the Sync class that can be accessed through a property.. ",
    "jovito-royeca": "Hi Elvis,\nAttached are the SQLite data files,\nCore Data model, and  JSON data. Everytime the app starts, the json is downloaded from server and then inserted to Core Data via SyncDB:\n```\n    self.dataStack.performInNewBackgroundContext { backgroundContext in\n        var newData = [String : Any]\n         // newData will be populated with JSON from server, as well as some internal data\n   Sync.changes(newData, inEntityNamed: \"Category\", predicate: nil, parent: nil, parentRelationship: nil, inContext: backgroundContext, operations: .All, completion:  { error in\n        // error goes here...    app crashes\n    })\n}\n\n```\nThank you for looking into this issue.\n\nJovito. I was able to fix the error by modifying the one-to-many relationship arrangement from Ordered to Not Ordered.. \n",
    "cannaz": "some news about this issue? I have the same problem when I restart the app and I import the same json. Thanks. ",
    "Lailan": "Thanks @jovito-royeca \nThis reply solved to me too!. Hi @3lvis, thanks for the awesome support! \nSorry for the delay in reply, but it was a holiday here at work yesterday and I could not get the data model.\nSo, here is it.\n\n. @3lvis Thanks so much for your help. You're awesome! . @3lvis Good afternoon. Any news about this issue? \n. ",
    "kristoff2016": "Ok thanks, I'm going to use this . ",
    "ihor-vovk-lohika": "Sure. Here it is:\ngithub \"ReactiveX/RxSwift\" ~> 3.0\ngithub \"Alamofire/Alamofire\" ~> 4.0\ngithub \"CocoaLumberjack/CocoaLumberjack\"\ngithub \"matthewpalmer/Locksmith\"\ngithub \"kasketis/netfox\" \"swift3\"\ngithub \"card-io/card.io-iOS-source\"\ngithub \"araiev/JBChartView\"\ngithub \"SyncDB/Sync\"\ngithub \"SwiftyJSON/SwiftyJSON\". Should $(SRCROOT)/Carthage/Build/iOS/DATAStack.framework and $(SRCROOT)/Carthage/Build/iOS/SYNCPropertyMapper.framework be added to the copy frameworks build phase? I tried with them and without but result is the same.. Confirm. The solution works. Thank you much for very quick support!\nIf you find a better way to fix it, please update this ticket.. ",
    "lluisgerard": "I'm also having this issue and my project requires to be built on circleci servers. I can fix this locally but carthage downloads dependencies on the server as well, and I can't remove these manually. Is it possible to tell carthage to NOT install dependencies to avoid having to manually remove these and therefore making this compatible with whatever automation we have in place?\nThanks! . ",
    "tcordoba": "Hi,\nI'm having the same issue here. Any update regarding this problem?\nThanks\nRegards. Hi, \nI think I have fixed the issue. I have added self.updateFinished(true) to the file Sync.swift. If you found this correct let me know and I will push the code to the repository.\n```\nfunc perform(using context: NSManagedObjectContext) {\n        do {\n            try Sync.changes(self.changes, inEntityNamed: self.entityName, predicate: self.predicate, parent: self.parent, parentRelationship: self.parentRelationship, inContext: context, operations: self.filterOperations, shouldContinueBlock: { () -> Bool in\n                return !self.isCancelled\n            }, objectJSONBlock: { objectJSON -> [String: Any] in\n            return self.delegate?.sync(self, willInsert: objectJSON, in: self.entityName, parent: self.parent) ?? objectJSON\n        })\n        self.updateFinished(true)\n    } catch let error as NSError {\n        print(\"Failed syncing changes \\(error)\")\n\n        self.updateExecuting(false)\n        self.updateFinished(true)\n    }\n}\n\n```. ",
    "ArdentZeal": "I think it might be the same issue described here.\nhttps://github.com/SyncDB/SYNCPropertyMapper/issues/93\nSadly there is no solution in the closed thread.. I did try all 3, and everything failed. Thanks for looking into this. \nSent from my iPhone\n\nOn 10 Feb 2017, at 20:33, Elvis Nu\u00f1ez notifications@github.com wrote:\n@ArdentZeal Hi,\nAre you calling hyp_dictionary for Task, Tag or MapLocation? I'll try reproducing your issue.\nI remember seeing something regarding infinite loops here: SyncDB/SYNCPropertyMapper#112\nThe solution was to add a \"hyper.nonExportable\" flag to the relationship. https://github.com/SyncDB/SYNCPropertyMapper#excluding\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hey 3lvis,\n\nThe solution was to add a \"hyper.nonExportable\" flag to the relationship. \nThis was the problem, the solution above is working.\nThank you very much.. ",
    "eman8519": "Thanks @3lvis I will close this for now, and perhaps use the above mentioned as a base for a progress handler I may add in the future (if it is even possible).  I dug in a bit more and found some bottle necks in the DATAFilter class that I've submitted a PR for I have plans to further optimize that class when I have a little more spare time to work on it.  Thank you for your response. . ",
    "jetstar89": "This is my code\nself.dataStack.performInNewBackgroundContext({ (context) in\n                if let parent = ParentEntity.extFind(in: context, by: itemId) {\n                    Sync.changes(change, inEntityNamed: \"ChildEntity\", predicate: nil, parent: parent, inContext: context, completion: { (error) in\n                        if error != nil {\n                            completion(Result.failure(error))\n                        } else {\n                            completion(Result.success(true))\n                        }\n                    })\n                }\n            })\nAfter that, I saw ChildEntity insert/update but its parent entity is not linked.. thanks 3lvis,\nI tried, and It works when using main context. But I wonder why it doesn't work when using background context?. Hi @3lvis , It isn't blocking my main thread, cos I save in background thread.\nBut it takes quite much time for completion.\nI am not sure I can provide Core Data model and an example of JSON because NDA.\nBut there are about 20 entities in my Core Data Model, most of them have one to many relationship, and my raw JSON text is about 0.8MB.. Hi 3lvis, could we have a private channel, Like slack, skype or any thing else.\nRegards,. ",
    "yonat": "@3lvis I encountered a similar problem, but it was not solved by using the main context. Instead, I found that Sync expects the child objects JSON to contain a <parent>_id field. I think that's probably a mistake, no?\nAnyway, I use this workaround:\n```swift\nextension NSManagedObject {\n    func syncChildren(changes: [[String: Any]], inEntityNamed: String, predicate: NSPredicate? = nil, completion: ((NSError?) -> Void)?) {\n        var changes = changes\n        if nil != entity.attributesByName[\"id\"], let syncID = value(forKey: \"id\") {\n            let parentIDAttribute = entity.name!.snakeCased() + \"_id\"\n            for i in 0 ..< changes.count {\n                changes[i][parentIDAttribute] = syncID\n            }\n        }\n        managedObjectContext?.sync(changes, inEntityNamed: inEntityNamed, predicate: predicate, parent: self, completion: completion)\n    }\n}\nextension String {\n    func snakeCased() -> String {\n        return try! NSRegularExpression(pattern: \"([a-z])([A-Z])\").stringByReplacingMatches(in: self, range: NSMakeRange(0, count), withTemplate: \"$0_$1\").lowercased()\n    }\n}\n```. Thanks for responding!\nMy use case:\nI have separate server requests for each type of entity. So for the parent I may get:\njson\n[\n  {\n    \"name\": \"secret\",\n    \"id\": \"6\"\n  }\n]\nThen I send a separate request to get 6's children, and the response would be something like:\njson\n[\n  {\n    \"email\": \"james@mi6.gov.uk\",\n    \"id\": \"007\"\n  }\n]\nSo the parent's JSON does not include its children IDs, and the children's JSON does not include their parent ID.\n(I can't change the server code, have to use what already exists.)\nThanks for this great package!. Just bumped into another issue:\nSyncing children of one parent, deletes the children of all other parents.\nSo now my workaround looks like this:\n```swift\nextension NSManagedObject {\n    func syncChildren(changes: [[String: Any]], inEntityNamed child: String, predicate: NSPredicate? = nil, completion: ((NSError?) -> Void)?) {\n    // ensure children are explicitly related to their parent\n    var changes = changes\n    if nil != entity.attributesByName[\"id\"], let syncID = value(forKey: \"id\") {\n        let parentIDAttribute = entity.name!.snakeCased() + \"_id\"\n        for i in 0 ..< changes.count {\n            changes[i][parentIDAttribute] = syncID\n        }\n    }\n\n    // don't delete children of other parents\n    var predicate = predicate\n    if let parentRelationName = NSEntityDescription.entity(forEntityName: child, in: managedObjectContext!)?.relationships(forDestination: entity).first?.name {\n        let childPredicate = NSPredicate(format: \"\\(parentRelationName) = %@\", self)\n        predicate = nil == predicate ? childPredicate : NSCompoundPredicate(andPredicateWithSubpredicates: [predicate!, childPredicate])\n    }\n\n    managedObjectContext?.sync(changes, inEntityNamed: child, predicate: predicate, parent: self, completion: completion)\n}\n\n}\nextension String {\n    func snakeCased() -> String {\n        return try! NSRegularExpression(pattern: \"([a-z])([A-Z])\").stringByReplacingMatches(in: self, range: NSMakeRange(0, count), withTemplate: \"$0_$1\").lowercased()\n    }\n}\n```\n. ",
    "andersblehr": "I have been banging my head on what looks to be the same issue for the past couple of days as well. Is there an upcoming fix for this? If not, we will have to look for alternatives \u2013 switching to Integer 32 ids is not an option at this stage in the project. Otherwise I'm really impressed with the Sync library, so would prefer to use it going forward as well. Thanks for your efforts, @3lvis!. I ended up rolling my own framework to work around this: andersblehr/JSONCache. Some overlap with Sync, with some added features that I felt were missing, such as producing JSON for persisting data to the backend.. Thanks, @3lvis \u2013 borrow away :). Cheers for the pointer, @3lvis. I did look into this. The primary reason for moving away from Sync was the above bug, not lack of JSON generation features. That said, I spun my own JSON generation anyhow, as our workflow is to only persist ('cache') objects to Core Data once they have been secured \u2013 and been assigned an id \u2013 on the backend. I considered instantiating temporary NSManagedObject instances exactly for the purpose of letting Sync generate JSON from them, but then having to delete them (alternatively update them with the id when the backend call returned) did not sit well in my head with the semantics of the workflow: Save first (i.e., to the backend), then cache (i.e., to Core Data).. ",
    "padlocked17": "Thanks @teripaquitinho .  I looked at your write-up and unfortunately, I've already got mine set to integers.\nI can't even get a single relationship to exist.. I don't see any reason why not.  It looks very straight-forward and super clean.  I wish the JSON that I was being served looked that nice.. ",
    "markst": "I suppose it wouldn't be too complicated to implement. \nI'd need to check for nested attributes as follows:\nswift\nhyp_fill(with: dictionary)\nif let attributes = dictionary[\"attributes\"] as? [String:Any] {\n    hyp_fill(with: attributes)\n}\nSYNCPropertyMapper would need to support hyphenated-case else I'd have to add all remote keys for multi word attributes. \nFirst pass would have to map the attributes of the objects relationships to provide the linkage for the included which would have to be mapped on second pass & synced...\n. I'd also like this as an option. Is there any update on this feature?\nHappy to contribute.. Is there any reason why ExportOptions can't be defined as a enum?\nswift\nenum ExportOptions {\n    case inflectionType(InflectionType)\n    case relationshipType(RelationshipType)\n    case dateFormatter(DateFormatter)\n    case omitNullValues(Bool)\n}. ",
    "phedlund": "carthage update --use-submodules. ",
    "mzgnr": "Hi @3lvis do you need any help for this issue? I would like to implement to-one for one of my projects. . ",
    "pgawlowski": "Printed dictionary structure I'm trying to update. As you can see this have few additional fields however this doesn't seems to be a problem since first sync is correct.\n[\n  \"quantity\": 13,\n  \"cart\": [\n    \"entries\": <__NSSingleObjectArrayI0x61800000f800>({\n      code=4812254;product={\n        code=4812254;description=\"\";manufacturer=Canon;name=\"500D + 18-55mm IS + EF-S 55-250 IS\";price={\n          currencyIso=USD;formattedValue=\"$927.89\";priceType=BUY;value=\"927.89\";\n        };stock={\n          stockLevel=349;stockLevelStatus=inStock;\n        };summary=\"EOS 500D + 18-55mm IS + EF-S 55-250 IS - 15.1 MP CMOS, Full HD (1080p), 3.4fps, 3.0\\U201d Clear View LCD, DIGIC 4, 9-point AF\";\n      };quantity=12;\n    }),\n    \"deliveryItemsQuantity\": 0,\n    \"totalItems\": 0,\n    \"code\": 0\n  ],\n  \"code\": 4812254,\n  \"product\": {\n    code=4812254;description=\"\";manufacturer=Canon;name=\"500D + 18-55mm IS + EF-S 55-250 IS\";price={\n      currencyIso=USD;formattedValue=\"$927.89\";priceType=BUY;value=\"927.89\";\n    };stock={\n      stockLevel=349;stockLevelStatus=inStock;\n    };summary=\"EOS 500D + 18-55mm IS + EF-S 55-250 IS - 15.1 MP CMOS, Full HD (1080p), 3.4fps, 3.0\\U201d Clear View LCD, DIGIC 4, 9-point AF\";\n  }\n]\n\nFirst sync creates proper entry in core-data. I've got cartEntry + related cart + related product. However trying to achieve update on cartEntry (with new quantity and same structure as above) makes no result. \nWhat I've discovered, same operation on cart entity, with new quantity of cartEntry I want to update have a correct result.\n@Edit - another interesting thing. When I removed circular reference (entries from cart that is referenced by cartEntry) update seems to work fine.. Same issue :( Any news?. @JanRajtr \nHello,\nManaged to handle your problem? I've got quite similar issue, however it is not creating any kind of nested relationship, not only the one with same ID's. Maybe you can give a some sort of hint how to move forward.. @3lvis What exactly you're expecting from my side? I can prepare sample JSON, rest of settings are right on the screens :) Let me know about details, I will prepare ASAP.. It can be like that \nSampleJSON.txt\n. @3lvis Found the reason. Somehow we forgot to use:\ninsertRelationships, updateRelationships\nand use parent reference. ",
    "jassimkm": "\nPlease see my data model. What am I doing wrong.\nHere is my code\n let fileName = \"sample.json\"\n        let url = URL(string: fileName)!\n        let filePath = Bundle.main.path(forResource: url.deletingPathExtension().absoluteString, ofType: url.pathExtension)!\n        let data = try! Data(contentsOf: URL(fileURLWithPath: filePath))\n         json = try! JSONSerialization.jsonObject(with: data, options: []) as! [[String: Any]]\n      Sync.changes(json  , inEntityNamed: \"Branch\", dataStack: self.dataStack) { error in\n            if error==nil {\n            self.fetchCurrentObjects()\n            }\n            else{\n                print(error.debugDescription)\n            }\n        }\nfunc fetchCurrentObjects() {\n    let request = NSFetchRequest<NSFetchRequestResult>(entityName: \"Branch\")\n\n    let data = (try! self.dataStack.mainContext.fetch(request)) as! [NSManagedObject]\n    print(data)\n    self.deptTableView.reloadData()\n}. Yes thank you.\n",
    "Zarakas": "Hey @3lvis ,\nversion is iOS 10.3.2. ",
    "kleber11": "I have the same error. Any ideas?. @3lvis thanks. It works perfectly! :). ",
    "alijaza": "Pinging for an update on this, if you have one @3lvis. Thanks!. Thanks for the quick reply. I thought about this solution but I see two issues:\n\n\nMy messages responses have the usual key 'id' while the lastMessage has a different key ('messageId'). Any way to handle this without an API update?\n\n\nI would have to copy the 'lastMessage' into the 'conversation.messages' set myself after calling sync. Also I'd have to update the 'lastMessage' attribute every time a new message comes in. Any way to avoid this and read this directly into the 'conversation.messages' set?. Thanks @3lvis for your quick replies and also for this awesome tool. One more issue I came across is that my data comes paginated in sets of 20 results at a time. Sync's default behavior when including deletes seems to erase all of my objects except the current page of data. Is there any way for Sync to handle deletes only in the case that they are somehow (?) marked for deletion (and NOT delete all objects that are not in the current page of results? In other words, how can Sync be used with paginated data?. Ok, I believe I found the root of the problem so I'm describing here in case it benefits anyone else: Each of these objects is a message within a conversation. Before actually fetching these from the server I get the conversation object AND the latest message of the conversation. I sync the conversation and the last message, but the \"last message\" comes WITHOUT the phoneNumber field, which means that later when I fetch all messages and sync those, the existing record of the last message isn't in the scope of my Sync. That causes a collision of the primary key and the object isn't inserted since it already exists, but for some reason that is not reported as an error.. @3lvis would you mind commenting on this when you have a minute? Thank you!. \n\n",
    "TheSwiftyCoder": "Managed to solve it - DATAStack not needed as an import. ",
    "MicMat68": "I think json structure firebase has a part of responsability.\nRelationships one-to-many simplified with format :\nattributs :\n-key_firebase1: true\n-key_firebase2: true\n. After the first init, it's work fine.\nI will preload data in app, but for development, it's painful.\nWith 2 entities and a relationship on-to-many, it's work fine, but with a third entity, it's very increasing.... ",
    "lm2343635": "Thank you for you replying. I've solve this problem in such way:\nhttps://github.com/lm2343635/Grouper/blob/2bdb6c113a36fcffd5f77d526bb03067661b2787/Core/Support/Sync%2BObjC.swift\nBut I do not think it is a good solution to this problem. \nI have know what you said. I am very pleasure to make a transfer file using enums in Objective-C. I will make a pull request to you.(^ . ^)\nBest wishes. . New pull request has been submitted. @3lvis . Cloud you please release 3.3 on CocoaPods. Thanks!. It's OK for me to use the class method Sync.changes.\nI want to know the differences between the class method and the instance method dataStack.sync. ",
    "ValeriiVV": "SOLVED:\nThe reason was that I named my attribute \"tag_id\" (like in my json response), but I should had named it \"tagID\".. ",
    "mrDyos": "```swift\nlet remotePrimaryKeys = changes.map { $0[remotePrimaryKey] }\nlet remotePrimaryKeysWithoutNils = (remotePrimaryKeys.filter { (($0 as? NSObject) != NSNull()) && ($0 != nil) } as! [NSObject?]) as! [NSObject]\nvar remotePrimaryKeysAndChanges = NSObject: [String: Any]\nfor (primaryKey, change) in zip(remotePrimaryKeysWithoutNils, changes) {\n    remotePrimaryKeysAndChanges[primaryKey] = change\n}\n```\nYou combine a filtered list of remotePrimaryKeysWithoutNils and not a filtered list of changes. At the output, it may turn out that primaryKey does not match the change.\nexample. ",
    "celiagomezdev": "@3lvis thanks a lot for your fast reply, I understand now! I'm still figuring out how core data works. I was not doing it properly from the beginning. Thanks!\n. ",
    "iballistic": "Hi,\nI have a similar issue but do not use predicates. I have changed my schema and made sure all entities have a primary key - not sure if it is related.\nFor some reason,  existing relations are broken after importing new data. My use case is that I backup data on one device and restore it to another device which has existing records. \nCould you please let me know if I am missing anything? This should be pretty easy to reproduce. I am running version 3.3.1 \n. thank you @3lvis\nI am sorry for the confusion, the schema changes were done prior to any export/import process. That is just to make sure I have primary keys for all my entities. \nAs far as I can tell my schema is 100% the same across the board, in my case data is not wiped out, just foreign keys are set to null where ever relation exists. \n. will do,  thank you very much! I will try to create a small app and reproduce in smaller scale and share. . Code is used to import: \n            let from : URL = appDelegate.applicationDocumentsDirectory.appendingPathComponent(\"Import.json\")\n            let data = try! Data(contentsOf: URL(fileURLWithPath:  from.path))\n            let json = try! JSONSerialization.jsonObject(with: data, options: []) as! [[String: Any]]\n            Sync.changes(json, inEntityNamed: \"EntityUser\", inContext: appDelegate.persistentContainer.viewContext) { error in. Yes, I will be happy to check whatever is required. I presume I need to check out #432 and modify and commit? Sorry I have not done this before...\nRegardless I can tell what you are doing differently. This must be a two-step process. Either create a record before importing or use two new files that I am attaching. First import1. json, and then import2.json, after you import import2.json all relations in import1 will be broken. \nArchive.zip\n. oh great! thank you very much! It makes sense . Can't commit back, my username/password is accepted. Here is the proper test case.\nfunc test431() {\n    let dataStack = Helper.dataStackWithModelName(\"431\")\n\n    let usersA = Helper.objectsFromJSON(\"431-1.json\") as! [[String: Any]]\n    dataStack.sync(usersA, inEntityNamed: \"EntityUser\", completion: nil)\n    XCTAssertEqual(Helper.countForEntity(\"EntityUser\", inContext: dataStack.mainContext), 2)\n    XCTAssertEqual(Helper.countForEntity(\"EntityUserDetail\", inContext: dataStack.mainContext), 4)\n\n    let userDetail1 = Helper.fetchEntity(\"EntityUserDetail\", predicate: NSPredicate(format: \"id = %@\", \"4C97444F-45C4-4C86-8F1F-80079E134CB4\"), inContext: dataStack.mainContext).first\n    let parentUser1 = userDetail1?.value(forKey: \"user\") as? NSManagedObject\n    XCTAssertEqual(parentUser1?.value(forKey: \"id\") as? String, \"307AC1FF-AC14-490C-A5D1-4E14674E4987\")\n\n    dataStack.sync(usersA, inEntityNamed: \"EntityUser\", completion: nil)\n\n    XCTAssertEqual(Helper.countForEntity(\"EntityUser\", inContext: dataStack.mainContext), 2)\n    XCTAssertEqual(Helper.countForEntity(\"EntityUserDetail\", inContext: dataStack.mainContext), 4)\n\n    let userDetail2 = Helper.fetchEntity(\"EntityUserDetail\", predicate: NSPredicate(format: \"id = %@\", \"4C97444F-45C4-4C86-8F1F-80079E134CB4\"), inContext: dataStack.mainContext).first\n    let parentUser2 = userDetail2?.value(forKey: \"user\") as? NSManagedObject\n    XCTAssertEqual(parentUser2?.value(forKey: \"id\") as? String, \"307AC1FF-AC14-490C-A5D1-4E14674E4987\")\n    //import the second JSON to break relations in the first JSON import\n    let usersB = Helper.objectsFromJSON(\"431-2.json\") as! [[String: Any]]\n    dataStack.sync(usersB, inEntityNamed: \"EntityUser\", completion: nil)\n    XCTAssertEqual(Helper.countForEntity(\"EntityUser\", inContext: dataStack.mainContext), 3)\n    XCTAssertEqual(Helper.countForEntity(\"EntityUserDetail\", inContext: dataStack.mainContext), 6)\n    //use predicate from first import to make relations are not broken after the second file is imported\n    let userDetail1Repeat = Helper.fetchEntity(\"EntityUserDetail\", predicate: NSPredicate(format: \"id = %@\", \"4C97444F-45C4-4C86-8F1F-80079E134CB4\"), inContext: dataStack.mainContext).first\n    let parentUser1Repeat = userDetail1?.value(forKey: \"user\") as? NSManagedObject\n    XCTAssertEqual(parentUser1?.value(forKey: \"id\") as? String, \"307AC1FF-AC14-490C-A5D1-4E14674E4987\")\n\n    dataStack.drop()\n}. [Archive.zip](https://github.com/3lvis/Sync/files/1413137/Archive.zip)\n\n. ",
    "zanderxyz": "Hi,\nI'm having a very similar problem. I have a model similar to the following:\nEntities:\nGroup has one-to-many relationship with Plan\nPlan has one-to-many relationship with Participant\nParticipant has many-to-one relationship with User\nExample JSON\n{\n  \"id\": 1,\n  \"name\": \"Group 1\",\n  \"plans\": [\n    {\n      \"id\": 1,\n      \"name\": \"Plan 1\",\n      \"participants\": [\n        {\n          \"id\": 1,\n          \"name\": \"Participant 1\",\n          \"user\": {\n            \"id\": 2,\n            \"name\": \"User 2\"\n          }\n        },\n        {\n          \"id\": 2,\n          \"name\": \"Participant 2\",\n          \"user\": {\n            \"id\": 1,\n            \"name\": \"User 1\"\n          }\n        }\n      ]\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Plan 2\",\n      \"participants\": [\n        {\n          \"id\": 3,\n          \"name\": \"Participant 3\",\n          \"user\": {\n            \"id\": 1,\n            \"name\": \"User 1\"\n          }\n        },\n        {\n          \"id\": 4,\n          \"name\": \"Participant 4\",\n          \"user\": {\n            \"id\": 2,\n            \"name\": \"User 2\"\n          }\n        }\n      ]\n    }\n  ]\n}\nThe first time I sync this it works fine, but if I want to, for example, change the name of a Participant I want to just sync the following JSON as a Participant and not lose any existing relationships:\n{\n  \"id\": 1,\n  \"name\": \"New name\"\n}\nIs this what your pull request above is meant to solve with the new operations?\nThanks. ",
    "tlowrimore": "Hey Elvis,\nThanks so much for the quick response!\nCheers!\n\nOn Sep 22, 2017, at 2:04 AM, Elvis Nu\u00f1ez notifications@github.com wrote:\nCheck Sync 4 https://github.com/3lvis/Sync/releases/tag/4.0.0\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "Baza207": "@3lvis Might be good to update the Readme for the Cartage line to github \"3lvis/Sync\" ~> 4.0 as 3.0 fails to build in Xcode 9 at the moment (4.0 worked fine once I found this though \ud83d\ude09).. ",
    "MichalAlgor": "Probably, but my database is allready structured that way. Also halving it this way makes it easy to use in my usecases. . ",
    "alejouribesanchez": "Gracias a ti, tu librer\u00eda me ha servido mucho, estar\u00e9 esperando la nueva version (release)  Sync \u2014 4.0.1 para poder actualizar mi proyecto en objective-c a tu pod con swift 4.. Thanks =D . ",
    "aamir-nazir": "@3lvis when we are planing to merge this feature in master?. @3lvis yes sure, I am up for to do some of the tasks.. @3lvis do we seeking more Test Cases? I can be able to implement some of them on weekend. . Yeah I expecting same format but didn't tried, Thank you for very quick response.. @3lvis do you mind commenting on this?. ",
    "petkrein": "Hi @3lvis,\nhave the same warnings when dropping first and updating.. Thank you @3lvis . ",
    "donghd": "I have same problem when sync 1 file (total: 19 crm leads , 4 stages) with Leads - Stage (many-to-one  relationship), it creates many Stages with same ID (that expected to one with unique ID), now I changed to (many-to-many), but it only saved the last connection of each stage, and still create duplicate Stages (8 stages, expected 4 stages) with same ID. \nTemporary, I am backing to many-to-one relationship, and do further processing after fetching request, filter duplicated ID to output expected result. \nAnyway, I will check more and try some another way ... If you have any tips or suggest, please kindly let me know.\nThanks,. I am considering and will test as below, that may work\n- Sync  4 stages firstly (new different json data)\n- Sync 19 leads with core data's 'stage' attr with json's 'stage_id' storing only stage's ID to linked to 1 of 4 pre-created stages record, that mean Sync only create relationship, to avoid create new stage's records.\nthat may be same as your comments @batjo . @3lvis I have \"Invalid expression\" when refer such as lead.stage, even I did Sync data model lead's stage with json data's stage_id value (Simplified mapping). How should I fix?\n => Sorry, that is the cached issue, not relating to Sync. It need to clear caches, clean carefully.\n@batjo : as you mention you sync Tag's website (with json data {website_id: value}), can you access data model Website from Tag such as : Tag.website as Website  ?? \n=> Actually, I did try some ways, seems Sync relationship (many-to-one, many-to-many) (simplified version or not) not work as my expected, currently I removed relationship, and just use attribute to store refer ID value in core data.\nThanks,\n. Yes, I can see it work in simple case. However Sync doesn't recognize existing 'id', it always create new one with same 'id', even I will operations: [.insert, .update] . It is quite difficult incase we use parent_id to link to Model itself.. @3lvis : I would like to report the issue as below:\nTask:\nwe need to sync Partner, with relationship to itself, to parent-partner(via json 'parent_id')\nIssue:\n1. It cannot sync correctly one time cause, parent_id's partner is not yet existed before, so it also save relationship 'parent' is null in core data.\n\nSo I separate into 2 time.\nvar update1: Store parent-partner (normally it has 'parent_id' = null)\nvar update1: Store child-partner (normally it has 'parent_id' <> null)\nself.dataStack.sync(update1, inEntityNamed: ResPartner.entity().name!) { error in    \n     self.dataStack.sync(update2, inEntityNamed: ResPartner.entity().name!, operations: [.insert, .update]) { error in                 \n                    completion(.success(nil))\n     }\n}\n1st time: OK (as expected)\n2nd time: all objects of update2 are created new (have 2 objects same ID)\n3rd: all objects of update2 are created new (have 3 objects same ID)\n....\nCan you check it?\nThanks. \n",
    "max-pfeiffer": "@3lvis : made a pull request with a test: https://github.com/3lvis/Sync/pull/452. @3lvis : I double checked the issue: it was an error in the JSON which was delivered by the server. \"true\"/\"false\" was delivered instead of true/false as JSON Value. Google Gson eats it, which we use for Android. But the behaviour of your library is absolutely correct.\nSo error was on my side, sorry about that. Just keep this issue closed.. ",
    "siempay": "do I have to use dataStack? and if I do! will I have to use it for all communication with my model?\nlike adding, updating, deleting and fetching from my model will go through it ?. when I do fetch with mainContext or viewContext even if I don't know the difference between theme, I get a list of [User] with length of 2 as I inserted (my json from server has two users in it) but when I try to access to any property (i.e id or name) i get nil even . about this last one, sorry it was my bad, It was that attributes names did not match the ones in from the server. so I get nil in some but I get a value in others who were matched .\nAs I understood, my attributes in from json must be in snake_case so they can be matched with the attributes in my model (camelCase) . just one thing, so if i have in my model file an attribute called someAttributeName, \nit is gonna be mapped with both of these  \n\n\n{ \"someAttributeName\" : \"some value\"} \n\n\n{ \"some_attribute_name\" : \"some value\"} . one more question: \nabout this If you want to use id for the remote primary key you also have to add the flag sync.remoteKey and write id as the value.\nI did not understand it! \nwhat I wanna do is to create a primary key (i.e localKey), and keep the attribute id as a remote key that want to update when I sync an object \nexample : \nT1 : user = User() // { id: 0, localKey:1, ....}\nT2 : user.sync()\nT3: get object user form the server and do insertOrUpdate \nT4:  user =  // { id: 77, localKey:1, ....}\n\n\nwhat I think is that I am gonna add an attribute localKey to my model and mark it as sync.isPrimaryKey , and keep the attribute id as is (no flag added ) \nam I right?. primary key of core data is customID and for the json is id, that is why I was think of sending this customID with the json, and then make the server return it back.\nso I would send and object user = {id:0, customID:2,....} and then the server will store the object user and return it back as user = { id:1, cosutomID:2, ....}, I dont know what are the best practices. I am the one who asked the question hhhh, but it worked, setting the customID to (sync.isPrimaryKey: YES), and keeping the id as is, (not adding any (sync.remoteKey: id)) .\n. I doubt it is a recursive export because I checked multiple times, and I know when it is a recursive export. So what is this \"strange key\" ?\nThe model is a bit big I dont know how it is gonna help ?. I cannot reproduce it either!\n\ncould this give you any hint ! or at least, can I know witch relationship caused this? I mean the one at the end\n. Hi @3lvis :\nThis crash just happened on my watch!\nSelecting the last line where it stopped in the threads , \nI did a (lldb) po self and this was the result :\n<FamilleGmmPrdCnsPrcpl: 0x1c828b400> (entity: FamilleGmmPrdCnsPrcpl; id: 0xd000000000200036 <x-coredata://54329177-386C-4868-86EB-E1390BC80F33/FamilleGmmPrdCnsPrcpl/p8> ; data: <fault>)\nEven though when I go back one line to see the parent of this relationship.\nI do (lldb) po self, it prints an object correctly \nI dont know what this <fault>\u00a0! is it the problem ?\nWhat should I do to fixe this?\nThank you.\n. Hi @3lvis,\nThanks for the replay, for the po self.willAccessValue(forKey: nil) , I got this: \nerror: property 'willAccessValue' not found on object of type 'NSManagedObject *'\nerror: use of undeclared identifier 'forKey'\n\nAbout relations, I checked them all, they are fine.\nAbout trying to access deleted data: I do not understand why because we are doing an export() so if there was a deleted relationship, it would just not be exported. why would it crash then ? \nAbout  data corruption. how can I know if my data is corrupted? I saw these objects and did not notice anything unusual .\n\nThe crash kept happening in this build only, but after I reinstalled the app, I tried hard reproduce the crash but I could not. I just worked as expected.\n . Hi @3lvis,\nOn other question, Dose exporting a model in background thread (or any thread other than main) have the potentiel to cause a problem or a crash? \n. Meaning? is it what should be or not ? because for me that is a problem! only one object should exist with a primary key = something. My situation is this :\nI use Sync to sync data from/to my iOs app from/to my API, and it is working fine as you said the ids and guaranteed to be unique.\nBut as I am using MultipeerConnectivity , I am exchanging objects between devices (say Device1 is sending Commande to Device2) and I am using Sync to insertOrUpdate objects in devices, and inside the Commande there are relations (i.e User) which has an id, with this implementation, I will have a new user with every Commande.\nI think there should be a test on coming json or at least Sync should re-insert that object if it has the same id\nps: I that part of Sync was written in swift, I would of worked on this. I dont understand, I meant I wanna export my models with different dateformat that exist by default.\nis there any config to make sync export model with a specific date format . I see that this works for exporting only. I need to use cameCase in .sync(... and .insertOrUpdate(...\n. it dose work for attributes but not for relationships. I wish if there is a way to sync changes from a json that has only some attributes and relations to an object and keep other attributes untouched.\nexample: I wanna sync this json \nJSON\njson = { \"id\": 3, \"localKey\": 5, \"product_type_id\": 4 } \nto an object that have other relations (say one-to-one productUser -> User), and I expect the result to be myObject.productType has value productType4  but myObject.productUser is still the same as before syncing the json.\nlong story short: I wanna update only attributes that came in the json dictionary and keep other other attributes/relations the same\n. So you are saying that .sync(... or insertOrUpdate(... will care only about keys is json object and if a key dose not existe in the json it will not be set to nil in coredata?. ",
    "zhihuilong": "I just want to map firstName(JSON) to firstName(Core Data). Is there any solutions to achieve this? @3lvis . It's really annoying that you cannot map two value which has the same name.. ",
    "shiangyichen": "@3lvis  Thank you for your response. But i set the remoteKey & isPrimaryKey, it seems sync_remotePrimaryKey() would translate to snackcase automatically, it will cause nil result...\nIf i change the sync_remotePrimaryKey() in file NSEntityDescription+PrimaryKey.m to [primaryKeyAttribute.name hyp_camelCase], it work fine. So is there a method or option  like inflectionType for remotePrimaryKey  to camelCase for use? Thank you.. ",
    "aalikhokhar": "Issue fixed if I delete both entities records when logging out. And when loging in again Sync Inserts Fine.. ",
    "frankkienl": "I'll see what I can do.\nIt was hard to reproduce with the real app,  it happend only sometimes and only when using the real database. So it might not be easy to make it happen in a unit test.\nIf I'm able to create a minimal app, with minimal testdata that can still reproduce the error, I'll share it ;-). ",
    "ewstrand": "In my app and also in the sample code \"iOS Demo\" sync does not seem to parse in the uuid string of form \"5042fbd9-f85b-4422-b276-02f949f1bc59\" even when you change the type of the entity id property to the type of UUID. I modified the sample program as follows:\nI changed the project target to iOS 11 for support for the new UUID type in core data, I changed the data model as follows:\n\nI changed the user.json file to:\n[\n  {\n    \"id\": \"5042fbd9-f85b-4422-b276-02f949f1bc59\",\n    \"name\": \"Leanne Graham\",\n    \"username\": \"Bret\",\n    \"email\": \"Sincere@april.biz\",\n    \"address\": {\n      \"street\": \"Kulas Light\",\n      \"suite\": \"Apt. 556\",\n      \"city\": \"Gwenborough\",\n      \"zipcode\": \"92998-3874\",\n      \"geo\": {\n        \"lat\": \"-37.3159\",\n        \"lng\": \"81.1496\"\n      }\n    },\n    \"phone\": \"1-770-736-8031 x56442\",\n    \"website\": \"hildegard.org\",\n    \"company\": {\n      \"name\": \"Romaguera-Crona\",\n      \"catchPhrase\": \"Multi-layered client-server neural-net\",\n      \"bs\": \"harness real-time e-markets\"\n    }\n  },\n  {\n    \"id\": \"4cd1242c-ab25-43ef-983c-b60977195298\",\n    \"name\": \"Ervin Howell\",\n    \"username\": \"Antonette\",\n    \"email\": \"Shanna@melissa.tv\",\n    \"address\": {\n      \"street\": \"Victor Plains\",\n      \"suite\": \"Suite 879\",\n      \"city\": \"Wisokyburgh\",\n      \"zipcode\": \"90566-7771\",\n      \"geo\": {\n        \"lat\": \"-43.9509\",\n        \"lng\": \"-34.4618\"\n      }\n    },\n    \"phone\": \"010-692-6593 x09125\",\n    \"website\": \"anastasia.net\",\n    \"company\": {\n      \"name\": \"Deckow-Crist\",\n      \"catchPhrase\": \"Proactive didactic contingency\",\n      \"bs\": \"synergize scalable supply-chains\"\n    }\n  },\n  {\n    \"id\": \"b13e00b9-ebd6-4a13-9eec-4ccc6261693c\",\n    \"name\": \"Clementine Bauch\",\n    \"username\": \"Samantha\",\n    \"email\": \"Nathan@yesenia.net\",\n    \"address\": {\n      \"street\": \"Douglas Extension\",\n      \"suite\": \"Suite 847\",\n      \"city\": \"McKenziehaven\",\n      \"zipcode\": \"59590-4157\",\n      \"geo\": {\n        \"lat\": \"-68.6102\",\n        \"lng\": \"-47.0653\"\n      }\n    },\n    \"phone\": \"1-463-123-4447\",\n    \"website\": \"ramiro.info\",\n    \"company\": {\n      \"name\": \"Romaguera-Jacobson\",\n      \"catchPhrase\": \"Face to face bifurcated interface\",\n      \"bs\": \"e-enable strategic applications\"\n    }\n  },\n  {\n    \"id\": \"2b808bb3-2ee9-4932-aa26-774e677e1baa\",\n    \"name\": \"Patricia Lebsack\",\n    \"username\": \"Karianne\",\n    \"email\": \"Julianne.OConner@kory.org\",\n    \"address\": {\n      \"street\": \"Hoeger Mall\",\n      \"suite\": \"Apt. 692\",\n      \"city\": \"South Elvis\",\n      \"zipcode\": \"53919-4257\",\n      \"geo\": {\n        \"lat\": \"29.4572\",\n        \"lng\": \"-164.2990\"\n      }\n    },\n    \"phone\": \"493-170-9623 x156\",\n    \"website\": \"kale.biz\",\n    \"company\": {\n      \"name\": \"Robel-Corkery\",\n      \"catchPhrase\": \"Multi-tiered zero tolerance productivity\",\n      \"bs\": \"transition cutting-edge web services\"\n    }\n  },\n  {\n    \"id\": \"ff5cc05e-4ef5-4123-bc22-d90eb2dc3b79\",\n    \"name\": \"Chelsey Dietrich\",\n    \"username\": \"Kamren\",\n    \"email\": \"Lucio_Hettinger@annie.ca\",\n    \"address\": {\n      \"street\": \"Skiles Walks\",\n      \"suite\": \"Suite 351\",\n      \"city\": \"Roscoeview\",\n      \"zipcode\": \"33263\",\n      \"geo\": {\n        \"lat\": \"-31.8129\",\n        \"lng\": \"62.5342\"\n      }\n    },\n    \"phone\": \"(254)954-1289\",\n    \"website\": \"demarco.info\",\n    \"company\": {\n      \"name\": \"Keebler LLC\",\n      \"catchPhrase\": \"User-centric fault-tolerant solution\",\n      \"bs\": \"revolutionize end-to-end systems\"\n    }\n  },\n  {\n    \"id\": \"551f7575-60f5-46af-a095-ababbda13ffd\",\n    \"name\": \"Mrs. Dennis Schulist\",\n    \"username\": \"Leopoldo_Corkery\",\n    \"email\": \"Karley_Dach@jasper.info\",\n    \"address\": {\n      \"street\": \"Norberto Crossing\",\n      \"suite\": \"Apt. 950\",\n      \"city\": \"South Christy\",\n      \"zipcode\": \"23505-1337\",\n      \"geo\": {\n        \"lat\": \"-71.4197\",\n        \"lng\": \"71.7478\"\n      }\n    },\n    \"phone\": \"1-477-935-8478 x6430\",\n    \"website\": \"ola.org\",\n    \"company\": {\n      \"name\": \"Considine-Lockman\",\n      \"catchPhrase\": \"Synchronised bottom-line interface\",\n      \"bs\": \"e-enable innovative applications\"\n    }\n  },\n  {\n    \"id\": \"6fb0f23e-21c7-4574-b733-30cc789442bd\",\n    \"name\": \"Kurtis Weissnat\",\n    \"username\": \"Elwyn.Skiles\",\n    \"email\": \"Telly.Hoeger@billy.biz\",\n    \"address\": {\n      \"street\": \"Rex Trail\",\n      \"suite\": \"Suite 280\",\n      \"city\": \"Howemouth\",\n      \"zipcode\": \"58804-1099\",\n      \"geo\": {\n        \"lat\": \"24.8918\",\n        \"lng\": \"21.8984\"\n      }\n    },\n    \"phone\": \"210.067.6132\",\n    \"website\": \"elvis.io\",\n    \"company\": {\n      \"name\": \"Johns Group\",\n      \"catchPhrase\": \"Configurable multimedia task-force\",\n      \"bs\": \"generate enterprise e-tailers\"\n    }\n  },\n  {\n    \"id\": \"00363dc5-986f-4c9c-a838-2c4172e5586e\",\n    \"name\": \"Nicholas Runolfsdottir V\",\n    \"username\": \"Maxime_Nienow\",\n    \"email\": \"Sherwood@rosamond.me\",\n    \"address\": {\n      \"street\": \"Ellsworth Summit\",\n      \"suite\": \"Suite 729\",\n      \"city\": \"Aliyaview\",\n      \"zipcode\": \"45169\",\n      \"geo\": {\n        \"lat\": \"-14.3990\",\n        \"lng\": \"-120.7677\"\n      }\n    },\n    \"phone\": \"586.493.6943 x140\",\n    \"website\": \"jacynthe.com\",\n    \"company\": {\n      \"name\": \"Abernathy Group\",\n      \"catchPhrase\": \"Implemented secondary concept\",\n      \"bs\": \"e-enable extensible e-tailers\"\n    }\n  },\n  {\n    \"id\": \"2b21dd8f-d1fe-4992-9083-53afa6658832\",\n    \"name\": \"Glenna Reichert\",\n    \"username\": \"Delphine\",\n    \"email\": \"Chaim_McDermott@dana.io\",\n    \"address\": {\n      \"street\": \"Dayna Park\",\n      \"suite\": \"Suite 449\",\n      \"city\": \"Bartholomebury\",\n      \"zipcode\": \"76495-3109\",\n      \"geo\": {\n        \"lat\": \"24.6463\",\n        \"lng\": \"-168.8889\"\n      }\n    },\n    \"phone\": \"(775)976-6794 x41206\",\n    \"website\": \"conrad.com\",\n    \"company\": {\n      \"name\": \"Yost and Sons\",\n      \"catchPhrase\": \"Switchable contextually-based project\",\n      \"bs\": \"aggregate real-time technologies\"\n    }\n  },\n  {\n    \"id\": \"9bb4eb5a-e5df-4ac9-961b-2f8d0a38d6a8\",\n    \"name\": \"Clementina DuBuque\",\n    \"username\": \"Moriah.Stanton\",\n    \"email\": \"Rey.Padberg@karina.biz\",\n    \"address\": {\n      \"street\": \"Kattie Turnpike\",\n      \"suite\": \"Suite 198\",\n      \"city\": \"Lebsackbury\",\n      \"zipcode\": \"31428-2261\",\n      \"geo\": {\n        \"lat\": \"-38.2386\",\n        \"lng\": \"57.2232\"\n      }\n    },\n    \"phone\": \"024-648-3804\",\n    \"website\": \"ambrose.net\",\n    \"company\": {\n      \"name\": \"Hoeger LLC\",\n      \"catchPhrase\": \"Centralized empowering task-force\",\n      \"bs\": \"target end-to-end models\"\n    }\n  }\n]\nWhen you run the program at first it seems to work as seen here:\n\nbut when you examine the raw DataModel.sqlite file you find that all of the id fields contain NULL as seen here:\n\nAll of this happens without any errors being thrown. It is not until you quit the app and relaunch it that the following error is raised:\n\n. Ok I tracked down the error and I have a fix. The problem was in the \"NSManagedObject+PropertyMapperHelpers.m\" file; it was missing a case for handling the UUID type. Here is the file with the fixes:\nNSManagedObject+PropertyMapperHelpers.m.zip\nmy added fixes are on lines: 26,27 , 210,211 , 233,234. ",
    "kaszap82": "At the top of a swift file? (same issue) Or how do you mean \"top of the project\"? . Not working: No such module 'Sync.NSEntityDescription_PrimaryKey', I check the header search path, and there is the ${PODS_ROOT} recursive, so I think it can be find in this way.\n. Sorry, it's an old project, I think there was a project config error, because now it's working. Sorry again, and thanks for your time!. ",
    "JanRajtr": "Hello, \nwell my workaround at this moment was to implement controllers in API which returns all nested objects in advance. Anyway I have been thinking about it and in some of next versions of my app I would be able to remove the foreign key attribute with \"id\" from main object, because I hopefully will not need it anymore. It does not solve the issue but at least works on consistent APIs and I will not need to cache all entities in advance...\n. ",
    "rajtharan-g": "@3lvis Any update on this issue please...Help wanted. Im closing the issue as it got solved in the above pull request.. ",
    "joeboyscout04": "I think I got it fixed. Let me know how it looks to you. . Can I get a maintainer to merge this one ?. Whoops, got a bit carried away there.  It's gone now. . I\u2019m pretty sure it didn\u2019t work more than one level deep.  I wrote a test case in the PR you can try. \n\nJoseph Elliott\n\nJoulebugs use energy wisely. Get the Joulebug IPhone app to join your friends at http://www.joulebug.com/\n\nOn May 14, 2018, at 22:26, Rob Lester notifications@github.com wrote:\nCorrect me if I am wrong, but it looks like this may already be a feature: #460\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I've gotten this same error under similar conditions...I think it may have something to do with the data being on different threads.  . \n",
    "JupiterJones": "I've been having a similar issue (on and off) and it's always been a problem with my data model.\nIs there a way to get greater visibility - some context about what caused the error?\nps Thanks for the awesome framework. :). My own stupid mistake looking at the Xcode debug print of the export rather than the resulting encoded string.\nClosing this issue.. ",
    "Drenov": "Hello @3lvis, I've found reasons for that. It is normal native Core Data behaviour for inherited objects. So the decision is to use base class as abstract.. ",
    "Sydney-o9": "Something similar to this basically:\nhttps://github.com/evermeer/EVReflection#what-to-do-when-you-use-object-inheritance\nThis is not supported yet - is it?. ",
    "rlester": "Correct me if I am wrong, but it looks like this may already be a feature: https://github.com/3lvis/Sync/issues/460. ",
    "joshxplor": "@3lvis \nWill provide a unit test. I did fork this project and run the test, but seems that the NSManagedObject+Sync is different with the current version? \non line 327 of the fork it was using childPredicate = NSPredicate(format: \"%K IN %@ OR %K = %@\", entity.sync_localPrimaryKey(), ids, inverseEntityName, self) in the current version though it uses this childPredicate = NSPredicate(format: \"ANY %K IN %@ OR %K = %@\", entity.sync_localPrimaryKey(), ids, inverseEntityName, self)\nso I tried to use the current predicate with ANY and run the test in memory. almost half of the test cases are failing.. ",
    "rebe1one": "I am also running into some issues with these new changes when running this in an in-memory store. I'm having a little trouble understanding the need for the ANY operator here. Since the first parameter in the predicate is the local primary key I can only imagine ANY working if it was actually an array, but the general use case is probably not going to be. Is there something I'm misunderstanding here?. Looks like in the 4.1.0 some specific relationship options were added, and @TonyNikolov you're syncing with only [.insert, .update] but you need to add .insertRelationships and .updateRelationships as well in order for the entities to be properly linked.. ",
    "gabzsa": "Same problem.. ",
    "schwuk": "This was affecting our project as well, and downgrading has resolved the issue. Will try and dig deeper.. ",
    "Konrad77": "Tried latest version (4.2.1) but 'one to many' relation doesn't work in that version. Downgraded to 4.0.3 again and it worked like a charm. . ",
    "montechristof": "Hi @3lvis,\nI'll cook up a uni test when i have time(after work), however this behaviour does not happen if i delete the app from the phone, and reinstall it. The JSON data is the same in both cases, the only possible difference is that no Measure(the entity it crashes on) in core data prior to syncing. This leads me to believe that there is a problem with my model/contexts. Issue was fixed by adding a discardable value to the primaryKey.\nPlease close and delete.. ",
    "xxstefanoxx": "thanks!. ",
    "agottardo": "Yes, indeed. Thanks!. ",
    "allemattio": "Hi @Proper-Job \nThanks,\nMy entity field name is uuid and is the same as the key of the json that I'm trying to sync.\nI'm aware of the hyper.remoteKey property and I'm using it in other fields, but this not seems to be the problem here.\nI've also already tried renaming this key to something else but nothing changes, the problem seems to be in the uuid value.\nDebugging I've found that the value from the JSON is found, but Sync is unable to valorize the field on the Core Data entity in order to persist it.\nAs I've said, the same code compiled with XCode 9.2 is working and with XCode 9.3 is not working.\nI found out that seems to be failing the mapping of the uuids values..but I can't understand why, maybe it's a problem in Sync with the new Swift or the new XCode but I don't know.\nI've been working on this problem the last two weeks without success.. ",
    "palla89": "Hi, I'm in the same working team of @allemattio and I'd like to add some details to the problem:\nIf we try with Xcode 9.2 in the NSManagedObject+SYNCPropertyMapperHelpers.m, the attributedClass for the key \"uuid\" (which is a String in our CoreData Model) \nClass attributedClass = NSClassFromString([attributeDescription attributeValueClassName]);\nreturns NSString (correct). If I run the same exact project with XCode 9.3 and up, it returns nil.\nSo I made a brutal check on the \"uuid\" key to fix the error and set the Class to NSString in that case. The value now correctly sets up BUT after that, when SYNC calls context.save() the app crashes with a strange [__NSArray0 bytes]: unrecognized selector sent to instance without any other hint. I don't really know where to start. Can you give us some help?\n. Hi! Sorry for the delay. We tried now the fix but unfortunately the result is maybe worse than before xD\nNow it doesn't works also in 9.2, when I check the result after the hyp_fill function, the 'uuid' in 9.2 is now uuid = \"(...not nil..)\" and then It crashes (before it worked) while if I try on newer XCode version, the uuid after the hyp_fill is just nil once again :(\nWe really can't understand what is the problem!\n. I think the problem could be in this piece of code:\n```\n- (id)valueForAttributeDescription:(NSAttributeDescription *)attributeDescription\n                  usingRemoteValue:(id)remoteValue {\n    id value;\nClass attributedClass = NSClassFromString([attributeDescription attributeValueClassName]);\n\nif ([remoteValue isKindOfClass:attributedClass]) {\n    value = remoteValue;\n}\n\n....\n}\n```\nThe variable attributedClass is still nil when try to read uuid class.\nThis code is in \"NSManagedObject+PropertyMapperHelpers.m\" file.\nHope this helps to resolve the issue.\nThank you!\n. We'll try to isolate the issue and let you know, but we are really struggling to understand why it used to work with the 9.2 flawlessly and with the minor 9.3 Xcode upgrade, without any other code change, it stopped to work. It's really a mystery to us. Same thing with 9.4 :( . ",
    "mariusschoenefeld": "Hey  @3lvis,\nsorry for the delay. I think I configured everything right. I added my data model below:\n\n. ",
    "patriksharma": "same happening to me. its coming NIL , did you find any solution @mariusschoenefeld . @arrchhy I have solved it. You need to set sync.remotekey as suggested above. Make sure your remote key name should be same as coming from API . ",
    "arrchyy": "this is frustrating. Error is nil though nothing is written into Core Data. . Okay I solved it by reading the demo source. the context in sync is self.dataStack.viewContext and not the one you normally set up in your app delegate. would have been nice to mention this in readme.. @3lvis oh I was just using the wrong .viewContext. I had had already a coredata layer in the app (initalised in app delegate). I had the misconception that Sync shared the same context as my existing core data layer (i.e. appDelegate.persistentContainer.viewContext). . @3lvis By the way thanks man for such awesome library! \ud83d\udcaa\ud83d\udcaa\ud83d\udcaa\ud83d\udcaa \nIt's super good  \ud83d\udc4d . ",
    "himanshuNetsol": "Hi, Can u please share ur email id so that i can share resources with u??\nThanks\n. Sure.. Thanks. Also, when im trying to sync large batch of data using  dataStack.sync , data  to-many relationship is not getting saved in the database. Only the data in master table is getting inserted. Im using these operations : \n        dataStack.sync(dataArray, inEntityNamed: table.rawValue, operations: [.insert, .update, .insertRelationships, .updateRelationships])\nBut, when i make an entry with  dataStack.insertOrUpdate, the data is getting inserted into the relationship tables.\nFor refrence, u can use the same json i've emailed u.\nCan u also help me out with that??. @3lvis . Can i get any possible help on above? :-)\n. hi @3lvis , Thanks for u time and reply. Yes, agree, But i'm using sync.remoteKey for all those cases , and providing their respective remote keys . Should'nt it make a difference?? . And, cakeOrder in an array , and should'nt it be a to-many relationship?. @3lvis , I ve tried that as well but data is still not getting saved in the relationship table using  dataStack.sync(dataArray, inEntityNamed: table.rawValue, operations: [.insert, .update, .insertRelationships, .updateRelationships]) but is getting saved using dataStack.insertOrUpdate\n\n. Hi @3lvis , It worked on Changing the name from orderId to Id. Also, i've to change the relationShip table's primary key name from rawCakeId to id. The Relationship is getting filling up. Haven't tested export() though after changing. . Yeah.. Indeed .. Thanks to you.. Also, i'll get back to u after completely testing export() . ",
    "fshbn": "Same here.. ",
    "KaiqueDamato": "Hi @3lvis,\nI think I'm facing a similar issue. I'm doing a new version of my app and on the new version I will send the data to the cloud. When I update my app with some core data objects to the new version and try to export it, it crashes. But sometimes all works fine.\nIf I create a new object on the new version and try to export it everything works as expected. \nI've checked the objects and all it seems fine. \nWhen the exports fails this is the crash that occurs:\n\nDo you have any thoughts on that?\nThank you in advance.. ",
    "zoltanbognar": "Hi Thanks for help \nI implemented the cancel through OperationQueue.\nsomething like:\n`var queue:  OperationQueue = OperationQueue()\nlet sync = Sync(changes: changes, inEntityNamed: entityName, dataStack: dataStack, operations: syncOptions)\nqueue.addOperations([sync], waitUntilFinished: false)`\nOnly one thing i missing:\nI'm not getting error feedback like in the datastack static sync method.\nIn the sync perform method  error is just printed to the console\nBest\nZoltan. Hi Elvis\none approach can be to add public error variable to Sync class:\nswift\npublic var error: NSError?\nand than: \n```swift\nfunc perform(using context: NSManagedObjectContext) {\n        do {\n            try Sync.changes(self.changes, inEntityNamed: self.entityName, predicate: self.predicate, parent: self.parent, parentRelationship: self.parentRelationship, inContext: context, operations: self.filterOperations, shouldContinueBlock: { () -> Bool in\n                return !self.isCancelled\n            }, objectJSONBlock: { objectJSON -> [String: Any] in\n                return self.delegate?.sync(self, willInsert: objectJSON, in: self.entityName, parent: self.parent) ?? objectJSON\n            })\n        } catch let error as NSError {\n            print(\"Failed syncing changes (error)\")\n            self.error = error\n        }\n    self.updateExecuting(false)\n    self.updateFinished(true)\n}\n\n```\nin the code user can check for e.g. error like this:\nswift\nlet sync = Sync(changes: changes, inEntityNamed: entityName, dataStack: dataStack, operations: syncOptions)\nsync.completionBlock = { [unowned sync] in\n    if let completion = completion {\n          completion(sync.error)\n     }\n}\nbut maybe there is better aproach\nBest \nZoltan\n. ",
    "svrzii": "Very weird. I went through my json array and added fake values before the CoreData sync, + changed my \"parents\" model value to Transformable and later back to Binary Data and now the parents are in my IXClass object.\nI deleted and installed the app again. Works now like it should.\nfor (i, json) in jsonArray.enumerated()  {\n   jsonArray[i][\"parents\"] = [\"test \\(i)\"]\n}. ",
    "jahir8a": "Nuevamente te felicito por el gran empe\u00f1o que le has dedicado a esta herramienta.\nBueno estado es solo una par\u00e1metro que me indica si todo sali\u00f3 bien o ocurri\u00f3 un error, este es c\u00f3digo que tengo para convertir la clave establecimientos en un arreglo de diccionarios como lo espera el metodo sync.\n\nEste es el resultado en consola de la conversi\u00f3n\n[[\"wifi\": 1, \"correo\": hotelcomayagua@gmail.com, \"categorias\": <__NSSingleObjectArrayI 0x60000001c680>(\n{\n    id = 1;\n    \"nombre_categoria\" = Hoteles;\n}\n)\n, \"descripcion\": Le brindamos un excelente servicio, \"pagina_web\": , \"nombre_empresa\": Hotel Comayagua, \"longitud\": -87.5455, \"telefono\": 27758564, \"id\": 1, \"tipo_establecimiento\": 1, \"servicios\": <__NSArrayI 0x600000251b50>(\n{\n    id = 1;\n    \"servicio_ofrecido\" = Alojamiento;\n},\n{\n    id = 3;\n    \"servicio_ofrecido\" = Desayunos;\n},\n{\n    id = 2;\n    \"servicio_ofrecido\" = Lavanderia;\n}\n)\n, \"latitud\": 14.2657, \"pagos\": <__NSArrayI 0x60000024ff30>(\n{\n    \"forma_pago\" = Efectivo;\n    id = 1;\n},\n{\n    \"forma_pago\" = Tarjeta;\n    id = 2;\n},\n{\n    \"forma_pago\" = Ambos;\n    id = 3;\n}\n)\n, \"rutas\": <__NSSingleObjectArrayI 0x60000001c8f0>(\n{\n    id = 3;\n    \"nombre_ruta\" = Alojamiento;\n}\n)\n, \"direccion\": Centro comayagua, \"mostrar\": 1, \"publicaciones_ids\": <__NSSingleObjectArrayI 0x60000001cb20>(\n1\n)\n, \"horario\": 24 horas]]\nY es este resultado es el que le paso a el metodo sync.\nself.dataStack?.sync(sync, inEntityNamed: \"Establecimiento\") { error in\n                                if let err = error{\n                                    print(err)\n                                }\n                                completion(.success)\n                            }\nSi necesitas algo mas para replicar este problema h\u00e1zmelo saber.\nGracias por toda la ayuda.. ",
    "ltAldoRaine": "Thanks @3lvis !. ",
    "onmyway133": "@3lvis when can we uncomment it?\n. @3lvis do we prefer guard let with 1 line?\n. "
}