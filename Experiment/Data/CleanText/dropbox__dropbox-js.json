{
    "pwnall": "Thanks!\n. Thanks!\n. Sorry, I forgot to say thanks for this one! I merged the XHR support, but took out the Node.JS support, because it relies on patches to XHR. I'm torn between patching XHR to accept Buffers, and preparing a bigger patch that implements wrappers for ArrayBuffer and Blob. Any thoughts?\n. Thank you very much for reporting this bug!\nCalling the app secret a \"secret\" is an unfortunate side-effect of using OAuth 1.0. The \"secret\" isn't really secret in applications that must client-side, such as mobile apps, desktop apps, and JavaScript apps without backends.\nThe Dropbox authentication model doesn't assume that the secret is actually secret. The user must approve every request to /oauth/authorize, which is different from Facebook's OAuth 2.0 model.\nIn the future, I hope there will be better messaging around the API key and \"secret\". Until then, please write awesome JavaScript apps!\nLast but not least, if there are any authentication improvements in the REST API, and I'm not on top of them, please file a bug!\n. After a conversation with Dropboxers on the API team, we decided to add support to dropbox.js for concealing the API key and secret, and to require that browser-side applications use this method (or any other method) to conceal their API credentials before applying for production status.\nThe details are here.\nI tried to make the process as painless as possible. Please file a bug if you think of a way to further streamline this.\n. @adnandoric Can you contact me over e-mail to discuss the timeline for your application? We'll have something out this week that addresses your concerns :)\n. @adnandoric Right now, my previous comment still stands. If you need to build and publish an application in the next couple of days, follow the process documented in the \"here\" link above. Applications following this process have been approved for production.\nThere should be an announcement later this week that makes all that process obsolete, though.\n. @adnandoric That is not what I said.\nFirst off, you should never expose your API key and secret in plaintext in an application. You should make some decent effort to obfuscate it, so a casual attacker can't lift the API key and secret and impersonate your application. dropbox.js has build-in obfuscation support, and the link above documents setting it up.\nSecond, this isn't a perfect solution. It is the best we can do for applications that need to run the OAuth flow client-side. If you're worried about security, you should use dropbox.js in node.js or another server environment, so credentials aren't exposed to clients.\nWe'll have a better client-side story really, really soon.\n. For anyone seeing this issue: dropbox.js 0.10 and above use OAuth 2. In OAuth 2, web apps use the API key, and do not use the API secret. So, obfuscating is no longer necessary.\n. Thank you for reporting this bug, and I'm really sorry for the trouble! There was a typo in the documentation. Driver should be Drivers.\nOnce again, thanks so much for reporting the bug!\n. That is very good feedback, thank you very much!\nIndeed, showError and doSomethingCool are not defined in the sample snippets. They are placeholders for your code. I add comments to make this clearer.\nThe checkbox.js sample application might be helpful to look at. Its showError function shows a div that tells the users something went wrong and asks them to refresh the page, and I think it's a pretty reasonable strategy, at least at the prototype stage.\nIt is my hope that authenticate in Dropbox.Client will take care of all your OAuth needs, and you won't need to learn the specifics of OAuth to write a Dropbox application. What problems are you having with authenticate?\n. No idea how the garbled comment got there, sorry. In any case, you can use localStorage to store your user's credentials.\nThe credentials method in Dropbox.Client will give you a JSON-compliant object that you can save into localStorage using something like localStorage.setItem('dropbox_auth', JSON.stringify(client.credentials())). Later, pass this object to the Dropbox.Client constructor to pick up from where you left, using something along the lines of new Dropbox.Client(JSON.parse(localStorge.getItem('dropbox_auth'))).\nAs a warning, once you do that, you have to come up with a strategy for dealing with expired tokens. That's the main reason why the sample apps don't store user tokens -- I didn't want the expiration logic code to get readers confused.\n. I think tokens are supposed to be permanent, at the moment.\nHowever, based the evolution of the Facebook API, I would expect that eventually tokens will expire in 14 days, or in 30 days.\nMy tokens expired twice while I was building dropbox.js. The expiration might have been caused by my other development work, but I'd still want my apps to consider this case.\n. Did you call client.authDriver to set up an OAuth driver?\n. The credentials should not contain authState. The object returned by credentials() only has the authState property set during the authentication process. After the authentication succeeds, the credentials() object should have the following properties: key, secret, sandbox, token, tokenSecret and uid.\nThis test backs up what I just said.\nhttps://github.com/dropbox/dropbox-js/blob/master/test/src/client_test.coffee#L619\n. Also, if you use the rememberUser option for the Dropbox.Drivers.Redirect driver in dropbox.js 0.6.0, you can call authenticate on every page, and the user won't see confirmation dialogs, since localStorage is shared by pages with the same origin. I hope this helps.\n. You need to set the OAuth driver every time you build a Dropbox.Client instance. You'll probably need to have this code on all your pages that use the Dropbox API.\njavascript\nvar client = new Dropbox.Client({key: \"your-app-key\", secret: \"your-app-secret\", sandbox: true});\nclient.authDriver(new Dropbox.Drivers.Redirect({rememberUser: true}));\n. Hey, guys!\nSorry, having to authorize every time is a pain indeed. Most of the reasons why the drivers don't store the OAuth tokens for you are historical (solved bugs), but there is one real issue left -- if you store the OAuth tokens, the user isn't \"logged out\" of your application when they log out of Dropbox.\nAs a workaround until I figure out a better way of logging out, set the rememberUser: true option when instantiating the Dropbox.Driver.Redirect OAuth driver.\njavascript\nclient.authDriver(new Dropbox.Drivers.Redirect({rememberUser: true}));\nThis should do the trick in development. If you really want to push this to real users, at the very least have a \"Sign out\" button somewhere, and call forgetCredentials() on the OAuth driver.\n. Sorry, I forgot to mention, you'll need to build dropbox.js off of GitHub to use rememberUser.\n. Made a couple of improvements.\n- the \"Sign out\" implementation should call signOut on the Dropbox.Client, instead of calling some obscure method on the OAuth driver.\n- the checkbox.js sample app in the repository has been updated to use rememberUser, and has a \"Sign out\" implementation\n- there is some documentation for writing OAuth drivers\n- everything will be available in dropbox.js 0.6.0, which should hit up cdnjs pretty soon\n. Thank you for reporting the bug, @lmorchard! Please let me know if you run into any other roadblock that dropbox.js should be handling for you.\n. Thank you very much for the patch!\n. Thank you for your patch, @hinathan!\n. This fix was included in dropbox.js version 0.6.1.\n. Good point, @xMartin! Thanks for the bug report!\nThis should be fixed on master, and will make it to the next point release.\n. Thanks for the patch, @thedjpetersen!\nActually, the ",
    "astronaute77": "@pwnall what was the conclusion after discussing this issue with Dropbox API team, is it true that secret is \"not really secret\" as you suggest?\nI am pretty sure that exposing both api key & secret is considered security breach, can you share the evidence to the contrary please?\nThank you\n. @pwnall I was just interested in you knowledge about secret key as you said it isn't really secret.\n. Great, so you confirm that exposing secret key doesn't compromise the security of the application in any way? \n. Okay, that makes sense as I initially thought, I misinterpreted your comment on secret key thinking you said it is fine to have it disclosed to everyone as it wasn't \"really secret\",\nCheers :)\n. @pwnall what was the conclusion after discussing this issue with Dropbox API team, is it true that secret is \"not really secret\" as you suggest?\nI am pretty sure that exposing both api key & secret is considered security breach, can you share the evidence to the contrary please?\nThank you\n. @pwnall I was just interested in you knowledge about secret key as you said it isn't really secret.\n. Great, so you confirm that exposing secret key doesn't compromise the security of the application in any way? \n. Okay, that makes sense as I initially thought, I misinterpreted your comment on secret key thinking you said it is fine to have it disclosed to everyone as it wasn't \"really secret\",\nCheers :)\n. ",
    "TheBlune": "What about the other functions?\nShowError isn't laid down in your dropbbox.js and a short google search for a javascript functions named like that didn't get to any results. \nthe same goes for doSomethingCool()[A joke...right?], both are undefined.\nSorry for asking all these questions, but as a javascript and jQuery beginner, it is rather difficult to understand what your script does, when you can't just simply copy it and try it out.\nA commented version of your dropbox.js would really help me, although i think oauth simply requieres more than what i learned so far....\n. Thanks for editing the documentation! \nSo right now I am able to access everything I want after user confirmation. But just on this page. How can I eg. store and transmit the access token and secret in order to load a file later on? \nI don't want to store any users files on my server(even if its only temporary) and I don't want my users confirmation for every move i make on their dropbox. \nThis is possible, right? Is it also reasonable?\nThanks for advance, you've been a great help so far!\n. That's exactly what I had in mind! \nCreating a new authentication after token expired should be easy with your little 'showError()'-Function...how long does it regularly take for a token to expire? \nI will try it out. Thanks a lot!\n(...I am asking myself how all my phone apps handle Dropbox without asking me for permission from time to time...)\n. I tried with credentials like this\n{\"key\":\"XXXXXXXXXXXX\",\"secret\":\"XXXXXXXXXXXX\",\"sandbox\":XXXXXXXXXXXX,\"token\":\"XXXXXXXXXXXX\",\"tokenSecret\":\"XXXXXXXXXXXX\",\"uid\":null,\"authState\":3:\nand code like this: \n```\nclient = new Dropbox.Client(JSON.parse(localStorage.getItem('dropbox_auth')));\nclient.getUserInfo(function(error, userInfo) {\n    if (error) {\n        return showError(error);  // Something went wrong.\n    }\nvar name = userInfo.name;\n\n}); \n}); \n```\nand received 401/token expired or \"access key not found\"\nand later this:\nclient = new Dropbox.Client(JSON.parse(localStorage.getItem('dropbox_auth')));  \nclient.authenticate(function(error, client) {\n    if (error) {   \n        return showError(error);\n    }\n    client.getUserInfo(function(error, userInfo) {\n        if (error) {\n            return showError(error);  // Something went wrong.\n        }\n        var name = userInfo.name;\n    });   \n});\nand received 403 \"Token is not an authorized request token.\"    \nwhat's wrong?\n. tried it right now and received the 403...\n. Your remark on the credentials solved my problem! \nSo when i set rememberUser to true i do not need to add the driver after first confirmation? \n. Hey, i had the same question:\n\"The credentials method in Dropbox.Client will give you a JSON-compliant object that you can save into localStorage using something like localStorage.setItem('dropbox_auth', JSON.stringify(client.credentials())). Later, pass this object to the Dropbox.Client constructor to pick up from where you left, using something along the lines of new Dropbox.Client(JSON.parse(localStorge.getItem('dropbox_auth'))).\"\nlook at my closed(but partially unsolved) issue for further details: https://github.com/dropbox/dropbox-js/issues/7\n. sorry @raptrex , i made a mistake in my markup. I think it has to be: \nclient = new Dropbox.Client(JSON.parse(localStorage.getItem('dropbox_auth')));\n. What about the other functions?\nShowError isn't laid down in your dropbbox.js and a short google search for a javascript functions named like that didn't get to any results. \nthe same goes for doSomethingCool()[A joke...right?], both are undefined.\nSorry for asking all these questions, but as a javascript and jQuery beginner, it is rather difficult to understand what your script does, when you can't just simply copy it and try it out.\nA commented version of your dropbox.js would really help me, although i think oauth simply requieres more than what i learned so far....\n. Thanks for editing the documentation! \nSo right now I am able to access everything I want after user confirmation. But just on this page. How can I eg. store and transmit the access token and secret in order to load a file later on? \nI don't want to store any users files on my server(even if its only temporary) and I don't want my users confirmation for every move i make on their dropbox. \nThis is possible, right? Is it also reasonable?\nThanks for advance, you've been a great help so far!\n. That's exactly what I had in mind! \nCreating a new authentication after token expired should be easy with your little 'showError()'-Function...how long does it regularly take for a token to expire? \nI will try it out. Thanks a lot!\n(...I am asking myself how all my phone apps handle Dropbox without asking me for permission from time to time...)\n. I tried with credentials like this\n{\"key\":\"XXXXXXXXXXXX\",\"secret\":\"XXXXXXXXXXXX\",\"sandbox\":XXXXXXXXXXXX,\"token\":\"XXXXXXXXXXXX\",\"tokenSecret\":\"XXXXXXXXXXXX\",\"uid\":null,\"authState\":3:\nand code like this: \n```\nclient = new Dropbox.Client(JSON.parse(localStorage.getItem('dropbox_auth')));\nclient.getUserInfo(function(error, userInfo) {\n    if (error) {\n        return showError(error);  // Something went wrong.\n    }\nvar name = userInfo.name;\n\n}); \n}); \n```\nand received 401/token expired or \"access key not found\"\nand later this:\nclient = new Dropbox.Client(JSON.parse(localStorage.getItem('dropbox_auth')));  \nclient.authenticate(function(error, client) {\n    if (error) {   \n        return showError(error);\n    }\n    client.getUserInfo(function(error, userInfo) {\n        if (error) {\n            return showError(error);  // Something went wrong.\n        }\n        var name = userInfo.name;\n    });   \n});\nand received 403 \"Token is not an authorized request token.\"    \nwhat's wrong?\n. tried it right now and received the 403...\n. Your remark on the credentials solved my problem! \nSo when i set rememberUser to true i do not need to add the driver after first confirmation? \n. Hey, i had the same question:\n\"The credentials method in Dropbox.Client will give you a JSON-compliant object that you can save into localStorage using something like localStorage.setItem('dropbox_auth', JSON.stringify(client.credentials())). Later, pass this object to the Dropbox.Client constructor to pick up from where you left, using something along the lines of new Dropbox.Client(JSON.parse(localStorge.getItem('dropbox_auth'))).\"\nlook at my closed(but partially unsolved) issue for further details: https://github.com/dropbox/dropbox-js/issues/7\n. sorry @raptrex , i made a mistake in my markup. I think it has to be: \nclient = new Dropbox.Client(JSON.parse(localStorage.getItem('dropbox_auth')));\n. ",
    "lmorchard": "Okay, weird: Having mentioned localStorage, I figured I'd peek in there. Sure enough, there's a dropbox-auth key in there with a JSON value listing token and secret. And, the code seems to already do exactly what I suggested.\n(Update: Or, at least I thought I saw that key. I don't seem to see it again, now.)\n. Cool! Looks like 0.6.0 is on the CDN and rememberUser worked for me. Thanks a lot!\n. Okay, weird: Having mentioned localStorage, I figured I'd peek in there. Sure enough, there's a dropbox-auth key in there with a JSON value listing token and secret. And, the code seems to already do exactly what I suggested.\n(Update: Or, at least I thought I saw that key. I don't seem to see it again, now.)\n. Cool! Looks like 0.6.0 is on the CDN and rememberUser worked for me. Thanks a lot!\n. ",
    "jonathanyee": "I tried using localStorage just like @Wannabechilean, but its returning Uncaught TypeError: Object function e(e){this.client=new r(e)} has no method 'defaultApiServer'.\nHeres my code:\nvar client;\n        if (window.localStorage.length == 0 || window.localStorage.getItem('dropbox_auth') == null) {\n            client = new Dropbox.Client({\n                key: \"xxx\", \n                secret: \"xxx\", \n                sandbox: true\n            });\n        } else {\n            client = Dropbox.Client(JSON.parse(window.localStorage.getItem('dropbox_auth')));\n        }\n. Thanks pwnall\n. I tried using localStorage just like @Wannabechilean, but its returning Uncaught TypeError: Object function e(e){this.client=new r(e)} has no method 'defaultApiServer'.\nHeres my code:\nvar client;\n        if (window.localStorage.length == 0 || window.localStorage.getItem('dropbox_auth') == null) {\n            client = new Dropbox.Client({\n                key: \"xxx\", \n                secret: \"xxx\", \n                sandbox: true\n            });\n        } else {\n            client = Dropbox.Client(JSON.parse(window.localStorage.getItem('dropbox_auth')));\n        }\n. Thanks pwnall\n. ",
    "danielfilho": "wow! that was fast.\n:thumbsup:\n. wow! that was fast.\n:thumbsup:\n. ",
    "thedjpetersen": "Cool my bad. Learn something new everyday :thumbsup:\n. Yes I mean the authentication state.\n. Thanks thats exactly what I was looking for! Thanks!\n. Cool my bad. Learn something new everyday :thumbsup:\n. Yes I mean the authentication state.\n. Thanks thats exactly what I was looking for! Thanks!\n. ",
    "Crome": "Hello.\nI've added the following lines of code before loading dropbox.js:\nhtml\n    <script type=\"text/javascript\">\n        // Hack to make dropbox.js works in IE8, IE9.\n        if (!window.btoa) window.btoa = base64.encode; \n        if (!window.atob) window.atob = base64.decode;\n    </script>\nNow it works in IE8, 9.\nMay be this will be useful for someone.\nBest regards.\n. Hello.\nI use Spring Social library for .NET. And its implementation allows to get access token once and then use it for any future requests without using App key/secret.\nAccording to dropbox API documentation \n\nThe access token is all you'll need for all future API requests on behalf of this user, so you should store it away for safe-keeping. By storing the access token, you won't need to go through these steps again unless the user reinstalls your app or revokes access via the Dropbox website.\n\nCould you please confirm if I'm wrong and I should always use app key?\nThank you.\n. Hello.\nYes, you are right, I see it now.\nI thought I could use server part to authenticate Dropbox application once and then use access token inside client web-application. Because storing app key on the client is not secure. Unfortunately not.\nThank you very much for help!\n. Hello.\nI've added the following lines of code before loading dropbox.js:\nhtml\n    <script type=\"text/javascript\">\n        // Hack to make dropbox.js works in IE8, IE9.\n        if (!window.btoa) window.btoa = base64.encode; \n        if (!window.atob) window.atob = base64.decode;\n    </script>\nNow it works in IE8, 9.\nMay be this will be useful for someone.\nBest regards.\n. Hello.\nI use Spring Social library for .NET. And its implementation allows to get access token once and then use it for any future requests without using App key/secret.\nAccording to dropbox API documentation \n\nThe access token is all you'll need for all future API requests on behalf of this user, so you should store it away for safe-keeping. By storing the access token, you won't need to go through these steps again unless the user reinstalls your app or revokes access via the Dropbox website.\n\nCould you please confirm if I'm wrong and I should always use app key?\nThank you.\n. Hello.\nYes, you are right, I see it now.\nI thought I could use server part to authenticate Dropbox application once and then use access token inside client web-application. Because storing app key on the client is not secure. Unfortunately not.\nThank you very much for help!\n. ",
    "ghost": "Hey,\nI have a similar question. I have a Python end of my web server, where the user authenticates with Dropbox first, and generates an access token and secret. \nI would like to use the access token and secret in the Dropbox-js end of my site, so users don't have to re-authenticate with dropbox. However, unlike Crome, I am fine with including my Dropbox key into my page.\nIs this possible with dropbox-js? Thanks!\n. OK, i have the key and secret combined, and I am passing the token and tokensecret. Do i still run the authentication function after that, or is the client already authenticated?\nThanks for the help!\n. Oh yes its working perfectly,  I didn't realize passport-dropbox was negotiating the auth token secret also (as a refresh token in my code) and jumped the gun on logging this as an issue.  Thanks for your module it works great.\n. i have this problem wih cordova 3.3 \nhttp://stackoverflow.com/questions/21710967/phonegap-cordova-3-1-0-inappbrowser-not-working\nis their a workaround ?\n. Great ! Thx for fast reply and very useful tip\n. Hey,\nI have a similar question. I have a Python end of my web server, where the user authenticates with Dropbox first, and generates an access token and secret. \nI would like to use the access token and secret in the Dropbox-js end of my site, so users don't have to re-authenticate with dropbox. However, unlike Crome, I am fine with including my Dropbox key into my page.\nIs this possible with dropbox-js? Thanks!\n. OK, i have the key and secret combined, and I am passing the token and tokensecret. Do i still run the authentication function after that, or is the client already authenticated?\nThanks for the help!\n. Oh yes its working perfectly,  I didn't realize passport-dropbox was negotiating the auth token secret also (as a refresh token in my code) and jumped the gun on logging this as an issue.  Thanks for your module it works great.\n. i have this problem wih cordova 3.3 \nhttp://stackoverflow.com/questions/21710967/phonegap-cordova-3-1-0-inappbrowser-not-working\nis their a workaround ?\n. Great ! Thx for fast reply and very useful tip\n. ",
    "glynthomas": "Hi Victor, great work ... I admit I have not read any documentation, I am building a web app (all JavaScript client side), and thought a dropbox feature maybe useful, everything works as expected, except when trying to represent the token ... I always get;\n\"error\": \"Access token is disabled.\nI am clearly doing something very wrong, maybe you can point me in the right direction ... this is what I am doing;\nAfter successful authentication I get the token object, which seems to be in client.credentials() and is the same value as the returned token, so to check the token I have being doing this;\naccesstoken = client.credentials();\nclient.setCredentials(accesstoken); // to test all looks good ...\nthen signing off or signing out, unlinking ... I then try and represent the saved token\nclient = new Dropbox.Client(accesstoken);\nand get ... \"error\": \"Access token is disabled.\ntried with sandbox and full access dropbox, same result, many thanks in advance.\n. Hi Victor,  Many thanks, yes this have solved the issue ... I was going to add in my previous question, if I don't signOff / signOut then the token is fine and I have no problems ;-), but I though I was going about it the wrong way or would be breaking some Dropbox security terms and conditions, so I didn't say anything ...\nMany thanks again for your quick reply and your excellent work.  Maybe I'll have a look at CoffeeScript on my next project.\nThanks again,\nGlyn.\n@glynfoo\n. Hi Victor, great work ... I admit I have not read any documentation, I am building a web app (all JavaScript client side), and thought a dropbox feature maybe useful, everything works as expected, except when trying to represent the token ... I always get;\n\"error\": \"Access token is disabled.\nI am clearly doing something very wrong, maybe you can point me in the right direction ... this is what I am doing;\nAfter successful authentication I get the token object, which seems to be in client.credentials() and is the same value as the returned token, so to check the token I have being doing this;\naccesstoken = client.credentials();\nclient.setCredentials(accesstoken); // to test all looks good ...\nthen signing off or signing out, unlinking ... I then try and represent the saved token\nclient = new Dropbox.Client(accesstoken);\nand get ... \"error\": \"Access token is disabled.\ntried with sandbox and full access dropbox, same result, many thanks in advance.\n. Hi Victor,  Many thanks, yes this have solved the issue ... I was going to add in my previous question, if I don't signOff / signOut then the token is fine and I have no problems ;-), but I though I was going about it the wrong way or would be breaking some Dropbox security terms and conditions, so I didn't say anything ...\nMany thanks again for your quick reply and your excellent work.  Maybe I'll have a look at CoffeeScript on my next project.\nThanks again,\nGlyn.\n@glynfoo\n. ",
    "maqboolkhan": "hi i dont want to let user authenticate dropbox as i am working on a app by using this app all user are able to upload files on same folder and i have a access token but now how to authenticate it?? i found i should use \nvar client = new Dropbox.Client({\n  key: \"is59umadz8fodk8\" ,\n  secret:\"xxxxxxxxxxxxxxxxx\" ,\n  sandbox: false,\n  token: \"xxxxxxxxxxxxxx\"\n}); \nbut due to security reason we cant share our token now how to do it??\n. hi i dont want to let user authenticate dropbox as i am working on a app by using this app all user are able to upload files on same folder and i have a access token but now how to authenticate it?? i found i should use \nvar client = new Dropbox.Client({\n  key: \"is59umadz8fodk8\" ,\n  secret:\"xxxxxxxxxxxxxxxxx\" ,\n  sandbox: false,\n  token: \"xxxxxxxxxxxxxx\"\n}); \nbut due to security reason we cant share our token now how to do it??\n. ",
    "xunhuang": "Here is a plugin that works with dropbox.\nhttps://github.com/kinjouj/chrome-extension-dropbox-oauth-demo\nIt only has the authentication part. For now, I use dropbox-js's client\ncode to read/write files, using the token/tokenSecret I obtain from the\nabove plugin. I'd love to use your plugin only.\nThe way this plugin works is it uses a background page to launch a tab for\nauthentication, and closes the tab when done and then dynamically insert\nthe popup.html.\nWilson\nps. I was going to change dropbox-js directly, but then didn't have time to\nlearn coffee script.\nOn Thu, Oct 25, 2012 at 7:23 PM, Victor Costan notifications@github.comwrote:\n\n@xunhuang https://github.com/xunhuang, thank you very much for bringing\nthis to my attention!\nI would definitely like to see dropbox.js powering Chrome extensions. I'll\ntake a look this weekend, and I hope to prepare some sample code. Sorry I\ndon't have time to do it today!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/18#issuecomment-9801131.\n. thanks Victor! I'll certainly try this out.\n\nOn Sun, Jan 13, 2013 at 10:31 AM, Victor Costan notifications@github.comwrote:\n\n@xunhuang https://github.com/xunhuang dropbox.js 0.8.1 has\nout-of-the-box support for Chrome extensions. The API changed a little bit,\nso please take a look at the docs if you decide to use it.\nhttps://github.com/dropbox/dropbox-js/blob/master/doc/auth_drivers.md#dropboxdriverschrome\nAlso, this is a better example (though still work in progress).\nhttps://github.com/pwnall/dropship-chrome\nYou'll probably be interested in:\n- the OAuth HTML:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/html/chrome_oauth_receiver.html\n- the OAuth JS:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/coffee/chrome_oauth_receiver.coffee\n- a very unfinished helper to store the user's identity:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/coffee/dropbox_chrome.coffee\n- uploading to Dropbox with a progress indicator:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/coffee/upload_controller.coffee\nI hope this helps!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/18#issuecomment-12197701.\n. Hi Victor, \nthank you for your help. It turns out that it is the downloading that's the problem. It has the encoding problem that you pointed out. I was using jquery on download and it's messing up the encoding before writing to dropbox.\n\nWilson\nOn Oct 29, 2012, at 11:06 PM, Victor Costan wrote:\n\n@xunhuang, thank you for reporting this issue!\nHow did you download and upload? Can you share code / pseudo-code for the XHR calls?\nThe best way to avoid encoding issues is to use the XHR2 features for handling binary data, such as Blob.\nhttps://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data\n\u2014\nReply to this email directly or view it on GitHub.\n. Here is a plugin that works with dropbox.\n\nhttps://github.com/kinjouj/chrome-extension-dropbox-oauth-demo\nIt only has the authentication part. For now, I use dropbox-js's client\ncode to read/write files, using the token/tokenSecret I obtain from the\nabove plugin. I'd love to use your plugin only.\nThe way this plugin works is it uses a background page to launch a tab for\nauthentication, and closes the tab when done and then dynamically insert\nthe popup.html.\nWilson\nps. I was going to change dropbox-js directly, but then didn't have time to\nlearn coffee script.\nOn Thu, Oct 25, 2012 at 7:23 PM, Victor Costan notifications@github.comwrote:\n\n@xunhuang https://github.com/xunhuang, thank you very much for bringing\nthis to my attention!\nI would definitely like to see dropbox.js powering Chrome extensions. I'll\ntake a look this weekend, and I hope to prepare some sample code. Sorry I\ndon't have time to do it today!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/18#issuecomment-9801131.\n. thanks Victor! I'll certainly try this out.\n\nOn Sun, Jan 13, 2013 at 10:31 AM, Victor Costan notifications@github.comwrote:\n\n@xunhuang https://github.com/xunhuang dropbox.js 0.8.1 has\nout-of-the-box support for Chrome extensions. The API changed a little bit,\nso please take a look at the docs if you decide to use it.\nhttps://github.com/dropbox/dropbox-js/blob/master/doc/auth_drivers.md#dropboxdriverschrome\nAlso, this is a better example (though still work in progress).\nhttps://github.com/pwnall/dropship-chrome\nYou'll probably be interested in:\n- the OAuth HTML:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/html/chrome_oauth_receiver.html\n- the OAuth JS:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/coffee/chrome_oauth_receiver.coffee\n- a very unfinished helper to store the user's identity:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/coffee/dropbox_chrome.coffee\n- uploading to Dropbox with a progress indicator:\n  https://github.com/pwnall/dropship-chrome/blob/master/src/coffee/upload_controller.coffee\nI hope this helps!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/18#issuecomment-12197701.\n. Hi Victor, \nthank you for your help. It turns out that it is the downloading that's the problem. It has the encoding problem that you pointed out. I was using jquery on download and it's messing up the encoding before writing to dropbox.\n\nWilson\nOn Oct 29, 2012, at 11:06 PM, Victor Costan wrote:\n\n@xunhuang, thank you for reporting this issue!\nHow did you download and upload? Can you share code / pseudo-code for the XHR calls?\nThe best way to avoid encoding issues is to use the XHR2 features for handling binary data, such as Blob.\nhttps://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Sending_and_Receiving_Binary_Data\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "aroramayur": "I am tryiing to integrate dropbox with my chrome extension. So on load of the extension, I execute this code:\n var client = new Dropbox.Client({key:\"ojda5xhxk9he6r2\"});\nclient.authDriver(new Dropbox.AuthDriver.ChromeExtension({receiverPath:\"/views/chrome_oauth_receiver.html\"}));\n client.authenticate({},function(error,client) { });\nThis does work. I hit drop box permissions page and I am redirected back to the receiver page. But this happens in a new tab - outside the extension environment. By this time my extension popup has already closed.\nSo what now ? where is the client that has been returned. Shouldn't this happen within the context of  the extension.\n. Thanks Victor . Let me try this out. Please ignore issue 205. I thought I could not explain things well here so closed this one and then created another one.\n. This seems close. I had some trouble understanding coffee files. This is what  I am doing now\nAdded background.js in manifest:\n \"background\":{\n        \"scripts\":[\"/scripts/dropbox.min.js\",\"/scripts/background.js\"]\n    }\nIn my JS \ndocument.addEventListener('DOMContentLoaded',init);\nvar init = function(){\n            chrome.runtime.getBackgroundPage(function(){\n                chrome.runtime.sendMessage({action:\"authenticate\"},function(response){\n                    console.log(response.authenticatedClient);\n                })\n            })\n        };\nand this is how I respond to message in background.js\nvar client = new Dropbox.Client({key:\"mykey\"});\nclient.authDriver(new Dropbox.AuthDriver.ChromeExtension({receiverPath:\"/views/chrome_oauth_receiver.html\"}));\nchrome.runtime.onMessage.addListener(function(message,sender,sendResponse){\n  if(message.action === \"authenticate\"){\n     if(!client.isAuthenticated()){\n        client.authenticate({},function(error,client){\n}); \n }\n  sendResponse({authentedClient:client});\n  }\n});  \nclient.isAuthenticated() is always false. A new window opens everytime around and the extension closes. Is this the way this should be done ? This is the only complicated part I guess and I've been stuck with this for quite some time. I have been genuinely tryng to understand the API before putting this up. I try and authenticate as soon as the extension is launched - onload\n. I tried the way you suggested. SO I check for authentication on load . It goes to the else part every time around. I click on allow. Then again the next time around the same thing happens\nThis is the file with just 6 lines of code https://github.com/mayur-arora/sample_drop_box/blob/master/scripts/background.js\nTried this as well - which I think is unnecessary\nclient.authenticate({},function(err,cli){\nclient = cli;\n});  - did not work,\nI try and check isAuthenticated() here https://github.com/mayur-arora/sample_drop_box/blob/master/scripts/imageDrop.js\nIt goes for authentication every time the extension loads.\n.\n. I do get the page - Dropbox Sign In Successful - but auth data is not getting saved with the code I've written. It is always false. I get a mail as well informing me that I've connected the application \n. Being tracked by Issue 203\n. I am tryiing to integrate dropbox with my chrome extension. So on load of the extension, I execute this code:\n var client = new Dropbox.Client({key:\"ojda5xhxk9he6r2\"});\nclient.authDriver(new Dropbox.AuthDriver.ChromeExtension({receiverPath:\"/views/chrome_oauth_receiver.html\"}));\n client.authenticate({},function(error,client) { });\nThis does work. I hit drop box permissions page and I am redirected back to the receiver page. But this happens in a new tab - outside the extension environment. By this time my extension popup has already closed.\nSo what now ? where is the client that has been returned. Shouldn't this happen within the context of  the extension.\n. Thanks Victor . Let me try this out. Please ignore issue 205. I thought I could not explain things well here so closed this one and then created another one.\n. This seems close. I had some trouble understanding coffee files. This is what  I am doing now\nAdded background.js in manifest:\n \"background\":{\n        \"scripts\":[\"/scripts/dropbox.min.js\",\"/scripts/background.js\"]\n    }\nIn my JS \ndocument.addEventListener('DOMContentLoaded',init);\nvar init = function(){\n            chrome.runtime.getBackgroundPage(function(){\n                chrome.runtime.sendMessage({action:\"authenticate\"},function(response){\n                    console.log(response.authenticatedClient);\n                })\n            })\n        };\nand this is how I respond to message in background.js\nvar client = new Dropbox.Client({key:\"mykey\"});\nclient.authDriver(new Dropbox.AuthDriver.ChromeExtension({receiverPath:\"/views/chrome_oauth_receiver.html\"}));\nchrome.runtime.onMessage.addListener(function(message,sender,sendResponse){\n  if(message.action === \"authenticate\"){\n     if(!client.isAuthenticated()){\n        client.authenticate({},function(error,client){\n}); \n }\n  sendResponse({authentedClient:client});\n  }\n});  \nclient.isAuthenticated() is always false. A new window opens everytime around and the extension closes. Is this the way this should be done ? This is the only complicated part I guess and I've been stuck with this for quite some time. I have been genuinely tryng to understand the API before putting this up. I try and authenticate as soon as the extension is launched - onload\n. I tried the way you suggested. SO I check for authentication on load . It goes to the else part every time around. I click on allow. Then again the next time around the same thing happens\nThis is the file with just 6 lines of code https://github.com/mayur-arora/sample_drop_box/blob/master/scripts/background.js\nTried this as well - which I think is unnecessary\nclient.authenticate({},function(err,cli){\nclient = cli;\n});  - did not work,\nI try and check isAuthenticated() here https://github.com/mayur-arora/sample_drop_box/blob/master/scripts/imageDrop.js\nIt goes for authentication every time the extension loads.\n.\n. I do get the page - Dropbox Sign In Successful - but auth data is not getting saved with the code I've written. It is always false. I get a mail as well informing me that I've connected the application \n. Being tracked by Issue 203\n. ",
    "douglas-mason": "I've landed in the same place as @mayur-arora .  The docs say that the authentication is cached, but it doesn't appear to be.  Even after granting my Chrome extension permissions I'm directed to the oauth page each time I hit the ext icon.  My ext has the \"storage\" permission set so I would think the auth driver has access to cache the action.\n. Please disregard, I've found more recent issue #203 and will try the given suggestions.  Thanks\n. I've landed in the same place as @mayur-arora .  The docs say that the authentication is cached, but it doesn't appear to be.  Even after granting my Chrome extension permissions I'm directed to the oauth page each time I hit the ext icon.  My ext has the \"storage\" permission set so I would think the auth driver has access to cache the action.\n. Please disregard, I've found more recent issue #203 and will try the given suggestions.  Thanks\n. ",
    "paglias": "It doesn't work, on button click nothing happen I think because the eventlistener is put inside doAuthorize\n. Ok this work but I may not have well explained my problem.\nThe first time the user uses my app (o after he deauthorized it) i want to display the button that clicked redirects to the authorization page on dropbox's website.\nBut if the user has already authorized my app once (so that it appears on \"My Apps\" page) i don't want to display the button but directly redirect to dropbox website (but where the user isn't asked to authorize my app but directly redirected back to my app).\nI may check for \"dropbox-auth:xxxxxx\" in localstorage and if there's don't show the button but there are two problems:\n-i don't know the second part of the key stored in localstorage (about that, why don't you use a simple cookie?)\n-if the user deauthorized my app the key in localstorage isn't automatically deleted\nwhat do you think?\n. perfect :) it has a a delay of some seconds the first time but then it works very well!\nthanks a lot!\n. Steps to replicate the bug:\n1-) I've deauthorized Checkbox.js from my Dropbox apps and deleted its folder\n2-) opened this link and authorized the app https://dl-web.dropbox.com/spa/pjlfdak1tmznswp/checkbox.js/public/index.html then i've played a bit with t (created tasks...)\n3-) clicked \"sign out\" on Checkbox.js \n4-) I've been prompted for a new authorization, I've given the permission and a new folder \"Checkbox (1)\" has been created without any of the tasks i've created before while there's the old \"Checkbox\" folder with the right files but if I go to the web app it show me \"Checkbox (1)\"'s files\n5-)If i do the same another time a folder \"Checkbox (2)\" will be created an so on\n. Anything about that?\n. sorry, I accidentally closed it while I wanted to ask if there was some news about that\n. Nothing new on that?\n. If I authenticate the user using client side dropbox.js, pass oauth_token  and oauth_token_secret back to the server then it is possible to use them for making requests from node? \n. See http://bower.io/ under \"Defining a package\", it requires a simple bower.json file but the biggest problem is that the compiled source code should be avalaible in the package repository.\nI think that publishing the compiled version at every commit/release would be problematic. Maybe the best way is to create a specific repository for bower (there are also other similar tools which may be used in the same way, see http://component.io) where the published version is updated at every release\nIt wouldn't allow to use a specific commit of dropbox.js in bower but that shouldn't be a big problems for the few that don't use released versions\n. I'm using this and it works:\ncoffee\ndriver = client.authDriver new Dropbox.AuthDriver.Redirect\ndriver.driver.receiverUrl = \"http://localhost:8000/app.html\"\n. Probably localhost is whitelisted\n. No problem compiling it myself. I will be away from home for a few days, if\nsomeone doesn't try it before I come back, I'll give a look to it. Thanks\nfor the very fast fix!\nIl giorno 09/lug/2013 00:08, \"Victor Costan\" notifications@github.com ha\nscritto:\n\n@paglias https://github.com/paglias master is now fixed. The\nDropbox.AuthDriver.Redirect constructor accepts the redirectUrl /\nredirectFile options. Can you please give it a try?\nIf you'd rather not build it yourself, the links below will work for a\nshort while.\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/93/dropbox.min.js\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/93/dropbox.min.map\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/93/dropbox.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/93#issuecomment-20639913\n.\n. It works, thanks! \n\nP.S\nIt doesn't work with the Datastore JS SDK whose code seems to be similar to the one of dropbox.js in a lot of parts, right?\n. ok, thanks!\n. You could cache requests (ie in localstorage) and send them once you're connected again\n. It doesn't work, on button click nothing happen I think because the eventlistener is put inside doAuthorize\n. Ok this work but I may not have well explained my problem.\nThe first time the user uses my app (o after he deauthorized it) i want to display the button that clicked redirects to the authorization page on dropbox's website.\nBut if the user has already authorized my app once (so that it appears on \"My Apps\" page) i don't want to display the button but directly redirect to dropbox website (but where the user isn't asked to authorize my app but directly redirected back to my app).\nI may check for \"dropbox-auth:xxxxxx\" in localstorage and if there's don't show the button but there are two problems:\n-i don't know the second part of the key stored in localstorage (about that, why don't you use a simple cookie?)\n-if the user deauthorized my app the key in localstorage isn't automatically deleted\nwhat do you think?\n. perfect :) it has a a delay of some seconds the first time but then it works very well!\nthanks a lot!\n. Steps to replicate the bug:\n1-) I've deauthorized Checkbox.js from my Dropbox apps and deleted its folder\n2-) opened this link and authorized the app https://dl-web.dropbox.com/spa/pjlfdak1tmznswp/checkbox.js/public/index.html then i've played a bit with t (created tasks...)\n3-) clicked \"sign out\" on Checkbox.js \n4-) I've been prompted for a new authorization, I've given the permission and a new folder \"Checkbox (1)\" has been created without any of the tasks i've created before while there's the old \"Checkbox\" folder with the right files but if I go to the web app it show me \"Checkbox (1)\"'s files\n5-)If i do the same another time a folder \"Checkbox (2)\" will be created an so on\n. Anything about that?\n. sorry, I accidentally closed it while I wanted to ask if there was some news about that\n. Nothing new on that?\n. If I authenticate the user using client side dropbox.js, pass oauth_token  and oauth_token_secret back to the server then it is possible to use them for making requests from node? \n. See http://bower.io/ under \"Defining a package\", it requires a simple bower.json file but the biggest problem is that the compiled source code should be avalaible in the package repository.\nI think that publishing the compiled version at every commit/release would be problematic. Maybe the best way is to create a specific repository for bower (there are also other similar tools which may be used in the same way, see http://component.io) where the published version is updated at every release\nIt wouldn't allow to use a specific commit of dropbox.js in bower but that shouldn't be a big problems for the few that don't use released versions\n. I'm using this and it works:\ncoffee\ndriver = client.authDriver new Dropbox.AuthDriver.Redirect\ndriver.driver.receiverUrl = \"http://localhost:8000/app.html\"\n. Probably localhost is whitelisted\n. No problem compiling it myself. I will be away from home for a few days, if\nsomeone doesn't try it before I come back, I'll give a look to it. Thanks\nfor the very fast fix!\nIl giorno 09/lug/2013 00:08, \"Victor Costan\" notifications@github.com ha\nscritto:\n\n@paglias https://github.com/paglias master is now fixed. The\nDropbox.AuthDriver.Redirect constructor accepts the redirectUrl /\nredirectFile options. Can you please give it a try?\nIf you'd rather not build it yourself, the links below will work for a\nshort while.\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/93/dropbox.min.js\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/93/dropbox.min.map\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/93/dropbox.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/93#issuecomment-20639913\n.\n. It works, thanks! \n\nP.S\nIt doesn't work with the Datastore JS SDK whose code seems to be similar to the one of dropbox.js in a lot of parts, right?\n. ok, thanks!\n. You could cache requests (ie in localstorage) and send them once you're connected again\n. ",
    "350d": "Hello guys! How i can tweak Dropbox.Drivers.Popup in same way? Thanks!\n. @pwnall Looks like authorization dialog popups if no cached credentials available in your example.\n. @pwnall Thanks! Works good now! :+1: My Dropbox integration is almost done now.\n. @pwnall Sure! No problem.\n. @pwnall Oh my, i got this bug too. It's makes all my idea about syncing my extension data unusable. Keep eye on this.\n. @pwnall great news!\n. Hello! Any updates on this?\n. @pwnall Hello! Any progress here?\n. Hello @pwnall \u2014 how to use this redirect_receiver? Do i need to provide url or what?\nI can get current path/url for auth-receiver.html from my extension, but how i should use it in this case, because message in popup is about that i need to have the same url in my App settings.\n. @pwnall i need to start/initiate whole discussion on \"SO\", its make more sense to resolve this issue here in Safari related tread. So, the problem is (still here) that path to extension files (where receiver.html located locally) changes every browser restart and we can't use it as \"Redirect URIs\" in Dropbox app settings. In your reply to @baryon you mentioned new landing page for \"environments where you can't reliably host one yourself\" - can you please explain what is that and how we can use it. Thank you!\n. Hello guys! How i can tweak Dropbox.Drivers.Popup in same way? Thanks!\n. @pwnall Looks like authorization dialog popups if no cached credentials available in your example.\n. @pwnall Thanks! Works good now! :+1: My Dropbox integration is almost done now.\n. @pwnall Sure! No problem.\n. @pwnall Oh my, i got this bug too. It's makes all my idea about syncing my extension data unusable. Keep eye on this.\n. @pwnall great news!\n. Hello! Any updates on this?\n. @pwnall Hello! Any progress here?\n. Hello @pwnall \u2014 how to use this redirect_receiver? Do i need to provide url or what?\nI can get current path/url for auth-receiver.html from my extension, but how i should use it in this case, because message in popup is about that i need to have the same url in my App settings.\n. @pwnall i need to start/initiate whole discussion on \"SO\", its make more sense to resolve this issue here in Safari related tread. So, the problem is (still here) that path to extension files (where receiver.html located locally) changes every browser restart and we can't use it as \"Redirect URIs\" in Dropbox app settings. In your reply to @baryon you mentioned new landing page for \"environments where you can't reliably host one yourself\" - can you please explain what is that and how we can use it. Thank you!\n. ",
    "paulkoegel": "@pwnall, thanks so much for your example. this should be part of the official docs / demo app asap.\ni still have trouble understandinf what's actually happening here, especially what the interactive option's meant for.\nwhat also confuses me is the rememberUser setting on the Redirect. My impression from the docs was it somehow saves the OAuth authentication state in Localstorage and would make further oauth GETs unnecessary (on, e.g. a page reload, or even when i'm coming back to my app after the redirect from the dropbox site where i logged in).\nwith the button code above and this setting:\njavascript\nclient.authDriver(new Dropbox.Drivers.Redirect({rememberUser: true}));\ni still see 2 OAuth GETs after a page reload and nothing in my localstorage.\n(i'm on Firefox and using a self-built dropbox.js from today's master)\n. @pwnall, thanks so much for your example. this should be part of the official docs / demo app asap.\ni still have trouble understandinf what's actually happening here, especially what the interactive option's meant for.\nwhat also confuses me is the rememberUser setting on the Redirect. My impression from the docs was it somehow saves the OAuth authentication state in Localstorage and would make further oauth GETs unnecessary (on, e.g. a page reload, or even when i'm coming back to my app after the redirect from the dropbox site where i logged in).\nwith the button code above and this setting:\njavascript\nclient.authDriver(new Dropbox.Drivers.Redirect({rememberUser: true}));\ni still see 2 OAuth GETs after a page reload and nothing in my localstorage.\n(i'm on Firefox and using a self-built dropbox.js from today's master)\n. ",
    "raphaelokon": "Hi. Sorry to hijack this thread, but I experience a similar problem or maybe I am getting the basics wrong: \nThe first time when I do client.authenticate() my AngularJS application stores the oauth token in localStorage which is fine. I can then do my request through my services and all is good. \nWhen I revisit the page, eg. reload the page, I still have the token persisted in localStorage but a direct call to client.getAccountInfo() results in a 401. My understanding was, that when there is a token available you don't have to re-autheticate. Calling client.isAuthenticated() yields in a false as well.\nThe token is not passed as bearer when I straight request getAccountInfo (w/o client.authenticate) although it is available in localStorage.\nDo I have to call client.authenticate() every time I want to talk with the API?\nAny idea?\n. Thanks! \n. Hi. Sorry to hijack this thread, but I experience a similar problem or maybe I am getting the basics wrong: \nThe first time when I do client.authenticate() my AngularJS application stores the oauth token in localStorage which is fine. I can then do my request through my services and all is good. \nWhen I revisit the page, eg. reload the page, I still have the token persisted in localStorage but a direct call to client.getAccountInfo() results in a 401. My understanding was, that when there is a token available you don't have to re-autheticate. Calling client.isAuthenticated() yields in a false as well.\nThe token is not passed as bearer when I straight request getAccountInfo (w/o client.authenticate) although it is available in localStorage.\nDo I have to call client.authenticate() every time I want to talk with the API?\nAny idea?\n. Thanks! \n. ",
    "smarx": "Yes, you'll need to call client.authenticate({ interactive: false });\n. The line that looks suspicious is deferred.resolve(temp). (temp is presumably undefined, but also, you're resolving your promise before anything has actually run!)\nAlso, why is there a 5-second timeout around this?\nYour 'Hello', 'world' line seems to have a typo (missing right square bracket).\nIn any case, if you remove the call to deferred.resolve(temp), does this code work? I don't know AngularJS at all, but from working with promises in other environments, everything looks good.\nIn short, my preferred code would look something like this:\nvar getMessages = function() {\n    var deferred = $q.defer();\n    client.readdir(\"/\", function(error, entries, stat1, stat2) {\n        if (error) {\n            deferred.reject(error);\n        } else {\n            deferred.resolve(entries);\n        }\n    });\n    return deferred.promise;\n};\nEDIT: Oh, just noticed your last code snippet. That looks wrong, unless AngularJS has some special handling of promises there. The typical way to use a promise would be like this:\n// ...\n.controller('HelloCtrl', function($scope, HelloWorld) {\n    HelloWorld.getMessages().then(function (messages) {\n        $scope.messages = messages;\n    });\n});\n. Below is full working code, running at https://angulardropbox.site44.com/.\n```\n<!doctype html>\n\n\nAngularJS + Dropbox\n\n\n\n\nFiles\n\n{{ file }}\n\n<script>\n    angular.module('myModule', [])\n    .factory('HelloWorld', function ($q, $timeout) {\n        var client = new Dropbox.Client({key: 'ategsxcgsyksyeq'});\n        client.authenticate();\n        return {\n            getfiles: function () {\n                var deferred = $q.defer();\n                client.readdir('/', function (error, entries) {\n                    if (error) deferred.reject(error);\n                    else deferred.resolve(entries);\n                });\n                return deferred.promise;\n            }\n        }\n    })\n    .controller('HelloCtrl', function ($scope, HelloWorld) {\n        HelloWorld.getfiles().then(function (entries) {\n            $scope.files = entries;\n        });\n    });\n</script>\n\n\n\n```\n. It looks like you're having trouble with async programming... it's important to keep in mind the order of execution.\nHere's a snippet of your code with the order in which the code will execute:\ntemp = folders[i]; // This happens 1st.\ngetFiles.getFiles(folders[i].path).then(function (stat1) {\n    var folderContent = stat1._json.contents; // This happens 3rd.\n    temp.content = folderContent;\n});\nsetFolders(temp); // This happens 2nd.\nI couldn't quite follow how the logic is supposed to work in your code, but I suspect you're simply not doing things in the order you want to. :-)\n. Delta does this. Though you still have to call it in a loop (not recursively, just repeatedly, since it can return partial results with a cursor to continue).\nUnfortunately, I don't think the JS library yet supports the path_prefix parameter, which is what scopes the call to a single path.\n. If you suspect something has changed on the Dropbox side, you should probably ask this question on the Dropbox forum: https://forums.dropbox.com/forum.php?id=5. (It is, in fact, the case that users are no longer asked to reauthorize an app they've already authorized. But start a thread on the forum if you want to discuss it.)\n. I assume you can convert a blob to a data URI, right? I recently added data\nURI support to the Saver.\nOn Fri, Jan 10, 2014 at 4:11 PM, Victor Costan notifications@github.comwrote:\n\nTL;DR: the libraries can share the namespace. For best results, load\ndropbox.js last.\nThis should work. Please file bugs if it doesn't. We have an informal\nagreement on dividing the Dropbox namespace, so no naming conflicts should\never happen.\ndropbox.js has a bit of special code that makes sure it will coexist with\nthe saver JS, as long as dropbox.js is loaded last. If dropbox.js is loaded\nfirst, the saver would have to take similar precautions to make sure both\nlibraries will share the Dropbox namespace, and I don't have a test for\nthat case.\nTo the best of my knowledge, the Saver renders that nice UI server-side. I\nwould like to have something similar available for dropbox.js, either in\nthe core library or as a sibling project, but it's non-trivial, and I don't\nhave the time to do it right now.\nAlso, dropbox.js requires a different API key, authorization, and\nproduction approval, so you'll have to do some mental juggling if you use\nboth in the same application.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/144#issuecomment-32079724\n.\n. Yes, that will probably be a problem. Our policy is that only up to 10MB is\nsupported. (Larger files may work now if you try it, but there are no\nguarantees that this will continue to work.)\n\nOn Fri, Jan 10, 2014 at 5:03 PM, iangilman notifications@github.com wrote:\n\nAwesome, thank you for the quick response! I have to say my experience\nwith the Dropbox API (which I knew nothing about prior to today) has been\namazing... I got it up and running quite quickly, and it's had everything\nI've needed (except for this issue).\nThanks for the data URI suggestion... I'll give that a try. The files I'm\ndealing with are rather large (e.g. 50MB)... is that going to be a problem?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/144#issuecomment-32081730\n.\n. The developer blog (http://dropbox.com/developers/blog) is certainly the place to watch for feature updates like that. (We'll be posting something about the data URI support soon.)\n\nBut if we added explicit support for Blob URLs, it would almost certainly have the same file size limits as data URIs.\n. I'd have to check the code, but I assume writeFile uses files_put, so the maximum size is 150MB. To upload larger files, you need to use chunked uploads.\n. @louissobel It's a limit on the size of the actual file, but it's not actually a hard limit (at least not today).\n. @louissobel There are no hard limits at all. Please post on the forum (https://forums.dropbox.com/forum.php?id=5) rather than opening an issue here, since this doesn't relate to the dropbox.js library.\n. This discussion doesn't belong here, but it seems people are still finding this thread. So to update here, we ended up not shipping data URI support in the Saver due to limitations on our end.\n. Closing, because this is the repo for the dropbox.js library, but this issue doesn't relate to dropbox.js. (The repro doesn't even use the library at all.) Please post on the Dropbox developer forum: https://forums.dropbox.com/forum.php?id=5.\n. Spam.\n. Heroku supports HTTPS.\n. No, this isn't stored in the browser anywhere. This is on the Dropbox side... Dropbox sees that your account is already linked to the app and just redirects you immediately.\nSo what happens is each time you link the app with your account, a new access token is generated. Calling signoff disables the access token currently used but doesn't do anything about the other tokens. As long as you still have at least one valid access token for the app, you'll get the automatic redirect behavior.\nYou can fully unlink your account from the app by visiting https://www.dropbox.com/account/security and clicking the X next to the app. If you then link the app and then use signoff, you should be forced to allow the app access again the next time you try to auth. (This is because you only had one access token, and signoff disabled that token.)\nYou can also pass force_reapprove=true as part of your OAuth 2 redirect to always force the user to approve the app again, even if they already have. I don't think the JS SDK exposes this parameter, but it shouldn't be hard to add.\n. See https://www.dropbox.com/developers/core/docs#thumbnails:\n\nThis method currently supports files with the following file extensions: \"jpg\", \"jpeg\", \"png\", \"tiff\", \"tif\", \"gif\", and \"bmp\".\n. This Github repository is for the dropbox.js library, but I don't think any method in this library accepts a list of extensions.\n\nJust taking a guess, but I'd say you're using the Chooser? (https://www.dropbox.com/developers/dropins/chooser/js) If so, you can get help on the Dropbox API forum: https://forums.dropbox.com/forum.php?id=5.\n. That error generally means exactly what it says... did you add that redirect URI to the list of allowed redirect URIs in the App console? (dropbox.com/apps)\n. I think POST is also supported, and browsers have better support for POST than PUT.\n. That code looks right to me. What sort of problem are you having?\n. That code works for me... see https://popuptest.site44.com for a working example, and check out the source to see if you can spot a difference.\n. @lukelam Interesting. I really don't know what difference there might be based on the use of SSO.\n. Do you mean that you always want to use your account (instead of the app user's account)? If so, you could pass an access token when you construct your client object:\nnew Dropbox.Client({ token: '<YOUR ACCESS TOKEN>' });\nHowever, this is not recommended for a few reasons. Most importantly, every user of your app would be able to take this access token and delete all your files, upload their own private DVD collection, etc. Essentially, anyone who has access to your app now has access to your Dropbox account.\nThe typical model for the Dropbox API is for each user of an app to access his or her own account.\nI'm going to close this issue here... this is probably better suited to the Dropbox API forum: https://forums.dropbox.com/forum.php?id=5\n. This really doesn't relate to dropbox.js. (The issue would be the same on any platform or with any library.) Any chance we can move the discussion to the Dropbox API forum?\n. See also http://stackoverflow.com/questions/24427120/uploading-to-dropbox-via-node-js-fails. I answered there.\n. The message means exactly what it says. :-) Make sure that the OAuth redirect URI you've added for your app is exactly \"chrome-extension://.../chrome_oauth_receiver.html\". You can change the URI(s) you've registered via the App console: https://www.dropbox.com/developers/apps.\n. You're passing {interactive: false} to authenticate, which won't ever actually log in the user. I think you want something like this, but I'm not sure because I may be understanding the flow of your app.\n```\nindex: ->\n    @client.authenticate { interactive: false }\n    if not @client.isAuthenticated()\n        return @redirectTo {url: \"auth\"}\nauth: ->\n    @client.authenticate (error, data) =>\n        ...\n```\nThis will try to complete authentication every time the page loads and only redirect to the auth\u2014page, or controller method or whatever :-)\u2014when the user is not authenticated. In the auth controller method,  the user will be asked to authenticate.\nYou might even be able to simplify this further like so:\nindex: ->\n    @client.authenticate (error, data) =>\n        ...\nIf the user is already authenticated, this will just execute the callback immediately, but if the user is not authenticated, this will authenticate them.\n. Thanks! See https://forums.dropbox.com/topic.php?id=120148. Since this isn't an issue with dropbox.js (rather with Dropbox itself), I'm going to close this issue. Please follow the forum thread for resolution.\n. I imagine this will be fixed later today.\n. FYI, this did indeed get fixed that day.\n. It should just keep falling back, right? Maybe something like this, though I haven't thought through all the cases yet. :-)\njs\nif (not callback) and (typeof options is 'function')\n  callback = options\n  options = null\nif (not callback) and (typeof cursor is 'function')\n  callback = cursor\n  cursor = null\nThis should allow devs to do pullChanges(cursor, callback) or pullChanges(callback) or pullChanges(cursor, options, callback), but they'd have to do pullChanges(null, options, callback). (I imagine we could solve the need for a null there by checking the type of the first parameter.)\n. @pwnall That's exactly the case I called out and the solution I hinted at. :-)\n. See marxo's issue here: https://github.com/dropbox/dropbox-js/issues/214 and on Stack Overflow here: http://stackoverflow.com/questions/28068505/dropbox-api-always-access-my-account-dropbox-js\n. See https://github.com/dropbox/dropbox-js/blob/stable/guides/builtin_drivers.md#dropboxauthdriverpopup and https://github.com/dropbox/dropbox-js/blob/stable/test/html/oauth_receiver.html. You need to redirect to a page that runs Dropbox.AuthDriver.Popup.oauthReceiver(). The rest is essentially as you described your expectations.\n. See also on Stack Overflow: http://stackoverflow.com/questions/28068505/dropbox-api-always-access-my-account-dropbox-js\n. I think the best option would be to write a new auth driver. See https://github.com/dropbox/dropbox-js/blob/stable/src/auth_driver/cordova.coffee for the one that's likely to be the most similar. You'll just need to use different code to open and close the window and hook the navigation event.\nIf you want to just build the URL yourself, it's documented here: https://www.dropbox.com/developers/core/docs#oa2-authorize. Basically, you want https://www.dropbox.com/1/oauth2/authorize?response_type=token&client_id=<your app key>&redirect_uri=https://www.dropbox.com/1/oauth2/redirect_receiver, and then catch the redirect and extract the access token from the URL fragment.\n. I'm utterly confused. Why are you using the NodeServer auth driver? Per https://github.com/dropbox/dropbox-js/blob/stable/guides/builtin_drivers.md#dropboxauthdrivernodeserver:\n\nDropbox.AuthDriver.NodeServer\nThis driver is designed for use in the automated test suites of node.js applications. It completes the OAuth token authorization step by opening the Dropbox authorization page in a new browser window, and \"catches\" the OAuth redirection by setting up a small server using the https built-in node.js library.\n\nAnd why are you trying to call getStateParam()? (Also, I don't see any call to it, and you haven't said what the issue is.)\n. I'm a bit lost, sorry. I would think you just want something like the Cordova auth driver. I don't know exactly what the NodeServer auth driver does or how appropriate it is for what you're trying to do.\n. I wrote an auth driver that seems to work for me using nw.js:\n``` coffee\ngui = global.window.nwDispatcher.requireNwGui()\nclass Dropbox.AuthDriver.NWAuthDriver extends Dropbox.AuthDriver.BrowserBase\n  constructor: (options) ->\n    super options\nurl: ->\n    'https://www.dropbox.com/1/oauth2/redirect_receiver'\ndoAuthorize: (authUrl, stateParam, client, callback) ->\n    popup = gui.Window.open authUrl, { focus: true }\n    removed = false\n    popup.on 'loaded', =>\n        url = popup.window.location.href\n        if @locationStateParam(url) is stateParam\n            return if removed\n            removed = true\n            popup.close()\n        callback Dropbox.Util.Oauth.queryParamsFromUrl(url)\n        return\npopup.on 'closed', =>\n    return if removed\n    callback new Dropbox.AuthError('error=access_denied&error_description=User+closed+browser+window')\n    return\n\n```\nI put that in a file called NWAuthDriver.coffee, compiled it to NWAuthDriver.js, and then just included it in a <script> tag under dropbox.js itself. Here's my main HTML:\n``` html\n<!doctype html>\n\n\n\n\n\n\n\n        var client = new Dropbox.Client({ key: '<REDACTED>' });\n        client.authDriver(new Dropbox.AuthDriver.NWAuthDriver());</p>\n<pre><code>    client.authenticate(function (error) {\n        console.log('Authenticated.');\n        client.getAccountInfo(function (error, info) {\n            console.log(JSON.stringify(info));\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n<p></body>\n</html>\n```</p>\n<p>This is my first time using nw.js, so apologies if I've done things in a strange way. :-) Let me know if this helps or what you come up with instead.\n. Here's the corresponding JavaScript in case it's easier to understand:</p>\n<p>``` js\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var gui,\n    <strong>hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super</strong> = parent.prototype; return child; };</p>\n<p>gui = global.window.nwDispatcher.requireNwGui();</p>\n<p>Dropbox.AuthDriver.NWAuthDriver = (function(_super) {\n    __extends(NWAuthDriver, _super);</p>\n<pre><code>function NWAuthDriver(options) {\n  NWAuthDriver.__super__.constructor.call(this, options);\n}\n\nNWAuthDriver.prototype.url = function() {\n  return 'https://www.dropbox.com/1/oauth2/redirect_receiver';\n};\n\nNWAuthDriver.prototype.doAuthorize = function(authUrl, stateParam, client, callback) {\n  var popup, removed;\n  popup = gui.Window.open(authUrl, {\n    focus: true\n  });\n  removed = false;\n  popup.on('loaded', (function(_this) {\n    return function() {\n      var url;\n      url = popup.window.location.href;\n      if (_this.locationStateParam(url) === stateParam) {\n        if (removed) {\n          return;\n        }\n        removed = true;\n        popup.close();\n        callback(Dropbox.Util.Oauth.queryParamsFromUrl(url));\n      }\n    };\n  })(this));\n  return popup.on('closed', (function(_this) {\n    return function() {\n      if (removed) {\n        return;\n      }\n      callback(new Dropbox.AuthError('error=access_denied&amp;error_description=User+closed+browser+window'));\n    };\n  })(this));\n};\n\nreturn NWAuthDriver;\n</code></pre>\n<p>})(Dropbox.AuthDriver.BrowserBase);</p>\n<p>}).call(this);\n<code>``\n. Actually, forget all that. The built-in</code>Popup` auth driver works fine once you whitelist your app scheme:</p>\n<p>``` js\n&lt;!doctype html&gt;\n<html>\n<head>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js\">\n\n\n\n        var client = new Dropbox.Client({ key: '<REDACTED>' });\n        client.authDriver(new Dropbox.AuthDriver.Popup({ receiverUrl: 'app://nwjs_test/oauth_receiver.html' }));</p>\n<pre><code>    // This is the only non-standard bit. It allows the redirect back to app://nwjs_test/oauth_receiver.html to work.\n    require('nw.gui').App.addOriginAccessWhitelistEntry('https://www.dropbox.com/1/oauth2/authorize', 'app', 'nwjs_test', true);\n\n    client.authenticate(function (error) {\n        console.log('Authenticated.');\n        client.getAccountInfo(function (error, info) {\n            console.log(JSON.stringify(info));\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n<p></body>\n</html>\n```\n. I noticed that too. It looks like the code I copied from the Cordova plugin may not work at all. We should probably open a new issue for that.</p>\n<p>I don't want to spend much time on fixing NWAuthDriver, since that code shouldn't be necessary at all. (Using the built-in Popup driver is much easier!) Maybe you can take another stab at using the Popup driver and let me know what issue you're running into?\n. What kind of options? https://github.com/dropbox/dropbox-js/blob/stable/src/auth_driver/browser.coffee#L319 is the code... maybe you can find what you're looking for there or modify it to suit your needs.\n. See also https://github.com/coffeedoc/coffeedoc.info/issues/9.\n. @pwnall Do you have a copy of the docs anywhere? (Or are you able to get them to generate?) If so, I can host them somewhere. But I'm unable to get \"cake doc\" to actually build the docs.\n. If you're using the code from this repo, then no. You'll want https://www.dropbox.com/developers/datastore/sdks/js, which is a fork of this library that adds datastore functionality.\n. You may want to take a look at https://blogs.dropbox.com/developers/2014/06/using-dropbox-datastores-in-a-cordova-app/. That example is about the Datastore API, but the auth part should be the same for anything based on <code>dropbox.js</code>.\n. What example and where?\n. Ah, the click handler is missing a closing paren (and semi-colon). Fixed now, thanks.\n. No repro; see http://stackoverflow.com/questions/30451980/maximum-call-stack-size-exceeded-while-uploading-large-file-using-dropbox-nodejs/30494424#30494424.\n. - This repository has nothing to do with the Datastore API.\n- This library is the closest there is to an official JavaScript library from Dropbox. (It was written by a Dropbox intern, and he continues to maintain it, but we host it under the Dropbox GitHub organization.)\n- API v2 will likely have a JavaScript SDK in the future. For now I would just use v1 (with this library).</p>\n<p>If you're reading and writing text files, this SDK should work fine for you.\n. If you're passing that whole string into the <code>Buffer</code> constructor, I would expect that to fail (since it's not valid base 64). You should pass just the base 64 part... e.g. something like <code>b64image.substring(b64image.indexOf('base64,')+7)</code>.\n. At first glance, I would guess this is a networking error. Are you able to reproduce the problem?\n. You might want to search for \"403\" in the documentation to see where it can be returned: https://www.dropbox.com/developers-v1/core/docs.</p>\n<p>Sorry about needing to grep error messages. API v2 always returns specific errors you can reliably test for, but there's unfortunately no JavaScript SDK available yet.\n. I think <code>mkdir</code> is what you're looking for. (I searched the code for \"create_folder\" to find this.)</p>\n<p>But yes, there's no need to create the folder if you're about to write files into it. The folder will be implicitly created. It looks like the file is being written from your example.</p>\n<p>Why do you say the file and folder don't exist? Are you sure you're looking in the right account and the right location? (E.g. if you have an \"app folder\" permission app, the folder you created will be in <code>~/Dropbox/Apps/&lt;your app name&gt;/2015-44</code>.)\n. The code in this repo is unrelated to the Dropbox Chooser, so this isn't a good forum to ask for help. See https://www.dropbox.com/developers/support for better options.\n. A JS library is planned for API v2 (but there are quite a few languages on the list, so give the team some time).\n. Yes, you'll need to call <code>client.authenticate({ interactive: false });</code>\n. The line that looks suspicious is <code>deferred.resolve(temp)</code>. (<code>temp</code> is presumably undefined, but also, you're resolving your promise before anything has actually run!)</p>\n<p>Also, why is there a 5-second timeout around this?</p>\n<p>Your <code>'Hello', 'world'</code> line seems to have a typo (missing right square bracket).</p>\n<p>In any case, if you remove the call to <code>deferred.resolve(temp)</code>, does this code work? I don't know AngularJS at all, but from working with promises in other environments, everything looks good.</p>\n<p>In short, my preferred code would look something like this:</p>\n<p><code>var getMessages = function() {\n    var deferred = $q.defer();\n    client.readdir(\"/\", function(error, entries, stat1, stat2) {\n        if (error) {\n            deferred.reject(error);\n        } else {\n            deferred.resolve(entries);\n        }\n    });\n    return deferred.promise;\n};</code></p>\n<p><strong>EDIT</strong>: Oh, just noticed your last code snippet. That looks wrong, unless AngularJS has some special handling of promises there. The typical way to use a promise would be like this:</p>\n<p><code>// ...\n.controller('HelloCtrl', function($scope, HelloWorld) {\n    HelloWorld.getMessages().then(function (messages) {\n        $scope.messages = messages;\n    });\n});</code>\n. Below is full working code, running at https://angulardropbox.site44.com/.</p>\n<p>```\n&lt;!doctype html&gt;\n<html>\n<head>\n    <title>AngularJS + Dropbox</title>\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.12/angular.min.js\">\n\n\n\nFiles\n\n{{ file }}\n\n<script>\n    angular.module('myModule', [])\n    .factory('HelloWorld', function ($q, $timeout) {\n        var client = new Dropbox.Client({key: 'ategsxcgsyksyeq'});\n        client.authenticate();\n        return {\n            getfiles: function () {\n                var deferred = $q.defer();\n                client.readdir('/', function (error, entries) {\n                    if (error) deferred.reject(error);\n                    else deferred.resolve(entries);\n                });\n                return deferred.promise;\n            }\n        }\n    })\n    .controller('HelloCtrl', function ($scope, HelloWorld) {\n        HelloWorld.getfiles().then(function (entries) {\n            $scope.files = entries;\n        });\n    });\n</script>\n\n\n\n```\n. It looks like you're having trouble with async programming... it's important to keep in mind the order of execution.\nHere's a snippet of your code with the order in which the code will execute:\ntemp = folders[i]; // This happens 1st.\ngetFiles.getFiles(folders[i].path).then(function (stat1) {\n    var folderContent = stat1._json.contents; // This happens 3rd.\n    temp.content = folderContent;\n});\nsetFolders(temp); // This happens 2nd.\nI couldn't quite follow how the logic is supposed to work in your code, but I suspect you're simply not doing things in the order you want to. :-)\n. Delta does this. Though you still have to call it in a loop (not recursively, just repeatedly, since it can return partial results with a cursor to continue).\nUnfortunately, I don't think the JS library yet supports the path_prefix parameter, which is what scopes the call to a single path.\n. If you suspect something has changed on the Dropbox side, you should probably ask this question on the Dropbox forum: https://forums.dropbox.com/forum.php?id=5. (It is, in fact, the case that users are no longer asked to reauthorize an app they've already authorized. But start a thread on the forum if you want to discuss it.)\n. I assume you can convert a blob to a data URI, right? I recently added data\nURI support to the Saver.\nOn Fri, Jan 10, 2014 at 4:11 PM, Victor Costan notifications@github.comwrote:\n\nTL;DR: the libraries can share the namespace. For best results, load\ndropbox.js last.\nThis should work. Please file bugs if it doesn't. We have an informal\nagreement on dividing the Dropbox namespace, so no naming conflicts should\never happen.\ndropbox.js has a bit of special code that makes sure it will coexist with\nthe saver JS, as long as dropbox.js is loaded last. If dropbox.js is loaded\nfirst, the saver would have to take similar precautions to make sure both\nlibraries will share the Dropbox namespace, and I don't have a test for\nthat case.\nTo the best of my knowledge, the Saver renders that nice UI server-side. I\nwould like to have something similar available for dropbox.js, either in\nthe core library or as a sibling project, but it's non-trivial, and I don't\nhave the time to do it right now.\nAlso, dropbox.js requires a different API key, authorization, and\nproduction approval, so you'll have to do some mental juggling if you use\nboth in the same application.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/144#issuecomment-32079724\n.\n. Yes, that will probably be a problem. Our policy is that only up to 10MB is\nsupported. (Larger files may work now if you try it, but there are no\nguarantees that this will continue to work.)\n\nOn Fri, Jan 10, 2014 at 5:03 PM, iangilman notifications@github.com wrote:\n\nAwesome, thank you for the quick response! I have to say my experience\nwith the Dropbox API (which I knew nothing about prior to today) has been\namazing... I got it up and running quite quickly, and it's had everything\nI've needed (except for this issue).\nThanks for the data URI suggestion... I'll give that a try. The files I'm\ndealing with are rather large (e.g. 50MB)... is that going to be a problem?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/144#issuecomment-32081730\n.\n. The developer blog (http://dropbox.com/developers/blog) is certainly the place to watch for feature updates like that. (We'll be posting something about the data URI support soon.)\n\nBut if we added explicit support for Blob URLs, it would almost certainly have the same file size limits as data URIs.\n. I'd have to check the code, but I assume writeFile uses files_put, so the maximum size is 150MB. To upload larger files, you need to use chunked uploads.\n. @louissobel It's a limit on the size of the actual file, but it's not actually a hard limit (at least not today).\n. @louissobel There are no hard limits at all. Please post on the forum (https://forums.dropbox.com/forum.php?id=5) rather than opening an issue here, since this doesn't relate to the dropbox.js library.\n. This discussion doesn't belong here, but it seems people are still finding this thread. So to update here, we ended up not shipping data URI support in the Saver due to limitations on our end.\n. Closing, because this is the repo for the dropbox.js library, but this issue doesn't relate to dropbox.js. (The repro doesn't even use the library at all.) Please post on the Dropbox developer forum: https://forums.dropbox.com/forum.php?id=5.\n. Spam.\n. Heroku supports HTTPS.\n. No, this isn't stored in the browser anywhere. This is on the Dropbox side... Dropbox sees that your account is already linked to the app and just redirects you immediately.\nSo what happens is each time you link the app with your account, a new access token is generated. Calling signoff disables the access token currently used but doesn't do anything about the other tokens. As long as you still have at least one valid access token for the app, you'll get the automatic redirect behavior.\nYou can fully unlink your account from the app by visiting https://www.dropbox.com/account/security and clicking the X next to the app. If you then link the app and then use signoff, you should be forced to allow the app access again the next time you try to auth. (This is because you only had one access token, and signoff disabled that token.)\nYou can also pass force_reapprove=true as part of your OAuth 2 redirect to always force the user to approve the app again, even if they already have. I don't think the JS SDK exposes this parameter, but it shouldn't be hard to add.\n. See https://www.dropbox.com/developers/core/docs#thumbnails:\n\nThis method currently supports files with the following file extensions: \"jpg\", \"jpeg\", \"png\", \"tiff\", \"tif\", \"gif\", and \"bmp\".\n. This Github repository is for the dropbox.js library, but I don't think any method in this library accepts a list of extensions.\n\nJust taking a guess, but I'd say you're using the Chooser? (https://www.dropbox.com/developers/dropins/chooser/js) If so, you can get help on the Dropbox API forum: https://forums.dropbox.com/forum.php?id=5.\n. That error generally means exactly what it says... did you add that redirect URI to the list of allowed redirect URIs in the App console? (dropbox.com/apps)\n. I think POST is also supported, and browsers have better support for POST than PUT.\n. That code looks right to me. What sort of problem are you having?\n. That code works for me... see https://popuptest.site44.com for a working example, and check out the source to see if you can spot a difference.\n. @lukelam Interesting. I really don't know what difference there might be based on the use of SSO.\n. Do you mean that you always want to use your account (instead of the app user's account)? If so, you could pass an access token when you construct your client object:\nnew Dropbox.Client({ token: '<YOUR ACCESS TOKEN>' });\nHowever, this is not recommended for a few reasons. Most importantly, every user of your app would be able to take this access token and delete all your files, upload their own private DVD collection, etc. Essentially, anyone who has access to your app now has access to your Dropbox account.\nThe typical model for the Dropbox API is for each user of an app to access his or her own account.\nI'm going to close this issue here... this is probably better suited to the Dropbox API forum: https://forums.dropbox.com/forum.php?id=5\n. This really doesn't relate to dropbox.js. (The issue would be the same on any platform or with any library.) Any chance we can move the discussion to the Dropbox API forum?\n. See also http://stackoverflow.com/questions/24427120/uploading-to-dropbox-via-node-js-fails. I answered there.\n. The message means exactly what it says. :-) Make sure that the OAuth redirect URI you've added for your app is exactly \"chrome-extension://.../chrome_oauth_receiver.html\". You can change the URI(s) you've registered via the App console: https://www.dropbox.com/developers/apps.\n. You're passing {interactive: false} to authenticate, which won't ever actually log in the user. I think you want something like this, but I'm not sure because I may be understanding the flow of your app.\n```\nindex: ->\n    @client.authenticate { interactive: false }\n    if not @client.isAuthenticated()\n        return @redirectTo {url: \"auth\"}\nauth: ->\n    @client.authenticate (error, data) =>\n        ...\n```\nThis will try to complete authentication every time the page loads and only redirect to the auth\u2014page, or controller method or whatever :-)\u2014when the user is not authenticated. In the auth controller method,  the user will be asked to authenticate.\nYou might even be able to simplify this further like so:\nindex: ->\n    @client.authenticate (error, data) =>\n        ...\nIf the user is already authenticated, this will just execute the callback immediately, but if the user is not authenticated, this will authenticate them.\n. Thanks! See https://forums.dropbox.com/topic.php?id=120148. Since this isn't an issue with dropbox.js (rather with Dropbox itself), I'm going to close this issue. Please follow the forum thread for resolution.\n. I imagine this will be fixed later today.\n. FYI, this did indeed get fixed that day.\n. It should just keep falling back, right? Maybe something like this, though I haven't thought through all the cases yet. :-)\njs\nif (not callback) and (typeof options is 'function')\n  callback = options\n  options = null\nif (not callback) and (typeof cursor is 'function')\n  callback = cursor\n  cursor = null\nThis should allow devs to do pullChanges(cursor, callback) or pullChanges(callback) or pullChanges(cursor, options, callback), but they'd have to do pullChanges(null, options, callback). (I imagine we could solve the need for a null there by checking the type of the first parameter.)\n. @pwnall That's exactly the case I called out and the solution I hinted at. :-)\n. See marxo's issue here: https://github.com/dropbox/dropbox-js/issues/214 and on Stack Overflow here: http://stackoverflow.com/questions/28068505/dropbox-api-always-access-my-account-dropbox-js\n. See https://github.com/dropbox/dropbox-js/blob/stable/guides/builtin_drivers.md#dropboxauthdriverpopup and https://github.com/dropbox/dropbox-js/blob/stable/test/html/oauth_receiver.html. You need to redirect to a page that runs Dropbox.AuthDriver.Popup.oauthReceiver(). The rest is essentially as you described your expectations.\n. See also on Stack Overflow: http://stackoverflow.com/questions/28068505/dropbox-api-always-access-my-account-dropbox-js\n. I think the best option would be to write a new auth driver. See https://github.com/dropbox/dropbox-js/blob/stable/src/auth_driver/cordova.coffee for the one that's likely to be the most similar. You'll just need to use different code to open and close the window and hook the navigation event.\nIf you want to just build the URL yourself, it's documented here: https://www.dropbox.com/developers/core/docs#oa2-authorize. Basically, you want https://www.dropbox.com/1/oauth2/authorize?response_type=token&client_id=<your app key>&redirect_uri=https://www.dropbox.com/1/oauth2/redirect_receiver, and then catch the redirect and extract the access token from the URL fragment.\n. I'm utterly confused. Why are you using the NodeServer auth driver? Per https://github.com/dropbox/dropbox-js/blob/stable/guides/builtin_drivers.md#dropboxauthdrivernodeserver:\n\nDropbox.AuthDriver.NodeServer\nThis driver is designed for use in the automated test suites of node.js applications. It completes the OAuth token authorization step by opening the Dropbox authorization page in a new browser window, and \"catches\" the OAuth redirection by setting up a small server using the https built-in node.js library.\n\nAnd why are you trying to call getStateParam()? (Also, I don't see any call to it, and you haven't said what the issue is.)\n. I'm a bit lost, sorry. I would think you just want something like the Cordova auth driver. I don't know exactly what the NodeServer auth driver does or how appropriate it is for what you're trying to do.\n. I wrote an auth driver that seems to work for me using nw.js:\n``` coffee\ngui = global.window.nwDispatcher.requireNwGui()\nclass Dropbox.AuthDriver.NWAuthDriver extends Dropbox.AuthDriver.BrowserBase\n  constructor: (options) ->\n    super options\nurl: ->\n    'https://www.dropbox.com/1/oauth2/redirect_receiver'\ndoAuthorize: (authUrl, stateParam, client, callback) ->\n    popup = gui.Window.open authUrl, { focus: true }\n    removed = false\n    popup.on 'loaded', =>\n        url = popup.window.location.href\n        if @locationStateParam(url) is stateParam\n            return if removed\n            removed = true\n            popup.close()\n        callback Dropbox.Util.Oauth.queryParamsFromUrl(url)\n        return\npopup.on 'closed', =>\n    return if removed\n    callback new Dropbox.AuthError('error=access_denied&error_description=User+closed+browser+window')\n    return\n\n```\nI put that in a file called NWAuthDriver.coffee, compiled it to NWAuthDriver.js, and then just included it in a <script> tag under dropbox.js itself. Here's my main HTML:\n``` html\n<!doctype html>\n\n\n\n\n\n\n\n        var client = new Dropbox.Client({ key: '<REDACTED>' });\n        client.authDriver(new Dropbox.AuthDriver.NWAuthDriver());</p>\n<pre><code>    client.authenticate(function (error) {\n        console.log('Authenticated.');\n        client.getAccountInfo(function (error, info) {\n            console.log(JSON.stringify(info));\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n<p></body>\n</html>\n```</p>\n<p>This is my first time using nw.js, so apologies if I've done things in a strange way. :-) Let me know if this helps or what you come up with instead.\n. Here's the corresponding JavaScript in case it's easier to understand:</p>\n<p>``` js\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var gui,\n    <strong>hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super</strong> = parent.prototype; return child; };</p>\n<p>gui = global.window.nwDispatcher.requireNwGui();</p>\n<p>Dropbox.AuthDriver.NWAuthDriver = (function(_super) {\n    __extends(NWAuthDriver, _super);</p>\n<pre><code>function NWAuthDriver(options) {\n  NWAuthDriver.__super__.constructor.call(this, options);\n}\n\nNWAuthDriver.prototype.url = function() {\n  return 'https://www.dropbox.com/1/oauth2/redirect_receiver';\n};\n\nNWAuthDriver.prototype.doAuthorize = function(authUrl, stateParam, client, callback) {\n  var popup, removed;\n  popup = gui.Window.open(authUrl, {\n    focus: true\n  });\n  removed = false;\n  popup.on('loaded', (function(_this) {\n    return function() {\n      var url;\n      url = popup.window.location.href;\n      if (_this.locationStateParam(url) === stateParam) {\n        if (removed) {\n          return;\n        }\n        removed = true;\n        popup.close();\n        callback(Dropbox.Util.Oauth.queryParamsFromUrl(url));\n      }\n    };\n  })(this));\n  return popup.on('closed', (function(_this) {\n    return function() {\n      if (removed) {\n        return;\n      }\n      callback(new Dropbox.AuthError('error=access_denied&amp;error_description=User+closed+browser+window'));\n    };\n  })(this));\n};\n\nreturn NWAuthDriver;\n</code></pre>\n<p>})(Dropbox.AuthDriver.BrowserBase);</p>\n<p>}).call(this);\n<code>``\n. Actually, forget all that. The built-in</code>Popup` auth driver works fine once you whitelist your app scheme:</p>\n<p>``` js\n&lt;!doctype html&gt;\n<html>\n<head>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js\">\n\n\n",
    "dworrad": "Sorry to say this guys - but this issue makes this library unusable... There is no way to implement a \"sign out\" without the user creating multiple folders under their Apps folder.\n. @pwnall The only way around it is to have an access type of Full Dropbox... this then obviously overcomes the problem.\n. Sorry to say this guys - but this issue makes this library unusable... There is no way to implement a \"sign out\" without the user creating multiple folders under their Apps folder.\n. @pwnall The only way around it is to have an access type of Full Dropbox... this then obviously overcomes the problem.\n. ",
    "hc2p": "@pwnall thx for ur time!\nre: yui, those other errors must be follow up issues. After replacing long with longUrl, all the errors were gone.\nre: onprogress, a more generic solution would be nice. e.g i have now the need for onprogress also on client.makeUrl()\n. just wanted to add, that in my case i had to do\njavascript\nlistener = function(dbXhr) {\n        dbXhr.xhr.upload.onprogress = ...;\n        return true;\n      };\nhttp://stackoverflow.com/questions/9707839/xmlhttprequest-does-not-work-properly-in-function/9707877#9707877\n. @pwnall thx for ur time!\nre: yui, those other errors must be follow up issues. After replacing long with longUrl, all the errors were gone.\nre: onprogress, a more generic solution would be nice. e.g i have now the need for onprogress also on client.makeUrl()\n. just wanted to add, that in my case i had to do\njavascript\nlistener = function(dbXhr) {\n        dbXhr.xhr.upload.onprogress = ...;\n        return true;\n      };\nhttp://stackoverflow.com/questions/9707839/xmlhttprequest-does-not-work-properly-in-function/9707877#9707877\n. ",
    "toyhunter": "Wow, your information is quite helpful. Thank you so much for very detailed information!\n. Wow, your information is quite helpful. Thank you so much for very detailed information!\n. ",
    "ericjang": "Hi pwnall,\nthanks so much! Express is a great framework to use, and yes it's kind of like Sinatra. I have a boilerplate app that you can use to get started real quick with NodeJS (there is a branch written in Coffeescript if that is how you roll...)\nhttp://github.com/ericjang/node-boilerplate\nFollowing this step:\nvar client = new Dropbox.Client({\n    key: \"your-key-here\", secret: \"your-secret-here\", sandbox: true\n});\nI'm not sure what to do.\nThere is some other stuff in there but it's pretty modular so let me know if you don't understand part of it! :)\n- Eric\n. Hi pwnall,\nthanks so much! Express is a great framework to use, and yes it's kind of like Sinatra. I have a boilerplate app that you can use to get started real quick with NodeJS (there is a branch written in Coffeescript if that is how you roll...)\nhttp://github.com/ericjang/node-boilerplate\nFollowing this step:\nvar client = new Dropbox.Client({\n    key: \"your-key-here\", secret: \"your-secret-here\", sandbox: true\n});\nI'm not sure what to do.\nThere is some other stuff in there but it's pretty modular so let me know if you don't understand part of it! :)\n- Eric\n. ",
    "tunix": "@pwnall - almost 3 months have passed but still no examples? :( i'm writing an express app with dropbox.js but would prefer to use it on server side instead of client side. i guess i'll have to write an authentication class first since NodeServer doesn't do anything?\n. @pwnall - i thought you were a dropbox'er because i've seen this project in their libraries page as well. i have a side project (blog engine based on dropbox) so i'm playing with dropbox.js now. If I manage to do it, I'd be glad to share my samples or the project itself (it'll be available on github). I'm currently writing a new driver as I couldn't manage to get NodeServer driver working (its description describes it as it was developed for automated tests so maybe that's why i couldn't get it work). thanks for your kind comment btw.\n. @pwnall - almost 3 months have passed but still no examples? :( i'm writing an express app with dropbox.js but would prefer to use it on server side instead of client side. i guess i'll have to write an authentication class first since NodeServer doesn't do anything?\n. @pwnall - i thought you were a dropbox'er because i've seen this project in their libraries page as well. i have a side project (blog engine based on dropbox) so i'm playing with dropbox.js now. If I manage to do it, I'd be glad to share my samples or the project itself (it'll be available on github). I'm currently writing a new driver as I couldn't manage to get NodeServer driver working (its description describes it as it was developed for automated tests so maybe that's why i couldn't get it work). thanks for your kind comment btw.\n. ",
    "dvonlehman": "@tunix - take a look at the passport-dropbox module. It works well for authenticating against dropbox from the server using expressjs.\nhttps://github.com/jaredhanson/passport-dropbox\n. @tunix - take a look at the passport-dropbox module. It works well for authenticating against dropbox from the server using expressjs.\nhttps://github.com/jaredhanson/passport-dropbox\n. ",
    "haraldrudell": "Node.js favors simple. Somehow dropbox-js could be implemented in a more simple way. It seems to have features not belonging in an OAuth link, which is basically three Web requests.\nI think that's what these people are trying to say.\n. Node.js favors simple. Somehow dropbox-js could be implemented in a more simple way. It seems to have features not belonging in an OAuth link, which is basically three Web requests.\nI think that's what these people are trying to say.\n. ",
    "davidmerfield": "I had difficultly writing an authdriver for node but here's what I've got so far:\nhttps://gist.github.com/davidmerfield/9335c6f7506091ad606e\n. In the meantime the old docs are accessible on the wayback machine. I also opened #217 so others don't have this problem.\n. @ChALkeR The link works. Admittedly there's no css but it's the best option right now.\n. @ChALkeR Ah you're quite right, a few of them aren't archived. Bummer.\n. I had difficultly writing an authdriver for node but here's what I've got so far:\nhttps://gist.github.com/davidmerfield/9335c6f7506091ad606e\n. In the meantime the old docs are accessible on the wayback machine. I also opened #217 so others don't have this problem.\n. @ChALkeR The link works. Admittedly there's no css but it's the best option right now.\n. @ChALkeR Ah you're quite right, a few of them aren't archived. Bummer.\n. ",
    "Laurian": "Based on @davidmerfield example, I used it like this: https://gist.github.com/Laurian/a35422e9927bf859710c (without the EventEmitter as in a cluster that might break)\n. Based on @davidmerfield example, I used it like this: https://gist.github.com/Laurian/a35422e9927bf859710c (without the EventEmitter as in a cluster that might break)\n. ",
    "maxart": "I second that request.\n. @pwnall Thanks a lot!\n. I second that request.\n. @pwnall Thanks a lot!\n. ",
    "code": "Thanks for update\n. @pwnall thanks for implementing this, hope to get a chance to test it out tomorrow by doing some client side ID3 tag parsing. \n. Thanks for update\n. @pwnall thanks for implementing this, hope to get a chance to test it out tomorrow by doing some client side ID3 tag parsing. \n. ",
    "piranna": "Just curious: why a 'bytes' object with length and start attributes instead of add these attributes to the 'options' object?\nIn any way, they are good news :-)\n. @pwnall Yes, I understood it, but I was asking about if it doesn't makes sense to have start and lenght on options objects and have only one level... Just question, no more.\n. Welcome :-) If it's only a chunk they are better on the main options object, but requesting several range specs at a time (really HTTP range header allow this?) it's better an array, but this case I don't know where to put it... :-/\n(Sorry, I'm a Python guy and sometimes I got some bad clues about what are the correct API styles on other languages... :-P )\n. I asked for just aesthetical reasons, but if Dropbox servers only allow to\nfetch one range at a time, yes, definitely it's place is on the options\nobject. They could be used independentelly, too: you can default start to 0\nand length to the length of the file and a seek-like function could be\nimplemented :-)\nSent from my Android cell phone, please forgive the lack of format on the\ntext, and my fat thumbs :-P\nEl 28/11/2012 03:45, \"Victor Costan\" notifications@github.com escribi\u00f3:\n\n@piranna https://github.com/piranna HTTP ranges let you do crazy\nthings, according to the spec. However, I was just old that the Dropbox API\nserver doesn't do multiple ranges, so now I think having start and lengthon the options object is definitely the right way to go. I committed the\nchange.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/25#issuecomment-10787567.\n. Take a look at filer.js, is a high level API for Filesystem API with read,\nwrite, seek and touch functions in a similar way of OS system calls. I\nthink it should be fairly easy to adapt it to dropbox.js.\n\nAlso, although Filesystem API is pseudo-deprecated (Mozilla don't like it\nin benefict of IndexedDB) it could be a good inspiration for dropbox.js API\nand also would allow some compatibility and interoperability (Filesystem\nAPI specify a per web page isolated filesystem on the user agent, and\ndropbox.js is more or less like this :-D).\nSent from my Android cell phone, please forgive the lack of format on the\ntext, and my fat thumbs :-P\nEl 28/11/2012 11:13, \"Victor Costan\" notifications@github.com escribi\u00f3:\n\n@piranna https://github.com/piranna I do default length to the file\nlength minus start (if specified). However, if length is specified, I\ndefault start to the file length minus length, because that's how HTTP\nranges work, and because I think this is more useful. For example, if you\nwant to read the last few kilobytes from a file, to scan for ID3 tags, the\ndefault I mentioned lets you do that without having to fetch the file's\nmetadata. I hope specifying start: 0 isn't too much of a pain, in return\nfor having support for end-of-file reads.\nI think seeking would make sense in a higher-level API. I wanted to build\na higher-level API that would come with built-in caching and\nobject-oriented representations of files and folders, and I saved the\nDropbox namespace for that. However, I didn't have time to make it\nhappen, and I doubt this will happen anytime soon :(\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/25#issuecomment-10797184.\n. Yeah, I told you about filer.js just about a reason why to be aligned with the Filesystem API would be a good idea, since it's currently also working with IndexedDB thanks to idb.filesystem.js, also from the same author of filer.js (a freak guy working on Chrome just on the Filesystem API, so it's logical why is so entushiast about it :-P ).\n\nI don't know node.js file API, but it seems reasonable to have a compatibility layer to support both systems (maybe implement the both?), or at least take ideas from them. \n. In Node.js it would work mostly as a cache that get its entries removed when a \"remote file updated or removed\" event is received, or maybe simpler, doing that check previously to access to a file on the local cache.\n. Just curious: why a 'bytes' object with length and start attributes instead of add these attributes to the 'options' object?\nIn any way, they are good news :-)\n. @pwnall Yes, I understood it, but I was asking about if it doesn't makes sense to have start and lenght on options objects and have only one level... Just question, no more.\n. Welcome :-) If it's only a chunk they are better on the main options object, but requesting several range specs at a time (really HTTP range header allow this?) it's better an array, but this case I don't know where to put it... :-/\n(Sorry, I'm a Python guy and sometimes I got some bad clues about what are the correct API styles on other languages... :-P )\n. I asked for just aesthetical reasons, but if Dropbox servers only allow to\nfetch one range at a time, yes, definitely it's place is on the options\nobject. They could be used independentelly, too: you can default start to 0\nand length to the length of the file and a seek-like function could be\nimplemented :-)\nSent from my Android cell phone, please forgive the lack of format on the\ntext, and my fat thumbs :-P\nEl 28/11/2012 03:45, \"Victor Costan\" notifications@github.com escribi\u00f3:\n\n@piranna https://github.com/piranna HTTP ranges let you do crazy\nthings, according to the spec. However, I was just old that the Dropbox API\nserver doesn't do multiple ranges, so now I think having start and lengthon the options object is definitely the right way to go. I committed the\nchange.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/25#issuecomment-10787567.\n. Take a look at filer.js, is a high level API for Filesystem API with read,\nwrite, seek and touch functions in a similar way of OS system calls. I\nthink it should be fairly easy to adapt it to dropbox.js.\n\nAlso, although Filesystem API is pseudo-deprecated (Mozilla don't like it\nin benefict of IndexedDB) it could be a good inspiration for dropbox.js API\nand also would allow some compatibility and interoperability (Filesystem\nAPI specify a per web page isolated filesystem on the user agent, and\ndropbox.js is more or less like this :-D).\nSent from my Android cell phone, please forgive the lack of format on the\ntext, and my fat thumbs :-P\nEl 28/11/2012 11:13, \"Victor Costan\" notifications@github.com escribi\u00f3:\n\n@piranna https://github.com/piranna I do default length to the file\nlength minus start (if specified). However, if length is specified, I\ndefault start to the file length minus length, because that's how HTTP\nranges work, and because I think this is more useful. For example, if you\nwant to read the last few kilobytes from a file, to scan for ID3 tags, the\ndefault I mentioned lets you do that without having to fetch the file's\nmetadata. I hope specifying start: 0 isn't too much of a pain, in return\nfor having support for end-of-file reads.\nI think seeking would make sense in a higher-level API. I wanted to build\na higher-level API that would come with built-in caching and\nobject-oriented representations of files and folders, and I saved the\nDropbox namespace for that. However, I didn't have time to make it\nhappen, and I doubt this will happen anytime soon :(\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/25#issuecomment-10797184.\n. Yeah, I told you about filer.js just about a reason why to be aligned with the Filesystem API would be a good idea, since it's currently also working with IndexedDB thanks to idb.filesystem.js, also from the same author of filer.js (a freak guy working on Chrome just on the Filesystem API, so it's logical why is so entushiast about it :-P ).\n\nI don't know node.js file API, but it seems reasonable to have a compatibility layer to support both systems (maybe implement the both?), or at least take ideas from them. \n. In Node.js it would work mostly as a cache that get its entries removed when a \"remote file updated or removed\" event is received, or maybe simpler, doing that check previously to access to a file on the local cache.\n. ",
    "michote": "Got it working with Dropbox.Drivers.Popup() and the receiver.html\nBut I'd really like to have remberUser is there an easy way to have this feature with Popup? \nOr do I have to store the tokens myself?\n. Thanks for adding it!\nI tried to build a dropbox.js as the development-doc decribes it but I'm getting fatal: https://github.com/dropbox/dropbox-sdk.git/info/refs not found: did you run git update-server-info on the server?\n. no I get https://gist.github.com/4169099\nsorry, but I'm not very familiar with node \n. the dropbox.min.js covers everything for me. Works like expected. Will have to test logout though.\nI use ubuntu 12.10 and node from a ppa because the the nodejs in the repo gave me errors with uglify.\n. I used https://launchpad.net/~chris-lea/+archive/node.js/\nAnd yes the code works well for me in Chrome. Also logout works fine.\nThanks for adding this code! \n. Tried it again and  building works fine for me now, as well. \nDon't know what was the issue before. Thanks!\n. Thanks for the quick reply, \nI'll observe the discussion in the BB-forum than.\nBut you use the the redirected driver? Is this the same issue, as the CordovaDriver won't look for a local file?\n. @pwnall Haven't tried it in the emulator as well as Blackberry10 has a very nice Web Inspector to debug on your device from chrome dev console ;)\nAs far as I see webworks doesn't support InAppBrowser yet. Even they call it like this ( https://developer.blackberry.com/html5/download/roadmap/ W6) it's a ChildBrowser. But there is InAppSupport for Blackberry in phonegap since 2.4 ( http://mail-archives.apache.org/mod_mbox/cordova-commits/201301.mbox/%3C20130109171413.6D00F11E35@tyr.zones.apache.org%3E ) So I build a a Phonegap and webwork enabled app like suggested here: http://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/Porting-your-existing-PhoneGap-application-to-BlackBerry-10/ta-p/2070503\n. I use the CordovaDriver see my linked Code in the first post.\nOn Android/phonegap it opens the InAppBrowser.\n. Any news on this?\n. @pwnall This issue seems to be fixed with the url-whitelisting workaround suggested here:\nhttp://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/Not-allowed-to-load-local-resource-local-index-html/m-p/2459273#M38782\nI got my app authenticated using the redirecting driver and webworks (no extra phonegap)\n. The latest Webos SDK can be downloaded here: https://developer.palm.com/content/resources/develop/sdk_pdk_download.html\nWould be interested in getting this working, as well.\n@pcworld which driver do you use in webos?\n. Got it working with Dropbox.Drivers.Popup() and the receiver.html\nBut I'd really like to have remberUser is there an easy way to have this feature with Popup? \nOr do I have to store the tokens myself?\n. Thanks for adding it!\nI tried to build a dropbox.js as the development-doc decribes it but I'm getting fatal: https://github.com/dropbox/dropbox-sdk.git/info/refs not found: did you run git update-server-info on the server?\n. no I get https://gist.github.com/4169099\nsorry, but I'm not very familiar with node \n. the dropbox.min.js covers everything for me. Works like expected. Will have to test logout though.\nI use ubuntu 12.10 and node from a ppa because the the nodejs in the repo gave me errors with uglify.\n. I used https://launchpad.net/~chris-lea/+archive/node.js/\nAnd yes the code works well for me in Chrome. Also logout works fine.\nThanks for adding this code! \n. Tried it again and  building works fine for me now, as well. \nDon't know what was the issue before. Thanks!\n. Thanks for the quick reply, \nI'll observe the discussion in the BB-forum than.\nBut you use the the redirected driver? Is this the same issue, as the CordovaDriver won't look for a local file?\n. @pwnall Haven't tried it in the emulator as well as Blackberry10 has a very nice Web Inspector to debug on your device from chrome dev console ;)\nAs far as I see webworks doesn't support InAppBrowser yet. Even they call it like this ( https://developer.blackberry.com/html5/download/roadmap/ W6) it's a ChildBrowser. But there is InAppSupport for Blackberry in phonegap since 2.4 ( http://mail-archives.apache.org/mod_mbox/cordova-commits/201301.mbox/%3C20130109171413.6D00F11E35@tyr.zones.apache.org%3E ) So I build a a Phonegap and webwork enabled app like suggested here: http://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/Porting-your-existing-PhoneGap-application-to-BlackBerry-10/ta-p/2070503\n. I use the CordovaDriver see my linked Code in the first post.\nOn Android/phonegap it opens the InAppBrowser.\n. Any news on this?\n. @pwnall This issue seems to be fixed with the url-whitelisting workaround suggested here:\nhttp://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/Not-allowed-to-load-local-resource-local-index-html/m-p/2459273#M38782\nI got my app authenticated using the redirecting driver and webworks (no extra phonegap)\n. The latest Webos SDK can be downloaded here: https://developer.palm.com/content/resources/develop/sdk_pdk_download.html\nWould be interested in getting this working, as well.\n@pcworld which driver do you use in webos?\n. ",
    "whiskers75": "+1\n. +1\n. ",
    "terehov": "Hello! Are there any updates on this topic (uploading binary data to dropbox using dropbox.js)?\n. Wow, thanks a lot!\nI definitely gonna try it in the next couple of days! \nThanks again :-)\n. Hi pwnall, \nI was playing around but couldn't manage to upload a file. \nIs there a chance you could post me a node.js example reading a gif/jpg file from file system and uploading it to github? Would be great! \nthx :-)\n. Thanks, that helped a lot  :-)  Now it works!  I guess encoding was my problem. \n. Hello! Are there any updates on this topic (uploading binary data to dropbox using dropbox.js)?\n. Wow, thanks a lot!\nI definitely gonna try it in the next couple of days! \nThanks again :-)\n. Hi pwnall, \nI was playing around but couldn't manage to upload a file. \nIs there a chance you could post me a node.js example reading a gif/jpg file from file system and uploading it to github? Would be great! \nthx :-)\n. Thanks, that helped a lot  :-)  Now it works!  I guess encoding was my problem. \n. ",
    "individual11": "I don't know if this will come in handy, but here is a quick example I'm doing with the request library pulling an image from the web and pushing it into my dropbox.\njavascript\nvar pathToDir = \"http://path-to-dir.com/\";\nvar image = \"name-of-image.jpg\";\nvar pathToImage = pathToDir + image;\nrequest(pathToImage, { encoding: null }, function(error, response, body){\n    db_client.writeFile(image, body, function(error, stat){\n        if(error){\n            console.log(\"##ERROR##\");\n            console.log(error);\n         }else{\n             console.log(\"##SUCCESS##\");\n             console.log(stat);\n         }\n    });\n});\n. I don't know if this will come in handy, but here is a quick example I'm doing with the request library pulling an image from the web and pushing it into my dropbox.\njavascript\nvar pathToDir = \"http://path-to-dir.com/\";\nvar image = \"name-of-image.jpg\";\nvar pathToImage = pathToDir + image;\nrequest(pathToImage, { encoding: null }, function(error, response, body){\n    db_client.writeFile(image, body, function(error, stat){\n        if(error){\n            console.log(\"##ERROR##\");\n            console.log(error);\n         }else{\n             console.log(\"##SUCCESS##\");\n             console.log(stat);\n         }\n    });\n});\n. ",
    "winterlightning": "Simple text works, binary also successfully uploads. However, the result text becomes corrupted or something, it's unable to be opened.\nSee in simple page app here:\nhttps://dl.dropbox.com/u/4727919/index.html\n1. Upload a file\n2. Press entire file\n3. press upload\n. Ah, ok, didn't know it took File instances. Yep, this completely works now for file instances. Is there anyway to upload binaries, for example, change it to another character set that works?\nThanks!\n. cool thanks\n. Simple text works, binary also successfully uploads. However, the result text becomes corrupted or something, it's unable to be opened.\nSee in simple page app here:\nhttps://dl.dropbox.com/u/4727919/index.html\n1. Upload a file\n2. Press entire file\n3. press upload\n. Ah, ok, didn't know it took File instances. Yep, this completely works now for file instances. Is there anyway to upload binaries, for example, change it to another character set that works?\nThanks!\n. cool thanks\n. ",
    "ssr1ram": "For some reason the option hash {downloadHack: true} only seems to return the www.dropbox url.\nHowever, after reading the docs at https://www.dropbox.com/help/201/en  I manually substituted the www. to dl. and https to http and I was able to 'serve' the generated html file. \nSince, relative urls are not possible, instead of saving the common assets in each users folder and makeUrl'ing all of them, I felt it maybe easier to host it elsewhere which is why I needed to change https to http so all the assets could load.\nSo 2 things\n1. Is my {downloadHack: true} option call somehow inaccurate (i triple checked it but for some reason it doesn't work) or is it not implemented ?\n2. Can i safely assume that non-ssl http://dl. urls' will function over time or should I look for https:// secure serving for my common static files.\n. I'm going the other way i.e. the dropbox returned link is https and the html file served by this https link cannot include  non https assets. \nIn chrome I keep getting a \n[blocked] https;//dl.dropbox... ran insecure content from http://\n. I have a dropio class and the call is in this method\ngeturl: (filename, cb) ->\n        @client.makeUrl filename, {long:true, downloadHack: true}, (err, data) ->\n            cb(err, data)\n. For some reason the option hash {downloadHack: true} only seems to return the www.dropbox url.\nHowever, after reading the docs at https://www.dropbox.com/help/201/en  I manually substituted the www. to dl. and https to http and I was able to 'serve' the generated html file. \nSince, relative urls are not possible, instead of saving the common assets in each users folder and makeUrl'ing all of them, I felt it maybe easier to host it elsewhere which is why I needed to change https to http so all the assets could load.\nSo 2 things\n1. Is my {downloadHack: true} option call somehow inaccurate (i triple checked it but for some reason it doesn't work) or is it not implemented ?\n2. Can i safely assume that non-ssl http://dl. urls' will function over time or should I look for https:// secure serving for my common static files.\n. I'm going the other way i.e. the dropbox returned link is https and the html file served by this https link cannot include  non https assets. \nIn chrome I keep getting a \n[blocked] https;//dl.dropbox... ran insecure content from http://\n. I have a dropio class and the call is in this method\ngeturl: (filename, cb) ->\n        @client.makeUrl filename, {long:true, downloadHack: true}, (err, data) ->\n            cb(err, data)\n. ",
    "asnowfix": "\nI am passing Buffer objects to writeFile(), (which needed a small fix in the XHR wrapper for Node.js, BTW).\nWhen not changing POST to PUT, calls to the REST API fail. I can provide some traces if you want.\nAnd indeed, it seems that writeFile() always calls writeFieUsingPut() on Node.js\n. This is good news. I just forked my own copy of node-xmlhttprequest because I wanted to not only make the stuff work, but also to enhance it to make it work behind proxies (probably by using node-tunnel just like request is doing). Would you have interest in this type of contribution?\n\nBTW, I am using a patched version of node-XMLHttpRequest, not of the entire Node.js.\n. After converting the code to the new setter-like method, it work fine. Thanks for your help!\n. Yes you can close it.\n. 1. I am passing Buffer objects to writeFile(), (which needed a small fix in the XHR wrapper for Node.js, BTW).\n2. When not changing POST to PUT, calls to the REST API fail. I can provide some traces if you want.\n3. And indeed, it seems that writeFile() always calls writeFieUsingPut() on Node.js\n. This is good news. I just forked my own copy of node-xmlhttprequest because I wanted to not only make the stuff work, but also to enhance it to make it work behind proxies (probably by using node-tunnel just like request is doing). Would you have interest in this type of contribution?\nBTW, I am using a patched version of node-XMLHttpRequest, not of the entire Node.js.\n. After converting the code to the new setter-like method, it work fine. Thanks for your help!\n. Yes you can close it.\n. ",
    "michielbdejong": "right, makes sense! You avoid the server-to-server callback by moving the consumer secret into the browser, that's the part i had overlooked.\nThanks for the explanation! Closing.\n. right, makes sense! You avoid the server-to-server callback by moving the consumer secret into the browser, that's the part i had overlooked.\nThanks for the explanation! Closing.\n. ",
    "nathanathan": "Thanks Victor! There are a couple things I wanted to point out:\n-  Cordova and most mobile browsers do not yet support IndexedDB. However, there is a polyfill. There's also a polyfill to add filesystem support to IndexedDB browsers.\n-  With IndexedDB it seems like it would be harder for multiple applications to share data. On android the Cordova file system API allows you to read/write almost anywhere on the sdcard. (One of the neat tricks this allows is file syncing via DropSync. It's not a perfect solution. I'd rather be able to launch syncs at specific points in time from within my app and perhaps have some custom code for resolving conflicts.)\n. Thanks Victor! There are a couple things I wanted to point out:\n-  Cordova and most mobile browsers do not yet support IndexedDB. However, there is a polyfill. There's also a polyfill to add filesystem support to IndexedDB browsers.\n-  With IndexedDB it seems like it would be harder for multiple applications to share data. On android the Cordova file system API allows you to read/write almost anywhere on the sdcard. (One of the neat tricks this allows is file syncing via DropSync. It's not a perfect solution. I'd rather be able to launch syncs at specific points in time from within my app and perhaps have some custom code for resolving conflicts.)\n. ",
    "cristiano-belloni": "+1 please implement this : )\n. +1 please implement this : )\n. ",
    "sakthieswar": "Thank you for reply\nI used IE9 and am using dropbox.js 0.9.0 only but still am getting the error.\nyour example is working but my code is not working please what i should change in my code.\n. Hi thank u for replying,\nauthenticate function is working properly but i cant able to read or write file in dropbox and also if i use getuserinfo function means also am getting access is denied error.\n. var UploadToDropbox = new Dropbox.Client({ key: consumerKey, secret: consumerSecret, token: accessToken, tokenSecret: accessTokenSecret, dropbox: true });\n        UploadToDropbox.authenticate(function (error, UploadToDropbox) {\n            if (error) {\n                alert('Something wrong here.');\n            }\n            else {\n                UploadToDropbox.writeFile(\"HelloWorld.txt\", \"Hello, world!\\n\", function (error, stat) {\n                    if (error) {\n                        return showError(error);  // Something went wrong.\n                    }\n                    alert(\"File saved to your dropbox successfully. \");\n                });\n}\n    });\ni am using this code and  i access the page via https:// link and can u tell about XDR calls.\n. Thank you for reply\nI used IE9 and am using dropbox.js 0.9.0 only but still am getting the error.\nyour example is working but my code is not working please what i should change in my code.\n. Hi thank u for replying,\nauthenticate function is working properly but i cant able to read or write file in dropbox and also if i use getuserinfo function means also am getting access is denied error.\n. var UploadToDropbox = new Dropbox.Client({ key: consumerKey, secret: consumerSecret, token: accessToken, tokenSecret: accessTokenSecret, dropbox: true });\n        UploadToDropbox.authenticate(function (error, UploadToDropbox) {\n            if (error) {\n                alert('Something wrong here.');\n            }\n            else {\n                UploadToDropbox.writeFile(\"HelloWorld.txt\", \"Hello, world!\\n\", function (error, stat) {\n                    if (error) {\n                        return showError(error);  // Something went wrong.\n                    }\n                    alert(\"File saved to your dropbox successfully. \");\n                });\n}\n    });\ni am using this code and  i access the page via https:// link and can u tell about XDR calls.\n. ",
    "PunterSThompson": "Hi,\nFirst thanks for dropbox.js!\nI'm also having this problem with IE9, using dropbox .9 from CDN. Your checkbox example also works correctly but I haven't been able to isolate what the difference is (yet). The relevant line in dropbox.js that causes the error is:\nthis.xhr.open(this.method, this.url, true);\nThe code I'm using to authenticate should be correct:\nvar dropbox_client = new Dropbox.Client({key: 'mykeyhere', sandbox: true});\ndropbox_client.authDriver(new Dropbox.Drivers.Redirect({rememberUser: true}));\ndropbox_client.authenticate(function(error, client) {\n     if (error) {\n        return showError(error);\n      }\n// store tokens for future use\n  console.log(client.credentials());\n  dropbox_auth = client.credentials();\n});\nCheers, Stuart\n. Okay thanks, that is indeed the problem. Now I just have to get binary uploads working in ie .... :(\n. The files come from a file input element, so straight access to the binary data isn't really possible. At the moment I'm trying to fudge it with jQuery-FileUpload, signing a files POST request, using the dropbox.js oauth routines.\n. Hi,\nWe're having the same issue, but are still using the .9 version of dropbox.js. The error messages are the same, and the issue is fixed by removed the progress handler.\ndropbox_client.onXhr.addListener(function(dbXhr) {\n    dbXhr.xhr.upload.onprogress = function(data) {\n        if (data.lengthComputable) {\n            var percent = Math.round((data.loaded / data.total) * 100);\n            jQuery('#progress .bar').css('width', percent + '%');\n        }\n    }\n    return true;\n});\n. Hi,\nFirst thanks for dropbox.js!\nI'm also having this problem with IE9, using dropbox .9 from CDN. Your checkbox example also works correctly but I haven't been able to isolate what the difference is (yet). The relevant line in dropbox.js that causes the error is:\nthis.xhr.open(this.method, this.url, true);\nThe code I'm using to authenticate should be correct:\nvar dropbox_client = new Dropbox.Client({key: 'mykeyhere', sandbox: true});\ndropbox_client.authDriver(new Dropbox.Drivers.Redirect({rememberUser: true}));\ndropbox_client.authenticate(function(error, client) {\n     if (error) {\n        return showError(error);\n      }\n// store tokens for future use\n  console.log(client.credentials());\n  dropbox_auth = client.credentials();\n});\nCheers, Stuart\n. Okay thanks, that is indeed the problem. Now I just have to get binary uploads working in ie .... :(\n. The files come from a file input element, so straight access to the binary data isn't really possible. At the moment I'm trying to fudge it with jQuery-FileUpload, signing a files POST request, using the dropbox.js oauth routines.\n. Hi,\nWe're having the same issue, but are still using the .9 version of dropbox.js. The error messages are the same, and the issue is fixed by removed the progress handler.\ndropbox_client.onXhr.addListener(function(dbXhr) {\n    dbXhr.xhr.upload.onprogress = function(data) {\n        if (data.lengthComputable) {\n            var percent = Math.round((data.loaded / data.total) * 100);\n            jQuery('#progress .bar').css('width', percent + '%');\n        }\n    }\n    return true;\n});\n. ",
    "SimplGy": "So, simply, I'm looking for a way to find out if the user has approved the link before I ask the user to approve the link :)\n. I'm so excited there's a solution available. I spent many hours today trying to get the authentication workflow working for the user the way I thought it should.\nI actually read the docs for the client.authenticate method, including the interactive:false flag--I just read it backwards and it confused me. I thought interactive was true by default, and that interactive meant the callback was checking in more frequently--I got this wrong.\nAnyway, about simplifying the API, what do you think about a usage like this?\njavascript\n// Set up dropbox\nvar dropbox = new Dropbox.client({\n  key: _encodedAppKey,\n  driver: Dropbox.Drivers.Redirect,\n  rememberUser: true,\n  authCheck: function(isAuthorized, client) {\n    if (isAuthorized) {\n      myApplication.load()\n    } else {\n      client.authenticate() // Start the user interactive redirect authentication process.\n    }\n  }\n})\nSuggested changes:\n- sandbox: true by default. It's the new recommended way I think, and if folks are using defaults lets have them use the safer API\n- Droopbox.Drivers.Redirect returns an instantiated version of itself\n- rememberUser: true moved to the client instantiation (to the uneducated, these all look like config values on the dropbox client, why not treat them that way?)\n- HTTP call for checking authentication fired automatically if the 'authCheck' callback is specified\nI realize I'm ignorant about this kind of thing--I've never done security or login before. As an ignorant API user though, I can't understand the need for a 3+ step process. I would love to be able to do it in 1 step as above.\nI'll help if I can, I'm not sure if I have the expertise or if you're interested in this idea :)\nIn any case, thanks for what you've done on an awesome project--per user data stores for client side applications are an incredible piece of the puzzle. Front end developers could start building powerful applications with this.\n. Actually, along the lines of intelligent defaults, why not assume and instantiate a redirect driver when I make a dropbox client. And check this out, the callbacks could be split so that one is called if the user has already authenticated with dropbox, and a different one if they haven't yet. Then the usage would be super slick like this:\njavascript\nvar dropbox = new Dropbox.client({\n  key: _encodedAppKey,\n  isAuthorizedCallback: myApplication.mainScreen,\n  notAuthorizedCallback: myApplication.welcomeScreen\n  }\n})\nThis usage would be sweet!\n. I'm sorry to still not be getting this. It's not for lack of trying :)\nHere is my new workflow:\n1. As soon as the page loads...\n    * create a dropbox client\n    * create an authDriver with rememberUser: true\n    * Call a non-interactive client.authenticate\n        * If, in the callback, client.isAuthenticated is true, show the main screen\n        * else, show the welcome screen (this screen has the connect to dropbox button on it)\n2. When the user hits the 'connect to dropbox' button\n    * Call an interactive client.authenticate\nI felt like on on first page load, the auth callback would find the user to be unauthenticated show the welcome screen. I felt like after interactive authentication, on the second page load, the auth callback would find the user authenticated and show the main screen. This is not the case. The overall feeling is of the app behind one step behind, but it depends how I fiddle with things. It always comes back (from either a DENY or an ACCEPT on the dropbox side) with a client.authstate of 3.\nHere's teh codez:\n``` javascript\nApp = Backbone.View.extend({\n    initialize: function() {\n        _.bindAll(this)\n        this.setElement('body')\n        this.$display = $('#View')\n        // Set up Dropbox\n        this.dropbox = new Dropbox.Client({ key: _encodedAppAPIkey, sandbox: true }) // This object is used to interface with the Dropbox user and his files\n        this.dropbox.authDriver( new Dropbox.Drivers.Redirect({ rememberUser: true }) ) // The auth driver determins how authentication will be done. No action is taken at this time\n        // Start app router\n        this.router = new SimplyDone.AppRouter(this)\n        Backbone.history.start()\n        // Pursue authentication, but don't bother the user... yet.\n        this.auth()\n    },\n/**\n * Trigger dropbox authentication\n * @param askUser If true, it redirects the user to the dropbox site to get their permission to link with us\n */\nauth: function (askUser) {\n    console.log('app.auth()')\n    this.dropbox.authenticate( {interactive: askUser}, this.authCallback )\n},\nauthCallback: function (err, client) {\n    console.log('app.authCallback')\n    if (err) { return this.dropboxErr(err) }\n    if (client.isAuthenticated()) {\n        this.show(this.Views.MAIN)\n    } else {\n        this.show(this.Views.WELCOME)\n    }\n},\nshow: function (viewId) {\n    if (this.view) { this.view.remove() }\n    this.view = new SimplyDone[viewId]()\n    this.$display.html( this.view.el )\n},\n\n})\n```\n. I had to modify my auth callback function in this way to get it to work. I don't understand why I need to call an interactive auth a 2nd time, but it does not work without it. It feels like I'm hitting client.authenticate 3 times instead of 2.\njavascript\nauthCallback: function (err, client) {\n    if (err) { return this.dropboxErr(err) }\n    if (client.isAuthenticated()) {\n        this.show(this.Views.TODOS)\n    } else if (client.authState === _dropboxAuthStates.AUTHORIZED) {\n        this.auth(true) // This seems to be key\n    } else {\n        this.show(this.Views.WELCOME)\n    }\n}\n. //cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.9.0/dropbox.js\ndoh.\n. Ooo, the other issue I raised is fixed (the silent authenticate now changes to 4 instead of 3). Sweet!\nIt still double calls the callback. After these steps:\n1 Fresh Visit\n2 app.dropbox.authenticate({interactive:true})\n3 Push ALLOW, arrive back at the app    \n4 app.dropbox.authenticate({interactive:false})\nI see this console output (The .authenticate with interactive false caused all 3 console log outputs, two at the value of 3 and one at the value of 4. In this case I expect one 3 and one 4.\nclient.authState: 3\nclient.authState: 3\nClient\nclient.authState: 4\n. I haven't set up a build for this yet--just pointing to the CDN. Should I try this tomorrow?\n. Oh, sorry, I thought you meant pull source and do a build, I didn't notice I could hot link to it.\nWhatever you did seems to have fixed it. I no longer get dup events and all other functionality seems to work (though I only did a brief functionality run through)\n. This is fixed in v0.9.1\nThe silent authenticate now bumps .authState up to a 4. Sweet!\n. Oh, I'm just happy to have it. Makes everything easier--You just run client.authenticate({interactive:false}) on every page load and client.authenticate({interactive:true}) when they push the button asking for it.\nEverything else is reacting to events and hack-free, as it should be. Sweet! (And thanks)\n. So, simply, I'm looking for a way to find out if the user has approved the link before I ask the user to approve the link :)\n. I'm so excited there's a solution available. I spent many hours today trying to get the authentication workflow working for the user the way I thought it should.\nI actually read the docs for the client.authenticate method, including the interactive:false flag--I just read it backwards and it confused me. I thought interactive was true by default, and that interactive meant the callback was checking in more frequently--I got this wrong.\nAnyway, about simplifying the API, what do you think about a usage like this?\njavascript\n// Set up dropbox\nvar dropbox = new Dropbox.client({\n  key: _encodedAppKey,\n  driver: Dropbox.Drivers.Redirect,\n  rememberUser: true,\n  authCheck: function(isAuthorized, client) {\n    if (isAuthorized) {\n      myApplication.load()\n    } else {\n      client.authenticate() // Start the user interactive redirect authentication process.\n    }\n  }\n})\nSuggested changes:\n- sandbox: true by default. It's the new recommended way I think, and if folks are using defaults lets have them use the safer API\n- Droopbox.Drivers.Redirect returns an instantiated version of itself\n- rememberUser: true moved to the client instantiation (to the uneducated, these all look like config values on the dropbox client, why not treat them that way?)\n- HTTP call for checking authentication fired automatically if the 'authCheck' callback is specified\nI realize I'm ignorant about this kind of thing--I've never done security or login before. As an ignorant API user though, I can't understand the need for a 3+ step process. I would love to be able to do it in 1 step as above.\nI'll help if I can, I'm not sure if I have the expertise or if you're interested in this idea :)\nIn any case, thanks for what you've done on an awesome project--per user data stores for client side applications are an incredible piece of the puzzle. Front end developers could start building powerful applications with this.\n. Actually, along the lines of intelligent defaults, why not assume and instantiate a redirect driver when I make a dropbox client. And check this out, the callbacks could be split so that one is called if the user has already authenticated with dropbox, and a different one if they haven't yet. Then the usage would be super slick like this:\njavascript\nvar dropbox = new Dropbox.client({\n  key: _encodedAppKey,\n  isAuthorizedCallback: myApplication.mainScreen,\n  notAuthorizedCallback: myApplication.welcomeScreen\n  }\n})\nThis usage would be sweet!\n. I'm sorry to still not be getting this. It's not for lack of trying :)\nHere is my new workflow:\n1. As soon as the page loads...\n    * create a dropbox client\n    * create an authDriver with rememberUser: true\n    * Call a non-interactive client.authenticate\n        * If, in the callback, client.isAuthenticated is true, show the main screen\n        * else, show the welcome screen (this screen has the connect to dropbox button on it)\n2. When the user hits the 'connect to dropbox' button\n    * Call an interactive client.authenticate\nI felt like on on first page load, the auth callback would find the user to be unauthenticated show the welcome screen. I felt like after interactive authentication, on the second page load, the auth callback would find the user authenticated and show the main screen. This is not the case. The overall feeling is of the app behind one step behind, but it depends how I fiddle with things. It always comes back (from either a DENY or an ACCEPT on the dropbox side) with a client.authstate of 3.\nHere's teh codez:\n``` javascript\nApp = Backbone.View.extend({\n    initialize: function() {\n        _.bindAll(this)\n        this.setElement('body')\n        this.$display = $('#View')\n        // Set up Dropbox\n        this.dropbox = new Dropbox.Client({ key: _encodedAppAPIkey, sandbox: true }) // This object is used to interface with the Dropbox user and his files\n        this.dropbox.authDriver( new Dropbox.Drivers.Redirect({ rememberUser: true }) ) // The auth driver determins how authentication will be done. No action is taken at this time\n        // Start app router\n        this.router = new SimplyDone.AppRouter(this)\n        Backbone.history.start()\n        // Pursue authentication, but don't bother the user... yet.\n        this.auth()\n    },\n/**\n * Trigger dropbox authentication\n * @param askUser If true, it redirects the user to the dropbox site to get their permission to link with us\n */\nauth: function (askUser) {\n    console.log('app.auth()')\n    this.dropbox.authenticate( {interactive: askUser}, this.authCallback )\n},\nauthCallback: function (err, client) {\n    console.log('app.authCallback')\n    if (err) { return this.dropboxErr(err) }\n    if (client.isAuthenticated()) {\n        this.show(this.Views.MAIN)\n    } else {\n        this.show(this.Views.WELCOME)\n    }\n},\nshow: function (viewId) {\n    if (this.view) { this.view.remove() }\n    this.view = new SimplyDone[viewId]()\n    this.$display.html( this.view.el )\n},\n\n})\n```\n. I had to modify my auth callback function in this way to get it to work. I don't understand why I need to call an interactive auth a 2nd time, but it does not work without it. It feels like I'm hitting client.authenticate 3 times instead of 2.\njavascript\nauthCallback: function (err, client) {\n    if (err) { return this.dropboxErr(err) }\n    if (client.isAuthenticated()) {\n        this.show(this.Views.TODOS)\n    } else if (client.authState === _dropboxAuthStates.AUTHORIZED) {\n        this.auth(true) // This seems to be key\n    } else {\n        this.show(this.Views.WELCOME)\n    }\n}\n. //cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.9.0/dropbox.js\ndoh.\n. Ooo, the other issue I raised is fixed (the silent authenticate now changes to 4 instead of 3). Sweet!\nIt still double calls the callback. After these steps:\n1 Fresh Visit\n2 app.dropbox.authenticate({interactive:true})\n3 Push ALLOW, arrive back at the app    \n4 app.dropbox.authenticate({interactive:false})\nI see this console output (The .authenticate with interactive false caused all 3 console log outputs, two at the value of 3 and one at the value of 4. In this case I expect one 3 and one 4.\nclient.authState: 3\nclient.authState: 3\nClient\nclient.authState: 4\n. I haven't set up a build for this yet--just pointing to the CDN. Should I try this tomorrow?\n. Oh, sorry, I thought you meant pull source and do a build, I didn't notice I could hot link to it.\nWhatever you did seems to have fixed it. I no longer get dup events and all other functionality seems to work (though I only did a brief functionality run through)\n. This is fixed in v0.9.1\nThe silent authenticate now bumps .authState up to a 4. Sweet!\n. Oh, I'm just happy to have it. Makes everything easier--You just run client.authenticate({interactive:false}) on every page load and client.authenticate({interactive:true}) when they push the button asking for it.\nEverything else is reacting to events and hack-free, as it should be. Sweet! (And thanks)\n. ",
    "rtfeldman": "Looks like https://github.com/mochajs/mocha/pull/867 was accepted! Is this unblocked now?\n. Nope, was just looking into web worker support and noticed this was still open...thanks!\n. :+1: - I've been bitten by the current Browserify incompatibility, and would love to see this merged!\n. @pwnall If you have time, it would be really great if you could consider merging this. It's not much of a code change (mostly added comments), and it would be awesome for those of us using Browserify to finally be able to use dropbox.js. :smiley: \n. Update: I added a PR into @robertknight's branch to add a failing test: https://github.com/robertknight/dropbox-js/pull/1\n. @pwnall Browserify test has been added! (It fails if you revert the commit that makes browserify support work.)\n. @pwnall Anything else we need to do here before this can be merged?\n. :+1: Thanks! Appreciate it.\n. @pwnall still swamped, I assume, but just wanted to check in and see if there's any update on this. :smiley: \n. Sorry to keep pinging on this, but still hoping for a status update.\n. Looks like https://github.com/mochajs/mocha/pull/867 was accepted! Is this unblocked now?\n. Nope, was just looking into web worker support and noticed this was still open...thanks!\n. :+1: - I've been bitten by the current Browserify incompatibility, and would love to see this merged!\n. @pwnall If you have time, it would be really great if you could consider merging this. It's not much of a code change (mostly added comments), and it would be awesome for those of us using Browserify to finally be able to use dropbox.js. :smiley: \n. Update: I added a PR into @robertknight's branch to add a failing test: https://github.com/robertknight/dropbox-js/pull/1\n. @pwnall Browserify test has been added! (It fails if you revert the commit that makes browserify support work.)\n. @pwnall Anything else we need to do here before this can be merged?\n. :+1: Thanks! Appreciate it.\n. @pwnall still swamped, I assume, but just wanted to check in and see if there's any update on this. :smiley: \n. Sorry to keep pinging on this, but still hoping for a status update.\n. ",
    "eantz": "hi @pwnall ,\nhere is the npm-debug.log\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe',\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'install' ]\n2 info using npm@1.2.14\n3 info using node@v0.10.0\n4 verbose node symlink C:\\Program Files\\nodejs\\\\node.exe\n5 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\package.json\n6 verbose readDependencies using package.json deps\n7 verbose install where, deps [ 'D:\\\\resources\\\\dropbox\\\\dropbox-js-master',\n7 verbose install   [ 'open',\n7 verbose install     'xhr2',\n7 verbose install     'async',\n7 verbose install     'chai',\n7 verbose install     'codo',\n7 verbose install     'coffee-script',\n7 verbose install     'express',\n7 verbose install     'glob',\n7 verbose install     'mocha',\n7 verbose install     'remove',\n7 verbose install     'sinon',\n7 verbose install     'sinon-chai',\n7 verbose install     'uglify-js' ] ]\n8 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\package.json\n9 info preinstall dropbox@0.9.1\n10 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\async\\package.json\n11 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\chai\\package.json\n12 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\codo\\package.json\n13 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\coffee-script\\package.json\n14 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\express\\package.json\n15 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\glob\\package.json\n16 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\mocha\\package.json\n17 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\open\\package.json\n18 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\remove\\package.json\n19 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon\\package.json\n20 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon-chai\\package.json\n21 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\uglify-js\\package.json\n22 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\xhr2\\package.json\n23 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\package.json\n24 verbose readDependencies using package.json deps\n25 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\async\\package.json\n26 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\chai\\package.json\n27 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\codo\\package.json\n28 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\coffee-script\\package.json\n29 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\express\\package.json\n30 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\glob\\package.json\n31 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\mocha\\package.json\n32 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\open\\package.json\n33 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\remove\\package.json\n34 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon\\package.json\n35 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon-chai\\package.json\n36 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\uglify-js\\package.json\n37 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\xhr2\\package.json\n38 verbose already installed skipping chai@>= 1.5.0 D:\\resources\\dropbox\\dropbox-js-master\n39 verbose already installed skipping codo@>= 1.5.6 D:\\resources\\dropbox\\dropbox-js-master\n40 verbose already installed skipping coffee-script@>= 1.5.0 D:\\resources\\dropbox\\dropbox-js-master\n41 verbose already installed skipping express@>= 3.1.0 D:\\resources\\dropbox\\dropbox-js-master\n42 verbose already installed skipping glob@>= 3.1.21 D:\\resources\\dropbox\\dropbox-js-master\n43 verbose already installed skipping mocha@>= 1.8.1 D:\\resources\\dropbox\\dropbox-js-master\n44 verbose already installed skipping remove@>= 0.1.5 D:\\resources\\dropbox\\dropbox-js-master\n45 verbose already installed skipping sinon@>= 1.6.0 D:\\resources\\dropbox\\dropbox-js-master\n46 verbose already installed skipping sinon-chai@>= 2.3.1 D:\\resources\\dropbox\\dropbox-js-master\n47 verbose already installed skipping uglify-js@>= 2.2.5 D:\\resources\\dropbox\\dropbox-js-master\n48 verbose already installed skipping open@>= 0.0.3 D:\\resources\\dropbox\\dropbox-js-master\n49 verbose already installed skipping xhr2@>= 0.0.5 D:\\resources\\dropbox\\dropbox-js-master\n50 verbose already installed skipping async@>= 0.2.5 D:\\resources\\dropbox\\dropbox-js-master\n51 silly resolved []\n52 info build D:\\resources\\dropbox\\dropbox-js-master\n53 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\package.json\n54 verbose linkStuff [ false, false, false, 'D:\\\\resources\\\\dropbox' ]\n55 info linkStuff dropbox@0.9.1\n56 verbose linkBins dropbox@0.9.1\n57 verbose linkMans dropbox@0.9.1\n58 verbose rebuildBundles dropbox@0.9.1\n59 verbose rebuildBundles [ '.bin',\n59 verbose rebuildBundles   'async',\n59 verbose rebuildBundles   'chai',\n59 verbose rebuildBundles   'codo',\n59 verbose rebuildBundles   'coffee-script',\n59 verbose rebuildBundles   'express',\n59 verbose rebuildBundles   'glob',\n59 verbose rebuildBundles   'mocha',\n59 verbose rebuildBundles   'open',\n59 verbose rebuildBundles   'remove',\n59 verbose rebuildBundles   'sinon',\n59 verbose rebuildBundles   'sinon-chai',\n59 verbose rebuildBundles   'uglify-js',\n59 verbose rebuildBundles   'xhr2' ]\n60 info install dropbox@0.9.1\n61 info postinstall dropbox@0.9.1\n62 info prepublish dropbox@0.9.1\n63 verbose unsafe-perm in lifecycle true\n64 silly exec cmd \"/c\" \"cake build\"\n65 silly cmd,/c,cake build,D:\\resources\\dropbox\\dropbox-js-master spawning\n66 info dropbox@0.9.1 Failed to exec prepublish script\n67 error dropbox@0.9.1 prepublish: `cake build`\n67 error `cmd \"/c\" \"cake build\"` failed with 8\n68 error Failed at the dropbox@0.9.1 prepublish script.\n68 error This is most likely a problem with the dropbox package,\n68 error not with npm itself.\n68 error Tell the author that this fails on your system:\n68 error     cake build\n68 error You can get their info via:\n68 error     npm owner ls dropbox\n68 error There is likely additional logging output above.\n69 error System Windows_NT 5.1.2600\n70 error command \"C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\n71 error cwd D:\\resources\\dropbox\\dropbox-js-master\n72 error node -v v0.10.0\n73 error npm -v 1.2.14\n74 error code ELIFECYCLE\n75 verbose exit [ 1, true ]\n. Thank you very much for your help..\nI hope this problem can be solved soon..\n. hi @pwnall ,\nhere is the npm-debug.log\n0 info it worked if it ends with ok\n1 verbose cli [ 'C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe',\n1 verbose cli   'C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js',\n1 verbose cli   'install' ]\n2 info using npm@1.2.14\n3 info using node@v0.10.0\n4 verbose node symlink C:\\Program Files\\nodejs\\\\node.exe\n5 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\package.json\n6 verbose readDependencies using package.json deps\n7 verbose install where, deps [ 'D:\\\\resources\\\\dropbox\\\\dropbox-js-master',\n7 verbose install   [ 'open',\n7 verbose install     'xhr2',\n7 verbose install     'async',\n7 verbose install     'chai',\n7 verbose install     'codo',\n7 verbose install     'coffee-script',\n7 verbose install     'express',\n7 verbose install     'glob',\n7 verbose install     'mocha',\n7 verbose install     'remove',\n7 verbose install     'sinon',\n7 verbose install     'sinon-chai',\n7 verbose install     'uglify-js' ] ]\n8 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\package.json\n9 info preinstall dropbox@0.9.1\n10 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\async\\package.json\n11 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\chai\\package.json\n12 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\codo\\package.json\n13 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\coffee-script\\package.json\n14 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\express\\package.json\n15 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\glob\\package.json\n16 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\mocha\\package.json\n17 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\open\\package.json\n18 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\remove\\package.json\n19 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon\\package.json\n20 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon-chai\\package.json\n21 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\uglify-js\\package.json\n22 verbose read json D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\xhr2\\package.json\n23 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\package.json\n24 verbose readDependencies using package.json deps\n25 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\async\\package.json\n26 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\chai\\package.json\n27 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\codo\\package.json\n28 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\coffee-script\\package.json\n29 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\express\\package.json\n30 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\glob\\package.json\n31 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\mocha\\package.json\n32 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\open\\package.json\n33 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\remove\\package.json\n34 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon\\package.json\n35 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\sinon-chai\\package.json\n36 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\uglify-js\\package.json\n37 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\node_modules\\xhr2\\package.json\n38 verbose already installed skipping chai@>= 1.5.0 D:\\resources\\dropbox\\dropbox-js-master\n39 verbose already installed skipping codo@>= 1.5.6 D:\\resources\\dropbox\\dropbox-js-master\n40 verbose already installed skipping coffee-script@>= 1.5.0 D:\\resources\\dropbox\\dropbox-js-master\n41 verbose already installed skipping express@>= 3.1.0 D:\\resources\\dropbox\\dropbox-js-master\n42 verbose already installed skipping glob@>= 3.1.21 D:\\resources\\dropbox\\dropbox-js-master\n43 verbose already installed skipping mocha@>= 1.8.1 D:\\resources\\dropbox\\dropbox-js-master\n44 verbose already installed skipping remove@>= 0.1.5 D:\\resources\\dropbox\\dropbox-js-master\n45 verbose already installed skipping sinon@>= 1.6.0 D:\\resources\\dropbox\\dropbox-js-master\n46 verbose already installed skipping sinon-chai@>= 2.3.1 D:\\resources\\dropbox\\dropbox-js-master\n47 verbose already installed skipping uglify-js@>= 2.2.5 D:\\resources\\dropbox\\dropbox-js-master\n48 verbose already installed skipping open@>= 0.0.3 D:\\resources\\dropbox\\dropbox-js-master\n49 verbose already installed skipping xhr2@>= 0.0.5 D:\\resources\\dropbox\\dropbox-js-master\n50 verbose already installed skipping async@>= 0.2.5 D:\\resources\\dropbox\\dropbox-js-master\n51 silly resolved []\n52 info build D:\\resources\\dropbox\\dropbox-js-master\n53 verbose from cache D:\\resources\\dropbox\\dropbox-js-master\\package.json\n54 verbose linkStuff [ false, false, false, 'D:\\\\resources\\\\dropbox' ]\n55 info linkStuff dropbox@0.9.1\n56 verbose linkBins dropbox@0.9.1\n57 verbose linkMans dropbox@0.9.1\n58 verbose rebuildBundles dropbox@0.9.1\n59 verbose rebuildBundles [ '.bin',\n59 verbose rebuildBundles   'async',\n59 verbose rebuildBundles   'chai',\n59 verbose rebuildBundles   'codo',\n59 verbose rebuildBundles   'coffee-script',\n59 verbose rebuildBundles   'express',\n59 verbose rebuildBundles   'glob',\n59 verbose rebuildBundles   'mocha',\n59 verbose rebuildBundles   'open',\n59 verbose rebuildBundles   'remove',\n59 verbose rebuildBundles   'sinon',\n59 verbose rebuildBundles   'sinon-chai',\n59 verbose rebuildBundles   'uglify-js',\n59 verbose rebuildBundles   'xhr2' ]\n60 info install dropbox@0.9.1\n61 info postinstall dropbox@0.9.1\n62 info prepublish dropbox@0.9.1\n63 verbose unsafe-perm in lifecycle true\n64 silly exec cmd \"/c\" \"cake build\"\n65 silly cmd,/c,cake build,D:\\resources\\dropbox\\dropbox-js-master spawning\n66 info dropbox@0.9.1 Failed to exec prepublish script\n67 error dropbox@0.9.1 prepublish: `cake build`\n67 error `cmd \"/c\" \"cake build\"` failed with 8\n68 error Failed at the dropbox@0.9.1 prepublish script.\n68 error This is most likely a problem with the dropbox package,\n68 error not with npm itself.\n68 error Tell the author that this fails on your system:\n68 error     cake build\n68 error You can get their info via:\n68 error     npm owner ls dropbox\n68 error There is likely additional logging output above.\n69 error System Windows_NT 5.1.2600\n70 error command \"C:\\\\Program Files\\\\nodejs\\\\\\\\node.exe\" \"C:\\\\Program Files\\\\nodejs\\\\node_modules\\\\npm\\\\bin\\\\npm-cli.js\" \"install\"\n71 error cwd D:\\resources\\dropbox\\dropbox-js-master\n72 error node -v v0.10.0\n73 error npm -v 1.2.14\n74 error code ELIFECYCLE\n75 verbose exit [ 1, true ]\n. Thank you very much for your help..\nI hope this problem can be solved soon..\n. ",
    "vitvad": "same issue.\nThx for build!\n. same issue.\nThx for build!\n. ",
    "joeriks": "Hi, tried on Chrome latest and IE 10, on Windows 8. Dropbox.js 0.9.1 (from cdnjs)\n. I created a file manually and saved it as UTF-8, and that one worked fine. When I compared against the one I created with dropbox-js the one difference is the latter has \"UTF-8 with Byte Order Mark\" (http://en.wikipedia.org/wiki/Byte_order_mark) \n. During my tests I had set the writer to have the binary flag to true. When I changed back it worked well. Or so I thought. Now the UTF8 \"without bom\" seem to appear randomly at some saves, and the encoding is bad. Most frustrating. I'll dig further into this to be able to give you reproduceable steps. A heisenbug (http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html) ;) \n. Ok, this is strange, but now I have managed to get a repeatable issue (on my Win8 with Swedish lang setting, chrome & IE):\nclient.writeFile(\"file1\",\"\u00e4\"); client.writeFile(\"file2\",\"\u00e4\u00f6\"); \nclient.readFile(\"file1\",function(error,data){console.log(data);}); // outputs: \ucc44 : error\nclient.readFile(\"file2\",function(error,data){console.log(data);}); // outputs: \u00e4\u00f6 : correct\nI did several experiments with longer strings, but it boils down to this: It seems to guess the encoding based on the string contents. It fails to guess if I have a text with the char '\u00e4' but without the char '\u00f6'. As long as I add \"\u00f6\" it's okay!\n. Hi, tried on Chrome latest and IE 10, on Windows 8. Dropbox.js 0.9.1 (from cdnjs)\n. I created a file manually and saved it as UTF-8, and that one worked fine. When I compared against the one I created with dropbox-js the one difference is the latter has \"UTF-8 with Byte Order Mark\" (http://en.wikipedia.org/wiki/Byte_order_mark) \n. During my tests I had set the writer to have the binary flag to true. When I changed back it worked well. Or so I thought. Now the UTF8 \"without bom\" seem to appear randomly at some saves, and the encoding is bad. Most frustrating. I'll dig further into this to be able to give you reproduceable steps. A heisenbug (http://www.dodgycoder.net/2011/11/yoda-conditions-pokemon-exception.html) ;) \n. Ok, this is strange, but now I have managed to get a repeatable issue (on my Win8 with Swedish lang setting, chrome & IE):\nclient.writeFile(\"file1\",\"\u00e4\"); client.writeFile(\"file2\",\"\u00e4\u00f6\"); \nclient.readFile(\"file1\",function(error,data){console.log(data);}); // outputs: \ucc44 : error\nclient.readFile(\"file2\",function(error,data){console.log(data);}); // outputs: \u00e4\u00f6 : correct\nI did several experiments with longer strings, but it boils down to this: It seems to guess the encoding based on the string contents. It fails to guess if I have a text with the char '\u00e4' but without the char '\u00f6'. As long as I add \"\u00f6\" it's okay!\n. ",
    "enjalot": "I'm having a problem where the \u2713 character comes back as \u00e2\u0153\u201c when I readFile from my app's folder. the character shows up fine when reading the file through the file system.\nI believe this is also a charset problem?\n. I'm having a problem where the \u2713 character comes back as \u00e2\u0153\u201c when I readFile from my app's folder. the character shows up fine when reading the file through the file system.\nI believe this is also a charset problem?\n. ",
    "kyleshank": "I am also experiencing this problem.  I'd like to maintain a UTF-8 charset for files but they will occasionally get converted to ascii or ISO-8859-1 if the file only contains one or two Unicode characters.  \nMy users are surprised when they have successfully typed and saved unicode characters only to see things mis-encoded when they reopen their files.  I can reproduce the behavior and can see in the Content-Type response header what Dropbox thinks the charset of a particular file should be and its not UTF-8.\nWould it be possible to explicitly set the charset to UTF-8?\nThe dropbox.js API has been fantastic for us otherwise and we'd like to solve this issue for our international users.\n. I was able to work around this problem by doing a binary read using the {arrayBuffer: true} option on readFile.  This allowed me to get the bytes of the file directly before any sort of charset interpretation.  I was then able to build a string from those bytes and decode it from the UTF-8 encoding it was transported in.  The end result was the string I had originally written properly encoded.\n. I am also experiencing this problem.  I'd like to maintain a UTF-8 charset for files but they will occasionally get converted to ascii or ISO-8859-1 if the file only contains one or two Unicode characters.  \nMy users are surprised when they have successfully typed and saved unicode characters only to see things mis-encoded when they reopen their files.  I can reproduce the behavior and can see in the Content-Type response header what Dropbox thinks the charset of a particular file should be and its not UTF-8.\nWould it be possible to explicitly set the charset to UTF-8?\nThe dropbox.js API has been fantastic for us otherwise and we'd like to solve this issue for our international users.\n. I was able to work around this problem by doing a binary read using the {arrayBuffer: true} option on readFile.  This allowed me to get the bytes of the file directly before any sort of charset interpretation.  I was then able to build a string from those bytes and decode it from the UTF-8 encoding it was transported in.  The end result was the string I had originally written properly encoded.\n. ",
    "boushley": "I'm having a problem that is likely related to this since I can't specify a charset. I'm trying to send a non-breaking-space (character code 160) however when it ends up getting written out in the request as a \u00c3 (character code 195). Which I believe is a problem with converting between a one and two byte character set.\n. I took the same route and it solved my problem. For anyone else who comes across the same problem the UTF-8 decode function I used is here: https://gist.github.com/boushley/5471599\n. I popped open Charles to be sure there wasn't actually two headers being sent back, and it appears there is no duplicate header, so I'm pretty confused as to why Chrome would be doubling up this value:\nHTTP/1.1 200 OK\nServer: nginx\nDate: Sat, 10 Aug 2013 11:26:57 GMT\nContent-Type: text/plain; charset=ascii\nContent-Length: 203\nConnection: keep-alive\naccept-ranges: bytes\nx-dropbox-metadata: {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}\nx-server-response-time: 200\netag: 7n\nx-dropbox-request-id: 5fcfa0e9c0b1f00039d89010274d6738\npragma: public\ncache-control: max-age=0\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Accept-Ranges, Content-Range, X-Dropbox-Metadata, X-Dropbox-Request-Id, X-JSON, X-Server-Response-Time\nX-RequestId: f89f279185cc3bcf4c5deeee4bae913e\nAs you can see the x-dropbox-metadata header does not have the repeated value, and the header is not duplicated, yet somehow in Chrome for this same request calling this.xhr.getResponseHeader('x-dropbox-metadata'); returns:\n{\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}, {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}\nAnd calling this.xhr.getAllResponseHeaders(); returns:\npragma: public\nx-server-response-time: 200\nContent-Type: text/plain; charset=ascii\ncache-control: max-age=0\nx-dropbox-request-id: 5fcfa0e9c0b1f00039d89010274d6738\naccept-ranges: bytes\nx-dropbox-metadata: {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}, {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}\nIs anyone else seeing this behavior?\n. I guess I should have also mentioned that I am using version 0.10.0 of dropbox.js cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.0/dropbox.js although I was seeing this same behavior with 0.9.2\n. I tracked down the source of this duplicate header to a plugin I was using. It appears that HTTPS Everywhere was the source of this issue. I've filed a bug with them ( https://trac.torproject.org/projects/tor/ticket/9481 ) but I still think it is worth handling this situation since the fix currently waiting as #110 will fix this case, and won't affect the normal case.\n. @pwnall I've updated this with a version that tries again inside of the catch, instead of paying the price of the indexOf every time.\n. @pwnall I've made those changes\nAnd thank you for starting and maintaining this great project.\n. No problem, thanks for the great library.\n. I'm having a problem that is likely related to this since I can't specify a charset. I'm trying to send a non-breaking-space (character code 160) however when it ends up getting written out in the request as a \u00c3 (character code 195). Which I believe is a problem with converting between a one and two byte character set.\n. I took the same route and it solved my problem. For anyone else who comes across the same problem the UTF-8 decode function I used is here: https://gist.github.com/boushley/5471599\n. I popped open Charles to be sure there wasn't actually two headers being sent back, and it appears there is no duplicate header, so I'm pretty confused as to why Chrome would be doubling up this value:\nHTTP/1.1 200 OK\nServer: nginx\nDate: Sat, 10 Aug 2013 11:26:57 GMT\nContent-Type: text/plain; charset=ascii\nContent-Length: 203\nConnection: keep-alive\naccept-ranges: bytes\nx-dropbox-metadata: {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}\nx-server-response-time: 200\netag: 7n\nx-dropbox-request-id: 5fcfa0e9c0b1f00039d89010274d6738\npragma: public\ncache-control: max-age=0\nAccess-Control-Allow-Origin: *\nAccess-Control-Expose-Headers: Accept-Ranges, Content-Range, X-Dropbox-Metadata, X-Dropbox-Request-Id, X-JSON, X-Server-Response-Time\nX-RequestId: f89f279185cc3bcf4c5deeee4bae913e\nAs you can see the x-dropbox-metadata header does not have the repeated value, and the header is not duplicated, yet somehow in Chrome for this same request calling this.xhr.getResponseHeader('x-dropbox-metadata'); returns:\n{\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}, {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}\nAnd calling this.xhr.getAllResponseHeaders(); returns:\npragma: public\nx-server-response-time: 200\nContent-Type: text/plain; charset=ascii\ncache-control: max-age=0\nx-dropbox-request-id: 5fcfa0e9c0b1f00039d89010274d6738\naccept-ranges: bytes\nx-dropbox-metadata: {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}, {\"revision\": 7, \"rev\": \"7130446f9\", \"thumb_exists\": false, \"bytes\": 203, \"modified\": \"Fri, 09 Aug 2013 11:54:51 +0000\", \"client_mtime\": \"Fri, 09 Aug 2013 11:54:52 +0000\", \"path\": \"/Untitled Page 1.fullnote_page\", \"is_dir\": false, \"icon\": \"page_white\", \"root\": \"app_folder\", \"mime_type\": \"application/octet-stream\", \"size\": \"203 bytes\"}\nIs anyone else seeing this behavior?\n. I guess I should have also mentioned that I am using version 0.10.0 of dropbox.js cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.0/dropbox.js although I was seeing this same behavior with 0.9.2\n. I tracked down the source of this duplicate header to a plugin I was using. It appears that HTTPS Everywhere was the source of this issue. I've filed a bug with them ( https://trac.torproject.org/projects/tor/ticket/9481 ) but I still think it is worth handling this situation since the fix currently waiting as #110 will fix this case, and won't affect the normal case.\n. @pwnall I've updated this with a version that tries again inside of the catch, instead of paying the price of the indexOf every time.\n. @pwnall I've made those changes\nAnd thank you for starting and maintaining this great project.\n. No problem, thanks for the great library.\n. ",
    "AndiDog": "I have the same problem and just investigated a bit.\njavascript\nvar client = new Dropbox.Client({key: 'my client id'});\nclient.authenticate({interactive: true}, function() {\n    client.readFile('utf8-1.txt', {}, function(error, fileContent) {\n        console.log('utf8-1.txt: '+fileContent);\n    });\n    client.readFile('utf8-2.json', {}, function(error, fileContent) {\n        console.log('utf8-2.json: '+fileContent);\n    });\n    client.readFile('utf8-3.json', {}, function(error, fileContent) {\n        console.log('utf8-3.json: '+fileContent);\n    });\n});\nFirefox then prints the following:\n\nThe three files utf8-1.txt, utf8-2.json and utf8-3.json are stored as UTF-8 without BOM in my Dropbox, and are returned as \"text/html; charset=utf-8\", \"text/html; charset=utf-8\", \"text/plain; charset=ISO-8859-1\" respectively by the Dropbox API server (does the \"auto\" in the URL https://api-content.dropbox.com/1/files/auto/utf8-3.json?access_token=[...] mean to autodetect the file type?!). Note that even if utf8-1.txt was correctly returned as UTF-8 (however with text/html type), it's not decoded/displayed correctly on the client side. The only correctly displayed file here is utf8-2.json.\nTherefore I guess there are problems on both server (auto-detection = bad) and client side (not assuming UTF-8? other decoding issue?). An option to assume UTF-8 would be nice in the JavaScript library. I will try the workaround in the meantime.\nUsed files available here: https://www.dropbox.com/sh/rbnfahnhzf8mzt7/SlmYOzYmqQ\n. I have the same problem and just investigated a bit.\njavascript\nvar client = new Dropbox.Client({key: 'my client id'});\nclient.authenticate({interactive: true}, function() {\n    client.readFile('utf8-1.txt', {}, function(error, fileContent) {\n        console.log('utf8-1.txt: '+fileContent);\n    });\n    client.readFile('utf8-2.json', {}, function(error, fileContent) {\n        console.log('utf8-2.json: '+fileContent);\n    });\n    client.readFile('utf8-3.json', {}, function(error, fileContent) {\n        console.log('utf8-3.json: '+fileContent);\n    });\n});\nFirefox then prints the following:\n\nThe three files utf8-1.txt, utf8-2.json and utf8-3.json are stored as UTF-8 without BOM in my Dropbox, and are returned as \"text/html; charset=utf-8\", \"text/html; charset=utf-8\", \"text/plain; charset=ISO-8859-1\" respectively by the Dropbox API server (does the \"auto\" in the URL https://api-content.dropbox.com/1/files/auto/utf8-3.json?access_token=[...] mean to autodetect the file type?!). Note that even if utf8-1.txt was correctly returned as UTF-8 (however with text/html type), it's not decoded/displayed correctly on the client side. The only correctly displayed file here is utf8-2.json.\nTherefore I guess there are problems on both server (auto-detection = bad) and client side (not assuming UTF-8? other decoding issue?). An option to assume UTF-8 would be nice in the JavaScript library. I will try the workaround in the meantime.\nUsed files available here: https://www.dropbox.com/sh/rbnfahnhzf8mzt7/SlmYOzYmqQ\n. ",
    "benweet": ":+1: Same issue on https://github.com/benweet/stackedit.\n. That's too bad. OAuth1 allowed http redirection (works fine with version 0.9.2) by passing the token after the hash mark in the URL so that it's not transmitted to any server. Is there any way to use the old OAuth1 authentication with latest version 0.10.1?\n. That makes sense. Thanks for your explanation and for the link.\n. Hi @pwnall \nI've set up an SSL platform for my project with a StartSSL certificate. I'm using the latest version 0.10.1 now. Thanks again for your help.\n. :+1: Same issue on https://github.com/benweet/stackedit.\n. That's too bad. OAuth1 allowed http redirection (works fine with version 0.9.2) by passing the token after the hash mark in the URL so that it's not transmitted to any server. Is there any way to use the old OAuth1 authentication with latest version 0.10.1?\n. That makes sense. Thanks for your explanation and for the link.\n. Hi @pwnall \nI've set up an SSL platform for my project with a StartSSL certificate. I'm using the latest version 0.10.1 now. Thanks again for your help.\n. ",
    "mkotsur": "Hey @pwnall, that was fast :-)\nI thought it was the other way around:\n\nuseQuery should be set to true for applications that use the URL fragment (the part after #) to store state information\n\nMy use case is very simple, I write single page app with AngularJS and have controllers attached to different URLs like: /#/something. So, when there are GET parameters attached after hashtag fragment (which doesn't conform to the URI specification), it breaks out-of box URL resolution and I need to apply dirty hacks in order to work around. \nWould be nice if you can fix that.\n. Hey @pwnall, that was fast :-)\nI thought it was the other way around:\n\nuseQuery should be set to true for applications that use the URL fragment (the part after #) to store state information\n\nMy use case is very simple, I write single page app with AngularJS and have controllers attached to different URLs like: /#/something. So, when there are GET parameters attached after hashtag fragment (which doesn't conform to the URI specification), it breaks out-of box URL resolution and I need to apply dirty hacks in order to work around. \nWould be nice if you can fix that.\n. ",
    "aluedeke": "i run into the same issue with angular. \n. i run into the same issue with angular. \n. ",
    "bdotdub": "@pwnall no problem - and awesome handle!\n. @pwnall no problem - and awesome handle!\n. ",
    "kitikonti": "Hi, @pwnall \nthere is a test installation of the app here: \nhttp://www.wimmer-martin.at/test/simpletrack \nthe cache manifest file could you find here:\nhttp://www.wimmer-martin.at/test/simpletrack/cache.manifest\nAll the js work is done here, except the libraries:\nhttp://www.wimmer-martin.at/test/simpletrack/js/app.js\nI have tested the app with chrome on win7 and iphone5, but the error i could only see in the chrome developement tools. \nThanks for the fast reply!\n. @pwnall to you answer: where do i get the two files?\nand to my problem:\ni think i am a step further. the first time i start the app i have no local storage database (var dbObject) so i create a empty dbObject from the dbDump variable. in this dump there is a variable dbObject.app.firstLogin which is true on the first login.\nalso on app start i call the dropboxAuth() function. this function contains the \"Sign into Dropbox\" Button from your code snippets with a few little changes. the first time i start the app i will see the sign in button. if i am ready with the sign in, get redirected back to my app and the dropboxAuth() function will be called again. this time i go through if(client.isAuthenticated()) because i am already authenticated, and in there i look for if(dbObject.app.firstLogin). this is also true because this is still my first login. in there i call the function restoreDb(), which produces the error.\nthe restoreDb() function looks if there is already a db file in the dropbox because i have an empty local db. if there is no dropbox db i will use the new empty local db and set dbObject.app.firstLogin to false. if there is a db in dropbox i will override my empty local db, here i dont have to set dbObject.app.firstLogin to false because in this db the value is already false.\nthe restoreDb() function calls:\nclient.findByName('/','backup.json', function(error, stat) { ... }\nto check if there is a dropbox db, and i think this produces the error, but i dont know why, and why only if i use the cache.manifest file?\ndo i use the client.findByName in an bad way, or is there a better solution to check if there is a dropbox db?\n. \ni allways get this error, also if there is a dropbox file client.readFile throws an error\n. the funny thing is, if i disable the cache.manifest file i get no errors and evreything works like expected\n. i am sorry to keep you waiting. this seems to solve the problem but brings some other problems with it. but i need a little bit more time to check out the failure.\n. So i have testet a few States on my App.\n1. Start app normaly with active connection, the app works normaly and it build up the application cache.\n2. if i disable the connection (do not reload the page) and use the app, dropbox.js fires a \"NETWORK ERROR\" which is correct. i dont know if the red POST error is correct or not. In this state the app works normaly, only my sync icon gets red to signal a disabled connection.\n   \n3. if i reload the app the app loads normaly from application cache, but it also throws an error \"Manifest fetch failed\". i dont know if this error should be. in this state the app still works as expected, the first time i try to write a file to dropbox client.isAuthenticated is false and my sync icon gets red. but i never get a \"NETWORK ERROR\", dont know why.\n   \n4. if i enable the connection (do not reload the page) and use the app, the app never write files to dropbox (sync icon is still red) because client.isAuthenticated is still false. this is not as i would it to be, because i want that the app automaticly restores the authentification, or in worst case if this is not possible to show me the \"connect with dropbox\" button again to manually reauthenticate. i think it would be possible to show the button again (i have not tried it yet), actually the button is not visible because the line 59 in my app.js.\n5. if i reload the app nothing changes top step 4. only the sync icon at start is not red, but the first time i try to write a file to dropbox it gets red, but this is correct.\nso the question is if the thrown errors in step 1 and 2 are correct, and if it is possible to automaticly reauthenticate after i get back my connection, because if i allways have to manually restore my authentification is not really funny.\n. @pwnall do you have any news to my problems? the most imporant would be, that i dont want to reauthenticate every time i lost my connection.\n. Hi, @pwnall \nthere is a test installation of the app here: \nhttp://www.wimmer-martin.at/test/simpletrack \nthe cache manifest file could you find here:\nhttp://www.wimmer-martin.at/test/simpletrack/cache.manifest\nAll the js work is done here, except the libraries:\nhttp://www.wimmer-martin.at/test/simpletrack/js/app.js\nI have tested the app with chrome on win7 and iphone5, but the error i could only see in the chrome developement tools. \nThanks for the fast reply!\n. @pwnall to you answer: where do i get the two files?\nand to my problem:\ni think i am a step further. the first time i start the app i have no local storage database (var dbObject) so i create a empty dbObject from the dbDump variable. in this dump there is a variable dbObject.app.firstLogin which is true on the first login.\nalso on app start i call the dropboxAuth() function. this function contains the \"Sign into Dropbox\" Button from your code snippets with a few little changes. the first time i start the app i will see the sign in button. if i am ready with the sign in, get redirected back to my app and the dropboxAuth() function will be called again. this time i go through if(client.isAuthenticated()) because i am already authenticated, and in there i look for if(dbObject.app.firstLogin). this is also true because this is still my first login. in there i call the function restoreDb(), which produces the error.\nthe restoreDb() function looks if there is already a db file in the dropbox because i have an empty local db. if there is no dropbox db i will use the new empty local db and set dbObject.app.firstLogin to false. if there is a db in dropbox i will override my empty local db, here i dont have to set dbObject.app.firstLogin to false because in this db the value is already false.\nthe restoreDb() function calls:\nclient.findByName('/','backup.json', function(error, stat) { ... }\nto check if there is a dropbox db, and i think this produces the error, but i dont know why, and why only if i use the cache.manifest file?\ndo i use the client.findByName in an bad way, or is there a better solution to check if there is a dropbox db?\n. \ni allways get this error, also if there is a dropbox file client.readFile throws an error\n. the funny thing is, if i disable the cache.manifest file i get no errors and evreything works like expected\n. i am sorry to keep you waiting. this seems to solve the problem but brings some other problems with it. but i need a little bit more time to check out the failure.\n. So i have testet a few States on my App.\n1. Start app normaly with active connection, the app works normaly and it build up the application cache.\n2. if i disable the connection (do not reload the page) and use the app, dropbox.js fires a \"NETWORK ERROR\" which is correct. i dont know if the red POST error is correct or not. In this state the app works normaly, only my sync icon gets red to signal a disabled connection.\n   \n3. if i reload the app the app loads normaly from application cache, but it also throws an error \"Manifest fetch failed\". i dont know if this error should be. in this state the app still works as expected, the first time i try to write a file to dropbox client.isAuthenticated is false and my sync icon gets red. but i never get a \"NETWORK ERROR\", dont know why.\n   \n4. if i enable the connection (do not reload the page) and use the app, the app never write files to dropbox (sync icon is still red) because client.isAuthenticated is still false. this is not as i would it to be, because i want that the app automaticly restores the authentification, or in worst case if this is not possible to show me the \"connect with dropbox\" button again to manually reauthenticate. i think it would be possible to show the button again (i have not tried it yet), actually the button is not visible because the line 59 in my app.js.\n5. if i reload the app nothing changes top step 4. only the sync icon at start is not red, but the first time i try to write a file to dropbox it gets red, but this is correct.\nso the question is if the thrown errors in step 1 and 2 are correct, and if it is possible to automaticly reauthenticate after i get back my connection, because if i allways have to manually restore my authentification is not really funny.\n. @pwnall do you have any news to my problems? the most imporant would be, that i dont want to reauthenticate every time i lost my connection.\n. ",
    "codehandling": "data that is made public by a particular user = shared folder, that has a\nlink; anyone with the link can access it.\nOkay, say I have shared a folder.\nSo Mr.X has the link to the folder and all files in it are accessible to X.\nCan Mr.X use dropbox API to read/get files from the shared folder without\nauthentication?\nThanks\nJake\nOn Tue, Apr 2, 2013 at 5:08 AM, Victor Costan notifications@github.comwrote:\n\nHi, Jake!\nCan you please clarify what you mean by \"data that is made public by a\nparticular user\"?\nThank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/59#issuecomment-15743947\n.\n. Yup, let me try some of it and will get back to you!\nThanks\n\nOn Thu, Apr 4, 2013 at 11:59 AM, Victor Costan notifications@github.comwrote:\n\nHi, Jake!\nRight now, the answer is \"maybe\".\nFiles: you can use downloadable URLs to share files without\nauthentication. Use downloadHack in client.makeUrl to get a downloadable\nlink.\nhttp://coffeedoc.info/github/dropbox/dropbox-js/master/classes/Dropbox/Client.html#makeUrl-instance\nDirectories: there's no API for downloading an entire directory right now.\nYou can scrape the preview page for the 'download zip' URL, but that's\nbrittle. If your application also creates the public data, you can put\ntogether a JSON file with downloadHack URLs to all the files in a\ndirectory, and use the URL for that file, instead of using the directory's\nURL.\nDoes this help at all?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/59#issuecomment-15881788\n.\n. data that is made public by a particular user = shared folder, that has a\nlink; anyone with the link can access it.\n\nOkay, say I have shared a folder.\nSo Mr.X has the link to the folder and all files in it are accessible to X.\nCan Mr.X use dropbox API to read/get files from the shared folder without\nauthentication?\nThanks\nJake\nOn Tue, Apr 2, 2013 at 5:08 AM, Victor Costan notifications@github.comwrote:\n\nHi, Jake!\nCan you please clarify what you mean by \"data that is made public by a\nparticular user\"?\nThank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/59#issuecomment-15743947\n.\n. Yup, let me try some of it and will get back to you!\nThanks\n\nOn Thu, Apr 4, 2013 at 11:59 AM, Victor Costan notifications@github.comwrote:\n\nHi, Jake!\nRight now, the answer is \"maybe\".\nFiles: you can use downloadable URLs to share files without\nauthentication. Use downloadHack in client.makeUrl to get a downloadable\nlink.\nhttp://coffeedoc.info/github/dropbox/dropbox-js/master/classes/Dropbox/Client.html#makeUrl-instance\nDirectories: there's no API for downloading an entire directory right now.\nYou can scrape the preview page for the 'download zip' URL, but that's\nbrittle. If your application also creates the public data, you can put\ntogether a JSON file with downloadHack URLs to all the files in a\ndirectory, and use the URL for that file, instead of using the directory's\nURL.\nDoes this help at all?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/59#issuecomment-15881788\n.\n. \n",
    "megheaiulian": "References:\nhttps://github.com/dropbox/dropbox-js/issues/60\n. Another option is to open a empty popup upon click then make the request to get requestToken and after that change the html in the popup to redirect to dropbox login.\n. I will check tommorrow and let you know.\nThank you!\n2013/7/3 borisjockov notifications@github.com\n\nCan you confirm that Popup works correctly now that OAuth 2 has been added\nto 0.10?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/pull/61#issuecomment-20415604\n.\n. I have tested master branch and it all seems to work very well. Popup isn't blocked anymore.\n. References:\nhttps://github.com/dropbox/dropbox-js/issues/60\n. Another option is to open a empty popup upon click then make the request to get requestToken and after that change the html in the popup to redirect to dropbox login.\n. I will check tommorrow and let you know.\nThank you!\n\n2013/7/3 borisjockov notifications@github.com\n\nCan you confirm that Popup works correctly now that OAuth 2 has been added\nto 0.10?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/pull/61#issuecomment-20415604\n.\n. I have tested master branch and it all seems to work very well. Popup isn't blocked anymore.\n. \n",
    "borisjockov": "Can you confirm that Popup works correctly now that OAuth 2 has been added to 0.10?\n. I'd check it myself but I can't find the dropbox 0.10.0 min file.\n//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.0/dropbox.min.js is 404 at time of this writing.\n. False alarm. Using https for the redirect URL solved the problem.\n. Can you confirm that Popup works correctly now that OAuth 2 has been added to 0.10?\n. I'd check it myself but I can't find the dropbox 0.10.0 min file.\n//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.0/dropbox.min.js is 404 at time of this writing.\n. False alarm. Using https for the redirect URL solved the problem.\n. ",
    "DavidPratten": "Hi,\nIt looks like it is a 'feature' of Chrome.Version 26.0.1410.43 m\nnew Date(Date.parse(\"Sun, 07 Apr 2013 23:18:43 +0000\"))\nThu Jan 01 1970 11:00:00 GMT+1100 (AUS Eastern Daylight Time)\nnew Date(\"Sun, 07 Apr 2013 23:18:43 +0000\")\nMon Apr 08 2013 09:18:43 GMT+1000 (AUS Eastern Standard Time)\nparse doesn't appear to work and is not actually necessary.\nDavid\nOn 8 April 2013 16:23, Victor Costan notifications@github.com wrote:\n\n@DavidPratten https://github.com/DavidPratten can you please tell me\nhow you're getting the Dropbox.Stat object?\nAlso, can you please this in your Chrome console and tell me what you get?\nnew Date(Date.parse(\"Sun, 07 Apr 2013 23:18:43 +0000\"))\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/62#issuecomment-16034487\n.\n\n\nAll the best,\nDavid Pratten\nEmail: david@prattenmail.com\nMob:   0432 844 444 (Intl: +61432844444)\nHome: 02 8502 8180 (Intl: +61285028180)\nPostal: PO Box 1011, Sutherland NSW 1499, AUSTRALIA\n. Hi Victor I have installed the new dropbox.min.js at http:/\ntodotxttdi.com/beta and the problem persists. Have a look. David\nOn 8 April 2013 20:13, Victor Costan notifications@github.com wrote:\n\n@DavidPratten https://github.com/DavidPratten I just pushed a fix for\nthis issue on master. Can you give it a try?\nIf you'd rather not build it yourself, the links below will work for a\nshort while.\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/62/dropbox.min.js\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/62/dropbox.min.map\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/26/dropbox.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/62#issuecomment-16042540\n.\n\n\nAll the best,\nDavid Pratten\nEmail: david@prattenmail.com\nMob:   0432 844 444 (Intl: +61432844444)\nHome: 02 8502 8180 (Intl: +61285028180)\nPostal: PO Box 1011, Sutherland NSW 1499, AUSTRALIA\n. You are correct.  It works perfectly.\nMy mistake. I forgot to clear the browser cache after uploading the new\nlibrary.\nSorry for any inconvenience.\nDavid\nOn 9 April 2013 06:48, Victor Costan notifications@github.com wrote:\n\nHow do I reproduce the problem? Is it the All changes saved in Dropbox\n(2013-04-08 12:46:44) text at the top?\nCan you please tell me what shows up when you eval Dropbox.Util.parseDatein the console?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/62#issuecomment-16077424\n.\n\n\nAll the best,\nDavid Pratten\nEmail: david@prattenmail.com\nMob:   0432 844 444 (Intl: +61432844444)\nHome: 02 8502 8180 (Intl: +61285028180)\nPostal: PO Box 1011, Sutherland NSW 1499, AUSTRALIA\n. The cause has been found and it didn't have anything to do with dropbox-js.\nThanks\nDavid\n. Hi,\nIt looks like it is a 'feature' of Chrome.Version 26.0.1410.43 m\nnew Date(Date.parse(\"Sun, 07 Apr 2013 23:18:43 +0000\"))\nThu Jan 01 1970 11:00:00 GMT+1100 (AUS Eastern Daylight Time)\nnew Date(\"Sun, 07 Apr 2013 23:18:43 +0000\")\nMon Apr 08 2013 09:18:43 GMT+1000 (AUS Eastern Standard Time)\nparse doesn't appear to work and is not actually necessary.\nDavid\nOn 8 April 2013 16:23, Victor Costan notifications@github.com wrote:\n\n@DavidPratten https://github.com/DavidPratten can you please tell me\nhow you're getting the Dropbox.Stat object?\nAlso, can you please this in your Chrome console and tell me what you get?\nnew Date(Date.parse(\"Sun, 07 Apr 2013 23:18:43 +0000\"))\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/62#issuecomment-16034487\n.\n\n\nAll the best,\nDavid Pratten\nEmail: david@prattenmail.com\nMob:   0432 844 444 (Intl: +61432844444)\nHome: 02 8502 8180 (Intl: +61285028180)\nPostal: PO Box 1011, Sutherland NSW 1499, AUSTRALIA\n. Hi Victor I have installed the new dropbox.min.js at http:/\ntodotxttdi.com/beta and the problem persists. Have a look. David\nOn 8 April 2013 20:13, Victor Costan notifications@github.com wrote:\n\n@DavidPratten https://github.com/DavidPratten I just pushed a fix for\nthis issue on master. Can you give it a try?\nIf you'd rather not build it yourself, the links below will work for a\nshort while.\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/62/dropbox.min.js\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/62/dropbox.min.map\nhttps://dl-web.dropbox.com/spa/jprrh9clkci3lvn/dropbox.js/bugs/26/dropbox.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/62#issuecomment-16042540\n.\n\n\nAll the best,\nDavid Pratten\nEmail: david@prattenmail.com\nMob:   0432 844 444 (Intl: +61432844444)\nHome: 02 8502 8180 (Intl: +61285028180)\nPostal: PO Box 1011, Sutherland NSW 1499, AUSTRALIA\n. You are correct.  It works perfectly.\nMy mistake. I forgot to clear the browser cache after uploading the new\nlibrary.\nSorry for any inconvenience.\nDavid\nOn 9 April 2013 06:48, Victor Costan notifications@github.com wrote:\n\nHow do I reproduce the problem? Is it the All changes saved in Dropbox\n(2013-04-08 12:46:44) text at the top?\nCan you please tell me what shows up when you eval Dropbox.Util.parseDatein the console?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/62#issuecomment-16077424\n.\n\n\nAll the best,\nDavid Pratten\nEmail: david@prattenmail.com\nMob:   0432 844 444 (Intl: +61432844444)\nHome: 02 8502 8180 (Intl: +61285028180)\nPostal: PO Box 1011, Sutherland NSW 1499, AUSTRALIA\n. The cause has been found and it didn't have anything to do with dropbox-js.\nThanks\nDavid\n. ",
    "haehn": "accessing the url directly works\n. Thanks!! Here you can see how we use the dropbox.js :) http://www.youtube.com/watch?v=-RImAucVDXA\n. @pwnall Thanks a lot! I disabled the sharing of Slice:Drop for now - can't wait to activate it again :) \n. @pwnall Any news so far? I just tried without success :/\n. accessing the url directly works\n. Thanks!! Here you can see how we use the dropbox.js :) http://www.youtube.com/watch?v=-RImAucVDXA\n. @pwnall Thanks a lot! I disabled the sharing of Slice:Drop for now - can't wait to activate it again :) \n. @pwnall Any news so far? I just tried without success :/\n. ",
    "nathanpc": "I've reported this issue to BlackBerry already. It isn't an issue with the library, but instead it's a bug in WebWorks\nThis is the forum thread where I reported the issue (sadly no workarounds yet):\u00a0http://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/Not-allowed-to-load-local-resource-local-index-html/td-p/2288397                                                                                                                                     \nSent from my Limited Edition BlackBerry 10 smartphone.\n. @pwnall Yes it's out. You can get the emulator and the SDK here: http://developer.blackberry.com/html5/\nI haven't tested this in the emulator (I never use a emulator), but I'm sure it'll be reproducible since I think it's a SDK bug.\nI'm trying to contact BlackBerry to talk about this issue.\n. @michote How are you opening the ChildBrowser (and handling the OAuth cycle) with dropbox.js?\n. @pwnall Is there any way to do the OAuth cycle manually and just pass the callback URL to the SDK to finish the job?\n. Thanks very much. I'll hack on dropbox.js a bit and try to work around the issue.\n. @michote I'm waiting for BlackBerry to fix it, they are trying to find where the bug is at the time.\n. I got 2 error reports from users today about this. Anyone have more information about it?\n. @pwnall I tried again with 0.10.0 and I started getting the error. I couldn't reproduce it with a version older than 0.10.0, but for some reason 2 users reported it, so I asked them if the problem persists on their version.\n. No problem. I just sent an email to the users to confirm if everything is back to its normal state.\n. I've reported this issue to BlackBerry already. It isn't an issue with the library, but instead it's a bug in WebWorks\nThis is the forum thread where I reported the issue (sadly no workarounds yet):\u00a0http://supportforums.blackberry.com/t5/Web-and-WebWorks-Development/Not-allowed-to-load-local-resource-local-index-html/td-p/2288397                                                                                                                                     \nSent from my Limited Edition BlackBerry 10 smartphone.\n. @pwnall Yes it's out. You can get the emulator and the SDK here: http://developer.blackberry.com/html5/\nI haven't tested this in the emulator (I never use a emulator), but I'm sure it'll be reproducible since I think it's a SDK bug.\nI'm trying to contact BlackBerry to talk about this issue.\n. @michote How are you opening the ChildBrowser (and handling the OAuth cycle) with dropbox.js?\n. @pwnall Is there any way to do the OAuth cycle manually and just pass the callback URL to the SDK to finish the job?\n. Thanks very much. I'll hack on dropbox.js a bit and try to work around the issue.\n. @michote I'm waiting for BlackBerry to fix it, they are trying to find where the bug is at the time.\n. I got 2 error reports from users today about this. Anyone have more information about it?\n. @pwnall I tried again with 0.10.0 and I started getting the error. I couldn't reproduce it with a version older than 0.10.0, but for some reason 2 users reported it, so I asked them if the problem persists on their version.\n. No problem. I just sent an email to the users to confirm if everything is back to its normal state.\n. ",
    "chrismatheson": "im developing on cloud9 so that link should take you to my dev env, with all the code.\nI know this will be a miss-use thing, because i call client.authenticate manually each time i load. But im not sure how to save the credentials to local storage/cookie for later retrieval & reuse that would bypass the need to re-auth\n. Worked like a charm, Yeah i was experimenting with a \"test mock\" but not successfully :)\nany other pointers are totally welcome though \n. Yeah that was the start of a test mock that I never finished. \nThanks for the pointer tho :) any others are always welcome :D\nC\nOn 25 Apr 2013, at 21:44, Victor Costan notifications@github.com wrote:\n\nTry using this to construct the auth driver in line 25 of main.js\nnew Dropbox.Drivers.Redirect({rememberUser: true})\nKeep in mind that if you do this, you must give the user a way to sign out of Dropbox (actually invalidate the token for your app). If you already have sign out functionality for your app, you should also invalidate the user's Dropbox token when they sign out of your app.\nhttps://github.com/dropbox/dropbox-js/blob/master/doc/auth_drivers.md#dropboxdriversredirect\nAlso, you don't lines 11-13. Messing with internal variables is bad :)\nDoes this work?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah codes all working, it was a bit of an internal tool hacky thing anyway so i wasn't too fussed about stability as long as it worked.\n\nLOVE cloud9. i'm desperately trying to get it working on my OSX machine (offline). i think visual stepping & debugging is incredibly useful \n. im developing on cloud9 so that link should take you to my dev env, with all the code.\nI know this will be a miss-use thing, because i call client.authenticate manually each time i load. But im not sure how to save the credentials to local storage/cookie for later retrieval & reuse that would bypass the need to re-auth\n. Worked like a charm, Yeah i was experimenting with a \"test mock\" but not successfully :)\nany other pointers are totally welcome though \n. Yeah that was the start of a test mock that I never finished. \nThanks for the pointer tho :) any others are always welcome :D\nC\nOn 25 Apr 2013, at 21:44, Victor Costan notifications@github.com wrote:\n\nTry using this to construct the auth driver in line 25 of main.js\nnew Dropbox.Drivers.Redirect({rememberUser: true})\nKeep in mind that if you do this, you must give the user a way to sign out of Dropbox (actually invalidate the token for your app). If you already have sign out functionality for your app, you should also invalidate the user's Dropbox token when they sign out of your app.\nhttps://github.com/dropbox/dropbox-js/blob/master/doc/auth_drivers.md#dropboxdriversredirect\nAlso, you don't lines 11-13. Messing with internal variables is bad :)\nDoes this work?\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah codes all working, it was a bit of an internal tool hacky thing anyway so i wasn't too fussed about stability as long as it worked.\n\nLOVE cloud9. i'm desperately trying to get it working on my OSX machine (offline). i think visual stepping & debugging is incredibly useful \n. ",
    "dwiyatci": "@pwnall, \nthank you so much for your clear explanation and recommendation. I am really enlightened. As for now, async.js is making my life easier!! I guess I should start seriously diggin' deeper into asynchronous programming and building responsive HTML5 applications!\nCheers!\n. Hi, @pwnall!\nThanks for the clue! After investigating my Network tab, I found that the actual error message is: \"error\": \"A file with that name already exists at path '/test_folder'\". So, the code above works when I change '/test_folder' into '/test_folder/test.txt', i.e. specifying a new name for the file is needed here in the toPath argument. Perhaps it's worth mentioning this in the documentation?\nIn addition to this, it is mentioned in the documentation of the copy method:\n\nThe method uses a crude heuristic to interpret the \"from\" string -- if it doesn't contain any slash (/) or dot (.) character, it is assumed to be a copy reference.\n\nYet, when I pass a copy reference (e.g. 'BpSOz2Y3bnhlcXhoZHN4Mg') as the from argument, this method seems to send an XHR with from_path=BpSOz2Y3bnhlcXhoZHN4Mg instead of from_copy_ref=BpSOz2Y3bnhlcXhoZHN4Mg, resulting in \"error\": \"Path '/bpsoz2y3bnhlcxhozhn4mg' not found\". Could you also check on this one?\n. @pwnall, \nthank you so much for your clear explanation and recommendation. I am really enlightened. As for now, async.js is making my life easier!! I guess I should start seriously diggin' deeper into asynchronous programming and building responsive HTML5 applications!\nCheers!\n. Hi, @pwnall!\nThanks for the clue! After investigating my Network tab, I found that the actual error message is: \"error\": \"A file with that name already exists at path '/test_folder'\". So, the code above works when I change '/test_folder' into '/test_folder/test.txt', i.e. specifying a new name for the file is needed here in the toPath argument. Perhaps it's worth mentioning this in the documentation?\nIn addition to this, it is mentioned in the documentation of the copy method:\n\nThe method uses a crude heuristic to interpret the \"from\" string -- if it doesn't contain any slash (/) or dot (.) character, it is assumed to be a copy reference.\n\nYet, when I pass a copy reference (e.g. 'BpSOz2Y3bnhlcXhoZHN4Mg') as the from argument, this method seems to send an XHR with from_path=BpSOz2Y3bnhlcXhoZHN4Mg instead of from_copy_ref=BpSOz2Y3bnhlcXhoZHN4Mg, resulting in \"error\": \"Path '/bpsoz2y3bnhlcxhozhn4mg' not found\". Could you also check on this one?\n. ",
    "ChristofferDahl": "Hi @dwiyatci @pwnall ,\nI know this question is quite old but since I have the same kind of problem I thought it would be better to start with a comment here rather than a whole new question. I'm building a web application with AngularJS and I want to handle the asynchronous calls to the Dropbox API and I've looked some at Angulars promises. Maybe something like async.js would work better, I am open for solutions that would make me able to save the data I'm fetching from Dropbox. Right now my code looks something like this:\nangular.module('myModule', [])\n.factory('HelloWorld', function($q, $timeout) {\n    var client = new Dropbox.Client({ key: \"Xxxxxxxxxxxxxxxxxxxxxxxxx\" });\n```\nclient.authDriver(new Dropbox.AuthDriver.Redirect({\nrememberUser: true}));\nclient.authenticate(function(error, client) {\n    if (error) {\n    console.log(\"Feeeeeel fel fel!\")\n    return showError(error);\n    }\n    alert(\"Dropbox account authorized!\");\n});\nvar getMessages = function() {\n    var deferred = $q.defer();\n    var temp;\n    $timeout(function() {\n    client.readdir(\"/\", function(error, entries, stat1, stat2) {\n        if (error) {\n            return showError(error);  // Something went wrong.\n        }\n        deferred.resolve(entries);\n        //deferred.resolve(['Hello','world');\n    });\n    deferred.resolve(temp);\n}, 5000);\nreturn deferred.promise;\n\n};\nreturn {\n  getMessages: getMessages\n};\n```\n})\n.controller('HelloCtrl', function($scope, HelloWorld) {\n    $scope.messages = HelloWorld.getMessages();\n});\nDon't know if it's just to confusing but I'm trying to return the directories of my root folder but I don't get anything. (When the commented row returns Hello World it works. How did you solve your problem?\n. Thanks for good answer.\nAfterwards I see that there's very much that is wrong with the code I posted.\nThe code you posted really makes sense to me but unfortunately I still get nothing in my ng-repeat.\nFrom my html-file:\n<body ng-app=\"myModule\" ng-controller=\"HelloCtrl\">\n   <h1>Messages</h1>\n   <ul>\n     <li ng-repeat=\"message in messages\">{{ message }}</li>\n   </ul>\n</body>\nThen I used the getMessages-function just like you suggested but still had the:\nreturn {\n   getMessages: getMessages\n  };\nI also changed the controller to use the then-function but I still get nothing in the html. Also I get zero errors in console and the data is fetched from Dropbox because I can console.log it. The problem is of course that it takes some time for the Dropbox call. If you have any other solution than using Angular(or maybe knows what is wrong) I would be open to that too. Really I just want it to work :)\n. Thanks, works really fine. But of course for every solution I get a new problem. Now what I want to do is to read folder directories recursively. When my user selects a folder from the list I want to read the all the directories for that folder and its subfolders. If I use the output parameter stat1 from readdir the object has an attribute contents with all the objects in that folder. I've created a function where I recursively want to read the content attribute for every subfolder and then add it the first object so that I can export and then import this data as json to my system after my user has chosen the files he wants to add from Dropbox. Code below:\n```\napp.factory('getFiles', function($q) {\n       return {\n          getfiles: function (dir) {\n            var deferred = $q.defer();\n    client.readdir(dir, function (error, entries, stat1, stat2) {\n        if (error) deferred.reject(error);\n        else deferred.resolve(stat1);\n    });\n    return deferred.promise;\n}\n\n}\n});\napp.controller('DBController', function($scope,getFiles){     \n    getFiles.getfiles('/').then(function (entries) {\n        $scope.files = entries;\n    });\n$scope.listDB = function()\n{ \n    var temp;\n    getFiles.getfiles('/').then(function (stat1) {\n        $scope.dir = stat1._json;\n        setFolders($scope.dir);\n        function setFolders(current)\n        {\n            for(var i=0;i<current.contents.length;i++)\n            {\n                    console.log(current)\n                folders = current.contents;\n            if(folders[i].is_dir)\n            {\n                folders[i].name = folders[i].path.replace(/\\/([^)]+)\\//,\"\");\n                folders[i].name = folders[i].name.replace('/',\"\");\n                temp = folders[i];\n                getFiles.getfiles(folders[i].path).then(function(stat1) {\n                    var folderContent = stat1._json.contents;\n                    temp.content = folderContent;\n                });\n                setFolders(temp);\n            }\n        }\n    }\n    console.log($scope.dir);\n});\n\n};\n});\n```\nThe problem is that current.contents is undefined the second time in the loop but when I console.log it has a contents. After reading some it seems like it takes some time for the contents to be defined. Is there any other solution reading the directories like this?\n. Yeah, the async programming and the recursive function makes it really difficult to keep up with what happens at what time. If I would take it down to just one question I wonder if you know any way to read the directories of a folder and all its files and subfolder in just one function?\n. Hi @dwiyatci @pwnall ,\nI know this question is quite old but since I have the same kind of problem I thought it would be better to start with a comment here rather than a whole new question. I'm building a web application with AngularJS and I want to handle the asynchronous calls to the Dropbox API and I've looked some at Angulars promises. Maybe something like async.js would work better, I am open for solutions that would make me able to save the data I'm fetching from Dropbox. Right now my code looks something like this:\nangular.module('myModule', [])\n.factory('HelloWorld', function($q, $timeout) {\n    var client = new Dropbox.Client({ key: \"Xxxxxxxxxxxxxxxxxxxxxxxxx\" });\n```\nclient.authDriver(new Dropbox.AuthDriver.Redirect({\nrememberUser: true}));\nclient.authenticate(function(error, client) {\n    if (error) {\n    console.log(\"Feeeeeel fel fel!\")\n    return showError(error);\n    }\n    alert(\"Dropbox account authorized!\");\n});\nvar getMessages = function() {\n    var deferred = $q.defer();\n    var temp;\n    $timeout(function() {\n    client.readdir(\"/\", function(error, entries, stat1, stat2) {\n        if (error) {\n            return showError(error);  // Something went wrong.\n        }\n        deferred.resolve(entries);\n        //deferred.resolve(['Hello','world');\n    });\n    deferred.resolve(temp);\n}, 5000);\nreturn deferred.promise;\n\n};\nreturn {\n  getMessages: getMessages\n};\n```\n})\n.controller('HelloCtrl', function($scope, HelloWorld) {\n    $scope.messages = HelloWorld.getMessages();\n});\nDon't know if it's just to confusing but I'm trying to return the directories of my root folder but I don't get anything. (When the commented row returns Hello World it works. How did you solve your problem?\n. Thanks for good answer.\nAfterwards I see that there's very much that is wrong with the code I posted.\nThe code you posted really makes sense to me but unfortunately I still get nothing in my ng-repeat.\nFrom my html-file:\n<body ng-app=\"myModule\" ng-controller=\"HelloCtrl\">\n   <h1>Messages</h1>\n   <ul>\n     <li ng-repeat=\"message in messages\">{{ message }}</li>\n   </ul>\n</body>\nThen I used the getMessages-function just like you suggested but still had the:\nreturn {\n   getMessages: getMessages\n  };\nI also changed the controller to use the then-function but I still get nothing in the html. Also I get zero errors in console and the data is fetched from Dropbox because I can console.log it. The problem is of course that it takes some time for the Dropbox call. If you have any other solution than using Angular(or maybe knows what is wrong) I would be open to that too. Really I just want it to work :)\n. Thanks, works really fine. But of course for every solution I get a new problem. Now what I want to do is to read folder directories recursively. When my user selects a folder from the list I want to read the all the directories for that folder and its subfolders. If I use the output parameter stat1 from readdir the object has an attribute contents with all the objects in that folder. I've created a function where I recursively want to read the content attribute for every subfolder and then add it the first object so that I can export and then import this data as json to my system after my user has chosen the files he wants to add from Dropbox. Code below:\n```\napp.factory('getFiles', function($q) {\n       return {\n          getfiles: function (dir) {\n            var deferred = $q.defer();\n    client.readdir(dir, function (error, entries, stat1, stat2) {\n        if (error) deferred.reject(error);\n        else deferred.resolve(stat1);\n    });\n    return deferred.promise;\n}\n\n}\n});\napp.controller('DBController', function($scope,getFiles){     \n    getFiles.getfiles('/').then(function (entries) {\n        $scope.files = entries;\n    });\n$scope.listDB = function()\n{ \n    var temp;\n    getFiles.getfiles('/').then(function (stat1) {\n        $scope.dir = stat1._json;\n        setFolders($scope.dir);\n        function setFolders(current)\n        {\n            for(var i=0;i<current.contents.length;i++)\n            {\n                    console.log(current)\n                folders = current.contents;\n            if(folders[i].is_dir)\n            {\n                folders[i].name = folders[i].path.replace(/\\/([^)]+)\\//,\"\");\n                folders[i].name = folders[i].name.replace('/',\"\");\n                temp = folders[i];\n                getFiles.getfiles(folders[i].path).then(function(stat1) {\n                    var folderContent = stat1._json.contents;\n                    temp.content = folderContent;\n                });\n                setFolders(temp);\n            }\n        }\n    }\n    console.log($scope.dir);\n});\n\n};\n});\n```\nThe problem is that current.contents is undefined the second time in the loop but when I console.log it has a contents. After reading some it seems like it takes some time for the contents to be defined. Is there any other solution reading the directories like this?\n. Yeah, the async programming and the recursive function makes it really difficult to keep up with what happens at what time. If I would take it down to just one question I wonder if you know any way to read the directories of a folder and all its files and subfolder in just one function?\n. ",
    "pcworld": "Thanks for putting so much effort into documentation and guides, by the way.\nSorry for nit-picking, but in http://coffeedoc.info/github/dropbox/dropbox-js/master/classes/Dropbox/Xhr.html#signWithOauth-instance and #addOauthParams-instance \"Ammends\" should probably be \"Amends\".\n. @michote I use the Cordova driver, whose doAuthorize function I've changed to open up a WebView with the specified URL, which then waits for the URL to change to https://www.dropbox.com/1/oauth/authorize and then calls doAuthorize's callback.\n. Or it was my mouse, which tends to double-click sometimes\u2026 :-/\nEdit: Looking at the two different times, it almost looks like something went wrong when editing the issue.\nThanks for noticing!\n. Another one: Client#makeUrl: the longUrl description is cut off and the \"Rhino users\" is shown at the top.\nBy the way, thanks for providing such a good API documentation, really makes it easy to work with this library.\n. Thanks for putting so much effort into documentation and guides, by the way.\nSorry for nit-picking, but in http://coffeedoc.info/github/dropbox/dropbox-js/master/classes/Dropbox/Xhr.html#signWithOauth-instance and #addOauthParams-instance \"Ammends\" should probably be \"Amends\".\n. @michote I use the Cordova driver, whose doAuthorize function I've changed to open up a WebView with the specified URL, which then waits for the URL to change to https://www.dropbox.com/1/oauth/authorize and then calls doAuthorize's callback.\n. Or it was my mouse, which tends to double-click sometimes\u2026 :-/\nEdit: Looking at the two different times, it almost looks like something went wrong when editing the issue.\nThanks for noticing!\n. Another one: Client#makeUrl: the longUrl description is cut off and the \"Rhino users\" is shown at the top.\nBy the way, thanks for providing such a good API documentation, really makes it easy to work with this library.\n. ",
    "celloudiallo": "Managed to find the issue...i was using window.location.href to construct the receiverUrl, now i changed it to window.location.origin and its working!\n. Managed to find the issue...i was using window.location.href to construct the receiverUrl, now i changed it to window.location.origin and its working!\n. ",
    "vladikoff": "Thank you for the quick response and feedback. Would you know off-hand why I have to re-approve the application every time? Which part of the library is responsible for this? Thanks again!\n. I updated the pull request with additional changes, now it is possible to build the library.\nThere a few issues with Node and Firefox add-on environments, because the library ships with support for both, I need to differentiate between the two. Currently I'm using if (typeof Buffer isnt \"function\") to check the env.\nThe other issue is the way require(...) works in Firefox add-ons, to workaround that issue, I need to update the existing require(...) calls.\nThe next step for me is to write tests for this...\n. Updated the request with a sample add-on\n. Just added tests. Based them on the Chrome Driver.\nQuick setup:\nYou need the Firefox Addon SDK environment.\nInstructions here: https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/installation.html\nDownload it, extract it. \nIn the terminal: run source bin/activate from the sdk folder.\nThen navigate to dropbox-js root, you can run cake firefox that runs the addon.\ncake firefoxtest runs the tests \n(the integration test currently dumps all html responses into the console, I'll see if I can fix that)  \nLet me know if you have any questions. Based on your feedback I can git squish it into one commit.\nThanks again.\n. From tests, I've experienced issues with responseType when reading files, Add-on SDK 1.14 doesn't support it. However it's fixed in the development version. \n. @pwnall Are you switching everything to OAuth2? Should I update this for the OAuth2 branch or something else?\n. @pwnall Hey! I'll rebase this, give me a few days. Thanks again.\n. Ok! Should be good to go, let me know.\n. Sadly I don't have time to update this. @tomasko126 see if you can use some parts of the PR for your project. \n. I saw your comment on my Firefox Add-on pull request, I'll see what I can do to add support for FFOS apps. \n. After doing some research I've discovered how Firefox OS currently does OAuth flows.\nFor example here in parameters.js, which is a part of the current Contacts app. The Contacts app has a way of syncing your Facebook contacts with Firefox OS.\nYou'll see that there are external redirect endpoints defined, which are basically landing pages.\nThough I did try to redirect to local resources, there are security policies that will not let you do that. So it seems like if the Contacts app could not do it, it might not be possible or secure enough.\nI got a nice dropbox-js flow working on Firefox OS using an external endpoint just like the Contacts app:\nmain.js (your app)\n``` javascript\nvar client = new Dropbox.Client({\n  key: \"KEY_HERE\",\n  sandbox: true\n});\nclient.authDriver(new Dropbox.Drivers.Popup({ \n  rememberUser: true, \n  receiverUrl: \"http://EXAMPLE.com/oauth_receiver.html\" \n}));\n```\noauth_receiver.html (hosted somewhere else)\n``` html\n<!DOCTYPE html>\n\n\n\n\n      Dropbox.Drivers.Popup.oauthReceiver();\n    \n\n\nDropbox sign-in successful\n<p>Please close this window.</p>\n\n\n\n```\nThis is not the best solution, but I'd personally follow the built-in apps and do things the same way.\nIf anyone can think of any other way to make this work let me know.\n. ...\n key: \"KEY_HERE\",\n...\npart is your encrypted dropbox app key.\nYou can read more about it here and easily generate it: https://github.com/dropbox/dropbox-js/blob/master/doc/getting_started.md#browser-and-open-source-applications\n. When you redirect to your external endpoint, dropbox also sends the tokens as part of the URL.\nThe Dropbox.Drivers.Popup.oauthReceiver(); code:\n```\nPopup.oauthReceiver = function() {\n      return window.addEventListener('load', function() {\n        var frameError, ieError, opener;\n    opener = window.opener;\n    if (window.parent !== window.top) {\n      opener || (opener = window.parent);\n    }\n    if (opener) {\n      try {\n        opener.postMessage(window.location.href, '*');\n      } catch (_error) {\n        ieError = _error;\n      }\n      try {\n        opener.Dropbox.Drivers.Popup.onMessage.dispatch(window.location.href);\n      } catch (_error) {\n        frameError = _error;\n      }\n    }\n    return window.close();\n  });\n};\n\n```\nThis code access your original window that opened the pop-up and sends it a message with window.location.href. That variable has the tokens and completes the auth flow. After that the credentials are stored using BrowserBase.prototype.storeCredentials I believe.\n. I've published my app example at FirefoxOS-Dropbox if anyone else will need it. \nTested in the Simulator and Firefox OS 1.0.1 hardware.\n. At http://bower.io/ under Registering packages\n. For the time being try adding the secret as part of the options. \nvar client = new Dropbox.Client({\n    key: \"your-key-here\",\n    secret: \"your-secret-here\"\n});\nThe key in the demo is encrypted. However I can't seem to find the app that encrypts the app keys anymore. @pwnall what's the link again or was that removed for a reason?  (not sure if it got removed from the docs by accident or not)\n. yeap that's the one. Hopefully this solved your issues!\n. Thank you for the quick response and feedback. Would you know off-hand why I have to re-approve the application every time? Which part of the library is responsible for this? Thanks again!\n. I updated the pull request with additional changes, now it is possible to build the library.\nThere a few issues with Node and Firefox add-on environments, because the library ships with support for both, I need to differentiate between the two. Currently I'm using if (typeof Buffer isnt \"function\") to check the env.\nThe other issue is the way require(...) works in Firefox add-ons, to workaround that issue, I need to update the existing require(...) calls.\nThe next step for me is to write tests for this...\n. Updated the request with a sample add-on\n. Just added tests. Based them on the Chrome Driver.\nQuick setup:\nYou need the Firefox Addon SDK environment.\nInstructions here: https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/installation.html\nDownload it, extract it. \nIn the terminal: run source bin/activate from the sdk folder.\nThen navigate to dropbox-js root, you can run cake firefox that runs the addon.\ncake firefoxtest runs the tests \n(the integration test currently dumps all html responses into the console, I'll see if I can fix that)  \nLet me know if you have any questions. Based on your feedback I can git squish it into one commit.\nThanks again.\n. From tests, I've experienced issues with responseType when reading files, Add-on SDK 1.14 doesn't support it. However it's fixed in the development version. \n. @pwnall Are you switching everything to OAuth2? Should I update this for the OAuth2 branch or something else?\n. @pwnall Hey! I'll rebase this, give me a few days. Thanks again.\n. Ok! Should be good to go, let me know.\n. Sadly I don't have time to update this. @tomasko126 see if you can use some parts of the PR for your project. \n. I saw your comment on my Firefox Add-on pull request, I'll see what I can do to add support for FFOS apps. \n. After doing some research I've discovered how Firefox OS currently does OAuth flows.\nFor example here in parameters.js, which is a part of the current Contacts app. The Contacts app has a way of syncing your Facebook contacts with Firefox OS.\nYou'll see that there are external redirect endpoints defined, which are basically landing pages.\nThough I did try to redirect to local resources, there are security policies that will not let you do that. So it seems like if the Contacts app could not do it, it might not be possible or secure enough.\nI got a nice dropbox-js flow working on Firefox OS using an external endpoint just like the Contacts app:\nmain.js (your app)\n``` javascript\nvar client = new Dropbox.Client({\n  key: \"KEY_HERE\",\n  sandbox: true\n});\nclient.authDriver(new Dropbox.Drivers.Popup({ \n  rememberUser: true, \n  receiverUrl: \"http://EXAMPLE.com/oauth_receiver.html\" \n}));\n```\noauth_receiver.html (hosted somewhere else)\n``` html\n<!DOCTYPE html>\n\n\n\n\n      Dropbox.Drivers.Popup.oauthReceiver();\n    \n\n\nDropbox sign-in successful\n<p>Please close this window.</p>\n\n\n\n```\nThis is not the best solution, but I'd personally follow the built-in apps and do things the same way.\nIf anyone can think of any other way to make this work let me know.\n. ...\n key: \"KEY_HERE\",\n...\npart is your encrypted dropbox app key.\nYou can read more about it here and easily generate it: https://github.com/dropbox/dropbox-js/blob/master/doc/getting_started.md#browser-and-open-source-applications\n. When you redirect to your external endpoint, dropbox also sends the tokens as part of the URL.\nThe Dropbox.Drivers.Popup.oauthReceiver(); code:\n```\nPopup.oauthReceiver = function() {\n      return window.addEventListener('load', function() {\n        var frameError, ieError, opener;\n    opener = window.opener;\n    if (window.parent !== window.top) {\n      opener || (opener = window.parent);\n    }\n    if (opener) {\n      try {\n        opener.postMessage(window.location.href, '*');\n      } catch (_error) {\n        ieError = _error;\n      }\n      try {\n        opener.Dropbox.Drivers.Popup.onMessage.dispatch(window.location.href);\n      } catch (_error) {\n        frameError = _error;\n      }\n    }\n    return window.close();\n  });\n};\n\n```\nThis code access your original window that opened the pop-up and sends it a message with window.location.href. That variable has the tokens and completes the auth flow. After that the credentials are stored using BrowserBase.prototype.storeCredentials I believe.\n. I've published my app example at FirefoxOS-Dropbox if anyone else will need it. \nTested in the Simulator and Firefox OS 1.0.1 hardware.\n. At http://bower.io/ under Registering packages\n. For the time being try adding the secret as part of the options. \nvar client = new Dropbox.Client({\n    key: \"your-key-here\",\n    secret: \"your-secret-here\"\n});\nThe key in the demo is encrypted. However I can't seem to find the app that encrypts the app keys anymore. @pwnall what's the link again or was that removed for a reason?  (not sure if it got removed from the docs by accident or not)\n. yeap that's the one. Hopefully this solved your issues!\n. ",
    "joshua-s": ":) Thank you @vladikoff.  This will help a lot.\n. Great, thank you :)\n. How would my app be able to get the key from the site?\n. Oh, I was meaning the uid and token.\nAnd thanks for helping :)\n. Great, thank you :)\nI was giving myself a migraine trying to figure out a way to extract the credentials from the url (even tried using a regExp :blush:).\n. Closing because this driver is not necessary.\n. :)\n. Sorry, it is very hard to troubleshoot the code with a minified version.  I will test with a different package, and submit a pull if I can figure out the issue :)\n. @pwnall the weird thing is that dropbox js works completely.  Nothing is broken, so this is just a minor, non-important issue :)  My app is at https://github.com/Codexa/Firetext if you want to take a look.\n. Ugh, sorry for being so uninformative.  I must be really out of it today...  You can view one of the newer commits at http://firetext.codexa.org/beta/.  It is not the latest, and we have not optimized it for desktop yet (focused on mobile), but it works, and the error should show up.\n. You will have to turn \"Send error stats\" off in the Settings panel.  It is accessed by going to the sidebar, and clicking the gear.  Then, reload the page.\nIt is necessary because our error handler will catch it otherwise :)\n. I guess we just didn't update it.  Does OAuth 2 work on a client-only app?\n. I will definitely test it again.  I probably should have tested more before filing this issue, sorry.\n. Okay, sounds good.  I am sorry that never responded...  Trying to get an SSL certificate installed on the server so that we can use OAuth2.\n. :) Thank you @vladikoff.  This will help a lot.\n. Great, thank you :)\n. How would my app be able to get the key from the site?\n. Oh, I was meaning the uid and token.\nAnd thanks for helping :)\n. Great, thank you :)\nI was giving myself a migraine trying to figure out a way to extract the credentials from the url (even tried using a regExp :blush:).\n. Closing because this driver is not necessary.\n. :)\n. Sorry, it is very hard to troubleshoot the code with a minified version.  I will test with a different package, and submit a pull if I can figure out the issue :)\n. @pwnall the weird thing is that dropbox js works completely.  Nothing is broken, so this is just a minor, non-important issue :)  My app is at https://github.com/Codexa/Firetext if you want to take a look.\n. Ugh, sorry for being so uninformative.  I must be really out of it today...  You can view one of the newer commits at http://firetext.codexa.org/beta/.  It is not the latest, and we have not optimized it for desktop yet (focused on mobile), but it works, and the error should show up.\n. You will have to turn \"Send error stats\" off in the Settings panel.  It is accessed by going to the sidebar, and clicking the gear.  Then, reload the page.\nIt is necessary because our error handler will catch it otherwise :)\n. I guess we just didn't update it.  Does OAuth 2 work on a client-only app?\n. I will definitely test it again.  I probably should have tested more before filing this issue, sorry.\n. Okay, sounds good.  I am sorry that never responded...  Trying to get an SSL certificate installed on the server so that we can use OAuth2.\n. ",
    "tomasko126": "Any progress on this pull request?\n. @baryon @350d I'd definitely recommend to set up a redirect URI, which redirects to a webpage (e.g. http://example.com/dropbox.html), instead of redirecting to a local extension file. That's the only way, how to resolve this problem AFAIK.\n. Any progress on this pull request?\n. @baryon @350d I'd definitely recommend to set up a redirect URI, which redirects to a webpage (e.g. http://example.com/dropbox.html), instead of redirecting to a local extension file. That's the only way, how to resolve this problem AFAIK.\n. ",
    "ayush-j": "Re: the spec link: The commit here only changes the urlEncode method used for encoding the paths in URL. It doesn't affect the encoding done for OAuth tokens and signature as far as I can tell.\nBut anyway, thanks! The Dropbox API response did seem odd to me. Looking forward to the fix. :)\n. Ah, I wasn't really familiar with OAuth spec and so didn't think the URL mattered there.\nAnyway, thanks for fixing it! Just did some tests and it works fine now.\n. Re: the spec link: The commit here only changes the urlEncode method used for encoding the paths in URL. It doesn't affect the encoding done for OAuth tokens and signature as far as I can tell.\nBut anyway, thanks! The Dropbox API response did seem odd to me. Looking forward to the fix. :)\n. Ah, I wasn't really familiar with OAuth spec and so didn't think the URL mattered there.\nAnyway, thanks for fixing it! Just did some tests and it works fine now.\n. ",
    "jfromaniello": ":crying_cat_face: sad! \n. :crying_cat_face: sad! \n. ",
    "karacas": "Yes, i used dropbox.js 0.9.2 (Downloaded from: //cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.9.2/dropbox.min.js)\nI'm using Adobe PhoneGap Build with a Cordova 2.7.0.\nno emulator, tested directly in the terminal: Android 4.0.4 (CM10)\nYour welcome, and thanks to you too!\n. Same problem building a app with Android SDK and phonegap 2.8.1\n. Tnxs! i try it\n. Yes, i used dropbox.js 0.9.2 (Downloaded from: //cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.9.2/dropbox.min.js)\nI'm using Adobe PhoneGap Build with a Cordova 2.7.0.\nno emulator, tested directly in the terminal: Android 4.0.4 (CM10)\nYour welcome, and thanks to you too!\n. Same problem building a app with Android SDK and phonegap 2.8.1\n. Tnxs! i try it\n. ",
    "beaspider": "Great. Thanks for the help. Yes the following works for me (in node.js)\n  var Dropbox = require(\"dropbox\");\n  var client = new Dropbox.Client({\n    key: \"APP KEY\",\n    secret: \"APP SECRET\"\n  });\n  client.setCredentials({\n    token: \"STORED TOKEN\",\n    tokenSecret: \"STORED TOKEN SECRET\"\n  });\n. Great. Thanks for the help. Yes the following works for me (in node.js)\n  var Dropbox = require(\"dropbox\");\n  var client = new Dropbox.Client({\n    key: \"APP KEY\",\n    secret: \"APP SECRET\"\n  });\n  client.setCredentials({\n    token: \"STORED TOKEN\",\n    tokenSecret: \"STORED TOKEN SECRET\"\n  });\n. ",
    "lucidtech": "Thanks for putting out an update.  super useful implementation - thank you.\n. OK - I have the exact same symptoms - but my error occurs because I want to read a file in chunks.\nWhen my call is\nclient.readFile(name, {arrayBuffer: true, length: 512, start: 0}, function(error, file, stat) {...\nI get 404 followed by the x domain error\nwhen I change the call to \nclient.readFile(name, {arrayBuffer: true}, function(error, file, stat) {...\nI get no errors\nGetting it in chunks and progress callbacks seem to be related.\nAs late as last week my code worked fine... no changes to the code - and now I get this error... perhaps db bug?\n. @Blumi for me happens in all browsers... maybe not related then...\n. Blumi - yep - I agree - its working today.  nothing changed at my end.  Must have been a db thing\n. Thanks for putting out an update.  super useful implementation - thank you.\n. OK - I have the exact same symptoms - but my error occurs because I want to read a file in chunks.\nWhen my call is\nclient.readFile(name, {arrayBuffer: true, length: 512, start: 0}, function(error, file, stat) {...\nI get 404 followed by the x domain error\nwhen I change the call to \nclient.readFile(name, {arrayBuffer: true}, function(error, file, stat) {...\nI get no errors\nGetting it in chunks and progress callbacks seem to be related.\nAs late as last week my code worked fine... no changes to the code - and now I get this error... perhaps db bug?\n. @Blumi for me happens in all browsers... maybe not related then...\n. Blumi - yep - I agree - its working today.  nothing changed at my end.  Must have been a db thing\n. ",
    "rapsli": "Ok. Too bad. I guess I'll have to implement the sync my-self.\n. Ok. Too bad. I guess I'll have to implement the sync my-self.\n. ",
    "lavelle": "I created a Bower shim for this repository. It's registered on Bower as dropbox-build, and contains both the full and minified files.\nI'm using it in my own project so I'm committed to keeping it up-to-date with this repo, but I can't find a way to get notified when there's a new version without subscribing to every issue in the project, so I might be a few days behind sometimes.\nHaving this repo on Bower doesn't seem particularly useful, but the Bower guys didn't want to remove it in case it's being used internally. Not sure who registered it, because Bower has anonymous package registration, but if no one's using it and you'd rather the dropbox name went to a build repo instead, then that's the thread to let them know.\nHopefully they'll get some sort of auth system running soon.\n. I'm encountering the same issue even when running 0.10.3.\nI'm testing it on the latest build of ChromiumOS from the source tree.\n. I'm developing an extension that interacts with the ChromeOS filesystem, which is not an API available on desktop Chrome unfortunately.\nYou can run ChromeOS on the desktop in its own window without any extra tools, just clone the Chromium repository, set an environment variable to tell it to build ChromeOS instead of Chrome (export GYP_DEFINES=\"chromeos=1\"), and then run the build tools.\nFull instructions:\nhttps://code.google.com/p/chromium/wiki/LinuxBuildInstructions\nhttp://dev.chromium.org/developers/how-tos/build-instructions-chromeos\n. I managed to fix the issue temporarily using the same method as @rlmcneary2 though, just pasting it in to the BrowserBase.localStorage definition.\n. I created a Bower shim for this repository. It's registered on Bower as dropbox-build, and contains both the full and minified files.\nI'm using it in my own project so I'm committed to keeping it up-to-date with this repo, but I can't find a way to get notified when there's a new version without subscribing to every issue in the project, so I might be a few days behind sometimes.\nHaving this repo on Bower doesn't seem particularly useful, but the Bower guys didn't want to remove it in case it's being used internally. Not sure who registered it, because Bower has anonymous package registration, but if no one's using it and you'd rather the dropbox name went to a build repo instead, then that's the thread to let them know.\nHopefully they'll get some sort of auth system running soon.\n. I'm encountering the same issue even when running 0.10.3.\nI'm testing it on the latest build of ChromiumOS from the source tree.\n. I'm developing an extension that interacts with the ChromeOS filesystem, which is not an API available on desktop Chrome unfortunately.\nYou can run ChromeOS on the desktop in its own window without any extra tools, just clone the Chromium repository, set an environment variable to tell it to build ChromeOS instead of Chrome (export GYP_DEFINES=\"chromeos=1\"), and then run the build tools.\nFull instructions:\nhttps://code.google.com/p/chromium/wiki/LinuxBuildInstructions\nhttp://dev.chromium.org/developers/how-tos/build-instructions-chromeos\n. I managed to fix the issue temporarily using the same method as @rlmcneary2 though, just pasting it in to the BrowserBase.localStorage definition.\n. ",
    "codeclown": "Great job, @lavelle!\nIt would be awesome though if this repo was usable via Bower.\n. I don't know about node, but I got here because of the promise issue.\nIs there a way to use promises with this library? I need promises to \"resolve\" things in Angular before loading a controller. I'm going to try using something like Q or Promise.js for now, though.\n. Great job, @lavelle!\nIt would be awesome though if this repo was usable via Bower.\n. I don't know about node, but I got here because of the promise issue.\nIs there a way to use promises with this library? I need promises to \"resolve\" things in Angular before loading a controller. I'm going to try using something like Q or Promise.js for now, though.\n. ",
    "blackjk3": "@paglias how are you getting the redirect_uri to work with http protocol?  On the app console page it doesn't let me type in an http url, they only allow https or file.\n. haha! true story.  Thanks, I was setting my app in the hosts file to url.local.  Thanks!\n. @paglias how are you getting the redirect_uri to work with http protocol?  On the app console page it doesn't let me type in an http url, they only allow https or file.\n. haha! true story.  Thanks, I was setting my app in the hosts file to url.local.  Thanks!\n. ",
    "baryon": "see \n   Client.prototype.handleXhrError\nmethod, it trigger a error event, then callback \nso I think a listener don't block callback function\n. Thanks. \n. see \n   Client.prototype.handleXhrError\nmethod, it trigger a error event, then callback \nso I think a listener don't block callback function\n. Thanks. \n. ",
    "ssetem": "Thanks, \nI used this one https://dl-web.dropbox.com/spa/pjlfdak1tmznswp/api_keys.js/public/index.html\nnot sure if its the one you were referring to.\nThanks again for the reply\n. Thanks, \nI used this one https://dl-web.dropbox.com/spa/pjlfdak1tmznswp/api_keys.js/public/index.html\nnot sure if its the one you were referring to.\nThanks again for the reply\n. ",
    "vincentlaucy": "This article provides some insights on xhr/streaming\n. @pwnall Thanks for quick response!\nThat's great, I missed the details of the XHR Stream API.\nAgree that keeping XHR & provide stream option will keep the code much maintainable. \nSince node.xhr2 is an emulation, it would be nice to use native Node's stream api inside it for stream option.\nTherefore I believe more effort will be aligning stream option in browsers / nodejs , check for cross-browser compatibility etc. Thanks for the work!\nCurrently for me I use this very naive implementation with request which works for the project. Looking forward to streaming in nodejs & browsers!\n```\n    var authHeader = \"Bearer \" + token.token;\n    var options = {\n        url: 'https://api-content.dropbox.com/1/files/dropbox/' + path,\n        headers: {\n            \"Authorization\": authHeader\n        }\n    };\n       request.get(options).pipe(someOtherStream);\n```\n. This article provides some insights on xhr/streaming\n. @pwnall Thanks for quick response!\nThat's great, I missed the details of the XHR Stream API.\nAgree that keeping XHR & provide stream option will keep the code much maintainable. \nSince node.xhr2 is an emulation, it would be nice to use native Node's stream api inside it for stream option.\nTherefore I believe more effort will be aligning stream option in browsers / nodejs , check for cross-browser compatibility etc. Thanks for the work!\nCurrently for me I use this very naive implementation with request which works for the project. Looking forward to streaming in nodejs & browsers!\n```\n    var authHeader = \"Bearer \" + token.token;\n    var options = {\n        url: 'https://api-content.dropbox.com/1/files/dropbox/' + path,\n        headers: {\n            \"Authorization\": authHeader\n        }\n    };\n       request.get(options).pipe(someOtherStream);\n```\n. ",
    "zhuangh": "Looking forward to the streaming in dropbox js too.\n. Looking forward to the streaming in dropbox js too.\n. ",
    "lachezar": "I can confirm also that the sample app works fine with 0.9.0 (tested with 58394e46dd14a10bd25f443f84379ef17abb3a69).\n. I checked out the version from master and the previous problems seem to be solved, but now I receive error response 400 from dropbox, which probably is their fault.\n\n. @pwnall the problem was that I was still using the default app key in the checkbox.coffee (ol56zaikdq4kxjx). \nOnce I created an app in my dropbox account and set the key in checkbox.coffee everything worked well.\nThanks for the help and for the awesome project :)\n. I can confirm also that the sample app works fine with 0.9.0 (tested with 58394e46dd14a10bd25f443f84379ef17abb3a69).\n. I checked out the version from master and the previous problems seem to be solved, but now I receive error response 400 from dropbox, which probably is their fault.\n\n. @pwnall the problem was that I was still using the default app key in the checkbox.coffee (ol56zaikdq4kxjx). \nOnce I created an app in my dropbox account and set the key in checkbox.coffee everything worked well.\nThanks for the help and for the awesome project :)\n. ",
    "ramRkanna": "Hi ,\nI have created key with app console after that I m trying like following.\nvar client = new Dropbox.Client({ key: \"key\" });\n    client.authenticate({ interactive: false }, function (error) {\n        if (error) {\n            alert('Authentication error: ' + error);\n        }\n    });\n    alert(client.isAuthenticated());\n    if (client.isAuthenticated()) {\n        client.authenticate();\n        // Client is authenticated. Display UI.\n    }\ni have added alert there it is displaying 'false'.Please let me know why it not authenticated and how to configure in app console.\nWhat have to give for OAuth redirect URIs -- \nThanks in advance.\n. I am following the same documentation \n. Thanks @pwnall it is working for me.\n. ArrayBuffer is support for android version 4.0 only Array Buffer. so i think using ArrayBuffer is not possible.\n. Hi ,\nI have created key with app console after that I m trying like following.\nvar client = new Dropbox.Client({ key: \"key\" });\n    client.authenticate({ interactive: false }, function (error) {\n        if (error) {\n            alert('Authentication error: ' + error);\n        }\n    });\n    alert(client.isAuthenticated());\n    if (client.isAuthenticated()) {\n        client.authenticate();\n        // Client is authenticated. Display UI.\n    }\ni have added alert there it is displaying 'false'.Please let me know why it not authenticated and how to configure in app console.\nWhat have to give for OAuth redirect URIs -- \nThanks in advance.\n. I am following the same documentation \n. Thanks @pwnall it is working for me.\n. ArrayBuffer is support for android version 4.0 only Array Buffer. so i think using ArrayBuffer is not possible.\n. ",
    "Blumi": "@pwnall no luck. It worked this way in dropbox-js 0.9.2, btw. I updated recently to 0.10.0 because of OAuth2 and everything works - instead of the progress listener.\n. oops, sorry for accidentally hitting \"Close\"\n. @lucidtech @pwnall Same. I left work on friday last week with working code using dropbox-js 0.9.2. Monday morning: headaches before I even had coffee. :( Saw that 0.10.0 is out, this fixed most other problems but the XHR progress is still open. Strange that it works with other browsers than Chrome, though.\n. @pwnall It's a rather large project that I'm working on. I'll try to strip it down next week and send you the project.\n. @pwnall Apparently, this has been fixed at Dropbox, as the same code is now working!\nIf anyone is in need of an example for an upload-progress, drop me a line, I just prepared a small showcase.\n. Also, the app icon seems a bit off?!\n\n. Thanks guyz.\n. @pwnall Any news on the issue with the \"Creating new folder\"-message?\n. Has the URL been added to the permitted URL list in the Dropbox app console?\n. well there are some side effects in my project which don't show up when I'm not using pollForChanges but I haven't tracked them down yet.\nthanks @pwnall \n. @pwnall no luck. It worked this way in dropbox-js 0.9.2, btw. I updated recently to 0.10.0 because of OAuth2 and everything works - instead of the progress listener.\n. oops, sorry for accidentally hitting \"Close\"\n. @lucidtech @pwnall Same. I left work on friday last week with working code using dropbox-js 0.9.2. Monday morning: headaches before I even had coffee. :( Saw that 0.10.0 is out, this fixed most other problems but the XHR progress is still open. Strange that it works with other browsers than Chrome, though.\n. @pwnall It's a rather large project that I'm working on. I'll try to strip it down next week and send you the project.\n. @pwnall Apparently, this has been fixed at Dropbox, as the same code is now working!\nIf anyone is in need of an example for an upload-progress, drop me a line, I just prepared a small showcase.\n. Also, the app icon seems a bit off?!\n\n. Thanks guyz.\n. @pwnall Any news on the issue with the \"Creating new folder\"-message?\n. Has the URL been added to the permitted URL list in the Dropbox app console?\n. well there are some side effects in my project which don't show up when I'm not using pollForChanges but I haven't tracked them down yet.\nthanks @pwnall \n. ",
    "auramo": "Thanks! I'll try to test that version soon.\n. @pwnall I tried the build you suggested. This is what I do:\nvar client = new Dropbox.Client({ key: \"<my key>\", secret: \"<my secret>\"} );\nclient.authenticate(function(error, client) {\n...\nAnd I get a Dropbox error page which has the image of a box with a patch. The error message on the page is:\nError (400)\nIt seems the app you were using submitted a bad request. If you would like to report this error to the app's developer, include the information below.\nMore details for developers\nMissing \"redirect_uri\" (required when \"response_type\" is \"token\")\nI think I'll try the embedded WebView approach next...\n. Hi!\nI now get the login screen instead of an error page for the first time. Apparently there's now something that fills this as the redirect_url in the version you posted: https://www.dropbox.com/1/oauth2/redirect_receiver. After login I see a blank page unlike on a desktop browser which returns me to the original page. I quess I'm on the redirect_receiver-page (link above) after login? Should I still use an embedded webview for the login to get around that?\nAnyway, there's progress and now it's probably easier to make it working than before\nThanks! \n. Cordova 3.0.1\n. Hi!\nLooks like I got it working. The secret was to add the InAppBrowser -plugin to the cordova project with this command:\ncordova plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-inappbrowser.git\nNow I'm able to get back to my Cordova application and the temporary login browser window closes.\n. I think it's related to using an external browser instead of the Cordova \"baked in\" view in which the HTML/JS app is running. So if you don't have this plugin, it'll just surf the Cordova app's browser view to the login page instead of opening a new browser window. Then you can't really close that and there is a problem. Something to do with privileges also I guess.\n. Thanks! I'll try to test that version soon.\n. @pwnall I tried the build you suggested. This is what I do:\nvar client = new Dropbox.Client({ key: \"<my key>\", secret: \"<my secret>\"} );\nclient.authenticate(function(error, client) {\n...\nAnd I get a Dropbox error page which has the image of a box with a patch. The error message on the page is:\nError (400)\nIt seems the app you were using submitted a bad request. If you would like to report this error to the app's developer, include the information below.\nMore details for developers\nMissing \"redirect_uri\" (required when \"response_type\" is \"token\")\nI think I'll try the embedded WebView approach next...\n. Hi!\nI now get the login screen instead of an error page for the first time. Apparently there's now something that fills this as the redirect_url in the version you posted: https://www.dropbox.com/1/oauth2/redirect_receiver. After login I see a blank page unlike on a desktop browser which returns me to the original page. I quess I'm on the redirect_receiver-page (link above) after login? Should I still use an embedded webview for the login to get around that?\nAnyway, there's progress and now it's probably easier to make it working than before\nThanks! \n. Cordova 3.0.1\n. Hi!\nLooks like I got it working. The secret was to add the InAppBrowser -plugin to the cordova project with this command:\ncordova plugin add https://git-wip-us.apache.org/repos/asf/cordova-plugin-inappbrowser.git\nNow I'm able to get back to my Cordova application and the temporary login browser window closes.\n. I think it's related to using an external browser instead of the Cordova \"baked in\" view in which the HTML/JS app is running. So if you don't have this plugin, it'll just surf the Cordova app's browser view to the login page instead of opening a new browser window. Then you can't really close that and there is a problem. Something to do with privileges also I guess.\n. ",
    "ginaluca": "Thanks @auramo, I was stuck at the same step and that piece of magic made the authentication finally work. \nNo idea why it is needed or how you found it out, though... :)\n. Thanks @auramo, I was stuck at the same step and that piece of magic made the authentication finally work. \nNo idea why it is needed or how you found it out, though... :)\n. ",
    "JZL": "I knew to be a simple solution. Thanks so much(was that in the documentation)\nJonah\nOn Tue, Aug 13, 2013 at 5:06 AM, Victor Costan notifications@github.com\nwrote:\n\nHi, @JZL003!\nClient#readdir returns entry names relative to the path that you give it, just like fs.readdir in node.js. When you pass the paths to makeUrl, they have to be absolute. Try client.makeUrl(\"/music\" + \"/\" + entries[z], on line 8 of your sample code.\nDoes this work for you?\nReply to this email directly or view it on GitHub:\nhttps://github.com/dropbox/dropbox-js/issues/111#issuecomment-22551919\n. I knew to be a simple solution. Thanks so much(was that in the documentation)\nJonah\n\nOn Tue, Aug 13, 2013 at 5:06 AM, Victor Costan notifications@github.com\nwrote:\n\nHi, @JZL003!\nClient#readdir returns entry names relative to the path that you give it, just like fs.readdir in node.js. When you pass the paths to makeUrl, they have to be absolute. Try client.makeUrl(\"/music\" + \"/\" + entries[z], on line 8 of your sample code.\nDoes this work for you?\nReply to this email directly or view it on GitHub:\nhttps://github.com/dropbox/dropbox-js/issues/111#issuecomment-22551919\n. \n",
    "brandonwamboldt": "Since I didn't find your comment particularly helpful, especially since I'm not that familiar with CoffeeScript, I thought a vanilla JS example may be useful to some people:\n``` javascript\nfs.open('/tmp/my_big_file.tar.gz', 'r', function (err, fd) {\n  var stats     = fs.fstatSync(fd);\n  var chunkSize = 1024 * 1024; // 1 MB\n  var chunks    = Math.ceil(stats.size / (1024 * 1024));\n  var chunk     = 0;\nfunction next (err, cursor) {\n    if (chunk < chunks) {\n      var buffer = new Buffer(Math.min(stats.size, chunkSize));\n      var length = Math.min(stats.size - (chunk * chunkSize), chunkSize);\n      var offset = chunk * chunkSize;\n      chunk++;\n  fs.readSync(fd, buffer, 0, length, offset);\n  client.resumableUploadStep(buffer, cursor, next);\n} else {\n  client.resumableUploadFinish(remoteFile, cursor, callback);\n}\n\n}\nnext(null, false);\n});\n```\n. Since I didn't find your comment particularly helpful, especially since I'm not that familiar with CoffeeScript, I thought a vanilla JS example may be useful to some people:\n``` javascript\nfs.open('/tmp/my_big_file.tar.gz', 'r', function (err, fd) {\n  var stats     = fs.fstatSync(fd);\n  var chunkSize = 1024 * 1024; // 1 MB\n  var chunks    = Math.ceil(stats.size / (1024 * 1024));\n  var chunk     = 0;\nfunction next (err, cursor) {\n    if (chunk < chunks) {\n      var buffer = new Buffer(Math.min(stats.size, chunkSize));\n      var length = Math.min(stats.size - (chunk * chunkSize), chunkSize);\n      var offset = chunk * chunkSize;\n      chunk++;\n  fs.readSync(fd, buffer, 0, length, offset);\n  client.resumableUploadStep(buffer, cursor, next);\n} else {\n  client.resumableUploadFinish(remoteFile, cursor, callback);\n}\n\n}\nnext(null, false);\n});\n```\n. ",
    "tindoantrong": "I want to upload directly a large file (2GB) from client to dropbox via JS API.\nHow can I do that?\nI tried to used Dropbox.filesUpload, but it has problem with error ERR_CONNECTION_RESET.\nDo you have any solution?\nThank you. I want to upload directly a large file (2GB) from client to dropbox via JS API.\nHow can I do that?\nI tried to used Dropbox.filesUpload, but it has problem with error ERR_CONNECTION_RESET.\nDo you have any solution?\nThank you. ",
    "greg-db": "@tindoantrong This SDK is deprecated, and uses the deprecated Dropbox API v1.\nWe recommend instead using the Dropbox API v2 JavaScript SDK. That has a basic uploading example. For larger files though, you should use upload sessions.. @TomasKulhanek It looks like you're referring to the newer Dropbox API v2 dropbox-sdk-js. That is the library you should use, and the error you mentioned is a known issue open for that library. Please subscribe to that issue for updates.\nThis issue that you posted in is for the older, dropbox-js for the deprecated Dropbox API v1.. @saularis You're using the old dropbox-js library, which uses the retired API v1. This library is no longer supported, and API calls made using it won't work anyway, since the API is retired.\nPlease use the new dropbox-sdk-js library instead, which uses API v2.. @tindoantrong This SDK is deprecated, and uses the deprecated Dropbox API v1.\nWe recommend instead using the Dropbox API v2 JavaScript SDK. That has a basic uploading example. For larger files though, you should use upload sessions.. @TomasKulhanek It looks like you're referring to the newer Dropbox API v2 dropbox-sdk-js. That is the library you should use, and the error you mentioned is a known issue open for that library. Please subscribe to that issue for updates.\nThis issue that you posted in is for the older, dropbox-js for the deprecated Dropbox API v1.. @saularis You're using the old dropbox-js library, which uses the retired API v1. This library is no longer supported, and API calls made using it won't work anyway, since the API is retired.\nPlease use the new dropbox-sdk-js library instead, which uses API v2.. ",
    "varenc": "Hey @Blumi!\nYou don't have to go very far to look for the right people.   :-)\nThe app icon is intentionally supposed to overlay the border like that.  I agree though that this looks a bit off in your case because it doesn't line up with your words.  If you use a graphic icon, it looks better.  Or perhaps you can add some padding to the bottom of your app icon image?  I understand this isn't ideal though and I can see that this will cause problems for others folks as well so I'm going to pass this feedback on to the rest of the team.\n. This should be getting fixed up soon!\nOn Tuesday, October 8, 2013, Bastian Blumentritt wrote:\n\n@pwnall https://github.com/pwnall Any news on the issue with the\n\"Creating new folder\"-message?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/114#issuecomment-25873321\n.\n\n\nSent from mobile device\n. As smarx says, trying using the saver with Data URIs now. :-)\ndropins.js and dropbox.js should play nicely no matter the order they're loaded in! (We extend the Dropbox object if it already exists). But I'd be safe and still follow victor's advice.\nThe app key you use with dropbox.js should also works with the dropins, so you only need one. The Saver/Chooser don't require any sort of production approval.\n. that sounds reasonable too, though it'd be a bit strange if this is the\nonly method on the client that has this flexibility (is it?).  I'll defer\nto victor!\nOn Tue, Oct 21, 2014 at 7:31 PM, Steve Marx notifications@github.com\nwrote:\n\nIt should just keep falling back, right? Maybe something like this, though\nI haven't thought through all the cases yet. :-)\nif (not callback) and (typeof options is 'function')\n  callback = options\n  options = nullif (not callback) and (typeof cursor is 'function')\n  callback = cursor\n  cursor = null\nThis should allow devs to do pullChanges(cursor, callback) or\npullChanges(callback) or pullChanges(cursor, options, callback), but\nthey'd have to do pullChanges(null, options, callback). (I imagine we\ncould solve the need for a null there by checking the type of the first\nparameter.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/pull/201#issuecomment-60028504.\n. It looks like there's a bug in the UI for adding domains.  If you add one it doesn't appear, but if you refresh the page it should be there.  We'll try to get this fix ASAP.\n\nI'm still closing this issue since it doesn't relate to the dropbox-js SDK. :-)\n. hey there!\nlooks like a \"?\" was getting appended to the redirect_uri param on the OAuth page for some reason.  You were getting a 400 since it was an unrecognized redirect_uri.  The friendly error that explains this was hidden since that app is out of development mode. \nI updated the app to include this, though I'm still not exactly sure why the \"?\" is getting appended in the first place.  Works for now at least! :-)\n. Hey @Blumi!\nYou don't have to go very far to look for the right people.   :-)\nThe app icon is intentionally supposed to overlay the border like that.  I agree though that this looks a bit off in your case because it doesn't line up with your words.  If you use a graphic icon, it looks better.  Or perhaps you can add some padding to the bottom of your app icon image?  I understand this isn't ideal though and I can see that this will cause problems for others folks as well so I'm going to pass this feedback on to the rest of the team.\n. This should be getting fixed up soon!\nOn Tuesday, October 8, 2013, Bastian Blumentritt wrote:\n\n@pwnall https://github.com/pwnall Any news on the issue with the\n\"Creating new folder\"-message?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/issues/114#issuecomment-25873321\n.\n\n\nSent from mobile device\n. As smarx says, trying using the saver with Data URIs now. :-)\ndropins.js and dropbox.js should play nicely no matter the order they're loaded in! (We extend the Dropbox object if it already exists). But I'd be safe and still follow victor's advice.\nThe app key you use with dropbox.js should also works with the dropins, so you only need one. The Saver/Chooser don't require any sort of production approval.\n. that sounds reasonable too, though it'd be a bit strange if this is the\nonly method on the client that has this flexibility (is it?).  I'll defer\nto victor!\nOn Tue, Oct 21, 2014 at 7:31 PM, Steve Marx notifications@github.com\nwrote:\n\nIt should just keep falling back, right? Maybe something like this, though\nI haven't thought through all the cases yet. :-)\nif (not callback) and (typeof options is 'function')\n  callback = options\n  options = nullif (not callback) and (typeof cursor is 'function')\n  callback = cursor\n  cursor = null\nThis should allow devs to do pullChanges(cursor, callback) or\npullChanges(callback) or pullChanges(cursor, options, callback), but\nthey'd have to do pullChanges(null, options, callback). (I imagine we\ncould solve the need for a null there by checking the type of the first\nparameter.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/pull/201#issuecomment-60028504.\n. It looks like there's a bug in the UI for adding domains.  If you add one it doesn't appear, but if you refresh the page it should be there.  We'll try to get this fix ASAP.\n\nI'm still closing this issue since it doesn't relate to the dropbox-js SDK. :-)\n. hey there!\nlooks like a \"?\" was getting appended to the redirect_uri param on the OAuth page for some reason.  You were getting a 400 since it was an unrecognized redirect_uri.  The friendly error that explains this was hidden since that app is out of development mode. \nI updated the app to include this, though I'm still not exactly sure why the \"?\" is getting appended in the first place.  Works for now at least! :-)\n. ",
    "zefhemel": "Turned out I didn't have the \"identity\" permission on.\n. That works great, thanks. You may also want to include in the docs which oAuth callback URLs to add in the dashboard , since that's not very obvious (unless you read the source code).\n. @anthonyromano I also use it in a modern packaged app and I don't see that behavior. Just one window for me.\n. Turned out I didn't have the \"identity\" permission on.\n. That works great, thanks. You may also want to include in the docs which oAuth callback URLs to add in the dashboard , since that's not very obvious (unless you read the source code).\n. @anthonyromano I also use it in a modern packaged app and I don't see that behavior. Just one window for me.\n. ",
    "anthonyromano": "zefhemel, would you mind sharing that URL as I'm just about to start using this library with a modern Chrome packaged app and would prefer not to have to search the code for it :)\n. @pwnall I seem to be experiencing a separate but related issue....I added the identity API, I added the URL into dropbox. I'm using the build you posted above ^^^\nI'm trying out an app where the dropbox API call works fine outside of a Chrome Packaged App. I made no changes to my dropbox JS code to authenticate (the documentation implied I didn't have to) Here is the error:\nidentity.launchWebAuthFlow: Authorization page could not be loaded.\n    at ChromeApp.Dropbox.AuthDriver.ChromeApp.ChromeApp.doAuthorize (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:712:30)\n    at _fsmStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1123:34)\n    at ChromeApp.Dropbox.AuthDriver.ChromeBase.ChromeBase.onAuthStepChange (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:669:18)\n    at _fsmStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1093:27)\n    at _fsmNextStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1079:16)\n    at _fsmStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1114:20)\n    at chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:660:20 \n. Actually, I had used the dev ID, the issue was silly. I forgot to add a \"/\" at the end of the URL. It looks like the actual redirect URL was https://your-extension-id.chromiumapp.org/   and dropbox was picky enough to require the trailing slash. \nAll is well now :)\n. Understood completely. My iOS app already extensively uses Dropbox so I'm excited about the prospects of a desktop app via Chrome apps and this library! Thanks for all your hard work!\n. @zefhemel not a problem with the library, was a problem with me :) \n. zefhemel, would you mind sharing that URL as I'm just about to start using this library with a modern Chrome packaged app and would prefer not to have to search the code for it :)\n. @pwnall I seem to be experiencing a separate but related issue....I added the identity API, I added the URL into dropbox. I'm using the build you posted above ^^^\nI'm trying out an app where the dropbox API call works fine outside of a Chrome Packaged App. I made no changes to my dropbox JS code to authenticate (the documentation implied I didn't have to) Here is the error:\nidentity.launchWebAuthFlow: Authorization page could not be loaded.\n    at ChromeApp.Dropbox.AuthDriver.ChromeApp.ChromeApp.doAuthorize (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:712:30)\n    at _fsmStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1123:34)\n    at ChromeApp.Dropbox.AuthDriver.ChromeBase.ChromeBase.onAuthStepChange (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:669:18)\n    at _fsmStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1093:27)\n    at _fsmNextStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1079:16)\n    at _fsmStep (chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:1114:20)\n    at chrome-extension://ainnkhlclgfbkkegfmenjhcognnlllkl/dropbox.js:660:20 \n. Actually, I had used the dev ID, the issue was silly. I forgot to add a \"/\" at the end of the URL. It looks like the actual redirect URL was https://your-extension-id.chromiumapp.org/   and dropbox was picky enough to require the trailing slash. \nAll is well now :)\n. Understood completely. My iOS app already extensively uses Dropbox so I'm excited about the prospects of a desktop app via Chrome apps and this library! Thanks for all your hard work!\n. @zefhemel not a problem with the library, was a problem with me :) \n. ",
    "pmarinov": "Hello, I apologize for posting in this forum but it is the only place I found where I can post about this Google Chrome 'identity' problem.\nI'm writing a legacy packaged app (extension that works in a tab). I used the suggested version of dropbox.js (bugs/116/dropbox.js) and it WORKS well, I authenticated via:\ndropBoxClient.authDriver(new Dropbox.AuthDriver.ChromeBase(...))\nNow, my problem:\nI'm trying to use the Datastore API and when I switch to using \"dropbox-datastores-1.0-latest.js\" I get the complaint that AuthDriver.ChromeBase() is undefined. If I use AuthDriver.Chrome() I get to the same 'identity' problem.\nPlease help me.\n. Hello, I apologize for posting in this forum but it is the only place I found where I can post about this Google Chrome 'identity' problem.\nI'm writing a legacy packaged app (extension that works in a tab). I used the suggested version of dropbox.js (bugs/116/dropbox.js) and it WORKS well, I authenticated via:\ndropBoxClient.authDriver(new Dropbox.AuthDriver.ChromeBase(...))\nNow, my problem:\nI'm trying to use the Datastore API and when I switch to using \"dropbox-datastores-1.0-latest.js\" I get the complaint that AuthDriver.ChromeBase() is undefined. If I use AuthDriver.Chrome() I get to the same 'identity' problem.\nPlease help me.\n. ",
    "kyleholzinger": "@pwnall I have a question about your answer where you mentioned that you have to use chrome.runtime.id in the redirect uri. So on my chrome app, it looks like it's authorizing everything fine, but I still get the error identity.launchWebAuthFlow: Authorization page could not be loaded.. The weird part is that if I go to the URL manually that I'm getting redirected to, it's definitely the right url (i.e. it's in the form http://<app id>.chromiumapp.org. Any idea why? I think it's a permissioning error in the manifest or something,  but I'm having trouble finding how to actually fix it\n. Wow alright, turns out the chrome API is super strict and it has to have the https protocol in the return uri otherwise it'll just throw this error...\n. @pwnall I have a question about your answer where you mentioned that you have to use chrome.runtime.id in the redirect uri. So on my chrome app, it looks like it's authorizing everything fine, but I still get the error identity.launchWebAuthFlow: Authorization page could not be loaded.. The weird part is that if I go to the URL manually that I'm getting redirected to, it's definitely the right url (i.e. it's in the form http://<app id>.chromiumapp.org. Any idea why? I think it's a permissioning error in the manifest or something,  but I'm having trouble finding how to actually fix it\n. Wow alright, turns out the chrome API is super strict and it has to have the https protocol in the return uri otherwise it'll just throw this error...\n. ",
    "tj": "my bad it's Dropbox.Client\n. awesome! token: is what I was looking for thanks!\n. oh weird that's fine now, not sure what I clicked before, it was just blank\n. it's all good! pretty painless so far, looking forward to building this thing\n. cool! np\n. ohh I see ok I didn't look close enough at what the value was there, hmmmm. The only tricky part is that you end up writing stuff like this to grab the second arg:\njs\nreturn (yield client.stat('/' + domain + '/' + dir, opts))[1];\ninstead of:\njs\nreturn yield client.stat('/' + domain + '/' + dir, opts);\nbut that's not a huge deal I'll just wrap the calls to grab the details, you're right I think it does make the most sense to match node there\n. not sure if that's really what I need, since I was going to display them publicly it's probably not a great idea to add that I guess haha, can you get at dropbox thumbs without auth? or do people usually just copy them to their own store\n. ah! thanks\n. hmm but that doesn't work for thumbs right? just the original file?\n. ok cool. I'll probably just fetch the originals for now\n. sounds good thanks man\n. any luck with the change? can't do anything with this project until then (otherwise I might as well just add s3 uploading for users instead of using dropbox haha)\n. my bad it's Dropbox.Client\n. awesome! token: is what I was looking for thanks!\n. oh weird that's fine now, not sure what I clicked before, it was just blank\n. it's all good! pretty painless so far, looking forward to building this thing\n. cool! np\n. ohh I see ok I didn't look close enough at what the value was there, hmmmm. The only tricky part is that you end up writing stuff like this to grab the second arg:\njs\nreturn (yield client.stat('/' + domain + '/' + dir, opts))[1];\ninstead of:\njs\nreturn yield client.stat('/' + domain + '/' + dir, opts);\nbut that's not a huge deal I'll just wrap the calls to grab the details, you're right I think it does make the most sense to match node there\n. not sure if that's really what I need, since I was going to display them publicly it's probably not a great idea to add that I guess haha, can you get at dropbox thumbs without auth? or do people usually just copy them to their own store\n. ah! thanks\n. hmm but that doesn't work for thumbs right? just the original file?\n. ok cool. I'll probably just fetch the originals for now\n. sounds good thanks man\n. any luck with the change? can't do anything with this project until then (otherwise I might as well just add s3 uploading for users instead of using dropbox haha)\n. ",
    "ohler": "Great, thank you!  Seems to work on Mountain Lion as well.\n. Great, thank you!  Seems to work on Mountain Lion as well.\n. ",
    "mtahirtariq": "@pwnall yes i figured it out! i did not allowed any development users to connect to my application in app settings and i was trying to connect to it from another dropbox account and was getting a 403 error.\n. here is the link to gist https://gist.github.com/scorpiontahir02/7154250\nand here is the link to stack trace https://gist.github.com/scorpiontahir02/7154321\ni was using firebug and didn't know how to copy stack trace so just copy pasted it.\n. @pwnall yes i figured it out! i did not allowed any development users to connect to my application in app settings and i was trying to connect to it from another dropbox account and was getting a 403 error.\n. here is the link to gist https://gist.github.com/scorpiontahir02/7154250\nand here is the link to stack trace https://gist.github.com/scorpiontahir02/7154321\ni was using firebug and didn't know how to copy stack trace so just copy pasted it.\n. ",
    "Ajnasz": "Hi Victor!\nThanks for you reply.\nBasically I want to do the same what is in the example. Show the URL for the user in the terminal what she has to open, then she will need to paste the code back. After that I would save the token, so I can use it later in a cron script.\nIn that script I would download a file every day and I would generate an email from it.\nThanks!\n. Hi Victor!\nThanks for you reply.\nBasically I want to do the same what is in the example. Show the URL for the user in the terminal what she has to open, then she will need to paste the code back. After that I would save the token, so I can use it later in a cron script.\nIn that script I would download a file every day and I would generate an email from it.\nThanks!\n. ",
    "Debasmita-Sahu": "Thanks for your quick reply. My me.folder contains a constant string value like 'abc'  and me.filename contains the name of the file trying to upload, and as per your suggestion am passing file instance to writeFile but still getting the same error .. :( \nAnd its giving error in safari too like this (TypeError: '[object BlobConstructor]' is not a constructor (evaluating 'new Blob([r],{type:r.type})')'.)\nHere is what I did.\n```\n      $(\"body\").on(\"change\",'#files', function(event) {\n        var client = me.client;\n        me.folder = 'abc';\n        var files = event.target.files;\n        me.filename = event.target.value;\n        me.fileType = files[0].type;\n\n\n        client.writeFile('/'+me.folder+'/'+me.filename, files[0], function(error, stat) {\n            if (error) {\n                console.log(error);\n                return showError(error);  // Something went wrong.\n            }\n            else{\n                console.log('file saved.');\n\n                });\n\n            }\n        });\n\n} \n```\n. Hi pwnall,\nI resolved this IE issue but safri issue is still there with this above code, now am passing \"File\" instances to writeFile directly, am using windows safari 5.7.1. Please help me .\nSafari Error is -\n(TypeError: '[object BlobConstructor]' is not a constructor (evaluating 'new Blob([r],{type:r.type})')'.)\n. Thanks for your quick reply. My me.folder contains a constant string value like 'abc'  and me.filename contains the name of the file trying to upload, and as per your suggestion am passing file instance to writeFile but still getting the same error .. :( \nAnd its giving error in safari too like this (TypeError: '[object BlobConstructor]' is not a constructor (evaluating 'new Blob([r],{type:r.type})')'.)\nHere is what I did.\n```\n      $(\"body\").on(\"change\",'#files', function(event) {\n        var client = me.client;\n        me.folder = 'abc';\n        var files = event.target.files;\n        me.filename = event.target.value;\n        me.fileType = files[0].type;\n\n\n        client.writeFile('/'+me.folder+'/'+me.filename, files[0], function(error, stat) {\n            if (error) {\n                console.log(error);\n                return showError(error);  // Something went wrong.\n            }\n            else{\n                console.log('file saved.');\n\n                });\n\n            }\n        });\n\n} \n```\n. Hi pwnall,\nI resolved this IE issue but safri issue is still there with this above code, now am passing \"File\" instances to writeFile directly, am using windows safari 5.7.1. Please help me .\nSafari Error is -\n(TypeError: '[object BlobConstructor]' is not a constructor (evaluating 'new Blob([r],{type:r.type})')'.)\n. ",
    "CareyJWilliams": "No problem, thanks for the fix (and library, come to think of it)! ^^\nIt's working wonderfully now!\n. No problem, thanks for the fix (and library, come to think of it)! ^^\nIt's working wonderfully now!\n. ",
    "sharepad": "Being a Cordova application, what should the return URL be? index.html?\nTried this, without success.\n. Thanks.\nNow, I get one step further to the authentication screen, but with the above code, I now get only a white screen after successful authentication. \nNeither the error alert or ok alert show up. On a subsequent launch, authentication is remembered and I get straight to the white screen.\nAny clue?\n. Being a Cordova application, what should the return URL be? index.html?\nTried this, without success.\n. Thanks.\nNow, I get one step further to the authentication screen, but with the above code, I now get only a white screen after successful authentication. \nNeither the error alert or ok alert show up. On a subsequent launch, authentication is remembered and I get straight to the white screen.\nAny clue?\n. ",
    "bugwelle": "I get the same \"error\". Code:\n```\nclient.authDriver(new Dropbox.AuthDriver.Cordova());\nclient.authenticate(function (error, client) {\n    if (error) {\n        return showDropboxError(error);\n    } else {\n        window.alert('YES!');\n        $scope.dropboxLoggedIn = client.isAuthenticated();\n    }\n});\n```\nWell, I get to the login page but after logging in I only see a white page (which is by the way https://www.dropbox.com/1/oauth2/redirect_receiver). The next time I tried to login, I always got the white page. Then I unlinked all users in the dropbox developer backend and I was able to login again. But the error still occured. This also happens when testing on Desktop with Chrome...\nIf you need more information, please tell me :)\nGreetings from Germany,\nAndre\nEdit:// Ok, well, totally my fault. I thought that I added the In-App-Browser Plugin but it seems I added it to the wrong config.xml file....\nAdding <gap:plugin name=\"org.apache.cordova.inappbrowser\" /> to config.xml and using PhoneGap build helped. Now everything works fine. Thanks for this amazing project :) :+1: \n. I get the same \"error\". Code:\n```\nclient.authDriver(new Dropbox.AuthDriver.Cordova());\nclient.authenticate(function (error, client) {\n    if (error) {\n        return showDropboxError(error);\n    } else {\n        window.alert('YES!');\n        $scope.dropboxLoggedIn = client.isAuthenticated();\n    }\n});\n```\nWell, I get to the login page but after logging in I only see a white page (which is by the way https://www.dropbox.com/1/oauth2/redirect_receiver). The next time I tried to login, I always got the white page. Then I unlinked all users in the dropbox developer backend and I was able to login again. But the error still occured. This also happens when testing on Desktop with Chrome...\nIf you need more information, please tell me :)\nGreetings from Germany,\nAndre\nEdit:// Ok, well, totally my fault. I thought that I added the In-App-Browser Plugin but it seems I added it to the wrong config.xml file....\nAdding <gap:plugin name=\"org.apache.cordova.inappbrowser\" /> to config.xml and using PhoneGap build helped. Now everything works fine. Thanks for this amazing project :) :+1: \n. ",
    "namvu80ap": "The problem solved.\nI tried to redirect back to upload page without close the AuthDriver server. ( i guess )\nSo, the code in upload action : \nvar server = new Dropbox.AuthDriver.NodeServer(8191);\nclient.authDriver( server );\nclient.authenticate( false ,function(error, clientA) { \n ........ Do good things ....\n});\nserver.closeServer();\n//Then  call Redirect\nMany thanks.\n. The problem solved.\nI tried to redirect back to upload page without close the AuthDriver server. ( i guess )\nSo, the code in upload action : \nvar server = new Dropbox.AuthDriver.NodeServer(8191);\nclient.authDriver( server );\nclient.authenticate( false ,function(error, clientA) { \n ........ Do good things ....\n});\nserver.closeServer();\n//Then  call Redirect\nMany thanks.\n. ",
    "colinmegill": "Totally. I use bower & npm and compile into a single file that goes over\nthe wire. Prefer not to CDN it.\nOn Tue, Dec 31, 2013 at 1:49 PM, Victor Costan notifications@github.comwrote:\n\n@colinmegill https://github.com/colinmegill Also, FWIW, the FAQ point\nthat you refer to states that the source code will remain CoffeeScript.\nUnfortunately, this deters some people from contributing to the repository.\nIt has nothing to do with build products, which are JavaScript.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/pull/140#issuecomment-31412563\n.\n. Perfect, thank you man. I found the js file i was looking for in the npm\nversion, and that's good enough for now! I call this issue closed, because\nmy problem is solved... agree with Zurb's method, though having a 'dist'\nfolder is common enough for public facing repos such as this. Keep up the\ngreat work!\n\nOn Tue, Dec 31, 2013 at 2:06 PM, Victor Costan notifications@github.comwrote:\n\n@colinmegill https://github.com/colinmegill Ahh... I see your point now.\nThank you for bringing this up! I'll revise the README in lib/ to state\nthat the directory is empty in the repository, and you have to run the\nbuild process to get it.\nSomeone brought up bower before. I don't have a good story for it. I\ndisagree with their suggested approach of having build products in the\nrepository. I like the solution that Zurb foundation uses -- they have a\nbuild repository that mirrors the source repository and is automatically\nupdated. If enough people complain, I might try to set that up, but right\nnow I'm hoping that either bower or what comes after it figures stuff out.\nLast, you mentioned you use npm. The npm package dropbox should have all\nthe build products in lib/, so you can use that and reach into\nnode_modules/dropbox/lib to serve them. I understand it's not a general\nsolution though... if bower manages all your frond end, special-casing\ndropbox.js is questionable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/pull/140#issuecomment-31413062\n.\n. Totally. I use bower & npm and compile into a single file that goes over\nthe wire. Prefer not to CDN it.\n\nOn Tue, Dec 31, 2013 at 1:49 PM, Victor Costan notifications@github.comwrote:\n\n@colinmegill https://github.com/colinmegill Also, FWIW, the FAQ point\nthat you refer to states that the source code will remain CoffeeScript.\nUnfortunately, this deters some people from contributing to the repository.\nIt has nothing to do with build products, which are JavaScript.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/pull/140#issuecomment-31412563\n.\n. Perfect, thank you man. I found the js file i was looking for in the npm\nversion, and that's good enough for now! I call this issue closed, because\nmy problem is solved... agree with Zurb's method, though having a 'dist'\nfolder is common enough for public facing repos such as this. Keep up the\ngreat work!\n\nOn Tue, Dec 31, 2013 at 2:06 PM, Victor Costan notifications@github.comwrote:\n\n@colinmegill https://github.com/colinmegill Ahh... I see your point now.\nThank you for bringing this up! I'll revise the README in lib/ to state\nthat the directory is empty in the repository, and you have to run the\nbuild process to get it.\nSomeone brought up bower before. I don't have a good story for it. I\ndisagree with their suggested approach of having build products in the\nrepository. I like the solution that Zurb foundation uses -- they have a\nbuild repository that mirrors the source repository and is automatically\nupdated. If enough people complain, I might try to set that up, but right\nnow I'm hoping that either bower or what comes after it figures stuff out.\nLast, you mentioned you use npm. The npm package dropbox should have all\nthe build products in lib/, so you can use that and reach into\nnode_modules/dropbox/lib to serve them. I understand it's not a general\nsolution though... if bower manages all your frond end, special-casing\ndropbox.js is questionable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/dropbox/dropbox-js/pull/140#issuecomment-31413062\n.\n. \n",
    "mendrik": "I have the same problem on windows. Except I pass the  app secret key too\n. ye I got it solved, maybe one could update the docs (pardon me if I missed it somehow), that you can use: client = new Dropbox.Client({\n    key: config.dropbox.APP_KEY,\n    secret: config.dropbox.APP_SECRET,\n    sandbox: false,\n    token: config.dropbox.TOKEN\n}); to avoid the browser confirmation, once you have the token.\nbut cheers!\n. well you basically authenticate first like the docs describe and you can log this:\nclient.authenticate(function(error, client) {\n    if (client.isAuthenticated()) {\n        console.log(\"Dropbox authenticated\");\n        console.log('token ', client._oauth._token);       // THE_TOKEN\n...\nthen set the token in a config file or, I put it to my environment variables so I don't commit it along with the code. But anyhow once you pass on the token the client won't open the browser anymore. (but the first time you have to do it)\n. .oath and .token have underscore before them..somehow the github commenting removed it.\n. I have the same problem on windows. Except I pass the  app secret key too\n. ye I got it solved, maybe one could update the docs (pardon me if I missed it somehow), that you can use: client = new Dropbox.Client({\n    key: config.dropbox.APP_KEY,\n    secret: config.dropbox.APP_SECRET,\n    sandbox: false,\n    token: config.dropbox.TOKEN\n}); to avoid the browser confirmation, once you have the token.\nbut cheers!\n. well you basically authenticate first like the docs describe and you can log this:\nclient.authenticate(function(error, client) {\n    if (client.isAuthenticated()) {\n        console.log(\"Dropbox authenticated\");\n        console.log('token ', client._oauth._token);       // THE_TOKEN\n...\nthen set the token in a config file or, I put it to my environment variables so I don't commit it along with the code. But anyhow once you pass on the token the client won't open the browser anymore. (but the first time you have to do it)\n. .oath and .token have underscore before them..somehow the github commenting removed it.\n. ",
    "terios": "i have the same probleme and i dont see how you solved it .where did the \"token: config.dropbox.TOKEN\" come from\n. just to be clear the code that i mentioned before is the code i am using to authenticate myself .is there something i need to add before that.\n. i have the same probleme and i dont see how you solved it .where did the \"token: config.dropbox.TOKEN\" come from\n. just to be clear the code that i mentioned before is the code i am using to authenticate myself .is there something i need to add before that.\n. ",
    "iangilman": "Awesome, thank you for the quick response! I have to say my experience with the Dropbox API (which I knew nothing about prior to today) has been amazing... I got it up and running quite quickly, and it's had everything I've needed (except for this issue). \nThanks for the data URI suggestion... I'll give that a try. The files I'm dealing with are rather large (e.g. 50MB)... is that going to be a problem? \n. Fair enough. I gave it a try and sure enough, it didn't work. \nI'll go ahead and use writeFile and write my own folder browser UI. Thank you for the information on making the two libraries play well together. \nIf I wanted to keep an eye out for blob URL support in the Saver, what's the best channel to watch?\n. But writeFile does not have that size limitation?\n. Great, thanks! I think our use will generally stay below 150MB, but I'll let you know. \nThanks again for the stellar support!\n. Thanks for filing this! Definitely interested.\n. Awesome, thank you for the quick response! I have to say my experience with the Dropbox API (which I knew nothing about prior to today) has been amazing... I got it up and running quite quickly, and it's had everything I've needed (except for this issue). \nThanks for the data URI suggestion... I'll give that a try. The files I'm dealing with are rather large (e.g. 50MB)... is that going to be a problem? \n. Fair enough. I gave it a try and sure enough, it didn't work. \nI'll go ahead and use writeFile and write my own folder browser UI. Thank you for the information on making the two libraries play well together. \nIf I wanted to keep an eye out for blob URL support in the Saver, what's the best channel to watch?\n. But writeFile does not have that size limitation?\n. Great, thanks! I think our use will generally stay below 150MB, but I'll let you know. \nThanks again for the stellar support!\n. Thanks for filing this! Definitely interested.\n. ",
    "louissobel": "@smarx do you know if the 10MB limit on data-uri's in the Saver is a limit on the size of the file itself or a limit on the base64 data-url representation of it?\n. @smarx I'm running into a hard limit around 1MB on the size of the data url. opening up separate bug.\n. @smarx I have it reproduced in isolation:\nhttps://www.dropbox.com/s/sezbvbb0is98tf8/saver_bug.html\n. ok, sorry for the confusion - I thought the drop ins where in this repo as well.\n. @smarx do you know if the 10MB limit on data-uri's in the Saver is a limit on the size of the file itself or a limit on the base64 data-url representation of it?\n. @smarx I'm running into a hard limit around 1MB on the size of the data url. opening up separate bug.\n. @smarx I have it reproduced in isolation:\nhttps://www.dropbox.com/s/sezbvbb0is98tf8/saver_bug.html\n. ok, sorry for the confusion - I thought the drop ins where in this repo as well.\n. ",
    "timkendrick": "Hi there,\nOne feature of the Core API that seems to be missing in dropbox.js is the path_prefix parameter for the /delta endpoint.\nIt'd be great if this could be added to dropbox.js, to allow filtering the changes to a specific path.\nI'm pretty new to pull requests \u2013 is there anything else I need to do to get this merged into a future release?\nThanks for all the work on dropbox.js!\n. It's been about 5 months since I submitted this pull request and I haven't heard anything - is the project still being maintained?\n. @pwnall - it's been a while! I'd be willing to have a shot at writing tests for this if that helps get this merged.\nWill this PR get merged into master if I write some additional tests for the path_prefix parameter, or would it be a wasted effort?\n. Based on the lack of responses I'm assuming this pull request is unlikely to be merged. I've rebased the PR based on the dropbox:stable branch, so it should be as up to date as possible if anyone wants to carry on using it.\nI'm personally going to switch to using @ehfeng's more recent fork (as seen in PR #201) seeing as it's more flexible than my approach, but I'll leave this one here in case it's useful to anyone.\n. Hi there,\nOne feature of the Core API that seems to be missing in dropbox.js is the path_prefix parameter for the /delta endpoint.\nIt'd be great if this could be added to dropbox.js, to allow filtering the changes to a specific path.\nI'm pretty new to pull requests \u2013 is there anything else I need to do to get this merged into a future release?\nThanks for all the work on dropbox.js!\n. It's been about 5 months since I submitted this pull request and I haven't heard anything - is the project still being maintained?\n. @pwnall - it's been a while! I'd be willing to have a shot at writing tests for this if that helps get this merged.\nWill this PR get merged into master if I write some additional tests for the path_prefix parameter, or would it be a wasted effort?\n. Based on the lack of responses I'm assuming this pull request is unlikely to be merged. I've rebased the PR based on the dropbox:stable branch, so it should be as up to date as possible if anyone wants to carry on using it.\nI'm personally going to switch to using @ehfeng's more recent fork (as seen in PR #201) seeing as it's more flexible than my approach, but I'll leave this one here in case it's useful to anyone.\n. ",
    "AnalogJ": "any eta on when this could be merged into master?\n. any eta on when this could be merged into master?\n. ",
    "eugeneware": "It's been almost a year now since this PR has been made.\n@pwnall How's the technical debt issue going? Can we see this get merged soon?\n. :+1: \n. It's been almost a year now since this PR has been made.\n@pwnall How's the technical debt issue going? Can we see this get merged soon?\n. :+1: \n. ",
    "ehfeng": "Should we close this out? This is a #wontfix now that Dropbox API is solidly v2.. Hmmm, tried looking through the tests, but they're a little tough to understand. What do I do to run the test?\n. I can't get the tests to work? I've tried to figure it out, but I'm pretty darn confused. \nreturn callback(error, Dropbox.Http.PulledChanges.parse(deltaInfo));\n               ^\nTypeError: object is not a function\n    at Xhr.callback (/Users/feng/Projects/dropbox-js/lib/dropbox.js:1854:16)\n    at Xhr.Dropbox.Util.Xhr.Xhr.onReadyStateChange (/Users/feng/Projects/dropbox-js/lib/dropbox.js:3818:16)\n    at XMLHttpRequest.onreadystatechange (/Users/feng/Projects/dropbox-js/lib/dropbox.js:3655:26)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:340:12)\n    at XMLHttpRequest._onHttpResponseEnd (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:494:12)\n    at IncomingMessage. (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:455:24)\n    at IncomingMessage.emit (events.js:117:20)\n    at _stream_readable.js:943:16\n    at process._tickCallback (node.js:419:13)\n. Thanks for looking through my PR! I might get to this during the week, but more likely, it'll be the weekend before I do this.\n. API v2 is the future!\n. Should we close this out? This is a #wontfix now that Dropbox API is solidly v2.. Hmmm, tried looking through the tests, but they're a little tough to understand. What do I do to run the test?\n. I can't get the tests to work? I've tried to figure it out, but I'm pretty darn confused. \nreturn callback(error, Dropbox.Http.PulledChanges.parse(deltaInfo));\n               ^\nTypeError: object is not a function\n    at Xhr.callback (/Users/feng/Projects/dropbox-js/lib/dropbox.js:1854:16)\n    at Xhr.Dropbox.Util.Xhr.Xhr.onReadyStateChange (/Users/feng/Projects/dropbox-js/lib/dropbox.js:3818:16)\n    at XMLHttpRequest.onreadystatechange (/Users/feng/Projects/dropbox-js/lib/dropbox.js:3655:26)\n    at XMLHttpRequestEventTarget.dispatchEvent (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:340:12)\n    at XMLHttpRequest._onHttpResponseEnd (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:494:12)\n    at IncomingMessage. (/Users/feng/Projects/dropbox-js/node_modules/xhr2/lib/xhr2.js:455:24)\n    at IncomingMessage.emit (events.js:117:20)\n    at _stream_readable.js:943:16\n    at process._tickCallback (node.js:419:13)\n. Thanks for looking through my PR! I might get to this during the week, but more likely, it'll be the weekend before I do this.\n. API v2 is the future!\n. ",
    "devdave": "This example shows how to setup your app\nhttps://popuptest.site44.com/\nAND this https://github.com/dropbox/dropbox-js/issues/176#issuecomment-45741661 - shows what part of oauthReceiver you need to fix to make it happy.\n. This example shows how to setup your app\nhttps://popuptest.site44.com/\nAND this https://github.com/dropbox/dropbox-js/issues/176#issuecomment-45741661 - shows what part of oauthReceiver you need to fix to make it happy.\n. ",
    "braincore": "I have an internal spec I can share with you over e-mail. I ultimately diverged rather significantly from the OAuth 2 MAC draft in favor of something closer in spirit to AWS's signature format. The feature isn't in production server-side yet, but I wanted to run the JS client implementation by you. You've maintained a pretty clean codebase, and I imagine you'll want to re-organize my additions.\n. Any chance you all can try out our new SDK? https://github.com/dropbox/dropbox-sdk-js\n. @RileyTomasek I think we need to make it clearer that the new awesome SDK is out :)\n. We're working on it! See https://github.com/dropbox/dropbox-sdk-js\n. I have an internal spec I can share with you over e-mail. I ultimately diverged rather significantly from the OAuth 2 MAC draft in favor of something closer in spirit to AWS's signature format. The feature isn't in production server-side yet, but I wanted to run the JS client implementation by you. You've maintained a pretty clean codebase, and I imagine you'll want to re-organize my additions.\n. Any chance you all can try out our new SDK? https://github.com/dropbox/dropbox-sdk-js\n. @RileyTomasek I think we need to make it clearer that the new awesome SDK is out :)\n. We're working on it! See https://github.com/dropbox/dropbox-sdk-js\n. ",
    "anastasia": "Hey @pwnall what's the status for this? I'm having the same issues and haven't found a workaround yet.\nThanks!\n. Hey @pwnall what's the status for this? I'm having the same issues and haven't found a workaround yet.\nThanks!\n. ",
    "softvar": "Sorry from my part....Didn't work with the default settings, but as soon as I coded my App's key and URI it does work. :smile: \nI heard that if one needs to use https for Redirect_URI, then SSL Certificate is must.\nI created a one at https://www.startssl.com and now I don't know how to add that to my site and it will work with dropbox APP ?\n. Currently I don't own any server. I'm using Github's free hosting for my website http://softvar.github.io and heroku free app hosting services for my webapp for eg. http://json2html.herokuapp.com\nI think that I won't be able to set SSL on subdomains. What would be the best way to redirect it to http://... then? Is there a free app service like herokuapp where I can redirect after successfully logged_in with dropbox.js API as redirecting to https://... is a bit costly one when I don't own my own server, I suppose ?\nThanks!\n. Eeee....just never tried, thought it won't.\nOh thanks a lot @smarx. It successfully redirected, made my day :+1: \nNow happily and steadily I can integrate dropbox with my APP. :smiley_cat: \n. Sorry from my part....Didn't work with the default settings, but as soon as I coded my App's key and URI it does work. :smile: \nI heard that if one needs to use https for Redirect_URI, then SSL Certificate is must.\nI created a one at https://www.startssl.com and now I don't know how to add that to my site and it will work with dropbox APP ?\n. Currently I don't own any server. I'm using Github's free hosting for my website http://softvar.github.io and heroku free app hosting services for my webapp for eg. http://json2html.herokuapp.com\nI think that I won't be able to set SSL on subdomains. What would be the best way to redirect it to http://... then? Is there a free app service like herokuapp where I can redirect after successfully logged_in with dropbox.js API as redirecting to https://... is a bit costly one when I don't own my own server, I suppose ?\nThanks!\n. Eeee....just never tried, thought it won't.\nOh thanks a lot @smarx. It successfully redirected, made my day :+1: \nNow happily and steadily I can integrate dropbox with my APP. :smiley_cat: \n. ",
    "adityabhaskar": "Has the force_reapprove parameter been implemented? Just ran into this problem, and took a while to debug why auto-login was happening even on signout with mustInvalidate.\n. Has the force_reapprove parameter been implemented? Just ran into this problem, and took a while to debug why auto-login was happening even on signout with mustInvalidate.\n. ",
    "jjhuff": "I just monkey-patched in force_reapprove, and it does only what it says: Asks the user to re-approve the app. However, the user is still signed into dropbox. They have to signout from the approval page.\nI'm working on a cordova app where I essentially use Dropbox as the login provider. I'd really like to be able to offer an option for users to to actually logout, or equivalently take them directly to the signin page.\n. I just monkey-patched in force_reapprove, and it does only what it says: Asks the user to re-approve the app. However, the user is still signed into dropbox. They have to signout from the approval page.\nI'm working on a cordova app where I essentially use Dropbox as the login provider. I'd really like to be able to offer an option for users to to actually logout, or equivalently take them directly to the signin page.\n. ",
    "MrGorki": "You can add force_reapprove: true below the line 3192 in authorizeUrlParams() method. That helps me to solve the issue. Thanks @smarx !!\n. You can add force_reapprove: true below the line 3192 in authorizeUrlParams() method. That helps me to solve the issue. Thanks @smarx !!\n. ",
    "setriosdomain": "I'm having the exact same issue. The only thing that works is removing a cookie named: 't' in domain:.dropboc.com, path:'/', and the calling signOut. Unfortunately, this cookie cannot be removed by code, because its placed by dropbox.com when you login(in a diff domain). I really think this is a bug in the API, no matter how many tokens you have; a signOut of your account should sign you out (the same that happens when you log off from dropboxs website).\n. I'm having the exact same issue. The only thing that works is removing a cookie named: 't' in domain:.dropboc.com, path:'/', and the calling signOut. Unfortunately, this cookie cannot be removed by code, because its placed by dropbox.com when you login(in a diff domain). I really think this is a bug in the API, no matter how many tokens you have; a signOut of your account should sign you out (the same that happens when you log off from dropboxs website).\n. ",
    "rlmcneary2": "The problem is in BrowserBase.localStorage() - if 'window' exists then it returns 'window.localStorage'. The Chrome App driver appears to not use the 'this.storage' variable which is set by BrowserBase.localStorage() so null could probably be safely returned... I added the following (borrowed) code to BrowserBase.localStorage() before it checks for the existence of 'window' and it works, but it doesn't seem like the right solution.\nJavaScript\n      if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.id) {\n        if (chrome.tabs && chrome.tabs.create) {\n          return window.localStorage;\n        } else {\n          return chrome.storage.local;\n        }\n      }\n. @pwnall I can live with the change I made to my local copy. I'll update when the fix makes it out to the world.\n. @pwnall I just pulled down the 0.10.3 version from https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.3/dropbox.js and still have the problem accessing chrome's local storage. Looking at the commit you mentioned (https://github.com/dropbox/dropbox-js/commit/d610b17c74b4ca8b236dcd7ef86aa891863f758e) it looks like it has a try/catch around the attempt to access window.localStorage but I don't think it addresses the problem of returning chrome's local storage. I'm now running Chrome 40 on the beta channel.\n. You're right; it's not 0.10.3, it's me.\n0.10.3 is working just fine\n. Yup just spent a few hours relearning this. The problem is that during chromium packaged app development if you don't have a key in your manifest.json file the packaged app's ID can change, it will be automatically generated by Chrome when the app is loaded. You can find details on Stack Overflow: http://stackoverflow.com/questions/21497781/how-to-change-chrome-packaged-app-id-or-why-do-we-need-key-field-in-the-manifest. If you decide to let the ID change then every time it does you will have to update the OAuth callback URLs in your Dropbox app's OAuth2 Settings to match the new ID. For example:\nhttps://[your app id].chromiumapp.org/\nAnyway \"Authorization page could not be loaded.\" is a symptom of not configuring Dropbox with the correct OAuth 2 callback URL. Just thought anyone arriving here via search might like to know.\n. The problem is in BrowserBase.localStorage() - if 'window' exists then it returns 'window.localStorage'. The Chrome App driver appears to not use the 'this.storage' variable which is set by BrowserBase.localStorage() so null could probably be safely returned... I added the following (borrowed) code to BrowserBase.localStorage() before it checks for the existence of 'window' and it works, but it doesn't seem like the right solution.\nJavaScript\n      if (typeof chrome !== 'undefined' && chrome.runtime && chrome.runtime.id) {\n        if (chrome.tabs && chrome.tabs.create) {\n          return window.localStorage;\n        } else {\n          return chrome.storage.local;\n        }\n      }\n. @pwnall I can live with the change I made to my local copy. I'll update when the fix makes it out to the world.\n. @pwnall I just pulled down the 0.10.3 version from https://cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.3/dropbox.js and still have the problem accessing chrome's local storage. Looking at the commit you mentioned (https://github.com/dropbox/dropbox-js/commit/d610b17c74b4ca8b236dcd7ef86aa891863f758e) it looks like it has a try/catch around the attempt to access window.localStorage but I don't think it addresses the problem of returning chrome's local storage. I'm now running Chrome 40 on the beta channel.\n. You're right; it's not 0.10.3, it's me.\n0.10.3 is working just fine\n. Yup just spent a few hours relearning this. The problem is that during chromium packaged app development if you don't have a key in your manifest.json file the packaged app's ID can change, it will be automatically generated by Chrome when the app is loaded. You can find details on Stack Overflow: http://stackoverflow.com/questions/21497781/how-to-change-chrome-packaged-app-id-or-why-do-we-need-key-field-in-the-manifest. If you decide to let the ID change then every time it does you will have to update the OAuth callback URLs in your Dropbox app's OAuth2 Settings to match the new ID. For example:\nhttps://[your app id].chromiumapp.org/\nAnyway \"Authorization page could not be loaded.\" is a symptom of not configuring Dropbox with the correct OAuth 2 callback URL. Just thought anyone arriving here via search might like to know.\n. ",
    "PierBover": "I know this is old but you can't simply replace window.localStorage with chrome.storage.local.\nwindow.localStorage is sync and chrome.storage.local is async (needs a callback).\nhttps://developer.chrome.com/apps/storage\nIt would work for writing, but not for reading.. I know this is old but you can't simply replace window.localStorage with chrome.storage.local.\nwindow.localStorage is sync and chrome.storage.local is async (needs a callback).\nhttps://developer.chrome.com/apps/storage\nIt would work for writing, but not for reading.. ",
    "LarsBV": "It would be so nice if this was fixed in the official repository, as it is I'm going to use timkendrick's patch. Thanks man, didn't look forward to trying Coffee script today :)\n. It would be so nice if this was fixed in the official repository, as it is I'm going to use timkendrick's patch. Thanks man, didn't look forward to trying Coffee script today :)\n. ",
    "bstanley0811": ":+1:  for this!\n. :+1:  for this!\n. ",
    "rodri042": ":+1:\n. ``` coffee-script\nDropbox = require(\"dropbox\")\nPromise = require(\"bluebird\")\nmodule.exports =\nclass DropboxApi\n    constructor: (token) ->\n        @client = Promise.promisifyAll new Dropbox.Client { token }\nreadDir: (tail = { changes: [] }) =>\n    @client.deltaAsync(tail.cursorTag)\n        .catch (e) => throw \"Error reading the remote directory /.\"\n        .then (delta) =>\n            delta.changes = tail.changes.concat delta.changes\n\n            if delta.shouldPullAgain\n                @readDir delta\n            else delta\n\n```\nUsage:\ncoffee-script\nnew DropboxApi(\"A token\").readDir().then (entries) =>\n  console.log entries\n. It is a coffeescript class created by me, and the readDir method does the job. If you dont use coffee, you can go to coffee-script.org and compile the code online. \n. :+1:\n. ``` coffee-script\nDropbox = require(\"dropbox\")\nPromise = require(\"bluebird\")\nmodule.exports =\nclass DropboxApi\n    constructor: (token) ->\n        @client = Promise.promisifyAll new Dropbox.Client { token }\nreadDir: (tail = { changes: [] }) =>\n    @client.deltaAsync(tail.cursorTag)\n        .catch (e) => throw \"Error reading the remote directory /.\"\n        .then (delta) =>\n            delta.changes = tail.changes.concat delta.changes\n\n            if delta.shouldPullAgain\n                @readDir delta\n            else delta\n\n```\nUsage:\ncoffee-script\nnew DropboxApi(\"A token\").readDir().then (entries) =>\n  console.log entries\n. It is a coffeescript class created by me, and the readDir method does the job. If you dont use coffee, you can go to coffee-script.org and compile the code online. \n. ",
    "rajnathani": "+1!\n. +1!\n. ",
    "figalex": "This should help.\n. So from what I'm seeing, the Dropbox.AuthDriver.NodeServer uses the node-open module to open the authorization page. But node-open on linux uses xdg-open to open a new browser window for the authorization page, so this means that if I'm running my app on a server xdg-open will try to open a browser window on the server ??\nDo I have to get dropbox authorization with a client side method even when I'm using dropbox.js on the server??\n. @pwnall That example worked for me, authentication is done with no problems using the middleware. The only problem is for when the user cancels that authentication process (instead of allowing the app to access his account) the AuthDriver just throws an error and I can't think of a way to handle this. \nHave you thought of something that could help to deal with this ?\n. Yeah I mean it is really thrown, this is part of the stack:\nError: Client got in an error state. Call reset() to reuse it!\n  at Client.Dropbox.Client.Client.authenticate (/Users/Alex/Tec/Cloud Computing/dropbox-node/dropbox-js/samples/node-netsend/node_modules/dropbox/lib/dropbox.js:1111:15)\n  at /Users/Alex/Tec/Cloud Computing/dropbox-node/dropbox-js/samples/node-netsend/src/dbx_middleware.coffee:38:12\nOn Client.prototype.authenticate, this.authStep becomes 0 or DbxClient.ERROR and instead of calling the callback passing the error it just throws the error here.\nWhat I dont understand is why when I was using the AuthDiver.NodeServer thing when there was an exception the callback was call with the error parameter and using the middleware it doesn't send the error to the callback.\n. Doing some debugging I noticed that when you hit the \"Cancel\" button the middleware function gets called again and in this line, client.authStepgets the value of 0 (which is the Error state) and that's why it throws that Error inside the client.authenticatemethod. \nMaybe it would be nice to pass the error to the callback instead of just throwing the error:\ncoffeescript\nif @authStep is DbxClient.ERROR\n      callback new Error ('Client got in an error state. Call reset() to reuse it!'), @ if callback\n      return\nAnd I think this would be just showing the authorization page again and again, am I right?\n. Thanks @leah !\n. This should help.\n. So from what I'm seeing, the Dropbox.AuthDriver.NodeServer uses the node-open module to open the authorization page. But node-open on linux uses xdg-open to open a new browser window for the authorization page, so this means that if I'm running my app on a server xdg-open will try to open a browser window on the server ??\nDo I have to get dropbox authorization with a client side method even when I'm using dropbox.js on the server??\n. @pwnall That example worked for me, authentication is done with no problems using the middleware. The only problem is for when the user cancels that authentication process (instead of allowing the app to access his account) the AuthDriver just throws an error and I can't think of a way to handle this. \nHave you thought of something that could help to deal with this ?\n. Yeah I mean it is really thrown, this is part of the stack:\nError: Client got in an error state. Call reset() to reuse it!\n  at Client.Dropbox.Client.Client.authenticate (/Users/Alex/Tec/Cloud Computing/dropbox-node/dropbox-js/samples/node-netsend/node_modules/dropbox/lib/dropbox.js:1111:15)\n  at /Users/Alex/Tec/Cloud Computing/dropbox-node/dropbox-js/samples/node-netsend/src/dbx_middleware.coffee:38:12\nOn Client.prototype.authenticate, this.authStep becomes 0 or DbxClient.ERROR and instead of calling the callback passing the error it just throws the error here.\nWhat I dont understand is why when I was using the AuthDiver.NodeServer thing when there was an exception the callback was call with the error parameter and using the middleware it doesn't send the error to the callback.\n. Doing some debugging I noticed that when you hit the \"Cancel\" button the middleware function gets called again and in this line, client.authStepgets the value of 0 (which is the Error state) and that's why it throws that Error inside the client.authenticatemethod. \nMaybe it would be nice to pass the error to the callback instead of just throwing the error:\ncoffeescript\nif @authStep is DbxClient.ERROR\n      callback new Error ('Client got in an error state. Call reset() to reuse it!'), @ if callback\n      return\nAnd I think this would be just showing the authorization page again and again, am I right?\n. Thanks @leah !\n. ",
    "talha-asad": "http://coffeedoc.info/github/dropbox/dropbox-js/master/class_index.html -> This should be very prominent on the ReadMe.\n. http://coffeedoc.info/github/dropbox/dropbox-js/master/class_index.html -> This should be very prominent on the ReadMe.\n. ",
    "leah": "You'll want to use client.authenticate({interactive: false} ... to check if the user is already authenticated like so:\n``` js\nvar client = new Dropbox.Client({key: APP_KEY});\n// Try to finish OAuth authorization.\nclient.authenticate({interactive: false}, function (error) {\n    if (error) {\n        alert('Authentication error: ' + error);\n    }\n});\nif (client.isAuthenticated()) {\n    // Client is authenticated. Display UI.\n}\n```\nHere's the full documentation for authenticating with JavaScript in the Datastore API. The authentication part is the same as the Core API:\nhttps://www.dropbox.com/developers/datastore/tutorial/js#linking-accounts\n. You'll want to use client.authenticate({interactive: false} ... to check if the user is already authenticated like so:\n``` js\nvar client = new Dropbox.Client({key: APP_KEY});\n// Try to finish OAuth authorization.\nclient.authenticate({interactive: false}, function (error) {\n    if (error) {\n        alert('Authentication error: ' + error);\n    }\n});\nif (client.isAuthenticated()) {\n    // Client is authenticated. Display UI.\n}\n```\nHere's the full documentation for authenticating with JavaScript in the Datastore API. The authentication part is the same as the Core API:\nhttps://www.dropbox.com/developers/datastore/tutorial/js#linking-accounts\n. ",
    "riceonmars": "Thanks a billion! I didn't know about the app console. \n. Thanks a billion! I didn't know about the app console. \n. ",
    "robertknight": "@pwnall - I think it is sufficient just to run browserify on dropbox.js .\nWhat browser incompatibilities are you working around in your XHR code? I must admit that I've only been testing with current versions of IE, Firefox, Chrome, Safari and Mobile Safari.\n. I'm going to submit a new pull request which refactors the handling of Dropbox.Env setup with the result that Browserify is treated like a browser-environment for the purposes of importing functionality and a CommonJS environment for the purposes of exporting it.\n. Thanks @joshzana - that could be very useful for a react-native project I have in mind.\n. @developit This issue is a pull request, so it includes the code I wrote to fix the problem. If look at the bottom of this thread you'll see a link to my branch on GitHub. I've been using it \"in production\" for a year in Passcards. See this package.json file and the Makefile for the steps I use to include and build the fork.\n. Given that Dropbox now has an official JS SDK for its V2 API which supports use with module bundlers, I'm going to close this.\n. @pwnall - I think it is sufficient just to run browserify on dropbox.js .\nWhat browser incompatibilities are you working around in your XHR code? I must admit that I've only been testing with current versions of IE, Firefox, Chrome, Safari and Mobile Safari.\n. I'm going to submit a new pull request which refactors the handling of Dropbox.Env setup with the result that Browserify is treated like a browser-environment for the purposes of importing functionality and a CommonJS environment for the purposes of exporting it.\n. Thanks @joshzana - that could be very useful for a react-native project I have in mind.\n. @developit This issue is a pull request, so it includes the code I wrote to fix the problem. If look at the bottom of this thread you'll see a link to my branch on GitHub. I've been using it \"in production\" for a year in Passcards. See this package.json file and the Makefile for the steps I use to include and build the fork.\n. Given that Dropbox now has an official JS SDK for its V2 API which supports use with module bundlers, I'm going to close this.\n. ",
    "ianstormtaylor": "None :) now that I know that's legit. I had just written that as what I wished it was, since I couldn't find it mentioned in the docs as to how to do it with a token.\n. None :) now that I know that's legit. I had just written that as what I wished it was, since I couldn't find it mentioned in the docs as to how to do it with a token.\n. ",
    "pdubroy": "Oh, good point. :-)\nIt fails when I run npm install in a dropbox.js checkout:\n```\nnpm ERR! Error: No compatible version found: cordova@'>=3.1.0-0.1.0'\nnpm ERR! Valid install targets:\nnpm ERR! [\"0.0.1\",\"0.0.2\",\"0.0.3\",\"0.0.4\",\"0.0.5\",\"0.0.6\",\"0.0.7\",\"0.0.8\",\"0.0.9\",\"0.1.0\",\"0.1.1\",\"0.1.2\",\"0.1.3\",\"0.1.4\",\"0.1.5\",\"0.1.6\",\"0.1.7\",\"0.1.8\",\"0.1.9\",\"0.1.10\",\"0.1.11\",\"0.1.12\",\"0.1.13\",\"0.1.14\",\"2.2.0\",\"2.3.0\",\"2.3.1\",\"2.3.2\",\"2.3.3\",\"2.3.5\",\"2.3.6\",\"2.4.0\",\"2.4.1\",\"2.4.2\",\"2.4.3\",\"2.4.4\",\"2.4.5\",\"2.4.6\",\"2.4.7\",\"2.4.8\",\"2.4.9\",\"2.4.10\",\"2.5.0\",\"2.5.2\",\"2.5.3\",\"2.5.4\",\"2.5.5\",\"2.6.0\",\"2.6.1\",\"2.6.2\",\"2.7.0-rc.1\",\"2.7.1-rc.1\",\"2.7.2\",\"2.7.3\",\"2.7.4\",\"2.8.0\",\"2.8.1\",\"2.8.2\",\"2.8.3\",\"2.8.4\",\"2.8.5\",\"2.8.6\",\"2.8.7\",\"2.8.8\",\"2.8.9\",\"2.8.10\",\"2.8.11\",\"2.8.12\",\"2.8.13\",\"2.8.14\",\"2.8.15\"]\nnpm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:553:10)\nnpm ERR!     at next (/usr/local/lib/node_modules/npm/lib/cache.js:532:17)\nnpm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:512:5\nnpm ERR!     at saved (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/get.js:138:7)\nnpm ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:220:7\nnpm ERR!     at Object.oncomplete (fs.js:297:15)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! System Darwin 13.1.0\nnpm ERR! command \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /private/tmp/dropbox-js\nnpm ERR! node -v v0.8.6\nnpm ERR! npm -v 1.1.48\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/tmp/dropbox-js/npm-debug.log\nnpm ERR! not ok code 0\n```\nI think the real problem is that npm should provide a better error message, and indicate that the required version of Cordova exists, but is not compatible with the current version of node.\nWhat do you think about putting a short node in the development guide instead?\n. Oh, good point. :-)\nIt fails when I run npm install in a dropbox.js checkout:\n```\nnpm ERR! Error: No compatible version found: cordova@'>=3.1.0-0.1.0'\nnpm ERR! Valid install targets:\nnpm ERR! [\"0.0.1\",\"0.0.2\",\"0.0.3\",\"0.0.4\",\"0.0.5\",\"0.0.6\",\"0.0.7\",\"0.0.8\",\"0.0.9\",\"0.1.0\",\"0.1.1\",\"0.1.2\",\"0.1.3\",\"0.1.4\",\"0.1.5\",\"0.1.6\",\"0.1.7\",\"0.1.8\",\"0.1.9\",\"0.1.10\",\"0.1.11\",\"0.1.12\",\"0.1.13\",\"0.1.14\",\"2.2.0\",\"2.3.0\",\"2.3.1\",\"2.3.2\",\"2.3.3\",\"2.3.5\",\"2.3.6\",\"2.4.0\",\"2.4.1\",\"2.4.2\",\"2.4.3\",\"2.4.4\",\"2.4.5\",\"2.4.6\",\"2.4.7\",\"2.4.8\",\"2.4.9\",\"2.4.10\",\"2.5.0\",\"2.5.2\",\"2.5.3\",\"2.5.4\",\"2.5.5\",\"2.6.0\",\"2.6.1\",\"2.6.2\",\"2.7.0-rc.1\",\"2.7.1-rc.1\",\"2.7.2\",\"2.7.3\",\"2.7.4\",\"2.8.0\",\"2.8.1\",\"2.8.2\",\"2.8.3\",\"2.8.4\",\"2.8.5\",\"2.8.6\",\"2.8.7\",\"2.8.8\",\"2.8.9\",\"2.8.10\",\"2.8.11\",\"2.8.12\",\"2.8.13\",\"2.8.14\",\"2.8.15\"]\nnpm ERR!     at installTargetsError (/usr/local/lib/node_modules/npm/lib/cache.js:553:10)\nnpm ERR!     at next (/usr/local/lib/node_modules/npm/lib/cache.js:532:17)\nnpm ERR!     at /usr/local/lib/node_modules/npm/lib/cache.js:512:5\nnpm ERR!     at saved (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/get.js:138:7)\nnpm ERR!     at /usr/local/lib/node_modules/npm/node_modules/graceful-fs/graceful-fs.js:220:7\nnpm ERR!     at Object.oncomplete (fs.js:297:15)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! System Darwin 13.1.0\nnpm ERR! command \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"install\"\nnpm ERR! cwd /private/tmp/dropbox-js\nnpm ERR! node -v v0.8.6\nnpm ERR! npm -v 1.1.48\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /private/tmp/dropbox-js/npm-debug.log\nnpm ERR! not ok code 0\n```\nI think the real problem is that npm should provide a better error message, and indicate that the required version of Cordova exists, but is not compatible with the current version of node.\nWhat do you think about putting a short node in the development guide instead?\n. ",
    "lukeIam": "@smarx Thanks for the example (It's also working for me)\nOne difference is that my code is used in a greasemonkey script and as part of a chrome extension.\nBut this should't be a difference for the script (storage permission is granted under chrome)\nAnd it works reproducible if the login is in done in the popup.\nDo you know some special circumstances the SSO-Mechanism needs?\nAnyway, I'll try to spot an other difference.\n. oauthReceiver() does \nwindow.addEventListener(\"load\", function() { [Code] });\nAnd [Code] is not executed if I use SSO. \nIt seems that \"load\" was fired before we came here...\n[EDIT:]\nI've tried to put the oauthReceiver() call at the top of my script - still the same problem...\nI just don't get the difference between SSO and no-SSO\n. I've got it working by changing oauthReceiver() to something like this:\nvar code = function() { [code] };\nif (document.readyState == \"complete\" || document.readyState == \"loaded\") \n{\n     code();\n}\nelse\n{\n     window.addEventListener(\"load\", code );\n}\n. @smarx Thanks for the example (It's also working for me)\nOne difference is that my code is used in a greasemonkey script and as part of a chrome extension.\nBut this should't be a difference for the script (storage permission is granted under chrome)\nAnd it works reproducible if the login is in done in the popup.\nDo you know some special circumstances the SSO-Mechanism needs?\nAnyway, I'll try to spot an other difference.\n. oauthReceiver() does \nwindow.addEventListener(\"load\", function() { [Code] });\nAnd [Code] is not executed if I use SSO. \nIt seems that \"load\" was fired before we came here...\n[EDIT:]\nI've tried to put the oauthReceiver() call at the top of my script - still the same problem...\nI just don't get the difference between SSO and no-SSO\n. I've got it working by changing oauthReceiver() to something like this:\nvar code = function() { [code] };\nif (document.readyState == \"complete\" || document.readyState == \"loaded\") \n{\n     code();\n}\nelse\n{\n     window.addEventListener(\"load\", code );\n}\n. ",
    "moszeed": "@lukeIam having the same issues, but solved it a little bit different.\nI`m just waiting until the DOM fully loaded and then calling the oauthReceiver():\ndocument.addEventListener('DOMContentLoaded', function(){\n        Dropbox.AuthDriver.Popup.oauthReceiver();\n    });\n. any progress on this ? \n. +1\n. maybe it helps someone else, \ni build a Promise Wrapper for dropbox.js that uses a modified Version of dropbox.js (including this Patch) to enable compatibility with Browserify.\nhttps://www.npmjs.com/package/drbx-js\n. @lukeIam having the same issues, but solved it a little bit different.\nI`m just waiting until the DOM fully loaded and then calling the oauthReceiver():\ndocument.addEventListener('DOMContentLoaded', function(){\n        Dropbox.AuthDriver.Popup.oauthReceiver();\n    });\n. any progress on this ? \n. +1\n. maybe it helps someone else, \ni build a Promise Wrapper for dropbox.js that uses a modified Version of dropbox.js (including this Patch) to enable compatibility with Browserify.\nhttps://www.npmjs.com/package/drbx-js\n. ",
    "mcorway": "My app is being built for deployment on iOS (iPad). For a user to be able to see the source code and obtain the account key (it won't be my dropbox, but the client's dropbox), they would have to de-compile my app. I understand this could happen, but I think it's unlikely. \nThe premise of my app is my client wants me to build an app that shows all the files in their DropBox folder. During a presentation, my client can use the app to view all of their files (with cordova inappbrowser etc). They could sign in, as it is doing now, but it doesn't seem necessary for this premise.\nWhat would you do in this case? Do you think per-basis authentication is necessary?\n. My app is being built for deployment on iOS (iPad). For a user to be able to see the source code and obtain the account key (it won't be my dropbox, but the client's dropbox), they would have to de-compile my app. I understand this could happen, but I think it's unlikely. \nThe premise of my app is my client wants me to build an app that shows all the files in their DropBox folder. During a presentation, my client can use the app to view all of their files (with cordova inappbrowser etc). They could sign in, as it is doing now, but it doesn't seem necessary for this premise.\nWhat would you do in this case? Do you think per-basis authentication is necessary?\n. ",
    "zenorocha": ":)\n. :)\n. ",
    "carokanns": "I'm using that and it works perfectly in development: PG Desktop and PG mobile.\nBut after I've done PhoneGap Build it doesn't work anymore for me.\nI put a question about it on stackoverflow: http://stackoverflow.com/questions/34826942/accessing-my-own-dropbox-with-phonegap\n. If someone has the documents offline I can host it until a better solution comes up\n. Thanks for the info,\nIn that case, it is accessible and no reason for me to host it.\n. I'm using that and it works perfectly in development: PG Desktop and PG mobile.\nBut after I've done PhoneGap Build it doesn't work anymore for me.\nI put a question about it on stackoverflow: http://stackoverflow.com/questions/34826942/accessing-my-own-dropbox-with-phonegap\n. If someone has the documents offline I can host it until a better solution comes up\n. Thanks for the info,\nIn that case, it is accessible and no reason for me to host it.\n. ",
    "SankaD": "Thanks. Following code worked for me.\n``` javascript\n        var pcursor = null;\n        var eventObject = new EventEmitter();\n        var counter = 0;\n        stream.on('data', function (data) {\n            counter++;\n            client.resumableUploadStep(data, pcursor, function (error, cursor) {\n                if (error) {\n                    return  callback(error);\n                }\n                counter--;\n                pcursor = cursor;\n                eventObject.emit('event');\n            });\n        });\n    stream.on('end', function () {\n        eventObject.on('event', function () {\n            if (counter == 0) {\n                client.resumableUploadFinish(fileName, pcursor, function (error, stats) {\n                    if (error) {\n                        return callback(error);\n                    }\n                    return callback(null, stats);\n                });\n                counter = -1;\n            }\n        });\n\n        eventObject.emit('event');\n    });\n\n```\n. Thanks. Following code worked for me.\n``` javascript\n        var pcursor = null;\n        var eventObject = new EventEmitter();\n        var counter = 0;\n        stream.on('data', function (data) {\n            counter++;\n            client.resumableUploadStep(data, pcursor, function (error, cursor) {\n                if (error) {\n                    return  callback(error);\n                }\n                counter--;\n                pcursor = cursor;\n                eventObject.emit('event');\n            });\n        });\n    stream.on('end', function () {\n        eventObject.on('event', function () {\n            if (counter == 0) {\n                client.resumableUploadFinish(fileName, pcursor, function (error, stats) {\n                    if (error) {\n                        return callback(error);\n                    }\n                    return callback(null, stats);\n                });\n                counter = -1;\n            }\n        });\n\n        eventObject.emit('event');\n    });\n\n```\n. ",
    "anoopknayak": "@SankaD Are you using a file stream or the stream from the request library. It doesn't seem working for me. I use the request library.\njavascript\n        var pcursor = null;\n        var eventObject = new EventEmitter();\n        var counter = 0;\n        request.get(url).on('data', function (data) {\n            counter++;\n            client.resumableUploadStep(data, pcursor, function (error, cursor) {\n                if (error) {\n                    return  callback(error);\n                }\n                counter--;\n                pcursor = cursor;\n                eventObject.emit('event');\n            });\n        }).on('end', function () {\n            eventObject.on('event', function () {\n                if (counter == 0) {\n                    client.resumableUploadFinish(fileName, pcursor, function (error, stats) {\n                        if (error) {\n                            return callback(error);\n                        }\n                        return callback(null, stats);\n                    });\n                    counter = -1;\n                }\n            });\n            eventObject.emit('event');\n        });\nDid I miss anything here?\n. @SankaD Are you using a file stream or the stream from the request library. It doesn't seem working for me. I use the request library.\njavascript\n        var pcursor = null;\n        var eventObject = new EventEmitter();\n        var counter = 0;\n        request.get(url).on('data', function (data) {\n            counter++;\n            client.resumableUploadStep(data, pcursor, function (error, cursor) {\n                if (error) {\n                    return  callback(error);\n                }\n                counter--;\n                pcursor = cursor;\n                eventObject.emit('event');\n            });\n        }).on('end', function () {\n            eventObject.on('event', function () {\n                if (counter == 0) {\n                    client.resumableUploadFinish(fileName, pcursor, function (error, stats) {\n                        if (error) {\n                            return callback(error);\n                        }\n                        return callback(null, stats);\n                    });\n                    counter = -1;\n                }\n            });\n            eventObject.emit('event');\n        });\nDid I miss anything here?\n. ",
    "asharamseervi": "\"+1\"\n I also want to know about that, please whenever you receive this method..\nplease elaborate it to me also..!!! please !!\nOn Sat, Jun 28, 2014 at 5:43 PM, Olivier Lesnicki notifications@github.com\nwrote:\n\nIs there a method that let's the app obtain the current user access token?\nI've built a JS application that sign in the user. But I want to pass its\naccess token to my server.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/issues/182.\n. thanks.... :)\n\nOn Sat, Jun 28, 2014 at 9:23 PM, Olivier Lesnicki notifications@github.com\nwrote:\n\nAfter investigating the source code this can be done easily:\nclient.credentials();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/issues/182#issuecomment-47430985.\n. \"+1\"\n I also want to know about that, please whenever you receive this method..\nplease elaborate it to me also..!!! please !!\n\nOn Sat, Jun 28, 2014 at 5:43 PM, Olivier Lesnicki notifications@github.com\nwrote:\n\nIs there a method that let's the app obtain the current user access token?\nI've built a JS application that sign in the user. But I want to pass its\naccess token to my server.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/issues/182.\n. thanks.... :)\n\nOn Sat, Jun 28, 2014 at 9:23 PM, Olivier Lesnicki notifications@github.com\nwrote:\n\nAfter investigating the source code this can be done easily:\nclient.credentials();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/issues/182#issuecomment-47430985.\n. \n",
    "olivierlesnicki": "After investigating the source code this can be done easily:\nclient.credentials();\n. After investigating the source code this can be done easily:\nclient.credentials();\n. ",
    "wookiehangover": "+1 your env detection is worthless without these changes...\n. +1 your env detection is worthless without these changes...\n. ",
    "nrw": "+1 lgtm\n. +1 lgtm\n. ",
    "joshzana": "This also enables use of dropbox.js within react-native apps, once https://github.com/facebook/react-native/pull/892 lands \n. You may want to look at this PR https://github.com/dropbox/dropbox-js/pull/183 which is trying to fix it for Browserify.\n. This also enables use of dropbox.js within react-native apps, once https://github.com/facebook/react-native/pull/892 lands \n. You may want to look at this PR https://github.com/dropbox/dropbox-js/pull/183 which is trying to fix it for Browserify.\n. ",
    "karel-3d": "+1\n. Created a pull request #227\n. +1\n. Created a pull request #227\n. ",
    "developit": "So has anyone forked this yet to address this issue?\n. Gotcha, for now I'm using robertknight/dropbox-js#5568865764d9deab69836569a69d72d200c88293.\n. So has anyone forked this yet to address this issue?\n. Gotcha, for now I'm using robertknight/dropbox-js#5568865764d9deab69836569a69d72d200c88293.\n. ",
    "mszczepanczyk": ":thumbsup: thanks!\n. :thumbsup: thanks!\n. ",
    "bcallaars": ":shipit: \n. :shipit: \n. ",
    "kchang4": "chrome : 35.0.1916.153\nnode     : 0.11.29\nnpm      : 1.4.20\nso we use admzip to iterate through each file in a local zip file asynchronously and use its async .getDataAsync() function to get a buffer, then place that into the writeFile().  I've debugged to so where only the writeFile() is the blocking culprit.  .getDataAsync() I thought originally was broken, but it didn't block at all during debug mode, but when it gets tot he writeFile(), on big files, mostly over 50mb, it blocks my entire node application.  \nSo im getting the buffer from a async function, and passing that to writeFile(path, buffer, options, function()), and it seems to be blocking everytime there is a big file.  basically my application is blocked during the time i call wrtieFile() and get the repsonse from it.\n. yep.  all server side.\nOn Tue, Dec 2, 2014 at 7:13 PM, Victor Costan notifications@github.com\nwrote:\n\nSo you're using this writeFile in node.js code, not in browser code, is\nthat correct?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/issues/185#issuecomment-65336434.\n. chrome : 35.0.1916.153\nnode     : 0.11.29\nnpm      : 1.4.20\n\nso we use admzip to iterate through each file in a local zip file asynchronously and use its async .getDataAsync() function to get a buffer, then place that into the writeFile().  I've debugged to so where only the writeFile() is the blocking culprit.  .getDataAsync() I thought originally was broken, but it didn't block at all during debug mode, but when it gets tot he writeFile(), on big files, mostly over 50mb, it blocks my entire node application.  \nSo im getting the buffer from a async function, and passing that to writeFile(path, buffer, options, function()), and it seems to be blocking everytime there is a big file.  basically my application is blocked during the time i call wrtieFile() and get the repsonse from it.\n. yep.  all server side.\nOn Tue, Dec 2, 2014 at 7:13 PM, Victor Costan notifications@github.com\nwrote:\n\nSo you're using this writeFile in node.js code, not in browser code, is\nthat correct?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/dropbox/dropbox-js/issues/185#issuecomment-65336434.\n. \n",
    "jamarolo": "Hey there!\nInstalling the xhr2 and open dependencies from the package.json inside this repo worked. :)\nCould you guys either update the docs to add a note to mention this or to mention a lack of NodeJS support? The references to Node within the docs definitely made it a little unclear.\n. Hey there!\nInstalling the xhr2 and open dependencies from the package.json inside this repo worked. :)\nCould you guys either update the docs to add a note to mention this or to mention a lack of NodeJS support? The references to Node within the docs definitely made it a little unclear.\n. ",
    "chachou29": "Hello Inicio,\nI've the same issue :-(\nNode.js and Express 4.0 to handle the upload. \nTypeError: Property 'onprogress' of object #<XMLHttpRequestUpload>\nDid you solve the problem ?\nThank you\n. Hello Inicio,\nI've the same issue :-(\nNode.js and Express 4.0 to handle the upload. \nTypeError: Property 'onprogress' of object #<XMLHttpRequestUpload>\nDid you solve the problem ?\nThank you\n. ",
    "alnino2005": "Hello,\nI've scoured through the previous post and followed to here. I have to admit I am no eventListener expert, but I can gather no reading from dbXhr.xhr.upload.onprogress.\nMy research tells me this is a standard action in XMLHttpRequest. I am still searching for the right way to do this.\nCurrently my code looks like this:\n``` javascript\nvar xhrListener = function(dbXhr) {\n  dbXhr.xhr.upload.addEventListener(\"progress\", function(event) {\n    // event.loaded bytes received, event.total bytes must be received\n    console.log(event);\n  });\n  return true;  // otherwise, the XMLHttpRequest is canceled\n};\nclient.onXhr.addListener(xhrListener);\nclient.writeFile(ret, data, function(error, stat) { \n```\n\"event\" is never logged.\n. This code is running serverside in nodejs\n. Hello,\nI've scoured through the previous post and followed to here. I have to admit I am no eventListener expert, but I can gather no reading from dbXhr.xhr.upload.onprogress.\nMy research tells me this is a standard action in XMLHttpRequest. I am still searching for the right way to do this.\nCurrently my code looks like this:\n``` javascript\nvar xhrListener = function(dbXhr) {\n  dbXhr.xhr.upload.addEventListener(\"progress\", function(event) {\n    // event.loaded bytes received, event.total bytes must be received\n    console.log(event);\n  });\n  return true;  // otherwise, the XMLHttpRequest is canceled\n};\nclient.onXhr.addListener(xhrListener);\nclient.writeFile(ret, data, function(error, stat) { \n```\n\"event\" is never logged.\n. This code is running serverside in nodejs\n. ",
    "Xiphe": "/push\nI'd like to use this in an ExpressJs application. But i do not want to publish a new npm module just for a typo fix.\n. Nice, Thank you for the merge!\nI use the git ref until you release a new version. That's no problem.\nAlso, thank you for the clarification on git urls as dependencies. I tried that but somehow npm refused to run post install hooks on my (unpublished) fork. I'll retry that or just use 641803d.\nI'd like to write down some documentation about how to write an AuthDriver for node apps using express and contribute that as a new PR. Is that cool for you or should i do this somewhere else?\n. Yeah, i rechecked it. Problem is:\nWhen you install from somewhere else than npm the lib folder is empty since cake build is only executed before publishing to npm.\nFix would be a post install hook that executes a cake build.\nGoing to open a PR for that.\n. Closing, as i don't think it's a good solution to install so much dev-dependencies just for one single build. Any discussion or tipps are more than welcome.\n. Yeah, a college of mine (npm contributor) told me basically the same. He mentioned, that i could use npm install -f in order to force a full installation of all dependencies.\nAs i said, i'm not happy with the solution i added here (thats why i closed).\nI just published  express-dropbox-oaut which is basically ready for production, but requires the fix, you just merged.  So until you release a new version i have to add cd ./node-modules/dropbox/ && npm install as a postinstall hook.\n(Right now im using my fork from this PR, but i'll change that)\nI don't like the fact that i have to care about the compilation of dependencies on my own.\nBut i see that this is a problem of npm and not of dropbox :)\nThanks a lot for your help ;)\n. Yeah, i see what i can do ;)\n. /push\nI'd like to use this in an ExpressJs application. But i do not want to publish a new npm module just for a typo fix.\n. Nice, Thank you for the merge!\nI use the git ref until you release a new version. That's no problem.\nAlso, thank you for the clarification on git urls as dependencies. I tried that but somehow npm refused to run post install hooks on my (unpublished) fork. I'll retry that or just use 641803d.\nI'd like to write down some documentation about how to write an AuthDriver for node apps using express and contribute that as a new PR. Is that cool for you or should i do this somewhere else?\n. Yeah, i rechecked it. Problem is:\nWhen you install from somewhere else than npm the lib folder is empty since cake build is only executed before publishing to npm.\nFix would be a post install hook that executes a cake build.\nGoing to open a PR for that.\n. Closing, as i don't think it's a good solution to install so much dev-dependencies just for one single build. Any discussion or tipps are more than welcome.\n. Yeah, a college of mine (npm contributor) told me basically the same. He mentioned, that i could use npm install -f in order to force a full installation of all dependencies.\nAs i said, i'm not happy with the solution i added here (thats why i closed).\nI just published  express-dropbox-oaut which is basically ready for production, but requires the fix, you just merged.  So until you release a new version i have to add cd ./node-modules/dropbox/ && npm install as a postinstall hook.\n(Right now im using my fork from this PR, but i'll change that)\nI don't like the fact that i have to care about the compilation of dependencies on my own.\nBut i see that this is a problem of npm and not of dropbox :)\nThanks a lot for your help ;)\n. Yeah, i see what i can do ;)\n. ",
    "hansgill": "wierd but now the error message is the following....and I didn't change a thing\nApiError\nmethod: \"GET\"\nresponse: Object\nresponseText: \"{\"error\": \"No auth method found.\"}\"\nstatus: 401\nurl: \"https://api.dropbox.com/1/account/info?client_id=k4qmadfasdf112e2\"\n__proto__: ApiError\n. Thanks @smarx I went with the first option and it's working fine. I clearly didn't have the right understanding of how the client library was functioning :) :+1: \n. wierd but now the error message is the following....and I didn't change a thing\nApiError\nmethod: \"GET\"\nresponse: Object\nresponseText: \"{\"error\": \"No auth method found.\"}\"\nstatus: 401\nurl: \"https://api.dropbox.com/1/account/info?client_id=k4qmadfasdf112e2\"\n__proto__: ApiError\n. Thanks @smarx I went with the first option and it's working fine. I clearly didn't have the right understanding of how the client library was functioning :) :+1: \n. ",
    "roufamatic": "missed something\n. missed something\n. ",
    "dwetterau": "Hello all,\nI would really love to see these changes merged so I decided to take a look at this PR. \n@ehfeng The error you're getting is a failing test because there are still some issues with the optional parameters logic. The first issue is that a cursor can be a string (which is used in the \"with a bad cursor\" test and is described in the documentation above the method). The second is that in your current PR, the last else if can never be executed because it is strictly more restrictive than the preceding else if. I think the following is a better approach for checking the optional parameters and works with the existing tests:\n``` coffeescript\nReturns if a parameter was a cursor or not\nisCursor = (param) ->\n  (typeof param is 'object' and param.cursorTag) or typeof param is 'string'\nif (not options) and (not callback) and (typeof cursor is 'function')\n  callback = cursor\n  cursor = null\n  options = null\nif options were not passed but cursor was passed\nelse if (not callback) and (typeof options is 'function') and isCursor(cursor)\n  callback = options\n  options = null\nif cursor was not passed but options were passed\nelse if (not callback) and (typeof options is 'function') and not isCursor(cursor)\n  callback = options\n  cursor = null\n  options = cursor\n```\nI also am a little confused as to why you were allowing the options to be passed in from the cursor object or the options object. I suppose it could simplify subsequent calls to the pullChanges function (by not having to pass in options) but I'm not sure you really gain anything from that. In the diff below I took this out (as well as the storing of options in pullChanges) because you weren't passing these options into the parse method anyway (line 1128 of client.coffee).\nIf you're not interested in working on this anymore @ehfeng I don't mind writing some tests to make sure this works. Really looking forward to these changes!\ndiff file with above changes\n. Hello all,\nI would really love to see these changes merged so I decided to take a look at this PR. \n@ehfeng The error you're getting is a failing test because there are still some issues with the optional parameters logic. The first issue is that a cursor can be a string (which is used in the \"with a bad cursor\" test and is described in the documentation above the method). The second is that in your current PR, the last else if can never be executed because it is strictly more restrictive than the preceding else if. I think the following is a better approach for checking the optional parameters and works with the existing tests:\n``` coffeescript\nReturns if a parameter was a cursor or not\nisCursor = (param) ->\n  (typeof param is 'object' and param.cursorTag) or typeof param is 'string'\nif (not options) and (not callback) and (typeof cursor is 'function')\n  callback = cursor\n  cursor = null\n  options = null\nif options were not passed but cursor was passed\nelse if (not callback) and (typeof options is 'function') and isCursor(cursor)\n  callback = options\n  options = null\nif cursor was not passed but options were passed\nelse if (not callback) and (typeof options is 'function') and not isCursor(cursor)\n  callback = options\n  cursor = null\n  options = cursor\n```\nI also am a little confused as to why you were allowing the options to be passed in from the cursor object or the options object. I suppose it could simplify subsequent calls to the pullChanges function (by not having to pass in options) but I'm not sure you really gain anything from that. In the diff below I took this out (as well as the storing of options in pullChanges) because you weren't passing these options into the parse method anyway (line 1128 of client.coffee).\nIf you're not interested in working on this anymore @ehfeng I don't mind writing some tests to make sure this works. Really looking forward to these changes!\ndiff file with above changes\n. ",
    "imskull": "Great, seems fixed on master. it returns \"User canceled authorization\".\n. Great, seems fixed on master. it returns \"User canceled authorization\".\n. ",
    "marxo": "+1 on this question. @maqboolkhan How did you get the token to work? It doesn't work at all on my side. I want my app to use my account always, however, when I generate an access token and add it here, it freezes. Anyone?\n. All 200 OK. I host the index.html inside my Dropbox, and the isAuthenticated() returns true.\n. BTW I've also ran curl https://api.dropbox.com/1/metadata/auto -H \"Authorization:Be\narer my-token-here\" from Terminal with success.\n. @pwnall Nope, no /metadata call in the Network tab. I'll check if I can disclose the snippet and get back to you if it's ok.\n. +1 on this question. @maqboolkhan How did you get the token to work? It doesn't work at all on my side. I want my app to use my account always, however, when I generate an access token and add it here, it freezes. Anyone?\n. All 200 OK. I host the index.html inside my Dropbox, and the isAuthenticated() returns true.\n. BTW I've also ran curl https://api.dropbox.com/1/metadata/auto -H \"Authorization:Be\narer my-token-here\" from Terminal with success.\n. @pwnall Nope, no /metadata call in the Network tab. I'll check if I can disclose the snippet and get back to you if it's ok.\n. ",
    "nathanhammond": "Somehow not automagically closed. Closing.\n. You have no idea. The callback was being executed twice with exceedingly strange side effects, swallowing the original error, and throwing an entirely separate nonsensical error on the second time through. :)\nMy sanity has been restored.\n. From a GitHub search it appears that literally nobody is using BrowserBase#resumeAuthorize. The developer user interface into this feature is rather rough. It could be worth cleaning up the API and writing more documentation on this feature to make it more worthwhile.\n. I'm building a client-side implementation in an Ember application.\nWhat I've just discovered from what you've said is that resuming the authentication process also requires a call to Dropbox.Client#authenticate ... which eliminates pretty much all of the mess that I was doing. I was recreating by way of reverse-engineering that process, thus needing to dive way under the covers to keep things moving forward.\nSince I was programmatically triggering the first call instead of it merely happening on load and then trying to progress from there such that I could make API calls, the end result is that mess that I created above. :)\nI'm closing this, look for a PR to add a bit of documentation about using Dropbox.Client#authenticate as it is not mentioned anywhere I can find that calling it again resumes the process.\n. Here is the solution I went with:\njs\n// An AuthDriver that is safe to call blindly without going full interactive.\nfunction InspectingAuthDriver() {\n  this.firstAttempt = true;\n  Dropbox.AuthDriver.Redirect.apply(this, Array.prototype.slice.call(arguments));\n}\nInspectingAuthDriver.prototype = Object.create(Dropbox.AuthDriver.Redirect.prototype);\nInspectingAuthDriver.prototype.constructor = InspectingAuthDriver;\nInspectingAuthDriver.prototype.onAuthStepChange = function(client, callback) {\n  // Ignores Dropbox.Client.RESET.\n  if (client.authStep === Dropbox.Client.ERROR || client.authStep >= Dropbox.Client.PARAM_LOADED) {\n    // Makes subsequent attempts work first try.\n    this.firstAttempt = false;\n  } else if (client.authStep === Dropbox.Client.PARAM_SET && this.firstAttempt === true) {\n    // Swallows the first call that would result in a redirect.\n    this.firstAttempt = false;\n    client.reset();\n    return;\n  }\n  Dropbox.AuthDriver.Redirect.prototype.onAuthStepChange.call(this, client, callback);\n};\n. As an aside, here is an example of how I'm handling consumption of read-only API endpoints:\n``` js\n/ global dbclient /\nvar response = new Promise(function(resolve, reject) {\n    dbclient.metadata(path, { readDir: true }, function(error, Stat, ChildStats) {\n      ChildStats = ChildStats || [];\n      if (error) {\n        reject(error);\n      } else {\n        Stat = Stat._json;\n        Stat.contents = ChildStats.map(function(item) { return item._json; });\n        resolve(Stat);\n      }\n    });\n  });\n// DataLibrary.load(response);\n// response.then(function(value) { ... });\n``\n1. I wrap the entire thing in a promise. More and more data libraries are promise-aware and do the right thing when passed a promise.\n2. I shuck theDropbox...object. Taking a look at your [response object example](https://github.com/dropbox/dropbox-js/blob/stable/src/file/stat.coffee) it does only a few things:\n   - Duplicatively documents the API response from the [Core API HTTP docs](https://www.dropbox.com/developers/core/docs#metadata) which can now get out of sync from the primary source.\n   - Provides instance methods for getting the original JSON back.\n   - Mild data normalization efforts in the constructor (I would argue that this should be handled by the server, not the client).\n   - Creation of a few pieces of \"composed\" information. I would argue that any API client is part of the data layer and that no transformation should be done at the data layer. Also, how do you protect users against possible future collisions?\n   - Provides a static method to get anotherDropbox.File.Stat` instance. (Tail recursion: see above thoughts.)\n3. In terms of making it easier to test I would argue that testing should only cover code up to the boundaries of the service you are consuming. In read-only endpoints this basically entails sending malformed requests and properly handling errors. With writable endpoints you can write-then-read as a way to imply correctness, but those can only be integration tests that can fail for \"third-party\" code reasons even if your code is 100% correct.\nI'm beginning to realize that my desires for an API client are rather different and as such I might be better-suited rolling my own. :/\n. Somehow not automagically closed. Closing.\n. You have no idea. The callback was being executed twice with exceedingly strange side effects, swallowing the original error, and throwing an entirely separate nonsensical error on the second time through. :)\nMy sanity has been restored.\n. From a GitHub search it appears that literally nobody is using BrowserBase#resumeAuthorize. The developer user interface into this feature is rather rough. It could be worth cleaning up the API and writing more documentation on this feature to make it more worthwhile.\n. I'm building a client-side implementation in an Ember application.\nWhat I've just discovered from what you've said is that resuming the authentication process also requires a call to Dropbox.Client#authenticate ... which eliminates pretty much all of the mess that I was doing. I was recreating by way of reverse-engineering that process, thus needing to dive way under the covers to keep things moving forward.\nSince I was programmatically triggering the first call instead of it merely happening on load and then trying to progress from there such that I could make API calls, the end result is that mess that I created above. :)\nI'm closing this, look for a PR to add a bit of documentation about using Dropbox.Client#authenticate as it is not mentioned anywhere I can find that calling it again resumes the process.\n. Here is the solution I went with:\njs\n// An AuthDriver that is safe to call blindly without going full interactive.\nfunction InspectingAuthDriver() {\n  this.firstAttempt = true;\n  Dropbox.AuthDriver.Redirect.apply(this, Array.prototype.slice.call(arguments));\n}\nInspectingAuthDriver.prototype = Object.create(Dropbox.AuthDriver.Redirect.prototype);\nInspectingAuthDriver.prototype.constructor = InspectingAuthDriver;\nInspectingAuthDriver.prototype.onAuthStepChange = function(client, callback) {\n  // Ignores Dropbox.Client.RESET.\n  if (client.authStep === Dropbox.Client.ERROR || client.authStep >= Dropbox.Client.PARAM_LOADED) {\n    // Makes subsequent attempts work first try.\n    this.firstAttempt = false;\n  } else if (client.authStep === Dropbox.Client.PARAM_SET && this.firstAttempt === true) {\n    // Swallows the first call that would result in a redirect.\n    this.firstAttempt = false;\n    client.reset();\n    return;\n  }\n  Dropbox.AuthDriver.Redirect.prototype.onAuthStepChange.call(this, client, callback);\n};\n. As an aside, here is an example of how I'm handling consumption of read-only API endpoints:\n``` js\n/ global dbclient /\nvar response = new Promise(function(resolve, reject) {\n    dbclient.metadata(path, { readDir: true }, function(error, Stat, ChildStats) {\n      ChildStats = ChildStats || [];\n      if (error) {\n        reject(error);\n      } else {\n        Stat = Stat._json;\n        Stat.contents = ChildStats.map(function(item) { return item._json; });\n        resolve(Stat);\n      }\n    });\n  });\n// DataLibrary.load(response);\n// response.then(function(value) { ... });\n``\n1. I wrap the entire thing in a promise. More and more data libraries are promise-aware and do the right thing when passed a promise.\n2. I shuck theDropbox...object. Taking a look at your [response object example](https://github.com/dropbox/dropbox-js/blob/stable/src/file/stat.coffee) it does only a few things:\n   - Duplicatively documents the API response from the [Core API HTTP docs](https://www.dropbox.com/developers/core/docs#metadata) which can now get out of sync from the primary source.\n   - Provides instance methods for getting the original JSON back.\n   - Mild data normalization efforts in the constructor (I would argue that this should be handled by the server, not the client).\n   - Creation of a few pieces of \"composed\" information. I would argue that any API client is part of the data layer and that no transformation should be done at the data layer. Also, how do you protect users against possible future collisions?\n   - Provides a static method to get anotherDropbox.File.Stat` instance. (Tail recursion: see above thoughts.)\n3. In terms of making it easier to test I would argue that testing should only cover code up to the boundaries of the service you are consuming. In read-only endpoints this basically entails sending malformed requests and properly handling errors. With writable endpoints you can write-then-read as a way to imply correctness, but those can only be integration tests that can fail for \"third-party\" code reasons even if your code is 100% correct.\nI'm beginning to realize that my desires for an API client are rather different and as such I might be better-suited rolling my own. :/\n. ",
    "andersevenrud": "Thank you! Exactly what I wanted. Working perfectly :)\n. Thank you! Exactly what I wanted. Working perfectly :)\n. ",
    "DavidR91": "I am seeing the same behaviour when specifying the key and a pre-generated access token\nI'm assuming this is an auth bug somewhere \nUnfortunately I' can't contribute any useful network trace because the machine that is experiencing this is a console-only server\n. Looking here, the problem seems to be that whilst the constructor comments state it can take options.token... it doesn't appear to actually make use of it?\n. I am seeing the same behaviour when specifying the key and a pre-generated access token\nI'm assuming this is an auth bug somewhere \nUnfortunately I' can't contribute any useful network trace because the machine that is experiencing this is a console-only server\n. Looking here, the problem seems to be that whilst the constructor comments state it can take options.token... it doesn't appear to actually make use of it?\n. ",
    "sashahilton00": "Ok, will attempt that, could you help me with one other thing, namely accessing the getStateParam() function, I cannot get my client to read it, no matter what I do. Here is a snippet of the code, if it helps ;)\nvar dropbox = new Dbox.Client({ key: \"***\" });\ndropbox.authDriver(new Dbox.AuthDriver.NodeServer({port: \"7640\"}));\n$(function() {\ndropbox.authenticate({interactive: false}, function(error, client) {\nif (error) {\n//return handleError(error);\n}\nif (dropbox.isAuthenticated()) {\nThanks.\n. Sorry about that, just realised I typed the wrong thing into the comment box ;) I was meaning to ask whether there was a hook in dropbox.authenticate that allowed me to override the open in browser feature by specifying a window.open instance. Anyway, not to worry, I have solved it by rewriting the NodeServer module a little so that it is compatible with node-webkit in the sense that it now displays a popup window that closes after successful authentication. What I was wondering is, as the nodeserver is meant for automated test suites, is there any method to get the access token, like client.accesstoken(), or   do I need to build that in as well?\nThanks :)\n. I would use the standard oauth with the receiver callback, but node-webkit doesn't expose URL's outside the application, thus it doesn't work. I will have a look at the auth feature of the cordova driver, and see what i can do ;)\n. Thanks for spending the time to put that together, I must confess, I have never used coffee, so it is a bit odd for me also ;) it's 1am here, so will probably leave it for tonight, but will give it a go tomorrow and let you know how it goes :)\n. I couldn't get the Popup driver working, but the NWAuthDriver you made works a treat ;) There are a few small things that need tweaking, but nothing I shouldn't be able to sort out. The only problem I can't seem to wrap my head around, is that if I close the popup window for dropbox, the error registered in the NWAuthDriver.js file doesn't seem to have registered, so the app crashes when a user clicks cancel. Any ideas? Thanks for all your help so far ;)\n. will give the popup auth another go tomorrow ;)\n. Ok, I got the Popup working, you are right it is a much neater solution. Turns out nw.js is picky about uppercase. Is there any scope for passing options to the window opened by the Popup Driver?\n. Ok, will attempt that, could you help me with one other thing, namely accessing the getStateParam() function, I cannot get my client to read it, no matter what I do. Here is a snippet of the code, if it helps ;)\nvar dropbox = new Dbox.Client({ key: \"***\" });\ndropbox.authDriver(new Dbox.AuthDriver.NodeServer({port: \"7640\"}));\n$(function() {\ndropbox.authenticate({interactive: false}, function(error, client) {\nif (error) {\n//return handleError(error);\n}\nif (dropbox.isAuthenticated()) {\nThanks.\n. Sorry about that, just realised I typed the wrong thing into the comment box ;) I was meaning to ask whether there was a hook in dropbox.authenticate that allowed me to override the open in browser feature by specifying a window.open instance. Anyway, not to worry, I have solved it by rewriting the NodeServer module a little so that it is compatible with node-webkit in the sense that it now displays a popup window that closes after successful authentication. What I was wondering is, as the nodeserver is meant for automated test suites, is there any method to get the access token, like client.accesstoken(), or   do I need to build that in as well?\nThanks :)\n. I would use the standard oauth with the receiver callback, but node-webkit doesn't expose URL's outside the application, thus it doesn't work. I will have a look at the auth feature of the cordova driver, and see what i can do ;)\n. Thanks for spending the time to put that together, I must confess, I have never used coffee, so it is a bit odd for me also ;) it's 1am here, so will probably leave it for tonight, but will give it a go tomorrow and let you know how it goes :)\n. I couldn't get the Popup driver working, but the NWAuthDriver you made works a treat ;) There are a few small things that need tweaking, but nothing I shouldn't be able to sort out. The only problem I can't seem to wrap my head around, is that if I close the popup window for dropbox, the error registered in the NWAuthDriver.js file doesn't seem to have registered, so the app crashes when a user clicks cancel. Any ideas? Thanks for all your help so far ;)\n. will give the popup auth another go tomorrow ;)\n. Ok, I got the Popup working, you are right it is a much neater solution. Turns out nw.js is picky about uppercase. Is there any scope for passing options to the window opened by the Popup Driver?\n. ",
    "antelle": "For anyone interested, I've created working Electron auth driver, here's the source code. To make this work, in main app process, you should add:\njavascript\nrequire('app').openWindow = function(opts) {\n    var BrowserWindow = require('browser-window');\n    return new BrowserWindow(opts);\n};\n. For anyone interested, I've created working Electron auth driver, here's the source code. To make this work, in main app process, you should add:\njavascript\nrequire('app').openWindow = function(opts) {\n    var BrowserWindow = require('browser-window');\n    return new BrowserWindow(opts);\n};\n. ",
    "aseemk": "@pwnall: I'm facing this too (https://github.com/thingdom/node-neo4j/issues/148). :smile:\nI've been thinking of a couple of options:\n- Simply check in the generated docs and expose via gh-pages.\n- Manually write the documentation as Markdown files checked into the repo. I always felt that the iframed Codo viewer wasn't very user-friendly anyway. (E.g. as you navigate, the browser URL doesn't change, so sharing a particular link with someone involves manual work, and then that link doesn't have the outer navigational iframes.)\n- Simply take the coffeedoc.info repo and spin up a new instance on Nodejitsu or Heroku just for the library's docs. One instance on Heroku is free (don't know about Nodejitsu). The only downside is a custom domain would cost $$.\nEdit: the only/main benefit of the last option over gh-pages is it could do the same webhook thing to automatically update based on commits, rather than manual updates to gh-pages.\n. Ah ok, good to know.\nI don't think I can commit to helping out w/ that effort right now, sorry! Have my hands more than full at work at the moment (big things spinning up that I can't talk about yet... :smile:).\nIn that case, I'd consider going the gh-pages route. Can be manual updates for now, but may not be too hard to set up a git commit hook that auto-updates it down the road.\n. I gave the latest Codo a stab today locally on the new code I'm writing, and unfortunately, I'm running into issues there too:\nhttps://github.com/coffeedoc/codo/issues/194\nhttps://github.com/coffeedoc/codo/issues/195\nGiven those issues, I'm leaning towards simply writing manual Markdown documentation instead, and just checking it into the repo under a docs/ directory. GitHub renders it well enough I suppose...\n. It looks like coffeedoc.info is back! https://github.com/coffeedoc/coffeedoc.info/issues/9\n. @pwnall: I'm facing this too (https://github.com/thingdom/node-neo4j/issues/148). :smile:\nI've been thinking of a couple of options:\n- Simply check in the generated docs and expose via gh-pages.\n- Manually write the documentation as Markdown files checked into the repo. I always felt that the iframed Codo viewer wasn't very user-friendly anyway. (E.g. as you navigate, the browser URL doesn't change, so sharing a particular link with someone involves manual work, and then that link doesn't have the outer navigational iframes.)\n- Simply take the coffeedoc.info repo and spin up a new instance on Nodejitsu or Heroku just for the library's docs. One instance on Heroku is free (don't know about Nodejitsu). The only downside is a custom domain would cost $$.\nEdit: the only/main benefit of the last option over gh-pages is it could do the same webhook thing to automatically update based on commits, rather than manual updates to gh-pages.\n. Ah ok, good to know.\nI don't think I can commit to helping out w/ that effort right now, sorry! Have my hands more than full at work at the moment (big things spinning up that I can't talk about yet... :smile:).\nIn that case, I'd consider going the gh-pages route. Can be manual updates for now, but may not be too hard to set up a git commit hook that auto-updates it down the road.\n. I gave the latest Codo a stab today locally on the new code I'm writing, and unfortunately, I'm running into issues there too:\nhttps://github.com/coffeedoc/codo/issues/194\nhttps://github.com/coffeedoc/codo/issues/195\nGiven those issues, I'm leaning towards simply writing manual Markdown documentation instead, and just checking it into the repo under a docs/ directory. GitHub renders it well enough I suppose...\n. It looks like coffeedoc.info is back! https://github.com/coffeedoc/coffeedoc.info/issues/9\n. ",
    "ChALkeR": "Not a solution. The links there don't work.\n. The links there don't work. Try opening the first class in the class index.\n. Not a solution. The links there don't work.\n. The links there don't work. Try opening the first class in the class index.\n. ",
    "anuragpeshne": "it worked. Thanks.\n. it worked. Thanks.\n. ",
    "jenbennings": "Bear with me, I'm still quite new to javascript so I'm going to think this one through out loud...\nSo after doing a bit of digging in the coffeescript source, I see that this is part of an if statement that checks what environment the app is running. Basically, the end result declares two objects (or slight variants thereof):\njs\n  DbxEnvGlobal = global;\n  module.exports = Dropbox;\nAs it is executing the node.js part of the if statement, I presume that it is meeting the following conditions:\ncoffeescript\nif typeof global isnt 'undefined' and typeof module isnt 'undefined' and\n    'exports' of module\nEven though I'm not using node.js, I'd like to use commonjs modules so I can require dropbox-js where needed in the app. Is there a way I can fix this without modifying the lib manually?\n. Bear with me, I'm still quite new to javascript so I'm going to think this one through out loud...\nSo after doing a bit of digging in the coffeescript source, I see that this is part of an if statement that checks what environment the app is running. Basically, the end result declares two objects (or slight variants thereof):\njs\n  DbxEnvGlobal = global;\n  module.exports = Dropbox;\nAs it is executing the node.js part of the if statement, I presume that it is meeting the following conditions:\ncoffeescript\nif typeof global isnt 'undefined' and typeof module isnt 'undefined' and\n    'exports' of module\nEven though I'm not using node.js, I'd like to use commonjs modules so I can require dropbox-js where needed in the app. Is there a way I can fix this without modifying the lib manually?\n. ",
    "panzerdp": "Experiencing the same problem. I'm trying to use the library with browserify.\nAny update on this from the author?\nThanks.\n. Experiencing the same problem. I'm trying to use the library with browserify.\nAny update on this from the author?\nThanks.\n. ",
    "mlusetti": "Same issue here.\nYep, you cannot use the npm version \"outside node\" you can patch the module or simply use: https://github.com/lavelle/dropbox which shim it with bower.\nAnyway even with bower dropbox end to be in the global\n. Same issue here.\nYep, you cannot use the npm version \"outside node\" you can patch the module or simply use: https://github.com/lavelle/dropbox which shim it with bower.\nAnyway even with bower dropbox end to be in the global\n. ",
    "sashaperigo": "I'd love to see this sorted for Webpack in addition to Browserify!\n. I'd love to see this sorted for Webpack in addition to Browserify!\n. ",
    "ngalluzzo": "Any luck fixing this on Webpack?\n. Any luck fixing this on Webpack?\n. ",
    "mrfr0g": "@sashaperigo @ngalluzzo If you're using webpack, you can include the library from the CDN in your HTML template, and include 'Dropbox' in the externals config.\nexample.html\n<head>\n    <meta charset=\"utf-8\">\n    <title>example</title>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js\"></script>\n  </head>\nwebpack.config.js\n```\nmodule.exports = {\nexternals: {\n    'dropbox' : 'Dropbox'\n  },\n};\n```\nThen require the library when you need to use it.\napp.js\nvar Dropbox = require(\"dropbox\");\nnew Dropbox.Client({ key: \"key\" }).authenticate(...)\nWebpack Externals\nhttps://webpack.github.io/docs/library-and-externals.html\n. @sashaperigo @ngalluzzo If you're using webpack, you can include the library from the CDN in your HTML template, and include 'Dropbox' in the externals config.\nexample.html\n<head>\n    <meta charset=\"utf-8\">\n    <title>example</title>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js\"></script>\n  </head>\nwebpack.config.js\n```\nmodule.exports = {\nexternals: {\n    'dropbox' : 'Dropbox'\n  },\n};\n```\nThen require the library when you need to use it.\napp.js\nvar Dropbox = require(\"dropbox\");\nnew Dropbox.Client({ key: \"key\" }).authenticate(...)\nWebpack Externals\nhttps://webpack.github.io/docs/library-and-externals.html\n. ",
    "koliyo": "+1, same problem here with a react webpack application\n. +1, same problem here with a react webpack application\n. ",
    "puuro": "I think your authentication example misses a ); \n. Behind that link in your previous answer.\n\"\nfunction auth_callback() {\n    if (client.isAuthenticated()) { ... }\n    else { ... }\n}\n$('#loginButton').click(function (e) {\n    e.preventDefault();\n    // Start the OAuth authorization process.\n    client.authenticate(auth_callback);\n}\n// Try to finish OAuth authorization.\nclient.authenticate({ interactive: false }, auth_callback);\n\"\nI guess it should be in the end: \n... \n);\nI'm trying to get it working in my app but it doesn't. But that's another topic.\n. I think your authentication example misses a ); \n. Behind that link in your previous answer.\n\"\nfunction auth_callback() {\n    if (client.isAuthenticated()) { ... }\n    else { ... }\n}\n$('#loginButton').click(function (e) {\n    e.preventDefault();\n    // Start the OAuth authorization process.\n    client.authenticate(auth_callback);\n}\n// Try to finish OAuth authorization.\nclient.authenticate({ interactive: false }, auth_callback);\n\"\nI guess it should be in the end: \n... \n);\nI'm trying to get it working in my app but it doesn't. But that's another topic.\n. ",
    "Tarang": "I'm getting this same error with a very very simple reproduction:\n```\nrequire(\"fs\").readFile(\"target.zip\", function(err, data) {\n                    client.writeFile(\"1234/\"+filestring+\".zip\", data, function(error, stat) {\n                      console.log(error, stat);\n                      require(\"fs\").unlinkSync(\"target.zip\");\n                  console.log(\"FINITO\");\n                  callback(null, true);\n                });\n            })\n\n```\nThe reproduction requires a specific environment. It works fine on OS X.\nHowever on (Ubuntu 14 with Node v0.10.37), tested on 2 different machines: one on AWS and one on DigitalOcean I get the above error repeatedly until a Maximum call stack exceeded error.\nIf there's a db engineer in here let me know your SSH public key i'll give you easy access to a reproduction\n. I'm getting this same error with a very very simple reproduction:\n```\nrequire(\"fs\").readFile(\"target.zip\", function(err, data) {\n                    client.writeFile(\"1234/\"+filestring+\".zip\", data, function(error, stat) {\n                      console.log(error, stat);\n                      require(\"fs\").unlinkSync(\"target.zip\");\n                  console.log(\"FINITO\");\n                  callback(null, true);\n                });\n            })\n\n```\nThe reproduction requires a specific environment. It works fine on OS X.\nHowever on (Ubuntu 14 with Node v0.10.37), tested on 2 different machines: one on AWS and one on DigitalOcean I get the above error repeatedly until a Maximum call stack exceeded error.\nIf there's a db engineer in here let me know your SSH public key i'll give you easy access to a reproduction\n. ",
    "lexar": "Great, thanks!\n. Great, thanks!\n. ",
    "ccheever": "Thanks Chris!\n. Thanks Chris!\n. ",
    "sdkcarlos": "@rodri042 Can you be more explicit with your example ? The file dropbox.js doesn't seems to have the DropboxApi class :+1: \n. @ogdans3 I just read the documentation and the following code did the trick for me \n``` javascript\nvar path = '/';\nclient.readdir(path, function(error, entries,dir,data) {\n            if (error) {\n                return showError(error);  // Something went wrong.\n            }\n\n            console.log(data); /// See all the folders and files in the path\n            data.forEach(function(seeObjectOfEveryItemFolderOrFile){\n                console.log(seeObjectOfEveryItemFolderOrFile);\n            });\n\n            html += '</ul>';\n        });\n\n```\nYou can manage your own listings, thanks for your answer @rodri042 \n. @rodri042 Can you be more explicit with your example ? The file dropbox.js doesn't seems to have the DropboxApi class :+1: \n. @ogdans3 I just read the documentation and the following code did the trick for me \n``` javascript\nvar path = '/';\nclient.readdir(path, function(error, entries,dir,data) {\n            if (error) {\n                return showError(error);  // Something went wrong.\n            }\n\n            console.log(data); /// See all the folders and files in the path\n            data.forEach(function(seeObjectOfEveryItemFolderOrFile){\n                console.log(seeObjectOfEveryItemFolderOrFile);\n            });\n\n            html += '</ul>';\n        });\n\n```\nYou can manage your own listings, thanks for your answer @rodri042 \n. ",
    "ogdans3": "Heres what i ended up doing:\nThis gets ALL the files and folders within someones dropbox account.\n```\nvar get_all_files_and_folders = function(list, cursor, errors, cb){\n    client.pullChanges(cursor, function(error, t){\n        list = list.concat(t.changes)\n        errors.push(error)\n        if(t.shouldPullAgain && !t.shouldBackOff){\n           get_all_files_and_folders(list, t.cursorTag, errors, cb)\n        }else{\n           if(cb){\n               cb(errors, list)\n           }\n        }\n    })\n}\nget_all_files_and_folders([], null, [], function(errors, changes){\n    //To get the stat of an answer do this, x is some element: \n    var stat = changes[x].stat\n})\n```\n@sdkcarlos Yours will only get the files within that particular path, and only one level deep, right? \nThe code above should get all files and folders within a dropbox account.\n. Heres what i ended up doing:\nThis gets ALL the files and folders within someones dropbox account.\n```\nvar get_all_files_and_folders = function(list, cursor, errors, cb){\n    client.pullChanges(cursor, function(error, t){\n        list = list.concat(t.changes)\n        errors.push(error)\n        if(t.shouldPullAgain && !t.shouldBackOff){\n           get_all_files_and_folders(list, t.cursorTag, errors, cb)\n        }else{\n           if(cb){\n               cb(errors, list)\n           }\n        }\n    })\n}\nget_all_files_and_folders([], null, [], function(errors, changes){\n    //To get the stat of an answer do this, x is some element: \n    var stat = changes[x].stat\n})\n```\n@sdkcarlos Yours will only get the files within that particular path, and only one level deep, right? \nThe code above should get all files and folders within a dropbox account.\n. ",
    "yellowBirdy": "Can we get a merge on this?\n. Can we get a merge on this?\n. ",
    "tejasmanohar": "Fair enough\n. Fair enough\n. ",
    "pketh": "@smarx that worked great, Thanks!\n. hmm you're right, the files were being created but my dropbox app crashed and things weren't being synced \nslaps forehead\nthx :)\n. @smarx that worked great, Thanks!\n. hmm you're right, the files were being created but my dropbox app crashed and things weren't being synced \nslaps forehead\nthx :)\n. ",
    "tresiwald": "It seems like there was a little timeout. The following code worked for me:\nsetTimeout(function(){\nif (error) {\nlogMessage(\"Error \" + error);\n}\nelse {\nalert(\"File written!\")\n}\n},200);\n. It seems like there was a little timeout. The following code worked for me:\nsetTimeout(function(){\nif (error) {\nlogMessage(\"Error \" + error);\n}\nelse {\nalert(\"File written!\")\n}\n},200);\n. ",
    "jvilk": "Thanks. That helps!\n. Thanks. That helps!\n. ",
    "shawnhwei": "You can actually still read them on wayback machine (archive.org) but it's a PITA. You could just copy all the pages to rehost. The v2 HTTP API is already accessible so maybe its better to transition away from this library anyways. The official v2 JS wrapper shouldn't be too far away as well.\n. I went ahead and hosted it myself if anyone needs it.\nhttps://docs.shawnh.net/dropbox-js/\n. Oops I was messing with configs. Once DNS refreshes it should be fixed.\n. No it doesn't seem like it is anymore. Honestly though, writing your own JS wrapper for the v2 API is pretty simple. It doesn't really take much more time than learning to use this library.\n. You can actually still read them on wayback machine (archive.org) but it's a PITA. You could just copy all the pages to rehost. The v2 HTTP API is already accessible so maybe its better to transition away from this library anyways. The official v2 JS wrapper shouldn't be too far away as well.\n. I went ahead and hosted it myself if anyone needs it.\nhttps://docs.shawnh.net/dropbox-js/\n. Oops I was messing with configs. Once DNS refreshes it should be fixed.\n. No it doesn't seem like it is anymore. Honestly though, writing your own JS wrapper for the v2 API is pretty simple. It doesn't really take much more time than learning to use this library.\n. ",
    "mayeaux": "Lol. What a joke. :\\ \n. hey @meetshawn , you've got some SSL cert issues that are disallowing me to see the docs\n. Cool thanks.\n. Got it working @meetshawn , thanks. But is it just me or is this project not even maintained? :\\\n. Lol /facepalm. I'm using https://github.com/sintaxi/dbox but should have probably just written my own library since it doesn't follow node callback conventions and I had to wrestle with it just to be able to Promisify the library using Bluebird lol. Thanks for uploading the docs nonetheless @meetshawn\n. Don't worry. It's not even like JS is becoming the most ubiquitous language on the web, who needs to support it! /sarc\n. Lol. What a joke. :\\ \n. hey @meetshawn , you've got some SSL cert issues that are disallowing me to see the docs\n. Cool thanks.\n. Got it working @meetshawn , thanks. But is it just me or is this project not even maintained? :\\\n. Lol /facepalm. I'm using https://github.com/sintaxi/dbox but should have probably just written my own library since it doesn't follow node callback conventions and I had to wrestle with it just to be able to Promisify the library using Bluebird lol. Thanks for uploading the docs nonetheless @meetshawn\n. Don't worry. It's not even like JS is becoming the most ubiquitous language on the web, who needs to support it! /sarc\n. ",
    "stemmlerjs": "I'm 100% with @EisenbergEffect on this one, it would be nice to see this\n. I'm 100% with @EisenbergEffect on this one, it would be nice to see this\n. ",
    "hedgerh": "Seriously.  No offense to the people that have put hard work into this lib, but it's not very pleasant to use, not particularly well documented, and doesn't even work on the browser side.\nPretty painful trying to integrate services with your platform.\n. For everyone interested, I've been using purest and grant for all of my oAuth needs in node.js, as opposed to the official SDKs, and it has been working nicely.  Check out https://github.com/simov/purest\nThis article helped me a lot, as well:\nhttps://scotch.io/tutorials/implement-oauth-into-your-express-koa-or-hapi-applications-using-grant\n. Seriously.  No offense to the people that have put hard work into this lib, but it's not very pleasant to use, not particularly well documented, and doesn't even work on the browser side.\nPretty painful trying to integrate services with your platform.\n. For everyone interested, I've been using purest and grant for all of my oAuth needs in node.js, as opposed to the official SDKs, and it has been working nicely.  Check out https://github.com/simov/purest\nThis article helped me a lot, as well:\nhttps://scotch.io/tutorials/implement-oauth-into-your-express-koa-or-hapi-applications-using-grant\n. ",
    "kenjiru": "Why don't you support this library while developing a better alternative? A lot of people want to use the service but it's hard without a decent library. \n. Why don't you support this library while developing a better alternative? A lot of people want to use the service but it's hard without a decent library. \n. ",
    "moappi": "We've been using this library but now going to V2 we would have to develop something on our own in order to get this to work with node.js.  Hoping that Dropbox releases something soon for V2 for node.js \n. We've been using this library but now going to V2 we would have to develop something on our own in order to get this to work with node.js.  Hoping that Dropbox releases something soon for V2 for node.js \n. ",
    "rqhub": "Same here\n. works.\nThx\nLe 22 juin 2016 \u00e0 05:17, Ken Elkabany a \u00e9crit :\n\nAny chance you all can try out our new SDK? https://github.com/dropbox/dropbox-sdk-js\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yups. Wondering if db is loosing momentum.\n. Same here\n. works.\nThx\n\nLe 22 juin 2016 \u00e0 05:17, Ken Elkabany a \u00e9crit :\n\nAny chance you all can try out our new SDK? https://github.com/dropbox/dropbox-sdk-js\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yups. Wondering if db is loosing momentum.\n. \n",
    "jdibling": "As little as I want to be that guy who says \"I'm having that problem as well,\" I am too. When I tried to look further into it and creating a client (As it said in the initialazion section) it instructed me to create the dropbox client using the following link:\nhttp://coffeedoc.info/github/dropbox/dropbox-js/master/classes/Dropbox/Client.html\nHowever, the server is down and the domain is lost, as stated by the devs: \nhttps://github.com/coffeedoc/coffeedoc.info#the-website\nI don't know how to work around this and I may just be overlooking something completely. Hopefully this at least helps lead someone to a solution!\n. Perfect, thank you so much!\n. As little as I want to be that guy who says \"I'm having that problem as well,\" I am too. When I tried to look further into it and creating a client (As it said in the initialazion section) it instructed me to create the dropbox client using the following link:\nhttp://coffeedoc.info/github/dropbox/dropbox-js/master/classes/Dropbox/Client.html\nHowever, the server is down and the domain is lost, as stated by the devs: \nhttps://github.com/coffeedoc/coffeedoc.info#the-website\nI don't know how to work around this and I may just be overlooking something completely. Hopefully this at least helps lead someone to a solution!\n. Perfect, thank you so much!\n. ",
    "mfissehaye": "Perfect.\n. Perfect.\n. ",
    "ranthonissen": "It is awesome, but it doesn't support download and upload yet. Which makes it it useless in lots of cases.\nSo don't forget to mention that little detail too :)\n. It is awesome, but it doesn't support download and upload yet. Which makes it it useless in lots of cases.\nSo don't forget to mention that little detail too :)\n. ",
    "TomasKulhanek": "Check which dropbox-*.js is imported. Have similar error \"doesn raise the \"Dropbox is not a constructor\" if I import the dropbox-sdk.js. The Dropbox-sdk.min.js seems to work well and fix the issue. \n{\n            \"name\":\"dropbox\",\n            \"path\": \"../node_modules/dropbox/dist\",\n            \"main\": \"Dropbox-sdk.min.js\"\n          }\nThus the following code works.\n```\nimport 'dropbox';\n...\n      var Dropbox = require(\"dropbox\");\n  var dbx = new Dropbox({\n    clientId: \"my_client_id\"\n  });\n\n. Check which dropbox-*.js is imported. Have similar error \"doesn raise the \"Dropbox is not a constructor\" if I import the dropbox-sdk.js. The Dropbox-sdk.min.js seems to work well and fix the issue.\n{\n            \"name\":\"dropbox\",\n            \"path\": \"../node_modules/dropbox/dist\",\n            \"main\": \"Dropbox-sdk.min.js\"\n          }\nThus the following code works.\nimport 'dropbox';\n...\n      var Dropbox = require(\"dropbox\");\n  var dbx = new Dropbox({\n    clientId: \"my_client_id\"\n  });\n\n```\n. ",
    "saularis": "Error: Uncaught TypeError: Dropbox.Client is not a constructor.\nPlease check if you can help me with the following code sample \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.5/require.min.js\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js\"></script>\n    <script>\n        var Dropbox = require(['dropbox']);\n        var client = new Dropbox.Client({\n            key: \"x\",\n            secret: \"x\"\n        });\n        client.authenticate(function () {\n            client.writeFile('hello.txt', 'Hello, World!', function () {\n                alert('File written!');\n            });\n        });\n    </script>. Error: Uncaught TypeError: Dropbox.Client is not a constructor.\nPlease check if you can help me with the following code sample \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.5/require.min.js\"></script>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/dropbox.js/0.10.2/dropbox.min.js\"></script>\n    <script>\n        var Dropbox = require(['dropbox']);\n        var client = new Dropbox.Client({\n            key: \"x\",\n            secret: \"x\"\n        });\n        client.authenticate(function () {\n            client.writeFile('hello.txt', 'Hello, World!', function () {\n                alert('File written!');\n            });\n        });\n    </script>. "
}