{
    "kasperisager": "Thanks heaps for the PR! I take it this is specific to some adapters only? MongoDB didn't seem to complain about the missing via.\n. Ah, I guess it's a new feature :smile: I tested the generator with both the memory, disk and mongo adapters and didn't get any errors back then. Thanks again for fixing it!\n. Wicked, thanks for the PR!\n. Ah, that does seem like the sane thing to do :+1: \n. Thanks heaps for the fix!\n. B\u00f8rk, b\u00f8rk, b\u00f8rk! Thanks! :thumbsup: \n. Totally missed that one, thanks!\n. Sweet, thanks! Merging right away :thumbsup:\n. Sorry about the delay\u2014it's been a hectic couple of weeks. I'll take your changes for a spin ASAP :+1: \n. Thanks! I'll hopefully be able to test this out sometime during the weekend.\n. The Passport model is only meant to store authentication data and not meta information related to the user. It would however be nice to have a way of easily storing extra profile meta in, say, a Profile model. What I imagine is something like this:\n- The User model would identify a unique user of your application.\n- The Passport model would associate one or more authentication methods with a given User.\n- The Profile model would associate meta information such as real name, bio, birthday, social profiles, etc. with a given User.\n. Any chance you could keep the comments intact? Other than that, this is looking mighty fine!\n. Perfect, thanks!\n. Looks good to me\u2014should be a fine stopgap measure until transactions are supported.\n. Thanks again!\n. Missed that one, thanks!\n. This would explain the behaviour seen in #43. Thanks for the fix!\n. Looks great, thanks for the PR! I'll be on vacation for another week but will take your changes for a spin as soon as I'm back home.\n. Looking good so far! I left a couple of comments here and there. A rebase against master is also needed. Thanks again!\n. This is not in line with the default config example where every service configuration is a key of sails.config.passport, e.g. sails.config.passport.twitter.\n. Thanks a ton for the fix! Any chance you could adjust beforeCreate() as well?\n. I definitely should refactor it since both functions are indeed identical. Thanks again though!\n. Sweet, thanks for the fix! Any chance you could add a check to make sure a valid provider exists before performing the query? Without a provider there's no way to identify a given passport. Also, could you make sure you make use of the provided .editorconfig?\nThanks again!\n. Thanks!\n. Thanks for the tweak! Any chance you could change the indentation to match that specified in the .editorconfig?\n. The docs I linked to are from bcryptjs. You shouldn't need the noop'ed function.\n. As pointed out in #71, bcryptjs is the library of choice and NOT bcrypt-nodejs. Could you adjust the implementation accordingly?\n. Gee, that's embarrassing. Thanks for the fix!\n. This was due to a bug I caused during a refactor which should have been fixed now.\n. I feel like this adds a lot of complexity to the error message handling. The validationError object you've introduced is very similar to Waterline's error objects\u2014which is perfectly fine on the server\u2014but doesn't quite fit into the way I personally prefer handling errors on the client.\n. Closing as the project is no longer maintained.\n. One thing I definitely dislike is the inclusion of the isEmail() function. The dependency on Validator is preferred.\n. I'm also not encountering the issue described in balderdashy/waterline#620: Upon attempting to create a local user with an invalid password, the user is deleted after the passport creation has failed (as expected).\n. My point was that no solution is needed\u2013I'm not encountering the issue described.\n. I misunderstood the issue in that case. A more thorough PR description wouldn't have been a bad thing :wink:\nI'm now trying to understand the use case for this; when would it be needed to create a user outside the authentication layer?\n. In that case I'd probably prefer implementing the user/passport creation logic where needed\u2014maybe in a user controller\u2013rather than rely on methods from the passport service.\n. Whoops, thanks!\n. Woop woop, thanks!\n. See my response here: https://github.com/kasperisager/sails-generate-auth/issues/100#issuecomment-58997118\n. identifier must never be null, otherwise there's no way to identify a passport.\n. That's not the case since the provider key is also passed to the query.\n. Then everything but the initial registration/login will fail since there won't be a way to identify the passport in the future.\n. There's no way to ensure that a provider doesn't allow duplicate emails or usernames, although it's going to be true in most cases.\n. I'm not sure I understand the question?\n. Thanks!\n. Brainfart on my end, thanks for the fix! If you could however change the boolean expression to simply passport.length that would be perfect.\n. Thanks!\n. Thanks for the suggestion, but to be honest I'm not interested in maintaining a regex for email validation. That's why Validator.js is used :+1: \n. name is not a string but an object (http://passportjs.org/guide/profile/) and I'm honestly a little reluctant to include it as a substitute for usernames.\n. Those are the Google OAuth scopes and they've been added to the Twitter config example? Besides, I've already documented it here: https://github.com/kasperisager/sails-generate-auth/blob/master/templates/config/passport.js#L11\n. I can dig that! Thanks!\n. Thanks a ton for hunting this down! \n. Thanks for the PR! I'll make sure to take a look at it after my exams (February-ish).\n. This is looking good so far! I'm not sure if I'll have the time to test it any time soon, so if someone else could weigh with their results that would be great.\nBy the way, could you rebase the PR against master? Looks like it diverged.\n. Thanks!\n. LGTM :+1: Thanks!\n. Woop: https://github.com/kasperisager/sails-generate-auth/releases/tag/v0.3.0\n. Thanks a ton, and no problem!\n. Thanks for the PR! Could you however rebase it against master?\n. Agreed :+1: \n. Thanks!\n. Thanks!\n. Sweet, thanks!\n. Cheers!\n. Cheers!\n. This function is duplicated in protocols.local.disconnect with the only differences being a static provider value and a different use of braces. passport.disconnect should be the only instance needed.\n. Looks like some extra whitespace crept its way in.\n. There's a bit of extra whitespace here as well.\n. EOF newlines should always be used, as specified by .editorconfig.\n. JSON is pretty strict when it comes to separators so the last comma will need to be removed.\n. bcrypt.hash(passport.password, salt, function (err, hash) { should be sufficient, as per the docs: https://github.com/dcodeIO/bcrypt.js#usage---async\n. Could you convert the tab to spaces and use comma-first? Consistency is key :+1: \n. This will need to be randomized as to avoid creating an attack vector.\n. Looks like some formatting got lost here.\n. Looks like the rest of the config examples got inadvertently removed.\n. Please do follow the comma-first convention.\n. White space and comma-first.\n. I'm thinking that it might be best to completely separate the bearer and local strategies as to avoid conflicts. The auth callback should therefore be kept within a bearer protocol (e.g. services/protocols/bearer.js) alongside any bearer-specific auth code. \n. ",
    "HaNdTriX": "I am using the  sails-disk adapter here is the full error msg:\n/usr/local/lib/node_modules/sails/node_modules/waterline/node_modules/waterline-schema/lib/waterline-schema/joinTables.js:70\n      throw new Error('Collection ' + collection + ' has an association attrib\n            ^\nError: Collection user has an association attribute that is missing a `via` property. Any associations with a `collection` attribute must specify a `via` option that points to another attribute. Update the attribute: passports and add a `via` property\n    at JoinTables.buildJoins (/usr/local/lib/node_modules/sails/node_modules/waterline/node_modules/waterline-schema/lib/waterline-schema/joinTables.js:70:13)\n    at new JoinTables (/usr/local/lib/node_modules/sails/node_modules/waterline/node_modules/waterline-schema/lib/waterline-schema/joinTables.js:32:27)\n    at new module.exports (/usr/local/lib/node_modules/sails/node_modules/waterline/node_modules/waterline-schema/lib/waterline-schema.js:34:17)\n    at Waterline.initialize (/usr/local/lib/node_modules/sails/node_modules/waterline/lib/waterline.js:103:17)\n    at Hook.startORM (/usr/local/lib/node_modules/sails/lib/hooks/orm/index.js:304:14)\n    at Array.bound [as 1] (/usr/local/lib/node_modules/sails/node_modules/lodash/dist/lodash.js:729:21)\n    at listener (/usr/local/lib/node_modules/sails/node_modules/async/lib/async.js:465:46)\n    at /usr/local/lib/node_modules/sails/node_modules/async/lib/async.js:419:17\n    at Array.forEach (native)\n    at _each (/usr/local/lib/node_modules/sails/node_modules/async/lib/async.js:32:24)\nTested with the current sails master\n. ",
    "ajself": ":metal: \n. ",
    "gebrits": "probably useful since loads of people will change to sails-mongo from sails-disk later on, and see their uniqueness constraints fail inexplicably.\n. proposal for fixing #36 \n. ",
    "robmoggach": "npm repo version is currently 0.1.4\n. ",
    "Biromain": "This is a good idea, i work on it and and see what happens.\nSorry for probably spam, i don't know perfectly Git and Github :)\n. It's not better, i can't populate profile because user not have profile.id and i don't find way to update (on first login) user created by passport.connect here.\n. ",
    "dbkaplun": "@kasperisager I've added the comments back and rebased.\n. Rebased.\n. ",
    "tony": "Works for me!\nThanks @beardtree \n. ",
    "derekbasch": "Glad to help. Thanks for the great generator. Quit working on your vacation :palm_tree: !\n. Refactored after testing.\n. @kasperisager I did my best to fix the errors. I may have cheesed up the merge.\n. Thanks for the comment.\nI modeled my changes upon @mikermcneil 's hack to determine whether an error is a validation error from waterline:\nhttps://gist.github.com/mikermcneil/8366092\nHe states the intended client side usage.\n* Takes a Sails Model object (e.g. User) and a ValidationError object and translates it into a friendly\n * object for sending via JSON to client-side frameworks.\nAnd says he likes this approach here:\nhttps://github.com/balderdashy/sails/issues/1173#issuecomment-31327958\nI separated the error and validationError objects as each obviously requires different client side parsing . In the examples above the validationError is intended as a response to an AJAX request but the client side handling would ultimately be the same regardless of the transport mechanism.\nI would argue that returning the validated field and validation rule to the client greatly aids in mapping errors to the corresponding input element:\nfor each validationError\n        fields[validationError.field].state = error\n        fields[validationError.field].message = validationError.message\n    done....\nWhich must be done less gracefully client side now already:\nfor each eror\n        if error.message == some.error.message\n            someField.state = error\n            someField.message = error.message\n        repeat for n errors....\nThose who do not wish to use the additional validation data could ignore it, and still use the validation messages.\nA standardized waterline validation error to user friendly error mapping solution is on the roadmap. So, I was trying to avoid implementing a full solution until then by \"manually\" mapping the waterline validation errors for now.\nThis is all, of course, IMHO.\nNote: It looks like I should have passed the waterline validation errors through and replaced the validation messages with i18n keys.\nCheers!\n. Ooops. Hit the close button.\n. Thanks @edygar . I will start using res.negotiate at some point in the near future.\n. @edygar @mikermcneil \nI played with response negotiation and settled upon handling validation errors in the badRequest response. A 400 response is appropriate for returning an error situation in the response body.\nI will remove the validationError flash message. It is not needed when an error code is passed to the client.\nReference: \nfeature req: enhance req.negotiate(err) to include redirects and some other stuff\nGitHub API - Client Errors\n```\n// controllers/UserController.js\nupdate: function(req, res, next) {\n    async.waterfall([\n      ....\n      function(user, callback){\n          User.update(req.param('id'), userObj)\n          .exec(function(error, user) {\n            if (error) return callback(error);\n          })\n      .....\n      }\n    ], function (error, result) {\n      if (error) return res.negotiate(error);\n    }\n  }\n// responses/negotiate.js\nmodule.exports = function (err, options) {\n.....\n  if (statusCode >= 400 && statusCode < 500) return res.badRequest(body, options);\n  return res.serverError(body, options);\n};\n\n// responses/badRequest.js\nif (sails.config.environment === 'production') {\n    data = undefined;\n  }\n// send back validation errors in every application environment\n  else if (data.ValidationError) {\n    data = HandleValidation.transformValidation(\n      sails.models[data.model.toLowerCase()],\n      data.ValidationError\n    );\n    req.flash('error', data);\n  }\n// services/HandleValidation.js\nexports.transformValidation = function(model, validationError) {\nvar validationResponse = {\n    message: \"Validation Failed\",\n    code: \"VALIDATION_FAILED\",\n    errors: []\n  };\n  var messages = sails.models[model.toLowerCase()].validation_messages;\n  var validationFields = Object.keys(messages);\nvalidationFields.forEach(function(validationField) {\n    if (validationError[validationField]) {\n      var processField = validationError[validationField];\n      processField.forEach(function(rule) {\n        if (messages[validationField][rule.rule]) {\n          // Validation error formatting is modeled upon the GitHub REST API\n          // {\n          //   \"message\": \"Validation Failed\",\n          //   \"documentation_url\": \"https://developer.github.com/v3/repos/#create\",\n          //   \"errors\": [\n          //     {\n          //       \"resource\": \"Repository\",\n          //       \"code\": \"custom\",\n          //       \"field\": \"name\",\n          //       \"message\": \"name is too short (minimum is 1 characters)\"\n          //     },\n          //     {\n          //       \"resource\": \"Repository\",\n          //       \"code\": \"missing_field\",\n          //       \"field\": \"name\"\n          //     }\n          //   ]\n          // }\n          validationResponse.errors.push(\n            {\n              resource: model.globalId,\n              code: rule.rule,\n              field: validationField,\n              message: messages[validationField][rule.rule]\n            }\n          );\n        }\n      });\n    }\n  });\n  return validationResponse;\n};\n``\n. Will fix.\n. Will fix.\n. Will install https://github.com/sindresorhus/editorconfig-sublime#readme and fix.\n. Right you are. I will remove the unneeded static provider value local version inprotocols.local.disconnect`.\n. Will fix.\n. ",
    "kedric": "Ho. i don't have view that sorry i have resolve my bug with your informatation thx\n. ",
    "Bazze": "Ooops, didn't see there was another place. I'll adjust that one as well. Maybe we should break out that code to a function as well since it's the same in both beforeCreate and beforeUpdate.\n. ",
    "kbenjamin": "Modified as requested and ready for review.\nP.S. Thanks for Sails :)\n. Done.\nFrom: Kasper Isager [mailto:notifications@github.com] \nSent: Friday, September 05, 2014 8:41 AM\nTo: kasperisager/sails-generate-auth\nCc: Ken Benjamin\nSubject: Re: [sails-generate-auth] Fix issue where certain providers do not return the 'provider' field (#73)\nIn templates/api/services/passport.js:\n\n@@ -88,8 +98,8 @@ passport.connect = function (req, query, profile, next) {\n   }\nPassport.findOne({\n-    provider   : profile.provider\n-  , identifier : query.identifier.toString()\n-      provider: provider,\n-    identifier : query.identifier.toString()\n\nCould you convert the tab to spaces and use comma-first? Consistency is key   https://assets-cdn.github.com/images/icons/emoji/unicode/1f44d.png \n\u2014\nReply to this email directly or view it on GitHub https://github.com/kasperisager/sails-generate-auth/pull/73/files#r17158744 .  https://github.com/notifications/beacon/1645415__eyJzY29wZSI6Ik5ld3NpZXM6QmVhY29uIiwiZXhwaXJlcyI6MTcyNTUxODQzNSwiZGF0YSI6eyJpZCI6NDA1NDMyMTN9fQ==--93a8787cde6237f2ae712d82496fcd569bf3d7f4.gif \n. ",
    "AustinWinstanley": "Went ahead and changed the indentation. But I'm not sure if the salt will be enough. It worked when I called gen so I left it.\n. I'm looking for the reference I found earlier, but it looked like in the js version, calling gen was necessary.\n. I do know that just calling the salt length of 10 was not sufficient, as in the original bcrypt.\n. Switched. I haven't fully tested it though. Just made the suggested changes.\n. ",
    "Kikobeats": ":+1: \n. ",
    "mikermcneil": "Hey guys check out res.negotiate - I normalized this error handling before the 0.10 release (now all we have to do is examine err.status, which res.negotiate goes for us)\n. ",
    "edygar": "Time saver: Here is the link which explains what @mikermcneil what talking about up there\n. ",
    "tjwebb": "See my comment for his solution: https://github.com/balderdashy/waterline/issues/620#issuecomment-54265690\n. You're obviously not reading the whole thread. He was trying to create a user with User.create, which will fail when this generator is used. It's impossible for it to succeed, because a passport will not be created unless you go through the register route. Either way, it looks like this isn't going to get merged.\n. Sorry, I tried to link instead of copy-paste. Lots of systems have the need\nfor users to create other users. And in general, the /user CRUD endpoint\nshould work; currently, the only way is through the custom register view.\nIn a pure REST API, for example, the server might not expose any views at\nall.\nOn Tue, Sep 30, 2014 at 1:09 PM, Kasper Isager notifications@github.com\nwrote:\n\nI misunderstood the issue in that case. A more thorough PR description\nwouldn't have been a bad thing [image: :wink:]\nI'm now trying to understand the use case for this; when would it be\nneeded to create a user outside the authentication layer?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kasperisager/sails-generate-auth/pull/86#issuecomment-57347657\n.\n. \n",
    "gpedro": "+1\n. ",
    "fubaydullaev": "Then logic of identifier should be changed, if 2 different platforms will have same profile.id (hard to be, but possible) then logic will fail\n. What if profile.id is not available (empty), in case Bitbucket ?\nOn Thu, Oct 16, 2014 at 3:53 PM, Kasper Isager notifications@github.com\nwrote:\n\nThat's not the case since the provider key is also passed to the query.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/kasperisager/sails-generate-auth/pull/102#issuecomment-59344666\n.\n. Why not use, username or email as identifier ?\n. \n",
    "fabiencrassat": "Done! \n. ",
    "shanelau": "You are right.   The response data of weibo is incorrect.\nWeibo is a pravider  of Auth2.0\n. ",
    "yedhukrishnan": "I started with Sails last month. I am completely new to Sails and Passport. I didn't know that the module doesn't restrict access to the controllers by default and I spent one day researching about that. This part of documentation is really useful for newbies like me.\nI would like to add that sails-generate-auth really simplifies the process of configuring passport. Thanks for creating this.\n. Any update on this? \n. Sorry, I have made some changes to the repo after that. I'll revert them back and will make these modifications. Thanks for your feedback :)\n. I've made the necessary changes. Please have a look at it. Thank you!\n. @drampelt Thank you. I'll make these changes and push it again. \nBefore that I'll confirm about the difference between findById and findOneById.\n. I've added the missing files to lib/index.js. I missed that actually and thanks to @drampelt  for pointing it out.\nI am using PostgreSQL. While using findById(), it returns an array of objects. But findOneById() returns a single object. It is actually setting req.user with the currect user object.\n. Sure.. I will do that :)\n. I couldn't rebase it. But I have merged it and made it up to date with the master. It's good to go :)\n. ",
    "drampelt": "Two quick things I noticed when trying this out:\n- The new files should be added to lib/index.js to make sure they are copied to the sails project\n- The protocol/bearer.js file uses User.findById instead of findOneById which sets req.user to an array containing the user instead of just the user object (this could be because I am using mongodb, I haven't tried it on any other databases)\nOther than that it has been working great for me!\n. Oh whoops, I merged in the bearer PR to mine because I needed it for a project. Should be good now.\n. ",
    "shoaibmerchant": "Sure, happy to help!\n. ",
    "kdelmonte": "I don't believe this is in the latest version of the npm package. I just had to do this manually.\n. Thanks. \n. Also, thank you for this package. It is awesome. \n. ",
    "herrkessler": "This kept me searching for at least an hour.... thanks for the fix!\n. ",
    "sixpounder": "no problem, that was easy ^^\n. ",
    "icyflame": "@tomaskikutis \nThe correct grammar would be:\ndifferent from [sails-auth](link)? And which one should I use?\nCheers!\n. "
}