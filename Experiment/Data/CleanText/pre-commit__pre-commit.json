{
    "asottile": "Done!\n. Resolved\n. Resolved\n. Note: from working with rvm before it has a lot of quirks dealing with mutating dotfiles.  Make very sure to turn all that shit off\n. Done: #94\n. Resolved\n. Resolved\n. Resolved\n. Resolved\n. The endpoint is there now, nothing is implemented -- but it is there.\n. Far enough along to mark this as resolved\n. This: http://pre-commit.com/hooks.html and this: http://pre-commit.com/all-hooks.json (for now) satisfy this ticket.\n. Resolved\n. Resolved\n. Done\n. Ruby support works, scsslint works.\nHere's example output:\n```\n(test_venv)[anthony@anthony-VirtualBox selenium-examples (master)]$ pre-commit run --all-files\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nDebug Statements (Python)................................................Passed\nTests should end in _test.py.............................................Passed\nFlake8...................................................................Passed\nSCSS Lint................................................................Failed\nassets/presentation.scss:3 [W] Properties should be sorted in order, with vendor-prefixed extensions before the standardized CSS property\nassets/presentation.scss:6 [W] 0px should be written without units as 0\nassets/presentation.scss:10 [W] Properties should be sorted in order, with vendor-prefixed extensions before the standardized CSS property\nassets/presentation.scss:11 [W] Colon after property should be followed by 1 space instead of 0 spaces\nassets/presentation.scss:11 [W] 0.5 should be written without a leading zero as .5\nassets/presentation.scss:17 [W] Line should be indented 2 spaces, but was indented 4 spaces\nassets/presentation.scss:17 [W] border: 0; is preferred over border: none;\nassets/yelp_reveal.scss:4 [W] Name of variable mainColor should be written in lowercase as maincolor\nassets/yelp_reveal.scss:5 [W] Name of variable headingColor should be written in lowercase as headingcolor\nassets/yelp_reveal.scss:6 [W] Name of variable backgroundColor should be written in lowercase as backgroundcolor\nassets/yelp_reveal.scss:7 [W] Name of variable headingTextShadow should be written in lowercase as headingtextshadow\nassets/yelp_reveal.scss:8 [W] Name of variable selectionBackgroundColor should be written in lowercase as selectionbackgroundcolor\nassets/yelp_reveal.scss:9 [W] Name of variable linkColor should be written in lowercase as linkcolor\nassets/yelp_reveal.scss:10 [W] Name of variable linkColorHover should be written in lowercase as linkcolorhover\nassets/yelp_reveal.scss:11 [W] Name of variable headingLineHeight should be written in lowercase as headinglineheight\nassets/yelp_reveal.scss:13 [W] Prefer single quoted strings\nassets/yelp_reveal.scss:16 [W] Properties should be sorted in order, with vendor-prefixed extensions before the standardized CSS property\nassets/yelp_reveal.scss:28 [W] Properties should be sorted in order, with vendor-prefixed extensions before the standardized CSS property\nassets/yelp_reveal.scss:41 [W] 0.5 should be written without a leading zero as .5\nassets/yelp_reveal.scss:46 [W] border: 0; is preferred over border: none;\nassets/yelp_reveal.scss:50 [W] Selector should have depth of applicability no greater than 3, but was 4\n``\n. yes\n. wontfix, yelp_cheetah does not have an #encoding directive\n. wontfix, yelp_cheetah no longer supports#encoding`\n. Resolved\n. Most of these are grep based.  I took a stab a quick stab at a few of them:\nyaml\n-   id: space-after-keywords\n    name: Space after keywords\n    language: system\n    entry: grep -E -H -n '^[ ]*(if|for|while|catch)\\('\n    files: \\.(c|cc|cpp|h|hpp)$\n    expected_return_value: 123\n-   id: space-after-comments\n    name: Space after comments\n    language: system\n    entry: grep -E -H -n '(^| )//[^ ]'\n    files: \\.(cc|cpp|h|hpp)$\n    expected_return_value: 123\n-   id: space-brace\n    name: Space between paren and brace\n    language: system\n    entry: grep -H -n '){{'\n    files: \\.(c|cc|cpp|h|hpp)$\n    expected_return_value: 123\n-   id: space-after-paren\n    name: No spaces after parens\n    language: system\n    entry: grep -E -H -n '\\( '\n    files: \\.(c|cc|cpp|h|hpp)$\n    expected_return_value: 123\n-   id: include-space\n    name: 'Needs space after #include'\n    language: system\n    entry: grep -E -H -n '^[ ]*#include[^ ]'\n    files: \\.(c|cc|cpp|h|hpp)$\n    expected_return_value: 123\n. The above hooks don't actually work (I added a testcase demonstrating their problem to the pcre branch #120 .  I'll rewrite these as pcre hooks later.\n. Resolved\n. hijacking ticket for the following things:\n1. requirements.txt should be a superset of setup(install_requires=[]\n2. for each in setup(scripts=[] -- the files should exist\n3. for each in setup(entry_points={'console_scripts': [] -- the item should match {0} = {1}:{2} and {1} should be importable and {2} should exist inside 1\n. This will be part of \"practices\"\n. git ls-files | xargs --replace -n1 sh -c '[ $(tail -n1 \"{}\" | grep '\"'^$'\"' | wc -l) = 1 ] && echo \"{}\"'\n. Ended up implementing this in python: https://github.com/pre-commit/pre-commit-hooks/pull/1\n. Fixed by implementing our own version of git rev-parse --top-level\n. SHIPIT\n. Seems to work (tests pass)\n. This page indicates it will: http://www.jshint.com/docs/\nHowever we do have a problem with cwd when running hooks as currently uses the hooks repo as the cwd instead of the committer's repo\n. Resolved with #49 \n. Most projects get this wrong and look at the on disk content and not the stuff staged for commit. \n. I looked into this and initially I wanted to use git stash --keep-index however this lead to difficulties when the hooks fix files, and then the stash conflicts with the changes.\nI want to implement this in a way so that in the worst case the working directory ends up in the same way as it started.  I believe this will be sufficient:\npython\n@contextlib.contextmanager\ndef staged_files_only():\n    ## pseudopython\n    if [[ unstaged files ]]:\n        ## --binary is important here because otherwise binary files are not preserved in diffs\n        # `git diff --binary > .pre-commit-files/patch\n        ## clean the working directory\n        # `git checkout -- .`\n        try:\n            yield\n        finally:\n            ## Attempt to apply our stored patch\n            try:\n                # `git apply .pre-commit-files/patch\n            except CalledProcessError:\n                ## Applying the patch failed do to some conflict so rollback any changes made by hooks\n                # `git checkout -- .`\n                # `git apply .pre-commit-files/patch\n    else:\n        yield\n. TODO: check submodules, my assumption is I don't want to twiddle submodules at all and should revise the diff statement above to git diff --binary --no-submodules\n. Looks like I get submodules for free so I don't need to do anything special.\n. Did some initial poking into this.\nDetecting if you're in a merging state should be as easy as os.path.exists('.git/MERGE_HEAD')\n. Somewhat useful (but not universally useful) is there is a file at .git/MERGE_MSG which roughly looks like this:\n``\nMerge branchother_branch` into this_branch\nConflicts:\n    file_that_conflicts.txt\n    file_that_conflicts.txt\n    file_that_conflicts.txt\n```\nThis is the default message when using git commit on a conflicting merge-conflict.\nThis isn't sufficient to build our file list though because someone could have edited other files while resolving the conflict that were not directly conflicting and we want to check those too.\n. http://stackoverflow.com/questions/22903125/find-files-that-were-conflicting-or-locally-edited-during-git-merge-commit\n. Implemented!\n. Do you have a reproducible test case? \n. Just commented on the PR, sorry it took me so long to get back to this -- been pretty busy :D\n. I've decided to split these into two types of hooks and make language required: system and script.\nsystem - Use a system installed utility to run a pre-commit hook, for example, you might want to use system-level pyflakes or maybe you want some crazy grep incantation\nscript - Use a script inside the repository that has only system dependencies.  For instance a custom bash script\n. @struys: You'll like this one\n. wontfix.  There's no such thing as .pre-commit-files any more.\n. Eh I'm going to merge, this blocks other things.  We can fixup later if it isn't perfect.\n. I added --verbose\nThis needs an explicit test when the tests are implemented\n. This was done with #78 \n. Ended up making a nifty contextmanager to solve this\n. Done.\n. This will be part of \"practices\"\n. Merging this for now, I'm pretty sure there are still unicode problems lurking.  But this is blocking a refactor for testability :D\n. This is available through the --add-import option added here: https://github.com/asottile/reorder_python_imports/pull/12\n. I'm not sure what the nicest way to approach this is :/\nMy initial thought was to have the code work the same, but put the repositories in /tmp.\nHowever, /tmp isn't very persistent and would kind-of be a pain in the ass if a system dumped /tmp relatively often.\nAnother idea is to use the home directory, but this feels dirty (even if it is using something like .pre-commit-files)\nEither way, for most of the existing code to \"just work\" this requires some symlink magic\n. Useful for when I look at this:\nos.path.exists - Returns False for broken symlinks.\nos.path.lexists - Returns True for broken symlinks.\nConfusing, I'd expect the opposite given the naming... /shrugs\n. Fixed #91 \n. Fixed in #100 \n. This ticket doesn't really have good actionable things, I've closed this in favour of other issues which mention specific error messages that need improvement.\n. I don't plan on implementing site-wide overrides at this time.  Closing for another day.\n. Let's track this here: https://github.com/pre-commit/pre-commit-hooks/issues/45\n. You probably have 1.8.7 installed at the system level.  I have to add language_version to the repo and haven't done it yet.\n. Hmmm.  Might put something in that checks that the current sha is something in master.  If not then it just won't update it.  Should be a pretty easy thing to test / verify as well.\n. The new --tags-only option should make this less of a problem. Probably blocked by #99 \n. Closed with #105 \n. This is my start on this branch: https://github.com/pre-commit/pre-commit/tree/allow_tags\nI don't think repo + ref is going to work because slashes, but maybe a hash of that will work.\n. Partially implemented with #127 \nNeed to add ref and deprecate sha.\nProbably should add some additional logic for tags into autoupdate.  Should be reasonably easy to do a natural sort on tags and bump to the latest tag (instead of reverting back to shas).  At the very least it should not bump a tag to a sha.\n. The autoupdate work was done here via:\n\nhttps://github.com/pre-commit/pre-commit/pull/529\nhttps://github.com/pre-commit/pre-commit/pull/476\n\nAll that's left is to support ref and deprecate sha. This has been released as part of v1.7.0!. #108\n. #110\n. #116 \n. workaround is rm .git/MERGE_MSG\n. #113\n. This will get included in 0.1.2 when I release that\n. #119 \n. This will be in 0.2.0\n. #120 \n. Really what this should do is try both pre-commit and python -m pre_commit.main. \nThat way we don't break our user install script.\n. #124 \n. #126 \n. Don't pull this quite yet.  Need to \"manual travis\" to make sure the tests still pass...\n. Actually I'm going to add a bit to this, to add ref deprecate sha.\n. #130 \n. #139 \n. #146 \n. fixd\n. imo duplicates #98 \n. - The 404 is because we haven't actually pushed the real website yet.  The url is where it will be eventually.\n- Not sure what's up with your venv :/\n- #98 for the rest of it\n. sha: this cannot default because then the cached checkout could potentially be out of date.  technically it can already use branches but it is not a supported workflow.  The suggested workflow are tags or shas\nI like the idea of an \"all from this repo\", but allowing each hook to turn itself on and off seems like a lot of complexity and non-obvious behavior from just reading the file.\npre-commit-hooks is a reasonable default.  Currently it contains a few python-specific hooks.  These should be removed from there and perhaps a python-hooks repo created.\nI think creating a skeleton config on pre-commit install would satisfy the oddness with getting started with nothing.\n. #147 \n. I don't remember why I opened this and can't think of what it could possibly break.  Closing as wontfix.\n. Seems reasonable, I'd be willing to accept a pull request that pins versions to within a major version number.  The rule of thumb I've heard in the past is don't pin versions for packages, but pin them for applications.  It's a bit of a grey area whether this is a package or an application, but I can definitely see your point :)\n. closing as wontfix, we haven't really had any problems with this and the packages we're depending on are pretty stable\n. ah yeah I've seen this happen before.  What's happening is it recognizes the .pre-commit-config.yaml file as unstaged and temporarily stashes it.  To fix this git add .pre-commit-config.yaml or pre-commit run --no-stash\nThe feature that you're running against is pre-commit will only run against staged contents of files.\nLet me know if this works for you and if there's somewhere we can update documentation!\nAlso: pre-commit clean is mostly to clean out broken state (if it ever occurs) in ~/.pre-commit and shouldn't really be necessary in general :)\n. @gabrielpugliese-luizalabs Created #157 to track this\n. I've been meaning to implement this, just haven't found the time.  I also think that jsonschema needs dropping, it was useful at first when the schema was simple but as you can see the error messages suck :(.  Though the custom validation will be more complicated, it'll probably be easier to add more complicated features and provide better error messages.\n. The relevant code is in https://github.com/pre-commit/pre-commit/blob/master/pre_commit/staged_files_only.py\nThe way I would implement this is to grab the contents of the config file before stashing, stash, restore the contents of the config.  Then when exiting the context, do the opposite.\n. Another idea would be to make it an error to have a modified and unstaged config file with a --allow-unstaged-config option.  I think that would actually be the easiest to program and have the least edge cases. What do you think about that? \n. Cool cool, I imagine this being similar to the shortcut we do for unmerged files:\n```\npre_commit/commands/run.py\n# Check if we have unresolved merge conflict files and fail fast.\nif _has_unmerged_paths(runner):\n    logger.error('Unmerged files.  Resolve before committing.')\n    return 1\n\n```\nProbably something like:\nif not args.allow_unstaged_config and _has_unstaged_config(runner):\n        logger.error(\n            '.pre-commit-config.yaml is unstaged which can cause some unexpected behaviour.  '\n            'To ignore this, run `git add .pre-commit-config.yaml`. '\n           'To silence this execute pre-commit with --allow-unstaged-config'\n        )\n        return 1\n. Closed via #225 \n. This was a usecase I wanted to support from the beginning but made several design decisions that make it difficult to accomplish,  I'll outline them here as well as a workaround that kindof works (but is not a supported workflow).\nThe first design goal is that at runtime (commit time) there is as little overhead as possible (except the first run (installing)).\nThe second design goal is that everything is reproducible.  That is if I check out a repository that has a specific pre-commit config and run the hooks, they should produce the same on another machine.\nThe way this is currently accomplished is at install-time, a repository is cloned at the revision indicated in the config and installed into a language-specific virtual environment inside of the repository.  The directory in which the repository is uniquely identified by a hash of (repo, ref) (where repo is the url to the repository and ref is a permanent pointer into the repository (sha, tag, etc.) (note that currently this is represented by the admittedly-misnamed-and-to-be-renamed sha value in the pre-commit config).  This makes a check for existence as easy as hashing those values and seeing if a directory exists with that name.\nThe currently supported workflow for ensuring you are at the latest version is to run pre-commit autoupdate periodically which will automatically update your ref to the latest version.  If you run this command you'll notice that it sometimes takes a while to fetch / checkout the remote repository.  A similar runtime overhead would occur if we were to check for the latest version (which I wanted to avoid).\nA potential solution would be to do a check once every N time for a newly updated repository and only incur that commit-time overhead once in a while.  However, I think it may be pretty complicated to implement.\nA current workaround for this limitation is to instead specify a branch as the ref such as:\n``` yaml\n### SPECIFYING BRANCHES: NOT A SUPPORTED WORKFLOW\n\nrepo: git@github.com:pre-commit/pre-commit-hooks\n    sha: master\n    hooks:\nid: trailing-whitespace\n```\n\n\n\nAlthough this will \"work\" it has the following not-so-great side-effects under the current implementation:\n- This will only match the latest version at install time, and will not update afterwards.\n- This will create a repository at (master, git@github.com:pre-commit/pre-commit-hooks) which will not necessarily represent the latest version and won't ever change without running pre-commit clean first.\ntl;dr: pre-commit autoupdate should bring you up to date with the latest versions, implementing \"tatest version\" is likely to be difficult but I'm willing to accept a patch if you can come up with some way I haven't thought of :)\n. The sentiment in the comment above is still true, however instead of using named directories / symlinks we're now keeping track of the installed hooks using sqlite.\n. I've documented this here.  Going to close this for now.. Unfortunately I think windows support is pretty far from working due to the following things:\nMinimal to run a python based hook:\n- relies heavily on xargs ... | ... for running hooks\n- relies on sourcing an activate file for managing environments\n- relies on tput and ansi escapes for output\nThe nice to haves that I don't know will work:\n- node support through nodeenv\n- ruby support through rbenv \n. I started trying to get some of tests to pass here: https://github.com/pre-commit/pre-commit/tree/windoze\nThe first wall I'm hitting is symlinks, which require elevated privileges by default under windows (wtf).\nI might rethink the one place I'm using symlinks and swap in something like sqlite instead (which might actually make everything simpler?).\nFor xargs, etc.  I think I can depend on powershell (who would develop on windows without powershell amirite?).  Here's some recipes I found from googling: http://five.agency/powershell-tips-for-bash-users/\n. So I don't forget next time: pytest does not handle coloring well under powershell, use this in pytest.ini:\n[pytest]\naddopts = --color=no\n. Using git-shell (from github's windows downloads), I have pre-commit running!  A bunch of the tests fail however and I'm not convinced that using github's tools constitutes supporting windows.  But worst-case you can start using some of the hooks.  I'm going to keep working on this branch and get more things passing.\n. Fixed via #196 \n@quentindemetz let me know if this works for you\n. I've opened #198 #199 #200 #201 #202 for the features I didn't implement in the first pass.\n. What implementation of git are you using? \n. I'm going to grab a VM and see if I can reproduce this.  ~ should be equivalent to C:\\Documents and Settings\\(your user name) on windows\n. Ah I see the issue.  Under Windows XP, msysgit's install doesn't provide an executable named bash.  I was however able to get this running and working with \"git bash\".  Does what work for you?\n. Is that running with git bash as your shell or cmd as your shell?\n. Just fixed the pep8 conflict here: https://github.com/pre-commit/pre-commit-hooks/commit/4078cbedf0360dce2b7cd02cb2812fc50b76b98d\n. I'm releasing 0.4.1 right now :)\n. It'd be possible, but I'd rather not bundle all of msysgit when on windows I can expect most if not all of it to be installed :) (plus then I'd have to deal with the licensing issue)\n. @guykisel the latest version factors out bash and xargs so it should function better in cmder (0.8.0)\n. That would be awesome.  I'm not really familiar with hg but I'd be happy to accept a tested pr supporting it!\nThe main things that currently rely on git (from memory):\n- detecting top level directory\n- detecting files to be committed\nSupporting client repositories in hg: (nice to have)\n- cloning\n- checking out specific revision\nSupporting advanced features (nice to have)\n- stash unstaged changes before running\n- in a merge conflict,  detect which files conflicted or were manually edited\n-- phone is hard\n. I believe hook repositories can already be supported by using git-remote-hg and repo urls that look like 'hg::...'.\n. I think this would actually be pretty easy to implement (or at least get the minimal bits working to support at least running hooks).  I wish I knew slightly more about hg and I'd tackle it myself.\nI think most of it can be isolated to version-control-specific modules that interact with the underlying VCS, detect which VCS at startup time and use it.   Then it'd be easy to add any VCS that supports hooks similar to git.\n. I don't have any plans to tackle this -- as such I'm going to close this issue for now.  A PR would be welcome for this feature.. This SO post echos this bug:\nhttp://stackoverflow.com/questions/8016236/python-unicode-handling-differences-between-print-and-sys-stdout-write\nSadly:\n$ python2.6 -c \"import sys; sys.stdout.write(u'\\u2603\\n')\"\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u2603' in position 0: ordinal not in range(128)\n$ python2.7 -c \"import sys; sys.stdout.write(u'\\u2603\\n')\"\n\u2603\n$ python3.3 -c \"import sys; sys.stdout.write(u'\\u2603\\n')\"\n\u2603\n$ python3.4 -c \"import sys; sys.stdout.write(u'\\u2603\\n')\"\n\u2603\nAnd using bytes:\n$ python2.6 -c \"import sys; sys.stdout.write(u'\\u2603\\n'.encode('UTF-8'))\"\n\u2603\n$ python2.7 -c \"import sys; sys.stdout.write(u'\\u2603\\n'.encode('UTF-8'))\"\n\u2603\n$ python3.3 -c \"import sys; sys.stdout.write(u'\\u2603\\n'.encode('UTF-8'))\"\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nTypeError: must be str, not bytes\n$ python3.4 -c \"import sys; sys.stdout.write(u'\\u2603\\n'.encode('UTF-8'))\"\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nTypeError: must be str, not bytes\nLooks like the fix is (sadly) to convert to bytes only in the 2.6 case\n. Nit: I'd use double quotes to avoid escape.  Fixnship\n. Here's an example npmrc causing this problem:\nprefix=~/.npm-packages\n. +1 I started working on this this morning.\nThe interface will probably look like this:\npre-commit run hookid --files file file2 file3 file4\n. @quentindemetz does #170 solve your problem?\n. Sweet, merged!\n. #175 fixes this\n. via #174\n. via #226 \n. Could you additionally provide the version of git you are using?  I believe it may be contributing to this problem.\n. I wonder if git-apply works significantly differently in a different version of git.  I may need to work around that to fix this bug.\nFor what it's worth, it seems to work as intended with git 1.7.9.5:\n```\n$ git status\nOn branch master\nChanges not staged for commit:\n(use \"git add ...\" to update what will be committed)\n(use \"git checkout -- ...\" to discard changes in working directory)\n\nmodified:   unstaged.py\n\nUntracked files:\n(use \"git add ...\" to include in what will be committed)\n\nvenv/\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ echo \"x = 'This is the loooooooooooooooooooooooooooooooooooongest liiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiine eveeeeeeeeer'\" > foo.py\n$ git status\nOn branch master\nChanges not staged for commit:\n(use \"git add ...\" to update what will be committed)\n(use \"git checkout -- ...\" to discard changes in working directory)\n\nmodified:   foo.py\nmodified:   unstaged.py\n\nUntracked files:\n(use \"git add ...\" to include in what will be committed)\n\nvenv/\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git add foo.py\n$ git commit -m \"Add a long line\"\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/anthony/.pre-commit/patch1412701193.\nFlake8...................................................................Failed\nhookid: flake8\nfoo.py:1:80: E501 line too long (112 > 79 characters)\n[INFO] Restored changes from /home/anthony/.pre-commit/patch1412701193.\n``\n. Additionally, the contents of/home/k/.pre-commit/patch1412683352` will be useful to diagnose\n. This is a set of commands similar to what pre-commit runs.  Could you run them and show me what the output is?\ntest.sh\n```\n!/usr/bin/env bash\nfunction printcmd() { echo '$$ '\"$@\"; \"$@\"; echo \"## retcode $?\"; }\nprintcmd git init test\nprintcmd cd test\nprintcmd sh -c 'echo '\"'\"'\"\"\"Docstring\"\"\"'\"'\"' > unstaged.py'\nprintcmd touch foo.py\nprintcmd git add unstaged.py foo.py\nprintcmd git commit -m \"initial commit\"\nprintcmd sh -c \"echo \"'\"'\"'''I am unstaged but I have changes'''\"'\"'\" > unstaged.py\"\nprintcmd sh -c \"echo 'x = \"'\"'\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"'\"'\"' > foo.py\"\nprintcmd git status\nprintcmd git add foo.py\nThis mimics what pre-commit does in pre_commit/staged_files_only.py\nprintcmd sh -c \"git diff --ignore-submodules --binary --exit-code > patch\"\nprintcmd cat patch\nprintcmd git checkout -- .\nprintcmd git status\nprintcmd git apply patch\n```\nOutput on my machine:\n```\n$ ./test.sh\n$$ git init test\nInitialized empty Git repository in /tmp/test/.git/\nretcode 0\n$$ cd test\nretcode 0\n$$ sh -c echo '\"\"\"Docstring\"\"\"' > unstaged.py\nretcode 0\n$$ touch foo.py\nretcode 0\n$$ git add unstaged.py foo.py\nretcode 0\n$$ git commit -m initial commit\n[master (root-commit) 446eafd] initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 foo.py\n create mode 100644 unstaged.py\nretcode 0\n$$ sh -c echo \"'''I am unstaged but I have changes'''\" > unstaged.py\nretcode 0\n$$ sh -c echo 'x = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"' > foo.py\nretcode 0\n$$ git status\nOn branch master\nChanges not staged for commit:\n(use \"git add ...\" to update what will be committed)\n(use \"git checkout -- ...\" to discard changes in working directory)\n\nmodified:   foo.py\nmodified:   unstaged.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nretcode 0\n$$ git add foo.py\nretcode 0\n$$ sh -c git diff --ignore-submodules --binary --exit-code > patch\nretcode 1\n$$ cat patch\ndiff --git a/unstaged.py b/unstaged.py\nindex c83d2e0..cbb1889 100644\n--- a/unstaged.py\n+++ b/unstaged.py\n@@ -1 +1 @@\n-\"\"\"Docstring\"\"\"\n+'''I am unstaged but I have changes'''\nretcode 0\n$$ git checkout -- .\nretcode 0\n$$ git status\nOn branch master\nChanges to be committed:\n(use \"git reset HEAD ...\" to unstage)\n\nmodified:   foo.py\n\nUntracked files:\n(use \"git add ...\" to include in what will be committed)\n\npatch\nretcode 0\n$$ git apply patch\nretcode 0\n``\n. Actually, I think it might be being affected by.gitconfig, could you paste the contents of~/.gitconfig`?\n. @Dinoshauer this should be fixed in v0.3.2 :D\n. This is actually by design.  The hooks run in their own isolated environments.\nA workaround is to use the system type and call the thing by name.  Though this generally goes against the isolation mentaility, but might be enough to get this working for you :)\n. In hooks.yaml you can create a hook which is of the langauge system instead of python.  This has the unfortunate side-effect of depending on what is installed at the system level and doesn't take advantage of any of the containerization, etc.  But it'll execute using the environment (including pythonpath, etc.) of the shell at the time of git commit (instead of executing in an isolated virtualenvironment).\nAn example file might look like this:\n```\nhooks.yaml\n\nid: my-id\n    name: My Hook name\n    description: A description for my hook\n    language: system\n    entry: pylint\n``\n. If that doesn't work let me know!  We unfortunately haven't had many usecases with those type of hooks so there's potential that they're completely broken for anything beyond the trivial case that is tested: https://github.com/pre-commit/pre-commit/blob/master/testing/resources/system_hook_with_spaces_repo/hooks.yaml\n. @carlio \nFor the most part it seems to work unless the tool attempts to do in-depth import / type analysis on the dependencies of the code.  pylint is the first time we've run into issues like this and it seems a somewhat acceptable workaround to use thesystem` type and allow that.  The unfortunate thing is it then depends on system libraries.\n\nFor pylint in particular, using an isolated version is really only useful for the syntax checks it does and not the import / type checks.  Which has some nonzero benefit, but yeah isn't really ideal :/\n@guykisel I like the -n 1 hack, I should probably make a way to encorporate that as a supported option.  Thoughts?\n. Check out the --all-files option of pre-commit run\n. I'll try to get it shown better on the website.  Thanks for checking out pre-commit!\n. https://github.com/pre-commit/pre-commit.github.io/pull/28\n. Hmm I've seen a similar issue in the past with namespace packages and old setuptools.  Perhaps /Users/****/.virtualenvs/****/bin/pip install setuptools --upgrade?\n. I also notice you have an egg of pre-commit... I don't think namespace packages are egg-safe so maybe /Users/****/.virtualenvs/****/bin/pip uninstall pre-commit && /Users/****/.virtualenvs/****/bin/pip install pre-commit ?\n. So.... fixed?  I think as long as you use pip and don't use easy_install (which is deprecated afaict) this shouldn't be an issue.\n. ah yeah that would do it since that uses eggs :/  I wonder if adding zip_safe=False would fix this then\n. I believe I've actually fixed this here: https://github.com/asottile/aspy.yaml/pull/2 / https://github.com/asottile/aspy.yaml/pull/3\n. I've noticed similarly as well.  It seems isort depends a bit too much on the running environment to determine first/third-party packages/modules.\nI've started a repository here which seems to do a better job of identifying imports statically, I'm hoping to either plug it into isort or write a separate thing that does a similar thing:\nhttp://github.com/asottile/aspy.refactor_imports\nI actually plan to work on this in the next coming weeks.\nBut yes the idea that the virtualenvs are isolated is by design, you can work around this by making a system type hook.\n. @Dinoshauer I've started working on it here: https://github.com/asottile/reorder_python_imports\nFrom what I can tell it works pretty well? Mind poking around with it and see if it works for you?\n. Belongs in pre-commit/pre-commit-hooks, but this is a nice central place to track these\n. :shipit: will merge once travis says green\n. @galstest github is public, don't post links to our internal things!\n. I can reproduce your exception by doing the following:\n1. pre-commit run --all-files\n2. rm ~/.pre-commit/repo*\n3. pre-commit run --all-files\nHowever, I'm going to close this as wontfix since it is not a supported workflow.  The only time pre-commit will delete things is during pre-commit clean when it'll delete ~/.pre-commit outright.  Whoever told you to reach inside the .pre-commit directory and delete things was misleading you.  If there's any documentation that indicates that, please bring it to my attention :)\nI wish you had the trace from the original error that you \"fixed\" by deleting the repo -- that probably would have been actionable...\n. @galstest right, but this is an open source project and if only people in yelp engineering can read your stacktrace that isn't great :/\n. lol\n. #189 \n. Docs for pre-push are http://pre-commit.com/#advanced  section \"pre-commit\nduring push\"\nYou'll need a sufficiently new version of git (I believe >1.8) which\nsupports pre-push as a hook\n On Jan 29, 2015 10:16 AM, \"shihoonhootsuite\" notifications@github.com\nwrote:\n\nWas there documentation on how to enable pre-push or is this just enabled\nby default?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/187#issuecomment-72075208\n.\n. Overall seems pretty good.\n\nPlease add some integration tests for pre-push hooks, and restore coverage to 100% :)\n. Cool, thanks for the PR :D\nI'll write some tests, modify some formatting, and merge it from here.\n. I'll be merging this in #189\n. Note: as written, an upgrade to this version will not break, but will cause the user to need to reinstall all hooks.  I think this is ok? Could write an upgrade pathway as well... hmmm...\n. #196 includes this\n. Also probably should ignore submodules too\n. pre-commit 0.15.0 will not lint symlinks or submodules by default.\nTo explicitly lint symlinks use:\nyaml\n    types: [symlink]\nTo explicitly lint submodules use:\nyaml\n    types: [directory]. Does http://pre-commit.com/#advanced (Overriding Language Version) satisfy your issue?\n. Yeah, I've also thought about changing the config format however that breaks a bunch of things. Which is really my fault for not thinking about future apis. There's been other things in the past where I've reached for a place to configure repository wide things so I'll probably implement something like this eventually. \n. I believe you're looking for language_version. Track https://github.com/ekalinin/nodeenv/issues/140 for progress\n. A lot to parse but I'll try my best :)\nSo this refers to first-class support for node projects -- the goal of pre-commit is you don't need any dependencies other than installing pre-commit.  It can then handle creating isolated node / ruby / python / etc. environments without requiring the user to globally install things.  Proper node support (from pre-commit's persepective) is to make language: node work without dependencies.\nAs for your hook configuration, you're not actually depending on the node environment that pre-commit may create so you may find a local configuration more convenient: http://pre-commit.com/#repository-local-hooks.  Something like this\nyaml\n-   repo: local\n    hooks:\n    -   id: eslint\n        name: eslint\n        entry: eslint\n        language: system\n        files: \\.js$\nAs for the PR, yeah that sounds fine.  I think windows also does a similar prioritization.. neat, nodeenv has supported windows for a while.  Unfortunately our tests choke on this a bit:\nE           Errors:\nE                * Install prebuilt node (8.1.3) ..... done.\nE               You do not have sufficient privilege to perform this operation.\nE               You do not have sufficient privilege to perform this operation.\nE               Error: Failed to create nodejs.exe link\nE                * Install npm.js (latest) ... Traceback (most recent call last):\nE                 File \"c:\\python27\\Lib\\runpy.py\", line 162, in _run_module_as_main\nE                   \"__main__\", fname, loader, pkg_name)\nE                 File \"c:\\python27\\Lib\\runpy.py\", line 72, in _run_code\nE                   exec code in run_globals\nE                 File \"C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv\\lib\\site-packages\\nodeenv.py\", line 1277, in <modul\ne>\nE                   main()\nE                 File \"C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv\\lib\\site-packages\\nodeenv.py\", line 1028, in main\nE                   create_environment(env_dir, opt)\nE                 File \"C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv\\lib\\site-packages\\nodeenv.py\", line 872, in create_\nenvironment\nE                   instfunc(env_dir, src_dir, opt)\nE                 File \"C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv\\lib\\site-packages\\nodeenv.py\", line 742, in install\n_npm_win\nE                   zipf.extractall(src_dir)\nE                 File \"c:\\python27\\Lib\\zipfile.py\", line 1053, in extractall\nE                   self.extract(zipinfo, path, pwd)\nE                 File \"c:\\python27\\Lib\\zipfile.py\", line 1041, in extract\nE                   return self._extract_member(member, path, pwd)\nE                 File \"c:\\python27\\Lib\\zipfile.py\", line 1092, in _extract_member\nE                   os.mkdir(targetpath)\nE               WindowsError: [Error 206] The filename or extension is too long: 'C:\\\\temp\\\\a\\\\test_run_a_node_hook0\\\\0\\\n\\.pre-commit\\\\repogflpmz\\\\node_env-default\\\\src\\\\npm-latest\\\\node_modules\\\\pacote\\\\node_modules\\\\make-fetch-happen\\\\node\n_modules\\\\http-proxy-agent\\\\node_modules\\\\agent-base\\\\node_modules\\\\es6-promisify\\\\node_modules\\\\es6-promise\\\\dist'\nI'm wondering if we pick a shorter tempdir that it'll work better?  Also wondering if this just works given my home directory depth.. Yeah even with significantly limiting the path depth, I'm still having issues. See also https://github.com/npm/npm/issues/17663. Here's the new issue: https://github.com/npm/npm/issues/18978. I would hope so, but I've also seen that even with the setting enabled it still doesn't work (and I don't have a good reason for why) (maybe needs a system restart to take?)\nI'm going to try poking this again with the reproduction I made in npm/npm#18978 and see what registry settings I can tweak.. interesting!  I'll see if I can make that work -- either in cpython or in nodeenv -- never knew about \\\\?\\!. wow.  it works!?!?! I'm both terrified and amazed by this \"api\":\n```console\n(venv) C:\\Users\\Anthony\\workspace>nodeenv \\?\\C:\\Users\\Anthony\\workspace\\nenv\n * Install prebuilt node (9.4.0) ..... done.\nYou do not have sufficient privilege to perform this operation.\nYou do not have sufficient privilege to perform this operation.\nError: Failed to create nodejs.exe link\n * Install npm.js (latest) ...\n(venv) C:\\Users\\Anthony\\workspace>nenv\\Scripts\\activate.bat\n(nenv) C:\\Users\\Anthony\\workspace>nenv\\Scripts\\npm.cmd install left-pad\nnpm WARN saveError ENOENT: no such file or directory, open 'C:\\Users\\Anthony\\workspace\\package.json'\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN enoent ENOENT: no such file or directory, open 'C:\\Users\\Anthony\\workspace\\package.json'\nnpm WARN workspace No description\nnpm WARN workspace No repository field.\nnpm WARN workspace No README data\nnpm WARN workspace No license field.\n\nleft-pad@1.2.0\nadded 1 package in 0.547s\n``. This'll make it into the next release.  Note that due to https://bugs.python.org/issue32539, until python/cpython#5169 is merged python 2 will not work.  Presumably this will get merged and it will work with 2.7.15 -- until then use python 3 :). This seems to work with the latest git-for-windows (They addedgrep -P` support).  The tests for this are passing in appveyor\n. Reopening after #355\n\nHere's the cygwin mailing list entry related: https://cygwin.com/ml/cygwin/2016-04/msg00157.html\n. Since we're deprecating pcre (#634) this will not be completed.\n(I'm still interested in fixing the cygwin bug, but maybe another day!). Seems your tempfs is on a different device and os.rename derps on that.  Thanks python!  Should be easy enough to fix :)\n. I think I might be able to solve this with xargs -s perhaps\n. The other idea I have is it is hitting the file descriptor limit which seems to be surprisingly low on windows.\n. pre-commit shouldn't be grabbing file descriptors.  I did see the same problem with just git add which makes me think it might be some git internal that's misbehaving.  At the moment I'm trying to reproduce this under test (and not just interactively) and failing :/\n. Linux depends on the implementation. POSIX says 4096 is the lowest minimum so I'm going to choose -s 4000 to be pretty safe.\n. @guykisel Please check v0.4.2 (just released)!\n. I have a fix for the issue reported, I imagine your bug is a UnicodeDecodeError somewhere else though (or why are are you using unknown non-ascii hook ids?), I'd love to see that stacktrace :)\n. @Lucas-C Could you open a new ticket for this?  I imagine the work I'm doing for this issue wrt output will actually resolve that issue as well, but it's hard to say.  Could you also attach the following (if possible):\n~/.pre-commit/pre-commit.log\nThe output of sh -c 'cd my-java-project && mvn test -Drun-integ-tests=true'\nIt'd greatly help me reproducing this error. I imagine the cause is mvn outputting some non-utf-8 character in the output stream.\n. I looked a bit at these two projects: https://github.com/phpenv/phpenv and https://github.com/CHH/phpenv\nThey both seem kind of deadish unfortunately (the first has a completely dead dev branch, and a partially (?) working master branch).   They both seem like I could use a similar approach to our ruby support to get a virtualenv-like thing working\n. This seems more promising: https://github.com/virtphp/virtphp\n. Indeed, that's the goal :)\n. This was initially looked into in #458 but it was decided it was too fragile and difficult to support properly.\nThe suggested route for php-based hooks is to use the new (in 0.10.0 docker support).  http://pre-commit.com/#supported-languages talks about how to approach implementing hooks using docker.. I'll likely merge #583 and call this \"done\" for now -- it uses some guesswork to replace sha lines intelligently while maintaining original formatting.\nA different configuration language that actually roundtrips is really necessary to solve this in all cases.. via #583 -- available in 0.16.3. womp, opened https://bitbucket.org/ruamel/ordereddict/issue/1/not-installable-under-pypy\n. This also doesn't seem to roundtrip lists / indentation.  Just comments.  So it's an improvement, but not a fix :/\n. I've rebased this, it's still not ready to ship -- I need to work out some bugs with upstream first\n. TODO: this doesn't roundtrip for some reason: (it drops the comment)\nyaml\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: cf550fcab3f12015f8676b8278b30e1a5bc10e70\n    # foo\n    hooks:\n    -   id: trailing-whitespace\n. Also the following:\n- https://bitbucket.org/ruamel/yaml/issues/24\n- https://bitbucket.org/ruamel/yaml/issues/25\n. @AvdN  I can probably handle that -- while we're on the subject of !!tags is there a \"Safe\" RoundTripLoader / RoundTripDumper ?\n. @AvdN ah, the main reason I ask is this:\n``` python\n\n\n\nfrom ruamel.yaml.compat import ordereddict\nimport ruamel.yaml\nruamel.yaml.dump(ordereddict(), Dumper=ruamel.yaml.RoundTripDumper)\n'!!omap []\\n'\nruamel.yaml.load(ruamel.yaml.dump(ordereddict(), Dumper=ruamel.yaml.RoundTripDumper))\nordereddict([])\n```\n\n\n\nIs there a different type I should use in my tests other than ordereddict for making yaml structures?\n. We'll continue to explore options in #414.. This was fixed here: https://github.com/pre-commit/pre-commit-hooks/commit/4078cbedf0360dce2b7cd02cb2812fc50b76b98d\nBumping to a newer version of that repo will fix. (v0.4.1 is tagged I believe)\n. The hook is erroring, not the tool.  You'll need to update .pre-commit-config.yaml\n. What is your pwd?\n. Well you're not really supposed to develop inside of submodules (they aren't quite full git repos) but I guess we can support this workflow. The fix is a regression test and to mkdirp the hooks directory I'd imagine. A workaround is to manually make the hooks directory yourself. \n. Ah I think I'm wrong here -- in newer git, submodules have an entirely separate git directory from the repository.  This means our trick of searching upwards for the git dir won't work.  Apparently there is git rev-parse --git-dir which will get us what we want maybe? \n. So I took an initial look into this, it's slightly more difficult than I initially thought since we (erroneously) depend on the git directory existing at the top level of the repository for several things (such as where to chdir right before running hooks).  Therefore this needs to be split into two concepts: git-dir and git-root.\n. Hmmm that is odd!\nCan you supply the following:\n$ git --version\n$ pre-commit --version\nAnd potentially can you cd to that directory and see what git status is?  (The directory might be hard to find... hmm...)\nYou can find it by doing the following:\n$ sqlite3 ~/.pre-commit/db.db 'SELECT path FROM repos WHERE repo = \"git url for repo\" AND ref = \"sha you are using\"'\nAlso I'm curious if pre-commit clean will fix it (obviously not a solution as I'd like to prevent getting into this situation).\nI have some ideas on how to fix it if it's just that git changed how --no-checkout + checkout works\n. Currently building git from source, I imagine this is a git change :/\n. Can you cat /etc/gitconfig and ~/.gitconfig ?\n. Quite strange!  I'm still having trouble reproducing, I imagine it might be whatever hub 2.2.0 is that's making this different.  Lemme make a shotgun-debugging branch that might fix the issue?\nCan you try with this branch: reset_instead_of_checkout (just pushed to origin)\n. Version 0.4.3 contains this fix\n. This makes almost no sense,  why does a fresh checkout have a dirty working directory? What is changed inside that directory when you're stashing?\nThese are the commands that are being run, can you try them in another directory? \n```\ngit clone ... --no-checkout repo\ncd repo\ngit status # should show all deleted\ngit reset ... --hard\n. Can you also `which git`\n.\nls -l which git\n```\nmight be useful as well\n. This fix is included in 0.4.4\n. @matthayes Can you paste the following commands for me?\n$ cat .pre-commit-config.yaml\n$ which pre-commit\n$ pre-commit --version\n$ python -m pre_commit.main --version\n$ ls ~/.pre-commit/ -al\n. That is quite strange!  pre-commit installs the hook environments into the home directory usually.  What operating system are you using (and where can I get a copy of pyenv)?\nAlso what does:\nbin/python -c \"import os.path; print(os.path.expanduser('~'))\"\nGive you?\nSorry if this message is derpy I'm on my phone\n. I'll look into this when I'm at a computer.  I imagine this might be a pyvenv vs. virtualenv difference or something with PYTHONPATH etc.\n. I'll check this on my work laptop (OSX).  I can't reproduce this using pyvenv on ubuntu unfortunately :/\n. Oops, busy day at work and didn't get to this.  A couple things to try though: what happens if installed with virtualenv instead of pyvenv? Inside of pyvenv what does which pip give you.  I also wonder if there's something odd with your environment,  of you're willing to pastebin the output of env.\n. I am able to reproduce this on osx.  Lemme see if I can make a small reproducible testcase.  I imagine that either pyvenv or virtualenv is doing the wrong thing for some reason :(\n. oops didn't mean to push that directly to master.  @matthayes can you try current master and see if it fixes your issues? pip install git+git://github.com/pre-commit/pre-commit instead of pip install pre-commit.  If it fixes it I'll release another version including this fix\n. This was fixed in version v0.4.1 of pre-commit-hooks.  You can fix this automatically by running pre-commit autoupdate\n. I'm going to mark this as fixed, I've gotten a local reproduction that doesn't happen after my patch.  I'll roll a new version soon.\n. Hello @Lucas-C \nNice hooks! If you want I'd suggest PRing http://github.com/pre-commit/pre-commit.github.io to add your hook to http://pre-commit.com/hooks.html or alternatively make a pull request to http://github.com/pre-commit/pre-commit-hooks\nFor local development you can change the repo path to a path on disk.  Such as:\nyaml\n-   repo: /home/asottile/workspace/pre-commit-hooks\n    sha: 9ce45609a92f648c87b42207410386fd69a5d1e5\n    hooks:\n    -   id: trailing-whitespace\nI've used this approach before, it's a bit clunky since there isn't really an editable way do do this, but the next point should explain why it's not easy to make that work.\nYou can read my comment here about why latest isn't going to work (or it would work but it couldn't be performant / repeatable / always correct): https://github.com/pre-commit/pre-commit/issues/158\nThat is a good point about setup.py! I'll add a section to the docs about the requirements (since node and ruby also have their own similar requirements).\nThanks again!\n. Let me know what you think of the doc updates here: https://github.com/pre-commit/pre-commit.github.io/pull/43\n. :+1: \nHere's another that should make autoupdate more obvious: https://github.com/pre-commit/pre-commit.github.io/pull/45\n. I think this is resolved now, feel free to reopen if I missed something :)\n. I think this is along similar lines of this: https://github.com/pre-commit/pre-commit/issues/173\nAnd is kind-of possible: https://github.com/Yelp/venv-update/blob/a5960acab7101a1e70c57945b2038fef9d005aed/.pre-commit-config.yaml#L15-L22\nI'd certainly like to make this easier though :)\n. Yeah that way works currently, I wouldn't call it supported yet since it's kinda clunky and I want a more straightforward way of doing that.  That method is unlikely to break though.  I imagine the actual implementation will be similar\n. I'm going to clarify here since I think I'm a bit confused :)\nI'd like to make @bukzor's config work when it changes from:\nyaml\n-   repo: git://github.com/bukzor/pre-commit-system-hook.git\n    sha: 64a3e3f0d11f74ccd0498ea3149c8e177dd9989c\n    hooks:\n    -   id: system\n        name: PyLint\n        entry: python -m pylint.__main__\n        language: system\n        files: \\.py$\nto \nyaml\n-   repo: pre-commit-locally-configured\n    hooks:\n    -   id: pylint\n        name: PyLint\n        entry: python -m pylint.__main__\n        language: system\n        files: \\.py$\nI think (but I might be a bit off!) that all we would need to change to support this is:\n- Change the config schema to allow for missing sha in the case the repo is our special value\n- In the case that our repo is the special value, the repository is a special list which contains \"all hooks\" (that is to say that anything we configure in our config will match a hook in this special repo)\n- Allow the current code which merges the config dict on top of the manifest dict to continue to work (might need it in another place as well)\nDoes this sound right? (mostly wanted to just get a checklist together so it's clear what the plan is here :D)\n. > Also: can we put system-style hooks at the top level?\n@bukzor this would entail a breaking change to the config file, I don't really want to do that at this time.\nEDIT: null also seems fine to me as well\n. +1 this would be great, we already do some file filtering so I imagine we could just add another filtering function to do this. If we didn't support windows I'd probably use something like libmagic, but shouldn't be too hard to find printables / unprintables\n. We've started work on a separate library that will assist in making this possible: https://github.com/chriskuehl/identify. @friederbluemle I decided to sit down and complete this today: https://github.com/pre-commit/pre-commit/pull/551. This is now available in 0.15.0 via types: [text].. Ah, this test should change PATH to something minimal.  The test is useful for the \"make sure it can fail\" aspect but you're right it can be quite twiddly. \n. I can reproduce and I've created a PR which should fix this: #222\n. I like the idea.\nI wonder if we can simplify this further and reuse existing logic by making local-hooks slightly less special to configure:\n- Make a special value for repo (for instance pre-commit-locally-configured or maybe something less verbose)\n- If that special repo is encountered, its backing manifest is a list which always contains all hook ids with basically a Null configuration\n- The code already allows overriding of all the keys presented in the backing configuration so the rest would just work\nI also like the cleanup work that was done for _run_hooks it might be easier to think about this review if we split this into two PRs as well\n:thumbsup:\n. Yeah the json schemas do kind of overlap.  I really hope to get rid of them eventually (as we've discussed in the other issue) and replace them with a bunch of functions.\nimo aim for correctness and readability instead of working hard at DRY, I've found that in a lot of cases expressiveness / correctness kind of work against DRY-ness.  Though I think replacing the jsonchemas will actually make a lot of things cleaner / more flexible but that's definitely out of scope for this change I would think :)\nI'm cool with making sha optional as long as we require it in the normal case\n. I'll comment on the second thing when I'm not on the phone :D\nThe first however: though the fields are not specified in the config schema,  the way the runtime hook dictionary is made is by merging the config dict on top of the manifest dict.  JSON schema is a bit permissive in that it let's you add keys even if they aren't in the schema. \n. Address comment for pre_commit/runner.py and I'll merge\n:+1: \n. Ah yeah as for jsonschema, I totally got you confused with another person.  I'm terrible sorry about that >.<  Here's the comment I mentioned it in: https://github.com/pre-commit/pre-commit/issues/157#issuecomment-98570101\n. Oh forgot to mention, please PR to add your name on http://github.com/pre-commit/pre-commit.github.io :D\nThanks for contributing!\n. We have several (closed source,  sorry!) hooks at yelp that do wildly different things based on the arguments that are passed to them.  This allows them to reuse the backing repo but have several calls to that hook.  And you're right, running by a single hook id is a bit awkward in this case.  This however is a feature we depend on so I added this test. \n. Overall looks great!  Fix up those few little things, squash the commits and I'll merge it \\o/\n. Appveyor seems to be mad because it merge-conflicts with master now\n. :+1: Thanks for the contribution! Please PR http://github.com/pre-commit/pre-commit.github.io to add yourself :D\n. This has been released as part of 0.5.0\n. :+1: Looks great, address my last couple comments and I'll merge it\n. This has been released as part of 0.5.0\n. local hooks are now documented here: http://pre-commit.com/#repository-local-hooks\n. Ah the fix in #185 makes more sense now! I just didn't connect 2 and 2 together.\n. I think this is possible with the current tooling maybe?\nmkdir -p bin\necho 'cd my/project/subfolder && grunt validate' > bin/grunt-validate-subfolder\nchmod 755 bin/grunt-validate-subfolder\ngit add bin/grunt-validate-subfolder\nWith a config similar to this:\nyaml\n- repo: local\n  hooks:\n  - id: grunt-validate\n    name: Grunt validate\n    files: ^my/project/subfolder\n    entry: ./bin/grunt-validate-subfolder\n    language: script\n. Iirc you can shorten that to:\n...\n        entry: sh -c 'cd ... && ...'\n. This has been released as part of 0.5.0\n. @Lucas-C look correct?\n. This has been released as part of 0.5.0\n. Yeah it was actually in the version-negative-one of the project, but is horribly broken for a nontrivial number of files: https://github.com/pre-commit/pre-commit/commit/7bb7f4a4838dbd5d52873187cc9b1b51b83cf0ba\nI also ran into this while implementing pcre hooks, and you can see the \"correct\" way here (pcre are basically just special system hooks): https://github.com/pre-commit/pre-commit/blob/2ec7a34035e3072b2a4d118131fbf3b64c12b2f6/pre_commit/languages/pcre.py#L19-L23\nYou can see the test specifically tailored to this \"bug\" for pcre hooks here: https://github.com/pre-commit/pre-commit/blob/2ec7a34035e3072b2a4d118131fbf3b64c12b2f6/tests/repository_test.py#L157-L173\nThe problem is with the way that xargs works (we'll use -n 1 to simplify the problem, but the same occurs with generalized larger n):\n``` sh\ntest.sh\nTrivial shell file which executes whatever command is given to it\n$1\n```\n$ ./test.sh true; echo $?\n0\n$ ./test.sh false; echo $?\n1\n$ echo true false | xargs -n 1 ./test.sh; echo $?\n123\n$ echo false false | xargs -n 1 ./test.sh; echo $?\n123\nConsider false to be like \"grep failed to match\", it's impossible to distinguish between \"grep failing to match\" in not all the processes vs \"grep failing to match\" in all of the processes.\nI could reimplement xargs inside of pre-commit, but I don't want to do that and I don't think I'd get it right in all of the edge cases.\n. https://github.com/pre-commit/pre-commit-hooks/issues/59\n. cc @Lucas-C \n. Fix is included in 0.5.2 cc @bukzor \n. ++ thanks for the quick code! I was going to get to this later but you beat me to it! test-n-ship\n. The main benefit to running all of the hooks is for fixers.  That said, this seems like a reasonable idea.  The unfortunate bit is there isn't a good place to put it in .pre-commit-config.yaml without breaking the schema :S\n. Oh I imagined we would want a top level all-or-nothing option instead of having to repeat it in every hook.  The breaking change I was thinking of was changing the config to be a map instead of a list (Which would enable a bunch of other things I've wanted to do). Apis are hard. \nAnd yeah I'm planning on ditching JSON schema.  if we're just adding a property to hooks it's probably not breaking (we've done it in the past)\n. I'd rather have a format that looks like this, though migration will be somewhat difficult:\nyaml\nfail-fast: true\nrepos:\n-   repo: local\n    hooks:\n    -   id: ...\n        ...\n. This will be available in 1.1.0 (once released) -- I plan to also throw in a couple other things as well into this release.\nThe format for failing fast is:\nyaml\nfail_fast: true\nrepos:\n- ...\nas such it is only available with the v2 configuration introduced in 1.0.0. This is now available in v1.1.0!  Thanks again for the issue!. Thanks for the patch!  I'll bump the version hopefully later today\n. This is available in 0.5.3\n. 0xbb is latin1 not utf8. \n. The utf8 representation for that character is \\xc2\\xbb\n. The approach I want to take instead is to not parse (decode) the output at all and just write to the stdout bytestream.\n. Fixed via #247 \n. Thanks for the patch!  Please PR https://github.com/pre-commit/pre-commit.github.io to add yourself to the contributors :D\n. @Lucas-C \n. This is in 0.5.4\n. Correct, in fact the other template is non executable as well!\n. Thanks! \n. Thanks again,  friend! \n. @chriskuehl if you put language_version: python2.7 on reorder imports I think this is merge able\n. Also apparently \"you cannot merge a request with failing checks from a phone\". Switch to desktop version works though.  Dumb feature github :/\n. Would running git diff after all the hooks satisfy this?\n. This seems similar to the approach that I wanted to take.  One thing that I wanted though is a way for hooks to opt into checking submodules / symlinks in hooks.yaml\n. Yeah that sounds good, also makes it easy to implement #220\n. I think the way I'd like to see this implemented is a per-hook stage option (that defaults to a list of all the stages, currently ['commit', 'push']).\nProbably something like:\nyaml\n-   repo: ...\n    sha: ...\n    hooks:\n    -   id: check-added-large-files\n        stages: [commit]\n    -   id: check-merge-conflict\n        stages: [push]\nDoes this seem reasonable?\n. I'm not sure what this would look like?  Currently pre-commit is designed entirely around feeding a list of files to hooks.\n. So it sounds like the already-existing pre-commit run --origin {remoteref} --source {currentref} would solve your problem?\n. Right, at pre-commit time there is no commit so you cannot compare commits.  The above command is already what is used for pre-push.\nTo support what you want at pre-commit time I'd suggest invoking git commands inside your hook (similar to how this one works).\n. You'll need to respond to some file change.  Otherwise there's nothing to lint?\nThe hook in question responds to all files: https://github.com/pre-commit/pre-commit-hooks/blob/master/hooks.yaml#L13-L14\n. --amend without changed files will also have nothing to lint.\n. Yeah sounds about right.  Everything is currently based on files and I don't see that changing any time soon.\n. Seems reasonable to me, under which conditions would files and exclude take effect? or would they be anded with the types?\n. You can use files in .pre-commit-config.yaml without needing to mess with exclude, other than that sounds accurate / reasonable.  I'm +1 for breaking backwards compatibility with symlinks / submodules since they've only caused headaches for us and afaik there aren't any existing hooks that actively target symlinks / submodules (though I have some ideas for them).\nOverall: let's do it!\n. I think we should require files OR types (and allow both).  This would still require hooks to be explicit about the things they target.\nMy concern about removing files in most cases is we'll have to build a mapping of file extension to language name inside pre-commit which I'd ideally like to avoid, though I don't know a way around it.  Actually, I think there's a stdlib mimetype module or something of the sort that might solve that problem... hmm...\n. And yeah, that transformation looks correct\n. Looks great, I'm looking forward to this feature :D\n. This is now available in pre-commit 0.15.0 via identify and types: [...]. Looks good, mind writing a test so this doesn't regress? \n. Probably this file would suffice: https://github.com/pre-commit/pre-commit/blob/master/tests/repository_test.py\nSomething similar to what test_switch_language_versions_doesnt_clobber does but set up a virtualenv in the home directory \n. Sweet, looks good -- minor nitpicks left :D\n. Sweet! Thanks for the PR, be sure to add yourself on https://github.com/pre-commit/pre-commit.github.io\n. Seems no longer necessary with latest virtualenv\n. now to get yelp to upgrade...\n. Awesome! I'll merge this once appveyor is happy\n. :shipit:\n. Thanks for the PR!\n. Thanks for the pr!\nWe can probably add this information to http://github.com/pre-commit/pre-commit.github.io\n. Just released 0.5.5 :)\nThanks again!\n. Yeah but it's slightly awkward if you're not a python shop/project and you're stuck on lucid / old debian / old osx / old etc. hmmmmm\n. Our tests are now failing due to flake8 dropping python2.6.  I believe this is enough reason to drop python2.6 support.\n0.8.x will be the last versions that support python2.6, starting in 0.9.0 python2.7+ will only be supported\n. Seems this is broken in pip<=1.4, upgrading to at least 1.5 solves this.  pip 1.5 was released on 2014-01-02 and at least in trusty, python-pip is old enough: http://packages.ubuntu.com/trusty/python-pip (though not in precise :/)\nSince there's an upstream issue here: https://github.com/Julian/jsonschema/issues/233 I'm tempted to close this as wontfix on our end.\nIf you want your virtualenv to create a newer pip by default, I'd suggest upgrading virtualenv.  The version we use at work is kinda old (1.11.x) but it'll still installs pip1.5 by default.\n@ericklaus-wf  what do you think?\n. I think I can do this with the new travis-ci cron jobs. Neat:\n- https://travis-ci.org/pre-commit/cron-mirror-creation\n- https://github.com/pre-commit/cron-mirror-creation\n. Yeah we're still missing proper documentation from #226\nWe'll track that work here: https://github.com/pre-commit/pre-commit.github.io/issues/50\n@EliRibble do local hooks satisfy your requirements?\n. No problem!  Hopefully I find some time to get those docs updated :)\n. local hooks are now documented here: http://pre-commit.com/#repository-local-hooks\n. that seems a bit excessive -- why not configure pylint as a local hook like the documentation suggests?. it does, yes but you're also building a virtualenv manually for pylint's sake too. and again, pylint is a bit of a special snowflake here -- it does both static analysis and dynamic analysis (which needs to actually import your code). Would it be sufficient to document these?  There's too-many-to-count ways to grab a list of filenames that can be satisfied in other ways:\n- A sha: git diff 857fd4 857fd4^ --name-only | xargs pre-commit run --files\n- A range of shas: git diff 3d90b0 857fd4 --name-only | xargs pre-commit run --files\n- Stdin: ... | xargs pre-commit run --files\n- etc.\n. Tests seem good :)  python3 is unhappy though\n. @barrysteyn Thanks for the PR :D\nI'll push a new version now\n. Sure, the docs are updated through https://github.com/pre-commit/pre-commit.github.io\nAs for the repository test, the end-to-end tests for ruby / javascript are painfully slow (building ruby from source when the binary distribution isn't available is hella slow) (probably looks like they've stalled).  Because of this I made a way to skip them (slowtests=false make test).  I can document this.  For now I've created #274\nAs for the future of the project, email is probably the best place for that :)\n. fwiw #275 should make one of the tests faster if you're running 14.04\n. /me shakes fist at https://github.com/pytest-dev/pytest/issues/1089\n. I PR'd your PR :)\n. @barrysteyn  the nice bit about me PRing your PR is I can just merge it now :P\n. This is available in version 0.6.1\n. The version that rbenv hands us on osx is ancient:\n(rbenv) ... $ gem --version\n1.8.23\nSeems we can switch from --no-document to --no-ri --no-rdoc which is less future-proof but reasonable\n@Lucas-C introduced this and may have  opinions :)\n. Closes #278 \n. The issue is from jsonschema unfortunately :/\nIf you upgrade pip before installing pre-commit it should be fixed.\nYou can read more details here:\nhttps://github.com/Julian/jsonschema/issues/233\n. No problem, friend!  Glad to help :)\n. Unfortunately,  this suffers from the same problem as #240 in that the top level is currently a list and not a dictionary\n. Only took two years \ud83d\ude06 but I'm finally able to implement this, PR #617 adds a global exclude.. This is now available in v1.1.0!  Thanks again for the issue!. Hmmm, let me try and reproduce this locally -- we may need to change the approach we take for our dummy packages.\nEDIT: could you include the npm-debug.log file it mentions above?  It might be difficult to grab since pre-commit'll delete that directory but maybe you can set a breakpoint right before that happens?  If not, when I reproduce I should be able to grab it :)\n. Seems to reproduce for me as well:\n```\n$ pre-commit run --all-files\n[INFO] Initializing environment for git://github.com/pre-commit/mirrors-jshint.\n[INFO] Installing environment for git://github.com/pre-commit/mirrors-jshint.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ['bash', '-c', \". '/home/asottile/.pre-commit/reposRZR8Q/node_env-default/bin/activate' && cd '/home/asottile/.pre-commit/reposRZR8Q/' && npm install -g\"]\nReturn code: 254\nExpected return code: 0\nOutput: \n> __dummy_package@0.0.0 preinstall /home/asottile/.pre-commit/reposRZR8Q/node_env-default/lib/node_modules/.staging/__dummy_package-0adb18984398eae8db464c8212778591\n> npm install jshint@2.6.3 -g\n\n/home/asottile/.pre-commit/reposRZR8Q/node_env-default/bin/jshint -> /home/asottile/.pre-commit/reposRZR8Q/node_env-default/lib/node_modules/jshint/bin/jshint\n/home/asottile/.pre-commit/reposRZR8Q/node_env-default/lib\n\u2514\u2500\u252c jshint@2.6.3 \n  \u251c\u2500\u252c cli@0.6.6 \n  \u2502 \u2514\u2500\u252c glob@3.2.11 \n  \u2502   \u251c\u2500\u2500 inherits@2.0.1 \n  \u2502   \u2514\u2500\u2500 minimatch@0.3.0 \n  \u251c\u2500\u252c console-browserify@1.1.0 \n  \u2502 \u2514\u2500\u2500 date-now@0.1.4 \n  \u251c\u2500\u2500 exit@0.1.2 \n  \u251c\u2500\u252c htmlparser2@3.8.3 \n  \u2502 \u251c\u2500\u2500 domelementtype@1.3.0 \n  \u2502 \u251c\u2500\u2500 domhandler@2.3.0 \n  \u2502 \u251c\u2500\u252c domutils@1.5.1 \n  \u2502 \u2502 \u2514\u2500\u252c dom-serializer@0.1.0 \n  \u2502 \u2502   \u251c\u2500\u2500 domelementtype@1.1.3 \n  \u2502 \u2502   \u2514\u2500\u2500 entities@1.1.1 \n  \u2502 \u251c\u2500\u2500 entities@1.0.0 \n  \u2502 \u2514\u2500\u252c readable-stream@1.1.13 \n  \u2502   \u251c\u2500\u2500 core-util-is@1.0.1 \n  \u2502   \u251c\u2500\u2500 isarray@0.0.1 \n  \u2502   \u2514\u2500\u2500 string_decoder@0.10.31 \n  \u251c\u2500\u252c minimatch@1.0.0 \n  \u2502 \u251c\u2500\u2500 lru-cache@2.7.0 \n  \u2502 \u2514\u2500\u2500 sigmund@1.0.1 \n  \u251c\u2500\u2500 shelljs@0.3.0 \n  \u251c\u2500\u2500 strip-json-comments@1.0.4 \n  \u2514\u2500\u2500 underscore@1.6.0\n\nErrors: \n    npm ERR! Linux 3.16.0-51-generic\n    npm ERR! argv \"/home/asottile/.pre-commit/reposRZR8Q/node_env-default/bin/node\" \"/home/asottile/.pre-commit/reposRZR8Q/node_env-default/bin/npm\" \"install\" \"-g\"\n    npm ERR! node v5.0.0\n    npm ERR! npm  v3.3.6\n    npm ERR! path /home/asottile/.pre-commit/reposRZR8Q/node_env-default/lib/node_modules/.staging/__dummy_package-0adb18984398eae8db464c8212778591\n    npm ERR! code ENOENT\n    npm ERR! errno -2\n    npm ERR! syscall rename\nnpm ERR! enoent ENOENT: no such file or directory, rename '/home/asottile/.pre-commit/reposRZR8Q/node_env-default/lib/node_modules/.staging/__dummy_package-0adb18984398eae8db464c8212778591' -> '/home/asottile/.pre-commit/reposRZR8Q/node_env-default/lib/node_modules/__dummy_package'\nnpm ERR! enoent This is most likely not a problem with npm itself\nnpm ERR! enoent and is related to npm not being able to find a file.\nnpm ERR! enoent\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/asottile/.pre-commit/reposRZR8Q/npm-debug.log\n\nCheck the log at ~/.pre-commit/pre-commit.log\n```\n. As a workaround you can craft a config that looks like this:\n-   repo: git://github.com/pre-commit/mirrors-jshint\n    sha: e86225836aadd058036f47a6de9b0ee0440476eb\n    hooks:\n    -   id: jshint\n        language_version: 4.2.1\n. I think it's more likely these issue: \n- https://github.com/npm/npm/issues/9847\n- https://github.com/npm/npm/issues/9633\n. I'm working on a workaround in pre-commit-mirror-maker that'll use the features added in #295 #311 #316 \n. With the latest version of pre-commit and the latest version of these hooks it should be fixed.\nFor those of you mirroring nodejs repositories, I'd suggest (re?)generating newer versions with the latest pre-commit-mirror-maker which has a fix for this.\n. @elidupuis from the repo side, yes.  Consumers should update pre-commit and pull the latest version of those hooks as well.\n. This could use access time at best.  I'd say temp watch but that's probably not going to with well on windows.  Also it wouldn't work so well with our bookkeeping database.  I'd also rather not add to the bookkeeping since that makes the upgrade path complicated. \n. atime seems acceptable (at least on Linux) if the disks are mounted with the option enabled.  For more reading, check out https://en.m.wikipedia.org/wiki/Stat_(system_call)#Criticism_of_atime\n. @shaleh It could, I've considered that above:\n\nI'd also rather not add to the bookkeeping since that makes the upgrade path complicated.\n\nI'd imagine that could be just a single extra column on the database, upgrade path would be to test the schema and update it if it is out of date.  I guess that wouldn't be the worst.\n. I might take a stab at it this weekend, it's probably easier than I thought and rollback safe\n. @shaleh There isn't a great user-friendly interface for it but:\n$ sqlite3 ~/.pre-commit/db.db \nSQLite version 3.8.2 2013-12-06 14:53:30\nEnter \".help\" for instructions\nEnter SQL statements terminated with a \";\"\nsqlite> select * from repos;\nhttps://github.com/pre-commit/pre-commit-hooks.git|cf550fcab3f12015f8676b8278b30e1a5bc10e70|/home/asottile/.pre-commit/repo586Ies\nhttps://github.com/pre-commit/pre-commit.git|8dba3281d5051060755459dcf88e28fc26c27526|/home/asottile/.pre-commit/repo9TbTfw\nhttps://github.com/asottile/reorder_python_imports.git|3d86483455ab5bd06cc1069fdd5ac57be5463f10|/home/asottile/.pre-commit/repot3CqS8\ngit@github.com:pre-commit/mirrors-scss-lint|3eb13b9647543ad4d6a62c8be8a9131e3b99b96a|/home/asottile/.pre-commit/repoYBDyFK\ngit@github.com:pre-commit/pre-commit-hooks|516cc9fa72ad09699f2c03ffbd0aa7f60d75b59a|/home/asottile/.pre-commit/repoIPr2Vp\nhttps://github.com/pre-commit/pre-commit-hooks|9ba5af45ce2d29b64c9a348a6fcff5553eea1f2c|/home/asottile/.pre-commit/repoAm4y7d\nhttps://github.com/pre-commit/pre-commit|8dba3281d5051060755459dcf88e28fc26c27526|/home/asottile/.pre-commit/repoVOlKJW\nhttps://github.com/asottile/reorder_python_imports|3d86483455ab5bd06cc1069fdd5ac57be5463f10|/home/asottile/.pre-commit/repoVmqogs\ngit@github.com:pre-commit/pre-commit-hooks|cf550fcab3f12015f8676b8278b30e1a5bc10e70|/home/asottile/.pre-commit/repoDpb6im\n. You can remove ~/.pre-commit via pre-commit clean -- the next invocation of pre-commit will install the required hooks (so your next commit may be slower) but otherwise it is harmless to remove.. #906 implements a thing which:\n- keeps track of the .pre-commit-config.yaml files in the pre-commit db\n- adds a pre-commit gc command which cleans all repos which aren't referenced. This has been released as part of v1.14.0 \ud83c\udf89  -- thanks again!. From #213 I think a proper solution should use git rev-parse --git-dir\n. pre-commit install will succeed, but hooks will not run with the correct pwd.\nI think a test that uses a submodule should be able to show this issue.\n. Implemented in #321 \n. welll appveyor isn't working yet still due to the coverage bug... so not yet :(\n. Unfortunately the hooks are executed with xargs and the filenames are fed as stdin to xargs\nWithout writing our own xargs in python I'm not sure this is possible.  Even if it was, we bundle up all the stdout / stderr to hide it if the hook passes.\nSo.... probably no :(\n. Yeah this is covered by #210. I have a mostly working (but needs rebase) pr to solve this with #211 but I haven't had time to complete it. \nA workaround is git checkout -p .pre-commit-config.yaml\n. Looks great, could you add a test for this?\nI'll figure out the appveyor derpiness :/\n. Thanks again for the PR!\n. I'll do that today when I get to work :)\n. This is available as 0.6.5\n. Sounds pretty reasonable, how about additional_dependencies instead of dependencies?\nThis would actually be a nice way to replace the wacky mirrors repos!\n. Sounds great :+1: \n. Via #295 \n. derp, those commits referencing this are incorrect.  That should say #294\n. I'm not sure what you mean?. I don't think that's how require(...) works?\nI think what you're reaching for is a (discouraged) system hook.. The arguments in additional_dependencies are indeed passed to npm install ... -- whatever npm install takes will technically function.  It might not be the best idea to include repository-specific state in there as it will be cached for all instances of that hook (with identical configuration).. Via #302 \n. Looks great, don't worry too much about appveyor, their stuff is broken right now :/\n. @blarghmatey you'll want to add a test that triggers the additional_dependencies behaviour for each of the three languages (the coverage it is complaining about).\npy26 is notably touchy due to some coverage bugs around context managers that are hard to avoid / factor out (which is why the minimum is set to 99% anyway).\nYou can probably add the tests to tests/repository_test.py.  You'll want to augment def _test_hook_repo to support additional_dependencies I think?  Or use the bits that that guy calls in order to write your own helper.\nI also sent a PR for you: https://github.com/blarghmatey/pre-commit/pull/1\n:)\n. Yep, I'll run through these :)\n. I opened a PR against your branch: https://github.com/blarghmatey/pre-commit/pull/2\n. One last thing, let's add these to the json schemas (pre_commit/clientlib/validate_{manifest,config}.py\nAnd then :shipit:!\n. @blarghmatey sounds good.  I'll merge this when I get into work (I'll probably spec them in manifest anyway since I have some usecases where I'll want them there)\nThanks for the awesome PR!   Please add your self (if you'd like) on https://github.com/pre-commit/pre-commit.github.io\n. via #301 \n. fixnship\n. I found a separate bug about writing that same stacktrace to the logfile.  I'll be fixing both it seems!\n. Oh derp, I haven't released a new version yet.  Disregard \\o/\n. Under 0.6.7 this seems to work excellently!\n```\n$ pre-commit run yapf --files pre_commit/main.py\nyapf.....................................................................Failed\nhookid: yapf\nFiles were modified by this hook.\n```\n. Ah dang, this has to do with the way we format in the prefix directory.\nA workaround for now is to replace {1} with {{1}}.\nI wonder if I should document this somewhere as whatever I choose for substitution it'll be difficult to accept all strings (For example if I use %s instead I'll need to look out for args with % symbols in them).  What are you suggestions?\n. Oh, I could instead use .replace(...) and use some sentinel value instead of .format(ting, lemme try that.\n. Yeah, I'm going to do that.  See #315 \n. Install 0.6.8 to get this fix :)  Thanks again for the bug report!\n. Yeah, if it's already installed just pip install pre-commit==0.6.8 or to grab the latest pip install --upgrade pre-commit\n. I have a sneaking suspicion that this broke something at some point, but I can't remember why...\nhttps://github.com/pre-commit/pre-commit/commit/bf457349b3a1ca16c47b6878c05c9a3c11ee712d\n. Actually, I bet that was plumbum's fault and I just didn't know it at the time\n. Downgrading to 0.7.0 worked as a workaround, but now we can't reproduce on the latest version :S\n. This is reproducible:\ngit clone git@github.com:pre-commit/pre-commit\ncd pre-commit\necho >> Makefile\nmake venv\n./venv-pre_commit/bin/pre-comit install\ngit commit -a -m foo\nUseful output:\n```\n$ git commit -a -m foo\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.pre-commit/patch1450834913.\nAn unexpected error has occurred: CalledProcessError: Command: ['git', 'checkout', '--', '.']\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    fatal: Unable to create '/tmp/foo/pre-commit/.git/index.lock': File exists.\nIf no other git process is currently running, this probably means a\ngit process crashed in this repository earlier. Make sure no other git\nprocess is running and remove the file manually to continue.\n\nCheck the log at ~/.pre-commit/pre-commit.log\n```\nI'm going to play with the submodule change and see if I can't work around it...\n. Unless there's a large number of files being touched, the individual hook executables will usually only be called either 0 or 1 times (receiving the filenames as positional arguments) -- it uses xargs so if there's a ton of filenames it'll end up calling your executable multiple times.  This is documented here: http://pre-commit.com/#passing-arguments-to-hooks\nAs for enforcing a hook that always runs exactly once, you could probably use the \"migration mode\" approach documented here: http://pre-commit.com/#running-in-migration-mode .  In migration mode, pre-commit will run whatever existing script was sitting at .git/hooks/pre-commit when pre-commit install was executed before running all the other hooks.\nThe migration mode is a bit clunky (doesn't have nice printing, doesn't do the stash behaviour, doesn't honor merge conflicts, etc.) so when we've reached for something similar to what you're asking, we've instead written hooks that simply ignore the passed arguments and are less concerned about them running more than once (or better, make them idempotent!).  For this we've essentially made the argparser ignore positional arguments when executing.\n. Can't think of any other workarounds at the moment.  Though I think the second option sounds good and is doable.\nSomething like an always_run: true setting that'd run the hook regardless of the filename list, might be a bit of work to get pre_commit/commands/run.py to handle that but I think it's definitely doable.\nWant to start a feature branch?\n. You'll fork to your own repo and then create a pull request from there.\nClick the fork button in the top right and then you can push to that by doing:\ngit remote add mine git@github.com:laurentsigal/pre-commit  # If you're using ssh, otherwise https://github.com/laurentsigal/pre-commit\ngit fetch mine\ngit push mine HEAD\n. @laurentsigal sweet! I wrote a test for you and PR'd your branch here: https://github.com/laurentsigal/pre-commit/pull/1\n. Alright, this is released in version 0.7.2!\nThe last things to do are:\n- Fork this to add yourself (if you'd like) and document the new feature: https://github.com/pre-commit/pre-commit.github.io\nThanks for the PR!\n. @laurentsigal  I've updated the docs for your change! If you'd like to add yourself to the contributors on http://pre-commit.com feel free to PR https://github.com/pre-commit/pre-commit.github.io\n. It looks like npm install <folder> now uses a symlink instead of copying: https://docs.npmjs.com/cli/install\nThis is no longer necessary. Seems this is difficult or not possible: http://stackoverflow.com/questions/3489173/how-to-clone-git-repository-with-specific-revision-changeset# http://stackoverflow.com/questions/26135216/why-isnt-there-a-git-clone-specific-commit-option\n. :D\n. I had the same thought: a separate library that's a dependency.  In or out of the org is fine.. Ah dang, I thought this might become a problem at some point.  I'm going to try and make a similar fix to what I did in #248\n. Heh, this is more difficult to reproduce under test than the previous error because pip also has the same bug:\nE           assert 'UnicodeDecodeError' not in '[INFO] Initializ.../pre-commit.log\\n'\nE             'UnicodeDecodeError' is contained here:\nE               [INFO] Initializing environment for /tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/1.\nE               [INFO] Installing environment for /tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/1.\nE               [INFO] Once installed this environment will be reused.\nE               [INFO] This may take a few minutes...\nE               An unexpected error has occurred: CalledProcessError: Command: ['bash', '-c', \". '/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/bin/activate' && cd '/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/' && pip install .\"]\nE               Return code: 2\nE               Expected return code: 0\nE               Output: \nE                   Processing /tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP\nE                   \nE               Errors: \nE                   DEPRECATION: --download-cache has been deprecated and will be removed in the future. Pip now automatically uses and configures its cache.\nE                   Exception:\nE                   Traceback (most recent call last):\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/compat/__init__.py\", line 47, in console_to_str\nE                       return s.decode(sys.__stdout__.encoding)\nE                   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb2 in position 3: invalid start byte\nE             ?     ++++++++++++++++++\nE                   \nE                   During handling of the above exception, another exception occurred:\nE                   \nE                   Traceback (most recent call last):\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/basecommand.py\", line 211, in main\nE                       status = self.run(options, args)\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/commands/install.py\", line 305, in run\nE                       wb.build(autobuilding=True)\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/wheel.py\", line 705, in build\nE                       self.requirement_set.prepare_files(self.finder)\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/req/req_set.py\", line 334, in prepare_files\nE                       functools.partial(self._prepare_file, finder))\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/req/req_set.py\", line 321, in _walk_req_to_install\nE                       more_reqs = handler(req_to_install)\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/req/req_set.py\", line 505, in _prepare_file\nE                       abstract_dist.prep_for_dist()\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/req/req_set.py\", line 123, in prep_for_dist\nE                       self.req_to_install.run_egg_info()\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/req/req_install.py\", line 410, in run_egg_info\nE                       command_desc='python setup.py egg_info')\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/utils/__init__.py\", line 711, in call_subprocess\nE                       line = console_to_str(proc.stdout.readline())\nE                     File \"/tmp/pytest-of-asottile/pytest-4/test_hook_install_failure0/3/repom5AMjP/py_env-python3.4/lib/python3.4/site-packages/pip/compat/__init__.py\", line 49, in console_to_str\nE                       return s.decode('utf_8')\nE                   UnicodeDecodeError: 'utf-8' codec can't decode byte 0xb2 in position 3: invalid start byte\nE                   \nE               \nE               Check the log at ~/.pre-commit/pre-commit.log\n. Ah, I can just use py27 instead of py34 and that reproduces nicely\n. Should be fixed in 0.7.4\n. Ah yep, I never updated the refs there after fixing the problem in the hooks repo.\nYou should be able to fix this with pre-commit autoupdate, I'll fix the examples on the website :)\n. Should be fixed here: https://github.com/pre-commit/pre-commit.github.io/commit/c3b90a958d7d2ad448b9996eee6cf930782b1bae\n. The website should be up-to-date now\n. @ustun does the new example work correctly for you?\n. :shipit: once appveyor is done I'll merge and cut a version for ya :)\n. It's no less dangerous than working symlinks which point outside the repo (status quo)\n. This is available in v0.7.5\n. Fixed in 0.7.6\n. I think you're confusing this with another project? Ours is a python package: http://pre-commit.com\n. Documented here: https://github.com/pre-commit/pre-commit/blob/master/CONTRIBUTING.md#local-development\n. I was waiting for others to comment, I've already voiced my thoughts elsewhere but I'll reiterate them here.\nI don't think this is a good idea for a few reasons:\n- It's against the idea of sharing configurations with other individuals.  A definition of a hook should live in one place and consumers should references that single place\n- It doesn't work for multiple repositories (two of these \"phantom\" repositories would reference the same hooks.yaml which would introduce available but broken hook ids to end users)\n- Installation of these \"phantom\" hook repositories would be orphaned from their configuration, potentially leading to unexpected behaviour when using pre-commit across multiple repositories on the same machine\n- It introduces yet-another-way to do things which would require maintenance\nOn the note of a central repository of hooks:\n- One already exists: http://pre-commit.com/hooks.html or in consumable format http://pre-commit.com/all-hooks.json\n- However, depending on this in a runtime situation would introduce a single-point-of-failure and would require organizations which want to use pre-commit to set up an internal \"pre-commit repository\" (this is a huge barrier to entry for many, especially enterprise).\nOn the note of non-VCS:\n- This again goes against the direction of reusable hook definitions, but it also introduces significant logic into pre-commit to understand each and every package management system and the quirks of each of them\n@chriskuehl @struys thoughts?\n. I think you might be able to simplify this to just:\npython\nargs.files = [\n    os.path.relpath(os.path.abspath(filename), git.get_root())\n    for filename in args.files\n]\nThat'd eliminate the complexity added to pre_commit.run\n. I'm not sure what's up with the SSLErrors, I'll look into those on master -- I assume something with upgrading pip :/\n. You'll want to rebase on current master (to fix the SSL errors) and run pre-commit run  --files pre_commit/main.py to fix the import ordering :)\n. Looks good, I'm going to merge this locally (I want to add a test and poke at the one you wrote (since I think it's only testing the test code))\nThanks again for an awesome fix!\n. Via https://github.com/pre-commit/pre-commit/commit/72eeafe51667e2850eba26a082b1e1d62923eb94\n. This has been included in v0.8.0\n. I think coala is actually a step in the opposite direction (towards the approach that overcommit uses) in that it requires the consumer to set up a bunch of systems on their system: http://coala.readthedocs.org/en/latest/Users/Install/\nI think it'd actually benefit you guys to use the plumbing of pre-commit (which we unfortunately haven't split out yet) which sets up environments for different programming languages so the end user doesn't have to worry about installing X package and Y language\nBecause we isolate hook repositories from each other in virtualenvs, it's pretty easy to add any tool which is installable (at least in the supported languages (which we'd love to expand on!)) -- in a sense pre-commit can proxy to any tool.\nWe don't actually have any \"integration\" so to speak beyond \"you're an executable, I will run you with xargs\" so beyond that I don't know what an integration with coala would look like.\nI'm sick today, I should really get back to bed, let me know what you think :D\n. We also support py26, py27 -- it seems coala only works under python 3?\n. Going to close this for now, if the situation changes in the future, definitely feel free to reopen! :). Dupe #191 \n. @kentwills the bpaste link is dead now -- this is why you shouldn't use pastebin links ;)\n. I believe this satisfies this: https://github.com/pre-commit/pre-commit/pull/226\nIt needs documentation however\n. That said, I've written https://github.com/asottile/reorder_python_imports which works entirely statically opposed to the dynamic analysis that isort does -- we use it at yelp and it works great for our usecases :)\n. In your case I believe the config you'd want is:\nyaml\n-   repo: local\n    hooks:\n    -   id: isort\n        name: isort\n        entry: isort\n        language: system\n        files: '\\.py$'\n. local hooks are now documented here: http://pre-commit.com/#repository-local-hooks\n. via #355 \n. Derp, this fixed cmd.exe but broke cygwin / mingw terminal -- fixing!\n. This is caused by a broken version of virtualenv, let me see if I can find the version (we ran into this with our CI build also): \nhttps://github.com/pre-commit/pre-commit/commit/b0797b4c6eef64c494be9b567524d2844fd59504\nhttps://github.com/pre-commit/pre-commit/commit/139744582b1c8425d73f11a5896a4865dee84c5f\nhttps://github.com/pypa/pip/issues/3461\nPerhaps ping that ticket?\n. I had to rm -rf ~/.pip/cache and pre-commit clean to remove all the remnants of the bug after upgrading to a newer version of virtualenv\n. @cdl what version of virtualenv are you using? I think 14.0.5 is the bad one in question\n. going to mark this one as closed -- I believe the issue is the one I listed above (pip)\n. you've failed the pre-commit hooks, please fix and :shipit: :)\n. Thanks!\n. fwiw, I took it one step further with argparse's metavar: https://github.com/pre-commit/pre-commit/commit/eb6da4ae103fd086f11099cd0c463b9c62edd544\nNow looks like this:\n$ pre-commit run --help\n...\n  --color {auto,always,never}\n                        Whether to use color in output. Defaults to `auto`.\n...\n. Duplicate of #289\n. This error message looks familiar at least! \nCould you provide the following as well:\n- pre-commit --version\n- cat ~/.pre-commit/pre-commit.log\n. Awesome, so here's what I've tried so far (haven't been able to reproduce it yet, but I'm trying to eliminate possibilities!):\n- git2.6.3 on windows -> works\n- git1.9.4 on ubuntu -> works\nI'll try and use 1.9.4 on windows next, do you know where I can find the exact installer you're using?\n. Just as a test (and potential workaround), can you try using pre-commit 0.7.0 (via pip install pre-commit==0.7.0) -- this was the version before I added special support for submodules (which complicated the way I have to call the git command that's triggering the error above)\n. Ah strange, things are all sorts of broken under cygwin :(\nI usually use MINGW64, powershell, or cmd which seem to work better\nI'll look into getting cygwin working but for now I'd suggest the others :)\n. Ah so my problem is I'm using non-cygwin python in a cygwin space and so the paths that git is returning don't match up with the paths python expects\n. Hrmm, now I'm stumped again:\nAnthony@AnthonysDesktop /tmp/foo\n$ pip install pre-commit\nCollecting pre-commit\n  Downloading pre_commit-0.7.6-py2.py3-none-any.whl (100kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 102kB 2.7MB/s\nCollecting aspy.yaml (from pre-commit)\n  Downloading aspy.yaml-0.2.1.tar.gz\nCollecting argparse (from pre-commit)\n  Downloading argparse-1.4.0-py2.py3-none-any.whl\nCollecting virtualenv (from pre-commit)\n  Using cached virtualenv-15.0.1-py2.py3-none-any.whl\nCollecting jsonschema (from pre-commit)\n  Downloading jsonschema-2.5.1-py2.py3-none-any.whl\nCollecting cached-property (from pre-commit)\n  Downloading cached_property-1.3.0-py2.py3-none-any.whl\nCollecting pyyaml (from pre-commit)\n  Downloading PyYAML-3.11.tar.gz (248kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 256kB 2.2MB/s\nCollecting nodeenv>=0.11.1 (from pre-commit)\n  Downloading nodeenv-0.13.6.tar.gz\nCollecting ordereddict (from pre-commit)\n  Downloading ordereddict-1.1.tar.gz\nCollecting functools32 (from jsonschema->pre-commit)\n  Downloading functools32-3.2.3-2.tar.gz\nBuilding wheels for collected packages: aspy.yaml, pyyaml, nodeenv, ordereddict, functools32\n  Running setup.py bdist_wheel for aspy.yaml ... -done\n  Stored in directory: /home/Anthony/.cache/pip/wheels/de/99/d7/5b333af6ba8ec93d6ecd8b4f61471125a841b25564e1d404de\n  Running setup.py bdist_wheel for pyyaml ... done\n  Stored in directory: /home/Anthony/.cache/pip/wheels/fa/db/f6/dee55793d344f1706dc4a5a693298f0115241d1085cc212364\n  Running setup.py bdist_wheel for nodeenv ... done\n  Stored in directory: /home/Anthony/.cache/pip/wheels/b1/59/d6/d7e2be1c56d2fc8d02fcf567fa270b828a17a18012b2a62bf1\n  Running setup.py bdist_wheel for ordereddict ... done\n  Stored in directory: /home/Anthony/.cache/pip/wheels/4e/23/88/f33a8c7c622e6f5244c408306805de7c56dd5d36cff4346fb6\n  Running setup.py bdist_wheel for functools32 ... done\n  Stored in directory: /home/Anthony/.cache/pip/wheels/38/c6/c7/ee17acd621120c302e25c2fa8b3a8b235d5d1137c6ab4c9728\nSuccessfully built aspy.yaml pyyaml nodeenv ordereddict functools32\nInstalling collected packages: ordereddict, pyyaml, aspy.yaml, argparse, virtualenv, functools32, jsonschema, cached-property, nodeenv, pre-commit\nSuccessfully installed argparse-1.4.0 aspy.yaml-0.2.1 cached-property-1.3.0 functools32-3.2.3.post2 jsonschema-2.5.1 nodeenv-0.13.6 ordereddict-1.1 pre-commit-0.7.6 pyyaml-3.11 virtualenv-15.0.1\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ pre-commit --version\npre-commit 0.7.6\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ nano .pre-commit-config.yaml\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ pre-commit run --all-files\n[INFO] Initializing environment for git://github.com/pre-commit/pre-commit-hooks.\n[INFO] Installing environment for git://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nCheck Yaml...............................................................Passed\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\nWhat does which git give you?\n. Ahah, I can now reproduce your error:\n```\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ ln -s /cygdrive/c/Users/Anthony/AppData/Local/Programs/Git/mingw64/bin/git.exe  venv/bin/git.exe\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ ls venv/bin/ -al\ntotal 51\ndrwxr-xr-x+ 1 Anthony Anthony    0 Mar 19 20:29 .\ndrwxr-xr-x+ 1 Anthony Anthony    0 Mar 19 20:22 ..\n-rw-r--r--  1 Anthony Anthony 2072 Mar 19 20:22 activate\n-rw-r--r--  1 Anthony Anthony 1014 Mar 19 20:22 activate.csh\n-rw-r--r--  1 Anthony Anthony 2212 Mar 19 20:22 activate.fish\n-rw-r--r--  1 Anthony Anthony 1137 Mar 19 20:22 activate_this.py\n-rwxr-xr-x  1 Anthony Anthony  241 Mar 19 20:22 easy_install\n-rwxr-xr-x  1 Anthony Anthony  241 Mar 19 20:22 easy_install-2.7\nlrwxrwxrwx  1 Anthony Anthony   72 Mar 19 20:29 git.exe -> /cygdrive/c/Users/Anthony/AppData/Local/Programs/Git/mingw64/bin/git.exe\n-rwxr-xr-x  1 Anthony Anthony  224 Mar 19 20:22 jsonschema\n-rwxr-xr-x  1 Anthony Anthony  217 Mar 19 20:22 nodeenv\n-rwxr-xr-x  1 Anthony Anthony  213 Mar 19 20:22 pip\n-rwxr-xr-x  1 Anthony Anthony  213 Mar 19 20:22 pip2\n-rwxr-xr-x  1 Anthony Anthony  213 Mar 19 20:22 pip2.7\n-rwxr-xr-x  1 Anthony Anthony  225 Mar 19 20:22 pre-commit\n-rwxr-xr-x  1 Anthony Anthony  244 Mar 19 20:22 pre-commit-validate-config\n-rwxr-xr-x  1 Anthony Anthony  246 Mar 19 20:22 pre-commit-validate-manifest\n-rwxr-xr-x  1 Anthony Anthony 9235 Mar 19 20:22 python\nlrwxrwxrwx  1 Anthony Anthony    6 Mar 19 20:22 python2 -> python\nlrwxrwxrwx  1 Anthony Anthony    6 Mar 19 20:22 python2.7 -> python\n-rwxr-xr-x  1 Anthony Anthony 2331 Mar 19 20:22 python-config\n-rwxr-xr-x  1 Anthony Anthony  220 Mar 19 20:22 virtualenv\n-rwxr-xr-x  1 Anthony Anthony  220 Mar 19 20:22 wheel\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ which git\n/tmp/foo/venv/bin/git\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ git --version\ngit version 2.6.3.windows.1\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n$ pre-commit run --all-files\n[INFO] Initializing environment for git://github.com/pre-commit/pre-commit-hooks.\nAn unexpected error has occurred: CalledProcessError: Command: ['git', 'reset', 'v0.4.2', '--hard']\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors:\n    fatal: Not a git repository (or any of the parent directories): .git\nCheck the log at ~/.pre-commit/pre-commit.log\n(venv)\nAnthony@AnthonysDesktop /tmp/foo\n```\nI'm not sure I should support this? (But perhaps I should make it error loudly :D)  This is cygwin python + non-cygwin git -- I'd suggest installing git from the cygwin installer to fix :)\n. If you install git for cygwin, it should show /usr/bin/git -- You can do this through the cygwin installer\n. It seems relatively up-to-date:\n$ git --version\ngit version 2.7.4\nI can't comment on the performance though :)\n. Sounds great! Glad to help :)\nI've opened #354 to at least make this error case more obvious -- I'll see if I can't make it easy to \"just work\" in these cases, barring that I'll at least add an error message in the short term.\nThanks again for the great bug report and useful debugging information!\n. This was caused by the following:\n- I was using python from C:/Python27/python.exe (windows) instead of /usr/bin/python (cygwin)\n- I was using git from /usr/bin/git (cygwin)\nI'm not sure it's worth supporting this usecase (cygwin git + windows python)?\n. - cygwin python can be detected using sys.platform == 'cygwin'\n- cygwin git can be detected using check_output(('git', 'rev-parse', '--show-toplevel')).decode('UTF-8').startswith('/') (maybe there's a better way?)\nI think the code that would need to be added to verify this is:\n```python\nif sys.platform in ('win32', 'cygwin'):  # pragma no cover (windows only)\n    is_cygwin_python = sys.platform == 'cygwin'\n    is_cygwin_git = cmd_output('git', 'rev-parse', '--show-toplevel')[1].startswith('/')\nif is_cygwin_python ^ is_cygwin_git:\n    logger.warn(...)\n\n```\n. Seems I'll need to implement #345 to make this work on windows\n. hmmm, one side-effect of factoring out xargs is shebangs aren't processed on windows... I guess I could try and implement that as well (ick)...\n. https://github.com/polysquare/python-parse-shebang seems promising for fixing the shebang issues\n. Soooooo close.  I seem to be blocked on getting full pcre support on windows: https://github.com/Alexpux/Cygwin/issues/15\n. Reported the pcre bug here: https://cygwin.com/ml/cygwin/2016-04/msg00157.html\n. Seems fixed\n. @gabriel can you show the output of:\ncat .git/hooks/pre-commit | grep '^ENV_PYTHON=' and\nhead -n1 \"$(which pre-commit)\"\n?\n. Hmmm, neither of those make sense to me -- where did you install pre-commit from?\nFor me they look something like this:\n$ cat .git/hooks/pre-commit | grep '^ENV_PYTHON='\nENV_PYTHON='/home/asottile/workspace/pre-commit/venv-pre_commit/bin/python'\n```\n$ head -n 1 \"$(which pre-commit)\"\n!/home/asottile/workspace/pre-commit/venv-pre_commit/bin/python\n```\nYour output indicates that the pre-commit executable is a bash file whereas I expect it to be a python file.\n. I'll see if I can improve the brew installation experience though :)\n. I looked some more into this and they package pre-commit as a bash script with PYTHONPATH overrides.  I don't think it'll be easy to make this work with brew so I'm going to close this.\n. An update to this, they've improved the setup so I believe this works now \\o/. Fortunately, I'm currently factoring out bash and activate scripts entirely in my latest pull request so this should just magically fix itself! \n. I believe this is fixed via #355 \n@ustun can you try the latest version pip install git+git://github.com/pre-commit/pre-commit and see if it fixes this issue for you?\n. Can confirm fixed:\n```\nasottile@work /t/foo> source venv/bin/activate.fish \n(venv) asottile@work /t/foo> pip install pre-commit==0.7.6\n...\nInstalling collected packages: pyyaml, aspy.yaml, virtualenv, functools32, jsonschema, cached-property, nodeenv, ordereddict, pre-commit\nSuccessfully installed aspy.yaml-0.2.2 cached-property-1.3.0 functools32-3.2.3.post2 jsonschema-2.5.1 nodeenv-0.13.6 ordereddict-1.1 pre-commit-0.7.6 pyyaml-3.11 virtualenv-15.0.1\n(venv) asottile@work /t/foo> pre-commit run --all-files\nCheck Yaml...............................................................Failed\nhookid: check-yaml\n/home/asottile/.pre-commit/repoMVYdJO/py_env-default/bin/activate: line 61: basename: command not found\nbash: xargs: command not found\n(venv) asottile@work /t/foo> pip install pre-commit==0.8.0\n...\nSuccessfully installed pre-commit-0.8.0 pyterminalsize-0.1.0\n(venv) asottile@work /t/foo> pre-commit run --all-files\nCheck Yaml...............................................................Passed\n```\n. This configuration seems to work fine for me:\n-   id: scss-lint\n    name: scss-lint\n    additional_dependencies: ['scss_lint:0.47.1']\n    entry: 'scss-lint'\n    files: '\\.scss'\n    language: ruby\n    language_version: 1.9.3-p547\nDoes this satisfy your requirements?\n. Ah yes, pylint does more than static analysis so it needs to both import your code and your dependencies.\nThere's a supported way to do this through \"local\" (system) hooks (which still need documentation :/) https://github.com/pre-commit/pre-commit.github.io/issues/50 -- You can also share a configured \"system\" hook (in a repo) if that makes more sense for you.\nHere's an example for how you can do this: https://github.com/Yelp/venv-update/blob/2a57651bb192770ec0e55171a1c2fdaa30c3fb8d/.pre-commit-config.yaml#L29-L35\n. local hooks are now documented here: http://pre-commit.com/#repository-local-hooks\n. Collecting some of the stacktraces I'm seeing while writing a fix for this:\nTraceback (most recent call last):\n  File \"/home/asottile/workspace/pre-commit/pre_commit/error_handler.py\", line 48, in error_handler\n    yield\n  File \"/home/asottile/workspace/pre-commit/pre_commit/main.py\", line 221, in main\n    return run(runner, args)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/commands/run.py\", line 247, in run\n    repo_hooks = list(get_repo_hooks(runner))\n  File \"/home/asottile/workspace/pre-commit/pre_commit/commands/run.py\", line 197, in get_repo_hooks\n    for repo in runner.repositories:\n  File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/cached_property.py\", line 26, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/runner.py\", line 46, in repositories\n    repository.require_installed()\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 177, in require_installed\n    _install_all(self._venvs, self.repo_config['repo'])\n  File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/cached_property.py\", line 26, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 166, in _venvs\n    for _, hook in self.hooks:\n  File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/cached_property.py\", line 26, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 146, in hooks\n    if hook['id'] not in self.manifest.hooks:\n  File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/cached_property.py\", line 26, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 141, in manifest\n    return Manifest(self._repo_path, self.repo_config['repo'])\n  File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/cached_property.py\", line 26, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 129, in _repo_path\n    self.repo_config['repo'], self.repo_config['sha'],\n  File \"/home/asottile/workspace/pre-commit/pre_commit/store.py\", line 131, in clone\n    return self._new_repo(repo, ref, clone_strategy)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/store.py\", line 113, in _new_repo\n    [repo, ref, directory],\nsqlite3.IntegrityError: UNIQUE constraint failed: repos.repo, repos.ref\n```\nAn unexpected error has occurred: CalledProcessError: Command: ('/home/asottile/workspace/pre-commit/venv/bin/python3.6', '-m', 'virtualenv', '/tmp/tmp.GxLgYG5f6L/repo6g4vit05/py_env-python3.6', '-p', 'python3.6')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Already using interpreter /home/asottile/workspace/pre-commit/venv/bin/python3.6\n    Using real prefix '/usr'\n    Path not in prefix '/home/asottile/workspace/pre-commit/venv/include/python3.6m' '/usr'\n    New python executable in /tmp/tmp.GxLgYG5f6L/repo6g4vit05/py_env-python3.6/bin/python3.6\nErrors: \n    Traceback (most recent call last):\n      File \"/usr/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n        \"main\", mod_spec)\n      File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\n        exec(code, run_globals)\n      File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/virtualenv.py\", line 2328, in \n        main()\n      File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n        symlink=options.symlink)\n      File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n        site_packages=site_packages, clear=clear, symlink=symlink))\n      File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/site-packages/virtualenv.py\", line 1231, in install_python\n        shutil.copyfile(executable, py_executable)\n      File \"/home/asottile/workspace/pre-commit/venv/lib/python3.6/shutil.py\", line 121, in copyfile\n        with open(dst, 'wb') as fdst:\n    OSError: [Errno 26] Text file busy: '/tmp/tmp.GxLgYG5f6L/repo6g4vit05/py_env-python3.6/bin/python3.6'\n``. via #594. Indeed, I'll build a fix for this!\n. Actually, you wantpre-commit uninstall -t pre-push. there currently isn't an install all or uninstall all.  patches welcome though :). So the initial implementation stored the \"cache\" once per repository (in./.pre-commit`) but this posed several problems:\n- shebangs were too long (caused errors on posixlikes)\n- Every repository had copies of the hooks and would have to install them quite often (performance)\nSo in order to fix the shebang issue, the \"cache\" was moved to the homedir.\nWe also hit the issue described in our repositories, the fix we've been suggesting is when working in an environment where multiple python versions are used make sure to explicitly pin the python version for the relevant hooks using http://pre-commit.com/#overriding-language-version\nThat said, I think we can continue to use the homedir approach and be slightly more intelligent when receiving the default python version -- perhaps detecting it from sys.executable + sys.version_info.\n. I'm planning to improve detection so it'll just work without needing to complicate the cli / option interface.\nNotably:\n\nThat said, I think we can continue to use the homedir approach and be slightly more intelligent when receiving the default python version -- perhaps detecting it from sys.executable + sys.version_info.. Finally getting around to this: #556. This change is in 0.15.1!. You won't want to use HEAD / master, you can read more about why here: https://github.com/pre-commit/pre-commit/issues/158#issuecomment-54103765\n. The documentation on pre-commit/pre-commit-hooks has this in the README:\n\nyaml\n    sha: ''  # Use the sha you want to point at\nIs there a place that this should be updated that doesn't have this documentation?\n. What was meant by that comment is '' won't work and you need to pick a sha.  Perhaps you could suggest an improved comment which indicates that better?\n. You'll need to use full paths: http://pre-commit.com/#developing-hooks-interactively\n. I think what you actually want to use is the (still undocumented unfortunately) local hooks:\nhttps://github.com/pre-commit/pre-commit/pull/226\nThis lets you use the current repository to configure hooks.\nThe reason we can't really support relative paths is they need to refer to a universally accessible location (since hooks are cached).  If we allowed relative paths, depending on cwd this could refer to a different location (and different hooks!).  Local hooks aren't cached since they don't create an environment\n. local hooks are now documented here: http://pre-commit.com/#repository-local-hooks\n. heh, looks like you didn't run the hooks when committing (awkward!) -- fixn:ship:\n. Thanks!\n. indeed, seems broken for unspecified versions -- unfortunately we didn't notice this because we force a newer version that our (ancient) os supplies.\nI'll get a fix for this (and hopefully a test to prevent this from regressing in the future!)\n. Actually, I'm having some issues reproducing :(\nCan you supply the following (might make it easier for me to reproduce):\nwhich rbenv\nenv | grep -Ei '(ruby|rbenv|rvm)'\n. @ThatGerber ^\nperhaps also the version of rbenv you're using as well :)\n. Ah I can reproduce with the following (in a docker container)\n2  apt-get update\n    3  apt-get install git libssl-dev libreadline-dev nano virtualenv python\n    4  git clone http://github.com/rbenv/rbenv ~/.rbenv\n    5  cd ~/.rbenv/\n    7  git checkout 9fdce5d\n   13  cd ~/.rbenv/\n   15  apt-get install build-essential\n   16  apt-get install curl\n   17  ./src/configure \n   18  make -C src\n  # Add the rbenv stuff to bashrc\n   26  nano ~/.bashrc \n   27  . ~/.bashrc\n   29  git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\n   33  apt-get install libyaml-dev\n   36  rbenv install 2.2.4\n   38  rbenv global 2.2.4\n...\n    2  cd ~\n    3  virtualenv venv\n    4  . venv/bin/activate\n    6  apt-get install python-dev python3-dev -y\n    7  pip install pre-commit\n    8  git clone git://github.com/pre-commit/demo-repo\n    9  cd demo-repo/\n   # Remove all the hooks except for the ruby one\n   10  nano .pre-commit-config.yaml \n   13  pre-commit run --all-files\nAnd then:\n``\n(venv) root@1fcbf03f029a:~/demo-repo# pre-commit run --all-files\n[INFO] Initializing environment for git://github.com/pre-commit/mirrors-scss-lint.\n[INFO] Installing environment for git://github.com/pre-commit/mirrors-scss-lint.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: (u'/bin/bash', u'/root/.rbenv/shims/gem', 'build', '__fake_gem.gemspec')\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: \n    rbenv: versiondefault' is not installed (set by RBENV_VERSION environment variable)\n```\nThis patch seems to fix it \\o/\n``` diff\n--- a/pre_commit/languages/ruby.py\n+++ b/pre_commit/languages/ruby.py\n@@ -19,16 +19,18 @@ ENVIRONMENT_DIR = 'rbenv'\ndef get_env_patch(venv, language_version):\n-    return (\n+    patches = (\n         ('GEM_HOME', os.path.join(venv, 'gems')),\n         ('RBENV_ROOT', venv),\n-        ('RBENV_VERSION', language_version),\n         ('PATH', (\n             os.path.join(venv, 'gems', 'bin'), os.pathsep,\n             os.path.join(venv, 'shims'), os.pathsep,\n             os.path.join(venv, 'bin'), os.pathsep, Var('PATH'),\n         )),\n     )\n+    if language_version != 'default':\n+        patches += (('RBENV_VERSION', language_version),)\n+    return patches\n@contextlib.contextmanager\n``\n. heh, this looks exactly like theactivate` file I write out lower in the file -- I'm surprised I made this mistake :S\nUnfortunate thing is this is difficult to test in CI so I'm just going to merge the branch based on the manual testing: #370\n. This should be fixed in 0.8.1, please check it out!\nThanks again for the report :)\n. Cool! Thanks for the PR :D\nDo you think you could write a regression test demonstrating this change? (either an integration test (similar to tests/commands/install_uninstall_test.py:test_pre_push_integration_accepted) or a unit test)\n. yeah, doesn't seem like your fault -- I'll poke around with this and then merge :)\n. Tracked down the issue: https://github.com/pypa/virtualenv/pull/926\nI'm going to upgrade these tests to use py34 / py35 instead\n. This has been released in 0.9.0\n. shell=True is almost always never the answer (unless the question is \"why was there a CVE\", heh).\nThis should actually work as written, there's a test which tries the same thing:\nyaml\n-   id: system-hook-with-spaces\n    name: System hook with spaces\n    entry: bash -c 'echo \"Hello World\"'\n    language: system\n    files: \\.sh$\nI wonder where this goes differently -- I'll investigate when at a terminal\n. I also cannot reproduce from your above paste.\nHere's the things I run into in order:\nI paste your above thing:\n```\n...\n$ npm install && pre-commit run\nnpm ERR! addLocal Could not install .\nnpm ERR! Error: No name provided\nnpm ERR!     at needName (/usr/share/npm/lib/cache.js:1232:37)\nnpm ERR!     at /usr/share/npm/lib/cache.js:1111:10\nnpm ERR!     at /usr/lib/nodejs/read-package-json/read-json.js:50:40\nnpm ERR!     at final (/usr/lib/nodejs/read-package-json/read-json.js:317:17)\nnpm ERR!     at then (/usr/lib/nodejs/read-package-json/read-json.js:124:33)\nnpm ERR!     at /usr/lib/nodejs/read-package-json/read-json.js:296:57\nnpm ERR!     at fs.js:207:20\nnpm ERR!     at OpenReq.Req.done (/usr/lib/nodejs/graceful-fs/graceful-fs.js:135:5)\nnpm ERR!     at OpenReq.done (/usr/lib/nodejs/graceful-fs/graceful-fs.js:64:22)\nnpm ERR!     at Object.oncomplete (fs.js:107:15)\nnpm ERR! If you need help, you may report this log at:\nnpm ERR!     http://github.com/isaacs/npm/issues\nnpm ERR! or email it to:\nnpm ERR!     npm-@googlegroups.com\nnpm ERR! System Linux 3.16.0-71-generic\nnpm ERR! command \"/usr/bin/nodejs\" \"/usr/bin/npm\" \"install\"\nnpm ERR! cwd /tmp/foo/tmp\nnpm ERR! node -v v0.10.25\nnpm ERR! npm -v 1.3.10\nnpm ERR! \nnpm ERR! Additional logging details can be found in:\nnpm ERR!     /tmp/foo/tmp/npm-debug.log\nnpm ERR! not ok code 0\n```\nAlright, fix that up by adding \"name\": \"dummy\" and \"version\": \"0.0.0\" to package.json and try again:\n$ npm install\nnpm ERR! Error: EACCES, mkdir '/usr/local/lib/node_modules/dummy'\nnpm ERR!  { [Error: EACCES, mkdir '/usr/local/lib/node_modules/dummy']\nnpm ERR!   errno: 3,\nnpm ERR!   code: 'EACCES',\nnpm ERR!   path: '/usr/local/lib/node_modules/dummy',\nnpm ERR!   fstream_type: 'Directory',\nnpm ERR!   fstream_path: '/usr/local/lib/node_modules/dummy',\nnpm ERR!   fstream_class: 'DirWriter',\nnpm ERR!   fstream_stack: \nnpm ERR!    [ '/usr/lib/nodejs/fstream/lib/dir-writer.js:36:23',\nnpm ERR!      '/usr/lib/nodejs/mkdirp/index.js:37:53',\nnpm ERR!      'Object.oncomplete (fs.js:107:15)' ] }\nnpm ERR! \nnpm ERR! Please try running this command again as root/Administrator.\n...\nderp, well I'm not running it as admin so let's move to nodeenv:\nvirtualenv ../venv\n../venv/bin/pip install pre-commit\n../venv/bin/nodeenv nenv --prebuilt\n. nenv/bin/activate\nnpm install -g\nAaaaand run: \n```\n$ ../venv/bin/pre-commit run --all-files\nvalidate-js..............................................................Failed\nhookid: validate-js\n\ndummy@0.0.0 validate-js /tmp/foo/tmp\neslint broken.js\nsh: 1: eslint: not found\n\nnpm ERR! Linux 3.16.0-71-generic\nnpm ERR! argv \"/tmp/foo/tmp/nenv/bin/node\" \"/tmp/foo/tmp/nenv/bin/npm\" \"run\" \"validate-js\"\nnpm ERR! node v6.2.1\nnpm ERR! npm  v3.9.3\nnpm ERR! file sh\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno ENOENT\nnpm ERR! syscall spawn\nnpm ERR! dummy@0.0.0 validate-js: eslint broken.js\nnpm ERR! spawn ENOENT\nnpm ERR! \nnpm ERR! Failed at the dummy@0.0.0 validate-js script 'eslint broken.js'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the dummy package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     eslint broken.js\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs dummy\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls dummy\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /tmp/foo/tmp/npm-debug.log\n```\nsigh npm install -g eslint\n```\n$ ../venv/bin/pre-commit run --all-files\nvalidate-js..............................................................Failed\nhookid: validate-js\n\ndummy@0.0.0 validate-js /tmp/foo/tmp\neslint broken.js\n\n/tmp/foo/tmp/broken.js\n  1:5  error  Parsing error: Unexpected token {\n\u2716 1 problem (1 error, 0 warnings)\nnpm ERR! Linux 3.16.0-71-generic\nnpm ERR! argv \"/tmp/foo/tmp/nenv/bin/node\" \"/tmp/foo/tmp/nenv/bin/npm\" \"run\" \"validate-js\"\nnpm ERR! node v6.2.1\nnpm ERR! npm  v3.9.3\nnpm ERR! code ELIFECYCLE\nnpm ERR! dummy@0.0.0 validate-js: eslint broken.js\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the dummy@0.0.0 validate-js script 'eslint broken.js'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the dummy package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     eslint broken.js\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs dummy\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls dummy\nnpm ERR! There is likely additional logging output above.\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /tmp/foo/tmp/npm-debug.log\n```\nLooks in working order to me!\n. That said, with subshells you'll probably get better mileage with:\nyaml\nentry: bash -c 'thingy $@' --\n. Oh this is windows, that probably changes everything.\nEven with the npm / node versions listed above I can't for the life of me reproduce the bug on linux:\n```\n\n\n\nfrom pre_commit.util import cmd_output\ncmd_output('npm', 'run', 'validate-js')\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/util.py\", line 200, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\npre_commit.util.CalledProcessError: Command: ('/tmp/foo/nenv/bin/node', '/tmp/foo/nenv/bin/npm', 'run', 'validate-js')\nReturn code: 1\nExpected return code: 0\nOutput: \n\n\n\n> dummy@0.0.0 validate-js /tmp/foo/tmp\n> eslint broken.js\n\n\n/tmp/foo/tmp/broken.js\n  1:5  error  Parsing error: Unexpected token {\n\n\u2716 1 problem (1 error, 0 warnings)\n\nErrors: \nnpm ERR! Linux 3.16.0-71-generic\nnpm ERR! argv \"/tmp/foo/nenv/bin/node\" \"/tmp/foo/nenv/bin/npm\" \"run\" \"validate-js\"\nnpm ERR! node v0.12.2\nnpm ERR! npm  v3.8.7\nnpm ERR! code ELIFECYCLE\nnpm ERR! dummy@0.0.0 validate-js: `eslint broken.js`\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the dummy@0.0.0 validate-js script 'eslint broken.js'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the dummy package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     eslint broken.js\nnpm ERR! You can get information on how to open an issue for this project with:\nnpm ERR!     npm bugs dummy\nnpm ERR! Or if that isn't available, you can get their info via:\nnpm ERR!     npm owner ls dummy\nnpm ERR! There is likely additional logging output above.\n\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /tmp/foo/tmp/npm-debug.log\n\n```\n- What are your versions of:\n  - eslint\n  - cygwin\n  - python\n- are you using msysgit or cygwin?\n- are you using cygwin's X or non-cygwin's X: (usually they have to match for things to work nicely)\n  - python\n  - nodejs\n  - npm\n. Thanks for putting so much work into this <3. I started looking into it this weekend and was slowly coming to similar conclusions.  Bummer about npm, at least there's a workaround. \n. If the underlying tool supports it than yes.  In the general case though, things like flake8 and eslint operate on files. \npre-commit is a simple proxy which determines the files to send and then calls the underlying tool with those arguments. \nI still think this is good enough for a large legacy codebase as you'll progressively improve the quality as you make commits.  Auto fixers such as autopep8 help this process a ton.  As an example, we used this tool internally to successfully enforce linting in a several million line codebase.\n. \"solves the pain\" but makes it impossible to have a reproducible state in a repository.  I don't think we'll be changing our strategy or using this feature.\n. We much prefer virtualenv installation over user installation.  There's lots of problems with eggs and they often interfere in bizarre and strage ways that I'd rather not suggest.\n. It was mentioned explicitly at some point but perhaps that has been removed from the docs.\nFor example:\n- http://pre-commit.com/#advanced\n- Doesn't require you to install a bunch of stuff to your system (zero setup other than having pre-commit installed)\n- Easy to integrate any tool (for example, you could run overcommit as a pre-commit hook)\n. I'm going to complete this in our documentation at some point, for now we'll track that progress there: https://github.com/pre-commit/pre-commit.github.io/issues/128. Ah, it really should suggest you remove the entry, run pre-commit autoupdate, and then add the entry back.  I guess that's not entirely clear.\nThe title of this ticket is false however.  If  you use a newer version (such as v0.5.1) it definitely contains that hook.\nThe metadata on http://pre-commit.com/hooks.html is scraped directly from the repository so it can't be wrong :P\n. So autoupdate is  useful to get you into a working state, however the directions should be:\n- Remove the hook, run autoupdate, and add the hook back.\n. See also: https://github.com/pre-commit/pre-commit/pull/368#issue-153987791\n. This has been released in 0.9.0\n. So I did some research into this...\nFrom what I can tell it is not possible to differentiate between auto-merged files and manually-merged files without actually re-running the merge (which would be expensive and fragile).  So on one point I don't think it's actually possible to exclude auto-merged files.\nOn the other hand, I don't think we want to exclude auto-merged files.  In the general case, both sides should have already used best practices and have passing hooks.  But also, it is often useful to identify implicit conflicts (one common one we hit all the time at yelp is someone factors some import out of a file and someone else adds a new usage of that import.  Despite both passing the hooks and the merge succeeding, there's now an undefined reference to something that used to be defined.\nGiven that, how would you feel about me updating the test to incorporate this diff (just for documentation / spec purposes) and adding some documentation around this (since it is currently unspecified and unclear).\n. Nah you won't have 2 inputs to cause an implicit conflict\n. ah, I see what you mean.  Yeah it should run on merge commits (that contain auto-merged files) but git doesn't give us a hook :(\n. As discussed (and documented via https://github.com/pre-commit/pre-commit.github.io/pull/80)\n. We're already supporting other hooks (pre-push) and would accept a PR if one were to make one :)\nThere's already a way to configure hooks to only run in specific stages (currently just commit or push: http://pre-commit.com/#confining-hooks-to-run-at-certain-stages).  There's also a way to configure hooks to always run independent of files changed always_run: http://pre-commit.com/#plugins\nI imagine to implement commit-msg you'd simply need to teach pre-commit about how to make the file for it and how to call a hook with the right stuff.\n. You know, I'm not actually too sure about the test you linked!  It actually seems to be doing a lot of useless work and I'll probably go about factoring it out.\nThe tests that check the integration of the different hook types (strangely) live in tests/commands/install_uninstall_test.py (well not that strange actually, the reason they're there is in order to test that the installation is successful you kind of have to do a full integration run).  I'd probably try from that angle first?  Let me know if you need additional direction :)\n. I have a branch which adds commit-msg support: #566. This has been added in (just released) 0.15.4!\nYou can read more about it in the documentation.\nThanks for your patience on this :)  I've finally got some freetime to fix some of these older issues :D. You'll want to instead use bash -c '...' if you need a shell\nEDIT:\nfor example:\nyaml\n...\nentry: bash\nargs: [-c, 'git diff HEAD^ | flake8 --diff']\n. Ah, try the edited suggestion: ^^^\n. No problem! Thanks for the report @justinmayer!\n. autoupdate attempts to retrieve the history so that would have to be changed.  git archive is one potential way to improve cloning speed (however cloning speed is usually dwarfed by virtualenv setup).  The approach for autoupdate could be changed to git ls-remote, but it may be more difficult than the current approach.\n. Ah, if git archive is not supported by github, then there isn't really anything better that's universal\n. Summarizing some of the investigation in #628 \nWe attempted --depth=1 for cloning and this hit two key snags:\n1. If the revision in .pre-commit-config.yaml is not exactly master's sha, after cloning checkout will fail\n2. autoupdate works by inspecting history, there's no history when cloning with --depth=1\nThe test suite initially didn't highlight this due to git clone /file/path not supporting --depth=1.  This was adjusted in #629 and demonstrates failures with --depth=1 in tests/commands/autoupdate_test.py (which seems to be the only tests which really exercised 1. above as well)\nCloning with --depth=1 is fast, but we need to make sure it works correctly for the cases above.. This may be useful, though it is only available if the remote enables it and a sufficiently new version of git is used:\n\nhttps://stackoverflow.com/a/30701724/812183\n\nAlso git fetch --depth=1 is a thing that could fetch tags.\nIf we're willing to complicate this to achieve some performance perhaps we could do something like:\n\nclone shallow\ntry and fetch single revision (allow failure for old git / non-configured remote)\ntry and reset (success: fast track, failure: fall back)\ntry and shallow fetch tags\ntry and reset (success: fast track 2, failure: fall back)\nfetch --unshallow\nreset or error. Going to close this for now since I don't think there's anything currently actionable -- if not, please feel free to reopen :). Last time I tried modifying staged files during pre-commit I got mixed results.  Perhaps they've fixed this edge in newer versions of git\n. The hooks are guaranteed to run in the root of the repository, {hookdir} would always be substituted as ..  I don't really want to invent or maintain a substitution metalanguage either so I'm -1.  We'll see what others say.\n. Well then.  hookdir definitely isn't a workable name.  In python you can figure this out by using __file__ or sys.executable or such,  I'm sure there's an equivalent for node.\n\nCan you provide a concrete usecase?\n. I think what you actually want is to write a wrapping script if you want to guarantee your config gets loaded.  If you do it via args: and a consumer sets args: and forgets to add back your config then you are back to the vanilla thing (probably confusingly!).\n. No, I think your situation is different. \nUsually these are used for \"default\" arguments, but you want to use this configuration for \"always\" arguments\n. Shouldn't we just contribute to stylelint to fix their bug? \n. Other formatters take an --in-place argument, I'm sure stylefmt would be amenable to such a PR.\nSorry, thought we were still taking about stylelint (the other issue) :D\n. Turns out nim check has this same problem\nWe worked around this by doing something like this:\nyaml\n    -   id: nim-check\n        name: nim check\n        entry: bash -xc 'echo \"$@\" | xargs --verbose -n1 nim check' --\n        language: system\n        # types: [nim]\n        files: '\\.nim$'. This as well as the list you've found show the supported versions: https://github.com/pre-commit/pre-commit/blob/ea05189c28084e42014b20eae3a1130ea14c9d93/setup.py#L20\nAs for installation instructions there's several reasons:\n- --user installations are very often buggy\n- pip is not always present on debian (which chooses intentionally and compliantly to not bundle pip)\n- --user is not a system wide installation\n- our strongest suggestion is to install it in a virtualenv\n- it supports non-python use cases and shops so dealing with virtualenv is not always an option\n- the script maintenance is a valid point but it already works and requires nothing to update for newer versions.  The script is a simple virtualenv bootstrap that uses secure pypi installation \n- the point about http is valid (and brought up somewhere but I'm on a phone so difficult to find)\n- as for 2.6, please contribute to the discussion in #263\n. Here's the issue to watch for http : https://github.com/isaacs/github/issues/156\n. Python will put user installs on the python path even in virtual environments.  You can imagine the hundred or so failure modes this invites  \nSay I'm a node shop. I don't know things about the python ecosystem or pip or virtualenv.  If there's an option which doesn't require us to understand these things in going to pick it (the fewer moving parts the better).\nDebian provides python-pip and python-virtualenv packages but requiring them to be installed makes instalation more difficult.\nAs it stands,  the only dependency that the install local script has is python itself.  It creates a virtualenv in the home directory and doesn't interfere with other python environments. \n. I believe this becomes a non issue if pyterminalsize had a built manylinux wheel is this correct? \nCould you elaborate on what you mean by security issues? \n. That said, there are ui designs which eliminate pyterminalsize which would be great to implement (basically use either minimum required dots or fixed at 79 characters)\n. There already exists wheels for Windows so not a problem there.  I think manylinux should solve your primary gripes in ci.\nI'm not sure that being written in a specific language means it is any more or less vulnerable to memory security vulnerabilities.  CPython itself is written in c, should I remove cpython support /s? More seriously there are other ways in pure python to execute arbitrary code. \nI hear you about yaml, I hate it :) would have rather used json from the start but it's nearly impossible to switch now and maintain any compatibility.  There is one use case that yaml doesn't currently give us in rewritability -- I've planned to write a simpler round trip parser that only handles a strict subset of yaml which could alleviate your concerns there.  That said, I don't think that using yaml as a configuration language means there's a problem in our case. \nTo conclude, I believe your only valid concern is with build system setup and not actually security.  This can be solved by using (manylinux) wheels for pyterminalsize and by allowing the fallback pure python implementation of pyyaml.  I can build pyterminalsize manylinux wheels when I'm at a computer. \n. Should work now with pip>8 without a C compiler installed:\nUploading pyterminalsize-0.1.0-cp34-cp34m-manylinux1_x86_64.whl\n[================================] 15227/15227 - 00:00:02\nUploading pyterminalsize-0.1.0-cp35-cp35m-manylinux1_x86_64.whl\n[================================] 15408/15408 - 00:00:02\nUploading pyterminalsize-0.1.0-cp27-cp27mu-manylinux1_x86_64.whl\n[================================] 15240/15240 - 00:00:02\nUploading pyterminalsize-0.1.0-cp26-cp26mu-manylinux1_x86_64.whl\n[================================] 15204/15204 - 00:00:02\n. It's also certainly not impossible:\n``` python\n\n\n\nideally, never do this\nx = lambda: None\ny = type(x.code)(*((0,) * 5), b'\\x01', (), (), (), '', '', 0, b'')\ntype(x)(y, {})()\nSegmentation fault (core dumped)\n```\n\n\n\nOn the point of languages, I'll give you that it is certainly easier to write poorly written code which allows for memory issues.  But I do think they are possible in any language, especially given most code needs to interface with C routines at some point.\npypy has a more fun time:\n``` python\n\n\n\n\nx = lambda: None\ny = type(x.code)(0,0,0,0,0,b'\\x01', (), (), (), '', '', 0, b'')\ntype(x)(y, {})()\nRPython traceback:\n  File \"pypy_goal_targetpypystandalone.c\", line 1975, in entry_point\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9749, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 17141, in call_function__AccessDirect_None\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9711, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 17141, in call_function__AccessDirect_None\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9837, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 17141, in call_function__AccessDirect_None\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9711, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 16819, in CALL_FUNCTION__AccessDirect_None\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9861, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_objspace_std_callmethod.c\", line 2325, in CALL_METHOD__AccessDirect_star_1\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9861, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_objspace_std_callmethod.c\", line 2325, in CALL_METHOD__AccessDirect_star_1\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  File \"rpython_jit_metainterp_warmspot.c\", line 1858, in ll_portal_runner__Unsigned_Bool_pypy_interpreter\n  File \"pypy_module_pypyjit_interp_jit.c\", line 289, in portal_5\n  File \"pypy_interpreter_pyopcode.c\", line 6699, in handle_bytecode__AccessDirect_None\n  File \"pypy_interpreter_pyopcode.c\", line 9861, in dispatch_bytecode__AccessDirect_None\n  File \"pypy_objspace_std_callmethod.c\", line 2325, in CALL_METHOD__AccessDirect_star_1\n  File \"pypy_interpreter_pyframe.c\", line 2697, in PyFrame_execute_frame\n  ...\nFatal RPython error: BytecodeCorruption\nAborted (core dumped)\n```\n. Strange!  In the worst case the patch files remain around. Looking forward to the reproduction. Going to tag windows for now\n. There's actually two bugs here it seems, I'm going to reopen this.\n\n\n\n\nI think this is the actual actionable one, though it's not entirely clear why it's happening yet!\n. :shipit:\nrip gits.\nLooks like we now have a strong incentive to remove python2.6 since flake8 has dropped support\n. This has been released in 0.9.0\n. See #399\n. See #399 \n. Turns out we still want this to write unchanged bytes from hook outputs\n. That wouldn't be a regression, pcre hooks run grep -P on windows right now: https://github.com/pre-commit/pre-commit/blob/8837cfa7ffcc419216d4e01392cee0f1ceee9c88/pre_commit/languages/pcre.py#L9\nMost of the reason I want to make pcre less special is due to the complexity maintained here and some oddities about cygwin compiled binaries (our tests for pcre are xfailed on windows despite it providing a grep binary which responds to -P and for the most part works). Yeah that seems fine, probably in the same patch that can be added\nOn Jan 2, 2017 12:41 PM, \"Chris Kuehl\" notifications@github.com wrote:\n\npcre hooks are pretty powerful -- I've written a few of them (usually\nhooks specific to certain projects) because they're cheap and easy (and I\nprobably wouldn't have taken the time to write them if it was harder than\njust an entry in .pre-commit-config.yaml). I think they're a pretty cool\nfeature.\nWould a simple Python implementation that basically runs re.search on the\nfile contents be enough? It's not quite pcre (so, probably a breaking\nchange), but I think that'd be preferable to dropping regex matching\nentirely.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/404#issuecomment-270000874,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABugn2n8Qk6BzGdjoMnlsJo8fKOyT2u9ks5rOTa4gaJpZM4JvfN7\n.\n. I've always wanted to implement a \"regex coverage\" routine, but I don't think this is the time :) (especially since python regexes are complicated).  I was mainly aiming for the terribly-wrong-doesn't-cover-anything case\n. via https://github.com/pre-commit/pre-commit/pull/643. I'd love some input on this PR.\n\nHere's some screenshots of before and after:\nBefore\n(Narrow terminal)\n\n(80 character terminal)\n\n(Wide terminal)\n\nAfter\n(Narrow terminal)\n\n(80 character terminal)\n\n(Wide terminal)\n\n. @Lucas-C any thoughts on this one too?\n. I'm going to merge this, worst case people don't like it and we'll revert it later :)\n. Looks good, want to write a quick regression test?  \nWe don't use stash because it both interferes with user stashes and can result in loss of data (especially when hooks change things which conflict with stashed changes)\n. Sure, I can handle that then!\nOn Sep 9, 2016 10:54 AM, \"samsaggace\" notifications@github.com wrote:\n\nHi @asottile https://github.com/asottile,\nThanks for responding so quickly !\nI would love to create a regression test but I'm not good at python so I'm\nnot sure how to write it and where...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/pull/409#issuecomment-245937080,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABugn1-Bq5x1YG0l4MVTh0_PQrnQbWkrks5qoXMFgaJpZM4J5Hkd\n.\n. I'll try and get a release out for you once I'm at a computer :)\n\nOn Sep 9, 2016 11:38 AM, \"samsaggace\" notifications@github.com wrote:\n\nThanks!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/pull/409#issuecomment-245950315,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABugn4sKpj5kAjeF3N2_m6aUejBEhOcaks5qoX1RgaJpZM4J5Hkd\n.\n. This is included in 0.9.1\n. I'm going to assume you're addressing just yaml and not the other reasons for changing the configuration -- those are the stronger reasons for changing it and I figure we should just change them all at once.\n\nIf you peek at the configuration format, it mostly aims to be a subset of yaml.  From the spec I've laid out, the current examples (and checked in configuration in this and the official repositories) would already parse in the new language.\nconfigparser isn't sufficient both because it cannot be round tripped and because it does not support maps + lists (it is a 1-level configuration).\ncommentjson suffers from being more verbose than most people would like (otherwise I would just use json with \"//\": \"this is a comment\" like we do for our npm packages).  It also suffers from not being round trippable (their parser simply regexes out comments and calls the json parser).\n. Also trying to piggyback the configuration implementation while changing the format to minimize the number of breaking versions necessary to roll this out :)\n. ## configparser\n- While you can hack lists onto the side with additional parsing layers after initial parsing it doesn't handle the situation we'd want (map containing a list of maps which contains lists)\n- In order to add roundtripping to configparser the parser would have to be mostly rewritten\n- configparser is stdlib, it would be difficult (impossible?) to convince the upstream to take such a patch.  Similar suggestions have been made for the ast module and were rejected.  Even if they did take the patch, we wouldn't be able to use it until python3.7 at the earliest.\n- would have to implement the parser\n- would likely have to maintain a fork\ncommentjson\n\nI'd argue it has no implementation.  They regex out comments and have several, bugs that indicate they desperately need a real parser.\nIt doesn't look maintained or well maintained (for instance doesn't support python3)\nwould have to implement the parser\n\ndumbconf\n\nThe intent is to create a general purpose language, not a domain specific one\nFor the most part, it is a strict subset of yaml, without the unnecessary complexity.  It aims to be stupid simple.\nIf something like commentjson is where we want to go, dumbconf could be made even simpler and not attempt to support yaml constructs.  This would mean dropping bare words, the weird indented lists, and the automatically keyed maps.  dumbconf would then be a postcard json-superset config language.  If people are ok with that, I'd be completely happy. \nIf you have issues with the spec, open issues on the project.\n. > There is not formal definition of CSON, only an informal note in one project's readme. Informally, CSON is a JSON, but with a Coffeescript syntax. Sadly Coffescript has no format grammar either; it instead has a canonical implementation.\n\nI also rather dislike coffeescript on being too loose and magical\nThey also don't seem to have round trip parsers which would require significant modifications :/\n. It doesn't have a round trip editable parsing mode. With #210 \"resolved\", switching configuration languages is less of a concern.\nI think instead this should focus on redesigning the top level, here's my thoughts on this:\n.pre-commit-hooks.yaml (the remote metadata)\nI think at least for now this can largely remain the same -- I don't think there's any pressing need to change the structure away from its current state -- moving it from a top-level list to a top-level map is more of a \"nice to have\".\n.pre-commit-config.yaml (the local configuration)\nThe top level list structure makes it difficult to add more features to pre-commit.   I'm proposing changing it to a map.  At first the proposal is just the following:\nyaml\nrepos:\n    # a list of repositories, the same as before\na migration tool\nSome sort of tool (external to pre-commit itself?) would be crafted which would automatically change the old format configuration to the new format configuration.  Eventually warnings would be produced and then further off the old configuration would no longer be supported.\nBeyond that, more of the desired features requiring top-level configuration can start to be implemented.\nThoughts on this?. So I already tried this same approach with #211 and hit a number of issues.  I have all but written off ruamel.yaml as a non solution as it was essentially trading some bugs for a bunch of other bugs.\nThat said,  I'd love to hear your comments on #414 where I plan to do away with yaml entirely! \n. 'fraid so :(\n. We'll continue to explore options in #414.. Closing given https://github.com/willthames/ansible-lint/issues/204#issuecomment-250925253\nThere's nothing we can really do here since pre-commit is simply calling pip install .\n. Stages is configured per-hook. You'll want to move that in like this:\n-   repo: local\n    hooks:\n    -   id: py.test\n        name: py.test\n        language: system\n        entry: python -m py.test\n        files: \\.py$\n        stages: [push]\n        args:\n        - tests\n        - --run-services\n. You'll need to make sure you run pre-commit install --hook-type pre-push as specified in http://pre-commit.com/#pre-commit-during-push\n. No problem! Thanks for the issue :)\n. Interesting.  Could you provide env | grep -Ei '(ruby|rvm|rbenv|gem)' as well as the .pre-commit-config.yaml\n. It seems to be escaping the environment we set up in ~/.pre-commit which is a bit strange.  I'm trying to reproduce it locally and having some trouble :S\nI think as a workaround you can set language_version: 2.2.3 for each of the hooks (http://pre-commit.com for some examples) which may force it to do the right thing?  Still looking into how to reproduce this :)\n. Can you also provide rbenv --version?\n. Alright, this is probably an osx / brew specific bug since I can't reproduce in linux (with similar versions and same PATH setup).  I'll see if I can reproduce this when I have my mac in front of me.\n. Still can't seem to reproduce it from my end but I think I can write a patch that'll make this just work, let me create a branch, would you be able to try out a dev branch for me?\nI can't seem to get openssl and gems to cooperate in osx so it's very difficult to reproduce :)\n. alright, the branch is gem_full_path, I believe you should be able to install it with pip install git+git://github.com/pre-commit/pre-commit@gem_full_path\n. Any luck with that? ^\n. I'm perplexed!  Do you have a .gemrc maybe?  Could you post that?\n. @rayward do you have a .gemrc? ^\n. ooh that's very helpful! I bet that --remote is what's throwing this off.  Let me see if I can figure out a way to avoid gemrc\n. Leaving this as documentation, I don't think there's terribly much I can do about this since gem only added --norc in a relatively recent release (it's not available for instance in the version that ships with xenial).\nThanks for the debugging information!\n. Thanks for the report! \nDoes virtualenv venv give the same error message? What version of virtualenv do you have installed alongside pre-commit? \n. Ahah! I am able to reproduce this outside pre-commit (on el capitan no less), though I think I can fix it inside pre-commit.  I'll cook up a feature branch!  It seems to be caused by the mixing of stdlib venv (previously pyvenv) and the slightly more maintained virtualenv project.\nHere's my minimal reproduction btw:\n$ python3.5 -m venv venv35\n$ . venv35/bin/activate\n(venv35) $ pip install virtualenv\nCollecting virtualenv\n  Using cached virtualenv-15.0.3-py2.py3-none-any.whl\nInstalling collected packages: virtualenv\nSuccessfully installed virtualenv-15.0.3\nYou are using pip version 8.1.1, however version 8.1.2 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n(venv35) $ virtualenv venv2\nUsing base prefix '/usr/local/bin/../../../Library/Frameworks/Python.framework/Versions/3.5'\nOverwriting /Users/asottile/workspace/pre-commit/venv2/lib/python3.5/orig-prefix.txt with new content\nNew python executable in /Users/asottile/workspace/pre-commit/venv2/bin/python3.5\nNot overwriting existing python script /Users/asottile/workspace/pre-commit/venv2/bin/python (you must use /Users/asottile/workspace/pre-commit/venv2/bin/python3.5)\nERROR: The executable /Users/asottile/workspace/pre-commit/venv2/bin/python3.5 is not functioning\nERROR: It thinks sys.prefix is '/Library/Frameworks/Python.framework/Versions/3.5' (should be '/Users/asottile/workspace/pre-commit/venv2')\nERROR: virtualenv is not compatible with this system or executable\nHowever, I can work around this it seems:\n(venv35) $ virtualenv venv2 -p \"$(python -c 'import os, sys; print(os.path.realpath(sys.executable))')\"\nRunning virtualenv with interpreter /Library/Frameworks/Python.framework/Versions/3.5/bin/python3.5\nUsing base prefix '/Library/Frameworks/Python.framework/Versions/3.5'\nOverwriting /Users/asottile/workspace/pre-commit/venv2/lib/python3.5/orig-prefix.txt with new content\nNew python executable in /Users/asottile/workspace/pre-commit/venv2/bin/python3.5\nNot overwriting existing python script /Users/asottile/workspace/pre-commit/venv2/bin/python (you must use /Users/asottile/workspace/pre-commit/venv2/bin/python3.5)\nInstalling setuptools, pip, wheel...done.\n. Makes sense! I recognize you from contributions on dahlia/libsass-python :)\n. This is available in 0.9.2 \\o/\n. lol I know that feel <3\nat work I've checked out all of our repos and have some scripts to automate bump + test + merge, wish I could share them but they're a slight bit too proprietary :S\n. Didn't help \n. I'm - 1 for a couple reasons:\n- logic should be in the python code \n- the messaging is already pretty clear that something failed from the hook output\nIf you were going to approach this, you'd need to adjust the  identifying value at the top of the script and add a test. \n. <3 If there's anything that can be clarified in the documentation let me know!\n. Very strange!  I'll poke at this, I think I have an idea for a fix already :)\n. This has been released as part of 0.9.3\n. So that environment variable doesn't actually control whether or not it is in a virtualenv.\nFor non-virtualenv executables (ones that are installed at the system) you'd use a system hook.  (Or script for scripts).\nI think you'd probably just configure this as a local hook:\nyaml\n-   repo: local\n    hooks:\n        -   id: safety-db\n            entry: safety\n            args: [check, --full-report]\n            language: system\n. pre-commit only knows how to create virtualenvs, where would safety get installed otherwise?\n. That environment variable doesn't really do anything.  The way virtualenv works is by picking the correct executable on the PATH.  Removing that environment variable doesn't change anything:\n$ virtualenv target_venv\nNew python executable in /tmp/foo/target_venv/bin/python\nInstalling setuptools, pip, wheel...done.\n$ virtualenv pre_commit_venv\nNew python executable in /tmp/foo/pre_commit_venv/bin/python\nInstalling setuptools, pip, wheel...done.\n$ ./pre_commit_venv/bin/pip install safety > /dev/null\n$ ./target_venv/bin/pip install oauthlib==0.5.1 safety > /dev/null\n$ . target_venv/bin/activate\n(target_venv) $ safety check\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502                                                                              \u2502\n\u2502                               /$$$$$$            /$$                         \u2502\n\u2502                              /$$__  $$          | $$                         \u2502\n\u2502           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           \u2502\n\u2502          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           \u2502\n\u2502         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           \u2502\n\u2502          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           \u2502\n\u2502          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           \u2502\n\u2502         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           \u2502\n\u2502                                                          /$$  | $$           \u2502\n\u2502                                                         |  $$$$$$/           \u2502\n\u2502  by pyup.io                                              \\______/            \u2502\n\u2502                                                                              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 REPORT                                                                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 package                  \u2502 installed     \u2502 affected          \u2502 source        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 oauthlib                 \u2502 0.5.1         \u2502 <0.7.0            \u2502 changelog     \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n(target_venv) $ . pre_commit_venv/bin/activate\n(pre_commit_venv) $ safety check\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502                                                                              \u2502\n\u2502                               /$$$$$$            /$$                         \u2502\n\u2502                              /$$__  $$          | $$                         \u2502\n\u2502           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           \u2502\n\u2502          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           \u2502\n\u2502         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           \u2502\n\u2502          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           \u2502\n\u2502          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           \u2502\n\u2502         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           \u2502\n\u2502                                                          /$$  | $$           \u2502\n\u2502                                                         |  $$$$$$/           \u2502\n\u2502  by pyup.io                                              \\______/            \u2502\n\u2502                                                                              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 REPORT                                                                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 No known security vulnerabilities found.                                     \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n(pre_commit_venv) $ unset VIRTUAL_ENV \n(pre_commit_venv) $ safety check\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502                                                                              \u2502\n\u2502                               /$$$$$$            /$$                         \u2502\n\u2502                              /$$__  $$          | $$                         \u2502\n\u2502           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           \u2502\n\u2502          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           \u2502\n\u2502         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           \u2502\n\u2502          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           \u2502\n\u2502          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           \u2502\n\u2502         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           \u2502\n\u2502                                                          /$$  | $$           \u2502\n\u2502                                                         |  $$$$$$/           \u2502\n\u2502  by pyup.io                                              \\______/            \u2502\n\u2502                                                                              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 REPORT                                                                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 No known security vulnerabilities found.                                     \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n(pre_commit_venv) $ VIRTUAL_ENV=$PWD/target_venv\n(pre_commit_venv) $ safety check\n\u2552\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555\n\u2502                                                                              \u2502\n\u2502                               /$$$$$$            /$$                         \u2502\n\u2502                              /$$__  $$          | $$                         \u2502\n\u2502           /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$           \u2502\n\u2502          /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$           \u2502\n\u2502         |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$           \u2502\n\u2502          \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$           \u2502\n\u2502          /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$           \u2502\n\u2502         |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$           \u2502\n\u2502                                                          /$$  | $$           \u2502\n\u2502                                                         |  $$$$$$/           \u2502\n\u2502  by pyup.io                                              \\______/            \u2502\n\u2502                                                                              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 REPORT                                                                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 No known security vulnerabilities found.                                     \u2502\n\u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255b\n. Seems git itself is broken, but otherwise looks good\n. Rebased on #428\n. Is this for pip to use an http proxy or a specific executable or ?\n. Can you paste more output?\n. Here's some stuff that might help\n- git clone through a proxy: http://stackoverflow.com/questions/128035/how-do-i-pull-from-a-git-repository-through-an-http-proxy\n- npm install from proxy: http://stackoverflow.com/questions/7559648/is-there-a-way-to-make-npm-install-the-command-to-work-behind-proxy\n- pip install from proxy: http://stackoverflow.com/questions/14149422/using-pip-behind-a-proxy\n. @rlinke pre-commit will use whatever protocol you've set in your .pre-commit-config.yaml when cloning.  I'd suggest replacing git:// with https:// there anyway (at least for github https is faster anyway!)\nAlternatively, if you don't have control over that you can use .insteadOf when configuring git. > @asottile setting the correct protocol in the .yaml file works like a charm. Thank you for the quick help.\nHappy to help!. I started work on this at one point but didn't understand the ecosystem well enough. I definitely  think it is doable (via go get or whatever the cool new way to install dependencies is now). \n. via #473 . Yep, I didn't quite know how to implement them but it should be as easy as for dep in additional_deps: cmd_output('go', 'get', dep, GOPATH=...). This can be done with: git diff --name-only \"$SHA\" \"$SHA^\" | xargs pre-commit run --files\n(there's probably a more clever way than $SHA $SHA^ but I'm forgetting my git fu at the moment :D)\n(You'd probably also need to check out that revision as well)\nIn your case, I think this is equivalent to git diff --name-only HEAD HEAD^ | xargs pre-commit run --files. Yeah I'm actually surprised there's nothing in the docs which mentions --files!  It might make sense in that section or perhaps another section for ad-hoc usage.  Either way works, and we're definitely open to new PRs :) (and yes that is the correct repository). <3\nOn Nov 23, 2016 5:11 PM, \"snakescott\" notifications@github.com wrote:\n\nThanks for the speedy response, @asottile https://github.com/asottile!\npre-commit is amazing, I only wish I had found it earlier :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/431#issuecomment-262667252,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABugn2COwHlsly_E7ZBynXpy31SX84FKks5rBOROgaJpZM4K7LYt\n.\n. So I can think of two ways to accomplish this in the current toolset, they're not the greatest but maybe they get you going in the right direction?\n\nThe SKIP environment variable allows you to temporarily disable hooks, so if I didn't want to run autopep8 or flake8 on an invocation I could run SKIP=flake8,autopep8 pre-commit. http://pre-commit.com/#temporarily-disabling-hooks\npre-commit can run individual hooks at a time by passing them on the commandline: pre-commit run trailing-whitespace.  You could do something where you maybe echo 'trailing-whitespace flake8' | xargs -n1 pre-commit run? (briefly mentioned here: http://pre-commit.com/#usage)\nA tangentially related feature: you can already configure hooks to run at different stages (currently only pre-commit / pre-push) via http://pre-commit.com/#confining-hooks-to-run-at-certain-stages\nAs for implementing I'm a little concerned for a couple reasons:\n- you can kinda do it without adding additional tooling (yeah it's not the best, but it is possible)\n- I'm not sure if the feature will get much use via the main usage of the tool: as a pre-commit hook (I'm not even sure how it would work with that, perhaps writing the configuration to  the .git/hooks/pre-commit executable, but then it's not idempotent any more and that complicates as well).\n- at least for our usage we're running every hook every time on every commit. Yeah I think adding that is pretty reasonable.   We're looking to move away from yaml soon to fix some stuff, let's go with -c --config as a cli parameter.  I think you'll want to augment each of these commands (run, install, autoupdate).. Sounds great!  Looking forward to it :). This feature is in the (just released) 0.9.4 release.. Duplicate of https://github.com/pre-commit/pre-commit/issues/354\nThough 2c:\nI think hiding this error message is potentially less helpful than showing it.  At least with it being shown, the specific error message can be googled.  The duplicate ticket indicates that a warning should be printed which will probably help with triaging this specific error.  The difficult part is detecting the cygwin / non-cygwin mismatch :). I've made this a warning in #436 . This fix is in the (just released) 0.9.4 release.. Unclear why windows isn't passing, I imagine setuptools / pip broke something.\npypy3 I'm  just going to turn off for now. Seems this is the windows problem: https://github.com/pypa/setuptools/issues/861\n. 893e0a9 is a sneaky workaround for the windows setuptools issues. They have yet to be resolved, currently if the submodule path matches the files: pattern that path will be passed to hooks.\nThe plan is to make tags which allow more broad filtering of files passed to hooks.  This is still a work in progress: https://github.com/pre-commit/pre-commit/pull/329\nFor now, the easiest way to accomplish what you want is something like this:\n```yaml\n...\n\nid: ...\n    # match all files\n    files: ''\n```\n\nAnd then inside the hook, filter that list down to the ones you actually want (through either a check that it is a git directory, or by inspecting git diff --raw such as is done here: https://github.com/pre-commit/pre-commit-hooks/blob/77a7bba2f93cfe1205fc7167ef8379cbc6fcbb37/pre_commit_hooks/forbid_new_submodules.py#L11-L20. I think the other issue is https://github.com/pre-commit/pre-commit/issues/191#issuecomment-113249998. This should get that last test passing:\ndiff\ndiff --git a/tests/commands/install_uninstall_test.py b/tests/commands/install_uninstall_test.py\nindex 4c4baad..2547d99 100644\n--- a/tests/commands/install_uninstall_test.py\n+++ b/tests/commands/install_uninstall_test.py\n@@ -147,7 +147,8 @@ FILES_CHANGED = (\n NORMAL_PRE_COMMIT_RUN = re.compile(\n     r'^\\[INFO\\] Initializing environment for .+\\.\\r?\\n'\n     r'Bash hook\\.+Passed\\r?\\n'\n-    r'\\[master [a-f0-9]{7}\\] Commit!\\r?\\n' +\n+    r'\\[master [a-f0-9]{7}\\] Commit!\\r?\\n'\n+    r' Author: test <test@example.com>\\r?\\n' +\n     FILES_CHANGED +\n     r' create mode 100644 foo\\r?\\n$'\n ). If you're using get() you should provide a fallback (or not use get).  The rest use get because they're only sometimes present (windows). \nCan you give them constant values? That'll make it work better (at least for me) when I run outside of tox.. Let's use brackets so it fails fast,  I think this plugin might help with the environment variable problem: https://github.com/MobileDynasty/pytest-env\nThen it'd be set in any pytest invocation.  Add pytest-env to requirements-dev.txt and a config section to tox.ini and it should work?  I haven't used the plugin before but I imagine it's that easy?. Sounds good :ship: :it:. Thanks!. So the current version chosen is to make it fast on precise (travis-ci) and xenial (where I develop).  You did correctly identify that the archives needed updating to get the fallback behaviour.\nruby has two paths for installation, ruby-download (which uses https://rvm.io/binaries) and ruby-build (the slow build-from-source route using rbenv-build)\nFrom this PR I think the second commit is good but probably not the first one.  If there's a difference between 1.9.3-p547 and 1.9.3p547, perhaps we should be doing some normalization.  Originally these resolved the same but perhaps they do not now :). You'll notice that, though they succeeded, this PR nearly doubles the travis-ci runtime:\n\nbefore: https://travis-ci.org/pre-commit/pre-commit/builds/179137636\nafter: https://travis-ci.org/pre-commit/pre-commit/builds/180671183. Thanks!. > Ah, sorry -- for install and uninstall, I'm not sure if it is safe to pass an alternate config file?\n\nyeah it just wouldn't do anything (except for --install-hooks), don't bother passing the --config state along to the written file\n\nAre there any \"public API\" considerations for Runner? I initially had the arg as optional to maintain compatibility.\n\nNope! the only \"public\" apis are cli. I'd probably do one test in runner, and maybe one end-to-end test in tests/commands/run_test.py just to demonstrate it definitely works. Each (repository, language, language_version) gets its own environment.\nThey are stored per repository, and the environments are named after their language + language_version.\n\nhttps://github.com/pre-commit/pre-commit/blob/da3458cd25392679094911d9d8a3862e1a4bf884/pre_commit/languages/python.py#L16\nhttps://github.com/pre-commit/pre-commit/blob/da3458cd25392679094911d9d8a3862e1a4bf884/pre_commit/languages/helpers.py#L10-L14\nhttps://github.com/pre-commit/pre-commit/blob/da3458cd25392679094911d9d8a3862e1a4bf884/pre_commit/languages/python.py#L35-L38. So you could have a python2 hook and a python3 hook in the same repository and they would not clash with each other. It would probably fail to set up the python2.7 virtualenv due to the dependency on mypy_lang, you could however make that a conditional requirement:\n\npython\nextras_require={':python_version!=\"2.7\"': ['mypy_lang']},\n(or split it into multiple repositories)\nNote that you can try it out and see what happens without actually publishing a repository: http://pre-commit.com/#developing-hooks-interactively. There's the always_run option which'll always invoke the hook and not pass filenames.  You can then configure the arguments that you want to run this hook with.  Does this satisfy that? http://pre-commit.com/#new-hooks. Thanks for the report!  I've confirmed the root cause :). This fix is in the (just released) 0.9.4 release.. @cmer  can you elaborate?  egrep is usually an alias for grep -E (which is different from grep -P). :D cheers!. I've made #449 which fixes the root issue (pre_commit.xargs + negate=True would treat executable missing as a \"success\")\nAs for this PR:\n- hooks weren't run\n- os.system is frowned upon\n- which isn't portable (we support windows)\nThanks for the issue and PR though! . There's a feature added in git 2.9 to have \"global\" hooks: https://git-scm.com/docs/githooks\nBut it doesn't quite fit the design pattern that we have: https://github.com/pre-commit/pre-commit/issues/381\nEach repository should configure the hooks it needs through .pre-commit-config.yaml, you could copy the file pre-commit creates into a directory and configure it via core.hooksPath as above, but you'll still need to place a file per repository (and then pre-commit will likely know less about your repository).  It might not even work, it hasn't been attempted.\nThe supported path for setting up pre-commit in a repository is: create and check in a .pre-commit-config.yaml and run pre-commit install. (going to try and address both things above, some of the things I say apply to both, some to one, and some to the other (some to neither! oops!) \ud83d\ude06)\nok, here's a few ways you could do this...\nNote again that client side hooks are intended as a developer tool and not as a stopgap, you really need some other tool to actually enforce your checks (whether that's CI, a server-side pre-receive, or however else you actually want to do it).\nBut first, a comment about micro vs. macro repositories.  If you find yourself with hundreds of repositories (in theory to avoid a monorepo / monolith / etc.) you're really doing yourself a disservice if you don't have a way of applying a mass change in an automated way.  This was incredibly frustrating for myself when I as a young padawan worked at a company that switched from a single monolith repository to a heavily service oriented pattern.  My thought process went something like: \"yay! freedom! agility!.... wait, everything is bitrot and version skew now\".  Fortunately, there's usually good solutions to these types of things -- in my case I decided to build a tool which acted as a distributed automated changeset applier which (again) made sweeping changes painless.  (an aside: personally I'm pro micro-repos and anti monorepos, but your mileage may vary).  This tool for the longest time lived entirely in closed source and was site specific -- but fear not, I've rewritten it from scratch and it works great for my use-cases: asottile/all-repos.  all-repos actually comes out-of-the-box with tools to help manage pre-commit as samples for autofixers.  I also have a running curation of rewrites I've done on my public repositories here: asottile/all-repos-incantations.\nok, advertising over -- let's get down to business :)\nA few things to get out of the way first though, these are mostly design decisions taken by pre-commit that I'm not willing to change (you can find similar texts in the rest of the issue tracker but I'll rewrite them here).\n- pre-commit must have a configuration to run.  pre-commit itself is a framework and will not grow opinions about what hooks you should use or how you should use them.  If you want to run it, you need to have some sort of configuration :)\n- pre-commit will not directly support mutability in configuration (this includes referencing a centralized repository).  This causes lots of issues with repeatability and maintenance in general.  This was an early design decision after seeing the pain caused at scale when a linter changes behaviour and suddenly every repository's master branch is broken.\n- One of pre-commit's goals is to make local development better by providing feedback as early as possible.  If you're able to run a tool locally before pushing it off to CI or a pre-receive hook and easily verify / validate the changes (even automatically!) you're going to be much happier.  Again, this was an early design decision around the frustrations of server-side hooks that were confusing, slow, and sometimes difficult to reproduce locally.  This is why pre-commit (and the current git hooks it targets) are aimed at client hooks.\nAnd now let's get on to the ways you can hack this behaviour on (disclaimer: while I may disagree with some of these ideas, they do currently work) :)\n\nnested pre-commit configurations\nnothing is stopping .pre-commit-config.yaml from being a symlink! (if you control all the host machines you could presumably \"puppet out\" a configuration to a well known location and check in a symlink to it\non the topic of symlinks,  I've seen some repositories maintain their shared configuration in a centralized repository added as a submodule and then symlinks into that (you'd still have the problem of updating that submodule, but that's easy to automate).\nspecifically for user specific hooks, you could take advantage of the \"migration mode\" for pre-commit (the docs don't discuss the implementation details but they're not changing any time soon: pre-commit will invoke a hook by the name of $HOOK_TYPE.legacy if it exists.  With this you could set up a shell script that invokes pre-commit run --config ~/my-config.yaml or some sort.\nYou could install your own shell script period and not use pre-commit install and use the same idea.\nIf you control the server and can install server-side hooks, pre-commit supports --origin and --source for running against commit ranges\n\nThese are just a few ideas, sorry if this is rambly and incomplete (have to run now!). This would be great, should be as easy as implementing one of these for swift: https://github.com/pre-commit/pre-commit/blob/8837cfa7ffcc419216d4e01392cee0f1ceee9c88/pre_commit/languages/python.py\nThe interface is here: https://github.com/pre-commit/pre-commit/blob/8837cfa7ffcc419216d4e01392cee0f1ceee9c88/pre_commit/languages/all.py\nWant to take a first stab at it?. Via #467 -- available in 0.11.0. Ah yes, the git url in the configuration can be anything that git understands and can clone from.  This includes https:// urls, git:// urls, ssh urls (git@...), even local paths.  It's really up to whatever consuming repository to pick the url -- the framework doesn't actually care or enforce what url scheme you use (it just runs git clone).. Exclude takes a regex.  Simply combine the two things you want to exclude with a |:\nyaml \n    exclude: '^(path/1|other/path2)$'. square brackets are character classes (probably not what you want).  You're excluding for instance anything which contains the character m. I believe this'll do that:\nyaml\n    exclude: '((^migrations)/|(fabfile.py$))'\n(note that I assumed migrations is in the root, if that's not the case, remove the ^). I'm actually surprised cygwin worked before, nothing seems changed in the last couple weeks in nodeenv and I don't see any changes to the files provided by nodejs either.  To be honest, I didn't know nodeenv even worked on windows/cygwin: #200 \nI think you're probably right about the source of the issue.  Another solution might be to have the nodejs guys compile against cygwin though it's a difficult platform to target (since the packaging moves like arch).. Yeah! pre-commit doesn't limit to a specific version of nodeenv so you should be able to just pip install --upgrade nodeenv. seems fine to me :). We use pre-commit install --install-hooks to accomplish this for our jobs, does this work for you?. Can you provide some additional output?  The two commands run the same code:\ninstall --install-hooks\n\nhttps://github.com/pre-commit/pre-commit/blob/8837cfa7ffcc419216d4e01392cee0f1ceee9c88/pre_commit/commands/install_uninstall.py#L86\n\nrun\n\nhttps://github.com/pre-commit/pre-commit/blob/8837cfa7ffcc419216d4e01392cee0f1ceee9c88/pre_commit/commands/run.py#L159\nhttps://github.com/pre-commit/pre-commit/blob/8837cfa7ffcc419216d4e01392cee0f1ceee9c88/pre_commit/runner.py#L41-L46. It shouldn't, can you show some output or something reproducible?. ah I took a peek at your .pre-commit-config.yaml and it's probably because you're using unsupported master as sha. You can read more about why this doesn't quite work the way you want it to: https://github.com/pre-commit/pre-commit/issues/158#issuecomment-54103765\n\nThe suggested workflow for reproducibility is to use a sha or tag in that field (and periodically upgrade using pre-commit autoupdate).  Actually I think pre-commit autoupdate will fix your current situation automatically. Ah,  pre-commit uses git to both find the top level of the repository and acquire a file list to run hooks against.  The failure here is actually while pre-commit is detecting the top level \n. In other words, git is an essential runtime dependency even when the hooks are already preinstalled.  I think this becomes wontfix?. Yeah it'd have to reimplement git internals which I'm not really interested in doing :). This is an inherent problem with prefix installation.  If you're using shebangs of executables then the paths need to be the same inside and outside the container.  There's not really much that can be done to make them work at different paths since both the environment setup and installation are handled externally (through virtualenv,  setuptools, and pip). \nIf possible,  I'd suggest mounting at the same path as you installed the hooks and it should work. I'll reopen for now, mostly because I'm curious of your workflow.  Can you give me a comprehensive list of commands that you're running and whether they're inside / outside of the container as well as the (or an approximation of) the docker command you're running (mostly interested in the mounts).  With this I can hopefully suggest either an existing workflow which accomplishes what you want or perhaps a feature if I think it's necessary to do what you want.. ok.  In that case, I'll add a pre-commit install-hooks cmdline, I think that's probably the cleanest way to do this. I'll release this in a new version soon.  There's some interesting stuff on the horizon I want to get in with this release so it might be a couple days. Do you have a .pre-commit-config.yaml? You need one of those to tell pre-commit what hooks you want to run.  To see how to configure one, see http://pre-commit.com . No problem! Good to hear you figured it out.  Do you  have any suggestions to improve the messaging? . At a first pass, this seems pretty promising!  I'm a little surprised that virtphp seems to require you to keep bookkeeping inside the homedir, I wonder if they would be open to a PR which disables that (imo) strange behaviour.\nGiven how strange the php ecosystem is, I'm ok with our wrapper having to do some strange things to enable it.  Sometimes ya just gotta hack hack hack. AWESOME :tada: \nI'm going to play with this a bit and see how it goes and then make a release. Hmmm I'm not sure about not passing --user, what sort of messages are you getting?  I'd really hope we wouldn't run as root :/. Can you show some output? could it be due to writing other directories? it shouldn't have permission denied writing to the user mounted files. I believe you're looking for additional_dependencies.  http://pre-commit.com  talks more about this. \nIn your example you'll have\nyaml\n    #... \n    -    id: flake8\n         additional_dependencies: [flake8-mutable]\nTyping yaml on a phone sucks . It's certainly possible, but needs a little work to get set up.\nThe basics of a pre-receive hook are reading some refs from stdin and making decisions based on them.\nThese decisions may involve checking out a revision and running pre-commit cli against them.\nYou may find the following invocations of pre-commit useful for implementing this:\n```\nRun against a set of files\npre-commit run --files file[, file[, file ...]]\nAll files\npre-commit run --all-files\nused by pre-push, but could also be used for pre-receive\npre-commit run --origin ref --source destref\n```\nHere's a sample one that some of our repositories use internally, it's a little rough around the edges so there's probably bugs:\n```bash\n!/bin/bash\nset -e\nrepodir=$GL_REPO_BASE/$GL_REPO\nvenvtmp=$repodir/pre-commit-venv\nexport -n GIT_DIR\nvirtualenv $venvtmp\necho pre-commit==0.7.6 > $venvtmp/requirements.txt\n$venvtmp/bin/pip install --requirement $venvtmp/requirements.txt  2>/dev/null >/dev/null\nrepo=pwd\nz40=0000000000000000000000000000000000000000\nwhile read oldsha newsha refname\ndo\n    # Skip ref deletions\n    if [ \"$newsha\" = $z40 ]\n    then\n        continue\n    fi\ntmp=$(mktemp -d --tmpdir=/tmp)\ntrap \"rm -rf $tmp\" 0\n(\n    cd $tmp\n\n    # Create the repo, but use alternates to avoid cloning\n    git init\n    git remote add origin $repo\n    echo $repo/objects > .git/objects/info/alternates\n    git config advice.detachedHead false\n    git checkout $newsha --\n\n    if [ \"$oldsha\" = $z40 ]\n    then\n        # New branch requires all files checked\n        args=\"run --all-files\"\n    else\n        # Only run on changed files\n        args=\"run --origin $newsha --source $oldsha\"\n    fi\n    $venvtmp/bin/pre-commit $args\n)\n\n```. @jpsikorra does this answer your question?. Aww man I typed up a response to this and never pressed reply.  I guess I'll try and remember what I said the first time!\nThough it's not explicitly designed for a monorepo I can imagine one way you could use the existing configuration to support this goal with a single configuration file.\n```yaml\nconfigure shared hooks that you want to run on all repositories here\n\nrepo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: v0.6.1\n    hooks:\nid: trailing-whitespace\nid: end-of-file-fixer\n\n\n\nFor hooks that only apply to specific repositories, list them below\n\n\nrepo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: v0.6.1\n    hooks:\n\nid: flake8\n    name: 'flake8 (for repo1)'\n    # Only run on repo1 files\n    files: '^repo1/.*.py'\nid: flake8\n    name: 'flake8 (for repo2)'\n    # Only run on repo2 files\n    files: '^repo2/.*.py'\n    # maybe repo2 wants specific argument configuration\n    args: [--max-line-length=131]\n\nmaybe repo3 is python3 only\n\nid: flake8\n    name: 'flake8 (for repo3)'\n    files: '^repo3/.*.py'\n    language_version: python3\n\netc.\n```\n\n\nNote that the same repo can be configured multiple times and within the repo the same hook id can also be repeated\n. @snakescott any additional thoughts on this, does this seem reasonable?. Going to close this as answered, haven't heard back in a few months.  If this isn't sufficient, please comment and I'll reopen :). I added some commits to your branch :). Thanks and wow!. I'll cut a release for this tomorrow. Damn I'm a liar, doing this now <3. This is in 0.11.0, thanks again for an awesome contribution.  Want to write up a bit in the documentation and add your name to the contributors?  https://github.com/pre-commit/pre-commit.github.io (fork and base a branch off of real_master). \ud83d\udc4d . Note that py34+ is still known to work and is supported -- it's just faster to test fewer versions in travis.. Yeah I thought about that too -- I think during a transition period hook authors would exactly duplicate the two files (as is done in this PR).  I considered a symlink but it has worse portability (notably for windows).  After the transition period, the minimum_pre_commit_version idea sounds good enough.. I've gone ahead and updated all of our repositories (and all of my repositories) for this change.\nI plan to create issues on projects on http://pre-commit.com/hooks.html something along the lines of:\n\nSubject: pre-commit has changed from hooks.yaml -> .pre-commit-hooks.yaml\nHello pre-commit hook implementer!\nIn version 0.12.0 pre-commit has changed the default location for the file formerly known as hooks.yaml to make it more convincing for others to add more hooks.\nAs such, a migration has to (unfortunately) occur.\nFor maximum compatibility it is suggested to cp hooks.yaml .pre-commit-hooks.yaml (at least for the migration period).  A copy is suggested over a symlink unless you do not care for windows compatibility (and I wouldn't blame you!).\nOnce the migration period is over (or you no longer care to support old versions of pre-commit), the hooks.yaml file is no longer necessary and may be deleted.\nSee https://github.com/pre-commit/pre-commit/pull/470 for more details\nThanks again for contributing to the pre-commit ecosystem, we couldn't do it without you :)\nAnthony. /o\\ I'm so sorry for all the email spam, please don't hate me :). that is quite annoying!  A good cwd='/' should fix 'er up ril good though.  /me boots vm. oh! this isn't during installation but instead during runtime.  Yeah that patch seems fine do you want to cut a branch?. Yep! I was waiting for the build and didn't notice it in my 50 tabs \ud83e\udd23 \n\nThanks for the contribution!. This was released in 0.13.x, thanks again!. Thanks for the PR! This'll be in the next version I release which should be in the next few days if I get enough time to do it.. This was released in 0.13.x, thanks again!. so I've done some thinking about this and though it's kinda against the original pre-commit mentaility that we'd share hook configuration as much as possible, I think this might be an ok idea.\nThat said, it should do the following things that it isn't:\n- each set of additional_dependencies should create a \"repository\" the same way that real repositories do.  This at least allows reuse instead of writing a bunch of virtualenvs to the current working directory.\n- Since there's already a special class that handles local hooks this could be done pretty easily, here's the idea that I had for this:\n- They would get a \"special\": 'local://{}/{}'.format(language, ','.join(sorted(deps))) repository path (and probably a dummy value for sha?).  The framework would set up the per-language trivial repository (trivial setup.py, trivial gem, etc. maybe even all at the same time to make it simpler).\n- The \"clone\" step of creating the dummy repo would be to just populate the repo inside ~/.pre-commit/repo.... We already treat system / script hooks specially (they don't have an environment directory). It does work today, different language_versions get their own virtualenv, additional_dependencies are installed across all configured hooks.  Do you have an example of it being broken?. I'm actually prototyping an additional approach to this, once I'm done I'd like to compare the two :). superseeded by #489\nThanks for putting great work into this, it definitely helped me with my implementation <3. Improving the \"default\" detection for python virtual environments is planned, but I'm still not clear how I'll go about implementing it: #365\nAs for configuration v2 (which solves the duplicated language_version) you can read more about that here: #414. I'm going to close this as a duplicate of #365, please follow that issue :). womp, something about the quoting has made appveyor unhappy (and I assume travis if it got retriggered).  Perhaps one of the variables needs to be unquoted due to containing more than one thing?. Thanks for the PR!. This was released in 0.13.x, thanks again!. CC @tdeo here's my stab at this. let me know what you think. For \"normal\" repos they already have data to fill the two keys (repo, ref).  Also from our usage at least, additional_dependencies is super rare and even so already works in the current regime. Awesome, thanks for all the work and ideas and brainstorming on this @tdeo!\nAnd while I think this has the potential to replace a lot of the tedium of the \"mirror\" repositories, I think that official support is still going to be better -- since it's much easier to configure a \"traditional\" hook repo than the language-local repos.  Either way, I think this definitely makes it easier for people to integrate tools and gives us the potential to deprecate our mirror repositories.. Via #494 . Can you show the last few commands that led to this state and/or a reproduction that starts with pre-commit clean?\nCould you also provide:\n- pre-commit --version\n- env | grep -i virtualenv\n- env | grep -i pip\n- Your .pre-commit-config.yaml contents\nAs far as I know, this state should no longer be achievable.. @awebdeveloper any updates on this?. There's a discussion about this somewhere in the issues but I'm struggling to find it.\nThis error is intentional and points out a user error.  I don't really want to change this.   If a user encounters this error they can simply pre-commit uninstall and move along with committing if they really want to where otherwise silently doing nothing may hide an actual mistake (forgetting to commit the config file, misnaming it, etc.).. For comparison, consider similar tools:\n$ tox; echo $?\nERROR: toxini file 'tox.ini' not found\n1\n$ make; echo $?\nmake: *** No targets specified and no makefile found.  Stop.\n2\n$ pip install .; echo $?\nDirectory '.' is not installable. File 'setup.py' not found.\n1\n$ git status; echo $?\nfatal: Not a git repository (or any of the parent directories): .git\n128. I can't find it, perhaps I am not remembering correctly (or it was an internal issue).  This is the closet to what I found: https://github.com/pre-commit/pre-commit/issues/457\nThe situation you're in, is it that one branch will never have a config file or is it waiting for merge? . With this and the following accident this allows an unvetted commit:\n```bash\noops!\nrm .pre-commit-config.yaml\ngit commit -m \"foo\"\n```\nI also really want to minimize the amount of logic in bash if possible.  I really think it's better to error and improve the error message to suggest uninstall than complicate the bash scripts. hmm without complicating the bash we could add a PRE_COMMIT_ALLOW_NO_CONFIG=1 or some sort of environment variable that could accomplish the same thing.  The error message could suggest accordingly:\nNo .pre-commit-config.yaml file was found\n- To temporarily silence this, run `PRE_COMMIT_ALLOW_NO_CONFIG=1 git ...`\n- To uninstall pre-commit run `pre-commit uninstall`\nThough doesn't --no-verify solve the same thing (or do you also have a legacy script?). To be honest, I don't really want to support a strange edge case if nobody is using it due to the potential maintenance burden :). You know what, I changed my mind.  Let's add a flag to install which templates this in.  Write a simple integration test which demonstrates the behavior and I'll happily merge it :) . This is available in 0.13.3!\nThanks again :D. Actually, I think this is mostly unnecessary.  We're idempotently writing the file so we don't suffer from the install problem.  The template can change freely and will still be properly reinstalled.\nI'm going to scale this back just to have the simplifications and not need the new generated hashes. This should already work without new code:\nyaml\nadditional_dependencies: [-rrequirements.txt]\nThat said, this will suffer from a reproducibility issue as the cache key will not properly represent the installed state and I don't think it's a good idea to encode knowledge of parsing requirements files.  Especially those outside the hook repository . This sounds reasonable.\nYou can hack it into the current scheme but it's not pretty nor very portable (without first-class support):\nyaml\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    sha: v0.7.1\n    hooks:\n    -   id: flake8\n        entry: bash -c -o pipefail 'exec flake8 $@ |& tee -a flake8.log' --\nTo verify:\n```\nimportant, since we use -a to append to the log (since pre-commit will invoke 1..many times)\nrm flake8.log\npre-commit run flake8 --all-files || true  # if you want to demonstrate a failure writing to the log\ncat flake8.log\n```\nFor me (after breaking a file) this looks like this:\n```\n$ rm flake8.log \n$ pre-commit run flake8 --all-files \nFlake8...................................................................Failed\nhookid: flake8\nsetup.py:1:1: F401 'os' imported but unused\n$ cat flake8.log \nsetup.py:1:1: F401 'os' imported but unused\n```\nAs for first class, I think if you want to implement this I'd accept something like this:\nyaml\n    -   id: flake8\n        log_file: flake8.log\nNote that pre-commit combines stdout and stderr, so you'd get combined stdout / stderr into that log file.\n. This was released with 0.13.4!. errr... 0.13.5, somehow 0.13.4 contained incorrect files when pushed to pypi O_o. Workaround for now is to supply a files: '' dummy value. Oops, I didn't intend to break this in the other direction - - I'll release a patch that allows the unnecessary files once I'm at a computer. . This has been fixed in 0.13.6, sorry for the inconvenience!. Is there a way we could regression test this? This seems to be a pretty fiddly bit of code that we keep getting bugs in.  I'd love to help add some tests here :D. I think there's some similar tests in tests/cmds/install_uninstall_test.py which exercise the entire flow (setting up git repos and committing and pushing and inspecting output). \nProbably just need one there that tests the \"push to orphan branch\" . I'd be happy to! This current conflicts and needs a quick test. Would you be willing to carry the patch (or at least sketch out the situation and I could write the test?) . via #692\nThanks again @philipgian and @samskiter!. This is now released as part of 1.5.1!. This was released with 0.13.4!. errr... 0.13.5, somehow 0.13.4 contained incorrect files when pushed to pypi O_o. See https://github.com/pre-commit/pre-commit/issues/393#issuecomment-239503737. Thanks! . I believe you're looking for the system language. \n. And or repository local hooks . Something like this should work I think:\nyaml\n-   repo: local\n    hooks:\n    -   id: foo\n        name: foo\n        entry: foo --param a=1 --param b=2 . \n        language: system\n        # does not take file arguments \n        always_run: true\n        # due to a bug (already fixed in master) this is required but does nothing \n        files: ''\nTyping on my phone so excuse me if there's a typo or two :).  This is pretty close to some of the examples in the second link. \nNote that I pass . as the git directory. Pre-commit will always with cwd at the root of the repository . You can probably do entry: bash -c '... $PWD'? . <3 feel free to bounce off ideas . Output will be hidden unless:\n- the hook returns nonzero\n- files are modified by the hook \n- pre-commit is run with --verbose\n. Sure!  The documentation lives on github: https://github.com/pre-commit/pre-commit.github.io. Copying my comment from the other ticket:\n\ngit-lfs functions by (ab)using the pre-push hook. I don't think there's a way to resolve this conflict and use pre-commit's pre-push hook without modifications from the git-lfs side. I believe the problem is on git-lfs's side as pre-commit will still run git-lfs's pre-push hook (as pre-push.legacy) and the pre-push hook will still function.. @chbndrhnns I'm not sure there's much that can be done from the pre-commit side.  pre-commit does play nice with other tools in that it will set aside their script and continue to call it (in the so-called legacy mode).\n\nUnless you have other thoughts, I'm inclined to close this as wontfix. Yep, that is true.  Thanks for the issue :). I've put a little bit of thought into this in the past.  The problem is there's no guarantee as to whether a hook writes a file or not.  Hooks could document whether they perform writes and those could be done serially.  That probably complicates everything?  The actual parallel execution part probably isn't the difficult part but making sure that read/write hooks are excluded from parallelism.\nSo maybe an opt-in readonly: true or something? (which would enable parallel execution?). Maybe single_file: true would be more accurate, since read/write hooks could internally parallelize and still be correct.. Or allow_parallel: true, and just document the caveats. Yeah it's not necessarily a problem if a hook writes files.  The actual problem cases I can think of are:\n- A hook reads files not listed on CLI and also writes files\n- A hook writes files not listed on CLI. @chriskuehl and I discussed this again today -- here's my thoughts / summary of that:\n\nIn parallel mode, the xargs batch size would be decreased (can probably come up with a clever way to optimize this, maybe optimize for each process to cover two chunks or something?)\nenable parallel mode by default, all hooks (except for one closed source hook) that I can think of would function completely fine in parallel\nopt out of parallel mode on a per-hook basis by require_serial: true (default false). This has been released as part of v1.13.0 :tada:. https://github.com/git-for-windows/git/issues/1106 is resolved\nhttps://github.com/appveyor/ci/issues/1483 tracks the updates to appveyor. This is the new issue to watch: https://github.com/appveyor/ci/issues/1482. I think this is the new issue to watch: https://github.com/appveyor/ci/issues/1542. Yay it looks fixed!  Going to retrigger a job so our badge goes green again: https://ci.appveyor.com/project/asottile/pre-commit/build/job/8ije5h0y9nklpytr. All green!. Let me know what you think of the wording in https://github.com/pre-commit/pre-commit.github.io/pull/102\n\n(I'll push it now, we can update / iterate afterwards!). Appveyor is a known failure: #511. I guess the question becomes what set of hooks would it configure? . Seems easy enough!. Via #515. This feature is in 0.14.0. @revolter by product of least surprise it just shows you a sample configuration -- if you'd like to save it, that can be done simply with pre-commit sample-config > .pre-commit-config.yaml. pre-commit deals only in passing filenames to hooks.  By staged contents, it means the contents of the file that would exist if the commit would succeed (and not unstaged changes).. neat, you could call git-lint from pre-commit (if you wanted to). pre-commit doesn't really aim to be a parser of other tools, but more of a package manager.   thanks for the issue :). Oh hmm! I was under the impression that windows had its own set of color escapes -- would those be more portable to more versions of windows?\nSorry I've been so slow to get to this, I've been traveling :). Ok! In that case this seems fine -- can you add the new file to the excluded files in .coveragerc. Thanks!. This feature is in 0.14.0. This is planned: https://github.com/pre-commit/pre-commit/issues/240. This is now available in v1.1.0!  Thanks again for the issue!. That's strange!  I'll add an encoding to that call but I really expect your operating system to default to C or something.\nCan you paste: env | grep -Ei '(LANG|LC)'. I suspect something else is broken with your environment?  Do you have reproduction steps that I can use to get to the bottom of this bug?. I expect LANG=en_US.UTF-8 in your environment as well -- even without that, python should be defaulting to US-ASCII if the LANG variable is missing.  What version of python are you using (and what is your system installed python?)\nYou can often figure out what one pre-commit is using by $(head -n 1 $(which pre-commit) | cut -d'!' -f2) --version. Sweet! Yeah I imagine something strange happened if /when brew updated python. . Is there any way to convince vs code to pass along a LANG environment variable? . That is my guess -- even though python should still fall back to an appropriate encoding (US-ASCII) when LANG is not present (why I can't even reproduce this issue even with a blank environment on OSX). I'll try and reproduce this when I'm at a mac.\nCould you help me with the following:\n- version and how you installed vscode\n- version and how you installed python\n- version and how you installed pre-commit. here's a branch which does this while I try and figure out what's up: https://github.com/pre-commit/pre-commit/pull/524. I fixed this upstream\nEither grab the nightly VS code or wait for the next release :D. \\o/. The main problem we've had (internally) with stylelint is the cli doesn't allow multiple filenames (I don't think either of those two mirrors handle this either).\n@magicmark has worked on our internal wrapper (and I believe is adding a PR to make it fit better into the pre-commit ecosystem?) which (if I recall correctly) is a simple shell wrapper that invokes stylelint one file at a time?\nOf the two linked, they're set up nearly identically -- @webdeveloper's does include some additional file extensions which may be useful.  You'd probably need to use args and tweak either the entry or play with always_run to get around the single-file issue.  Some entry similar to bash -c 'echo -n $@ | xargs -d' ' -n1 stylelint' -- might work (note: untested, non-portable, fails for filenames with spaces, mileage may vary). Sweeeeeeeeet. Yeah probably missing sha, I'll go ahead and add @awebdeveloper's mirror to https://github.com/pre-commit/pre-commit.github.io so it shows up on http://pre-commit.com. Looks cool!\nThis might be better supported as a node hook or used as a local hook: http://pre-commit.com/#repository-local-hooks. @alexjurkiewicz we use https://github.com/pre-commit/pre-commit-mirror-maker to generate and keep these up to date. This seems to be a valid configuration to me?\n$ pre-commit-validate-manifest /dev/stdin\n-   id: tsfmt\n    name: TypeScript Formatter (tsfmt)\n    description: Code formatting for TypeScript files.\n    entry: tsfmt\n    args: ['--verify']\n    language: system\n    files: \\.(ts|tsx)$\n$ echo $?\n0\nIs this configuration not working as expected? (Another alternative is to specify the entry as tslint --verify though these two configurations would be identical)\nThe code seems to support this:\n- https://github.com/pre-commit/pre-commit/blob/1be4e4f82e31336fa5fca096c962c72ac0041537/pre_commit/languages/system.py#L20\n- https://github.com/pre-commit/pre-commit/blob/1be4e4f82e31336fa5fca096c962c72ac0041537/pre_commit/languages/helpers.py#L19-L20\nI know this definitely works for python hooks since we use that for autopep8: https://github.com/pre-commit/pre-commit-hooks/blob/5bf6c09bfa1297d3692cadd621ef95f1284e33c0/.pre-commit-hooks.yaml#L7\nCan you provide more information as to what you're seeing?. regexes are already much more powerful than globs.  I'm with @chriskuehl, I don't think this complexity is worth it and is more likely to confuse than help.. Closed via #519 . This feature is in 0.14.0. Please make a pull request to https://github.com/pre-commit/pre-commit.github.io. I believe you're looking for always_run? something like this:\nyaml\n-   id: foo\n    entry: make check\n    always_run: true\n    # The rest of the metadata. Ah interesting!  I didn't think about things that would only sometimes need to run.\nPerhaps a pass_filenames: ... (default true of course) could be added?  Do you want to attempt a PR?. Heh, also found a bug while investigating this -- #533. via #538 . This feature is in 0.14.0. Seems not, here's a list of all possible hooks: https://git-scm.com/docs/githooks. Ah I misinterpreted what you were asking, I thought you meant that pre-commit was triggered immediately when running git add. If you run just pre-commit this will run all hooks on just the staged files. . Thanks!  I'll touch this up and put it into the next release :). Ah yeah I deleted the comment as I'll handle it better at a later date. Sorry for the email spam! . pre-commit already supports pre-push as well (and it's pretty easy to add others).  If you'd like to add support for post-update it mostly means adding it to pre-commit install, adding a template for it (see pre-push-tmpl for example) and then making stages understand it.  I'd accept PRs for that :). commit-msg was added here you might find some inspiration from that :). going to close this -- there's now precedent for pre-commit to support other types of hooks (commit-msg / pre-push are implemented) and all it takes is a champion to add other hook types :)\nPRs definitely welcome!. This is intentional.  If a hook modifies files then the commit itself was not ready.  You can inspect whether the modifications were correct, re-add, and commit as usual.. I hope I can convince you this is a reasonable behaviour :)\nConsider the three possible choices pre-commit could make in this situation:\n\nDon't look at modifications as a failure and continue the commit as normal:\nThis will cause commits of unvetted changes (and incorrect contents)\n\n\ngit add after changes and continue committing\nWhat if the committer has unstaged changes on that file?  Attempting to restore them would break.\nWhat if the git hook is incorrect? You've now committed broken things.\nWhat if the git hook depends on the behaviour of others (for example, a rewriter that expects autopep8 to fix up some indentation)? Again, you've now committed \"broken\" things.\nWhat if two rewriting hooks disagree on how a file should be formatted?  Suddenly you're switching formatting back and forth on every commit :)\n\n\nTreat modifications as a \"failure\" and leave the intelligent end user to perform the correct actions of the above whether it's:\nAccept the automatic modifications and git add\nAdjust pre-commit hook settings and re-commit\nModify the changes made\netc.. pre-commit in fact used to take the first approach (1.) and caused many headaches with tools that didn't properly communicate their side-effects by exit codes.  It was considered a bug  (#285) and fixed (#287 #305).. Please open this ticket on the docs: https://github.com/pre-commit/pre-commit.github.io\n\n\n\nFor description, see http://pre-commit.com (^F description). This fix is in 0.14.0. Thanks for the PR :D. So one thing that's started walking in this direction is log_file added in https://github.com/pre-commit/pre-commit/pull/530\nI don't really want pre-commit to have any more than a subprocess interface with hooks, but the rest of it sounds feasible.\nI think a --machine-output f.json option seems fine, but I don't really want to change the interface with hooks to enable that.  I think it could produce something like this today though which should be pretty consumable:\njson\n{\n    \"//\": \"overall result of the run\",\n    \"result\": \"1\",\n    \"hook_outputs\": [\n        {\n            \"repo\": \"...\",\n            \"hook\": \"...\",\n            \"hook_output\": \"whatever got printed\",\n            \"hook_modified_files\": [\"list\", \"of\", \"modified\", \"files\", \"if\", \"applicable\"],\n            \"hook_return_code\": 1\n         },\n         {\"//\": \"etc...\"}\n    ]\n}. Thanks! . This appears to be a number of things:\n- The version of setuptools is too old to support \"wheel\" distribution information\n- pre-commit>=0.9.0 no longer supports python2.6\n- pre-commit's dependency (at 0.8.1 (but no longer!)) jsonschema no longer supports python2.6\nThat said, I was able to get this to hobble along by doing the following things (note: upgrading packages managed by the system package manager aren't usually a good idea -- so don't necessarily do what I do!)\n```dockerfile\nFROM centos:6.9\nRUN yum install -y git\nWORKDIR /repo\nRUN git init /repo\nRUN curl https://bootstrap.pypa.io/get-pip.py | python && \\\n    # Need to do this in a separate command before installing pre-commit as\n    # pre-commit has non-wheeled dependencies that require setuptools to\n    # build from source.\n    # Also need to install a sufficiently new setuptools from pip instead of\n    # using the python-setuptools package through yum (which is at version\n    # 0.6rc11: released in 2009: https://pypi.python.org/pypi/setuptools/0.6c11)\n    pip install setuptools && \\\n    # Note, jsonschema is a dependency of pre-commit which has also dropped\n    # python2.6 support, so we need to limit to a version that will install\n    # there as well.\n    pip install 'jsonschema<=2.5.999' 'pre-commit<=0.8.999'\nCMD [\"pre-commit\", \"install\"]\n```\nOutput:\nconsole\n$ docker run -ti test\npre-commit installed at /repo/.git/hooks/pre-commit\nSo in several different ways, python2.6 (and centos6) are just too old to work.. Note that in centos7 things run much more smoothly (I can use the packaged setuptools, system python is 2.7, no weird limiting of dependencies):\n```dockerfile\nFROM centos:7\nRUN yum install -y git python-setuptools\nWORKDIR /repo\nRUN git init /repo\nRUN curl https://bootstrap.pypa.io/get-pip.py | python - pre-commit\nCMD [\"pre-commit\", \"install\"]\n```\nconsole\n$ docker run -ti test\npre-commit installed at /repo/.git/hooks/pre-commit. Oh I wasn't  necessarily suggesting using docker, that's just the easiest way for me to try things against centos. I don't think this should happen in the framework -- if the hook needs to transform the filenames it should do that itself.\nOur usage of eslint works great without mangling the filenames? is there some odd configuration setting you're using?. Here's a config that does what you want either way though (not portable: uses bash, also not tested)\nyaml\n...\nentry: bash -c 'echo \"$@\" | xargs basename | xargs eslint' --\n.... @dainyl  did that work for you?. Woops! Yeah I keep tracking down these places as well :)\nYou can find all of them by running git grep \"'diff'\"\n$ git grep \"'diff'\" -- pre_commit\npre_commit/commands/run.py:        'git', 'diff', '--name-only', '{}...{}'.format(old, new),\npre_commit/commands/run.py:    diff_before = cmd_output('git', 'diff', retcode=None, encoding=None)\npre_commit/commands/run.py:    diff_after = cmd_output('git', 'diff', retcode=None, encoding=None)\npre_commit/commands/run.py:            subprocess.call(('git', 'diff', '--quiet')) != 0\npre_commit/commands/run.py:        subprocess.call(('git', 'diff'))\npre_commit/commands/run.py:        ('git', 'diff', '--exit-code', runner.config_file_path),\npre_commit/git.py:        'git', 'diff', '-m', tree_hash, 'HEAD', 'MERGE_HEAD', '--name-only',\npre_commit/git.py:        'git', 'diff', '--staged', '--name-only',\npre_commit/staged_files_only.py:            'git', 'diff', '--ignore-submodules', '--binary', '--exit-code',. Here's a PR which should solve this: https://github.com/pre-commit/pre-commit/pull/546. This is available in the 0.14.2 release!. Just a guess:\nyaml\n-   repo: local\n    hooks:\n    -   id: imageoptim\n        name: imageoptim\n        entry: bash -c 'echo \"$@\" | imageoptim --quit --no-color --image-alpha --min-quality=60' --\n        language: node\n        additional_dependencies: [ImageOptim-Cli@...]\n        files: '\\.(png|jpg)$'\nNote you'll lose portability due to bash, but it should work on posixlikes.\nUnfortunate that their \"commandline interface\" doesn't actually support a commandline \ud83e\udd14 . $@ is an array\nIf you need one file per line you can probably echo \"$@\" | xargs -n1 | imageoptim .... @awebdeveloper  did you try my updated suggestion with xargs?. commandlines are case sensitive, the executable imageoptim-cli provides is called imageOptim. Now the problem looks like with one of the options passed to imageOptim, maybe try adjusting them?  I got it to actually run with no arguments. What I would do (did) is add an argument one by one until it fails, this'll tell you which one is wrong and which one you should adjust.\nThis \"cli\" should probably error if it receives a bad argument and tell you the bad argument, but that'd be an issue on imageoptim-cli.\n\nExpand me to find what I discovered if you don't want to figure it out yourself\nAfter adding --min-quality=60 the program simply gave me the help.  Changing it to --min-quality 60 fixes it!\n\n. ah yeah I don't think that's going to work.  To be brutally honest imageOptim is a sad excuse for a \"command line interface\" -- the fact that you have to have 2 processes just to feed filenames into it is awful.  The bash hack really doesn't enable any of the nice features of pre-commit like args.\nYou could do something hackety with parsing the arguments and looking for a special sigil (for example --~ or something and then splitting on it and using args: [--~, --quit, --no-color] but that's really beyond  complicated.  It's a shame that imageOptim is so awkward.  There's other image optimization tools with significantly better interfaces (and cross-platform portability) that I'd suggest over imageOptim.. I've used pngcrush and mozjpeg myself and they work pretty well.. Going to close this, there's a way to do this with clever bash + xargs but this is a very nonstandard executable pattern so we won't implement anything in the framework at this time to support this.. I think a lot of this will be addressed with configuration v2: https://github.com/pre-commit/pre-commit/issues/414\nI'm also hesitant:\n- this will be pretty complicated to implement\n- it'll make it nearly impossible to answer \"where is this hook being included from\"\n- I probably won't use this feature\n- It will be difficult / impossible to maintain open source collections as downstreams will generally not expect / want them to change (every change / addition / removal will essentially be breaking)\n- it's now two upgrades to get the latest -- first an update in the collections repository and then a bump in the consuming repository.. This would also make it impossible to add exclude / language_version / etc. (or other configuration) to individual hooks. I don't think this is possible so I'm going to close this.  @dlgallagher feel free to reopen if you have additional ideas :). Unfortunately these aren't currently passed along to hooks.  pre-commit is a framework built around filenames (it takes the oldrev and newrev and computes the changed files and calls each configured hook based on those -- refname is ignored).\nI think the only thing that could be done here would be to export some environment variables that hooks could use -- though I'm not sure this will be any more useful since the list of filenames is probably the only useful information to gain from that.. would environment variables work?  I could add that pretty easily. Something like this? https://github.com/pre-commit/pre-commit/pull/550. I released 0.14.3 with this change btw :). Depending on how migrated repositories are, I'd suggest the following (at least temporary) if you plan to move repositories to use types:\nif you still are maintaining hooks.yaml\nConvert your hooks.yaml to a skeleton providing the minimum possible to satisfy <0.15.0 and add a minimum_pre_commit_version: 0.15.0 key to each hook.\nFor example (original here):\nyaml\n-   id: autopep8-wrapper\n    language: system\n    name: upgrade-your-pre-commit-version\n    entry: upgrade-your-pre-commit-version\n    files: ''\n    minimum_pre_commit_version: 0.15.0\n\nFor pre-commit<0.6.7, an error about not being able to execute upgrade-your-pre-commit-version will be produced\nFor pre-commit>=0.6.7,<0.12.0 an error suggesting an upgrade\nFor pre-commit>=0.12.0, .pre-commit-hooks.yaml will be used instead (see below)\n\nforward-backward compatible .pre-commit-hooks.yaml\n\nAdd minimum_pre_commit_version: 0.15.0 to each hook using types\nChange files: ... to files: '' (this is the default value when files is missing)\nThe entire reason for the noop files is old versions of pre-commit won't even load the configuration far enough to produce a useful error message on minimum_pre_commit_version\n\nFor example (original here):\nyaml\n-   id: check-ast\n    name: Check python ast\n    description: Simply check whether the files parse as valid python.\n    entry: check-ast\n    language: python\n    types: [python]\n    # for backward compatibility\n    files: ''\n    minimum_pre_commit_version: 0.15.0\n\npre-commit<0.12.0 won't read this file\npre-commit>0.12.0,<=0.15.0 will suggest an upgrade\npre-commit>=0.15.0 will use types and files will be a noop\n\nWhen you don't care about old versions, see below\nonce you no longer care about old versions of pre-commit\n\nRemove the noop files: '' and the minimum_pre_commit_version. . Yeah I plan to change the script to not fall back (and comment them out temporarily). One way this can be done today (without modification) is through multiple configuration files.\n\nUse .pre-commit-config.yaml as your default commit / lint / etc. configuration.\nUse -C (--config) to select another configuration for build / etc.\nI'm not sure what this would look like otherwise (at least until configuration v2 is completed #414).\nDoes multiple config files solve this for you?. Sure, it was just a suggestion using the current tech :)\nWhat would you want/expect this to look like in configuration?. I'm going to be honest, I don't really see myself using this feature so I want to have a really good reason for it before implementing.\npre-commit currently doesn't concern itself much with organizing your build and is largely a \"git+filenames => install tools => run tools with filenames\" tool.  It tries to leave your build as open as you want it to be without complicating the primary use case (running during git hooks).\n(I may be wrong) but it seems like your current goals are:\n- only run a specific list of things during pre-commit (maybe all?) (I'm not even sure this is one of your goals, basing this off of your original post and not your example configuration)\n- In some make targets, run a specific set of hooks against all files\nIn our projects we've never wanted the first goal (we always want to run all the hooks every time), but it is possible using stages (simply use stages: [] for hooks you don't want to run in the commit or push stages) (documented here).  Something like this:\nyaml\n    -   id: detect-aws-credentials\n        # Only run when explicitly asked for\n        stages: []\nThe second we have done, but we tend to use some other tech (such as a makefile) to group these things, from your example something like this:\n```make\n.PHONY: pre-commit-lint\npre-commit-lint: venv\n    venv/bin/pre-commit run --all-files check-ast\n    venv/bin/pre-commit run --all-files check-byte-order-marker\n    venv/bin/pre-commit run --all-files check-docstring-first\n    venv/bin/pre-commit run --all-files check-json\ncould even \"DRY\" with something like\nPRE_COMMIT:=venv/bin/pre-commit run --all-files\n$(PRE_COMMIT) check-ast\nor even\necho -n 'check-ast check-byte-order-marker check-docstring-first check-json' | \\\nxargs -n1 pre-commit run --all-files\n```\nThoughts on these other approaches?. Actually, just tried the stages: [] thing, doesn't seem to do what I expect -- so maybe I could implement that if it's actually something that's desired.. test failures are expected, I'll fix those up. Yeah I've hit this once or twice but in every case I've sent a tiny pr and the tool just fixed it. -n1 is also super slow (especially on windows). \nThe idea seems fine I guess, I'm not keen on the name chosen (what does sequentially mean? They're already passed in a sequence). \n\"xargs mode\" also doesn't make too much sense as we're already simulating xargs in a way (see aptly named xargs.py). Given the resolution in #394 and the multitude of tools that already allow multiple arguments (precedent) I don't think we should complicate things until there's a stronger usecase. woops, I broke this in 0.15.1 :(. actually hmm... I didn't really change the logic there: https://github.com/pre-commit/pre-commit/pull/556/files#diff-235f2434ddb56aaeef64d44558e82943R89. Before I merge, I'd like to understand what's actually different -- can you produce the output of these commands for me?\npython\nimport distutils.spawn; print(distutils.spawn.find_executable(\"python3.6\"))\nimport pre_commit.parse_shebang; print(pre_commit.parse_shebang.find_executable(\"python3.6\"))\nI expect both to return None, but now I'm not so sure :). Also your .pre-commit-config.yaml will probably be useful as well :). Ah I see now:\nAnthony@AnthonysDesktop MINGW64 ~/Desktop/git/pre-commit (master)\n$ cp venv/Scripts/python.exe venv/Scripts/python2.7.exe\n(venv)\nAnthony@AnthonysDesktop MINGW64 ~/Desktop/git/pre-commit (master)\n$ virtualenv venv27 -ppython2.7\nThe path python2.7 (from --python=python2.7) does not exist\n(venv)\nAnthony@AnthonysDesktop MINGW64 ~/Desktop/git/pre-commit (master)\n$ virtualenv venv27 -p python2.7\nThe path python2.7 (from --python=python2.7) does not exist\n(venv)\nAnthony@AnthonysDesktop MINGW64 ~/Desktop/git/pre-commit (master)\n$ virtualenv venv27 -p python2.7.exe\nUsing real prefix 'c:\\\\python27'\nNew python executable in C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv27\\Scripts\\python2.7.exe\nAlso creating executable in C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv27\\Scripts\\python.exe\nInstalling setuptools, pip, wheel...done.\nRunning virtualenv with interpreter C:\\Users\\Anthony\\Desktop\\git\\pre-commit\\venv\\Scripts\\python2.7.exe\nBasically, virtualenv has a bug here: https://github.com/pypa/virtualenv/blob/6d8a4ed81f40223a3f9ea1ba5d11be500d9f667a/virtualenv.py#L1542-L1565. I'm going to try and send them a patch: https://github.com/pypa/virtualenv/issues/1062. This is now available in v0.15.2. Hitting https://github.com/travis-ci/travis-ci/issues/8081 it seems. Pull requests welcome, note that this also has to work well for windows which doesn't adhere to XDG.\nI've been hesitant to move the directory as it'd be a bit awkward for current users (though perhaps clean can just be updated to remove both paths for some amount of time?). @nagromc If you ^F windows on http://pre-commit.com you can see the current support matrix\nIt is tested automatically through appveyor -- my home desktop at home also runs windows so I often do more-difficult debugging on that.\nAs for the three solutions above:\n\nIsn't feasible -- virtualenvs are not relocatable (the shebangs contain full paths to the interpreter)\nA possibility, though...\nsounds best :). I think just leave it alone for the most part (unless pre-commit clean is run, we can include it in there for some amount of time and then after some amount of time pretend like it never existed). First I don't think we should split the two files, it's pretty unlikely that someone is going to read either of them in the first place :)\n\nI've collected a few other repositories for some guidance:\n- pip/pypa:\n    - has a contributing.md and a docs/development.rst\n    - their CONTRIBUTING.md is largely a link to their code of conduct -- there haven't been any issues yet of code of conduct, I don't think this is important at this point in the project\n    - Their developing file contains a short blurb about how to run the tests -- but mostly assumes you know how to use the tools\n- unbit/uwsgi - nothing at all, hmm\n- requests/requests\n   - contributing.md and docs/dev/contributing.rst\n    - similar to pip, their contributing.md largely links to their code of conduct and the other contributing file\n    - their contributing.rst mentions tox / py.test not at all, assuming the reader knows how to use these tools or that the reader can peruse the tool's documentation to figure that out\n- pytest-dev/pytest\n    - A single contributing.md\n    - This has the full gamut of code of conduct and test running\n    - Again, they don't really go super into detail on duplicating tox / pytest docs\nI didn't really have time to find other large python projects but my general idea from those couple that I perused is to avoid duplicating the upstream tooling's documentation -- generally keeping it simple :)\nHmm, my thoughts on this and feel free to disagree (I'll go section by section based on your PR):\ntargeted environments\nI think we can largely leave this out, this information is in four common places already: setup.py, tox.ini, .travis.yml, appveyor.yml\ninstalling the test environment\nI don't really want to write directions for installing python on $N different systems.  Also the current documentation doesn't necessarily work (without first adding ppa:deadsnakes (shameless plug, I help maintain \ud83d\ude06)) for all debian-based distributions.  If this were added, I could see other PRs for adding instructions to install python on macos / windows / etc. and I think people are better off just googling that (or going to python.org).\nRunning the tests\nA lot of this section is good, but a lot of it is duplicated in CONTRIBUTING.md, if anything gets kept it'd come out of this section \ud83d\udc4d \nI'm not sure the bit about git configuration is super necessary, I think people's initial thought should be \"the tests are broken\" => make an issue.  I think the reason your feature continued to have problems was you didn't pull the upstream after I made the fixes, heh.\nLet me know your thoughts :). For now I'm going to close this, feel free to add to the CONTRIBUTING.md file in this repository :). @Alain1405 you'll want to check on https://github.com/pre-commit/pre-commit/issues/577, it's likely pre-commit autoupdate will solve your problem (though it's not possible to know without seeing your .pre-commit-config.yaml). @Lyoness  the real test would be removing our workaround: https://github.com/pre-commit/pre-commit/pull/567/files#diff-354f30a63fb0907d4ad57269548329e3R15. Closing this as we'll use our workaround until travis-ci ships a fix.. It's picking ascii because you don't have locales set up in your docker image. (notable you need to run  locale-gen for en_US.utf-8 and set LANG to the same) . Sweet, yeah wasn't at a computer -- I think the commands I've used in the past are:\n``dockerfile\nRUN /usr/sbin/locale-gen en_US.UTF-8\nENV LANG=en_US.UTF-8. This'll probably need some# pragma: no cover`s to satisfy coverage.\nQuick question: this assumes if you're using cygwin python you're also using cygwin go -- what happens if they're mixed?. Thanks! I'll get this in a release once I'm at a computer. Strange, that patch doesn't look like a patch at all!  I recently fixed something in this code section (during I think 0.14.2), can you include your version information (both for pre-commit and for git)?\nOther information that may be useful:\n- ~/.gitconfig\n- .git/config\n- what the change actually was\nI have a sneaking suspicion that one or more of the configuration changes caused one of the following to happen:\n- git checkout -- . didn't actually remove changes\n- git diff didn't actually create a patch but at the same time exited nonzero. fwiw, with the default installation of git on windows, this is working for me and is rather heavily tested also in ci with appveyor.\nI'm curious to see what settings cause this to happen (I'll be trying some combinations myself). Also the output of the following commands would be useful for debugging\n```\ngit diff --ignore-submodules --binary --exit-code --no-color --no-ext-diff\nwith changes made, and with nothing you're concerned about losing, does the following remove all changes to you working directory\ngit checkout -- .\n```. this pr may help with this issue as it switches to the more-lower-level commands. That's super helpful! I should be able to reproduce this now and get a fix for you :). Interesting, I can trigger a fatal error by configuring as follows:\nini\n[apply]\n    whitespace = error\nSo there's something to fix at least,  I'll make a patch for that and see if it fixes your error (crosses fingers). If you're using powershell it might be because of this -- though that shouldn't affect pre-commit since there aren't any shells anywhere.\nHere's the patch I've written for whitespace.error: https://github.com/pre-commit/pre-commit/pull/574. Can you try the latest master and see if that patch helped?. Hmm, there has to be some commandline option to make that happen correctly -- I'll look at this in the morning (I still can't get it to reproduce under test!). OK! I can finally reproduce this.\nHere's my minimal reproduction (also reproducing on linux, but I don't think anyone uses autocrlf=true on linux):\nScript\n```bash\n!/bin/bash\nset -ex\nrm -rf foo\ngit init foo\ncd foo\nCommit crlf into repository\ngit config --local core.autocrlf false\npython3 -c 'open(\"foo\", \"wb\").write(b\"1\\r\\n2\\r\\n\")'\ngit add foo\ngit commit -m \"Initial commit with crlf\"\nChange whitespace mode to autocrlf, \"commit lf, checkout crlf\"\ngit config --local core.autocrlf true\npython3 -c 'open(\"foo\", \"wb\").write(b\"1\\r\\n2\\r\\n\\r\\n\\r\\n\\r\\n\")'\nRun pre-commit\nhead -4 ~/workspace/pre-commit/.pre-commit-config.yaml > .pre-commit-config.yaml\n~/workspace/pre-commit/venv*/bin/pre-commit\n```\nOutput\n```\n+ rm -rf foo\n+ git init foo\nInitialized empty Git repository in /tmp/foo/.git/\n+ cd foo\n+ git config --local core.autocrlf false\n+ python3 -c 'open(\"foo\", \"wb\").write(b\"1\\r\\n2\\r\\n\")'\n+ git add foo\n+ git commit -m 'Initial commit with crlf'\n[master (root-commit) 6644acc] Initial commit with crlf\n 1 file changed, 2 insertions(+)\n create mode 100644 foo\n+ git config --local core.autocrlf true\n+ python3 -c 'open(\"foo\", \"wb\").write(b\"1\\r\\n2\\r\\n\\r\\n\\r\\n\\r\\n\")'\n+ head -4 /home/asottile/workspace/pre-commit/.pre-commit-config.yaml\n+ /home/asottile/workspace/pre-commit/venv/bin/pre-commit\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.pre-commit/patch1501609946.\nTrim Trailing Whitespace.............................(no files to check)Skipped\n[WARNING] Stashed changes conflicted with hook auto-fixes... Rolling back fixes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/bin/git', 'apply', '/home/asottile/.pre-commit/patch1501609946', '--whitespace=nowarn')\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: \n    error: patch failed: foo:1\n    error: foo: patch does not apply\nCheck the log at ~/.pre-commit/pre-commit.log\n``. The best approach I can come up with is to *temporarily* setcore.autocrlf = falsewhen applying patches.  Replacing\\rcharacters out of a patch will likely break other things, and usinggit apply --ignore-whitespace` causes it to incorrectly modify other line endings.\nI'll try and make a patch for this -- I also think this is probably a bug in git (a patch generated by git diff-index --patch cannot be applied by git apply). Good news! #575 should solve this issue -- thanks for the patience :). well this patch seems to not work well on windows!  I'll need to look into why though :). For whatever reason, I couldn't get git checkout-index --all --force to work on windows when core.autocrlf was set to input (it wasn't actually checking out the files???) I'm not sure if this is a bug, I'll try and write up a testcase.\nFor now I've switched the checkout-index back to checkout. Here's the mailing list entry I sent to the git mailing list. no, @ilovezfs thank you for maintaining the homebrew installation :). This is an intentional change in 0.16.0 -- it removed backward compatibility which has been issuing a deprecation warning for over 6 months.\nThe specific repository in question is no longer maintained (see also here and here) and you should consider using the maintained fork.  The maintained fork does not have this problem :). For others getting the same error message, pre-commit autoupdate is the usual blanket fix (assuming the upstream repositories are fixed). Going to close this as it was intentional. @khru please read above. That likely means that the latest version of that repository  also doesn't have a .pre-commit-hooks.yaml, though without knowing the actual repo it's difficult to tell (looks like a private one?)\nIf you have commit access to that repo, you can usually cp hooks.yaml .pre-commit-hooks.yaml, assuming that file also exists.\nYou may also need to use pre-commit autoupdate --bleeding-edge git@github.com:... if the latest tagged revision in that repository doesn't contain a .pre-commit-hooks.yaml. that all looks good, though you generally want to avoid head as a rev\nYou'll need to make sure that the remote repository myrepo/myrepo has a .pre-commit-hooks.yaml with the proper metadata in a .pre-commit-hooks.yaml\nThe subtlety is:\n- consuming repos: .pre-commit-config.yaml\n- producing repos: .pre-commit-hooks.yaml. Oh, you're trying to use a hook directly from the repository you're committing to instead of a remote repo, you probably want a local hook? . Checking in .pre-commit-config.yaml is suggested.  The \"remote\" repositories are if you want to share that hook definition with multiple consuming repositories. Thanks!. This is available in 0.16.1!. Installation directly via npm / pip / rubygems / etc. is supported through repository local hooks. For example (not actually tested, but you get the idea):\nyaml\n-   repo: local\n    hooks:\n    -   id: eslint\n        name: eslint\n        entry: eslint\n        language: node\n        types: [javascript]\n        additional_dependencies: [eslint@4.3.0]. \ud83d\udc4d I'll fix the build so CI is happy, seems the swift guys moved their binary locations. This is available in 0.16.2 -- thanks for the contribution!. I've made an issue on the swift project as well in case this wasn't intentional. This sounds like a really cool idea -- and I think the latest updates which add commit-msg hooks could support this idea.\nThe concerns I have about this:\n- What about --no-verify?\n    - Neither .git/hooks/pre-commit nor .git/hooks/commit-msg run when --no-verify is passed, so nothing happens\n- What about SKIP?\n    - This could be detected by a cli and adjust the number of hooks\n- What about hooks that don't affect any files?\n    - I'd still consider these hooks to have \"run\", but trivially -- it'd be quite difficult to figure out which ones were applicable without replicating the entire logic of pre-commit in a hook\n- How would a client hook know if all the hooks passed?\n    - Simply put, it wouldn't but I don't think that's actually a problem -- in the case of pre-commit hooks failing, it would never get to the commit-msg hook which does the modification.\n    - When another commit-msg hook fails, even if the hook has done the modification to the commit message the commit would still get properly cancelled\nIf you don't mind, I'm going to create another repository and start hacking away on this idea -- I think this is a good one :). For a first pass, I'm just going to hardcode a message -- we can work on making it fancier in the future if that's desirable :). Just an update on this, I am still working on it though I've put this more on the back burner.  Due to the tight coupling between pre-commit and this hook I think it makes more sense to keep this internal to the framework.  So now I'm mostly stuck on how to enable such a thing -- I have a hunch I'll want to do something with #414. A framework for adding something like this was contributed as part of https://github.com/pre-commit/pre-commit/pull/643. Here's how I tend to do local development against hooks (when necessary, usually I only do it for the first iteration of the hook and then rely on other tests in the repository itself to manage the hooks).\nInitialize my git repository, Let's say it's at /home/asottile/workspace/hook-repo\nDo some development (on master branch -- yeah this part is not the greatest) and commit a .pre-commit-hooks.yaml file (and commit).\nRun git rev-parse HEAD to find your current revision (we'll only need to do this for the first time, we'll rely on autoupdate from then on).\nWith this revision, temporarily add to a consuming repository the following:\nyaml\n-   repo: /home/asottile/workspace/hook-repo\n    sha: <<the result of git rev-parse HEAD>>\n    hooks:\n    -   your-hook-id\nContinue to iterate by doing the following:\n\nIn your hook-repo make whatever changes are necessary\nRun git commit ... (since pre-commit works by resetting to a specific revision, an actual commit / tag is necessary for sha: ...)\nIn your consuming repo, run pre-commit autoupdate --bleeding-edge to update to the latest revision.  This will automatically set the sha: ... to the latest revision on the master branch (without --bleeding-edge, it will seek out the nearest tag).\nThen you can test with pre-commit run --all-files or pre-commit run --files ... etc.\nIf you want to do a proper pull request to your hook-repo: once satisfied, in hook-repo rename the master branch to something appropriate for a pull request and rebase / etc. your branch.\nYou can rename a branch by running git branch -m my-new-branch-name\n\n\n\nYou shouldn't need to push if you're referring to the local filesystem (just commit) as a filesystem location is a valid clone source.\nLet me know if any part of this is unclear or what can be added to the documentation (or if you want to PR the docs, they live here :). @sverhagen any thoughts on this?. Would a cli interface such as pre-commit test-repo path/to/repo hook-id satisfy your requirements? (not yet implemented, just throwing out some design proposals) . It could do whatever, I was imagining it to install + run the hook based on a git directory.\nAdding --branch to autoupdate would be pretty easy (for use with --bleeding-edge), I can add that :). I decided to call this try-repo instead as it has some nice useful characteristics outside developing hooks.\nHere's the PR for that: #633. So the new workflow with try-repo now looks something like this:\n\nHR: hook repository\n\nCR: consuming repository\n\n\nHR: on feature branch git commit -m \"...\" and/or git commit --amend (still need a commit for it to be clonable)\n\neither:\nCR: pre-commit test-repo ../path/to/hook/repo\nCR: pre-commit test-repo ../path/to/hook/repo specific-hook-id. This has been released in v1.3.0\n\n\n\nI'm going to call this fixed for now, I'll update the documentation to call out the new functionality :). I agree that no-commit would be ideal.   I wonder if there's some way to abuse git-write-tree / git-read-tree and a custom GIT_INDEX_FILE to make something clonable?\nCould you elaborate on ignoring the config file?  It seems to work for me:\n```\n$ cat ../1/.pre-commit-hooks.yaml \n-   name: test\n    id: test\n    language: system\n    entry: echo\n    files: .py$\n$ git ls-files\nfoo.txt\nsetup.py\n$ pre-commit try-repo ../1 --all-files --verbose\n[INFO] Initializing environment for ../1.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: ../1\n    sha: 98562dd751fb2b7cfe04d2171cce5198dd5adaac\n    hooks:\n    -   id: test\n===============================================================================\n[test] test..............................................................Passed\nhookid: test\nsetup.py\n```. The patching/restore patch bit is a bit different.  This needs to make something clonable (since hook repositories are installed by cloning).\nThe other thing is a confusion I believe.  try-repo makes its own .pre-commit-config.yaml that it uses to run hooks.  I think you're expecting them to be merged (somehow?) -- though I don't know how you'd expect that to work other than guessing that hookid is globally unique (it isn't) (there's nothing else that matches between the two). try-repo is designed to work even on empty repositories.. Use --files perhaps?. I've devised a way to make unstaged changes clonable -- would need to make this more robust and teach try-repo how to do this -- but it seems to work?\ntest.sh\n```bash\n!/usr/bin/env bash\nset -euxo pipefail\nSRC=\"$PWD/1\"\nSHADOW=\"$PWD/2\"\nrm -rf \"${SHADOW}\"\nhead=\"$(git -C \"${SRC}\" rev-parse HEAD)\"\n: show the unstaged differences in the src repository\ngit -C \"${SRC}\" diff\n: make a clone of the current repo\ngit clone --no-checkout \"${SRC}\" ${SHADOW}\n: make a branch so we will have a reachable revision\ngit -C \"${SHADOW}\" checkout \"${head}\" -b _pc_unstaged\n: Add the current files in this repo to the index in the other\nGIT_OBJECT_DIRECTORY=\"${SHADOW}/.git/objects\" \\\n    GIT_INDEX_FILE=\"${SHADOW}/.git/index\" git -C \"${SRC}\" add --all :/\n: Commit to generate a commit\ngit -C \"${SHADOW}\" commit --allow-empty -m 'add unstaged changes'\n: 'success!'\ngit -C \"${SHADOW}\" show\n```\noutput\n```console\n$ ./test.sh \n+ SRC=/tmp/x/1\n+ SHADOW=/tmp/x/2\n+ rm -rf /tmp/x/2\n++ git -C /tmp/x/1 rev-parse HEAD\n+ head=9feaf19fb7f78a4c5b15a447c8906381e04a915c\n+ : show the unstaged differences in the src repository\n+ git -C /tmp/x/1 diff\ndiff --git a/.pre-commit-hooks.yaml b/.pre-commit-hooks.yaml\nindex 2c25126..8d14429 100644\n--- a/.pre-commit-hooks.yaml\n+++ b/.pre-commit-hooks.yaml\n@@ -1,4 +1,4 @@\n -   id: test\n     name: test\n-    entry: echo\n+    entry: echo ohai\n     language: system\n+ : make a clone of the current repo\n+ git clone --no-checkout /tmp/x/1 /tmp/x/2\nCloning into '/tmp/x/2'...\ndone.\n+ : make a branch so we will have a reachable revision\n+ git -C /tmp/x/2 checkout 9feaf19fb7f78a4c5b15a447c8906381e04a915c -b _pc_unstaged\nSwitched to a new branch '_pc_unstaged'\n+ : Add the current files in this repo to the index in the other\n+ GIT_OBJECT_DIRECTORY=/tmp/x/2/.git/objects\n+ GIT_INDEX_FILE=/tmp/x/2/.git/index\n+ git -C /tmp/x/1 add --all :/\n+ : Commit to generate a commit\n+ git -C /tmp/x/2 commit --allow-empty -m 'add unstaged changes'\n[_pc_unstaged 044f5e8] add unstaged changes\n 1 file changed, 1 insertion(+), 1 deletion(-)\n+ : 'success!'\n+ git -C /tmp/x/2 show\ncommit 044f5e8ad48c2dcd7ddd583b72ae8713f50ffe32 (HEAD -> _pc_unstaged)\nAuthor: Anthony Sottile asottile@umich.edu\nDate:   Tue Jan 1 12:48:32 2019 -0800\nadd unstaged changes\n\ndiff --git a/.pre-commit-hooks.yaml b/.pre-commit-hooks.yaml\nindex 2c25126..8d14429 100644\n--- a/.pre-commit-hooks.yaml\n+++ b/.pre-commit-hooks.yaml\n@@ -1,4 +1,4 @@\n -   id: test\n     name: test\n-    entry: echo\n+    entry: echo ohai\n     language: system\n``. @revolter sure!pre-commit run --files $(git ls-files | grep ...)(ok, this isn't really a serious answer -- but it is a functional answer).. I agree they could, but they'd just be confused :) -- this is part of the reason thattry-repo` prints out exactly what config it is about to run.\nI've opened another issue for handling unstaged changes: https://github.com/pre-commit/pre-commit/issues/703. For some value of this, yeah an option would probably be fine. I adjusted my little script above to also use GIT_OBJECT_DIRECTORY which seems to be necessary on newer versions of git than whatever version I used at the time.\n904 is a PR which implements this. This has been released as part of v1.14.0 \ud83c\udf89  -- thanks again!. Ah yes this makes sense based on how the key for a repository is configured.\nIt currently creates one git repository for each (repo, ref) pair and then validates install state inside that cloned repository.  A workaround would be to use a slightly different repository name or ref.\nThere's some recently added code for local repositories that can probably be borrowed here such that different additional_dependencies repositories get their own directories.   Notice that here, the key becomes ('local:sorted,joined,deps', 'N/A') -- perhaps something similar can be done for normal repositories as well!\nAn aside: pylint is a bit of a beast to get working with pre-commit as most of its checks aren't static analysis but dynamic analysis (it needs to be able to import your code to check it).  pylint often works better as a local / system / script hook which takes advantage of the currently activated virtualenv (and then has the ability to import and inspect your code directly).. I do plan to fix this in a better way at some point so I'll keep this issue around -- thanks for pointing it out and I'm glad the workaround works well for you :). Finally getting some time to fix this -- see #711. This has been released as part of v1.7.0!. I actually had the same idea here: https://github.com/pre-commit/pre-commit/issues/149\nMy main (unvoiced I guess, since I just closed the issue without comment) concern with this would be the complexity of allowing two datatypes for exclude (and the subsequent confusion of \"is this a list? is this a string?\") -- so I don't really want to make that a list.  That said, I think I can make a small patch to make this work, which I think is just as readable (though it uses a yaml-specific feature):\nyaml\n-   id: no_httparty\n    exclude: >\n        ^(\n            path_to_some_file_which_has_a_good_reason_to_use_httparty.rb|\n            some_other_file.rb|\n            ...\n        )$\nAs for a pep8 / rubocop -like feature, pre-commit only maintains a subprocess / file interface currently and I don't really want to get into the business of reading every file for performance reasons.  For the most part, if a tool wants line-specific exclusion, the tool itself should implement / document that (you may be able to extend your no_httparty hook to support something like that).\nLet me cook up a branch for enabling multi-line regexes though :). Actually, with a slight modification, this is supported without any new code:\nyaml\n-   id: no_httparty\n    exclude: >\n        (?x)^(\n            path_to_some_file_which_has_a_good_reason_to_use_httparty.rb|\n            some_other_file.rb|\n            ...\n        )$\nThe (?x) bit enables re.X (VERBOSE) mode\nI'll write up some stuff about this in the documentation and (if this is satisfactory to your usecase) close the issue.. Here's the PR where I introduced some new documentation about the discussion here: https://github.com/pre-commit/pre-commit.github.io/pull/125\nhttp://pre-commit.com/#regular-expressions. Verified this also works on macos. @artcyb the documentation for pre-commit can be found at pre-commit.com\nIf you have a particular question not covered by the documentation, feel free to open an issue on the project. I think you'll find that the workflow as described is impossible with our tool (unless you're using --no-verify / SKIP).  pre-commit only runs on the added contents and not on the unstaged changes.  In your small snippet above you'll get a lint error on both commit operations.  (This is one of the places where pre-commit is much much better than other similar tools)\nIf there's a case where that's not happening, I'd be very interested in a more detailed report :). To add a more concrete example:\nHere's a .pre-commit-config.yaml:\nyaml\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    sha: v0.9.2\n    hooks:\n    -   id: flake8\nAnd a shell session in that git repo:\n```console\n$ echo 'import os' > test.py\n$ git add test.py\n$ git commit -m \"Add test\"\nFlake8...................................................................Failed\nhookid: flake8\ntest.py:1:1: F401 'os' imported but unused\n$ # Fix the problem\n$ echo -e 'import os\\n\\nprint(os.getcwd())' > test.py\n$ git commit -m \"Add test\"\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.pre-commit/patch1504397400.\nFlake8...................................................................Failed\nhookid: flake8\ntest.py:1:1: F401 'os' imported but unused\n[INFO] Restored changes from /home/asottile/.pre-commit/patch1504397400.\n$ # Actually adding allows a commit\n$ git add test.py\n$ git commit -m \"Add test\"\nFlake8...................................................................Passed\n[master 25f02e5] Add test\n 1 file changed, 3 insertions(+)\n create mode 100644 test.py\n```. Closing this, if you find that this isn't the case, please attach more information and reopen :). First: thanks for the issue :) \nMy main hesitation is I don't really want to add language specific configuration. \nI think you could simulate the same thing by having a trivial dockerfile with just FROM <image> which would largely get you the same result. Thoughts? . @jsok actually now that I think about this more, I might be able to write a language which makes this work better -- would something like this be useful?\nyaml\n-   id: flake8-docker\n    name: flake8 (via docker)\n    language: docker_image\n    entry: my.registry.example.com/pre-commit-hooks/flake8:latest\n    files: [python]\nA downside would be that it would have to depend on the ENTRYPOINT of the image? so maybe not the best idea?. The docker_image source I'm proposing above melds nicely with local hooks as well which would obviate the need for a separate repository.  I guess my question is: would it satisfy your usecase well enough (before I put in some elbow grease to implement such a thing)?\nUsage in CI is a pretty common situation too -- pre-commit is great at installing things :D (I usually do both CI + git hooks).. Oh yes of course!  I was trying to come up with a way to shimmy in args: [--entrypoint, ...] and didn't even think of the simple possibility of not having an ENTRYPOINT!  clever!\nIt should be pretty easy to implement, I'll see if I can't throw something together :)\nEDIT:\nActually this will probably work too:\nyaml\n    entry: my.docker.host/image-name:latest exe-name\nor even\nyaml\n    entry: --entrypoint exe-name my.docker.host/image-name:latest\nas it'll get splatted into the subprocess call. Here's a PR which attempts to solve this :) https://github.com/pre-commit/pre-commit/pull/598. Documented here: https://github.com/pre-commit/pre-commit.github.io/pull/127\nAvailable in 0.18.0\nLet me know how it works out for you :)  Thanks again for the issue!. I'll follow up with documentation after merging!. This also fixes locking under python2 on windows (OSError -> IOError). Cool, I have some plans to do some larger changes and get to \"v1.0.0\", I think I'll wait to merge this until I'm ready to do that -- maybe a few days.. Thanks for the report!  I should be able to reproduce and fix this pretty easily, let me see if there's a workaround to get you going quicker first :). Ah definitely a bug!  It has to do with our usage of git ls-files and should be easy to fix.\nA workaround is to bypass the bug in --all-files (though not pretty): git ls-files -z | xargs -0 pre-commit run --files\nI'll get a fix out for you asap!. This is fixed in 0.18.2, I'll see what I need to poke to get this into brew :). womp, I don't have access to macos, I think this is the minimum necessary to get this version into brew:\nbrew bump-formula-pr \\\n    --dry-run \\\n    --url=https://github.com/pre-commit/pre-commit/archive/v0.18.2.tar.gz \\\n    --sha256=196b1090a7e3ee80314953298ac636c566e87a014398c48e911d9a4c6599e776 \\\n    pre-commit\n(remove --dry-run if it looks correct). Ah yes the fun python2 \"bug\"\nWhen printing to a non-tty, python2 print() must have ascii-convertible arguments.\nA workaround would be to use language_version: python3, or I could adjust pre-commit-hooks to not use print() and instead write bytes to stdout. I've submitted a patch to homebrew that should prefer python3:\nhttps://github.com/Homebrew/homebrew-core/pull/17712. Looks great!  I haven't changed the hashes in forever and don't think they need to change -- iirc they're only if the calling construct of pre-commit changes.\nCould you add a quick test that demonstrates that this works?  There should be some prior art in tests/commands/install_uninstall_test.py. Oh neat, I was able to add a test to your branch directly.. Thanks for the PR!  This will make it into the next release I have (I have some plans to add a few more things into this one as well). I don't want to invent a meta-language for this -- it'll be confusing, complicated, and doesn't sound like something I want to maintain.\nHere's an idea I've been thinking of:\nAdd a types_or entry, this will be anded with the current types and files entries, but internally will be ored.\nThis wouldn't enable all potential combinations that you could think up (stuff like (js and file) or (python  and symlink) wouldn't be supported) but I think it solves the realistic basic case (file and (js or css or ...)). That adds a level of complexity I don't really want:\n- it's an incompatible schema to what we have today\n- it's not obvious at a glance what it means. > Why would it be incompatible?\nExisting versions of pre-commit would error on list-of-lists\n\nWell, the current files/types/... is already not obvious for everybody, as #706 shows\n\nThey are at least documented and consistent (everything today is AND).  Though #706 was a pretty spectacular series of incorrect assumptions and lack of reading the docs ;). This is mostly ready for review, I need to make migrate-config handle yaml that looks like this:\n```yaml\n\nrepo: ...\n    ...\n```\n\nAnd should probably handle this case better:\ncurrent\ndiff\n+repos:\n # this is a pre-commit config\n -   repo: ...\n     ...\nbetter\ndiff\n # this is a pre-commit config\n+repos:\n -   repo: ...\n     .... Now handles both of those cases!. @Lucas-C no, thank you! :D. Here's the documentation on how pre-commit passes arguments.\nMy shot-in-the-dark guess is that svgo currently doesn't support passing multiple arguments at a time.  It seems there's already an open issue for a similar thing!\nI'd suggest writing a pull request for svgo, if they push back maybe it's finally time for us to implement https://github.com/pre-commit/pre-commit/issues/394. @hectorv I took a stab at a PR, maybe it or something like it will get merged? https://github.com/svg/svgo/pull/786. Looks like the latest version of svgo supports this https://github.com/svg/svgo/commit/e3ddf1d96ab88beb9f496a122dee6ebcb4a0c907. Ah now that there's default things I need to adjust autoupdate to strip them again. I'll revert this and use it : https://github.com/pre-commit/pre-commit/commit/ee392275f308032dc47ec0dea9d19c92b89d5996. This seems like a bad interaction between virtualenv and conda (which I don't believe are designed to work well together -- thanks conda).\nYou may be able to get this to work with VIRTUALENV_ALWAYS_COPY=1 pre-commit run ...?  Unclear.  I'd suggest trying either the official pythons or the brew pythons.\nI myself don't have access to macos or I'd try and reproduce. This seems to be the same issue: https://github.com/ContinuumIO/anaconda-issues/issues/305#issuecomment-285094497\n. you can also conda install pre-commit now thanks to @nicoddemus . I use git-for-windows, I doubt install-local.py will work as it relies on symlinking.  The specific failure you're hitting is where it attempts to call pip.  On windows (for whatever reason) virtualenvs use the Scripts directory instead of bin for executables.\nThe latter seems quite strange!  Let me see if I can reproduce that (it appears to be first-time run with unstaged changes, should reproduce on linux as well):\n$ pre-commit run\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.cache/pre-commit/patch1505686307.\nAn unexpected error has occurred: IOError: [Errno 2] No such file or directory: '/home/asottile/.cache/pre-commit/patch1505686307'\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\nI'll spin that off into another ticket!\nHere's the action items from this:\n\nhttps://github.com/pre-commit/pre-commit.github.io/issues/131\nhttps://github.com/pre-commit/pre-commit/issues/621 \n\nThanks again for the issues! :D. The fix for the bug is now available in v1.1.1!. It was a bug in all platforms, just an edge case that wasn't tested :) . Originally from #620. CC @Lucas-C . Amazing, I must have only used this from git -- patch incoming!. Thanks for the super detailed report!\nThis should be fixed in v1.1.2!. Also a tiny hint on your configuration :)\nYou should be able to use pass_filenames: false and then you don't need bash -c \"...\" as your entrys (I assume you're wrapping in bash to drop the arguments).  this was added in 0.14.0. I fixed this up here: https://github.com/pre-commit/pre-commit/commit/6b81fe9d58731a410564cb58f0fd4d220b7bd288#diff-2eeaed663bd0d25b7e608891384b7298R32\nAs written, it succeeds in making a source distribution, but not a wheel. Thanks for the report! Could you include the full contents of the log file (currently the stack trace doesn't include any of our code so I don't know what to fix!) . Through some guesswork, I've been able to reproduce this.  Here's a full trace:\nAn unexpected error has occurred: ValueError: No closing quotation\nTraceback (most recent call last):\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/error_handler.py\", line 44, in error_handler\n    yield\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/main.py\", line 231, in main\n    return run(runner, args)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 267, in run\n    return _run_hooks(runner.config, repo_hooks, args, environ)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 189, in _run_hooks\n    retval |= _run_single_hook(filenames, hook, repo, args, skips, cols)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 103, in _run_single_hook\n    tuple(filenames) if hook['pass_filenames'] else (),\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/repository.py\", line 198, in run_hook\n    return languages[language_name].run_hook(cmd_runner, hook, file_args)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/languages/system.py\", line 14, in run_hook\n    return xargs(helpers.to_cmd(hook), file_args)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/xargs.py\", line 63, in xargs\n    *run_cmd, encoding=None, retcode=None\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/util.py\", line 174, in cmd_output\n    cmd = parse_shebang.normalize_cmd(cmd)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/parse_shebang.py\", line 68, in normalize_cmd\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/pre_commit/parse_shebang.py\", line 18, in parse_filename\n    return parse_shebang_from_file(filename)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/identify/identify.py\", line 150, in parse_shebang_from_file\n    return parse_shebang(f)\n  File \"/tmp/foo'bar/venv/local/lib/python2.7/site-packages/identify/identify.py\", line 136, in parse_shebang\n    cmd = tuple(shlex.split(first_line))\n  File \"/usr/lib/python2.7/shlex.py\", line 279, in split\n    return list(lex)\n  File \"/usr/lib/python2.7/shlex.py\", line 269, in next\n    token = self.get_token()\n  File \"/usr/lib/python2.7/shlex.py\", line 96, in get_token\n    raw = self.read_token()\n  File \"/usr/lib/python2.7/shlex.py\", line 172, in read_token\n    raise ValueError, \"No closing quotation\"\nValueError: No closing quotation\nIt seems this is a bug in an upstream library, I'm going to close this -- please track the fix in https://github.com/chriskuehl/identify/issues/26. If you upgrade identify to 1.0.6 (usually via pip install identify --upgrade) you should get a fix for this.\nThanks again for the issue!. Actually noticed this while poking around at https://github.com/pre-commit/pre-commit/issues/625. I'm surprised tests don't catch this, but I think something needs to change for autoupdate to work properly with --depth=:\nconsole\n$ # simulates proposed Store.clone\n$ git clone git@github.com:pre-commit/pre-commit --quiet --depth=1\n$ cd pre-commit/\n$ # simulates what pre-commit autoupdate does\n$ git fetch\n$ git describe origin/master --tags --abbrev=0\nfatal: No names found, cannot describe anything.\n$ git describe origin/master --tags --exact\nfatal: No names found, cannot describe anything.\nThough without --depth=1:\nconsole\n$ # simulates existing Store.clone\n$ git clone git@github.com:pre-commit/pre-commit --quiet\n$ cd pre-commit\n$ # simulates what pre-commit autoupdate does\n$ git fetch\n$ git describe origin/master --tags --abbrev=0\nv1.1.2\n$ git describe origin/master --tags --exact\nfatal: no tag exactly matches 'e76bc17f530055b1791384fc2846a6588260a08d'. ah, and this is why it passes:\n$ git clone --depth=1 /tmp/pytest-of-asottile/pytest-3/test_autoupdate_revert_to_tag0/0\nCloning into '0'...\nwarning: --depth is ignored in local clones; use file:// instead.\ndone.. --depth= also seems to fail because the revision is not present (if it isn't the master revision).  From pre-commit's checkout:\n```\n$ pre-commit clean && pre-commit run --all-files\nCleaned /home/asottile/.cache/pre-commit.\nCleaned /home/asottile/.pre-commit.\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.git.\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/bin/git', 'reset', 'v0.9.1', '--hard')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    fatal: ambiguous argument 'v0.9.1': unknown revision or path not in the working tree.\n    Use '--' to separate paths from revisions, like this:\n    'git  [...] -- [...]'\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\n```\n```\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/bin/git', 'reset', 'v0.9.1', '--hard')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    fatal: ambiguous argument 'v0.9.1': unknown revision or path not in the working tree.\n    Use '--' to separate paths from revisions, like this:\n    'git  [...] -- [...]'\nTraceback (most recent call last):\n  File \"/home/asottile/workspace/pre-commit/pre_commit/error_handler.py\", line 44, in error_handler\n    yield\n  File \"/home/asottile/workspace/pre-commit/pre_commit/main.py\", line 231, in main\n    return run(runner, args)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/commands/run.py\", line 250, in run\n    repo_hooks = list(get_repo_hooks(runner))\n  File \"/home/asottile/workspace/pre-commit/pre_commit/commands/run.py\", line 203, in get_repo_hooks\n    for repo in runner.repositories:\n  File \"/home/asottile/workspace/pre-commit/venv-pre_commit/local/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/runner.py\", line 50, in repositories\n    repo.require_installed()\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 185, in require_installed\n    install_all(self._venvs, self.repo_config['repo'], self.store)\n  File \"/home/asottile/workspace/pre-commit/venv-pre_commit/local/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 174, in _venvs\n    for , hook in self.hooks:\n  File \"/home/asottile/workspace/pre-commit/venv-pre_commit/local/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 154, in hooks\n    if hook['id'] not in self.manifest.hooks:\n  File \"/home/asottile/workspace/pre-commit/venv-pre_commit/local/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 149, in manifest\n    return Manifest(self._repo_path, self.repo_config['repo'])\n  File \"/home/asottile/workspace/pre-commit/venv-pre_commit/local/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/repository.py\", line 137, in _repo_path\n    self.repo_config['repo'], self.repo_config['sha'],\n  File \"/home/asottile/workspace/pre-commit/pre_commit/store.py\", line 154, in clone\n    return self._new_repo(repo, ref, clone_strategy)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/store.py\", line 130, in _new_repo\n    make_strategy(directory)\n  File \"/home/asottile/workspace/pre-commit/pre_commit/store.py\", line 148, in clone_strategy\n    cmd_output('git', 'reset', ref, '--hard', env=no_git_env())\n  File \"/home/asottile/workspace/pre-commit/pre_commit/util.py\", line 189, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\nCalledProcessError: Command: ('/usr/bin/git', 'reset', 'v0.9.1', '--hard')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    fatal: ambiguous argument 'v0.9.1': unknown revision or path not in the working tree.\n    Use '--' to separate paths from revisions, like this:\n    'git  [...] -- [...]'\n``.git tag --listdoesn't help -- with a shallow clone *the tags aren't even there*. Please also merge / rebase on master to get the changes from #629 (such that these failures are concretely shown in the test suite) (notably in tests/commands/autoupdate_test.py). I'm more concerned about the initial clone failing than autoupdate, I think autoupdate could be fixed by doing a (slow)fetch --unshallow` or something of the sort.\nI also don't have any good ideas for the initial clone problem. heh\nI want to say I looked into --depth while writing up #28 / #38 but that was a really long time ago and I didn't write any of the research down :(. CC @chriskuehl @Lucas-C . Can you show the steps for creating a virtualenv?  I have a feeling this is another venv vs virtualenv and/or brew vs system python conflict.\nSome useful commands that can help in debugging:\nwhich virtualenv\nwhich python\nhead -1 $(which virtualenv)\nwhich python3. Also perhaps try:\n- The official installers from python.org\n- making venv using virtualenv instead of -mvenv\nas workarounds (fwiw, I've used pre-commit on osx with python3.6 with success). can you try with python3.6 -m virtualenv venv (to create your initial virtualenv) as a workaround?\nUsing venv in pre-commit isn't really an option due to python2 users and hooks.. Yeah I agree, I think in the future moving entirely to -mvenv is probably a good idea.  The usage of python2 needs to drop much more significantly for that to be considered though.. Curious why -mvirtualenv isn't an option?. Fair, I have a bootstrap script that I tend to use. Virtualenv also is chosen for platform compatibility in this project. . Here's a few example outputs:\nWith just a repository listed\n```\n$ pre-commit try-repo git@github.com:pre-commit/pre-commit-hooks --all-files\n[INFO] Initializing environment for git@github.com:pre-commit/pre-commit-hooks.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: git@github.com:pre-commit/pre-commit-hooks\n    sha: 5d08e77ad53064e92ab1d132d678bee3b44439f5\n    hooks:\n    -   id: autopep8-wrapper\n    -   id: check-added-large-files\n    -   id: check-ast\n    -   id: check-byte-order-marker\n    -   id: check-case-conflict\n    -   id: check-docstring-first\n    -   id: check-executables-have-shebangs\n    -   id: check-json\n    -   id: check-merge-conflict\n    -   id: check-symlinks\n    -   id: check-vcs-permalinks\n    -   id: check-xml\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: detect-aws-credentials\n    -   id: detect-private-key\n    -   id: double-quote-string-fixer\n    -   id: end-of-file-fixer\n    -   id: file-contents-sorter\n    -   id: fix-encoding-pragma\n    -   id: flake8\n    -   id: forbid-new-submodules\n    -   id: mixed-line-ending\n    -   id: name-tests-test\n    -   id: no-commit-to-branch\n    -   id: pretty-format-json\n    -   id: pyflakes\n    -   id: requirements-txt-fixer\n    -   id: sort-simple-yaml\n    -   id: trailing-whitespace\n===============================================================================\n[INFO] Installing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nautopep8 wrapper.........................................................Passed\nCheck for added large files..............................................Passed\nCheck python ast.........................................................Passed\nCheck for byte-order marker..............................................Passed\nCheck for case conflicts.................................................Passed\nCheck docstring is first.................................................Passed\nCheck that executables have shebangs.....................................Passed\nCheck JSON...............................................................Passed\nCheck for merge conflicts................................................Passed\nCheck for broken symlinks............................(no files to check)Skipped\nCheck vcs permalinks.....................................................Passed\nCheck Xml............................................(no files to check)Skipped\nCheck Yaml...............................................................Passed\nDebug Statements (Python)................................................Passed\nDetect AWS Credentials...................................................Failed\nhookid: detect-aws-credentials\nNo AWS keys were found in the configured credential files and environment variables.\nPlease ensure you have the correct setting for --credentials-file\nNo AWS keys were found in the configured credential files and environment variables.\nPlease ensure you have the correct setting for --credentials-file\nDetect Private Key.......................................................Passed\nFix double quoted strings................................................Failed\nhookid: double-quote-string-fixer\nFiles were modified by this hook. Additional output:\nFixing strings in tests/prefixed_command_runner_test.py\nFixing strings in pre_commit/color_windows.py\nFix End of Files.........................................................Passed\nFile Contents Sorter.................................(no files to check)Skipped\nFix python encoding pragma...............................................Failed\nhookid: fix-encoding-pragma\nFiles were modified by this hook. Additional output:\nAdded # -*- coding: utf-8 -*- to pre_commit/logging_handler.py\nAdded # -*- coding: utf-8 -*- to testing/util.py\nAdded # -*- coding: utf-8 -*- to pre_commit/resources/empty_template/setup.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/pcre.py\nAdded # -*- coding: utf-8 -*- to pre_commit/main.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/clean.py\nAdded # -*- coding: utf-8 -*- to pre_commit/envcontext.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/helpers.py\nAdded # -*- coding: utf-8 -*- to tests/commands/migrate_config_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/docker.py\nAdded # -*- coding: utf-8 -*- to tests/languages/ruby_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/five.py\nAdded # -*- coding: utf-8 -*- to testing/auto_namedtuple.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/sample_config.py\nAdded # -*- coding: utf-8 -*- to pre_commit/main.py\nAdded # -*- coding: utf-8 -*- to tests/main_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/git.py\nAdded # -*- coding: utf-8 -*- to tests/languages/docker_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/script.py\nAdded # -*- coding: utf-8 -*- to setup.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/migrate_config.py\nAdded # -*- coding: utf-8 -*- to pre_commit/constants.py\nAdded # -*- coding: utf-8 -*- to tests/logging_handler_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/output.py\nAdded # -*- coding: utf-8 -*- to tests/prefixed_command_runner_test.py\nAdded # -*- coding: utf-8 -*- to tests/color_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/xargs.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/golang.py\nAdded # -*- coding: utf-8 -*- to tests/languages/pygrep_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/util.py\nAdded # -*- coding: utf-8 -*- to tests/staged_files_only_test.py\nAdded # -*- coding: utf-8 -*- to tests/runner_test.py\nAdded # -*- coding: utf-8 -*- to testing/resources/arbitrary_bytes_repo/setup.py\nAdded # -*- coding: utf-8 -*- to testing/resources/python3_hooks_repo/python3_hook/main.py\nAdded # -*- coding: utf-8 -*- to pre_commit/staged_files_only.py\nAdded # -*- coding: utf-8 -*- to pre_commit/manifest.py\nAdded # -*- coding: utf-8 -*- to tests/languages/helpers_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/ruby.py\nAdded # -*- coding: utf-8 -*- to pre_commit/make_archives.py\nAdded # -*- coding: utf-8 -*- to tests/commands/sample_config_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/prefixed_command_runner.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/all.py\nAdded # -*- coding: utf-8 -*- to pre_commit/runner.py\nAdded # -*- coding: utf-8 -*- to pre_commit/clientlib.py\nAdded # -*- coding: utf-8 -*- to pre_commit/schema.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/install_uninstall.py\nAdded # -*- coding: utf-8 -*- to pre_commit/repository.py\nAdded # -*- coding: utf-8 -*- to tests/output_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/store.py\nAdded # -*- coding: utf-8 -*- to pre_commit/file_lock.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/pygrep.py\nAdded # -*- coding: utf-8 -*- to tests/commands/try_repo_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/node.py\nAdded # -*- coding: utf-8 -*- to tests/commands/clean_test.py\nAdded # -*- coding: utf-8 -*- to tests/store_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/color_windows.py\nAdded # -*- coding: utf-8 -*- to tests/commands/install_uninstall_test.py\nAdded # -*- coding: utf-8 -*- to testing/resources/python_hooks_repo/setup.py\nAdded # -*- coding: utf-8 -*- to tests/languages/python_test.py\nAdded # -*- coding: utf-8 -*- to tests/manifest_test.py\nAdded # -*- coding: utf-8 -*- to testing/fixtures.py\nAdded # -*- coding: utf-8 -*- to pre_commit/error_handler.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/docker_image.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/system.py\nAdded # -*- coding: utf-8 -*- to pre_commit/color.py\nAdded # -*- coding: utf-8 -*- to tests/clientlib_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/swift.py\nAdded # -*- coding: utf-8 -*- to tests/util_test.py\nAdded # -*- coding: utf-8 -*- to testing/resources/python3_hooks_repo/setup.py\nAdded # -*- coding: utf-8 -*- to tests/commands/run_test.py\nAdded # -*- coding: utf-8 -*- to tests/languages/all_test.py\nAdded # -*- coding: utf-8 -*- to tests/conftest.py\nAdded # -*- coding: utf-8 -*- to tests/schema_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/try_repo.py\nAdded # -*- coding: utf-8 -*- to pre_commit/languages/python.py\nAdded # -*- coding: utf-8 -*- to tests/parse_shebang_test.py\nAdded # -*- coding: utf-8 -*- to tests/repository_test.py\nAdded # -*- coding: utf-8 -*- to testing/resources/python_hooks_repo/foo/main.py\nAdded # -*- coding: utf-8 -*- to tests/make_archives_test.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/autoupdate.py\nAdded # -*- coding: utf-8 -*- to pre_commit/parse_shebang.py\nAdded # -*- coding: utf-8 -*- to pre_commit/commands/run.py\nAdded # -*- coding: utf-8 -*- to tests/commands/autoupdate_test.py\nAdded # -*- coding: utf-8 -*- to tests/xargs_test.py\nAdded # -*- coding: utf-8 -*- to tests/envcontext_test.py\nAdded # -*- coding: utf-8 -*- to tests/languages/golang_test.py\nFlake8...................................................................Passed\nForbid new submodules....................................................Passed\nMixed line ending........................................................Passed\nTests should end in _test.py.............................................Passed\nDon't commit to branch...................................................Passed\nPretty format JSON.......................................................Failed\nhookid: pretty-format-json\nFile testing/resources/node_0_11_8_hooks_repo/package.json is not pretty-formatted\nFile testing/resources/node_hooks_repo/package.json is not pretty-formatted\nFile pre_commit/resources/empty_template/package.json is not pretty-formatted\nPyflakes (DEPRECATED, use flake8)........................................Passed\nFix requirements.txt.....................................................Passed\nSort simple YAML files...............................(no files to check)Skipped\nTrim Trailing Whitespace.................................................Passed\n```\nwith a specific hook listed\n$ pre-commit try-repo git@github.com:pre-commit/pre-commit-hooks check-vcs-permalinks --all-files\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: git@github.com:pre-commit/pre-commit-hooks\n    sha: 5d08e77ad53064e92ab1d132d678bee3b44439f5\n    hooks:\n    -   id: check-vcs-permalinks\n===============================================================================\n[INFO] Initializing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Installing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nCheck vcs permalinks.....................................................Passed\nWith a specific revision listed\n$ pre-commit try-repo --ref v0.7.0 git@github.com:pre-commit/pre-commit-hooks flake8 --all-files\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: git@github.com:pre-commit/pre-commit-hooks\n    sha: v0.7.0\n    hooks:\n    -   id: flake8\n===============================================================================\n[INFO] Initializing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Installing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nFlake8...................................................................Passed. Hi @geekobi, first thanks for the issue!\nI think the specific hook you're referring to is check-yaml which is located here -- I'd suggest opening an issue there!. This is now available in the v1.1.0 release of pre-commit-hooks\nTo use this, upgrade to sha: v1.1.0 and use the following configuration for check-yaml:\nyaml\n    -   id: check-yaml\n        args: [--allow-multiple-documents]\nThanks again for the issue!. my guess looking at that error is you're having connectivity issues with github.  Can you see if git clone git://github.com/pre-commit/pre-commit-hooks is having similar issues?  (If so, it's likely not our code and just your internet connection / git installation). I don't think there's anything actionable from our front here -- if you think otherwise, feel free to reopen!. I've sent a PR which should mitigate this problem.\nIn a really old version of pre-commit the behavior you describe was the case, I want to say it was factored out to simplify the normal case -- when I'm not on my phone I'll look into that more and get back to you. \nThanks for the issue! . Here's the commit which changed this behaviour: 479eb518734f329\nWhich actually was before 0.1.0 was released \ud83d\ude06 .\nLooking at the commit, before it was introduced pre-commit would lazily install repositories right before running the hook.  This caused some tight coupling between the hook installation state (the Store as it's called now in the code) and the respository.  It also had some non-ideal output which would cause execution to look like this:\n$ pre-commit run\nTrim Trailing Whitespace...[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.git.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n..............................................Passed\nFix End of Files.........................................................Passed\nautopep8 wrapper.........................................................Passed\nCheck docstring is first.................................................Passed\nCheck JSON...............................................................Passed\nCheck Yaml...............................................................Passed\nDebug Statements (Python)................................................Passed\nTests should end in _test.py.............................................Passed\nFix requirements.txt.....................................................Passed\nFlake8...................................................................Passed\nValidate Pre-Commit Manifest...[INFO] Initializing environment for https://github.com/pre-commit/pre-commit.git.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n..........................................Passed\nReorder python imports...[INFO] Installing environment for https://github.com/asottile/reorder_python_imports.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n................................................Passed\nAdd trailing commas......................................................Passed\nthe choice was made to decouple these as the general case involved running a majority of the hooks -- this allowed the code to be much simpler (install everything up front) and avoid confusion later on in the stack (is everything installed? do I need to check if I'm installed already?).\nWhile I agree that the behaviour you're describing is possible (compute which subset of the hooks the current run needs, only install those), it's certainly not simple and not the 99% usecase.  Especially when you consider that a repository may have multiple hooks, in different languages, and with different environment directories -- the story becomes much more complicated.\nThe caching option in travis-ci hopefully satisfies the runtime slowness due to this implementation decision so I'm probably going to close this.. The problem is it has to consider different languages and envdirs in order to find the set to install :)\nIf you want to hack on it, the point where repositories are required to be installed is here -- initialized by this. Here's a patch which gets closer, but then there's strange output interleaving:\n```diff\ndiff --git a/pre_commit/commands/run.py b/pre_commit/commands/run.py\nindex 74bff89..4cbc99b 100644\n--- a/pre_commit/commands/run.py\n+++ b/pre_commit/commands/run.py\n@@ -197,12 +197,6 @@ def _run_hooks(config, repo_hooks, args, environ):\n     return retval\n-def get_repo_hooks(runner):\n-    for repo in runner.repositories:\n-        for , hook in repo.hooks:\n-            yield (repo, hook)\n-\n-\n def _has_unmerged_paths():\n     , stdout, _ = cmd_output('git', 'ls-files', '--unmerged')\n     return bool(stdout.strip())\n@@ -245,21 +239,20 @@ def run(runner, args, environ=os.environ):\n         ctx = staged_files_only(runner.store.directory)\n with ctx:\n\n-        repo_hooks = list(get_repo_hooks(runner))\n\nif args.hook:\nrepo_hooks = [\n(repo, hook) for repo, hook in repo_hooks\nif hook['id'] == args.hook\n]\nif not repo_hooks:\noutput.write_line('No hook with id {}'.format(args.hook))\n\nreturn 1\n\n\nFilter hooks for stages\n\nrepo_hooks = [\n(repo, hook) for repo, hook in repo_hooks\nif not hook['stages'] or args.hook_stage in hook['stages']\n]\nrepo_hooks = []\nfor repo in runner.repositories:\nfor _, hook in repo.hooks:\nif (\n(not args.hook or hook['id'] == args.hook) and\nnot hook['stages'] or args.hook_stage in hook['stages']\n):\nrepo_hooks.append((repo, hook))\n+\nif args.hook and not repo_hooks:\noutput.write_line('No hook with id {}'.format(args.hook))\nreturn 1\n+\nfor repo in {repo for repo, _ in repo_hooks}:\n\nrepo.require_installed()\n return _run_hooks(runner.config, repo_hooks, args, environ)\n\ndiff --git a/pre_commit/runner.py b/pre_commit/runner.py\nindex 1983bab..420c62d 100644\n--- a/pre_commit/runner.py\n+++ b/pre_commit/runner.py\n@@ -46,10 +46,7 @@ class Runner(object):\n def repositories(self):\n     \"\"\"Returns a tuple of the configured repositories.\"\"\"\n     repos = self.config['repos']\n-        repos = tuple(Repository.create(x, self.store) for x in repos)\n-        for repo in repos:\n-            repo.require_installed()\n-        return repos\n+        return tuple(Repository.create(x, self.store) for x in repos)\ndef get_hook_path(self, hook_type):\n     return os.path.join(self.git_dir, 'hooks', hook_type)\n```\n\n\n$ pre-commit  clean && pre-commit  run flake8 --all-files\nCleaned /Users/asottile/.cache/pre-commit.\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.git.\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit.git.\n[INFO] Initializing environment for https://github.com/asottile/reorder_python_imports.git.\n[INFO] Initializing environment for https://github.com/asottile/add-trailing-comma.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nFlake8...................................................................Passed\nNote that it still clones the repository in order to check it, so it's still doing some work.. Actually, the interleaving is probably not a big deal, I'll merge that patch. via #639. First: thanks for the PR!  This is awesome!\nSecond: I dropped the ball here a bit on this issue, I actually have a plan for this (that perhaps you could champion?) that helps solve this in a more generic way.  I probably should have communicated my plan in the three issues I hope to tackle in similar ways such that it was more obvious \ud83d\ude06 -- thought I'd get to it before anyone else though (guess I'll do something else this weekend!).\nAnyway, the rough sketch for how I think this should look is as follows (and applies equally to https://github.com/pre-commit/pre-commit/issues/405, https://github.com/pre-commit/pre-commit/issues/582, and https://github.com/pre-commit/pre-commit-hooks/issues/63):\nAdd a new Repository type (similar to repo: local) called meta (name pending, if you've got a better name I'm all ears :D).  Similar to repo: local this would be included in the configuration by a special name and would not require a sha key:\nyaml\nrepos:\n-    repo: meta\n     hooks: ...\nThis meta repo would contain hooks which primarily function on pre-commit itself, I think in the 99% case they would be \"linting\" .pre-commit-config.yaml.  The rationale behind making these a \"first class\" repository type is while they could be implemented as third party hooks, they're really skittering on the edge of private implementation detail (tight coupling) and would probably do better inside pre-commit itself.\npre-commit would grow a package which has some executables for these \"meta\" hooks, probably something like pre_commit.meta_hooks.*.  Each meta hook would define an executable and be able to use tightly coupled implementation detail.\nThe Repository would probably be implemented to have a static manifest defined inline.  Perhaps something like this:\npython\nmanifest = [\n    {\n        'id': 'check-useless-excludes',\n        'name': 'Check for useless excludes',\n        'files': '.pre-commit-config.yaml',\n        'language': 'system',\n        'entry': '{} -m pre_commit.meta_hooks.check_useless_excludes'.format(sys.executable),\n    },\n    # ...\n]\nDoes this make sense?  Then consumers could opt into this as a hard failure.. superseded by #643. This patch reduces installation overhead when running pre-commit run hookid but can create strange output interleaving:\nconsole\n$ pre-commit  clean && pre-commit  run flake8 --all-files\nCleaned /Users/asottile/.cache/pre-commit.\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.git.\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit.git.\n[INFO] Initializing environment for https://github.com/asottile/reorder_python_imports.git.\n[INFO] Initializing environment for https://github.com/asottile/add-trailing-comma.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nFlake8...................................................................Passed. This has been released in 1.4.0!. probably won't merge something like this but I'll keep it in mind if I do some big refactors -- I think this adds some coupling that I'm not terribly interested in maintaining for a feature that I won't use and most won't use.  Good idea though and if there's some clean way to avoid the coupling that accomplishes this I'll definitely incorporate it!  Thanks again for the patch!. since we're not going to merge this as is, I'm going to close this for now -- we may revisit making pre-commit more lazy in this regard in the future :)\nThanks again for the proposed patch!. Thanks for the PR!\nCould you paste a failure mode (just as a comment is fine) such that others can hopefully find this issue as well? Perhaps also a code comment which explains what the Z flag does would be useful as well.\nFrom the docs:\n\nThe Z option tells Docker to label the content with a private unshared label. Only the current container can use a private volume.. Thanks again for the PR!. This has been released in 1.4.0!. I made a helper _hook in #646 that should help the dict-merging + validation in Repositorys easier. I also merged master into your branch to resolve the tiny conflict (and get you the new functionality) -- hope that's ok!. This has been released in 1.4.0!. The intended way to handle this is to specify language_version for each python hook in your repository as documented here\n\npre-commit defaults to making virtualenvs in the same interpreter as it is running, but can make environments for any version of the language.\nI have some pie-in-the-sky ideas to make this work better with a configuration of something like this:\nyaml\ndefault_language_version:\n    python: python2.7\nrepos:\n-   repo: ...\n    ...\nbut I haven't gotten around to implementing this yet.  As of now, the way to do this is to specify it for each hook (for example):\nyaml\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: v0.9.1\n    hooks:\n    -   id: trailing-whitespace\n        language_version: python3.6\n    -   id: autopep8-wrapper\n        language_version: python3.6\n    -   id: debug-statements\n        language_version: python3.6\n    -   id: flake8\n        language_version: python3.6\n\nbut running into issues where pre-commit 0.x.x only works with Python 2 repositories and pre-commit 1.x.x only works with Python 3 repositories.\n\nJust want to make sure this part is clear, this assertion is incorrect -- the interpreter which pre-commit is running in does support running hooks in different language versions.\nThanks for the issue!. Yeah I hope to make it much better in the future, it's on my todo list :D\nthough a lot of this wasn't even possible to implement / think about before the new config format introduced in 1.0. Turns out tox was using an old version of pre-commit: https://github.com/tox-dev/tox/issues/661#issuecomment-339869670. #908 implements this. This has been released as part of v1.14.0 \ud83c\udf89!. It's not required for runtime, just very important for the test suite. Also if you're running git on windows, you're running bash ;) . Can you produce the output of the test as well as which bash and echo $PATH?. - Here's the code which picks the executable -- it currently preferentially chooses which pre-commit over the pre-commit install'd executable\n- why is the wrapper package calling install or install-hooks?\n- the wrapper package also assumes the existence of virtualenv, perhaps vendor a copy of https://asottile.github.io/get-virtualenv.py?\n- just making sure you know about this script. I'm not sure the implications of changing priority, it might just work?  Try reordering the branches in that file and see if the tests pass. \nI don't think it should call install or install hooks, and especially not with --force.\nMaybe we should work on making install-local have more features instead of abusing npm install hooks? . They're side effects that should be explicitly opted into (and have a mnemonic equivalent to opt out (uninstall)), especially as --force can be destructive (removing whatever they already had installed without backup).  It greatly violates product of least surprise for the installation of an npm package to modify .git/hooks/pre-commit and write some stuff to my home directory.. In conclusion, I'm not opposed to having an npm wrapper and I'm not opposed to changing the precedence in .git/hooks/pre-commit. I do think you should consider adding whatever functionality you believe is missing to install-local.py if possible.  I also think that surprising side-effects should be avoided when possible.\nI'm going to close this before the discussion devolves further.. pip (setuptools / wheels) doesn't provide options for writing files outside of the installation directory, and even with that I think that being explicit is much better.\nIf you work in an enterprise environment where modifying the default git templates is an option, you could include the pre-commit hook template there. (or something like echo run pre-commit install && exit 1)\nOne option that I've used with good success is adding pre-commit install to common tasks in the repository such as in tox's tests, in make test, etc. (whatever common entry point you have to \"setting up a development environment\").  Here's an example\nAnother option is to include pre-commit as part of your continuous integration, here's our documentation on this.\nYet another option is to include pre-commit as part of server side hooks (pre-receive, etc.) such that it is enforced server side.. Could you elaborate on what you mean by \"updates to the .yaml file\" -- there's two yaml files in question (.pre-commit-config.yaml (the local configuration) and .pre-commit-hooks.yaml (the remote hooks manifest)).\nOne of pre-commit's design goals is repeatability, it will run exactly what is configured in .pre-commit-config.yaml on disk and is designed to use permanent references to remote repositories.  You can read more about this in the documentation.. pre-commit install is only needed once -- the configuration file is free to change after that :).\nThe hook script that gets installed is relatively small and is mostly intended to hand off the git information to pre-commit such that it can do the smart stuff :).  In the end it ends up being a thin wrapper around pre-commit run which does all the installation and environment management based on the configuration file.. Cheers! Thanks for the issue, feel free to reach out if you have more issues or if there's places where the documentation can be improved. . Hmm!\nThe error it is complaining about (errno 95) appears to be EOPNOTSUPP.\nThe files it is complaining about are all symlinks -- is it possible that you're on a platform which doesn't support symlinks -- is this perhaps docker-for-windows?. Also, it may be a cascading failure -- if you upgrade pre-commit/pre-commit-hooks to a newer version there's fewer symlinks (and no broken ones) -- that might magically fix the problem?\n(courtesy of this change). could you share a Dockerfile perhaps so I can try and poke this?\nFrom googling the exception message I've found someone else with the same trace -- but it's also pre-commit so that isn't helping this situation \ud83d\ude06 . This also seems related: https://github.com/docker-library/python/issues/155. Nice, I have it reproducing with this dockerfile:\n```\nFROM alpine\nRUN apk update && apk add curl git python3\nRUN git clone https://github.com/pre-commit/pre-commit-hooks /pre-commit-hooks\nWORKDIR /pre-commit-hooks\nENV PATH=\"/venv/bin:$PATH\"\nRUN curl https://asottile.github.io/get-virtualenv.py | python3 - /venv && \\\n    pip install pre-commit\nCMD [\"pre-commit\", \"run\", \"--all-files\"]\n```\nAnd output:\n```\n$ docker build -t test . && docker run testSending build context to Docker daemon  2.048kB\nStep 1/7 : FROM alpine\n ---> 37eec16f1872\nStep 2/7 : RUN apk update && apk add curl git python3\n ---> Using cache\n ---> 6949406e9ea3\nStep 3/7 : RUN git clone https://github.com/pre-commit/pre-commit-hooks /pre-commit-hooks\n ---> Using cache\n ---> 71271e0f0542\nStep 4/7 : WORKDIR /pre-commit-hooks\n ---> Using cache\n ---> 83a333b5a457\nStep 5/7 : ENV PATH \"/venv/bin:$PATH\"\n ---> Using cache\n ---> aef6cd420baa\nStep 6/7 : RUN curl https://asottile.github.io/get-virtualenv.py | python3 - /venv &&     pip install pre-commit\n ---> Using cache\n ---> 07990b9c25f0\nStep 7/7 : CMD pre-commit run --all-files\n ---> Using cache\n ---> cbccd5cd7af5\nSuccessfully built cbccd5cd7af5\nSuccessfully tagged test:latest\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/bin/python3', '/root/.cache/pre-commit/repo054dsazs/py_env-python3/bin/pip', 'install', '.')\nReturn code: 2\nExpected return code: 0\nOutput: \n    Processing /root/.cache/pre-commit/repo054dsazs\nErrors: \n    Exception:\n    Traceback (most recent call last):\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/basecommand.py\", line 215, in main\n        status = self.run(options, args)\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/commands/install.py\", line 335, in run\n        wb.build(autobuilding=True)\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/wheel.py\", line 749, in build\n        self.requirement_set.prepare_files(self.finder)\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/req/req_set.py\", line 380, in prepare_files\n        ignore_dependencies=self.ignore_dependencies))\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/req/req_set.py\", line 620, in _prepare_file\n        session=self.session, hashes=hashes)\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/download.py\", line 809, in unpack_url\n        unpack_file_url(link, location, download_dir, hashes=hashes)\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/site-packages/pip/download.py\", line 686, in unpack_file_url\n        shutil.copytree(link_path, location, symlinks=True)\n      File \"/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/shutil.py\", line 359, in copytree\n        raise Error(errors)\n    shutil.Error: [('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/bisect.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/bisect.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/bisect.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/io.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/io.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/io.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/base64.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/base64.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/base64.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/tempfile.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/tempfile.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/tempfile.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/_bootlocale.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_bootlocale.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_bootlocale.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/importlib', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/importlib', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/importlib'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/copy.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/copy.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/copy.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/warnings.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/warnings.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/warnings.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/future.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/future.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/future.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/tokenize.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/tokenize.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/tokenize.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/genericpath.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/genericpath.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/genericpath.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/reprlib.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/reprlib.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/reprlib.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/fnmatch.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/fnmatch.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/fnmatch.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/sre_constants.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/sre_constants.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/sre_constants.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/collections', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/collections', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/collections'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/hashlib.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/hashlib.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/hashlib.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/heapq.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/heapq.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/heapq.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/distutils', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/distutils', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/distutils'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/encodings', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/encodings', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/encodings'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/random.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/random.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/random.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/copyreg.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/copyreg.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/copyreg.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/weakref.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/weakref.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/weakref.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/sre_parse.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/sre_parse.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/sre_parse.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/imp.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/imp.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/imp.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/codecs.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/codecs.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/codecs.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/operator.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/operator.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/operator.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/os.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/os.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/os.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/keyword.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/keyword.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/keyword.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/_weakrefset.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_weakrefset.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_weakrefset.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/posixpath.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/posixpath.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/posixpath.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/hmac.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/hmac.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/hmac.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/functools.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/functools.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/functools.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/shutil.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/shutil.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/shutil.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/abc.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/abc.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/abc.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/pycache', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/pycache', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/pycache'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/stat.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/stat.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/stat.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/token.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/token.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/token.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/rlcompleter.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/rlcompleter.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/rlcompleter.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/ntpath.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/ntpath.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/ntpath.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/sre_compile.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/sre_compile.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/sre_compile.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/config-3.6m-x86_64-linux-gnu', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/config-3.6m-x86_64-linux-gnu', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/config-3.6m-x86_64-linux-gnu'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/_dummy_thread.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_dummy_thread.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_dummy_thread.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/struct.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/struct.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/struct.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/types.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/types.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/types.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/tarfile.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/tarfile.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/tarfile.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/re.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/re.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/re.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/locale.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/locale.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/locale.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/_collections_abc.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_collections_abc.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/_collections_abc.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/linecache.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/linecache.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/linecache.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/lib-dynload', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/lib-dynload', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/lib-dynload'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/lib/python3.6/enum.py', '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/enum.py', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/lib/python3.6/enum.py'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/bin/python', '/tmp/pip-6y6bwd6i-build/py_env-python3/bin/python', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/bin/python'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/bin/python3.6', '/tmp/pip-6y6bwd6i-build/py_env-python3/bin/python3.6', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/bin/python3.6'\"), ('/root/.cache/pre-commit/repo054dsazs/py_env-python3/include/python3.6m', '/tmp/pip-6y6bwd6i-build/py_env-python3/include/python3.6m', \"[Errno 95] Not supported: '/tmp/pip-6y6bwd6i-build/py_env-python3/include/python3.6m'\")]\nCheck the log at /root/.cache/pre-commit/pre-commit.log\n```. I've simplified it to a reproduction without pre-commit:\n```dockerfile\nFROM alpine\nRUN apk update && apk add curl python3\nWORKDIR /repo\nRUN echo 'from setuptools import setup; setup(name=\"hi\")' > setup.py\nENV PATH=\"/repo/venv/bin:$PATH\"\nRUN curl https://asottile.github.io/get-virtualenv.py | python3 - venv\nCMD [\"pip\", \"install\", \".\"]\n```\nThis writes a tiny setup.py into a directory, makes a virtualenv in that directory, and tries to run pip install .\nThe failure is similar to above:\n$ docker build -t test . && docker run testSending build context to Docker daemon  2.048kB\nStep 1/7 : FROM alpine\n ---> 37eec16f1872\nStep 2/7 : RUN apk update && apk add curl python3\n ---> Using cache\n ---> de031ee44531\nStep 3/7 : WORKDIR /repo\n ---> Using cache\n ---> 7e75d0e23b22\nStep 4/7 : RUN echo 'from setuptools import setup; setup(name=\"hi\")' > setup.py\n ---> Using cache\n ---> 70f3ea1dea8b\nStep 5/7 : ENV PATH \"/repo/venv/bin:$PATH\"\n ---> Using cache\n ---> 3b29357cfa4c\nStep 6/7 : RUN curl https://asottile.github.io/get-virtualenv.py | python3 - venv\n ---> Using cache\n ---> d355d53c6fca\nStep 7/7 : CMD pip install .\n ---> Using cache\n ---> 000e65a11ece\nSuccessfully built 000e65a11ece\nSuccessfully tagged test:latest\nProcessing /repo\nException:\nTraceback (most recent call last):\n  File \"/repo/venv/lib/python3.6/site-packages/pip/basecommand.py\", line 215, in main\n    status = self.run(options, args)\n  File \"/repo/venv/lib/python3.6/site-packages/pip/commands/install.py\", line 335, in run\n    wb.build(autobuilding=True)\n  File \"/repo/venv/lib/python3.6/site-packages/pip/wheel.py\", line 749, in build\n    self.requirement_set.prepare_files(self.finder)\n  File \"/repo/venv/lib/python3.6/site-packages/pip/req/req_set.py\", line 380, in prepare_files\n    ignore_dependencies=self.ignore_dependencies))\n  File \"/repo/venv/lib/python3.6/site-packages/pip/req/req_set.py\", line 620, in _prepare_file\n    session=self.session, hashes=hashes)\n  File \"/repo/venv/lib/python3.6/site-packages/pip/download.py\", line 809, in unpack_url\n    unpack_file_url(link, location, download_dir, hashes=hashes)\n  File \"/repo/venv/lib/python3.6/site-packages/pip/download.py\", line 686, in unpack_file_url\n    shutil.copytree(link_path, location, symlinks=True)\n  File \"/repo/venv/lib/python3.6/shutil.py\", line 359, in copytree\n    raise Error(errors)\nshutil.Error: [('/repo/venv/lib/python3.6/bisect.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/bisect.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/bisect.py'\"), ('/repo/venv/lib/python3.6/io.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/io.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/io.py'\"), ('/repo/venv/lib/python3.6/base64.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/base64.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/base64.py'\"), ('/repo/venv/lib/python3.6/tempfile.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/tempfile.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/tempfile.py'\"), ('/repo/venv/lib/python3.6/_bootlocale.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_bootlocale.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_bootlocale.py'\"), ('/repo/venv/lib/python3.6/importlib', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/importlib', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/importlib'\"), ('/repo/venv/lib/python3.6/copy.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/copy.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/copy.py'\"), ('/repo/venv/lib/python3.6/warnings.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/warnings.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/warnings.py'\"), ('/repo/venv/lib/python3.6/__future__.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/__future__.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/__future__.py'\"), ('/repo/venv/lib/python3.6/tokenize.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/tokenize.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/tokenize.py'\"), ('/repo/venv/lib/python3.6/genericpath.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/genericpath.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/genericpath.py'\"), ('/repo/venv/lib/python3.6/reprlib.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/reprlib.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/reprlib.py'\"), ('/repo/venv/lib/python3.6/fnmatch.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/fnmatch.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/fnmatch.py'\"), ('/repo/venv/lib/python3.6/sre_constants.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/sre_constants.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/sre_constants.py'\"), ('/repo/venv/lib/python3.6/collections', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/collections', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/collections'\"), ('/repo/venv/lib/python3.6/hashlib.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/hashlib.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/hashlib.py'\"), ('/repo/venv/lib/python3.6/heapq.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/heapq.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/heapq.py'\"), ('/repo/venv/lib/python3.6/encodings', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/encodings', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/encodings'\"), ('/repo/venv/lib/python3.6/random.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/random.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/random.py'\"), ('/repo/venv/lib/python3.6/copyreg.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/copyreg.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/copyreg.py'\"), ('/repo/venv/lib/python3.6/weakref.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/weakref.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/weakref.py'\"), ('/repo/venv/lib/python3.6/sre_parse.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/sre_parse.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/sre_parse.py'\"), ('/repo/venv/lib/python3.6/imp.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/imp.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/imp.py'\"), ('/repo/venv/lib/python3.6/codecs.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/codecs.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/codecs.py'\"), ('/repo/venv/lib/python3.6/operator.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/operator.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/operator.py'\"), ('/repo/venv/lib/python3.6/os.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/os.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/os.py'\"), ('/repo/venv/lib/python3.6/keyword.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/keyword.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/keyword.py'\"), ('/repo/venv/lib/python3.6/_weakrefset.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_weakrefset.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_weakrefset.py'\"), ('/repo/venv/lib/python3.6/posixpath.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/posixpath.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/posixpath.py'\"), ('/repo/venv/lib/python3.6/hmac.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/hmac.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/hmac.py'\"), ('/repo/venv/lib/python3.6/functools.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/functools.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/functools.py'\"), ('/repo/venv/lib/python3.6/shutil.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/shutil.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/shutil.py'\"), ('/repo/venv/lib/python3.6/abc.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/abc.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/abc.py'\"), ('/repo/venv/lib/python3.6/stat.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/stat.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/stat.py'\"), ('/repo/venv/lib/python3.6/token.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/token.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/token.py'\"), ('/repo/venv/lib/python3.6/rlcompleter.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/rlcompleter.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/rlcompleter.py'\"), ('/repo/venv/lib/python3.6/ntpath.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/ntpath.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/ntpath.py'\"), ('/repo/venv/lib/python3.6/sre_compile.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/sre_compile.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/sre_compile.py'\"), ('/repo/venv/lib/python3.6/config-3.6m-x86_64-linux-gnu', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/config-3.6m-x86_64-linux-gnu', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/config-3.6m-x86_64-linux-gnu'\"), ('/repo/venv/lib/python3.6/_dummy_thread.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_dummy_thread.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_dummy_thread.py'\"), ('/repo/venv/lib/python3.6/struct.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/struct.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/struct.py'\"), ('/repo/venv/lib/python3.6/types.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/types.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/types.py'\"), ('/repo/venv/lib/python3.6/tarfile.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/tarfile.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/tarfile.py'\"), ('/repo/venv/lib/python3.6/re.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/re.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/re.py'\"), ('/repo/venv/lib/python3.6/locale.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/locale.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/locale.py'\"), ('/repo/venv/lib/python3.6/_collections_abc.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_collections_abc.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/_collections_abc.py'\"), ('/repo/venv/lib/python3.6/linecache.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/linecache.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/linecache.py'\"), ('/repo/venv/lib/python3.6/lib-dynload', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/lib-dynload', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/lib-dynload'\"), ('/repo/venv/lib/python3.6/enum.py', '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/enum.py', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/lib/python3.6/enum.py'\"), ('/repo/venv/bin/python', '/tmp/pip-qrntcn0f-build/venv/bin/python', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/bin/python'\"), ('/repo/venv/bin/python3.6', '/tmp/pip-qrntcn0f-build/venv/bin/python3.6', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/bin/python3.6'\"), ('/repo/venv/include/python3.6m', '/tmp/pip-qrntcn0f-build/venv/include/python3.6m', \"[Errno 95] Not supported: '/tmp/pip-qrntcn0f-build/venv/include/python3.6m'\")]. I've now reduced it to not need virtualenv:\n```dockerfile\nFROM alpine\nRUN apk update && apk add curl python3\nRUN mkdir foo && ln -s /dev/null foo/bar\nCMD [ \\\n    \"python3\", \"-c\", \\\n    \"import shutil; shutil.copytree('foo', 'bar', symlinks=True)\" \\\n]\n```\nOutput:\n$ docker build -t test . && docker run testSending build context to Docker daemon  2.048kB\nStep 1/4 : FROM alpine\n ---> 37eec16f1872\nStep 2/4 : RUN apk update && apk add python3\n ---> Using cache\n ---> b2b811d2836f\nStep 3/4 : RUN mkdir foo && ln -s /dev/null foo/bar\n ---> Using cache\n ---> 69eec1113fdc\nStep 4/4 : CMD python3 -c import shutil; shutil.copytree('foo', 'bar', symlinks=True)\n ---> Using cache\n ---> 2dea84d3a99f\nSuccessfully built 2dea84d3a99f\nSuccessfully tagged test:latest\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.6/shutil.py\", line 359, in copytree\n    raise Error(errors)\nshutil.Error: [('foo/bar', 'bar/bar', \"[Errno 95] Not supported: 'bar/bar'\")]. Seems to be rooted in the chmod implementation of python:\n/ # ln -sf /dev/null baz\n/ # chmod 777 baz\n/ # python3 -c 'import os; os.chmod(\"baz\", 0o777, follow_symlinks=False)'\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\nOSError: [Errno 95] Not supported: 'baz'\nHere's the difference in strace:\n/ # strace python3 -c 'import os; os.chmod(\"baz\", 0o777, follow_symlinks=False)'\n 2>&1 | grep baz\nexecve(\"/usr/bin/python3\", [\"python3\", \"-c\", \"import os; os.chmod(\\\"baz\\\", 0o777\"...], [/* 6 vars */]) = 0\nnewfstatat(AT_FDCWD, \"baz\", {st_mode=S_IFLNK|0777, st_size=9, ...}, AT_SYMLINK_NOFOLLOW) = 0\nOSError: [Errno 95] Not supported: 'baz'\n/ # strace chmod 777 baz 2>&1 | grep baz\nexecve(\"/bin/chmod\", [\"chmod\", \"777\", \"baz\"], [/* 6 vars */]) = 0\nlstat(\"baz\", {st_mode=S_IFLNK|0777, st_size=9, ...}) = 0\nstat(\"baz\", {st_mode=S_IFCHR|0777, st_rdev=makedev(1, 3), ...}) = 0\nchmod(\"baz\", 0777)                      = 0. Outside of docker (ubuntu), I receive an error that the platform doesn't even support follow_symlinks:\n```\n$ python3.6 -c 'import os; os.chmod(\"baz\", 0o777, follow_symlinks=False)'\nNotImplementedError: chmod: follow_symlinks unavailable on this platform\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"\", line 1, in \nSystemError:  returned a result with an error set\n```. This seems to be the difference in how they get configured:\n```\n/ # grep -E '(HAVE_FCHMODAT|HAVE_LCHMOD)' /usr/include/python3.6m/pyconfig.h \ndefine HAVE_FCHMODAT 1\ndefine HAVE_LCHMOD 1\n```\nvs ubuntu:\n```\n$ grep -E '(HAVE_FCHMODAT|HAVE_LCHMOD)' /usr/include/x86_64-linux-gnu/python3.6m/pyconfig.h\ndefine HAVE_FCHMODAT 1\n/ #undef HAVE_LCHMOD /\n```. I've created a python bug for this: https://bugs.python.org/issue31940\nI've also created an alpine bug for this: https://bugs.alpinelinux.org/issues/8103. Here's a patch to cpython: https://github.com/python/cpython/pull/4267. Going to close this as it's a problem with cpython on alpine itself.  This is good documentation for googling of the error message -- hopefully my patch is accepted upstream :). @hectorv I've been trying to get the python devs to review my change without luck: https://github.com/python/cpython/pull/4783. Done! Note that a fix was merged in 3.7.1 if you're able to upgrade. since revisions are pinned on a repository level, perhaps a repository would be a better level to work against?\nYou could do based on a hook-id, but this would have the side-effect of upgrading all hooks in the same repository. But yeah, sounds like a good idea to me, perhaps something like this:\npre-commit autoupdate --repo https://github.com/pre-commit/pre-commit. via #657. This has been released in 1.4.0!. This has been released as part of v1.7.0!. If it's easy to add and adds a clear benefit I'd be open to adding it, if you'd like to get started on trying something like this the docs are hosted here\nNote that we already had a discussion about search and decided it probably wasn't worth it because the docs are one page\nI'm going to close this issue, please open one on the documentation project for consideration: https://github.com/pre-commit/pre-commit.github.io\nThanks for the issue!. heh, want to fix it?. this was released in 1.4.1. One way would be to use the new global exclude combined with a negative lookahead\nyaml\nexclude: '^(?!API/)'. @awebdeveloper does this solution work for you?. Currently not really, there can be multiple configuration files but only one can be hooked up to run on commit.  A similar discussion took place here for a reasonable workaround: https://github.com/pre-commit/pre-commit/issues/466. This has been released as part of v1.7.0!. I've seen this error before from a poorly compiled git -- from what I can tell there's two different git installations involved here, one in /usr/local and the other in /Applications/SmartGit.app/Contents/Resources.  From what I remember, this is due to a version mismatch between the two?  Let me see if I can track down where I hit the same thing\n. A few other things that seem to hit similar problems -- maybe a fix for SmartGit is needed?\n\nhttps://github.com/ForkIssues/Tracker/issues/67\nhttps://github.com/frej/fast-export/pull/73\nhttps://www.spinics.net/lists/git/msg291626.html (this is the most identical to this issue). you know what, I bet this is a bad interaction between SmartGit and brew\n\nbrew installs a symlink to /usr/local/bin/git, which smartgit is (maybe?) interpreting as having a prefix of /usr/local and then expecting the rest of the git toolset to live there? and maybe it should be using git --exec-path to call the rest of the executables -- hard to know without seeing the source.. This to me really looks like a problem with the setup of SmartGit's bundling of git.\nI'd try and make a small reproducible testcase and report it to their issue tracker (?) -- it seems to be closed source.. Sounds great, will do :). I have confirmed that this is indeed the problem:\nasottile@Macbook-Pro:/private/var/folders/7x/97jnmnt13sl46bx2mc9chzpm0000gn/T/AppTranslocation/E271C7D6-EE94-4454-BE6B-3312DF6FC51D/d/SmartGit.app$ ./Contents/Resources/git/bin/git --exec-path\n/usr/local/git/libexec/git-core\nIt should be reporting (in my case) /private/var/folders/7x/97jnmnt13sl46bx2mc9chzpm0000gn/T/AppTranslocation/E271C7D6-EE94-4454-BE6B-3312DF6FC51D/d/SmartGit.app/Contents/Resources/git. @mstrap edited! Posted in a rush :D. That's correct for brew-installed git, but when SmartGit makes commits it uses its vendored git binary which is misconfigured.. I don't think any copying of system git is happening here, git's exec prefix is set at compile time, relocating the executable will make that compiled-in value incorrect.  From some inspection, the build process for SmartGit builds git with --prefix=/usr/local/git -- I'm not sure git has a good story for moving the binaries to a different location than they were configured with -- does exporting GIT_EXEC_PATH from SmartGit's side work?  If so that's probably a good compromise.. That'll likely break the git at /usr/local/bin/git (the one that's actually on your shell's path), SmartGit should be exporting that when it runs it's git which has a baked-in exec prefix at a different path.\nAlternatively, SmartGit should either:\n- pick a well-known location and build + install git in that directory -- though I know nothing about how packaging on osx works.\n- depend on an externally installed git (either through brew / xcode binutils) -- these are likely to be compiled with the correct prefix. What if you set /usr/local/bin/git as the git executable, does the failure output change?. Ooh that looks like a different trace now so a proper workaround for the SmartGit issue -- let me see if I can reproduce the same thing.  Can you provide brew list? (assuming you're using pre-commit from brew). Just to confirm, can you run pre-commit clean and try that again?  This error should be unreachable from what I understand (unless the commit was forcibly killed in some way). ok I can reproduce that now too, I added some debugging information to .git/hooks/pre-commit to see what was happening:\necho \"=================\"\nset -x\n: \"USER=$USER\"\n: \"PATH=$PATH\"\nset +x\necho \"=================\"\n...\n~/workspace/pyexample2> git add --force -- WORKSHOP.md\n~/workspace/pyexample2> git commit --file=/var/folders/7x/97jnmnt13sl46bx2mc9chzpm0000gn/T/smartgit-5453585049771415215tmp/commit-1803978370861371285.tmp -o -- WORKSHOP.md\n=================\n+ : USER=asottile\n+ : PATH=/Library/Developer/CommandLineTools/usr/libexec/git-core:/private/var/folders/7x/97jnmnt13sl46bx2mc9chzpm0000gn/T/AppTranslocation/9148D7E1-4EDE-4A58-84F6-69E930D38B91/d/SmartGit.app/Contents/Resources:/usr/bin:/bin:/usr/sbin:/sbin\n+ set +x\n=================\nSeems the PATH is incorrect, missing /usr/local/bin\nwhen I manually add /usr/local/bin to the path export PATH=/usr/local/bin:$PATH it works as I expect -- wonder why SmartGit is removing /usr/local/bin (a standard entry in PATH)\nThe root of that problem seems to be virtualenv misbehaves when PATH is limited:\n$ PATH=/usr $(readlink -f ~/opt/venv/bin/python) -m virtualenv venv\n...\n  File \"/Users/asottile/opt/venv/bin/../lib/python3.6/os.py\", line 220, in makedirs\n    mkdir(name, mode)\nFileExistsError: [Errno 17] File exists: '/Users/asottile/workspace/pyexample2/venv/lib/python3.6/config-3.6m-darwin'\nIn conclusion a fix from SmartGit probably involves:\n- export GIT_EXEC_PATH=path/to/their/bundled/git\n- export PATH=path/to/their/bundled/git:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin. @mstrap /usr/local/bin should be part of the PATH independent of rcfiles:\n$ env -i /bin/bash --noprofile --norc -c 'echo $PATH'\n/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:.\nIt's part of the standard FHS hierarchy:\n```\n$ man hier | grep usr/local/bin -C1\n   /usr/local/bin\n          Binaries for programs local to the site.\n\n``. @mstrap on osx if an application is launched using the launcher, it does not have all of the standard paths (notably it is missing those in/usr/local). I did not, personally I have no intention of using SmartGit or even macos. > Shouldn't this work withoutlaunchctl` configurations?\nI certainly think it should.  If SmartGit is a thin wrapper around git, it should probably be running git (a cli tool) in an environment that a cli tool would normally be run in (with /usr/local/bin on the PATH). They likely have the same exact bug -- it's an easy footgun when writing macos applications. At a minimum, I'd expect all of the various FHS bin dirs to be on the path -- that is, modify PATH when it is missing any of /usr/local/bin, /usr/local/sbin, /usr/bin, /usr/sbin, /bin, /sbin.. For the libexec-dynload issue, I believe that to be a problem with how brew is set up -- I've opened an issue with some detailed analysis here: https://github.com/Homebrew/homebrew-core/issues/21386. libexec-dynload problem has been fixed in homebrew!. It should work now independent of PATH though the git exec prefix still needs to be correct. Going to close this, one of the core issues was solved via brew and the other via properly setting the git executable.\nThanks again for the issue!  Glad we could make the brew integration better as well :). It seems that despite git revert makes a commit, it does not trigger any hooks:\n(venv) asottile@asottile-VirtualBox:/tmp/pre-commit$ git commit -m \"this is a mistake\"\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nautopep8 wrapper.....................................(no files to check)Skipped\nCheck docstring is first.............................(no files to check)Skipped\nCheck JSON...........................................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)............................(no files to check)Skipped\nTests should end in _test.py.........................(no files to check)Skipped\nFix requirements.txt.....................................................Passed\nFlake8...............................................(no files to check)Skipped\nValidate Pre-Commit Manifest.........................(no files to check)Skipped\nReorder python imports...............................(no files to check)Skipped\nAdd trailing commas..................................(no files to check)Skipped\nCheck hooks apply to the repository..................(no files to check)Skipped\nCheck for useless excludes...........................(no files to check)Skipped\n[master 49bd1e0] this is a mistake\n 1 file changed, 1 insertion(+)\n(venv) asottile@asottile-VirtualBox:/tmp/pre-commit$ git revert HEAD\n[master 059efff] Revert \"this is a mistake\"\n 1 file changed, 1 deletion(-)\nimo, it's not super important to run hooks on a straight revert -- usually the goal of a revert is to get rid of a bad change as quick as possible.\nIf you wanted to run hooks in a \"revert\" situation, you could do it like this:\n$ git revert --no-commit HEAD && git commit --no-edit\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nautopep8 wrapper.....................................(no files to check)Skipped\nCheck docstring is first.............................(no files to check)Skipped\nCheck JSON...........................................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)............................(no files to check)Skipped\nTests should end in _test.py.........................(no files to check)Skipped\nFix requirements.txt.....................................................Passed\nFlake8...............................................(no files to check)Skipped\nValidate Pre-Commit Manifest.........................(no files to check)Skipped\nReorder python imports...............................(no files to check)Skipped\nAdd trailing commas..................................(no files to check)Skipped\nCheck hooks apply to the repository..................(no files to check)Skipped\nCheck for useless excludes...........................(no files to check)Skipped\n[master 7a2c914] Revert \"Revert \"this is a mistake\"\"\n 1 file changed, 1 insertion(+)\nNote that --no-commit sets the default commit message and then --no-edit will use that default message.  It equates to the same thing as git revert HEAD, but it runs the hooks.. It may be useful to suggest this to git since that's what is not triggering any hooks :) . This does actually seem like something that should be improved, I'll keep my thoughts here so it's not entirely linked to a specific PR.\npre-commit at the core is a developer tool, it's aim is to help developers eliminate quick mistakes and help them, not get in the way.  When used as a pre-commit/pre-push hook its goal isn't to be the last line of defense (there are easy ways to bypass its checks, both with SKIP=... and with (dreaded) --no-verify).  If you want pre-commit to be a last line of defense, it makes more sense to set it up either as a pre-receive hook or in CI.\nBecause of this, we can probably cut some corners on pre-push to bring the filenames down to a more reasonable count for the cases listed above.  Here's some of my thoughts on this (again, only talking about the fallback case where it's currently defaulting to the entire history):\n\nWe can't assume origin names or upstream branch names (this means origin/master is out)\nWe could use upstream branch\nupstream can be missing: fall back to slow\nupstream could be the same branch name: probably ok? it would compare the changed against the same branch itself\nupstream could be a non-master branch: this is probably fine too, it's a pretty common workflow to branch off a non-master branch and a good comparison for what is being pushed is just the difference between the current commits and that\nupstream is based on master: I think there's no qualms from me about comparing against origin/master\n\n\n\nIn conclusion, yeah let's do something about this!  I see this as being very similar to the current optimizations done for pre-commit during merge conflicts. Some changes to this landed in 1.5.1 -- maybe they have improved this situation?  See #692 . Reading the code, I think this is fixed by the changes in 1.5.1 -- if you find otherwise, please reopen!\nThanks again for the issue @orenmazor and for the debugging + review @perobertson!. This ended up getting resolved in another way -- see this comment: https://github.com/pre-commit/pre-commit/issues/666#issuecomment-362871479. Interesting that it is a race -- do you have some sort of aggressive temporary file cleanup procedure?  I'd be surprised if any pip install commands work in that case.. Oh actually your pasted trace confirms that all pip installs on your machine are subject to this race (the one you pasted doens't actually involve pre-commit at all!). Or maybe you're out of disk space so the OS is cleaning it up?\nEither way, now that we can see above that it's not even getting to the part where pre-commit is running that it's unrelated to this project. Closing this given there's a failure that doesn't actually involve this project.  Guess we're back to the tox-dev/tox thread :). via https://github.com/Homebrew/homebrew-core/pull/21443. First off, thanks for the issue :)\nFrom what I can tell, the source you're trying to lint isn't available inside the container -- you'd need to mount it:\nbash\nfunction pc {\n  docker run --rm -it \\\n  --cap-drop all \\\n  --volume \"$PWD:/src:rw\" \\\n  --workdir /src \\\n  pre-commit $@\n}\nIn a way, this is almost exactly how pre-commit's built in docker support works\nDocker containers are isolated filesystems, you can't really access things outside the container without explicitly mounting them in -- kind of the point of containerization really :). @gganeshan just checking in again :)  does this make sense to you?. Afaict that container doesn't have access to your local directories either, try (for example) docker run ...  s3 cp s3://some/path some/local/path. This will work if you mount the code (as any docker container would need to work against source outside the container).  Since I don't think there's anything actionable from our front I'm going to close this.\nThanks again for the issue! :D. Instead let's just whitelist GIT_SSH in no_git_env, making a configuration for this seems over complicated.. I'm investigating the travis-ci failures -- seems again related to https://github.com/travis-ci/travis-ci/issues/8363, it's crashing on the workaround put in place to get around that.. Looks great! can you rebase on master so the tests will pass -- sorry about the travis-ci hiccup :S. Thanks again!  I'll cut a release for this shortly!. This is released as part of 1.4.2\nThanks again for the PR \ud83c\udf89 . oh right, windows :/\nI'll have to rethink version discovery to make that work.  Perhaps looking into the clever py launcher stuff that tox does.. This should also improve interpreter detection for @gaborbernat. Hmm! Do you have steps to reproduce the deadlock?\nFrom the paths I assume you're on macos? . That's OK, thanks for the information nonetheless! . The reason for it to not work is pre-commit is not a shell.  Should entry: foo {1,2,3} work?  Should repo: ${MY_WORKSPACE}/hooks work?  No, and no.  Just trying to keep it simple, especially when it works just fine to specify the whole path or use try-repo.\nI don't think you'd distribute a repository with a repo pointing at a local checkout either (and I'd like to discourage it if possible).  This would require extra set up by the end user which would potentially reflect poorly on the tool itself (it is after all supposed to be the thing that bootstraps all of this stuff for you!).\nThe fact that pre-commit supports local paths at all is a bit of an accident of implementation -- it's incredibly useful for testing repositories but I really don't think it has a strong use case for being checked in that way and used as a long term workflow.. Cheers!  Thanks again for the PR (and thanks for the other PR as well!), even though it doesn't make sense for now.. One option that might help today (without any changes) -- there's a --show-diff-on-failure option to pre-commit run.  One example usage of that is in tox's invocation for CI\nIdeally, isort should produce some sort of output when it modifies things, the best case scenario I can see from this issue is someone (we?) contribute back some fixes to isort itself to improve the situation there.\nHere's the original PR which added this btw: #305. (also (shameless plug) you may find reorder_python_imports to have more pre-commit friendly output -- though it has different configuration (and way fewer options (intentionally?)) than isort)\n  . Cool, if you want any help working on isort I've poked their codebase a few times and might be able to help with a PR :). Seems back now, github.com had an outage. Thanks for the issue!\nAh this is probably because these hooks also use types and have types: [python].  types and files are an AND operation (that is, files: \\.eb$ will only further filter the files matched by types: [python]).\nIn this case, you'll want to override the base types back to all files and then filter to files matching .eb -- something like this:\nyaml\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    sha: v1.1.1\n    hooks:\n      - id: autopep8-wrapper\n        types: [file]\n        files: \\.eb$\n      - id: check-ast\n        types: [file]\n        files: \\.eb$\n      # you'll probably also want to lint python files as well\n      - id: autopep8-wrapper\n      - id: check-ast\npre-commit allows you to specify multiple configurations of the same hook.  If you want to differentiate them you can even override name:\nyaml\n      - id: autopep8-wrapper\n        name: 'autopep8-wrapper (.eb)'\n        types: [file]\n        files: \\.eb$\n      - id: autopep8-wrapper\nYou'll get something like this:\nautopep8 wrapper (.eb)......................................................Passed\nautopep8 wrapper............................................................Passed. Also, if .eb files are universally python files -- it may make sense to add the extension to https://github.com/chriskuehl/identify such that this just works :). Awesome!  Let me know if you need anything else -- happy to help :). hmm! this was some of the oldest pre-commit code:\n$ git blame -w HEAD^ -- pre_commit/prefixed_command_runner.py | grep -o 20[0-9][0-9]-[0-9][0-9] | sort | uniq -c | sort -rn\n     31 2014-03\n      7 2014-06\n      3 2016-03\n      3 2015-12\n      3 2014-10\n      1 2017-07\n      1 2014-08\n      1 2014-05. ok, so there's a bug in cpython 2.7: https://bugs.python.org/issue32539\nI have a patch for it though: https://github.com/python/cpython/pull/5169. First off, thanks for the issue :)\nSo I thought I had addressed this somewhere else before but I couldn't find it -- it's possible I'm remembering a private discussion about the same thing.  I'll try and reiterate my thoughts on that here and we can go from there!\nOne design goal of a lot of unix utilities is \"silence is golden\" and for pre-commit the meaning takes a bit of a different form.  As pre-commit is intended to be ~somewhat of a gateway for vetting changes it should generally be as quiet as possible unless something goes wrong.  In other words, attempt to keep as high of a signal-to-noise ratio as possible.  This is also suggested in the design of hooks that plug into the framework (an example) -- by default they provide just as much information to answer why they're stopping the commit at all (preferring \"filename.py: import reordered\" over a full-on diff of a file).\nThe previous ~similar systems that pre-commit replaced had a huge verbosity problem in that most of their output was \"warnings\".  Yes the messages were probably useful if you were going to take the time to read them, but for 99% of developers if it wasn't stopping them from committing they did not care and ignored the messages.  Not only did this decrease the likelihood that these developers would fix the problems presented in warnings, but it also hurt the attentiveness to messages in other (related and unrelated) commandline tools.  I'm probably stealing the name from somewhere but I usually refer to this problem as warning fatigue.  More succinctly, if users are presented with lots of non-critical information, they are trained to ignore all of the (important) output.\nI think you'll find that while you may read the warning messages about code complexity and such, other contributors will filter this out -- and worse may filter out all of pre-commit's messaging.\nAll that said, implementing such a thing is trivial (though I personally wouldn't use it and I would generally discourage anyone from using it ;) ).\nhere\ndiff\n-    if (stdout or stderr or file_modifications) and (retcode or args.verbose):\n+    if (\n+            (stdout or stderr or file_modifications) and\n+            (retcode or args.verbose or hook['verbose'])\n+    ):\n(plus the changes to validating + defaulting this in pre_commit/clientlib.py, plus a quick regression test in tests/commands/run_test.py)\nLet me know what you think!. @bagerard curious to hear your thoughts on this -- if you can come up with a strong use case I'd be happy to entertain a pull request to add this :). Sure, let's see what this looks like in PR form. via #695. This has been released as part of v1.6.0!. So pre-commit doesn't yet run anything in parallel (as proposed in #510 -- and there will be a way to opt out of it once implemented).\nWhat you're probably seeing is the batching of calls.  Passing all arguments to commands will not work in in all situations (there is a command length limit!).  On unixlike systems, coreutils provides a utility xargs to compute how many arguments to pass to avoid this limit.   pre-commit implements a similar helper but is extremely timid due to limits found on windows.\nThis limit can probably be increased on platforms where the limit is higher (if this can be detected?) and then you'll be much more likely to get one in a single batch.  I'd love a PR that does this :D. The code hints here are:\n\nos.sysconf\nSC_ARG_MAX\nxargs implementation\nxargs leaves room for posix mandated 2048 bytes, environ, and command.  It maxes by default at 128KiB (131072 bytes).\n\n\n\nAnd that none of this can be trusted on windows heh (so probably only do this if sys.platform != 'win32' (should also double check how cygwin responds here).. makes sense to me, I'd try and follow xargs as close as possible!  using bytes probably makes sense as well (the limit on windows is actually characters because the api takes wide chars directly, yay). makes sense to me!   probably use os.sysconf on posix to get the 128 * 1024 value but other than that seems about right. I forget how xargs makes its decision but I think the smaller value makes sense (128k). Awesome! Thanks for the reproduction steps as well, they were very helpful for adding a test :). This is now released as part of 1.5.1!. hmmm I'll have to think about this one more.  pre-commit does export PRE_COMMIT_SOURCE and PRE_COMMIT_ORIGIN (which could be used to implement the inputs to git lfs pre-push), but as you said there are situations where pre-commit falls back to --all-files.\nIf the lfs hook is installed, it should be called here as a legacy hook -- but of course the stdin / stdout will get exhausted by one or the other (probably needs some more clever in this situation).\nI think the ideal situation would be to configure lfs through pre-commit itself using PRE_COMMIT_ORIGIN and PRE_COMMIT_SOURCE, but I'm not exactly sure what that would look like!\nThoughts?. pre-commit does have an option for running legacy scripts (configured by not specifying --force during pre-commit install).  Unfortunately it's just broken for anything that isn't a .git/hooks/pre-commit due to an oversight \ud83d\ude06 (and probably because I don't myself use the pre-push integration).\nthat said, should be an easy fix and I'll try and make a patch for this either tonight or tomorrow night when I have some free time :). So the current legacy will work if you do something like:\nbash\ngit lfs install  # or whatever their install command is, I forget?\npre-commit install --hook-type pre-push  # no `--force`\nThis will\n1. git-lfs will write .git/hooks/pre-push\n2. pre-commit will move .git/hook/pre-push => .git/hooks/pre-push.legacy\n3. pre-commit will write .git/hooks/pre-push\nThe problem is, pre-commit only correctly invokes pre-commit.legacy (it doesn't yet know the correct semantics for passing along arguments).\nI agree ideally there would be a way to run git-lfs from pre-commit itself, I'm not sure I want to support two ways of running legacy hooks, but I'll put some thought into this.\nI suspect if I change the current --all-files to have a source being the sigil \"empty repository\", then you could use git lfs's pre-push with the environment variables we expose... maybe...\n(the main problem with trying to implement \"legacy\" pre-push is it's entirely different from the current execution approach.  pre-push is roughly equivalent to ./pre-push <<< \"the args git sends\" instead of ./pre-push the args git sends)\nIn summary there's two bits to this:\n1. A bug in how pre-commit invokes pre-push.legacy / commit-msg.legacy\n2. A potential feature request to add a \"legacy\"-like execution model.\n    - A note that this already kind of exists for:\n        - pre-commit (pass_filenames: false + always_run: true)\n        - commit-msg (all executions of commit-msg are akin to the git calling convention).\n    - pre-push is the only one where there isn't an equivalent. #694 addresses the commit-msg half of 1. above -- pre-push is slightly more work than I have time for tonight :). The buggy parts of this issue have been fixed and will be released in 1.6.0.. The bugfixes have been released as part of v1.6.0!. I'm going to close this for now as \"by design\" -- pre-commit's current model is very centered around filenames.  That said, I could see this becoming a useful feature if done right.. Also looks like there's a test that needs 'verbose': False here: \nhttps://github.com/pre-commit/pre-commit/blob/7f0b427b7475796d9eb861744aeb68601238a5d5/tests/repository_test.py#L791-L792. @bagerard that would be awesome :) source is https://github.com/pre-commit/pre-commit.github.io (branch from real_master). Oops, one small comma needed :) (pre-commit && pre-commit run --all-files will put it there for ya). Thanks again!. What sort of output are you looking for. Does pre-commit run --verbose | tee pre-commit.log get you part of the way there? Is there a standard format that you'd like to see. What would the cli look like for this? \nMostly looking to scope this :) . @Kilo59 there currently isn't a way, though you can set verbose: true on a hook-by-hook basis.. Which feature? OP's feature or \"verbose during git commit\"?. ok!  Let's discuss the ergonomics of such a feature and the possible approaches for that -- I'll give you code hints for each of them :)\n\nThe first option is to pass an environment variable that pre-commit picks up on at commit time.\nthis is the one I'd prefer if it fits your usecase\n\nThis would follow the precedent set by SKIP.\nYou'd get output something like this:\n```console\n$ PRE_COMMIT_VERBOSE=1 git commit -m 'test'\n[trailing-whitespace] Trim Trailing Whitespace...........................Passed\nhookid: trailing-whitespace\noutput if it had some\n[master (root-commit) ba90d2e] test\n 1 file changed, 5 insertions(+)\n create mode 100644 .pre-commit-config.yaml\n$ git commit -m \"test\"\nTrim Trailing Whitespace...........................Passed\n[master (root-commit) ba90d2e] test\n 1 file changed, 5 insertions(+)\n create mode 100644 .pre-commit-config.yaml\n```\nThis would probably be done by changing the default for --verbose based on os.environ.get('PRE_COMMIT_VERBOSE') here\nYou'd write a test for this behaviour here (I've highlighted a similar test that you could adjust)\nThis to me feels like the nicest behaviour, verbose should really be used sparingly as the more warning noise there is the more likely people are going to ignore the output (or worse, turn it off!).\n\nThe second option would be to add a top-level configuration value for the .pre-commit-config.yaml\n\nThis would look something like:\nyaml\nverbose: true\nhooks:\n    # ...\nTo add to the configuration schema, you'd add a property here (I've highlighted a similar property).\nYou would then update the behaviour of run inside the run command, probably hereish (not exactly sure on the best place to put that tbh, right now it is being accessed via args (argparse return value) which isn't terribly typesafe or easy to reason about -- could mutate args but that also feels wrong -- maybe make a new namedtuple to represent the values that run needs and then adjust that based on the configuration value? not sure.\nYou'd probably add a test here (I've highlighted a similar test which sets verbose at a specific hook level).\nThis has the one downside that if one of your consumers doesn't want the verbose behaviour they don't really have a way to turn it off.\n\nThe last option, and imo the one that has the last visibility would be to write the option to the hook template during the install stage.  Something like:\n\nconsole\n$ pre-commit install --use-verbose\n$ git commit -m '...'\n(verbose output\nSomething about this irks me but I can't quite put my finger on it, perhaps it's that I want the hook template to be as logic free as possible since it's really difficult to test / debug / reason about (and the end user visibility here is really poor).\nThat said, there is precedent via pre-commit install --skip-on-missing-config.  This adds to the hook template and then affects only the invocation of git commit afterwards.\nYou'd probably test this in the same place as option 1, though you'd probably follow this test \nHope this is helpful, let me know what you think!. Seems there hasn't been any renewed interest in this, going to close for now. Ah!  This was actually recently fixed as part of v1.4.3 but wasn't documented.\nContinue to use PEP394 names that work on unixlike platforms, pre-commit will translate those into the appropriate py launcher call.\nSo use\nyaml\n        language_version: python2\nor\nyaml\n        language_version: python3\nin fact, this is how our test validates this: https://github.com/pre-commit/pre-commit/blob/17444cdfc9a0673c7a92ea78733a2943c0722546/testing/resources/python3_hooks_repo/.pre-commit-hooks.yaml#L5. I've gone ahead and documented this -- thanks again for the issue :). No big deal! Happy to help :) . This looks like a poor interaction between anaconda and virtualenv.  At least on macos I'd suggest using pre-commit through brew (or through a virtualenv using brew python3 or python.org python3 installers).. The first section on pre-commit.com briefly covers this but I'll go in more depth :)\n\npre-commit aims to need zero things installed at the system level -- that is, I shouldn't need a sysadmin to manage ruby / scss-lint / flake8 / etc. at the system level in order to use industry-standard linters in a project\nprojects encode the desired versions in a pre-commit configuration and they are (mostly) repeatable.  this means that the repositories linters will continue to pass irrelevant of external changes (whether they be system changes, or external changes).  This necessarily means that each repository may choose a different version of linters.\nin the python ecosystem, virtualenv is the natural choice for creating isolated environments to install python packages in.\n\npre-commit also aims to be a user tool, and not a system tool -- the linters it installs are all installed in user space and shouldn't interfere with the system.. 1. this is already implemented: system hooks and also for convenience (since the two concepts are highly related): repository local hooks.\n2. I don't really have any interest in maintaining conda support -- the complexity is not worth it imo.  There's far more edge cases with conda than there are with virtualenv.  conda also cannot be distributed with pre-commit itself so it's hard to make it work out of the box.\nThat said, if you want to hack on a conda integration -- I'd suggest taking a look at the python language -- it would probably make the most sense to implement language: conda separately.. Seems a workaround for this is:\nbash\npip uninstall virtualenv\nconda install virtualenv. Since:\n- the core issue here is an upstream issue: conda <=> virtualenv interaction\n- I have no interest in using conda myself\nI'm going to close this issue.\nThat said, feel free to submit a patch for this and I'll definitely consider it :). And apparently you can now conda install pre_commit thanks to @nicoddemus!. You can already do this with pre-commit install --config .pre-commit-config.yml. Does this actually make or break anything?  I'd rather keep the internal consistency and not add the complexity.  If someone wants a different configuration they can already use the --config option.\nIf you can demonstrate value, I'd be happy to take a PR.  Mostly: why do you care that the extension is .yaml vs .yml?. I feel you about .jpg -- if you can make a tested PR for this behaviour I'd be happy to take it.\nI think most of the behaviour comes down to this bit: \nhttps://github.com/pre-commit/pre-commit/blob/8bb4d63d3b7c2a6494cd14ef8f8b9d96e103a953/pre_commit/main.py#L43-L47. closing due to inactivity. Sure! Happy hacktober :)  let me know if you'd like guidance on it!. Yep! Good catch let me fix the description. To answer the question above, when one of the interpreters is missing you'll get a message like this:\n```console\n$ pre-commit run --all-files\n[INFO] Installing environment for https://github.com/asottile/reorder_python_imports.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/home/asottile/workspace/pre-commit/venv/bin/python3.6', '-m', 'virtualenv', '/home/asottile/.cache/pre-commit/repoW6Rnpk/py_env-python2.1', '-p', 'python2.1')\nReturn code: 3\nExpected return code: 0\nOutput: \n    The path python2.1 (from --python=python2.1) does not exist\nErrors: (none)\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\n```\n(of course, you'll have it for something more realistic than python2.1! I just happen to have a lot of different interpreters installed).\nNote here that you can use any PEP 394 name as well (such as language_version: python2) and that they'll ~generally be portable due to fixes added in v1.4.3.\n647 may help make the config for this a bit nicer, though I'd probably go with what @chriskuehl is suggesting above.  Note there's some subtle things here that weren't called out that makes this work:\n\nyou can repeat hook ids more than once (and configure them separately)\nyou can override the name property of the hook to customize how it is displayed\n\nYou could leverage multiple configuration files (via -C) for this, though it might be a bit cumbersome?  One idea would be to populate the default config file with the lowest common denominator, and then in CI run something like:\nbash\npre-commit run --all-files\npre-commit run --all-files --config .pre-comit-config-py3.yaml. @fruch does this answer your question sufficiently?. Looks like there's ~3 misunderstandings on your part here -- I'll highlight them in the docs for you :)\nNeither that config, nor that config with files: '' should match anything:\nFrom this:\n\ntypes and files are evaluated with AND when filtering. Tags within types are also evaluated using AND.\n\nThat is, if you have types: [scss, markdown] you're asking for all files which are both markdown and scss.\nAdditionally, defaults:\nFrom this\n(this is for .pre-commit-config.yaml)\n\nfiles (optional) override the default pattern for files to run on.\ntypes (optional) override the default file types to run on\n\nThat is, it'll inherit any value specified in the repository manifest and only if you override it will that change your outcome.\nThe defaults are as you'd expect.  From this:\n\nfiles: (optional: default '') the pattern of files to run on. new in 0.15.0: now optional.\ntypes: (optional: default [file]) list of file types to run on. \n\nThat is, without specifying anything in .pre-commit-hooks.yaml or .pre-commit-config.yaml you'd match all files.\nThe third piece to the puzzle is the defaults provided by the manifest:\nfrom here:\nyaml\n    # From https://github.com/prettier/prettier/blob/133303f47a30f6b3e46ffdf9d5c2d6609d65c416/src/options.js#L32-L42\n    files: \\.(css|less|scss|html|ts|tsx|graphql|gql|json|js|jsx)$\nIt's likely that this regex hasn't been updated as prettier has learned how to work on other file types.  Probably worth a PR at the very least?\nprettier originally used types, but it supports a wide variety of things and so it was switched to using files -- here's the relevant issue : https://github.com/prettier/prettier/issues/2745\nPutting it together, your manifest as written is asking for:\n\nfilenames that match \\.(css|less|scss|html|ts|tsx|graphql|gql|json|js|jsx)$\nAND files that are markdown\nAND files that are scss\n\nSo an empty set.\nYou may also be interested in this issue, though there are no current plans or ideas for implementation: https://github.com/pre-commit/pre-commit/issues/607\nThanks for the issue -- hope this was helpful.. Same misunderstanding as in #706\nPlease see the comment here: https://github.com/pre-commit/pre-commit/issues/706#issuecomment-367383674. So pre-commit already stashes unstaged changes, but not for untracked files (for pre-commit's filename collection's sake they're irrelevant as pre-commit only considers tracked files).\nI don't think mangling untracked files is feasible as it may blow away the pre-commit executable itself (A frequent setup is to use pre-commit via tox -- which is an untracked file)!  So the fix here should really be in the hook.\nMost of pre-commit's design is around taking a list of changed files and passing them to an executable that knows how to process these -- running the whole testsuite ~kind of goes against this but it's definitely doable.  I tend to discourage this use of pre-commit also as it's intended to be lightning-fast checks when committing to do spot checks, and leave full testsuites for CI.  That said, this should be possible so let me see if I can't help you make this work :)\nThe trick here (in your hook) is to figure out what files aren't relevant (untracked test files) and exclude them from pytest and coverage.\nYou're right about pytest-cov -- it doesn't quite support the options you're looking for.  Personally, I don't use pytest-cov due to several edgecases (conftest, import-time, etc.) and usually invoke coverage in the way you showed above.  That said, we can still make this work with pytest-cov if that's your eventual goal by:\n\nwrite out a temporary .coveragerc with omit=...\nPass --cov-config=$temp_coveragerc\nremove .coveragerc (probably in a finally / contextmanager (or TRAP if you're going to go the language: script route)).\n\nThis SO post can probably assist with the finding of files?\nNote also that pre-commit intentionally avoids using git stash as it could interfere with user workflows (and stash pop conflict sadness) and instead implements the unstaged stashing with git diff-index, git checkout, git apply here.. Cheers -- thanks again for the issue :). People may typo \"rev\" <=> \"ref\" -- if this is a common issue I'll add an alias.. \ud83d\udc4d this is great -- thanks for hacking this out :). currently aiming for some time this weekend :). This has been released as part of v1.8.0!. Totally get this usecase \ud83d\ude06 \nI think there should be a better way to do this but I'll tell you how I currently do this and give some additional ideas and then a feature idea :)\nabusing hook stages\nNote: I personally don't use pre-push so if I don't want a hook to run normally I configure it as follows:\nyaml\n    -   id: dont-run-normally\n        stages: [push]\nThat way during commit it doesn't normally run.  However when I want to manually run it I can do: pre-commit run dont-run-normally --hook-stage push to make it run.\n(woops! turns out --hook-stage is undocumented on pre-commit.com!)\ntry-repo\nAnother idea is to use pre-commit try-repo /path/to/repo, probably not the best when you have to remember the incantation each time though :)\nrubyvenv\nFor ruby specifically, I've been slowly (haven't really made progress in a long time) been trying to factor out the pre-commit ruby support into a separate package (also so I can attempt to tackle #201 (the oldest as-of-now open issue)).  There's an incomplete, but for a lot of usecases works fine \"ruby virtualenv\"ish tool: https://github.com/asottile/rubyvenv -- it needs a lot of polishing, needs to support building ruby, and still needs windows support somehow but otherwise is functional with prebuilt rubies.\nhow I think this should work -- abusing hook stages for greater good!\nI'd like to make the following work, does this sound reasonable?\nthe config:\nyaml\n    -   id: dont-run-normally\n        stages: [manual]\nthe invocation: pre-commit run dont-run-normally --hook-stage manual\nthoughts?. want to try out the patch in #720 and see if it fits your needs?. sweet!. Thanks for the cool idea, this should land in the next minor release :)  I have a few more things I want to pull into that before releasing.  For now the stages: [manual] bit is a valid 1.7.0 config so you can still commit that value, it just won't do anything (and until 1.8.0 (or install-from-git) it won't be runnable).. This has been released as part of v1.8.0!. This is how it used to work, but then tags :). yeah plus it would make branches even worse if I'm thinking about it correctly :). Ooh bummer, didn't intend to remove old git support.  I'll see how feasible it is to restore that.. fwiw, -C was added in git 1.9, it's not much work to add back 1.8 support (though I'm not sure how I'll test it) -- let me prototype what that looks like :). #724 to address this  :). Actually, seems 1.8.5.6 (which I was using) seems to support -C as well, let me try 1.8.3.1 (as stated in the issue). Naughty! They added this feature in a patch bump:\n$ git describe 44e1e4d67d5148c245db362cc48c3cc6c2ec82ca\nv1.8.4-1-g44e1e4d. For searchability, here's what the stacktrace looks like for this failure mode:\nTraceback (most recent call last):\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/main.py\", line 259, in main\n    return run(runner, args)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 256, in run\n    for _, hook in repo.hooks:\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/cached_property.py\", line 32, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/repository.py\", line 161, in hooks\n    if hook['id'] not in self.manifest_hooks:\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/cached_property.py\", line 32, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/repository.py\", line 154, in manifest_hooks\n    repo_path = self.store.clone(repo, rev)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/store.py\", line 153, in clone\n    return self._new_repo(repo, ref, deps, clone_strategy)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/store.py\", line 131, in _new_repo\n    make_strategy(directory)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/store.py\", line 149, in clone_strategy\n    _git_cmd('clone', '--no-checkout', repo, '.')\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/store.py\", line 147, in _git_cmd\n    return cmd_output('git', '-C', directory, *args, env=env)\n  File \"/tmp/pre-commit-hooks/venv/local/lib/python2.7/site-packages/pre_commit/util.py\", line 178, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\nCalledProcessError: Command: ('/tmp/git/git', '-C', '/home/asottile/.cache/pre-commit/repoKEwbEK', 'clone', '--no-checkout', 'https://github.com/asottile/reorder_python_imports', '.')\nReturn code: 129\nExpected return code: 0\nOutput: (none)\nErrors: \n    Unknown option: -C\n    usage: git [--version] [--help] [-c name=value]\n               [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n               [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\n               [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n               <command> [<args>]. This was released as part of v1.8.1!\nThanks again for the issue, sorry for the breakage!. More specifically, to restore git<=1.8.4 support.  git -C ... was added in git 1.8.5 \ud83d\ude1e \nI've retested against 1.8.3.1 manually (the skipped test is the swift test):\n=================== 482 passed, 1 skipped in 171.99 seconds ====================. I'll need to rebase after https://github.com/pre-commit/pre-commit/pull/725 merges. This was released as part of v1.8.1\nThe failure mode here looked like this:\npython\nTraceback (most recent call last):\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/main.py\", line 259, in main\n    return run(runner, args)\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 268, in run\n    repo.require_installed()\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/repository.py\", line 194, in require_installed\n    _install_all(self._venvs(), self.repo_config['repo'], self.store)\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/repository.py\", line 101, in _install_all\n    language.install_environment(prefix, version, deps)\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/languages/golang.py\", line 77, in install_environment\n    rmtree(prefix.path(directory, 'pkg'))\n  File \"/tmp/foo/venv/local/lib/python2.7/site-packages/pre_commit/util.py\", line 196, in rmtree\n    shutil.rmtree(path, ignore_errors=False, onerror=handle_remove_readonly)\n  File \"/usr/lib/python2.7/shutil.py\", line 239, in rmtree\n    onerror(os.listdir, path, sys.exc_info())\n  File \"/usr/lib/python2.7/shutil.py\", line 237, in rmtree\n    names = os.listdir(path)\nOSError: [Errno 2] No such file or directory: '/home/asottile/.cache/pre-commit/repoI6I9t2/golangenv-default/pkg'. Is that the output you get?  This doesn't look like our tool at all :)\nDo you have some steps such that I can reproduce this?. This is what I get from smartgit (working as intended!)\nC:\\Users\\IEUser\\workspace\\pre-commit> git.exe commit --cleanup=whitespace --file=C:\\Users\\IEUser\\AppData\\Local\\Temp\\smartgit-146556333042806257tmp\\commit-6499076887067341743.tmp\nTrim Trailing Whitespace.................................................Failed\nhookid: trailing-whitespace\nFiles were modified by this hook. Additional output:\nFixing setup.py\nFix End of Files.........................................................Passed\nautopep8 wrapper.........................................................Passed\nCheck docstring is first.................................................Passed\nCheck JSON...........................................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)................................................Passed\nTests should end in _test.py.........................(no files to check)Skipped\nFix requirements.txt.................................(no files to check)Skipped\nFlake8...................................................................Passed\nValidate Pre-Commit Manifest.........................(no files to check)Skipped\nReorder python imports...................................................Passed\nAdd trailing commas......................................................Passed\nCheck hooks apply to the repository..................(no files to check)Skipped\nCheck for useless excludes...........................(no files to check)Skipped. Not our project, heh :)  I think you're looking for husky maybe?. (plus with our project you wouldn't need the git stash or diff-index calls, since pre-commit handles that for you).. Cheers!  Good luck tracking down your issue (I suspect it's due to no shebang (#!) support on windows -- pre-commit enables this through some clever bits). Could you elaborate? I'm not sure I understand what you mean.  repo: local is intended for repository-specific hooks. I believe you're looking for pre-commit try-repo?\n(You can use repo: /path/to/repository too!). How about pre-commit try-repo \"$PWD\"?\ntry-repo . should work too -- I wonder if that broke when I redid some pwd stuff.. Your other comment is also covered in a (planned) feature here. try-repo /path/to/repo doesn't involve github (git is a distributed version control, commit is entirely local)\nI have a fix for the other thing, coming right up!. Here's the fix for relative paths being unclonable -- it used to work but then I broke it oops! https://github.com/pre-commit/pre-commit/pull/729. Your assumption about local is incorrect.  It is designed for simple one off repository-specific hooks which aren't intended to be shared.  Unlike hooks that go through the usual repo, rev, local does not have any environments (no virtualenvs, no cloning).\ntry-repo is designed for doing exactly what you're doing, working on a local repository.  It streamlines the old workflow which was:\n\nset repo: /path/to/repo\ncommit\n`pre-commit autoupdate\nhack hack hack\ncommit\ngoto 3\n\nTo reiterate, local does no cloning, it is not what you're looking for to vet a hook repository.. You can read more about repository local hooks. Please try out v1.8.2 with the try-repo fix!. I think we're not understanding each other, can you lay out exactly what configuration you'd write and how you'd expect pre-commit to hook things up?. Ok, where would pre-commit install the executables for those hooks?. Ah I see, you're just working with script type hooks (one of the few \"languages\" supported by repo: local).  script hooks are by and far the uncommon case.  The majority of hooks involve an isolated prefix environment (which is git cloned and then given a prefix environment (virtualenv / nodeenv / ruby environment / isolated gopath / etc.) inside ~/.cache/pre-commit).\nFor the most part, local hooks are also the uncommon case (the rationale again is above and in the documentation), the golden path is really: specify a repository, it's version, and the hookids that you want to use -- the remote repository provides the thinking bits (what files does it apply to? what language is it implemented in? what is the executable? etc.) instead of needing to copy this information around everywhere.\nAlso, for testing your own hooks you probably want to be testing them in the way that others will use your repository: via repo: ....  This is why try-repo is designed to be as close as possible to how one would actually use a repository.  This is why pre-commit-hooks installs itself -- even why pre-commit installs itself (a neat bit of history, pre-commit's first hook was actually itself -- v. meta).\nI hope you understand why I don't want to extend local to also perform installation:\n- there's already designed ways to do what you want\n- local has a documented purpose -- and it doesn't match this\n- installation / invalidation of installation state would be nearly impossible\n- pre-commit will not pollute your working directory with installations (not just because I find it impolite but also because it has technical problems (pre-commit used to do this!))\n- pre-commit is designed for repeatability, there are no \"floating version installs\".. Cheers!  Thanks for hearing me out :) (and we even found and fixed a bug as part of this!). The problem with requirements.txt is it could be infinitely expanded (what if that requirements.txt itself contains -r?).  How would pre-commit know when to invalidate an environment?\n-r requirements.txt is also purely a convention.  You could have -r foo.bar just as well -- I don't think it makes sense to special case \"files ending in .txt\".\nIn general, requirements.txt is not supposed to be used for libraries anyway (there shouldn't be duplication in setup.py in that case).\nDo you have a specific usecase in mind?  I'd like to see something concrete before even trying to think of how this would be implemented :). Actually, I think you can already accomplish what you want with:\nyaml\n    additional_dependencies: ['-rrequirements.txt']\nThe first caveat (about cacheability) still stands, though at least it'll be limited to the repository in question.\nTo validate, I tried the following configuration:\nyaml\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.2.3\n    hooks:\n    -   id: trailing-whitespace\n        additional_dependencies: [-r, requirements-dev.txt]\n        entry: pip freeze --all\n        pass_filenames: false\nAnd runtime:\n```console\n$ pre-commit run --all-files --verbose\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks:-r,requirements-dev.txt.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[trailing-whitespace] Trim Trailing Whitespace...........................Passed\nhookid: trailing-whitespace\naspy.yaml==1.0.0\nattrs==17.4.0\nautopep8==1.3.4\ncached-property==1.4.0\ncfgv==1.0.0\ncoverage==4.5.1\nflake8==3.5.0\nidentify==1.0.8\nmccabe==0.6.1\nmock==2.0.0\nnodeenv==1.2.0\npbr==3.1.1\npip==9.0.1\npluggy==0.6.0\npre-commit==1.8.2\npre-commit-hooks==1.2.3\npy==1.5.2\npycodestyle==2.3.1\npyflakes==1.6.0\npytest==3.4.2\nPyYAML==3.12\nsetuptools==28.8.0\nsix==1.11.0\nvirtualenv==15.1.0\nwheel==0.29.0\nYou are using pip version 9.0.1, however version 9.0.2 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\n```\n(Note here that this requirements file was installed). Actually nevermind the cacheability issue -- should work fine (the repository is already keyed by the same things the configuration is keyed on)!  (as long as you're referring to requirements files inside the repo). Does the solution suggested above work for you?. Ah ok, yeah sorry I'm not interested in supporting that -- the cacheability concern is something that (imo) isn't solvable in this situation (you'd have to rebuild every time you committed which isn't reasonable at all).\nThat said, since pylint does dynamic analysis, the suggestion is to configure it as a local hook (taking advantage of your virtualenv).  You can find an example of that here or from our docs here. Here's some additional reading on the subject (I've accumulated a bunch of links related to pylint + pre-commit here): https://github.com/pre-commit/pre-commit-hooks/issues/157. So, while I get your usecase -- and it sounds good in theory -- it tends not to work in practice.  In a lot of ways, pre-commit was designed as a reaction to centralized managed hooks.  That said, there's some features that enable this to work currently.\nA centrally managed approach will probably work for a small organization (5-10 individuals, all with similar mindsets, with agreement on style, etc.) and with very little variation between projects (they all run the same interpreter versions, don't have special needs for exclusion, etc.).  The complication (and really where pre-commit's per-repository configuration shines) is when there's special cases, separate teams (with separate ideas of style, etc.) and require overriding.\nThat said, here's how you can do this with the facilities provided today:\nexample\nlayout\n```console\n$ tree -I .git -a ../testrepo/\n../testrepo/\n\u251c\u2500\u2500 .pre-commit-hooks.yaml\n\u251c\u2500\u2500 orghooks.yaml\n\u2514\u2500\u2500 run-org-hooks\n0 directories, 3 files\n```\n.pre-commit-hooks.yaml\nyaml\n-   id: org-hook\n    name: org-wide hooks\n    language: script\n    entry: ./run-org-hooks\n    verbose: true\nverbose: true forces the output to always appear whether or not things pass\n./run-org-hooks (mode: 0755)\n```python\n!/usr/bin/env python\nimport os\nimport sys\nHERE = os.path.dirname(os.path.realpath(file))\ndef main():\n    cfg = os.path.join(HERE, 'orghooks.yaml')\n    cmd = ['pre-commit', 'run', '--config', cfg, '--files'] + sys.argv[1:]\n    os.execvp(cmd[0], cmd)\nif name == 'main':\n    exit(main())\n```\nNote here that we're using pre-commit's --config option as a sort of \"include\".  --files is important here such that top-level pre-commit run --files ... is honored.\norghooks.yaml (basically any old .pre-commit-config.yaml!)\n(this particular one was copied from https://github.com/asottile/all-repos)\nyaml\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.2.3\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: autopep8-wrapper\n    -   id: check-docstring-first\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: name-tests-test\n    -   id: requirements-txt-fixer\n    -   id: flake8\n-   repo: https://github.com/asottile/reorder_python_imports\n    rev: v1.0.1\n    hooks:\n    -   id: reorder-python-imports\n-   repo: https://github.com/asottile/add-trailing-comma\n    rev: v0.6.4\n    hooks:\n    -   id: add-trailing-comma\nconsuming repository\n.pre-commit-config.yaml\n(note, I'm using local paths and a sha here because I wanted to test the idea, in reality you'd put this in a clonable repository and use tags)\nyaml\nrepos:\n-   repo: /tmp/wat/testrepo\n    rev: 2d76bfbfddde6129c4ec5db31ac08abfbe362114\n    hooks:\n    -   id: org-hook\nrunning\n```console\n$ pre-commit run --all-files\norg-wide hooks...........................................................Passed\nhookid: org-hook\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nautopep8 wrapper.........................................................Passed\nCheck docstring is first.................................................Passed\nCheck Yaml...............................................................Passed\nDebug Statements (Python)................................................Passed\nTests should end in _test.py.............................................Passed\nFix requirements.txt.....................................................Passed\nFlake8...................................................................Passed\nReorder python imports...................................................Passed\nAdd trailing commas......................................................Passed\n$ pre-commit run --files README.md\norg-wide hooks...........................................................Passed\nhookid: org-hook\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nautopep8 wrapper.....................................(no files to check)Skipped\nCheck docstring is first.............................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)............................(no files to check)Skipped\nTests should end in _test.py.........................(no files to check)Skipped\nFix requirements.txt.................................(no files to check)Skipped\nFlake8...............................................(no files to check)Skipped\nReorder python imports...............................(no files to check)Skipped\nAdd trailing commas..................................(no files to check)Skipped\n$ SKIP=trailing-whitespace pre-commit run --files setup.py\norg-wide hooks...........................................................Passed\nhookid: org-hook\nTrim Trailing Whitespace................................................Skipped\nFix End of Files.........................................................Passed\nautopep8 wrapper.........................................................Passed\nCheck docstring is first.................................................Passed\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)................................................Passed\nTests should end in _test.py.........................(no files to check)Skipped\nFix requirements.txt.................................(no files to check)Skipped\nFlake8...................................................................Passed\nReorder python imports...................................................Passed\nAdd trailing commas......................................................Passed\n```\n(though there's no way to show it in github comments, the output of the inner hooks will be uncolored due to not going to a tty)\nNote that @dan98765 actually asked for a similar thing in #548 but it wasn't really workable at the time.\nAlso note, pre-commit already has a thing called \"meta hooks\" -- I just haven't gotten around to documenting them :D. To be honest, I don't really think it makes sense because I don't want to support a workflow that really can't work.  This is a hack at best and won't become a first class citizen.  Additionally, beyond documenting (already documented!) --config, this isn't doing anything particularly clever.. Thanks for the issue! Hope the example above was helpful :). Thanks for the heads up! . @fczuardi a possible workaround would be to install node at the system (through whatever package manager you're using) and use language_version: system -- this'll bypass the nodeenv download process. Upstream bug is fixed!  Closing :)\nThanks for the issue. It's supposed to put them back when completed -- if it didn't that's a bug, sorry about that.\nIf you could provide a reproduction (including stdout, and the patch file if applicable) that would be very helpful!\nIn a worst-case, pre-commit saves a diff of the unstaged contents (and prints the location of the patch file) which can be used to restore the state if pre-commit doesn't do it itself.\nThe behaviour is actually desirable though, when committing you want the hooks to test the contents of files as they're being committed and not take into account unstaged changes (this is a rather glaring problem with the usual naive approach).  As such, pre-commit saves off a patch of the unstaged diff, clears the staged area, runs the hooks, and then (if everything is working properly!) restores the patch.  Rest assured, the intention is not to leave your repository in a different state than found :). Note that a successful run usually looks like this (note the unstaged diff before and after is the same):\ndiff\n$ git diff\ndiff --git a/test.py b/test.py\nindex 2521db1..c25b21b 100644\n--- a/test.py\n+++ b/test.py\n@@ -1,2 +1,2 @@\n def hello():\n-    return 'world'\n+    return 'hello world!'\nconsole\n$ git commit -m \"wat\"\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.cache/pre-commit/patch1522637775.\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\n[INFO] Restored changes from /home/asottile/.cache/pre-commit/patch1522637775.\n[wat a80da68] wat\n 1 file changed, 2 insertions(+)\n```diff\n$ git diff\ndiff --git a/test.py b/test.py\nindex 2521db1..c25b21b 100644\n--- a/test.py\n+++ b/test.py\n@@ -1,2 +1,2 @@\n def hello():\n-    return 'world'\n+    return 'hello world!'\n``. Hmm, I'm seeing the error (as it should error) but it's restoring the patch for me.  Could you provide a reproduction with a specific repository I can clone and test against (and maybe your.gitconfig` minus personal details?):\ndiff\n$ git diff\ndiff --git a/test.py b/test.py\nindex 2521db1..fa89502 100644\n--- a/test.py\n+++ b/test.py\n@@ -1,2 +1,2 @@\n def hello():\n-    return 'world'\n+    return 'hello world'\nconsole\n$ pre-commit\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.cache/pre-commit/patch1522638298.\n[INFO] Restored changes from /home/asottile/.cache/pre-commit/patch1522638298.\nAn error has occurred: InvalidConfigError: \n=====> /tmp/test/.pre-commit-config.yaml does not exist\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\ndiff\n$ git diff\ndiff --git a/test.py b/test.py\nindex 2521db1..fa89502 100644\n--- a/test.py\n+++ b/test.py\n@@ -1,2 +1,2 @@\n def hello():\n-    return 'world'\n+    return 'hello world'. No problem \ud83d\udc4d \nThanks for the issue nonetheless :). pre-commit is no longer associated with Yelp :)\nfwiw, we decided check_mock_methods was obsolete when mock>=1.1 introduced the following behaviour:\n```pycon\n\n\n\nimport mock\nx = mock.Mock()\nx.assert_has_three_calls()\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/private/tmp/venv/lib/python2.7/site-packages/mock/mock.py\", line 714, in getattr\n    raise AttributeError(name)\nAttributeError: assert_has_three_calls\n```\n\n\n\n(raising on invalid attributes that start with assert (or assret, hilariously)\nSince it was deprecated internally, and since mock has improved behaviour, there's not much use in open sourcing it.. The command-length splitting behaviour is covered in https://github.com/pre-commit/pre-commit/issues/691#issuecomment-360224845 -- there's some code hints on how to \"fix\" it on posix platforms, just needs some implementation!  Currently it is overly timid to account for the limitations on windows, but could be made much more permissive on platforms which provide SC_MAX_ARG.\nNote that although there's an activate file written for the rbenv, it was invented by pre-commit and although it used to be used, it hasn't been used since 0.8.0 and is likely broken in subtle ways.  I've been trying to factor this out to a general purpose, cross-platform, reusable ruby virtual environment helper -- though I've been too busy so development has mostly stalled on that: https://github.com/asottile/rubyvenv/blob/master/rubyvenv.py.\nA few questions here, since I think we can solve this without turning pre-commit into a general purpose shell :) (which I'd like to avoid).\n\nWhat command are you running specifically?\nDoes the newly added stages: [manual] and/or pass_filenames: false help you out here?\nIf we do this (big IF) how do we discourage (ab)use of it (it sounds too close to run right now (a similar confusion that beginners have with docker!)).  The abuse I'm describing is commands which would either break or invalidate the pre-commit metadata (think things like pip uninstall / pip install / etc.). Hmmm, that error is quite odd.  I can load that configuration just fine with vanilla yaml, I suspect something strange with our custom ordered loading -- I'll open an issue there https://github.com/asottile/aspy.yaml/issues/14\n\n```pycon\n\n\n\naspy.yaml.ordered_load('x: &y\\n  a: b\\nz:\\n  <<: y\\n')\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/aspy/yaml/init.py\", line 39, in ordered_load\n    return yaml.load(stream, Loader=OrderedLoader)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/init.py\", line 72, in load\n    return loader.get_single_data()\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 37, in get_single_data\n    return self.construct_document(node)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 41, in construct_document\n    data = self.construct_object(node)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 86, in construct_object\n    data = constructor(self, node)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/aspy/yaml/init.py\", line 17, in \n    lambda loader, node: OrderedDict(loader.construct_pairs(node)),\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 141, in construct_pairs\n    value = self.construct_object(value_node, deep=deep)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 86, in construct_object\n    data = constructor(self, node)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/aspy/yaml/init.py\", line 17, in \n    lambda loader, node: OrderedDict(loader.construct_pairs(node)),\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 140, in construct_pairs\n    key = self.construct_object(key_node, deep=deep)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 86, in construct_object\n    data = constructor(self, node)\n  File \"/private/tmp/test/venv/lib/python3.6/site-packages/yaml/constructor.py\", line 414, in construct_undefined\n    node.start_mark)\nyaml.constructor.ConstructorError: could not determine a constructor for the tag 'tag:yaml.org,2002:merge'\n  in \"\", line 4, column 3\nimport yaml\nyaml.load('x: &y\\n  a: b\\nz:\\n  <<: y\\n')\n{'x': {'a': 'b'}, 'z': {'a': 'b'}}\n``. If you upgrade toaspy.yaml>=1.1.0you should be able to load the merge syntax. Awesome, thanks again for the issue!. You'll want [pass_filenames: false](https://pre-commit.com/#new-hooks) I believe. Those errors are coming from the modified files being passed to the command specified. . Thanks for the issue! \ud83c\udf89 . The failures on linux are exactly why I'm hesitant to use thevenvmodule.. Yeah! That would be cool, an explicit opt in sounds good to me! . I'll take a look at this in the morning when I'm thinking more clearly ;) -- currently considering this approach vs making apython_venv` \"language\" instead which would be opted into with:\n\n\n\nyaml\n    language: python_venv\nor\nyaml\n    language: python_venv\n    language_version: python3.6\nIt would share most of the code with the python language except the venv setup (and wouldn't require so much branch modification).  Need to sleep now though :). @jfroche I don't think it's possible to support language_version via the api only. @jfroche indeed, specifically I can't create a virtualenv of a different python version that the one that's running without using the cli.  The implementation with the +venv is the current state of the PR :)\n@ojii sorry to change this, but could you implement this as another language instead of doing string-munging here?  You should be able to import-and-reuse most of the python implementation (except for the install_environment api).  You can see the sketch of what the api looks like here\nHere's an example which sets up a separate language.  I can help with the testing part: https://github.com/pre-commit/pre-commit/pull/598/files\n(this would enable the proposal I pasted in https://github.com/pre-commit/pre-commit/pull/738#issuecomment-384514691)\nWhen python2 (and old python3) support is removed, python will likely become an alias for python_venv (assuming venv gets better platform support from OS vendors (debian)).. cool, I'll help write up some tests and simplify the code a bit -- are you ok with me pushing to your branch? (figured I'd ask before I just do it \ud83d\ude06). (just a note: I haven't forgotten about this! just busy with travel and work \ud83d\ude06). yep! planning to do so, thought I'd wait just a bit to see if I could get @chriskuehl's contribution which adds rust support into this release but I guess I can just make another release after that's ready :). This has been released as part of v1.9.0!. Please instead run with python3. This isn't really avoidable due to the python 2 stdlib. First off, thanks for the issue and PR!\nTurns out the current behaviour is intentional (types are currently an AND relationship) -- this was useful for a few specific usecases when it was initially written (though I definitely went back and forth on it a few times when implementing #551!).  Note that there's a current issue which matches roughly the description of your test here (as well as some potential implementation ideas there): #607\nAt least for your case, types: [shell] should be sufficient to match the same set of things you'd like to match.. @zph at least for sh and bash, there's a blanket shell which covers both of them.\nI'd be happy if you chimed in on #607 and maybe hacked at an implementation -- definitely agree there's a need there :). Sounds fine to me!  Would you like to submit a patch similar to https://github.com/asottile/cfgv/commit/db4ba935f9b86638b25a566cf387ecd91cba86c4 ?. Thanks! this should make it into the next release, planning to get https://github.com/pre-commit/pre-commit/pull/739 done first :). This has been released as part of v1.9.0!. pre-commit itself will never touch the staging area. These are good ways to silently break commits.  In my mind this is one of the worst things that lint-staged does and suggests -- hooks are very frequently not perfect and magically changing what's being committed should not be taken lightly. \nThat said, if you would like to foot gun, your hook can call git add - u and pre-commit won't know any better :) a sketch of that (untested, discouraged)\nyaml\n  - id: yapf\n    entry: bash -c 'yapf \"$@\"; git add -u' --\n(note: using bash will potentially reduce portability) . Ah I think this is because Travis has an old pyyaml installed. pre-commit should maybe set a lower bound on that version (3.12 is the latest). I can probably reproduce your trace by downgrading pyyaml when I'm at a computer :)\nYou can probably work around by explicitly lower bounding pyyaml when you install :+1:\npip install 'pyyaml>=3.12' pre-commit. There's a couple questions here so I'll address them separately :D\ndetecting deleted files\npre-commit currently excludes deleted files from the list of files it passes to hooks:\nhttps://github.com/pre-commit/pre-commit/blob/823c5bc8c3a9f713ce22849792be50d4a2a23f42/pre_commit/git.py#L84-L85\nThat said, you can still get the behavior you want through a couple of ways:\nFrom the docs some combination of always_run: true and pass_filenames: false enables a tool to be executed disregarding the staged files.  From that you could call git diff --staged --diff-filter=D to get deleted files directly (I forget whether this follows moves or not, you'll want to double check that!).  Note that there's a couple hooks in pre-commit-hooks that do something similar (but for newly added only).\nreturns zero but prints\nThere's a newish option for hooks, verbose: true -- while it's an option, I personally discourage it as it leads to an increase in \"warning noise\".\nseparate lists for added / modified / deleted\nCurrently no, I also don't really want to add such a feature, if a hook wants this information it can already compute it (and there's precedence for this approach).\nHope this helps!. @revolter just checking in :) does this give you the information you need?. :hype:! \ud83c\udf89 . Ok, I can factor tox out of the situation:\n```\n$ . .tox/py36/bin/activate\n(py36) $ pytest tests -k venv\n============================= test session starts ==============================\nplatform linux -- Python 3.6.5, pytest-3.6.0, py-1.5.3, pluggy-0.6.0\nrootdir: /home/asottile/workspace/pre-commit, inifile: tox.ini\nplugins: env-0.6.2\ncollected 500 items / 492 deselected                                           \ntests/repository_test.py ..                                              [ 25%]\ntests/commands/install_uninstall_test.py .                               [ 37%]\ntests/languages/all_test.py .....                                        [100%]\n=================== 8 passed, 492 deselected in 4.19 seconds ===================\n(py36) $ head -1 .tox/py36/bin/pip\n!/tmp/pytest-of-asottile/pytest-4/test_python_venv0/0/.pre-commit/reposmsza1fi/py_venv-python3.6/bin/python3.6\n``. @ojii any ideas here? (-mvenv` :spider:s)\nThis seems to be the minimal reproduction:\n```\n!/usr/bin/env bash\nset -euxo pipefail\ntox -e py36 -r --notest\nPATH=$PWD/.tox/py36/bin:$PATH\n.tox/py36/bin/pytest tests/repository_test.py -k test_python_venv\nhead -1 .tox/py36/bin/pip\n``. It seems making a-mvenvvirtualenv from a-mvirtualenv` virtualenv just doesn't work great:\n```\n$ virtualenv venv -ppython3.6\nRunning virtualenv with interpreter /usr/bin/python3.6\nUsing base prefix '/usr'\nNew python executable in /tmp/t/venv/bin/python3.6\nAlso creating executable in /tmp/t/venv/bin/python\nInstalling setuptools, pip, wheel...done.\n$ . venv/bin/activate\n(venv) $ python3.6 -m venv venv3\n(venv) $ head -1 $(which pip)\n!/tmp/t/venv/bin/python3.6\n(venv) $ ls venv\nbin  include  lib  pip-selfcheck.json\n(venv) $ head -n1 venv*/bin/pip\n!/tmp/t/venv/bin/python3.6\n(venv) $ ls venv\nvenv/  venv3/ \n(venv) $ ls venv3/bin/\nactivate  activate.csh  activate.fish  python  python3  python3.6\n(venv) $ ls -al venv3/bin/python3.6 \nlrwxrwxrwx 1 asottile asottile 25 May 28 11:36 venv3/bin/python3.6 -> /tmp/t/venv/bin/python3.6\n```. - pypa/virtualenv issue: https://github.com/pypa/virtualenv/issues/1095\n- bpo issue: https://bugs.python.org/issue30811. Do you have a proposal for how this would work?  Currently there's a single invocation of pip:\nhttps://github.com/pre-commit/pre-commit/blob/cf5f8406a1593aa31dcfa5fb2a3766a9ff3f8a96/pre_commit/languages/python.py#L144-L146. Yeah I don't think the idea is completely unreasonable, but there's no proposal here yet :). (an aside: we're tackling this with separate subdirectories on a single pypi server, basically export PIP_INDEX_URL=\"https://pypi.example.com/${DISTRIB_CODENAME}/simple\"). You can already do:\nyaml\n    additional_dependencies: [--index-url, https://pypi.mycompany.com/simple]\nthen you don't need the environment variable -- does this work?. The hard part about install_environ is correctly invalidating caches based on it.  It's probably also only useful for python and js (ruby can't take advantage of it, many of the other languages don't care about environ).  Also feels like a slippery slope (if there's environ overriding, do we clear environ variables? do we allow environ substitution? I don't really want to get into the business of either of those).\nIf you truly want all requests to go to internal pypi, maybe /etc/environment is a good place?. I guess it's not difficult, could just do the same thing that additional_dependencies is doing:\nhttps://github.com/pre-commit/pre-commit/blob/cf5f8406a1593aa31dcfa5fb2a3766a9ff3f8a96/pre_commit/store.py#L105-L106\nAnd then thread through the environ settings.\nMaybe that isn't the worst?\nBut leave unspecified env variables alone?. pylint-venv seems a bit of a flawed idea (and more of a hack than a solution), mostly in that activate_this does not work across different python versions.  The added component that the virtualenv it depends on may or may not be set up (or set up properly) is going to make errors look like pre-commit's fault.. This issue is a ~little different than runtime environment variables -- though runtime and install time environment variables are likely to be strongly related.\n(at least to me) it seems like ansible-lint should take a commandline argument to allow that instead of needing to set it in the environment.\nThat said, let's get cheeky / clever (this'll probably work, similar caveats as usual with unix tools and cross platform support):\nyaml\n    -    id: ansible-lint\n         entry: env ANSIBLE_LIBRARY=./library ansible-lint\nre: passenv / setenv: (I also am a maintainer of tox so I'm pretty familiar with these!) -- if this feature were to be implemented I definitely do not want to implement the full environ clearing thing.  While I agree it is a better end situation to be in, I don't really want to deal with maintaining a global whitelist.  I also remember the headache that the tox 2.0 rollout was (scurrying around to hundreds of repositories to add passenv = SSH_AUTH_SOCK, etc. when I really didn't care so much about passenv since my CI already ran in a consistent environment). . This can be accomplished with a system / script hook -- it is suggested to do this as a local hook\nHere's an example of how this might work (note that pre-commit will not manage this environment so it's up to you to make it happen):\nyaml\n-   repo: local\n    hooks:\n    -   id: pytest\n        name: pytest\n        entry: venv/bin/pytest\n        language: script\n        pass_filenames: false\n        # alternatively you could `types: [python]` so it only runs when python files change\n        # though tests might be invalidated if you were to say change a data file\n        always_run: true\nAlso note that running tests as part of your commit might frustrate your users, generally we try and stick to fast hooks (linters) when possible.. You could share this if each of your repositories are set up in the same way.  entry overrides are already a thing (the hook and config maps get merged). No problem :D Thanks for the issue!. I think 37f49d8 is only necessary due to a regression in git 2.17 -- going to follow up with that one on the mailing list. Here's my mailing list entry: https://marc.info/?l=git&m=152809164601078&w=2. Once appveyor has git 2.19\nthis can be reverted. Hello! Thanks for the issue, I believe you're looking for log_file perhaps? . There's a few options for doing that today.\n- Have a separate config and use pre-commit run -c {alternate config filename}\n    - downsides: you'd potentially duplicate the common things\n    - upsides: keeps things explicitly separate\n    - you could even just put ~special things into a separate config and invoke both (once with the default config, once with the custom config)\n- Configure specific hooks as stages: [manual] -- these won't run during the normal workflow but you can trigger them by running pre-commit run --hook-stage manual. Just so it's easier for me to trace, this is for https://github.com/getsentry/responses/pull/199 correct?. Sounds great!  feel free to reach out and I'll help where I can :). Seems like you've mistakenly installed asyncio in python2 -- try pip uninstall asyncio?. cached_property conditionally imports asyncio but does not capture SyntaxError (because asyncio shouldn't even be installed in python2!). I made a PR against cached-property with a \"fix\": https://github.com/pydanny/cached-property/pull/103. Apparently you can also pip install 'cached-property<1.4' to get the pre-asyncio behaviour. You can also pip install 'cached-property>=1.4.3' now as well. First: thanks for the issue! \ud83c\udf89 \n\nIn order to utilize hooks that run in different stages, pre-commit needs to install itself as the hook in each one (e.g. \"pre-commit\" and \"commit-msg\"). By default however, pre-commit only installs itself in \"pre-commit\" and you can't specify multiple types with the -t argument. It would be nice if pre-commit would see that a hook in the config can only be used in a specific stage (e.g. \"commit-msg\") and install itself there rather than requiring explicit knowledge and direction from the user.\n\nThe current suggestion is to just run pre-commit install more than once.  Some consumers prefer to install just for push or just for commit and I don't want to break that workflow.\n\nAm I understanding the limitations of stages correctly?\n\nThis is correct as written.\n\nCan anything be improved from the framework side to make commit and commit-msg stages not duplicate work or be more intelligent about what runs where? \n\nThere is a bit of duplication in the configuration right now, true.  I plan at some point to add something like:\n```yaml\ndefault_stages: [commit]\n````\nto the top level so the duplication can be avoided (slightly) (though I'm still not 100% sold on this idea since it's nice and explicit right now).\n\nMaybe keep track of if a hook ran in the commit stage and avoid running it in the commit-msg stage?\n\npre-commit currently stores zero state about runs, I don't really want to get into the business of managing that \ud83d\ude06 \nHope this clarifies some things :). yep, it's on my open source TODO. This has been released as part of v1.14.0 \ud83c\udf89  -- thanks again!. an additional language was added to support venv-in-venv scenario: https://pre-commit.com/#python_venv\nYou can override any language: python hook by settings language: python_venv. Cheers! Thanks again for the issue :). This has come up a couple times before, the stance in the past has been: this linter is malformed and a PR to improve their tool would be easier than supporting it from pre-commit's perspective.\nSee #394, #557, #613.\nThose issues also provide a (non portable) workaround using bash + xargs -- though the best way to improve the community is to improve the specific linter to take filenames in a more standard way.. @jdufresne have you tried the bash workaround listed in the linked issues?. Thanks for the report! could you provide some more information (if possible) for me?\nit appears from the output that you committed with an unstaged change, to which file was that and if possible could you share the patch file mentioned?\nI suspect the diff=git-crypt is somehow throwing off the way we generate and then reapply patches and will need to be worked around.. ok, I have a reproduction:\n```bash\n!/usr/bin/env bash\nset -euxo pipefail\nrm -rf repo\ngit init repo\ncd repo\ngit commit --allow-empty -m 'Initial empty commit'\ngit-crypt init\ncat > .pre-commit-config.yaml << EOF\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v1.3.0\n    hooks:\n    -   id: trailing-whitespace\nEOF\ngit add .pre-commit-config.yaml\npre-commit install\ngit commit -m \"Add pre-commit config\"\necho 'f filter=git-crypt diff=git-crypt' > .gitattributes\ngit add .gitattributes\necho 'hello world' > f\ngit add f\nrm f && touch f\ngit commit -m \"test\"\n```\nwhich ends with:\n```\n+ git commit -m test\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.cache/pre-commit/patch1530539647.\nTrim Trailing Whitespace.................................................Passed\n[WARNING] Stashed changes conflicted with hook auto-fixes... Rolling back fixes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/lib/git-core/git', '-c', 'core.autocrlf=false', 'apply', '--whitespace=nowarn', '/home/asottile/.cache/pre-commit/patch1530539647')\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: \n    error: binary patch to 'f' creates incorrect result (expecting 9dc8b7b3fd7e85892019cbf77d888ce9d9f37b15, got e69de29bb2d1d6434b8b29ae775ad8c2e48c5391)\n    error: f: patch does not apply\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\n```\nAlmost certainly due to the smudge filter though I'm not exactly sure what the correct approach is here -- for now you can work around this by making sure you stage the encrypted files before committing.. hmm, my crash is actually different from yours -- I wonder there's two issues here :S. I agree! thanks for the report -- this is definitely a bug :). I'm actually having a difficult time reproducing this, I've tried amending and pushing and the diff call succeeds for me -- could you help me reproduce this :). actually no, I've got it now -- the remote progresses to a place that hasn't been fetched yet and then the push is attempted.\nworking on a fix now. This has been released as part of v1.10.3 -- thanks again for the issue \ud83c\udf89 . If the shebang is changed to #!/usr/bin/env sh it will work I think! I can give a better answer when not on phone and not inebriated :) . No problem! Thanks for the issue \ud83c\udf89 . \ud83e\udd14 \nWARNING: timestamping does nothing in combination with -O. See the manual\nfor details.. Thanks again!. that configuration looks completely correct to me, I suspect there's some sort of regression as well as OSError isn't supposed to escape.\nIf you could provide more platform / environment information that would be extremely helpful :)\n(an aside: types: [file, shell] is redundant as shell will only be applied to file object -- not broken but just extra). The other bit being, your configuration works for me:\n$ pre-commit try-repo https://github.com/ssbarnea/bashate --all-files\n[INFO] Initializing environment for https://github.com/ssbarnea/bashate.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: https://github.com/ssbarnea/bashate\n    rev: 3b9aa602d8bab522e803d1f05f223b908f610731\n    hooks:\n    -   id: bashate\n===============================================================================\n[INFO] Installing environment for https://github.com/ssbarnea/bashate.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nbashate..................................................................Passed. ah, I suspect you're hitting https://pre-commit.com/#using-the-latest-version-for-a-repository ?\neither way, this shouldn't stacktrace and should produce a readable error message!. I also suspect this sub-heading should be promoted more in the \"creating new hooks\" section: https://pre-commit.com/#developing-hooks-interactively. For instance, this is what I expect it to produce:\n```\nroot@3b2c4f333b6a:/t# pre-commit try-repo /bashate\n[INFO] Initializing environment for /bashate.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: /bashate\n    rev: 0f94116426fe545ea7168ed6696e6e2d59605972\n    hooks:\n    -   id: bashate\n===============================================================================\n[INFO] Installing environment for /bashate.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nbashate..................................................................Failed\nhookid: bashate\nExecutable broken not found\n``. Indeed, I personally hang out on freenode but haven't set up a channel specifically for pre-commit.  I myself often hang out in#pylib` (tox / pytest) channel but I'm not sure we'd want to take that one over for their sake \ud83d\ude06.\nI've created and joined #pre-commit so we can start from that!. I can reproduce this outside of pre-commit so I suspect this is an issue with cspell itself:\ngit clone https://github.com/Jason3S/cspell\ncd cspell\nnodeenv nenv\n. nenv/bin/activate\nnpm install -g .\n```\n...\nnpm ERR! path /tmp/cspell/nenv/lib/node_modules/cspell/dist/app.js\nnpm ERR! code ENOENT\nnpm ERR! errno -2\nnpm ERR! syscall chmod\nnpm ERR! enoent ENOENT: no such file or directory, chmod '/tmp/cspell/nenv/lib/node_modules/cspell/dist/app.js'\nnpm ERR! enoent This is related to npm not being able to find a file.\nnpm ERR! enoent \nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /home/asottile/.npm/_logs/2018-07-04T20_49_15_170Z-debug.log\n``.nodeenv` is a python package: https://github.com/ekalinin/nodeenv\nit gets installed alongside pre-commit. I can now reproduce with just npm and a checkout of cspell -- let's move any more discussion to the issue you created :) https://github.com/Jason3S/cspell/issues/53#issuecomment-402562237. Thanks again!. currently there's no minor-version-specific code and we still test python2.  No bugs slipped while not testing python3.3 / 3.4 so I don't expect them to here either.  imo the 10-12 minutes per PR is well worth the risk. overriding language version documents how to do this.\nFor example:\nyaml\n    -   id: my-hook\n        language_version: python3. going to close this given it is documented, let's continue discussion in #794 . pre-commit doesn't really do any attempt at fishing out installed executables.  It tries by default the executable you're using.\nFor language: python_venv when running pre-commit under python2, you'll need to tell pre-commit where to find a suitable executable via language_version:\npython\n    -    id: liccheck\n         language: python_venv\n         language_version: python3\n         ...\nNote that for hooks which are being distributed, it is suggested to use language: python over language: python_venv as it is more portable.\ndefaulting language: python3 would potentially lead to undesirable results if someone is expecting a newer / older python3.x version so I don't think (?) it's an appropriate default here. I'm going to default language_version: python3 for python_venv if sys.version_info < (3,) -- should pave over this.  That said, above still stands about python_venv :). I suspect this is just a misunderstanding of how docker handles the --entrypoint argument.\npre-commit is just acting as a simple wrapper around docker run and --entrypoint only takes one argument.\nFrom the examples you want either:\nyaml\n        entry: --entrypoint binary image:latest --parameter 120\nOr the \"works fine\" example above. \n. cheers! thanks for the issue :). Before this fix:\n```console\n$ pre-commit  run --show-diff-on-failure | cat\nTrim Trailing Whitespace.................................................Failed\nhookid: trailing-whitespace\nFiles were modified by this hook. Additional output:\nFixing setup.py\nFix End of Files.........................................................Passed\nautopep8 wrapper.........................................................Passed\nCheck docstring is first.................................................Passed\nCheck JSON...........................................(no files to check)Skipped\nCheck Yaml...........................................(no files to check)Skipped\nDebug Statements (Python)................................................Passed\nTests should end in _test.py.........................(no files to check)Skipped\nFix requirements.txt.................................(no files to check)Skipped\nFlake8...................................................................Passed\nValidate Pre-Commit Manifest.........................(no files to check)Skipped\nReorder python imports...................................................Passed\nAdd trailing commas......................................................Passed\nCheck hooks apply to the repository..................(no files to check)Skipped\nCheck for useless excludes...........................(no files to check)Skipped\ndiff --git a/setup.py b/setup.py\nindex 72abdc4..b78dafe 100644\n--- a/setup.py\n+++ b/setup.py\n@@ -1,4 +1,4 @@\n-from setuptools import find_packages\n+from setuptools import find_packages\n from setuptools import setup\nwith open('README.md') as f:\nAll changes made by hooks:\n```. See #798. I think gitlint has stuff for this (already has pre-commit integration)?. > first I had to run pre-commit install --hook-type commit-msg in order to activate this, something I never had to to with other repositories.\ncommit-msg is a separate hook from pre-commit so it is installed separately (the same is also true for pre-push which is supported by pre-commit).  That is, they install different hook executables in .git/hooks.  All the other repositories you worked with were commit hooks and so the default pre-commit install set those up for you.\n\nSecond problem is that I discovered that neither pre-commit run nor pre-commit run --all-files managed to run this check. They silently skip it.\n\npre-commit run takes a --hook-stage argument (which is usually used during invocation by specific hooks (commit / commit-msg / push).  To run a commit-msg hook you'd use --hook-stage commit-msg.\nAs for linting commits that already exist, you'd probably need to invoke gitlint in a different way (with --commits?) -- I haven't tried it myself but it looks like others https://github.com/jumanjihouse/autostager/commit/f50e61533ceb7d73abe00c2049a4e89f67baf38b#diff-82c3b36709926de3a1b27bea0d8258ccR50. > > pre-commit run takes a --hook-stage argument\n\nThis is seriously under-documented,\n\nIt's listed here and in pre-commit run --help -- if there's somewhere else you'd like to see this in the documentation please make a PR! \ud83d\ude04 \n$ pre-commit run --help | grep -A2 ' --hook-stage'\n  --hook-stage {commit,commit-msg,manual,push}\n                        The stage during which the hook is fired. One of\n                        commit, commit-msg, manual, push. I'm not sure there's anything left here? if there is please comment and I'll reopen -- thanks for the issue :tada:. Yeah I think that's expected - - a but strange, but expected :) . Thanks again for this PR! Really awesome :) . If you're worried about globally installing pip or virtualenv you don't really need to:\n```bash\nthis is ~roughly how I set up my system\ncurl https://asottile.github.io/get-virtualenv.py | python - ~/opt/venv\n~/opt/venv/bin/pip install pre-commit\nln -sf ~/opt/venv/bin/pre-commit ~/bin/\n```\nthough I actually manage this through puppet\nThat said, there shouldn't be any problem with running in docker, I imagine you have a workdir mismatch and that's why git is unhappy about modifying the index. # DISCLAIMER: THIS IS NOT A SUPPORTED WAY TO RUN pre-commit\nThis worked fine for me, mileage may vary:\n```bash\n!/usr/bin/env bash\nset -euxo pipefail\nexec docker run --rm \\\n    -v \"$PWD:$PWD:rw\" \\\n    -v \"$HOME/.cache:$HOME/.cache:rw\" \\\n    --user \"$(id -u):$(id -g)\" \\\n    --env \"PRE_COMMIT_HOME=$HOME/.cache/pre-commit\" \\\n    --workdir \"$PWD\" \\\n    pre-commit \"$@\"\n```\ndockerfile\nFROM ubuntu:bionic\nRUN : \\\n    && apt-get update \\\n    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        dumb-init \\\n        git-core \\\n        python3 \\\n        virtualenv \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\nENV PATH=/venv/bin:$PATH\nRUN : \\\n    && virtualenv --no-download --python python3 /venv \\\n    && /venv/bin/pip install --no-cache pre-commit\nENTRYPOINT [\"dumb-init\", \"--\", \"pre-commit\"]\nbash\ndocker build -t pre-commit .\nsome reasons this is probably a bad idea:\n- the virtualenvs inside / outside of docker are potentially linked against different libraries\n- this is not a tested workflow\n- git version skew in/outside of docker potentially results in corrupt indexes. But then when it doesn't work it's too late to undo it :)\npre-commit takes a strong stance on never modifying the staging area -- you can read more here (there's a few other issues as well about running git add).\nSince software is imperfect in the general case, pre-commit will not commit anything until it has been looked at by a human.\nFortunately, git add -u && !! is pretty easy to run if you're ok firing from the hip :). I opted for this:\nid: ...\n    name: ...\n    entry: message that will be printed\n    files: ...  # or types, but files usually makes more sense here\n    language: fail\nIt will print:\n```\nmessage that will be printed\nfilename\nfilename\nfilename\nfilename\n```\nand fail. oh worktrees, the bane of my existence \ud83d\ude06. this doesn't surprise me since I don't use them myself but they should work so I'll look into a fix for this!\nthanks for the report!. I'm able to reproduce!\nThe odd thing:\nasottile@asottile-VirtualBox:/tmp/wat$ git rev-parse --git-dir\n/tmp/pre-commit-hooks/.git/worktrees/wat\nI would think that git hooks would be installable / runnable from there.  I almost suspect this is a bug in git itself.. Apparently, there's git rev-parse --git-common-dir which gives the correct value. however, that's new in git 2.5, so I'll need to try both. via #809. Resolves #808. CC @s0undt3ch. Yep, later today!\nOn Mon, Aug 6, 2018, 12:30 PM Pedro Algarvio notifications@github.com\nwrote:\n\nPlanning on releasing soon?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/pull/809#issuecomment-410826091,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABugn-ucBJLp5GcwD6RBmK6ICvaMaMjPks5uOJlPgaJpZM4VwsiO\n.\n. This has been released as part of 1.10.5 \ud83c\udf89 . what does python3.7 -c 'print(\"hello world\")' say?. Looks like your python3.7 is misconfigured / not installed.\n\nI haven't worked much with pyenv myself but I believe you need to do something like pyenv install 3.7.0 and pyenv global 3.7.0 (or something of the sort? maybe the second one isn't necessary?)\npre-commit itself doesn't have any direct integration with pyenv, though it is known to work with it fine as long as you have things set up properly -- notably, pre-commit will call virtualenv -p $language_version and if the python referenced by language_version isn't functional -- well then you'll see what you're seeing \ud83d\ude06 . closing this since this is likely an issue with your setup @cancan101 \nIf it's not, feel free to comment / reopen!. Looks like pytest strict mode? The markers are left over from when the test suite was split and don't provide any benefits now. Feel free to remove those :)\n(probably check your environment for PYTEST env vars, those are probably turning on strict mode) . whichever you want to do is fine with me :) (either this PR or new PR). Thanks for the awesome PR!. additional_dependencies is only supported on actual languages (as it needs to know how to install).\nFrom system:\n\nThis hook type will not be given a virtual environment to work with \u2013 if it needs additional dependencies the consumer must install them manually.. pre-commit will only install things into places it manages: the isolated virtualenvs in ~/.cache/pre-commit.  For pylint, this would require language: python.  Since pylint does dynamic analysis (it needs to effectively import your code to properly lint it) it's often better to manage pylint outside of pre-commit and use a local hook.  \n\nHere's the current \"centralized\" information dump about pylint+pre-commit: https://github.com/pre-commit/pre-commit-hooks/issues/157. Hope this answered your question, if there's more to answer here please reply and I'll reopen.\nThanks for the issue \ud83c\udf89!. There are no current plans (nor anything implemented that I know of) but I'm not opposed to the idea. If you want to hack on something I can add a repo to the org for editor plug-ins! . Let's continue the discussion here instead: https://github.com/pre-commit/pre-commit.github.io/issues/185. I believe you may be looking for local hooks?\nIn your case you probably also want always_run: true and pass_filenames: false though you'll know best! . @splnanthakumar did this help? anything more I can help you with?. As I stated above, you probably want pass_filenames: false (by default pre-commit will pass the changed filenames as positional arguments). I'd like to understand your usecase more before considering this.\nCurrently the framework is intentionally \"take filenames, pass them to hooks\" and doesn't really concern itself with what the hooks do.\nThat said, I personally think \"linting partial diffs\" isn't a reasonable goal and for the most part the current hook implementations agree (one two exceptions -- but for good reasons).  Most of my resistance comes from the following reasoning:\n\nPartial linting leads to inconsistency, new code doesn't look like old code which is almost worse\nMove the code? haha sucks to be you now you get to reformat it\nIf someone bypasses the hooks (via SKIP or (hopefully not) --no-verify) then it is easy to sneak in new bad code\nWhat to do during commit of conflict resolution?  Lint all three places that could be introducing code?\n\nI do understand the want to incrementally introduce new linting -- and the framework gives you the ability to do that as long as you're opting in file-by-file (through either files or exclude (the latter is easier to incrementally apply as new files will be required to adhere by default).  And then you either fix file-by-file or directory-by-directory or however you want to approach it.\nCurious to hear your thoughts on this!\nAlso note that pygrep is intended to be dead simple so I'm also hesitant to add complexity there :). Sounds like you should be doing ast-based checks instead and then you can have fewer false positives.\nI'm going to reject this feature for now but keep this as a data point for potential future implementation.\nThanks for the issue!. Hmm that's odd, it's stashing the file? Can you provide git diff before you run that command? . oh I bet I know what's happening here!\nHere's how I can demonstrate your exact reproduction:\nStep 1: add and commit these\n.pre-commit-config.yaml\nyaml\nrepos:\n-   repo: https://github.com/chewse/pre-commit-mirrors-pydocstyle\n    rev: v2.1.1 \n    hooks:\n    - id: pydocstyle\nsetup.cfg\nini\n[pydocstyle]\nignore=\nmymod.py\npython\n\"\"\"A very good docstring.\"\"\"\nStep 2: Modify the contents to look like this but do not stage them\nsetup.cfg\nini\n[pydocstyle]\nignore=D100\nmymod.py\npython\ndef f():\n    pass\nIf you run git diff it should look like this:\ndiff\ndiff --git a/mymod.py b/mymod.py\nindex 0c8cd5a..4f28bc7 100644\n--- a/mymod.py\n+++ b/mymod.py\n@@ -1 +1,2 @@\n-\"\"\"A very good docstring.\"\"\"\n+def f():\n+    pass\ndiff --git a/setup.cfg b/setup.cfg\nindex d88917d..56565bf 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,2 @@\n [pydocstyle]\n-ignore=\n+ignore=D100,D103\nStep 3: commit just mymod.py\n```console\n$ git commit mymod.py\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/asottile/.cache/pre-commit/patch1535122114.\nVerifying PEP257 Compliance..............................................Failed\nhookid: pydocstyle\nmymod.py:1 at module level:\n        D100: Missing docstring in public module\nmymod.py:1 in public function f:\n        D103: Missing docstring in public function\n[INFO] Restored changes from /home/asottile/.cache/pre-commit/patch1535122114.\n```\nThis is working as intended, here's what's happening:\n\ngit commit mymod.py will only commit mymod.py and not other files in the working directory\n\npre-commit knows this, and so it sets the state of the checkout to that of what's being committed.  In this case, it temporarily undoes the changes to setup.cfg (you can verify this by peeking at th epatch file it creates):\ndiff\n$ cat /home/asottile/.cache/pre-commit/patch1535122114\ndiff --git a/setup.cfg b/setup.cfg\nindex d88917d..56565bf 100644\n--- a/setup.cfg\n+++ b/setup.cfg\n@@ -1,2 +1,2 @@\n [pydocstyle]\n-ignore=\n+ignore=D100,D103\n3. then the commit fails!\n\n\nIf that commit were to succeed (which many other frameworks get wrong) you'd have a commit which fails linting being committed! (which is kind of the point of pre-commit to prevent!).  In your case, make sure to git commit setup.cfg path/to/file.py and you should be good to go :)\nNote that the actual git hook just invokes pre-commit run (usually with no arguments) and not pre-commit run --files ....  pre-commit run --files ... is a convenience helper for commandline usage and avoids stashing.\nbonus Step 4: commit both files at once\nconsole\n$ git commit -m 'change!' mymod.py setup.cfg \nVerifying PEP257 Compliance..............................................Passed\n[master f38958b] change!\n 2 files changed, 3 insertions(+), 2 deletions(-). Yep totally expected! Don't want to commit things that are broken :)\nThanks for the issue :). Thanks a ton @jeffreyrack for this awesome PR \ud83c\udf89 \nHopefully I'll make a release this weekend, we'll see!. This has been released as part of v1.11.0! Thanks again!. Can you show your .pre-commit-config.yaml as well as your python version and how you're invoking pre-commit?\nWhat happens if you run git clone https://github.com/ambv/black.git outside of pre-commit?. That's the default behaviour unless you're using --verbose or verbose: true. no, it should always show the passed messaging. What's the motivation? My initial lean is -0. Unless you have a good reason I don't want to or plan on implementing this.\nComment back and I'll reopen though :). CC @blueyed\nEven if a commandline option were added (which I'm against -- the output is almost a branding at this point), there wouldn't be a way to set it since there aren't ways to pass through arguments from git. oops, meant to reopen -- should be open now. let's discuss.. that would change it for all users which I wouldn't want so I don't think that's an appropriate place to change this. I guess another option would be to set it during pre-commit install I forgot about this but we already have a precedent for an option there: https://github.com/pre-commit/pre-commit/blob/518a72d7e7598b71105fb764d990438c1b6d485a/pre_commit/resources/hook-tmpl#L20. I meant more that you'd have a QUIET option there which forwards along --quiet. In theory as long as your $XDG_CACHE_DIR is consistent and your host is consistent, you can zip up the ${XDG_CACHE_DIR:~/.cache}/pre-commit directory and move it to another machine.\nIf all of the repositories are set up, pre-commit will not access the network.\nAt lyft we do this via docker images where we essentially bake by doing (not exactly since we use source-to-image, but you can imagine):\n```dockerfile\nWORKDIR /code\nCOPY .pre-commit-config.yaml .\nRUN : \\\n    && git init . \\\n    && git add --all :/ \\\n    && pre-commit install-hooks\n...\nCOPY . .\n```\nWe then later run this image with docker run --net=none mysrv:precommit pre-commit run --all-files\nIn general though, the contents of ~/.cache/pre-commit aren't portable across machines unless those machines have identical package setups\nNote also that pre-commit is not just an installer of python packages and so a pass through of \"pip\" options is insufficient.. But yeah to answer your question, if the host and remote machines are running at the same path you can essentially do:\n```bash\nexport XDG_CACHE_DIR=\"/constant/path/to/cache\"  # or if your user has the same name\npre-commit install-hooks\nzip -r cache.zip \"$XDG_CACHE_DIR\"\nscp / rsync / whatever to remote machine\nunzip ...\n```\nBut anyway, yeah I don't have any interest implementing something like this in core, especially given how special cased and error prone it is.\n. docker might be another choice for a build environment.  And yeah the PIP_ environment variables are a good point.  pre-commit doesn't touch those so you should be good to use them.\nah yeah url.<base>.insteadOf is probably an idea too.\nEven if you don't set / change XDG_CACHE_DIR the important bit would be to make sure that the paths are consistent since virtualenvs contain absolute symlinks and full paths in shebangs.  Moving from macos to linux also won't work as the compile targets are pretty different.\nIf setting XDG_CACHE_DIR is problematic, there's an undocumented (but imo unlikely to change) environment variable that you can use to point pre-commit directly at a directory you control: PRE_COMMIT_HOME.  \nSo some full solution ideas:\nredirect git / pip / etc.\n\ntell git to clone from /path/to/repo/mirrors/... using url.<base>insteadOf (can probably set this in /etc/gitconfig\ntell pip to install from /path/to/wheelhouse/... with PIP_NO_INDEX + PIP_FIND_LINKS (can probably set these in /etc/environ so interactive session gets them)\nThe other languages might be more difficult to redirect, but if you're just working with python this should be sufficient\n\nprebuild the pre-commit cache on a remove machine and copy that in\n\nXDG_CACHE_DIR=... pre-commit install-hooks or PRE_COMMIT_HOME=... pre-commit install-hooks (the latter will be less likely to interfere with other programs)\ntar / zip / whatever the cache directory\nuntar / unzip / whatever the cache directory on the remote in the same location\nsource and destination have to be mostly equivalent machines, probably use docker or a VM or something to make sure they're the same\n\nuse a containerization solution\n\nmoving docker images around is much more likely to be portable, you can install the hooks into a docker image and run with --net=none in the DMZ. closing this for now -- @lowell80 if there's anything additional please comment and I can reopen!\n\nthanks again for the issue \ud83c\udf89 . I've seen this many-a-time with macos: #770 #631 #419 but never with centos.\nThe triage steps in those should help though, particuarly:\nbash\nwhich python3.6\nwhich virtualenv\nwhich pre-commit\nhead -1 $(which virtualenv)\nhead -1 $(which pre-commit)\nvirtualenv venv -ppython3.6\nI suspect this is a misconfiguration of either your python3.6 installation or your installation of virtualenv but without more information I'm unsure\n\noh, actually after looking at this I noticed this line:\nRunning virtualenv with interpreter /home/XXX/data/applications/anaconda3/bin/python3.6\nif I recall correctly conda does silly things that require its own patched virtualenv, I think you might be able to conda install pre-commit instead of pip and use it that way, that said conda integration is neither supported / maintained and so you're mostly on your own.\nhttps://github.com/pypa/virtualenv/issues/1051 for the upstream issue there. Sweet! good to hear. saltstack files aren't quite yaml though you could lint them as such (they're jinja templated yaml)\nyamllint uses types to select filenames.  types and files are ANDed.\nThere was some discussion on identify about identifying .sls files as yaml, but instead we made a new type for them.\nNote also that types: [yaml, salt] won't work (that'll never match anything) because types is also evaluated with AND.  When types_or becomes a thing then that'll be possible with type filtering.\nThe answer to how you can do what you want is to override the base types:\nyaml\n    -   id: yamllint\n        types: [file]\n        files: \\.(yaml|yml|sls)$. Cheers! Thanks for the issue :tada: . I believe you're looking for repository local hooks.  There's also pre-commit-mirror-maker for making wrapping repositories\nIdeally though, contributing the pre-commit metadata to upstreams is preferred as others can benefit from the configuration.. @petergaultney hope this answered your question! If not please comment below and I'll reopen.\nThanks for the issue \ud83c\udf89 . I think this is actually a bug with magit -- it shouldn't be invoking with a tty if it isn't actually a tty.  I'll look into this though.. I did some investigation of this on stream and can confirm, magit is calling this with a pty attached when it shouldn't be -- so this is definitely an upstream bug. @thisch yeah I'm banging away in https://github.com/magit/magit/issues/3549 -- some progress there it seems.\nIt also seems in the meantime you can use the magit-process-finish-apply-ansi-colors setting to have magit interpret the escapes itself.  I don't know how to use emacs so when I tried to set this I was pretty lost :laughing: . You have the wrong project, that's the node project by the same name. I'd start by searching for that package in the package manager you used to install it.  In this case npm:\n\nsearching google for \"npm pre-commit\"\nleads me to the npm page\nfrom that clicking on github\n\nNote that their package is entirely unrelated to ours, they do not have the same features or functionality.. yikes!  Thanks for the report I'll get a fix for this\nLooks like this was depending on the PARSEOPT mode of rev-parse which isn't the default. This is a regression introduced in v1.10.5. actually hmm, parseopt seems insufficient as well. #832 has a fix for this, turns out it's difficult to make rev-parse error on unknown options.  When I originally tried this I must have been outside a git directory or something :S. thanks for the report! I'll close this once I've merged the fix -- looks like I need to attend to some tests \ud83d\ude06 . This has been released as part of v1.11.1 -- thanks again for the issue \ud83c\udf89 . I can't reproduce \"IIRC, I didn't observe this issue with gitlint alone.\"\nHere's my session:\n```\n$ git commit\ngitlint: checking commit message...\n2: B4 Second line is not empty: \"asdf\"\n3: B5 Body message is too short (8<20): \"asdfasdf\"\n\ngitlint: Your commit message contains the above violations.\nContinue with commit anyways (this keeps the current commit message)? [y(es)/n(no)/e(dit)] n\nCommit aborted.\nYour commit message: \n\nasdf\nasdf\nasdf\nPlease enter the commit message for your changes. Lines starting\nwith '#' will be ignored, and an empty message aborts the commit.\n\nOn branch master\nChanges to be committed:\nnew file:   foo\n\nUntracked files:\nvenv/\n\n\n$ git commit\n```\nI'm then presented with:\n```\nPlease enter the commit message for your changes. Lines starting\nwith '#' will be ignored, and an empty message aborts the commit.\n\nOn branch master\nChanges to be committed:\nnew file:   foo\n\nUntracked files:\nvenv/\n\n```\nThere's nothing particularly special about how pre-commit invokes gitlint, as far as I know it should be the same in or out. Could be a neat little feature yeah!  Need to be sure it plays nicely if someone defines their own prepare-commit-msg hook and probably mesh with the rest of the framework but definitely sounds like a sharp edge in git that pre-commit could smooth over!. git does not allow passing through of arguments (for instance why SKIP is an environment variable).\nIf you always want to pass the argument there's args: [...] in the configuration, though it sounds like you want to ad-hoc send arbitrary arguments?\nAnother idea if you want to use a fixed command for lint and a different one for commit is to use the manual stage . . yep! sorry thought I linked it above: temporarily disabling hooks. If there's more to follow up on, please comment and I can reopen, thanks for the issue!. nothing really pre-commit can do about this it seems.  It's a bug with pip itself parsing black's pyproject.toml which contains UTF-8 characters (specifically on windows)\nSince it appears you're on windows setting LANG=C.UTF-8 probably won't help, you might try using python3.7 instead of python3.6 (which will default to UTF-8 mode!).. more context:\n- when virtualenv is released (hopefully later this week) with updated pip this should become magicallyfixed\n- a workaround is to use an older version of black which doesn't haven't this character.  18.6b4 appears to be the newest of these: example PR. upgrade to virtualenv>=16.1.0 (just released) and this is resolved.. By default, matching filenames are passed to the hooks as positional arguments.  You can turn this off with pass_filenames: false.\npre-commit implements a pure-python xargs which is overly timid to support windows.  There's plans in that linked issue to increase chunk size on posix platforms which can support longer argument strings, though no one has stepped up to implement it.  There's code hints in this comment if you wanted to tackle it!. I've used pre-commit run --files $filename myself w/ editors which works pretty well.  This does require that the file is written out beforehand \ud83e\udd37\u200d\u2642\ufe0f . @RonnyPfannschmidt can you reopen this on the docs repo? https://github.com/pre-commit/pre-commit.github.io. pre-commit works entirely on filenames today -- it could probably be made to support /dev/stdin / - (and skip filtering it against the checked in files)?  I'd have to see a pretty good reason for it though :) (and I'm not sure avoiding a disk flush is really going to save that much time). I can check this on windows when I'm at home -- another option is to use the https://modern.ie VMs. the last commit won't make a difference to the failing windows test unfortunately (the top of the file has from __future__ import unicode_literals)...\nThis is a wide vs narrow unicode problem as far as I can tell.  On wide python (python 3.x and python2.x when compiled right) len(u'\ud83d\ude11') == 1 -- on narrow: len(u'\ud83d\ude11') == 2.\nIt's unclear to me whether this actually matters for the windows apis (I can try locally if you'd like me to). It looks like this might be more complicated than I expected...\nnarrow python2.7 windows\n```pycon\n\n\n\nx = u'\\U0001f611'\nlen(x)\n2\nsubprocess.check_call(('echo', (x * 8190).encode('UTF-8')))\n\n\n\nprints bytes\n\n\n\nlen((x * 8190).encode('UTF-8'))\n32760\nsubprocess.check_call(('echo', b'x' + (x * 8190).encode('UTF-8')))\n\n\n\nprints bytes\n\n\n\nsubprocess.check_call(('echo', b'xx' + (x * 8190).encode('UTF-8')))\n...\nWindowsError: [Error 87] The parameter is incorrect\nsubprocess.check_call(('echo', b'xxxx', (x * 8189).encode('UTF-8')))\n\n\n\nprints bytes\n\n\n\nsubprocess.check_call(('echo', b'xxxxx', (x * 8189).encode('UTF-8')))\n...\nWindowsError: [Error 87] The parameter is incorrect\n```\n\n\n\nFrom this, it's actually bytes again :(\nAnd the bytes we have:\n\necho: 4\nb'x' + (x * 8190).encode('UTF-8'): 32761\n\ntotal: 32765 (+1 for space +1 for null byte => 32767)\nOr\n\necho: 4\nb'xxxx': 4\n(x * 8189).encode('UTF-8'): 32756\n\ntotal:\n32764 (+2 for spaces, +1 for null byte => 32767)\nwide python2.7 windows\nhmmm, apparently doesn't exist?\npython3.6 windows\n```pycon\n\n\n\nx = u'\\U0001f611'\nlen(x)\n1\nsubprocess.check_call(('echo', 'x' + x * 16380))\n\n\n\nprints smiles\n\n\n\nsubprocess.check_call(('echo', 'xx' + x * 16380))\n...\nFileNotFoundError: [WinError 206] The filename or extension is too long\nsubprocess.check_call(('echo', 'x' * 32761))\n\n\n\nprints a bunch of xs\n```\nHere we get a different answer, and actually I think this still makes sense to me:\n\necho: 4 characters\n'x' + x * 16380: 16381 characters (but most of those are emojis)\n\nBut, windows apis are UTF16 (really when converting arguments above, pre-commit should probably be using UTF16 maybe?)\nto get the length of \"characters\" according to windows:\n```pycon\n\n\n\nlen(('x' + x * 16380).encode('utf-16le')) // 2\n32761\n```\n\n\n\nwhich + 4 + 1 + 1 gets us back to 32767\nconclusion\nI don't have a conclusion, but I do believe I've opened a can of worms -- I'm really sorry this is so complicated and messy.\n. Looking at the options in python2, there doesn't appear to be a good choice for encoding the arguments.  The python C apis require bytes, and any encoding that I picked seems to end in mojibake :( -- it's actually probably fine that we're encoding to UTF-8 there and then querying length.\nIn python3 on windows though, it looks like we should first .encode('utf-16le') and then query len(...) // 2.\nIt also appears that the environ headroom requirement doesn't apply on windows \ud83e\udd37\u200d\u2642\ufe0f . Support is tricky, I don't plan to support it in the framework but will continue to allow hooks to be implemented in whatever they want.  I don't think there's actually a correct solution in python2 for passing non-ascii arguments to subprocesses so I'm completely ok with that being a python2 limitation (in short: mojibake fine, crash not fine).. Oh shoot I totally forgot about this, I'll try this on windows tonight and hopefully merge!. Thanks again for the PR, sorry this was so much more complicated than I thought :S. This has been released as part of v1.13.0 :tada:. It's not just that, is there a direct replacement for https://github.com/pre-commit/pre-commit/blob/c0b1f2ff25b53efcfa03098f2b4cb90ded905063/pre_commit/constants.py#L21. Nothing personal, but I'm not going to use setuptools-scm, it seems a bit over engineered for what equates to writing a text file.\nThere's three parts here that need solving:\n- self-referential version number\n- resource files\n- version comparison\nThe first can reasonably be solved with writing a version number at install time, I really don't want to get setup_requires (eggs) involved.\nThe second is a bit trickier, maybe importlib_resources? (backport of 3.7 package) -- that pulls in a lot of dependencies for something that to me seems like it should be simple.  Should I care to support eggs and zipimport as distribution methods for pre-commit? Should I require consumers to use pip (or equivalent)?\nThe third is by far the easiest, pre-commit doesn't have any complicated version numbers (yet, and I don't plan on it) and really it can be replaced with map(int, s.split('.')). and hmm, even setuptools-scm suggests using pkg_resources: https://github.com/pypa/setuptools_scm#setuppy-usage. A couple of questions here so I'll address them separately:\nWhat does the types tag \"directory\" do?\nFrom pre-commit.com#Filtering files with types:\n\ndirectory - in the context of pre-commit this will be a submodule\n\nGit only provides a list of changed files to pre-commit- but what if I am trying to run a pre-commit hook on a sub-directory from which a changed file came from?\nHmm, I'm not sure what you mean here, maybe something like this?\n\nmy repo has files: dir1/f.py dir2/f.py dir3/f.py\nI have a hook which takes a directory (weird, but I'll run with it?)\nwhen dir2/f.py changes I want to run myhook dir2 (still weird, but ok)\n\npre-commit itself does not have direct support for dynamically passing directories to hooks.  You can make it happen with a shim script or by manually specifying it and then specifying pass_filenames: false.  Here's either of those:\n```yaml\nfirst a shim script\n-   id: myhook\n    entry: bash -c 'echo \"$@\" | xargs -n1 dirname | xargs -n1 myhook' --\n\nsecond as a hook which doesn't pass filenames\n-   id: myhook\n     entry: myhook dir1\n     pass_filenames: false\n     files: ^dir1/\n\n```\nIs there a way to utilize capture groups in the associated regex that defines each hook?\nnope!. Awesome! Let me know what you come up with :) -- I don't think there's anything left here though am I ok to close the issue?. No problem :) I tagged it for you!\nThanks again for the issue \ud83c\udf89 . You'll want to check out the mirrors-isort README -- in particular the bit about seed-isort-config. are you using a src layout? the readme covers using --application-directories. no problem! Thanks for the issue \ud83c\udf89 . how do you have seed-isort-config configured? can you paste the output and the commands you're running?. for ./src layout, you want --application-directories=src (and then you won't need known_first_party at all!). yeah isort is a strange beast -- why I personally avoid it ;). heh, they're the same as seed-isort-config -- so --application-directories=src again \ud83d\ude06 . I guess I should add that to the README shouldn't I. cheers!  thanks again :D. can you provide a reproduction? as far as I know it's working as expected. couldn't reproduce this initially but now I've got a case where this happens.  fix coming up!. want to try out the branch in #844?. sweet, good to hear -- I'll make a release!. This has been released as part of v1.11.2 -- thanks again for the issue \ud83c\udf89 . if you use --files or --all-files this limitation is lifted.\nThe reason this was added is the first thing pre-commit does is remove any unstaged changes so that it is only linting the things you have checked in. and by removing unstaged changes, it would remove your modifications to .pre-commit-config.yaml leading to very confusing results ;). yep! totally understand that, here's what would have happened if that error message didn't fire:\n\nit would have stashed the .pre-commit-config.yaml's contents and blown away your modifications\nthen only ran linters against the staged files\n\nwhen what you probably wanted was to run pre-commit run --all-files to test that your modifications to the configuration applied the inclusion / exclusion correctly.\nthe zero-args pre-commit (or pre-commit run) ~roughly mimics what would be run as a side-effect of git commit.. Even better would be to contribute the metadata to bandit itself! (as has been done with black, prettier, talisman, etc.) . @KPilnacek this is awesome, thanks for putting in the work for this!\nhttps://github.com/pre-commit/pre-commit.github.io/pull/188 will make it appear on the website :tada: . You're correct that pre-commit run / pre-commit try-repo don't really have a methodology for setting args: [...] for a hook.\nhow I usually do this\nThe way I usually attempt this workflow is to first run pre-commit try-repo:\n(for example)\nconsole\n$ pre-commit try-repo https://github.com/asottile/pyupgrade\n[INFO] Initializing environment for https://github.com/asottile/pyupgrade.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: https://github.com/asottile/pyupgrade\n    rev: 1db939202cdafbd1c144e165157cd4fffc8520c9\n    hooks:\n    -   id: pyupgrade\n===============================================================================\n[INFO] Installing environment for https://github.com/asottile/pyupgrade.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\npyupgrade............................................(no files to check)Skipped\nFrom that, I would copy out the sample configuration that it spits out, modify it, and write it to .pre-commit-config.yaml:\nyaml\nrepos:\n-   repo: https://github.com/asottile/pyupgrade\n    rev: 1db939202cdafbd1c144e165157cd4fffc8520c9\n    hooks:\n    -   id: pyupgrade\n        # manual modifications vvv\n        args: [--py3-plus]\nAnd then use pre-commit run after that.\n(If you don't want to clobber your own .pre-comit-config.yaml file you can always write it to a different file and then use pre-commit run --config ... ...)\npotential features to make this easier\nSo I don't want to add an --args option to pre-commit run directly because it usually won't make any sense (you'd want to use the checked in configuration).  I do think it is potentially useful for pre-commit try-repo, however there's a potential oddity that I'm not sure about: pre-commit try-repo will run every hook in the remote repository.  Passing --args on to all of the hooks will almost always fail.\nIf there's a potential feature here, it would have to be limited to the case where pre-commit try-repo is invoked with a particular hook in mind (pre-commit try-repo https://github.com/asottile/pyupgrade pyupgrade --args=...) for instance.  Then there's a decision about the ergonomics of the --args command.  Would it be --args 1,2,3 and then comma splitting (and escaped commas, bleh) or something like --args 1 2 3 ... (using nargs='+') though this often ends up with parsing ambiguities (especially when the arguments are very likely to be --dashed themselves).  Probably gets complicated quickly -- might not be worth implementing for the complexity.\nLet me know your thoughts on this :). Cheers!  Thanks for the issue. > Guess I should increase the elapsed duration... or just delete the test.\n\ud83d\udd2a \ud83d\ude06 . hmmm, one other thing I thought about is this is probably going to make the test suite hard to debug with pdb \ud83e\udd14 . a few little things I want to touch up, then I'll merge.  thanks for the implementation on this, this is great.\nAre there any hooks that we should stick into the serial path? maybe flake8 since it also does multiprocessing? any others?. I'm excited and terrified for this feature \ud83c\udf89 \npushed my cleanups, will merge after CI finishes. This has been released as part of v1.13.0 :tada:. $ virtualenv venv >& /dev/null && venv/bin/pip install pre-commit >& /dev/null && venv/bin/pip freeze | grep importlib\nimportlib-metadata==0.6\nimportlib-resources==1.0.1\nseems to for me -- how are you installing pre-commit?. I made sure to test pip all the way back to version 1.5.6 and they all succeed in installing pre-commit w/ importlib-resources.. hmm maybe conda?  @nicoddemus I believe handles that <3. yeah this seems to be missing importlib-resources for python < 3.7, not sure how conda specifies that but that's probably the issue? https://github.com/conda-forge/pre_commit-feedstock/blob/75fa41f37eb75a7738cdbf01134529ede65636aa/recipe/meta.yaml. @naeioi cool, I've created an issue on the feedstock recipe for pre-commit, please follow along there (I don't maintain that!): https://github.com/conda-forge/pre_commit-feedstock/issues/16\nThanks again for the issue :tada: . Hmm, I suspect a very old version of setuptools is to blame?  It seems to be failing to build importlib-resources / importlib-metadata from source. yeah setuptools that ships with trusty is too old.  I'd suggest using a virtualenv or upgrading setuptools.\nWith a virtualenv you can ~simulate a global installation:\nbash\nvirtualenv /venv -ppython3\n/venv/bin/pip install pre-commit\nexport PATH=/venv/bin:$PATH\nwith docker:\ndockerfile\nENV PATH=/venv/bin:$PATH\nRUN virtualenv /venv && pip install pre-commit\n(+/- some upgrading / downgrading of setuptools)\nIt also appears that importlib-resources doesn't have the right metadata to support python3.4, so you might also need to pip3 install typing to make it work.\nAfter upgrading setuptools I was able to get it to install properly:\n```\nroot@d4fb71459e0b:/# pip3 install pre-commit\nDownloading/unpacking pre-commit\n  Downloading pre_commit-1.12.0-py2.py3-none-any.whl (147kB): 147kB downloaded\nRequirement already satisfied (use --upgrade to upgrade): cfgv>=1.0.0 in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): cached-property in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): six in /usr/lib/python3/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): virtualenv in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): nodeenv>=0.11.1 in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): identify>=1.0.0 in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): aspy.yaml in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): pyyaml in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nDownloading/unpacking importlib-resources; python_version < \"3.7\" (from pre-commit)\n  Downloading importlib_resources-1.0.1.tar.gz\n  Running setup.py (path:/tmp/pip_build_root/importlib-resources/setup.py) egg_info for package importlib-resources\n    warning: no previously-included files found matching '.gitignore'\n    no previously-included directories found matching 'build'\n    no previously-included directories found matching '.tox'\nRequirement already satisfied (use --upgrade to upgrade): importlib-metadata in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): toml in /usr/local/lib/python3.4/dist-packages (from pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): setuptools in /usr/local/lib/python3.4/dist-packages (from importlib-resources; python_version < \"3.7\"->pre-commit)\nRequirement already satisfied (use --upgrade to upgrade): wheel in /usr/lib/python3/dist-packages (from importlib-resources; python_version < \"3.7\"->pre-commit)\nInstalling collected packages: pre-commit, importlib-resources\n  Running setup.py install for importlib-resources\n    warning: no previously-included files found matching '.gitignore'\n    no previously-included directories found matching '.tox'\n  Could not find .egg-info directory in install record for importlib-resources; python_version < \"3.7\" (from pre-commit)\nSuccessfully installed pre-commit importlib-resources\nCleaning up...\nroot@d4fb71459e0b:/# pre-commit --help\nTraceback (most recent call last):\n  File \"/usr/local/bin/pre-commit\", line 7, in \n    from pre_commit.main import main\n  File \"/usr/local/lib/python3.4/dist-packages/pre_commit/main.py\", line 11, in \n    from pre_commit import git\n  File \"/usr/local/lib/python3.4/dist-packages/pre_commit/git.py\", line 7, in \n    from pre_commit.error_handler import FatalError\n  File \"/usr/local/lib/python3.4/dist-packages/pre_commit/error_handler.py\", line 12, in \n    from pre_commit import output\n  File \"/usr/local/lib/python3.4/dist-packages/pre_commit/output.py\", line 7, in \n    from pre_commit.util import noop_context\n  File \"/usr/local/lib/python3.4/dist-packages/pre_commit/util.py\", line 22, in \n    from importlib_resources import open_binary\n  File \"/usr/local/lib/python3.4/dist-packages/importlib_resources/init.py\", line 25, in \n    from importlib_resources._py3 import (\n  File \"/usr/local/lib/python3.4/dist-packages/importlib_resources/_py3.py\", line 12, in \n    from typing import Iterable, Iterator, Optional, Set, Union   # noqa: F401\nImportError: No module named 'typing'\nroot@d4fb71459e0b:/# pip3 install typing\nDownloading/unpacking typing\n  Downloading typing-3.6.6-py3-none-any.whl\nInstalling collected packages: typing\nSuccessfully installed typing\nCleaning up...\nroot@d4fb71459e0b:/# pre-commit --help\nusage: pre-commit [-h] [-V]\n                  {install,install-hooks,uninstall,clean,autoupdate,migrate-config,run,sample-config,try-repo,help}\n                  ...\npositional arguments:\n  {install,install-hooks,uninstall,clean,autoupdate,migrate-config,run,sample-config,try-repo,help}\n    install             Install the pre-commit script.\n    install-hooks       Install hook environments for all environments in the\n                        config file. You may find pre-commit install\n                        --install-hooks more useful.\n    uninstall           Uninstall the pre-commit script.\n    clean               Clean out pre-commit files.\n    autoupdate          Auto-update pre-commit config to the latest repos'\n                        versions.\n    migrate-config      Migrate list configuration to new map configuration.\n    run                 Run hooks.\n    sample-config       Produce a sample .pre-commit-config.yaml file\n    try-repo            Try the hooks in a repository, useful for developing\n                        new hooks.\n    help                Show help for a specific command.\noptional arguments:\n  -h, --help            show this help message and exit\n  -V, --version         show program's version number and exit\n``\n. the weirdness withpip` appears to be the debian patches.  I'd suggest a virtualenv even more :)\nI'm wrong above about the incorrect metadata -- it does appear correct. This would solve the issue btw: https://gitlab.com/python-devs/importlib_resources/issues/67. even better would be to nudge importlib-resources maintainers to make a wheel available on pypi CC @warsaw @brettcannon. Upstream uploaded a wheel (1.0.1) -- this should be fixed now :tada: . types and files are evacuated with and. types will limit to .yaml / .yml and then that'll never match your files expression.\nSetting types: [files]  (to override the base manifest) will do what you want. oops yeah you're right, I tapped that out on my phone sorry for the typo :D\nAnd thanks for the issue \ud83c\udf89 . yep! It's called out in filtering files with types. via #857 . This has been released as part of v1.13.0 :tada:. Thanks for the PR! this is great :tada: \nwant to add a quick test (or let me know and I can help with this)? here's a ~similar scenario though in this case we'll need to not tag the latest commit and instead tag the commit before the .pre-commit-hooks.yaml gets introduced.. @runz0rd ping! any updates on this? I'd like to get this into the next release if possible :). basically just a test which verifies the behaviour in the ticket.\nI think this covers it?\n```diff\ndiff --git a/tests/commands/autoupdate_test.py b/tests/commands/autoupdate_test.py\nindex 3bfb62e..be28b52 100644\n--- a/tests/commands/autoupdate_test.py\n+++ b/tests/commands/autoupdate_test.py\n@@ -260,6 +260,22 @@ def test_autoupdate_tags_only(tagged_repo_with_more_commits, in_tmpdir, store):\n         assert 'v1.2.3' in f.read()\n+def test_autoupdate_latest_no_config(out_of_date_repo, in_tmpdir, store):\n+    cmd_output('git', '-C', out_of_date_repo.path, 'rm', '-r', ':/')\n+    cmd_output('git', '-C', out_of_date_repo.path, 'commit', '-m', 'rm')\n+\n+    config = make_config_from_repo(\n+        out_of_date_repo.path, rev=out_of_date_repo.original_rev,\n+    )\n+    write_config('.', config)\n+\n+    ret = autoupdate(Runner('.', C.CONFIG_FILE), store, tags_only=False)\n+    assert ret == 0\n+    with open(C.CONFIG_FILE) as f:\n+        assert out_of_date_repo.original_rev in f.read()\n+\n+\n @pytest.fixture\n def hook_disappearing_repo(tempdir_factory):\n     path = make_repo(tempdir_factory, 'python_hooks_repo')\n``. ah yeah the bit about tagging,pre-commitby default will search for the latest tagged revision on a branch and prefer that over commits past that (unless you use--bleeding-edge`).  In this case, it's broken whether or not there's newer commits.  Let me adjust that test :). I've updated the patch above :). I think you can just take the test I wrote above and you won't need another one.  It fails right now, and I think (?) it passes after your change. oh true, oops\nreorder the statements in the test so the git operations are after the write_config call?. Oops! I forgot to click the merge button!\nThanks again for the contribution it is greatly appreciated :) \ud83c\udf89 . This has been released as part of v1.13.0 :tada:. Your analysis of git status is correct, but that's not how pre-commit runs.\nAt the beginning of the run, pre-commit switches to the root of your repo and uses the full relative paths. If you're having trouble convincing yourself, it's quite easy to demonstrate:\n```console\n$ tree .\n.\n\u251c\u2500\u2500 bar\n\u2514\u2500\u2500 t\n    \u2514\u2500\u2500 foo\n1 directory, 2 files\n$ cat .pre-commit-config.yaml\n-   repo: local\n    hooks:\n    -   id: echo\n        name: echo\n        entry: echo\n        language: system\n$ pre-commit run --verbose\n[echo] echo..............................................................Passed\nhookid: echo\nbar t/foo\n$ cd t\n$ pre-commit run --verbose\n[echo] echo..............................................................Passed\nhookid: echo\nbar t/foo\n``. cheers \ud83c\udf89  thanks for the issue!. I don't think you ever want to runpre-commit run --all-filesas the side-effect of a commit -- it simply would take too long and would get triggered unintentionally all the time.  Consider the all-too-common case in python where everything is configured intox.ini(orpyproject.toml, or even.pre-commit-config.yaml`) -- any change to those files would essentially trigger a full run against the repository.\nIf you're changing the configuration you should probably take the responsibility of running against all files manually (or hook an --all-files run through CI.. So in short, I don't think this is a good idea to implement.  Sweeping repository changes should be done intentionally and not accidentally.  The current expectation is that if you don't change a file as part of a commit it won't be linted and I'd like to keep it that way.\nThanks for the issue nonetheless, it is a good thought but I don't think it fits well with the ergonomics of the tool.. Hmmm, the three dots here are supposed to avoid merge commits.\nI'm also not sure:\n1. how this feature would be configured\n    - top level configuration value?\n    - refspec?\n2. that it's a good idea\n    - even with a branch name, how would pre-commit know where to generate the diff from?\n    - what if that branch doesn't exist locally?\n    - what if that branch does exist locally but is out of date?\n    - what if the fetched version of the remote branch is out of date?\n    - what if someone is pushing to that named branch?\nand I really don't think I'd want to take on that complexity for a feature that would only be used very rarely (pre-push already doesn't see all that much use as it is).  It would likely be broken very easily :(\nSo basically: convince me this is a problem worth fixing, convince me it'll not add significant complexity / special snowflakes, convince me it can't (easily) be done in hooks themselves :). The way you describe it should already be the existing behaviour.\nSince the commits in develop already exist on the remote, it should only notice the difference between those not pushed and those that you're pushing.  Can you provide an example showing that not being the case?. I had trouble following your example so I created a script:\nscript\n```bash\n!/usr/bin/env bash\nset -euxo pipefail\nrm -rf upstream clone\ngit init upstream\ngit -C upstream commit --allow-empty -m 'Initial commit'\ngit -C upstream config receive.denyCurrentBranch ignore\ngit clone upstream clone\ncd clone\ncat > .pre-commit-config.yaml <<EOF\nrepos:\n-   repo: local\n    hooks:\n    -   id: echo\n        name: echo\n        entry: echo\n        verbose: true\n        language: system\n        stages: [push]\nEOF\ngit add .pre-commit-config.yaml\npre-commit install -t pre-push\ngit commit -m \"Add push\"\ngit push origin HEAD\ntouch master_only_file\ngit add master_only_file\ngit commit -m \"Add master_only_file\"\ngit push origin HEAD\ngit checkout origin/master^ -b bar\ntouch bar\ngit add bar\ngit commit -m \"Add bar\"\ngit merge origin/master --no-edit\ngit log --oneline --graph --decorate\n: merge base\nmb=\"$(git merge-base origin/master HEAD)\"\ngit diff \"${mb}\" HEAD --name-only\n: commits to push\ngit rev-list HEAD --topo-order --reverse --not --remotes=origin |\n    xargs git show\n: source vs origin calculation\nfirst_ancestor=$(\n    git rev-list HEAD --topo-order --reverse --not --remotes=origin |\n    head -1\n)\nsource=\"$(git rev-parse \"${first_ancestor}^\")\"\ngit show \"${source}\"\ngit diff --name-only \"${source}...HEAD\"\ngit push origin HEAD\n```\noutput\n```console\n$ bash t.sh\n+ rm -rf upstream clone\n+ git init upstream\nInitialized empty Git repository in /tmp/t/upstream/.git/\n+ git -C upstream commit --allow-empty -m 'Initial commit'\n[master (root-commit) 50bebbc] Initial commit\n+ git -C upstream config receive.denyCurrentBranch ignore\n+ git clone upstream clone\nCloning into 'clone'...\ndone.\n+ cd clone\n+ cat\n+ git add .pre-commit-config.yaml\n+ pre-commit install -t pre-push\npre-commit installed at /tmp/t/clone/.git/hooks/pre-push\n+ git commit -m 'Add push'\n[master 625ef71] Add push\n 1 file changed, 9 insertions(+)\n create mode 100644 .pre-commit-config.yaml\n+ git push origin HEAD\necho.....................................................................Passed\nhookid: echo\n.pre-commit-config.yaml\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 354 bytes | 354.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo /tmp/t/upstream\n   50bebbc..625ef71  HEAD -> master\n+ touch master_only_file\n+ git add master_only_file\n+ git commit -m 'Add master_only_file'\n[master bbcf4f2] Add master_only_file\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 master_only_file\n+ git push origin HEAD\necho.....................................................................Passed\nhookid: echo\nmaster_only_file\nCounting objects: 3, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 306 bytes | 306.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo /tmp/t/upstream\n   625ef71..bbcf4f2  HEAD -> master\n+ git checkout 'origin/master^' -b bar\nSwitched to a new branch 'bar'\n+ touch bar\n+ git add bar\n+ git commit -m 'Add bar'\n[bar 90ef098] Add bar\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 bar\n+ git merge origin/master --no-edit\nMerge made by the 'recursive' strategy.\n master_only_file | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 master_only_file\n+ git log --oneline --graph --decorate\n   aabbc0a (HEAD -> bar) Merge remote-tracking branch 'origin/master' into bar\n|\\\n| * bbcf4f2 (origin/master, origin/HEAD, master) Add master_only_file\n | 90ef098 Add bar\n|/\n 625ef71 Add push\n 50bebbc Initial commit\n+ : merge base\n++ git merge-base origin/master HEAD\n+ mb=bbcf4f2e695bf186b7af76f49ec288e068ad804e\n+ git diff bbcf4f2e695bf186b7af76f49ec288e068ad804e HEAD --name-only\nbar\n+ : commits to push\n+ git rev-list HEAD --topo-order --reverse --not --remotes=origin\n+ xargs git show\ncommit 90ef098415b3069e676bde710e9885243b02b0bc\nAuthor: Anthony Sottile asottile@umich.edu\nDate:   Mon Nov 12 11:20:31 2018 -0800\nAdd bar\n\ndiff --git a/bar b/bar\nnew file mode 100644\nindex 0000000..e69de29\ncommit aabbc0a9e4f1c3b60b0d93d4fd977efb8f8bf996 (HEAD -> bar)\nMerge: 90ef098 bbcf4f2\nAuthor: Anthony Sottile asottile@umich.edu\nDate:   Mon Nov 12 11:20:31 2018 -0800\nMerge remote-tracking branch 'origin/master' into bar\n\n\n: source vs origin calculation\n++ head -1\n++ git rev-list HEAD --topo-order --reverse --not --remotes=origin\nfirst_ancestor=90ef098415b3069e676bde710e9885243b02b0bc\n++ git rev-parse '90ef098415b3069e676bde710e9885243b02b0bc^'\nsource=625ef7124a9b348855de5c34caa7cbced08cf011\n\ngit show 625ef7124a9b348855de5c34caa7cbced08cf011\ncommit 625ef7124a9b348855de5c34caa7cbced08cf011\nAuthor: Anthony Sottile asottile@umich.edu\nDate:   Mon Nov 12 11:20:30 2018 -0800\nAdd push\n\n\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nnew file mode 100644\nindex 0000000..79a4a6f\n--- /dev/null\n+++ b/.pre-commit-config.yaml\n@@ -0,0 +1,9 @@\n+repos:\n+-   repo: local\n+    hooks:\n+    -   id: echo\n+        name: echo\n+        entry: echo\n+        verbose: true\n+        language: system\n+        stages: [push]\n+ git diff --name-only 625ef7124a9b348855de5c34caa7cbced08cf011...HEAD\nbar\nmaster_only_file\n+ git push origin HEAD\necho.....................................................................Passed\nhookid: echo\nbar master_only_file\nCounting objects: 4, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 523 bytes | 523.00 KiB/s, done.\nTotal 4 (delta 1), reused 0 (delta 0)\nTo /tmp/t/upstream\n * [new branch]      HEAD -> bar\n```. If we do this at all, I don't want a configuration value.  If you can find a way to improve the push routine or revision differencing to determine this I'd be happiest with that.. CC @chriskuehl - - @Dunedan is this a repo we can come and poke? . I think we want to keep with as deterministic as possible. It was changed in https://github.com/pre-commit/pre-commit/pull/767. deterministic shuffling I guess wouldn't be the worst.  though I can see it being confusing when adding / removing a file with mypy :man_shrugging: . The most common cases are probably python hooks. On Linux this is bare minimum 100ms startup cost per process (no imports) but often more (2-300 ms). On windows the problem is much much worse often taking 3-500 ms.  I think we want to minimize startup as much as possible.\nIf deterministic shuffling solves this, let's do it. . I kinda think this is a blocker for the next release -- I think deterministic shuffling is probably the \"best\" we can do here, should I/we/you/someone implement that?. ah yes, I've been meaning to address this but didn't have a new enough version of pip to test with.\nActually, now that I look at it, I thought I had torn out the bit that was previously preventing it: a5b56bd9e3062582f8e133999a7ffae7258d8cae\nDo flit / pyproject.toml projects need anything more than just pip install .?  (if not, they should probably already work? maybe just needs to upgrade virtualenv alongside pre-commit?). That pip version comes from the whatever virtualenv version you have installed (virtualenv --version) -- for instance for virtualenv 16.1.0 you'd get pip 18.1\nThough if you're using python_venv -- I think it's based on whatever version of pip is bundled with your python installation -- less familiar with how that works though tbh. mmmm that would do it then :(\nI wonder if it's worth rolling our own pep 517 support or waiting until pip fills the gap \ud83e\udd14 . the pip version you'll get is based on the virtualenv alongside pre-commit.  For instance:\nconsole\nasottile@wat~$ $(head -1 $(which pre-commit) | cut -d'!' -f2) -m virtualenv --version\n16.1.0\nbut yeah, even with latest virtualenv=>latest pip, it still gives me the second output you have above.  I do think pre-commit could (for now) implement isolated build, and then rip it out when pip supports it natively.. heck, pre-commit already depends toml + virtualenv so the dependencies are already there \ud83d\ude06 . you can, but then you can't share the hook metadata nicely.  For instance pytest does this for rst-lint -- I do this for rubocop -- docs mention this briefly here. Since I think the answer here is \"wait until pip supports it, and then wait until the next virtualenv release\" and there's nothing to do from the pre-commit side, I'm going to close this.  It'll eventually fix itself as we don't lock down the version of virtualenv.\nThanks for the issue :tada:, looking forward to seeing this land in pip!. Sorry was away from a computer today :)\nIt's still odd that there was a version installed that mismatched with the dependencies -- I wonder if black was mistagged at some point with the missing dependency and you happened to install a broken version? \ud83e\udd14 \n@chriskuehl's response is spot on too -- there's just a few things I'd add.  There's an open issue on black suggesting a change in verbiage around the suggested pre-commit configuration.  A few suggestions have been made there but it hasn't really moved forward/backward yet as far as I know.  There's also a section in the docs which addresses the mutable refs bits -- of course it's not super helpful until you've known you need to know it (this sentence is a trainwreck but I hope you know what I'm trying to say).\nAnyway, roundabout blabbering from me \ud83d\ude43 -- thanks again for this issue -- very detailed and helpful \ud83c\udf89 . This has been released as part of v1.14.0 \ud83c\udf89 . Simply list the hook twice:\nyaml\n-   repo: https://github.com/adrienverge/yamllint\n    rev: ...\n    hooks:\n    -   id: yamllint\n        args: [--strict]\n        # ...\n    -   id: yamllint\n        # .... assuming this is handled -- thanks for the issue :tada:  -- feel free to comment and I can reopen. there isn't a way currently. pre-commit run (with no additional arguments) only runs against currently staged files. The meaning of -v is also clarified in that link: ^. what does give you?\nbash\n$(head -1 $(which pre-commit) | cut -d'!' -f2) -mvirtualenv venv -p python3.7\nFor example for me:\nconsole\n$ $(head -1 $(which pre-commit) | cut -d'!' -f2) -mvirtualenv venv -p python3.7\nRunning virtualenv with interpreter /usr/bin/python3.7\nUsing base prefix '/usr'\n/home/asottile/opt/venv/lib/python3.6/site-packages/virtualenv.py:1041: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses\n  import imp\nNew python executable in /home/asottile/workspace/venv/bin/python3.7\nAlso creating executable in /home/asottile/workspace/venv/bin/python\nInstalling setuptools, pip, wheel...done.. Also:\ncd / && python3.7 --version --version\nFor me:\n$ cd / && python3.7 --version --version\nPython 3.7.1 (default, Oct 21 2018, 04:01:51) \n[GCC 7.3.0]. try hash -r before which pre-commit maybe? (might explain the which oddness).\nI think configuring pyenv with global is the right way to go, at least every time I've configured pyenv that's what I've done -- haven't seen any negatives (only positives, that as long as the shims dir is on your path the pythonX.X executables actually work!).\nAs for gui apps, I'm not sure how to make them work -- I suspect all you need is to prefix the PATH \"globally\" somehow :man_shrugging: \nAnything left to address here or are we good to close this? :). I believe you're looking for language_version? . SKIP=... is the intended mechanism for this.\nI don't want to add any interactivity to pre-commit (not just because it's complex, but I just find tools that are interactive clunky) so I won't be implementing this.\nThanks nonetheless for the issue!. Additionally, githooks aren't handed a tty:\n```bash\ncat > .git/hooks/pre-commit <<EOF\n!/usr/bin/env python\nimport sys; print(sys.stdin.isatty())\nEOF\nchmod +x .git/hooks/pre-commit\ngit commit --allow-empty -m hi\n```\n...\n$ git commit --allow-empty -m hi\nFalse\n[master 24ce234] hi. - git does not provide an interactive stdin as shown here\n- hooks are not run with stdin hooked up (the output of pre-commit could not be in the order it is today with that, I have no intention to change that output)\nso this isn't possible to implement.. I'm not understanding, could you explain?\nrepo: local hooks are run in identical ways to .pre-commit-hooks.yaml hooks -- if you want to distribute a hook, provide it in a .pre-commit-hooks.yaml file.\nAll hooks are executed with the working directory at the root of the repository being linted.. given this was never clarified, I'm going to close this -- if you have additional information please comment and I'll reopen :). Can you show some output of language_version not working?  It does as far as I understand:\nyaml\n-   repo: local\n    hooks:\n    -   id: py3\n        name: py3\n        language: python\n        language_version: python3\n        entry: python --version\n        verbose: true\n        pass_filenames: false\n        always_run: true\n    -   id: py2\n        name: py2\n        language: python\n        language_version: python2\n        entry: python --version\n        verbose: true\n        pass_filenames: false\n        always_run: true\n    -   id: py35\n        name: py35\n        language: python\n        language_version: python3.5\n        entry: python --version\n        verbose: true\n        pass_filenames: false\n        always_run: true\n```\n$ pre-commit  run\npy3......................................................................Passed\nhookid: py3\nPython 3.6.7\npy2......................................................................Passed\nhookid: py2\nPython 2.7.15rc1\npy35.....................................................................Passed\nhookid: py35\nPython 3.5.6\n``. ah I see, wellpyenv` is neither portable nor fast so it's probably not going to happen\nFor now the documented requirement to use language_version for python is to have those available.. the tool is written in python so python is already available :man_shrugging: -- docker, go, rust, swift (and deprecated pcre to some extent) currently have the same limitation so it's not just limited to python here.. also pyenv doesn't even work without also installing another toolchain or two.  For example it requires an http downloader globally installed, and requires libssl-dev / gcc / etc. to be system installed on linuxes.\nThere aren't great binary distribution methods for python and building from source is a real struggle.  Distributions themselves are much better at providing a working binary. Do you have an example error message?  The current messaging that I get:\nyaml\n-   repo: local\n    hooks:\n    -   id: py38\n        name: py38\n        language: python\n        language_version: python3.8\n        entry: python --version\n        verbose: true\n        pass_filenames: false\n        always_run: true\n```\n$ pre-commit  run --all-files\n[INFO] Installing environment for local.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/home/asottile/opt/venv/bin/python3', '-mvirtualenv', '/home/asottile/.cache/pre-commit/repo7kvast7d/py_env-python3.8', '-p', 'python3.8')\nReturn code: 3\nExpected return code: 0\nOutput: \n    The path python3.8 (from --python=python3.8) does not exist\nErrors: (none)\nCheck the log at /home/asottile/.cache/pre-commit/pre-commit.log\n```\n(sorry about the early post, apparently either ctrl+enter or shift+enter auto posts!). \"Ignored\" would be fine, we already have \"Skipped\"\nconsole\n$ SKIP=flake8 pre-commit  run --all-files\nFlake8..................................................................Skipped\nTrim Trailing Whitespace.................................................Passed\nthat said, I don't think this feature would work:\n- if a hook makes modifications to the working directory it cannot be ignored\n- we already have SKIP for this purpose\n- it's unclear what problem you're trying to solve and why IGNORE solves it. What if your hook responded to IGNORE instead?  I don't really want yet-another-way to skip things for a usecase that the framework intentionally tries to forbid (interactive hooks) where SKIP already serves the purpose of skipping things.  Pressing the up arrow or running fc is pretty easy :)\nThe reason there aren't interactive or high-false-positive hooks is those are the types of things that make people hate git hooks (and turn them off!) -- I don't want to encourage or enable that since it hurts the ecosystem :). One installs and installs the hooks, the other installs the hooks :laughing:\nI get how just seeing the names is confusing, but that's what the help texts are for (which you've omitted from this issue). Do they make more sense when seeing pre-commit --help and pre-commit install --help?\n460 added install-hooks if you'd like to follow the paper trail for its existence. Or #135 for install --install-hooks. Here's those (current) texts so you don't need ot open a terminal:\ninstall             Install the pre-commit script.\n    install-hooks       Install hook environments for all environments in the\n                        config file. You may find `pre-commit install\n                        --install-hooks` more useful.\n--install-hooks       Whether to install hook environments for all\n                        environments in the config file.. closing due to inactivity -- if you have improvements to the help text that would be great -- please make a PR!  Thanks for the issue!. hmm! that's a good point I hadn't thought of but presents some issues I can think of:\n\nwindows (official python installs) always use python and not python3\nINSTALL_PYTHON might be ephemeral, it's why there's three options for detecting pre-commit in the script\n\nthat said, I think we can get this right, probably by inspecting sys.executable and determining what possible values could be used.\n. Maybe something like this?\npython\nif sys.platform != 'win32' and six.PY3:\n    return '#!/usr/bin/env python3'\nelse:\n    return '#!/usr/bin/env python'. hmmm I just thought of another case while working on this that might not work.  Some distributions (for instance arch) install python 3.x as /usr/bin/python and won't (?) necessarily have a /usr/bin/python3 executable\nI'll have to think about this some more -- maybe inspecting sys.executable is necessary.  Maybe something like this. @fristedt can you try out the branch in #893?. This has been released as part of v1.14.0 \ud83c\udf89  -- thanks again!. as you've learned from #806 and #747 -- pre-commit will not modify your staging area since this is judged as an unsafe operation\nas for generating a patch, there is one which is stored in ~/.cache/pre-commit which represents the parts pre-commit unstages.  You're free to reverse-apply that, then staged, then commit, then apply the patch again and you'll be back to your desired state.\nLet me know if this works for you!\nHere's a sample workflow for that:\ndiff\n$ git diff --staged\ndiff --git a/t b/t\nindex f00c965..dc76404 100644\n--- a/t\n+++ b/t\n@@ -1,6 +1,6 @@\n 1\n 2\n-3\n+3 # trailing whitespace \n 4\n 5\n 6\n$ git diff\ndiff --git a/t b/t\nindex dc76404..8e6f928 100644\n--- a/t\n+++ b/t\n@@ -4,7 +4,7 @@\n 4\n 5\n 6\n-7\n+7 # don't stage me\n 8\n 9\n 10\nAnd when I commit:\n```\n$ git commit -m \"hi\"\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /Users/asottile/.cache/pre-commit/patch1544222126.\nTrim Trailing Whitespace.................................................Failed\nhookid: trailing-whitespace\nFiles were modified by this hook. Additional output:\nFixing t\nFix End of Files.........................................................Passed\nCheck Yaml...........................................(no files to check)Skipped\nCheck for added large files..............................................Passed\n[INFO] Restored changes from /Users/asottile/.cache/pre-commit/patch1544222126.\n```\nNow I can remove the parts I didn't want to commit:\n$ git apply --reverse /Users/asottile/.cache/pre-commit/patch1544222126\n$ git add -u\n$ git diff --staged\ndiff --git a/t b/t\nindex f00c965..50cfb57 100644\n--- a/t\n+++ b/t\n@@ -1,6 +1,6 @@\n 1\n 2\n-3\n+3 # trailing whitespace\n 4\n 5\n 6\nAnd then commit and then restore:\ndiff\n$ git commit -m \"wat\"\nTrim Trailing Whitespace.................................................Passed\nFix End of Files.........................................................Passed\nCheck Yaml...........................................(no files to check)Skipped\nCheck for added large files..............................................Passed\n[master 13f3873] wat\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git apply /Users/asottile/.cache/pre-commit/patch1544222126\n$ git diff\ndiff --git a/t b/t\nindex 50cfb57..6900639 100644\n--- a/t\n+++ b/t\n@@ -4,7 +4,7 @@\n 4\n 5\n 6\n-7\n+7 # don't stage me\n 8\n 9\n 10. awesome!  Thanks for the issue. Sorry, I know you put a lot of work into this but I'm not interested in supporting it. Please see the discussion in https://github.com/pre-commit/pre-commit/issues/730\npre-commit currently knows nothing about the args in additional_dependencies and I'd like to keep it that way. A solution which parses those or parses requirements.txt would therefore be out.\nIn the future, please open an issue so there can be discussion about large features! . there's a lot of reasons, I'll try and get to them all but I've gotta get back to work so this might be incomplete\nfirst and foremost is a matter of simplicity.  \"simple is better than complex\".  the two functions you added in this PR would be the most complex in the entire codebase.  verifying their correctness is nearly impossible given the sheer amount of branches and possibilities\npre_commit/languages/python.py:82:1: C901 '_parse_requirements_file' is too complex (19)\npre_commit/languages/python.py:139:1: C901 'collect_requirements' is too complex (28)\nbut also \"simple is better than complex\" in another regard.  pre-commit aims to be a simple bridge between tool interfaces.  It currently leaves most of the heavy lifting for installation / etc. to the language specific tools themselves.  It knows very little in this regard other than \"call the tool\".\nnext is a matter of caching.  caching is already a very difficult topic (even in pre-commit) and complicating it further would make it worse.  today, the cache has a very nice quality in that the .pre-commit-config.yaml contents are more than enough to represent the cache.  If that file doesn't change, the cache doesn't change.  parsing -r adds a fractal of possibilities in other files (especially if you consider that requirements files themselves can -r and then where does it end!).\nnext is \"reinventing the wheel, poorly\".  in this PR we're reinventing both (1) pip's argument parsing and (2) pip's parsing of -r requirements files.  pip's argument parsing changes without our control and without a way to verify we are compliant with it.  and I really don't want to keep up with the pip project and adjust at every little change to their parsing, it simply isn't feasible to keep them in lockstep and any differences are going to be considered bugs by users -- bugs that I don't want to deal with.  For starters, I already see at least two issues with the current implementation that aren't handled: continued options (-vrr.txt and -vr r.txt) and prefix options (--requirem=r.txt) -- both of which are really really hard to get right!  And that doesn't even begin to handle the slough of bugs in the actual .txt file parsing!  Additionally, requirements.txt files don't even have a proper specification -- they're a mix of pip options and requirement specs (and depending on your version of pip, even that isn't specified!).\nnext is the \"slippery slope\".  while pre-commit itself is written in python, python is not the only supported language (though it may be the most widely used).  If this PR is accepted, I could reasonably see the need to implement the same complexity for pipfile, pipfile.lock, pyproject.toml, setup.py (intractable / impossible), package.json, package-lock.json, yarn.lock, gemspec, gemfile.lock, glide.yaml, glide.lock, Godeps.json, Gopkg.toml, Gopkg.lock, Cargo.toml, Package.swift, and the list goes on and on and on and on.  the \"parsing package files\" code would dwarf the rest of the project and they would all be buggy, all of them.\nand finally (but probably the least of the problems) is the breaking change in behaviour.  \"documented\" here there's already a way that -r can have meaning today without pre-commit parsing it.  I know of a nonzero number of things already using this.\nI hope this helps you understand my reservation to this change -- if you have additional questions please let me know!\nThere's also been an eventual hope that a strong enough usecase would emerge to take the environment management code out of pre-commit and open it as a library.  There's some established value of a cross platform tool which knows how to set up a bunch of different language'd environments.\nAdditionally, you can probably accomplish what you want today if you're willing to script a bit.  Write a thing which processes your requirements.txt file and adds that to the additional_dependencies list in .pre-commit-config.yaml (we're doing something similar at lyft even to better join PEP561 requirements for mypy).. thanks for the PR nonetheless \ud83c\udf89 -- it was good to get these ideas more concretely into issues and comments than stuck in my head!. Currently not really -- there's a few \"common\" usecases at the bottom of https://pre-commit.com (which is sourced from https://github.com/pre-commit/pre-commit.github.io). Thanks for the report! I'm surprised this hasn't come up before, I'll see what I can do to get a fix for this. Looks like an unfortunate bug in git.  These should be equivalent but are not:\nconsole\n$ git diff --binary --\ndiff --git a/t b/t\nindex e69de29..880d1a7 100644\n--- a/t\n+++ b/t\n@@ -0,0 +1,3 @@\n+hi\n+hi\n+hi\n$ git diff-index --binary $(git write-tree) --\ndiff --git a/t b/t\nnew file mode 100644\nindex 0000000..880d1a7\n--- /dev/null\n+++ b/t\n@@ -0,0 +1,3 @@\n+hi\n+hi\n+hi\nI can probably switch back to git diff instead of git diff-index. #571 changed this which means the broken behaviour probably regressed in 0.16.0. I've made progress by parsing git status --porcelain -z and looking at the second character.  need to thread that through though. took me a while, but I think I finally figured out a solution -- check out #912. This has been released as part of v1.14.0 \ud83c\udf89  -- thanks again!. This seems kinda reasonable (and has been asked about before at least once).\nThere's a way you can make this work today without needing a new option however, you can define one in one .pre-commit-config.yaml and one in another and select the file using pre-commit run --config ....  If this is good enough to fit your usecase I'd rather that than add a new not-often-used feature -- but if it's not good enough let's look into ways to make this happen :). via #886 -- looks like the issue linking didn't work :P. This has been released as part of v1.14.0 \ud83c\udf89  -- thanks again!. I still need to follow up to the git mailing list about this one, seems like a bug or two in git. seems this is not so simple after all. looks like the behaviour changes based on git version.  Something more sophisticated needs to happen I guess.\nIt looks like --intent-to-add doesn't actually stage an empty file, and the various diff commands disagree on that.  I'll look into a way to not list that file and not lint that file (since it's not actually being committed without git commit -a). commit-msg should allow editing of the message, can you share what you've tried so far that hasn't worked?. please comment back with more information and I'll reopen.  as I understand, commit-msg is sufficient to modify the message that will be committed. I didn't review because the tests are failing :P. thanks @s0undt3ch for bearing with me :tada: \ncould you please add this information to the documentation? It'll land in the next minor release so you can use _new in 1.14.0_\nThe docs live at https://github.com/pre-commit/pre-commit.github.io. I'll be trying to get some medium sized things in before the 7th while I have some extra free time and can't stream - - there's a chance I'll release then but otherwise expect something early January. It has been xfailed for now. Waiting on the upstream fixes. https://github.com/ekalinin/nodeenv/pull/230 will also solve this or a new npm release. this reverts #278 #279 1bda89458b1f61fbe5498926687ab4639006c23c CC @magicmark . This has been released as part of v1.13.0 :tada:. This was already fix in #889. odd!  Usually I have a windows machine on hand but I'm away right now, let me grab a VM and see what I can see.  It does appear to have installed virtualenv 16.1 which I would think would bring in a new enough pip \ud83e\udd14 . So the odd part, is my VM doesn't have this permission and also doesn't see the bug :/\n```\n(venv)\nIEUser@IE11WIN7 MINGW32 /tmp/t/tox (master)\n$ pre-commit run --all-files\n[INFO] Installing environment for https://github.com/ambv/black.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Initializing environment for https://github.com/asottile/blacken-docs:black==18.9b0.\n[INFO] Installing environment for https://github.com/asottile/blacken-docs.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nblack....................................................................Passed\nblacken-docs.............................................................Passed\n(venv)\nIEUser@IE11WIN7 MINGW32 /tmp/t/tox (master)\n$ winpty python\nPython 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)]\n on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport os\nos.symlink('foo', 'bar')\nTraceback (most recent call last):\n  File \"\", line 1, in \nOSError: symbolic link privilege not held\nexit()\n```. yeah that would be great, it's possible my setup is quite different from yours -- what python version (and how did you get it) and what windows version are you using?\n\n\n\nDoes pre-commit clean fix it (I doubt it will, but there's a ~possibility).\nIf you cd into the directory it is complaining about, are there actual symlinks there (and how did they get there without the permission to create them \ud83e\udd14). @gaborbernat bump on this -- any help reproducing this would be greatly appreciated :D. peculiar, those symlinks exist in black's source, but I expect git to not be able to create symlinks in the same way that python can't :thinking: \nI wonder if disabling symlinks in git's config or enabling it for your windows user fixes (I suspect it does) but it's still strange to me how it's even doing that in the first place! (git config core.symlinks false). ok I played with this on my dad's computer.  this was the only way I could reproduce the problem:\n\ninstall git with symlinks enabled (but without enabling the symlink setting globally)\nclone virtualenv\nrun pre-commit autoupdate as admin (this will clone the repos as root, but not install them)\nrun pre-commit run black --all-files as a normal user\n\nto recover, I ran pre-commit clean as an admin, and then pre-commit run black --all-files worked fine. This worked in the few environments I had access to -- I suspect it's probably good enough!  Going to merge this. oops, now this conflicts -- sorry I kinda rewrote a good chunk of the internals in #895. this is maybe more difficult than I thought: https://bitbucket.org/ruamel/yaml/issues/269/ruamelyamlcommentscommentedmap-copy. here's a WIP branch: https://github.com/asottile/pre-commit/compare/ruamel_yaml?expand=1. this still isn't an error however :(\n```pycon\n\n\n\nyaml.safe_load('{foo: bar, foo: baz}')\n{'foo': 'baz'}\n```. they also didn't fix \"slow by default\" :man_facepalming: . veto on fallback, if something is not honoring the dependencies in setup.py they're wrong and the complexity to support them is not worth it. The whole reason to move to rumael.yaml would be to reduce the support burden -- dragging pyyaml onwards is not on the table.  The code to support pyyaml vs the code to support ruamel.yaml also has very little overlap (it's a rewrite of that machinery) so keeping around the old cruft would be a significantly worse scenario than just staying with pyyaml\n\n\nIf pre-commit switches to runamel it forces us to rely on both dependencies instead of one.\n\nThe two libraries don't conflict, they can both be installed side-by-side.  Who cares if both are installed?  ansible doesn't use toml and I don't see a complaint about that dependency :P\n\nI think that is why python extras were invented for, to allow alternative backends/providers/...\n\nextras still aren't properly supported by pip, and they don't solve this situation (exclusive or) they only enable add-ons. need to write a test for the \"unknown keys\" warning that was added in this. Here's an example of this working:\nconsole\n$ git -C ../pre-commit-hooks/ diff\ndiff --git a/.pre-commit-hooks.yaml b/.pre-commit-hooks.yaml\nindex 5157783..fe93201 100644\n--- a/.pre-commit-hooks.yaml\n+++ b/.pre-commit-hooks.yaml\n@@ -131,7 +131,7 @@\n     description: 'Add # -*- coding: utf-8 -*- to the top of python files'\n     types: [python]\n -   id: flake8\n-    name: Flake8\n+    name: Flake8 (OHAI!)\n     description: This hook runs flake8.\n     entry: flake8\n     language: python\n$ pre-commit try-repo ../pre-commit-hooks/ flake8\n[WARNING] Creating temporary repo with uncommitted changes...\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: /tmp/tmpzpqtzgaf/shadow-repo\n    rev: fc01e063d7e0bfa4fa612456c70f23e6d2c494ae\n    hooks:\n    -   id: flake8\n===============================================================================\n[INFO] Initializing environment for /tmp/tmpzpqtzgaf/shadow-repo.\n[INFO] Installing environment for /tmp/tmpzpqtzgaf/shadow-repo.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nFlake8 (OHAI!).......................................(no files to check)Skipped. well it very much does not work with the latest version of git :/. found a workaround for latest git, and sent a message to the mailing list: https://marc.info/?l=git&m=154638468830666&w=2. I'm not sure how conda sets things up but standard python installations on windows are detected via three ways (quite similar to tox, but perhaps can be extended to do this one thing tox does):\n\nlook up as if it is a posix executable, that is look for python3.exe somewhere\nlook up using the py launcher, the standard way to register executables on windows (py -3 in this case)\nall else fails, assume the \"standard\" installation location of C:\\PythonXX\\python.exe -- this is the final one that's shown in the error message\n\nMy guess is that conda does not participate in any of those three approaches and perhaps the approach from tox should be pursued.  \nIf you could provide the output of py -l and which python3 I could probably confirm or deny my suspicions :). can you try the branch in #914 -- it might fix this though I don't have a conda setup to test. yeah the tox code is non-ideal, I wrote a better version with some tests: https://github.com/pre-commit/pre-commit/pull/914/files#diff-235f2434ddb56aaeef64d44558e82943R92\nNow that I think about it, I was hitting this in travis-ci windows 2.7 and just checked and it fixed my build there: https://travis-ci.org/asottile-archive/pyupgrade/jobs/477862429\nso I think/hope this should fix this issue as well \ud83d\ude06 . Hmmm i wish I could poke around with the debugger, mind running those functions and pasting their return values? . Hmmm, how about this function : https://github.com/pre-commit/pre-commit/blob/v1.14.0/pre_commit/languages/python.py#L46. alright let me get a windows vm :(. I was able to reproduce the original problem using conda\nI was then able to fix it by running:\nconda uninstall pre_commit\npip install git+https://github.com/pre-commit/pre-commit@self_exe_python\nI'll release 1.14.1 later with the fix. This is available in v1.14.1 -- thanks again for the issue @dawelter2  and the assist @nicoddemus :tada: . Can you show pre-commit version and pre-commit run --all-files. Weird! My guess is that you have pre-commit installed somewhere else under python 2 and at an older version :man_shrugging: . awesome!  In the future I'll probably make unknown keys a warning so this'll at least be a more obvious failure -- we're already doing that for individual hooks and it probably won't be much to do it at the repository and top level as well. Here's where we currently clone code:\nhttps://github.com/pre-commit/pre-commit/blob/aa4bc9d241d805d67efa29f040b29fe3baba5523/pre_commit/store.py#L142-L149\nHere's the rough sketch of the commands to execute a shallow clone:\nbash\ngit init directory\ngit -C directory remote add origin $remote\ngit -C directory fetch origin $revision --depth=1\ngit -C directory checkout $revision\ngit -C directory submodule update --init --recursive --depth=1. Here's the stackoverflow post describing this: https://stackoverflow.com/a/30701724/812183. What does pre-commit --version say? . :tada: thanks for the issue nonetheless! . I don't think that would help, there are only a few executables under control of pre-commit and to be frank the party that doesn't want their code edited I believe to be in the wrong.  Even if the few fixers pre-commit can influence implemented this option there's far more that would oppose implementing something like this.\nwhat's the target workflow of one of these individuals? can they run git checkout -- . and then it's as-if the fixers never ran?. @ssbarnea bump!. closing due to inactivity. pre-commit itself takes the opinion that warning noise is bad and does not and will not provide a way to do this out of the box.  That said with the right configuration you can enable this:\nSomething like:\nyaml\n    entry: bash -c 'safety ... \"$@\" || true' --\n    verbose: true\nSee also the discussion in #689 . I imagine there's other GO env variables to look out for too? Should this unset all of them (or perhaps anything starting with GO?).\n. Sounds good! Thanks for the research and patch! I can help write a test unless you want to take a stab at it. The current tests live in tests/repository_test.py. Thanks! :tada: . both docker and docker_image will always end up with these arguments:\nhttps://github.com/pre-commit/pre-commit/blob/160238220f022035c8ef869c9a8642f622c02118/pre_commit/languages/docker.py#L80-L85\n(notably, a volume to /src, a workingdir of /src, and running as the current user)\nHere's a config I was able to get working:\nyaml\nrepos:\n-   repo: local\n    hooks:\n    -   id: black-docker\n        name: black-docker\n        language: docker_image\n        types: [python]\n        entry: kiwicom/black black\n```console\n$ pre-commit  run --all-files\nblack-docker.............................................................Failed\nhookid: black-docker\nFiles were modified by this hook. Additional output:\nUnable to find image 'kiwicom/black:latest' locally\nlatest: Pulling from kiwicom/black\n8e3ba11ec2a2: Pulling fs layer\n2baa13bb50be: Pulling fs layer\n86492d6243e4: Pulling fs layer\nf9dd5cba45b9: Pulling fs layer\n26495a2f03be: Pulling fs layer\n3c8327c0e4cf: Pulling fs layer\nf9dd5cba45b9: Waiting\n8e3ba11ec2a2: Download complete\n8e3ba11ec2a2: Pull complete\n2baa13bb50be: Verifying Checksum\n2baa13bb50be: Download complete\nf9dd5cba45b9: Verifying Checksum\nf9dd5cba45b9: Download complete\n2baa13bb50be: Pull complete\n26495a2f03be: Verifying Checksum\n26495a2f03be: Download complete\n3c8327c0e4cf: Verifying Checksum\n3c8327c0e4cf: Download complete\n86492d6243e4: Verifying Checksum\n86492d6243e4: Download complete\n86492d6243e4: Pull complete\nf9dd5cba45b9: Pull complete\n26495a2f03be: Pull complete\n3c8327c0e4cf: Pull complete\nDigest: sha256:a103f5200c195cd6a69c35f92ff5d28bb095fb5d75ae7cb5935905e2bad77789\nStatus: Downloaded newer image for kiwicom/black:latest\nreformatted /src/setup.py\nreformatted /src/astpretty.py\nreformatted /src/tests/astpretty_test.py\nAll done! \u2728 \ud83c\udf70 \u2728\n3 files reformatted, 1 file left unchanged.\n```\nThough I don't think you need to use it via docker, https://github.com/ambv/black supports pre-commit out of the box:\nyaml\nrepos:\n-   repo: https://github.com/ambv/black\n    rev: ...\n    hooks:\n    -   id: black. cool! good to hear :tada: . Yep! you've found the right files to get started.  I'd be happy to help you through the python parts of this if you're interested in getting started!  You shouldn't need to deal with git at all as the framework bits handle that.  The parts for adding a \"language\" are just installing $your-language packages and running the executables that get installed.\nThere's ~roughly a couple flavors of \"languages\" right now -- either those which pre-commit will bootstrap an entire environment for you (node / ruby), or where pre-commit will assume some amount of system installation (python, because well, you need python to run pre-commit) or where pre-commit assumes you've installed some sort of system tooling (go / rust / docker / etc.).\nDepending on how the R ecosystem works (I'm not at all familiar with it) you'd pick to either set up a full R runtime or to depend on R already being installed at the system.\nFor the apis  you have to implement for a language here's what they would do (for instance for R):\nENVIRONMENT_DIR\na short string which will be used for the prefix of where packages will be installed.  Probably r_env or something like that.  (For python for instance, we use py_env and then packages are referenced from py_env/bin/...)\nget_default_version\nprobably don't need to implement this for a first pass -- right now this is only implemented by the python language which guesses what interpreter version to try and use for hooks.\nhealthy\nprobably don't need to implement this for a first pass -- right now this is only implemented by the python language which makes sure that a virtual environment is still dll-linked properly\ninstall_environment\nthis is the tricky part and where the smart bits come in.  probably need to do the following things:\n\ninstall an R runtime (optional: you could just depend on R already being installed globally)\ninstall the current repository into the ENVIRONMENT_DIR (for python this is pip install . for instance)\ninstall additional_dependencies (also optional, but often useful for plugin-like things)\n\nrun_hook\nThis is usually the easiest to implement, most of them look the same as the python hook implementation:\nhttps://github.com/pre-commit/pre-commit/blob/160238220f022035c8ef869c9a8642f622c02118/pre_commit/languages/node.py#L72-L74\nrecent PRs\nProbably the best most-recent PR which added a language is this one: https://github.com/pre-commit/pre-commit/pull/751\nThen the last bit is adding a few tests for that -- I can help you out with that :). Sounds good, is there a mechanism for local package installation in R? . Confirmed, thanks!. nope, not a stupid question at all!  this is a very minor bug in an edge case.  The acceptable fixes for this are either \"do nothing\" or produce an error message similar to to the one when attempting to run with an empty configuration.\nThe ~probable fix here is i < len(lines) and ... and let the rest of the machinery handle / produce an error message.  The way autoupdate is written happens to defer configuration loading as long as possible iirc. go for it!  I left this one [good-first-issue] because it's probably an easy fix :). ~generally pre-commit is only designed to run on checked-in files.  However I think you can achieve what you want with something like this:\nyaml\nrepos:\n-   repo: https://github.com/awslabs/cfn-python-lint\n    rev: v0.13.0\n    hooks:\n    - id: cfn-python-lint\n      always_run: true  # run whether or not there are files to check\n      pass_filenames: false  # don't pass the default-matched filenames\n      args: [build/output/prod/myapp/templates/root.yaml]. thanks for the issue :tada: . Upgrade virtualenv that's installed alongside pre-commit (that's what controls the version of pip that ends up inside the hook environments)\nDuplicate issue: #835. Looks like virtualenv>=16.1.0 is the ticket :tada: . No problem! Thanks for the issue :tada: . Thanks again @jessebona  \ud83c\udf89 . that is quite weird!  is there a git branch I can check out and play with?. Could you add a call to env and see what it reports?  I wonder if there's something odd going on with virtualenv.\nAlso do you have access to the test machine? It would be neat to poke around and see what's actually happening. nothing came up, closing -- still interested in digging into this if you can get it isolated or have a machine I can borrow which reproduces that would be great. this would reverse #846 which intentionally factored out setuptools for performance reasons. importlib-metadata is supposedly the way of the future, I wasn't following too closely but there were talks of it making it into python3.8, though probably now python3.9. You can inspect the private state information with sqlite3 ~/.cache/pre-commit/db.db\nyou can also temporarily override:\nyaml\n    -   id: flake8\n        entry: which flake8\nThat said, the installation is intentionally hidden away and supposed to be immutable, making it easier to muck with that is not going to happen.\nDeep paths do not do well for shebang limits which is why there is a database implementing indirection, predictable paths are not feasible. The host user doesn't need to exist inside the container, --user is simply to set the uid / gid pair\nUsing --user root is incorrect as it changes the owner of any files that get written to 0:0\nCan you show some sort of error demonstrating a failure? \"does not work\" is not a bug report. Ok, I ran the thing you pasted above, this appears to be a bug in the travis cli and not in pre-commit, I'd suggest opening an issue there:\n/project # HOME=/wat travis lint\nTraceback (most recent call last):\n    9: from /usr/local/bundle/bin/travis:23:in `<main>'\n    8: from /usr/local/bundle/bin/travis:23:in `load'\n    7: from /usr/local/bundle/gems/travis-1.8.8/bin/travis:18:in `<top (required)>'\n    6: from /usr/local/bundle/gems/travis-1.8.8/lib/travis/cli.rb:64:in `run'\n    5: from /usr/local/bundle/gems/travis-1.8.8/lib/travis/cli/command.rb:190:in `execute'\n    4: from /usr/local/bundle/gems/travis-1.8.8/lib/travis/cli/command.rb:213:in `rescue in execute'\n    3: from /usr/local/bundle/gems/travis-1.8.8/lib/travis/cli/api_command.rb:162:in `endpoint_option'\n    2: from /usr/local/bundle/gems/travis-1.8.8/lib/travis/cli/api_command.rb:74:in `detected_endpoint?'\n    1: from /usr/local/bundle/gems/travis-1.8.8/lib/travis/cli/api_command.rb:158:in `detected_endpoint'\n/usr/local/bundle/gems/travis-1.8.8/lib/travis/cli/api_command.rb:154:in `default_endpoint': undefined method `[]' for nil:NilClass (NoMethodError)\nthere's no guarantees in POSIX that HOME refers to a directory which exists. docker4mac runs a virtual machine with a filesystem bridge, it goes the extra yard to translate user ids across this virtual machine boundary (because they are doubly non-sensical). (I believe the filesystem is called osxfs, I forget the exact name though)\non a machine where docker runs natively there isn't any uid translation\nI strongly suggest you open an issue on the travis cli ;). As discussed in #691, this should use SC_ARG_MAX: https://github.com/pre-commit/pre-commit/issues/691#issuecomment-360224845. and even with that, it appears to take other things into account:\n```python\nimport subprocess\ndef ok(s):\n    try:\n        subprocess.check_call(('echo', s), stdout=subprocess.DEVNULL)\n    except OSError:\n        return False\n    else:\n        return True\ni = 1\nwhile ok('x' * i):\n    print(i)\n    i *= 2\nleft = i // 2\nright = i\nwhile left < right:\n    pivot = left + (right - left) // 2\n    print(pivot)\n    if not ok('x' * pivot):\n        right = pivot\n        print(f'right => {right}')\n    else:\n        left = pivot + 1\n        print(f'left => {left}')\nprint(left)\n```\nconsole\nasottile@Macbook-Pro:/private/tmp$ uname -a\nDarwin Macbook-Pro 18.2.0 Darwin Kernel Version 18.2.0: Thu Dec 20 20:46:53 PST 2018; root:xnu-4903.241.1~1/RELEASE_X86_64 x86_64 i386 MacBookPro11,4 Darwin\nasottile@Macbook-Pro:/private/tmp$ python3 t.py \n1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536\n131072\n196608\nleft => 196609\n229376\nleft => 229377\n245760\nleft => 245761\n253952\nleft => 253953\n258048\nleft => 258049\n260096\nleft => 260097\n261120\nright => 261120\n260608\nright => 260608\n260352\nright => 260352\n260224\nleft => 260225\n260288\nright => 260288\n260256\nleft => 260257\n260272\nleft => 260273\n260280\nleft => 260281\n260284\nright => 260284\n260282\nleft => 260283\n260283\nleft => 260284\n260284. that number I empirically determined isn't quite right either -- it's dynamic based on the contents of os.environ -- the rough algorithm is laid out in https://github.com/pre-commit/pre-commit/issues/691#issuecomment-360224845 (basically follow what xargs does). I think we'd try and be as close to gnu xargs as possible, fortunately computing the size of os.environ and asking os.sysconf isn't too difficult.  Even 128k might be too high on some platforms so we have to be careful there. I'm finishing this in #966 -- can you try it out on macos and see if it works well for you?. via #966\nThanks for the PR \ud83c\udf89 . Is this maybe with alpine? #655 \nI think it might be fixed with 3.6.7+ (python that is) . Note that the version of pip is coming from the virtualenv that gets created, not your pip (and so it is tied to the version of virtualenv). Could try bumping that to 16.4.0 though I don't think that's the problem here. yes, I can reproduce the exact error using python:3.6.5-alpine and when I use python:3.6.7-alpine the error goes away.\nSo unfortunately the answer is \"upgrade python\" -- I think the minimum version which works is 3.6.7 and 3.7.1 (at the time of writing, current is 3.6.8 and 3.7.2)\nThis was solved in https://bugs.python.org/issue34652 (cpython bug)\nThanks for the issue, hopefully you can upgrade!  Unfortunately there isn't really anything pre-commit can do here. Awesome! Good to hear :tada: . pre-commit will always always use git as the lowest common denominator and git itself is not a security issue\nPlease do not try and push your opinions with fear. To more accurately address your two concerns:\n\nrepublishing\nthings disappearing\n\nnpm / pypi / most package managers do not address the second so I won't address it for git either.  Same goes for private npm / pypi registries.  This is not a solvable problem and your suggestion of npm / pypi does not solve this.\nrepublishing is also possible on pypi, I've done it before (either through naming trickery or through .post1 packages) -- I can't say the same for npm as I do not have enough experience with npm\nthat said, if you somehow think that npm / pypi are more secure you can already use them today.  And if you're concerned about the security of git tags, use sha1 hashes.  There are plans to make a ~locklike file in the future which should alleviate all concerns here -- the difficulty is picking a format that works and isn't a merge conflict nightmare\ncaching works fine with pre-commit, we use it at lyft to run network isolated builds of pre-commit hooks.\n\nbuild time: pre-commit install-hooks\nrun time: pre-commit run. you can use a local hook. That cspell doesn't install from source is really their bug. hmm oddly enough npm install git+https://github.com/Jason3S/cspell seems to work fine.  I'm confused why npm would treat that differently than git clone https://github.com/Jason3S/cspell && cd cspell && npm install . -- maybe there's something I can hack to get the same behaviour?. Made a support issue about it: https://npm.community/t/npm-install-g-git-vs-git-clone-cd-npm-install-g/5449. This has been released as part of v1.14.4!  Thanks for the issue \ud83c\udf89 . Hi! Since there's no test that could cover this could you please start with a detailed bug report on how someone would verify this change fixes a problem?  I don't doubt that it does but I'd like to be able to verify it myself without blindly accepting a PR -- thanks in advance! \ud83c\udf89 . @minrk this now conflicts, sorry!. I don't need / want a test, it's probably untestable. Just teach me the minimum I need to know about \"Fork\" to reproduce . took a while for me to figure out Fork, but I can confirm this fixes it -- thanks for the patch!. This has been released as part of v1.14.4!  Thanks for the patch \ud83c\udf89 . there is not a way to reference / include outside of the .pre-commit-config.yaml -- for instance see #730 / #880\n\nthat said, the desire to implement this has come up a few times and the suggestion I've given is to write a hook to synchronize the two.  I haven't seen an implementation of that yet but would welcome one if it were implemented.\nThat way you could do something like:\nyaml\n-   repo: https://github.com/pre-commit/sync-versions\n    rev: v1.0.0\n    hooks:\n    -   id: sync-versions\nby default it would probably use\nyaml\n    files: ^(\\.pre-commit-config.yaml|package-lock\\.json|requirements.*\\.txt)$\nor something of the sort and then expand to support more languages in the future?. indeedy. ;) have you read the docs . Instead of creating two ways to do things (and an awkward, complex, and strange union-typed schema) we're going to leave this as is.\nThanks for the issue :tada: . #591 and #149 are duplicates. going to be honest, I have no idea what you're talking about -- could you elaborate?. ah ok now I understand.  seems fine, go for it\nthat said, you can also configure this through IdentityFile in ~/.ssh/config -- but GIT_SSH_COMMAND seems harmless to whitelist here. dockerbuild, eh?. Thanks! \ud83c\udf89 . This has been released as part of v1.14.4!  Thanks for the issue and patch \ud83c\udf89 . hitting this on windows: https://npm.community/t/npm-install-g-git-file-c-path-to-repository-does-not-work-on-windows/5453\nnothing can be easy can it :(. This has been released as part of v1.14.4!. Very strange, I'll take a look when I'm at a computer. In the meantime you might want to check out https://github.com/pre-commit/mirrors-isort. Yep, the bottom of the readme has some help for that via https://github.com/asottile/seed-isort-config. Oh yeah the pipenv setup looks like it should work, I plan to poke at that when I'm at a computer, just wanted to give you something that would work until then :) . ok so the weird thing is, it seems to work for me?\nmaybe it's the .python-version file, I'm not sure what that's about.  other than that I think I've followed your example almost the same, though I'm using 3.6.7 instead of 3.6.6:\nfile contents\n```console\nroot@a1da4c91945d:/t# tail -n999 Pipfile t.py  .pre-commit-config.yaml \n==> Pipfile <==\n[[source]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\n[dev-packages]\npre-commit = \"\"\nisort = {extras = [\"pipfile\"],version = \"\"}\n[packages]\ncfgv = \"*\"\n[requires]\npython_version = \"3.6.7\"\n==> t.py <==\nimport os\nimport cfgv\nimport t\nprint(t.file)\n==> .pre-commit-config.yaml <==\ndefault_stages: [push]\ndefault_language_version:\n  python: python3.6\nrepos:\n- repo: local\n  hooks:\n  - id: isort\n    stages: [commit,push]\n    name: isort\n    entry: pipenv run isort -rc\n    language: system\n```\nruntime\n```console\nroot@a1da4c91945d:/t# git config --global user.email \"a@a.a\"\nroot@a1da4c91945d:/t# git config --global user.name \"A A\"\nroot@a1da4c91945d:/t# git commit -m \"hi\"\nisort....................................................................Failed\nhookid: isort\nFiles were modified by this hook. Additional output:\nFixing /t/t.py\nroot@a1da4c91945d:/t# git diff\ndiff --git a/t.py b/t.py\nindex a960ef3..d4171de 100644\n--- a/t.py\n+++ b/t.py\n@@ -1,5 +1,7 @@\n import os\n+\n import cfgv\n+\n import t\nprint(t.file)\n```\nI'm using docker because I don't really know where pipenv writes its stuff and don't really want to have to try and find it and clean it up. oh, is .python-version pyenv? maybe that's what's throwing this for a loop \ud83e\udd14 \nI haven't actually used pyenv in quite a while but I do remember it being kind of sensitive to setup -- how is your pyenv set up?. I'm also curious what pipenv run isort -rc t.py (or whatever python filename) produces when run from the root of the repository -- that should be basically equivalent to what pre-commit will do. No problem! Thanks for the issue. I've moved the issue as it isn't about pre-commit-hooks (just some linting / fixing scripts) and instead is about the framework (pre-commit).\nI don't have enough information so let's try and get some more :)\nCan you provide the following:\nwhich python3.6\ntype python3.6\nAnd can you try the command while the current working directory is /?  That would be equivalent to how pre-commit runs things (to avoid a few common side-effects of the local repository due to setup.cfg and such). I think either should work -- if you can provide specific reproduction steps that would be super helpful.  Note that you can probably reset pre-commit's state with pre-commit clean if that helps your reproduction.\nThe code I'm thinking of that should make this \"just work\" is here... though... now that I look at it that seems to only apply on windows for some reason -- maybe it should apply more generically?. Cool, I'll poke around as well. I believe this is a duplicate of #860 -- waiting for a patch which can better figure out the correct set of files to run on :). I just reread #860 and adjusted the title -- let's continue the discussion there :tada: . No problem! I improved the title so it is more discoverable in the future. Yep! That's what language: system is for. Interesting, do you have a branch I can check out and poke at? . Awesome, thanks -- can you pip freeze --all for me?  seems odd that it's trying to load a manifest (usually .pre-commit-hooks.yaml) from .pre-commit-config.yaml\nfwiw it's working locally for me on posix, I'm starting my windows VM right now:\nconsole\n$ pip freeze --all\naspy.yaml==1.1.2\ncfgv==1.4.0\nidentify==1.3.0\nimportlib-metadata==0.8\nnodeenv==1.3.3\npip==19.0.3\npre-commit==1.14.4\nPyYAML==3.13\nsetuptools==40.8.0\nsix==1.12.0\ntoml==0.10.0\nvirtualenv==16.4.1\nwheel==0.33.1\nzipp==0.3.3\n$ pre-commit run --all-files\n[INFO] Installing environment for git://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nTrim Trailing Whitespace.................................................Passed. Also the crash log would be useful -- it's usually stored in ~/.cache/pre-commit/pre-commit.log. Seems to have worked for me on windows, looking forward to your additional information:\nIEUser@MSEDGEWIN10 MINGW64 /tmp/t/pipx (master)\n$ git checkout add-precommit-hooks\nSwitched to a new branch 'add-precommit-hooks'\nBranch 'add-precommit-hooks' set up to track remote branch 'add-precommit-hooks' from 'origin'.\n(venv)\nIEUser@MSEDGEWIN10 MINGW64 /tmp/t/pipx (add-precommit-hooks)\n$ pre-commit run --all-files\n[INFO] Initializing environment for git://github.com/pre-commit/pre-commit-hooks.\n[INFO] Installing environment for git://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nTrim Trailing Whitespace.................................................Passed\n(venv)\nIEUser@MSEDGEWIN10 MINGW64 /tmp/t/pipx (add-precommit-hooks)\n$ pip freeze --all\naspy.yaml==1.1.2\ncfgv==1.4.0\nidentify==1.3.0\nimportlib-metadata==0.8\nnodeenv==1.3.3\npip==19.0.3\npre-commit==1.14.4\nPyYAML==3.13\nsetuptools==40.8.0\nsix==1.12.0\ntoml==0.10.0\nvirtualenv==16.4.1\nwheel==0.33.1\nzipp==0.3.3\nIEUser@MSEDGEWIN10 MINGW64 /tmp/t/pipx (add-precommit-hooks)\n$ python --version --version\nPython 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)]. Can you provide the contents of c:\\projects\\python\\_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\repository.py and c:\\projects\\python\\_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\constants.py\nI suspect there's been some tampering with one of those two files\nI can reproduce your error only when I apply this (incorrect) diff:\n```diff\n def _cloned_repository_hooks(repo_config, store, root_config):\n     repo, rev = repo_config['repo'], repo_config['rev']\n-    manifest_path = os.path.join(store.clone(repo, rev), C.MANIFEST_FILE)\n+    manifest_path = os.path.join(store.clone(repo, rev), C.CONFIG_FILE)\n     by_id = {hook['id']: hook for hook in load_manifest(manifest_path)}\n```. Did you edit some files and then forget about it?  I can't think of a way you'd end up with broken files when installing from pypi. no problem! glad you figured it out :tada: . Duplicate of #823. ok so I fixed the npm problem by switching the install strategy\nand I played with this a little bit on my own and I have a few concerns but I think we can solve them\n\nThe first is that autoupdate uses the cloned repository to git fetch and look for newer versions.  This seems fine and I can't think of a case where this wouldn't work like I want it to -- it seems to fetch forward from the shallow clone and still succeeds at updating?\nthe test_clone test fails on appveyor (which is running git 2.17.1) because shallow clone isn't implemented there\nit also fails on my computer (ubuntu 18.04) which coincidentally also runs git 2.17.1\n\nshallow clone of submodules can leave submodules in a permanently non-clonable state\n\nI think this means we shouldn't attempt the protocol=1 clone\n\nconsole\n  $ git submodule update --init --depth=1\n  Submodule 'fastahack' (https://github.com/ekg/fastahack.git) registered for path 'fastahack'\n  Submodule 'filevercmp' (https://github.com/ekg/filevercmp.git) registered for path 'filevercmp'\n  Submodule 'fsom' (https://github.com/ekg/fsom.git) registered for path 'fsom'\n  Submodule 'googletest' (https://github.com/google/googletest.git) registered for path 'googletest'\n  Submodule 'intervaltree' (https://github.com/ekg/intervaltree.git) registered for path 'intervaltree'\n  Submodule 'libVCFH' (https://github.com/edawson/libVCFH.git) registered for path 'libVCFH'\n  Submodule 'multichoose' (https://github.com/ekg/multichoose.git) registered for path 'multichoose'\n  Submodule 'smithwaterman' (https://github.com/ekg/smithwaterman.git) registered for path 'smithwaterman'\n  Submodule 'tabixpp' (https://github.com/ekg/tabixpp.git) registered for path 'tabixpp'\n  Cloning into '/tmp/x/vcflib/fastahack'...\n  Cloning into '/tmp/x/vcflib/filevercmp'...\n  Cloning into '/tmp/x/vcflib/fsom'...\n  Cloning into '/tmp/x/vcflib/googletest'...\n  Cloning into '/tmp/x/vcflib/intervaltree'...\n  Cloning into '/tmp/x/vcflib/libVCFH'...\n  Cloning into '/tmp/x/vcflib/multichoose'...\n  Cloning into '/tmp/x/vcflib/smithwaterman'...\n  Cloning into '/tmp/x/vcflib/tabixpp'...\n  remote: Total 0 (delta 0), reused 0 (delta 0), pack-reused 0\n  error: Server does not allow request for unadvertised object c68cebb4f2e5d5d2b70cf08fbdf1944e9ab2c2dd\n  Fetched in submodule path 'fastahack', but it did not contain c68cebb4f2e5d5d2b70cf08fbdf1944e9ab2c2dd. Direct fetching of that commit failed.\n  $ git submodule update --init\n  error: Server does not allow request for unadvertised object c68cebb4f2e5d5d2b70cf08fbdf1944e9ab2c2dd\n  Fetched in submodule path 'fastahack', but it did not contain c68cebb4f2e5d5d2b70cf08fbdf1944e9ab2c2dd. Direct fetching of that commit failed.\n\n\nSo we'll probably need to adjust that test to not fail when git can't possibly clone -- or maybe just not test the clone depth -- it is an \"optional performance improvement\" after all. Stellar -- thanks for the effort on this \ud83c\udf89 . That error looks like either your installation of python3.6 is broken, pypi was temporarily down, or your dns settings are broken -- none of which pre-commit can do anything about. Does it persist if you try again? . I found this which is potentially related: https://github.com/pypa/pip/issues/5568. that is very weird!  If you re-run pre-commit install does it fix committing?\nThe F:/ bits are coming from os.path.expanduser('~/...') which on windows I believe looks at the HOMEPATH variable. @mnboos any updates?. It's interesting to me that pre-commit (when run by itself) works, but not inside git. \nCan you run this for me?\nbash\npython -c 'import pprint, os; pprint.pprint(tuple(sorted(os.environ.items())))'\nAnd try putting this near the beginning of .git/hooks/pre-commit\npython\nimport os, pprint\npprint.pprint(tuple(sorted(os.environ.items())))\nAnd then running git commit and posting the output of those two commands here?  I'd be curious to see if there's any environment differences.\nCan you also run each of these commands and produce their output here?  Might help in debugging what's different \ud83e\udd14 \nbash\nwhich -a pre-commit\ngrep INSTALL_PYTHON .git/hooks/pre-commit\npython -c 'import pre_commit; print(pre_commit.__file__)'\necho $HOMEPATH\necho $PRE_COMMIT_HOME\necho $XDG_CACHE_HOME\npython3 -c 'import os.path; print(os.path.expanduser('~/.cache'). Interesting, that does appear to be the difference.\nHere's the relevant diff from the environ splat that I can see:\n```diff\n--- outside 2019-03-11 08:38:34.857174146 -0700\n+++ inside  2019-03-11 08:38:46.916672996 -0700\n...\n+ ('HOME', 'F:\\'),\n```\nWhat I believe is happening:\n- git commands go through git.exe which is an msys program.  This \"normalizes\" the environment for POSIX, among other things making sure HOME is set.  I suspect there's a microbug in msys which makes HOMEDRIVE=F: and HOME=\\\\ normalize to HOME=F:\\\\ (this is probably a bug in msys, it should honor USERPROFILE first).\n- os.path.expanduser on windows uses os.environ['HOME'] in preference to os.environ['USERPROFILE'] -- this is ~maybe a bug in python\n- (this causes pre-commit to build environments on that network drive, tickling the pip bug above)\nIn your case, I'd suggest the following workaround instead, to set HOME=%USERPROFILE%\nIs that something you can configure for your user?. I've created a bpo issue for this: https://bugs.python.org/issue36264. yay, python3.8 will ship with a fix to os.path.expanduser -- and you have a workaround for now by setting an environment variable\nI couldn't figure out how to send an issue to mingw for the HOME thing :S\nI think there's nothing left to do here so I'm closing this -- thanks for the issue \ud83c\udf89 . Code hints: https://github.com/pre-commit/pre-commit/blob/185a288645d900c35f248dc1ca189c5085da21e1/pre_commit/clientlib.py#L220-L234\nhttps://github.com/pre-commit/pre-commit/blob/185a288645d900c35f248dc1ca189c5085da21e1/pre_commit/clientlib.py#L60\nhere's where it happens on a per-hook basis: https://github.com/pre-commit/pre-commit/blob/185a288645d900c35f248dc1ca189c5085da21e1/pre_commit/repository.py#L121-L130\nthough for this you'd do it when parsing the configuration.  The reason the version checking is deferred to the repository stage for the per-hook check is sometimes the hooks aren't enabled (and for local hooks). Sourced a lot of the information from https://www.in-ulm.de/~mascheck/various/argmax/. cygwin and macos fall into the posix branch, cygwin sets SC_ARG_MAX to 32000 which performs basically the same math as the nt pathway.  macos seems to report a reasonable value there as well. No big deal!  Thanks for the original work on this :)\nI ended up testing it on my work computer (and last night purchased an old mac mini so hopefully I can test it more readily in the future). Code hint: https://github.com/pre-commit/pre-commit/blob/185a288645d900c35f248dc1ca189c5085da21e1/pre_commit/commands/run.py#L211-L213\n. Passed is green not yellow, it uses whatever color your terminal emulator has configured for green.\nFor instance, this is what it looks like on ubuntu (without configuring different colors for the stock terminal):\nhttps://asottile.github.io/pygments-pre-commit/demo/test_basic_pre_commit.html. yes, you can disable colors with --color=never. yeah we can, let's give it some time since the latest update\nIn the meantime there are several options:\n\nuse a local hook:\n\nyaml\n-   repo: local\n    hooks:\n    -   (the same config that's in the PR) + `additional_dependencies: [travis...]`\n\nUse one of the forks (point at a sha)\n\n\n\nAnother question is: does this mean that I would not be able to use the hook before they will make a new release?\n\n\nWhen the PR above gets merged: rev: <a sha1>\nWhen a release is made then can switch to rev: <a tag>\n\n\nFor now I don't think there's much to do here, it isn't really a \"framework\" problem so I'm going to close this (there's also adequate workarounds). I ~think the last one looks the most correct, you might need to do something like\nyaml\nargs: ['--values', foo, bar, '--']\nto tell the argument parsing system there's new stuff to see?\nThe docs show a few examples of how the arguments get splatted but if you need some hands-on debugging you can use the identity hook to play with it:\nyaml\n-   repo: meta\n    hooks:\n    -   id: identity\n         # can play with args / files / etc. here\nidentity will spit out one argument at a time on the commandline. If you're designing the hook, another approach you can use is action='append' and then one can specify:\nyaml\nargs: ['--key', 'a', '--key', 'b', '--key', 'c']\nor some such\nI suspect the problem you're hitting is nargs='+' and then pre-commit transforming\nyaml\nargs: ['--foo', 'bar', 'baz']\n+ filenames a b c\ninto\nexe --foo bar baz a b c\nwhich can't be distinguished properly\nIn that case, it looks like (At least with argparse) the -- separator works well:\n```python\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--foo', nargs='+')\nparser.add_argument('filename', nargs='*')\nargs = parser.parse_args()\nprint(args)\n```\nconsole\n$ python t2.py --foo a b\nNamespace(filename=[], foo=['a', 'b'])\n$ python t2.py --foo a -- b\nNamespace(filename=['b'], foo=['a'])\nHope this helps!. Nice!  Glad to help :tada: . > \n\n\nmight need to use xargs.xargs(...) for the git add line, since I imagine the list of staged files could be pretty long (?)\n\nI guess it could but what problems could it cause for cmd_output ? And what's the 'xargs.xargs(...)' while we're at it? \ud83d\ude1b\n\nIf you run a command with too many arguments you'll get an error:\n```pycon\n\n\n\nsubprocess.check_call(('echo',) + ('hi',) * 2  18)\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/usr/lib/python3.6/subprocess.py\", line 286, in check_call\n    retcode = call(*popenargs, kwargs)\n  File \"/usr/lib/python3.6/subprocess.py\", line 267, in call\n    with Popen(popenargs, *kwargs) as p:\n  File \"/usr/lib/python3.6/subprocess.py\", line 709, in init\n    restore_signals, start_new_session)\n  File \"/usr/lib/python3.6/subprocess.py\", line 1344, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\nOSError: [Errno 7] Argument list too long: 'echo'\n```\n\n\n\nOn posix, this limit is pretty high so it's usually not an issue, but on windows it is much much smaller.\npre_commit.xargs implements an approach similar to the gnu utility xargs which splits a command into a bunch of separate invocations (to avoid the error). I think you're looking for stages: [manual] perhaps? . You'd set stages: [commit] and then that wouldn't be run w/ --hook-stage: manual (setting no option defaults to all stages) . Sure, feel free to submit a PR :D - - the docs live at https://github.com/pre-commit/pre-commit.github.io . should add a similar check to the manifest checker now\n. You should set up ssh keys!\n. I think this can more simply say:\nprint('{0} uninstalled'.format(hook_type))\n. we prefer this style when making multiline invocations:\nfunc(\n    params...,\n)\nSo this one would look like:\nchanged_files = cmd_output(\n    'git', 'diff', '--name-only', '{0}..{1}'.format(old, new),\n)[0].splitlines()\n. why is this branch necessary?\n. I think you can remove the help message here, argparse basically duplicates what you've said here\n. same here\n. I think there's some way in argparse to require both or neither here, would be nice to have that\n. s/use/using/\n. I think default is unnecessary here\n. this doesn't match pre-commit-hook, I wonder if there's a way we could combine the duplicated code somehow\n. hmmm, we should probably handle the legacy scripts as well for pre-push\n. I'd rather we not add another optional argument to this class and instead change the property below to a function that takes the hook type.\nOr better yet, make two properties, one for pre_commit_path, one for pre_push_path\n. please revert this line\nUTF-8 is actually marginally faster at parsing than utf-8\n. I forget where I saw the benchmark but the basic reason is when looking up the codecs it tries the value first and then normalizes it, the speed difference is negligible, but changing this line is unnecessary to your patch\n. without default you'll get None which follows the same codepath\n. might be able to simplify this since legacy path will always be hook_path + '.legacy'\n. these don't really belong in the runner, I'd just keep these in the place that installs\n. hmmm this appears to be existing, you can probably just leave it this way\n. since we're changing this file, we'll need to bump the magical number at the top.  I usually just md5 setup.py and put that there (you'll need to update the list of these as well)\n. Are the changes to this file necessary? I don't see them used elsewhere\n. minor nitpick (sorry!):\nThe predominant style in this repository is to do function calls:\nlike_this(\n    with_args,\n    here,\n)\nand list comprehensions:\nx = [\n    y for y in z\n    if f(y)\n]\nMostly because it slightly reduces merge conflicts when adding arguments etc. (and also because I'm picky to a fault :/)\nI can just fix this up after merging if you don't want to bother though :)\n. executer or executor?\nfirefox's spellcheck at least prefers executor\n. Let's make --no-stash silence both of these errors\n. nit: prefer paren'd continuation to \\s\nI'll fix it when I merge if you don't want to bother :)\n. I've found when there's two disparate branches in a test that it's often clearer as two separate tests\nHere's a nice article I like to reference about the topic: http://googletesting.blogspot.com/2014/07/testing-on-toilet-dont-put-logic-in.html\nIn this case it might be a good idea to split the repeated bits into a helper and call that\n. weird, there's a pre-commit hook that should split this line, does this line change when pre-commit run --all-files ? (might be a side-effect of rebase?)\n. I'd imagine:\nassert ret == expected_ret, (ret, expected_ret, printed)\nwould be more useful\n. config_file?\n. so, my main issue with this is the Repository is supposed to be the hook runner, now we'd have two things that have that responsibility...\nI think we should maybe instead push the responsibility into Repository.create?\n. oops my bad! ++\n. Sounds good to me :)\n. I'd just change these to raise NotImplementedError\n. oops, this is off now, are we going with null or 'local'?\n. let's make this if...: ... else: ... so it's slightly more explicit\n. I think you can explicitly include both of those exceptions:\nwith pytest.raises((jsonschema.exceptions.ValidationError, InvalidConfigError)):\n    # ...\n. one last thing (sorry, didn't notice this on the first passes), is there a reason to raise this error? it should just work now that we're doing it at the repository right? (it's a bit silly I agree, but it should work just fine if the check is removed?)\n. I feel that if it's not broken, why go through the extra trouble to exclude the case?\nAlso, since hooks run in the order they are defined, it might be desirable to run some hooks out-of-order.  We currently don't forbid repeated repos at the moment so I see no reason to make local repos special in that regard.\n. yeah no, I just updated git on my home machine and couldn't get the tests passing without this.\n. In this case it doesn't matter, as long as the fallback value is a valid regex (since this is just the checking code)\n. this'll probably require a skip for windows due to symlinks? we'll find out :)\n. you'll want to use:\n``` python\nwith mock.patch.dict(os.environ, {'HOME': test_home}):\n    # run your assertion\n```\nright now when the assertion fails, the environment is polluted for the rest of the test.\nI think you might also need to twiddle the file paths so the test passes on windows.\n. hmm, why was this necessary?\nMaybe move the expanduser after the windows branch?\n. # pragma: no cover these two branches so coverage doesn't complain :)\n. Ah, maybe remove the C:\\ part entirely from the format string?  iirc \\foo\\bar is the same as C:\\foo\\bar anyway and then pre-commit cares less about what your default drive is\n. this is not quite right, it'll end up calling:\npre-commit --hook-stage commit\nwhen it needs to call\npre-commit run --hook-stage commit\n. I can't comment quite high enough in this file, but since you're changing the contents you'll need to update the md5 blob at the top and update the list in pre_commit/commands/install_uninstall.py\n. I'd like to see some sample output for how this changes things :)\n. probably not a bug in this case, but default values that are mutable can cause issues:\nhttp://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments\n. shouldn't this default to ['commit', 'push'] ?\n. This'll break invocations that are just pre-commit and pre-commit run.  Maybe make it default to 'commit'?  This might also make the bash changes easier.\n. Yeah pre-commit alone defaults to pre-commit run.  Mostly to make the normal case just work.  pre-push was added later.\n. I usually md5sum setup.py, but it really could be anything, just needs to be unique :)\n. ah yeah I guess that's fair.  The tradeoff I see here is slightly easier to debug here but needs a test to keep it from regressing vs an extra branch in the other code.  I usually lean towards the first but this is fine as long as the code executes correctly.\n. Yeah, I think for pre-push this is already the case, you'll just need to add it for pre-commit (or if you make it default to commit, you can probably avoid needing to edit args in this file)\n. why is strip needed here?\n. minor nit.  I'd format this like:\npython\ndef install_environment(\n    repo_cmd_runner,\n    version='default',\n    additional_dependencies=(),\n):\nThis minimizes merge conflicts slightly when adding / removing / reordering parameters\n. The parens around the string are unnecessary :)\n. I wouldn't use --upgrade, it has a tendency to cause incompatibilities with the libraries installed.  I think pip install ... should be sufficient\n. seems good to me :)\n. just thought about this, these'll need quoting in the general case:\npython\nenv.run(\n    'cd '{{prefix}}' && '\n    'pip install {deps}'.format(\n        ' '.join(pipes.quote(dep) for dep in additional_dependencies),\n    ),\n)\n. errr, pre_commit.util.shell_escape instead of pipes.quote\n. instead of formatting, I'd just do\npython\nif stdout or stderr:\n    write(' Additional output:')\nThis'll avoid the slightly-awkward double linebreak in this case\n. unnecessary parens\n. oh yeah I could probably use normcase, osx should be doing the same though!\n. yeah\n. Fuckin right? \n. Why are submodules so different and complicated and broken \n. we can 'default': False here and then the check for this gets simpler in pre_commit/run.py\n. I almost want this to be less special and still compute the filenames.  That'd be more in line with the rest of the project and I think make things simpler to reason about.\n. since you specified a default, I think you don't need the branch here\n. herp, can you add the fix-encoding-pragma hook from pre-commit-hooks and run on all the things?\n. this is not entirely true, but it is the assumption we're going by to attempt to find the shebang :)\n. cygwin lets higher than this (lol)\n. I wonder if we can utilize mimetypes module at all:\n```\n\n\n\nmimetypes.guess_type('foo.py')\n('text/x-python', None)\n``\n. will have to fix ;)\n. yeahhhhhhhhhh :'(\n. I don't think this is necessary, pre_commit.runner.Runner.create invariantly sets the working directory (and is the first thing invoked by pre-commit)\n. I would just modifyargs.filesinpre_commit.main, that'll make it less confusing for the rest of the program if it ever ends up using this argument in the future (and we reinvent this bug :D)\n. you can probably just reuse the bash hook and modify the configuration to have this added on -- that said, I don't think this hook repo actually adds any coverage.  You really only need a test which cds and uses relative paths\n. remove please :)\n. probably don't need this if you don't need thefiles: ...` above.\n\n\n\nI think you can still write a regression test with the bash hook, maybe not with this helper (which seems to have gotten too complicated :()\nThere's a few one-off tests at the bottom which this probably fits better into\n. minor thing: https://github.com/pre-commit/pre-commit/blob/b1e6063e12242f68392eebc4c08427f2319719e7/CONTRIBUTING.md#multi-line-method-invocation\n. I'd rather put this in main where all the code will benefit from it -- might make the testing more difficult (though there are some similar tests you can snitch from)\nAlternately, you could split this functionality into a normalize_arguments function and write a test for that (so you don't have to bother with integration testing)\n. these are the tests being not-realistic, instead of patching the runtime code, fix the testtime code (sorry about this, it's probably my fault)\n. yeah, I'm saying you can do that without introducing a new repository by setting files: ... in the config file instead of the backing repo (which would allow you to reuse the script hooks repo without creating a one-off repo)\n. hasattr will always be True here\nAdd default=[] to the definition of --files above and you won't need this branch at all :D\n. I guess I was wrong here, it'll only have that attribute if args.command == 'run', I'd prefer that over the hasasttr check :)\n. ah crap, this was my from first pass.  Will delete\n. write_line adds a newline. imo just add this to all the commands (even if they don't use it) (I did this for --color recently and it made these sorts of things simpler). I'd do default='.pre-commit-config.yaml'. I'd make this a required argument (in both places), I know this is going to require a bunch of test changes but it'll make the runtime much simpler and less error-prone probably?. Is this line necessary? (I don't think so but I'm not sure?). I'm pretty sure Runner doesn't get constructed in the help case (otherwise my color stuff would be broken). in python3 I think this needs s.encode('UTF-8'). I would assert version == 'default' with an explanation that we're not going to support multiple docker versions. we'll probably want to make sure the image exists at run time, since we can't guarantee the image exists just because of the filesystem directory.  Especially given how aggressively we run docker cleanup at yelp. I'd probably just docker build invariantly (maybe cache it per run if it is too slow or something). heh, I think you want cmd_output('docker', 'ps')[0] == 0. os.mkdir(repo_cmd_runner.path(directory)). I'd explicitly say \"dockerpy\" here so we know what's being talked about :). hmmm, so this makes it more like existing things.  I wonder if we should leave out entry with docker hooks or at least make it optional?  Wondering what you think about this :). actually nah, that's a bunch of complexity.  We can always change it later if people think otherwise.. could even move this to line 31. this should use shlex.split (like the system hooks). echo -e is probably better (and then include a r'\\n' and make sure it goes through.  echo -n is kinda difficult to determine in the tests (since it just does in checks). instead of doing this, let's do a PATH envcontext (see any of the python / ruby / js ones for an example).  Then you can just use helpers.to_cmd directly. I would assert that the version is default since no other version is supported, there's prior art in the docker language. That's unfortunate.  supporting a mixed mode is kind of strange usually you target all cygwin or all windows and not a mix.  It's certainly possible to make this work but I imagine it'll be very fragile :/. My concern would be that if there was suddenly a go package for cygwin this would be incorrect in the opposite direction.  If we could somehow narrow down this to an exceptional case I'd take a PR which added this. that might be difficult though ;). So we do lose set semantics here, can you add a test with multiple hooks that have the same additional dependencies and verify that there are not duplicates?. The former is fine, I don't want to add language-specific parsing of this stuff if avoidable.\nHeh, if we could only target python3.6 (or modern pypy), the set would have insertion order. A warning should not be raised here.\nThis is a perfectly valid configuration:\nyaml\n    hooks:\n    -   id: puppet-validate\n        language_version: '2.1.5'\n        additional_dependencies: ['puppet:4.5.3']\n    -   id: epp-validate\n        language_version: '2.1.5'\n        additional_dependencies: ['puppet:4.5.3']. Maybe we can keep the code change smaller by making something like this:\n```python\nclass _UniqueList(list):\n    def init(self):\n        self._set = set()\ndef update(self, obj):\n    for item in obj:\n        if item not in self._set:\n            self.append(item)\n\n```\nAnd then the diff is just\ndiff\n-        dep_dict = defaultdict(lambda: defaultdict(set))\n+        dep_dict = defaultdict(lambda: defaultdict(_UniqueList)). Up to you!. can you quote all the variables here (shouldn't actually be a problem, but is just a best practice).. p3: our style guidelines would suggest one of these instead:\npython\ndef install(\n        runner, overwrite=False, hooks=False, hook_type='pre-commit',\n        skip_on_missing_conf=False,\n):\nor \npython\ndef install(\n        runner,\n        overwrite=False,\n        ...\n):\nThe reasoning here is:\n- Prevents diff churn for adding / removing arguments\n- Prevents merge conflicts (sometimes)\n- Prevents arbitrary indentation that's awkward to do in editors. does this cause all of these to be indented?. minor thing: https://github.com/pre-commit/pre-commit/blob/1be4e4f82e31336fa5fca096c962c72ac0041537/CONTRIBUTING.md#multi-line-method-invocation\n(also applies to the string literal below). this is going to clobber the contents of the file on each write (probably not what you want?). I actually run a youtube channel and my next episode in \"porting to python 3\" is about proper use of backports.  Haven't written up the slides yet or I'd link them but for backported modules you only want to conditionally install them on the versions that need them (otherwise we're installing contextlib2 in python3 where it's entirely unnecessary).\nHere's the basic gist though: https://github.com/pre-commit/pre-commit/blob/v0.8.2/setup.py#L50-L52. when possible, prefer putting conditional imports after all the other imports (the import reorderer stops when it sees non-import code). I'd rather see a real integration test which the file is actually written -- especially since the code as written doesn't properly write the file -- There's fixtures in testing/fixtures for setting up a git repository (and fixtures in testing/conftest.py as well). just write [stream]. just write ['contextlib2']. did you try the noop ctx idea from the first review? what did you think?. Oh wut, my original comment never posted! lol\nHere's an idea that avoids needing contextlib2 (we use this pattern elsewhere in pre-commit too!)\npython\nif log_file:\n    ctx = open(...)\nelse:\n    ctx = noop_ctx()\nwith ctx:\n    .... this seems unused. I am blind!  Thanks :D. All hook.sh does is print the filenames and invariantly fail -- I think this tests that?. Yeah... the more common errors they're going to get is \"no file hooks.yaml\" and \"missing key 'files'\" though -- and unfortunately no way to retroactively improve error messages in old versions :S. Yeah I do think it should be AND - I also think I should implement exclude_types as we have (files, exclude) but no way to do that with types.. Actually, maybe it should be OR - though I can't think of a compelling reason why someone would ever use more than one tag.. shrugs, easier to leave it how it is so I'll do that.  If someone has a legitimate usecase for OR that neither exclude_types nor separate hooks satisfies we can revisit this.. ```\n\n\n\nline\n'        sha: v1.0.0\\n'\n``\nso it matches the\\n` line ending. actually, this case never occurs now but I think this test is still useful. Cool!\n\n\n\nI'd personally write this as if + else and use a raw string.  This works as is. Ah you'll need the no cover comment here, want to make the other changes while you're at it too? . Yep! . Ah, I can see how it's confusing here. windows no cover is \"this won't be covered under test on appveyor\" while no cover is for Travis and appveyor. The existing comment should stay and you should add a plain no cover to your new code. It didn't need it previously because ternaries aren't considered branches. . this matches the other ones in the file, I plan to add more keys here so it'll look more natural eventually. I'd probably do __init__(self, *values) just to save some parens (other classes in this module do similarly).\np4: bonus points if it's a namedtuple (so we get free repr):\npython\nclass NotIn(collections.namedtuple('NotIn', ('values',))):\n    def __new__(cls, *values):\n        return super(NotIn, cls).__new__(cls, values=values)\n    def __eq__(...):\n        .... ++, this is exactly how I imagined this would work. let's try and reuse the include_exclude from pre_commit.commands.run (such that this more reflects reality and doesn't drift). to be a valid hook, this needs to take 1..* arguments and process them.  Let's add an argument parser similar to this one. files will always be present when loaded through load_config due to pre_commit.schema -- this can be hook['files']. just a consistency thing: the rest of the modules use exit (introduced as a convenience in python2.5 as part of the site module)  this is equivalent and fine, just a slight inconsistency. I've also been moving more to conventionally naming this function main -- the function itself makes sense given the context that the module name gives us. My thoughts with this hook (again, I didn't communicate this, sorry!) is to make (no files to check)Skipped an error when running with --all-files.  So what I'd like to see in this hook is a reuse of the include / exclude for both files and types from pre_commit.commands.run -- the messaging can be \"{hook_id} does not apply to this repository\" or something of the sort. instead of loading the configuration, I think you can just use ordered_load -- then you don't have the issue of picking up the values from the manifest -- you'll of course then need to do tests for keys and can't assume they're always there -- but I think you'll be able to make stronger assertions about correctness and eliminate false positives.. Let's include '{}' in the error messages so we know what pattern failed to match. hmmm, unless I'm thinking about this wrong I don't think files is relevant to this hook?. one benefit of entry is it gets shlex'd for us.  so we can do this:\npython\n'entry': '{} -m {}'.format(pipes.quote(sys.executable), check_useless_excludes.__name__),\ninstead of (error prone) hardcoding the module names, we can import them and use __name__ as well. mmm autoupdate won't actually help out here -- but pip install pre-commit --upgrade might!. note that I removed this test, but it's already asserted here. we had the same situation in pre-commit-hooks and I think this is the wrong solution as it has the potential to hide problems with different configurations.  We instead opted to pass --no-gpg-sign to any git commits under test: https://github.com/pre-commit/pre-commit-hooks/pull/121. this fixture also doesn't scale (adding it to literally every test) -- perhaps instead an autouse fixture would have been more appropriate. why this change?. without bash, most of the testsuite is useless -- pre-commit tests lots of the framework functionality with script hooks as they are fast.  I don't think I can accept a PR which adds skips for bash.  As bash is necessarily installed on all the platforms we support (it's necessary for git itself to function) this also seems inappropriate.. \ud83d\udc4d . oh true!  totally forgot about this \ud83d\udc4d . oh nice, great idea!. hmmmm womp.\nPerhaps make a\npython\n@cached_property\ndef manifest_hooks(self):\n    from pre_commit.meta_hooks import check_useless_excludes\n    ...\nto avoid the circular imports? (circular imports are such a bummer). let's leave this test with the default repo=None and just add new tests. the default for nargs is 1 and the default for default is None (so no need to specify them\nbut I guess that brings up the question: should I be able to do:\npre-commit autoupdate --repo repo1 --repo repo2 --repo repo3\nto update multiple repositories?\nThat can be implemented pretty easily with action='append' -- thoughts?. good enough for me!. let's combine it with this block :). yeah, I'd format it like this:\npython\nif (\n        is_local_repo(repo_config) or\n        is_meta_repo(repo_config) or\n        (repo and repo != repo_config['repo']\n):. this is going to trip the line length checker, let's write it like this:\npython\n     return {\n         k: v for k, v in os.environ.items()\n         if not k.startswith('GIT_') or k in {'GIT_SSH'}\n    }. unrelated (please rebase out). unrelated (please rebase out). unrelated (please rebase out). unrelated (please rebase out). this actually makes the test less readable:\nhttps://testing.googleblog.com/2014/07/testing-on-toilet-dont-put-logic-in.html\nalso this is unrelated, please rebase this out.. my other hesitation is I plan to delete this function after the deprecation period.. shouldn't have a comma here.\nAlso now that I notice it, this error message could actually be incorrect in the case of a custom --config -- it should probably format in the runner's configuration path. and probably with the updated substitution this message should instead read something like:\npython\nlogger.error(\n    'Your pre-commit configuration is unstaged.\\n'\n    '`git add {}` to fix this.'.format(runner.config_file),\n). fwiw this style was intentional -- it's very easy for a human to see at a glance that there are two disparate paths that the code could take.  By decomposing the if / else, there's overhead to parsing the code.. The comma was there, but the parens were not as you've put them.\nFor rationale on the comma see this. this test is probably sufficient, the others I don't think are super necessary (we already test all three of those scenarios). -z / --null-data has a bit of a different meaning than is implemented here:\n-z, --null-data\n              Treat  input  and  output  data  as  sequences  of  lines,  each\n              terminated by a zero byte (the ASCII NUL character) instead of a\n              newline.  Like the -Z or --null option, this option can be  used\n              with commands like sort -z to process arbitrary file names.\nWe should probably adhere to the precedence in grep for least surprised.. the .decode() is causing TypeErrors for python 3.  As the hook is currently written there's no assumption about source encoding -- a bytes regex is used over a bytes file. Here's some example output:\n$ echo -e 'foo\\nbar\\nbaz' | grep -Hnz 'b.*z'\n(standard input):1:foo\nbar\nbaz. should this option imply re.MULTILINE?. One idea here might be splitlines = zsplit if args.null_data else bytes.splitlines and then pass that in?. $ git grep 'def zsplit'\npre_commit/git.py:def zsplit(s):\nzsplit is essentially the splitlines for -z (split lines delimited by \\0). I think my ideal output for this would show the full line numbers, the character offsets are a bit misleading (and less useful) imo. that said, as a v1, I'd be ok with the same output that grep -z gives. more simply: contents[:match.start()].count(b'\\n'). minor: probably fits on one line. the three '\\n' literals here I believe need to be b'\\n'. could even write flags |= .... I'm surprised (?) that this directory doesn't need to be created first?  should there be a mkdir -p \"$HOME/.swift\" above this? (note that I also use this script to test locally :D). another idea if wget doesn't pan out (though it seems from travis-ci that this works!) would be to checksum test the file and retrieve if incorrect (missing). I meant more if we couldn't find a solution that worked with wget :)\nlet's add the mkdir -p so I can keep using this script locally and then I'll merge this!. 3.7-dev is 3.7a4 which is not much like 3.7.0 final\nYou can read more about my writeup about this: https://github.com/deadsnakes/travis-ci-python3.7-example#travis-ci-python37-example. pyyaml 4.x is very much in flux, and pre-commit works fine with the 3.x version\nFortunately, there's supposed to be a 3.13 release that comes out today -- but isn't out yet https://github.com/yaml/pyyaml/issues/193#issuecomment-402333150. when adding py37, we can probably remove py35 -- we don't have any python3.5 specific code and I want to keep travis-ci fast :). this should be fine to just leave unbounded -- pip will choose the latest version already as long as it isn't a pre-release. I might be wrong but I think  adding parens around this second condition is sufficient (which would be a simpler fix). Let me know if that works :) . very very minor: the rest of the code conventionally uses f as a variable name here -- mind changing them all to use that?. you probably don't need this filtering here (I would hope?) -- I think this was just due to testing a namespace package in the other library. Ah lol of course, the same name space package is still in play. will probably need # pragma: no covers for this -- elsewhere six.PY2 is being used, let's use that here as well. I'd probably call this ArgSpec or make_argspec personally. Are you seeing issues with git < 2.5? This branch is intended to allow that to work?. can remove the pass here. hmm, given the test failures, this should probably happen in the use_color function below and not in format_color (to keep this function pure and to keep auto / always functioning properly)\nProbably change the return to:\npython\nreturn (\n    setting == 'always' or\n    (setting == 'auto' and sys.stdout.isatty() and terminal_supports_color)\n). I usually prefer mock.patch.object as it's slightly less error prone and has fewer side-effects (mock.patch can trigger an import as well as a bunch of getattrs)\nIt doesn't actually matter here so this is fine. instead of pytest-mock, let's use mock (already a dependency).  I tend to avoid mocker because its scope is not well defined (I'd much rather have with statements to clearly delineate when something is / isn't mocked).. the original code was an attempt to avoid O(N^2) work -- I think this pattern can still be used with something like:\n```python\ndef _command_length(*cmd):\n    cmd_s = ' '.join(cmd)\n    if sys.platform == 'win32':\n        return len(cmd_s)\n    else:\n        return len(cmd_s.encode(sys.getfilesystemencoding()))\n...\ntotal_len = _command_length(*cmd)\n\n...\n\nif total_len + 1 + _command_length(arg) <= _max_length:\n\n``. probably need to do something like this: https://github.com/pytest-dev/pytest-xdist/pull/317/files. yeah, probably make this always synchronous is fine -- pcre is going away eventually anyway (for pygrep -- though I assume below I'm about to look at pygrep anyway!). up to you,concurrent.futuresis slightly more future-proof if the code is simpler (if it isn't then definitely don't bother). this should still bee.args[0]right?  callingstr()` can lead to encoding problems in python2.x. it makes a bigger diff but it might make more sense to move this up so it reads like this:\n```python\ntry:\n    new_hooks = Repository.create(new_config, store).manifest_hooks\nexcept InvalidManifestError as e:\n   raise ...\nhooks_missing = hooks - set(new_hooks)\n```\n(note I also adjusted the set logic, not sure why it was anding with hooks before, I think the set logic is equivalent now). pre-commit install and then pre-commit run --all-files ;) (it'll fix the import ordering issue for you automatically, and enforce it on commits after that!). lol nice. shouldn't need any changes to CONFIG_HOOK_DICT. default this to id, then you can remove the or logic below and only use alias.\nyou'll need to write a custom validator -- you can see cfgv for examples or MigrateShaToRev below. the first part of this conditional is unnecessary because we check not args.hook above.\nI'd write this as (emphasis on indentation here)\npython\n            if (\n                    (\n                        not args.hook or\n                        hook['id'] == args.hook or\n                        hook['alias'] == args.hook\n                    ) and\n                    (not hook['stages'] or args.hook_stage in hook['stages'])\n            ):\n   . I wouldn't change this messaging. this clobbers the pytest exception message. combine this with the condition above. could maybe make an aliased_repo fixture and use it in both tests\nI think the code is fairly self evident here, I'd drop the comment. why didn't you go with my code suggestion?  This seems way worse since everything now needs starargs. if skips can never contain the empty string I think you can drop the first part of this condition?\nif skips can contain the empty string, let's fix skips. instead of ruining all calls for the conveneince of two I'd rather ruin two calls, plus I bet we can make those work if you ask :). I'm most concerned about these ~4 lines.  this mucks with git internals to make a commit into a shadow repo.  it seems to work, but I can't really tell if this is intended to work or not. is this necessary now? I'd expect this env var to not matter at runtime. can even just call test_golang_hook(tempdir_factory, store). no need for 2-arg assert, the pytest error message is good enough. I'd rather keep this as it was, right now this clobbers the pytest message. I think this can be while i < len(lines) and _is_header_line(...) -- that way we don't overrun a file that's just \\n\\n as well. heh, it is a pretty small change but I want to make sure we don't regress int he future \ud83d\ude06 . that's why we test -- looks like it's uhh, failing pre-commit checks now ;). no! it's absolutely fine -- no urgency whatsoever <3 I'm happy to help you through the process!\nIf you click through the travis-ci output it autofixed it for you -- you just need to apply the same change to the branch :)\nI think it just needs one extra newline right above the test you added. Ah yeah, that'd be a pep8 rule. Makes the code nicely spaced I guess. No problem at all! I'm anyways happy to help someone fix things :) . I think you can put this back, cloning doesn't get involved for the local repositories (and this should happen anyway if the make_strategy raises). I think there's actually three strategies we have to try here:\n\nfetch --depth=1\nset the git protocol to v2 and then fetch --depth=1 (? or maybe just try this first since it's the most reliable for github)\nfall back to full clone. another \"equivalent\" to full clone can reuse that though:\n\n```bash\nnon-shallow clone without using git clone\ngit init x\ncd x\ngit remote add origin ...\ngit fetch origin  # this is all that changes between shallow / non-shallow clone\ngit checkout ...\n``. this is a mutable default -- in this case it isn't a problem but it should probably be_env=None`\npython\n_env = _env if _env is not None else os.environ. suggestion\n        if staged_files:. ",
    "struys": "So we did this, we just need to open source it right?\n. Context? Why do we need this?\n. Awesome!\u2014\nSent from Mailbox for iPhone\nOn Sun, Mar 23, 2014 at 5:23 PM, Anthony Sottile notifications@github.com\nwrote:\n\nClosed #42 via 1dccbf3ea88b756e077597fbf58f24f11a43e76c.\nReply to this email directly or view it on GitHub:\nhttps://github.com/pre-commit/pre-commit/issues/42\n. Figured that was probably the issue.\n\nCan I take care of updating the language_version? What version is required for scss-lint?\n. nvm, found it 1.9.3. I'll send you a PR\n. lg2m!\n. Nice!\n. ship it\n. +1\nSupporting directories would also be cool.\n@quentindemetz if you opensource your arcanist/phabricator support we'd definitely like to include them on pre-commit.com\n. We need a system similar to pip for pear packages or whatever is most common in PHP. I don't know enough about it to say how we should be doing it.\nIt should look something like what we have for python/node/ruby, for example - https://github.com/pre-commit/pre-commit/blob/master/pre_commit/languages/python.py\n. @shihoonhootsuite have any experience with these?\n. lg2m\n. Is it a lot of work to keep 2.6 considering we're doing 2.7? We still have a lot of projects at Yelp on 2.6, I imagine other companies/projects still need to support it too.\n. make this a tuple\n. I assume this has nothing to do with the actual change.\n. ",
    "Dinoshauer": "We just open sourced this yesterday: https://github.com/FalconSocial/pre-commit-python-sorter\n. I'm using git version 1.9.1\nHere are the contents of the patch file\n$ cat /home/k/.pre-commit/patch1412683352\ndiff --git a/file.py b/file.py\nindex f99a4d5..a8c4aad 100644\n--- a/file.py\n+++ b/file.py\n@@ -1 +1 @@\n-\"\"\"I am unstaged\"\"\"\n+'''I am unstaged, but I have changes'''\n. Here's the output of the command:\n```\n$ . test.sh\n$$ git init test\nInitialized empty Git repository in /home/k/testtest/test/.git/\nretcode 0\n$$ cd test\nretcode 0\n$$ sh -c echo '\"\"\"Docstring\"\"\"' > unstaged.py\nretcode 0\n$$ touch foo.py\nretcode 0\n$$ git add unstaged.py foo.py\nretcode 0\n$$ git commit -m initial commit\n[master (root-commit) aa743a4] initial commit\n 2 files changed, 1 insertion(+)\n create mode 100644 foo.py\n create mode 100644 unstaged.py\nretcode 0\n$$ sh -c echo \"'''I am unstaged but I have changes'''\" > unstaged.py\nretcode 0\n$$ sh -c echo 'x = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"' > foo.py\nretcode 0\n$$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nmodified:   foo.py\nmodified:   unstaged.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nretcode 0\n$$ git add foo.py\nretcode 0\n$$ sh -c git diff --ignore-submodules --binary --exit-code > patch\nretcode 1\n$$ cat patch\ndiff --git a/unstaged.py b/unstaged.py\nindex c83d2e0..cbb1889 100644\n--- a/unstaged.py\n+++ b/unstaged.py\n@@ -1 +1 @@\n-\"\"\"Docstring\"\"\"\n+'''I am unstaged but I have changes'''\nretcode 0\n$$ git checkout -- .\nretcode 0\n$$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD ...\" to unstage)\nmodified:   foo.py\n\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\npatch\n\nretcode 0\n$$ git apply patch\nfatal: unrecognized input\nretcode 128\n```\nand here's ~/.gitconfig\n```\n[user]\n    name = Kasper Jacobsen\n    email = k@mackwerk.dk\n[color]\n    branch = always\n    diff = always\n    grep = always\n    interactive = always\n    pager = true\n    showbranch = always\n    status = always\n    ui = always\n[apply]\n    whitespace = fix\n[branch]\n    autosetupmerge =  true\n    #autosetuprebase = always\n[merge]\n    # Include summaries of merged commits in newly created merge commit messages\n    log = true\n    tool = sublime\n[mergetool \"sublime\"]\n    cmd = subl -w $MERGED\n    trustExitCode = false\nUse origin as the default remote on the master branch in all cases\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n[push]\n    default = tracking\n[fetch]\n    recurseSubmodules = true\n[log]\n    decorate = short\n[pretty]\n    custom = %C(yellow)%h%Creset -%C(green)%d%Creset %s %Cgreen(%cr) %C(bold blue)%an%Creset\n[alias]\n    dc = diff --cached\n    df = diff --word-diff\n    co = checkout\n    cp = cherry-pick\n    st = status\n    br = branch -a\n    lg = log --graph --pretty=medium --abbrev-commit --date=local\n    lgb = log --graph --pretty=medium --abbrev-commit --date=local --branches --all\n    lol = log --graph --oneline\n    lola = log --graph --oneline --all\n    l = log --graph --pretty=custom\n    la = log --graph --pretty=custom --all\n# Show files ignored by git:\nign = ls-files -o -i --exclude-standard\n\n# Show verbose output about tags, branches or remotes\ntags = tag -l\nbranches = branch -a\nremotes = remote -v\n\nonto = !\"git co -b __ONTOTMP; git co $1; git merge __ONTOTMP; git branch -d __ONTOTMP\"\ntoday = log --since=midnight --author='Kasper Jacobsen' --oneline\n\n# exclude files locally\nexclude = !sh -c 'echo \"$1\" >> .git/info/exclude' -\n\nURL shorthands\n[url \"git@github.com:\"]\n    insteadOf = \"gh:\"\n    pushInsteadOf = \"github:\"\n    pushInsteadOf = \"git://github.com/\"\n[url \"git://github.com/\"]\n    insteadOf = \"github:\"\n[url \"git@gist.github.com:\"]\n    insteadOf = \"gst:\"\n    pushInsteadOf = \"gist:\"\n    pushInsteadOf = \"git://gist.github.com/\"\n[url \"git://gist.github.com/\"]\n    insteadOf = \"gist:\"\n[credential]\n    helper = cache\n``\n. Great! Will update and check\n. Confirmed! Thanks!\n. Ah, that's really cool. I'll look into making it asystemhook if I get the time over christmas. Let me know if there's anything I can help with re: your version, I might be able to find some time :)\n. @asottile I'll check it out and get back to you :)\n. Eureka, it works! :+1: \n. Hah, oh wow, I had totally missed that :+1: - Seems to work like a charm! It does however seem to be a bit excessive to have to addlanguage_versionto allhook.id`s, no?\n. ",
    "vinayinvicible": "@asottile \nI recently faced an issue with pre-commits during merge conflict.\ngit's STDOUT during merge conflict looks like this\n\nFrom github.com:REPO\n * branch            master     -> FETCH_HEAD\nAuto-merging M_file1\nAuto-merging C_file1\nCONFLICT (content): Merge conflict in C_file1\nRemoving R_file1\nAuto-merging M_file2\nAuto-merging C_file2\nCONFLICT (content): Merge conflict in C_file2\nAuto-merging M_file3\nAuto-merging M_file4\nAutomatic merge failed; fix conflicts and then commit the result.\n\nI haven't modified any other file than the conflict files.\nI would expect pre-commits to run only on C_file* files.\nBut it was running on both C_file* and M_file* files.\nI am not sure if this was intended behavior.\n. @asottile I've raised a PR #388 \n. @asottile any updates on this\n. Sure thing\n. @asottile added the test.\nI don't suppose failed checks are due to my changes\n. that import example is a solid argument. :+1: \nyou should definitely modify docs regarding this\n. @asottile On second thought, shouldn't you be running pre-commit on pure merge commits also (same argument as yours')\n. ",
    "bukzor": "pip sets a precedent for logging un-shown errors.\n$ pip install waaat\nDownloading/unpacking waaat\n  Could not find any downloads that satisfy the requirement waaat\nCleaning up...\nNo distributions at all found for waaat\nStoring debug log for failure in /home/buck/.pip/pip.log\n. homebrew grep would be ggrep\n. The non-clobbered error message is more useful:\n```\njsonschema.exceptions.ValidationError: None is not of type u'string'\nFailed validating u'type' in schema[u'items'][u'properties'][u'repo']:\n    {u'type': u'string'}\nOn instance[0][u'repo']:\n    None\n```\n. I think it's fair to document git-shell as a dependency.\nThere's also MinGW, cygwin. I think git-shell is a customized mingw.\n. Error looks like this now:\n$ pre-commit run --all\nAn error has occurred: InvalidConfigError: Invalid yaml: .pre-commit-config.yaml\nmapping values are not allowed here\n  in \"<string>\", line 3, column 15:\n            -   id: pylint\n                  ^\nCheck the log at ~/.pre-commit/pre-commit.log\n. Repo: null makes sense to me.\nJust don't validate the sha for language: system.\nAlso: can we put system-style hooks at the top level? It doesn't actually\nmake sense to nest then under a repo at all.\nJust ideas. If it makes things a mess, disregard.\n--phone is hard.\nOn May 7, 2015 6:17 PM, \"Anthony Sottile\" notifications@github.com wrote:\n\nI'm going to clarify here since I think I'm a bit confused :)\nI'd like to make @bukzor https://github.com/bukzor's config work when\nit changes from:\n-   repo: git://github.com/bukzor/pre-commit-system-hook.git\n  sha: 64a3e3f0d11f74ccd0498ea3149c8e177dd9989c\n  hooks:\n  -   id: system\n    name: PyLint\n    entry: python -m pylint.main\n    language: system\n    files: .py$\nto\n-   repo: pre-commit-locally-configured\n  hooks:\n  -   id: pylint\n    name: PyLint\n    entry: python -m pylint.main\n    language: system\n    files: .py$\nI think (but I might be a bit off!) that all we would need to change to\nsupport this is:\n- Change the config schema to allow for missing sha in the case the\n  repo is our special value\n- In the case that our repo is the special value, the repository is a\n  special list which contains \"all hooks\" (that is to say that anything we\n  configure in our config will match a hook in this special repo)\n- Allow the current code which merges the config dict on top of the\n  manifest dict to continue to work (might need it in another place as well)\nDoes this sound right? (mostly wanted to just get a checklist together so\nit's clear what the plan is here :D)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/219#issuecomment-100060347\n.\n. Is fine. It probably doesn't make sense for the list to be heterogeneous.\n\n--phone is hard.\nOn May 8, 2015 9:54 AM, \"Anthony Sottile\" notifications@github.com wrote:\n\nAlso: can we put system-style hooks at the top level?\n@bukzor https://github.com/bukzor this would entail a breaking change\nto the config file, I don't really want to do that at this time.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/219#issuecomment-100297345\n.\n. this can't be correct in both py2 and py3 i think\n. I'd add some $foo !bar arguments\n. \n",
    "coveralls": "\nCoverage increased (+0.01%) when pulling bd1afceeaf7f5c0518337f6fc70da637d16612a6 on files_specified_in_hooks into 0ec902034694ce57aac7cb777c3a4a75f91d08cc on master.\n. \nCoverage decreased (-0.1%) when pulling 07664a80cacf3ce527c33d9dfc6cd78c2f26b79a on rbenv_rvm_download into 09650b814adea239455536db99982b1bf76d2405 on master.\n. \nCoverage decreased (-0.0%) when pulling 170175698809c8d324d36b064f8c2ddcd672d93f on no_defaults_autoupdate into 76c463e3595c564413172e7c888c7e136021a136 on master.\n. \nCoverage decreased (-0.05%) when pulling c4e4c2dccb23a128e0a135e44790d92e7071b3dd on merge_conflict_detection into 5a1accd6974612349961a311d7559d332aca59c8 on master.\n. \nCoverage remained the same when pulling ecf82ed5e00ef8e2a48b1fc2f807112a9f459367 on sys_stdout_write_py26 into 37d3dc0c82f4cdf643ecad8e2beefff99464f88f on master.\n. \nCoverage remained the same when pulling 56d2789c8357f3dc588ba270cfec6b92015fde28 on wting:update_autoupdate_help_msg into bba24b6535fb87751776f0709ff5763135669f23 on pre-commit:master.\n. \nCoverage remained the same when pulling f0352bf0bee3e3854654fa5c29ee3d454c84bfd5 on wting:update_autoupdate_help_msg into bba24b6535fb87751776f0709ff5763135669f23 on pre-commit:master.\n. \nCoverage remained the same when pulling 812fcc45efb77da9b56c12c0031738a8670a4d89 on venv_python into 59e753624e471100f94b3f7503bd01944476a4e3 on master.\n. \nCoverage remained the same when pulling 598e54640bc0036e05f6de7aeb04fbe937cc4213 on venv_python into a6112f44f20ff2446ae68eefd46d718bb4281269 on master.\n. \nCoverage remained the same when pulling 89205a3ac55d4314394e1a5b79ddf90137d0998f on npmrc_prefix_fix into 59e753624e471100f94b3f7503bd01944476a4e3 on master.\n. \nCoverage remained the same when pulling fa9db4ec23b6cf546846ded458d26f10eef40903 on fix_width_thingy into 06830ab59000b5f2e607ae55d3259f8aac3feef3 on master.\n. \nCoverage remained the same when pulling d8d7893cf77edeecbd22c5551a068e0664ed79a2 on filenames_as_arguments into cfd86d5faab40287d4655e0f4fba1310cc809a43 on master.\n. \nCoverage remained the same when pulling 7bd1dd977d771e800a82180cf9f22fd5905ab8d3 on bukzor:error-output-blovinates into 645838cb514583249478e347aa80a0af743edace on pre-commit:master.\n. \nCoverage remained the same when pulling 26502dfd0be4e223a0a4687066a1779ebf3552fb on default_args_from_hooks_yaml into 78c682a1d13ba20e7cb735313b9314a74365cd3a on master.\n. \nCoverage decreased (-0.12%) when pulling b9ac4cb4c94756e421cc6a0ee137b8504f366532 on dongweiming:pre-push into 78c682a1d13ba20e7cb735313b9314a74365cd3a on pre-commit:master.\n. \nCoverage decreased (-0.12%) when pulling b6b2187c5a0c249e35c266878004b13e8e986eef on dongweiming:pre-push into 78c682a1d13ba20e7cb735313b9314a74365cd3a on pre-commit:master.\n. \nCoverage decreased (-0.04%) when pulling cd9d09d6e05b4b124d5581bdb118bb49a1f4d943 on dongweiming:pre-push into 78c682a1d13ba20e7cb735313b9314a74365cd3a on pre-commit:master.\n. \nCoverage decreased (-0.04%) when pulling 6ca3e3fa3dffd7ca15de6a022709433f1c3ba53d on dongweiming:pre-push into 78c682a1d13ba20e7cb735313b9314a74365cd3a on pre-commit:master.\n. \nCoverage decreased (-0.04%) when pulling e2fce11506ac157d153b7967f16f47793c3f16da on dongweiming:pre-push into d2b11a0c500d2f1f6ea78cdc96d88a977ea6c994 on pre-commit:master.\n. \nCoverage remained the same when pulling 31e95a4958fa106d01250c5e5231052634947afc on dongweiming:pre-push into d2b11a0c500d2f1f6ea78cdc96d88a977ea6c994 on pre-commit:master.\n. \nCoverage remained the same when pulling febb270afe307af73e3d94c101e005459cafdb6c on pre_push into d2b11a0c500d2f1f6ea78cdc96d88a977ea6c994 on master.\n. \nCoverage decreased (-0.04%) when pulling 2be849b9b615468c85a478b2600652ac3664fe8e on sqlite_instead_of_symlinks into e6add0e4a21a392b272944344497491cc76d3ce8 on master.\n. \nCoverage remained the same when pulling a9a14ceb66f56b4cfc657ac2dc01a7226440c37e on sqlite_instead_of_symlinks into e6add0e4a21a392b272944344497491cc76d3ce8 on master.\n. \nCoverage decreased (-0.04%) when pulling 806939bff9f1eba3cd6994f7218d8f60e945aa7d on sqlite_instead_of_symlinks into e6add0e4a21a392b272944344497491cc76d3ce8 on master.\n. \nCoverage remained the same when pulling 8dd4ee389f7b73a80fd340724ac0aaaeda09cfe5 on sqlite_instead_of_symlinks into e6add0e4a21a392b272944344497491cc76d3ce8 on master.\n. \nCoverage remained the same when pulling fee5444c4d6eba6a9893698cde05cd0aba6c691a on sqlite_instead_of_symlinks into e6add0e4a21a392b272944344497491cc76d3ce8 on master.\n. \nCoverage remained the same at 100.0% when pulling bb343d3e9b8dbbd06a0579a001ab6bf5db9a748c on quote_params into 9fc6a8bfedd2acbb6644a84cf51f92ee258e2509 on master.\n. \nCoverage remained the same at 100.0% when pulling bb343d3e9b8dbbd06a0579a001ab6bf5db9a748c on quote_params into 9fc6a8bfedd2acbb6644a84cf51f92ee258e2509 on master.\n. \nCoverage remained the same at 100.0% when pulling f4d251fbbe673ba5d68d6c165c146265c276f114 on quote_params into 9fc6a8bfedd2acbb6644a84cf51f92ee258e2509 on master.\n. \nCoverage remained the same at 100.0% when pulling f4d251fbbe673ba5d68d6c165c146265c276f114 on quote_params into 9fc6a8bfedd2acbb6644a84cf51f92ee258e2509 on master.\n. \nCoverage remained the same at 100.0% when pulling 1996a4c8a161f628fdb5b2e3cf068c242fa9ce47 on control_c_during_install_more_atmoic into 901c50632f6236a35dbfed5d7e12477db2949f20 on master.\n. \nCoverage remained the same at 100.0% when pulling 02f0a1c434b7d1a877e778bb142225f18e53e8c5 on actually_print_when_installing into 8f51bf2d0bd4d31d9e44fdff1e391175627966ff on master.\n. \nCoverage remained the same at 100.0% when pulling 02f0a1c434b7d1a877e778bb142225f18e53e8c5 on actually_print_when_installing into 8f51bf2d0bd4d31d9e44fdff1e391175627966ff on master.\n. \nCoverage remained the same at 100.0% when pulling 02f0a1c434b7d1a877e778bb142225f18e53e8c5 on actually_print_when_installing into 8f51bf2d0bd4d31d9e44fdff1e391175627966ff on master.\n. \nCoverage remained the same at 100.0% when pulling 02f0a1c434b7d1a877e778bb142225f18e53e8c5 on actually_print_when_installing into 8f51bf2d0bd4d31d9e44fdff1e391175627966ff on master.\n. \nCoverage remained the same at 100.0% when pulling 7f46d5042c406db75812917e83a0d3d303256327 on windoze into 3babceb2ca07a76960fd8c40f43ad0c4036cd154 on master.\n. \nCoverage remained the same at 100.0% when pulling 50f465ac9e856c15d1dde46effd97be381fb4a5d on windoze into 3babceb2ca07a76960fd8c40f43ad0c4036cd154 on master.\n. \nCoverage remained the same at 100.0% when pulling f1640c4fc713a6e64b1163643d4c466df2f48aca on windoze into 3babceb2ca07a76960fd8c40f43ad0c4036cd154 on master.\n. \nCoverage remained the same at 100.0% when pulling f71b92c68db322fb9890361b7aab92600ea83837 on windoze into 3babceb2ca07a76960fd8c40f43ad0c4036cd154 on master.\n. \nCoverage remained the same at 100.0% when pulling f71b92c68db322fb9890361b7aab92600ea83837 on windoze into 3babceb2ca07a76960fd8c40f43ad0c4036cd154 on master.\n. \nCoverage remained the same at 100.0% when pulling 161cff73b56c44ddd226e313b7e54034aebfbc5d on windoze into 3babceb2ca07a76960fd8c40f43ad0c4036cd154 on master.\n. \nCoverage remained the same at 100.0% when pulling 8faf96c1ad5de90c4f9ca0dd41b1ec1c88ff590e on dont_rename_across_devices into 7b4470850e8ffa2911419a92d4050b301e3c63f3 on master.\n. \nCoverage remained the same at 100.0% when pulling 3bf852f46a7c65d484d7c2b989cbedefe75213ad on xargs_derp_windows into 52c2d9c35a9f4d298d879f6608c0bc444b312396 on master.\n. \nCoverage remained the same at 100.0% when pulling 3bf852f46a7c65d484d7c2b989cbedefe75213ad on xargs_derp_windows into 52c2d9c35a9f4d298d879f6608c0bc444b312396 on master.\n. \nCoverage remained the same at 100.0% when pulling fbf86c775c46aec92b6da6e25faf0c5b5dcfb4ef on use_sys_executable_more_208 into c4ff9d498830cb04ad54dc3b73666b5e7943fa3d on master.\n. \nCoverage remained the same at 100.0% when pulling fbf86c775c46aec92b6da6e25faf0c5b5dcfb4ef on use_sys_executable_more_208 into c4ff9d498830cb04ad54dc3b73666b5e7943fa3d on master.\n. \nCoverage remained the same at 100.0% when pulling fbf86c775c46aec92b6da6e25faf0c5b5dcfb4ef on use_sys_executable_more_208 into c4ff9d498830cb04ad54dc3b73666b5e7943fa3d on master.\n. \nCoverage remained the same at 100.0% when pulling badb41457acd49bacc50d7cf8570a736308a3e05 on care_less_about_user_installs_in_tests_221 into cdf726bbedb15f33ca60fdc397fec379946755fc on master.\n. \nCoverage remained the same at 100.0% when pulling a5259aba50e94c71c7f4bb4727d26ffa0cf552f0 on Lucas-C:master into aec1c55f68bfdda9c3d15f430e24ceef0400a0b2 on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling 7dd8c6ab4a1bfb0389adcb600b214ccd212534dd on Lucas-C:master into aec1c55f68bfdda9c3d15f430e24ceef0400a0b2 on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling c99b333b6f18ea9415d9f6f5f6b06ac621447ebe on caffodian:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling 1c28ae10f7f61643548624b1cd034bb598249474 on caffodian:master into 24ce08129aaca8bfd4f9bfb947a6497496aefe5b on pre-commit:master.\n. \nCoverage decreased (-0.07%) to 99.93% when pulling 8aa931ef823fbeda568db1d3c50c55b04d83fa2e on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage decreased (-0.07%) to 99.93% when pulling 8aa931ef823fbeda568db1d3c50c55b04d83fa2e on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage decreased (-0.07%) to 99.93% when pulling 8aa931ef823fbeda568db1d3c50c55b04d83fa2e on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling e1098d96177b1558c586b369b6d6729d8fa1c19c on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling f5504c1f257e8041bc977de64cfb89139d88d676 on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling b68261c7202fd543bc53e7545cc0a9155e0dd9e4 on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling b68261c7202fd543bc53e7545cc0a9155e0dd9e4 on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling b68261c7202fd543bc53e7545cc0a9155e0dd9e4 on Lucas-C:master into d97ea30c4bb309a2877fed95323ac8c793c0679f on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling d78fec6405ca48957a3a1245059ea5062a89dc18 on better_multiple_language_support into a875231be3b89c1803237a336e3b11b60d8ddc9b on master.\n. \nCoverage remained the same at 100.0% when pulling 45d4a195efd414cc04ea718989e0a79e2da1df0b on better_multiple_language_support into a875231be3b89c1803237a336e3b11b60d8ddc9b on master.\n. \nCoverage decreased (-0.04%) to 99.96% when pulling b140f92cd7e20368b27d19ea01227402e71c294a on no_defaults_in_config_227 into 9515ca06378d74f1e4f8013db2b5230c1f15edaa on master.\n. \nCoverage remained the same at 100.0% when pulling 039a7a5878928bf2e18896185c5eaee9023fbb2c on no_defaults_in_config_227 into 9515ca06378d74f1e4f8013db2b5230c1f15edaa on master.\n. \nCoverage remained the same at 100.0% when pulling e2d15f5517aaae0d89a2270e47d09fe76106d8b6 on non_ascii_not_found_207 into 20c546a7daef67750c4f2bf099a23f8b9219e32a on master.\n. \nCoverage remained the same at 100.0% when pulling 7905594215647b6900b466626b782c93588829f3 on non_ascii_not_found_207 into 20c546a7daef67750c4f2bf099a23f8b9219e32a on master.\n. \nCoverage remained the same at 100.0% when pulling 7905594215647b6900b466626b782c93588829f3 on non_ascii_not_found_207 into 20c546a7daef67750c4f2bf099a23f8b9219e32a on master.\n. \nCoverage remained the same at 100.0% when pulling a97cb38b9a8bf72e55489d5ba3f038722491bd1d on hooks_dir_not_there_234 into b4bc5e47423635e187d50d8730584d2c8ff06772 on master.\n. \nCoverage decreased (-0.03%) to 99.97% when pulling 971060d4b9756a9d102e5bb3ee4d04027d35011c on Lucas-C:master into 1c46446427ab0dfa6293221426b855420533ef8d on pre-commit:master.\n. \nCoverage remained the same at 100.0% when pulling b575cb510c9780f052a89acec5fafd5a74a76062 on Lucas-C:master into 1c46446427ab0dfa6293221426b855420533ef8d on pre-commit:master.\n. ",
    "gabrielpugliese-luizalabs": "Yeah it worked like a charm! :) Ty\nPersonally, I think putting in docs would be bad unless you put a FAQ section with good keywords so Google can index it very well. Otherwise, I would try to implement a way to not stash that file (do normal stash followed by checking out the yaml file - like git checkout stash@{0} -- .pre-commit-config.yaml)\n. :heart: \n. ",
    "caffodian": "Dropping in to share my experience with this... \nI spent an hour or so doing a deep dive as the result of the following cryptic output (JSON schema validation failures on the yaml.)  I guess in previous projects I'd always committed the yaml file before actually trying to run hooks.  \n```\nAn error has occurred: InvalidConfigError: Invalid content: .pre-commit-config.yaml\nNone is not of type u'array'\nFailed validating u'type' in schema:\n    {u'items': {u'properties': {u'hooks': {u'items': {u'properties': {u'args': {u'items': {u'type': u'string'},\n                                                                                u'type': u'array'},\n                                                                      u'exclude': {u'default': u'^$',\n                                                                                   u'type': u'string'},\n                                                                      u'files': {u'type': u'string'},\n                                                                      u'id': {u'type': u'string'},\n                                                                      u'language_version': {u'type': u'string'}},\n                                                      u'required': [u'id'],\n                                                      u'type': u'object'},\n                                           u'minItems': 1,\n                                           u'type': u'array'},\n                                u'repo': {u'type': u'string'},\n                                u'sha': {u'type': u'string'}},\n                u'required': [u'repo', u'sha', u'hooks'],\n                u'type': u'object'},\n     u'minItems': 1,\n     u'type': u'array'}\nOn instance:\n    None\nCheck the log at ~/.pre-commit/pre-commit.log\n```\nEventually figuring out that this was the result of it not being able to actually load the yaml file, because it was being stashed.  \nI've since kicked myself a ton, but if we don't want to change it to not stash this yaml file, we could use a friendlier warning/error message and maybe a documentation PR as well.  I'm willing to take a look.  Thoughts?\n. Hmm...  I haven't looked at the code that does the git stash (I have a feeling that it's probably more annoying to say \"stash everything except this one file\" than might be expected) but should be able to pre-detect if the file doesn't exist before trying to run the json validation...which might lead to less confusion.  \nAnd then of course, there's always the least technical but probably quickest thing to do of shoving a giant warning into the docs :p \n. You mean it would be an error unles you specified that option, right?  :)\nYea, that was kinda what I was thinking as a simple solution.  I started thinking about our previous idea (mostly while getting familiar with pytest and the file system fixtures) and started to realize there are a lot of weird edge cases as well. :)  We can always look into a better automatic way of handling it, removing json schema, whatever other things come to your mind later, but just putting a sensible warning is a good low hanging fruit.\nSo what I'll do is proceed with the error/warning if this modified/unstaged config exists.  Then at least we can give a human error to this noob trap I ran into.  Funnily enough, I had to explain this issue when I was trying to show someone how to set up pre-commit at work earlier...\n. Think I have something for the above, but going to give it a bit of testing, some sleep, and some better docs before I PR it.  :p\nRight now I'm just having it run a separate git diff against the config file and just spitting out various warnings/errors depending on the arg, before it actually does the existing diff + stashing\n. Ha.  Ironically, I somehow missed actually running the hooks on one of the files while messing about :p   should be resolved now.\n. fixed and squashed.  not sure if appveyor is just going nuts because of the squash or... \n. ",
    "dfarr": "Thank you @asottile! Totally makes sense,\nPerhaps there is a way using tags to quickly check if there is a newer tag and update only if one is found. I will try to wrap my head around that scenario and get back to you, of course that would require developers to tag their release.\n. ",
    "gretel": "have this in the README would certainly help. spend about an hour figuring - and yes, i've read the docs.\n. ah, had to be explicit on sha:\n```\n\nrepo: git://github.com/pre-commit/pre-commit-hooks\n  sha: HEAD\n  hooks:\nid: check-added-large-files\nid: check-byte-order-marker\nid: check-docstring-first\nid: check-case-conflict\nid: check-json\nid: check-merge-conflict\nid: check-symlinks\nid: check-yaml\nid: detect-aws-credentials\nid: detect-private-key\nid: end-of-file-fixer\nid: flake8\nid: pretty-format-json\nid: requirements-txt-fixer\nid: trailing-whitespace\n```\n\nworks fine now. maybe i was confused by the documentation.\n. now it gets circular. i opened an issue because '' does not work.\n. let me try:\nThe value of sha should not be master or HEAD - both will only match the latest version at install time, and prevent subsequent updates.\nOn GitHub, the id of the most recent commit can be looked up easily (i.e. commit/master).\nAlternatively, setting sha to master and running pre-commit autoupdate before anything else will automatically populate the values of the sha keys in the configuration file:\n-   repo: git://github.com/pre-commit/pre-commit-hooks\n    sha: master\n    hooks:\n    -   id: check-added-large-files\n    -   id: check-byte-order-marker\n    -   id: check-docstring-first\n    -   id: check-case-conflict\n    -   id: check-json\n    -   id: check-merge-conflict\n    -   id: check-symlinks\n    -   id: check-yaml\n    -   id: detect-aws-credentials\n    -   id: detect-private-key\n    -   id: end-of-file-fixer\n    -   id: flake8\n    -   id: pretty-format-json\n    -   id: requirements-txt-fixer\n    -   id: trailing-whitespace\n-   repo: git://github.com/pre-commit/mirrors-pylint\n    sha: master\n    hooks:\n    -   id: pylint\nwhich on running pre-commit autoupdate gets to\n-   repo: git://github.com/pre-commit/pre-commit-hooks\n    sha: 35548254adb636ce52b5574eb1904b8c795b673e\n    hooks:\n    -   id: check-added-large-files\n    -   id: check-byte-order-marker\n    -   id: check-docstring-first\n    -   id: check-case-conflict\n    -   id: check-json\n    -   id: check-merge-conflict\n    -   id: check-symlinks\n    -   id: check-yaml\n    -   id: detect-aws-credentials\n    -   id: detect-private-key\n    -   id: end-of-file-fixer\n    -   id: flake8\n    -   id: pretty-format-json\n    -   id: requirements-txt-fixer\n    -   id: trailing-whitespace\n-   repo: git://github.com/pre-commit/mirrors-pylint\n    sha: 4de6c8dfadef1a271a814561ce05b8bc1c446d22\n    hooks:\n    -   id: pylint\nand is now ready to commit:\n$ git commit .pre-commit-config.yaml\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /Users/t.hensel-extern/.pre-commit/patch1462303177.\nCheck for added large files.................................................................Passed\nCheck for byte-order marker............................................(no files to check) Skipped\nCheck docstring is first...............................................(no files to check) Skipped\nCheck for case conflicts....................................................................Passed\nCheck JSON.............................................................(no files to check) Skipped\nCheck for merge conflicts...................................................................Passed\nCheck for broken symlinks...................................................................Passed\nCheck Yaml..................................................................................Passed\nDetect AWS Credentials......................................................................Passed\nDetect Private Key..........................................................................Passed\nFix End of Files............................................................................Passed\nFlake8.................................................................(no files to check) Skipped\nPretty format JSON.....................................................(no files to check) Skipped\nFix requirements.txt...................................................(no files to check) Skipped\nTrim Trailing Whitespace....................................................................Passed\npylint.................................................................(no files to check) Skipped\n[INFO] Restored changes from /Users/gretel/.pre-commit/patch1462303269.\n[master 0ffae0b] https://github.com/pre-commit/pre-commit/issues/366 properly have sha set\n 1 file changed, 9 insertions(+)\n. this is why i was requesting to support ./ style paths. it's kinda counterfeiting the concept of using git when pre-commit requires to have static paths in it's configuration, i'd say.\n. working fine now with repo-local script. may i suggest this example to have it less-undocumented:\n-   repo: local\n    hooks:\n    -   id: vault\n        name: Ansible Vault Check\n        language: script\n        description: Pre-commit hook that verifies if all files containing 'vault'\n            in the name are encrypted.\n        files: .*vault.*\\.(yml|yaml)$\n        entry: pre-commit-hooks/vault.sh\n. ",
    "quentindemetz": "Understood ;(\n. @asottile git-shell is not supported on Windows XP, which is what I'm developing on\u2026too bad\n. I think it's msysgit\nThis is the error I'm getting:\n```\n(virtualenv) C:\\project > pre-commit run --all-files\n[INFO]\u2190[0m Installing environment for git://github.com/pre-commit/pre-commit-hooks.\n[INFO]\u2190[0m Once installed this environment will be reused.\n[INFO]\u2190[0m This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ['bash', '-c', \". 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\py_env\\Scripts\\activate' && cd 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\' && pip install .\"]\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: (none)\nCheck the log at ~/.pre-commit/pre-commit.log\n```\nI don't know where to find the log mentioned in the last line:\n(virtualenv) C:\\project > cd ~\nThe system cannot find the path specified.\nThanks\n. I in fact do have some version of bash installed (I think I also have git bash installed, I'm not quite sure how to tell which is which).\nI've found the log, which isn't much more explanatory:\n```\nAn unexpected error has occurred: CalledProcessError: Command: ['bash', '-c', \". 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\py_env\\Scripts\\activate' && cd 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\' && pip install .\"]\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: (none)\nTraceback (most recent call last):\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\error_handler.py\", line 34, in error_handler\n    yield\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\main.py\", line 129, in main\n    return run(runner, args)\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\commands\\run.py\", line 165, in run\n    return _run_hooks(runner, args, write=write, environ=environ)\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\commands\\run.py\", line 115, in _run_hooks\n    for repo in runner.repositories:\n  File \"C:\\trojan\\lib\\site-packages\\cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\runner.py\", line 43, in repositories\n    repository.require_installed()\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\repository.py\", line 64, in require_installed\n    self.install()\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\repository.py\", line 96, in install\n    language.install_environment(self.cmd_runner, language_version)\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\languages\\python.py\", line 51, in install_environment\n    env.run(\"cd '{prefix}' && pip install .\")\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\languages\\helpers.py\", line 42, in run\n    ['bash', '-c', ' '.join([self.env_prefix, cmd])], kwargs\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\prefixed_command_runner.py\", line 41, in run\n    return cmd_output(*replaced_cmd, __popen=self.__popen, kwargs)\n  File \"C:\\trojan\\lib\\site-packages\\pre_commit\\util.py\", line 160, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\nCalledProcessError: Command: ['bash', '-c', \". 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\py_env\\Scripts\\activate' && cd 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\' && pip install .\"]\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: (none)\n```\nRunning the command manually doesn't give many hints:\n```\n(virtualenv) C:\\project>bash -c . 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\py_env\\Scripts\\activate' && cd 'C:\\Documents and Settings\\IEUser\\.pre-commit\\repoobvhtq\\' && pip install .\n(virtualenv) C:\\project>echo %errorlevel%\n1\n```\n. Looks like there is no py_env in the 'C:\\Documents and Settings\\IEUser.pre-commit\\repoobvhtq' folder.\n. With cmd.\nLooks like it's working with git bash, (some hooks run, others don't, it's complaining about not finding the correct pep8 version, but that's another story).\nThanks ! Will use git bash from now on !\n(for reference here is the pep8 issue I'm getting)\nTraceback (most recent call last):\n  File \"c:\\DOCUME~1\\IEUser\\PRE-CO~1\\REPOOB~1\\py_env\\Scripts\\end-of-file-fixer-script.py\", line 5, in <module>\n    from pkg_resources import load_entry_point\n  File \"C:\\DOCUME~1\\IEUser\\PRE-CO~1\\REPOOB~1\\py_env\\lib\\site-packages\\pkg_resources.py\", line 2829, in <module>\n    working_set = WorkingSet._build_master()\n  File \"C:\\DOCUME~1\\IEUser\\PRE-CO~1\\REPOOB~1\\py_env\\lib\\site-packages\\pkg_resources.py\", line 451, in _build_master\n    return cls._build_from_requirements(__requires__)\n  File \"C:\\DOCUME~1\\IEUser\\PRE-CO~1\\REPOOB~1\\py_env\\lib\\site-packages\\pkg_resources.py\", line 464, in _build_from_requirements\n    dists = ws.resolve(reqs, Environment())\n  File \"C:\\DOCUME~1\\IEUser\\PRE-CO~1\\REPOOB~1\\py_env\\lib\\site-packages\\pkg_resources.py\", line 639, in resolve\n    raise DistributionNotFound(req)\npkg_resources.DistributionNotFound: pep8>=1.5.7,<1.6\n. Fantastic, was just about to upgrade to the latest release of that repo, looks like I'll need to go as far as HEAD then. Thanks a million\n. :heart_eyes: \n. :+1: @asottile Awesome!\nI'l gladly opensource it (< 30 loc) once it works (=once this feature is out!)\n. Looks good to me :+1: \nJust tried it and it runs great\n. Gist with the classes is here, feel free to fork it, spread the word, integrate in your documentation\n. Right, but I've explicitly installed 0.4.2, isn't that enough?\nOn Mar 18, 2015 8:15 PM, \"Anthony Sottile\" notifications@github.com wrote:\n\nThis was fixed here: pre-commit/pre-commit-hooks@4078cbe\nhttps://github.com/pre-commit/pre-commit-hooks/commit/4078cbedf0360dce2b7cd02cb2812fc50b76b98d\nBumping to a newer version of that repo will fix. (v0.4.1 is tagged I\nbelieve)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/212#issuecomment-83126329\n.\n. Understood, thanks\n. ssmtp-cookbook\n. I concur, git rev-parse --git-dir does yield the correct path to the git directory, including in my current submodule configuration:\n\n$ git rev-parse --git-dir\n/home/quentin/chef-repo/.git/modules/cookbooks/ssmtp-cookbook\nGood find!\n. (oops)\n. $ git --version\ngit version 2.3.3\nhub version 2.2.0\n$ pre-commit --version\npre-commit 0.4.2\npre-commit clean does not fix it.\nMy ~/.pre-commit/db.db file has no repos\u2026\n. Sounds like a good place to look, after a short investigation, my teammates who are on git 2.3 have encountered this issue as well. \n. /etc/gitconfig does not exist.\n~/.gitconfig contents:\n```\n[user]\n        name = Quentin de Metz\n        email = quentin.de-metz@pricematch.travel\n[credential]\n        helper = cache --timeout=3600\n[push]\n        default = current\n[help]\n        autocorrect = 1\n[branch]\n        autosetuprebase = never\n[color]\n  branch = auto\n  diff = auto\n  status = auto\n[color \"branch\"]\n  current = yellow reverse\n  local = yellow\n  remote = green\n[color \"diff\"]\n  meta = yellow bold\n  frag = magenta bold\n  old = red bold\n  new = green bold\n[color \"status\"]\n  added = yellow\n  changed = green\n  untracked = cyan\n[tag]\n        sort = version:refname\n```\n. Looking good, congratulations! Thanks!\n. Fantastic!\n. :/\nNow running into the following issue:\n[INFO] Initializing environment for git://github.com/pricematch/pricematch-pre-commit-hooks.\nAn unexpected error has occurred: CalledProcessError: Command: ['git', 'reset', 'dd2447ada6d23bb9338d074f9453261924a26a77', '--hard']\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors:\n    fatal: Could not parse object 'dd2447ada6d23bb9338d074f9453261924a26a77'.\nMy .pre-commit-config.yaml references git://github.com/pricematch/pricematch-pre-commit-hooks at SHA dd2447ada6d23bb9338d074f9453261924a26a77 (which exists).\n. I can work around this by stashing, running pre-commit run --all-files (which forces the installation), and unstashing.\n. I'm unable to reproduce\u2026 The output of these commands is as expected.\n$ which git\n/usr/bin/git\nI'll let you know if something comes up\n. -rwxr-xr-x 3 root root 1711528 Mar 14 17:37 /usr/bin/git\n. ",
    "guykisel": "This might be a stupid idea, but is it possible to embed bash in pre-commit to remove that dependency on windows?\n. I just want it to work in http://bliker.github.io/cmder/ on windows :(\n(though it's possible it does actually work and I'm just doing something wrong)\nWhen I try to use pre-commit in cmder I get this even though cmder supposedly has msysgit bundled in:\n```\nFix double quoted strings................................................Failed\nhookid: double-quote-string-fixer\nC:\\Users\\gkisel.pre-commit\\repodxm4yi\\py_env\\Scripts\\activate: line 62: basename: command not found\nC:\\Users\\gkisel.pre-commit\\repodxm4yi\\py_env\\Scripts\\activate: line 67: basename: command not found\nbash: xargs: command not found\n```\n. @asottile awesome! I'll give it a shot on Monday.\n. I'm sorry, I'm not sure I understand what you mean by \n\nuse the system type and call the thing by name\n\nCan you explain this in a little more detail? I appreciate your help.\n. Oh, I see. Yes, I think that could work. I'll give it a try, thanks!\n. Update on this: looks like prospector can only accept one file/directory at a time as input, so I set my hooks.yaml to:\nyaml\n-   id: prospector\n    name: prospector\n    entry: -n 1 prospector\n    language: system\n    files: \\.py$\nWithout the -n 1 it just fails silently. \n. @asottile you could add another field in hooks.yaml, something like run_per_file: true/false. Alternatively, create a new \"language\", like system_once_per_file, but then you're out of luck if you want to get the same behavior under python and such.\nIt could also be interesting to try to run xargs in parallel to speed up processing of lots of files.\n. Hmm, maybe setup.py needs to have zip_safe=False?\n. This is actually an issue my coworker is encountering, I'll ask him to give your suggestions a try.\n. I think maybe the problem is that pre-commit was specified as a requirement in a project's setup.py, and was then installed via python setup.py develop as opposed to being pip installed.\n. This doesn't really seem to be a pre-commit problem, so I'll close this.\n. Nice, thanks!\n. You're going to have to rename the entire project now.\n. This is pretty cool!\n. Based on my googling that does sound like a good way to handle this issue. It's actually surprisingly difficult to find much information about this.\n. Is pre-commit actually opening all of those files at once, though? It doesn't seem like these hooks would actually be hanging on to file descriptors. The list of filenames is just a bunch of strings, after all.\n. > On computers running Microsoft Windows XP or later, the maximum length of the string that you can use at the command prompt is 8191 characters. On computers running Microsoft Windows 2000 or Windows NT 4.0, the maximum length of the string that you can use at the command prompt is 2047 characters.\nIn Linux it's more like a few megabytes worth of text I think.\n. Cool, sounds good.\n. Just tested it. Confirmed as fixed. Thank you!\n. ",
    "bartekbrak": "I'd love this so much (as much as I don't like being made to work with hg). I guess there isn't much interest. \n. ",
    "wting": "Changed single to double quotes.\n. Ahh OK. Sorry I missed that in the documentation. Explicitly setting per hook isn't pretty but it works, thanks!. @asottile: Thanks for the quick investigation. Without going into too many details, we can upgrade setuptools on a per repo basis in a manual fashion but not across the board. Looks like we'll pin pre-commit as a short term workaround and move to a newer version of setuptools for the long term.. ",
    "carlio": "@guykisel Actually prospector only accepting one file/directory at a time is a bug in prospector (or rather, 'lack of feature'). It's something that comes as a consequences of using setoptconf that I haven't looked into yet. Perhaps a better fix for all this is fixing prospector's behaviour?\n. @asottile Does isolating the environment work in general? I have found with prospector that without the complete path, most tools fail at inferring types and a lot of checks are somewhat worthless. I'm mostly talking about pylint here though.\n. ",
    "mechastorm": "Ah cool! I didn't check pre-commit run -h #rtfm That worked wonderful.\nI would suggest if that can be listed somewhere on the site or the README that would be very useful. Other than that it is a great piece of work!\n. Thanks!\n. Was there documentation on how to enable pre-push or is this just enabled by default?\n. ",
    "mikeheme": "I tried upgrading setuptools and also the absolute path on pre-commit but it still would not install pre-commit. However, I uninstalled and installed aspy.yaml and that worked :)\n```\n(clienttest)\n(clienttest) mikeh@macbook-mikeh:client-app-tests (git::master)\n\u00bb pip uninstall aspy.yaml\nUninstalling aspy.yaml:\n  /Users/mikeh/.virtualenvs/clienttest/lib/python2.7/site-packages/aspy.yaml-0.2.0-py2.7.egg\nProceed (y/n)? y\n  Successfully uninstalled aspy.yaml\n(clienttest)\n(clienttest) mikeh@macbook-mikeh:client-app-tests (git::master)\n\u00bb pip install aspy.yaml\nDownloading/unpacking aspy.yaml\n  Downloading aspy.yaml-0.2.0.tar.gz\n  Running setup.py egg_info for package aspy.yaml\nRequirement already satisfied (use --upgrade to upgrade): ordereddict in /Users/mikeh/.virtualenvs/clienttest/lib/python2.7/site-packages/ordereddict-1.1-py2.7.egg (from aspy.yaml)\nRequirement already satisfied (use --upgrade to upgrade): pyyaml in /Users/mikeh/.virtualenvs/clienttest/lib/python2.7/site-packages/PyYAML-3.11-py2.7-macosx-10.10-intel.egg (from aspy.yaml)\nInstalling collected packages: aspy.yaml\n  Running setup.py install for aspy.yaml\nInstalling /Users/mikeh/.virtualenvs/clienttest/lib/python2.7/site-packages/aspy.yaml-0.2.0-py2.7-nspkg.pth\n\nSuccessfully installed aspy.yaml\nCleaning up...\n(clienttest)\n(clienttest) mikeh@macbook-mikeh:client-app-tests (git::master)\n\u00bb pre-commit install\npre-commit installed at /opt/truecar/src/clienttest/client-app-tests/.git/hooks/pre-commit\n```\n. ",
    "galstest": "@asottile mmm I thought pb links require credentials. thanks for commenting on that.\n. ",
    "dongweiming": "run\npre-commit install [-t pre-commit]  # pre-commit will now run on every commit.\nor\npre-commit install -t pre-push   # pre-push will now run on every push.\nyou only need install one of them. and also can uninstall it:\npre-commit uninstall -t pre-push   # pre-push will now run on every push.\n. Do not use git@github.com:xx/xx. we have no permission to access this address \n. Can you tell me the banchmark url, or some reason?\n. I think this is necessary, because there are other options. they are not required\n. I appreciate your pursuit of the code, especially for the requirement of coverage. But I think you with a lot of personal subjective for ths project. I open the pre-push instead of creating a pull request is because I feel you are difficult to accept others opinions.\nThese cost me a lot of time. i think you can merge it and modify somethings you want. or you can do this part by yourself. Thank you so much for review!\n. ",
    "kentwills": "+1\n. note: removing the environ.pop('GIT_INDEX_FILE') fixes it, for us.\n. ",
    "Lucas-C": "+1 I've been bitten by this :)\n. Thanks !\n. Same error here, after running a mvn test invoking JUnit tests.\nI don't have time to write a minimal test case right now sadly.\n. My bad, sorry, my issue is not due to non-ascii hook ids:\n$ file .pre-commit-config.yaml\n.pre-commit-config.yaml: ASCII text\nBut I still have a similar encoding error:\nRun JUnit tests in mvn-test...............................................An unexpected error has occurred: UnicodeDecodeError: 'utf8' codec can't decode byte 0xbb in position 330146: invalid start byte\nI use the following hook definition:\n- repo: local\n  hooks:\n  - id: mvn-test\n    name: Run JUnit tests in my-java-project\n    language: system\n    entry: sh -c 'cd my-java-project && mvn test -Drun-integ-tests=true'\n    files: ^my-java-project\n\n. +1 I've been bitten by this too :)\n. Thanks for your quick answer !\nKnowing that the repoYaml entry can point to a directory is really great !\nCould you please add this usage in the \"Creating new hooks\" section of the docs ?\n158 was a very interesting read. I should have searched in the issues before complaining about it.\nAnyway pre-commit autoupdate fits my use case, and again should deserve a place in the docs !\nI commented on #43 : it's a nice improvement, but still not detailed enough in my opinion. There should be an explanation that the repo created will be pip installed and that pre-commit expect to find in setup.py entry points matching the ones in hooks.yaml.\nAnd again: awesome job on this. I'm going to push for using it at my company.\n. No, definitively resolved !\n. Yes ! The Yelp/venv-update example is exactly what I wanted !\nIf you support this, maybe mention it in the docs ?\nAlthough maybe allowing a repo: local value would be cleaner than having to point it to an existing dummy github repo.\n. Ok. Then you can resolve this ticket if you want to track this feature elsewhere.\nAnd thank you for your detailed answers !\n. I went on and hacked around it: what do you think of the solution described in #223 ?\n. Sounds alright, + adding some tests :)\nI won't have time to craft the commit today, but I plan to submit the pull request over the week-end.\n. > Repo: null makes sense to me.\nSounds nice & simple, but null / None is often a design smell: it is often better to use an \"Optional\" construct, a NullObject or the SpecialCase pattern. I'll stick to the magic string constant.\n\ncan we put system-style hooks at the top level?\n\nI don't understand what you meant here. I complete agree it doesn't make sense to put them in a repo, but why put them at the YAML config file hierarchy root ? I don't quite see what change to the plan @asottile detailed you are suggesting there. Could you further explain ?\n. The solution I used is very portable, take a look :)\nWe can do even more simple by using the heuristic used by git: http://stackoverflow.com/a/7112964/636849\n(i.e. just checking for \\0 characters)\n. Awesome ! Good job :). Ok, thanks !\n. Looks good, great job !\nA bit verbose for a single test though :)\n. Agreed, I'll split it in two commits.\nYour solution sounds good, but it would make the sha field no more mandatory. In the JSON schema. But we could add an extra validation step so it's not a blocker.\nI'm ok to move to this solution, but don't you think the current JSON schemas definition kind of overlap ? There is some code duplication for the allowed overrides, I'll try to make it more DRY.\n. A comment on something you wrote \"The code already allows overriding of all the keys presented in the backing configuration so the rest would just work\" : actually the hooks definition in the manifest & config schemas differ quite a bit : some fields actually cannot be overridden, only id is required in the config, and it also has an additional exclude field, etc. Due to this differences (manly the missing fields) I feel like we cannot actually implement \"local hooks\" without modifying the schema.\nWhat would you thing of something like this in validate_config.py :\nfrom pre_commit.clientlib.validate_manifest import MANIFEST_JSON_SCHEMA\nCONFIG_JSON_SCHEMA = {\n    'type': 'array',\n    'minItems': 1,\n    'items': {\n        'type': 'object',\n        'properties': {\n            'repo': {'type': 'string'},\n            'sha': {'type': 'string'},\n            'hooks': MANIFEST_JSON_SCHEMA\n        },\n        'required': ['repo', 'hooks'],\n    }\n}\nWith possibly more tweaking (like adding the exclude field to the manifest).\n. I updated the pull request to only contains preliminary changes.\nPlease don't merge it until you answer my question above :)\nAlso you wrote \"I really hope to get rid of [JSON schemas] eventually, as we've discussed in the other issue\". I don't think you mentioned that before in an issue I was part of. Are you refering to issue #157 or something else ?\n. > the way the runtime hook dictionary is made is by merging the config dict on top of the manifest dict.\nAre you refering to the following code snippet ?\nhttps://github.com/pre-commit/pre-commit/blob/master/pre_commit/repository.py#L48\nThen ok, but we won't be able to reuse that code for the local hooks, as it's nested in the Repository class.\nBut we can simply copy that merge logic.\n. OK, thanks for the answer.\n. Thanks for all your comments !\nEverything should be fixed now :)\n. I guess one last thing to do will be to update the docs :smile:\n. I added a few comments but it looks good, thanks !\n. Ok, nice workaround !\nLooks perfect for my needs, resolving the issue\n. Just for posterity, here is another solution that doesn't require any additional file:\n- repo: local\n  hooks:\n  - id: test\n    name: test\n    language: system\n    entry: sh\n    args: [-c, 'cd my/project/subfolder && grunt validate']\n    files: ''\n. It works, thanks !\nBut those solutions are not very portable though.\n. Damn, that was useful.\nTo revert the logic of a grep for  example.\nI don't have a specific use case though, so I won't miss it personally.\n. Damn. I'll get a look asap.\n. No problem ;)\nI added a test just a second ago to fix the coverage.\n. Agreed.\nI can't find the relevant issue but I remember seeing a plan to get rid of the JSON schemas : is that still considered ? And then, should this be pending on json schema removal ?\nAlternatively we could maybe simply extend the schema to allow this optional new field.\nIt won't \"break\" anything in the sense that it will still be backward compatible.\n. Ok, I imagined on my part that we could have something like this:\n- config:\n  - fail-fast: false\n- repo: local\n  hooks:\n  - id: do_not_commit\n    name: Block if \"DO NOT COMMIT\" is found\n    entry: DO NOT COMMIT\n    language: pcre\n    files: ''\n- config:\n  - timeout: 120s\n  - fail-fast: true\n(The repetition of the same config property is just here to show a possible edge case, and because I lack imagination :D)\n. Awesome, thanks !. Indeed, my mistake: http://graphemica.com/%C2%BB\n. I have a pull request ready to fix this, but while very short & simple, it involves introducing a new dependency to the chardet library.\nIs that ok ?\n. Nice, thanks !\nI'll test it ASAP\n. Awesome: problem fixed !\nTyvm :)\nCan you release it soon ?\n. Great !\n. +1 I'd love this too !\n. No problem, my pleasure ;)\n. Seems perfectly reasonable to me.\n. Thanks for pinging me on this.\nI couldn't find time to review this over the week-end, but I'll try to get a look at it asap if it's not too late (this evening or tomorrow)\n. OK, I finally took some time to review this. Sorry for the delay.\nFirst: thanks for your efforts ! I think pre-commit really needs this feature.\nNow, a couple of general considerations :\n- why not using an existing file type detection library, like libmagic-based python-magic and filemagic, or even the standard mimetypes module, instead of re-implementing a subset of that ?\n- the idea to return a set of file-identification flags is great. I think it may be very helpful to also add the encoding: is it ASCII, utf8, latin1 ?\n- instead of supporting 2 file selection mechanisms (regular expressions based + this new one), maybe we should merge both ? E.g. we could include the file extension in the list of the file-identification flags as ext:$ext, and allow for regexps to match those flags. The following would then mean \"match all text files ending with .out our .o\" :\nfiles: ['text', 'ext:(out|o)']\nOr alternatively :\nfiles: ['text', 'filename:\\.(out|o)$']\nAnd a last thing : I'd like more tests for the text flag detection, especially with files using various encodings.\nOverall this is really good work : nice job !\n. I stumbled upon old issue #220 today.\nYou job in this PR would definitively solved it @chriskuehl : are still working on this ?\n. @chriskuehl: I'd really like to see this issue closed, do you mind if I take over the work you started ?\n. Thanks, I was thinking about that issue too :)\nBtw, I switched from Git Bash to MSYS2 and here is how to install pre-commit there, in case you want to document it :\npacman -S git python gcc libxml2-devel libxslt-devel\ncurl --silent --show-error https://bootstrap.pypa.io/get-pip.py | python\npip install pre-commit\nEDIT: And btw the error meant I needed to install Microsoft Visual C++ Compiler for Python 2.7 , if anyone faces the same message:\nhttps://www.microsoft.com/en-us/download/details.aspx?id=44266\n. Thanks !\n. Good idea, that's way smarter.\nDone !\n. Done !\n. Thanks for the feedback and accepting the PR !\n. Thanks for adding the warning !. Sorry for the unclear reproduction steps.\n- I'm using node version v0.12.2 and npm version 3.8.7 : this version is more tolerant to missing fields in package.json :\nnpm WARN pre-commit-bug-repro No description\nnpm WARN pre-commit-bug-repro No repository field.\nnpm WARN pre-commit-bug-repro No license field.\n- you shouldn't have to install eslint globally\nSadly this test case is a bit convoluted (pre-commit -> sh -> npm run -> eslint)\nI agree shell=True is probably a bad idea. Im going to try to figure out what's happening there.\n. Really strange, I get the \"hanging\" behaviour when using npm run only, not when invoking eslint directly:\n``` shell\n$ python -c \"from pre_commit import util; util.cmd_output('/tmp/pre-commit-bug-repro/node_modules/.bin/eslint', 'broken.js')\"\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/home/lucas_cimon/.local/share/virtualenvs/tmp/lib/python3.4/site-packages/pre_commit/util.py\", line 200, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\npre_commit.util.CalledProcessError: Command: ('/bin/sh', '/tmp/pre-commit-bug-repro/node_modules/.bin/eslint', 'broken.js')\nReturn code: 1\nExpected return code: 0\nOutput:\nG:\\devhome\\tools\\cygwin\\tmp\\pre-commit-bug-repro\\broken.js\n  1:5  error  Parsing error: Unexpected token {\n\n\u2716 1 problem (1 error, 0 warnings)\n\nActiveRequests [ { oncomplete: [Function: afterWrite], async: true, bytes: 146 } ]\nWait for the stdout buffer to drain\nprocess.exit(exitCode=1)\n\nErrors: (none)\n```\nshell\n$ python -c \"from pre_commit import util; util.cmd_output('npm', 'run', 'validate-broken-js')\"\nAt least sh is out of the equation.\nThis is probably more an issue with NodeJS/npm/eslint. I'm going to continue my investigation though.\n. Note that with sh, it does not get stuck :\nshell\npython -c \"import sh; sh.npm('run', 'validate-broken-js')\"\nI also found out that, only when the execution is hanging, this eslint source code line does not get executed : https://github.com/eslint/eslint/blob/master/bin/eslint.js#L90 and the NodeJS process never complete.\n. I reproduced it again on another computer at home, with :\n$ echo $BASH_VERSION\n4.3.42(4)-release\n$ uname -s\nCYGWIN_NT-6.0\n$ npm --version\n2.15.5\n$ node --version\nv4.4.5\n$ python --version\nPython 3.4.3\n$ pre-commit --version\npre-commit 0.8.2\n$ $(npm bin)/eslint --version\nv2.2.0\nI don't have time to dwelve into it right now, but I'll try to investigate more on Monday.\n. I went one step further:\npython -c \"import subprocess; subprocess.Popen(['node', r'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js', 'run', 'validate-broken-js']).communicate()\"\nis OK\npython -c \"import subprocess; subprocess.Popen(['node', r'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js', 'run', 'validate-broken-js'], stdout=subprocess.PIPE).communicate()\"\nis KO (it hangs)\n. This issue only appears when using a pipe (if stdout is a file descriptor, no problem).\nIt also doesn't appear when using a true Windows terminal, not Cygwin (like Cmder).\nI tried to solve the issue on the NodeJS side (in eslint source code), but flushing/closing and blocking/non-blocking behaviours for NodeJS streams are really messy, especially under Windows where libUV seems to behave differently :\n- https://github.com/nodejs/node-v0.x-archive/issues/3479\n- https://github.com/nodejs/node-v0.x-archive/issues/3584\n- https://github.com/nodejs/node-v0.x-archive/issues/8329\n- https://github.com/nodejs/node/issues/6456 (latest issue on the subject, still unresolved)\nI'm going to give up at this point.\nThe fix definitively should be on eslint side as it doesn't close its stdout, but I can't figure out the solution, and anyway npm is explicitely not supported with Cygwin.\n. Also: a simple workaround is to invoke eslint directly from .pre-commit-config.yaml, without passing through npm / package.json.\n. Are you ok if, as I starting point, I send a PR adding logs for the execution time of both git cloning & virtualenv setup ?\nMaybe debug logs that could be enabled with pre-commit run -v.\n. Follow-up in https://github.com/pre-commit/pre-commit-hooks/issues/134\n. This looks good to me\nThanks for the fix !\n. Relying on standard Unix system commands won't make pre-commit very Windows-friendly.. I understand. But maybe we could emulate grep in Python ? It think that would not mean adding much code, and would be really more robust and testable.. Looks good to me. Better UX IMHO too.\n. I don't want to look too pessimistic, but it looks really ambitious to me to define a new configuration format just for this use case. That means a lot more complexity indirectly added to the project, and giving to the end user a less user-friendly experience (\"what ? another language to learn ?\").\nGiven your criterias, \"good old .ini files\" could do the job here. Why not contributing to the whole community and adding support for comments round trip into Python ConfigParser instead ?\nAlternatively, have you considered commentjson or something similar ?\n. To clarify a little bit my point of view:\n- while I totally agree that sometime domain-specific languages are the answer, they come with a huge cost. In the case of pre-commit configuration, IMHO simplicity is more important than keeping the verbosity low (aka \"better stupid JSON than a dedicated custom perfectly-fitting language\" aka KISS & YAGNI)\n- I'm only discussing the choice of a new configuration language here, to replace YAML. Half of the issues you're mentioning in this issue (top-level structure & namespacing) could be solved by reorganizing the config/manifest structure without switching to another language.\n- about ConfigParser, there are various solutions to handle lists. But round tripping remains to be added.\n- commentjson has a fairly simple implementation. It looks to me more interesting to contribute to this project or take inspiration from it in order to build a lib than handle round trippable JSON with comments, instead of creating yet-another-language.\nFinally, is there a place to discuss dumbconf spec ?\n. Thanks for your answers.\nMy personnal preference goes to a new implementation of commentjson, or else a dead-simple dumbconf.\n. What about CSON ?\n- https://github.com/bevry/cson\n- https://github.com/peckpeck/CSON-py\n- https://github.com/avakar/pycson\n- https://github.com/gt3389b/python-cson/\n. Only an issue with pypy3 remains.\nCould you give a hand here ?\n. Damn. I added a comment to #414\nIs #211 really blocked ?\n. Alright, that's simple, but it forces the user to install the safety Python package, whereas a python-safety-dependencies-check hook would do it automagically.\n. safety would still be installed in a virtualenv, just executed without the VIRTUALENV variable defined, so that it can access the list of installed Python packages in our user environment.\nI can see this to also be useful for pre-commit checks based on pip-review or piprot for example.\n. On the other hand, we may not need this change if a workaround can be found in https://github.com/pyupio/safety/issues/10\n. It does: safety retrieve installed packages from the current env : https://github.com/pyupio/safety/blob/master/safety/cli.py#L77\nBut nevermind, with @jayfk changes it now works !\n. Great ! Thanks :)\nWould you be Ok to add support for additionnal deps, in order to go get github.com/mrtazz/checkmake for example ?. For info : https://github.com/Lucas-C/pre-commit-hooks-go. Thanks !. You're right, I must have mixed up things, it probably never worked.\nI think there's no need to keep this ticket open, I'm tracking this in https://github.com/ekalinin/nodeenv/issues/178. Could it be possible to use the latest nodeenv version to fix this please ? :)\nhttps://github.com/ekalinin/nodeenv/releases/tag/1.2.0. Great, thanks :). Bad news : NodeJS hooks still do not work under Cygwin :(\nTo be more precise, currently dependencies are not installed in the dedicated node env, but globally\nThe issue comes from the NPM_CONFIG_PREFIX / npm_config_prefix environment variables:\nhttps://github.com/pre-commit/pre-commit/blob/master/pre_commit/languages/node.py#L22-L23\nAmong the fixes I made in nodeenv to add support for Cygwin, I had to alter those 2 env variables:\nhttps://github.com/ekalinin/nodeenv/blob/master/nodeenv.py#L850\nAre you OK if I send a PR adding a if cygwin conditional in node.py:get_env_patch ?. There is still an issue with this.\nI think I took a shortcut when I tested the previous PR (I must have skipped testing a full repo reinstall), and it definitively still does not work.\nSorry about that :(\nThis time it is because the NPM_CONFIG_PREFIX/npm_config_prefix env variables must be Windows-like paths for the npm install -g to pick the right path with Cygwin.\nI just sent a PR to fix it:\nhttps://github.com/pre-commit/pre-commit/pull/612. Question: I currently have both .pre-commit-config.yaml AND a hooks.yaml files in my repos.\nE.g. https://github.com/Lucas-C/pre-commit-hooks-bandit\nIs it ok to merge them ?. Oh sorry, silly me :)\nThanks. Awesome !. Great ! Thanks a lot for your efforts !. To my understanding, there is no Cygwin Go, only Windows Go, that only handles Windows paths.\nSo no versions mixing.\nI added the missing # pragma: no cover\n. Thanks ;). Thank you very much !. I wonder why the AppVeyor CI checks did not catch this ?\nhttps://github.com/pre-commit/pre-commit/blob/master/appveyor.yml. Ok, thanks. FYI, I just tested it with Windows 10 Ubuntu bash, and it works like a charm !. Well done !. A solution could be to replace the call to git describe by git tag --list + git show:\ngit tag --list | xargs -I{} git show --no-patch --format=format:'%ct {}' {}^{commit} | sort\nThis command outputs all the tags by commit-time. Strange, git reset v0.9.1 works for me after reproducing the steps above. Ah, I ran git fetch --tags at some point, whih does more than simply fetching tag btw: https://stackoverflow.com/a/20608181/636849. Sure. But I don't see how to add --depth 1 without breaking autoupdate. I don't have time to dig into this right now, sadly.\nSeeing how it speeded up thins when cloning the CPYthon repo, I thought it would be a quickwin :P\nI'm going to close this for now, and I'll resume working on this idea in #391 on another day. Ok, I'll remove them from this commit\n. It's ok, done\n. Executor sounds better :)\nDone\n. Agreed, fixing that\n. My bad, I hadn't install pre-commit properly on this repo ! Fixed\n. Fixed\n. Yes, that was also my main concern. I don't really like adding those classes.\nGlad you suggest a different approach.\nAre you ok if I drop all the HookExecuter classes, but create a LocalRepository subclass of Repository ?\n. Yes, but I prefer to be strict at this early stage of config parsing, instead of allowing weird anomalies later.\nE.g. if one needs a list of all the local hooks and assume there can be only one entry for them in the config.\nBetter avoid ambiguity, don't you think ?\n. Ok, this last argument convinced me. I'm going to remove the check.\n. You don't want to default to '^$' here ?\n. :+1: \n. Nice default\n. I totally agree with this\n. Why skipping 0x0b (VT) ?\n. Agreed, that's what I did first, but then many of the tests would not include this logic: e.g. tests/commands/run_test.py uses the Runner class, and does not pass through pre_commit.main.\nHence my decision to put this code here, so it can be shared across more pieces of code.\nWhat do you think ?\n. It is.\nI tested, and at this point in the code, when running the test I added, here is what I observe:\nos.getcwd() : '/tmp/user/1000/pytest-2/test_invoke_precommit_in_subdi0/2/subdir'\nall_file_list_strategy() : [u'subdir/foo.py']\n. No, I'd like a test with the files: '^subdir/' criteria if you're ok\n. Ooops :) Done\n. Ok, code style fixed\n. Ok, done\n. Good idea\n. Ok, I fixed _do_run in tests/commands/run_test.py\n. Ok, done\n. Ok, added\n. Naming: cols_count ?\n. Sadly this does not work with Cygwin:\nAn unexpected error has occurred: CalledProcessError: Command: ('/g/devhome/tools/Go/bin/go', 'get', './...')\nReturn code: 2\nExpected return code: 0\nOutput: (none)\nErrors:\n    go: GOPATH entry is relative; must be absolute path: \"/home/lucas_cimon/.pre-commit/repohk_ul6_a/golangenv-default\".\n    Run 'go help gopath' for usage.\nI double checked : GOPATH must be a Windows path under Cygwin with a Go Windows install :(. Yes.\nI used the following code in another project, but I'm not really proud of it:\nif sys.platform == 'cygwin':\n    filepath = subprocess.check_output(['cygpath', '-w', filepath]).strip().decode('utf8'). I give up for the moment : https://github.com/mrtazz/checkmake project structure is not standard. It requires to execute a Makefile instead of simply go build. Moreover its builtin rules are too lightweight to be useful in practice.. Nice ! :+1:. The new types_repo/bin/hook.sh file is not tested ?. Yes sure. Actually I thought hook.sh role was to test shebang detection.\nMy mistake. Sure, but what do you mean by \"raw string\" ? r'{}\\bin'.format(...) ?. Oh ok ! Thanks for the explanation\nThis should now be fixed. ",
    "daybarr": "Been meaning to try out this project for a few days, had some time this evening, hit issue #159, followed that here, checked out the windoze branch and have pre-commit install working. Great stuff. Thanks and keep up the good work.\n. ",
    "ssbarnea": "@asottile I encountered today a case with a linter that works only with python3 and my default python is py27. How can we fix this? Documentation was useless in this aspect because it mentioned something about about python_venv as needing extra prerequisites on the system, something that would be a deal breaker hot using a hook. I think we need a \"python3\" language or something similar.. @asottile I think we should reconsider this question as I have a serious use-case: I want to enforce a checking of all git commit messages to assure that: summary is <50 chars, each line is <72 and that it does not have spelling mistakes. \nI have hundreds of git repos and most of them do not have pre-commit but I would like to benefit from having my user-level hooks regardless what extra hooks are inside the repository.\nDo you know a way to make this work?. @lavish205 Maybe not exactly the same use case because I do contribute to various repositories managed by various organisations and I just want to have my own additional set of check made on my commits (just to assure I am consistent in following my self imposed rules).\nA centralised pre-commit repository for a specific organisation address maintenance of the hooks for this group, still my use case is different. This is not to say that one use case is more important than another, there are just two aspects similar but different. \nI hope we will be able to find and document a solution for both cases.. @asottile @webknjaz Apparently this bug is likely to become a showstopper for some users and I now I do have a valid use case for it, with no known workaround.\nApparently ansible-lint may need user to set ANSIBLE_LIBRARY variable to point to the local ansible modules before being called, or linting will fail as soon it will encounter the custom ansible module.\nTox has a great solution for this kind of problems which is the passenv and setenv, so to make the linter work correctly under tox, I only need to add something like:\nsetenv\n   ANSIBLE_LIBRARY={toxinidir}/library\ncommands =\n  python -m pre_commit run --all-files\nThis would fix execution from inside tox, even if my command would use pre-commit hook.\nThe bad part is that this will not fix the git hook execution, which runs without any additional environment variables.\nFor the moment I don't really care if we add this feature at global level or on each hook, what matters is to get it sorted. I am sure that in the future we will encounter other cases where we need to pass some extra environment variables to the hooks.\n. I think I was able to find some extra info, apparently pre-commit does some kind of weird caching which is not updated when you update master. Shortly it was downloading a previous commit which didn't had the .pre-commit-config.yaml file. \nEven manually removing the cached repo from ~/.cache/pre-commit/repoqiSIRh/ did not made pre-commit check-out the last master. Instead it did checkout the same older commit. \nAfter removing the entire ~/.cache/pre-commit folder it finally started to checkout the latest commit.. Thanks! I will remain connected to the channel.. 2018-07-04T20_27_18_789Z-debug.log\n. I was about to raise it to cspell but I am afraid that i am unable to reproduce it on my MacOS where this is passing. \nOn Linux (CentOS 7), is even worse as I didn't had nodeenv installed and even after installing it using npm install -g nodeenv, it wasn't reported as being in path.\nPS. I do not have experience with nodeenv, but I can imagine is kinda similar to virtualenv but for node.. I ended up creating https://github.com/Jason3S/cspell/issues/53 but I am not 100% where is the bug, it may be inside nodeenv or somewhere in between multiple tools.. I spend the last couple of hours trying to implement gitlint hook but I found some reasons to worry, first I had to run pre-commit install --hook-type commit-msg in order to activate this, something I never had to to with other repositories.\nSecond problem is that I discovered that neither pre-commit run nor pre-commit run --all-files managed to run this check. They silently skip it.\nThis is a real issue because the way I introduced pre-commit on various projects was by including execution of \"python -m pre_commit --all-files\" inside one of the tox.ini environments (\"lint\"). CI jobs would fail this step if something is wrong but apparently this is not enough for testing the commit-message.\nI guess that I am missing something here.. Thanks! This would allow me to add a hook twice.\nStill I am ot sure how to call a specific hook by name if we have two entries with the same id...?. Thanks @asottile, this underlined some problems. Still I do not know how to address them because of the duality of the setup: shell commands use .profile do load pyenv by default and GUI apps do not. Still, GUI apps are able to access the the brew installed versions of pre-commit and python3.7.\nSomething unique and different happens when running the try-repowith pre-commit as the command works fine with \"run\". Still I was able to narrow down the issue a little bit.\n```bash\nwhich -a pre-commit \n/Users/ssbarnea/.pyenv/shims/pre-commit. # <-- this is the pyenv one\n/usr/local/bin/pre-commit. # <-- this is the brew one\nwhich pre-commit\n/usr/local/bin/pre-commit # <-- WTF! moment because the pyenv shim folder is first the PATH\nI triple-checked the PATH and this no idea why\n```\nNow running the try-repo with fully qualitfied paths proved that pyenv version works from CLI, as expected and that the brew version fails to find the brew version fails because internally virtualenv detects the pyenv version of python3.7 and tries to run it without a default set of shims. \nOn my system the active pyenv versions were defined by ~/.python-version which means that they will work for any CWD under home, but virtualenv execution happens outside it, somewhere under /var/folders/... so it will fail to access pyenv versions.\nAfter reading pyenv documentation I moved them into ~/.pyenv/version which made them global settings, so applying to any CWD, and problem was solved. Hopefully this would not have other weird side-effects.\nThere is still the ugliness of having two versions installed but I was not yet able to find a way to force GUI apps to use pyenv CLI tools.. pyyaml 5.1 was releases yesterday.... ;). Considering that even with the 5.1 release pyyaml does have binary wheels for macos and linux, I vote with both hands on using ruamel which has binaries for all platforms.\nIt would be the best to have a fallback mechanism that would allow us to fallback to pyyaml when runamel is not found. \nBeing able to use either one \"backend\" or another could prove to be better long term bet.. @asottile I see it as a problem because at this moment ansible is using pyyaml and is very unlikely to change over night. If pre-commit switches to runamel it forces us to rely on both dependencies instead of one. This is why I mentioned the fallback, because it allows you to have an escape net if something goes wrong.\nI think that is why python extras were invented for, to allow alternative backends/providers/.... @asottile Yep, weird. you can always clone that change locally but I doubt you will be able reproduce it. I was not able to.\nStill, there is something interesting, I tried to change the entry: ansible-lint ... to entry: pythin 0m ansiblelint ... and the last build passed.\nThe only case where I can see this happening is if for some reason pre-commit failed to change the PATH correctly (or if pip failed to create the executable when installing ansible-lint package.).\nNow I don't know what caused it but lets keep it open for few days and see if someone else encounters something similar. Feel free to add a label more-info needed or similar as we cannot really do anything about it if we cannot reproduce it.. And surprise there is a 3 years old PR for adding this hook to travis.rb at https://github.com/travis-ci/travis.rb/pull/307 \n@asottile Can we add it in a different place if travis team does not react? They are notorious for  ignoring community contributions, this being just another example.. ",
    "splnanthakumar": "@asottile , how do i run my python tasks as part of pre-commit check?\n                  is there a way to mention in .pre-commit-config.yaml file ?\ni am using tasks.py which is having few tasks . right now i am running from terminal everytime before i commit. please guide me on this\n. i hope you would be knowing the \"tasks\" in python. i am executing unittest by calling a task (ie.  $invoke unittest) from command line.\ni wanted to execute command line as one of the pre-commit check. \ni have added  in .pre-commit-config.yaml file:\nyaml\n-   repo: local\n    hooks:\n    -   id: unittest\n        name: unittest\n        entry: invoke unittest\n        language: system\n        types: [python]\ni am getting error as below:\n```\nunittest.................................................................Failed\nhookid: unittest\nNo idea what 'com/aruba/test_hook.py' is!\n```\ni am not getting what is the error?\n. yeah i got it . i solved it by passing the filename\nentry should be pointing the file where file will be containing the \n\nrepo: local\n    hooks:\nid: unittest\n    name: unittest\n    entry: python -m tasks\n    language: system\n    types: [python]\n\n\n\n\"tasks.py\" is the file and i have added the following condition to invoke a specific task\nif__name__=='main'\nlaunch_function()\nThankyou for your help. \n. thanks for your response @asottile . but args in config is will not yield much efficiency. may i know how \"SKIP\" works? do you know any document or video tutorials. ",
    "alex-hutton": "Hi, I would appreciate more detail about what is broken and why it relates to nodeenv.\nI found an apparent bug with node on Windows which may not be related to this bug. I also found a solution which I will explain below.\nTo summarise, the cmd given to __popen is the wrong cmd, eg the wrong exe is found by pre-commit.\nI am using pre-commit 0.12.2 and the eslint mirror (http://github.com/pre-commit/mirrors-eslint), v3.9.1.\nI installed eslint itself through npm and it resides in my node_modules directory within my project folder. npm is 3.10.10 and eslint is v3.15.0.\nThe relevant block of my .pre-commit-config.yaml looks like this:\n- repo: git://github.com/pre-commit/mirrors-eslint\n  sha: 'v3.9.1'\n  hooks:\n  - id: eslint\n    language: system\nI invoked eslint like this from the windows command prompt (same thing happens from gitbash):\npre-commit run --run-all eslint\nNote that I am in my python virtualenv and node_modules/.bin is in my PATH.\nThe result was a FileNotFoundError, raised from util.cmd_outpuit() at the line proc = __popen(cmd, **popen_kwargs).\nThe value of cmd was ('\\\\bin\\\\sh', 'C:\\\\<path to project>\\\\node_modules\\\\.bin\\\\eslint', '<js file for linting>', '<another js file for linting').\nIn my node_modules directory, I actually have the following files: eslint and eslint.cmd. Looking at the sourcecode of parse_shebang.find_execitable() I could see that there was a candidate list of filenames that were attempted to match based on the executable file extensions of the windows environment. The first item in the list was eslint without any extension, so it always matched. \nIn order to make eslint.cmd match inside parse_shebang.find_execitable(), I altered the code.\nWith the altered code, the value of cmd was like this: ('C:\\\\<path to project>\\\\node_modules\\\\.bin\\\\eslint', '<js file for linting>', '<another js file for linting>').\nWhen subsequently invoked eslint as before worked in both the windows cmd prompt and gitbash.\nI will submit a pull request for this shortly. I assume the new logic for matching files will not cause other problems.\n. Thanks for the reply and explanation. Thanks for telling me about local hooks! I missed them in the docs and they would work much better for me.. Thank you! It's a very useful piece of software.. Thanks for the helpful feedback. Please take a look at the changes.. Here's a way of doing it without contextlib2.. Thanks Anthony. And thanks for the awesome software!\nI received a github comment as an email but I don't see it in github itself:\n\nOne thought: I think it only makes sense to set this in the consuming repository (and not the remote hook definition) -- would you be ok with me moving the configuration setting into the pre-commit config instead?\n\nMy answer to that is, sure, go ahead \ud83d\udc4d . I'm not sure what you are referring to, though. Did I put the schema definition in the wrong place?\n. ",
    "wenzowski": "Shouldn't enabling long paths help with this? Spoiler: they don't.\n\n. Perhaps it's as simple as a missing \"\\\\?\\\" prefix...I'm not a windows dev; guessing based on msft docs.. ",
    "shihoonhootsuite": "Thanks for this feature suggestion! Sorry I haven't had much experience with running these local php envs - it has been still a relative new thing in PHP. But the last link from @asottile at https://github.com/virtphp/virtphp does look promising. I assume the aim of doing this is so that users can write hooks in PHP right?\n. ",
    "awebdeveloper": "would  composer help\nhttps://getcomposer.org/. @asottile can additional deps be files inside node_modules in case of node instead of a full npm install. My guess is when i have a node hook with additional dependency, you do npm install of the dependency. Instead of doing that can i specify the location where this dependency can be found. \nsay i have a hook with additional dependency as eslint-google. Now instead of doing npm install eslint-google if it finds a file path let it use it.. I aint asking for system hook\nCouldn't it copy this folder over to the place. I hope these packages are installed via npm install? If so i can install a local folder. My idea was to keep my package.json versions of these in sync with what's mentioned in dependency But if you think this is not a good idea i will drop it. Thanks for the info though . Works fine now thanks. here is the output\nSSH_AUTH_SOCK=/private/tmp/com.apple.launchd.2LCGqNauoG/Listeners\nLC_CTYPE=UTF-8\nI got some other error which asked me to do auto update, since then i get this error. I reinstalled and it's gone. Thanks for help. $  $(head -n 1 $(which pre-commit) | cut -d'!' -f2) --version\nPython 2.7.10. Hi ,\nLooks like the issue is still there. Just that I only face this issue whenever I try to commit from VS Code. \nPrecommit is using Python 2.7. let me check. According to you, it looks like a LANG issue,  is it ??. @tiveen what did you do. I have raised a issue in vs code too lets see what they have to say. If either of you have any thing else to share plz post in the above ticket.. awesome will wait for next version . Next release is out. It's fixed thanks @asottile . here is one I have created \nhttps://github.com/awebdeveloper/pre-commit-stylelint\nTested 1 file change and also 2 files change. Works in both the cases without any issue.  Let me know if you would be interested in including this in the list. I will raise a PR if need be. yes. as I said my hook works fine for me . i don't know but you may be missing the sha attribute \n-   repo: https://github.com/awebdeveloper/pre-commit-stylelint\n       sha: '' # Use the sha or tag you want to point at like 0.0.1\n       hooks:. @alexjurkiewicz   probably we should collaborate. I have been working on a similar plugin.  \nhttps://github.com/awebdeveloper/pre-commit-tslint \n@asottile let me know your thoughts on this. @alexjurkiewicz looks like my PR is accepted . look at this https://github.com/okonet/lint-staged. Then Plz update the docs to reflect it esp creating new hooks section. I am completely ok with your approach. And i think it's the right one but it's not communicated any where.\nCould a line be added in docs to inform of this behaviour  . The s/w works only on Mac so no issues. Will try n update you. what is $@ is it one file or a array of files  coz this seams to work only on array of files. i asked coz it didn't work . i just tried it ... It didn't work \nHere is my repo https://github.com/awebdeveloper/pre-commit-imageoptim. This is what i tried\n-   repo: https://github.com/awebdeveloper/pre-commit-imageoptim\n    sha: '2eea78e' # Use the sha or tag you want to point at like 0.0.1\n    hooks:\n    -   id: imageoptim\n        additional_dependencies: ['imageoptim-cli']. This is the output i got. So i guess the issue is not with case but with file name \n\n. looks so ... thanks\nany idea how can i pass the args . I think i dint express my self correctly. I had foundout what was not working. My question was how to get these passed as pre-commit args(line3).  Thanks a lot for all the trouble you took.\n-   repo: https://github.com/awebdeveloper/pre-commit-imageoptim\n       sha: '' # Use the sha or tag you want to point at like 0.0.1\n       args: ['--quit', '--no-color'] # this line here. suggestions for other image optimisation tool . yup. can i have different pre-commit  for different folders. ",
    "elaichi": "+1. I was demoing pre-commit to my manager and he immediately noticed the \"failing\" status on the homepage. I then had to explain that \"the issue is actually with their CI\", etc, etc, \"trust me, it's a really cool project\", etc, etc.\nGlad to see that this is almost fixed :)\n. How about a fairly generic subset of these?\nhttps://github.com/pre-commit/pre-commit-hooks/blob/master/.pre-commit-config.yaml#L4-L14\ne.g. \ntrailing-whitespace\nend-of-file-fixer\ncheck-added-large-files\ncheck-yaml\n. Thanks @asottile! I see, I guess this is what I had in mind:\nhttps://github.com/sk-/git-lint\n\nBy default git lint only reports problems with the modified lines (with the exception of some linters that check that the whole file is sound).. > The main problem we've had (internally) with stylelint is the cli doesn't allow multiple filenames (I don't think either of those two mirrors handle this either).\n\n@asottile seems like it's fixed now (?), for example, these calls work fine for me:\nstylelint --config=.stylelintrc.js src/styles/PageLayout.scss src/styles/constants.scss\nstylelint --config=.stylelintrc.js src/styles/*.scss\nwith\n\u276f stylelint --version\n7.10.1\nalso, this local hook seems well behaved:\n-   repo: local\n    hooks:\n    -   id: stylelint\n        name: stylelint\n        entry: stylelint\n        args:\n        - '--config=.stylelintrc.js'\n        language: system\n        files: \\.(css|scss|sass)$\n. When I started looking for a stylelint hook I first noticed that there was none in the supported hooks. I thought that was a bit weird given how popular stylelint is, so I searched on GitHub and found the two I mentioned before.\n@awebdeveloper when I tried yours, it broke on pre-commit autoupdate:\n```\n\u276f pre-commit autoupdate\nUpdating https://github.com/awebdeveloper/pre-commit-stylelint...[INFO] Initializing environment for https://github.com/awebdeveloper/pre-commit-stylelint.\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/bin/git', 'reset', '', '--hard')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors:\n    fatal: ambiguous argument '': unknown revision or path not in the working tree.\n    Use '--' to separate paths from revisions, like this:\n    'git  [...] -- [...]'\nCheck the log at ~/.pre-commit/pre-commit.log\n``\nand that's when I decided to ask here about it. @asottile why do you think it fails to autoupdate?. oh, weird... I was certain that an emptysha` had never been an issue for other repos \ud83e\udd14 \nanyway, thanks guys!. ",
    "AvdN": "I cannot reproduce the dropping of the comment in you indicate in your post starting with TODO:\nI wrote a first version of a brute force determination of indent and ran that on that snippet and the YAML files in your repo. Only the travis file doesn't roundtrip and that needs investigating, but its semantics do not change.\n```\nfrom future import print_function\nimport os\nimport sys\nimport ruamel.yaml as yaml\nfrom ruamel.yaml.compat import text_type, binary_type\nimport difflib\nd = difflib.Differ()\ndef load_yaml_guess_indent(stream):\n    # load a yaml file guess the indentation, if you use TABs ...\n    if isinstance(stream, text_type):\n        yaml_str = stream\n    elif isinstance(stream, binary_type):\n        yaml_str = stream.decode('utf-8')  # most likely, but the Reader checks BOM for this\n    else:\n        yaml_str = stream.read()\n    indent = 2  # default if not found for some reason\n    prev_line_key_only = None\n    for line in yaml_str.splitlines():\n        rline = line.rstrip()\n        if rline.startswith('- '):\n            idx = 1\n            while line[idx] == ' ':  # this will end as we rstripped\n                idx += 1\n            if line[idx] == '#':     # comment after -\n                continue\n            indent = idx\n            break\n        if rline.endswith(':'):\n            idx = 0\n            while line[idx] == ' ':  # this will end on ':'\n                idx += 1\n            prev_line_key_only = idx\n            continue\n        if prev_line_key_only is not None and rline:\n            idx = 0\n            while line[idx] in ' -':  # this will end on ':'\n                idx += 1\n            if idx > prev_line_key_only:\n                indent = idx - prev_line_key_only\n                break\n        prev_line_key_only = None\n    return yaml.round_trip_load(yaml_str), indent\nyaml_str = \"\"\"\\\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: cf550fcab3f12015f8676b8278b30e1a5bc10e70\n    # foo\n    hooks:\n    -   id: trailing-whitespace\n\"\"\"\ndata, indent = load_yaml_guess_indent(yaml_str)\nprint('indent', indent)\nres = yaml.dump(data, Dumper= yaml.RoundTripDumper, indent=indent)\nif res != yaml_str:\n    result = list(d.compare(yaml_str.splitlines(True), res.splitlines(True)))\n    sys.stdout.writelines(result)\nfor root, directory_names, file_names in os.walk('.'):\n    if '.git' in directory_names:\n        directory_names.remove('.git')\n    for file_name in file_names:\n        if file_name.endswith('.yml') or file_name.endswith('.yaml'):\n            print('-' * 60)\n            full_name = os.path.join(root, file_name)\n            with open(full_name) as fp:\n                yaml_str = fp.read()\n                data, indent = load_yaml_guess_indent(yaml_str)\n                print(full_name, 'indent', indent)\n                res = yaml.dump(data, Dumper= yaml.RoundTripDumper, indent=indent)\n                if res != yaml_str:\n                    result = list(d.compare(yaml_str.splitlines(True), res.splitlines(True)))\n                    sys.stdout.writelines(result)\n                    print('>>>>>>')\n                    print(res)\n``\n. The only way I get a comment to drop is when it is before a!!tag` entry. That is a known xfail in the tests.\nIf you want to use ruamel.yaml to rewrite a file and be sure that it doesn't:\n- change the semantics\n- drop any comments\nthe best thing to do IMO is \n- compare the loaded original against a reloaded roundtrip dump (i.e. load, dump, reload. Had I done so I would have noticed the recently found/solved bug with larger reindents pushing against the '#' without whitespace)\n- check if the same characters, disregarding whitspace and order, are in the dumped file.\nand don't rewrite/throw a warning that ruamel.yaml couldn't handle the file. \nDo you want some code for that?\n. There RoundTripLoader is the  Safe version. The relevant part, its constructor, derives from the SafeConstructor used in safe_load, not from the Constructor used by load.\nThat means it errors on non-recognised tags, just like safe_load does, unless you add a specific constructor for these tags.\nI have a todo item to add functionality to just make a CommentedMap out of mappings with unrecognised tags and preserve the tag value as an attribute ready to write it out. So far nobody asked for this (and I didn't need it myself), because the non-safe loading (and using object tags) is shunted by everyone.\n. Yes ordereddict is the superclass of the one actually used to hang the attributes (and above all methods) on, needed for roundtripping:\n```\nimport ruamel.yaml as yaml\nx = yaml.round_trip_load('a: 1\\nb: 2')\nprint(type(x))\nfrom ruamel.yaml.comments import CommentedMap\ncm = CommentedMap()\ncm['a'] = 1\ncm['b'] = 2\ncm.yaml_add_eol_comment('# can also use 0o001', key='a', column=10)\nprint(yaml.dump(cm, Dumper=yaml.RoundTripDumper))\n```\n. ",
    "matthayes": "Here you go.  By the way, I am running these in a new window without running \"source ./bin/activate\".\n```\n$ cat .pre-commit-config.yaml\n\nrepo: git@github.com:pre-commit/pre-commit-hooks\n    sha: 15b678e9c67c42765c3d579e40672a332f4366d7\n    hooks:\nid: check-added-large-files\nid: trailing-whitespace\n```\n\n\n\n```\n$ which pre-commit\n\n```\n```\n$ pre-commit --version\n-bash: pre-commit: command not found\n```\n```\n$ python -m pre_commit.main --version\n/usr/bin/python: No module named pre_commit\n```\n```\n$ ls ~/.pre-commit/ -al\ndb.db       repoy8e8chfa\n```\n. If I run \"source ./bin/activate\" first and run the same commands:\n```\n$ which pre-commit\n/bin/pre-commit\n```\n```\n$ pre-commit --version\npre-commit 0.4.4\n```\n```\n$ python -m pre_commit.main --version\nmain.py 0.4.4\n```\nIf I run the following command all pass.\npre-commit run --all-files\n. I'd also like to point out something else strange that may be related.  I tried opening a new window and cloning this repo somewhere else just to get a clean state.  Note that the same failure occurs.\n```\n$ git clone  \n$ cd \n$ pyvenv . && source ./bin/activate\n$ pip install -r requirements.txt\n$ pre-commit install\npre-commit installed at /.git/hooks/pre-commit\n$ pre-commit run --all-files\nCheck for added large files...............................................................................................Failed\nhookid: check-added-large-files\nxargs: check-added-large-files: No such file or directory\nTrim Trailing Whitespace..................................................................................................Failed\nhookid: trailing-whitespace\nxargs: trailing-whitespace-fixer: No such file or directory\n```\nWhen I run ls bin in the project directory I do not see check-added-large-files or trailing-whitespace-fixer.\nHowever, if I run the \"clean\" command and run the hook then they all pass.\n```\n$ pre-commit clean\n$ pre-commit run --all-files\n[INFO] Initializing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Installing environment for git@github.com:pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nCheck for added large files...............................................................................................Passed\nTrim Trailing Whitespace..................................................................................................Passed\n```\nNow when I run \"ls bin\" I see check-added-large-files or trailing-whitespace-fixer.  It doesn't seem like running \"pre-commit clean\" should be necessary for this to work.\n. I'm using OS X 10.10.2.  I think the pyvenv tool was already installed.  It might just come with Python.  The system Python is 2.7.6.  Also note that it is pyvenv -- not pyenv.  \nThat command just gives my user home directory: /Users/myusername\nWith pyvenv the various packages get downloaded under a lib directory in the local repository.  I tried adding additional logging to the pre-commit source code under there but I wasn't able to figure out the problem.\n. One other thing to mention is that I have Python 3.4.3 installed as well.  I installed this with brew install python3.  I imagine this is where pyvenv is coming from because I think pyvenv was introduced in Python 3.3.  When I look at the pyvenv.cfg file that is generated after the pyvenv command I see it was created from Python version 3.4.3.\n. Okay thanks, let me know if I can help.\n. When I run pre-commit run --all-files after installing from the git repo I'm getting this error below.  Do you know how to fix this?\npkg_resources.DistributionNotFound: The 'pep8<1.6,>=1.5.7' distribution was not found and is required by flake8\n. ",
    "dupuy": "@asottile wrote:\n\nIf we didn't support windows I'd probably use something like libmagic\n\nIn the shell-scripted pre-commit hooks I used before switching to this package, I used file magic to select files - this was especially useful for running checks against scripts where there was no file extension, but a simple hashbang check could tell that a particular file was Python, or Perl, or *sh...\nI would love it if there were some simple anchored PCRE filter that could select files based on content (of, usually, the first line), so that I could do something like this in hooks.yaml:\n-   id: autopep8-wrapper\n    name: autopep8 wrapper\n    description: \"Runs autopep8 over python source...\"\n    entry: autopep8-wrapper\n    language: python\n    files: \\.py$\n    file-content: '#! *?/.*?\\bpython\\d?\\b'\n    args: [-i]\nwith the hook run against files that match either the filename check or the content check (anchored to start of file content, with . not matching newline). This particular regex would match #! /usr/bin/python or #!/usr/bin/env python3.2 or various other kinds of combinations of these sorts of hashbang lines. (The optional space after the bang is allowed - see http://stackoverflow.com/questions/10197690).\n. ",
    "friederbluemle": "Any progress on this? If would be very useful to have. Thanks :+1:. Amazing! Thanks @asottile!!. ",
    "lukasbalaga": "Moved to https://github.com/pre-commit/pre-commit.github.io/issues/52\n. ",
    "chriskuehl": "setup.py:54:80: E501 line too long (84 > 79 characters)\nsetup.py:55:80: E501 line too long (88 > 79 characters)\nwhyyyy\n. ~~retest this please~~\napparently only works with jenkins\n. Fails because argparse isn't part of Python 2.6:\n```\ndiff --git a/pre_commit/clientlib/validate_base.py b/pre_commit/clientlib/validate_base.py\nindex 707bdde..af18725 100644\n--- a/pre_commit/clientlib/validate_base.py\n+++ b/pre_commit/clientlib/validate_base.py\n@@ -1,11 +1,11 @@\n from future import print_function\n from future import unicode_literals\n-import argparse\n import os.path\n import re\n import sys\n+import argparse\n import jsonschema\n import jsonschema.exceptions\n import yaml\ndiff --git a/pre_commit/main.py b/pre_commit/main.py\nindex aed6688..1f52c33 100644\n--- a/pre_commit/main.py\n+++ b/pre_commit/main.py\n@@ -1,9 +1,9 @@\n from future import unicode_literals\n-import argparse\n import os\n import sys\n+import argparse\n import pkg_resources\nfrom pre_commit import color\ndiff --git a/tests/main_test.py b/tests/main_test.py\nindex 140b587..ac1674f 100644\n--- a/tests/main_test.py\n+++ b/tests/main_test.py\n@@ -2,7 +2,6 @@ from future import absolute_import\n from future import unicode_literals\nimport argparse\nimport mock\n import pytest\n```\nProbably need to just run this on Python 2.7, I'll follow up to this later. Spent some time perusing @asottile's aspy.refactor_imports, but looks like it would be somewhat complicated to add a way to fake classify 3rd-party modules as part of the standard library for old Python versions.\n. fyi the commit you merged was fine even though it failed appveyor. I think I angered it by pushing too frequently.\n. What would you think about adding a per-hook option (defined in hooks.yaml or overriden in .pre-commit-config.yaml) like:\ntypes: ['files', 'symlinks', 'submodules']\nwhere the default (if omitted) is just ['files']? Could also separate executable files but not sure that's really helpful.\n. Abandoning this PR, I'll make another that takes care of #191, #220, and #257.\n. I spent a little time trying to think of a good way to handle this, as well as #254 (ability for hooks to target types of objects, e.g. file/symlink/submodule) and #220 (ability for hooks to target \"text\" files and avoid list of \"text\" extensions).\nHere's my suggestion:\nFiles get automatically tagged\nEach file gets tagged with a list of tags describing it. For example, an executable file something.py might be classified ['file', 'text', 'python', 'executable'].\nHooks target file types\nHooks can then specify types (which defaults to file):\n```\nhooks.yaml\n\n\nid: trailing-whitespace\n    types: [text]\n    entry: trailing-whitespace-fixer\n\n\nid: symlinks-point-inside-repo\n    types: [symlink]\n\n\nid: executables-have-shebang\n    types: [executable]\n\n\nid: double-quote-string-fixer\n    types: [python, ruby, javascript]  # if this hook actually worked on all of these\n```\n\n\nThere's an added benefit in that we no longer need to duplicate the hook extensions in repos if we want to change the path.\n```\n.pre-commit-config.yaml\n\nid: puppet-lint\n    files: ^modules/ocf\n```\n\nCurrently we have to do exclude: ^modules/(?!ocf).*$ instead which will get really complex as soon as we need to start excluding anything else. Now instead of hooks targeting files by extension, the suggested way is targeting them by type. (You can still do it by extension, of course.)\ntypes is an OR operation; a file with any of the tags will match.\nI would suggest not including an all types alias, since I think it risks people copy-pasting it without realizing it includes symlinks and submodules. [file, symlink, submodule] is not very cumbersome for the very few hooks that will actually want it (the only existing one I can think of is check-case-conflict).\nImplementation\nMaking this happen is fairly easy (and I'd volunteer to do the work, since I really want to check files with shebangs):\n- Write a file classifier. A very functional classifier is easy to write (check if text, then check extension, fallback to reading shebang) and covers almost all cases.\n- A little plumbing\nIt's pretty much backwards compatible. Nothing changes about files or exclude. If omitted, types defaults to ['file'] (technically a breaking change, but I think it's a much better default (many of the current hooks will follow symlinks outside of the repo and do nasty things). I can't see any cases where we would break existing stuff.\nThe main issue is if people upgrade hooks but don't upgrade pre-commit. I don't know a good solution here, unfortunately.\n. > under which conditions would files and exclude take effect? or would they be anded with the types?\nMy thinking is the AND them. The list of objects to consider running hooks on is built as it is currently (no change; all objects that match the files regex but don't match the exclude regex), then we filter this list to only contain objects that have at least one tag in types.\nIn this way, hooks are entirely backwards compatible (except for symlinks/submodules, assuming the types default is ['file']).\nI think this is also the most obvious from a developer's perspective. For files they specify whatever paths they want hooks to run under (e.g. files: ^src/), for exclude they specify paths to exclude, and they can let the hook worry about specific extensions/types. Currently to only check some specific paths they have to either list all others in excludes one-by-one, duplicate the logic in the hooks.yaml, or use negative lookaheads in exclude like above (which most, including me, don't understand).\n. > You can use files in .pre-commit-config.yaml without needing to mess with exclude\nThe problem with that is that you have to go check what the hook uses for files and duplicate it with some modifications, e.g.\nfiles: ^modules/ocf.*\\.(html|erb|slim|haml|ejs|jade|js|coffee|json|rb|md|py|css|scss|less|sh|tmpl|txt|yaml|yml)$\nAgreed it's not a huge deal in practice but it does feel kinda yucky.\nJust one clarification before I start coding. I'm envisioning updating a hook like\n-   id: end-of-file-fixer\n    name: Fix End of Files\n    description: Ensures that a file is either empty, or ends with one newline.\n    entry: end-of-file-fixer\n    language: python\n    files: \\.(html|erb|slim|haml|ejs|jade|js|coffee|json|rb|md|py|css|scss|less|sh|tmpl|txt|yaml|yml|pp)$\nto\n-   id: end-of-file-fixer\n    name: Fix End of Files\n    description: Ensures that a file is either empty, or ends with one newline.\n    entry: end-of-file-fixer\n    language: python\n    types: [text]\nBasically, the idea would be to omit files from the hooks.yaml entry in almost all cases.\nThis will break the case where people do pre-commit autoupdate but don't upgrade pre-commit. Fortunately it will break in an obvious way (rather than just silently targeting different files): https://gist.github.com/chriskuehl/7b12d2a8aee95c7f4a6a\nIs that acceptable? The good news is it only breaks if people autoupdate since we pin SHAs, and it is usually easy to update pre-commit.\nThe new version of pre-commit would still work with old repos.\n. Agreed that we should still require either files or type. The main reason I'd like to switch to primarily relying on type for language detection is that we have a lot of files with shebangs and no extension, and I can't think of a better way to check those.\nUnfortunately the stdlib mimetype module looks at the file extension (path name) and nothing else.\nI can understand if pre-commit isn't interested in handling files without extensions as it does make things more complex. I think it's probably a fairly common use-case, though.\nMy thinking is that we can write a fairly simple classifier that just reads file extensions and shebangs, and it will work great in almost every case. Here is my first attempt:\nhttps://gist.github.com/chriskuehl/dc4a8232ac77e80f4c7c (seems to work in py26 through py34)\nThe tags look like:\n/etc/passwd: {'nonexecutable', 'text'}\n/bin/bash: {'binary', 'executable'}\n/dev/urandom: {'binary', 'nonexecutable'}\n/dev/null: {'nonexecutable', 'text'}\n/usr/lib/libdb-4.6.so: {'binary', 'nonexecutable'}\n/usr/share/ca-certificates/mozilla/GeoTrust_Global_CA.crt: {'nonexecutable', 'text'}\n/usr/bin/reportbug: {'python', 'text', 'executable'}\n/usr/lib/python3.4/contextlib.py: {'python', 'nonexecutable', 'text'}\n/home/c/ck/ckuehl/ocf-proj/puppet/modules/apache: {'submodule'}\n/usr/bin/java: {'symlink'}\nThe code is probably not entirely correct, but this is the spirit of what I'd like to do.\nAs you mentioned, it does require maintaining a mapping of extension to file type plus interpreter to file type. Maybe maintaining this in pre-commit doesn't make sense, and it would be better to package it? (I don't mind doing that.) Especially when I think about writing tests for this, packaging it seems to make some sense.\n. please no\n. \n. \n. \n. There's no reason pre-commit itself needs to run on Python 2.6, right? It's the hooks itself that maybe need to support older code (e.g. if they parse the Python AST).\nIt's sometimes convenient to install into the same virtualenv, but it's straightforward to use tox with a different Python version.\n. To be fair, lucid is unsupported, squeeze is only supported until February (last Debian release with 2.6), and I'm pretty sure OS X has basically no support period :p\nBut yeah, point taken.\n. What version of pip are you using? There's a comment from some guy named @dnephin here that suggests there may be an issue with older versions of pip not understanding environment markers.\nIndeed it is jsonschema that pulls in that dependency for pre-commit as well.\nNot sure if this is a full solution to the problem, but maybe a start. If you upgrade pip in a clean Python environment are you then able to install and run pre-commit?\n. (maybe we just want to add it to our setup.py anyway, dunno)\n. One option is to add a hook to .pre-commit-config.yaml like:\nyaml\n-   repo: local\n    hooks:\n    -   id: system\n        name: PyLint\n        entry: python -m pylint.__main__\n        language: system\n        files: \\.py$\n(stolen from https://github.com/Yelp/pgctl)\nDoes that work for you? If so, it's probably worth documenting somewhere.\nI don't think there's support for running Python-type hooks in the current environment.\n. thanks! opened https://github.com/pre-commit/pre-commit.github.io/pull/64\n. What would you want specifying a (commit?) SHA to do? I'm guessing just run against files changed in that commit with the current files? (i.e. not actually checkout that commit to run against)\n. lol\n\nshipit\n. sheep it\n\n. oops\n\n. \n. whoops\n\n(shipit)\n. \n. lg2m\n\n. \n. \n. this is pretty cool\n. \n. \n. \n. this is pretty nifty actually\n\n. since you're in the midwest...\n\nshipit\n. otherwise shipit\n. \n. @Lucas-C yeah, would definitely still like to ship this at some point. I agree with the comments on this PR though, just need to implement them.\n. @Lucas-C nope, I don't mind. I think it's pretty stable (me and a few other people have been using a version of the branch consistently for about a year), but I agree with the comments above.\n. I spoke with @asottile a little about how we might resolve the issues on this branch and get it shipped. There's a couple minor things to resolve, but I think the main design questions are:\nTo reduce the need to map file extensions to file tags:\nWe can use the mimetypes module. This will get us a mimetype like text/x-python which we can use some logic to try to simplify (e.g. removing the <type>/ and x-). It might be a bit more complicated than that (especially for non-text/), but I think we can do a pretty good job here.\nThere are also some more complicated ones, e.g. .c is text/x-csrc.\nThe bigger concern will be things that mimetypes can't identify. There are some common extensions like .go that python3.5 stdlib doesn't seem to identify. Because of this, I think we're still going to have to maintain a mapping of extensions to tags for some extensions (or use something besides mimetypes).\nWe might also have a problem here where newer versions of stdlib can identify some extensions that older ones can't?\nTo reduce the need to map shebang interpreters to file tags:\nThis one we can't use mimetypes for, but we can probably use some logic to do the right thing in most cases. For example, if we strip off things that look like versions, that would take care of python2.7 => python.\nThere's still a couple special cases like ('^(ba|da|tc|[ckz])?sh$', ['shell']), and ('^node(js)?$', ['javascript']),. Are those important enough to still maintain a mapping? Not sure.. Will also want to remove the shebang parsing from this branch (it pre-dates the shebang parsing that pre-commit master now contains, we can just use that now).. There are two things we need from a \"file identification library\":\n\nGet tags for a file based on its name and git attributes\nGet tags for a file based on its interpreter name (read from the shebang)\n\nTo make this branch a little easier to merge, I'm going to start with the first and maybe do the second in a follow-up.\nWe talked about using the mimetypes module, but I think the consensus is that it's probably not going to work well. It would be a pretty confusing experience when different versions of Python recognize files differently, and even recent releases of Python 3.x can't identify common extensions like .go.\nHow about making a new package called identify or something and adding it as a dependency of pre-commit? This avoids maintaining a big mapping in pre-commit, and means we could accept updates to it without releasing new versions of pre-commit all the time.\n@asottile sound reasonable? Should we have this library be \"part\" of pre-commit (maybe another repo under the pre-commit org) or just a regular dependency one of us happens to maintain?. I put a draft of the API (just the README) at https://github.com/chriskuehl/identify/pull/1, lmk what you think @asottile @Lucas-C . I released version 0.0.1 of the identify library. The API is fully implemented and it understands a small number of shebangs and file extensions. This branch is hopelessly conflicting, rather than force-push an entirely new one on top and lose all the history, I'll just close this and open a new PR.. \u2603 ship it \u2603\n\n. this is kinda dangerous if you have symlinks pointing outside the repo, most hooks won't expect that :(\nhopefully #329 will fix that, i'll try to finish up remaining issues soon\n. @asottile you're right, misinterpreted this change\n\n. \n. I think we can close this for now -- the reasons @asottile cited above are pretty strong and I don't think this is really something we need to add to pre-commit itself.\nOne thing that's worked really well for us internally is using one central repository with lots of Yelp-specific pre-commit hooks. Even if your org isn't big about creating lots of small repos on GitHub, you might find that model (one repo, lots of hooks) can work pretty well.\nAlso, you can hack a lot of this together with local hooks if you'd really like to do it per-project. (I know it's not a perfect solution, but I think a reasonable workaround.)\nThanks for the PR and starting the discussion!\n. you probably just aren't using the right permutation of xargs' 40 command-line flags  /s \n. rip windows tmux pane resizers\n\n. \n(wait for it)\n. hooray!\n\n. otherwise looks solid\n. \n. lgtm\npylint+-\n. looks solid to me!\n\n. \n. git archive would work pretty well here, but GitHub doesn't support it :\\\n. Just to clarify, it sounds like you're trying to vendor build artifacts into the git repo at commit time?\nI'm not crazy about that pattern, but it does seem possible. Here's an example I'm using:\n.pre-commit-config.yaml:\n-   repo: local\n    hooks:\n    -   id: test\n        name: test\n        language: system\n        files: .*\n        entry: sh -euxc 'date >> a && git add a'\nAnd here's testing it:\n```\n(virtualenv_run)ckuehl@dev4-uswest1cdevc:/nail/tmp/tmp.LUjZB4D1iP$ date >> test && git add test && git commit -m 'test'\ntest....................................................................................................................Passed\n[master 10ed320] test\n 2 files changed, 2 insertions(+)\n create mode 100644 a\n create mode 100644 test\n(virtualenv_run)ckuehl@dev4-uswest1cdevc:/nail/tmp/tmp.LUjZB4D1iP$ git show | cat\ncommit 10ed3203974fe74c0bdec70758ae4e8e1243d227\nAuthor: Chris Kuehl ckuehl@yelp.com\nDate:   Fri Aug 5 16:20:10 2016 -0700\ntest\n\ndiff --git a/a b/a\nnew file mode 100644\nindex 0000000..cb3cb56\n--- /dev/null\n+++ b/a\n@@ -0,0 +1 @@\n+Fri Aug  5 16:20:11 PDT 2016\ndiff --git a/test b/test\nnew file mode 100644\nindex 0000000..1a9cb2b\n--- /dev/null\n+++ b/test\n@@ -0,0 +1 @@\n+Fri Aug  5 16:20:10 PDT 2016\n(virtualenv_run)ckuehl@dev4-uswest1cdevc:/nail/tmp/tmp.LUjZB4D1iP$ date >> test && git add test && git commit -m 'test'\ntest....................................................................................................................Passed\n[master 23cdd8b] test\n 2 files changed, 2 insertions(+)\n(virtualenv_run)ckuehl@dev4-uswest1cdevc:/nail/tmp/tmp.LUjZB4D1iP$ git show | cat\ncommit 23cdd8bb8838c11bf740541f86d49f6209db6829\nAuthor: Chris Kuehl ckuehl@yelp.com\nDate:   Fri Aug 5 16:20:17 2016 -0700\ntest\n\ndiff --git a/a b/a\nindex cb3cb56..197bf75 100644\n--- a/a\n+++ b/a\n@@ -1 +1,2 @@\n Fri Aug  5 16:20:11 PDT 2016\n+Fri Aug  5 16:20:18 PDT 2016\ndiff --git a/test b/test\nindex 1a9cb2b..4580c3a 100644\n--- a/test\n+++ b/test\n@@ -1 +1,2 @@\n Fri Aug  5 16:20:10 PDT 2016\n+Fri Aug  5 16:20:17 PDT 2016\n``\n. Hooks run in the root of the repo you're testing, but he wants to refer to files in the hook repo.\n. Okay, in that case it sounds like we don't even have a use-case for this currently. I think we can close the ticket until we do.\n. pcre hooks are pretty powerful -- I've written a few of them (usually hooks specific to certain projects) because they're cheap and easy (and I probably wouldn't have taken the time to write them if it was harder than just an entry in.pre-commit-config.yaml`). I think they're a pretty cool feature.\nWould a simple Python implementation that basically runs re.search on the file contents be enough? It's not quite pcre (so, probably a breaking change), but I think that'd be preferable to dropping regex matching entirely.. +1 this would be great, though I imagine we can only alert if the regex doesn't match anything at all.\nMeaning a common thing like:\nyaml\nexclude: ^(file_that_exists|file_that_does_not_exist)\\.py$\nwouldn't really benefit from this. Unless you have some magic way to interpret regexes.\n. We'd likely also want to differentiate between exclude being defined in the hook repo and in the project repo (as an override). For example, the replace-tabs hook does something like exclude: (Makefile|\\.mk)$ which is useful, but we wouldn't want that to error in every project without a Makefile.\n. I like this.\nSome definitely positive things:\n- Drops the only binary extension dependency\n- The \"narrow terminal\" seems easier to parse. It's gonna look a little derpy any way it's formatted, but this seems like a clear improvement.\nI was never crazy about matching the terminal width, since I resize windows all the time and it usually ends up being illegible shortly afterwards.\nI think it's arguably also better UX on the \"wide terminal\" example, since following those dots across the entire width of the terminal is a bit hard. It might not be quite as aesthetically pleasing? But I don't really think it looks worse, just different.\nBesides, if you use a 230-column-wide terminal, you should feel bad anyway :)\n. Is the script executable? That would be my guess. What does ls -l <path to script> print?\nCan you post your hooks.yaml or .pre-commit-config.yaml?\n. looks okay besides the tests. your dedication to windows users is admirable\n. I like the move and new name.\nIt does seem a little verbose but it's not too bad. It's an easy fix for hook authors.\nMy main concern would be: what happens when someone runs pre-commit autoupdate with an old version of pre-commit? The error message doesn't look super helpful:\n(tmp.EhSQiYXzhI) ckuehl@raziel:/tmp/tmp.SU7lnAPqGN/repo$ pre-commit autoupdate\nUpdating /tmp/tmp.SU7lnAPqGN/hookrepo...[INFO] Initializing environment for /tmp/tmp.SU7lnAPqGN/hookrepo.\nAn unexpected error has occurred: InvalidManifestError: File /home/ckuehl/.pre-commit/repo_hwu50do/hooks.yaml does not exist\nI'm not sure how to avoid that. Hook authors could duplicate (maybe symlink works?) hooks.yaml and .pre-commit-hooks.yaml during some transition period, or maybe make a fake hooks.yaml where every hook just has minimum_pre_commit_version: <new version>. Neither of those are great options but of course we can't just patch old versions of pre-commit.. @Lucas-C the new file is .pre-commit-hooks.yaml, different from the config file. Here's another patch that seems to work:\ndiff\ndiff --git a/pre_commit/languages/ruby.py b/pre_commit/languages/ruby.py\nindex 32682f5..d3896d9 100644\n--- a/pre_commit/languages/ruby.py\n+++ b/pre_commit/languages/ruby.py\n@@ -22,6 +22,7 @@ def get_env_patch(venv, language_version):  # pragma: windows no cover\n     patches = (\n         ('GEM_HOME', os.path.join(venv, 'gems')),\n         ('RBENV_ROOT', venv),\n+        ('BUNDLE_IGNORE_CONFIG', '1'),\n         ('PATH', (\n             os.path.join(venv, 'gems', 'bin'), os.pathsep,\n             os.path.join(venv, 'shims'), os.pathsep,. Here's proof that the test fails before the patch: https://travis-ci.org/chriskuehl/pre-commit-1/builds/194703760. Yup, you're right that if you don't explicitly request a Python version, it \"defaults\" to the currently-running Python to create the virtualenv (since that's the Python virtualenv runs as).\nOur recommendation for how to handle this is to specifically request a Python version using language_version. Here's an example from one of our .pre-commit-config.yaml files:\nyaml\n-   repo: https://github.com/pre-commit/pre-commit-hooks\n    sha: v0.7.1\n    hooks:\n    -   id: trailing-whitespace\n        exclude: ^assets/vendor/\n        language_version: python3.6\n    -   id: end-of-file-fixer\n        exclude: ^assets/vendor/\n        language_version: python3.6\n    -   id: autopep8-wrapper\n        language_version: python3.6\n    -   id: check-json\n        files: \\.(jshintrc|json)$\n        language_version: python3.6\n    -   id: check-yaml\n        language_version: python3.6\nIn general, I think our recommendation is to specify a language_version on basically every hook. Otherwise you can get confusing behavior when the hooks were first run with a different Python version. (Some hooks, like check-yaml, don't really matter -- any version of Python should be able to run the hook with the same results -- but the ones that e.g. parse the AST matter a lot.)\nI know copying and pasting the language_version after every hook isn't great. This is one of the problems with the current config format, but unfortunately we can't really fix it in a backwards-compatible way (since the top-level is a list). Eventually we're going to take the breaking change in the config format and will have a way to specify a project-wide default for language versions.. Dupe of #191 and #341. We're working on this in https://github.com/chriskuehl/identify and https://github.com/pre-commit/pre-commit/pull/329 (that PR will be revived eventually).. Does it actually matter if a hook writes files, as long as it only writes to the files it's been passed on the command line? E.g. I don't think it's an issue to run autopep8 in parallel. The only issue I see is if you had a hook that was writing to unrelated files that might be part of another bundle being executed at the same time, but I can't think of any off the top of my head.\nIt's probably still worth to have an option though since some hooks already do parallel execution (e.g. flake8) and it would probably be slower to parallelize those.. I'm not sure this is a good idea. Globs work okay if you only want to include one directory, but what happens as soon as you need to include another directory? Now you need two globs, so you've either got to convert it back into a regex, or go open another issue on pre-commit to ask it to support a list of globs or something.\nI'm not sure what the benefit of globs over regexes is?. Also, how do you determine whether to apply regex matching or glob matching? Is some/example/path/to/file* a regex or a glob (it's both)?. +1, I've been using --tags-only pretty exclusively lately.. Looks cool! pre-commit is designed around anyone being able to create their own hooks (as git repos), there are some instructions on the website: http://pre-commit.com/#new-hooks\nThis issue probably doesn't belong on the pre-commit project itself (this repo is used for framework-specific questions/bugs/enhancements), but we'd definitely be happy to help you if you have any questions with writing a new hook!\nOnce you've written the hook, you can submit a PR to https://github.com/pre-commit/pre-commit.github.io to have it listed on our list of public hook repos.. After merging, it might be a good idea to (temporarily, until they fix it) stop listing repos which don't have .pre-commit-hooks.yaml on the website to avoid confusion.. See also #394 for previous discussion. If you apply this patch to your test, it will probably fix it:\npatch\n--- a   2017-08-01 23:55:42.552878701 -0700\n+++ b   2017-08-01 23:55:57.341148895 -0700\n@@ -3,7 +3,7 @@\n       system \"git\", \"init\"\n       (testpath/\".pre-commit-config.yaml\").write <<-EOF.undent\n       -   repo: https://github.com/pre-commit/pre-commit-hooks\n-          sha: 5541a6a046b7a0feab73a21612ab5d94a6d3f6f0\n+          sha: v0.9.1\n           hooks:\n           -   id: trailing-whitespace\n       EOF. @antonbabenko no hooks operate in parallel yet; that issue is requesting the functionality, but it hasn't been implemented yet.\nIt's true that pre-commit may split files across multiple hook invocations if there are too many files, but this happens in serial and is sort of unavoidable (since there are limits on the length of argv, see xargs --show-limits; though pre-commit is a lot more conservative than what the actual max probably is on your system):\nhttps://github.com/pre-commit/pre-commit/blob/51ac0e8bc0a1b61939283254c4bd5189c919f919/pre_commit/xargs.py#L8-L10. I'm not sure how your project is set up, but assuming you have the Python 3 files separate from the Python 2 files, what if you ran linters (in this example, flake8) on the files separately?\nyaml\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: v0.9.1\n    hooks:\n    -   id: flake8\n        name: flake8 (Python 2)\n        # Adjust as necessary\n        files: ^py2/\n        language_version: python2.7\n    -   id: flake8\n        name: flake8 (Python 3)\n        # Adjust as necessary\n        files: ^py3/\n        language_version: python3.6\nThere's also the exclude key which you could use instead.. @asottile this gives me a crazy idea... what if the cache key used for a (repo, ref) was just the sha, and didn't involve the repo path at all?\nIn practice, a git SHA is unique across all git repositories (yeah okay, I know Google finally found the first sha1 collision, but it took them 110 GPU years of work), so a git SHA could be a decent key. It would mean that the same repository and revision could use the same cache regardless of how you get to it.\nNot sure if this is a good idea, especially given that SHA1 has recently been (somewhat) broken. An interesting idea, though :). Ah, makes sense. I guess it's probably not worth adding another layer of indirection (i.e. caching the (repo, revision) => full SHA) just to improve the hit rate a bit.. Travis and AppVeyor are both passing :D\nIt adds about 20 seconds to the Travis pre-install step which isn't great but probably okay? (swift adds like 23 seconds /shrug)\nI tested this out with shellharden, a real Rust linter (and a pretty cool one), and it seems to work. Going to try this with a couple other linters (maybe clippy) before I check off that box.. Tried this out with some real Rust linters: shellharden, systemd-linter, rustfmt-nightly, and clippy via the mirror maker, they all worked :D.\nGonna check off that box, just need to make local hooks work and then I think this will be good to merge.. . A little orthogonal to the general issue here (there could still be use-cases for using a different pip tool), but if we can get traction on https://github.com/pypa/pip/issues/5453, it could make it a lot easier to avoid needing pip-custom-platform with pre-commit.. @asottile if we could find a reasonable way to implement this, would you take a patch? Or is this something you think should be solved outside of pre-commit somehow?\nThis is causing us quite a bit of trouble as we don't have linux_x86_64 wheels anymore on our internal PyPI, requiring us to build packages on every install.. Yeah, I guess we can do this. People have been telling me it's too hacky to merge, but now that you've documented it, I guess it's not a hack anymore :)\nI was sort of hoping for install_environ as a top-level key so that we could avoid a manifest like:\ndiff\ndiff --git a/app/templates/.pre-commit-config.yaml b/app/templates/.pre-commit-config.yaml\nindex 69647de..be8de27 100644\n--- a/app/templates/.pre-commit-config.yaml\n+++ b/app/templates/.pre-commit-config.yaml\n@@ -3,35 +3,37 @@ repos:\n     sha: v1.1.1\n     hooks:\n     -   id: trailing-whitespace\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: end-of-file-fixer\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: autopep8-wrapper\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: check-json\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: check-yaml\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: debug-statements\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: name-tests-test\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: flake8\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: requirements-txt-fixer\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: check-added-large-files\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: check-byte-order-marker\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: fix-encoding-pragma\n         args: [--remove]\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: check-executables-have-shebangs\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n     -   id: detect-aws-credentials\n         args: ['--allow-missing-credentials']\n+        additional_dependencies: [-i, https://pypi.yelpcorp.com/simple]\n...which seems like a lot to copy-paste around everywhere and sort of distracts from everything else in the manifest.. What's the hard part about correctly invalidating caches? Can't you hash the provided install environment and include that as part of the cache key?\nI don't think we want every pip invocation on the box to default to internal PyPI. At least for us right now, I think per-project is the right level to opt-in to that, and the pre-commit config seems like a pretty natural place to do it.\nI guess we will probably take the additional_dependencies approach everywhere and just live with cluttered pre-commit configs. I'm not crazy about it, but it's been a pretty big issue for us, and pre-commit doesn't seem to have an elegant solution (despite imo being in a good position to provide one).. +1, here's another case where this could be useful:\nhttps://github.com/ocf/ocfweb/blob/f166a3159da560eb871ebd3a375606ba5a240912/.pre-commit-config.yaml#L67-L71. Heh, on AppVeyor:\n```\n================================== FAILURES ===================================\n_____ test_xargs_concurrency ________\n    def test_xargs_concurrency():\n        bash_cmd = ('bash', '-c')\n        print_pid = ('sleep 0.5 && echo $$',)\n    start = time.time()\n    ret, stdout, _ = xargs.xargs(\n        bash_cmd, print_pid * 5,\n        target_concurrency=5,\n        _max_length=len(' '.join(bash_cmd + print_pid)),\n    )\n    elapsed = time.time() - start\n    assert ret == 0\n    pids = stdout.splitlines()\n    assert len(pids) == 5\n\n\n  assert elapsed < 1\n\nE       assert 1.0390000343322754 < 1\ntests\\xargs_test.py:124: AssertionError\n== 1 failed, 491 passed, 6 skipped, 9 xfailed, 10 xpassed in 529.27 seconds ===\n```\n\nIt's been passing most of the time on AppVeyor, probably flaky :\\\nGuess I should increase the elapsed duration... or just delete the test.. @asottile switched to a concurrent.futures backport and added an env var to force it to run in serial during tests. Let me know what you think!. @warsaw a wheel would be great if it's not too much trouble -- this is also causing issues for us internally (can't build from the sdist as our setuptools is too old for unfortunate reasons), so we've been temporarily using an older pre-commit version.. It would be interesting to look at how it's partitioning the files. I'd guess it's either some files taking way more time than others to process, or maybe an issue with max arg length forcing it to emit another partition (though this seems unlikely given four partitions).. I thought about shuffling too but rejected it for the same reason.\nI suppose we could shuffle it deterministically (e.g. use a fixed random seed so that the same set of files always partition the same way), but that could still be confusing.. I think the problem with intentionally having more partitions than the CPU count is that we'll have to pay any fixed startup costs (e.g. initializing the hook) multiple times in serial. For most hooks it's probably not a big deal, but could be bad for hooks that are slow to start.. @asottile I can give this a try later this afternoon. Deterministic shuffling seems to do about as good of a job at balancing as could be expected. I wrote a silly bash hook which just prints the output of wc -l over the lines passed to it. If I run the hook over a large Python project (I used https://github.com/translate/pootle) on a machine with 12 cores, it looks like this:\n```\n(py27) ckuehl@ithuriel:~/proj/pootle$ pre-commit run --all-files wc -v\n[wc] wc..................................................................Passed\nhookid: wc\n8807\n12158\n5213\n129052\n273175\n254326\n11497\n10273\n22560\n2905\n239681\n30047\n10666\n```\nNot very balanced. With shuffling it looks like:\n```\n(py27) ckuehl@ithuriel:~/proj/pootle$ pre-commit run --all-files wc -v\n[wc] wc..................................................................Passed\nhookid: wc\n112387\n76954\n76587\n79163\n78836\n118854\n85061\n57289\n78456\n75089\n99813\n80119\n```\nObviously the actual benefit is going to depend on the specific hook and a dice roll, but in most cases this will probably improve things about as well as we can without actively trying to balance line lengths between the partitions.\nAnother benefit of shuffling is that it will probably tend to fill the partitions to the maximum argument length more reliably, since you won't have long stretches of very long file names (due to a bunch of deeply nested files).. @Dunedan that's unfortunate :(\nJust curious, if you manually tweak the random seed (you should just be able to change it arbitrarily to any numbers), are there scenarios where it's better? Wondering if it's just an unlucky shuffle or a more fundamental problem.\nKind of weird that you're hitting this with only 100 Python files -- I wonder if this hook is just so slow for a few of your ~100 files that this is especially hard to avoid.. I'm not really sure why this would happen with stable, but in general it's recommended to use \"immutable\" version-based tags instead of a branch (or tag that gets updated, such as stable or master) for pre-commit hooks. The way pre-commit works is that it sets up the environment during the first invocation for a given revision, so by specifying stable you're really getting \"whatever the stable version happened to be when you did the install\" which is potentially an old version and will differ between environments.\nYou can see more about the reasoning why it's not recommended to point to a branch at https://github.com/pre-commit/pre-commit/issues/158#issuecomment-54103765.\nWhen you run autoupdate, it's updating you to what it sees as the latest tag. You could probably look into your pre-commit cache to see which revision it's actually using for stable on your machine. Due to the way this works, it's also possible that wiping out the cache and reinstalling could magically fix it (if stable now points to a different, working revision), though again using a version is probably a better idea in most cases.. I think the request is for pre-commit to automatically install versions of Python that you don't have locally on your system, similar to what it does for Node, Ruby, etc.. heh, this was definitely my fault. at least i recognized that \"someone\" would make a dumb mistake like this!\n. Could also exclude symlinks here if desired. I didn't because I can imagine some useful hook (e.g. checking for symlinks pointing outside of the repo), but the current behavior could also potentially be dangerous (e.g. we could end up running a hook on a symlink pointing outside of the git repo, transparently to the hook, which then \"fixes\" a file outside of the git repo).\n. There are also maybe useful hooks to run against submodules, but imo those should just read .gitmodules instead. Random hooks shouldn't have to worry that they'll be passed in a directory.\n. I think hook_stage would be a better name for this\n. similarly, maybe call it stage?\n. does normcase do the right thing?\nhttps://docs.python.org/2/library/os.path.html#os.path.normcase\nalthough...\n\nOn Unix and Mac OS X, this returns the path unchanged; on case-insensitive filesystems, it converts the path to lowercase.\n\nthis seems a little dubious, doesn't OS X use a case-insensitive fs by default?\n. two spaces here intentional?\n. lol\n. more lol\n. good catch, fixed! this was from a previous iteration where i hadn't set a default\n. yup\n. clarified\n. this is great\n. wtf lol\n. what is this?\n. intentionally losing a newline here?. jk. probably without -t, this will fail on e.g. jenkins. run with --rm?. you can just\npython\nhashlib.md5('my string').hexdigest(). nice pun. Another option is to read https://api.github.com/repos/pre-commit/pre-commit-hooks/tags which may (or may not) be easier than invoking git.. I have a feeling that we're going to have a fair number of people asking how to do this upgrade. Since often we don't pin pre-commit, the answer is usually going to be to rm the virtualenv and rebuild it... probably fine, just something to think about.. Do you think it makes sense for the list of tags to be an OR rather than an AND?\nI'm wondering if there's a case where someone will do something like types: [python, ruby] and be surprised that it matches nothing rather than all python and ruby files.\nI'm having trouble coming up with a scenario where I'd want to target only files which have multiple tags... but I also can't really think of too many cases where I'd want to target both python and ruby but not just text, so maybe both cases are pretty rare?\nMy original (much more complicated) branch just checked for any intersection of the tags, but I didn't really spend much time considering the alternative.. Yeah, I can't really come up with a real use-case for either. It's still possible to get the OR behavior by specifying the hook twice if you really need it. I'm fine with either way.\nfwiw all of the standard hooks were easy to write with just one type: https://github.com/chriskuehl/pre-commit-hooks/blob/new-typers/hooks.yaml. why using DOTALL here?. weird blank line?. I don't really know what to do here. Maybe the number of CPUs is actually a decent heuristic? Or the number minus one? Or divided by two???. I think the eventual change to partition would have some relatively simple logic where it tries to fill up sets of N partitions (to take advantage of the N concurrency) while respecting the max_length, rather than trying to minimize the number of partitions like it does now. Probably with some simple logic to avoid silly things like 4 partitions of 1 item each which are probably non-optimal due to per-invocation overhead (we can probably just hard-code something reasonable here?).. Kind of a silly test, but asserting stuff is running in parallel is hard. idk, what do you think?. @asottile let me know if you have a preference on doing this vs installing a concurrent.futures backport on python2. You have to do kind of a weird dance to get these to shuffle identically between py2 and py3 -- fixed_random.shuffle won't work because in py3 random.shuffle picks a different algorithm than what's used in py2 if you don't specify random as a kwarg; random.sample which would probably be preferred to avoid turning it into a list and mutating it has a similar problem.\nWe probably don't really need it to be identical between py2 and py3, but it means we don't need to go fix a bunch of tests. Idk, worth it?. lol i messed with the fixed random seed until only one test failed rather than a bunch. derp, apparently this is actually passing as-is (i needed to pip install into my venv again). ",
    "ymilki": "Turns out, this is partially blocked by #256 since commits can be made without changed files. With multiple changed files, such hooks would be run multiple times.\n. A git commit always have access to the original HEAD and information to generate a new commit (e.g. committer, author, message body, blobs). A hook at this stage would generally examine the information for the new commit.\nA git push would always have the current ref tip to push and the remote's original ref tip. A hook at this stage would examine the commits that differ between the remote and the pushed refs.\n. That sounds like it would work for pre-push, but not for pre-commit as at pre-commit time, there is no new commit yet.\nEdit: Actually, this probably doesnt work if there's no file changes between remoteref and currentref still.\n. Ok. So we can write pre-commit hooks that are triggered without file changes?\nhttps://github.com/pre-commit/pre-commit/blob/5f5947d1c8e7e0fd9d25d5032dc6a286e31dbceb/pre_commit/commands/run.py#L79 will skip hooks if no files were changed.\n. Hm, that would seem to work in the general case.\nDoes this also apply to git commit --amend without changed files? \n. Ok, so you are basically saying pre-commit will not be able to run without changed files. Commits can always be made with no file changes. History can always change without file changes. And pre-commit will never run hooks without file changes.\nIn other words, this feature request is not going to be supported.\n. ",
    "dnephin": "I have a use for this as well\n. Oh right, I would want it to run against all files changed in that sha. Similar to staged but post commit. \n. Oh ya, I didn't realize xargs ... --files would work. That's all I needed!\n. ",
    "barrysteyn": "I would also need something like this\n. Hi\nI like this. But one thing... Can stages mimic the names of the hooks, e.g:\n-   repo: ...\n    sha: ...\n    hooks:\n    -   id: check-added-large-files\n        stages: [pre-commit]\n    -   id: check-merge-conflict\n        stages: [pre-commit,pre-push]\n. @asottile  Actually, after thinking about it some more, ignore my last comment. I like yours much better. stages will be commit or push.\n. This issue is now solved in #271 \n. Okay, I added your suggestions. I need to go to a meeting, but after that, I will add some unit tests and update the documentation.\n. @chriskuehl The tests are failing, but they are failing for things I have not touched. For instance, in the install_uninstall_test.py, there is a function _get_commit_output which has an exit code of 1. This is just an example.\nPlease can you run the tests from this pull requests and tell me what is wrong.\n. Thanks @asottile, tests are passing. I was wondering if you have any input regarding unit tests that I am about to add?\n. I'll fix Python 3 tomorrow. I used strip because I thought it wise to\nremove whitespace from stage items, but it's really not needed\n. Okay, tests are working for the new functionality, both for python 3 and python 2. Please can I ask that this be merged - I would really need to start using the functionality. Also, once merged, I will update the documentation.\n. Thanks @asottile - can I update the documentation (pre-commit webpage) or is there someone dedicated to doing that (I really don't mind).\nAlso, I have some suggestions regarding the future of the project. Shout if you want me to chat about them.\nLastly, we need some documentation for journey-man python programmers like myself. Getting the tests to run locally was challenging due to lack of documentation. Maybe just a tiny addition to the README explaining how to run the tests. Which also brings me to another point: One of the tests (the repository tests) always failed on my local machine (it just seemed to stall). I never went into why this is happening, but it should be fixed.\n. @asottile If we try push an empty change set, pre-commit --hook-stage push will be run resulting in an error. I have submitted a PR to fix this. If you think there is a better way to do this, then please change.\n. Sure thing.\n. Okay, I will do this now.\n. Well, the way the logic is written, if it is an empty array, it will always be run in every stage. To me, this makes it more future proof since if we make another stage (say rebase), then it would still work on every stage by default. Of course, it is far more expressive to default it like you have suggested. I really don't mind changing it (this is not my project after all). Is your take on this still the same after my explanation?\n. I don't understand why this would happen? Is it because if there are no arguments, then it defaults to run? If that is the case, then why is there an args variable in the first place?\n. Also, I should note that when I run the code, --hook-stage variable is passed to the run method.\n. Right. And that sample output request would be in a test. The only problem now is that I can't get the previous tests to work. Once they are working, then I will be happy to test this new functionality.\n. Good catch! Thanks @asottile. Dunno why I missed this.\n. Nice. Thanks for this.\n. The file says it is a random(ish) md5. How is it created? How should I update it?\n. Okay, but then regarding your comment above, do you mean to change it such that run is called explicitly:\npre-commit run --hook-stage commit|push\nSo I would add run?\n. ",
    "meunierd": "Yeah! I just wasn't sure where it should live in the test suite. Any suggestions?\n. Updated with a test. The intention wasn't to specify the target of the virtualenv itself but rather the python binary passed to with -p\n. Finally updated this PR. Sorry about the delay/noise. Windows is a pain.\n. Updated with a more explicit handling of the leading slash issue.\n. Thanks! Will do.\n. The expansion of ~ on Windows has a leading slash for some reason, and without the drive specified.\n. ",
    "tdeo": "This requires ggrep installed on the machine by brew install grep. I don't know on which readme that should be indicated ?\n. Just sent the PR. Do you have any idea when you will release that ?\nThanks\n. It worked perfectly for me. Thanks!\n. I changed it to use git rev-parse --git-dir. I don't understand what you were meaning about your two concepts. With this fork I can run pre-commit install from inside a submodule and hooks are ran properly when doing a commit. Is there something I'm missing here ?\n. I just amended the commit to add a test. However, because I'm using a Mac, it is highly painful to run the tests. I'll let travis check it up.\n. @asottile I got a new integration test passing using the -z option for grep. Is that enough?\n. Thanks! When do you plan to do next release?\n. Thanks you!\n. I squashed the commit. Everything allright?. Thanks for reactivity!. I was altho thinking they should belong to ~/.pre-commit somehow. \nHowever, this raises the question of what to do with system / script local hooks. I think it's not great if we have to treat them differently from let's say ruby local hooks. But I don't really see any alternative. Because we cannot copy them to some ~/.pre-commit/repoXXXX anyway.\nSo maybe, we should use the LocalRepository class only for those 2?. So I started working on that, and realized it was quite complex to use different folders in ~/.pre-commit/ for different hooks in the same repo.\nActually, if a remote repo contains several hooks which are listed with different (or even incompatible) additional dependencies, it's not handled today. Even worse, we could imagine the same repo being used for two hooks using different values on language_version.\nMaybe it should be another project to be able to have local repos handle this?\n. So I tried it out using different language_version or additional_dependencies for both remote / local repos and it works the same way in both cases. \nAnd I couldn't find any broken example, at least for ruby, I guess it has something to do with gem install actually resolving the gems dependencies one by one and not altogether like bundle does (which was the motivation for https://github.com/pre-commit/pre-commit/pull/482). So worst case is several versions of the same gem will be installed and rbenv will pick one by default (the greater version actually).\nLet me know if there's anything more to do before merging this (I'll rebase the branch on master as it's conflicting right now). Using empty_templates is a good idea, so not to have to differentiate installation for each language.\nHowever, why not also use the same logic of different venvs for different additional_dependencies for a non-local repository ? \n. It's true it's quite rare. And I agree the objective is not to create mirrors for everything (which will be solved with local hooks). I just had in mind to keep everything as close as possible.\nBut anyway, this will definitely address my needs, so let's go for it.. Awesome, you already released that!. It'll at least make that line readable again, which is ok. Thanks for the help. I made a few changes, now using both DOTALL and MULTILINE flags. I think it's simple enough this way, but maybe worth renaming the option to --multiline or something ?. So I actually figured a way around to display the multiline line match with the line number and renamed the option, let me know what you think. Thanks for your help ! Hope you'll release soon. Thanks for all those explanations.\nTo give a bit more context, what I'm trying to do is run rubocop --auto-gen-config on my repo (it's a feature of rubocop that scans the whole repo and generates a configuration file that matches the current state). I've been trying to set it up using stages and pass_filenames which would definitely possible, and what I tried was:\nyaml\nrepos:\n  - &rubocop\n    id: rubocop\n    name: rubocop\n    language: ruby\n    entry: rubocop\n    additional_dependencies:\n    - rubocop:0.54.0\n    - rubocop-rspec:1.25.0\n    - rubocop-thread_safety:0.3.4\n    exclude: (?x)^(\n      db/migrate/201\\d/|\n      lib/.*\\.pb\\.rb)\n    args:\n    - --color\n    - --auto-correct\n    - --require\n    - rubocop-rspec\n    - --require\n    - rubocop-thread_safety\n  - <<: *rubocop\n    id: rubocop_todo\n    name: Generating rubocop_todo file\n    stages: [manual]\n    pass_filenames: false\n    args:\n    - --color\n    - --auto-gen-config\n    - --require\n    - rubocop-rspec\n    - --require\n    - rubocop-thread_safety\nTo avoid copy-pasting versions of the dependencies. Unfortunately I'm running into the following issue:\n=====> could not determine a constructor for the tag 'tag:yaml.org,2002:merge'\n  in \"<unicode string>\", line 117, column 5\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/site-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/usr/local/lib/python2.7/site-packages/pre_commit/main.py\", line 259, in main\n    return run(runner, args)\n  File \"/usr/local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 255, in run\n    for repo in runner.repositories:\n  File \"/usr/local/lib/python2.7/site-packages/cached_property.py\", line 35, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/usr/local/lib/python2.7/site-packages/pre_commit/runner.py\", line 48, in repositories\n    repos = self.config['repos']\n  File \"/usr/local/lib/python2.7/site-packages/cached_property.py\", line 35, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/usr/local/lib/python2.7/site-packages/pre_commit/runner.py\", line 43, in config\n    return load_config(self.config_file_path)\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 351, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/contextlib.py\", line 35, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 49, in reraise_as\n    six.reraise(tp, tp(e), tb)\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 46, in reraise_as\n    yield\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 351, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"/usr/local/Cellar/python@2/2.7.14_3/Frameworks/Python.framework/Versions/2.7/lib/python2.7/contextlib.py\", line 35, in __exit__\n    self.gen.throw(type, value, traceback)\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 40, in validate_context\n    six.reraise(ValidationError, ValidationError(e, ctx=msg), tb)\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 37, in validate_context\n    yield\n  File \"/usr/local/lib/python2.7/site-packages/cfgv.py\", line 348, in load_from_filename\n    raise ValidationError(str(e))\nInvalidConfigError:\n==> File /Users/tdeo/git_tree/pricematch/admin/.pre-commit-config.yaml\n=====> could not determine a constructor for the tag 'tag:yaml.org,2002:merge'\nIn the mean time, I can for sure accept some copy-pasting and run rubocop --auto-gen-config by pre-commit-run --hook-stage manual rubocop_todo.\nFinally, for the last point about abuse, what if we would overriding the hook's args similarly as the --files option ? To fit my use-case, it would also require a --without-files that mimics pass_filenames: false.. Perfect, that solves my use-case, thanks for your help. Well, the current set implementation is already accepting the same dependency listed at different versions. We could keep the same behaviour by handling duplicates manually:\npython\nfor dep in hook.get('additional_dependencies', []):\n    if dep not in dep_dict[hook['language']][hook['language_version']]:\n        dep_dict[hook['language']][hook['language_version']].append(dep)\nAn other option would be to extract the name and the version for each dependency (needs to be implemented for each language though) and then either:\n  - keep only the first version of each package\n  - issue a warning to the user\n  - raise an exception\nand then implement tests accordingly, what would you prefer?. \ud83d\udc4d \nLet me know if you want me to squash commits. This is not related to this PR, but the tests were failing on my mac and I just quickly changed it. Let me know if you want me to take it out.. Indeed, I was running tests with Python2 and had encoding issues there.. Not sure what you mean here. What is zsplit ?. Oh, so that's what the -z option in grep means. I ever thought it was replacing newlines with null bytes in the input.. I'm not a big fan of the grep -z output in general, I always use it in conjuction with -bo to get only the matching part and the byte offset instead of the line number (which is always 1 when you don't have null bytes in the file). . ",
    "adamn": "My 2 cents, support 2.6 until a test fails on that release.  At that point, kill it.  Anybody using Python 2.6 for active development is in a bad way.  We can all concede that there are Python 2.6 codebases still living, but they're not being actively developed - and the only purpose of this tool is to support active development.\n. @sanmai-NL Funny, I was trying to be diplomatic about dropping Python 2.6 in order to gently nudge people towards that.  I'm a huge fan of just dropping it now though - that would be great!\n. ",
    "sanmai-NL": "@adamn: it seems you assume there that the only way in which Python 2.6 becomes a burden for pre-commit is when tests break on it. In addition to untested failure modes that aren't caught that way, being Python 2.6 compatible also has an impact on the code and tooling (e.g., pip availability) itself in the first place. Breaking loose from Python 2.6 could be an advantage. So, I would say we should take a broader perspective on the ups and downs of keeping Python 2.6 compat.\nI would like to add to your point about living code bases, that projects can just keep using older versions of pre-commit that are compatible. I.e., support for platforms for legacy reasons shouldn't really be an argument here. Only if Python 2.6-based projects were still expecting to use new features in precommit this would be an issue, but as you wrote, it is a dead platform.\n. Seems to be an issue still. What are the consequences of removing ~/.pre-commit/?. - Can you share some information? How are Python user bases buggy?\n- Okay, if pip isn't accessible at all even when using ensurepip, then good point. But in that case the unconventional  instructions should be clearly reserved for Debian-based Linux OS'es.\n- True, for system-wide installations you would of course drop the --user.\n- Could you explain your comment on non-Python use-cases and shops? How is that related to virtualenv? \nIf Debian sabotages pip, why wouldn't they sabotage virtualenv? What about standard Python venvs? Are you sure using pip install --user is impossible on Debian?\n. Okay, interesting note about the user site-packages dir conflicting with the Python path. I hope you're fine with discussing this further to at least achieve a common understanding.\nBased on my current knowledge, I think adding the user site-packages dir to the Python path is a fine design choice for non-isolated virtual environments. Why would it be a problem? Virtualenvs are a hack actually. But most importantly, I could not reproduce this issue in an isolated venv, didn't test it in a non-isolated one.\nsh\npython -m venv /tmp/myvenv\n. /tmp/myvenv/bin/activate\n(myvenv) python -c 'from sys import path; print(path)'\npython\n['', '/usr/lib/python35.zip', '/usr/lib/python3.5', '/usr/lib/python3.5/plat-linux', '/usr/lib/python3.5/lib-dynload', '/tmp/myvenv/lib/python3.5/site-packages']\nReally, I think the Node.js shop argument is not very good. I do not see why it would be more difficult or unattractive to issue one or two very plain command line statements vs. one (slightly more complex). Also, the curl dependency of the current instructions won't be available on Windows by default and needs to be installed on the CI host.\nIt's still okay if you think asking to install one or two OS packages on Debian makes things too difficult, but didn't I propose to reserve the special instructions (meaning, even if just the current ones) for Debian? At least, that would not suggest to users that pre-commit should always be installed in the unconventional (in my view, unattractive for the reasons stated) way. Also, npm as known by the Node.js peeps works in the same way, also installing deps under the user home directory. The same is true for many other language impl dep managers. And on a final note, I'd say pip  itself is fairly well-known by anyone who ever did anything with CPython, even for some end-user use cases.\nI agree that it's attractive to just fire off a script and that sorts out everything for installation. The problem is, this fails in a bare Alpine Linux Docker container, i.e. a common CI host, with cryptic error messages. That's related to #396, and not a problem per se. What I am getting at is that the benefits of keeping your script/custom installation commands that you feel do not bear out in practice for me.\n. Manylinux wheels, didn't know them, but it looks like it isn't robust and simple. Also, isn't the interaction with Windows support problematic? A good solution perhaps if the C code in your CPython project is absolutely needed and the range of user platforms is limited and well-known in advance.\nUsing C code, especially for LibYAML is a security issue over using pure Python since any and all C code is at particular risk of memory security issues. See e.g. this paper. In practice, this means that someone writing malformed YAML could use that to execute arbitrary code. This kind of vulnerability happens now, to the best, and to popular widely used libraries. Moreover, the YAML spec is notoriously complex. For something potentially operating at the center of software development in an organization (e.g., on a CI host), that's unattractive.\n. Thanks for all the wheels.\nI respectfully disagree with you that using one language over the other won't really make you more or less vulnerable to memory security vulnerabilities. As claimed in the paper and in many other, C code is particularly at risk of this. CPython is more carefully authored and reviewed than your average C code, so ceasing to use CPython isn't so inevitable.\n. ",
    "ericklaus-wf": "Ug--I should have found that when I was searching for the problem.\nI do indeed have an old version of pip by default in my virtual environments. I was using version 1.4.1. In a fresh environment, installing the latest version of pip, installing pre-commit, and then running pre-commit does work.\nI'm not sure how common old versions of pip actually are, so I can't say how important this is to work around generally. In my case, it's pretty easy to just remember to upgrade pip.\n. That's fine by me.\n. ",
    "EliRibble": "Yeah, that will work, though I changed it a bit since we already had a bash script which hands across the correct settings file to pylint. Looks like this, for anyone who hits the same thing:\n-   repo: local\n    hooks:\n    -   id: system\n        name: PyLint\n        entry: ./pylint.sh\n        language: system\n        files: \\.py$\nThanks for the fast response.\n. Looks really good, thanks\n. ",
    "webknjaz": "To whom it may concern,\nhere's config for pylint I ended up having\ndiff\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex adec32c..1a18bc3 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -18,3 +18,23 @@\n   hooks:\n   - id: pydocstyle\n     exclude: blog/migrations\n+\n+- repo: git://github.com/pre-commit/mirrors-pylint.git\n+  rev: v1.9.1\n+  hooks:\n+  - id: pylint\n+    args:\n+    - --msg-template={path}:L {line:3d}:({symbol}) {msg} (C {column:2d}), ::{msg_id}\n+    - --output-format=colorized\n+    - |-\n+        --init-hook=\n+        import os, platform, sys;\n+        sys.path.insert(\n+          0,\n+          \"\".join([os.getenv(\"HOME\"), \"/virtualenv/python\", platform.python_version(), \"/site-packages\"])\n+          if os.getenv(\"TRAVIS\") else\n+          \"{}/test_venv/lib/python3.6/site-packages\".format(os.getcwd())\n+        )  # inject virtualenv packages into a module search path; could also go for pylint-venv hook\n+    - --load-plugins=pylint_django\n+    - --good-names=pk,urlpatterns\n+    exclude: blog/migrations/. Does it imply installing it manually?. Yeah, I just didn't want to mutate existing app's env.. Thanks for the suggestion. It doesn't look installing all the dependencies into $HOME/.pre-commit/ env, like pre-commit run does.. You are right, there was no output, because the hooks were installed before that.\nNow I've faced another problem: whenever I run pre-commit run --all-files it tries upgrading them.\nI need some way to prevent that. Any ideas?. Oh, I see.. Thanks for explanation.\nMy goal is to avoid having git installed in container during runtime. Normally I have it as a build dependency only. But it is running git for checks:\n``\nAn error has occurred: FatalError: git failed. Is it installed, and are you in a Git repository directory?\nCheck the log at ~/.pre-commit/pre-commit.log\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/dist-packages/pre_commit/git.py\", line 20, in get_root\n    return cmd_output('git', 'rev-parse', '--show-toplevel')[1].strip()\n  File \"/usr/local/lib/python3.5/dist-packages/pre_commit/util.py\", line 188, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\npre_commit.util.CalledProcessError: Command: ('git', 'rev-parse', '--show-toplevel')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Executablegit` not found\nErrors: (none)\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/dist-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/usr/local/lib/python3.5/dist-packages/pre_commit/main.py\", line 166, in main\n    runner = Runner.create(args.config)\n  File \"/usr/local/lib/python3.5/dist-packages/pre_commit/runner.py\", line 28, in create\n    root = git.get_root()\n  File \"/usr/local/lib/python3.5/dist-packages/pre_commit/git.py\", line 23, in get_root\n    'git failed. Is it installed, and are you in a Git repository '\npre_commit.errors.FatalError: git failed. Is it installed, and are you in a Git repository directory?\n```\nAny chance to turn the check off completely? Given that all hooks will already be downloaded and set up at build time.. Well, if it cannot be easily substituted with just a python code, then I think yes. You may close this issue.. @asottile It seems we need to re-open the question.\nProject workdir in the container is just a folder of the repo at the host machine in RW mode. Thus when it changes the pre-commit hook of the repo it starts pointing to pre-commit inside of the container, which breaks the hook for the host machine.\nAny ideas? Probably introducing some extra option would help.. Well, I just don't want it to change .git/hooks/pre-commit while running inside of container. Thus I would prefer some --no-not-change-git-hook CLI argument or so.. For development I use vagga \u2014 containerization tool without daemons. Like docker, it also builds and runs LXC containers. But, unlike docker, it runs everything in userspace and isn't meant to be used in production (there's a supervisor lithos, systemd-nspawn and lots of other tools for this).\nThe config is:\n```yaml\ncontainers:\n  mysql:\n    setup:\n      - !Alpine v3.4\n      - !Install\n        - mariadb\n        - mariadb-client\n      - !EnsureDir /data\n      - !EnsureDir /run\n    environ:\n      DB_DATABASE: gdg\n      DB_USERNAME: mysql\n      DB_PASSWORD: mysql\n      DB_HOST: 127.0.0.1\n      DB_PORT: 3307\n      DB_DATA_DIR: /data\n    volumes:\n      /data: !Persistent\n        name: mysql-data\n        init-command: _init-mysql\n      /run: !Tmpfs\n        mode: 0o766\n        subdirs:\n          mysqld:\napp:\n    setup:\n      - !Ubuntu xenial\n      - !UbuntuUniverse\n      - &app-build-deps !BuildDeps\n        - git\n        - mercurial\n        - python3.5-dev\n      - !Install\n        - ca-certificates\n        - python3.5\n      - !PipConfig\n        dependencies: true\n        python-exe: python3.5\n      - !Depends setup.py\n      - !Py3Requirements requirements/dev.txt\n      - !NpmInstall [bower]\n      - !Sh bower install --allow-root\n      - !EnsureDir /mnt/db_host\n    environ-file: /work/.env\ntest:\n    setup:\n      - !Container app\n      - !BuildDeps *app-build-deps\n      - !Depends .pre-commit-config.yaml\n      - !Py3Requirements requirements/test.txt\n      - !Py3Requirements requirements/test-env.txt\n      # Git is needed for pre-commit in runtime. Ref:\n      # github.com/pre-commit/pre-commit/issues/456#issuecomment-269653630\n      - !Install [git]\n      # Shadow git-hooks dir, so that pre-commit won't break git hooks in host\n      # Ref: github.com/pre-commit/pre-commit/issues/456#issuecomment-269856503\n      - !Sh mount -t tmpfs none /work/.git/hooks\n      - !Sh HOME=/root pre-commit install --install-hooks\n    environ:\n      # Ref:\n      # github.com/pre-commit/pre-commit-hooks/pull/161#issuecomment-269662841\n      LANG: en_US.UTF-8\n      BLUEBERRYPY_CONFIG: \"{}\"\n      NOSE_TESTCONFIG_AUTOLOAD_YAML: \"config/test/app.yml\"\ncommands:\n  _init-mysql: !Command\n    description: Initialize mysql database\n    container: mysql\n    run: |\n      mysql_install_db --datadir=$DB_DATA_DIR\n      mysqld_safe --user=root --datadir=$DB_DATA_DIR \\\n                  --bind-address=$DB_HOST --port=$DB_PORT \\\n                  --no-auto-restart --no-watch\n      while [ ! -S /run/mysqld/mysqld.sock ]; do\n        sleep .2\n      done  # wait for server to be ready\n      mysqladmin create $DB_DATABASE\n      mysql -e \"CREATE USER '$DB_USERNAME'@'localhost' IDENTIFIED BY '$DB_PASSWORD';\"\n      mysql -e \"GRANT ALL PRIVILEGES ON $DB_DATABASE. TO '$DB_USERNAME'@'localhost';\"\n      mysql -e \"FLUSH PRIVILEGES;\"\n  clean-db: !Command\n    description: Cleanup mysql database\n    container: mysql\n    run: |\n      mysql_install_db --datadir=$DB_DATA_DIR\n      mysqld_safe --user=root --datadir=$DB_DATA_DIR \\\n                  --bind-address=$DB_HOST --port=$DB_PORT \\\n                  --no-auto-restart --no-watch\n      while [ ! -S /run/mysqld/mysqld.sock ]; do\n        sleep .2\n      done  # wait for server to be ready\n      mysqladmin -f drop \"$DB_DATABASE\"\n      mysqladmin create \"$DB_DATABASE\"\n      mysql -e \"GRANT ALL PRIVILEGES ON $DB_DATABASE. TO '$DB_USERNAME'@'localhost';\"\n      mysql -e \"FLUSH PRIVILEGES;\"\n  blueberrypy: !Command\n    description: |\n      Run blueberrypy command (you have to provide command and arguments by yourself)\n    container: app\n    run: [ blueberrypy ]\nmysql: !Command\n    description: Run RDBMS shell\n    container: mysql\n    run: |\n      mysqld_safe --user=root --datadir=$DB_DATA_DIR \\\n                  --bind-address=$DB_HOST --port=$DB_PORT \\\n                  --no-auto-restart --no-watch\n      while [ ! -S /run/mysqld/mysqld.sock ]; do\n        sleep .2\n      done\n      mysql -D $DB_DATABASE\n  run: !Supervise\n    description: Run application in development mode\n    mode: stop-on-failure\n    children:\n      run-app: !Command\n        container: app\n        run: |\n          touch /work/.dbcreation  # Create lock file\n          while  [ -f /work/.dbcreation ]; do  # Acquire lock\n            sleep .2\n          done\n          current_version=$(alembic -c config/alembic.ini -x environment=dev current)\n          head_version=$(alembic -c config/alembic.ini -x environment=dev heads)\n          if [ \"${current_version}\" != \"${head_version}\" ]; then\n            alembic -c config/alembic.ini -x environment=dev upgrade head\n          fi\n          if [ -z \"${current_version}\" ]; then\n            load_gdg_fixtures \"$DATABASE_URL\" src/GDGUkraine/fixtures/fixtures.yaml || exit 1\n          fi\n          blueberrypy serve -b 0.0.0.0:8080\n      run-db: !Command\n        container: mysql\n        run: |\n          mysqld_safe --user=root --datadir=$DB_DATA_DIR \\\n                      --bind-address=$DB_HOST --port=$DB_PORT \\\n                      --no-auto-restart --no-watch\n          while [ ! -S /run/mysqld/mysqld.sock ]; do\n            sleep .2\n          done  # wait for server to be ready\n          rm -f /work/.dbcreation  # Release lock\n          while :; do  # Emulate infinite loop\n            sleep 1d;\n          done\n  lint: !Command\n    description: Run linters for gdg.org.ua project\n    container: test\n    run: pre-commit run --all-files\n'py.test': !Command\n    description: Run tests for gdg.org.ua project\n    container: test\n    run: [py.test, --cov, -v]\ntest: !Command\n    description: Run tests for gdg.org.ua project\n    container: test\n    run: py.test --cov -v src/tests/\n```\nSo when I run vagga lint it:\n1) builds app and test containers if they don't exist or any of their dependencies in project changed (!Depend or requirements*.txt etc.)\n1.0) during the build my current directory (with config, which is a repo dir) is being mounted as /work, rw\n1.1) at this stage all needed dependencies are being installed\n1.2) during the build I hacked around the issue and shadowed /work/.git/hooks with tmpfs, but it doesn't look like a right thing to do\n1.3) HOME=/root pre-commit install --install-hooks installs hooks to dir, which is $HOME at runtime\n2) executes pre-commit run --all-files command inside of test container\n2.0) during the run my project dir is also mounted as /work, rw\nI'm doing git commit, which runs pre-commit outside of container, that is why I don't want the build process to influence any git configuration at host.. @asottile great!\nMay I suggest you configure Travis CI for pushing releases to PYPI triggered by pushing new tag? I can send you a PR.. Well, CI caching doesn't always work well, but it's a considerable workaround.\nStill, I'd like to have this feature locally. I'd be happy with implementation not taking into account different langs/envdirs, but enabled with a simple command-line switch/env var.. Thanks for the hint! Here's the proof of concept: #641. Oh.. I didn't notice your last comments because of web-page left open for hours :)\nPlease take a look at my PR anyway, I'd like to know what you think.. > this adds some coupling\nYeah, that's why I put PoC in title.\nI'd also like to have smth cleaner and won't accept such dirty code. I'll think if I can make this better, though.. I've got another use-case for env vars:\nThere's https://github.com/jgosmann/pylint-venv, which can allow pylint to run in venv where it's not installed. While this could be addressed in the hook itself (ref pre-commit/mirrors-pylint#9), I feel like this could be a generic helper for lots of other cases.. ",
    "elidupuis": "Damn! Thanks for the speedy response. I've added pip install --upgrade pip to my CI configuration and pre-commit is initializing as we speak! :star2: \nThanks again! :+1: \n. I'm running into this as well. At first I thought it was a CI issue, but after I ran pre-commit clean I'm getting the same thing locally. The workaround above seems to work great :+1:.\n. @brettmcintosh, this will apply to any hook that runs in Node. I went through my pre-commit config file and added language_version for Node-based hook...\n. @asottile For nodejs repositories, is it enough to simply update pre-commit-mirror-maker, re-run it, and push up the new commits?\n. Cool, thanks!\n. ",
    "othiym23": "This is indeed a duplicate of npm/npm#9633 (and making sure it gets fixed :soon:).\n. ",
    "brettmcintosh": "Same problem when installing jscs.  Workaround config:\n-   repo: git://github.com/elidupuis/mirrors-jscs\n    sha: e75dbd2432de67c887670f01d65f356b1b5cfad7\n    hooks:\n    -   id: jscs\n        language_version: 4.2.2\n. Much better.\n. ",
    "shaleh": "Why can't the db store a \"last used\" stamp whenever a pre-commit hook runs? Then you can ask which repo was used least recently and fry it. Worst case is it needs to be recreated.\n. Unless autoupdate is going to purge old repos I do not see how it would change anything. The out of date check is passed on the sha/tag/whatever.\n. A slightly related question. Say I am a pre-commit user and one of the hooks is misbehaving. How do I go about finding where the hook code is so I can debug it? Looking in ~/.pre-commit I see numerous repos after a some tests and autoupdate calls.\n. I was considering adding a \"pre-commit info\" or the like but wanted to ask in case I was missing something really simple.\nThanks.\n. My system only has 2.7 and 3.4 installed so I was trying to limit the tests. Still no dice )-:\n. I missed that. Sorry.\nWould you be opposed to the tests being moved into a \"multi-version\" env so that if the user invokes tox -e py?? the tests only validate that version? A full run will still run all of them. This would also allow running just the explicitly multi-version tests too.\n. -   id: github-openstack-bandit\n    name: Bandit security checks\n    description: \"Runs bandit over python source.\"\n    entry: bandit\n    language: python\n    files: \\.py$\nThat is a sample pre-commit-hooks-config.yaml for the Bandit security checker from OpenStack. Nite the use of github-openstack as a simple namespace hack.\nThis pull request does not have any unit tests or other niceties. I wanted to start the conversation before spending a ton of time on it.\n@asottile to address your concern of duplicated info that could have been in hooks.yaml one solution would be to have a central hooks.yaml that could be downloaded. The location of this file could be specified as a yaml entry in the .pre-commit-config.yaml.\nAs I mention in the commit message, I would like to see alternatives to repo that would point to just a URL or other non-VCS system. File checksums could be used to satisfy the version checks.\nIdeally the PR for mimetypes is finished which would simplify hooks.yaml further. Simply indicating the language should be all that is needed. At that point even if the hook info is duplicated in each repo using pre-commit the amount if data is small -- the hook name, description, language, and name of the entrypoint.\n. If there is interest in this patch being accepted I will add more unit tests to check ExternalManifest. The code is currently in the \"works for me\" state. I posted it for review and commentary. I did not want to write test code that would be removed by name/interface refactoring. Finite hacking time and all that :-)\n. In corp land copying the yaml from tree to tree is easy and common place. An internal wiki or VCS makes this easier. Not every biz is GitHub savvy.\nI see comments on the pre-commit site and elsewhere concerning getting linter and other tools to come on board. Requiring a file called 'hooks.yaml' is a barrier to entry and acceptance. Someone has to plead the case with every tool that exists and will come out. Not to mention \"hooks.yaml\" is not a specific enough name. Sure the phantom Git repos makes that less of an issue but still, that is a massive undertaking and it makes a bunch of tiny, mostly write once repos.\nNow if there is a way to have pre-commit be told \"all hooks are defined at this URL unless defined in the tool repo\" that would be OK. That way if pre-commit.com goes away next week the tool can live on.\n. I guess part of it is I do not see what is hard for the user.\nin .pre-commit-hooks-config.yaml:\n-   id: github-openstack-bandit\n    name: Bandit security checks\n    description: \"Runs bandit over python source.\"\n    entry: bandit\n    language: python\n    files: \\.py$\nand in .pre-commit-config.yaml:\n- repo: https://github.com/openstack/bandit\n  sha: 0.17.0\n  hooks:\n   - id: github-openstack-bandit\nIf I was running those in any other test environment I would need most of that info. It would be nice to assume that language: python was implied by file .py. That would reduce a line. Or that language:python wants files that end in .py but that could hurt some scripts maybe.\nThat snippet is all a user needs to add to the new pre-commit-hooks-config.yaml I added support for. Then they use pre-commit just like the docs say. By using the github-openstack prefix we should be able to avoid conflicts. I can now copy .pre-commit*.yaml from one Python project to the next and it will still work. Nothing is specific to the originating repo. As I said in the last reply, that file could be made public to everyone over http kind of like pypi's list of packages.\n. ",
    "zoidbergwill": "Awesome, thanks.\nYeah, unfortunately I haven't convinced my team to use it yet, so I'm using a git ignored config for now. Though I'll remember git checkout --patch for next time it happens. Thanks. \n. ",
    "blarghmatey": "Yeah, that's reasonable. I'll update. I'm currently working on fixing broken tests and adding some to cover the new functionality.\n. I'm opening this pull request now while I add tests in order to get some feedback before going much further with it.\n. Any advice on where I should be looking at for adding tests to address the coverage issue on 2.6?\n. @asottile Can you duplicate the test failures on your machine? They run successfully on my laptop so I'm not exactly sure how to fix them.\n. @asottile Hope you had a good weekend! I added the addtional_dependencies attribute to the config schema. I didn't add it to the manifest schema because it didn't seem relevant in that context since the setup.py, package.json, etc. files should handle the dependencies in those repos. Happy to add it in if you think it should be there.\n. @asottile Awesome! I'll also add in the new attribute to the docs on the site.\n. My thinking is that it would allow for updating dependencies on subsequent runs, but I realized that without adding extra methods to verify the state of installed dependencies and run upgrades/additional installs then that wouldn't make sense anyway. In the current state, adding new dependencies requires pre-commit clean followed by a subsequent run to rebuild the environment.\n. ",
    "jdb8": "@asottile do you mean https://github.com/pre-commit/pre-commit/pull/305 isn't working properly?\n. Phew :)\n. I agree that just writing a line is nicer than formatting, but the double linebreak was actually deliberate to ensure that if we have additional output, we have the same spacing at the end of the hook's full output regardless of whether stdout or stderr exist:\n```\neslint......................................................................................Failed\nhookid: hook\nFiles were modified by this hook. Additional output:\nModified foo.py!\n```\nand for no stdout or stderr:\n```\neslint......................................................................................Failed\nhookid: hook\nFiles were modified by this hook.\n```\nThat's unfortunately why the code is a little weird, since without the newline stuff we'd have two linebreaks at the end of the second case (since the final write('\\n') is not surrounded by a check for stdout or stderr). Let me know if I'm missing a better way to avoid that.\n. ",
    "marick": "Thanks for your promptness. Very impressive.\n. I'm not familiar with the python ecosystem. Does this mean I can use pip to get the new version?\n. ",
    "laurentsigal": "Anthony, thanks a lot for the quick answer!\nI have looked into that migration mode, but the problem is that then the script is no longer centralized (which is the huge value of pre-commit in the first place).\nHere is my use case:\nI generate files on each commit (out of all the files in a specific folder in my repo). This build is global which means it only needs to run once. Running it several times is fine though, it's just extra work but not the real problem.\nThe real issue actually is that it needs to run on deletion of files as well, but they currently do not trigger the script, because of this line https://github.com/pre-commit/pre-commit/blob/master/pre_commit/git.py#L92\nFor my case, it would be super neat if either:\n- deletion of files would still trigger the script (which does not make sense in the normal use of pre-commit where you validate the integrity of a file)\n  OR\n- we could specify a config into yaml to run the script everytime there is a commit, no matter what files are changed\nBut again, I'd love to still run the script within the pre-commit framework, because it is awesome to centralize and maintain scripts out of one github repo!\nLet me know if you think there is a workaround for this.\n. Yes I have looked at the code and I think it is very doable - let me get started\n. How does the push process works? Github does not let me create a new branch onto your repo..\nERROR: Permission to pre-commit/pre-commit.git denied to laurentsigal\n. https://github.com/pre-commit/pre-commit/pull/324\n. That ends up being  a really tiny change :smile: \n. covered by #324 \n. That's certainly cleaner\n. Fixing the tests\n. @asottile dude you're super efficient!\n. @asottile Sorry I was on a Christmas break. Thanks a lot for the help on adding this to pre-commit! \nI just added myself to the list of contributors https://github.com/pre-commit/pre-commit.github.io/pull/71\n. yeah good point!\n. sounds good\n. ",
    "jakumeowski": "This will also fix handling of merge conflicts in submodules: https://github.com/pre-commit/pre-commit-hooks/blob/master/pre_commit_hooks/check_merge_conflict.py#L33\n```\n09:55 $ git commit\n[INFO] Checking merge-conflict files only.\nCheck for merge conflicts......................................................................................................................................................Failed\nhookid: check-merge-conflict\nTraceback (most recent call last):\n  File \"/Users/tristan/.pre-commit/repoPTewkG/py_env-python2.7/bin/check-merge-conflict\", line 9, in \n    load_entry_point('pre-commit-hooks==0.5.1', 'console_scripts', 'check-merge-conflict')()\n  File \"/Users/tristan/.pre-commit/repoPTewkG/py_env-python2.7/lib/python2.7/site-packages/pre_commit_hooks/check_merge_conflict.py\", line 33, in detect_merge_conflict\n    with open(filename) as inputfile:\nIOError: [Errno 21] Is a directory: 'localizations'\n```\n. ",
    "ustun": "It is probably autopep8 pulling pep8 1.6.2, I'm investigating further.\n. I will close and reopen in the correct repository: https://github.com/pre-commit/pre-commit-hooks\n. ## Thanks, seems to work, though it might be that I ran autoupdate and then deleted the tool, and then reinstalled it, not sure which fixed it, but it works now :)\nUstun Ozgur\nFounder, Ustun Ozgur Software\nhttp://ustunozgur.com\nhttps://twitter.com/UstunOzgur\nhttps://tr.linkedin.com/in/ustunozgur\nSkype: ustunozgur\n\nOn Jan 12, 2016, at 6:33 PM, Anthony Sottile notifications@github.com wrote:\n@ustun does the new example work correctly for you?\n\u2014\nReply to this email directly or view it on GitHub.\n. Upon further inspection, it is the deactivate nondestructive line under activate that activates a bogus fish specific path inside bash shell.\n\nif ! [ -z \"${_OLD_VIRTUAL_PATH+_}\" ] ; then\n        PATH=\"$_OLD_VIRTUAL_PATH\"\n        export PATH\n        unset _OLD_VIRTUAL_PATH\n    fi\nBefore this runs, $PATH is colon separated\nWhen deactivate runs, $OLD_VIRTUAL_PATH is space delimited here, so $PATH will now be space delimited within bash.\nRemoving the deactivate line fixes the problem.\n. Great, thank you very much!\n. ",
    "Sean-Brown": "Looks like I'm not the only one with this problem...\n. ",
    "sils": "You can ping me on https://gitter.im/coala-analyzer/coala about this also if you want :)\n. Oh yes, coala is python 3 only, in that case that won't work I guess. We use annotations to simplify writing custom analysis routines, you get parameters converted directly into your types.\n. > I think it'd actually benefit you guys to use the plumbing of pre-commit (which we unfortunately\n\nhaven't split out yet) which sets up environments for different programming languages so the end\nuser doesn't have to worry about installing X package and Y language\n\nA universal package manager working on all platforms? Want that.\n\nWe don't actually have any \"integration\" so to speak beyond \"you're an executable, I will run you with xargs\" so beyond that I don't know what an integration with coala would look like.\n\nAh ok. I'm very stressed right now but really wanted to file the bug, will look closer when a few things go by. (Sorry)\n. ",
    "hvdklauw": "Thanks, that's nice. Maybe the documentation should mention this :-(\nOn Mon, 8 Feb 2016, 21:35 Anthony Sottile notifications@github.com wrote:\n\nIn your case I believe the config you'd want is:\n-   repo: local\n  hooks:\n  -   id: isort\n    name: isort\n    entry: isort\n    language: system\n    files: '.py$'\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/344#issuecomment-181522541\n.\n. \n",
    "sverhagen": "\nThis error message looks familiar at least!\n\nThanks, that looks promising. We googled for it, but to no avail.\nHere's the additional info:\n```\n$ pre-commit --version\npre-commit 0.7.6\n$ cat ~/.pre-commit/pre-commit.log\nAn unexpected error has occurred: CalledProcessError: Command: ['git', 'reset', 'v0.4.2', '--hard']\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors:\n    fatal: Not a git repository (or any of the parent directories): .git\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/site-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/usr/lib/python2.7/site-packages/pre_commit/main.py\", line 147, in main\n    return run(runner, args)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 195, in run\n    repo_hooks = list(get_repo_hooks(runner))\n  File \"/usr/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 141, in get_repo_hooks\n    for repo in runner.repositories:\n  File \"/usr/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/runner.py\", line 47, in repositories\n    repository.require_installed()\n  File \"/usr/lib/python2.7/site-packages/pre_commit/repository.py\", line 115, in require_installed\n    self.install()\n  File \"/usr/lib/python2.7/site-packages/pre_commit/repository.py\", line 163, in install\n    for language_name, language_version in self.languages\n  File \"/usr/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/repository.py\", line 62, in languages\n    for _, hook in self.hooks\n  File \"/usr/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/repository.py\", line 77, in hooks\n    if hook['id'] not in self.manifest.hooks:\n  File \"/usr/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/manifest.py\", line 24, in hooks\n    return dict((hook['id'], hook) for hook in self.manifest_contents)\n  File \"/usr/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/manifest.py\", line 18, in manifest_contents\n    self.repo_path_getter.repo_path, C.MANIFEST_FILE,\n  File \"/usr/lib/python2.7/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/store.py\", line 47, in repo_path\n    return self._store.clone(self._repo, self._sha)\n  File \"/usr/lib/python2.7/site-packages/pre_commit/store.py\", line 122, in clone\n    cmd_output('git', 'reset', sha, '--hard', env=no_git_env())\n  File \"/usr/lib/python2.7/site-packages/pre_commit/util.py\", line 194, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\nCalledProcessError: Command: ['git', 'reset', 'v0.4.2', '--hard']\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors:\n    fatal: Not a git repository (or any of the parent directories): .git\n```\n. > I'll try and use 1.9.4 on windows next\nYou know, don't do that. I didn't realize that it is that outdated, and I'll upgrade. I'm installing 2.7.4 now. I'll update the thread with the results.\n. The results with Git 2.7.4 (git version 2.7.4.windows.1) are exactly the same. Did you notice this is all in Cygwin? I don't even have my Python setup to work anywhere else, so I can't (yet) test it from a normal Command Prompt.\n. I'm also wondering if there's an issue with paths, and I was wondering if it'd make sense to pass cwd to subprocess.Popen to make sure that it's in the right folder. Cygwin has these funny folders, like /cygdrive/e/my_repo instead of E:\\my_repo. We would expect me to execute pre-commit run, and for Popen to execute in the root of my local working copy, right?\n. Thanks for looking into this, I'm very fond of my Cygwin (most of the time).\n```\n$ which git\n/cygdrive/c/Program Files/Git/cmd/git\n$ /cygdrive/c/Program\\ Files/Git/cmd/git --version\ngit version 2.7.4.windows.1\n``\n. I can take another look at present day, but when I originally started using Git in Cygwin, I ran in so many problems, performance being one of them, that prompted me to use a proper standalone installation of Git. The Cygwin Git at that time was also considerably out of step with official releases. I would love for it to be supported, but I can see how it would lead to exceptional handling of Cygwin from withinpre-commit, like I have (unfortunately) seen in more pieces of code, in the past.\n. I installed that and will try using that for now, and cross other bridges if I were to run into further Git problems. It's a while ago I had these problems, they've had some time to improve :wink: Thanks for you quick support throughout this process. My company is starting to usepre-commitas the outcome of a hackathon, and we're excited about it, but it's good to know there's some \"community support\" when needed :smile:\n. It's after midnight on a Sunday night, for the second week in a row, from all possible times, _that_ is when I chose to work on this little side project. Just to say sorry for not being very responsive, and probably not at my very best game. I didn't expect a commit in the hooks repository to be necessary, so I started doing that now. Also, I am on a branch in my hooks repository, while I now understand that you're saying that I need to be onmaster, in order to useautoupdate.  Even without--bleeding-edge, anautoupdateis clearly looking atmaster`, which is not where my new stuff is. I'm now \"solving\" that by doing the following workflow:\n\nEdit hooks\nCommit hooks repository (on a story branch) (don't push)\nrm -rf /home/sverhagen/.pre-commit\nCommit test repository\nRepeat; go to 1.\nWhen all done, groom the subsequent commits in 2. into a single, decent commit, then commit hooks repository (on a story branch) (push my branch)\n\nThe .pre-commit-config.yaml in my test repository has sha: <name_of_the_branch>.\nEvidently, I'm making it work. But it's not all too pretty.\nPersonally I feel it'd be useful for development if any steps between 1. and 4. could be eliminated. Maybe we can come up with some value for sha that tells pre-commit to copy my given file path, rather then git clone/pull from it (say, \"dev mode\"). But I don't know pre-commit well enough yet to know if that would make sense in the bigger scheme of things.. Just wanted to quickly circle back to this. I've changed employers in the meantime, and with that the immediate need have gone away, along with my access to the code base where this applied to. I just want to express my appreciation for your quick and eager follow up on my issue, that's great! Thank you!. ",
    "gabriel": "For UI's to work you'll need to tell launchd the python path:\nFor example, this fixed my problem:\nlaunchctl setenv PYTHONPATH \"/usr/local/Cellar/pre-commit/0.7.6/libexec/lib/python2.7/site-packages:/usr/local/Cellar/pre-commit/0.7.6/libexec/vendor/lib/python2.7/site-packages\"\nThis applies globally though so maybe your use of virtualenv is a problem?\n. Also seems like the PATH set through launchctl setenv PATH isn't respected\n. ```\n\ncat .git/hooks/pre-commit | grep '^ENV_PYTHON='\nENV_PYTHON='/usr/bin/python'\n```\n\n```\n!/bin/bash\n``\n. To clarify more, this is using the Github Desktop app: https://desktop.github.com/\n. Installed through brew... I uninstalled from brew and usedcurl https://pre-commit.com/install-local.py | python` and it seems to be fixed\nI guess a problem with brew install?\n. ",
    "ThatGerber": "Yes it does! Thanks!\n. Thanks. Let me know if I can assist in any way.\n. https://gist.github.com/ThatGerber/18a0f90b5b709ea05e67edfdec9f4ba4\nHere you go.\n. ",
    "revolter": "Isn't there an uninstall all? Stumbled upon this too for the commit-msg hook.. Shouldn't this also save the .pre-commit-config.yaml file?\n. I think it would still be a big improvement to allow testing a hook without the need of a commit.\nAlso, try-repo completely ignores the CR's config file (e.g. the hook's files parameter).. If I'm not wrong, pre-commit already knows how to save and restore patches with the changes in the working tree. Could it use it also for this case?\n```bash\n\ncat .pre-commit-config.yaml\nrepos:\n-   repo: \n    sha: v0.0.1\n    hooks:\n    -   id: check-iap-test\n        files: >\n            (?x)(\n                FileA|\n                FileB\n            )\n    -   id: check-rubocop\npre-commit try-repo ../Utils/my-hooks --all-files --verbose\n[INFO] Initializing environment for ../Utils/my-hooks.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: ../Utils/my-hooks\n    sha: c08ea92571ba396265d031ca8c9ee83d7ca2c46e\n    hooks:\n    -   id: check-iap-test\n===============================================================================\n[INFO] Installing environment for ../Utils/my-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[check-iap-test] Check IAP test..........................................\n```\n\nAs you can see, the used config is missing the files parameter.. Well, I definitely expected it to use my project's config file. Without it, the test doesn't make any sense at all, as I want for them to run for specific files.. > Use --files perhaps?\nDoes it work with regex too?. Indeed is a workable solution, but, do you agree that a regular user would expect for the project's config file to be loaded? There are more cases in which you want to test a hook in the context of your project, instead of in an abstract way.. What about an option argument that allows this? \ud83d\ude03. Or a prompt when running pre-commit install along the lines of:\n\nWe noticed that you have set a different directory for the git hooks via the core.hooksPath config. Do you want us to remove it so pre-commit will work or install it in the specified directory?. Awesome \ud83d\udc4d. /usr/local/git doesn't exist :-?. I've sent them a support email, please leave this open and I'll update it with more info (hopefully a fixing pre-release build of their app).. For me, git --exec-path from SmartGit's folder prints /usr/local/Cellar/git/2.15.0/libexec/git-core. So should export GIT_EXEC_PATH=/Applications/SmartGit.app/Contents/Resources/git/bin in my .zshrc work?. Well, even if it breaks the default git, it doesn't work in SmartGit. Nor does it work if I set /usr/local/Cellar/git/2.15.0/libexec/git-core as the git executable inside SmartGit's preferences.. output:\n\n```\nCommit: commit failed (return code 1)\n    ~/Development/ProjectName> git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn/T/smartgit-6449423194060998851tmp/commit-7252607506634785770.tmp\n    [INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n    [INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n    [INFO] Once installed this environment will be reused.\n    [INFO] This may take a few minutes...\n    An unexpected error has occurred: CalledProcessError: Command: ('/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6', '-m', 'virtualenv', '/Users/revolt/.cache/pre-commit/repo1nqdu3cs/py_env-default', '-p', '/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6')\n    Return code: 1\n    Expected return code: 0\n    Output: \n        Already using interpreter /usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6\n        Using real prefix '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6'\nErrors: \n    Traceback (most recent call last):\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n        \"__main__\", mod_spec)\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n        exec(code, run_globals)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 2328, in <module>\n        main()\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n        symlink=options.symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n        site_packages=site_packages, clear=clear, symlink=symlink))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1132, in install_python\n        copy_required_modules(home_dir, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1063, in copy_required_modules\n        copyfile(filename, dst_filename, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 343, in copyfile\n        os.makedirs(os.path.dirname(dest))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/../lib/python3.6/os.py\", line 220, in makedirs\n        mkdir(name, mode)\n    FileExistsError: [Errno 17] File exists: '/Users/revolt/.cache/pre-commit/repo1nqdu3cs/py_env-default/lib/python3.6/lib-dynload'\n\n```\nlog:\n```\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6', '-m', 'virtualenv', '/Users/revolt/.cache/pre-commit/repo1nqdu3cs/py_env-default', '-p', '/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Already using interpreter /usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6\n    Using real prefix '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6'\nErrors: \n    Traceback (most recent call last):\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n        \"main\", mod_spec)\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n        exec(code, run_globals)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 2328, in \n        main()\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n        symlink=options.symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n        site_packages=site_packages, clear=clear, symlink=symlink))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1132, in install_python\n        copy_required_modules(home_dir, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1063, in copy_required_modules\n        copyfile(filename, dst_filename, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 343, in copyfile\n        os.makedirs(os.path.dirname(dest))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/../lib/python3.6/os.py\", line 220, in makedirs\n        mkdir(name, mode)\n    FileExistsError: [Errno 17] File exists: '/Users/revolt/.cache/pre-commit/repo1nqdu3cs/py_env-default/lib/python3.6/lib-dynload'\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/main.py\", line 259, in main\n    return run(runner, args)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/commands/run.py\", line 256, in run\n    repo.require_installed()\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/repository.py\", line 202, in require_installed\n    _install_all(self._venvs, self.repo_config['repo'], self.store)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/repository.py\", line 102, in _install_all\n    language.install_environment(cmd_runner, version, deps)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/languages/python.py\", line 126, in install_environment\n    repo_cmd_runner.run(venv_cmd, cwd='/', env=venv_env)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/prefixed_command_runner.py\", line 38, in run\n    return cmd_output(replaced_cmd, __popen=self.__popen, *kwargs)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/util.py\", line 187, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\npre_commit.util.CalledProcessError: Command: ('/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6', '-m', 'virtualenv', '/Users/revolt/.cache/pre-commit/repo1nqdu3cs/py_env-default', '-p', '/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Already using interpreter /usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6\n    Using real prefix '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6'\nErrors: \n    Traceback (most recent call last):\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n        \"main\", mod_spec)\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n        exec(code, run_globals)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 2328, in \n        main()\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n        symlink=options.symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n        site_packages=site_packages, clear=clear, symlink=symlink))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1132, in install_python\n        copy_required_modules(home_dir, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1063, in copy_required_modules\n        copyfile(filename, dst_filename, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 343, in copyfile\n        os.makedirs(os.path.dirname(dest))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/../lib/python3.6/os.py\", line 220, in makedirs\n        mkdir(name, mode)\n    FileExistsError: [Errno 17] File exists: '/Users/revolt/.cache/pre-commit/repo1nqdu3cs/py_env-default/lib/python3.6/lib-dynload'\n``.brew list`:\nack\napngasm\narchey\nasciinema\natari800\nautoconf\nautomake\naws-elasticbeanstalk\nbase64\nbash-completion\nbdw-gc\nboost\ncairo\ncarthage\ncask\nchisel\ncmake\ncolordiff\ncoreutils\ncsvtomd\nctls\ncurl\ndoxygen\nemacs\nexif\nfdupes\nffmpeg\nflake8\nfontconfig\nfpc\nfreetype\ngd\ngdbm\ngdk-pixbuf\ngettext\ngit\nglew\nglib\ngmp\ngobject-introspection\ngoogler\ngraphite2\ngraphviz\ngrc\ngrep\nharfbuzz\nhighlight\nicu4c\nimagemagick\nintltool\nircii\njasper\njemalloc\njpeg\nlame\nlibcroco\nlibexif\nlibffi\nlibmodplug\nlibogg\nlibpng\nlibrsvg\nlibssh2\nlibtasn1\nlibtermkey\nlibtiff\nlibtool\nlibusb\nlibusb-compat\nlibuv\nlibvorbis\nlibvpx\nlibvterm\nlibxdg-basedir\nlibxml2\nlinks\nllvm\nlua\nlua51\nlua@5.1\nluajit\nlynx\nlzlib\nm-cli\nmackup\nmakedepend\nmercurial\nminizip\nmsgpack\nnasm\nncdu\nneovim\nnettle\nnode\node\nopenssl\nopenssl@1.1\np7zip\npango\npcre\npixman\npkg-config\npopt\npre-commit\npstree\npv\npython\npython3\nqt\nqt5\nreadline\nrecode\nredis\nrename\nsdl\nsdl2\nsdl2_image\nsdl2_mixer\nsdl2_net\nsdl2_ttf\nsdl_gfx\nsdl_image\nsdl_mixer\nsdl_net\nsdl_ttf\nsha2\nshared-mime-info\nsqlcipher\nsqlite\ntexi2html\ntig\ntree\nunar\nuncrustify\nunibilium\nunrar\nvapor\nw3m\nwebp\nwget\nwidelands\nx264\nxctool\nxvid\nxz\nyarn\nyasm\nyoutube-dl\nI already manually deleted the ~/.cache/pre-commit folder.. @mstrap, Is this something you could fix? It would help me immensely \ud83d\ude04 . Having /usr/local/bin/git set as the git executable, this is the log.txt:\n42735792 (2017-11-30 13:05:18,503) [main] INFO  q.swt.shellActivation  - Activation change from null to Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A\n42735792 (2017-11-30 13:05:18,503) [main] INFO  smartgit.repository.backgroundScan  - Starting background refreshing.\n42735895 (2017-11-30 13:05:18,606) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=412)\n42736095 (2017-11-30 13:05:18,806) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=414)\n42736199 (2017-11-30 13:05:18,910) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=414)\n42736396 (2017-11-30 13:05:19,107) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=416)\n42736500 (2017-11-30 13:05:19,211) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=416)\n42736645 (2017-11-30 13:05:19,356) [main] INFO              q.action  - Performing 'commit, Commit\u2026, Commit local changes.' menu item in Local from menu in window org.eclipse.swt.widgets.Shell@5F71C76A:Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}\n42736696 (2017-11-30 13:05:19,407) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=418)\n42736796 (2017-11-30 13:05:19,507) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=418)\n42736996 (2017-11-30 13:05:19,707) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=420)\n42737074 (2017-11-30 13:05:19,785) [main] INFO       smartgit.commit  - Commit message from pending commit\n42737078 (2017-11-30 13:05:19,789) [main] INFO              q.dialog  - Showing dialog 6 (@D79FD49) '@730E92FF - Commit' (owner: @5F71C76A)\n42737096 (2017-11-30 13:05:19,807) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=420)\n42737118 (2017-11-30 13:05:19,829) [main] INFO  q.swt.shellActivation  - Activation change from Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A to Shell {}@D79FD49\n42737118 (2017-11-30 13:05:19,829) [main] INFO  smartgit.repository.backgroundScan  - Stopping background refreshing.\n42737297 (2017-11-30 13:05:20,008) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=422)\n42737325 (2017-11-30 13:05:20,036) [main] INFO  q.swt.shellActivation  - Activation remains at Shell {}@D79FD49\n42737401 (2017-11-30 13:05:20,112) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=422)\n42737598 (2017-11-30 13:05:20,309) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=424)\n42737694 (2017-11-30 13:05:20,405) [main] INFO              q.action  - Performing 'Commit' button in window @D79FD49 owner @5F71C76A\n42737694 (2017-11-30 13:05:20,405) [main] INFO              q.dialog  - Closing dialog with option OK - 2 - 6 (@D79FD49) '@730E92FF - Commit' (owner: @5F71C76A)\n42737694 (2017-11-30 13:05:20,405) [main] INFO              q.dialog  - Disposing dialog 6 (@D79FD49) '@730E92FF - Commit' (owner: @5F71C76A)\n42737700 (2017-11-30 13:05:20,411) [main] INFO  q.swt.shellActivation  - Activation change from Shell {*Disposed*}@D79FD49 to Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A\n42737700 (2017-11-30 13:05:20,411) [main] INFO  smartgit.repository.backgroundScan  - Starting background refreshing.\n42737786 (2017-11-30 13:05:20,497) [main] INFO              q.dialog  - Showed dialog 6 (@D79FD49) '@730E92FF - Commit' (owner: @5F71C76A) (OK - 2)\n42737867 (2017-11-30 13:05:20,578) [WorkerThread-1] INFO      smartgit.command  - Commit [/Users/revolt/Development/ProjectName] / (amend=false;sign-off=false;no-verify=false;pathsToInclude=[])\n42737882 (2017-11-30 13:05:20,593) [WorkerThread-1] INFO                q.exec  - Executing #168 [/Users/revolt/Development/ProjectName] /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn/T/smartgit-5895723688202603195tmp/commit-7319034439059866461.tmp\n42738477 (2017-11-30 13:05:21,188) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: [INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n42741589 (2017-11-30 13:05:24,300) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: [INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n42741589 (2017-11-30 13:05:24,300) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: [INFO] Once installed this environment will be reused.\n42741589 (2017-11-30 13:05:24,300) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: [INFO] This may take a few minutes...\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: An unexpected error has occurred: CalledProcessError: Command: ('/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6', '-m', 'virtualenv', '/Users/revolt/.cache/pre-commit/repoxr32u7ic/py_env-default', '-p', '/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6')\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: Return code: 1\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: Expected return code: 0\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: Output: \n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:     Already using interpreter /usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:     Using real prefix '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6'\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:     \n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: Errors: \n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:     Traceback (most recent call last):\n42741705 (2017-11-30 13:05:24,416) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         \"__main__\", mod_spec)\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         exec(code, run_globals)\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 2328, in <module>\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         main()\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         symlink=options.symlink)\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         site_packages=site_packages, clear=clear, symlink=symlink))\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1132, in install_python\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         copy_required_modules(home_dir, symlink)\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1063, in copy_required_modules\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         copyfile(filename, dst_filename, symlink)\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 343, in copyfile\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         os.makedirs(os.path.dirname(dest))\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:       File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/../lib/python3.6/os.py\", line 220, in makedirs\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:         mkdir(name, mode)\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:     FileExistsError: [Errno 17] File exists: '/Users/revolt/.cache/pre-commit/repoxr32u7ic/py_env-default/lib/python3.6/lib-dynload'\n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr:     \n42741706 (2017-11-30 13:05:24,417) [QThreadPoolThread-0 (stderr-#168 /usr/local/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn)] INFO  smartgit.command.logging  - stderr: Check the log at /Users/revolt/.cache/pre-commit/pre-commit.log\n42741727 (2017-11-30 13:05:24,438) [WorkerThread-1] ERROR     smartgit.command  - commit failed (return code 1)\nsmartgit.kb: commit failed (return code 1)\n    at smartgit.kg.a(SourceFile:62)\n    at smartgit.tB.a(SourceFile:84)\n    at smartgit.tB.a(SourceFile:74)\n    at smartgit.tB.a(SourceFile:70)\n    at smartgit.tB.a(SourceFile:66)\n    at smartgit.tB.a(SourceFile:61)\n    at smartgit.tB.a(SourceFile:53)\n    at smartgit.tG.a(SourceFile:180)\n    at smartgit.aJq.a(SourceFile:85)\n    at smartgit.aGg.a(SourceFile:60)\n    at smartgit.aGg.a(SourceFile:22)\n    at smartgit.oZ.a(SourceFile:90)\n    at smartgit.hi.run(SourceFile:37)\n    at smartgit.qj.run(SourceFile:96)\n    at smartgit.ade.run(SourceFile:53)\n42741727 (2017-11-30 13:05:24,438) [WorkerThread-1] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=428)\n42742024 (2017-11-30 13:05:24,735) [WorkerThread-1] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=430)\n42742024 (2017-11-30 13:05:24,735) [WorkerThread-1] INFO  smartgit.command.refresh  - Post-command refresh for [/<empty>, /<infinity>, /.git<immediates>] for /Users/revolt/Development/ProjectName\n42742025 (2017-11-30 13:05:24,736) [WorkerThread-1] INFO        smartgit.model  - Local refresh started for /Users/revolt/Development/ProjectName [/<infinity>]\n42742102 (2017-11-30 13:05:24,813) [main] INFO  smartgit.model.tree-table-synchronizer  - Model '/Users/revolt/Development/ProjectName' synchronized with UI (1469 directories processed, timestamp=25)\n42742104 (2017-11-30 13:05:24,815) [main] INFO          commit.notes  - root changed /Users/revolt/Development/ProjectName -> /Users/revolt/Development/ProjectName\n42742377 (2017-11-30 13:05:25,088) [main] INFO  smartgit.model.tree-table-synchronizer  - Model '/Users/revolt/Development/ProjectName' synchronized with UI (1469 directories processed, timestamp=26)\n42742449 (2017-11-30 13:05:25,160) [WorkerThread-1] INFO  smartgit.model.statistics  - Refresh finished for /Users/revolt/Development/ProjectName (13490 entries) in 342ms, additional 82ms post-processing\n42742713 (2017-11-30 13:05:25,424) [QThreadPoolThread-4 (smartgit.bqX)] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=430)\n42742725 (2017-11-30 13:05:25,436) [QThreadPoolThread-4 (smartgit.bqX)] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=432)\n42742725 (2017-11-30 13:05:25,436) [QThreadPoolThread-4 (smartgit.bqX)] INFO  smartgit.repository.backgroundScan  - Running background refresh: []\n42744087 (2017-11-30 13:05:26,798) [main] INFO  q.swt.shellActivation  - Activation change from Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A to null. Having /Applications/SmartGit.app/Contents/Resources/git/bin/git set as the git executable, this is the log.txt:\n45652217 (2017-11-30 13:53:54,928) [main] INFO  q.swt.shellActivation  - Activation change from null to Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A\n45652217 (2017-11-30 13:53:54,928) [main] INFO  smartgit.repository.backgroundScan  - Starting background refreshing.\n45652319 (2017-11-30 13:53:55,030) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=526)\n45652520 (2017-11-30 13:53:55,231) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=528)\n45652522 (2017-11-30 13:53:55,233) [QThreadPoolThread-4 (Refresh-0)] INFO        smartgit.model  - Local refresh started for /Users/revolt/Development/ProjectName [/<empty>]\n45652590 (2017-11-30 13:53:55,301) [main] INFO  smartgit.model.tree-table-synchronizer  - Model '/Users/revolt/Development/ProjectName' synchronized with UI (1469 directories processed, timestamp=30)\n45652592 (2017-11-30 13:53:55,303) [main] INFO          commit.notes  - root changed /Users/revolt/Development/ProjectName -> /Users/revolt/Development/ProjectName\n45652622 (2017-11-30 13:53:55,333) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=528)\n45652642 (2017-11-30 13:53:55,353) [QThreadPoolThread-4 (Refresh-0)] INFO  smartgit.model.statistics  - Refresh finished for /Users/revolt/Development/ProjectName (13490 entries) in 56ms, additional 64ms post-processing\n45652747 (2017-11-30 13:53:55,458) [main] INFO              q.action  - Performing 'commit, Commit\u2026, Commit local changes.' menu item in Local from menu in window org.eclipse.swt.widgets.Shell@5F71C76A:Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}\n45652819 (2017-11-30 13:53:55,530) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=530)\n45652922 (2017-11-30 13:53:55,633) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=530)\n45653119 (2017-11-30 13:53:55,830) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=532)\n45653154 (2017-11-30 13:53:55,865) [main] INFO       smartgit.commit  - Commit message from pending commit\n45653164 (2017-11-30 13:53:55,875) [main] INFO              q.dialog  - Showing dialog 11 (@62962670) '@120AA894 - Commit' (owner: @5F71C76A)\n45653180 (2017-11-30 13:53:55,891) [QThreadPoolThread-6 (smartgit.add)] INFO  smartgit.branch.manager  - Pausing and resuming tracking state evaluation for refs/heads/master\n45653196 (2017-11-30 13:53:55,907) [main] INFO  q.swt.shellActivation  - Activation change from Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A to Shell {}@62962670\n45653196 (2017-11-30 13:53:55,907) [main] INFO  smartgit.repository.backgroundScan  - Stopping background refreshing.\n45653222 (2017-11-30 13:53:55,933) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=532)\n45653407 (2017-11-30 13:53:56,118) [main] INFO  q.swt.shellActivation  - Activation remains at Shell {}@62962670\n45653420 (2017-11-30 13:53:56,131) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=534)\n45653524 (2017-11-30 13:53:56,235) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=534)\n45653721 (2017-11-30 13:53:56,432) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=536)\n45653823 (2017-11-30 13:53:56,534) [Timer-0] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=536)\n45654022 (2017-11-30 13:53:56,733) [Timer-0] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=538)\n45654532 (2017-11-30 13:53:57,243) [main] INFO              q.action  - Performing 'Commit' button in window @62962670 owner @5F71C76A\n45654532 (2017-11-30 13:53:57,243) [main] INFO              q.dialog  - Closing dialog with option OK - 2 - 11 (@62962670) '@120AA894 - Commit' (owner: @5F71C76A)\n45654532 (2017-11-30 13:53:57,243) [main] INFO              q.dialog  - Disposing dialog 11 (@62962670) '@120AA894 - Commit' (owner: @5F71C76A)\n45654540 (2017-11-30 13:53:57,251) [main] INFO  q.swt.shellActivation  - Activation change from Shell {*Disposed*}@62962670 to Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A\n45654540 (2017-11-30 13:53:57,251) [main] INFO  smartgit.repository.backgroundScan  - Starting background refreshing.\n45654627 (2017-11-30 13:53:57,338) [main] INFO              q.dialog  - Showed dialog 11 (@62962670) '@120AA894 - Commit' (owner: @5F71C76A) (OK - 2)\n45654703 (2017-11-30 13:53:57,414) [WorkerThread-1] INFO      smartgit.command  - Commit [/Users/revolt/Development/ProjectName] / (amend=false;sign-off=false;no-verify=false;pathsToInclude=[])\n45654705 (2017-11-30 13:53:57,416) [WorkerThread-1] INFO                q.exec  - Executing #182 [/Users/revolt/Development/ProjectName] /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/folders/yj/l8y5kytd4tggcv7grrnpznh80000gn/T/smartgit-5895723688202603195tmp/commit-8034070819797025749.tmp\n45655276 (2017-11-30 13:53:57,987) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: [INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n45657067 (2017-11-30 13:53:59,778) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: An unexpected error has occurred: CalledProcessError: Command: ('/Applications/SmartGit.app/Contents/Resources/git/libexec/git-core/git', 'submodule', 'update', '--init', '--recursive')\n45657067 (2017-11-30 13:53:59,778) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: Return code: 1\n45657067 (2017-11-30 13:53:59,778) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: Expected return code: 0\n45657067 (2017-11-30 13:53:59,778) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: Output: (none)\n45657067 (2017-11-30 13:53:59,778) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: Errors: \n45657068 (2017-11-30 13:53:59,779) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr:     /Applications/SmartGit.app/Contents/Resources/git/libexec/git-core/git-sh-setup: line 46: /usr/local/git/libexec/git-core/git-sh-i18n: No such file or directory\n45657068 (2017-11-30 13:53:59,779) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr:     \n45657068 (2017-11-30 13:53:59,779) [QThreadPoolThread-0 (stderr-#182 /Applications/SmartGit.app/Contents/Resources/git/bin/git commit --cleanup=whitespace --file=/var/fo)] INFO  smartgit.command.logging  - stderr: Check the log at /Users/revolt/.cache/pre-commit/pre-commit.log\n45657092 (2017-11-30 13:53:59,803) [WorkerThread-1] ERROR     smartgit.command  - commit failed (return code 1)\nsmartgit.kb: commit failed (return code 1)\n    at smartgit.kg.a(SourceFile:62)\n    at smartgit.tB.a(SourceFile:84)\n    at smartgit.tB.a(SourceFile:74)\n    at smartgit.tB.a(SourceFile:70)\n    at smartgit.tB.a(SourceFile:66)\n    at smartgit.tB.a(SourceFile:61)\n    at smartgit.tB.a(SourceFile:53)\n    at smartgit.tG.a(SourceFile:180)\n    at smartgit.aJq.a(SourceFile:85)\n    at smartgit.aGg.a(SourceFile:60)\n    at smartgit.aGg.a(SourceFile:22)\n    at smartgit.oZ.a(SourceFile:90)\n    at smartgit.hi.run(SourceFile:37)\n    at smartgit.qj.run(SourceFile:96)\n    at smartgit.ade.run(SourceFile:53)\n45657093 (2017-11-30 13:53:59,804) [WorkerThread-1] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=542)\n45657176 (2017-11-30 13:53:59,887) [WorkerThread-1] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=544)\n45657176 (2017-11-30 13:53:59,887) [WorkerThread-1] INFO  smartgit.command.refresh  - Post-command refresh for [/<empty>, /<infinity>, /.git<immediates>] for /Users/revolt/Development/ProjectName\n45657178 (2017-11-30 13:53:59,889) [WorkerThread-1] INFO        smartgit.model  - Local refresh started for /Users/revolt/Development/ProjectName [/<infinity>]\n45657277 (2017-11-30 13:53:59,988) [main] INFO  smartgit.model.tree-table-synchronizer  - Model '/Users/revolt/Development/ProjectName' synchronized with UI (1469 directories processed, timestamp=31)\n45657279 (2017-11-30 13:53:59,990) [main] INFO          commit.notes  - root changed /Users/revolt/Development/ProjectName -> /Users/revolt/Development/ProjectName\n45657542 (2017-11-30 13:54:00,253) [main] INFO  smartgit.model.tree-table-synchronizer  - Model '/Users/revolt/Development/ProjectName' synchronized with UI (1469 directories processed, timestamp=32)\n45657603 (2017-11-30 13:54:00,314) [WorkerThread-1] INFO  smartgit.model.statistics  - Refresh finished for /Users/revolt/Development/ProjectName (13490 entries) in 348ms, additional 76ms post-processing\n45658545 (2017-11-30 13:54:01,256) [QThreadPoolThread-4 (smartgit.bqX)] INFO       sc.file.monitor  - Collecting changes, pending trigger file count is 0 (latestSeq=544)\n45658567 (2017-11-30 13:54:01,278) [QThreadPoolThread-4 (smartgit.bqX)] INFO       sc.file.monitor  - Collecting changes finished (latestSeq=546)\n45658567 (2017-11-30 13:54:01,278) [QThreadPoolThread-4 (smartgit.bqX)] INFO  smartgit.repository.backgroundScan  - Running background refresh: []\n45659460 (2017-11-30 13:54:02,171) [main] INFO  q.swt.shellActivation  - Activation change from Shell {ProjectName - [~/Development/ProjectName] - SmartGit 17.1.2}@5F71C76A to null. Shouldn't this work without launchctl configurations?\n@mstrap, Do the log files help you? Would you want me to try other configurations and post the log files?. SourceTree doesn't work either though:\n```\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6', '-m', 'virtualenv', '/Users/revolt/.cache/pre-commit/repodb6kxcqp/py_env-default', '-p', '/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Already using interpreter /usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6\n    Using real prefix '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6'\nErrors: \n    Traceback (most recent call last):\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n        \"main\", mod_spec)\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n        exec(code, run_globals)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 2328, in \n        main()\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n        symlink=options.symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n        site_packages=site_packages, clear=clear, symlink=symlink))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1132, in install_python\n        copy_required_modules(home_dir, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1063, in copy_required_modules\n        copyfile(filename, dst_filename, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 343, in copyfile\n        os.makedirs(os.path.dirname(dest))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/../lib/python3.6/os.py\", line 220, in makedirs\n        mkdir(name, mode)\n    FileExistsError: [Errno 17] File exists: '/Users/revolt/.cache/pre-commit/repodb6kxcqp/py_env-default/lib/python3.6/lib-dynload'\nTraceback (most recent call last):\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/error_handler.py\", line 47, in error_handler\n    yield\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/main.py\", line 259, in main\n    return run(runner, args)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/commands/run.py\", line 256, in run\n    repo.require_installed()\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/repository.py\", line 202, in require_installed\n    _install_all(self._venvs, self.repo_config['repo'], self.store)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/repository.py\", line 102, in _install_all\n    language.install_environment(cmd_runner, version, deps)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/languages/python.py\", line 126, in install_environment\n    repo_cmd_runner.run(venv_cmd, cwd='/', env=venv_env)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/prefixed_command_runner.py\", line 38, in run\n    return cmd_output(replaced_cmd, __popen=self.__popen, *kwargs)\n  File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/pre_commit/util.py\", line 187, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\npre_commit.util.CalledProcessError: Command: ('/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6', '-m', 'virtualenv', '/Users/revolt/.cache/pre-commit/repodb6kxcqp/py_env-default', '-p', '/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Already using interpreter /usr/local/Cellar/pre-commit/1.4.1/libexec/bin/python3.6\n    Using real prefix '/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6'\nErrors: \n    Traceback (most recent call last):\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n        \"main\", mod_spec)\n      File \"/usr/local/opt/python3/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 85, in _run_code\n        exec(code, run_globals)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 2328, in \n        main()\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 713, in main\n        symlink=options.symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 925, in create_environment\n        site_packages=site_packages, clear=clear, symlink=symlink))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1132, in install_python\n        copy_required_modules(home_dir, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 1063, in copy_required_modules\n        copyfile(filename, dst_filename, symlink)\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/lib/python3.6/site-packages/virtualenv.py\", line 343, in copyfile\n        os.makedirs(os.path.dirname(dest))\n      File \"/usr/local/Cellar/pre-commit/1.4.1/libexec/bin/../lib/python3.6/os.py\", line 220, in makedirs\n        mkdir(name, mode)\n    FileExistsError: [Errno 17] File exists: '/Users/revolt/.cache/pre-commit/repodb6kxcqp/py_env-default/lib/python3.6/lib-dynload'\n```. Yep, GitHub Desktop works well:\n```\nCommit failed - exit code 1 received, with output: '[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nTrim Trailing Whitespace.................................................Failed\nhookid: trailing-whitespace\nFiles were modified by this hook. Additional output:\nFixing Libraries/IOUtilities/NSString+IOUtilities.m'\n``. @mstrap, Sadly, no, if you have any ideas for me to try, that doesn't require complex system configuration changes (as not a lot of users would be able/willing to do), I'll gladly do it. For example, is my.zshrctook into consideration by SmartGit when opened normally (e.g. Launchpad)? I could try to temporarily remove it in case it causes problems.. Having/Applications/SmartGit.app/Contents/Resources/git/bin/gitas theGit Executableand runningopen /Applications/SmartGit.app, works! Most probably because/usr/local/binis already in thePATH`.. How does this influence my issue? As I don't have that much knowledge to understand all of this.. Thank you for the help!. I see this as a mere enhancement, instead of a new responsibility.\nEven if try-repo exists, you can still set repo to /Users/revolt/Development/MyHooks, so setting it to ~/Development/MyHooks instead doesn't have any reason not to work.\nI would want to create a development config that specifies a local path and the default config that specifies a GitLab URL.. Expanding the path myself isn't possible as the user on the home computer is different than the user at the work computer.. Makes sense, thank you! At least I got to understand the codebase a little \ud83d\ude04 . My pleasure, thanks for an awesome tool!. And thank you for the edits on this!. Sorry for the delay! Seems like a pretty descriptive answer, but I didn't have time to test it. I'll close this for now and reopen after I manage to try it and something doesn't work.. R is for renames for the git diff filter.. The comma was there previously too. I found it odd too but didn't know the reason.. Interesting view, thanks.. ",
    "ulope": "I just ran into this as well but in my case with Python 3.5 and 3.6 and the new f\"\" syntax. \nI'd happily trade the overhead of duplicated installs for every repo against such cases of cross-project \"contamination\". Could this behaviour perhaps be an option to the install command?. I would also very much like this option. My use-case is the readme-renderer package which checks if a setup.py's long_description is valid ReST and compliant with PyPI. It also takes no filename arguments but I'd still like it to only run when there was an actual change to the README.. ",
    "trbs": "oeps \ud83d\ude0a \n. ",
    "zaps": "Ok cool yeah I saw the pre-push option and figured there would be a similar way to \"hook\" into the other stages. \nIf I get some time in the next few days I'll do some spelunking :microscope: \n. Ok I started a fork for these changes making some initial progress getting commit-msg  in on the fun. (It's totally not optimal atm because TDD \ud83c\udf34 )\nOne question I had was, in terms of testing the additional hook stage (ie adding something like stages: [commit-msg,push] in .pre-commit-config.yaml), how is that done?\nI see a dictionary-type concoction in run_test.py but I'm not quite sure of what the format of it is. Can you give a quick rundown and maybe thrown in a sample line for my purposes?\nThanks! \n. Ok I think I'm with you now -- I'll start sticking tests for commit-msg in install_uninstall_test.py, do a full integration run each time and see what blows up. \nThanks again\n. ",
    "peay": "@zaps have you made more progress on this? I'd be interested in commit-msg hooks.. ",
    "seocam": "I'm also interested in commit-msg hooks!\n. ",
    "k1-hedayati": "Looking for this too, may be switch to overcommit or other tools that support this feature\npre-commit/pre-commit-hooks/issues/193. ",
    "justinmayer": "Thanks for the quick response, Anthony. I'm not sure I understand, however. I changed the entry point above to:\nentry: bash -c 'git diff HEAD^ | flake8 --diff'\n... and then ran pre-commit run --allow-unstaged-config --no-stash using version 0.8.2 with the following result:\n```\nFlake8 on commit diff............................................................................................Failed\nhookid: flake8\nExecutable bash -c 'git diff HEAD^ | flake8 --diff' not found\n```\nIf I revert via pip uninstall -y pre-commit; pip install pre-commit==0.7.6 and run the same command again, I get no errors:\nFlake8 on commit diff............................................................................................Passed\nWhat am I missing?\n. That did the trick. With that revised configuration, version 0.8.2 produces the same result as 0.7.6.\nOnce again, thank you for the very quick responses!\n. ",
    "gwincr11": "huh, when I run that same code the a file is always listed as untracked when I am creating my commit message.\n. ``` sh\ngit commit -a\nBuild the Thrift components...................................................................................................Passed\ntest..........................................................................................................................Passed\nAborting commit due to empty commit message.\nCorys-MBP-2% git status\nOn branch monkey\nChanges to be committed:\n  (use \"git reset HEAD ...\" to unstage)\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\nUntracked files:\n  (use \"git add ...\" to include in what will be committed)\na\n\n```\n. Oh wait this is weird, so the file is actually added if you write a message. But inside VIM it shows it as unstaged. Also if you about it is not staged.\n. thanks @chriskuehl \n. ",
    "magicmark": "There is yes, but it means having to wrap executables in a script to do so and be able to pass args\nI'm currently trying to pass in a config file for stylelint that is stored in the hook repo. stylelint is searching the consuming project dir but it doesn't exist there. I can't provide an absolute path because that will obviously change.\nwrapping stylelint in a script just to be able to pass args seems kinda hacky. would be cool to allow this functionality to reduce this boilerplate\n. I mean I guess you could say the same about any arbitrary args which could currently be set in hooks.yaml that could be accidentally overridden.\nIf you're not comfortable with this behavior, then shouldn't we remove the ability to set hooks in hooks.yaml altogether?\n. Well kinda; a consumer might want to override the config file with their own rules for whatever reason, making being able to set it in args very desirable.\n(This would probably be the biggest reason a consumer would want to overwrite args anyway)\nThat said, I certainly see your argument as to why we wouldn't want to do this, due to the possibility of accidentally losing the config loading. I don't know if the cons outweigh the pros here, so I'm happy to go with however you and others feel :)\n. To answer your first question:\nfor the simple case, a glob like foo/**/*.js imo is nicer than a regex like ^foo.+\\.js$ (herein lies the benefit.  globs are intended for specifying files. still, this is just a nice to have thing)\nif you wanted something more complicated, you could as you say do something like (foo|bar)/**/*.js, or go back to regex\nin answering your second point, maybe this works better as an additional glob param rather than files param and pre-commit only lets you specify one or something? idk, i'm easy as to how it's implemented, I just think it would be neat to be able to use globs :). Thanks for the feedback!\n\nit currently preferentially chooses which pre-commit over the pre-commit install'd executable\n\nhmm, so without adding the auto-created venv/bin or node_modules/.bin to $PATH, there's no good way of telling the .git/hooks/pre-commit script where the pre-commit executable lives :/ ...unless you'd be open to a PR that checks for a specified absolute path before querying which? otherwise this might be DOA...\n\nwhy is the wrapper package calling install or install-hooks?\n\nThis needs to be called for pre-commit to actually install the git hook right? Might as well call it automagically? Unless there's a better way, or I shouldn't be doing this?\n\nperhaps vendor a copy of https://asottile.github.io/get-virtualenv.py?\n\n\ud83d\udc4d\n\njust making sure you know about this script\n\nForgot about this! Very cool! Slightly harder to work across multiple repos though, since this installs outside of the project dir, and you might want to rely on different versions of pre-commit.. > I don't think it should call install or install hooks\nCould you elaborate on this? What are the downsides to this?. hmm ok, that's fair. maybe i'll try and use https://github.com/typicode/husky instead somehow. I see, thanks!\nAs suggested: https://github.com/prettier/prettier/pull/4021. ",
    "SBoudrias": "stylefmt signature is stylefmt input.css output.css, so it's not really an issue of them not taking multiple names, but that their function signature will format the first file and overwrite the second one passed in.\n. ",
    "samsaggace": "Hi @asottile,\nThanks for responding so quickly !\nI would love to create a regression test but I'm not good at python so I'm not sure how to write it and where...\n. Thanks!\n. You rock ! :+1: \n. ",
    "brendanw": "ah, yup, duh. chmod +x for the file did the trick. thanks!\n. ",
    "bpicolo": "Which part of requirements does https://github.com/toml-lang/toml fail on, out of curiosity? No version that doesnt strip comments? . Closing this in favor of docker. lg2m. Permission denied on writes =. @asottile  looks like it's a boot2docker issue. I guess we can document that boot2docker can't do writes unless you explicitly pass user arguments somewhere? It might be possible if you throw -u 1000:staff \nedit: err I guess you'd need docker args, not entry args though. Seems sane!. tbh this is probably not necessary. I mostly picked bits out of the virtphp bin/activate script.. rewriting the virtphp environments.json is sort of bizarre and potentially race-conditiony if someone is intentionally using virtphp elsewhere, but there is no option available with virtphp that magically fixes this problem that I could find. I haven't put version handling in other relevant parts of this file yet, in favor of figuring out something sane first. we'll probably want this as :rw but we'll need docker to not write things as root. Not sure what the right strategy for that is. :( oh. And just rebuild it if it doesn't?. It certainly seems useful to base multiple hook entrypoints off the same container.\nHappy to make entry optional, we'll need to document that people have to define container entrypoints though?. I can just remove that comment since there's no dockerpy in here anymore. Already have a diff that does just this hah. I think the docker container in question only implements -n, and what that does is not add a newline if present, which the test does test for. ",
    "bbaassssiiee": "https://github.com/willthames/ansible-lint/issues/204\n. cryptography could not be compiled due to a lacking openssl.h. this was solved by updating pip which now recognizes precompiled libraries (wheels), finally updating virtualenv made it work with pre-commit, which now can create an environment for ansible-lint. \n. ",
    "kbalk": "It's not running during the pre-commit stage, but it's not running py.test during the push stage either.  Previously it ran during the pre-commit stage, so I think the other entries to run py.test in the .yaml file are correct.\n. Excellent!  That did it.  Thank you for you quick responses.\n. ",
    "rayward": "$ env | grep -Ei '(ruby|rvm|rbenv|gem)'\nPATH=/Users/ray.ward/.pyenv/shims:/Users/ray.ward/google-cloud-sdk/bin:/Projects/go/bin:/usr/local/sbin:/Users/ray.ward/.rbenv/shims:/Users/ray.ward/.rbenv/bin:/usr/local/bin:/Users/ray.ward/.nvm/versions/node/v4.5.0/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/go/bin:/usr/local/share/npm/bin\nRBENV_SHELL=bash\n-   repo: https://github.com/chriskuehl/puppet-pre-commit-hooks.git\n    sha: 4e9937d4d0ccbea37ae2a9a414a2b0cee58657fa\n    hooks:\n    -   id: puppet-lint\n    -   id: puppet-validate\n    -   id: erb-validate\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: 09d1747840bfb1457e9b8876b4c1f577d00a2a37\n    hooks:\n    -   id: check-added-large-files\n    -   id: check-json\n    -   id: check-merge-conflict\n    -   id: check-yaml\n    -   id: trailing-whitespace\n. $ rbenv --version\nrbenv 1.0.0\ninstalled via brew\n. Cheers!\n. Yeh I'm happy to try out a dev branch.\nBtw see this if you have certificate issues with rubygems - http://guides.rubygems.org/ssl-certificate-update/\n. No luck unfortunately:\n[INFO] Installing environment for https://github.com/chriskuehl/puppet-pre-commit-hooks.git.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: (u'/bin/bash', u'/Users/ray.ward/.rbenv/shims/gem', 'install', '--no-ri', '--no-rdoc', '/Users/ray.ward/.pre-commit/repod4B22P/__fake_gem-0.gem')\nReturn code: 2\nExpected return code: 0\nOutput: (none)\nErrors:\n    ERROR:  Could not find a valid gem '/Users/ray.ward/.pre-commit/repod4B22P/__fake_gem-0.gem' (>= 0) in any repository\n. @asottile \n$ cat ~/.gemrc\ngem: --no-ri --no-rdoc --remote\n. I'm not sure why I have --remote in the gemrc...\nI removed it and everything is working perfectly now! Woo!\n. No worries, thanks for all your help!\n. ",
    "amcgregor": "Awesome, thanks!  Apologies for not noticing your initial reply (got lost in a bunch of Travis traffic after I pushed updates to way, way too many repos and branches at the same time\u2026)\nWith a virtualenv installed system-wide (/usr/local/bin/virtualenv, 15.0.3, running under macOS-provided Python 2.7) and virtualenv installed within my venv ($VIRTUAL_ENV/bin/virtualenv, 15.0.3, running under venv-provided 3.5.2 from official Python.org .pkg) running virtualenv foo does, in fact, explode gloriously.\nEdited to add: running virtualenv foo outside of my existing venv works fine.  (Defaulting to --python=python2.7.)  Explicitly running virtualenv --python=python3.5 foo also works fine when outside of an existing environment.\n. ^_^ Guilty as charged. There's something about having @include be serviceable by the Python side that was just too darned useful in conjunction with a Python CMS\u2026\nSo, as an experiment after pip install'ing pre-commit within the venv I then pip uninstall virtualenv to delete the nested install.  Now within my venv I can successfully execute virtualenv foo (giving me the same Python 2.7 default) and also execute it with the specific Python 3.5 version, however the mechanism pre-commit uses to try to utilize virtualenv (issuing a call to the interpreter + -m virtualenv) obviously fails.  If instead you made a shell invocation to virtualenv without a path to virtualenv, but with an explicit --python version (but not full path), it would.\n. Frickin' awesome sauce.  Now to pin develop_requires versions in over 100 projects\u2026 T_T\n. awk '/tests_require \\+ ['pre-commit']/ { print \"\\t\\t\\t'development': tests_require + ['pre-commit>=0.9.2'],  # Development requirements are the testing requirements.\"; next }1'\nThat should do the vast majority of my projects that avoid declaring additional (non-test) development requirements.  I use a similar awk approach in my venv construction shell function to patch the activate script.  ;)\n. I can confirm that this patch does fix my problem.\n. ",
    "brewneaux": "My bad yall, i meant to do this to our companies version, but I screwed it up.  Closing.\n. ",
    "psafont": "Nope, I was just being a bug dummy, thanks!\n. ",
    "lovemyliwu": "i get some issue when [INFO] Installing environment for git://github.com/pre-commit/mirrors-jshint, GFW blocked some resources.\n. sorry, i lost the output, retry then always hanging.\n. ",
    "rlinke": "I have the same or maybe a similar issue. \nIs there a way to tell pre-commit to use https:// prefix instead of git://? I think git protocol is blocked and I can only access through http or https connection.\nBelow some information, if you have any suggestions or need further info please let me know.\nexecute command:\n```\n() [...]>pre-commit run --all-files\n[INFO] Initializing environment for git://github.com/pre-commit/pre-commit-hooks.\nAn unexpected error has occurred: CalledProcessError: Command: ('C:\\Program Files\\Git\\cmd\\git.exe', 'clone', '--no-checkout', 'git://github.com/pre-commit/pre-commit-hooks', 'C:\\Users\\/.cache\\pre-commit\\repoacxr3zdu')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors:\n    Cloning into 'C:\\Users\\/.cache\\pre-commit\\repoacxr3zdu'...\n    fatal: Unable to look up github.com (port 9418) (No such host is known. )\nCheck the log at C:\\Users\\/.cache\\pre-commit\\pre-commit.log\n```\nlog content\n```\nAn unexpected error has occurred: CalledProcessError: Command: ('C:\\Program Files\\Git\\cmd\\git.exe', 'clone', '--no-checkout', 'git://github.com/pre-commit/pre-commit-hooks', 'C:\\Users\\/.cache\\pre-commit\\repoy3wik3mv')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    Cloning into 'C:\\Users\\/.cache\\pre-commit\\repoy3wik3mv'...\n    fatal: Unable to look up github.com (port 9418) (No such host is known. )\nTraceback (most recent call last):\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\error_handler.py\", line 47, in error_handler\n    yield\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\main.py\", line 261, in main\n    return run(runner, store, args)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\commands\\run.py\", line 256, in run\n    for _, hook in repo.hooks:\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\cached_property.py\", line 35, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\repository.py\", line 162, in hooks\n    if hook['id'] not in self.manifest_hooks:\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\cached_property.py\", line 35, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\repository.py\", line 155, in manifest_hooks\n    repo_path = self.store.clone(repo, rev)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\store.py\", line 150, in clone\n    return self._new_repo(repo, ref, deps, clone_strategy)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\store.py\", line 126, in _new_repo\n    make_strategy(directory)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\store.py\", line 142, in clone_strategy\n    cmd_output(*cmd, env=env)\n  File \"C:\\Users\\\\AppData\\Local\\conda\\conda\\envs\\\\lib\\site-packages\\pre_commit\\util.py\", line 177, in cmd_output\n    returncode, cmd, retcode, output=(stdout, stderr),\npre_commit.util.CalledProcessError: Command: ('C:\\Program Files\\Git\\cmd\\git.exe', 'clone', '--no-checkout', 'git://github.com/pre-commit/pre-commit-hooks', 'C:\\Users\\/.cache\\pre-commit\\repoy3wik3mv')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    Cloning into 'C:\\Users\\/.cache\\pre-commit\\repoy3wik3mv'...\n    fatal: Unable to look up github.com (port 9418) (No such host is known. )\n```\nnote\ngit clone xy does work in the console. I set the http.proxy variable in my global git config.\n. @asottile setting the correct protocol in the .yaml file works like a charm. Thank you for the quick help.. ",
    "snakescott": "Ah, I think that seems right, thanks!\nMaybe git diff-tree --no-commit-id --name-only -r $SHA is better?\nhttp://stackoverflow.com/questions/424071/how-to-list-all-the-files-in-a-commit\nWould it make sense to add this to the \"Usage in Continuous Integration\"  docs?\nIf so, should I submit a PR to https://github.com/pre-commit/pre-commit.github.io ?\n. Thanks for the speedy response, @asottile! pre-commit is amazing, I only wish I had found it earlier :). Makes sense!\nI think my underlying desire is to standardize my use of these kind of tools (autopep8, flake8, etc) on pre-commit. Adding the kind of flexibility I'm discussing also makes it easier to develop and deploy more complex workflows. For example I might want to experiment with using mypy through pre-commit (including on my build system, etc) without subjecting my team to a buggy hook-in-progress.\nHow do you feel about PRE_COMMIT_YAML_PATH? Would you accept a PR for that? Seems like it would involve the least change. You could still have the same semantics (no unstaged changes to config file, etc), it would just un-hardcode the path. Should be completely backwards compatible as well?\n. Okay, I will hopefully have time to work on this next week! Thanks.\nOn Thu, Nov 24, 2016 at 1:30 PM, Anthony Sottile notifications@github.com\nwrote:\n\nYeah I think adding that is pretty reasonable. We're looking to move away\nfrom yaml soon to fix some stuff, let's go with -c --config as a cli\nparameter. I think you'll want to augment each of these commands (run,\ninstall, autoupdate).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/432#issuecomment-262846806,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABtWK6gSRVFfAJH7FYTeEZ8ZVcmNaxywks5rBgIFgaJpZM4K760-\n.\n. Ah nuts forgot some stuff herp derp. I will update the PR with requested changes as well as tests.. Ah, sorry -- for install and uninstall, I'm not sure if it is safe to pass an alternate config file?\n\nSo I will do everything but that, and maybe we can discuss that a bit more? If you think it is safe, I'm happy to make the change! But, I'm not enthusiastic about supporting an install that does not have a .pre-commit-config.yaml file, because it I think it would require keeping additional state (the commit hook would need to know which non-default location to run against).\nJust supporting run and autoupdate should be stateless.. Are there any \"public API\" considerations for Runner? I initially had the arg as optional to maintain compatibility.. I find it cleaner to build appropriate args for Runner than to have --config available as an option for install when it is actually has no effect. That said, I'm happy to defer your preference, so I'll _add_config_option to all the commands in my next PR.. @asottile would new tests in runner_tests.py be sufficient or do you think I should add e2e tests in other places? . Great, I will add another commit with those tests later today!. passed unit tests without that line, so removed!. Sweet! I'll keep my eye out for a release incorporating these changes so I can switch from pointing to an internal prerelease to mainline.\nThanks for your help on this PR and for answering all of my other questions :). Does this assume/require that dependencies listed in install_requires are compatible with all (language, language_version) pairs in all hooks in the repository?. for example if I have a python2.7 hook (e.g., say it contains print x) and my install_requires for some reason includes mypy_lang in install_requires (pip install mypy_lang on a 2.7 virtualenv will fail), what happens?. extras_require seems like just the thing! Today I learned, thanks!\nGoogling based on that keyword turned up the following which might be good context for anyone else who has this question.\nhttps://hynek.me/articles/conditional-python-dependencies/. yeah, think so. I'm interested in streamlining exclude/include but I'll dig in on that separately (and don't think it is really a pre-commit issue).. will add. will do!. I think without this, help gets sad? I definitely added it in response to issues I hit.\nGenerally, if Runner is going to be created no matter what the command is, and we are going to pass config in, it feels right to set a global default?. I can try to reconstruct the errors I hit if that would be helpful.. ",
    "samskiter": "Thanks! I just got it working, I actually had another issue \ud83d\udc4d . We've just spent a day debugging to find exactly this issue. This equality check has been the wrong way round since it was committed. Can you please merge this?. I'll submit a new PR. probably faster.. Opened here: https://github.com/pre-commit/pre-commit/pull/692 I have no idea how to write a test for you, sorry.. If you want to write a test, you need \nEITHER\na new repo and a remote to push to (you could use a local-filesystem remote)\nOR\njust add a new remote to a repo (again, you can use a local-filesystem remote)\nTHEN\nattempt to push to the remote\nWhen you hit line 14 (source=$(git rev-parse \"$first_ancestor\"^)) the git rev-parse will fail as it tries to find the commit before the root commit. The error looks like:\n$ git rev-parse ROOT_SHA^\nROOT_SHA^\nfatal: ambiguous argument 'ROOT_SHA^': unknown revision or path not in the working tree.\nHere's a set of commands you can use to repro the issue:\ncd\nmkdir testing\ncd testing\nmkdir remote\ncd remote/\ngit init --bare\ncd ..\nmkdir local\ncd local\ngit init\ngit touch blah\ntouch blah\ngit add blah\ngit commit -m \"my root commit\"\ntouch blee\ngit add blee\ngit commit -m \"my second commit\"\ngit remote add origin ~/testing/remote\npre-commit install -t pre-push\ntouch .pre-commit-config.yaml\ngit push origin master. Related issue: https://github.com/pre-commit/pre-commit/issues/693. So we do have LFS configured through pre-commit with a sort of mangled version of the LFS script like so:\n```\n!/bin/sh\nCheck whether 'git-lfs' is installed\ncommand -v git-lfs >/dev/null 2>&1 || { echo >&2 \"\\nThis repository is configured for Git LFS but 'git-lfs' was not found on your path. If you no longer wish to use Git LFS, remove this hook by deleting .git/hooks/pre-push.\\n\"; exit 2; }\nprePushCommand is run through Git's pre-push hook. The pre-push hook passes\ntwo arguments on the command line:\n\n1. Name of the remote to which the push is being done\n2. URL to which the push is being done\n\nUnfortunately the tool 'pre-commit' does not forward those arguments,\nthus we need to set the arguments manually in this script.\ngit-lfs pre-push origin git@our.git.repo/repo.git\n```\nThis seems to completely hang when pre-commit falls back to --all-files\nIt would be great to be able to formally install a script to pre-commit as if it were legacy (i.e. not have to install in an ordered, without having to fiddle locally to set it up as legacy by installing in a specific order and, as you say, without it consuming all of STDIN.... Sorry, I wasn't clear. I mean it would be good to use the pre-commit config to run another script in the same way as it would be run if it were legacy, but without having to actually install that hook before installing pre-commit.\ni.e. a mode where pre-commit is dumb and just forwards git's args straight to the pre-push script.\nsomething like:\n-   id: run-git-lfs\n        name: hooks/run_git_lfs.sh..................Runs GIT LFS\n        entry: hooks/run_git_lfs.sh\n        language: script\n        files: .*\n        always_run: true\n        raw_mode: true\n        stages: [push]\nwhere raw_mode can just run my script as if git had run it. but explicitly without having to fiddle around copying in a pre-push.legacy file into .git (which wouldn't really work well for a shared git repo where we try to manage everything just using pre-commit). ",
    "alzeih": "Thanks for the patch, it guided me in the right direction.\nI discovered this extra output by git of the Author is because one (or both) GIT_*_EMAIL environment variables isn't set (which I had not due to a typo). Rebased with the correct names for the environment variables. \nAlso changed to using os.environ.get('') instead of os.environ[''] which matches the convention of the rest of the code.. Makes sense, os.environ.get() doesn't fail fast. Seems silly to redefine the values twice though. Would os.environ[''] be better as it will fail with a KeyError ?\nSince tox also sets VIRTUALENV_NO_DOWNLOAD, I think that pytest should be responsible for ensuring the environment is set if it's expected to be there when running tests without tox. Or the tests that modify env could be written to not throw away the entire environment and only throw out or set explicitly the environment that will cause problems?. Rebased with brackets. \nI haven't used pytest-env either. Suggest this be looked at in another PR as the issue already exists with VIRTUALENV_NO_DOWNLOAD.. Thanks, I didn't understand why that particular ruby version was used for the tests. \nI have rebased to only include the archive tarballs, and renamed the PR to reflect what it is now.. ",
    "cmer": "It seems like this fix no longer works on a brand new Sierra install. egrep should be used instead of ggrep and comes installed with the OS.. My bad. You\u2019re right. egrep is actually NOT the same as ggrep. Now that ggrep is no longer available in Homebrew, what should we use on macOS?\n\nOn Jan 23, 2017, at 6:27 PM, Anthony Sottile notifications@github.com wrote:\n@cmer https://github.com/cmer can you elaborate? egrep is usually an alias for grep -E (which is different from grep -P)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/pre-commit/pre-commit/issues/447#issuecomment-274651451, or mute the thread https://github.com/notifications/unsubscribe-auth/AAABnLVOEI7ghLYs6r2crTsxYr4C9lIKks5rVTdQgaJpZM4LDoHA.\n\n\n. And I'm wrong again. Installing ggrep now worked. Sorry about this. I need a nap.. ",
    "lavish205": "@ssbarnea I've the same use case, in our organization we have multiple python based projects and its very hard to maintain yaml file in each repo as each file is doing the same thing.\nAnd for a single change I have to update all the repos.. asked in wrong repo. closing this issue.\nhttps://github.com/pre-commit/pre-commit-hooks/issues/157. ",
    "varac": "Ftr, this is how I use a global pre-commit hook:\nI configured git to use a centralized git hooks dir:\ngit config --global core.hooksPath ~/.config/git/hooks/\n\nthere, I use the following file as pre-commit-hook (~/.config/git/hooks/pre-commit), which iterates through most of the hooks provided by /pre-commit:\n```\n!/bin/bash\nset -euo pipefail\nPLUGINS_BLACKLIST=(init.py autopep8_wrapper.py detect_aws_credentials.py forbid_new_submodules.py. no_commit_to_branch.py util.py)\nstdin=$(cat /dev/stdin)\necho \"${stdin}\"\nfunction call_hook () {\n  echo \"Executing $i\".\n  echo \"${stdin}\" | python3 \"$1\"\n}\ncd /home/varac/projects/git/pre-commit-hooks/pre_commit_hooks/\nfor i in ; do\n  if ! [[ \"${PLUGINS_BLACKLIST[]}\" =~ $i ]]; then\n    call_hook \"$i\"\n  fi\ndone\n```\nI know this is not how pre-commit is meant to get used, and it's kind of quick an dirty, but it works for me, and it might give an idea how to do this for @lavish205 and @ssbarnea.. ",
    "benasher44": "Maybe! I was hoping to just get it filed and labeled for now. I'm pretty swamped atm, so anyone else is welcome to pick it up.. @asottile I've started work on this. I have SwiftPM packages building locally, but there's more work to be done to fully test with SwiftLint before I get a PR up. I'll keep ya posted!. I still have to add a hooks.yaml to SwiftLint, as well as finish implementing realm/SwiftLint#810, but realm/SwiftLint#810 should be enough, since you could get away with specifying the hooks.yaml details locally in your .pre-commit-config.yaml.. \\o/. \ud83c\udf89\ud83c\udf89\ud83c\udf89 thank you!. Sure! I'll do it soon. I wanna wait for my swiftlint PRs to ship, so that I can have an example for the docs.. ",
    "istommao": "exclude: '^(path/1|other/path2)$' can't match my roules\nexclude: '[migrations/|fabfile.py]' i found this work for me. I see! i want exlucde all migrations folder and fabfile.py, how can i do it?. I see thanks a lot. ",
    "livc": "@asottile Sorry, I forgot to merge latest from source repo. So there is no .pre-commit-config.yaml.\nThanks for your help!. ",
    "daoiqi": "666.\nit prefect. ",
    "jpsikorra": "Yes, thank you!. ",
    "matkoniecz": "Thanks!. ",
    "philipgian": "I've updated the PR. I've quoted the bash variables in the shell executions.\nThx for the fast review!. It turns out it was a bug. Good thing the tests caught it.\nOn an empty push, all commits are present on the remote repo and thus the first_ancestor variable was empty. I've updated the PR.. Indeed. What you mentions is true, apart from the silently part. A warning gets printed.\nBut consider this. The equivalent to tox, make, pip, git is the pre-commit executable. If someone was to use for example pip with a script on a directory that may or may not contain the file (I think I've demonstrated a legitimate case for this with pre-commit), then I guess he/she would wrap the actual call and print a warning instead of failing.\nIf you manage to find the issue, please post it. I'd really like to read the arguments.\nBeing in the situation I describe, I too resulted in uninstalling the hooks. But I think it is rather cumbersome to do this every time. Plus it has the danger of forgetting to re-install them when working on an appropriate branch.. Both actually. I've a couple of branches that should be rebased on top of the branch that first includes the config file. So in this situation, the problem should be resolved eventually and relatively quickly. But the problem also exists when branching from a stable tag (e.g. for a hotfix), where chances are that is gonna take longer for the config file to reach the latest stable tags. The situation gets worse if you try to include pre-commit on several repositories where the problem is multiplied.. The above is true also in the case you uninstall and forget to re-install. It is also worse, as there is no warning message printed. As I said before, I think that the error message should be only in the pre-commit executable.\nAs far as I can tell, perhaps we could reach a middle ground by allowing the hooks template to be installed with an option. This could be a --disallow-missing-config option, which will set a variable on the template accordingly when installing. But this would also add some extra (minimal) logic to the bash script. What do you think ?. No personally I don't. Others might. But I think that the solution to the problem should not be tailored to one's specific need, if there is a better solution.\nWhat I was essentially proposing, was to let the option to statically set the variable you proposed to the chosen action. Perhaps we could also support overriding it from the environment.. I didn't find any relevant tests for unit-testing the bash scripts. Perhaps if you could provide one, I could write the use-cases I've hit. Doing an actual git push on the tests does not directly test the input files of the pre-commit executable.. OK!. You are right. Fixed!. ",
    "jzafran": "ahh, awesome! I don't know why I didn't think of trying that...  thanks!. ",
    "MikeVL": "```\n\npre-commit 0.13.5\nAn error has occurred: InvalidManifestError:\n==> File /Users/mike/.pre-commit/repo58KPGj/.pre-commit-hooks.yaml\n==> At Hook(id='no-commit-to-branch')\n=====> Expected files to be absent when always_run is not False, found files: '.*'\nCheck the log at ~/.pre-commit/pre-commit.log\n```. \n",
    "melezhik": "@asottile Thanks for fast response! Could you put here an example hooks.yaml here? The docs are quite terse. Say I what run system command foo with arguments  \"--param  a=1 --param b=2\" , also I want to pass somehow location to local git repository where my hook resides, as command line for system command parameter as well , is it possible?. Good! Thanks.\nUnfortunately passing directly as '.' won't work for me ( my plugins requiremt is passing file locations as absolute paths ) , can I pass git repository directory path as absolute one? Not sure if yaml supports something like $PWD ... ?. Ideally 'entry: foo --param a=1 --param b=2 --param path=$(PWD)' would work for me, but this is not yaml compatible ))). Probably need to dig into , googling on  yaml/env vars subject ... . Looks like yaml itself does not support such a feature out of the box, and one should extend it on applicatio, yaml  parser side ? Is it possible for pre-commit hooks.yaml ? . Sure,  let me try various methods and I will let you know later . Basicly you answered my question, I need to take few tweaks on my side though -). Ok, looks like my first plugin works, but I can't see the output as it hidden by pre-hook executor:\n```\n$ git commit -a -mok\nperl6-prove..............................................................Passed\n[master beb069e] ok\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ cat .pre-commit-config.yaml\n-   repo: local\n    hooks:\n    -   id: perl6-prove\n        name: perl6-prove\n        entry: sparrow plg run perl6-prove --param a=1 --param b=2 --param path=$PWD\n        language: system\n        always_run: true\n        files: ''\n```\n Compare with when run directly:\n```\n$ sparrow plg run perl6-prove  --param path=$PWD\n[p] perl6-prove at 2017-03-11 08:11:29\npath is: /home/vagrant/projects/perl6-prove\nOK\nok      scenario succeeded\nSTATUS  SUCCEED\n```\nHow can I make pre-commit shows the plugin output?\n. So I end up with this .pre-commit-config.yaml : \n-   repo: local\n    hooks:\n    -   id: perl6-prove\n        name: perl6-prove\n        entry: bash -c \"sparrow plg run perl6-prove --param a=1 --param b=2 --param path=$PWD\"\n        language: system\n        always_run: true\n        files: ''\nAnd it works for me. But the output issue is still here. Should I raise a new ticket on this, as my original question is satisfied? . BTW here is the plugin - https://sparrowhub.org/info/perl6-prove (:. Hi, @asottile , verbose option is fine, I looked something something similar, but could not find in documentation, should we add it ? . Hi, I have posted a message on Reddit/Devops concerning pre-commit - sparrow , maybe it might be interesting for you - https://www.reddit.com/r/devops/comments/5yydpz/writing_precommit_hooks_with_sparrow/. ",
    "chbndrhnns": "That's fine with me for now. \nMy understanding now is that a git lfs update --force would disable precommit.. ",
    "hackedd": "I'm not aware of any color escapes for the windows terminal. As far as I know, for earlier versions of Windows, text attributes can only be set by calling the SetConsoleTextAttribute function (which is what colorama does).. I think the meta hook idea makes sense, I'll see if I can get something like that working.. Makes sense, check-files-matches-any was not a very good name.. load_config does not merge the data from .pre-commit-config.yaml with the configuration in the hook repo, that happens in Repository.hooks.. This way there will be an error when you're excluding a file that exists, but is not included by files.\nFor example, you could have a hook that only runs on Python files, but has an exclude pattern for the README. Without looking at files, check-useless-excludes would conclude that everything is fine, although in reality the exclude is never matched.. +1 for using the module's __name__, I didn't think of that.. Annoyingly, this lead to a cyclic import if, for example, the hook tries to import Repository or Runner.. ",
    "sfahlberg": "excellent!. ",
    "tlvenn": "I have the same issue with VS Code.. Hi @asottile, thanks for looking into it, for now I got around by editing the source files and forcing the encoding to utf8 on io.open...\nAs far as my env:\n\nLatest version of OS X (10.12.3)\nLatest version of VS Code (1.11.2), installed with dmg file downloaded from website\nLatest version of Python (2.7.10), bundled with OS X ?\nLatest version of pre-commit (0.13.6) installed with brew. @awebdeveloper you need to edit pre-commit source code in 2 places where it uses io.open so that instead of having io.open(filename) it will do: io.open(filename, encoding:'utf8').\n\nThe stacktrace from above points to the file you need to edit, so in your case, you will have to edit first /usr/local/Cellar/pre-commit/0.13.2/libexec/lib/python2.7/site-packages/pre_commit/repository.py line 43. ",
    "alexjurkiewicz": "Great. I'll try to get the hook config added to the official linter project, but otherwise teams can create the config themselves. @awebdeveloper great minds think alike...\nIf either PR is not accepted, I am planning to investigate how the https://github.com/pre-commit/mirrors-jshint repo is created and create similar ones for each that the pre-commit project can own.. Sorry, I'm trying to add args on the hook definition side, not in the end-user repository. Like this:\n```\n$ cat .pre-commit-config.yaml\n-   repo: /home/aj/pre-commit-tslint\n    sha: HEAD\n    hooks:\n    -   id: tslint\n    -   id: tsfmt\n$ cat /home/aj/pre-commit-tslint/.pre-commit-hooks.yaml\n-   id: tslint\n    name: TSLint\n    description: Linting for TypeScript files.\n    entry: tslint\n    language: system\n    files: .(ts|tsx)$\n-   id: tsfmt\n    name: TypeScript Formatter (tsfmt)\n    description: Code formatting for TypeScript files.\n    entry: tsfmt\n    args: ['--verify']\n    language: system\n    files: .(ts|tsx)$\n$ pre-commit run -a\nAn error has occurred: InvalidManifestError:\n==> File /home/aj/.pre-commit/repoDk1jla/.pre-commit-hooks.yaml\n==> At Hook(id='tsfmt')\n==> At key: entry\n=====> Expected string got list\nCheck the log at ~/.pre-commit/pre-commit.log\n```\nDoes this make sense?. Sorry, you're right. I was using sha: HEAD but it seems pre-commit doesn't really support automatic updates and was using an older commit than I expected. All good \ud83d\udc4d . nice work!!!. ",
    "absassi": "Well, always_run would work with a files filter that matches nothing (otherwise the filenames are passed anyway) and I did forget to mention this option.\nI wasn't considering it because make would get called more often than needed. The problem is that the hook usually gets somewhat inefficient for simple operations (such as amending the commit message) because the system make uses (comparing file modification timestamps) is not aware of git and could trigger entire rebuilds just because the developer switched to another branch. On the other hand, pre-commit does know when files have actually changed (if the file filters are properly set, of course).\nIn one particular case, which motivated this suggestion, I have a mixed-language repository where make builds only for a small portion of the code that is not often changed, and building it is a bit slow when compared to other hooks we use.. Hi @asottile, OK, I'll try to make the PR. Thanks.. Thanks!\nI had tried that and it didn't work. I was going to write a full report now, but then I discovered a typo I did in language_version... sorry I didn't noticed that before opening the issue.\n. It is used in line 758, to check hook output, since it prints its args.. ",
    "techjacker": "Ok thanks for the info, not sure when I'll get time to do that PR but will try to fit it in if I can.. ",
    "Sykomaniac": "@asottile thanks for your work! Updated my commit message structure hook to use your commit-msg hook functionality. Anyone interested in seeing a basic use case of this new hook type take a look at: https://github.com/Sykomaniac/commit-hooks. Ah thanks for letting me know!. Guessing there is no chance of passing the SHA's (i.e. oldrev and newrev) at some point in the future?. Yeah they could do. More than happy to try it out! . Brilliant. I'll give it a try tomorrow as my laptop is at work. . @asottile I can't seem to get this to work. \nI've converted my hook to a python package (using yours as a base). I've replaced the main with simply:\nprint (os.environ.get('PRE_COMMIT_ORIGIN'))\nAs I believe python automatically passes environment variables to other child scopes. However this simply gives me None. \nTo try out your change I just dropped the extra lines into run.py in my install dir and deleted the pyc file. I'm assuming this is OK?\n\nLooked again - this did indeed work. I just need to test correctly i.e. test out when trying to actually push something! Thank you very much for your help here. @asottile if you care here is what I did with this change: https://github.com/Sykomaniac/commit-hooks\nBasically used to check commit message adheres to a predefined format\n. ",
    "4c4d": "That's great. I'm using a slightly older version than 530 (will update, of course).\nFor the intermediate, I was thinking of returning a json blob (which has its own set of challenges). Anyways, I'm going to close this and re-evaluate, since it needs some re-thinking.. ",
    "patsevanton": "\u041e\u043a. Thanks.. Ok. Thanks.\nI will think about used docker for pre-commit.. ",
    "dainyl": "I think the odd configuration is that the package.json and the rest of the js code is not located in the root directory. Bash should be fine for my use case, so I'll give that config a go. Thanks!. ",
    "AlbanAndrieu": "This is working.\nSuper fix in no time.... ",
    "dan98765": "@asottile thanks for your thoughts on this idea! I'm not familiar with the pre-commit code so I don't have any idea how hard it would be to implement this. If I end up getting inspired sometime down the line to try building this feature I'll try testing it out for awhile to see what all the issues are. Until then it's not that high on my priority list & no need to discuss further here. . ",
    "lopopolo": "I want to lint on pre-commit hook. I want to do other things on pre-commit as well.\nI want to be able to also only lint.\nUsing multiple configs would still cause duplication, unless there were a way to include my lint config in the main pre-commit config.. yaml\n- repo: https://github.com/pre-commit/pre-commit-hooks.git\n  sha: v0.9.1\n  hooks:\n  - id: check-added-large-files\n  - id: check-ast\n    language_version: python3\n    groups:\n    - lint\n    - python\n  - id: check-byte-order-marker\n    groups:\n    - lint\n  - id: check-case-conflict\n  - id: check-docstring-first\n    groups:\n    - lint\n    - python\n  - id: check-executables-have-shebangs\n  - id: check-json\n    groups:\n    - lint\n    - javascript\n  - id: check-merge-conflict\n  - id: check-symlinks\n  - id: check-yaml\n    groups:\n    - lint\n    - ansible\n  - id: detect-aws-credentials\n    groups:\n    - packer\n    - terraform\n  - id: detect-private-key\n  - id: end-of-file-fixer\nand then be able to run all hooks in a particular group:\n```console\n$ pre-commit run -a --group lint\n```. > (I may be wrong) but it seems like your current goals are:\n\n\nonly run a specific list of things during pre-commit (maybe all?) (I'm not even sure this is one of your goals, basing this off of your original post and not your example configuration)\n\n\nThis is not one of my goals.\n\n\nIn some make targets, run a specific set of hooks against all files\n\n\nThis is what I am trying to achieve. What I was missing was that you could pass a hook id to run. I basically had it backwards. Thanks for the help.\n(I do think adding your makefile snippet above to the docs as an example would be a good thing)\n. ",
    "evhub": "@asottile I just tested on v0.15.0, and it worked, but when I reinstalled v0.15.1, it failed again, so whatever broke this for me happened between v0.15.0 and v0.15.1. Re-installing my local copy of v0.15.1 with the change in this PR fixed it back, though.. Here is my .pre-commit-config.yaml, and both commands above produce C:\\Anaconda3\\python3.6.exe as output.. Yeah, I was rather surprised that virtualenv couldn't handle --python python2.7 and needed --python /path/to/python2.7.exe instead.. @asottile Tested and working; thanks!. ",
    "nagromc": "\nPull requests welcome, note that this also has to work well for windows which doesn't adhere to XDG.\n\nIs there any documentation for pre-commit on Windows?\nIs it supposed to run on:\n- the official Python release for Windows;\n- Cygwin;\n- WSL;\n- all of the above?\nOn which Windows version is it supposed to run?\nHow do you proceed to test it on Windows? Do you use a VM or something?\n\nI've been hesitant to move the directory as it'd be a bit awkward for current users (though perhaps clean can just be updated to remove both paths for some amount of time?)\n\nI understand. But it won't break anything since it would just re-cache all the needed stuff, right? We can imagine three scenarios if ~/.pre-commit already exists:\n1. Move the existing ~/.pre-commit in $XDG_CACHE_HOME or $HOME/.cache, with or without warning (see 2.);\n1. Don't move the existing ~/.pre-commit, but display a warning before re-caching;\n3. Just re-cache the needed parts without displaying any message (and maybe delete the existing ~/.pre-commit) \u00af\\_(\u30c4)_/\u00af\nWell, it has been done already with the transition from hooks.yaml to .pre-commit-hooks.yaml in some sort.. OK I'll give it a try when I have time. Didn't know about AppVeyor.\nAnd for the third solution, should we delete ~/.pre-commit?. ",
    "Alain1405": "I'm currently getting, at commit:\n```\n(venv-development) Alain-MBP:backend alain$ cat  ~/.pre-commit/pre-commit.log\nAn error has occurred: InvalidManifestError: \n=====> /Users/alain/.pre-commit/repos5jqn0k0/.pre-commit-hooks.yaml does not exist\nTraceback (most recent call last):\n  File \"/path/lib/python3.6/site-packages/pre_commit/schema.py\", line 46, in reraise_as\n    yield\n  File \"/path/lib/python3.6/site-packages/pre_commit/schema.py\", line 267, in load_from_filename\n    raise ValidationError('{} does not exist'.format(filename))\npre_commit.schema.ValidationError: \n=====> /Users/alain/.pre-commit/repos5jqn0k0/.pre-commit-hooks.yaml does not exist\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"/path/lib/python3.6/site-packages/pre_commit/error_handler.py\", line 48, in error_handler\n    yield\n  File \"/path/lib/python3.6/site-packages/pre_commit/main.py\", line 231, in main\n    return run(runner, args)\n  File \"/path/lib/python3.6/site-packages/pre_commit/commands/run.py\", line 256, in run\n    repo_hooks = list(get_repo_hooks(runner))\n  File \"/path/lib/python3.6/site-packages/pre_commit/commands/run.py\", line 197, in get_repo_hooks\n    for repo in runner.repositories:\n  File \"/path/lib/python3.6/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/path/lib/python3.6/site-packages/pre_commit/runner.py\", line 46, in repositories\n    repository.require_installed()\n  File \"/path/lib/python3.6/site-packages/pre_commit/repository.py\", line 177, in require_installed\n    install_all(self._venvs, self.repo_config['repo'])\n  File \"/path/lib/python3.6/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/path/lib/python3.6/site-packages/pre_commit/repository.py\", line 166, in _venvs\n    for , hook in self.hooks:\n  File \"/path/lib/python3.6/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/path/lib/python3.6/site-packages/pre_commit/repository.py\", line 146, in hooks\n    if hook['id'] not in self.manifest.hooks:\n  File \"/path/lib/python3.6/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/path/lib/python3.6/site-packages/pre_commit/manifest.py\", line 28, in hooks\n    for hook in self.manifest_contents:\n  File \"/path/lib/python3.6/site-packages/cached_property.py\", line 26, in get\n    value = obj.dict[self.func.name] = self.func(obj)\n  File \"/path/lib/python3.6/site-packages/pre_commit/manifest.py\", line 23, in manifest_contents\n    return load_manifest(os.path.join(self.repo_path, C.MANIFEST_FILE))\n  File \"/path/lib/python3.6/site-packages/pre_commit/schema.py\", line 279, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6/lib/python3.6/contextlib.py\", line 99, in exit\n    self.gen.throw(type, value, traceback)\n  File \"/path/lib/python3.6/site-packages/pre_commit/schema.py\", line 49, in reraise_as\n    six.reraise(tp, tp(e), tb)\n  File \"/path/lib/python3.6/site-packages/six.py\", line 685, in reraise\n    raise value.with_traceback(tb)\n  File \"/path/lib/python3.6/site-packages/pre_commit/schema.py\", line 46, in reraise_as\n    yield\n  File \"/path/lib/python3.6/site-packages/pre_commit/schema.py\", line 267, in load_from_filename\n    raise ValidationError('{} does not exist'.format(filename))\npre_commit.clientlib.InvalidManifestError: \n=====> /Users/alain/.pre-commit/repos5jqn0k0/.pre-commit-hooks.yaml does not exi\n```\nI've tried removing ~/.pre-commit too. It appeared after I upgraded my virtual environment using python3.6 -m venv command.. ",
    "Lyoness": "Build matrix with pypy passed here: \nhttps://travis-ci.org/Lyoness/pre-commit/builds/257892699. ",
    "GhostLyrics": "Yes, you were right. Thank you.\nFor the next person looking at a similar situation:\n```\napt install locales\nlocale-gen en_US.utf-8\nexport LANG=en_US.utf-8\nrest of your commands here\n```. ",
    "RunningToTheEdgeOfTheWorld": "D:\\CubeadProjects\\devops [test]> git version\ngit version 2.13.2.windows.1\nD:\\CubeadProjects\\devops [test]> pre-commit -V\npre-commit 0.15.4\nlocal git config\nini\n[core]\n    repositoryformatversion = 0\n    filemode = false\n    bare = false\n    logallrefupdates = true\n    symlinks = false\n    ignorecase = true\n    autocrlf = true\n    whitespace = fix\n[branch \"master\"]\n[branch \"devops_cubead_dev\"]\n[remote \"origin\"]\n    url = git@github.com:CubeADGroup/devops.git\n    fetch = +refs/heads/*:refs/remotes/origin/*\n[user]\n    name = RunningToTheEdgeOfTheWorld\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\nglobal git config\nini\n[filter \"lfs\"]\n    process = git-lfs filter-process\n    required = true\n    clean = git-lfs clean -- %f\n    smudge = git-lfs smudge -- %f\n[user]\n    name = ZJ\n[user]\n    email = 569290339@qq.com\n[gui]\n    recentrepo = D:/CubeadProjects/omms\n[alias]\n    s = status\n    cm = commit -m\n    co = checkout\n    a = add\n    b = branch\n    p = push\n    d = diff\n    dt = difftool\n[core]\n    autocrlf = true\n[diff]\n    tool = gvimdiff\n[difftool]\n    prompt = No\n[apply]\n    whitespace = nowarn. ```\nD:\\CubeadProjects\\devops [test +0 ~1 -0 | +0 ~1 -0 !]> git status\nOn branch test\nChanges to be committed:\n  (use \"git reset HEAD ...\" to unstage)\n    modified:   svnchecker_stylelint_support/install.py\n\nChanges not staged for commit:\n  (use \"git add ...\" to update what will be committed)\n  (use \"git checkout -- ...\" to discard changes in working directory)\n    modified:   svnchecker_stylelint_support/checks/Stylelint.py\n\nD:\\CubeadProjects\\devops [test +0 ~1 -0 | +0 ~1 -0 !]> git diff --ignore-submodules --binary --exit-code --no-color --no-ext-diff\ndiff --git a/svnchecker_stylelint_support/checks/Stylelint.py b/svnchecker_stylelint_support/checks/Stylelint.py\nindex 4422b4d..83fe854 100644\n--- a/svnchecker_stylelint_support/checks/Stylelint.py\n+++ b/svnchecker_stylelint_support/checks/Stylelint.py\n@@ -20,3 +20,6 @@ def run(transaction, config):\n             return ('{}\\n{}'.format(stdoutdata, stderrdata), 1)\n return (\"\", 0)\n\n+\n+\n+\n```. hint:\nwhile I delete the golbal config whitespace-nowarn, i got \"trailing whitespace\" error . . thank you , and I found I can not apply anypatch( use --ignore-submodules --binary --exit-code --no-color -\n-no-ext-diff, or --color=never  ), got error: unrecognized input .\nI think it maybe a git BUG. i am tyring . it doesn't work. but I found the problem.\nwhether I set the whitespace( cr-at-eol or true  ), git diff output to a file is CRLF linesep,\nso in staged_files_only.py line39:\n            patch_file.write(diff_stdout_binary.replace('\\r', ''))\nit worked.\n . success, thank you very much!. ",
    "ilovezfs": "@chriskuehl yes, looks good:\niMac-TMP:homebrew-core joe$ brew test -vd pre-commit\n/usr/local/Homebrew/Library/Homebrew/brew.rb (Formulary::FormulaLoader): loading /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb\nTesting pre-commit\n==> Using the sandbox\n/usr/bin/sandbox-exec -f /tmp/homebrew20170802-1293-vvtu78.sb /usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/2.0.0-p648/bin/ruby -W0 -I /usr/local/Homebrew/Library/Homebrew -- /usr/local/Homebrew/Library/Homebrew/test.rb /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb -vd\n/usr/local/Homebrew/Library/Homebrew/test.rb (Formulary::FromPathLoader): loading /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb\n==> git init\nInitialized empty Git repository in /private/tmp/pre-commit-test-20170802-1294-1dtdxot/.git/\n==> /usr/local/Cellar/pre-commit/0.16.0/bin/pre-commit install\npre-commit installed at /private/tmp/pre-commit-test-20170802-1294-1dtdxot/.git/hooks/pre-commit\n==> /usr/local/Cellar/pre-commit/0.16.0/bin/pre-commit run --all-files\n[INFO] Initializing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Installing environment for https://github.com/pre-commit/pre-commit-hooks.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nTrim Trailing Whitespace.............................(no files to check)Skipped\niMac-TMP:homebrew-core joe$ echo $?\n0. Thanks!. @asottile you're welcome!. ",
    "khru": "This issue it's happening to me too,\n[INFO] Initializing environment for https://github.com/hootsuite/pre-commit-php.git.\nAn error has occurred: InvalidManifestError:\n=====> /home/evalverde/.cache/pre-commit/repoTO4tFY/.pre-commit-hooks.yaml does not exist\nCheck the log at /home/evalverde/.cache/pre-commit/pre-commit.log\n```\nAn error has occurred: InvalidManifestError: \n=====> /home/evalverde/.cache/pre-commit/repoTO4tFY/.pre-commit-hooks.yaml does not exist\nTraceback (most recent call last):\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/error_handler.py\", line 46, in error_handler\n    yield\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/main.py\", line 291, in main\n    return run(args.config, store, args)\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/commands/run.py\", line 253, in run\n    for hook in all_hooks(config, store)\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/repository.py\", line 221, in all_hooks\n    for repo in root_config['repos']\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/repository.py\", line 222, in \n    for hook in _repository_hooks(repo, store, root_config)\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/repository.py\", line 197, in _repository_hooks\n    return _cloned_repository_hooks(repo_config, store, root_config)\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/pre_commit/repository.py\", line 167, in _cloned_repository_hooks\n    by_id = {hook['id']: hook for hook in load_manifest(manifest_path)}\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/cfgv.py\", line 408, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"/usr/lib/python2.7/contextlib.py\", line 35, in exit\n    self.gen.throw(type, value, traceback)\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/cfgv.py\", line 49, in reraise_as\n    six.reraise(tp, tp(e), tb)\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/cfgv.py\", line 46, in reraise_as\n    yield\n  File \"/home/evalverde/.local/lib/python2.7/site-packages/cfgv.py\", line 396, in load_from_filename\n    raise ValidationError('{} does not exist'.format(filename))\nInvalidManifestError: \n=====> /home/evalverde/.cache/pre-commit/repoTO4tFY/.pre-commit-hooks.yaml does not exist\n```. ",
    "henryjiang-sfgov": "pre-commit autoupdate did not resolved the error. In fact, running pre-commit autoupdate throws the same error.\n```\nC02VCA2RHTD6:src henryjiang$ git commit -m 'initial precommit'\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /Users/henryjiang/.cache/pre-commit/patch1551915620.\n[INFO] Initializing environment for git@github.com:myorg/myrepor.git.\n[INFO] Restored changes from /Users/henryjiang/.cache/pre-commit/patch1551915620.\nAn error has occurred: InvalidManifestError: \n=====> /Users/henryjiang/.cache/pre-commit/repoOvjp2P/.pre-commit-hooks.yaml does not exist\nCheck the log at /Users/henryjiang/.cache/pre-commit/pre-commit.log\nC02VCA2RHTD6:src henryjiang$ pre-commit clean\nCleaned /Users/henryjiang/.cache/pre-commit.\nC02VCA2RHTD6:src henryjiang$ pre-commit autoupdate\nUpdating git@github.com:myorg/myrepor.git...[INFO] Initializing environment for git@github.com:myorg/myrepor.git.\n=====> /Users/henryjiang/.cache/pre-commit/repoBh89dY/.pre-commit-hooks.yaml does not exist\n```. Thanks for the quick reply.  Yes it's a private repo and I'm trying to setup pre-commit for this repo. So \nI installed precommit using curl\nstart a new local branch\nadd the .pre-commit-config.yaml file\nupdated a readme.\ngit add and commit\ngot the error\nprecommit config:\nexclude: '^$'\nfail_fast: false\nrepos:\n  - repo: git@github.com:myrepo/myrepo.git\n    rev: head \n    hooks:\n      - id: forbid-binary\nBtw, I'm running version 1.14.4 if that makes a difference. \nC02VCA2RHTD6:src henryjiang$ pre-commit --version\npre-commit 1.14.4\n. Here's what I end up doing:\n\nuninstall precommit\nadd .pre-commit-hooks.yaml to my branch\ngit commit\ninstall precommit\nget the revision from my last commit\nadd .pre-commit-config.yaml\n\nMy branch is now clear to commit without error.  If using head is not recommended for the \"rev\" key in the config, does that mean we would have to keep updating that value for every commit? I must be missing something here.\n. Thanks! If I setup local hooks, are there still reasons to have precommit on my remote repo? The reason we want to use precommit is to enforce formatting and making sure we're not checking in passwords. \nTIA for your help.. ",
    "gagern": "Thanks, the explanation helped. Will adapt and add to my documentation.. Wow this is fast. Thanks!. ",
    "ylogx": "\ud83d\udc4d  Makes sense.. ",
    "mwarkentin": "@asottile Would that run the hook or just install it? \nAnother option might be to allow --bleeding-edge to support a branch argument so that we could auto-update from our branch for testing before merging to master.. Great, I think that would be helpful! I also like the test-repo idea to install and run the hook.. @asottile Nice, thanks!. ",
    "coldnight": "Thanks for your reply!\n\n\nAn aside: pylint is a bit of a beast to get working with pre-commit as most of its checks aren't static analysis but dynamic analysis (it needs to be able to import your code to check it)\n\nI agree with that.\n\n\npylint often works better as a local / system / script hook which takes advantage of the currently activated virtualenv (and then has the ability to import and inspect your code directly).\n\nI will give my try.. >  pylint often works better as a local / system / script hook which takes advantage of the currently activated virtualenv (and then has the ability to import and inspect your code directly).\nIt works. Thanks very much, and if there no plan for this, please let me know,  I will close this issue.. Thanks for your awesome job!. @asottile Please review and I don't how to handle the hash things here.. ",
    "artcyb": "Give me tutorial . ",
    "LeuisKen": "Thank you. :). ",
    "jsok": "Yep totally get it \ud83d\udc4d \nI think I can solve my underlying desire in a different way by just writing a wrapper script that calls docker run and users can override the image if desired using args.. Ideally a Docker image and a git repo should be both considered valid plugin sources.\nCreating a whole git repo just to act as a shim/wrapper for calling a Docker image is a bit tedious.\ne.g. I'd love to see:\nyaml\n-   repo: git://github.com/pre-commit/pre-commit-hooks\n    sha: v0.9.1\n    hooks:\n    -   id: trailing-whitespace\n-   docker: my.registry.example.com/pre-commit-images/flake8:python3\n    hooks:\n    -   id: flake8\n\nAs a back story, I use pre-commit as a linting step in my CI job rather than a git pre-commit hook so I'm probably not the typical use case. I've found pre-commit to be a simple and low-barrier entry for projects and team members to add linting steps.\nDocker is great here because I don't need to install e.g. every version of python on my CI agents.\nI want to let developers use any linter they like so long as they can package it as a docker image.. Yep I believe that would work well.\nAs for being locked into the one entrypoint, you could probably get around this limitation by building a docker image with no ENTRYPOINT and using the hooks args to specify the docker run CMD.. I've had a play with 0.18.0 and it seems to fit the bill \ud83d\udc4d \nAppreciate the feature implementation and quick feedback.. ",
    "AlekSi": "I installed 0.18.2 (it was merged) and that's what I got:\n```\n$ pre-commit run --all-files\nTrim Trailing Whitespace.................................................Failed\nhookid: trailing-whitespace\nFiles were modified by this hook. Additional output:\nFixing public/episode/2017/04-14-096/index.html\nFixing public/episode/2016/03-31-050/index.html\nFixing public/episode/2016/10-14-077/index.html\nFixing public/episode/2015/09-10-017/index.html\nFixing public/episode/2016/02-04-041/index.html\nFixing public/page/4/index.html\nFixing public/episode/2016/07-16-065/index.html\nFixing public/episode/2017/01-18-090/index.html\nFixing public/episode/2016/01-14-038/index.html\nFixing public/episode/2016/01-07-037/index.html\nFixing public/episode/2017/02-08-093/index.html\nFixing public/page/9/index.html\nFixing public/episode/2016/04-28-054/index.html\nFixing public/episode/2016/11-23-084/index.html\nFixing public/404.html\nFixing public/episode/2015/11-26-031/index.html\nFixing public/page/3/index.html\nFixing public/episode/2016/06-30-063/index.html\nFixing public/episode/2015/11-19-028/index.html\nFixing public/episode/2016/07-29-067/index.html\nFixing public/episode/2016/06-02-059/index.html\nFixing public/episode/2015/07-16-006/index.html\nFixing public/episode/2016/05-05-055/index.html\nFixing public/about/index.html\nFixing public/episode/2015/06-18-002/index.html\nFixing public/episode/2015/10-15-023/index.html\nFixing public/categories/index.xml\nFixing public/episode/2015/08-27-014/index.html\nFixing public/episode/2016/02-25-045/index.html\nFixing public/episode/2015/10-22-024/index.html\nFixing public/index.xml\nFixing public/post/2015/09-03-before-015/index.html\nFixing public/episode/2016/02-05-042/index.html\nFixing public/episode/2016/06-23-062/index.html\nFixing public/episode/2015/06-11-001/index.html\nFixing public/online/index.html\nTraceback (most recent call last):\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/bin/trailing-whitespace-fixer\", line 11, in \n    load_entry_point('pre-commit-hooks==0.9.1', 'console_scripts', 'trailing-whitespace-fixer')()\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/lib/python2.7/site-packages/pre_commit_hooks/trailing_whitespace_fixer.py\", line 80, in fix_trailing_whitespace\n    print('Fixing {}'.format(bad_whitespace_file))\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 18-22: ordinal not in range(128)\nTraceback (most recent call last):\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/bin/trailing-whitespace-fixer\", line 11, in \n    load_entry_point('pre-commit-hooks==0.9.1', 'console_scripts', 'trailing-whitespace-fixer')()\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/lib/python2.7/site-packages/pre_commit_hooks/trailing_whitespace_fixer.py\", line 80, in fix_trailing_whitespace\n    print('Fixing {}'.format(bad_whitespace_file))\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 18-22: ordinal not in range(128)\nTraceback (most recent call last):\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/bin/trailing-whitespace-fixer\", line 11, in \n    load_entry_point('pre-commit-hooks==0.9.1', 'console_scripts', 'trailing-whitespace-fixer')()\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/lib/python2.7/site-packages/pre_commit_hooks/trailing_whitespace_fixer.py\", line 80, in fix_trailing_whitespace\n    print('Fixing {}'.format(bad_whitespace_file))\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 18-24: ordinal not in range(128)\nTraceback (most recent call last):\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/bin/trailing-whitespace-fixer\", line 11, in \n    load_entry_point('pre-commit-hooks==0.9.1', 'console_scripts', 'trailing-whitespace-fixer')()\n  File \"/Users/aleksi/.pre-commit/repoybD6Jg/py_env-python2.7/lib/python2.7/site-packages/pre_commit_hooks/trailing_whitespace_fixer.py\", line 80, in fix_trailing_whitespace\n    print('Fixing {}'.format(bad_whitespace_file))\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 18-24: ordinal not in range(128)\n```\n. ",
    "zph": "@asottile Thinking of #744 and based on that implementation of what I thought the desired behavior was... I think having a separate key for types_or is the rough concept I'd go for. With a hard requirement of only allowing either a types or a types_or declaration. Merging both seems messy and undesirable.\nUnless we took the following approach:\ndoes it match all of types && at least one of types_or\nThat could work too. I'll mull on it. If I have the time and inclination I'll put up a proposal and a viable solution :).. @asottile Please let me know if you think this is my PR breaking the tests. I was unable to get them passing locally even before making changes.. @asottile Interesting. I misread the docs then about the AND behavior.\nSo if I want to do sh or bash etc as various possibilities, I need separate declarations for them? I tried out your suggestion and it works :). Merely surprising.. ",
    "SimonHeimberg": "alternative suggestion for config:\nyaml\ntypes:\n    - [ type1A, type1B, type1C]\n    - [ type2A, type2B ]\nin programming terms: make types optional a two-dimensional array\ntype must match (type1A and type1B and type1C) or (type2A and type2B)\n. Why would it be incompatible?\n```yaml\ntypes: [file, java] # to use for usual cases, would still work\ntypes:\n  - [file, java]\n  - [file, css]\n  - [symlink, python]\nabove only used for special cases\n```\nWell, the current files/types/... is already not obvious for everybody, as #706 shows. Right, git hooks are not handed a tty. Therefore I read from /dev/tty directly in my pre-commit script.\nBut no good arguments against clumsy.. My bash script waits for keyboard input even if called by pre-commit. (It reads from /dev/tty.) I blindly type the answer and see the output at the end.\nWorkaround found: I simply redirect the output to /dev/tty as well.. IGNORE is similar to SKIP, but\n * the check is run and\n * shows output if it fails\nSo the user sees the ignored failure and does not skip anything by accident.\nThis is a suggestion instead of unhandy #871.\nThe state Ignore is chosen because it has the same length as Passed and Failed. (Ignored would be better, but shall the other terms get a leading ., or ... ?)\nDoc follows when the idea of IGNORE is good.. When it makes sense, I can write .<green>Passed</>, .<red>Failed</> (both with leading dot first) and <yellow>Ignored</>. But first let's discuss the idea of this patch.\n\nRight, currently, IGNORE is not considered for modifying hooks. (see here in diff)\nDifference between SKIP and IGNORE: IGNORE reports \"Passed\" or \"Ignore\" depending on the output. SKIP always reports \"Skipped\"\nWhat I do not like on SKIP is that I do not see any output.\nAm I sure that I only skipped what I wanted?\nDoes this not tempt to set SKIP when I know the file will fail without checking first if it fails on what I expect? (Me does not mean me personally.)\nWe currently use a shell commit hook by me which asks to continue on nonfatal failure. I agree that that tweaking /dev/tty like this is not nice. (Querying on failure was a wish of the team leader.) But questions do not allow to say in advance to skip some parts, only after. (Unfortunately I did no pre-commit (this tool) this tool when writing the bash script...)\nWill likely be hard to convince my team to do two commit commands when expecting a failure, and use SKIP ONLY the 2nd time.\n. \n\n\n",
    "mattstrayer": "Thanks so much, @asottile ! Investigating further now. . Update: I removed conda, cleaned pre-commit, and used the regular python3 homebrew setup and we're back in good shape. \nThanks again @asottile !. ",
    "ghunkins": "Had the same issue. For anyone who hasn't found an answer, the below worked for me.\npip uninstall virtualenv\nconda install virtualenv\nSource. ",
    "sobolevn": "Thanks! Useful tip!. Yeap, that's a way to go. But, as for me, it breaks UX a little bit.. There is no big value in this indeed. It is almost unnoticeable.\nBut, as you said, it is all about consistency.\nWe stick to .yml just because it is consistent (the same with jpg).\nIf that's not a good reason for you, we will stick to --config option with no problems.. ",
    "seanon414": "Yes here is full stuck trace for the record\nAn unexpected error has occurred: ValueError: No closing quotation\nTraceback (most recent call last):\n  File \"/Library/Python/2.7/site-packages/pre_commit/error_handler.py\", line 44, in error_handler\n    yield\n  File \"/Library/Python/2.7/site-packages/pre_commit/main.py\", line 231, in main\n    return run(runner, args)\n  File \"/Library/Python/2.7/site-packages/pre_commit/commands/run.py\", line 250, in run\n    repo_hooks = list(get_repo_hooks(runner))\n  File \"/Library/Python/2.7/site-packages/pre_commit/commands/run.py\", line 203, in get_repo_hooks\n    for repo in runner.repositories:\n  File \"/Library/Python/2.7/site-packages/cached_property.py\", line 26, in __get__\n    value = obj.__dict__[self.func.__name__] = self.func(obj)\n  File \"/Library/Python/2.7/site-packages/pre_commit/runner.py\", line 50, in repositories\n    repo.require_installed()\n  File \"/Library/Python/2.7/site-packages/pre_commit/repository.py\", line 185, in require_installed\n    _install_all(self._venvs, self.repo_config['repo'], self.store)\n  File \"/Library/Python/2.7/site-packages/pre_commit/repository.py\", line 99, in _install_all\n    language.install_environment(cmd_runner, version, deps)\n  File \"/Library/Python/2.7/site-packages/pre_commit/languages/python.py\", line 130, in install_environment\n    ('pip', 'install', '.') + additional_dependencies,\n  File \"/Library/Python/2.7/site-packages/pre_commit/languages/helpers.py\", line 9, in run_setup_cmd\n    cmd_output(*cmd, cwd=runner.prefix_dir, encoding=None)\n  File \"/Library/Python/2.7/site-packages/pre_commit/util.py\", line 174, in cmd_output\n    cmd = parse_shebang.normalize_cmd(cmd)\n  File \"/Library/Python/2.7/site-packages/pre_commit/parse_shebang.py\", line 68, in normalize_cmd\n    cmd = parse_filename(exe) + (exe,) + cmd[1:]\n  File \"/Library/Python/2.7/site-packages/pre_commit/parse_shebang.py\", line 18, in parse_filename\n    return parse_shebang_from_file(filename)\n  File \"/Library/Python/2.7/site-packages/identify/identify.py\", line 150, in parse_shebang_from_file\n    return parse_shebang(f)\n  File \"/Library/Python/2.7/site-packages/identify/identify.py\", line 136, in parse_shebang\n    cmd = tuple(shlex.split(first_line))\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shlex.py\", line 279, in split\n    return list(lex)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shlex.py\", line 269, in next\n    token = self.get_token()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shlex.py\", line 96, in get_token\n    raw = self.read_token()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/shlex.py\", line 172, in read_token\n    raise ValueError, \"No closing quotation\"\nValueError: No closing quotation. Thanks for the fix!. ",
    "dongyuzheng": "```bash\nDongyus-MBP:backend gary$ python3.6 -m venv venv\nDongyus-MBP:backend gary$ source venv/bin/activate\n(venv) Dongyus-MBP:backend gary$ pip install pre-commit\nCollecting pre-commit\n  Using cached pre_commit-1.1.2-py2.py3-none-any.whl\nCollecting pyyaml (from pre-commit)\n  Using cached PyYAML-3.12.tar.gz\nCollecting aspy.yaml (from pre-commit)\n  Using cached aspy.yaml-0.3.0-py2.py3-none-any.whl\nCollecting six (from pre-commit)\n  Using cached six-1.11.0-py2.py3-none-any.whl\nCollecting identify>=1.0.0 (from pre-commit)\n  Using cached identify-1.0.6-py2.py3-none-any.whl\nCollecting virtualenv (from pre-commit)\n  Using cached virtualenv-15.1.0-py2.py3-none-any.whl\nCollecting cached-property (from pre-commit)\n  Using cached cached_property-1.3.1-py2.py3-none-any.whl\nCollecting nodeenv>=0.11.1 (from pre-commit)\n  Using cached nodeenv-1.2.0.tar.gz\nInstalling collected packages: pyyaml, aspy.yaml, six, identify, virtualenv, cached-property, nodeenv, pre-commit\n  Running setup.py install for pyyaml ... done\n  Running setup.py install for nodeenv ... done\nSuccessfully installed aspy.yaml-0.3.0 cached-property-1.3.1 identify-1.0.6 nodeenv-1.2.0 pre-commit-1.1.2 pyyaml-3.12 six-1.11.0 virtualenv-15.1.0\n(venv) Dongyus-MBP:backend gary$ pre-commit\n[INFO] Initializing environment for https://github.com/asottile/reorder_python_imports.\n[INFO] Installing environment for https://github.com/asottile/reorder_python_imports.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/Users/gary/backend/venv/bin/python3.6', '-m', 'virtualenv', '/Users/gary/.cache/pre-commit/repolm0_vab7/py_env-python3.6', '-p', 'python3.6')\nReturn code: 100\nExpected return code: 0\nOutput:\n    Already using interpreter /Users/gary/backend/venv/bin/python3.6\n    Using base prefix '/usr/local/bin/../Cellar/python3/3.6.2/bin/../Frameworks/Python.framework/Versions/3.6'\n    New python executable in /Users/gary/.cache/pre-commit/repolm0_vab7/py_env-python3.6/bin/python3.6\n    Also creating executable in /Users/gary/.cache/pre-commit/repolm0_vab7/py_env-python3.6/bin/python\n    ERROR: The executable /Users/gary/.cache/pre-commit/repolm0_vab7/py_env-python3.6/bin/python3.6 is not functioning\n    ERROR: It thinks sys.prefix is '/usr/local/Cellar/python3/3.6.2/Frameworks/Python.framework/Versions/3.6' (should be '/Users/gary/.cache/pre-commit/repolm0_vab7/py_env-python3.6')\n    ERROR: virtualenv is not compatible with this system or executable\nErrors: (none)\nCheck the log at /Users/gary/.cache/pre-commit/pre-commit.log\n```\n```bash\n(venv) Dongyus-MBP:backend gary$ which virtualenv\n/Users/gary/backend/venv/bin/virtualenv\n(venv) Dongyus-MBP:backend gary$ which python\n/Users/gary/backend/venv/bin/python\n(venv) Dongyus-MBP:backend gary$ head -1 $(which virtualenv)\n!/Users/gary/backend/venv/bin/python3.6\n(venv) Dongyus-MBP:backend gary$ which python3\n/Users/gary/backend/venv/bin/python3\n```. I am able to work around it by changing:\nvirtualenv to venv: https://github.com/pre-commit/pre-commit/blob/master/pre_commit/languages/python.py#L118\nAnd deleting L121 - L124. That works! asottile++\n. It would be nice if it can detect if the env was created using venv, and then use that in the env set up.. ",
    "ojii": "I'm having the same issue, but switching to -mvirtualenv is not really an option. Could this be some sort of config option to make pre-commit use -mvenv instead (or auto-use -mvenv if on a recent python)?. > Curious why -mvirtualenv isn't an option?\nIt's a bootstrapping issue. Using virtualenv, project bootstrapping would look something like this:\n\nSomehow install virtualenv, this may require elevated privileges\npython -mvirtualenv env\nenv/bin/pip install <project-dependencies>\n\nHowever, we use this instead:\n\npython -mvenv env, no special privileges required\nenv/bin/pip install <project-dependencies.\n\nThere's no benefit in using virtualenv over venv that I can see, but there are drawbacks. . > The failures on linux are exactly why I'm hesitant to use the venv module.\nI see. Would you instead accept a PR that allows using venv by using language_version: <version>+venv? Eg language_version: 3.6+venv.. Will open a fresh PR with a new language.. go right ahead. Could you make a release with this please? . ",
    "geekobi": "thanks a lot. ",
    "jimmidyson": "Oh thank you! Sorry I'd missed your comment on this PR in the deluge of other notifications... Thank you for adding the comment.. ",
    "gaborbernat": "@asottile I did not knew bash is required. I'm personally not comfortable knowing  this to add this project to tox; as you make it at best cumbersome for people on Windows to develop; now they need to install some kind of bash beside just Python. . @asottile I'm using cmder which includes bash, however the test fails as it tries to find /usr/bin/bash which is not here; any ideas?\n. ```\nC:\\Users\\berna\\git\\tox (speed)\n\u03bb env | grep PATH\nGIT_LFS_PATH=C:\\Program Files\\Git LFS\nHOMEPATH=\\Users\\berna\nPATH=/c/Program Files/cmder/bin:/c/Program Files/cmder/vendor/conemu-maximus5/ConEmu/Scripts:/c/Program Files/cmder/vendor/conemu-maximus5:/c/Program Files/cmder/vendor/conemu-maximus5/ConEmu:/c/ProgramData/Oracle/Java/javapath:/c/Program Files (x86)/Intel/iCLS Client:/c/Program Files/Intel/iCLS Client:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/IPT:/c/Program Files/Intel/Intel(R) Management Engine Components/IPT:/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/cmd:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/Program Files/Git LFS:/c/Program Files/PuTTY:/c/Program Files/nodejs:/c/HashiCorp/Vagrant/bin:/:/c/ProgramData/Anaconda3:/c/ProgramData/Anaconda3/Scripts:/c/Users/berna/AppData/Local/conda/conda/envs:/c/Users/berna/AppData/Local/Microsoft/WindowsApps:/c/Program Files (x86)/Microsoft VS Code/bin:/c/Users/berna/AppData/Roaming/npm:/c/Users/berna/AppData/Local/Google/Cloud SDK/google-cloud-sdk/bin:/usr/bin:/usr/share/vim/vim74:/c/Program Files/cmder\nPATHEXT=.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\nVBOX_MSI_INSTALL_PATH=C:\\Program Files\\Oracle\\VirtualBox\\\nC:\\Users\\berna\\git\\tox (speed)\n\u03bb which bash\n/c/Windows/system32/bash\n. pip does not support pep 517 yet, so cannot pip install a flit project, unless previously you create wheel/sdist with it . maybe just fallback on tox implantation tox -e py --sdistonly --isolated and then pip install that \ud83d\ude05@pfmoore how's pep-517 coming along?. Does not matter much, pip 18.1 supports pep 518 only, so still only supports setuptools, but can pull in build dependencies. Hence why flit generates setup.py shim in sdist.. Luckily I have a Linux and Macos machine at hand too, so not a blocker for myself, but could help investigate if you need any help to get to the bottom of this. . @asottile sorry got sidetracked with preparing ``virtualenv`` release and I'm on holiday now, will get back to you in a week or so though!.\nC:\\Users\\berna\\git\\virtualenv (master -> origin)\n\u03bb .tox\\fix_lint\\Scripts\\python.exe -c \"import sys; print(sys.version)\"\n3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]\nC:\\Users\\berna\\git\\virtualenv (master -> origin)\n\u03bb .tox\\fix_lint\\Scripts\\python.exe -m pip list\nPackage            Version\n\naspy.yaml          1.1.1\ncached-property    1.5.1\ncfgv               1.1.0\nidentify           1.1.7\nimportlib-metadata 0.7\nnodeenv            1.3.3\npip                18.1\npre-commit         1.12.0\nPyYAML             3.13\nsetuptools         40.6.3\nsix                1.12.0\ntoml               0.10.0\nvirtualenv         16.1.0\nwheel              0.32.3\n```\nC:\\Users\\berna\\.cache\\pre-commit\\repoir3y0nq1\\docs (master -> origin)\n\u03bb ls -alth\ntotal 31K\ndrwxr-xr-x 1 berna 197609    0 Dec 31 11:27 ../\ndrwxr-xr-x 1 berna 197609    0 Dec 31 11:14 ./\nlrwxrwxrwx 1 berna 197609   47 Dec 31 11:14 version_control_integration.md -> _build/generated/version_control_integration.md\nlrwxrwxrwx 1 berna 197609   40 Dec 31 11:14 the_black_code_style.md -> _build/generated/the_black_code_style.md\nlrwxrwxrwx 1 berna 197609   32 Dec 31 11:14 testimonials.md -> _build/generated/testimonials.md\nNot sure how those got created though. Running from within cmder, but command prompt gives the same. Going to admin mode does bypasses the issue.\nInstalled latest git(2.20.0). Tried clean without help.. @asottile that works for me, maybe just document it under some troubleshooting section then \ud83d\udc4d thanks!. I see. ",
    "reywright": "essentially if there's a repo, a user pip installs and then does pre-commit install or whatever, it seems like they'd have to install again if the .pre-commit-config.yaml file updates with a new entry or changes in some way. Maybe what you're saying is there's a way they can run that command (or another command) once and then pre-commit will follow the config.yaml file?\nThanks for the help by the way... I'm not too versed in the git hook space so I'm a bit out of my depth here.. thanks so much @asottile. Makes a ton of sense!. ",
    "FatherShawn": "docker-machine (boot2docker) on Mac doing a trial build of the Dockerfile.  Also happens on Docker cloud builder.\nThe underlaying OS is Alpine linux.  It is installing pre-commit from scratch.\n. Ah!  Nice find - I was thinking of switching this container to a different linux as a trial.  Thanks for the help.  Here are the relevant files if you want to poke some more\npre-commit-issue-655.zip\nI'll give it a go with a different Linux.\n. Wow!  You are amazing!!  I\u2019ll recraft my container to use python 2.7. Thank you!!. Thank you for the help!  In the meantime, I refactored my container to use debian.. ",
    "hectorv": "I ran into this today on our Python 3 + Alpine projects. Unfortunately, the mandate from above is more Python 3 and more Alpine... \ud83d\uddfb . Thanks @asottile \ud83e\udd1e \nAnd I agree with @FatherShawn: you're the \ud83d\udca5 . Could it be because git revert is not a supported hook action? \ud83d\ude04 \nhttps://git-scm.com/docs/githooks. Makes sense, thanks @asottile !. Thanks @asottile !\nI like the idea of stages: [manual] \ud83d\udcaf . @asottile looks great! \ud83d\udca5 \n```\n\u276f pip install -e git://github.com/pre-commit/pre-commit.git@manual#egg=pre-commit\n\u276f pre-commit run -h\nusage: pre-commit run [-h] [--color {auto,always,never}] [-c CONFIG]\n                      [--verbose] [--origin ORIGIN] [--source SOURCE]\n                      [--commit-msg-filename COMMIT_MSG_FILENAME]\n                      [--hook-stage {commit,commit-msg,manual,push}]\n                      [--show-diff-on-failure]\n                      [--all-files | --files [FILES [FILES ...]]]\n                      [hook]\n[...]\n  --hook-stage {commit,commit-msg,manual,push}\n                        The stage during which the hook is fired. One of\n                        commit, commit-msg, manual, push\n[...]\n\u276f pre-commit run --hook-stage manual prmd\nprmd.....................................................................Passed\n```\nand silence for other stages \ud83d\ude03 . Makes sense, thanks again!. ",
    "hartwork": "Can this ticket be renamed to include Alpine and musl in the title?. ",
    "KevinHock": "Good point, I'll do it that way, thanks @asottile \ud83d\udc4d . Sure thing, happy to contribute :). Great working with you, you should checkout https://github.com/python-security/pyt if you like contributing to OSS ;). Sure, I can do that \ud83d\udc4d . Sure thing. (re: regression test). I get this as well, on Linux. I can't give steps to reproduce though.. Since it doesn't match my use-case I'm not very motivated to, to be honest. We can make an issue for future improvement though, and tag it good-first-issue or something.. \ud83d\udc4d . as in the following?\npython\n        if is_local_repo(repo_config) or is_meta_repo(repo_config) or (repo and repo != repo_config['repo']):\n            output_repos.append(repo_config)\n            continue. Okay, will do.. ",
    "s-pace": "Glad to help.\nCongratulations, your search is now ready!\nI've successfully configured the underlying crawler and it will now run every 24h.\nYou're now a few steps away from having it working on your website:\n- Copy the following CSS/JS snippets and add them to your page\n<!-- at the end of the HEAD -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.css\" />\n<!-- at the end of the BODY -->\n<script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js\"></script>\n<script type=\"text/javascript\"> docsearch({\n  apiKey: '5f052a6b9f5c2b81614512796afa7000',\n  indexName: 'pre-commit',\n  inputSelector: '### REPLACE ME ####',\n  debug: false // Set debug to true if you want to inspect the dropdown\n});\n</script>\n\nAdd a search input if you don't have any yet, and update the inputSelector value in the code snippet to a CSS selector that targets your input field.\nOptionally customize the look and feel by following the DocSearch documentation (https://community.algolia.com/docsearch/documentation/)\nYou can also check your configuration in the github repo (https://github.com/algolia/docsearch-configs/blob/master/configs/pre-commit.json). Feel free to open pull requests!\n\nFeel free to get back to us if you have any issues or questions regarding the integration.\nWe'd also be happy to get your feedback and thoughts about DocSearch - so we can continue to improve it.\nLet us know if you need anything. ",
    "mstrap": "\nIt should be reporting (in my case) /private/var/folders/7x/97jnmnt13sl46bx2mc9chzpm0000gn/T/AppTranslocation/E271C7D6-EE94-4454-BE6B-3312DF6FC51D/d/SmartGit.app$ ./Contents/Resources/git\n\nSeems like your post is truncated?. For SmartGit, we just take a clean OSX Git bundle and repack it, so I guess when replacing SmartGit's bundled Git with your system Git (by copying over to the SmartGit folder), you will still see the unexpected --exec-path. I would guess this is because Git executables are searched on the PATH. Setting GIT_EXEC_PATH for SmartGit will probably help.. I don't have enough understanding about GIT_EXEC_PATH yet. PATH is definitely a configuration problem on the system. Usually, if such errors occur, reason is that /usr/local/bin is added to the PATH in some ~/.profile which will only be read by apps started from the terminal. For solutions see here: https://stackoverflow.com/a/3756686\n. Regarding GIT_EXEC_PATH, it's set by SmartGit on OSX when invoking \"git\", if it's not already defined. \nSmartGit will log details in log.txt if you set system property log4j.q.exec=DEBUG.\nCan't you see that GIT_EXEC_PATH in your hook?\nOne more note: please move your SmartGit.app to the trash and extract freshly to /Applications to get rid of /private/var/folders/7x/97jnmnt13sl46bx2mc9chzpm0000gn/T/AppTranslocation/9148D7E1-4EDE-4A58-84F6-69E930D38B91/d/SmartGit.app/Contents/Resources for PATHs.. SmartGit won't remove components from the PATH, so if the PATH is correct already, then there should be no problems. SmartGit will log all environment variables it has been started with to log.txt.. @asottile did you try the launchctl setenv approach from the SO-posting?. > I certainly think it should. If SmartGit is a thin wrapper around git, it should probably be running git (a cli tool) in an environment that a cli tool would normally be run in (with /usr/local/bin on the PATH)\nDo you have a suggestion on how to do that, given that SmartGit itself is launched with different environment variables than command line Git?. @revolter did you eventually get SmartGit running, using the various mentioned workarounds? If so, what did you finally do?. @revolter unfortunately I'm a little bit lost about what your configuration currently looks like: which Git executable do you have configured in the Preferences now? Did you apply any configuration changes to SmartGit now?\nWhen starting SmartGit from terminal, does it work? If not, please apply suggestions from @asottile:\nexport PATH=path/to/their/bundled/git:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n\nand if this doesn't help, also:\nexport GIT_EXEC_PATH=path/to/their/bundled/git\n\nIf that does not work, try to configure the system Git in the Preferences and start SmartGit from terminal (so all relevant binaries will be on the PATH).\n. ",
    "gnustavo": "Hi. I found this thread while I was trying to know why my pre-commit hook wasn't being invoked by a git-revert. I see now that it isn't. But I'm compelled to offer an example where it would be nice to be.\nReverting normal commits isn't such a big deal. But reverting a merge commit is,  as you can read from the horse's mouth himself.\nSo, I have a hook to detect commits trying to revert a merge and to deny it. It's mostly important as a pre-receive hook, but I usually make my hooks work the same as a pre-receive and as a pre-commit hook so that I can detect problems at commit time and not only at push time.\nSo, I think it would be useful for a git-revert to invoke the pre-commit hook too.\nJust my two cents.. Oops. Let me correct myself. Since my hook detects revert commits by the contents of their log messages the pre-commit is of no use. I have to use the commit-msg hook instead, which is also not invoked by git-revert. In fact, git-revert seems to invoke the post-commit hook.\n. ",
    "orenmazor": "I'm thinking something like this (just tested it locally)\nhttps://github.com/orenmazor/pre-commit/commit/ac07e957d78bf4960620a0cf997408bf19e3fb16?diff=unified\nbasically switching the default from all-files to what changed between master. all files just takes too long for us. ",
    "perobertson": "The other time it runs all files is after a rebase and force push.. The update did seem to fix one of the errors I was running into before. Now if I am pushing a new branch to  a fork, it is only checking the files I pushed. Ill keep trying it out to see if there are other edge cases.. There are a few problems here. \n- It assumes there is a local branch called master\n- If there is a master how do we know its up to date with the remote?. Would it make more sense to change this to git rev-parse --verify \"$first_ancestor~1\" >/dev/null since first_ancestor is set to the sha of the first commit that is not in a remote branch. That way we can leave the --all-files case for when its a new repo being pushed to a remote for the first time.. ",
    "jurko-gospodnetic": "Issue seems to be a race condition in what I assume are different packages attempting to remove some temporary folder.\nAfter many repeated attempts with similar errors, it succeeded once.\nThen it was still failing but I could get it to work every time by changing the _rmtree_unsafe() function in z:\\.tox\\fix-lint\\lib\\shutil.py  to add except FileNotFoundError error handling:\n```\nversion vulnerable to race conditions\ndef _rmtree_unsafe(path, onerror):\n    try:\n        print('zzz: path exists:{}'.format(os.path.exists(path)))\n        if os.path.islink(path):\n            # symlinks to directories are forbidden, see bug #1669\n            raise OSError(\"Cannot call rmtree on a symbolic link\")\n    except FileNotFoundError:\n        return\n    except OSError:\n        onerror(os.path.islink, path, sys.exc_info())\n        # can't continue even if onerror hook returns\n        return\n    names = []\n    try:\n        names = os.listdir(path)\n    except FileNotFoundError:\n        return\n    except OSError:\n        onerror(os.listdir, path, sys.exc_info())\n    for name in names:\n        fullname = os.path.join(path, name)\n        try:\n            mode = os.lstat(fullname).st_mode\n        except OSError:\n            mode = 0\n        if stat.S_ISDIR(mode):\n            _rmtree_unsafe(fullname, onerror)\n        else:\n            try:\n                os.unlink(fullname)\n            except FileNotFoundError:\n                return\n            except OSError:\n                onerror(os.unlink, fullname, sys.exc_info())\n    try:\n        os.rmdir(path)\n    except FileNotFoundError:\n        return\n    except OSError:\n        onerror(os.rmdir, path, sys.exc_info())\n```\n. playing around with it now to see what else I can find there... but there is no external temp file cleanup going on there\nhowever, I can tell you I've had no other such failures anywhere else ever...... ",
    "gganeshan": "\n@gganeshan just checking in again :) does this make sense to you?\n\nThanks a lot @asottile for your prompt response.\nYeah it makes sense, but I was hoping this could behave like a CLI container.. ",
    "dwicao": "@asottile yeah I'm on macOS, sorry but I really don't know how to reproduce the deadlock. ",
    "bagerard": "OK, I'll do a PR in isort and hope it will be integrated. I agree that it should be in isort anyway. I actually started looking at reorder_python_import first, but then switched to isort due to https://github.com/asottile/reorder_python_imports/issues/8\nThanks for the quick feedback!. That's very nice of you but I was interested in implementing that (minor) feature. I just opened a PR in isort, let's see if it gets accepted. Sorry for the late reply and thanks for the detailed feedback.\nI understand your point of view and feel the same about 'warning fatigue'. Last thing I want is that my team ignores messages or start bypassing pre-commit's. I still personally believe that if it is used sparingly/smartly, it could be valuable.\nThe use case I had in mind was having like a very short list of flake8's checks enabled like:\n- flake8's complexity check\n- E721 do not compare types, use \u2018isinstance()\u2019\n- E711 comparison to None should be \u2018if cond is None\nThose are checks that are optional and that could point out false positives. Knowing our codebase, those checks would only rarely print warnings. If it would start printing things all the time, we'd re-consider it indeed.\nI'll discuss it with my team members and get back to you shortly.. @asottile I discussed with my team members and they had the feeling that it could be valuable as well if used sparingly. May I ago ahead and work on a PR?. \nThanks!. Thanks @asottile for the immediate review. Should I do a PR to document the flag in pre-commit.github.io ?. Indeed I should have thought to run pre-commit on pre-commit :) Here you go. ",
    "pescobar": "thanks @asottile , now it works :)\nI thought about adding the .eb extesion to the identify project but this extension is only used in the easybuild project for \"easyconfigs\" so I think your solution is simpler and works fine.\nThanks!. ",
    "antonbabenko": "Thanks for the explanation. I am fine with the little overhead when running the same hook over the same directory.. ",
    "ikonst": "To clarify above, \"by default\" means \"unless you specify -s max-chars\".. ",
    "georgeyk": "hey @asottile,\ncygwin seems to set 32kb (https://cygwin.com/git/gitweb.cgi?p=newlib-cygwin.git;a=blob;f=winsup/cygwin/include/limits.h;h=3550c4fcb82589062b410b4f9b0c4e5fa09eb2e8;hb=28ecec475ff423b368bcca329f42cfed29308d61#l173)\nSo, should pre-commit/xargs implementation consider a value between 32k and 128k (+ 4kb minimum) ?\nAnother refactor in pre-commit/xargs.py is to stop using str length and use the \"lenght\" in bytes.. Here's summary (just for future reference) https://blogs.msdn.microsoft.com/oldnewthing/20031210-00/?p=41553/\nI was looking xargs code and they do a lot of things to compute the correct value. Maybe we could take a shortcut ?\nSomething like:\n```python\nimport os\nimport sys\ndef _get_max_arg_length():\n    headroom = 2 * 1024\n    min_arg_length = 4 * 1024\n    initial_max_arg_length = 128 * 1024\nif sys.platform == 'win32':\n    initial_max_arg_length = 32 * 1024\n\nmax_arg = initial_max_arg_length - sys.getsizeof(os.environ) - headroom\n# xxx: sys.getsizeof just to illustrate the idea\n\nreturn max(min_arg_length, max_arg)\n\n. Just one more thing. the output of `xargs --show-limits`:\nPOSIX upper limit on argument length (this system): 2088635\nPOSIX smallest allowable upper limit on argument length (all systems): 4096\nMaximum length of command we could actually use: 2082166\nSize of command buffer we are actually using: 131072\n```\nSo, SC_ARG_MAX is 2088635 (200k), should we use the maximum value possible or consider 128k as \"safe-limit\" ?. hey @asottile,\nCan I pick this one to work on ?. From the description: end-of-file-fixer uses files: [text] which will exclude the .activate.sh symlink\nThis actually describes the types filter, right ?. Thanks @asottile I'll take a look o/. Thanks.\nI'll fix the errors reported later and check modern.ie (timeout right now). Yea, noticed.\nIt's ok to use half of limit when on win32 + narrow unicode ?\nIn that case, probably I just need to increase _max_length=30 (failing test).. > But, windows apis are UTF16 (really when converting arguments above, pre-commit should probably be using UTF16 maybe?)\nIs this true for most of windows versions ? If so, I think it would be ok.\nIf not, maybe we can find this set on sys.stdout.encoding or leave it hardcoded.\nAlternatively, we can set 8k for win32. The performance impact seems to be minimal, though.\nAnother detail, as we discussed in https://github.com/pre-commit/pre-commit/issues/691 we are never going to reach 32k (I mean, limit will be 32k - environ - headroom).. It also appears that the environ headroom requirement doesn't apply on windows\nYes, but I thought it would be ok to apply it anyway, but that's part 2.\nFor the python2 mojibake, maybe it should be a known limitation, just as it is now.\nPython2 will be maintained for ~1y, are you planning to keep supporting it ?. ",
    "pablo-the-recurlian": "Not sure of what would be the best format but a log file that contain the following information would be very helpful:\ndatetime, hostname, user, file path, file, plugin repo, plugin version/sha, plugin, git stage, result. ",
    "Kilo59": "@asottile Do you know of a way to configure pre-commit to always run with --verbose when it's triggered by an actual git commit?. @asottile do you have any suggestions for how I might get started adding this feature?\nLove the project btw.. Sorry, should have been more clear. The \"verbose during git commit\".. ",
    "amelio-vazquez-reina": "Thanks @asottile If you don't me asking, why does pre-commit use virtualenv? (i.e. why does it need a virtual environment). Thanks @asottile Makes sense. I wonder if:\n\n\nthe creation of an isolated environment should be an option (one could technically choose to activate an environment before using pre-commit)\n\n\nwe could make the use of conda environments an option (instead of virtualenv). For example, the presence of conda is detectable and one can alternatively add this to a config file. I mention this because technically and one can pip install packages within a conda (isolated, also at the user level) environment. If you point me to the relevant part of the code, I may be able to help\n\n\nDoes that make sense? \n. Great news! Thanks @nicoddemus! and @asottile !. ",
    "nicoddemus": ":+1:. Sure thing, done: #746. Great, thanks! \ud83d\ude01 . Cool, thanks!. Hi @asottile,\n@dawelter2 is my colleague, in fact I wrote the original post from his computer. \ud83d\ude01 \nYou are right, none of those 3 methods work in a computer with just conda installed.\ntox works fine in this setup though, so perhaps extending pre-commit to do the same might fix this. Although, looking at the code:\npython\nif envconfig.basepython == \"python{}.{}\".format(*sys.version_info[0:2]):\n    return sys.executable\nThis won't work if a user specifies basepython = python3 because it will try to check against python3.6 in a Python 3.6 installation. Perhaps adding a new last step:\npython\nif envconfig.basepython == \"python{}\".format(*sys.version_info[0]):\n    return sys.executable\nWould help in that case?. @asottile weird, we get the same error... looking at your code it should work. We are using python 3.6.5 here.. Sure:\n```python\nimport sys\ndef _sys_executable_matches(version):\n    if version == 'python':\n        return True\n    elif not version.startswith('python'):\n        return False\ntry:\n    info = tuple(int(p) for p in version[len('python'):].split('.'))\nexcept ValueError:\n    return False\n\nreturn sys.version_info[:len(info)] == info\n\nprint(_sys_executable_matches('python3'))\nprint(_sys_executable_matches('python3.6'))\n```\n```\n(.env) \u03bb python --version\nPython 3.6.5 :: Anaconda, Inc.\n(.env) \u03bb python foo.py\nTrue\nTrue\n```\n\ud83d\ude1e \n. \n```\n(.env) \u03bb python                                                                                   \nPython 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)] on win32 \nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.                              \n\n\n\nfrom pre_commit.languages.python import _get_default_version                                  \nprint(_get_default_version())                                                                 \ndefault                                                                                             \n```. Awesome, thanks for the quick response! \ud83d\ude01 . Ahh should have made a better search, sorry!\n\n\n\nThanks, worked like a charm! \ud83d\udc4d . ",
    "fruch": "I had this in mind, I have multiple plugins in use, ill need to do that for\nall of them.\nalso what would happen if I don't. have one of the versions install ?\npre-commit would fail ?\n. Yes, that I would have to keep separated config for the different versions.\nOr in multiple files, or multiple sections in the same one (but than I'll need both interpreters available for all my users ). ",
    "honeycombs2000": "Yes, that's it.\nOn Feb 18, 2018 at 10:21 PM, notifications@github.com> wrote:\nI'm not sure how your project is set up, but assuming you have the Python 3 files separate from the Python 2 files, what if you ran linters (in this example, flake8) on the files separately?\nrepos:\n-   repo: https://github.com/pre-commit/pre-commit-hooks.git\n    sha: v0.9.1\n    hooks:\n    -   id: flake8\n        name: flake8 (Python 2)\n        # Adjust as necessary\n        files: ^py2/\n        language_version: python2.7\n    -   id: flake8\n        name: flake8 (Python 3)\n        # Adjust as necessary\n        files: ^py3/\n        language_version: python3.6\nThere's also the exclude key which you could use instead.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHubhttps://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpre-commit%2Fpre-commit%2Fissues%2F705%23issuecomment-366598396&data=02%7C01%7C%7C47027ceec75c4ad92e9708d57760fa5b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636546180750863156&sdata=v58oG%2B3i9sGFgzo1mh5L9aqchKqSTdeH95l5%2B%2F5EmiE%3D&reserved=0, or mute the threadhttps://eur03.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAhMBdwNE4VMybMBjJmwRGXd1N__G3GPsks5tWRLYgaJpZM4SKEoO&data=02%7C01%7C%7C47027ceec75c4ad92e9708d57760fa5b%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636546180750863156&sdata=TZbtg1AC5XzPNBV5L%2B%2FjSyxxSb42UJG5DVHihSOXEvs%3D&reserved=0.\n. ",
    "tilboerner": "Thank you for your quick and very comprehensive answer! I concur with the philosophy of having very fast hooks; but the test \"suite\" I want to run here is over in the blink of an eye, and in this case it might as well be part of the pre-commit checks. The more gets caught before CI the better.\nGood point about not disappearing the untracked files of the general public -- there are various reasons why people might not appreciate that.\nThanks as well for the pointers concerning implementation. Using a temporary .coveragerc would work, although, I think, at the expense of being able to keep the coverage configuration together with others in setup.cfg. Also, it would be nice if the hook could detect --all-files and not exclude untracked files in that case. \nBut these are minor inconveniences; your suggestions should work. I might also decide that I can live with manually moving untracked files out of the way in the rare moments when it is necessary. Although I must say, it would be very handy to be able to automate it in a more robust way.\nI still have the suspicion that \"stash untracked\" and .gitignore should be the obvious choices to handle a situation like this, and if they aren't, not in general, then there must be room for improvement in these tools themselves or how we're using them. But then again, that's not necessarily part of this ticket or even this project. :)\n. ",
    "JohnLyman": "Great.  Thanks for the quick response!. ",
    "lynshir": "There's no problem with the MAC. I don't know how to fix it.. This is what I get from smartgit(the same as sourcetree ) ,i don't know why\n\nC:\\egenie-frontend> git.exe add --force -- dev\\static\\js\\aftersale\\aftersale.js\nC:\\egenie-frontend> git.exe commit --file=C:\\Users\\lynsh\\AppData\\Local\\Temp\\smartgit-3324286294966613101tmp\\commit-5273000383387736776.tmp -o -- dev\\static\\js\\aftersale\\aftersale.js\n'.' \ufffd\ufffd\ufffd\ufffd\ufffd\u06b2\ufffd\ufffd\ufffd\ufffd\u2cbf\ufffd\ufffd\ufffd\ue8ec\u04b2\ufffd\ufffd\ufffd\u01ff\ufffd\ufffd\ufffd\ufffd\u0435\u0133\ufffd\ufffd\ufffd\n\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u013c\ufffd\ufffd\ufffd\npre-commit: \npre-commit: We've failed to pass the specified git pre-commit hooks as the lint\npre-commit: hook returned an exit code (1). If you're feeling adventurous you can\npre-commit: skip the git pre-commit hooks by adding the following flags to your commit:\npre-commit: \npre-commit:   git commit -n (or --no-verify)\npre-commit: \npre-commit: This is ill-advised since the commit is broken.\npre-commit: . pacage.json\n\"scripts\": {\n    \"lint\": \"./lint.sh\"\n  },\n  \"pre-commit\": [\n    \"lint\"\n  ]\n\nlint.sh\n\n!/bin/bash\ngit stash -q --keep-index\ngit diff-index --cached HEAD --name-only --diff-filter ACMR | egrep '.js$' | xargs $(npm bin)/eslint\nRESULT=$?\ngit stash pop -q\n[ $RESULT -ne 0 ] && exit 1\nexit 0. well , thank you very much. \n",
    "jdswensen": "I'm trying to develop a repo of my own hooks and I want to run one of the hooks I'm developing on the repo itself. . I have looked at both of those, my problems with those are:\n\ntry-repo assumes the code checked in to github already functions and exists. It also looks like its aimed more at testing an existing hook repo before adding the configuration to a project\nI got this error when I tried with the local directory\n$ pre-commit try-repo ./\n[INFO] Initializing environment for ./.\nAn unexpected error has occurred: CalledProcessError: Command: ('/usr/bin/git', 'clone', '--no-checkout', './', '.')\nReturn code: 128\nExpected return code: 0\nOutput: (none)\nErrors: \n    fatal: repository './' does not exist\nrepo: /path/to/repository would result in me hardcoding my local path on a public repo\n\nI guess my confusion is related to the self referencing nature of the hooks. For example in the pre-commit-hooks config, is there any design/architectural/design reason that repo: https://github.com/pre-commit/pre-commit-hooks couldn't change to say repo local instead of the github URL? If you are already self referencing, you would want to be using the latest changes, right?. \"$PWD\" works, \".\" did not. I can open another issue if you want.\nAhh, cool. What about the case where I'm developing these on an island and have no access to github? :). Fair point. Even if I add a local filepath, I'm going to just use the path to where ever the repo is stored on my local filesystem (but now I need to specify a revision). I assume this is why local was developed in the first place. I think using local simplifies things when setting up a hook repo, cloning it, forking it, or moving it to another location. . I'm not expecting local to clone anything, that's why I wanted to use it. My concern is that if I want to develop a shareable pre-commit hooks repo, I'm required to specify a central repo location (git url or file system location) in order to use the hooks in that repo, on that repo. If my code was in /home/user/loc1 and moved it to /home/user/loc2, I would need to go change the config. Same if I moved from Github to Bitbucket or VSTS. Basically, if I wanted to move/push my code to several different places at the same time, all of those places would be referencing a single location instead of the repo itself.. My world won't come to an end if local isn't intended to be used this way. I just ended up repeating the pre-commit-hooks definition in the -config definition. It seemed redundant, which is why I opened the issue. If you're not planning to use it this way, that's ok too. I can close the issue if that's the case.. I was expecting this to work:\n.pre-commit-config.yaml\nrepos:\n-   repo: local\n    hooks:\n    -   id: local-id\n.pre-commit-hooks.yaml\n-   id: local-id\n    name: <name>\n    description: <Description of local-id>\n    entry: path/to/local-id\n    language: <language>\n    files: <files>\nSimilarly, I would expect that the pre-commit-config.yaml from pre-commit/pre-commit-hooks would utilize local since it references scripts that are in its own repo. Like this:\nrepos:\n-   repo: local\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: autopep8-wrapper\n    -   id: check-docstring-first\n    -   id: check-json\n    -   id: check-yaml\n    -   id: debug-statements\n    -   id: name-tests-test\n    -   id: requirements-txt-fixer\n    -   id: flake8\n-   repo: https://github.com/pre-commit/pre-commit\n    rev: v1.7.0\n    hooks:\n    -   id: validate_manifest\n-   repo: https://github.com/asottile/reorder_python_imports\n    rev: v1.0.1\n    hooks:\n    -   id: reorder-python-imports\n        language_version: python2.7\n-   repo: https://github.com/asottile/add-trailing-comma\n    rev: v0.6.4\n    hooks:\n    -   id: add-trailing-comma\n-   repo: meta\n    hooks:\n    -   id: check-hooks-apply\n- id: check-useless-excludes. However, since local expects a name and a few other tags, I ended up in this situation:\n.pre-commit-config.yaml\nrepos:\n-   repo: local\n    hooks:\n    -   id: local-id\n        name: <name>\n        description: <Description of local-id>\n        entry: path/to/local-id\n        language: <language>\n        files: <files>\n.pre-commit-hooks.yaml\n-   id: local-id\n    name: <name>\n    description: <Description of local-id>\n    entry: path/to/local-id\n    language: <language>\n    files: <files>\n. Would you need to install them? For shell scripts I know you could just run from the local entry point, but if you need to generate a binary executable, you could create a .cache folder in the .git folder (or create one in the project root and add it to gitignore). I could see disadvantages with that if you needed to regenerate after each commit. Hmmm..... I suppose you could make the rev tag optional for local to avoid regenerating every time. If it is omitted, you regenerate with the most recent commit hash.. I completely understand, once I started digging into the other language operations it became clear why you designed things the way you did. Thanks for the patience and detailed explanation.\nAnd yeah, I mostly write software for embedded Linux systems and microcontrollers, so I'm use being the uncommon case for things.. ",
    "jhg03a": "I'm not sure what you have access to in the pip environment, but you could either use the incoming git changeset or a simple file hash comparison to know if the environment needs a refresh.. The use case is writing simple python scripts.  I use requirements.txt to manage my package import versions presently.  Some use regular pip package names, while others use a full git+URL format.. Unfortunately no, if I use your example with the mirrors-pylint repohook it's looking in the wrong place for the requirements.txt.. It would be relative to the pylint repo instead of the repo to which pre-commit is being applied.. With regard to pylint specifically, without setting the additional_dependencies it will fail to locate some of the script imports and fail the pre-commit run.. ",
    "hwright": "Thanks for the response!\nSince it's been requested before, perhaps putting this trick in a more discoverable location would be useful?. ",
    "RonnyPfannschmidt": "@asottile while this one as is has gotten closed something else came to my attention while working on a project like this myself\ni'd like to track the configuration of python hooks all at once at a meta repository that is versioned, so i can track updates centrally while having a sense on the fixed state of each consumer, so that the users of the meta hooks just update one version number to get on track. @asottile i suppose supporting input from streams is not directly sensible=?. @asottile true in case of doubt tmpfs ftw. @asottile that part needs a little expansion, personally i'd propose setuptools_scm and writing a version file to the package as importation is so much faster than workingset construction and packageset iteration. @asottile im the maintainer there that wrote the suggestion, its generally more useful for packages that do not have import time constraints - for example pytest uses the entrypoint system excessively anyway. ",
    "pydo": "Repro steps\n1. In project repo\n2. pip install pre-commit\n3. pre-commit install\n4. pre-commit\nstep 4  stdout: \n\u256d\u2500user at user-super in /home/user/coding/some_project (master \u271a7\u2026706)\n\u2570(venv)\u2500\u03bb pre-commit                                                                                              0 < 21:22:12\n[WARNING] Unstaged files detected.\n[INFO] Stashing unstaged files to /home/user/.cache/pre-commit/patch1522632201.\n[INFO] Restored changes from /home/user/.cache/pre-commit/patch1522632201.\nAn error has occurred: InvalidConfigError: \n=====> /home/user/coding/some_project/.pre-commit-config.yaml does not exist\nCheck the log at /home/user/.cache/pre-commit/pre-commit.log\nExpected behavior\nMy git repo is restored to it's initial state\nActual behavior\npre-commit craps out because it can't find a commit file\nThanks for the quick reply, and I did notice the tool stored a patch of my uncommited files. I just chose the safest route by restoring a filesystem snapshot.. After checking my logs again I realised that I'm stupid and pre-commit did in fact restore the stash after running. I panicked after seeing the error and accidentally stashed my files.\nmy bad. ",
    "zmitchell": "That does it, thank you!. ",
    "jfroche": "Hello, I was wondering if it would be ok to use the python api for venv (https://docs.python.org/3/library/venv.html#api) instead of calling subprocess ?. @asottile not sure I understand. Do you mean that all functionalities in the venv cli are not present in the api ? \nWhat do you think of an implementation where def install_environment installs an environment with venv api only if language_version ends with +venv ?. ",
    "Lin-Buo-Ren": "Just for the sake of anyone having the same issue.. I found that downgrading the YAML directive from 1.2 to 1.1 fixes the problem.  ~~This is likely due to the different Python runtime being used on Travis CI (which is 2.x and on my local pre-commit venv it is 3.x)~~. I encountered a similar issue as well, here's the log.  This is reproduced in some repos that have implemented some clean filters, with some test cases files intentionally committed uncleaned for testing.\n. ",
    "jasonkuhrt": "Thanks for the tip! It doesn\u2019t have to be a foot gun. For example Black can compare the AST before/after if one is untrustful for some reason. And there can always be checks at the CI level. . ",
    "firba1": "Unfortunately, I don't really. The biggest issue is probably the fact that pip-custom-platform has to be bootstrapped into the virtualenv before it can be used for installation. I wonder if it might make sense to have a separate language profile specifically for using that? I'm spitballing here.. Nope, I wasn't aware of that! However, I would argue that that is still a monster regex and this would be easier to understand/maintain.. Docs for both of these https://git-scm.com/docs/git#git-codeGITSSHcode\nCode where pre-commit only allows GIT_SSH: https://github.com/pre-commit/pre-commit/blob/46ae88c1f06b8dc59f3e049c68b2dcea22bb9a54/pre_commit/git.py#L32. As for use case, I'm using this to point at a weirdly-placed ssh key.. There's a lot of complex other reasons I can't really use ~/.ssh/config. I'll cut a quick branch for this.. yep lol. ",
    "dspechnikov": "Yes, I've finally found this workaround too. \nWhile it does the job, there are still couple of issues with this approach:\n1. It requires hook configuration duplication across multiple projects.\n2. It feels like a hack :)\nSo I still think allowing environmental variables or entry point overrides would be useful.. Ah, I didn't realize entry can be specified in config for remote hooks as well. That means I can finally satisfy all my strange needs :)\nThanks a lot for your help, feel free to close it if you like to.. ",
    "dcramer": "@asottile thanks will confirm this + args can solve the problem\nit does seem like there might be a better approach though, given configuring log_file I'd have to configure default args, which means these would always dump these files somewhere.. This will work for now though I can see some cases where running pre-commit with different config/args would be useful.. @asottile yeah -- to some degree Im using responses and getsentry/zeus as test beds for what we might be able to apply more largely in Sentry's projects. Also related PR for Zeus: https://github.com/getsentry/zeus/pull/116/commits/3df65bb37b7caa8e1472cfd6a29ca841b07f2cea. ",
    "wxrdaniel": "The pip isntall 'cached-property<1.4' solved the issue.. ",
    "mattlqx": "Thanks for the quick reply.\ndefault_stages so you can specify what the default is for hooks that aren't explicit does sound like the easiest path and resolves my concerns. I hope for it in a future release.. ",
    "curlywurlycraig": "This was very helpful, thanks @asottile! I must have missed that in the documentation. This has fixed my issue.. ",
    "jdufresne": "Hi @asottile. Thanks for creating and maintaining pre-commit. I find the tool very useful. Would you be willing reconsider allowing a \"one at a time\" feature?\nI completely agree that these CLI tools are misbehaving and should accept more than one filename at a time. However, I think we could take a Zen of Python \"practicality beats purity\" approach here. Unfortunately, pre-commit doesn't have enough influence to whip these misbehaving CLI tools into shape. Apparently, not even xargs does as some maintainers even defend this practice. As new tools are being created all the time, it seems that fixing every misbehaving tool will be much more work than adding a workaround feature to pre-commit.\nMy team recently ran into this with the tool, php-cs-fixer. Here, you can see them stating they won't allow multiple file paths:\n\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/pull/1903#discussion_r114061746\nhttps://github.com/FriendsOfPHP/PHP-CS-Fixer/issues/2390#issuecomment-266567608\n\nIf pre-commit were to have a \"one at a time\" option, my team could work around this. Without this option, I'm left to run the tool across the entire project when a single PHP file changes.\nIf I were to create a PR would it be reviewed and considered?\n. ",
    "ranimufid": "thanks for your prompt response @asottile. \nContext:\nI'm trying to encrypt some ansible secrets using git-crypt. I'm also doing ansible-lint as a pre-commit hook.\n\nit appears from the output that you committed with an unstated change\n\nThe change which triggered the error is creating an empty file /hosts/testing/secret-vars.yml with a corresponding entry in .gitattributes\n.gitattributes\nhosts/testing/secret-vars.yml filter=git-crypt diff=git-crypt\n\nto which file was that and if possible could you share the patch file mentioned\n\nThe patch file corresponding to the above change\n```\ndiff --git a/hosts/testing/secret-vars.yml b/hosts/testing/secret-vars.yml\nGIT binary patch\nliteral 0\nHcmV?d00001\nliteral 22\nsaefs@_sfdsfsdfsdf?>t6Gdv(psdfsdfsdfsf345`ISOHcp2nGNE\n```\nDo let me know if you need further info. This is how i've worked around it for the time being:\n```\ntouch hosts/production/secret-vars.yml\necho \"#prod vars\" >> hosts/production/secret-vars.yml\ngit add hosts/production/secret-vars.yml\ngit commit -m \"add production secret vars\"\necho 'hosts/production/secret-vars.yml filter=git-crypt diff=git-crypt' >> .gitattributes\ngit add .gitattributes\ngit commit -m \"add production secret vars\"\ngit push\n```. ",
    "domenkozar": "Thank you!. ",
    "kringol": "Great, that seems to have done the trick at least on one of the tested windows installations. Will try on the other one soon\nThanks ;). Confirmed that so far it worked on multiple cases! \nThanks for the suggestion and cheers ;). ",
    "expobrain": "Argh, missed that! Let me check for alternatives. pushd: \nnow that you mention that I'm surprise as well. My untested theory is that Travis creates the directory in cache->directories ahead of time so pushd is not failing.. wget:\nyou mean storing the hardcoded checksum for the Swift tarballs in the script and check them at runtime? Can do it, probably a little paranoid-ish but still a good point. ",
    "aexvir": "Yes, you are right. In that case the syntax: \nyaml\n- repo: local\n  hooks:\n    - id: format\n      name: code-formatter\n      language: docker_image\n      entry: --entrypoint binary image:latest --parameter 120\nIs also valid.\nI tried and it works fine...\nI'm closing this. ",
    "rico-chet": "\npre-commit run takes a --hook-stage argument\n\nThis is seriously under-documented, I've been trying to run my gitlint hooks on existing commits and by luck, @ssbarnea had the same problem.\nBy the way, did you manage to run gitlint on a range of commits provided via --source and --origin parameters via pre-commit?. I've been looking at pre-commit run [hook-id] [options] and it wasn't there. The web page is the primary source of documentation for me currently.\nAnd the place you linked to only mentions stages: [manual], so who would guess that this applies to commit-msg too?\nAlso, pre-commit run options' descriptions only make sense in context of certain hooks, so this is also worth improving.\nAs a pre-commit beginner, I don't believe I can make good PRs for the docs ^_^. You're right, it's the default git behavior with the commit-msg hooks which have to take care of the rejected content on their own. Apparently, it takes a backup file and a prepare-commit-msg hook to make the rejected message re-appear. Looks like a new feature request for pre-commit, right?. ",
    "mblayman": "The negative logic sort of melts my brain, but it seems to work so I updated my PR as you requested. \ud83d\ude04 . Hmm... this is probably a super edge case, but I guess if you had some config like:\n- id: some_hook\n  stages: ['manual']\nand ran something like pre-commit run --hook-stage commit some_hook, it would fail to run some_hook. Does that sound right?. No problem. I was scratching an itch for work so I'm happy to help.. ",
    "s0undt3ch": "Thank you for looking into it. Thanks!. Planning on releasing soon?. Awesome!. ```yaml\n\nrepo: https://github.com/adrienverge/yamllint.git\n  sha: v1.12.1\n  hooks:\nid: yamllint\n  files: '.(yml|meta|mta)$'\n  types: [files]\n\n\u276f pre-commit run -vvvv --files salt/locke/system/user/win_uiaccess_apps_elevation.meta salt/locke/system/user/win_uiaccess_apps_elevation.mta salt/locke/system/user/win_uiaccess_apps_elevation.yml   \nAn error has occurred: InvalidConfigError:\n==> File /home/vampas/projects/SaltStack/console/lock/features/pre-commit/.pre-commit-config.yaml\n==> At Config()\n==> At key: repos\n==> At Repository(repo='https://github.com/adrienverge/yamllint.git')\n==> At key: hooks\n==> At Hook(id='yamllint')\n==> At key: types\n==> At index 0\n=====> Type tag 'files' is not recognized.  Try upgrading identify and pre-commit?\nCheck the log at /home/vampas/.cache/pre-commit/pre-commit.log\nDoesn't work.... Should be `file`:yaml\n\n\n\n\n\nrepo: https://github.com/adrienverge/yamllint.git\n  sha: v1.12.1\n  hooks:\nid: yamllint\n  files: '.(yml|meta|mta)$'\n  types: [file]\n```\nThis works. Thanks!. Should I have seen this somewhere in the docs?. I'm setting those.\nThe issue was that pyenv was being kind of picky but I solved it.\nThanks!. I have read most of that and linked issues, and, honestly, nothing dramatically changes by supporting requirements files.\nI know this implementation also takes into account options, but that could be stripped out.\n\n\n\nOnce the requirements files are pre-processed, pre-commit works exactly as it did before, detecting changes requiring re-installation, invalidating cache, etc.\nThe idea for us to start using pre-commit is to remove env setup from developers required tasks and also to make sure everyone runs the exact same setup, so, your local or system suggestion is not actually a suggestion to us.\nHonestly, I'm not seeing why the tool needs to be shortsighted...\nGot any more details as to why translating a requirements file into a requirements list is such a blocker?. I must confess that at first I was a bit upset you rejected the feature but you did make valid points and also ended up pointing me in the right direction.\nI found a way to achieve my goal.. Does pre-commit have a FAQ or a recepies section?\nI don't mind sharing my solution to avoid having you repeat yourself or users like me to just do the work without knowing the reasons why its not supported.\nEventually I might find the time to release it as a pre-commit hook.. I don't have a problem asking my fellow developers to use your suggestion.\nThe same I cannot say about our community...\nI remembered a good option, alias.\nDon't worry, I'll put in the work and you'll guide me if I go to astray :). :tada:. Refs #886 . > I reviewed this, it's simple enough, but I'm still not convinced it's necessary if we already have a way to do this that works\nWe'll, we don't really support this, unless you call it twice, with different config file as you suggested on the issue filed.\nPlus, it's a really simple change :)\nI'll address your other review comments and update the PR accordingly.. Updated. Is this more what you had in mind?. hmm, if I follow your suggestion, then tests like test_does_not_reformat fail, because, now, there's a alias  key which defaults to the ID. :. Polite ping.\nYeah, I know it's the holidays and it can surely wait until next year :). > SKIP is not handled properly, it's also unclear the \"right\" way SKIP should be handled -- should it exclude both the things?\nIt only makes sense for pre-commit to also skip based on a hook alias. Added support and test.. Thanks!!!. No problem. https://github.com/pre-commit/pre-commit.github.io/pull/196. Got a timeframe for 1.14.0?. updated. :tada: \nThanks!. My OptionalAlias won't a key not a check_fn, that's why I left the key not in (). Fixed.. Fixed.. Fixed.. Done.. This was left over debug that was accidentally committed.. The condition here is that, alias, by default, is an empty string.... hmm, ok, but skips can't be empty strings. OK. I get it.. fixed.. Because 2 occurrences in the code couldn't use your suggestion.\nAnd yes, I also do not like this, but it serves all git commit occurrences.... k, I'll get back to this as time permits.. ",
    "cancan101": "```\npyenv: python3.7: command not found\nThe `python3.7' command exists in these Python versions:\n  3.7.0\n```. ",
    "thomasfowler": "Just adding this here for anyone that comes across this issue.\nWhen you create a virtualenv using, for example, pyenv virtualenv 3.7.0 example_venv, the command python3.7 will not work once that virtualenv is activated.\nIn order to make the command python3.7 work in an activated virtualenv, you need to tell pyenv virtualenv what additional commands too use.\nSo, to correctly setup the virtualenv to work with pre-commit, run the command as:\npyenv virtualenv -p python3.7 3.7.0 example_venv\nThis should resolve the issue reported.. ",
    "BoboTiG": "So, there are still ResourceWarning. But I do not if it is related to this project or third-party one. I will improve the warning logging to add the filename and line number. I will let you know when the PR is OK to review again :). I cannot run test on python -m pytest -l -x -v tests/repository_test.py:\npython\ntests/repository_test.py:66: in <module>\n    @pytest.mark.integration\n../ven36/lib/python3.6/site-packages/_pytest/mark/structures.py:367: in __getattr__\n    self._check(name)\n../ven36/lib/python3.6/site-packages/_pytest/mark/structures.py:383: in _check\n    raise AttributeError(\"%r not a registered marker\" % (name,))\nE   AttributeError: 'integration' not a registered marker\nI installed requirements-dev.txt, do you know what am I missing?. You are right, I had the strict mode activated via the PYTEST_ADDOPTS envar. Removing it worked, thanks.\nSo the patch is now good for a re-review.\nDo you want I open a new PR to purge the use of @pytest.mark.integration, or inside this PR, or we see it is good as is? :). Tests seem OK, Travis is not stable today :)\nLet me know if some change is needed.. Of course!. Nope, it is needed because on Python 3.6 there are a lot of these warnings.. Ah. I just saw the check is not good on Python 3.6:\npython\npython3.6/importlib/_bootstrap_external.py:426: ImportWarning: Not importing directory ~/python3.6/site-packages/aspy: missing __init__\nThere is no .py. I will change that.. Tests are failures on Python 3.7. But the warnings list is not helpful. I updated to patch to have a more human message.. ",
    "1oglop1": "is there any other way how to make pre-commit to install pylint?. ",
    "tmuras": "I've used pygrep to add quick & cheap regexp-based checks for PHP code, for some common mistakes we (developers) do. \nOne example is trying to commit some debug code - say someone leaving in the code execution of the var_dump() function. \nI do not want to check the whole file, I just want to make sure that the code I'm adding is not introducing the new problem.\nWith var_dump it's pretty obvious that it should not be there, but as my list of strings that possibly should be rejected grows - so is the number of false positives growing.\nI work on a project with big files ( > 10k lines in one file) and it's often just few lines we change. With this amount of code you can imagine that any string will appear.\nWith the big projects, partial linting (only a new code) is a reality - whenever I like it or not unfortunately.\nI personally would not worry about conflict resolution case. . ",
    "jbigatti": "Excellent!. I was writing the same thing and my last answer was exactly that: Is this an expected behavior?\nThanks!. ",
    "amirouche": "I just tried on a machine that does not use guix and it works. This is most likely a problem with environment variables that are not taken into account by 'pre-commit' or pre-commit has some expectations regarding .bashrc vs .base_profile.\nAnyway, it's not pre-commit specific. I will close the issue.. pre-commit is very nice.Thanks for sharing.. ",
    "Lordnibbler": "FWIW if this doesnt work:\n``sh\n$ brew postinstall pre-commit --debug\n/usr/local/Homebrew/Library/Homebrew/brew.rb (Formulary::FormulaLoader): loading /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb\n==> Postinstalling pre-commit\n/usr/local/Homebrew/Library/Homebrew/postinstall.rb (Formulary::FromPathLoader): loading /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb\nWarning: The post-install step did not complete successfully\nYou can try again usingbrew postinstall pre-commit`\n==> An exception occured within a child process:\n  Errno::ENOENT: No such file or directory @ realpath_rec - /usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.7\n/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb:31:in realpath'\n/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb:31:inrealpath'\n/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb:31:in block in post_install'\n/usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/2.3.7/lib/ruby/2.3.0/pathname.rb:490:ineach'\n/usr/local/Homebrew/Library/Homebrew/vendor/portable-ruby/2.3.7/lib/ruby/2.3.0/pathname.rb:490:in each_child'\n/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/pre-commit.rb:29:inpost_install'\n/usr/local/Homebrew/Library/Homebrew/formula.rb:1011:in block (2 levels) in run_post_install'\n/usr/local/Homebrew/Library/Homebrew/formula.rb:868:inwith_logging'\n/usr/local/Homebrew/Library/Homebrew/formula.rb:1010:in block in run_post_install'\n/usr/local/Homebrew/Library/Homebrew/utils.rb:523:inwith_env'\n/usr/local/Homebrew/Library/Homebrew/formula.rb:1002:in run_post_install'\n/usr/local/Homebrew/Library/Homebrew/postinstall.rb:16:in'\n```\ntry this\nsh\n$ brew list | grep python\npython\npython3\npython@2\nyou have a messed up old version of python3 from a bad bad time in brew's history\nsh\n$ brew uninstall python3\nnow you should have\nsh\n$ brew list | grep python\npython@2\nall good, reinstall precommit \nsh\n$ brew install pre-commit\nprofit. ",
    "graemedavidson": "Away from comp now but do you mean that the output should not even show\nHook.........passed\nI thought the verbose was at the hook level and hid output of the\nbinary/script not pre-commit\nOn Wed, 5 Sep 2018, 17:58 Anthony Sottile, notifications@github.com wrote:\n\nThat's the default behaviour unless you're using --verbose or verbose:\ntrue\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/823#issuecomment-418804394,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AI6nF5IvBy2b8QJ6G1Lk7L2XluAPtNBTks5uYAK6gaJpZM4WbT8s\n.\n. Ok, so my question becomes a feature request.\n\nOn 5 Sep 2018 18:56, \"Anthony Sottile\" notifications@github.com wrote:\nno, it should always show the passed messaging\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/823#issuecomment-418822945,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AI6nF_H2NHeSbppLCtnv9gCXEtYnp_azks5uYBBXgaJpZM4WbT8s\n.\n. ",
    "aschokking": "I was looking for an option like this (silence the passed hooks) so that there's less noise in my output to scroll through.\nRight now this is causing me to not want to have too many separate hooks setup even if they would be useful.. ",
    "blueyed": "I would (like to) configure this in the config file.. So I assume there is no user config then?\nWhat about an environment variable?. A git config option could be used for this.. @asottile \nAlso sounds good.\nI came up with the following for me:\ndiff\n--- .git/hooks/pre-commit   2019-03-02 15:25:46.671907241 +0100\n+++ .git/hooks/pre-commit.new   2019-03-02 15:25:35.715359949 +0100\n@@ -162,8 +162,23 @@\n def main():\n     retv, stdin = _run_legacy()\n     try:\n+        print('Running pre-commit: ', end='', flush=True)\n         _validate_config()\n-        return retv | subprocess.call(_exe() + _opts(stdin))\n+        ret = subprocess.run(_exe() + _opts(stdin) + ('--color=always',),\n+                             stdout=subprocess.PIPE)\n+        out = ret.stdout.decode()\n+        if ret.returncode == 0:\n+            lines = out.splitlines()\n+            for line in lines:\n+                if line.endswith('Passed\\x1b[0m'):\n+                    print('\u2714', end='')\n+                elif line.endswith('Skipped\\x1b[0m'):\n+                    print('\u2026', end='')\n+            print()\n+        else:\n+            print('\\r', end='')\n+            print(out)\n+        return retv | ret.returncode\n     except EarlyExit:\n         return retv\n     except FatalError as e:. Oh, sorry for missing it - re-open then?. ",
    "lowell80": "I'll give that approach a try.  I don't think I'll hurt too much by moving XDG_CACHE_DIR to a static location.  (Not 100% sure what all uses that directory, but there isn't much running on the destination server.)  One issue I have is that I'm running on a Mac and the server (disconnected) is on Linux.  So even trivial things like case sensitivity and how git does checkout could come into play, let alone binaries, and so on.  I may need to fire up a VM.\nI think I'll also look further into the git url.<base>.insteadOf option as well.  May end up being less data to transfer across into the restricted zone, and while being more work, it seems like a slightly cleaner approach.\nI agree with your thoughts around the pip install pass through options not being sufficient.  (I do tend to forget that there's more than just Python supported.)  The fact that pip's behavior can be controlled via PIP_* environmental variables is probably good enough.  I'm thinking that it may make sense to just permanently set these in the user's profile / bashrc scripts.. ",
    "slochower": "Thanks for the quick reply.\nI first did the installation with conda, which pulled in a new copy of virtualenv. This seems to have fixed the problem (at least, in combination with running virtualenv venv -ppython3.6)!. ",
    "fauust": "Excellent!\nThank you.. ",
    "thisch": "Thx for the investigation! I'll report this upstream.. Your were faster ;) Thx. Let's see if this will be fixed in magit.. ",
    "anithats": "Could you please tell me the right project name that i could use? . ",
    "mmacpherson": "Very cool, thanks much for looking into it so quickly, and for this very useful package.. ",
    "madig": "I use pre-commit with Python 3.7.1 on Windows and it doesn't work :( Is there any way of injecting a newer pip myself somehow?. ",
    "pzelnip": "Perfect, the pass_filenames: false fixed the issue for me.  Thanks!. ",
    "dkolepp": "Your understanding of the scenario is correct.  When dir2/f.py is changed, I actually want to process the dir2 directory.  Ansible-lint can can lint either playbooks, or roles.  A playbook is a single file (this works brilliantly with pre-commit) but roles are grouped by a directory.  The linter, for roles, is expecting a certain directory structure.  The project has both playbooks and roles, and I want to lint both types of artifacts.\nThis helps a great deal - thanks!\n. Yep- free to close. Wanted to tag this as a question but wasn\u2019t sure how to\ndo that.\nOn Wed, Oct 10, 2018 at 12:01 PM Anthony Sottile notifications@github.com\nwrote:\n\nAwesome! Let me know what you come up with :) -- I don't think there's\nanything left here though am I ok to close the issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/841#issuecomment-428630225,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AJrOsfBXF-24ONjq9ccdpnFIoIw4Cw3Lks5ujhnEgaJpZM4XVkq-\n.\n. Thank you for responding to this.  I was able to verify myself as well.  Now having trouble reproducing my original error.  Will let you know if I do.\n\nThanks again for your quick reply!. ",
    "timonbimon": "hmm i tried the seed-isort-config pre-commit hook, but it unfortunately classifies my 'lumi' package as third-party. I thought the fix to this is to hard-code 'lumi' as a 'known_first_party' in isort's settings, but this does not seem to work :( . yup that worked! thanks for the help and sorry for not figuring it out myself ^^ . maybe one more comment: the import sorting now works and the imports look like I want them to aka\n```python\nfrom typing import Any, List, Tuple\nimport google.auth\nfrom googleapiclient import discovery\nfrom lumi.cloud.base import Cloud\n```\nfor some reason 'lumi' still gets added to the know_third_party section after running seed-isort-config\nini\n[isort]\nknown_first_party=lumi\nknown_third_party=click,google,googleapiclient,jsonschema,lumi,tomlkit\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\ncombine_as_imports=True\nline_length=88\nnot sure if this is a bug (the known_first_party seems to take precedence so it works for my purposes) but just wanted to mention this. sure, here are all my configs:\n```\n\u279c cat .pre-commit-config.yaml\n- repo: https://github.com/asottile/seed-isort-config\n  rev: v1.2.0\n  hooks:\n  - id: seed-isort-config\n    args: [--application-directories=lumi]\n- repo: https://github.com/pre-commit/mirrors-isort\n  rev: v4.3.4\n  hooks:\n  - id: isort\n    language_version: python3.7\n- repo: https://github.com/ambv/black\n  rev: stable\n  hooks:\n  - id: black\n    language_version: python3.7\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v1.3.0\n  hooks:\n  - id: flake8\n    language_version: python3.7\n\u279c cat tox.ini\n[tox]\nskipsdist = True\nenvlist = precommit-hooks, py36, py37\n[testenv]\ndescription = run the tests with pytest under {basepython}\nwhitelist_externals = poetry\nskip_install = true\ncommands =\n    poetry develop -v\n    poetry run pytest tests/\n[testenv:precommit-hooks]\ndescription = run our pre-commit hooks - black, flake8\nbasepython = python3.7\ndeps = pre-commit\nskip_install = True\ncommands = pre-commit run --all-files\n           python -c 'import pathlib; print(\"hint: run {} install to add checks as pre-commit hook\".format(pathlib.Path(r\"{envdir}\") / \"bin\" / \"pre-commit\"))'\n[flake8]\nignore = E203, E266, E501, W503\nmax-line-length = 88\nmax-complexity = 18\nselect = B,C,E,F,W,T4,B9\n[isort]\nknown_first_party=lumi\nknown_third_party=\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\ncombine_as_imports=True\nline_length=88\n```\nin case this is relevant as you guessed correctly I'm using a src layout so all my code is in ./lumi/src\nwhen i run \n```\n\u279c tox -e precommit-hooks\nprecommit-hooks installed: aspy.yaml==1.1.1,cached-property==1.5.1,cfgv==1.1.0,identify==1.1.7,nodeenv==1.3.2,pre-commit==1.11.1,PyYAML==3.13,six==1.11.0,toml==0.10.0,virtualenv==16.0.0\nprecommit-hooks run-test-pre: PYTHONHASHSEED='2130502309'\nprecommit-hooks runtests: commands[0] | pre-commit run --all-files\nseed isort known_third_party.............................................Failed\nhookid: seed-isort-config\nFiles were modified by this hook.\nisort....................................................................Passed\nblack....................................................................Passed\nFlake8...................................................................Passed\nERROR: InvocationError for command '/Users/timon/code/luminovo/lumi/.tox/precommit-hooks/bin/pre-commit run --all-files' (exited with code 1)\nthe isort section of tox.ini looks like this afterwards \n[isort]\nknown_first_party=lumi\nknown_third_party=click,google,googleapiclient,jsonschema,lumi,tomlkit\nmulti_line_output=3\ninclude_trailing_comma=True\nforce_grid_wrap=0\ncombine_as_imports=True\nline_length=88\n```. you are the best! thanks a lot!\nI still don't really understand why just hardcoding the known_first_party (without using the seed-isort-config) does not work. it's a little unintuitive i feel (why does the option exist at all?), but i would probably need to dig into how isort really works to understand why that is the case. cool! i just tried the reorder_python_imports (i like the splitting of from imports!) but with the default settings it also did not separate 'lumi' (my only first-party package) into a different section than all the third-party packages. is there any documentation about settings for the reorder_python_imports?. haha maybe a good idea :D \nok thanks a lot for your help, i'm going with the reorder_python_imports, seems to work well! :) . ",
    "prem-nuro": "I think I managed to do it here: https://github.com/prem-nuro/precommit-issue-843/tree/branch1\nAfter creating this branch and locally making commits e4dc2c0b0f738e41eef93b8b77ade9ad25e0bc47 and then 0382965424ea146bef4d7055b58e4570f139d1cf, I push with git push -u origin branch1.\nThen during the pre-push check, test.py outputs notmatching/4. This both misses matching/3 and also violates the restriction in the files attribute in config.. Sure! Give me a bit.. Cool, I confirmed it's getting all the files. The other issue was just me with a faulty regex (I needed to remove a trailing |).. Regarding the current use of ..., I thought you'd need --no-merges or --first-parent or something.\nGood points, here's my attempt at addressing them:\n\ntop level configuration value?\n\nOne option is a per-hook configuration: ignore_branch: [develop]\nAny hooks already aware of special branches don't need them, but we can add them to hooks we haven't authored. I think a simple implementation supporting one special branch or tag is good enough for most use cases. And maybe this option could only have relevant for push stage hooks.\nAnother option is just top level overall.\n\nrefspec?\n\nI think something simpler would be most convenient, matching no-commit-to-branch, hence just develop.\n\neven with a branch name, how would pre-commit know where to generate the diff from?\n\nWe can simplify and just do git diff develop...foo. The diff will grow larger as time goes on, but that's okay. We're totally ignoring the current behavior here, which AFAIK is to just do the diff on un-pushed commits.\n\nwhat if that branch doesn't exist locally?\n\nUse the remote of the current branch's upstream. If it does exist locally, use the upstream version of that branch. Error if it doesn't exist in whatever remote we use.\n\nwhat if that branch does exist locally but is out of date?\n\nI think the ... notation will do the right thing here, if we use the remote upstream instead.\n\nwhat if the fetched version of the remote branch is out of date?\n\nUse the upstream version of the branch.\n\nwhat if someone is pushing to that named branch?\n\nIf pushing to the branch, do the diff with whatever is upstream like origin/develop...develop. Special care for no upstream.\nSummary:\n|                       | Special branch is not local or remote | Pushing to special branch which only exists locally | Pushing to special branch      | Pushing to other branch                                                                                                                         |\n|-----------------------|---------------------------------------|-----------------------------------------------------|--------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|\n| Diff computation      | Error                                 | Everything                                          | develop...origin/develop     | origin/develop...foo                                                                                                                          |\n| Which remote/upstream | Error                                 | None required                                       | Special branch remote/upstream | Special branch remote/upstream if it exists locally. Else, assume it is the same name in current branch's remote. If that doesn't exist, error. |\nAnd to reiterate, I think the use-case here is:\n We pre-push because we want to run a lot of hooks but not on every commit since they're all work in progress until we push.\n Everything's going to be merged into develop eventually, which has varying levels of satisfying each hook as a new one is turned on. So we really care only about the diff with develop, such that any new code will satisfy hooks. This also helps us ignore things like rebasing on develop.. I see. I linked an example repo above: https://github.com/prem-nuro/precommit-issue-860\nmaster is the special branch and foo is the regular one. If you look at the entries in LOG you should be able to follow along, let me know if the entries aren't clear.. ",
    "acdha": "The problem I was trying to work around was a bug in the Prettier hook (they added the config to register for HTML before shipping a release with HTML support) which meant I was testing the file include/exclude logic. . ",
    "metmajer": "@asottile wow, thank you so much for your elaborate answer. I've found a neat way to test the hook and circumvent the need to push code to my repository for changes to take effect by using a repo: local directive:\nrepos:\n - repo: local\n   hooks:\n   - id: terraform_docs\n     name: terraform_docs\n     entry: ./terraform_docs.sh\n     language: system\n     files: (\\.tf)$\nThen, I run pre-commit run terraform_docs --files ./variables.tf ./outputs.tf, make local changes, re-run, and repeat if the results are not as expected. To me, this is the best option for now and this also qualifies for an automated test using Bats. Here's a longer description of the approach for your consideration: https://github.com/antonbabenko/pre-commit-terraform/pull/25#issuecomment-431649551. Thoughts?\nI would love to see a --args option that requires a hook to be provided, but then again, if coupled with try-repo, the need to push code before it can be tested would still remain, which in my mind, conflicts with the goal of continuous integration (always keeping the repo in a releasable state).\nAnyways, this is such a great project and does an amazing job in building more quality and discipline into our deliverables. Thank you so much!. @asottile as I have found a solution that works well for me, feel free to close!. ",
    "naeioi": "Yes I am using conda. . @asottile Oh great. Thanks for your prompt reply! . ",
    "brettcannon": "Yes, it looks like @warsaw forgot to do that. \ud83d\ude09 . ",
    "warsaw": "Well, not so much as forgot as just didn't do it.  If it helps folks, I'm happy to release a wheel in addition to the sdist.. ",
    "bplotnick": "Our builds are working again \ud83d\ude04 . ",
    "runz0rd": "Sorry for disappearing. Ill be able to get this done in the next 5 hours or so.. @asottile I guess Ill need your help with this after all!\nSo what are we testing for exactly?\nIn the given example, Im not quite sure how tagging has anything to do with checking for missing files.\nSorry if Im not making any sense.. Ah, I think I understand now. Thanks!. The trouble here is, the make_config_from_repo will not generate a config with files missing (.pre-commit-hooks.yaml in this case). This happens before autoupdate. How is this supposed to be handled?. I was just trying it out. It fails because my change only affects autoupdate command. make_config_from_repo calls the same validation logic:\npre_commit.clientlib.InvalidManifestError: E               =====> /../test_autoupdate_latest_no_conf0/0/.pre-commit-hooks.yaml does not exist. That did it, with a small change. Thanks again!. Yep, but e.args[0] was giving me issue with write_line, namely five.to_bytes(s). Any suggestions?. After moving the error handling logic up, this is not an issue anymore. Strange.. ",
    "Dunedan": "@asottile Unfortunately it's a private repo, so no poking for you.\n@chriskuehl If you can point me to how to get more insight into the partitioning, I can check if I can figure out what the issue could be.. I wrote a little script-hook to print out the file names and sum up the number of lines in these files. That results in the following distribution of lines:\n3360\n2857\n3616\n7174\nFrom that it's apparent that the distribution of lines is uneven (although not as uneven as I'd have expected from the time taken by prospector, so either prospector doesn't scale linearly or there is more to it than the number of lines). The uneven distribution is caused by pre-commit using an ordered list of files for partitioning. So e.g. one process might get just files with application logic and another just files with tests, which differ in their average number of lines. I believe files with a similar number of lines being grouped together would be a common problem for other users as well.\nI then tried to just shuffle the order of files before partitioning and it did indeed help and times went down quite a bit. These are the times for three different invocations (remember the order is random and differs per invocation, that's why the times differ that much):\n```\nTime Taken: 54.20 seconds\nTime Taken: 16.44 seconds\nTime Taken: 15.31 seconds\nTime Taken: 23.66 seconds\nTime Taken: 52.63 seconds\nTime Taken: 20.48 seconds\nTime Taken: 32.03 seconds\nTime Taken: 24.21 seconds\nTime Taken: 25.09 seconds\nTime Taken: 48.53 seconds\nTime Taken: 26.13 seconds\nTime Taken: 23.39 seconds\n```\nStill not perfect, but already quite an improvement. Would such a shuffling (maybe in a deterministic fashion) before partitioning (and maybe re-ordering per partition) be an option?. Another idea would be to increase the number of partitions past the number of available CPU cores. I tried doubling the number of partitions and with that I see some improvement, but not as much as I'd expect, apparently because the files which take to most time still end up in the same partition:\nMo 12. Nov 16:01:38 CET 2018\nTime Taken: 6.82 seconds\nTime Taken: 16.71 seconds\nTime Taken: 5.65 seconds\nTime Taken: 5.16 seconds\nTime Taken: 17.90 seconds\nTime Taken: 8.67 seconds\nTime Taken: 71.29 seconds\nTime Taken: 10.88 seconds\nMo 12. Nov 16:03:00 CET 2018. > I think the problem with intentionally having more partitions than the CPU count is that we'll have to pay any fixed startup costs (e.g. initializing the hook) multiple times in serial. For most hooks it's probably not a big deal, but could be bad for hooks that are slow to start.\nOf course there are always trade-offs. So what's more common: Hooks with an initialization time, which is so long compared to their run time that initializing them multiple times would cause a significant performance decrease or hooks which would benefit from more partitions? I don't know the answer and I guess that you don't either.\nWhat about gathering data to tune the options to fit best for as many use cases as possible? As we know there are cases which don't really benefit from the current concurrency settings.\nWhat about taking an exemplary set of files with an exemplary set of pre-commit hooks and benchmark them on different machines to get proper data? For Pylint for example there is a special set of data for benchmarking: https://github.com/brycepg/pylint-corpus. Aside from such a set of data, pre-commit would need to offer the ability to log more details about the concurrency, without the need for manual patching. We could then use that data to tune options like the number of partitions, number of threads, shuffling of files before partitioning, etc. to achieve the best possible result for as many use cases as possible.. Thanks a lot for addressing this. :+1:\nUnfortunately the seed for shuffling chosen in #874 makes it even worse for my case, as the number of lines to be processed per thread becomes even more uneven. That's of course a problem for my specific case, but I guess it shows that shuffling isn't a perfect solution either. :disappointed:. It's definitely an unlucky shuffle. If I e.g. just adjust the seed by \u00b11 I get a really good benefit from concurrent execution.\nThe project I'm talking about is in active development so the introduction/removal of files in future might change the resulting partitions resulting in more beneficial results.. ",
    "tonybaloney": "How do you upgrade the pip version used in try_repo? I tried deleting the cache, running clean etc. couldn\u2019t figure out where it was getting the old version from. Feel free to try it out to see what happens with python_venv (first) and python (second).\nI still cannot figure out where it is getting pip 10 from!\n```\npre-commit try-repo https://github.com/tonybaloney/wily\n[INFO] Initializing environment for https://github.com/tonybaloney/wily.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: https://github.com/tonybaloney/wily\n    rev: 191be01f6fb4617e57460559e063e8c94f1f0c9b\n    hooks:\n    -   id: wily\n===============================================================================\n[INFO] Installing environment for https://github.com/tonybaloney/wily.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/private/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/tmp_lf5go2c/repo8e6k_x94/py_venv-python3/bin/python3', '/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/tmp_lf5go2c/repo8e6k_x94/py_venv-python3/bin/pip', 'install', '.')\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors: \n    Directory '.' is not installable. File 'setup.py' not found.\n    You are using pip version 10.0.1, however version 18.1 is available.\n    You should consider upgrading via the 'pip install --upgrade pip' command.\nCheck the log at /Users/anthonyshaw/.cache/pre-commit/pre-commit.log\n(.venv) \u279c  wily git:(master) pre-commit try-repo https://github.com/tonybaloney/wily\n[INFO] Initializing environment for https://github.com/tonybaloney/wily.\n===============================================================================\nUsing config:\n===============================================================================\nrepos:\n-   repo: https://github.com/tonybaloney/wily\n    rev: 161461985b5a467a5b9a0de36047dac9e0af9346\n    hooks:\n    -   id: wily\n===============================================================================\n[INFO] Installing environment for https://github.com/tonybaloney/wily.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/tmp65ltnccw/repoa6oetlkf/py_env-python3/bin/python3', '/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/tmp65ltnccw/repoa6oetlkf/py_env-python3/bin/pip', 'install', '.')\nReturn code: 1\nExpected return code: 0\nOutput: \n    Processing /private/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/tmp65ltnccw/repoa6oetlkf\n      Installing build dependencies: started\n      Installing build dependencies: still running...\n      Installing build dependencies: finished with status 'done'\n        Complete output from command python setup.py egg_info:\n        Traceback (most recent call last):\n          File \"\", line 1, in \n          File \"/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/tmp65ltnccw/repoa6oetlkf/py_env-python3/lib/python3.6/tokenize.py\", line 452, in open\n            buffer = _builtin_open(filename, 'rb')\n        FileNotFoundError: [Errno 2] No such file or directory: '/private/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/pip-req-build-j5bp6apz/setup.py'\n    ----------------------------------------\n\nErrors: \n    Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/3p/ffph9q490876shz82kqxhmhm0000gn/T/pip-req-build-j5bp6apz/\nCheck the log at /Users/anthonyshaw/.cache/pre-commit/pre-commit.log\n(.venv) \u279c  wily git:(master) \n```\n. pre-commit could implement the same isolated build that you built @gaborbernat ? https://github.com/tox-dev/tox/blob/4c03d419fb686975e04cb12405980a579dfb44f4/src/tox/package/builder/isolated.py\n. See this thread for a good run-down of workarounds https://github.com/takluyver/flit/issues/74 . wait, why can't pre-commit just install plugins from PyPI @asottile ?. ",
    "pradyunsg": "PEP 517 support will be there in pip's next release.\nThe PEP-related implementation is fine, we're mostly just discussing UI details and internal cleanups that pip should get while we're doing that. ;)\n. ",
    "jaraco": "Huh. So it seems that I had to run autoupdate first. After running autoupdate, the same command runs without error. That was unexpected.\n```\npanman master $ pre-commit autoupdate\nUpdating https://github.com/ambv/black...[INFO] Initializing environment for https://github.com/ambv/black.\nupdating stable -> 18.9b0.\npanman master $ pre-commit run --all-files\n[INFO] Installing environment for https://github.com/ambv/black.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nblack....................................................................Failed\nhookid: black\nFiles were modified by this hook. Additional output:\nAll done! \u2728 \ud83c\udf70 \u2728\n136 files left unchanged.\nAll done! \u2728 \ud83c\udf70 \u2728\n90 files left unchanged.\nreformatted /Users/jaraco/code/yg/G/panman/panman/testing/virtualenv/create\nAll done! \u2728 \ud83c\udf70 \u2728\n1 file reformatted, 98 files left unchanged.\nAll done! \u2728 \ud83c\udf70 \u2728\n26 files left unchanged.\n```\nDoes that mean that I had a pre-commit environment lying around from another project that was not compatible with 'black@stable'?. Oh, interesting. When I ran pre-commit autoupdate, it altered the config file:\npanman master $ git diff\ndiff --git a/.pre-commit-config.yaml b/.pre-commit-config.yaml\nindex b9a75affd..61898c735 100644\n--- a/.pre-commit-config.yaml\n+++ b/.pre-commit-config.yaml\n@@ -1,6 +1,6 @@\n repos:\n -   repo: https://github.com/ambv/black\n-    rev: stable\n+    rev: 18.9b0\n     hooks:\n     - id: black\n       language_version: python3.6\nDo I want to commit that and push it to the other devs?. If I revert that change and re-run pre-commit run --all-files, it fails with the toml error again.. Confirmed - wiping the cache and then running with stable worked around the issue. We'll use concrete versions in the future. Thanks for the considerate and helpful response.. ",
    "davidhyman": "Is speed an important concern? My understanding of pyenv is that once it's installed a python, it's ready to be reused if needed. So yes the first-ever run (or --install-hooks) is going to take a while, but surely it's better to have the tool handle this for the end user, rather than expect them to go around installing pythons (a notorious minefield).\nI have no particular attachment to pyenv though, for what it's worth, just the idea that the tool should handle its dependencies as per the stated purpose.\nWhat is the rationale behind supporting the installation of ruby, but not the installation of python?. Agreed, it's not easy :)\nPerhaps the versions could be checked at install time and give an explicit error rather than wait until the dependency itself fails.  That would clarify to the user that they are responsible for obtaining the version the hook requires.\nIt doesn't solve anything much in the grand scheme of things though. Feel free to close this one then if it's out of scope. Thanks for your responses!\n. ",
    "ned2": "Chiming in a bit late to the party as I just ran into this issue with pyenv. \nThe error message I got after using python3.7 as the value for language_version was this:\n```\npyenv: python3.7: command not found\nThe `python3.7' command exists in these Python versions:\n  3.7.0\n  3.7.2\n```\nIt seems as though pyenv has not not registered python3.7 as a command for my virtualenv (which is based on 3.7.2). Strangely, when I activate the plain 3.7.2 installation, it is registered. \nAt any rate, python3 is a registered command in my virtualenv, so it looks like the value of python3 forlanguage_version makes everyone happy.. ",
    "fristedt": "\nMaybe something like this?\npython\nif sys.platform != 'win32' and six.PY3:\n    return '#!/usr/bin/env python3'\nelse:\n    return '#!/usr/bin/env python'\n\nThanks for the quick reply! I believe that would solve my problem.. > @fristedt can you try out the branch in #893?\nTested, it works. Thanks @asottile!. ",
    "henniss": "Thanks, that's perfect. Somehow I totally overlooked the info messages that referenced the cache. . After posting this, I realized that in fact you don't need any hooks at all. An empty .pre-commit-config.yaml and a single added file will achieve the same result.. ",
    "milin": "@asottile yes turns outcommit-msg was sufficient. I've opened a pr on the pre-commit-hooks repo https://github.com/pre-commit/pre-commit-hooks/pull/347 if other people want to use as well.\nThanks for the info!. ",
    "cglewis": "also in my home directory inside of .pre-commit-venv I have this:\n.pre-commit-venv cglewis$ ls -lah\ntotal 8\ndrwxr-xr-x    7 cglewis  1337   224B Jan 14 12:05 .\ndrwxr-xr-x+ 100 cglewis  1337   3.1K Jan 14 12:05 ..\nlrwxr-xr-x    1 cglewis  1337    80B Jan 14 11:37 .Python -> /usr/local/Cellar/python/3.7.2_1/Frameworks/Python.framework/Versions/3.7/Python\ndrwxr-xr-x   16 cglewis  1337   512B Jan 14 11:37 bin\ndrwxr-xr-x    3 cglewis  1337    96B Jan 14 11:37 include\ndrwxr-xr-x    3 cglewis  1337    96B Jan 14 11:37 lib\n-rw-r--r--    1 cglewis  1337    59B Jan 14 11:37 pip-selfcheck.json. Running pre-commit 1.14.2.  Huh. wasn't aware of that run --all-files. It's not complaining about the error anymore. Still not sure why it was doing python2.7 stuff, but seems to be resolved for me now. Thanks!. I ran into the issue again, but figured out the root cause. I had a stale pre-commit installed in the specific repo.  After removing that and running pre-commit install everything was good to go.. ",
    "zaufi": "Oops, it was the old one (1.13.0)... Upgrade to the latest one works as expected! %)\nCase closed %)\nThanx for the hint! %). ",
    "barbossa": "@asottile many thanks! I've missed verbose parameter in documentation.. ",
    "ashanbrown": "I think GOBIN might be the only one we need to be concerned about.  GOROOT points to the go installation but pre-commit doesn't install go so I don't think it should touch it.  GOBIN, GOROOT and GOPATH are the three that get billing at https://www.programming-books.io/essential/go/d6da4b8481f94757bae43be1fdfa9e73-gopath-goroot-gobin.. @asottile I've added a test and updated the code to ensure GOBIN is also cleared when the command is installed.. Thanks for doing the additional research.  Would you be open to 260284?\nI can outline the use case.  I'm passing in filenames but converting them to the directories that contain them in a script hook because I'm running some commands that I want to run per-directory rather than per-file.  With a small command-line, I end up running the command on a directory many times.\nFWIW, ideally I wouldn't be passing the filenames in at all when they exceed a certain length.  A lot of this comes about because I'm trying to run the same pre-commit commands on CI that I run locally and I take advantage of how per-commit can pin the version of golangci-lint.\n. Got it.  Would you prefer a more involved  algorithm or that we just pick a \u201csafe\u201d number like 128k?  For my purposes it doesn\u2019t matter: 128k is orders of magnitude larger than 4k and would work great.. Thanks @asottile.  Sorry not to get around to testing it.. I missed this the first time.  The test found this.  ;). It doesn't appear to be necessary.  Presumably the new entry in $PATH should supercede whatever is in $GOBIN.. ",
    "jjshanks": "Excellent. I got it to work using /src.\nI did start off with the repo approach but it wouldn't work without installing python 3.6 for everyone so wrapping it docker seemed like an easier approach.. ",
    "lorenzwalthert": "\nDepending on how the R ecosystem works (I'm not at all familiar with it) you'd pick to either set up a full R runtime or to depend on R already being installed at the system.\n\nI think we can for simplicity depend on the global installation of R.. Within the R console (again), you can install.packages(\"styler\") to satisfy all requirements needed. So in the console, when assuming R is installed, you can run \n$ Rscript -e \"install.packages('styler', repos='http://cran.rstudio.com')\". ",
    "jessebona": "I hope this isn't a stupid question but judging by the documentation an empty config file is not a situation the code should continue with? i.e. It should throw an exception and stop?. I mean I like to think I could put a simple if i < len around the while loop if you'd like me to give it a crack. . Thanks! I did a pull request and I hope the change and pull request were done as expected. It's my first time trying this whole thing so I thought I'd start small.. Thanks for the tips. I did consider adding a test but I wasn't sure something so small needed it. People weren't kidding when they said working with code written by someone else isn't easy.. Yeah I get that. Thanks for guiding me through it and putting up with me being slow. I ran the test and it passed so it seems to be all good this time. You were spot on about my original fix not catering to new lines.. Yeah I saw. I feel so bad for wasting your time like this. You can just close the pull request and forget it if you like. As it turns out I'm more clueless working on this than I thought I would be.. I'm glad you confirmed that's what it was because I read the error log and it made me wonder why it needs two lines. . Well that was a learning experience. Thanks again for taking the time to talk me through it. Hopefully next time I try I'm a little less rusty.. ",
    "hoshsadiq": "Thank you! Works perfectly.\nHappy to close this if using pre-commit on unstaged files is not on the horizon.. Yup! Upgrading python worked! Thanks. ",
    "sloria": "Ah ok, sorry, I missed that. \nI was considering replacing the find_version hack with str(pkg_resources.get_distribution('...').parsed_version) in my projects, but I'll hold off now that I know about the performance issues.. Good to know. Thanks!. ",
    "DrPsychick": "Yes, you're right: the user does not need to exist inside the container, but that has impact (like $HOME not being set)\n```\ndocker run --rm -it --user 502 --entrypoint whoami caktux/travis-cli\nwhoami: unknown uid 502\n```\nwhereas when I run it without a --user parameter it just takes the containers default user inside the container which the docker image maintainer has decided to use.\n```\ndocker run --rm -it --entrypoint whoami caktux/travis-cli\nroot\n```. Alright, thanks for the feedback! I can live with my workaround.\nThe point I was trying to make (and I did not formulate that way): for me as a user, it was very surprising to find that the command did not work while it works perfectly on the command line. It took me quite some time to find out that pre-commit by default sets the current user (which is not mentioned in the documentation) and travis fails because it wants to write to $HOME/.travis.\ndocker run --rm -it caktux/travis-cli lint # works, uses root (not the best default for sure)\ndocker run --rm -it --user 502 caktux/travis-cli lint # misleading error message\ndocker run --rm -it --user 502 --env HOME=/tmp caktux/travis-cli lint # works /tmp is writable\ndocker run --rm -it --user 502 --env HOME=/tmp --entrypoint /bin/sh caktux/travis-cli -c 'travis lint; ls -la $HOME/.travis'\n\nthere's no guarantees in POSIX that HOME refers to a directory which exists\n\nI totally agree.\nBTW, for me (on macOS) a file created within the container as root does not automatically become owned by root on my host:\ndocker run --rm -it --user root -v $PWD:/project --entrypoint /bin/sh caktux/travis-cli -c 'touch /project/foobar'\nls -ln foobar\n-rw-r--r--  1 502  20  0 Feb  6 00:34 foobar. ",
    "minrk": "I'm not sure exactly how to write a test, since you need a git installation where GIT_EXEC_PATH is required, which I think is unusual but comes up with these git-bundling GUIs like Fork or SmartGit (a more detailed report of the same issue is in #664).\nA trivial test would be to verify that GIT_EXEC_PATH is set for every git command. It's the submodule command that fails, not the initial clone for me, for whatever reason. I'm seeing this with ambv/black:\nyaml\n- repo: https://github.com/ambv/black\n  rev: 18.9b0\n  hooks:\n  - id: black\nTo reproduce, assuming you have Fork.app, add the Fork git to PATH and set GIT_EXEC_PATH:\n```bash\n$ export GIT_EXEC_PATH=/Applications/Fork.app/Contents/Resources/git-instance/libexec/git-core\n$ export PATH=/Applications/Fork.app/Contents/Resources/git-instance/bin:$PATH\n$ git commit -am 'test'\n[INFO] Initializing environment for https://github.com/ambv/black.\nAn unexpected error has occurred: CalledProcessError: Command: ('/Applications/Fork.app/Contents/Resources/git-instance/libexec/git-core/git', 'submodule', 'update', '--init', '--recursive')\nReturn code: 1\nExpected return code: 0\nOutput: (none)\nErrors:\n    /Applications/Fork.app/Contents/Resources/git-instance/libexec/git-core/git-sh-setup: line 46: /usr/local/git/libexec/git-core/git-sh-i18n: No such file or directory\nCheck the log at /Users/minrk/Library/Caches/pre-commit/pre-commit.log\n```\nWith GIT_EXEC_PATH respected, no error occurs.\nI discovered this at this commit: https://github.com/jupyterhub/jupyterhub/blob/cd544acc6687e20d21197b47ff5e0c475e9afc47/.pre-commit-config.yaml. ",
    "kortina": "OK, that was going to be my backup plan. \nAnd in this case, https://github.com/pre-commit/sync-versions is a fictitious repo yet to be written, correct?. ",
    "peterhadlaw": "Hello @asottile, thanks for the quick response :) Yeah the mirrors-isort package doesn't take the pipenv / Pipfile virtualenv into account and thus fails to know which packages are \"first party\" vs. \"thirdparty\" and so on. Hence the need for the command pipenv run isort. \nAgain, any help is very much appreciated!. So seed-isort-config works :) However, I was wondering if there was anyway to get the pipenv setup to work. If not, for the sake of everyone's time and practicality, seed-isort-config should be good for now.\nBelow is what I was going to write before I noticed I needed to add stages: [commit,push] to the seed-isort-config. \n\nYeah I did take a moment to look further, but it seems there are the same symptoms. (I see that you also are the main contributor to the mirrors-isort, which led me to dive in further before commenting again and try more using your advice.)\nSo I did the following: \n1. pipenv install --dev seed-isort-config\n2. Modified my .pre-commit-config.yaml to the following: \nyaml\nrepos:\n- repo: https://github.com/asottile/seed-isort-config\n  rev: v1.5.0\n  hooks:\n  - id: seed-isort-config\n- repo: https://github.com/pre-commit/mirrors-isort\n  rev: 'v4.3.4'  # Use the revision sha / tag you want to point at\n  hooks:\n  - id: isort\n    stages: [commit,push]\n\npre-commit install --color never -f -t pre-push\npre-commit install --color never -f -t pre-commit\n\nAfter running the pre-commit hooks, isort still thinks third party packages are first party packages.. Sooooo... I was running magit within Emacs and I needed to activate my virtualenv first and then running commit in magit resulted in isort working properly.\n\nRunning git commit in the shell results in isort also working properly. Sorry about the confusion and I appreciate the help!\nFor the future: Activate your virtualenv in Emacs + Magit before running magit-commit. \nThank you again @asottile . ",
    "liiight": "I originally tried installing pre-commit from within my activated project venv. When I did the same from outside the venv I got it working with no issues.\nIf this is how it's supposed to work, I apologize.. I'll try to reproduce it, but honestly now that I got it working I'm kinda hesitant to try and reset it just for reproduction purposes. I'll close this for now and reopen if needed.\nThanks for the reply and this amazing tool!. ",
    "JKillian": "Agreed this is a duplicate, thanks for the quick response! Sorry I didn't see that other issue previously. ",
    "gpkc": "Well I believe I figured it out: I should use the system language for that. Is that the way to go?. OK Thanks!. ",
    "Laurentiu-Andronache": "Here: https://github.com/Laurentiu-Andronache/pipx/tree/add-precommit-hooks. Here's my crash info:\n```\nAn error has occurred: InvalidManifestError: \n==> File C:\\Users\\Nebu/.cache\\pre-commit\\repofw7i5ae9.pre-commit-config.yaml\n=====> Expected array but got 'OrderedDict'\nTraceback (most recent call last):\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 37, in validate_context\n    yield\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 407, in load_from_filename\n    validate(data, schema)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 376, in validate\n    schema.check(v)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 266, in check\n    check_array(check_any)(v)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 359, in check_array_fn\n    'Expected array but got {!r}'.format(type(v).name),\ncfgv.ValidationError: \n=====> Expected array but got 'OrderedDict'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 46, in reraise_as\n    yield\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 408, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"C:\\Python37\\lib\\contextlib.py\", line 130, in exit\n    self.gen.throw(type, value, traceback)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 40, in validate_context\n    six.reraise(ValidationError, ValidationError(e, ctx=msg), tb)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\six.py\", line 692, in reraise\n    raise value.with_traceback(tb)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 37, in validate_context\n    yield\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 407, in load_from_filename\n    validate(data, schema)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 376, in validate\n    schema.check(v)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 266, in check\n    check_array(check_any)(v)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 359, in check_array_fn\n    'Expected array but got {!r}'.format(type(v).name),\ncfgv.ValidationError: \n==> File C:\\Users\\Nebu/.cache\\pre-commit\\repofw7i5ae9.pre-commit-config.yaml\n=====> Expected array but got 'OrderedDict'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\error_handler.py\", line 46, in error_handler\n    yield\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\main.py\", line 291, in main\n    return run(args.config, store, args)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\commands\\run.py\", line 262, in run\n    for hook in all_hooks(config, store)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 221, in all_hooks\n    for repo in root_config['repos']\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 222, in \n    for hook in _repository_hooks(repo, store, root_config)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 197, in _repository_hooks\n    return _cloned_repository_hooks(repo_config, store, root_config)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\pre_commit\\repository.py\", line 167, in _cloned_repository_hooks\n    by_id = {hook['id']: hook for hook in load_manifest(manifest_path)}\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 408, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"C:\\Python37\\lib\\contextlib.py\", line 130, in exit\n    self.gen.throw(type, value, traceback)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 49, in reraise_as\n    six.reraise(tp, tp(e), tb)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\six.py\", line 692, in reraise\n    raise value.with_traceback(tb)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 46, in reraise_as\n    yield\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 408, in load_from_filename\n    return apply_defaults(data, schema)\n  File \"C:\\Python37\\lib\\contextlib.py\", line 130, in exit\n    self.gen.throw(type, value, traceback)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 40, in validate_context\n    six.reraise(ValidationError, ValidationError(e, ctx=msg), tb)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\six.py\", line 692, in reraise\n    raise value.with_traceback(tb)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 37, in validate_context\n    yield\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 407, in load_from_filename\n    validate(data, schema)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 376, in validate\n    schema.check(v)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 266, in check\n    check_array(check_any)(v)\n  File \"c:\\projects\\python_helping\\pipx\\venv\\lib\\site-packages\\cfgv.py\", line 359, in check_array_fn\n    'Expected array but got {!r}'.format(type(v).name),\npre_commit.clientlib.InvalidManifestError: \n==> File C:\\Users\\Nebu/.cache\\pre-commit\\repofw7i5ae9.pre-commit-config.yaml\n=====> Expected array but got 'OrderedDict'\n```. yes, I just deleted the venv to try again (because I noticed that it works outside of it), but I think I have it in recycle bin. Probably PyCharm edited, I must have reformated the code from the venv by mistake. It actually happened to me in the past, but for another package. I feel so bad about it now. :(. ",
    "DanielChabrowski": ":confetti_ball: It looks like I cannot ignore those cargo/npm/go tests. I'll check it tomorrow.. Thanks.\n\nSo we'll probably need to adjust that test to not fail when git can't possibly clone -- or maybe just not test the clone depth -- it is an \"optional performance improvement\" after all\n\nI removed the check but maybe we could restore it later on with an xfail if shallow cloning is not supported.\n. > might need to use xargs.xargs(...) for the git add line, since I imagine the list of staged files could be pretty long (?)\nI guess it could but what problems could it cause for cmd_output ? And what's the 'xargs.xargs(...)' while we're at it? :stuck_out_tongue:   . It is happening, I added \"_perform_safe_clone\" to make_local as well. The problem was that when you shallow clone (git init), you cannot reuse the directory for complete clone because of fatal: destination path 'path' already exists and is not an empty directory.. If I just created another directory in fallback, we would save invalid directory to the database so make_strategy had to return the directory that's going to be finally used.\nI could change the make_strategy to a list and loop through it here. We wouldn't have to deal with error handling in make_strategy functions and multiple fallbacks would be possible (like the proposed 3). What do you think?. I'll add git -c protocol.version=2 to the _git_cmd for the second option.. ",
    "mnboos": "Does this mean, pre-commit installs the required packages within a virtual environment? Because it even fails, if I run it outside of a venv.\nIt worked at home, but failed on the machine of a work collegue. I fear it's somehow related to our network config (which we cannot change).. I now notice, the commands are run from the F:\\ drive, even though my console is on C:\\ as well as my userprofile and python installation.\nAnd if I run pre-commit manually, it works like a charm:\n```\nCheck the log at F:\\/.cache\\pre-commit\\pre-commit.log\nc:\\src\\prj>pre-commit\nblack....................................................................Failed\nhookid: black\nFiles were modified by this hook. Additional output:\nAll done! \\u2728 \\U0001f370 \\u2728\n1 file reformatted.\nflake8...................................................................Failed\n```\nBut if this is triggered by git commit -am \"test commit\" things go south.. It's not working yet. Setting PYTHONPATH didn't help either. I don't want to blame pre-commit, because it seems to work for everbody else and it works on my Ubuntu VM.. Just for clarification: I'm using a Windows machine here, not Linux (i.e. it works on Linux, not on this Windows machine)\nc:\\src>python -c \"import pprint, os; pprint.pprint(tuple(sorted(os.environ.items())))\"\n(('ALLUSERSPROFILE', 'C:\\\\ProgramData'),\n ('APPDATA', 'C:\\\\Users\\\\bmar\\\\AppData\\\\Roaming'),\n ('BAZEL_SH', 'c:\\\\msys64\\\\usr\\\\bin\\\\bash.exe'),\n ('COMMONPROGRAMFILES', 'C:\\\\Program Files\\\\Common Files'),\n ('COMMONPROGRAMFILES(X86)', 'C:\\\\Program Files (x86)\\\\Common Files'),\n ('COMMONPROGRAMW6432', 'C:\\\\Program Files\\\\Common Files'),\n ('COMPOSE_CONVERT_WINDOWS_PATHS', 'true'),\n ('COMPUTERNAME', 'COMP'),\n ('COMSPEC', 'C:\\\\Windows\\\\system32\\\\cmd.exe'),\n ('DOCKER_CERT_PATH', 'C:\\\\Users\\\\bmar\\\\.docker\\\\machine\\\\machines\\\\default'),\n ('DOCKER_HOST', 'tcp://192.168.99.102:2376'),\n ('DOCKER_MACHINE_NAME', 'default'),\n ('DOCKER_TLS_VERIFY', '1'),\n ('DOCKER_TOOLBOX_INSTALL_PATH', 'C:\\\\Program Files\\\\Docker Toolbox'),\n ('DRIVERDATA', 'C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData'),\n ('FLEXLM_TIMEOUT', '2000000'),\n ('HOMEDRIVE', 'F:'),\n ('HOMEPATH', '\\\\'),\n ('HOMESHARE', '\\\\\\\\somenetworkpath.com\\\\abcd\\\\Users\\\\BMAR'),\n ('INTELOCLPATH',\n  'C:\\\\Intel\\\\OpenCL\\\\sdk\\\\bin\\\\x64;C:\\\\Intel\\\\OpenCL\\\\sdk\\\\bin\\\\x86'),\n ('INTELOCLSDKROOT', 'C:\\\\Intel\\\\OpenCL\\\\sdk\\\\'),\n ('JAVA_HOME', 'C:\\\\Program Files\\\\Java\\\\jdk1.8.0_191'),\n ('LOCALAPPDATA', 'C:\\\\Users\\\\bmar\\\\AppData\\\\Local'),\n ('LOGONSERVER', '\\\\\\\\XY'),\n ('MINISHIFT_HOME', 'C:\\\\Users\\\\bmar\\\\.minishift'),\n ('NO_PROXY', '192.168.99.100,192.168.99.101,192.168.99.102'),\n ('NUMBER_OF_PROCESSORS', '8'),\n ('OS', 'Windows_NT'),\n ('PATH',\n  'C:\\\\Program Files (x86)\\\\Microsoft '\n  'SDKs\\\\Azure\\\\CLI2\\\\wbin;C:\\\\Intel\\\\OpenCL\\\\sdk\\\\bin\\\\x64;C:\\\\Intel\\\\OpenCL\\\\sdk\\\\bin\\\\x86;C:\\\\Intel\\\\OpenCL\\\\sdk\\\\bin\\\\Pin;C:\\\\Intel\\\\OpenCL\\\\sdk\\\\bin\\\\GTPin;C:\\\\Program '\n  'Files (x86)\\\\Common '\n  'Files\\\\Oracle\\\\Java\\\\javapath;C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Windows\\\\System32\\\\Wbem;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Windows\\\\System32\\\\OpenSSH\\\\;C:\\\\Program '\n  'Files\\\\Intel\\\\WiFi\\\\bin\\\\;C:\\\\Program Files\\\\Common '\n  'Files\\\\Intel\\\\WirelessCommon\\\\;C:\\\\Program Files\\\\Git\\\\cmd;C:\\\\Program '\n  'Files\\\\dotnet\\\\;C:\\\\Program Files\\\\CMake\\\\bin;C:\\\\Program '\n  'Files\\\\Perforce\\\\;C:\\\\Program Files\\\\Microsoft SQL '\n  'Server\\\\130\\\\Tools\\\\Binn\\\\;C:\\\\Program Files (x86)\\\\Bitvise SSH '\n  'Client;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Continuum\\\\miniconda3;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Continuum\\\\miniconda3\\\\Library\\\\mingw-w64\\\\bin;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Continuum\\\\miniconda3\\\\Library\\\\usr\\\\bin;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Continuum\\\\miniconda3\\\\Library\\\\bin;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Continuum\\\\miniconda3\\\\Scripts;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps;C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Programs\\\\Microsoft '\n  'VS Code\\\\bin;C:\\\\Program Files\\\\Docker Toolbox;C:\\\\Program '\n  'Files\\\\Oracle\\\\VirtualBox;C:\\\\msys64\\\\mingw64\\\\bin;C:\\\\msys64\\\\usr\\\\bin;C:\\\\Program '\n  'Files\\\\Docker Toolbox;C:\\\\kubectl;C:\\\\bazel;C:\\\\Program '\n  'Files\\\\LLVM\\\\bin;C:\\\\VulkanSDK\\\\1.1.97.0\\\\Bin;C:\\\\Program '\n  'Files\\\\7-Zip;C:\\\\apache-maven-3.6.0\\\\bin'),\n ('PATHEXT', '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC'),\n ('PROCESSOR_ARCHITECTURE', 'AMD64'),\n ('PROCESSOR_IDENTIFIER',\n  'Intel'),\n ('PROCESSOR_LEVEL', '6'),\n ('PROCESSOR_REVISION', ''),\n ('PROGRAMDATA', 'C:\\\\ProgramData'),\n ('PROGRAMFILES', 'C:\\\\Program Files'),\n ('PROGRAMFILES(X86)', 'C:\\\\Program Files (x86)'),\n ('PROGRAMW6432', 'C:\\\\Program Files'),\n ('PROMPT', '$P$G'),\n ('PSMODULEPATH',\n  'C:\\\\Program '\n  'Files\\\\WindowsPowerShell\\\\Modules;C:\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules'),\n ('PUBLIC', 'C:\\\\Users\\\\Public'),\n ('SESSIONNAME', 'Console'),\n ('SYSTEMDRIVE', 'C:'),\n ('SYSTEMROOT', 'C:\\\\Windows'),\n ('TEMP', 'C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Temp'),\n ('TMP', 'C:\\\\Users\\\\bmar\\\\AppData\\\\Local\\\\Temp'),\n ('USERDNSDOMAIN', '),\n ('USERDOMAIN', ''),\n ('USERDOMAIN_ROAMINGPROFILE', ''),\n ('USERNAME', 'bmar'),\n ('USERPROFILE', 'C:\\\\Users\\\\bmar'),\n ('VBOX_MSI_INSTALL_PATH', 'C:\\\\Program Files\\\\Oracle\\\\VirtualBox\\\\'),\n ('VS140COMNTOOLS',\n  'C:\\\\Program Files (x86)\\\\Microsoft Visual Studio 14.0\\\\Common7\\\\Tools\\\\'),\n ('WINDIR', 'C:\\\\Windows'))\nc:\\src>which -a pre-commit\n/c/Users/bmar/AppData/Local/Continuum/miniconda3/Scripts/pre-commit\nC:\\src>grep INSTALL_PYTHON .git/hooks/pre-commit\nINSTALL_PYTHON = 'c:\\\\users\\\\bmar\\\\appdata\\\\local\\\\continuum\\\\miniconda3\\\\python.exe'\n        for exe in (INSTALL_PYTHON, sys.executable):\nC:\\src>python -c \"import pre_commit; print(pre_commit.__file__)\"\nC:\\Users\\bmar\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\pre_commit\\__init__.py\nC:\\src>echo %HOMEPATH%\n\\\nc:\\src>echo %pre_commit_home%\n%pre_commit_home%                      <------- this means the variable is not set\nc:\\src>echo %XDG_CACHE_HOME%\n%XDG_CACHE_HOME%                       <------- this means the variable is not set\nc:\\src>python3 -c \"import os.path; print(os.path.expanduser('~/.cache'))\"\nC:\\Users\\bmar/.cache\n```\nC:\\src\\Simpala>git commit -am \"test commit\"\n[INFO] Installing environment for https://github.com/ambv/black.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nAn unexpected error has occurred: CalledProcessError: Command: ('F:\\.cache\\pre-commit\\repoz9_8twq4\\py_env-python3\\Scripts\\pip.exe', 'install', '.')\nReturn code: 1\nExpected return code: 0\nOutput:\n    Processing f:.cache\\pre-commit\\repoz9_8twq4\n      Installing build dependencies: started\n      Installing build dependencies: finished with status 'error'\n      Complete output from command f:.cache\\pre-commit\\repoz9_8twq4\\py_env-python3\\scripts\\python.exe f:.cache\\pre-commit\\repoz9_8twq4\\py_env-python3\\lib\\site-packages\\pip install --ignore-installed --no-user --prefix C:\\Users\\bmar\\AppData\\Local\\Temp\\pip-build-env-t\nfpqq5_a\\overlay --no-warn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools>=40.8.0 wheel:\n      Collecting setuptools>=40.8.0\n        Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 1\n1003] getaddrinfo failed')': /simple/setuptools/\n        Retrying (Retry(total=3, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 1\n1003] getaddrinfo failed')': /simple/setuptools/\n        Retrying (Retry(total=2, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 1\n1003] getaddrinfo failed')': /simple/setuptools/\n        Retrying (Retry(total=1, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 1\n1003] getaddrinfo failed')': /simple/setuptools/\n        Retrying (Retry(total=0, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError(': Failed to establish a new connection: [Errno 1\n1003] getaddrinfo failed')': /simple/setuptools/\n        Could not find a version that satisfies the requirement setuptools>=40.8.0 (from versions: )\n      No matching distribution found for setuptools>=40.8.0\n  ----------------------------------------\n\nErrors:\n    Command \"f:.cache\\pre-commit\\repoz9_8twq4\\py_env-python3\\scripts\\python.exe f:.cache\\pre-commit\\repoz9_8twq4\\py_env-python3\\lib\\site-packages\\pip install --ignore-installed --no-user --prefix C:\\Users\\bmar\\AppData\\Local\\Temp\\pip-build-env-tfpqq5_a\\overlay --no-w\narn-script-location --no-binary :none: --only-binary :none: -i https://pypi.org/simple -- setuptools>=40.8.0 wheel\" failed with error code 1 in None\nCheck the log at F:\\/.cache\\pre-commit\\pre-commit.log\n(('ALLUSERSPROFILE', 'C:\\ProgramData'),\n ('APPDATA', 'C:\\Users\\bmar\\AppData\\Roaming'),\n ('BAZEL_SH', 'c:\\msys64\\usr\\bin\\bash.exe'),\n ('CHARSET', 'cp1252'),\n ('COMMONPROGRAMFILES', 'C:\\Program Files\\Common Files'),\n ('COMMONPROGRAMFILES(X86)', 'C:\\Program Files (x86)\\Common Files'),\n ('COMMONPROGRAMW6432', 'C:\\Program Files\\Common Files'),\n ('COMPOSE_CONVERT_WINDOWS_PATHS', 'true'),\n ('COMPUTERNAME', 'computer'),\n ('COMSPEC', 'C:\\Windows\\system32\\cmd.exe'),\n ('DOCKER_CERT_PATH', 'C:\\Users\\bmar\\.docker\\machine\\machines\\default'),\n ('DOCKER_HOST', 'tcp://192.168.99.102:2376'),\n ('DOCKER_MACHINE_NAME', 'default'),\n ('DOCKER_TLS_VERIFY', '1'),\n ('DOCKER_TOOLBOX_INSTALL_PATH', 'C:\\Program Files\\Docker Toolbox'),\n ('DRIVERDATA', 'C:\\Windows\\System32\\Drivers\\DriverData'),\n ('FLEXLM_TIMEOUT', '2000000'),\n ('GIT_AUTHOR_DATE', '@1552284845 +0100'),\n ('GIT_AUTHOR_EMAIL', ''),\n ('GIT_AUTHOR_NAME', ''),\n ('GIT_EDITOR', ':'),\n ('GIT_EXEC_PATH', 'C:/Program Files/Git/mingw64/libexec/git-core'),\n ('GIT_INDEX_FILE', 'C:/src/theproject/.git/index.lock'),\n ('GIT_PREFIX', ''),\n ('HOME', 'F:\\'),\n ('HOMEDRIVE', 'F:'),\n ('HOMEPATH', '\\'),\n ('HOMESHARE', '\\\\asdf\\sdfg\\Users\\xyz\\BMAR'),\n ('INTELOCLPATH',\n  'C:\\Intel\\OpenCL\\sdk\\bin\\x64;C:\\Intel\\OpenCL\\sdk\\bin\\x86'),\n ('INTELOCLSDKROOT', 'C:\\Intel\\OpenCL\\sdk\\'),\n ('JAVA_HOME', 'C:\\Program Files\\Java\\jdk1.8.0_191'),\n ('LC_CTYPE', 'C'),\n ('LOCALAPPDATA', 'C:\\Users\\bmar\\AppData\\Local'),\n ('LOGONSERVER', '\\\\fdadsfd'),\n ('MINISHIFT_HOME', 'C:\\Users\\bmar\\.minishift'),\n ('MSYSTEM', 'MINGW64'),\n ('NO_PROXY', '192.168.99.100,192.168.99.101,192.168.99.102'),\n ('NUMBER_OF_PROCESSORS', '8'),\n ('OS', 'Windows_NT'),\n ('PATH',\n  'C:\\Program Files\\Git\\mingw64\\libexec\\git-core;C:\\Program '\n  'Files\\Git\\mingw64\\bin;C:\\Program '\n  'Files\\Git\\usr\\bin;F:\\bin;C:\\Program Files (x86)\\Microsoft '\n  'SDKs\\Azure\\CLI2\\wbin;C:\\Intel\\OpenCL\\sdk\\bin\\x64;C:\\Intel\\OpenCL\\sdk\\bin\\x86;C:\\Intel\\OpenCL\\sdk\\bin\\Pin;C:\\Intel\\OpenCL\\sdk\\bin\\GTPin;C:\\Program '\n  'Files (x86)\\Common '\n  'Files\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Windows\\System32\\OpenSSH;C:\\Program '\n  'Files\\Intel\\WiFi\\bin;C:\\Program Files\\Common '\n  'Files\\Intel\\WirelessCommon;C:\\Program Files\\Git\\cmd;C:\\Program '\n  'Files\\dotnet;C:\\Program Files\\CMake\\bin;C:\\Program '\n  'Files\\Perforce;C:\\Program Files\\Microsoft SQL '\n  'Server\\130\\Tools\\Binn;C:\\Program Files (x86)\\Bitvise SSH '\n  'Client;C:\\Users\\bmar\\AppData\\Local\\Continuum\\miniconda3;C:\\Users\\bmar\\AppData\\Local\\Continuum\\miniconda3\\Library\\mingw-w64\\bin;C:\\Users\\bmar\\AppData\\Local\\Continuum\\miniconda3\\Library\\usr\\bin;C:\\Users\\bmar\\AppData\\Local\\Continuum\\minic\nonda3\\Library\\bin;C:\\Users\\bmar\\AppData\\Local\\Continuum\\miniconda3\\Scripts;C:\\Users\\bmar\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\bmar\\AppData\\Local\\Programs\\Microsoft '\n  'VS Code\\bin;C:\\Program Files\\Docker Toolbox;C:\\Program '\n  'Files\\Oracle\\VirtualBox;C:\\msys64\\mingw64\\bin;C:\\msys64\\usr\\bin;C:\\Program '\n  'Files\\Docker Toolbox;C:\\kubectl;C:\\bazel;C:\\Program '\n  'Files\\LLVM\\bin;C:\\VulkanSDK\\1.1.97.0\\Bin;C:\\Program '\n  'Files\\7-Zip;C:\\apache-maven-3.6.0\\bin'),\n ('PATHEXT', '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC'),\n ('PLINK_PROTOCOL', 'ssh'),\n ('PROCESSOR_ARCHITECTURE', 'AMD64'),\n ('PROCESSOR_IDENTIFIER',\n  'Intel64'),\n ('PROCESSOR_LEVEL', '6'),\n ('PROCESSOR_REVISION', '8e0a'),\n ('PROGRAMDATA', 'C:\\ProgramData'),\n ('PROGRAMFILES', 'C:\\Program Files'),\n ('PROGRAMFILES(X86)', 'C:\\Program Files (x86)'),\n ('PROGRAMW6432', 'C:\\Program Files'),\n ('PROMPT', '$P$G'),\n ('PSMODULEPATH',\n  'C:\\Program '\n  'Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules'),\n ('PUBLIC', 'C:\\Users\\Public'),\n ('SYSTEMDRIVE', 'C:'),\n ('SYSTEMROOT', 'C:\\Windows'),\n ('TEMP', 'C:\\Users\\bmar\\AppData\\Local\\Temp'),\n ('TERM', 'cygwin'),\n ('TERMINAL_EMULATOR', 'JetBrains-JediTerm'),\n ('TMP', 'C:\\Users\\bmar\\AppData\\Local\\Temp'),\n ('TMPDIR', 'C:\\Users\\bmar\\AppData\\Local\\Temp'),\n ('USERDNSDOMAIN', something.COM'),\n ('USERDOMAIN', ''),\n ('USERDOMAIN_ROAMINGPROFILE', ''),\n ('USERNAME', 'bmar'),\n ('USERPROFILE', 'C:\\Users\\bmar'),\n ('VBOX_MSI_INSTALL_PATH', 'C:\\Program Files\\Oracle\\VirtualBox\\'),\n ('VS140COMNTOOLS',\n  'C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\'),\n ('WINDIR', 'C:\\Windows'),\n ('INTELLIJ_COMMAND_HISTFILE',\n  'C:\\Users\\bmar\\.PyCharmCE2018.3\\config\\terminal\\history\\history-1'))\n``. I found a workaround (i.e.set HOMEDRIVE=C:`)\n```\nC:\\src\\Simpala>set HOMEDRIVE=C:\nC:\\src\\Simpala>echo %HOMEDRIVE%\nC:\nC:\\src\\Simpala>git commit -am \"test commit\"\n[INFO] Initializing environment for https://github.com/ambv/black.\n[INFO] Initializing environment for https://gitlab.com/pycqa/flake8.\n[INFO] Installing environment for https://github.com/ambv/black.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\n[INFO] Installing environment for https://gitlab.com/pycqa/flake8.\n[INFO] Once installed this environment will be reused.\n[INFO] This may take a few minutes...\nblack....................................................................Failed\nhookid: black\nFiles were modified by this hook. Additional output:\nreformatted C:\\src\\runl.py\n...\n```. Awesome! Thanks a lot for your support!. ",
    "ghostsquad": "Hmm but can this be made configurable? Like maybe the ability to remove the\nbackground color?\nCheers,\nWes\nOn Wed, Mar 13, 2019, 6:09 PM Anthony Sottile notifications@github.com\nwrote:\n\nPassed is green not yellow, it uses whatever color your terminal emulator\nhas configured for green.\nFor instance, this is what it looks like on ubuntu:\nhttps://asottile.github.io/pygments-pre-commit/demo/test_basic_pre_commit.html\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/pre-commit/pre-commit/issues/969#issuecomment-472665164,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA3JQPJs4kBxefOnO1bc--ZPXGvPLWIWks5vWaFJgaJpZM4byY_d\n.\n. \n",
    "homebysix": "Thank you! I wasn't aware of the trailing -- trick, but that seems to do exactly what I need. It also appears I can use multi-line arrays to make the config file a bit more readable. The following config is working for me now:\n-   repo: https://github.com/homebysix/pre-commit-macadmin\n    rev: v1.0.5\n    hooks:\n    -   id: check-munki-pkgsinfo\n        args: [\n            '--required-keys', 'description', 'name', 'developer', 'category', 'version',\n            '--catalogs', 'testing', 'stable',\n            '--categories', 'Communication', 'Design', 'Engineering', 'macOS', 'Printers',\n                'Productivity', 'Security',  'Utilities', 'Web Browsers',\n            '--']\nThank you!. ",
    "skorokithakis": "That only runs on pre-commit run --stage manual, no? I'm looking for the inverse, pretty much.. Ahh, I see what you mean. Yes, that's fantastic. Could the docs perhaps be amended to include this? It'd be nice to have it on the site, it would have saved me a trip here, for one.. ",
    "rp-tanium": "Changed clone to take the config dict. Two args which came from the dict was necessarily upped to three, which seemed to be my internal threshold! :). ",
    "Heier2013": "Consider compatibility git < 2.5?. ",
    "javabrett": "Fixed, thanks!. "
}