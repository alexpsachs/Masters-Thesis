{
    "awanjila": "Lol! Thank you..\n. ",
    "Davecalix": "Thanks!.... ",
    "rwever-316": "  Doesn't fix issue .   Doesn't fix issue . ",
    "DharshanJS": "Thanks!. ",
    "LandonFerg": "Thanks!. ",
    "ziya5635": "thanks.. ",
    "gorakhnathlad": "Thanks.. ",
    "sokra": "\nYour dependencies are inconsistent: \npossible: webpack@0.7.x, enhanced-require@0.3.x, webpack-dev-server@0.7.x\npossible: webpack@0.8.x, enhanced-require@0.4.x, webpack-dev-server@0.8.x\nyours webpack@0.7.x, enhanced-require@0.3.x, webpack-dev-server@0.8.x so it uses webpack 0.8 in dev server.\njam is no longer (as 0.8) a default lookup path (for performance reasons) { resolve: { modulesDirectories: [\"jam\", \"web_modules\", \"node_modules\"] } }. I think this causes the error. The error message only shows the first error. (alternative: define web_modules as target dir for jam in package.json)\nTODO for me: Update webpack/example-app\n{ content: \"index.jade\" } should be { content: path.join(__dirname, \"index.html\") } or leave it empty (it has a default page)\nI think { amd: { Backbone: true } } is not needed\nnew Server(path.join(__dirname, \"client.js\"), options)\n. I usually leave it default and fill the body in the javascript of the entry point.\n\njavascript\n$(\"body\").html(require(\"body.jade\")());\nYou can also serve whatever you want to by overriding serveContent of the server.\njavascript\nrequire = require(\"enhanced-require\")(module, {recursive: true});\nvar server = new Server(require.resolve(\"./client.js\"), options);\nserver.serveContent = function(req, res) {\n  res.writeHead(...);\n  res.end(require(\"./client.jade\")(), \"utf-8\");\n};\nserver.listen(process.env.PORT, function() {\n  console.log(\"webpack-dev-server running on port\", process.env.PORT);\n});\n. If you still unsure about your setup, here is a good example wpt tutorial.\n. you can still use jam with wpt.\nanyway you don't have to strictly follow or use wpt, but you can steal some aspects from it.\n. i. e. the way the webpack-dev-server is started with a static file generated from jade template\nhttps://github.com/webpack/template/blob/master/template/_template/devServer.js\n. :+1: \n. huh...\n. It does work for me...\n``` text\n\ncat package.json\n{\n        \"name\": \"xxx\",\n        \"version\": \"0.0.0\",\n        \"dependencies\": {\n                \"webpack-dev-server\": \"0.11.x\",\n                \"webpack\": \"0.11.x\"\n        }\n}\nnpm -v\n1.2.30\nnpm install\n...\nwebpack@0.11.0-beta19 node_modules\\webpack\n\u251c\u2500\u2500 base64-encode@1.0.1\n\u251c\u2500\u2500 tapable@0.1.2\n\u251c\u2500\u2500 clone@0.1.10\n\u251c\u2500\u2500 async@0.2.9\n\u251c\u2500\u2500 mkdirp@0.3.5\n\u251c\u2500\u2500 esprima@1.0.4\n\u251c\u2500\u2500 enhanced-resolve@0.5.12\n\u251c\u2500\u2500 optimist@0.5.2 (wordwrap@0.0.2)\n\u251c\u2500\u2500 webpack-core@0.2.5 (source-map@0.1.30)\n\u251c\u2500\u2500 uglify-js@2.3.6 (optimist@0.3.7, source-map@0.1.30)\n\u2514\u2500\u2500 node-libs-browser@0.1.2 (zlib-browserify@0.0.1, console-browserify@0.1.6, vm-browserify@0.0.1, crypto-browserify@0.2.1, buffer-browserify@0.0.4, http-browserify@0.1.6)\n\nwebpack-dev-server@0.11.1 node_modules\\webpack-dev-server\n\u251c\u2500\u2500 stream-cache@0.0.2\n\u251c\u2500\u2500 optimist@0.5.2 (wordwrap@0.0.2)\n\u251c\u2500\u2500 webpack-dev-middleware@0.11.0 (mime@1.2.11, enhanced-resolve@0.5.12)\n\u251c\u2500\u2500 express@3.2.6 (methods@0.0.1, fresh@0.1.0, cookie-signature@1.0.1, range-parser@0.0.4, buffer-crc32@0.2.1, cookie@0.1.0, debug@0.7.2, commander@0.6.1, mkdirp@0.3.4, send@0.1.0, connect@2.7.11)\n\u2514\u2500\u2500 socket.io@0.9.16 (base64id@0.1.0, policyfile@0.0.4, redis@0.7.3, socket.io-client@0.9.16)\n```\n. > However, it's still strange that a module requires its peerDependency.\nThat isn't the case. webpack-dev-server do not have webpack as dependency.\n. The locally installed webpack-dev-server requires a locally installed version of webpack@1.x. So check your package.json and add webpack to the devDependencies. You can also do this with npm install webpack@1.x --save-dev.\nnpm install webpack -g install webpack globally, but you need it locally.\nIf you want to access the CLI of webpack and webpack-dev-server you need to install them globally in addition to the locally installed versions. (When you run them from command line, they check for a locally installed version and use that one)\n. That's weird... I use chrome too and never had that problem.\n. You added a BOM to the index.html file.\n. You added a BOM to the index.html file.\n. hmm... it works fine for me and I cannot reproduce the issue.\nIt should write a line to stdout which display the content base i. e. content is served from C:\\[...]\\webpack-dev-server\\example. is that line correct? Also check if you are using the correct version 1.2.0 and webpack 1.0.x.\ncontentBase: \"./xxx\" is not a config option for webpack, so webpack.config.js is not the correct file for this option.\n. hmm... it works fine for me and I cannot reproduce the issue.\nIt should write a line to stdout which display the content base i. e. content is served from C:\\[...]\\webpack-dev-server\\example. is that line correct? Also check if you are using the correct version 1.2.0 and webpack 1.0.x.\ncontentBase: \"./xxx\" is not a config option for webpack, so webpack.config.js is not the correct file for this option.\n. what was the problem? you can close it too (as issue creator).\n. what was the problem? you can close it too (as issue creator).\n. There is no file index.html in the content base.\n. There is no file index.html in the content base.\n. Do you really need HTTPS for a development server? Nonetheless I would accept a PR adding a ssl option.\n. Do you really need HTTPS for a development server? Nonetheless I would accept a PR adding a ssl option.\n. This may work if contentBase is a directory or a file, but it will not work in the case where contentBase is a url. You cannot inject something into a redirect resp. the redirected page. \nI would work with a browser extension or with a content script.\nWe could insert the logic into the bundle, like this:\njavascript\n{\n  entry: [\"webpack-dev-server?http://localhost:8080\", \"yourEntry\"]\n}\n. This may work if contentBase is a directory or a file, but it will not work in the case where contentBase is a url. You cannot inject something into a redirect resp. the redirected page. \nI would work with a browser extension or with a content script.\nWe could insert the logic into the bundle, like this:\njavascript\n{\n  entry: [\"webpack-dev-server?http://localhost:8080\", \"yourEntry\"]\n}\n. A inlined mode is now supported. Means you can run the webpack-dev-server without GUI/iframe.\nTwo options to do this: (examples)\nadd it to the entry point\nYou need to pass the url to the dev-server (for socket.io connection).\njavascript\n{\n  entry: [\"webpack-dev-server/client?http://localhost:8080\", \"yourEntry\"]\n}\nas script tag\nadd an additional script tag to the html page:\nhtml\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\n. A inlined mode is now supported. Means you can run the webpack-dev-server without GUI/iframe.\nTwo options to do this: (examples)\nadd it to the entry point\nYou need to pass the url to the dev-server (for socket.io connection).\njavascript\n{\n  entry: [\"webpack-dev-server/client?http://localhost:8080\", \"yourEntry\"]\n}\nas script tag\nadd an additional script tag to the html page:\nhtml\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\n. I need to do only one of these:\n- webpack-dev-server/client?DEVSERVERURL as entry point (inline mode)\n- <script> tag to DEVSERVERURL/webpack-dev-server.js (inline mode)\n- Open DEVSERVERURL/webpack-dev-server/PATH (normal mode)\nIn inline mode you just open SERVERURL/PATH\nExamples for \nDEVSERVERURL = http://localhost:8009 (The url of the dev server)\nPATH = index.aspx\nSERVERURL = http://localhost:8080 (The url of your server)\n. I need to do only one of these:\n- webpack-dev-server/client?DEVSERVERURL as entry point (inline mode)\n- <script> tag to DEVSERVERURL/webpack-dev-server.js (inline mode)\n- Open DEVSERVERURL/webpack-dev-server/PATH (normal mode)\nIn inline mode you just open SERVERURL/PATH\nExamples for \nDEVSERVERURL = http://localhost:8009 (The url of the dev server)\nPATH = index.aspx\nSERVERURL = http://localhost:8080 (The url of your server)\n. @mattdesl You can use the entry point mode:\njs\n{\n  entry: [\"webpack-dev-server/client?http://localhost:8080\", \"./your/entry\"]\n}\nand use this url: http://localhost:8080/bundle\n. @mattdesl You can use the entry point mode:\njs\n{\n  entry: [\"webpack-dev-server/client?http://localhost:8080\", \"./your/entry\"]\n}\nand use this url: http://localhost:8080/bundle\n. We could add a CLI parameter that adds this entry point automatically. That would be cool...\n. We could add a CLI parameter that adds this entry point automatically. That would be cool...\n. Wrap it in quotes (normal shell behavior):\n--content-base \"http://mypage/index.html?param1=test&param2=test2\"\n. Wrap it in quotes (normal shell behavior):\n--content-base \"http://mypage/index.html?param1=test&param2=test2\"\n. The idea was to make it very clear what is the status of the page.\nI consider an customizable interface in combination with #11.\n. The idea was to make it very clear what is the status of the page.\nI consider an customizable interface in combination with #11.\n. A inlined mode is now supported. Means you can run the webpack-dev-server without GUI/iframe.\nTwo options to do this: (examples)\nadd it to the entry point\nYou need to pass the url to the dev-server (for socket.io connection).\njavascript\n{\n  entry: [\"webpack-dev-server/client?http://localhost:8080\", \"yourEntry\"]\n}\nas script tag\nadd an additional script tag to the html page:\nhtml\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\n. The dev-server uses the middleware to serve the assets. They should have correct mimetypes. I think there are incorrect mimetypes for serving static files from filesystem. Could you open a pull-request for this case too?\n. Thanks, looks much better :smile: \n. I tried... npm doesn't like me. There was a weird error telling me there is a self signed cert in the cert chain... huh?\n. aha... http://blog.npmjs.org/post/78085451721/npms-self-signed-certificate-is-no-more\n. ok is published\n. Thanks\n. Nice catch. Thanks\n. Thanks\n. You can pass a server url als contentBase, which makes the webpack-dev-server proxy all non-webpack related request.\nsee http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server\n. You can now pass a proxy config as contentBase\n. You need a config like this:\njavascript\n...\noutput: {\n  path: __dirname + \"/public\",\n  filename: \"compiled/js/internal/[name].js\"\n}\nand run it with webpack-dev-server --content-base public\nNow you can access any file in public and any file that would be there:\nhttp://localhost:8080/compiled/js/dashboard.js\n. Thanks\n. You need to add \"webpack/hot/dev-server\" as entry. This module triggers the hot update.\nThis page should be linked in the documentation, but it isn't :(\nhttps://github.com/webpack/docs/wiki/hot-module-replacement-with-webpack\n. The webpack-dev-server doesn't write to disk. It serves the result from memory.\nThe line webpack result is served from / indicates that your bundle is served from /init.js, but your html expects it to be at /bin/init.js. You need to tell the webpack-dev-server where your assets should be served by setting output.publicPath. In your case set it to output.publicPath: \"/bin/\" (this is also required for Code Splitting).\n. > What do you think? I can also create a pull request if you're ok with it.\nGood idea.\n. merged in 1.3.0\n. Thanks, but I cannot merge it with whitespace changes...\n. it's a tab to spaces change... npm does that when using --save...\n. it's a tab to spaces change... npm does that when using --save...\n. The example was a bit old and it used webpack and webpack-dev-server 0.11. I think you uses a newer version to compile it, that's maybe incompatible.\nI've updated it to webpack 1.2. So you can now use a newer version.\n. The example was a bit old and it used webpack and webpack-dev-server 0.11. I think you uses a newer version to compile it, that's maybe incompatible.\nI've updated it to webpack 1.2. So you can now use a newer version.\n. Invalid path false looks like a bug\n. Invalid path false looks like a bug\n. Thanks, it was a bug...\nIssue for the other problems would be great :smile: \n. Thanks, it was a bug...\nIssue for the other problems would be great :smile: \n. Thanks\n. Thanks\n. It should work with --hot now... in webpack@1.4.1\n. It should work with --hot now... in webpack@1.4.1\n. There is also a chatroom. You can head over there. There are most probably more bugs in the Hot Replacement stuff... (not many users and not good tested)\n. There is also a chatroom. You can head over there. There are most probably more bugs in the Hot Replacement stuff... (not many users and not good tested)\n. It would make sense to default it to http://localhost:[configuredPort]. But you can only do it in the webpack-dev-server CLI. The API expects a Compiler object.\n. It would make sense to default it to http://localhost:[configuredPort]. But you can only do it in the webpack-dev-server CLI. The API expects a Compiler object.\n. This should be possible within a plugin. Something similar to this:\njs\nplugins: [\n  function(compiler) {\n    compiler.plugin(\"after-compiler\", function() {\n      this.fileDependencies.push(\"/path/to/my/file\");\n      this.contextDependencies.push(\"/path/to/my/folder\");\n    }\n  }\n]\n. This should be possible within a plugin. Something similar to this:\njs\nplugins: [\n  function(compiler) {\n    compiler.plugin(\"after-compiler\", function() {\n      this.fileDependencies.push(\"/path/to/my/file\");\n      this.contextDependencies.push(\"/path/to/my/folder\");\n    }\n  }\n]\n. The way you are supposed to do this is the following:\n- Use the webpack-dev-server as is (don't add middlewares here)\n- Use your own connect (or whatever) server to serve all requests that are not webpack managed static resources\n- Configure content base for the webpack-dev-server to point to your server. All not webpack managed requests are redirected (or you can opt-in for proxing).\n- Open the webpack-dev-server url\nWhen using redirect: The HTML page you serve need to have an absolute url to the javascript file on the webpack-dev-server. You need to set publicPath for webpack to an absolute url to the webpack-dev-server.\nConfig example\n. The way you are supposed to do this is the following:\n- Use the webpack-dev-server as is (don't add middlewares here)\n- Use your own connect (or whatever) server to serve all requests that are not webpack managed static resources\n- Configure content base for the webpack-dev-server to point to your server. All not webpack managed requests are redirected (or you can opt-in for proxing).\n- Open the webpack-dev-server url\nWhen using redirect: The HTML page you serve need to have an absolute url to the javascript file on the webpack-dev-server. You need to set publicPath for webpack to an absolute url to the webpack-dev-server.\nConfig example\n. The stylus-loader throwed an error while compiling. Not related to the webpack-dev-server... This is an issue for the stylus-loader repo...\n. The stylus-loader throwed an error while compiling. Not related to the webpack-dev-server... This is an issue for the stylus-loader repo...\n. webpack is probably require(\"gulp-webpack\"), but should be require(\"webpack\")...\n. webpack is probably require(\"gulp-webpack\"), but should be require(\"webpack\")...\n. add the webpack-dev-server to your package.json and install it.\nor\nadd resolveLoader.root = \"/path/to/your/app/node_modules\"\n. add the webpack-dev-server to your package.json and install it.\nor\nadd resolveLoader.root = \"/path/to/your/app/node_modules\"\n. The global installed bin checks if there is a locally installed one in the current directory. So you just need to type webpack-dev-server and it should run the locally installed version. (maybe update the global installed one, this was a recent change)\nsee https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L3-L9\n. The global installed bin checks if there is a locally installed one in the current directory. So you just need to type webpack-dev-server and it should run the locally installed version. (maybe update the global installed one, this was a recent change)\nsee https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L3-L9\n. You are right... that's a bug... I fixed it...\n. You are right... that's a bug... I fixed it...\n. @markmarijnissen There is an additional publicPath for the dev-server. You can set this to / and the publicPath of webpack to ../.\n@c089 The publicPath for the dev-server need a prefixed /. It's the mount point of the in-memory bundle.\n. @markmarijnissen There is an additional publicPath for the dev-server. You can set this to / and the publicPath of webpack to ../.\n@c089 The publicPath for the dev-server need a prefixed /. It's the mount point of the in-memory bundle.\n. Read this guide.\njs\nmodule.exports = {\n    context: __dirname,\n    entry: ['webpack/hot/dev-server', './index.js']\n}\n. Read this guide.\njs\nmodule.exports = {\n    context: __dirname,\n    entry: ['webpack/hot/dev-server', './index.js']\n}\n. You could try the bail option, but I'm not sure if that works...\n. You could try the bail option, but I'm not sure if that works...\n. @chanon We need to add a webpack mode that doesn't emit any asset and don't change the records when an error occur.\n. @chanon We need to add a webpack mode that doesn't emit any asset and don't change the records when an error occur.\n. The commit looks non-functional to me. Did you try it?\n. The commit looks non-functional to me. Did you try it?\n. I won't merge this, because webpack-dev-server and application server should be separate by design. Best in separate processes. There is a proxy option which makes it behave like in one server, but best is to design your server in a way in which allow to have scripts anywhere.\n. fixed by https://github.com/webpack/webpack-dev-middleware/pull/16\n. Sorry, forgot about that...\nI think this is unnecessary now. The webpack-dev-server supports HTTPS now and you shouldn't need to proxy it (host it on another port).\nRead here about how to setup the webpack-dev-server without proxy: http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server\n. hmm... ok.\nAny why do you want to change the socket.io path? I think it's possible the pass a subpath to the client webpack-dev-server/client?https://domain/some/sub/path. Why the additional /socket.io?\n. Why not contentBase: false...\n. Can you try to use the inlined mode? It doesn't use an iframe. It means you would open http://localhost:8090/... directly.\nIf that works, could you please also add a note about pushState to the inlined mode docs...\n. Is it possible to serve the error message to the client?\n. Thanks\n. Are you trying every single webpack feature?\n. I don't know... Try it...\n. fixed by 06e9d24f7467c08d7afeff4c4ed215de9eff2101\n. The server sends an ok/errors/warnings event on connection.\n. It works fine for me...\n. Maybe just your install is broken... Try to reinstall it...\n. Does the file exists in the folder?\n. I know, add \"web_modules\" to resolve.modulesDirectories, until we fix it...\n. There is an issue for this already... anywhere...\n. ^1.3.0 means >=1.3.0 < 2\n. The -beta causes this... \nhttps://github.com/npm/npm/issues/6257\n. The webpack-dev-server doesn't write files to disk. You can use webpack --watch which writes files to disk. But why would you need to access the generated assets? This shouldn't be required.\nWhen using with an existing server you should thread the webpack assets as blackbox that exists at a special URL.\n. The webpack-dev-server doesn't write files to disk. You can use webpack --watch which writes files to disk. But why would you need to access the generated assets? This shouldn't be required.\nWhen using with an existing server you should thread the webpack assets as blackbox that exists at a special URL.\n. Writing to disk is not an option for the webpack-dev-server. Instead you can use webpack --watch which does the same but writes files to disk + a static fileserver.\n. Writing to disk is not an option for the webpack-dev-server. Instead you can use webpack --watch which does the same but writes files to disk + a static fileserver.\n. > I have two entry points\nYou should have two configurations, because the target option differs: web and node.\n. > I have two entry points\nYou should have two configurations, because the target option differs: web and node.\n. Just use 1.4.3 instead...\n. Weird... are you really sure that the webpack-dev-server is the cause?\n. Try to add this to your configuration:\njs\ndevServer: {\n  publicPath: \"/build\"\n}\n. Thanks\n. Sorry I forgot it... Too many issues...\n. Could you change spaces to tabs to stay consistent with the exisiting style?\n. Thanks\n. I would guess the 6to5-loader has a bug and fails on in...\n. > is being put into my /build folder either\nthe dev-server bundles in memory.\n\nUncaught ReferenceError: webpackJsonp is not defined\n\nYou need to include a <script> tag to the common.js file in the HTML.\n. the webpack-dev-server serves the files in the directory provided with contentBase/--content-base which defaults to the current directory.\n. http://localhost:8080/webpack-dev-server/index.html\nor\nhttp://localhost:8080/webpack-dev-server/\n. http://webpack.github.io/docs/webpack-dev-server.html\n. Thanks\n. js\n    output: {\n        library: '[name]',\n        filename: './build/js/[name].js'\n    },\nshould be\njs\n    output: {\n        path: require(\"path\").resolve(\"./build/js\"),\n        library: '[name]',\n        filename: '[name].js'\n    },\n. I assume the leading ./ in output.filename was the problem.\n. The  correct way would be to use two servers, webpack-dev-server plus application server. See http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server\n. - You don't have a index.html in that folder\n- or you've set contentBase to your build folder, which is incorrect (it should point to a folder containing the index.html)\n- or if you want to use the automatic generated HTML page you should have opened http://localhost:8080/bundle\n. Thanks\n. Thanks\n. Are you using the up-to-date versions of webpack and webpack-dev-server?\n. http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server\n. https://github.com/webpack/react-starter\n. hot mode makes no difference\n. Looks fine...\n. Is http://localhost:9090/build/bundle.js served correctly?\n. Not sure why...\nbut you can try to switch to the inline mode. Maybe that's more stable...\n. --hot do the following stuff:\n- adds the HotModuleReplacementPlugin\n- with --inline it adds 'webpack/hot/dev-server' to every entry\n- switches the webpack-dev-server into hot mode, which post messages instead of reloading the page. devServer: { hot: true }\n. --inline adds webpack-dev-server/client?<webpack-dev-server url> to all entry points.\n. yes:\nin webpack.hot.config.js\n- require the original webpack.config.js\n- entry push 'webpack/hot/dev-server' and 'webpack-dev-webpack/client?http://localhost:8080'\n- plugins push new webpack.HotModuleReplacementPlugin()\n- add property devServer: { hot: true }\n. You can write a plugins for the invalid hook.\njs\nplugins: [\n  function() {\n    this.plugin(\"invalid\", function() {});\n  }\n]\n. This is working as expected.\n.listen(8079, \"bikeindex.local\") is equal to .listen(8079, \"127.0.0.1\") as you specified it this way in hosts. That way other devices cannot connect.\n. The second arguments to listen specifies the interface to socket listens on.\n. The react-hot-loader only works for React components. Is route.js a React component?\n. The react-hot-loader only works for React components. Is route.js a React component?\n. The log looks pretty good... It does't look like a connection/configuration issue.\ncc @gaearon\n. The log looks pretty good... It does't look like a connection/configuration issue.\ncc @gaearon\n. Thanks\n. This should be added to the documentation, but I think adding a default to the API is the wrong way. There should be a error message instead when in lazy mode but no filename provided. The default would be wrong in 99% of cases and propably lead to confusion.\n. Throw it.\n. @AprilArcus take a look at the note, fix it and create another PR.\n. Thanks\n. We already do this. Errors are forwarded to the client via socket.io and displayed in the browser console.\n. Thanks\n. merged\n. Set contentBase to a fs path to use your own html file.\n. http://webpack.github.io/docs/webpack-dev-server.html#webpack-dev-server-cli\n--hot --inline is not equal to (only) hot: true. inline: true doesn't exists.\n. Thanks\n. contributing guidelines\n\nPlease post a question to StackOverflow with the webpack tag. Questions that include your webpack.config.js and relevant files are more likely to receive responses.\n. Strict mode changes (function() { return this; })() to undefined. So the module is propably not expected to run in strict mode, but some loader add the use strict. (babel?)\n. Me is also using windows... :smile: \n. Thanks\n. Thanks\n. Thanks\n. @jokull You can send a PR to add these hint...\n. Send a PR\n. Could you update this PR to the latest commit?\nCould you also check for correct order of the if (options.historyApiFallback) block?\n. Actually I implemented the features feature because of your PR. The point is: The order (of the features) depends on the use case. With the features feature you can configure the order with the features option. Just override the order with i. e. features: [\"setup\", \"headers\", \"middleware\", \"contentBase\", \"proxy\"]. The order \"proxy\" before \"contentBase\" is more common so it's the default.\n\nIf you want to do something, you can add the \"features\" option to the documentation. :smile: \nClosing the PR, because it's now obsolete.\n. You should not use the webpack-dev-server for you application stuff.\nIn addition to that socket.io should not be exposed from the webpack-dev-server, because we want to have to option to replace it in future versions without breaking the API.\n. Thanks.\n. If you don't use inline mode --inline you can specify the remote path in the query parameter of the client reference webpack-dev-server/client?http://url:8080\n. There is already an invalidate function triggers a rebuild.\n. There is a new way in the webpack-2 branch.\n--env.dev\nI write some documentation about that soon.\n. Thanks\n. Thanks\n. https://github.com/webpack/webpack/blob/master/bin/convert-argv.js#L14\nsend a PR.\n. I think the native stuff in bufferutils is an optional dependency and you should be able to install it without it. Otherwise send an issue to the engine.io repo.\nHere is a guide how to make node-gyp work on windows. As far as I remember it was straight-forward: https://github.com/TooTallNate/node-gyp/#installation\n. I use windows, and it works fine. I have two machines one with VS and Python so the node-gyp works and one without both of them and webpack-dev-server still works fine. The native dependencies are optional and everything works also without them.\nIf you doesn't work for you that propably an issue of an incorrect node-gyp configuration and not a missing one.\n\nWebpack can simply use SockJS assuming it doesn't have a node-gyp dependency or a different alternative for that matter.\n\nFeel free to send a PR. The public interface doesn't expose socket.io.\n. This initial reasons also sound invalid for me.\nBut @syranide reasons looks valid.\n\n+1 because JS compresses really well and this makes remote testing significantly faster too.\n\nSo we better should enable this by default without an option, shouldn't we?\n. This initial reasons also sound invalid for me.\nBut @syranide reasons looks valid.\n\n+1 because JS compresses really well and this makes remote testing significantly faster too.\n\nSo we better should enable this by default without an option, shouldn't we?\n. The public option should default to the host option, elsewise this would be a breaking change.\nmaybe \"://\" + (options.public || options.host) + \":\" and no default value.\n. The public option should default to the host option, elsewise this would be a breaking change.\nmaybe \"://\" + (options.public || options.host) + \":\" and no default value.\n. To support the usecase of #293 public should not only set the host part but also the port part:\ndiff\n- \"://\" + (options.public || options.host) + \":\" + options.port];\n+ \"://\" + (options.public || (options.host + \":\" + options.port))];\n. To support the usecase of #293 public should not only set the host part but also the port part:\ndiff\n- \"://\" + (options.public || options.host) + \":\" + options.port];\n+ \"://\" + (options.public || (options.host + \":\" + options.port))];\n. > Guys, any plans to merge this or introduce the public ip:port parameter with some other solution?\nI'll merge this.\n. > Guys, any plans to merge this or introduce the public ip:port parameter with some other solution?\nI'll merge this.\n. Thanks\n. Just published...\n. Thanks\n. You can send a PR.\n. Use inline mode (--inline, no /webpack-dev-server/ in path). The normal mode wrapps your app in a iframe and you don't see the url changes.\n. add a plugin on \"done\" instead.\n. The current socket.io neither works, see https://github.com/webpack/webpack-dev-server/issues/260#issuecomment-139842716\n. Thanks\n. Could you add it to the documentation?\n. Thanks\n. updated documentation\n. have you tried npm rebuild?\n. Thanks\n. You can set the publicPath at runtime (in webpack compiled modules):\njs\n__webpack_public_path__ = 'http://' + host + ':45537/js/'\n. > the warning about the Hot Module Replace Plugin needing to be disabled scares me, if I can't use HMR then what's the point of this?\nThe note is wrong, I removed it.\n\nhmmm... it should work that way.\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. http://webpack.github.io/docs/webpack-dev-server.html\nin the top-right corner is an edit button\n. http://webpack.github.io/docs/webpack-dev-server.html\nin the top-right corner is an edit button\n. This could break hot reloading, as the app doesn't get notified on error.\ncc @gaearon\n. This could break hot reloading, as the app doesn't get notified on error.\ncc @gaearon\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. please fix the whitespaces (spaces -> tabs)\n. already support through --watch-stdin in webpack\n. Thanks\n. Could you add it to the documentation?\n. I don't understand why this is neccesary. The middleware, which is applied before the contentBase, should serve the files from webpack fs.\nIs there a incorrect publicPath configuration on your side?\n. Closing in favor of https://github.com/webpack/webpack-dev-server/pull/236\n. Feel free to contribute to the other PR.\n. Looks fine now... I'll test it and eventually merge it. Please ping me in a week if I forget it...\n. Thanks :+1: \npretty good change, finally we get rid of the native dependency...\n. merged\n. No longer needed, because webpack-dev-server/client accepts a query string which contains the hostname.\nwebpack-dev-server/client?http://url-to-webpack-dev-server:port/\nThis will omit the access to document\n. No longer needed, because webpack-dev-server/client accepts a query string which contains the hostname.\nwebpack-dev-server/client?http://url-to-webpack-dev-server:port/\nThis will omit the access to document\n. done\n. done\n. Thanks\n. now using SockJS\n. Sounds like na useful functionality.\n\nthe 'magic' of checking for .html files\n\nCould you instead check for file or directory?\n. > I just added an additional bit of functionality which I can remove from this and make a new PR for if you don't like or don't like how I did it.\nI don't like it. Serving webpack assets is the job of the webpack-dev-middleware.\nJust serving them from the webpack fs is not good, i. e. it doesn't block on compiling etc.\nCould you please remove the last commit and rebase the PR? The remaining PR looks good.\n. Thanks\n. @claycephas npm run prepublish if you want to run it from git checkout.\n@SpaceK33z it opens the wrong uri when inline: false.\n. It should open the printed url.\nhttp://localhost:8080/webpack-dev-server/ in non-inline mode.\n. Thanks...\nCould you also update documentation page to include this CLI option?\n. Thanks\n. WDS doesn't use the output.path. But I think we could just remove the assignment and it should work fine.\nThe assignment was originally to enforce linux style paths, because the prev versions of memory-fs doesn't support windows style paths. But as it supports it now it should be fine to remove this.\n. WDS doesn't use the output.path. But I think we could just remove the assignment and it should work fine.\nThe assignment was originally to enforce linux style paths, because the prev versions of memory-fs doesn't support windows style paths. But as it supports it now it should be fine to remove this.\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. merged\n. Thanks\n. Thanks\n. Thanks\n. Could you add it to the documentation too?\n. propably the dependencies missmatch. webpack and webpack-dev-server installed locally?\n. propably the dependencies missmatch. webpack and webpack-dev-server installed locally?\n. There is an inlined mode which doesn't use a iframe. In the next major version this is the default (published as beta). This mode doesn't have this issue.\nYour solution will not work if the content window uses a separate port or url (because of cross-orgin reasons).\n. a PR for ranges was merged\n. a PR for ranges was merged\n. Thanks\n. Closing because this is not related to webpack-dev-server, but to webpack instead.\n\nNote: I'm cleaning up the issues list. For questions please use stackoverflow, or for issues file them on the webpack repository\n. Closing because this is not related to webpack-dev-server, but to webpack instead.\nNote: I'm cleaning up the issues list. For questions please use stackoverflow, or for issues file them on the webpack repository\n. 0.0.0.0 binds to all hosts\n. 0.0.0.0 binds to all hosts\n. This is a browser bug, but there has been some progress here recently so at least eval devtool works.\n. fixed\n. fixed\n. partly merged\n. a PR for ranges was merged\n. It's the path in the in-memory filesystem, not on the real fs. So it's fine to use nix paths here.\n. It's the path in the in-memory filesystem, not on the real fs. So it's fine to use nix paths here.\n. The files are build correctly, there was just no index.html file inside your content-base.\n. Thanks\n. Closing because this is not related to webpack-dev-server, but to webpack instead.\nNote: I'm cleaning up the issues list. For questions please use stackoverflow, or for issues file them on the webpack repository\n. Change this line:\n\n'webpack-dev-server/client?http://localhost:9090/',\nto \n'webpack-dev-server/client?http://' + require(\"os\").hostname() + ':9090/',\n. No this doesn't work. It also recommended to NOT use [hash] in a dev-server configuration. Use a CDN_PATH is propably also wrong. Caching is not an issue in development.\n. Thanks\n. You can specify the network url for the webpack-dev-server:\n'webpack-dev-server/client?http://localhost:9191/',\n'webpack-dev-server/client?http://X.X.X.X:9191/',\n. yes, see contentBase option.\n. there is no rewrite option.\nSee options here: https://www.npmjs.com/package/http-proxy-middleware\n. Any volunteer?\n. Thanks\n. you can add a meta tag into the HTML.\n. Yes this will work for the CLI. The API has no inline option.\n. content-base is the wrong option here. It serves files from the real filesystem, not from the virtual webpack filesystem.\nYou can provide a publicPath to the dev-server for specify which virtual directory should be served. In your case you need two different publicPaths, one for webpack and one for the dev-server\n. Closing because this is not related to webpack-dev-server, but to webpack instead.\n\nNote: I'm cleaning up the issues list. For questions please use stackoverflow, or for issues file them on the webpack repository\n. Thanks\n. Thanks\n. Thanks\n. done\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Thanks\n. Do you use noParse in your configuration?\n. Don't use --hot and the HotModuleReplacmentPlugin.\n. Thanks\n. Thanks\n. https://github.com/webpack/webpack-dev-server/releases/tag/v2.4.3\n\nbest add --public your-host:8080 to fix it.. btw. it's intended to not work when just using --host 0.0.0.0. This is a security risk.. behind proxy you can use the disableHostCheck: true flag.. @hooraygith I added it and released a new version. Try to update.. > 127.0.0.1 foo-local.com bar-local.com\n@bdwain That's no problem, you just have to pass the public name of the dev-server via --public bar-local.com:8080.. Currently it's not possible to have multiple host, but feel free to send a PR.. @phairoh oh yeah, thanks for the hint. Should be fixed now.. > What if we don't use webpack-dev-server in production?\nThat's good. webpack-dev-server should not be used in production. But you are still affected!\n\nDoes it make sense to have this option enabled on local servers?\n\nyes.\n\nI'm trying to understand the problem this patch fixes.\n\ncheck the details here: https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a. @nick-woodward yes in a perfect world you are right.\nFrom my experience how many people update to the latest major version, I've chosen to release this as patch version. I know that this breaks some setups, but I took this risk for security reasons.. > So I can set up an nginx server that forwards all requests to my webpackDevServer? How would this fix the security issue?\nAssuming\n the nginx server validates the Host header\n the server is only used for the webpack-dev-server and nginx server (not using the browser)\n* the webpack-dev-server port is not accessible from local network.. Could you explain why you want to disable this security feature?. released in v2.4.4. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please open a new issue with filled issue template. Also make sure your issue is not a question. Questions should be posted on Stack Overflow.. Thanks. I guess this is not a bug, because this is intended behavior. The contentBase option defaults to the current directory and the webpack-dev-server acts as static web server. This is important to serve the HTML files and other files from this directory.. Added this sentence to the blog post:\n\nConsider all passwords/keys in your \u201ccontent base\u201d (which defaults to the current directory) as leaked.. > @sokra how to do you feel about the change described in #890 (comment)? I'd be happy to submit a PR.\n\nno. The default should be secure. Binding to 0.0.0.0 is insecure.. no, don't use it in production.\nThat's not what this attack is about. It's about attacking the dev-server from a website you visit while it's running.\nSee https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a. Thanks. This is fixed in the \"next\" branch in webpack/webpack. We are working on upgrading the WASM pipeline and will merge this to master in a few days.. This is fixed in the \"next\" branch in webpack/webpack. We are working on upgrading the WASM pipeline and will merge this to master in a few days.. It's only required in lazy mode. So check of options.lazy.\n. This is wrong here. contentBase is not used as proxy. It's used to redirect requests, which is not deprecated.\n. whitespace\n. This part should be moved into lib/Server.js to allow this config style without the CLI too.\n. Why removing this?\n. I'll cherrypick the first commit, when merging this..\n. This could be removed, because lib/Server.js does the same.\n. proxyOptions.path = path; missing?\n. It's not necessary, is it?\n. Why creating a new proxy for each request?\n. It's a dev-server, which is only used in development so we don't need to care about security that much. For me secure: false looks good.\n. Could you move this function into the prototype of the class?\n. There is a guard inside of sockWrite\n. Why does a connect fires an ok? This should come from the server.\n. It should be possible to connect multiple devices to the same dev-server.\n. :+1: \n. > reconnected again, it does not fire an ok\nWhy not? On the server it sendStats on connection. Doesn't that work?\n. Is there any standard middleware (similar to the static middleware) which allows to serve a file? fs read is t simple to serve a file (header, mimetype, partial content, content-size, error handling).\n. options is not defined here.\n. wrong indention\n. this always overrides the current options.contentBase\n. \"hotOnly\" => \"hot-only\" for the CLI argument\n. Compilation competed -> Compilation completed. js\n\"progress\": {\n  \"description\": \"Shows compilation progress in browser console.\",\n  \"type\": \"boolean\"\n },. Isn't this super spammy?. I think you can even go with\njs\n{ all: false, assets: true, warnings: true, errors: true, errorDetails: false }\nsince these are the only fields used.. ",
    "Phoscur": "resolve option and absolute paths fixed it for me. (About those dependencies, I'm still in the transition, actually still not sure what my webpack setup should be.)\nHow do I use a jade file as entry point? Feels a bit wrong to keep that as a static file and applying less afterwards in js land.\n. That suggests moving away from jam, I was starting to like that one..\nAlso wpt is not working on cloud9ide.\n. What aspects are you talking of? Just reading through wpt code, can't really find anything there, that's just getting me more confused.\n. ",
    "jhnns": "Thx, awesome!! :grin: \n. I'm clueless... using localhost:8080/content.html for now.\n. Haven't encountered it a while ago, so let's close it.\n. Mhmm interesting. It seems like I have to define webpack as dependency of myApp. Sure - it's a peerDependency of webpack-dev-server, but npm doesn't complain and installs webpack whether its defined or not. Seems like this is a npm issue.\nHowever, it's still strange that a module requires its peerDependency.\n. You're right, somehow. The lib itself does not require webpack, but bin requires webpack. I considered webpack-dev-server to be more a cli tool, but I guess your package.json is ok. \n. Well, I thought about it. It's not a npm issue either, because npm thinks that peerDependencies are not required. It's definitly a source of error, because if I don't define webpack as dependency, webpack-dev-server requires a version that may not be intended to be used.\n. Ahh nice! :+1:\nI prefer to run the app without an iframe which makes debugging and working in the browser feel more natural.\n. Ahh nice! :+1:\nI prefer to run the app without an iframe which makes debugging and working in the browser feel more natural.\n. Agree with @gunta. The output should only happen in the console (it's not that important imho :wink: )\n. Agree with @gunta. The output should only happen in the console (it's not that important imho :wink: )\n. Yep\n. :+1: \n. It looks like you're not bundling anything. After the line Asset  Size  Chunks       Chunk Names there are usually all modules listed that have been added to the bundle.\nIs there a webpack.config.js file in your cwd?\n. That's where the --content-base comes in. Just run webpack-dev-server --config webpack.conf.js --content-base /compiled/js.\nIf you name your webpack config webpack.config.js you don't need to specify it via the command-line. Webpack looks for a webpack.config.js in the cwd by default.\nPlease note also, that you need to run webpack-dev-server in the public-folder if you want the webpack-dev-server to serve all files under public.\n. With plain webpack incremental builds are usually available via the cache- and watch-option. Enable both in your webpack.config.js and run webpack --config path/to/webpack.config.js. Rebuilds should be way faster now.\nThe webpack-dev-server doesn't require the watch-option necessarily since it is designed for a development environment. But it seems like the watch-mode is only entered if options.lazy != true (which is probably a bug @sokra?)\n. Picky PS4 web browser... :wink: \n. Nice :+1: \n. Thx for the quick fix. But it's still not working.\nWhat happens after window.postMessage(\"webpackHotUpdate\", \"*\");?\n. Yep, that's it! Thx.\n. That's my setup:\n``` javascript\nfunction configureDevWebpack(app) {\n    var Server = require(\"webpack-dev-server\"),\n        webpackConfig = require(\"../../config/webpack.config\"),\n        config = require(\"../../config\"),\n        webpack = require(\"webpack\"),\n        compiler,\n        devServerOptions,\n        server;\ndevServerOptions = {\n    hot: true,\n    contentBase: \"http://vagrant.vm:\" + config.port\n};\nwebpackConfig.entry.unshift(\n    require.resolve(\"webpack-dev-server/client\") + \"?http://vagrant.vm:\" + webpackDevServerPort,\n    require.resolve(\"webpack/hot/dev-server\")\n);\n\ncompiler = webpack(webpackConfig);\nserver = new Server(compiler, devServerOptions);\nserver.listen(webpackDevServerPort, function (err) {\n    if (err) {\n        throw err;\n    }\n    console.log(\"webpack-dev-server is listening on \" + webpackDevServerPort);\n});\napp.use(server.middleware);\n\n}\n```\nI think this could be useful for other users too.\n. Coooool, thx! :+1: \n. Makes sense I guess :+1: \n. Haha, could probably be solved with this. :grin: \n. Haha, could probably be solved with this. :grin: \n. According to the code the app is refreshed when there were warnings, but not refreshed when there were errors. @sokra SyntaxErrors for instance are errors?\n. According to the code the app is refreshed when there were warnings, but not refreshed when there were errors. @sokra SyntaxErrors for instance are errors?\n. @sokra We had this more than once, but I'd expect webpack to not output anything when an error occurred :grinning: \n. @sokra We had this more than once, but I'd expect webpack to not output anything when an error occurred :grinning: \n. Is it still possible to activate app reloading? While I don't use it in desktop browsers, it comes in handy with mobile devices.\n. Is it still possible to activate app reloading? While I don't use it in desktop browsers, it comes in handy with mobile devices.\n. Why does every module/folder bring it's own webpack.config.js? Multiple bundles are usually achieved with require.ensure() or the bundle-/promise-loader respectively.\n. Why does every module/folder bring it's own webpack.config.js? Multiple bundles are usually achieved with require.ensure() or the bundle-/promise-loader respectively.\n. > I think the webpack way to do this would be to use one webpack file with multiple entry points rather than different webpack configs\nYep.\nAnd btw: angularjs components can't be loaded after bootstrap. Thus you can't use require.ensure() to load further angularjs components on demand. However, there is a hack to achieve it.\n. > I think the webpack way to do this would be to use one webpack file with multiple entry points rather than different webpack configs\nYep.\nAnd btw: angularjs components can't be loaded after bootstrap. Thus you can't use require.ensure() to load further angularjs components on demand. However, there is a hack to achieve it.\n. Have you thought about using only the webpack-dev-middleware or do you need a feature that only the devserver provides?\n. Have you thought about using only the webpack-dev-middleware or do you need a feature that only the devserver provides?\n. And why do you need to pass your own http server instance? There are ways to combine the webpack-dev-server with an existing server.\nI'm just curious why the current situation is not sufficient.\n. And why do you need to pass your own http server instance? There are ways to combine the webpack-dev-server with an existing server.\nI'm just curious why the current situation is not sufficient.\n. Fixed by #51?\n. Can't imagine how the webpack-dev-server should interefere with forms...\n. You don't need a video :movie_camera:, I believe you :wink:. But the described problem sounds more like a side-effect in your project to me. Can you provide us with a simple example where the error occurs?\n. :+1: \n. The xmlhttprequest module shims the XMLHttpRequest-API to node (for whatever reason - it's the ugliest API ever ^^). You wan't to bundle your code for the browser, and the browser doesn't know about processes and child processes.\nThere are two solutions to this problem:\n- Ask the maintainers of parse why they're using the xmlhttprequest module instead of node's http module.\n- Provide an alias for the xmlhttprequest module which just exports the original XMLHttpRequest object\njavascript\nmodule.exports = XMLHttpRequest;\nBtw: This is not a webpack-dev-server issue.\n. The webpack-dev-server works in memory only. There is no need to write something to disk when it's only needed temporarily while you're developing.\n. publicPath will be pre-pended to every request when requesting chunks, hot module updates, etc. It should reflect the pathname as seen by the browser (like location.pathname).\n. Yep. At the current state of webpack it's time to define different log levels... but this is an issue of webpack (webpack/webpack#476).\nClose this one?\n. The magicHtml is only for situations where you don't have an own index.html. If you're serving your own index.html you should be using the contentBase-option to specify the url of your own http server.\nFor instance: If your static http server runs on the same host on port 3000 you should run the webpack-dev-server with webpack-dev-server --content-base 3000. With your own http server you should be free to set all the required headers.\nHope my explanation is correct, haven't been tracking all the changes to the webpack-dev-server lately :grinning: \n. If your contentBase is either a port or a url, webpack-dev-server is just proxying all the requests to this address, so headers should be set by the http server behind the contentBase.\nBut I admit: If you set headers, they should be applied on all the other requests too (not just bundle-requests). @sokra what do you think?\n@tdeekens you could open a pull-request:\njavascript\napp.get(\"/*\", function(req, res, next) {\n    res.setHeader(...);\n    next();\n});\n. Thx\n. Do you have a dynamic require() statement in your modules? Something where you don't pass a static string to require().\n. Send a PR :)\n. The problem is that socket.io tries to connect to window.location.href by default. But webpack-dev-server doesn't redirect your websocket connection to your api. Basically you have two options: \n- Use the webpack-dev-middleware. It basically passes the responsibility to serve the webpack content back to your application.\n- Configure socket.io to connect to your api\n. Is HMR actually not working or is it just reporting 404s? Afaik 404s are no errors, but responses to signalize that there is no update...\n. Yes, the installation strategy of peerDependencies as changed lately. Now you need to specify jade as actual dependency of this module. Otherwise it won't be installed. Since jade is only used on prepublish it should be a devDependency (this should also be done in the webpack-dev-server).\nHave you changed the webpack config? It seems like webpack is trying to use jade/lib/index.js as loader, which won't work of course...\n. Yep, that's an error... that's probably not a good fallback to get the base path. @sokra when is __resourceQuery not set?\n. I've just merged #447 \u2013 but now I think, this PR is only removing the error instead of being an actual solution to the problem.\nWhen the url can't be retrieved from the script tag, it will default to / which might be correct in some cases, in some others, however, it will not be correct.\nWouldn't it be better to use document.currentScript? Unfortunately, there are no tests so I don't know if that change would break anything :(\n. I've just merged #447 \u2013 but now I think, this PR is only removing the error instead of being an actual solution to the problem.\nWhen the url can't be retrieved from the script tag, it will default to / which might be correct in some cases, in some others, however, it will not be correct.\nWouldn't it be better to use document.currentScript? Unfortunately, there are no tests so I don't know if that change would break anything :(\n. Awesome! \ud83d\udc4d Great work!\n. The webpack-dev-server is basically just an http server with some special functionality on certain routes. It does not render your app :wink: \n. Babel is driving me nuts! You can't just put \"use strict\" before every code...\n. Hi, thanks for your contribution. We've merged #447 which was almost the same change.\nHowever, now I think we should rather fix the underlying problem as discussed in #117 before publishing this.\n. Hi, thanks for your contribution. We've merged #447 which was almost the same change.\nHowever, now I think we should rather fix the underlying problem as discussed in #117 before publishing this.\n. ",
    "ilteris": "Ah. Thanks for the quick response! It works like a charm now. Great bundler by the way. Thanks for webpack! \n. ",
    "ThomasDeutsch": "Something with the encoding again.\nVisual Studio will encode HTML Files with UTF-8 BOM\nThat will explain why the IE can handle it.\nEven after i set the encoding in Visual Studio to UTF-8 without BOM ... it will not work.\nI had to create the index.html with notepad.\n. Something with the encoding again.\nVisual Studio will encode HTML Files with UTF-8 BOM\nThat will explain why the IE can handle it.\nEven after i set the encoding in Visual Studio to UTF-8 without BOM ... it will not work.\nI had to create the index.html with notepad.\n. please close this issue. \n. please close this issue. \n. I tryed to use contentBase: \"./xxx\" as a config option in my serverconfig.js\n. I tryed to use contentBase: \"./xxx\" as a config option in my serverconfig.js\n. When i start the server i can see \"content is served from...\" that the folder is correct, and that in that folder is the index.html.\n. When i start the server i can see \"content is served from...\" that the folder is correct, and that in that folder is the index.html.\n. i have deleted the browser-cache - now, it is working fine.\n. i have deleted the browser-cache - now, it is working fine.\n. Yes, my development server is a SharePoint Online / Office 365 Server.\n. Yes, my development server is a SharePoint Online / Office 365 Server.\n. A fast workaround would be to use ngrok\nwith a very simple command ngrok 8080 can make your localhost:8080 available via http and https\n\naccessible from the internet.\n. A fast workaround would be to use ngrok\nwith a very simple command ngrok 8080 can make your localhost:8080 available via http and https\n\naccessible from the internet.\n. Would it be ok to include a https -> http proxy ?\nvar httpProxy = require('http-proxy');\nvar fs = require('fs');\nvar proxy = httpProxy.createServer({\n  target: {\n    host: 'localhost',\n    port: 9550\n  },\n  ssl: {\n    key: fs.readFileSync('privateKey.pem', 'utf8'),\n    cert: fs.readFileSync('publicCert.pem', 'utf8')\n  },\n  ws: true,\n  secure: true\n}).listen(9008);\n. Would it be ok to include a https -> http proxy ?\nvar httpProxy = require('http-proxy');\nvar fs = require('fs');\nvar proxy = httpProxy.createServer({\n  target: {\n    host: 'localhost',\n    port: 9550\n  },\n  ssl: {\n    key: fs.readFileSync('privateKey.pem', 'utf8'),\n    cert: fs.readFileSync('publicCert.pem', 'utf8')\n  },\n  ws: true,\n  secure: true\n}).listen(9008);\n. Server.prototype.serveContent = function(req, res, next) {\n        var _path = req.path;\n        if(_path === \"/\") _path = \"\";\n        var target = this.contentBase + _path;\n        if(/^(https?:)?\\/\\//.test(target)) {\n                res.writeHead(302, {\n                        'Location': target + (req._parsedUrl.search || \"\")\n                });\n                res.end();\n        } else {\nI would like to build a new live.js without the i-frame. For that, i need to rewrite the servers \"serveContent\" response to do this:\n1. render the target\n2. append a simple <div id=\"webpackuicontainer\"></div> to the body of the rendered target\n3. append the live.bundle.js to the body of the rendered target\nDo you think that this would be a good solution? \n. Server.prototype.serveContent = function(req, res, next) {\n        var _path = req.path;\n        if(_path === \"/\") _path = \"\";\n        var target = this.contentBase + _path;\n        if(/^(https?:)?\\/\\//.test(target)) {\n                res.writeHead(302, {\n                        'Location': target + (req._parsedUrl.search || \"\")\n                });\n                res.end();\n        } else {\nI would like to build a new live.js without the i-frame. For that, i need to rewrite the servers \"serveContent\" response to do this:\n1. render the target\n2. append a simple <div id=\"webpackuicontainer\"></div> to the body of the rendered target\n3. append the live.bundle.js to the body of the rendered target\nDo you think that this would be a good solution? \n. Why would the entry-array be a good place to insert that logic?\na livereload option for the webpack-dev-server could be placed into the config-file.\nI think that a second script file in the content-html could also be fine.\n. Why would the entry-array be a good place to insert that logic?\na livereload option for the webpack-dev-server could be placed into the config-file.\nI think that a second script file in the content-html could also be fine.\n. The webpack-dev-server.js will try to connect to content-base instead of dev-server:\nScenario:\nscripts are served from this url:  http://localhost:8009\ncontent-base is hosted on http://myserver.com/index.html\nWhen i insert the script to my index.html\n<script src=\"https://localhost:8009/webpack-dev-server.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\nit will try to establish the socket.io connect to http://myserver.com (my content-base) instead of http://localhost:8009 (dev-server)\n. The webpack-dev-server.js will try to connect to content-base instead of dev-server:\nScenario:\nscripts are served from this url:  http://localhost:8009\ncontent-base is hosted on http://myserver.com/index.html\nWhen i insert the script to my index.html\n<script src=\"https://localhost:8009/webpack-dev-server.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\nit will try to establish the socket.io connect to http://myserver.com (my content-base) instead of http://localhost:8009 (dev-server)\n. This will not work. Same problem - with or without quotes.\nI have to correct myself. This will work in a normal windows console, but not in a powershell console!\nTobias, thanks for your quick replies.\n. This will not work. Same problem - with or without quotes.\nI have to correct myself. This will work in a normal windows console, but not in a powershell console!\nTobias, thanks for your quick replies.\n. +1\nI develop some of my apps for a low resolution / mobile.\nFor this, the status borders are more than distracting.\nI agree with @gunta , and i think that a console log or a simple spinning icon ( a div with a high z-index ) would be just right.\n. ",
    "NinjaSciurus": "I feel pretty stupid but I don't understand the inline mode configuration. I added \njavascript\nmain: [\"../client?http://localhost:8009\", \"./source/main\"]\nto the server.config.js and \nhtml\n<script src=\"https://localhost:8009/webpack-dev-server.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\nto the aspx page.\nWhen navigating to https://localhost:8009/webpack-dev-server/, I get\n\n\"Module not found: Error: Cannot resolve file or directory ../client in [PATH TO DEV FILES]\"\n\nWhat is this \"client\" path segment and how do I set it up correctly?\n. I feel pretty stupid but I don't understand the inline mode configuration. I added \njavascript\nmain: [\"../client?http://localhost:8009\", \"./source/main\"]\nto the server.config.js and \nhtml\n<script src=\"https://localhost:8009/webpack-dev-server.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\nto the aspx page.\nWhen navigating to https://localhost:8009/webpack-dev-server/, I get\n\n\"Module not found: Error: Cannot resolve file or directory ../client in [PATH TO DEV FILES]\"\n\nWhat is this \"client\" path segment and how do I set it up correctly?\n. It works with the following change in %APPDATA%\\Roaming\\npm\\node_modules\\webpack-dev-server\\client\\index.js:\njavascript\nio = io.connect(scriptElements[scriptElements.length-1].getAttribute(\"src\").replace(/\\/[^\\/]+$/, \"\"));\n//io = io.connect(typeof __resourceQuery === \"string\" ?\n//  __resourceQuery : \n//  scriptElements[scriptElements.length-1].getAttribute(\"src\").replace(/\\/[^\\/]+$/, \"\")\n//);\nThis is because __resourceQuery is empty, so the resulting url to connect to is server-relative.\nUnfortunately, running \nnpm run-script prepublish\nwith this configuration results in these errors:\n```\nERROR in ./client/live.js\nModule not found: Error: Cannot resolve module style in C:\\Users__\\AppData\\Roaming\\npm\\nodemodules\\webpack-dev-server\\client\n @ ./client/live.js 3:0-22\nERROR in ./client/live.js\nModule not found: Error: Cannot resolve module jade in C:\\Users__\\AppData\\Roaming\\npm\\nodemodules\\webpack-dev-server\\client\n @ ./client/live.js 6:27-49\n```\nwhich effectively breaks the not-inline version of the webpack-dev-server. So I guess I am still doing something terribly wrong... :worried:\n. It works with the following change in %APPDATA%\\Roaming\\npm\\node_modules\\webpack-dev-server\\client\\index.js:\njavascript\nio = io.connect(scriptElements[scriptElements.length-1].getAttribute(\"src\").replace(/\\/[^\\/]+$/, \"\"));\n//io = io.connect(typeof __resourceQuery === \"string\" ?\n//  __resourceQuery : \n//  scriptElements[scriptElements.length-1].getAttribute(\"src\").replace(/\\/[^\\/]+$/, \"\")\n//);\nThis is because __resourceQuery is empty, so the resulting url to connect to is server-relative.\nUnfortunately, running \nnpm run-script prepublish\nwith this configuration results in these errors:\n```\nERROR in ./client/live.js\nModule not found: Error: Cannot resolve module style in C:\\Users__\\AppData\\Roaming\\npm\\nodemodules\\webpack-dev-server\\client\n @ ./client/live.js 3:0-22\nERROR in ./client/live.js\nModule not found: Error: Cannot resolve module jade in C:\\Users__\\AppData\\Roaming\\npm\\nodemodules\\webpack-dev-server\\client\n @ ./client/live.js 6:27-49\n```\nwhich effectively breaks the not-inline version of the webpack-dev-server. So I guess I am still doing something terribly wrong... :worried:\n. PS: npm install on the webpack-dev-server installation folder solved the prepublish script problem! All is good now. :relieved:\n. PS: npm install on the webpack-dev-server installation folder solved the prepublish script problem! All is good now. :relieved:\n. ",
    "mattdesl": "This is good since iFrame tends to break certain visual apps (e.g. window.innerWidth reports 0). :+1: \nIs there a way to disable iFrame with the 'magically generated' HTML page at /bundle? Maybe as a command line option? I don't want to set up a new HTML page and <script> tags for each module that I'm developing.\n. This is good since iFrame tends to break certain visual apps (e.g. window.innerWidth reports 0). :+1: \nIs there a way to disable iFrame with the 'magically generated' HTML page at /bundle? Maybe as a command line option? I don't want to set up a new HTML page and <script> tags for each module that I'm developing.\n. ",
    "nathanstaines": "No problem, just glad I could help. Don't forget to push the new version to npm ;)\n. Yeah I ran into that same issue today myself.\nAlso, I just realised I applied the wrong amount of padding to the header and error messages, it's only a small thing but one that's bound to irritate me every time I see it.\nI could submit another pull request or if you'd prefer you could make the following adjustments in style.css... or simply leave it, it's up to you.\n``` css\n.header {\n  ...\n  padding: 0 10px;\n  ...\n}\nerrors {\n...\n  padding: 10px;\n  ...\n}\n```\n. ",
    "tarjei": "This would be very usefull!\n. ",
    "0m15": "Note that if I launch it from the command line (within the root folder of my project) I can make it work properly as well as configuration is taken in consideration.\nWhat am I missing?\n. It seems I was using webpack-dev-server-1.0.2 instead of 1.2.0.\nAfter upgrading, it works.\n. yeah, you're right.\nnodejs still needs appropriate error messages :/\n. yeah, you're right.\nnodejs still needs appropriate error messages :/\n. ",
    "robrichard": "There is a webpack.config.js in my cwd. I added the option webpack-dev-server --config webpack.conf.js and it is running and building my files now. I can't figure out where to get the compiled assets from:\njavascript\n    entry: {\n        'dashboard': '/Users/rob/projects/myProject/src/js/entries/dashboard.js',\n        'internal/administrator': '/Users/rob/projects/myProject/src/js/entries/internal/administrator.js',\n        ...\n    },\n    output: {\n        filename: './public/compiled/js/[name].js'\nIdeally I'd like to run the dev-server on port 8080 and access my assets in my script tag like this:\nhttp://localhost:8080/compiled/js/dashboard.js\nhttp://localhost:8080/compiled/js/internal/administrator.js\n. Thank you both so much for your help. I'm able to access the files now using @sokra's config example. \nI am still facing one problem though. I am using webpack to compile the assets for a large multi-page site with about 15 entry files. It appears that when one file is edited, all of the entries are rebuilt, and loading the asset blocks for about 20 seconds until all of the assets are recompiled. The documentation mentions that incremental rebuilds are possible. Is there an option I need to use to enable this? I tried both the cache and lazy options.\nWhen we were using watchify, it would take about 20 seconds to initially build all of the files, and about 2 seconds for incremental rebuilds when a single file is edited.\nThanks again for your help.\n. Thanks so much for all your help. With @sokra's latest changes, everything is working as expected.\n. ",
    "mlrawlings": "Thanks for clearing that up!\n. ",
    "KyleAMathews": "It'd be nice if we could configure webpack-dev-server to also write to disk. It's not that big of performance hit and I've run into a few situations where this would simplify things.\n. @sokra but that means you can't do hot-reloads...\n. @diurnalist sorry wasn't clear \u2014 I want assets written to the disk. I was the one who originally created this issue ;-)\nRight now I have to run both webpack-dev-server and webpack -w.\n. @diurnalist I have two entry points, one of which I want served by webpack-dev-server for hot reloading (an admin page) and the other entry point I need compiled to disk so it can be loaded as part of a server generated React page.\n@max-mykhailenko I need to see the results of my changes before committing ;-)\n. @sokra I was a bit unclear \u2014 the target for both entry points is the web \u2014 React is used to generate the initial html page that's sent but I still need the compiled js to animate the react app in the browser.\n. ",
    "sompylasar": "refs #62\n. > But why would you need to access the generated assets? This shouldn't be required.\nWhile debugging the build process (webpack build configuration, webpack loaders configuration, project file structure), you could have to look into the generated files to understand what has gone wrong.\nBTW, webpack-dev-server does not reload webpack config file when it changes either. So we have to restart the server. Luckily, the browser-side waits for it and catches up (thanks for that!).\n. @diurnalist Sure, I know. This is how I do debugging in the browser. But I wanted to have the files in my text editor rather than in the browser's developer tools.\n. @gajus Thank you for that!\n. @SpaceK33z Hi, have you landed the mentioned documentation for this issue somewhere?. Refs https://github.com/webpack/webpack/issues/1363#issuecomment-135010251. ",
    "SamEureka": "+1 thanks @sokra \n. ",
    "WesleyBatista": "So the \"watch\" functionality is still accomplished only by the webpack.\nWe still need to run two commands to get the \"live-reload\" functionality?\nwebpack-dev-server --hot and webpack\nIs that right?\n. ",
    "keepitreal": "@WesleyBatista No --hot takes care of that for you. The confusion is that, with other module bundlers, it will bundle and then write a file to your project directory. Webpack is able to accomplish live-reloading and hot module replacement by just writing to memory on the Express server that webpack-dev-server spins up. So you may need to adjust how you reference your app's .js file in your index.html depending on how you set your public path in your webpack config file.\n. ",
    "abbymrs": "@sokra, i have the same problem, run webpack-dev-server, no output files, but when i run webpack, it works,i dont know where i was wrong. below is my webpack.config.js file:\n```\nconst path = require('path');\nconst webpack = require('webpack');\nconst CopyWebpackPlugin = require('copy-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst ProvidePlugin = require('webpack/lib/ProvidePlugin');\nconst CommonsChunkPlugin = require('webpack/lib/optimize/CommonsChunkPlugin');\nconst HotModuleReplacementPlugin = require('webpack/lib/HotModuleReplacementPlugin');\nlet src = {\n    app: 'public/js/.js',\n    vendor: [\n        'public/vendor/.js',\n        'node_modules/angular/angular.js',\n        'node_modules/angular-resource/angular-resource.js',\n        'node_modules/angular-ui-router/release/angular-ui-router.js',\n        'node_modules/ngstorage/ngStorage.js',\n    ],\n    html: 'public/views/index.html'\n}\nmodule.exports = {\n    entries: {\n        index: src.app,\n        vendor: src.vendor\n    },\n    output: {\n        path: path.join(__dirname, 'build'),\n        publicPath: path.join(__dirname, 'build'),\n        filename: '[name].bundle.js',\n        sourceMapFilename: '[name].map',\n        chunkFilename: '[id].chunk.js',\n        lazy: true\n    },\n    devtool: 'cheap-module-source-map',\n    debug:true,\n    module: {\n        rules: [{\n            test: /.css$/,\n            loaders: ['to-string-loader', 'css-loader']\n        }, {\n            test: /.html$/,\n            loader: 'raw-loader'\n        }, {\n            test: /.js$/,\n            loader: 'script-loader',\n            exclude: ['./node_modules//.js']\n        }, {\n            test: require.resolve(\"jquery\"),\n            loader: \"imports?jQuery=jquery,$=jquery,this=>window,require=>false\"\n        }]\n    },\n    plugins: [\n        new CommonsChunkPlugin({\n            name: 'vendor'\n        }),\n        new CopyWebpackPlugin([{\n            from: './public',\n            to: 'assets'\n        }]),\n        new HtmlWebpackPlugin({\n            template: src.html,\n            chunksSortMode: 'dependency',\n            inject: 'head'\n        }),\n        new webpack.ProvidePlugin({\n            jQuery: 'jquery',\n            $: 'jquery'\n        }),\n        new HotModuleReplacementPlugin()\n    ],\n    resolve: {\n        extensions: ['', '.js', '.json', '.css'],\n        alias: {\n            jquery: 'jquery/src/jquery'\n        }\n    },\n    devServer: {\n        port: 5000,\n        host: 'localhost',\n        historyApiFallback: true,\n        watchOptions: {\n            aggregateTimeout: 300,\n            poll: 1000\n        },\n        outputPath: path.join(__dirname, 'build'),\n        proxy: {\n            '/api/': 'http://localhost:8000'\n        }\n    },\n    node: {\n        global: true,\n        crypto: 'empty',\n        process: true,\n        module: false,\n        clearImmediate: false,\n        setImmediate: false\n    }\n}\n```\n. @SpaceK33z,\nDo you mean I need to run webpack to build files firstly, then run webpack-dev-server?\n. I got your ideas, thanks. \n. ",
    "SpaceK33z": "@abbymrs, as stated above:\n\nThe webpack-dev-server doesn't write to disk. It serves the result from memory.\n\nIf you still have problems, I'd suggest to create a StackOverflow question. You have a better chance to get  help there.\n. No, but you shouldn't expect that it writes them to disk. The server in webpack-dev-server exposes these files. In your case, the files should be available in http://localhost:5000. Depending on output.publicPath , the directory of where these files are may differ. I suggest to change your output.publicPath to /build/.\n. Closing issue because the answer provided is clear; make a loader for this, or use an existing one :).\n. @necolas, do you still have this issue? It's fairly old, and a lot has changed since 2014 :).\n. Old ticket, but if you're still interested: #542 has a nice example of how to listen to messages from the Node server. You'd need to find out what data is sent exactly when there is a disconnect, but it should be possible...\n. @BerndWessels, were you able to solve this issue? If not, could you provide some more info? What node and npm version are you using? And does it still happen with the latest node and npm versions? Does it still happen with webpack-dev-server@1.15.0?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Closing because of staleness, and all questions are answered. Feel free to comment if you think otherwise.\n. https://webpack.js.org/configuration/stats/#stats. @jeberly, we don't use socket.io anymore. Do you still have this issue?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. The historyApiFallback does this exactly.\n. As of v0.13 (#302) socket.io is replaced with sockjs, so you would no longer have this problem.\n. @justin808, do you still have this issue?\n. #337 was fixed in the latest beta release. This means that the dev-server CLI does no longer overwrite output.path to /, making the error the author initially had less weird.\nI'll look into having some validation for output.path, if I can find some cases where it is always incorrect.\n. webpack-dev-middleware should now give a proper error when using a relative path;\nhttps://github.com/webpack/webpack-dev-middleware/commit/ee9b796385919f1d7a2af1e48903d61968740e1b\n. @altana, do you still have this issue?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Could be a nice feature. What exactly would you want logged to the CLI? All console.log's, console.warn's console.error's?\n. Could be a nice feature. What exactly would you want logged to the CLI? All console.log's, console.warn's console.error's?\n. Anyone still interested in this? I can implement this, but will need some feedback...\n. We could override console.log, warn  and error to send it to the websocket. I think that should not be enabled by default though. Also, we'd need to make sure some webpack errors aren't reported twice.\n. An alternative would be to provide a hook that lets you write logs to the websocket, and let the application decide what exactly to log to it. The advantage of this is that it is way more flexible; you could make a plugin that automatically passes console.logs to it.\n. @geowarin, what do you think of the two options above?\n. I am closing this since this will be very difficult to implement properly, and I don't think that's worth it for now. Especially now React is going to show these warnings in a modal, it is probably better to find (or make) a package that displays these errors in a model for you.\n. This is a very old issue, but I still want to fix this.\nLooking at lib/Server.js, it uses options.publicPath || \"/\". So \"/\" is the default value when using it from the Node API.\nThe CLI sets publicPath to the output.publicPath specified in the webpack config.\n@sokra, do you think it makes sense to remove the default \"/\" value from options.publicPath, and throw an error when it is not set instead?\n\nAnother difference between CLI and Node API: with CLI, I can omit output.path, but Node API crashes if it's not specified.\n\nThis is probably getting fixed in #337.\n. Can you guys check if PR #579 works for you? Looking for feedback!\n. PR #579 was merged, check that out for more info. Note that it hasn't been released yet.\n. Released in 2.1.0-beta.3.\n. Hey @bebraw! Do you still have this issue? We don't use socket.io anymore, so perhaps that fixed the issue? Glad to help if you still have it.\n. @enjikaka: you need to add --host 0.0.0.0 to your webpack-dev-server command. By default it only allows connections from localhost.\n. Closing issue because it was either webpack(not dev-server), or less. If anyone still has this issue, feel free to comment and I'll re-open.\n. This was fixed a while back, only the first item in the array with devServer will be selected now.\n. Closing because these issues do seem to fix themselves, and we can't do nothing about it here in webpack-dev-server. Feel free to comment though.\n. Closing, the docs explicitly say that you need to do this:\n\nThree changes are needed:\n- add an entry point to the webpack configuration: webpack/hot/dev-server.\n- add the new webpack.HotModuleReplacementPlugin() to the webpack configuration.\n- add hot: true to the webpack-dev-server configuration to enable HMR on the server.\n. Do you still have this issue? We've switched from socket.io to sock.js since.\n. When using a VM, you'll probably need to use --watch-poll to let it pick up changes. Closing for now, if you have a specific issue let me know.\n. Just verified, it still happens. I also tested if running webpack works, but that doesn't work either. This means that it is a problem in webpack, not webpack-dev-server. Could you make a ticket over there (if there isn't one already)?\n. For future reference, this is probably getting fixed with https://github.com/paulmillr/chokidar/pull/535.\n. Do you still have this issue? If so, are you proxying to another server? Or using historyApiFallback?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Closing, since this is documented properly and the idea of dev-server is that it does not modify the webpack config.\n. Closing for now because the PR in webpack was also closed, and this would need a lot of work to implement correctly. Also it's been stale for over a year. If anyone would like to pick it up, please make a ticket first and we can discuss.\n. @gaearon, I don't know what happened either. I think that this is a really good idea though, so I've brought this up in the webpack team. They will discuss this in their meeting for next week.\n. @niieani nope, but feel free to finish this PR and the corresponding webpack one.. @SpainTrain, this is over a year old, but are you still willing to do a PR for this? The first option would be best I think.\n. I've tested this, and this is no longer an issue. Tested with examples/hmr, and added --history-api-fallback to the command. Browsed to http://localhost:8080/foo, and made a change in example.js. HMR applied successfully.\n. This is not something that can be fixed in webpack-dev-server. The dev-server only passes the progress flag through to the webpack CLI options, as you can see here. If you want this to be fixed, you should create an issue in the webpack repo. It will automatically also work in dev-server if it's fixed over there (since dev-server has nothing to do with compiling to a bundle).\n\nThere are a couple of workarounds for this though. The answer from @betolink is an option, or you can use webpack.ProgressPlugin. Example: new ProgressPlugin(percentage => progressBar.update(percentage)). progressBar comes from the progress package.\n. This was fixed with PR #469.\n. Closing this issue because it was solved a while ago (see @eteeselink's comment).\n. More then one year later, I fixed this in the prevent-reload-on-errors branch \u23f3 .\nI simply removed the code that did a reload when there were warnings or errors. I still want to look at it if there are valid use cases for this. At the moment I can't think of any.\n. More then one year later, I fixed this in the prevent-reload-on-errors branch \u23f3 .\nI simply removed the code that did a reload when there were warnings or errors. I still want to look at it if there are valid use cases for this. At the moment I can't think of any.\n. Looks like this code was introduced in the first version of the \"inline\" modus (2329516ac2f73760a973d788e5bb3e25f98dda40). After some tests it seems safe to remove.\n. This is by design, and is not related to dev-server. Webpack needs to be able to read all require paths statically, so you can't use dynamic requires (e.g. by using a parameter). This is nicely documented.\n. Closing since webpack-chrome-extension seems to do the job very well. Feel free to re-open if you think webpack-dev-server should implement this.\n. Do you still have this answer? If so, do you happen to use [hash] in your filenames?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. If you want to rely only on the console, you should not use http://localhost:<port>/webpack-dev-server/, but just http://localhost:8080/.\n. Setting the port was fixed in #430, which will be part of the next 1.x release.\n. Hey @use-strict. It's been a while, but I see you've started working on a webpack-runner tool to help accomplish this. I think it's outside the scope of webpack-dev-server to implement this, but I'm happy to help or make sure the right hooks are added in webpack-dev-server or webpack-dev-middleware.\n. 1. The next release of webpack-dev-middleware will contain a reporter option, which allows you to hook into the errors. See https://github.com/webpack/webpack-dev-middleware/pull/91 for more info. I think you could use that to normalize the errors.\n2. Is this really necessary? Maybe you could use write-file-webpack-plugin for this?\n3. Would it be possible to hook into the setup option of dev-server and add the route there?\nGenerally, I'd like to only provide the hooks necessary for you, so your tool can do the job / formatting.\n. > I'm using the webpack node API. That's the primary concern. dev-server is just a bonus, but I'm thinking a fix for one should also fix the other.\nThe reporter option also works with dev-server. Note that I just released webpack-dev-middleware@1.7.0, which contains this option.\n\nI couldn't find a way to hook into the dev-server from CLI. Much of the options logic is in the CLI entry js file so requiring something directly from dev-server would mean duplicating logic.\n\nAh, I thought you would be starting the dev-server only from the Node API. From the CLI you can still use the setup option, but it has to be in the webpack config file (devServer.setup). A somewhat hacky solution would be to do it like this:\n``` js\nvar webpackRunner = require('webpack-runner');\nmodule.exports = {\n    ...\n    devServer: {\n        setup: webpackRunner\n    }\n}\n```\n. > Can this reporter option be specified via webpack.config ?\nAt the moment, no. But isn't that outside the scope of your package? It's meant for development, right? If you want that functionality you'd need to make a PR in the webpack repo.\n. Ah okay, missed that. I'm going to close this now since there are no specific issues here. If you need specific hooks, feel free to create an issue for them.\n. @valorkin, what do you want to do with this PR?\n. I'm closing this PR because of inactivity. Feel free to comment, and we can always re-open it again.\n. The PR #274 is already merged, which implements gzip compression with the --compress flag.\n. @raffomania, you should set output.publicPath in your webpack config to use a full URL.\n. Closing this in favor of #337.\n. A new version of socket.io including the patch is now released, so after re-adding the webpack-dev-server package this issue should be fixed. Please test this.\nAlso, this is a dupe of #242 and #258.\n. Do you still have this issue? Doesn't seem like it's related to webpack-dev-server.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. I doubt if this is something we can fix in webpack-dev-server. webpack takes care of building these files, not the dev-server. We might implement live-reloading for the webpack config and content base, which would (maybe?) fix this problem; #440 and #350.\nClosing for now, but feel free to comment and I can always reopen it.\n. @iansinnott, this ticket is no longer relevant then, right?\n. @luisrudge, can you close the ticket then?\n. See my comment in #302 for a fix.\nThis is not a bug, it's a feature that you have enabled.\n. Closing because author says it's fixed...\n. PR welcome.\n. This is actually a problem in webpack-dev-middleware. It supports a reporter option now, so you can build your own custom reporter that fixes this. If anyone is still interested, please make an issue at webpack-dev-middleware.\n. This is actually a problem in webpack-dev-middleware. It supports a reporter option now, so you can build your own custom reporter that fixes this. If anyone is still interested, please make an issue at webpack-dev-middleware.\n. That's because there is no changelog ;). You can read the commits between releases relatively easy.\n. There is a changelog now :).\n. @jedwards1211, what is the path your SockJS server lives at? webpack-dev-server uses /sockjs-node, so if you're also using this... I think we should move to using something like /_webpack-sockjs to prevent collisions like this.\n. This has landed in webpack-dev-server 1.15.0.\n. Soo your issue was fixed?\n. That should actually work. You can also provide your own certs;\njs\nhttps: {\n    key: ..,\n    cert: ...,\n    ca: ...\n};\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. socket.io has been replaced with sockjs (which doesn't have native bindings), so this is no longer relevant.\n. Closing because of inactivity, but feel free to reopen if necessary.\n. @MrEfrem or @kpe, can you verify that #572 works for you?\n. @aromot, you'll have to wait until this PR is merged and released.\n. @mathieumg Looking at the package.json of webpack-dev-server, it runs a prepublish script. So that would mean you need a pre-built version.\nYou could test it manually by adding my github repo as a dependency, npm install-ing and running npm run prepublish in node_modules/webpack-dev-server. This would be only to test this PR of course. I would really like it if you do this, because this PR is relatively big. Please report your findings here :).\nI can't find the exact node version requirements for the sockjs-node package, but it works fine for at least v0.12 and v4.x.\n. @mathieumg, could you try again? I have probably fixed your issue. Weirdly enough I never had this issue. And thanks for testing, I appreciate it :).\n. @eladh, I have now fixed @sokra's concerns, but I can't tell you when it's getting published of course.\n. Yeah that's because you have enabled it in your localStorage. Open the console and type: localStorage.removeItem('debug')\nIf you want debugging logs again: localStorage.setItem('debug', '*')\n. So, is this PR still relevant after the fix in connect-history-api-fallback?\n. Closing this since it is now possible to do this as an option. This PR is a breaking change, and I don't think it's worth it.\n. I have a very hacky workaround for this:\njs\nvar IS_DEV_SERVER = process.argv[1].indexOf('webpack-dev-server') >= 0;\n. @gajus, do you need this also for webpack-dev-middleware users? If so, you could check compiler.outputFileSystem. See also this line. \n. Do you still have this issue? I haven't seen it. You could try to increase the allowed memory in Node.\n. Do you still have this issue? I haven't seen it. You could try to increase the allowed memory in Node.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. The CLI shows something like this when building:\n\nIs this not what you want?\n. The CLI shows something like this when building:\n\nIs this not what you want?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. See #309 for why it's closed. Also note that PR #298 fixed this.\n. See #309 for why it's closed. Also note that PR #298 fixed this.\n. Can you test if #329 works as you would expect?\n. Can you test if #329 works as you would expect?\n. Do you have a more detailed stacktrace? That would show where the error is coming from...\n. Dupe of #188.\n. Dupe of #183, which contains many suggestions to fix this.\n. Closing this, because it doesn't align with the goals of this dev-server (that is, serving & live-reloading webpack modules).\n. @villesau, if you prepend it with a forward slash, webpack will ignore it, because it thinks it is an absolute url.\n@LestaD, do you still have this issue?\n. This issue should be fixed with #330.\n. This issue should be fixed with #330.\n. This is a problem with vagrant and NFS (which I have had very often), but was solved a while ago. The filesystem does not get notified of changes over NFS. Add --watch-poll to enable polling.\n. This is a problem with vagrant and NFS (which I have had very often), but was solved a while ago. The filesystem does not get notified of changes over NFS. Add --watch-poll to enable polling.\n. Why would you need this cache busting in development? For development you could just use a 'fixed' string instead of a dynamic path.\nAlso see #438 for some information about how to handle this.\n. Why would you need this cache busting in development? For development you could just use a 'fixed' string instead of a dynamic path.\nAlso see #438 for some information about how to handle this.\n. I probably introduced this bug with PR #302. I am able to reproduce this bug using vagrant, so I'll look into it soon.\n. I probably introduced this bug with PR #302. I am able to reproduce this bug using vagrant, so I'll look into it soon.\n. @carpeliam, did you run npm run prepublish in the webpack-dev-server module after applying the changes in #328?\n. @carpeliam, did you run npm run prepublish in the webpack-dev-server module after applying the changes in #328?\n. When @sokra has time for it I think ;).\n. When @sokra has time for it I think ;).\n. @timwingfield, the url should be /sockjs-node/info. Where does /assets/come from?\n. @timwingfield, the url should be /sockjs-node/info. Where does /assets/come from?\n. Fixed with #385, which will be part of the next 1.x release.\n. @sokra,  could you please release a new version with this fix? The current version is completely broken if you don't use --inline. Whoops.\n. @sokra, how did you test this? I'm using cd example && node ../bin/webpack-dev-server.js --open, and it opens http://localhost:8080/ for me, which is correct.\nEven when I add this it seems to work fine:\njs\ndevServer: {\n    inline: false\n}\n. Okay, I intentionally did it without the /webpack-dev-server part, but I see now that's quite confusing. It's fixed now :).\nThank you for merging all my PR's so far and the constructive feedback @sokra :).\n. @sokra, I have edited the wiki to include the --open option.\n. @sandwichsudo, nope, not at the moment.\n. @sandwichsudo, nope, not at the moment.\n. @Gopikrishna19, apparently it was not part of the 1.14.1 release. In the next 2.0 version it should work.\n. @GuyMograbi, I happen to be working on a v1 release.\n. closing because this is not an issue in webpack-dev-server and there have been multiple answers.\n. How would you test a websocket connection failing? Sure, it's possible to test small part of this repo, but I think it's very hard to add fully automatic tests.\nI think it would be useful to document what you should (manually) test after changing something.\nFor instance, in example/ there are two html files index.html and inlined.html. You need to verify both of these still work (With PR #302 I forgot to test inlined.html, which caused #326).\n. True that. Do you have time to put together a PR? Maybe start with client/ first, I think that is the most easy and a fairly important part.\n. @jhabdas, 9 months later, I'm starting to work on this :). I've opened #581 for this to have a clean start.\nClosing this in favor of #581.\n. Could you check if #499 resolves your issue?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Dupe of #183, which also contains a lot more information about how to fix this.\n. This also caused the issue in #266, probably #473, and would be a good first step to fix #106.\n@sokra, what's your opinion about this? I'd say that we should require output.path to be supplied by the user, and throw an error if it's not set. I'm note sure about the reason why it's there in the first place, so I don't feel comfortable removing this.\n. @sokra, all right, I'll remove that in v2 then.\n. Removed it in the above commit. Performed a few tests with different setups in the examples/ dir, and everything still seems to work. Luckily we're running a beta anyway, so we can test this out on our beta users.\n. Closing due to staleness, see #395 for more info about this kind of issue.\n. As said above, see #395.. As said above, see #395.. PR #510 does about the same, and has no merge conflicts, so closing this for now.\n. @PierBover, thanks for your example.\nClosing this, since there is no real problem and this is documented on the wiki as well.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. This is most likely related to #462. Do you still have this, and what OS are you using?\n. Did a small test, and it seems to work. The author in #462 also says it works now, so closing this. Feel free to re-open if you run into it again.\n. I happen to have a very comparable setup (output index.html to dist/index.html, and all assets to dist/static). In your config, do something like this:\noutput: {\n    filename: '[name].js',\n    path: path.join(__dirname, 'dist/static'),\n    publicPath: 'static/',\n},\nThen for the devServer, I override the publicPath to /. Lastly, for the contentBase, I use process.cwd().\n. Note that using contentBase when you're using html-webpack-plugin has no effect. contentBase is meant to serve static files in the given path. The index.html generated by html-webpack-plugin is not static, it's compiled by webpack.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. > I guess it's because webpack-dev-server serve static files from memory instead of disk, thus webpack-dev-server cannot server index.html generated by html-webpack-plugin from disk, is it right?\nNo. html-webpack-plugin will generate the index.html in memory, and webpack-dev-server is able to serve that (when configured correctly, see my first post about that). What I meant was that using contentBase to serve dist/ makes no sense because html-webpack-plugin already adds index.html to the in-memory store of webpack-dev-server.. > Moreover, how can we serve index.html by webpack-dev-server?\nDid you see my first comment here about that? I'm using this in literally all my projects so I'm sure it works.. @simonmysun okay, this has nothing to do with contentBase, but your issue is that you use publicPath: './'. This should be publicPath: '/' (at least for development). I've checked and that fixes your issue.. I'm currently working on making a 1.x release.\nWork on v2 will continue on master. For webpack v1, I'll make a separate branch webpack-1 (like the main repo).\n. I'm currently working on making a 1.x release.\nWork on v2 will continue on master. For webpack v1, I'll make a separate branch webpack-1 (like the main repo).\n. Version 1.15.0 has been released. The changelog is in the webpack-1 branch.\n. Version 1.15.0 has been released. The changelog is in the webpack-1 branch.\n. Dupe of #117.\n. This was fixed with PR #478, and released with 1.15.0.\n. Can you provide an easy way of reproducing this? Or are you willing to send a PR?. Can you provide an easy way of reproducing this? Or are you willing to send a PR?. Do you still have this issue? If so, how do you use WDS (CLI or API), and what is your platform? I'm certain this does not happen on OSX or Linux.\n. This should be fixed with #357. This will be part of the next 1.x release. Let me know if it doesn't work after that.\n. This was fixed with #447 a while ago. Also see #117 for a follow-up discussion.\n. Closing this, because you should not use [chunkhash] or [hash] for development. This will cause many other issues, like a memory leak, because the dev server does not know when to clean up the old files.\nI am working on documenting this, because this has caused many issues.\n. > I'm fairly new to web development and webpack, but wouldn't cache-busting still be useful for development?\nNo, you should have every caching feature off in dev. There's no real benefit; you're working on localhost anyway, so downloading is only limited by your ~~imagination~~ disk. Of course you can use a cleanup plugin and then still use it, this package doesn't forbid you to use that, but it's not recommended and can cause the process to crash due to memory issues.. @just-boris, jup, that's the solution I use in all my projects too. It's not very clean but works perfectly.. Jep, --watch-poll, or the watchOptions equivalent is necessary for Vagrant boxes to work.\n. Sorry, had to reverse your PR. It caused issues with registering clicks in the iframe itself (#559, and probably #564). If you can find a way that doesn't affect the iframe, a new PR is welcome!\n. Dupe of #117.\n. Other then the comment above and the merge conflict, this looks good. Will merge if you finish this :).\n. Pinging @svsool, are you still interested in finishing this? This would fix a couple of other problems. I could takeover if you don't have the time.\n. PR #537 fixed this in a more flexible way.\n. @djyde, did you manage to fix it? I just checked, and can't reproduce it. It is very likely a config issue.\n. Closing PR for reasons stated above.\n. As said above, a dupe of #394, and there are more reliable ways to fix this.\n. The packages less and less-loader are correctly defined in the package.json in the root.\n. @FelixLC, do you still have this issue?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. @gajus, is there something not working because of this?\n. ping @gajus\n. Ah okay. Note that output.path = '/' in the webpack-dev-server CLI was removed in the latest beta (see also #337, but you probably already know that haha), so that is probably not necessary anymore.\n. Just tested this, without applying this PR, with the webpack config in example/, by replacing the less loader with postcss. Then I made a syntax error in style.less, and I got this nice message in the console, and in my console in the browser:\n\nSo it already works?\n. Closing this, because of the reason above. Feel free to explain it, we can always reopen this.\n. @chrismcv, were you able to solve your issues with the answers provided above?\n. pathRewrite is documented now in the docs, so closing this issue.\nIf your proxy still doesn't work, but worked in old versions of 1.x, try to add secure: false. I've seen that help sometimes.\n. @sokra, I want to volunteer to help maintain this project. I'm using it full-time at my work, and want to contribute something back :). I've contributed some things in the past, so I understand the code base.\n. @davidblurton, I'm now a maintainer for this repo and webpack-dev-middleware. I'll be looking into the PR's and bring the issue count down.\n. This was fixed with PR #478, and released with 1.15.0.\n. @dandv, that is because you should also use the v2 beta for dev-server (2.1.0-beta.8).\n. @BowlingX, do you still have this issue in 1.15.0?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Does this also happen when outputting a bundle with webpack?\n. Is this still happening, and if so, can someone provide more info?\n. No, I can't find a simple way to reproduce this. A PR is welcome.\n. The content type header for bundle.js is Content-Type: application/javascript. You want Content-Type: application/javascript; charset=utf-8 I suppose?\nI probably don't have this problem because I'm on macOS.\n. I added \u00a2\u00d6 in the index.html, and in my entry file. Both ways seem to work, without setting the encoding anywhere. Tested on Chrome, Safari and FF.\n. Yeah, in examples/modus-inline/app.js, I changed It's working. to It's working.\u00a2\u00d6. It correctly displayed the special characters without changes.\nI noticed that the Javascript file is called with <script src=\"/bundle.js\" type=\"text/javascript\" charset=\"utf-8\"></script>, but even after removing charset=\"utf-8\", the special chars work.\n. Interesting, the header of the html file is Content-Type:text/html; charset=UTF-8. This html file is served by the contentBase option. Do you also use contentBase, or do you use html-webpack-plugin?\n. Technically this is an issue in webpack-dev-middleware, that package takes care of making a response. This line is responsible for generating the Content-Type.\nI'm not sure though if we can just add charset=UTF-8 to ALL files, without breaking something.\n. Technically this is an issue in webpack-dev-middleware, that package takes care of making a response. This line is responsible for generating the Content-Type.\nI'm not sure though if we can just add charset=UTF-8 to ALL files, without breaking something.\n. As far as I can tell, it's only possible to change it with webpack-encoding-plugin. This PR from the webpack repo also assumes utf-8.\n. As far as I can tell, it's only possible to change it with webpack-encoding-plugin. This PR from the webpack repo also assumes utf-8.\n. I'm not sure yet, but after that PR linked above, I'm thinking webpack always assumes utf-8.\n. I'm not sure yet, but after that PR linked above, I'm thinking webpack always assumes utf-8.\n. @callumacrae, yes it would be nice if you can help with this.\nThe real issue is in webpack-dev-middleware, to be precise on this line. Probably, it is enough to add ;charset=UTF-8 after the mime lookup.\nYou could test out if that works. If it works, send a PR. We would still need to find out if it breaks stuff, but we could do a beta release and let some people test it. If it doesn't work, search for other places where Content-Type is set (or should be set) without charset=UTF-8.\n. @negativefix, do you still have this issue?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. It does work in webpack-dev-server, but it is not recommended. If you do this, on every incremental build the server will generate a new JS file with the hash in it. The old files will not be removed, so the process will slowly run out of memory.\nI'm using this hack in my config:\n``` js\nconst IS_DEV_SERVER = process.argv[1].indexOf('webpack-dev-server') >= 0;\nmodule.exports = {\n    output: {\n        filename: [name]-${IS_DEV_SERVER ? 'dev' : '[hash:7]'}.js,\n    },\n};\n``\n. I've been thinking about this for a bit, and I think this is actually something that should be fixed in webpack. webpack already haswatchpackas a dependency (a package to watch files), and has the power to reload the config. It wouldn't make sense to do this in the dev-server, since it doesn't know anything about the config itself.\n. See https://github.com/webpack/webpack/issues/3153.\n. If it also happens inwebpack --watch, it is not a problem in webpack-dev-server. Please make a ticket in the webpack repo for this.\n. This is not an issue of webpack-dev-server, the dev-server only serves the files from memory. You should report this in the webpack repo.\n. This was fixed a while ago with 991f2aa526cd5404ac5b910252394dd095e65178.\n. @belfz, did you manage to solve the problem with @Jack-Barry's tips?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Sorry, I don't see how this is a problem of this package. It needs to get its files from the npm registry, just like every other package. It has no special post-run code or something that would prevent this from working without a connection.\n. What problem are you having because of this? When addingwebpack-dev-server/client?http://localhost:8080, it usesclient/index.js, and notclient/index.bundle.js.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Do you still have this issue? For most Windows users it works fine.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. This is because webpack-dev-server serves files from memory. It can't output these to disk, and will not do that. Also see [this comment](https://github.com/webpack/webpack-dev-server/issues/62#issuecomment-58856998), which explains why this wouldn't make sense.\n. @matanwerbner, did the above fix your issue?\n. Closing this issue, since it is out of our control, andconnect-history-api-fallbackhas a config option to fix this (see above).\n. The documentation provides some [nice examples](https://webpack.github.io/docs/webpack-dev-server.html#proxy) on how to handle this. If you still have this issue after reading the documentation, feel free to re-open.\n. This is kind of a dupe of #117. We're discussing ways to improve the current script detection over there.\n. @Authorlove can this be closed?\n. @pgangwani, Did you try without the trailing slash in/api/(so/api)? In all the examples in [http-proxy-middleware](https://github.com/chimurai/http-proxy-middleware), I see they do it like that, so it could be that with the trailing slash it only proxies if the url has a exact match.\n. @pgangwani, yeahpathRewriteis for that, but you already have that in your config. Are you usingwebpack-dev-server@1.15.0?\n. @pgangwani, I copy/pasted @bivvo's code in theexample/webpack.config.jsof this repo to test this, and then browsed tohttp://localhost:8080/api/users. It worked. With what url are you testing this?\n. Dupe of #363.\n. Dupe of #363. Working on it!\n. I just tested this, and it does seem to work (webpack-dev-server ^2.1.0-beta, OS X).\n- What OS are you using?\n- What version of the dev-server?\n- Does it work correctly after a page-refresh, or after killing and starting the dev-server process again?\n. Jep, absolute url like above is the way to go.\n. Your wish has been granted! Use with--no-content-base. Note that it's not been released yet.\n. @tquetano-r7, do you still have this issue?\n. I tested if the nested paths get created correctly in Windows, and it works. Did some digging, and it turns out this was an issue in copy-webpack-plugin; https://github.com/kevlened/copy-webpack-plugin/issues/29.\n. Do you still have this issue? If so, I'd suggest to post this on Stack Overflow. This error does not come from webpack-dev-server, so we can't do anything about it unfortunately.\n. Also see https://github.com/webpack/webpack-dev-middleware/issues/40.\n. Hey @kentcdodds, I think this is actually a dupe of #337. It seems that the CLI does something likeoutput.path = '/'`.\nCould you confirm this?\n. Is this still happening? If so, is there are an easy way to reproduce this?\n. @Volune, I tested your gist. It seems like you forgot to include the webpack-dev-server client script, because the websocket does not connect. If I add --inline to the server script, everything works correctly.\n. @AlexGrrr, I used that gist too, with --inline. However, it could be that SockJS falls back to another \"transporting\" mode then websockets. What browser do you use?\nEDIT: oh wait, you're using the iframe modus. Let me test that.\n. Also tested with the iframe modus (following the steps in the gist exactly this time), but that also seems to work for me. Could you let me know what browser version and OS you're using?\n. @AlexGrrr, okay I think I'm onto the bug.\nSo in package.json we're including the sockjs-client and sockjs library with a caret (^), which means that a newer version can be used without having to upgrade the dep in webpack-dev-server.\nIn the client/ folder, we're compiling sockjs-client into a bundle. This uses the latest sockjs-client version when compiling (so when we release a new version of the dev-server).\nIf a new version of SockJS is released, and you do a fresh npm install, you'll get the new SockJS version (due to the caret). However, since we have bundled sockjs-client in a file, there is now a mismatch of the bundled SockJS version and the SockJS version you have in node_modules.\nSo having said this, PR #493 would not really fix this issue. It is still possible to have an outdated SockJS version then, because when using the inline modus, it compiles sockjs-client at runtime (it doesn't use the bundled version).\nTo actually fix this issue, we need to remove the caret from the sockjs-client and sockjs in package.json, and make sure sockjs provides the same version of sockjs-client through the CDN.\n. @Volune, hmm, at first I didn't want to do this because this script is only necessary in edge cases, but let's do it. The dev-server shouldn't rely on external scripts. There will need to be a few changes in your PR, but I'll comment over there.\n. @AlexGrrr, yes, it should not usually do this. I don't know exactly how to prevent this, but you can take a look at the sockjs documentation (ctrl + f sockjs_url).\n. Closing this issue since we're now using http-proxy-middleware, and WDS will no longer reload on a proxy error.\n. A PR is welcome.\n. Closing this issue, since the problem has been solved with the last release. Using * does the same as ** now.\n. It looks like you're using webpack v1 (which is the stable release), but installing the webpack-dev-server that is compatible with webpack v2 (in beta). To force webpack-dev-server to the v1 compatible version, use npm install webpack-dev-server@1.14.1 --save-dev.\n. It was released in 1.15.0.\n. This is specifically mentioned in the docs now, so closing this issue.\n. Thanks!\n. Answered nicely above, so closing.\n. See #487.\n. @Kovensky ping\n. You're right, it seems that when using HMR, it doesn't refresh anymore on error. When not using HMR, it does still refresh, but I don't think that's really a problem for now.\nAt first I thought we could completely remove the reloadApp() thingy for errors and warnings, but the problem with that is that if you don't have the DevTools open, you'll see an old version of your app. That can be very confusing.\n. And could you give an example of how this would look like on the CLI? I think this would get very messy.\nIf you really want this for a specific usecase, you could also use something like this:\n'/api/*': process.env.PROXY_API_TARGET,\nsecure: process.env.PROXY_API_SECURE\nand then use this command:\nPROXY_API_TARGET=http://localhost:4567 webpack-dev-server\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. When exactly do you see that error? And does the rest (reloading) work correctly?\n. What is this proxy tool? It probably blocks the websocket from communicating.\n. Ah, if you're port forwarding to another port, you can't use --inline. I also had this problem using vagrant, and to fix it you will need to manually include the webpack-dev-server script.\nIn index.html (generated using html-webpack-plugin), I added <script src=\"/webpack-dev-server.js\"></script>. Also make sure that your proxy allows websockets to pass through.\n. webpack-dev-server --host 0.0.0.0 should fix this.\n. I'll make sure to backport this for the next v1 release. Also see #363.\n. That would be very nice :)! Maybe I'll start working on it in the next week.\n. I think it would make more sense to only enable it when --https is passed, because http/2 requires a secure connection.\n. No, it also needs https on localhost unfortunately (see also the example on node-http2).\nI tried setting this up, but apparently the http2 package does not work with Express yet.\n. Update on this situation: the spdy package actually supports http/2 and express. The name is very confusing, as SPDY itself is dead, but it works with HTTP/2 and Express. So that's very interesting...\n. https://github.com/indutny/node-spdy/issues/276 is probably the last roadblock before we can begin implementing this.\n. Above issue was fixed. Unfortunately another blocker: https://github.com/sockjs/sockjs-node/pull/213\nI tested everything, and after that PR is merged it works :).\n. Done! See 25cbf8437aa08bf70d6d6304158dac90c10df8cc.\n. This is a problem in watchpack, and there is already a ticket for that over here: webpack/watchpack#2. But if --poll works, then it is always better to use that, because it uses native file listeners to check for updates.\n. This is kinda tricky stuff, and I'm not sure if it's always the case that you want to use the publicPath for this.\nDo other people have this problem?\n. Closing for now. #216 was already fixed by another PR. In the docs it's also documented that you need to use a custom index when using publicPath.\nWe could theoretically do this automatically, but this is a breaking change that I only want to do if more people have this problem. Will revisit this PR when that happens.\n. Closing for now. #216 was already fixed by another PR. In the docs it's also documented that you need to use a custom index when using publicPath.\nWe could theoretically do this automatically, but this is a breaking change that I only want to do if more people have this problem. Will revisit this PR when that happens.\n. Same as #520?\n. This is a very specific use-case. AFAIK, the dev server provides enough hooks to do this in a Node script. Remember that the dev server is for development only.\n. Did you add webpack/hot/dev-server to your entry point (see docs)?\nIf yes, please show your webpack config file, preferably with unnecessary things stripped out.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. If you use http://localhost:7770, you'll get those errors like that. It means the app itself will be in an iframe though.\nIf you want to build this in your app, take a look at #542.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. create-react-app actually implemented exactly what you want two days ago: https://github.com/facebookincubator/create-react-app/pull/744. You could copy the code from there.\n. Note that since v2.3.0, you can use overlay: true in your devServer config. This is essentially the same as react-dev-utils.. If you search on \"find and kill process in bash\" on Google you'll find a lot of answers on how to do this. This StackOverflow question for example. From a quick test, pkill -f webpack-dev-server; webpack-dev-server works. Note the use of ; instead of &&, because pkill will return a non-zero exit-code if it can't find any processes.\nEdit: if you want to be sure that you only kill the webpack-dev-server process of the current project, use pkill -f project_folder/node_modules/.bin/webpack-dev-server\n. Do you also have this issue when using eslint-loader in preLoaders (see docs)?\n. Okay, a PR is welcome to add an optional parameter. For inspiration, look at #510.\n. Okay, a PR is welcome to add an optional parameter. For inspiration, look at #510.\n. I was wondering, is this really necessary? Because if you see 'nothing changed', you know that there are no errors anymore, right? Or does it still say that even when there are still errors?\n. We should wait on https://github.com/webpack/webpack/pull/3427 for this, after that perhaps a manual flag isn't necessary anymore.. Dupe of #188. See reason as for why it's closed over there.\n. I know it's not a real solution to your problem, but is it not possible to let webpack compile these Sass files? That would automatically give you 'live reload' functionality.\n. In your entry JS file, you can import your Sass like import 'styles/style.scss'. If you install the sass-loader, it will pickup this file and build it as a separate file. When devving, it will only re-compile your sass when something has changed.\n. For that, you'd need extract-text-webpack-plugin. The setup and documentation is a bit cryptic, but if you search on webpack sass example, you'll surely find some nice examples.\n. @PierBover, can you close this issue if you're satisfied?\n. If you leave modules out of the query string, the CSS doesn't get parsed as a CSS module, causing styles to be empty.\nCSS hot reloading doesn't work with ExtractTextPlugin unfortunately. See also #542 about this.\n. Thanks!\n. The headers object should be in the devServer object in your webpack config. See also this example.\n. @Soolan, I did a quick test using fetch, and this works:\njs\nfetch('http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&num=8&q=http://rss.cnn.com/rss/edition_entertainment.rss?output=rss', {\n    method: 'get',\n    mode: 'no-cors',\n}).then(() => {\n    console.log('Works!');\n});\nI don't know what library you're using for XHR, but most libraries have support for something like the above (no-cors).\n. Okay, JSONP is also a solution for this problem. Could you close this issue then? This is not a bug in webpack-dev-server ;).\n. What @chimurai said makes sense. This is not a problem in WDS, and it wouldn't make sense to fix this here because of a very specific use-case in Angular.\n. Closing in favor of #496, which provides a cleaner solution.\n. Thanks!\n. @KevinHoughton, you'll get that if there is no index.html in the directory to which you point contentBase. Can you try including the absolute path to the directory that has a index.html?\n. @Zyphrax, this was a bug in the latest beta and has been fixed with #597.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. You are using webpack/hot/dev-server and webpack/hot/only-dev-server, but you should only use one of the two.\nClosing this since it is not related to webpack-dev-server and a question. I would suggest to put this on Stack Overflow instead, you'll get more answers there.\n. This would be very nice to have! The duplicated messages interfere with searching for actual logs.\n. Related: #109\n. Closing in favor of #109, but a PR is still welcome!\n. Have you also installed webpack globally? npm install webpack -g\n. Cool. Could you close the issue then?\n. Could you guys try it again with webpack-dev-server@1.15.0? That version was just released, and should fix these issues.\n. So do you still have this issue when you don't install it globally? You should not install these packages globally.\nIn my own tests, it seems to work when installing it in a project, but I get the same error when using it globally. That doesn't really sound like an issue I can fix in webpack-dev-server.\n. If you really want to install it globally, putting everything on one line seems to work: npm install -g webpack webpack-dev-server.\nClosing this since now I'm sure I can't do anything about this issue in dev-server.\n. I'm interested in this feature as well, at my work I use css reloading almost full-time, would be awesome if it works with hot reloading.\n. @elisechant, while it is certainly true that you can use style-loader instead of ExtractTextPlugin in dev, I can understand the need to make the dev environment look like production as much as possible.\nSending the files that changed in the websocket could be interesting, also for other purposes.\n@jeroenransijn, would you be willing to do a PR for this? I don't know for sure where exactly you can get the changed files, but they should be somewhere in the stats object.\n. I experimented a bit with this, it's possible to list the files that were changed. in lib/Server.js, in Server.prototype._sendStats, you can add this:\njs\nvar changedModules = stats.modules.filter(function(mod) {\n    return mod.built;\n}).map(function(mod) {\n    return mod.name;\n});\nconsole.log('changed', changedModules);\nIf you now change a CSS file or something, you'll see that only that file gets listed.\nI'm still not sure if we should include this in the WebSocket though.\n. @msuperina awesome work, very interesting. Note that this will not be accepted into webpack-dev-server since it shouldn't do anything with CSS. This should live as a separate package.. Oh that PR you mentioned is awesome. For now I think we don't need that metadata. If someone has a good use case for it later on, we can always use your code.\nI'm going to close this since webpack-contrib/extract-text-webpack-plugin#89 essentially fixes the proposed use case.. Sort-of related: #542\n. @sdhhqb, weird. It wouldn't make sense to backport a fix for this I think, so can this be closed?\n. @MoeSattler and @superddr, are you using the dev-server via CLI?\nNote that in dev-server 2.0 beta, the CLI enables inline mode by default. So if you're manually including the webpack-dev-server/client module, the module is loaded two times. Either use the cli with --no-inline, or remove the module from your entry. \n. @samsch thanks, I can reproduce this now using Firefox on Mac. Chrome works fine as you said. I don't know yet where this issue is coming from, so help would be welcome.\nSome things to know; we use http-proxy-middleware for proxying, there could perhaps be a timeout in there. I checked if it could be caused by the HTTP/2 implementation we're using (which is used when https is enabled), but it was not.. Can anyone help test #841?. @alelau, did @elisechant's answer work for you?\n. @alelau, did @elisechant's answer work for you?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Could you explain this in more detail?\n. Did you read \"Webpack and Docker for Development and Deployment\"? It explains the setup quite well.\n. Cool! Could you close this issue?\n. Already fixed with PR #469.\n. In v2 beta, the iframe has been removed, so this is not a problem anymore. I don't think it's important enough to fix this in v1.\n. See the documentation for caret ranges on npm. If you reinstall your node_modules, 1.3.0 should automatically be installed.\n. It already does exactly this if you use the CLI. Are you using the API?\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. There is a branch for v1 now, webpack-1. I tried to make the changes above myself, but the code has completely changed apparently. Can you check if the bug is still present, and make a PR otherwise?\n. You can edit the doc page you've linked by clicking Edit at the top-right corner. This repo doesn't contain the docs.\n. Yeah they are very busy. Also note that work has started to completely overhaul the docs (webpack/webpack.io), but that will take a while, so I think it's worth it to add this to the current docs.\n. If you want to use a build when the dev-server is not running, you should build the files to disk with webpack instead. The whole point of the dev-server is to provide a client with live-reload.\n. What exactly is your motivation behind this? Accessing the webpack filesystem can leads to various bugs and generally should not be done.\n. ping @gdi2290 ;).\n. Closing for now, as the in-memory filesystem is an implementation detail that should not be exposed to the user; also see the \"Contributing\" guidelines in the README.\n. Okay, #537 was merged a while back, which passes this to the setup method as the second parameter. So if you really want to, you can use that to get to the in-memory filesystem.\nTake care however, since the in-memory filesystem is essentially private, so it could be changed in a patch version.\n. Are you using webpack-dev-server 2.x or 1.x? It could be due to #357. If so, it will be fixed in the next 1.x version.\n. Okay, could you try if manually applying #352 works for you (and using the new flag of course)?\n. Nice! There will be a 1.x release about not too long.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Could be, I have no experience with Docker at all so can't help you with that.. @jagi, webpack-dev-server does not have any prerequisites about the directory structure. However, what probably happened was that the \"build\" files were used because they had the same name.\nBy default, webpack-dev-server has contentBase set to process.cwd() when using the CLI. This means that files in your working directory are also served. This can have a side-effect when you've already built your bundle using webpack, because it will load those files. If you don't use contentBase, you can use --no-content-base. If you do want to use it, make sure the path to the built files and the path to the in-memory files is not the same.\n. This was added in #380. Can you share a screenshot of what is happening?\n. I removed z-index: -1 again with 1a19c2d5bb6124469229a910eb002d4b988bde59.\n. Fix released in 1.15.1 and 2.1.0-beta.2.\n. Confirmed this is also happening with 2.1.0-beta.0.\n. Could you try out if #563 works for you?\n. @cletusw, you need to run npm i && npm run prepublish in node_modules/webpack-dev-server. You could also copy/paste the contents of lib/Server.js in my PR (hacky hacky ;p).\n. @cletusw, awesome! There are a few other small bugs in 1.15.0 that I want to fix first, but a release should happen soon.\n. @txangel, I'm trying, but it is out of my hands (I have no permissions to publish to npm).\nYou're right in that there should be test coverage. It is very hard to test the dev-server thoroughly though, but there are some things we could test in isolation.\n. This has been released as part of  1.15.1.\n. Hm, sorry that this happened. In PR #359, which implemented the switch from http-proxy to http-proxy-middleware, there seemed to be only one breaking change. This was fixed for backwards compatibility with commit  33ebd1f9f702068ed850227ef7c74065dc3849e7.\nAs for the bypass option not working, let's continue that discussion in #560.\n. As of 314048e54baeb54ba6aa9e9d6081038f803c43fe, using * as a context should work again. Internally, it will be remapped to **. Can you guys check if that works for you?\nThe easiest way to test this, is to replace the contents of node_modules/webpack-dev-server/lib/Server.js with this file.\n. @aknuds1, see my comment above. It is getting fixed ;).\n. Ah yeah, true, that should be fixed now.\n. @davidreher, this could be related to #566. As a workaround, you can use pathRewrite from http-proxy-middleware. If that still doesn't work, try adding secure: false.\n. This problem has been fixed with webpack-dev-server@1.15.1. * is now rewritten to ** internally.\n. Verified to work in #560 by @cletusw.\n. Thanks for the nice bugreport! Could you check if the workaround in #559 works for you?\n. Okay, awesome. There will be a patch release in not too long.\n. @fkrauthan, yes.\n. Closing since there was a 1.15.1 and 2.1.0-beta.2 release with the fix.\n. You could hack into hot reload messages like this:\njs\nwindow.addEventListener('message', function onWebpackMessage (e) {\n  // do something\n});\n. Confirmed that this is happening. Could you try if the fix in #567 works for you? The fastest way to check is to copy/paste the contents of the PR in node_modules/webpack-dev-server/lib/Server.js.\n. @chimurai, thanks for your help, really appreciate it!\nMaybe I could override req.originalUrl with the value of req.url (very very hacky)? Or do something like req.originalUrl = null? We could only use this for 1.15.0, and make 2.0.0 use the new pathRewrite, which makes much more sense to me.\nNice, your package was introduced to us by a PR, but that PR also simply removed or broke other proxy functionality. I like the extra options though.\n. @jdkrebs, I updated PR #567, could you try if it works for you now?\n@chimurai, thanks for the extra info!\n. @jdkrebs, updated PR, can you try again? Made a small mistake.\n. @jdkrebs, hmm, is the pathRewrite method also good enough for you (see @chimurai's example above)?\nI'll update the wiki that pathRewrite is the way to go then.\n. Closing this. This breaking change was not intended to be released in a minor release, but to completely revert this we'd need to revert the whole PR that introduced http-proxy-middleware. This also brought us websocket proxy support, and a lot of other nice options. Also, not that many people seem to use rewrite. Documentation for the dev-server is updated to reflect this.\nThanks for your help @jdkrebs and @chimurai\nTL;DR - use pathRewrite, as documented in http-proxy-middleware.\n. I give up for now, it still does not seem to work. See last comment in  #566 for more info.\n. Dupe of #559\n. Dupe of #570.\n. Ah, didn't see that the branches were different. Anyway, it should only be master, from there we can see if we backport it.\n. Wouldn't this be easy to do on the backend server itself?\n. Sorry, I don't see enough use for this. There are two other ways to do it:\n- Use the DevTools to slow down the response.\n- Use a \"delaying proxy\" to the other proxy.\n. This is not a problem in dev-server, see the disableDotRule in connect-history-api-fallback.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. As you say yourself, this seems to be a problem in the globalize plugin, not webpack-dev-server.\n. You should use ExtractTextPlugin.extract when you have more then one occurence of ExtractTextPlugin. See the extract-text-webpack-plugin docs.\nSidenote; this is not an issue in webpack-dev-server.\n. In your example I see that you're not doing it like the example in the extract-text-plugin says. Have you tried doing it like the example at the bottom of the page says?\n. Awesome :).\n. With the historyApiFallback config option you can force that it falls back to a certain html file. See docs.\n. With --history-api-fallback (also in the docs btw).\n. Dupe of #559. TL;DR - it's getting fixed.\n. Thanks!\n. Hi, thanks for your kind words.\nIn #562 you can find more about why this happened. It was not intended to be a breaking release, but it happened and now it would make even less sense to reverse it. The breaking changes were because we switched to a more powerful proxy package, http-proxy-middleware.\nI'd suggest looking for your issue in that package, and if you can't find anything about it, make a ticket over there. The author of the package is very helpful :).\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. To test this:\nAdd this to your package.json:\n\"webpack-dev-server\": \"webpack/webpack-dev-server#browser-log-level\",\nAfter npm install, go to cd node_modules/webpack-dev-server, and run npm run prepublish.\n. @gaearon, I've updated the PR with your feedback.\n- I no longer abuse quiet and noInfo. Instead, there is a separate option, clientLogLevel. You can set this to error, warning, info or none. It defaults to info.\n  - Via the CLI you can use this with --client-log-level. Not sure about the name btw, so suggestions are welcome.\n- Compilation errors will always be logged, disregarding the log level. Maybe there is a use-case where you don't want this, but we'll think about that when someone complains.\n- The repeated message [WDS] Disconnected! will now only display once.\n  - Unfortunately there doesn't seem to be a way to hide the ERR_CONNECTION_REFUSED errors. This is happening because the websocket tries to re-connect every two seconds.\n. > Is this useful? Can we make it reconnect three times and give up? Or reconnect with exponential backoff?\nIf your PC gets into sleep mode, and a tab with the dev-server is still open, the connection would not be restored when you get out of sleep mode. We should be able to do something smarter with it, so I've made #584 for this. It's a bit outside the scope of this PR.\nDo you think the rest of this PR is good?\n. Do you still have it if you pull now? The deps recently got updated. I just checked, and don't seem to have this issue.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Pfff, finally done :).\n. Have you tried adding secure: false in the proxy config? E.g. proxy:{ '/api/**': { target: 'https://localhost:4001', secure: false } }\n. Also see config options for proxy: https://github.com/chimurai/http-proxy-middleware\n. See PR #589.\n. Released in 2.1.0-beta.3.\n. Haha, I made a ticket for exactly this 4 hours ago, #584.\n. Thanks for the link to got, I ended up using the exact same \"algorithm\" for my PR (#589).\n. Whoops, this has to be fixed in webpack. Anyway, made a PR  for it; https://github.com/webpack/webpack/pull/2950.\n. @gaearon, could you check this out? You initially complained about this :).\n. @gaearon, allright, seems fair since v2 is taking longer then planned. I've backported those two PR's and released 1.16.0.\n. Weird, I'm on OS X too and I never had this bug. Does this also happen when you add --stdin as a flag?\n. > Does this also happen when you add --stdin as a flag?\n. Okay, but can you please give an answer to my question?\n. I can reproduce the problem in your repo, but if I comment new DaemonCommandPlugin('start'), it works. So I don't think this is a problem of the dev-server.\n. I tested this by doing cd example && node ../bin/webpack-dev-server.js --open --https --inline, but that appears to work. I'll now check it with create-react-app.\n. Ah, I think I found the bug. When using https mode, the protocol in url.format is set to https:. However, the script has no hostname. As a result, the URL becomes https:/sockjs-node.\nSo what we need to do, is check if the hostname is not empty, and only then try to set the protocol.\n. PR #594 was just merged. This should fix the bug. I'm not sure yet if this will be backported to 1.x.\n. Ah, that PR only partially fixes this bug. The url now is https://localhost/sockjs-node (still missing the port).\n. Fixed in 2.1.0-beta.4\n. @provstevi, I think we'll wait for v2. It would be a PITA to backport this to v1, because there were a lot more changes in handling this path. This could also break backwards compatibility.\n. @provstevi, I think we'll wait for v2. It would be a PITA to backport this to v1, because there were a lot more changes in handling this path. This could also break backwards compatibility.\n. Okay I changed my mind about this. It will be some time before v2 will get stable, and this seems to be a blocking issue for some people. A PR is welcome to backport it.\n. Okay I changed my mind about this. It will be some time before v2 will get stable, and this seems to be a blocking issue for some people. A PR is welcome to backport it.\n. @provstevi, yes.\n. @provstevi, yes.\n. Thank you!\n. What happens when you set output.path to \"/\" in your webpack config?\nIf that doesn't work, could you try upgrading to 2.1.0-beta.2 and see if it also happens there?\n. I can't reproduce your issue yet. Could you post a webpack config here? As minimal as possible please, so I can test it myself easily.\n. Aha. output.path can't have ./. It should be an absolute path. Also see #88 about that. I'm upping the prio of that ticket, because this issue will occur more now. I'll update the changelog to specifically mention that output.path should be an absolute path.\nPreviously, this wasn't an issue because the CLI overrode the output.path to be /. This was also covered in the CHANGELOG as a breaking change.\n. I'm not sure about this. It's technically not true that setting inline to false disables live reload. If you use the iframe modus (by going to http://localhost:8080/webpack-dev-server/), you still have live reload. Also, if you manually include the client script, you also have live reload.\n. Something like \"Set to false to disable including client scripts\" would be more correct I think.\n. Okay, fair enough. It's just that it's important to know that using --inline false does not mean that live-reload is disabled per definition.\n. That's already possible, using --lazy :). If you update the PR with the text you suggested above, I'll merge this.\n. Thanks!\n. Thanks!\n. Thanks. This has the consequence though that --content-base is ignored if you set it in your webpack config. I think that's fine for now, just need to make sure it will be mentioned in the changelog.\n. Yeah, that would be very nice. PR welcome. I'll work on it in after today if nobody sends a PR.\n. You could check if arg[\"content-base\"] is the same as process.cwd()... bit hacky though. It would mean that there is an edge-case, if you specify exactly your PWD then it doesn't work. But if there is no other way, that's better than nothing.\n. Yeah that also would be possible. Just need to make sure that it is still possible to explicitly disable contentBase (see #464).\n. @MoOx, are you planning to do a PR with this? Will wait with a new release if so.\n. cc @wouterverweirder @MoOx\n. So what would your proposed fix be? I'm not sure I understand what you're trying to do here.\n. Is there an easy way to reproduce this behavior? I've never seen this before.\n. Could you check if https://github.com/webpack/webpack-dev-middleware/pull/80 works for you? The quickest way to test this would be to go to node_modules/webpack-dev-middleware/middleware.js, and copy/paste the new code.\n. And is it not possible to exclude your dev domain from the proxy? SwitchyOmega seems to have an option for this:\n\n. I think this is the way it should work, the dev server should not be proxied like that.\n. Yeah I agree, the configuration of dev-server can be (too) complicated. We're working on that though, with stricter validation of the configuration.\n. Is PATHS.build an absolute path?\nAlso, I'm missing output.publicPath. You need to set that to a full URL.\n. Ah you're also using outputPath, that makes output.publicPath not necessary. Are you starting the server from the CLI or with the Node API?\n. Just debugging here because I'm unable to reproduce it, but can you change hot: false to hot: true?\n. @cortopy, thanks, I can reproduce your error with that. I have tried a couple of things, but unfortunately failed in finding a fix.\nSome feedback:\n- --watch in npm start is not necessary.\n- You try to include dev-server client twice (src/index.ejs and by using inline: true in webpack.dev.js). Remove the one in src/index.ejs.\n- Had to remove the line import \"./vendor/web-animations-next.min\";\nThe bug doesn't seem to be in the dev-server. Most of the HMR logic is in webpack itself. I would suggest to make a ticket over there with the above repo (and the points above fixed). You'll get better help over there.\n. Thank you!\n. Sorry, I had to revert your fix. It broke historyApiFallback. If you run the example in examples/history-api-fallback, you'll see that it breaks after this PR. Feel free to create a new PR.\n. contentBase supports an array of directories.\nAlso, please follow the issue template next time, it's there for a reason.\n. Thank you!\n. Thank you!\n. Released in 1.15.2.\n. Released in 1.15.2.\n. Thanks!\n. This is documented explicitly in the docs, under API;\n// Use \"webpack/hot/dev-server\" as additional module in your entry point\n  // Note: this does _not_ add the `HotModuleReplacementPlugin` like the CLI option does.\n. > Alternatively if you could give me commit access, I could backport it myself.\nI do not possess that power ;). If you want to backport something, it is also possible to use the base branch webpack-1. For this PR I'll cherry pick it myself.\n. Thanks! Released 1.16.1.\n. Follow the issue template, it is there for a reason. I have no idea what your issue is about.\n. Thanks for your bug report. I traced it back to this commit, released in webpack@2.1.0-beta.22. I'm going to work on a fix now.\n. See https://github.com/webpack/webpack-dev-server/issues/571#issuecomment-242768988.\n. The docs state that you also need to add new webpack.HotModuleReplacementPlugin() to your plugins.\n. PR welcome.\n. Thanks.\n. Whoops, accidentally closed.\n. My plan was to wait a bit to see if there were other bugs for 1.x (don't want to do too many releases), but if there's nothing in a week I'll release a new version.\n. @skwakman, done, 1.16.2.\n. Started working on this today, but I'm running into a couple of problems.\nwebpack itself handles a part of the command line parsing from webpack-dev-server, because there is some overlap. E.g. webpack handles --hot and the adding of HotModuleReplacementPlugin when this flag is given.\nBut, some options are specific to WDS, so they are parsed in WDS and not in webpack. E.g. the inline option.\nOther options are specific to webpack-dev-middleware, like the lazy and filename option.\nA while ago I made PR #2950 for webpack, which introduces some validation when you're using --hot AND already including HotModuleReplacementPlugin in your webpack config.\nSo my question is, where do we put all the validation logic? When starting WDS, it would be nice if there is a list of all errors. This is difficult when everything is spread out into different repo's though.\n. @axe312ger, #615 will introduce config validation. Feel free to join that discussion if you have more ideas for validation. We're also working on better docs, which will be released with v2.\n. Please, feel free to do some nice works and time for it.. Is it not possible to fix this using disableDotRule?\n. Would you have time to do a PR for this? I'll review it asap.\n. @exogen, what is your plan with this? Since the author of stream-cache probably isn't going to do anything. Are you going to look into other packages, or write something yourself?\n. Apparently the stream-cache package isn't even necessary at all. Less code in lib/Server.js + one less dependency = win :).\n. Could you file this bug on http-proxy-middleware? I think this is out of hands for us.\n. I'm closing this issue because it is an upstream bug that we have no control over.\n. See the comment above me.. See the comment above me.. When using HMR with webpack-dev-server, do you also include the above code? Because webpack-dev-server doesn't accept the hot changes, you'll still need to do that.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. Note to self: the package p-s has really nice CLI tests.\n. You can use clientLogLevel for this, see the changelog for more info. I think this hasn't been documented yet in docs.\n. It's documented now, so closing this.\n. This probably has to do with #617. Where does the 200.html file come from? Is it served through the contentBase option or from a webpack loader / plugin?\n. Never mind, found the issue and added a failing test.\n@aves84, would you have time to look into this? #617 broke this (I don't blame you, at the time of this PR there weren't any tests). There are some unit tests for this now, so it would be easier.\n. @aves84, you're right in that there should be a prepended slash, but even with it it doesn't work. Also see the tests in test/HistoryApiFallback.test.js.\n. @aves84, this would break a lot of existing use-cases, and I think that's not worth it.\nThe directory listing should serve as the very last \"fallback\" that is used, because it doesn't provide that much info. Anything else then the directory index is more helpful for the end user.\nNote that I just now realise I made a small mistake in naming the test: \"magicHtml\" should be \"directory index\".\n. @mac2000, do you want to do a PR? Would be appreciated. There is a failing test in master now, so if all tests succeed again you know you've fixed it :).\n. Add a console.log there?\nAnyway, there is a big warning when creating an issue which you have ignored:\n```\nBEFORE YOU SUBMIT, please read the following:\nIf you have a support request or question please \nsubmit them to StackOverflow using the tag [webpack] or the webpack Gitter. Future support requests will be closed.\n```\n. Thanks!\n. @aves84, this solution doesn't break previous behavior. If you find a solution that doesn't break the old behavior (that is, showing the directory index instead of the page set with historyApiFallback), I'll happily merge a PR.\n. @aves84, I can understand your frustration. I didn't understand your solution in #625, but now I get it.\nThe commit cb1b32fa6c57ec3ae9d16be129279df9448cb29f should fix the behavior for both of you. @aves84 and @mac2000, could you verify this? Sorry for the inconvenience.\n. Great. Thanks for your help!\n. Fix is released in 2.1.0-beta.8.\n. Hm, I thought we had support for web workers. We're definitely interested in a fix for this. Do you have time for a PR?\n. @oskarer, yes, a PR would really be appreciated. I'll make sure it lands in v2.\n. port works for me. I tested this by cloning this repo, going to examples/modus-inline. I added devServer: { port: 3001 } to the webpack config, and then followed the README to start it. Can you provide more information?\nThe stats option is not really documented. You can find more about it here https://github.com/webpack/webpack/issues/1191. I personally always use stats: 'errors-only' in devServer.\n. Thanks! I made a small mistake earlier when \"requesting changes\", but all was already good.\n. Released in 2.1.0-beta.8.\n. Released in 2.1.0-beta.8.\n. Please update your post to include the information that is asked when making a new ticket. Especially here this will help a lot. Also, are you using iframe modus?\n. Closing issue due to lack of information. If you ever come around to this, make a new issue and follow the template.\n. I tested this using examples/proxy-simple, but this does work correctly in webpack-dev-server.\nYou're using an old version of dev-server (1.16.1 is already out). Try updating it to see if that resolves the issue.\nIf that doesn't resolve it, please file an issue on Vue Cli.\n. This repository doesn't watch for file changes itself, so unfortunately it is not possible to fix it here. The \"watcher\" is provided by the webpack repo, which in turn uses the watchpack repo, which uses the chokidar repo to watch for file changes.\nSo if you want the underlying issue fixed, your best chances are creating an issue on chokidar.\nThat said, there are a couple of things you can try:\nA) Use polling after all. It its possible to set this with a timeout of e.g. 1000ms, so it's less system intensive;\njs\nwatchOptions: {\n  poll: 1000\n}\nB) Tryout SSHFS, I am not completely sure if that works, but I've used it in the past and it worked for me.\n. Isn't this already possible?\n. No, if you follow the link in my previous comment, you'll see that it is documented.\nEdit: hm the link doesn't go to the option I meant, but if you do ctrl + f historyApiFallback you'll find it.\n. Thanks!\n. Thanks for your PR!\n. Where exactly do you see \"Access denied\"? Can you show a screenshot (also with URL)?\n. Interesting. I turned on my Windows machine to test this, and while I don't get that WebSocket error you're having, the contents of the iframe don't load, which is the same issue you're having.\nAs you said, this works in Chrome. It also even works in IE12... I noticed that in Edge the iframe src is javascript:;, while it should be / (so where your app lives), but have no idea why.\nIf anyone wants to make a PR for this with a fix, that is welcome. I am not going to waste my time for this Edge-specific bug though. I thought Edge would make our lives as a web developer easier, not harder :(.\n. Interesting. I turned on my Windows machine to test this, and while I don't get that WebSocket error you're having, the contents of the iframe don't load, which is the same issue you're having.\nAs you said, this works in Chrome. It also even works in IE12... I noticed that in Edge the iframe src is javascript:;, while it should be / (so where your app lives), but have no idea why.\nIf anyone wants to make a PR for this with a fix, that is welcome. I am not going to waste my time for this Edge-specific bug though. I thought Edge would make our lives as a web developer easier, not harder :(.\n. I think the problem is that when using historyApiFallback, it will prefer the files from contentBase above the webpack in-memory files.\nPreviously this was not the case, I think it was changed in beta 8. Could you check if beta 7 works for you?\n. This is actually a very problematic issue. Every change here seems to break someone's setup, but we're getting there by adding more tests. For previous struggles, see #625, #627 and the \"final\" fix in cb1b32fa6c57ec3ae9d16be129279df9448cb29f.\nI've added a failing test in the branch historyapifallback-struggles. If all tests succeed, this issue is solved. If anyone wants to take stab at it, please do. It is very important to not change the existing tests.\n. This should be fixed with 2.1.0-beta.9. Would appreciate a confirmation.\n. > Is anybody working on it or should I take initiative? :)\nNope, feel free.. See https://github.com/webpack/webpack-dev-middleware/pull/151. Instead of constantly asking for updates, you can help. PR https://github.com/webpack/webpack-dev-middleware/pull/151 is a good starting point, but was never finished.. Jep, it's the same issue. Thanks for the extra info though.\n. Fair enough. A PR is welcome.\n. Fixed by #644.\n. The data going into it is:\njs\n{ protocol: 'http',\n  hostName: 'localhost',\n  port: '8080',\n  pathName: '/' }\nYou can test this by navigating to examples/modus-inline, the instructions are in the readme there ;).\nAccording to the node.js documentation you're using some wrong parameter keys it seems.\n. What exactly are you trying to do here? The bundle should be available under http://localhost:8080/dist/bundle.js, have you tried that?\nAlso, as the issue template said, please ask those kind of questions on Stack Overflow. You'll get better help there.\n. webpack-dev-server will not put your bundle.js in your workdir, it will compile your files in-memory. I just now notice that you have commented out this part:\n// publicPath: myConfig.output.publicPath /* '/dist/' */\nCan you try changing that to publicPath: '/dist/'?\n. As the template said, these kind of questions are better suited for StackOverflow. You'll get better help there.\nThe error says something about a missing ). If you temporarily make ./main.js almost empty, do you still have that error?\n. And do you also get this error when using webpack instead of webpack-dev-server?\n. I'm going to close this. I would really recommend to post such questions on Stack Overflow, where more people can help you.\n. The object key is regex, so you could put in some regex. Something like ^(/api/ip|/api/mobile) should work (not tested). Also see the http-proxy-middleware for more documentation; https://github.com/chimurai/http-proxy-middleware\nSince this is a question and the template very clearly states that you should ask these on StackOverflow, I'm closing this.\n. So to be clear, this prevents you from connecting at all? Even if you click \"Next\" (or something like that) and continue \"unsecure\"?\n. Reproduced the problem in Windows, and verified that it was fixed with e97741c84ca69913283ae5d48cc3f4e0cf8334e3. Fix released in 2.1.0-beta.10!\n. Reproduced the problem in Windows, and verified that it was fixed with e97741c84ca69913283ae5d48cc3f4e0cf8334e3. Fix released in 2.1.0-beta.10!\n. But you can click on something like continue, right? The cert authority is invalid because it's a fake cert.\n. Cool addition, thanks again :). Could you document this in the new webpack v2 docs? See devServer options.\n. As the issue template you've removed explicitly says, please ask questions on Stack Overflow. You don't even specify what the problem is, so I'm closing this.\n. Okay, that should be fixed. A PR is welcome.\n. I tried to reproduce this, but it appears to work. I cloned the webpack-dev-server repo and executed these commands:\nbash\ncd examples/https\nopenssl req -newkey rsa:2048 -x509 -nodes -keyout server.pem -new -out server.pem -subj /CN=localhost -sha256\nnode ../../bin/webpack-dev-server.js --open --https --key server.pem --cert server.pem\nThis opened the browser, and the page loaded successfully.\nCan you provide more information?\n. friendly ping @eldh \n. Hmm honestly I don't want to add features to 1.x anymore, and just want to focus on getting 1.x as stable as possible.\nI would recommend to use webpack v2, but don't use the caret ^. By setting it to one version specifically it can't break suddenly (since it's still in beta).\n. @Pyrolistical you need to run npm run prepublish.\n. @pelx, no, that's a different problem ;).\nClosing this for reasons stated above.\nIt won't take long anymore for the webpack v2 release.\n. @pelx, no, that's a different problem ;).\nClosing this for reasons stated above.\nIt won't take long anymore for the webpack v2 release.\n. Working on this atm in the options-schema branch. If anyone wants to help, that is very welcome.\n. Released in 2.1.0-beta.11.\n. @aaronroberson, you need to update webpack to at minimum webpack 2.1.0-beta.26 (see also the release notes).\n. @emilio-martinez weird. The biggest change is the config validation, but that should always throw an error if something is wrong. Could you try and remove as much options as possible with the error still occurring? The only wrong option I see here is colors: true, that doesn't do anything.\nEdit: please open a new issue if you're sure it's a new bug introduce in beta.11, that way I'll not forget it ;).\n. This might be related to https://github.com/webpack/webpack/issues/2117.\n. You're free to back port it to v1 with a PR.\nClosing because it has been fixed in v2.\n. @koddo, it's called hotOnly throughout the code of dev-server.\n. I've marked this as breaking, since it is breaking for users that use fs.readFileSync themselves.\nI thought you were having a new bug, but in previous versions it also didn't work like this, right?\n. I fully agree with you that it makes more sense to supply a file path instead of buffer, but I don't think the breaking change is worth it. webpack v2 and dev-server v2 already have a huge amount of breaking changes. We could do this in a later major version though.\nThe ERR_SPDY_PROTOCOL_ERROR you're talking about is pretty serious and is something we should fix in this version. I'm going to test it myself this weekend. Let's continue that discussion in #651.\n. You removed the issue template, which asks what version you are running... Could you please provide this? I'm pretty sure you are running an old version since this bug has been fixed.\n. Can you try upgrading to 1.16.2?\n. Yes, it was a bug that has been fixed.\n. webpack/hot/dev-server reloads when applying HMR fails. webpack/hot/only-dev-server doesn't reload when applying HMR fails.\n. What version of webpack-dev-server are you running? This is not fully supported on webpack v1 yet. Also see https://github.com/webpack/webpack-dev-server/issues/655.\n. @mrdulin ping ^\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.\n. A PR is welcome.\n. Fixed by PR #661 :).\n. Fixed by PR #661 :).\n. Dupe of #200\n. Thanks!\n. Per https://github.com/webpack/webpack.js.org/issues/262, I'll wait for the decision there.\nNote that not only the domain has changed, but also the path. This page is the new location for the dev-server options.\n. Fixed the links, so closing.. Fixed the links, so closing.. That is extremely unlikely, the code that enabled this in the past is gone in webpack-dev-server 2.1.0-beta.9. Are you sure that you are running that version? You can verify by going to node_modules/webpack-dev-server/package.json and looking at the value after \"_id\".\n. ping @istrau3 ;).\n. Closing this because it can't be happening in webpack v2 anymore since that code is completely gone. Feel free to re-open if it really still happens with the latest beta 2.1.0-beta.10, but please provide more information if you do so.\n. Closing this because it can't be happening in webpack v2 anymore since that code is completely gone. Feel free to re-open if it really still happens with the latest beta 2.1.0-beta.10, but please provide more information if you do so.\n. No, this will not be added to webpack-dev-server since it is outside the scope of it. It is intended for development.\nNote that you can probably add this via middleware by using the setup method. See documentation about this (ctrl + F 'setup'). webpack-dev-server also uses Express btw.\n. Can you update to the webpack-dev-server beta? I didn't even know webpack-dev-server 1.16.x worked with webpack v2 ;p.\n. Okay. Do you have an index.html file? So if you would remove the proxy temporarily, does something display on http://localhost:3000?\n. This is because of this line. contentBase takes preference above proxy. I suggest to either:\n1) disable contentBase\n2) move index.html to another location\n3) rename index.html\nwebpack-dev-server is working as intended here.\n. I don't understand this, is this related to #661? And if so, url is part of the standard node.js modules.\n. This is probably related to #648.\n. Closing this as a dupe of #648.\n. Closing this as a dupe of #648.\n. Hmm, this is all feels like a hack for a very specific use-case. Is it possible to do this as a separate package? You could use the setup() option to access Express.\n. Hmm, this is all feels like a hack for a very specific use-case. Is it possible to do this as a separate package? You could use the setup() option to access Express.\n. I'm going to close this since it doesn't align with our core ideas:\n\n\nThere are hooks to add your own features, so we should not add less-common features.\n\n\nSorry for the trouble. Creating an issue before making a PR would prevent this in the future.\nIf you want to make a package out of this and need more hooks, we can discuss adding those.. I'm going to close this since it doesn't align with our core ideas:\n\n\nThere are hooks to add your own features, so we should not add less-common features.\n\n\nSorry for the trouble. Creating an issue before making a PR would prevent this in the future.\nIf you want to make a package out of this and need more hooks, we can discuss adding those.. I'm going to close this since it doesn't align with our core ideas:\n\n\nThere are hooks to add your own features, so we should not add less-common features.\n\n\nSorry for the trouble. Creating an issue before making a PR would prevent this in the future.\nIf you want to make a package out of this and need more hooks, we can discuss adding those.. Marking as a low prio bug, because this is clearly a wrong configuration scenario.\nAFAIK there were no related changes here that can cause this to differ. However, a lot changed in webpack-dev-middleware that is related to this, so it could be that when it worked with 1.14.1, this was because dev-middleware wasn't updated yet.\nCould you check again with webpack-dev-server@1.14.1, and make sure the latest version of webpack-dev-middleware is installed?\n. Marking as a low prio bug, because this is clearly a wrong configuration scenario.\nAFAIK there were no related changes here that can cause this to differ. However, a lot changed in webpack-dev-middleware that is related to this, so it could be that when it worked with 1.14.1, this was because dev-middleware wasn't updated yet.\nCould you check again with webpack-dev-server@1.14.1, and make sure the latest version of webpack-dev-middleware is installed?\n. @dhardtke, this is not really related.\nThe file being minified is something that is not in webpack or webpack-dev-server hands. This could be due to a change in html-loader or html-webpack-plugin, but webpack doesn't even \"know\" how to minify html.\nThe script and link URL's appearing in a different subdirectory + with a random hash looks like an issue with either webpackMerge or that you're not loading the correct webpack config (webpack.dev.js).\nPS: I fixed your formatting issues, you should use a backtick when mentioning <script>, otherwise GitHub ignores it.\n. @dhardtke, this is not really related.\nThe file being minified is something that is not in webpack or webpack-dev-server hands. This could be due to a change in html-loader or html-webpack-plugin, but webpack doesn't even \"know\" how to minify html.\nThe script and link URL's appearing in a different subdirectory + with a random hash looks like an issue with either webpackMerge or that you're not loading the correct webpack config (webpack.dev.js).\nPS: I fixed your formatting issues, you should use a backtick when mentioning <script>, otherwise GitHub ignores it.\n. A lot has changed in webpack v2. This issue is about using a prepended slash in output.filename, and @ibufu says that it works without this prepended slash. That's definitely something different.\nEdit: Removed the first part of this comment since I was confused with another ticket.\n. A lot has changed in webpack v2. This issue is about using a prepended slash in output.filename, and @ibufu says that it works without this prepended slash. That's definitely something different.\nEdit: Removed the first part of this comment since I was confused with another ticket.\n. @ibufu, I've looked into this and came to the conclusion that we can't fix this without a chance of breaking other things. This is a configuration error, because you should not use a slash in output.filename or in an entry key.\nHowever, I added this to the list of more config validation in #615. I can imagine more people running into this, so on the long run we can add an error / warning that this doesn't work.\n. @ibufu, I've looked into this and came to the conclusion that we can't fix this without a chance of breaking other things. This is a configuration error, because you should not use a slash in output.filename or in an entry key.\nHowever, I added this to the list of more config validation in #615. I can imagine more people running into this, so on the long run we can add an error / warning that this doesn't work.\n. @ibufu, I've looked into this and came to the conclusion that we can't fix this without a chance of breaking other things. This is a configuration error, because you should not use a slash in output.filename or in an entry key.\nHowever, I added this to the list of more config validation in #615. I can imagine more people running into this, so on the long run we can add an error / warning that this doesn't work.\n. No it's not, i'm also using htmlWebpackPlugin everywhere and it works ;). I think you mean the filename option for the plugin itself new HtmlWebpackPlugin({filename: '...'}).\n. No it's not, i'm also using htmlWebpackPlugin everywhere and it works ;). I think you mean the filename option for the plugin itself new HtmlWebpackPlugin({filename: '...'}).\n. No it's not, i'm also using htmlWebpackPlugin everywhere and it works ;). I think you mean the filename option for the plugin itself new HtmlWebpackPlugin({filename: '...'}).\n. Ah okay, but the filename is the wrong place for that. If you want to change that path, you need to use output.publicPath.\n. Ah okay, but the filename is the wrong place for that. If you want to change that path, you need to use output.publicPath.\n. Ah okay, but the filename is the wrong place for that. If you want to change that path, you need to use output.publicPath.\n. @ibufu, I created https://github.com/webpack/webpack-dev-middleware/issues/145 for it, since it's a problem in webpack-dev-middleware (I think, could also be in webpack itself). I'll take a look at it when I have the time.\n. @ibufu, I created https://github.com/webpack/webpack-dev-middleware/issues/145 for it, since it's a problem in webpack-dev-middleware (I think, could also be in webpack itself). I'll take a look at it when I have the time.\n. @ibufu, I created https://github.com/webpack/webpack-dev-middleware/issues/145 for it, since it's a problem in webpack-dev-middleware (I think, could also be in webpack itself). I'll take a look at it when I have the time.\n. As the GitHub issue template clearly says, please ask questions on StackOverflow. You will get better help there.\n. As the GitHub issue template clearly says, please ask questions on StackOverflow. You will get better help there.\n. Thanks for your clear bug report. This was fixed in webpack-dev-server v2, which is currently in beta. See PR #644.\n. Thanks for your clear bug report. This was fixed in webpack-dev-server v2, which is currently in beta. See PR #644.\n. @NewFuture, oh haha okay. Fair enough. Would you be willing to send a PR to fix this? I don't have much time to fix this at the moment.\n. @NewFuture, oh haha okay. Fair enough. Would you be willing to send a PR to fix this? I don't have much time to fix this at the moment.\n. Released in 2.1.0-beta.10!\n. Released in 2.1.0-beta.10!\n. Released in 2.1.0-beta.10!\n. Is it not possible to use close()? Because if you would do this manually, you'd also need to close the webpack-dev-middleware instance manually.\n. Oh okay nice, no worries ;).\n. What node and npm version do you have? I can't reproduce this, and I know for sure it's working for many people.\n. @angusjiang, ah I think I know where your problem is.\nIn your webpack config, you have this:\njs\nresolve: {\n        modulesDirectories: ['.']\n},\nHowever, that isn't valid and by specifying the modulesDirectories without node_modules in it, the client script can't compile. For more information why . is not valid, see the docs.\nSo to fix it, I would suggest to either remove modulesDirectories, or to add 'node_modules' to it.\n. Note that this does work, but is a configuration issue.\n\nI've got legacy polling enabled\n\nHow do you use this exactly? With --watch-poll or ...?\nAlso, do you still have the built files that you got when running webpack? If so, try to delete these files and see what happens then. It's possible it actually uses those files.\n. Okay, did you try to upgrade to a newer version of webpack and webpack-dev-server? You're using fairly old versions.\nIf that doesn't work, please post your config here.\n. Ah, you're using hot reload, that was a detail I was missing.\nAccording to the documentation, you need to do this:\n\nTo teach webpack to make requests (for chunk loading or HMR) to the webpack-dev-server you need to provide a full URL in the output.publicPath option.\n\nI don't see a full URL in your config file.\n. I'm just debugging here, since I don't have a Windows VM with Docker on it and don't have time to set that up at the moment.\nSo does it work in Linux and OSX with Docker? Because if so, that would definitely be a weird bug.\n. Okay, if it's not working with webpack --watch it's definitely not a webpack-dev-server problem. In #143 there are a lot of solutions to some Docker problems, maybe try that out.\nI would suggest to try to migrate to webpack v2, even if it's still in beta. It's pretty stable. This upgrade guide is good. If it still happens then, you could make an issue in the webpack main repo.\n. Okay, if it's not working with webpack --watch it's definitely not a webpack-dev-server problem. In #143 there are a lot of solutions to some Docker problems, maybe try that out.\nI would suggest to try to migrate to webpack v2, even if it's still in beta. It's pretty stable. This upgrade guide is good. If it still happens then, you could make an issue in the webpack main repo.\n. Allright. By the way, I would maybe first post this on StackOverflow, because you'll probably get a quicker reply there.\n. Allright. By the way, I would maybe first post this on StackOverflow, because you'll probably get a quicker reply there.\n. Fixed in a2a9ac593650a340da632d1c523c3b1ee5698b24, but we need to wait for https://github.com/webpack/webpack/pull/3212 to land in webpack before this works.\n. Fixed in a2a9ac593650a340da632d1c523c3b1ee5698b24, but we need to wait for https://github.com/webpack/webpack/pull/3212 to land in webpack before this works.\n. PR for webpack is merged. I merged the commit to master. This will not work before a new webpack beta version is released, but it also will not break anything since this didn't work before anyway.\n. PR for webpack is merged. I merged the commit to master. This will not work before a new webpack beta version is released, but it also will not break anything since this didn't work before anyway.\n. Done!\n. Done!\n. I'm happy now with the new CLI output:\nProject is running at http://localhost:8080/\nwebpack output is served from /\nNext up: introducing some basic colors. The URL and the output path (\"/\"), should be highlighted with some fancy color.\n. I'm happy now with the new CLI output:\nProject is running at http://localhost:8080/\nwebpack output is served from /\nNext up: introducing some basic colors. The URL and the output path (\"/\"), should be highlighted with some fancy color.\n. That's unfortunately not possible in webpack-dev-server, since the HMR script lives in the webpack repo.\n. That's unfortunately not possible in webpack-dev-server, since the HMR script lives in the webpack repo.\n. To answer your question (didn't see that at first), it should only target the CLI.\nEdit: removed comment above this since I only read part of your issue, sorry.\n. Note this is not an issue in webpack-dev-server. You haven't mentioned your OS, so I can't give you a good answer, but if you google for kill node process <OS name> you'll find how to fix this.\n. Thanks!\n. I'm not sure about this. You can clearly see that it's loading because your browser shows it as loading. I don't know if a splash screen would add value if you already know it's loading.\n. The events that are necessary to render a splash page are exposed now. It is relatively easy to make a package for it or include it directly in your app (in this case I would suggest to use a separate entry point).\nAn example of how this would work: https://github.com/webpack/webpack-dev-server/issues/481#issuecomment-258610429.\n. js\nvar server = new WebpackDevServer(compiler, {...});\nserver.listen(8080, \"localhost\", function(err) {\n  // do your thing\n});\nNote that the issue template very clearly says that questions should be asked on StackOverflow, so I'm closing this.\n. Sorry, I'm not going to help you like this. As I said in your previous issue, you should ask questions on StackOverflow. You'll get better help there.\nNote that if you make an issue again like this, I'll report this as Spam/Abuse.\n. This seems unrelated to webpack-dev-server. Does this also happen when using webpack? Or when using Express?\nYou've removed the issue template so I don't know what versions and OS you're running.\n. After some searching on that error, it is because there is a limit of files you can watch in macOS. To limit the amount of files webpack watches, add something like this:\njs\nwatchOptions: {\n  ignored: /node_modules/\n}\nIf you're using the CLI, put this in the devServer property in your webpack config. If you're using the Node.js API, add this as the second parameter in an object.\n. After signing the CLA and fixing the wanrings typo this is good to go :).\n. Thanks!\n. Could you try using an absolute path in output.path?\n. Haha don't worry, webpack should have given you a clear error message. I just checked, in webpack v2 this has been fixed at least :). If you would've used --conf there, it would have errored with \"Unknown argument: conf\". It's still in beta, but will be stable in a few months.\n. Yeah since v2 entry will be required. webpack v2, but also webpack-dev-server v2, have a strict configuration validation which will throw an error if you try to use an option that is not existent, or when you use the wrong values for an option.\n. Whoops, fixed. I'll wait a few days before releasing a new version to see if there are more issues with the new schema validation.\nThanks for your bug report!\n. Fix released in v2.1.0-beta.12.. Fix released in v2.1.0-beta.12.. Yeah there are many issues with Node.js v7. A few minutes ago I put a warning on the README, because the Node.js v7 issues seem endless and are not the fault of webpack-dev-server most of the time.. Yeah there are many issues with Node.js v7. A few minutes ago I put a warning on the README, because the Node.js v7 issues seem endless and are not the fault of webpack-dev-server most of the time.. I'm just guessing here, but some things to try:\n- Browse to http://localhost:8077/api/api/posts and report what happens.\n- You could remove the /** part. It probably won't fix your issue, but it isn't necessary.\n- Replace localhost with 127.0.0.1, I have seen some issues been fixed by this.\nAre you using the CLI or Node.js API?\n. Can you show me how you're using the Node.js API? Note that the devServer object in your webpack config is not automatically used when using the Node.js API.\n. Ah, like I thought, the devServer options don't get included. Change this:\nnew WebpackDevServer(webpack(webpackConfig)) -> new WebpackDevServer(webpack(webpackConfig), webpackConfig.devServer)\nI'm assuming webpackConfig is a single object here.\n. I tried to reproduce it with this example. In server.js, I added colors: true in the second parameter for new WebpackDevServer. This resulted in a proper error, as expected.\nCould you share how you start the Node.js server? I noticed you're using devServer from your config. Note that the Node.js API will ignore the options in devServer, unless you specifically add it (e.g. new WebpackDevServer(compiler, config.devServer)).\n. @emilio-martinez ping ^. @emilio-martinez ping ^. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template, or open a new issue.\n. To disable browser logs you'll need to use clientLogLevel: \"none\". This might seem a little redundant, but many people want only browser logs and no CLI logs.\nSidenote: clientLogLevel: \"none\" is broken at the moment in beta.11 (see #693), will be fixed in next beta.\n. > All the warnings are still output to the browser console though.\nYeah true. Currently that is done on purpose, but perhaps I should change that behavior a bit so that when you use \"none\" it stops all logs from appearing. I assumed that nobody would not want to see error / warning logs in the devtools...\n. Ahh okay, you're right. It should reload for warnings. I'll fix that soon. Is your issue fixed after that?\n. Fix released in v2.1.0-beta.12.. Fix released in v2.1.0-beta.12.. @mathieumg Honestly I wasn't planning on doing another v1 release, since v2 is right around the corner and now we're in release candidate already. However, if I have the time this weekend I'll see if I can do another v1 release.. No, I'm sorry. I have been closing webpack 1 specific PR's for a while. webpack 2 is released now and we'll only focus on critical bugfixes in v1.. Oh I kinda forgot that this was a bugfix not a feature. I'll see if I have some time later today.. np, released as webpack-dev-server@1.16.3. Sorry for the long waiting time.. Confirmed that the bug is happening on the latest beta. Will investigate, but all help is welcome.\n. Investigated it a bit: this happens only when using http/2. If you'd set devServer.https.spdy.protocols = [\"http/1.1\"], it works fine on Safari. That's a temporary workaround you can use.\n. Hmm this is rather ugly, but it seems Safari doesn't \"trust\" the certificate used for the WebSocket, even if you click \"Continue to untrusted page\" when loading the page.\nThis article explains what you have to do to \"trust\" the certificate.\nFor future reference, here's a tl;dr:\n\nWhen Safari shows a modal that it can't verify the identity of the website, click on \"Show Certificate\".\nNext to \"When using this certificate:\", click on \"Always Trust\".\n\nI verified that this fixed the issue. It is not a nice workaround, but unfortunately I see no other way to fix this behavior in webpack-dev-server (without breaking http/2). If anyone knows a better way, please don't hesitate to do a PR or comment here.. Hmm this is rather ugly, but it seems Safari doesn't \"trust\" the certificate used for the WebSocket, even if you click \"Continue to untrusted page\" when loading the page.\nThis article explains what you have to do to \"trust\" the certificate.\nFor future reference, here's a tl;dr:\n\nWhen Safari shows a modal that it can't verify the identity of the website, click on \"Show Certificate\".\nNext to \"When using this certificate:\", click on \"Always Trust\".\n\nI verified that this fixed the issue. It is not a nice workaround, but unfortunately I see no other way to fix this behavior in webpack-dev-server (without breaking http/2). If anyone knows a better way, please don't hesitate to do a PR or comment here.. [default] Checking started in a separate process... -> this is not something from webpack-dev-server as far as I know, are you using some plugins or something else that could cause this?\nAlso, please try to upgrade to the latest beta's of both webpack and webpack-dev-server. Debugging an old beta version is useless ;).\n. Ah yes, since webpack beta 25 there is configuration validation. See this issue to fix the tslint error. For the rest you'll need to read through the upgrade guide.\n. Also note that --context-base=./dist is invalid, it should be --content-base=./dist.\n. @jeusdi, were you able to figure out your issue?. @jeusdi, were you able to figure out your issue?. outputPath isn't a valid option in webpack-dev-server, it doesn't do anything. So you can remove outputPath in the devServer object.\n. You seem to be using the package source-map-support. Could you temporarily disable it and see if that resolves it? It's not a package webpack installs, and I can't reproduce this on my Windows machine.\n. @jeusdi, I also don't know where it is, but the stack trace you posted doesn't seem to come from anything that is installed by webpack or webpack-dev-server. I'd suggest to remove some plugins / loaders to narrow down the issue.. @jeusdi, I also don't know where it is, but the stack trace you posted doesn't seem to come from anything that is installed by webpack or webpack-dev-server. I'd suggest to remove some plugins / loaders to narrow down the issue.. I'm going to close this and put a clear warning in the README that webpack-dev-server has issues with Node.js v7.. I'm going to close this and put a clear warning in the README that webpack-dev-server has issues with Node.js v7.. I don't have a Windows Server 2008 VM lying around, so you'll need to debug this a bit further on your own. The config seems fine.\nIt could help to remove as much as possible from your config to narrow down the issue.. Are you using the CLI or Node.js API?. In that case you should not add the entry point manually. I couldn't reproduce your issue. The error is confusing, but previously the server would start with a not correctly working config. With #615 we'll be working on better validation for this.. I'm assuming this worked for you since you reacted with a thumbs up, feel free to re-open if there is still an issue.. Instead of 0.0.0.0, could you try the specific IP the VM is on?. I knew that your Node.js version was v7, but I wanted you to try if it worked on v6. It looks like this isn't a problem I can fix in webpack-dev-server, since running it directly does work as you said.. Okay, I'm going to close this for now since we have many other issues with the watch functionality and node v7 anyway.. Can you be a bit more specific? What is your config like? Do you see any errors? Is it in all browsers?. Oh, reloading on warning was fixed again but hasn't been released yet. I'll do a release soon.. Fix released in v2.1.0-beta.12.. You could try to ignore those files from watch mode by using watchOptions.ignored.. Do you use require.context() somewhere in your app? If you use that incorrectly, it's possible dot files are also included.. I tried reproducing this by using webpack-dev-server with --watch-poll and opening the entry file in vim. I verified that it created a .swp file, but it didn't trigger any change. So I think you either use require.context(), or something else that blindly includes all dotfiles.\nI'd suggest to first try to change your entry file by removing all code and only placing a simple console.log('hi') in it. Check if it still happens after that. If it still happens, try to remove as much as possible from your webpack config to see what introduces the error.. I don't know out the top of my head, but you should ask this on StackOverflow. this is not a specific issue with webpack-dev-server.... I don't know out the top of my head, but you should ask this on StackOverflow. this is not a specific issue with webpack-dev-server.... webpack does all the compiling, not webpack-dev-server.. webpack does all the compiling, not webpack-dev-server.. Jup. I advise to first ask this on StackOverflow though, you'll probably get an answer quicker then. . I'm going to close this since this is an issue in webpack; webpack-dev-server essentially does the same as webpack --watch, so I can't fix this here.. Thanks!. I tested a simpler version of this on v2 (because I'm not planning to make many fixes for v1 anymore), but it seems to work correctly.\nIn examples/node-api-middleware/server.js, I replaced the contents with this:\n```js\nvar Webpack = require(\"webpack\");\nvar WebpackDevServer = require(\"../../lib/Server\");\nvar webpackConfig = require(\"./webpack.config\");\nfunction startServer() {\n    var compiler = Webpack(webpackConfig);\n    var server = new WebpackDevServer(compiler);\nserver.listen(8080, \"127.0.0.1\", function(err) {\n    console.log(\"Starting server on http://localhost:8080\");\n    console.log('err', err);\n});\n\nreturn server;\n\n}\nvar first = startServer();\nsetTimeout(() => {\n    first.close();\n    startServer();\n}, 5000);\n```\nThen I ran node server.js in that directory and after the timeout was done, I browsed to http://localhost:8080. This worked.\nSo could you provide a simpler script that reproduces the issue, and prove it's the fault of webpack-dev-server?. I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.. Not without modifying the hosts file. There might be some tool for this that runs a DNS server, but this would be outside the scope of webpack-dev-server.\nYou could ask this on StackOverflow, perhaps they can help you with finding a suitable tool. I don't know of any.. This might possibly have to do with https://github.com/webpack/watchpack/issues/28.\nYou could try to apply this PR manually in node_modules/watchpack, and see if the issue still occurs.\nIf that doesn't help, please try if the same problem happens when using webpack --watch. If it does, it's a problem in webpack and not webpack-dev-server. In any case, please provide a repo where this is reproducable. It takes us too much time to try to reproduce every issue by hand.. Okay, when/if you can reproduce it in a repo, please file a bug report in webpack/webpack.. I merged #746, so it's now possible to add --public localhost and it will use the correct URL to open the site. It's a bit more config, but you can't always assume that it works correctly for localhost.. Are you running dev-server from CLI? If yes, make sure to remove webpack-dev-server/client from your entry object and add --publiclocal.youku.com:3333 instead.\nAlso, could you try to replace host: 'local.yk.com' with host: '0.0.0.0'?\nI can't reproduce this error so I'm just guessing here.... Okay if you are running in Node then you shouldn't remove webpack-dev-server/client. Did you try the host thing as I mentioned above?\nIf that doesn't work, could you make sure to first update to the latest webpack RC and then make a repo that reproduces the error? Before doing that, I would recommend to try to strip your webpack config as much as possible, to see if something else is causing the error. A common cause is an invalid value in the resolve config.. I don't know what I can do with the code you posted above? Could you please make a repository that reproduces the problem you're having?. I don't know what I can do with the code you posted above? Could you please make a repository that reproduces the problem you're having?. I could reproduce your issue. It's caused by using resolve.mainFields in your webpack config. If you remove that, it works. You can add custom fields to it, but be sure to add at least [\"browser\", \"module\", \"main\"].. Unfortunately that isn't really possible since the client needs to make a websocket connection to the server. We're using a library for that, SockJS, because websockets aren't supported natively in some older browsers. Also, depending on the network, SockJS can switch to XHR polling.\nNote that in the next webpack RC the performance feature will be disabled by default. The plan is to only enable it for production mode.. In v2 inline mode is enabled by default. If you don't want that, use --no-inline or set inline to false. \n. You can also include a <script> manually to include the client script webpack-dev-server needs. See this example.. You can also include a <script> manually to include the client script webpack-dev-server needs. See this example.. If you don't even have webpack-dev-server installed, how can it be the fault of webpack-dev-server that it doesn't give an error? Please do some research first and then ask on StackOverflow.. If you don't even have webpack-dev-server installed, how can it be the fault of webpack-dev-server that it doesn't give an error? Please do some research first and then ask on StackOverflow.. It's headers, not header.. It's headers, not header.. This is not an issue in webpack-dev-server (or dev-middleware for that matter), since it doesn't handle the logic to determine if a update is necessary.\nThis is a not a known bug. I don't know if it's a bug in webpack/webpack or webpack-hot-middleware; you'll need to temporarily remove webpack-hot-middleware to isolate it a bit. Then make a simple repository that reproduces the problem. Without a repo, it's very unlikely somebody will take a look at it since these kind of things take too much time for us to reproduce by hand.. This is not an issue in webpack-dev-server (or dev-middleware for that matter), since it doesn't handle the logic to determine if a update is necessary.\nThis is a not a known bug. I don't know if it's a bug in webpack/webpack or webpack-hot-middleware; you'll need to temporarily remove webpack-hot-middleware to isolate it a bit. Then make a simple repository that reproduces the problem. Without a repo, it's very unlikely somebody will take a look at it since these kind of things take too much time for us to reproduce by hand.. Could you please ask this on StackOverflow instead? This is not a bug and the issue template clearly says that questions should be asked on StackOverflow.. Could you please ask this on StackOverflow instead? This is not a bug and the issue template clearly says that questions should be asked on StackOverflow.. webpack-dev-server doesn't do anything special with plugins, so it's highly unlikely that the problem is in this repository. I use that plugin in every project of mine and it works... You could try if the same thing happens with webpack --watch, webpack-dev-server essentially does that under the hood. Also, do you have some conditional configuration that might cause this issue?. webpack-dev-server doesn't do anything special with plugins, so it's highly unlikely that the problem is in this repository. I use that plugin in every project of mine and it works... You could try if the same thing happens with webpack --watch, webpack-dev-server essentially does that under the hood. Also, do you have some conditional configuration that might cause this issue?. This is definitely an interesting feature, and I have thought about this before. What I'm not sure about though is if webpack-dev-server should include a script like this, or if this should be handled in user-land (e.g. as a separate package or in your own bundle). webpack-dev-server already has the required hooks for this, see https://github.com/webpack/webpack-dev-server/issues/481#issuecomment-258610429 for an example API.\nAlso see #481.. Closing since in 2.3.0 we actually released this feature. Completely forgot about this issue.. That could be interesting. Would you be willing to make a PR for this?. Repository gives a 404... Also note that this most likely isn't a bug with webpack-dev-server, it does almost nothing with hot reloading. most of that code is in webpack/webpack.. Did this ever even work? AFAIK CSS reloading doesn't work with extract-text-plugin. You have to use style-loader in development for that, because style-loader contains the necessary code to actually perform the hot reload part. Also see https://github.com/webpack/extract-text-webpack-plugin/issues/30. Hmm, I tested your repo and it doesn't really hot reload, it just refreshes the page. Are you using hot reloading for React? From your repo it doesn't look like it. In that case you should remove --hot. After that it will probably properly reload your page again after a CSS change.. > no in my demo repo just shared with you\nSo in your real repo you're not using hot reload too? I don't get why you're using --hot.... Have you tried using --public somealias.com? Not sure if it fits your use-case.. Okay, fair enough. The PR #725 attempts to fix this, but only for localhost. Could you perhaps file a PR to do it with the --public flag? I'll close #725 then.. Note that I haven't forgotten this, but this costs a lot of time to properly check if it works and review.\nHave you checked that changing something in the webpack config actually changes something? Because (looking purely at the code), there might be some issues with the require cache.. Note that I haven't forgotten this, but this costs a lot of time to properly check if it works and review.\nHave you checked that changing something in the webpack config actually changes something? Because (looking purely at the code), there might be some issues with the require cache.. I tested it out, but it seems like it doesn't work properly when you change something in the webpack config. I tested it by starting the example in examples/modus-inline. After starting the server, I removed all loaders in the webpack config. Then I pressed rs followed by an enter. This restarted the server, but it still compiled everything properly. I expected it to fail since I removed the loaders.. Please include a repository reproducing your issue, it's impossible to debug this without a repo. Note that webpack-dev-server does very little in regards to HMR, it only takes care of serving the HMR update files and signaling the page about the update. Everything else is done by webpack.. I don't think you can use bypass like that. You want to let it behave as a 301 redirect, but this bypass the path you return in bypass is mapped to a file in the memory file system. So you could e.g. return /index.html there. We use http-proxy-middleware for the proxying, so you could search that documentation for it.. I tried reproducing your issue by proxying to a server on localhost, but it worked fine for me when offline. Could you provide more information? Note that we use http-proxy-middleware for proxying, so if there is an issue, it's probably over there.. Thanks for your bugreport and repo. Would you be interested in making a PR to fix this? It's perhaps useful to add your repo to our examples/ folder (with a few modifications to make it work like the other examples).. Fixed by #813.. webpack 2 will be released next week, so we will not release new features for 1.x. @bdwain, I am planning to merge this after the 2.2 release (2.2 has been published but not yet with the latest tag). So it's fine!. @bdwain, I am planning to merge this after the 2.2 release (2.2 has been published but not yet with the latest tag). So it's fine!. Thanks!. > so is it true that i can only use one rule in proxy config?\nno that is not true. We use the package http-proxy-middleware for proxying, please see its docs. You need to use pathRewrite.. Good idea. Looks like the opn package supports it. PR welcome!. Good idea. Looks like the opn package supports it. PR welcome!. 2.0 is almost ready (expect final release this week), so please do a PR against the master branch. For 1.x we won't accept new features.. 2.0 is almost ready (expect final release this week), so please do a PR against the master branch. For 1.x we won't accept new features.. Nope, sorry. 1.x is critical bugfixes only.. Nope, sorry. 1.x is critical bugfixes only.. Thanks!. Thanks!. To be clear, does the proxy work for pages other than the main page? And what is valetsite.dev running on? I can't reproduce it with your example, it's way too less information..... To be clear, does the proxy work for pages other than the main page? And what is valetsite.dev running on? I can't reproduce it with your example, it's way too less information..... Sorry but I can't help you like this, I don't know anything about Valet and this seems a specific problem to that service. Please ask this on StackOverflow, there are probably people who use Valet there who can help you. If you manage to provide a simple repository reproducing the issue, feel free to open a new issue.. Sorry but I can't help you like this, I don't know anything about Valet and this seems a specific problem to that service. Please ask this on StackOverflow, there are probably people who use Valet there who can help you. If you manage to provide a simple repository reproducing the issue, feel free to open a new issue.. Do you know of an easy fix for this? I'm not going to fix this myself (to be honest, I want to do more fun things in life than fixing IE9 support), but if you want to do a PR for this without adding too much code, that is fine.. Do you know of an easy fix for this? I'm not going to fix this myself (to be honest, I want to do more fun things in life than fixing IE9 support), but if you want to do a PR for this without adding too much code, that is fine.. Okay, but would you like to submit a PR for that?. Okay, but would you like to submit a PR for that?. Answered your question on StackOverflow.. That's awesome, thanks!. That's awesome, thanks!. Does this also happen with webpack --watch?\nThis issue looks a lot like https://github.com/webpack/webpack/issues/2320, but it could also be related to https://github.com/webpack/watchpack/issues/25.. Does this also happen with webpack --watch?\nThis issue looks a lot like https://github.com/webpack/webpack/issues/2320, but it could also be related to https://github.com/webpack/watchpack/issues/25.. I'm basically trying to figure out if this issue should live here, in the dev-server repo, or in the main webpack repo. dev-server does very little (almost nothing even) in regards to compiling things. It only sends the hot updates it gets from webpack to the browser. The script handling this update in the browser also lives in the main webpack repo.\n./node_modules/.bin/webpack --watch --hot should work, you'll not see the output in a browser but you can at least debug if the recompiling happens.\nCan you try what happens without using multiStep: true? There are some known problems with that and webpack 2.. I'm basically trying to figure out if this issue should live here, in the dev-server repo, or in the main webpack repo. dev-server does very little (almost nothing even) in regards to compiling things. It only sends the hot updates it gets from webpack to the browser. The script handling this update in the browser also lives in the main webpack repo.\n./node_modules/.bin/webpack --watch --hot should work, you'll not see the output in a browser but you can at least debug if the recompiling happens.\nCan you try what happens without using multiStep: true? There are some known problems with that and webpack 2.. Okay, I'm going to close this since this isn't related to webpack-dev-server.. Okay, I'm going to close this since this isn't related to webpack-dev-server.. I'm not completely sure about this. Technically an integer is the most correct form, but an integer also works. parseInt() is the way to go, at least for now.. I will need a minimal repository that reproduces the bug for this, since this does work correctly in my testing.. @gfx are you able to provide a repo to reproduce?. I've updated the deps with 9d2925c5c0efe33bea3bdb858e3f59cfad1d87c8, will release a new version soonish.. Thanks for your bugreport. I think the issue is in these lines, where it will use the protocol of the current page instead of the provided one if it is https.\nAfter a git blame I found this was introduced in #470. As mentioned in that PR, insecure websockets don't work from https. That makes sense. I don't get why you wouldn't run the websockets also over the nginx proxy?. > It still seems weird to change the protocol in that way as it then queries a server that may not exist.\nTrue, but since it wouldn't work anyway, we can make an assumption that the user wants to connect to a secure protocol instead. Because of this there is at least a chance that it works.\nGoing to close this since we can't force a browser to connect to an insecure websocket AFAIK, thus we can never fix that in this project.. Anyone wants to test this? Info on how to test a PR.. @STRML, I just tested this in a project of mine with React and JSX. It looks like this when I change a </div> to </span>:\n\nIt didn't need any extra configuration. This was with devtool: \"eval\". I haven't setup HMR though (don't have the time right now to test that out).\n@Restuta, no, webpack-dev-middleware can't communicate to the webpage since it's only middleware. webpack-hot-middleware does offer this functionality btw.\n@karl, thanks for testing!. This is because hot reloading doesn't work automatically unfortunately. There are specific packages to make it work for e.g. React. style-loader already has HMR baked in for CSS. There are plenty of tutorials available on how to make this work.\nIt refreshes the page because if it can't find any function which accepts the hot reload, it falls back to a full page refresh.\nCheckout the official docs, which give some background info.. Okay, but without some handler for your React modules it will never be able to hot reload. Note that if you want to force it to NOT refresh the page, you can use --hot-only.. entry: {\n    main: ['webpack-dev-server/client?http://localhost:8080', './index.js']\n}\nBut note that if you use the CLI, this will be done automatically for you.. Just webpack-dev-server in the CLI if you use v2, for v1 it's webpack-dev-server --inline.. Interesting, that looks like an error in http-proxy-middleware package. That package was also used in v1.16.x, but you perhaps had an older version that didn't contain this bug.\nI see that you also created an issue over there, https://github.com/chimurai/http-proxy-middleware/issues/143.. webpack-dev-server does not do anything related to building, webpack itself does this (you'll see that webpack --watch gives the same behavior). See https://github.com/webpack/webpack/issues/1537 and https://github.com/webpack/webpack/issues/1530 for related tickets.. I meant that the package webpack itself does all the building, webpack-dev-server just gives you a server to present the webpack assets. If you read the issues I mentioned, you'll read that it actually does an incremental build. You don't really give details about how to reproduce your issue, so I can't really help you.... Thanks for the extra info, this looks a lot like this issue; https://github.com/webpack/webpack/issues/309#issuecomment-45703006. I'm going to close this since it's not related to webpack-dev-server.. Fixed! Published as 2.3.0. Can you reproduce this without TypeScript? I didn't manage to reproduce it, but I don't know (and don't want to spend the time) to configure Typescript exactly to reproduce this. Note that if it only occurs with TypeScript, it doesn't belong here.. Try to change modules.loaders to module.rules.. If that doesn't work, checkout https://github.com/webpack/webpack/issues/4184#issuecomment-277127386. You should first start with updating webpack-dev-server to 2.2.1. Could you please ask this on StackOverflow? This is more of a usage question, not a bug report. If you have a reduced test case that shows something is wrong in webpack-dev-server, then it's fine.. This is a problem with npm itself, not with webpack-dev-server.. You should report this on the webpack/webpack repo, webpack-dev-server does nothing in regards to bundling.. Okay. Would you mind submitting a PR?. Thanks for your clear bugreport! Whether your terminal has color support is now calculated automatically, so you could remove that property from your config. If you want to force it, you can pass --color (or --no-color). Another options is to add stats: { colors: true } in devServer, but that shouldn't be necessary.\nThis was not part of any changelog (AFAIK), sorry!. Okay, I'll look into this soon.. The progress option not working via devServer is probably because I followed webpack with that, which also doesn't seem to list it anymore. I wanna keep it that way till I figure out why it is that way in webpack.\nAbout the colors option, it's really weird that it doesn't correctly detect your terminal supporting colors. What exit code do you get when you run supports-color-cli? If that program exits with 0 (color is supported), could it be that you are overriding the stats option? If you want to force it you could add stats: { colors: true } in your devServer.. Sorry, but source maps don't have much to do with webpack-dev-server, unless this issue doesn't occur with webpack -d. Please report this at webpack/webpack. Do note however that there are several known issues with source maps, see for example https://github.com/webpack/webpack/issues/2145.. > Again, Webpack 2.0 is seriously straightforward and this should be too.\nYou don't say what exactly is not straight forward? There were a lot of changes to webpack-dev-server v2 to make it easier to use (config validation like webpack 2 has for one).\nThere are some more planned changes to make errors in your config more prevalent, see #615. For the CLI and Node.js differences there is a ticket, #106.\nNote that there are plans to do a more complete rework, which will probably address your issues partially. The plan is to make dev-server a plugin to webpack. Another plan to make usage easier (if you don't use the CLI), is to remove the part where you need to manually add an entry for the dev-server client script.\nThere are also plans to move the CLI part to a separate repository (along with the webpack CLI part), see webpack-cli for more info. Note that it's not sure yet if we'll do this.\nI'll make tickets about this soon and then close this issue since there is no specific action thing here.. Thanks!. Please ask this on StackOVerflow.. Thanks, I like the separating into more modules, that'll make it easier to write tests for it. Sorry for the delay, it was a very busy week at work.. Do you use Babel? The syntax highlighting in that screenshot comes from Babel.. Oh, hmm that's interesting. In my testings I noticed that Babel takes care of the syntax highlighting, and if it works in your CLI then I'd expect it also works in the browser. The error you are showing though is from eslint-loader I think? Perhaps eslint-loader causes the ANSI thingies to be removed. It could also be webpack-dev-servers fault though. Could you investigate that a bit further? I don't have time in the near future to look into this.. I don't think this is a bug in webpack-dev-server. Apparently eslint-loader passes this eslint warning as an error (I think, haven't actually checked). As you can see here, it only shows that \"Reload prevented\" message when there is an actual compile error.. Sorry but as far as I know this can't be an issue in webpack-dev-server. It works perfectly fine in the console, so I don't see how it not running in VSC is an issue of webpack-dev-server. In Microsoft/vscode#20350 they never said it was an issue in WDS?. I'm going to close this since there is nothing I can do here.... > The file app.js is never touched though.\nWhat do you mean with this? The bundle is built in-memory, as the readme explicitly states.\nIf you understand that, then please post a repository reproducing the issue, I can't help you without more information.... @serheyShmyg, I tried your repository. It's a configuration issue. Your /index.html file tries to use the JS and CSS files from the build/ folder, but webpack-dev-server doesn't put its file there so it uses the existing files from this folder.\nI made a PR for you, fixing your issues. You're lucky I had some time to kill \ud83d\ude04  (https://github.com/serheyShmyg/frontend/pull/1).\n@dennisjac see the above PR for an example. If you still have an issue, please ask on StackOverflow. If you link me to it perhaps I'll take a look.. What do you suggest as a solution? Note that adding webpack as a dependency instead of peerDependency is not something we'd want to do. I'm not sure if this is really webpack-dev-server problem, since it states webpack 2.x as a peer dependency.... @bebraw, also that wouldn't really solve this problem. It would work for this specific error, but since webpack-dev-server relies on webpack v2 being present, it can also use other webpack v2-only functions that can throw an error.. Okay, understandable. But I don't think we can fix anything in dev-server, this would need to be fixed by letting Node.js resolve the module to webpack v2. No idea how that would work exactly though.. @bebraw thanks for that :). I'll take a look soon.. Thanks for your clear bug report.There are several tests for contentBase and historyApiFallback, but apparently none that tests this combination. Would you be willing to do a PR? I can maybe look at it this weekend, but not sure.. I tried to reproduce this, but it does work for me. What's interesting though is that the error message I get in the browser is wrong. It says \"Error occured while trying to proxy to: localhost:8080/api/users\" even though the proxy is set to http://localhost:8000. When I start a server on port 8000 however, it does work correctly.. @steve-taylor what specific issues are you having? I would suggest creating github issues on http-proxy-middleware for those. The author of http-proxy-middleware is very responsive and helpful.. @gjunkie can you make a repository with a minimal version of the backend you have on port 8000? That's the only way to be able to debug this further down.. What are you trying to do? . Thanks!. Stop this please, you're creating empty PR's everywhere.. This was not removed, but it only works when your bundle filename is \"index\", since it uses the filename minus .js. It could also be you're talking about iframe mode, you can enable that with --no-inline.. Please file this issue at https://github.com/webpack/webpack.js.org, the documentation lives there. A PR would be very welcome.. @yuffiy could you sign the CLA?. Thank you!. See the options in https://github.com/chimurai/http-proxy-middleware. Closing since this is a question.. https://webpack.js.org/configuration/dev-server/#devserver-public-cli-only. It's been only 18 hours since your stackoverflow question. I know for sure this isn't a bug in dev-server since it doesn't have anything to do with Babel + I use babel-loader all the time in my projects.. webpack-dev-server doesn't do anything with loaders, it passes everything to webpack itself. So I can't fix that in here. Also note that I would recommend against installing webpack locally but installing webpack-dev-server globally. That's just asking for trouble.. Please ask this on StackOverflow, this is not a bug in webpack-dev-server.. Note that webpack-dev-server does nothing in regards to compiling your code. It passes everything through to webpack itself, the only two changes being that it enables watch mode and uses an in-memory filesystem instead of the real filesystem.\nWe'll need to pinpoint the issue a bit more. If you use webpack --watch, do you also get this behavior? And are your dev and production configs exactly the same? Often people have a different dev config than prod and that can cause issues. After you've checked these things, can you make a repo reproducing the issue?\nI'm going on vacation tomorrow for one week btw.. I debugged your repo a little. Why are you using webpack.ExternalsPlugin for lodash? If I remove that plugin, it works. See also https://github.com/webpack/webpack/issues/2069 for a bit more info on Electron + webpack.ExternalsPlugin. I don't know specifically why lodash doesn't work when using it with webpack-dev-server in this case. But when using the electron module like this:\n```js\nvar electron = require('electron');\nconsole.log('electron', electron);\n```\nand with\njs\nnew webpack.ExternalsPlugin('commonjs', [\n  'electron',\n])\nIt does work. What module are you trying to load that doesn't work?. Thanks!. Thanks!. Can you try adding publicPath: '/' to your base object?\nIf that isn't it I'll need a repository reproducing your issue. It can take a while though before I can help you since I'm going on vacation tomorrow. If you want a quick answer perhaps StackOverflow is a better place to go to (HMR is not broken in WDS 2.4.1).. Oh it's output: { publicPath: '/' }.. > My hunch is it's change in express tho, as I ran into the same thing suddenly writing a small express server to serve my webpack files just the other idea.\nThat would be interesting. Could you elaborate / find a related issue on that? AFAIK the Express version hasn't changed in WDS v1 and v2.. @louisscruz I tried your config, but for me it seems to be working fine. You don't mention exactly what you do though, so it's hard to reproduce.\nThe only way to properly debug this is to have someone make a test repository reproducing the issue.. Thanks for the heads-up. The issues should indeed be fixed now, so I removed the warning.. Please provide a repository reproducing the issue. . I'm closing this issue because of inactivity. Feel free to comment, and we can always re-open it again.. If you add both, it will work. So modules: ['node_modules', '/absolute/node_modules']. webpack-dev-server needs the first item to be present because it compiles some modules in your bundle.. Please ensure you are on the latest version of webpack dev server. Something like this was fixed in the latest version. . Yes. Can you reproduce it using this example (clone the repo, npm i and read the instructions in the README of the example)?. @ludovicofischer do you also have the issue when using enforce: \"pre\" (see eslint-loader readme)?. I can't reproduce your issue. After copying the files and installing the deps, I get the error Error:output.pathneeds to be an absolute path or/., and after fixing that it does work. Please ask this on StackOverflow if you're still having an issue, since this is a configuration issue.. Thanks!. Your first proposal does make sense, but I'd prefer to not copy such a file in our repo. Of course we could also directly require that file, but that can be tricky.\nAnother way could perhaps be to make an issue/PR to http-proxy-middleware, to add such an option in there. Not sure if that makes sense, but could be interesting to see how he thinks about it.. Thanks! Tested this by running webpack-dev-server --content-base first --content-base second.. import Webpack from 'webpack-dev-server';\nimport WebpackDevServer from 'webpack-dev-server';\nThe first one should be 'webpack'. Awesome! Thank you very much!. Thanks!. Thanks again!!. Could you please ask this on StackOverflow? This is a usage question. If you post the link here I'll see if I can maybe help you out this weekend.. > How to to add support for 'POST, PUT, DELETE' so that the local JSON can be served directly?\nDo you mean instead of using a mock server that can handle these requests?. Why can't you add the methods to \"Server 2\" then? It's not webpack-dev-server's job to fix that. We use http-proxy-middleware for proxying, perhaps that package provides a way to fix this. If not, you could maybe fill a feature request there.. Thanks. Nobody from #544 has tested this yet, but I want to cut a new release and after testing this a bit it doesn't seem to break anything at least.. Awesome!! Thanks, I'll release a new version today.. This is published in version 2.4.2.. This is published in version 2.4.2.. host: 0.0.0.0 -> host: '0.0.0.0'. If that was not the only issue, please ask on StackOverflow. This is not a bug in webpack-dev-server.. Thanks, but this is a known issue and also documented. Other text editors also have this, but so far there hasn't been any workaround.. Thanks, but this is a known issue and also documented. Other text editors also have this, but so far there hasn't been any workaround.. Please file this issue in the webpack/webpack repo, webpack-dev-server doesn't generate these this.. A callback that fires when compilation is finished is available as compiler.plugin('done', cb).\nI happen to have made a test suite runner like you have too, this is some code out of mine:\n```js\ncompiler.plugin('done', (stats) => {\n    stats = stats.toJson();\nif (stats.errors && stats.errors.length > 0) {\n    // show errors\n    return;\n}\n// compilation success\n\n});\n```\nThe .listen callback is by design, there are many cases where you immediately want to do something after the server has started, like show the URL.. Please upgrade to the latest version, this should fix your issue.. Please upgrade to the latest version, this should fix your issue.. This is not possible. We can't provide a valid certificate for development. Chrome (and some other browsers perhaps) happen to allow all certificates from localhost.. This is not possible. We can't provide a valid certificate for development. Chrome (and some other browsers perhaps) happen to allow all certificates from localhost.. This is a usage error, please ask on stackoverflow, you'll get better help there.. This is a usage error, please ask on stackoverflow, you'll get better help there.. Does updating to 2.4.2 fix your issue? If not this might be a dupe of #848.. Does updating to 2.4.2 fix your issue? If not this might be a dupe of #848.. Cool! Hopefully I have time next week to review it.. Cool! Hopefully I have time next week to review it.. Cool! Hopefully I have time next week to review it.. Have you read the error? webpack-dev-server can't work with a output.path that doesn't start with a /, as it says.. Have you read the error? webpack-dev-server can't work with a output.path that doesn't start with a /, as it says.. Have you read the error? webpack-dev-server can't work with a output.path that doesn't start with a /, as it says.. I'm going to close this since this is a usage question, please ask on StackOverflow if you need more info.. I'm going to close this since this is a usage question, please ask on StackOverflow if you need more info.. I'm going to close this since this is a usage question, please ask on StackOverflow if you need more info.. Just a note that I haven't forgotten this, I'm very busy these days but I hope I have some time in the weekend to review.. Please post support questions on StackOverflow and with more information.. This is not an issue in webpack-dev-server. Please post this on StackOverflow.. Fixed in webpack-dev-server@2.6.1.. I released webpack-dev-server@2.6.0. @bdwain you seem to imply I am the only one who can release, but note that there are 4 more people who have npm publish rights.. Sorry everyone, fixed in webpack-dev-server@2.6.1. Ouch, whoops sorry everyone.. Fixed in webpack-dev-server@2.6.1. Does this also happen in the previous version?. Looks to have been fixed a while ago, so closing.. I updated WDM to 2.0.0 in the latest beta, so closing this. But feel free to re-open if I missed something.. Please test the latest beta, webpack-dev-server@3.0.0-beta.1. Also be sure to read the changelog.. Please test the latest beta, webpack-dev-server@3.0.0-beta.1. Also be sure to read the changelog.. Please test the latest beta, webpack-dev-server@3.0.0-beta.1. Also be sure to read the changelog.. So for the Node target it shouldn't auto-add the webpack/hot scripts? Seems fair enough I think. However this could potentially be a breaking change to some. Are there any use cases where you would need it to work like before?. Yes, but I was wondering if there are valid use cases where you do need these webpack/hot scripts in a node environment. If there are none, this isn't really a breaking change. If there are, it might be a breaking change.. Okay thanks for finding out. Could you make a PR and add a test for this?. There is a partial npm outage: https://status.npmjs.org/. Published webpack-dev-server@2.11.1 with the fix, thanks again to @yyx990803!. Closing because #1273 fixed the same issue.. Published webpack-dev-server@2.11.1 with the fix.. Published webpack-dev-server@2.11.1 with the fix.. Our issue template states that questions should be asked on StackOverflow.. You can use environment variables for this use-case.. Our issue template states that questions should be asked on StackOverflow.. Sorry, I have no idea. Our issue template states that questions should be asked on StackOverflow.. Please test the latest beta, webpack-dev-server@3.0.0-beta.1. Also be sure to read the changelog.. It intentionally requires webpack-cli, yes.. @epeli do you also get this error when you are using webpack instead of webpack-dev-server?. @epeli see #1308 for that error.\nI'm going to close this since the latest beta works with webpack v4 now. Let's create separate issues for new problems.. Please test the latest beta, webpack-dev-server@3.0.0-beta.1. Also be sure to read the changelog.. This is not webpack-dev-servers fault. All bundling logic is in the https://github.com/webpack/webpack repository. Be sure to try out the latest webpack v4 beta, that should be a lot faster.. I published webpack-dev-server@3.0.1-beta.0 with experimental support for MultiCompiler. Please test it and report if it works correctly. I would like at least 2-3 reports because I have never used MultiCompiler myself \ud83d\ude04.\nThanks for the hint @janhommes.. Thanks for testing everyone! I will publish the release tonight.. webpack-dev-server@3.1.0 has been published with the fix.. Fixed in latest beta.. Please test the latest beta, webpack-dev-server@3.0.0-beta.1. Also be sure to read the changelog.. Are you interesting in submitting a PR?. Thanks for your report! Interesting, this does work when you use the API but not with the CLI. The fix should be made somewhere in bin/webpack-dev-server.js. Somewhere there it seems to trigger webpack's options schema validation without the defaults being applied beforehand.\nA PR is very welcome!. Fixed in webpack-dev-server@3.0.0-beta.2, thanks again @rynclark!. Thanks for your PR! Could you make it against webpack-4 branch? next is abandoned (see explanation).\nI'll rename the next branch to make this more clear in the future.. Awesome, thanks!!. Yes it is in beta.2 already :).. Yeah that might be a good idea. Are you interested in making a PR?. Hey I'm working on this right now and looking through your issue and PR, and I just want to say: THANK YOU for looking into this so extensively and making an example repo. I'm going through it to first reproduce your bug and then test your fix.. Yeah there are no unit tests for the client code (yet). If you want to help setup tests for the client code that would be welcome though, I see two ways to tackle this:\n\nSwitch to the Jest test runner and run the client code through its fake DOM.\nLet the tests start a Puppeteer (headless Chrome) instance, connect to it and run the client code tests in the headless browser.. Looking into this PR right now (about to release WDS v3). I don't know what is going on with Travis but I'm going to merge this since I confirmed it works locally.\n\nThanks again @JayAndCatchFire!. Thanks for this fine PR!!. Thanks for filing this bug report. Do note that this is a bug in webpack-cli. I honestly didn't even know that this was a feature \ud83d\ude05. I will discuss this soon with the people working on webpack-cli.. No, it has existed only in the next branch for a while as part of a huge refactor (never in a release), but that refactor wasn't finished.. Thanks for your PR. This change should have been in webpack-dev-server v3 which I released this morning. Which makes this kinda difficult to handle since this change makes so much sense but it might be confusing to immediately release a next major version.\nJust thinking in some solutions, perhaps we can detect if mode is used and only then apply this change.. webpack seems to do the same when you don't set mode:\nWARNING in configuration\nThe 'mode' option has not been set. Set 'mode' option to 'development' or 'production' to enable defaults for this environment.. Thanks, I will try to look at it this week. This change does have some consequences that I need to look into.. Sorry don't have the time for this yet. I am a bit scared of making this change without releasing a major version so I want to understand the consequences fully first.. @scottsword this will be fixed in next release (fixed in #1329). @scottsword this will be fixed in next release (fixed in #1329). @sergebat, webpack-dev-server only passes the lazy option to webpack-dev-middleware; so I think the issue is in that package.. @sergebat, webpack-dev-server only passes the lazy option to webpack-dev-middleware; so I think the issue is in that package.. Thanks for figuring this out. . Thanks for figuring this out. . Thanks for filing this issue. I fixed the warnings in c32cfa8c01c89a6f35e971c3330d4fe5fb49df5a, however webpack-dev-middleware is not updated to the new API's yet.\nSee also https://github.com/webpack/webpack-dev-middleware/pull/264. Thanks for filing this issue. I fixed the warnings in c32cfa8c01c89a6f35e971c3330d4fe5fb49df5a, however webpack-dev-middleware is not updated to the new API's yet.\nSee also https://github.com/webpack/webpack-dev-middleware/pull/264. Published webpack-dev-server@3.1.1 with the fix.. Published webpack-dev-server@3.1.1 with the fix.. @osenvosem I cannot reproduce this. Are you sure no other plugin is the cause of this error?. @osenvosem I cannot reproduce this. Are you sure no other plugin is the cause of this error?. How exactly would you propose that it works then? As I see it, this just means you need to change the publicPath based on whether you are building for development and production.. How exactly would you propose that it works then? As I see it, this just means you need to change the publicPath based on whether you are building for development and production.. You can configure this already in great detail, see the docs: https://webpack.js.org/configuration/dev-server/#devserver-historyapifallback. You can configure this already in great detail, see the docs: https://webpack.js.org/configuration/dev-server/#devserver-historyapifallback. webpack-dev-server doesn't do anything related to generating code, so I'm pretty sure this is a bug in webpack itself.. Thanks for the PR and your clear explanation of what went wrong :).. Wasn't the plan, but I can do one tomorrow earliest.. html-webpack-plugin v3.0.0 stable has been released, please try that first. Also I don't think this has anything to do with webpack-dev-server.. The error says the port 3030 is already in use. Please make sure nothing runs anymore on that port. In some cases there can be a zombie process running on that port. You can use the command lsof to find what program runs on a port.. webpack-dev-server 3.x is only compatible with webpack 4.x, as the peer dependencies already warn you about.. dev-server doesn't generate the hot reloading code, so this bug cannot be fixed here. webpack itself inserts the \"hot\" code, or perhaps react-hot-loader.. Published webpack-dev-server@3.1.1 with the fix.. I don't have time to really debug this, and it likely isn't webpack-dev-server's fault (it basically only passes through HMR from webpack), so if you have time please investigate further and isolate the error.. I can't fix this in webpack-dev-server, nearly everything regarding to HMR is done in webpack itself, WDS only serves it through a server.. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template, or open a new issue.. Our issue template states that questions should be asked on StackOverflow.. It looks like this issue is related to webpack and/or webpack-cli, not webpack-dev-server, so I'm closing this. If you believe this is an issue in WDS please provide a test repository, because I cannot reproduce this.. Our issue template states that questions should be asked on StackOverflow.. Fix released in webpack-dev-server@3.1.2. Thanks @kenotron!. Note that this broke HMR, which was fixed in https://github.com/webpack/webpack-dev-server/commit/e1b263a99d510f31e2ff418a0725352ebb8fb9ea.. @kenotron I am curious if the above fix has any negative performance implications? If so we could perhaps only enable the hash option when HMR is used.. Thanks for your clear report. It should be fixed with webpack-dev-server@3.1.3.. This was fixed in v3.1.3.. This was fixed in v3.1.3.. As you say, in the latest version it works, there is no point in using an old beta of webpack.. As you say, in the latest version it works, there is no point in using an old beta of webpack.. Please try to upgrade to the latest webpack and webpack-cli versions.. Sorry for the delay.. I don't understand this change. Why would you need files in the bin/ dir? See for an example to use dev-server in JS: https://github.com/webpack/webpack-dev-server/blob/master/examples/api/simple/server.js. Thanks for your help @teh0xqb. I'm closing this since this doesn't seem to have anything to do with WDS.. This makes sense, thanks! Don't have time to do a release now, but will put it on my todo list.. If watchpack is also migrated to use nsfw, this will be merged. I don't want to use two different file watchers together in webpack.. Thanks! Will do a release soon.. Thanks!. Published in webpack-dev-server@3.1.5. I initially added all the examples way back when there was only one example in the repository, for three reasons:\n\nShowing what is possible with WDS\nHelping people with complete examples to give them something to copy/paste\nMaking maintaining WDS easier because many use-cases could be tested by just going to an example\n\nIf the tests were very good (they are not, partially my fault), I'd agree to remove maybe.. The point of separating the CLI in a webpack-cli package is mostly to make the original webpack package smaller. In dev-server the webpack-cli package is only required if you use the webpack-dev-server CLI command. If you don't, you'll never need it.\nAnyway, I think the real bug here is that the code I mentioned doesn't exit the process fully.. Yep see #883.. Good point, this is fixed now.\n. On a normal open ok comes from the server. However, when the socket gets disconnected and reconnected again, it does not fire an ok. So the only way I found to work around this is to call the ok function when the socket connection is opened.\n. Good point, fixed that now.\n. Ah good point, this could also be the reason that a re-connect doesn't emit an ok.\n. Ah, I had a bug in lib/Server.js. I have deleted these lines now :).\n. Wow, that was a pretty big oversight of me. Pretty ashamed I didn't notice that myself. Anyway, it should be fixed now.\n. The uri var is also used if options.open is given, and that would break. I think doing console.log(\" \" + uri) would make a lot more sense.\n. Why the check for http here (not saying it is wrong per se)? If it has a valid reason, could you add a comment above? And also please give an example for when the hostname does not exist in the comments.\nWe get many PR's around the detection of this url, so comments will help other people here.\n. This needs to be in your global .gitignore, it is not something specific to this repo. Please remove.\n. Could you add that to the code as a comment though? This is not immediately clear, and since there are no tests yet, it's easy for this to get accidentally removed.\n. Agree. So would you say remove this log completely, or make sure it doesn't get repeated all the time?\n. So you mean instead of using the existing quiet option to determine the log level, introduce a separate option?\n. quiet and noInfo are only used in webpack-dev-middleware. If noInfo: true, the console will only show user errors. If quiet: true, the console won't show anything.\nMaybe it's too big of a hack to reuse this for client errors though. I can imagine most people use noInfo or quiet because they can also see it in their browser.\nIf we'd make a separate option, I would prefer using a \"log level\". Maybe clientLogLevel, which takes null (no logs), \"error\", \"warn\", \"info\" (default)?\n. Good point. We could exclude the compilation errors from the log level, so far I think no-one has complained about that.\nI'll update this PR later today.\n. Can you change webpack- to client- here (and the other scripts)? webpack doesn't tell me anything in this case.\n. use npm run -s (silent) here to prevent log spam.\n. missing newline at end of file\n. missing newline at end of file\n. missing newline at end of file\n. Can you move historyApiFallback to the line under it? That would make clear that express.static is passed as second param to app.use\n. options.contentBase || process.cwd() is also used in the contentBase method. Can you put this in a variable, so both use the same variable to get the content base?\n. Could you make this \"file.txt\", so the browser doesn't want to download the file if you click it?\n. unexisted -> unexisting\n. existed -> existing\n. Ohh sorry, you can leave it like that then.\n. Yeah good idea.\n. Why would this need a new option, instead of it being in the https option? It's not used that much, so I would prefer to keep it in the https object.\n. Could you provide a working example here? The examples are also meant to quickly test if something still works.\n. I explained it a bit weird, but I meant that options.pfx should work the same and options.cert. If you'd do --cert=mycert.crt --pfx=mypfxthingy, the cert option will be ignored.\n. Can you remove --open here since it opens the wrong URL in this case?\n. Using tabs and spaces here.\n. Can you remove this comment or make it more descriptive? Atm this tells me nothing more then I already know from looking at the code.\nIf you make it more descriptive, be sure to use // instead.\n. Can you make this a separate variable instead? It's hackish to override the variable in this case since in query it's used for something else.\n. Same as above.\n. There seems to be an error here. If I set the port via options, after this line it results in options.port being undefined.\n. Okay, tested that and it appears to work in all cases :).\n. Perhaps we could use Object.assign instead of pulling in the whole lodash dependency? I don't want to use lodash for this one use.. Could you document how to trigger a warning here? This text only tells me how to trigger an error. Would be handy for testing, since I can't come up with something that triggers a warning out the top of my head right now :).. Jup, in webpack 1 that triggered a warning but in webpack 2 not anymore :'). Looking at webpack's source code on warnings.push, I found that it should trigger a warning when incorrectly cased modules are used. So perhaps add a file caseSensitive.js and import it with casesensitive.js?. Yes, but isn't the purpose of the CaseSensitiveModulesWarning plugin to give a warning for that, exactly because it works on macOS but not on Linux/Windows? (I seriously don't know btw, I only looked at the code very quickly \ud83d\ude04 ). Array spread doesn't seem to work in Node v4.. ",
    "reduxdj": "This definitely seems like an awful bug... no error when there's no output, why is webpack such a hairpuller?. ",
    "jcrben": "I know this was closed 2014, but it seems that people (including myself) still run into similar issues. Maybe errors or documentation could be improved. Webpack should by default put the user on the path to ensuring that webpack-dev-server and webpack builds are in sync.. Someone at https://github.com/webpack-contrib/grunt-webpack/issues/66 pointed to __webpack_public_path__ and I found that by setting that, the fetch of the *-hot-update.json was sent to the proper place... haven't found the official documentation for it tho.. fyi, if you're using hotOnly it will use the only-dev-server.js and the error only gets logged out as of webpack 3.0 (see onErrored code).. Using webpack-dev-server 2.5 and webpack 2.6.1, \nconfig.devServer = {\n        hot: false,\n        inline: false,\n    }\nworked for me.. I recommend closing this. Maybe someone should be throwing better errors, but it doesn't seem like it's this library.. It doesn't seem like there's enough information here to really help you.\nYou're using https://github.com/react-boilerplate/react-boilerplate - why didn't you report it there?\nIf more information can't be provided, I recommend closing this.. @Anthony59273 ran into this as well at work - I ended up passing in a higher memory limit to node for now and explained on Stack Overflow how to do with the newish environment variable options https://stackoverflow.com/a/48895989/4200039. @Anthony59273 ran into this as well at work - I ended up passing in a higher memory limit to node for now and explained on Stack Overflow how to do with the newish environment variable options https://stackoverflow.com/a/48895989/4200039. ",
    "dimwell-git": "Still in 2017 I had same issues.\nIf people still write about an issues, then probably the issues does exist and a proper solution is needed...\nTemporary solution: \n1) run both:  webpack-dev-server and webpack with --watch\nOR\n2) check comment: daslicht commented on Nov 14, 2016 which advice -> \n    output: {\n        filename: \"./dist/bundle.js\",\n    },. ",
    "charusat09": "This is very poor and much challenging for a new developer. I just lost much time for resolving this issue. I tried every solution available on the web and then I found it's core bug of webpack-dev-server. Needs to be fixed or mention in documentation until you resolve this. \nrun both: webpack-dev-server and webpack with --watch works for me. Thanks @dimwell-git . ",
    "nukeop": "Yep, I'm also having issues with this.\nI managed to get webpack-dev-server to output files into my static directory but hmr request files with different names and runs into 404s.. Installing a huge third party dependency is a bad solution to a problem with functionality that should technically already be working.. I think that's only coincidental, I got it working some time ago without this plugin.. What if you want to output more than one file?. ",
    "d4rekanguok": "The answer was given twice above, if your bundle file is output to ./bin and you point your html to that, in your webpack.config.js set publicPath to /bin/:\noutput: {\n    // the URL of your output.path from the view of the HTML page.\n    publicPath: '/bin/'\n}\nMore at the doc: https://webpack.js.org/configuration/output/#output-publicpath. ",
    "golddranks": "I was suffering of the same problem, and found the earlier answers \u2013 although correct \u2013 confusing.\nHere's how I resolved it: (Tried to write from the viewpoint of the things I was confused about.)\nFirst of all, there seems to be two settings for publicPath: output.publicPath and devServer.publicPath. Both should be set to the path that is seen in the BROWSER, after the domain name, so no file system paths. Also, they must end with /. Confusingly, \"public\" there doesn't mean a public path in the sense that the server exposes static files publicly \u2013 that's the contentBase setting. If it helps someone, please think of publicPath as a bundleRoute instead.\noutput.path = filesystem path where the bundled stuff is saved\noutput.publicPath = URL path where the stuff are expected to reside when online (the path after the domain name)\ndevServer.contentBase = filesystem path where the static content is served from\ndevServer.publicPath = URL route where the bundled stuff is served from. I can confirm this; getting the exact same error.\nUsing:\nwebpack v3.1.0\nwebpack-dev-server v2.5.1. ",
    "pmunin": "I spent half a day for that problem and I finally figured it all out.  :confetti_ball: :fireworks:  So if it still does not work for you, here we go.\nBasically all you need to do if it does not work is to look carefully the output of your webpack-dev-server, especially the colored words. E.g. in my case it was the following (colored words are bold):\n\nExecuting task: npm run webpack-dev-server <\nwebpack-dev-server c:\\Users\\work\\Documents\\MyProject\nwebpack-dev-server --config .webpack/config.js\nProject is running at http://localhost:8080/\nwebpack output is served from /dist/\nts-loader: Using typescript@2.5.0 and c:\\Users\\work\\Documents\\MyProject\\tsconfig.json\nwebpack: wait until bundle finished: /dist/MyEntryModule.bundle.js\nHash: d4f3d16c19e027f46c7f\nVersion: webpack 3.5.5\nTime: 4842ms\n                Asset    Size  Chunks                    Chunk Names\nMyEntryModule.bundle.js  418 kB       0  [emitted]  [big]  MyEntryModule\n   [6] ./src/_refs.ts 3.94 kB {0} [built]\n.......\n\nSo what I see here:\n1) Project is running at http://localhost:8080/\n2) webpack output is served from /dist/\n3) the name of compiled bundle: MyEntryModule.bundle.js  418 kB\nSo if you just concatenate those (trimming trailing slash from component #1), you will get CASE SENSITIVE url that will be successfully served by webpack-dev-server:\nhttp://localhost:8080/dist/MyEntryModule.bundle.js. However it will not write it to disk, but will serve it as a in-memory virtual file system, overriding your physical file system.\nToo many config parameters may impact the eventual URL and this is what causes so much confusion. The simplest config would be something like this:\n```\n    entry: { MyEntryModule: \"./src/index.ts\" },\n    output: {\n        filename: \"[name].bundle.js\", //<- defines URL component #3 above\n        //path: path.resolve(\"dist\"), //<- this defines the path of output if you do regular build, but completely IGNORED by devserver's url, so it does not have to be here to make devserver work\n        //publicPath:\"/dist/\", //<-it can be specified either here or in devServer, which overrides it anyways\n   },\n   devServer:{\n        publicPath:\"/dist/\"  //<- this defines URL component #2 above\n   }\n```\nBig part of confusion that webpack-dev-server serves case sensitive URLs, so if your HTML's script tag asks for /dist/mymodule.bundle.js, and in your webpack.config your entry name is MyModule, then your browser will get 404.. ",
    "BenSpace48": "Still seems to be an issue in 2018.\nAll my files are currently in the root directory and the server does not update so for me it is not related to output.publicPath or devServer.publicPath.\nThe only fix that works for me is to run webpack --watch and webpack-dev-server at the same time.. ",
    "m1520n": "https://stackoverflow.com/questions/36150456/webpack-dev-server-not-bundling-even-after-showing-bundle-valid-message this posts accepted anwer solved it for me.. ",
    "windmaomao": "why not just webpack --watch and then do whatever server you are doing. It's just too much from the very beginning. . ",
    "dgroh": "I would suggest a much simpler approach:\nwebpack --watch with browserSync if you want the browser to reload after file changes. is it's not working tho...and browserSync has been a common approach for a long time, if you used to work with gulp or grunt that was the way to sync the browser. I got it to work by the way, is important to use the HtmlWebpackPlugin, that what I was missing\nmodule.exports = merge(baseConfig, {\n  devtool: \"inline-source-map\",\n  output: {\n    path: path.resolve(__dirname, \"../dist\"),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ template: \"index.html\" })\n  ]\n});. ",
    "davidshare": "Hi, I am having issues with setting up webpack. Everything seems to be okay, but the bundle file is not being generated, neither is the HTML file. Here is my webpack.config.js. I'm using webpack 4\n`\nconst path = require('path');\nconst webpack = require('webpack');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst port = process.env.PORT || 3000;\nconst paths = {\n    DIST: path.resolve(__dirname, 'dist'),\n    SRC: path.resolve(__dirname, 'src'),\n    JS: path.resolve(__dirname, 'src/js')\n}\nconst htmlPlugin = new HtmlWebpackPlugin({\n    template: \"./src/index.html\",\n    filename: \"./index.html\"\n});\nmodule.exports = {\n    mode: 'development',\n    entry: path.join(paths.JS, 'index.js'),\n    output: {\n        path: paths.DIST,\n        filename: 'app.bundle.js'\n    },\nmodule:{\n    rules: [\n        {\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            use: {\n                loader: \"babel-loader\"\n            }\n        },\n\n        {\n            test: /\\.css$/,\n            use: [\n                {\n                    loader: \"style-loader\"\n                },\n\n                {\n                    loader: \"css-loader\",\n                    options:{\n                        modules: true,\n                        importLoaders: 1,\n                        localIndentName: \"[name]_[local]_[hash:base64]\",\n                        sourceMap: true,\n                        minimize: true,\n                        camelCase:true\n                    }\n                }\n\n            ]\n        }\n    ]\n},\n\nplugins: [htmlPlugin],\n\ndevServer: {\n    publicPath: paths.DIST,\n    host: 'localhost',\n    port: port,\n    historyApiFallback: true,\n    open:true,\n    hot: true\n}\n\n};\n`. ",
    "disler": "@golddranks This explanation helped a ton thank you. ",
    "daniilc-magnumwm": "It is quite weird, but all I have to do is to change the the output in the following way.\nI have just commented the path  and publicPath lines and specified the whole path in a filename\noutput: {\n    //path: path.resolve(__dirname, './dist'),\n    //publicPath: './dist/',\n    filename: './dist/build.js'\n  },\nnpm -v\n6.1.0\nnode -v\nv10.5.0\n. ",
    "ismail2009": "``` \nconst path = require('path');\nmodule.exports = {\n  entry: './src/views/index.js',\n  output: {\n    path: path.join(__dirname, 'public/'),\n    filename: 'bundle.js',\n    publicPath: '/public/'\n  },\n  resolve: {\n    extensions: ['.js', '.jsx', '.json']\n  },\n  stats: {\n    colors: true,\n    reasons: true,\n    chunks: true\n  },\n  module: {\n    rules: [{\n      test: /.js$/,\n      exclude: /node_modules/,\n      use: 'babel-loader'\n    }, {\n      test: /.css$/,\n      use: ['style-loader', 'css-loader']\n    }, {\n      test: /.(png|jpg|gif|ico)$/,\n      use: [{\n        loader: 'file-loader',\n        options: {\n          name: '[path][name].[ext]',\n          context: path.join(__dirname, 'src/views/')\n        }\n      }]\n    }]\n  },\n  devtool: 'cheap-eval-source-map',\n  devServer: { \n    publicPath: '/public/',\n    historyApiFallback: true\n   }\n};\n\n\"dev:start\": \"webpack-dev-server --mode development \" \n```\nif I remove the bundle and start webpack-dev-server the bundle doesn't appear but the compiler work correctly and the server work without bundle How is that and why I can't find the bundle but every thing is work \n```\nwebpack-dev-server --mode development \n\u2139 \uff62wds\uff63: Project is running at http://localhost:8080/\n\u2139 \uff62wds\uff63: webpack output is served from /public/\n\u2139 \uff62wds\uff63: 404s will fallback to /index.html\n\u2139 \uff62wdm\uff63: Hash: 8de3f883d29c1e0cb498\nVersion: webpack 4.16.1\nTime: 2665ms\nBuilt at: 07/24/2018 8:38:14 PM\n             Asset      Size  Chunks             Chunk Names\nassets/Portgas.jpg   122 KiB          [emitted]\n         bundle.js  3.22 MiB    main  [emitted]  main\nEntrypoint main = bundle.js\n[./node_modules/loglevel/lib/loglevel.js] 7.68 KiB {main} [built]\n[./node_modules/react-dom/index.js] 1.33 KiB {main} [built]\n[./node_modules/react/index.js] 190 bytes {main} [built]\n[./node_modules/strip-ansi/index.js] 161 bytes {main} [built]\n[./node_modules/url/url.js] 22.8 KiB {main} [built]\n[./node_modules/webpack-dev-server/client/index.js?http://localhost:8080] (webpack)-dev-server/client?http://localhost:8080 7.78 KiB {main} [built]\n[./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.58 KiB {main} [built]\n[./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.05 KiB {main} [built]\n[./node_modules/webpack/hot sync ^.\\/log$] (webpack)/hot sync nonrecursive ^.\\/log$ 170 bytes {main} [built]\n[./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 75 bytes {main} [built]\n[./src/views/components/App/index.js] 911 bytes {main} [built]\n[./src/views/components/Home/index.js] 324 bytes {main} [built]\n[0] multi (webpack)-dev-server/client?http://localhost:8080 ./src/views/index.js 40 bytes {main} [built]\n[./src/views/index.css] 1.06 KiB {main} [built]\n[./src/views/index.js] 203 bytes {main} [built]\n    + 119 hidden modules\n\u2139 \uff62wdm\uff63: Compiled successfully.\n```. ",
    "mzgoddard": "This will also help in using other web tech like progress events for showing a progress bar if you want to load a large binary file since the static middleware sends a Content-Length header.\n. To expand on what I mean by http streaming, I'm referring to media content supported by video and audio tags. I know at least Chrome must make Range requests to seek to a point in a video or audio file presented through those tags. That also for it to loop it has to seek to the beginning of the file and will only do that with a Range request.\n. ",
    "gatorcse": "np. you on windows?\n. ",
    "zeen": "Thanks for the responsiveness, it's almost like being in a chatroom :laughing: \n. ",
    "Sawtaytoes": "I just started getting this error after an update yesterday.\nDid something change recently? If I don't put hot: true in the server config, I don't get hotloading even w/ the plugin is in the compiler config.\n. I just started getting this error after an update yesterday.\nDid something change recently? If I don't put hot: true in the server config, I don't get hotloading even w/ the plugin is in the compiler config.\n. ",
    "c089": "Also, when setting it to a URL, e.g. http://localhost:8080/ webpack-dev-server will serve URLs like http://localhost:8080/http://localhost:8080/foo.bundle.js (note the URL in the URL).\nI thought I could use the publicPath option on the dev server to make it work with an external server: My HTML is served by a web server on port 4040 and webpack is serving the bundles on 8080. Now the HTML will load the entry bundle from 8080 but then webpack will try to load the other chunks from the first server (and relative to the current page), unless I set the publicPath option. So I actually think that the webpackDevServer should default to set it to http://localhost:8080/ (or whatever port it's running on) and definitely should not use it to prepend to it's own paths when it's a URL, right?\n. Also, when setting it to a URL, e.g. http://localhost:8080/ webpack-dev-server will serve URLs like http://localhost:8080/http://localhost:8080/foo.bundle.js (note the URL in the URL).\nI thought I could use the publicPath option on the dev server to make it work with an external server: My HTML is served by a web server on port 4040 and webpack is serving the bundles on 8080. Now the HTML will load the entry bundle from 8080 but then webpack will try to load the other chunks from the first server (and relative to the current page), unless I set the publicPath option. So I actually think that the webpackDevServer should default to set it to http://localhost:8080/ (or whatever port it's running on) and definitely should not use it to prepend to it's own paths when it's a URL, right?\n. so @jhnns actually it is taken from the webpack.config.js, it's just an override and I think it could be useful :)\nI'll provide a fix for not prepending a / to a full URL. Would you people agree that for webpack-dev-server it would make sense to default to http://localhost:[configuredPort]?\n. so @jhnns actually it is taken from the webpack.config.js, it's just an override and I think it could be useful :)\nI'll provide a fix for not prepending a / to a full URL. Would you people agree that for webpack-dev-server it would make sense to default to http://localhost:[configuredPort]?\n. Reference #39\n. Reference #39\n. I'd also love to provide a test for this but... no test infrastructure in place and the bin/ file would require some refactoring first to be unit-testable. So, I tested this... manually. A bit. Hope it's okay.\n. I'd also love to provide a test for this but... no test infrastructure in place and the bin/ file would require some refactoring first to be unit-testable. So, I tested this... manually. A bit. Hope it's okay.\n. I'd also love to provide a test for this but... no test infrastructure in place and the bin/ file would require some refactoring first to be unit-testable. So, I tested this... manually. A bit. Hope it's okay.\n. @markmarijnissen sounds reasonable - maybe we should drop preprending a / alltogether here? I wasn't sure of the original authors intention so I didn't think of that... \n. @markmarijnissen sounds reasonable - maybe we should drop preprending a / alltogether here? I wasn't sure of the original authors intention so I didn't think of that... \n. ",
    "architectcodes": "+1 for this feature\n. I have the same issue. I've only just started using webpack, so I can't provide many details.\nI'm not using browser-sync.\n. ",
    "Ciantic": "Is this possible or not?\n. ",
    "airwin": "+1\n. I think you can try this in your task script (gulpfile?).\ncompiler.plugin('compile', someFunc)\n. Hey, can you share ur solution? I meet the similar problem too.\n. Thanks.~\n. ",
    "jaredleechn": "\ud83d\udc4f\n. ",
    "ghost": "Did anyone ever come up with a solution for this? It doesn't seem like fileDependencies or contextDependencies exist anywhere.. @gajus perfect! exactly what I needed. Thx!\n. Thanks for this @SpaceK33z . <script src=\"/bundle.js\"></script> not <script src=\"bundle.js\"></script>. The problem has been sovled by Mark Wolfe, I have tested it in my MacBookPro.\n. Thanks @nathanborror for your hint about the Dropbox for Business's path convention, that solved it for me.\n. I had the same problem. I know it's a old topic but I have my webpack on port 9000 and application on port 3000 so in devServer I added:\nheaders: {\n            'Access-Control-Allow-Origin': '*'\n        }\nHope it helps.. same problem with node 4.0 caused by socket.io \n. Same problem with Node 4. Getting back to Node 0.12 fixed the problem. Don't have time to investigate more. \n. Same problem with Node 4. Getting back to Node 0.12 fixed the problem. Don't have time to investigate more. \n. Thanks to @sokra and @SpaceK33z (and perhaps others?) web socket proxying (with socket.io) has been working for at least a couple of weeks now, since resolution #302. This is the config which is working (for me):\nI have a socket.io server running on localhost:8001, on path /napi:\njavascript\nvar io = require('socket.io')(http, { path: '/napi' })\nIn webpack config:\njavascript\ndevServer: {\n        proxy: {\n            '/napi/*': {\n                target: 'ws://localhost:8001',\n                ws: true,\n            },\n        },\n    },\nIn socket.io client:\njavascript\nvar socket = io({ path: '/napi' })\nI'm launching with:\nwebpack-dev-server --inline --hot\n. @jedwards1211 Yes. confirm. I have webpack-dev-server@1.14.0 installed.\n. @jedwards1211 Ah, I see, didn't catch you were using SockJS. There were similar issues with socket.io before issue 302 resolution switched the webpack-dev-server engine from socket.io to SockJS.\n. +1 on the fix with npm run prepublish. and for those trying to debug this on NPM v3.3.12, don't rely on locked version numbers in package.json (or even npm-shrinkwrap.json, for that matter) to put you back on WDS v0.12.1 if you're trying to downgrade.\n. +1 on the fix with npm run prepublish. and for those trying to debug this on NPM v3.3.12, don't rely on locked version numbers in package.json (or even npm-shrinkwrap.json, for that matter) to put you back on WDS v0.12.1 if you're trying to downgrade.\n. Even a light process sounds good given there are thousands of people using\nthis software every day.\nOn Sat, Dec 5, 2015 at 8:27 AM Kees Kluskens notifications@github.com\nwrote:\n\nHow would you test a websocket connection failing? Sure, it's possible to\ntest small part of this repo, but I think it's very hard to add fully\nautomatic tests.\nI think it would be useful to document what you should (manually) test\nafter changing something.\nFor instance, in example/ there are two html files index.html and\ninlined.html. You need to verify both of these still work (With PR #302\nhttps://github.com/webpack/webpack-dev-server/pull/302 I forgot to test\ninlined.html, which caused #326\nhttps://github.com/webpack/webpack-dev-server/issues/326).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/334#issuecomment-162194541\n.\n. Given I lost a couple hours last week I'll consider it. I'd love to hear\nmore ideas on approach to find something effective and simple.\nOn Sat, Dec 5, 2015 at 10:50 AM Kees Kluskens notifications@github.com\nwrote:\nTrue that. Do you have time to put together a PR? Maybe start with client/\nfirst, I think that is the most easy and a fairly important part.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/334#issuecomment-162222906\n.\n. @SpaceK33z Do you have time to put together a roadmap, so we can add Unit Tests to it for one-dot-oh?\n. Ran into this issue today as well.\n\nAdding watchOptions fixes it.\n. I'm also getting the same error:\n/sockjs-node/info?t=1470203121020 404 8.530 ms - 45\nGET /sockjs-node/info?t=1470203123328 404 1.403 ms - 45\nGET /sockjs-node/info?t=1470203125639 404 0.776 ms - 45\ncan you help me?\n. @kaleemullah360 no you cant modify webpack.config.js. You can use:ng eject and you will see your webpack.config.js but you cannot modify. For now angular-cli don't allow modify the web pack.config.js. \u6211\u4e5f\u9047\u5230\u4e86\uff0c\u540c\u6837\u7684\u95ee\u9898\uff0c\u770b\u5230\u4f60\u5173\u95ed\u4e86\u95ee\u9898\uff0c\u60f3\u77e5\u9053\u4f60\u662f\u5982\u4f55\u89e3\u51b3\u7684\u554a\n. Getting the same error\n. same to me now\nhow did you fixed it?\n. I have the same issue on Mac with the newest (stable) Chrome and Safari.\njavascript\n{\n    \"webpack\": \"2.1.0-beta.20\",\n    \"webpack-dev-server\": \"2.1.0-beta.0\",\n}\nconfig:\njavascript\nmodule.exports = env => {\n  return {\n    devtool: env.prod ? 'source-map' : 'eval',\n    entry: [\n      'webpack-dev-server/client?http://localhost:3000/',\n      'webpack/hot/only-dev-server',\n      './src/index',\n    ],\n    output: {\n      filename: 'bundle.js',\n      path: resolve(__dirname, 'build'),\n      pathinfo: !env.prod,\n    },\n    bail: env.prod,\n    plugins: [\n      new HtmlWebpackPlugin({\n        title: 'TravelDesk',\n        template: 'template.html',\n      }),\n    ],\n    module: {\n      loaders: [{\n        test: /\\.jsx?$/,\n        loaders: ['babel'],\n        include: resolve(__dirname, 'src'),\n      }],\n    },\n  }\n}\n. @SpaceK33z well I saw that previously, now it is just saying \"WebSocket Error: Network Error 12152, The server returned an invalid or unrecognized response\" in the console. All I know is it loads in Chrome, doesn't load in Edge, side-by-side.\nhttp://imgur.com/a/0EzCA\n. after run  gulp webpack-dev-server  \ncannot  fount bundle.js in my workdir  and  http://localhost:8080/dist/bundle.js  return 404\n. thanks ,\nit is my fault.\nhttp://localhost:8080/bundle.js   it is work.\n. thanks ,\n\u201cwebpack-dev-server will not put your bundle.js in your workdir, it will compile your files in-memory\u201d \nnotice myself\n. +1. +1. Please try like this;\nwebpack-dev-server --no-inline\nOr\nDo you use extract-text-webpack-plugin or html-webpack-plugin in your project ?\nPlease check their version is matched with webpackand webpack-dev-server.\n. @aykutyararbas your suggestion did the trick for me.\n. ",
    "Fridus": "Hi, try this : https://github.com/Fridus/webpack-watch-files-plugin ;). ",
    "sap9433": "Just wrote a plugin that does exactly the same - solves your problem - https://www.npmjs.com/package/filewatcher-webpack-plugin .\n@Fridus looks like this 1 got move power under its sleeve.. ",
    "ivanm376": "possible problem for Linux users see https://webpack.js.org/configuration/watch/#not-enough-watchers. possible problem for Linux users see https://webpack.js.org/configuration/watch/#not-enough-watchers. ",
    "gaearon": "I did not initially realized this but WebpackDevServer has app property so you can actually do the same thing:\n``` javascript\n  var server = new WebpackDevServer(webpack(webpackConfig), {\n    // ...\n  });\nserver.listen(8080, 'localhost');\n  server.app.use(apiHook());\n  server.app.use(pushStateHook('http://localhost:8080'));\n```\nIt's not documented and may break in the future but it's a workaround that suits me.\nStill, accepting options.middleware: Array would be a superior solution in my opinion.\n. I did not initially realized this but WebpackDevServer has app property so you can actually do the same thing:\n``` javascript\n  var server = new WebpackDevServer(webpack(webpackConfig), {\n    // ...\n  });\nserver.listen(8080, 'localhost');\n  server.app.use(apiHook());\n  server.app.use(pushStateHook('http://localhost:8080'));\n```\nIt's not documented and may break in the future but it's a workaround that suits me.\nStill, accepting options.middleware: Array would be a superior solution in my opinion.\n. > Configure content base for the webpack-dev-server to point to your server. All not webpack managed requests are redirected (or you can opt-in for proxing).\nThat won't work for me because I want the content base to be local (there's some static assets).\nThe reason I wanted proxying is to avoid CORS hassle.\nUsing internal object is less code so I'll stick with that (until it breaks).\n. > Configure content base for the webpack-dev-server to point to your server. All not webpack managed requests are redirected (or you can opt-in for proxing).\nThat won't work for me because I want the content base to be local (there's some static assets).\nThe reason I wanted proxying is to avoid CORS hassle.\nUsing internal object is less code so I'll stick with that (until it breaks).\n. Can you put up a reproducible example in a repo so I could examine it?\n. Can you put up a reproducible example in a repo so I could examine it?\n. Any change you have duplicate react in node_modules?\nFor example, some other library may have it in its own node_modules..\n. Any change you have duplicate react in node_modules?\nFor example, some other library may have it in its own node_modules..\n. Does https://github.com/gaearon/react-hot-boilerplate work on that computer?\n. Does https://github.com/gaearon/react-hot-boilerplate work on that computer?\n. Good, thank you for sharing!\n. Good, thank you for sharing!\n. We will be showing React warnings in a modal soon so it doesn\u2019t seem to be important to us.\n. Is there a reason Compiler can't expose its options?\nIs there a reason we don't let WebpackDevServer accept options instead of compiler, so it creates compiler itself (and has access to options)?\n. We can make publicPath required so people don't omit it by mistake in dev server config\n. In general I think one of the usability issues with Webpack is it isn't strict enough in the configuration. For example you can write loader and it needs to be a string, or you can write loaders and it's an array, but even inside a single string you can chain loaders with !. Sorry for ranting, but this is something I'd love to see solved in 2.0 by demanding more strict (and uniform) over relaxed (and often, in the end, wrong) configuration.\n. Another difference between CLI and Node API: with CLI, I can omit output.path, but Node API crashes if it's not specified.\n. Can you compare your setup with https://github.com/gaearon/react-hot-boilerplate?\n. I just realized you have two servers. Here's what I guess to be your problem: your app runs on other port than WebpackDevServer but the publicPath is /build/, so Webpack runtime requests hot updated script at /build/, which is served by your Express app.\nSetting publicPath explicitly to http://localhost:8080/build/ should help. I think there's also some other more idiomatic way of doing this but this is what I can help with.\n. Added to troubleshooting. https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md#syntax-error-unexpected-token-\n. Yeah. The solution is not to process node_modules with any loaders (including Babel). This will also speed up the compilation.\nYou can either put exclude: /node_modules/ or something like include: path.join(__dirname, \"src\") in your loaders. \n. These are useful errors and I want them to be reported. They are related to user\u2019s code.\n. These are useful warnings and I want them to be reported. They are related to user\u2019s code.\n. However this is generally not useful at all, especially because it enters a crazy loop where it prints this message every few seconds:\n\n. I think error and warning could be separate log levels from server-warning and server-error. And that it shouldn\u2019t print disconnected more than once regardless of the log level. Ideally it wouldn\u2019t print failed GET * either\u2014not sure if there\u2019s a way to prevent this.\n. I don\u2019t know to be honest. It\u2019s already a bit of a mess. Why do both quiet and noInfo exist?\n. This sounds reasonable but I\u2019d prefer if there was a way to show errors/warnings from compilation but without the server logs/errors/warnings.\n. ",
    "simenbrekken": "Maybe this can be solved by letting Server take an option to disable contentBase related middleware? To make it easier you could also proxy app.use so that one could do server.use(...).\n. @sokra I think this can be closed now.\n. @sokra Yeah, that's probably a better idea. If I have some time left over today I'll update my PR.\n. @sokra Updated with your recommended changes.\n. ",
    "tkellen": "Right you are.  It's actually a bug from when.js from 3.2.0 -> 3.3.0.  Sorry to bother!\n. Right you are.  It's actually a bug from when.js from 3.2.0 -> 3.3.0.  Sorry to bother!\n. ",
    "mathieumg": "Thanks for the fast reply! I understand that the first option is so that it resolves to my app's node_modules first, but locally installing a module doesn't put it in the path (like installing it globally with -g does), so which webpack-dev-server still resolves to the bin directory in my home folder, rather than to my project's node_modules. Is there another easy way to launch it when it's installed locally?\nEdit: ./node_modules/.bin/webpack-dev-server did the trick. Is that the fastest/recommended way? Thank you!\n. I just reinstalled webpack-dev-server globally (while keeping the local one) and the problem persists. I opened [my_home_dir]/local/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js and the lines you linked to are indeed present. The version in package.json is 1.4.6.\n. I just debugged it a bit. In your try scope, the path variable cannot be seen. When I move var path = require(\"path\"); above the try-catch, all is well and my module finally loads correctly. I do not know about the implications of doing this (I know you can use variables that are declared later in the same scope, but it's logical that it might be different in a try block for security reasons and that it is somehow sandboxed), so I imagine it is really an issue and it should be a simple fix? Thank you!\n. I just debugged it a bit. In your try scope, the path variable cannot be seen. When I move var path = require(\"path\"); above the try-catch, all is well and my module finally loads correctly. I do not know about the implications of doing this (I know you can use variables that are declared later in the same scope, but it's logical that it might be different in a try block for security reasons and that it is somehow sandboxed), so I imagine it is really an issue and it should be a simple fix? Thank you!\n. Yeah I saw, even published to npm already, no time wasted! I reinstalled it and it works perfectly now. Thanks for the support! (I think you didn't need to reopen the issue to comment on it)\n. Yeah I saw, even published to npm already, no time wasted! I reinstalled it and it works perfectly now. Thanks for the support! (I think you didn't need to reopen the issue to comment on it)\n. Should this also be guarded with a verification that this.sock exists? I get a crash when this runs because this.sock is undefined in the this.sockWrite call. Perhaps that guard should simply be put inside the sockWrite call?\n. Yes, it was added following my remark. :) See https://github.com/CodeYellowBV/webpack-dev-server/commit/a5ddf82e27fa334260c37c431008801908c4be6b\n. ",
    "markmarijnissen": "Please seperate publicPath from the base of webpack-dev-server.\nUse case: I have multiple bundles:\n/app1/index.html\n/app1/main.js\n/app2/index.html\n/app2/main.js\nindex.html is in app1 or app2 and the context is / so the publicPath is ../. This works as expected when running webpack.\nWebpack-dev-server converts this /../ which makes no sense and doesn't work. As a workaround, I have to leave publicPath undefined and set it at runtime in main.js. This sets publicPath correctly to ../ and doesn't interface with the webpack-dev-server base of /.\nDoes this make sense or should I reformulate?\n. Please seperate publicPath from the base of webpack-dev-server.\nUse case: I have multiple bundles:\n/app1/index.html\n/app1/main.js\n/app2/index.html\n/app2/main.js\nindex.html is in app1 or app2 and the context is / so the publicPath is ../. This works as expected when running webpack.\nWebpack-dev-server converts this /../ which makes no sense and doesn't work. As a workaround, I have to leave publicPath undefined and set it at runtime in main.js. This sets publicPath correctly to ../ and doesn't interface with the webpack-dev-server base of /.\nDoes this make sense or should I reformulate?\n. I am also unaware of the original author's intention. Seems like a hack you would add when some default test case doesn't work?\nIf the base path becomes available as a option (in webpack.config.js) and as command-line flag, I see no reason why to keep it. You can always explicitly set it, if it doens't work in your use-case. And it removes a hack that apparently doesn't work for everybody.\n. I am also unaware of the original author's intention. Seems like a hack you would add when some default test case doesn't work?\nIf the base path becomes available as a option (in webpack.config.js) and as command-line flag, I see no reason why to keep it. You can always explicitly set it, if it doens't work in your use-case. And it removes a hack that apparently doesn't work for everybody.\n. Ah, of course! Now the slash makes sense.\nWhat I'm missing then is an option to configure my dev server from webpack.config.js. It seems the only way now is to write a custom launch script, which renders the \"webpack-dev-server\" executable useless for me. I'd like to use the convenient executable :) I submitted a pull request already to add some options!\n\u2014\nSent from Mailbox\nOn Wed, Aug 6, 2014 at 8:35 AM, Tobias Koppers notifications@github.com\nwrote:\n\n@markmarijnissen There is an additional publicPath for the dev-server. You can set this to / and the publicPath of webpack to ../.\n@c089 The publicPath for the dev-server need a prefixed /. It's the mount point of the in-memory bundle.\nReply to this email directly or view it on GitHub:\nhttps://github.com/webpack/webpack-dev-server/pull/39#issuecomment-51298761\n. Ah, of course! Now the slash makes sense.\n\nWhat I'm missing then is an option to configure my dev server from webpack.config.js. It seems the only way now is to write a custom launch script, which renders the \"webpack-dev-server\" executable useless for me. I'd like to use the convenient executable :) I submitted a pull request already to add some options!\n\u2014\nSent from Mailbox\nOn Wed, Aug 6, 2014 at 8:35 AM, Tobias Koppers notifications@github.com\nwrote:\n\n@markmarijnissen There is an additional publicPath for the dev-server. You can set this to / and the publicPath of webpack to ../.\n@c089 The publicPath for the dev-server need a prefixed /. It's the mount point of the in-memory bundle.\nReply to this email directly or view it on GitHub:\nhttps://github.com/webpack/webpack-dev-server/pull/39#issuecomment-51298761\n. \n",
    "chanon": "I'm not using live.js (I think I'm not). I'm using index.js (webpack-dev-server/client) according to this tutorial:\nhttp://gaearon.github.io/react-hot-loader/\nWhen an error occurrs (eg. I remove a comma to create a SyntaxError in a jsx file) the bundling on the server fails (ERROR), then the client is triggered and it looks like it tries to compile, then fails, then reloads the whole page which results in a server error for me because it uses the same code (server side rendering).\n. I tried commenting out the reloadApp lines in index.js:\nhttps://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L30\nhttps://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L38\nNow it doesn't reload the app, but then the next time that the compile is successful, it reloads the whole page instead.\nIdeally, the server should just not notify the client so that the client can do a successful hot reload.\n. Or maybe I'm misunderstanding something.\nIt looks like that should have done it .. I don't know why it's reloading the whole page on success instead though.\n. Alright, after looking at the code, it looks like the hot update is aborted in the client due to an \"Aborted because of bubbling\" Error \nat:\nhttps://github.com/webpack/webpack/blob/master/lib/HotModuleReplacementPlugin.js#L388\nwhich leads to a full page reload here:\nhttps://github.com/webpack/webpack/blob/master/hot/dev-server.js#L6\n(updated:)\n- It looks like the code there looks up each outdated module's parents and in this case it bubbles up to the root moduleId 0 causing a whole page reload. Not sure what can be done.\n- It seems like the hot updates include versions where 1. the module didn't build successfully so it is declared as missing, then 2. the module built successfully so the new successfully built module is sent.\n- Some further digging ... HotModuleReplacementPlugin plugs in to Compilation's \"record\" and \"additional-chunk-assets\" hooks to save the updated modules. However it doesn't do anything differently for failed modules, so it just sends the 'module missing' stub for failed modules. Ideally it should just skip failed modules. I don't know how that could be done though. Compilation has a \"failed-module\" hook which might be useful for this.\nI think this is an important issue for making hot module reloading useful in real world usage, as otherwise to take advantage of it you'd have to be careful to save only when everything is correct. If you don't it will just reload the whole page - thus no hot reloading.\n. Success!! After a lot of trial and error and digging, I've got it to work so that failed modules don't cause the page to reload and when they stop failing they successfully do a hot reload.\nSteps: \n1. Commenting the reloadApp lines in index.js (or maybe just for errors):\nhttps://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L30\nhttps://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L38\n2. In HotModuleReplacementPlugin I plugged in to the 'failed-module' hook and set a failed flag if it ever got in there. Then in the record, after-hash, and additional-chunk-assets hooks I check if the failed flag is set. If it is I do nothing (return immediately).\nOne case that this might not handle is if there was more than 1 module updated at the same time with one failing and one succeeding. The succeeding module's update might get lost (or not I'm not sure). But I think this should be rare as it would require quickly editing more than one module file so they get picked up in the same compilation by the watcher .. which might be possible (or not).\n@sokra, if this is good enough I can prepare a pull request.\n. (From discussion at https://github.com/webpack/webpack/issues/418, also adding here for reference.)\nI'm presenting the commits/diffs that I made which result in perfect hot module reloading behavior where syntax errors do not cause any problems and once they are fixed changes continue to update instantly all without full page reloads.\nThe first commit is a very simple one:\nhttps://github.com/chanon/webpack-dev-server/commit/1c0fdb2a6c99ff37ae27b3ad3e9ca26855764d1e#diff-895656aeaccff5d7c0f56a113ede9662R39 \nIt simply removes the reloadApp() call when there is a module compile error in client/index.js. This mirrors the behavior in live.js which doesn't reload on errors too. It fixes the full page reloads that occur whenever a module of any type fails when using client/index.js. \nThe second commit is in the HotModuleReplacementPlugin\nhttps://github.com/chanon/webpack/commit/57018bfb6b14b8d40e7df923311dd9d6bdcc350b\nHere I listen to the 'failed-module' hook, if the compile failed then don't report the module changes to  the client. This fixes the issues where hot reloading doesn't work after compilation failed and then later succeeds.\n. ",
    "syranide": ":+1: Have encountered this issue (using react-hot-loader).\nForgive my ignorance (perhaps it has been discussed already). I do love the build errors showing up in the console (instead of only in the terminal) and if they could remain it would be awesome, but obviously not a deal-breaker (perhaps webpack/webpack#416 could be a long-term solution?).\n. :+1: Have encountered this issue (using react-hot-loader).\nForgive my ignorance (perhaps it has been discussed already). I do love the build errors showing up in the console (instead of only in the terminal) and if they could remain it would be awesome, but obviously not a deal-breaker (perhaps webpack/webpack#416 could be a long-term solution?).\n. Ping, I don't mind dropping the relative paths, but I would find great use for the configurable socket.io-path.\nIs there something about this PR you don't like/object to?\n. @sokra Ah, using our authority-signed certificate is however mandatory for me (I'm also doing cross-domain stuff). The reason I like the proxy setup is because HMR/WDS can be used transparently (apart from a small path change), serving some assets from a separate server is not without issues, especially when it comes to SWF. So the proxy solution still seems preferable to me.\n. @sokra Because socket.io is always expected to be located at /socket.io/, I cannot put it somewhere else as part of the proxy setup. Which means I can't have more than WDS proxied on the same domain. Being able to move it (one way or another) is the only thing really missing for me.\n. Closing in-favor of #240 \n. :+1: For noContentBase, I currently use contentBase: '/nosuchpath/' :)\n. +1, somewhat related #46\n. I've put up a PR #240 for this.\n. #240 merged\n. +1 because JS compresses really well and this makes remote testing significantly faster too.\n. +1 because JS compresses really well and this makes remote testing significantly faster too.\n. > So we better should enable this by default without an option, shouldn't we?\n@sokra It could imaginably delay the transmission slightly, but I imagine it probably cancels out by being faster... however, a lot of resources (like webfonts) benefit from being compressed as well, so I would think the best solution is to accept a list of file extensions (or suffixes) to serve compressed, with the default being .js + .map? (much like how web servers normally handle it)\n. > So we better should enable this by default without an option, shouldn't we?\n@sokra It could imaginably delay the transmission slightly, but I imagine it probably cancels out by being faster... however, a lot of resources (like webfonts) benefit from being compressed as well, so I would think the best solution is to accept a list of file extensions (or suffixes) to serve compressed, with the default being .js + .map? (much like how web servers normally handle it)\n. @kentor That already works, this allows changing the path too.\n. Hmm that's an interesting edge-case, you want to set the port but not the host?\n. It seems pretty clear to me that http://:::3030 was a hack and should not be valid. It also seems to me that there's a bug in url.parse, when parsed and formatted it ends up as http://:3030/::, that seems nonsensical (but perhaps that simply an acceptable artifact due to the malformed url?).\nAnyway, I imagine the correct approach here would be to special-case 0.0.0.0 and have it too be substituted with location.host.\ncc @sokra \n. @SimenB True, in that case then it's really a bug in url.parse that should be fixed in node and 0.0.0.0 won't be necessary. Also... I got lost in my thoughts a bit, http://:3030 actually parses and formats correctly, however it ends up going wrong somewhere eventually and ends up as http://http, so it seems the problem really is elsewhere. So that needs to be investigated, but it seems to me right now that this is not strictly a bug in my PR (it just closed a previous loophole and is victim of a bug in url).\nPS: If :: was handled correctly before then it should work to outright substitute it with 0.0.0.0 I would think?\n. Hmm, it seems 0.0.0.0 already happened...\nhttps://github.com/webpack/webpack-dev-server/commit/eb50101b449d1fb99600d9c710db70679f6f4592 https://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L15\nEDIT: It still makes sense to look into what's going on here, especially if the parsing is actually a bug in nodejs.\n. @SimenB 0.0.0.0 was added at the same time as my PR it seems, so just this last version.\n. @SimenB Also, FYI https://github.com/nodejs/node/issues/2929#issuecomment-141123167\n. @SimenB The final URL is really funky, including encoded chars (which seems to indicate an URL being encoded as a hostname inside an URL) ... what have you written in your config? I'm assuming the URL you are visiting is http://localhost:3030?\nhttps://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L13\n. @SimenB Hmm, I don't see how that ends up being translated to what you printscreened above... could you perhaps put some console.logs in https://github.com/webpack/webpack-dev-server/blob/master/client/index.js#L13 and see where it's going wrong?\njs\n// on line 10\nconsole.log(urlParts);\nconsole.log(window.location.hostname);\nconsole.log(\n    url.format({\n        protocol: urlParts.protocol,\n        auth: urlParts.auth,\n        hostname: (urlParts.hostname === '0.0.0.0') ? window.location.hostname : urlParts.hostname,\n        port: urlParts.port\n    })\n);\n. Also:\njs\nconsole.log(__resourceQuery);\n. __resourceQuery is obviously all wrong on windows for some reason. So this is related to some weird manipulation by webpack or quirk in your config.\n. > I still think url.parse messes up, but this works for us now :smile:\nIt parses valid URLs correctly, so as far as we should be concerned it behaves as intended.\n. +1 Getting the same problem when going from 1.12.1 to 1.13.0. But I'm using the default port.\nEDIT: Ok unrelated it seems, socket.io is now sockjs-node instead.\n. +1 Getting the same problem when going from 1.12.1 to 1.13.0. But I'm using the default port.\nEDIT: Ok unrelated it seems, socket.io is now sockjs-node instead.\n. ",
    "kurtharriger": "I'm just starting to learn about webpack and, in truth, I'm not entirely clear why we had created multiple webpack files in the same project, but was trying to get the webpack-dev-server to work with our configuration so that I could try to use the react-hot-loader.\nThe first answer I got was because we wanted to pull these components into seperate repos that could reused in some other projects.  Not knowing a lot about webpack then, my assumption was much like an other css/js concat/minify build tool and webpack would emit a small number of files and external projects would then require the build artifacts rather than the source files directly and this answer seemed to initially make sense.  Now that I know slightly more about webpack it seems packaging step for libraries is unnecessary one can simply move the files into a new repo, npm install it and directly require the source files and it should just work as long as one has the necessary loaders configured.  \nAnother reason we are creating multiple libraries is because a large part of our front end framework is in extjs which has its own build tools and complexities.  We are rewriting parts of the code in React and integrating other projects that are written in angularjs.  We want these features to be loaded lazily from extjs the easiest way to do this without affecting the extjs code is to use curljs to load these libraries on demand.  I think the webpack way to do this would be to use one webpack file with multiple entry points rather than different webpack configs and if were to do it this way then this would not be an issue, so I'll see what I can do to move our code base towards a single webpack config instead.\n. ",
    "ampedandwired": "Fair question, I mostly want to use the auto-reloading feature of the dev server. I considered hacking it in myself on top of the middleware, but that seemed like reinventing the wheel.\n. Fair question, I mostly want to use the auto-reloading feature of the dev server. I considered hacking it in myself on top of the middleware, but that seemed like reinventing the wheel.\n. Just personal preference. The proxying solution is OK, and obviously necessary for non-express servers. It's just more moving parts, and it feels cleaner for me if I can embed it seeing as I'm running express anyway.\n. Just personal preference. The proxying solution is OK, and obviously necessary for non-express servers. It's just more moving parts, and it feels cleaner for me if I can embed it seeing as I'm running express anyway.\n. I've tested it as best I can and it seems to work, although I'll admit that the ternary is probably not the best in terms of readability. I'm probably missing something obvious, what part seems broken?\n. I've tested it as best I can and it seems to work, although I'll admit that the ternary is probably not the best in terms of readability. I'm probably missing something obvious, what part seems broken?\n. ",
    "ypomortsev": "Sorry, didn't notice the existing PR. Thanks for the fix, and thanks for webpack -- it's an awesome tool.\n. ",
    "kentcdodds": "@chollier, is that server working for you? I've tried several variations and I can't seem to get it to work for me. My folder structure is:\n- project-root\n  - app\n    - index.html\n  - scripts\n    - server.js\nMy content base is './app' and my index.html is looking for bundle.js as a sibling to itself (script=\"bundle.js\").\n. Just verifying @steida, what you provided isn't supposed to work today right? You were just suggesting that as an API. I just tried it and it didn't work for me, so that's why I'm just checking that I'm not missing anything...\n. I am also seeing this. Though I'm seeing it with webpack in general. So I'm guessing it's a webpack-core issue.\n. I am also seeing this. Though I'm seeing it with webpack in general. So I'm guessing it's a webpack-core issue.\n. My solution for now is to simply downgrade to the latest 1.7.x release :-( Let me know if there's any info I can provide to figure out what the issue is.\n. My solution for now is to simply downgrade to the latest 1.7.x release :-( Let me know if there's any info I can provide to figure out what the issue is.\n. Ok, so I worked around it by using --content-base as @xyyjk suggested, but was also required to add a prebuild and prestart script which deletes the dist and copies the index.html and favicon.ico over to the dist directory as well. I still feel like this behavior could be a bug though, so I'll leave the issue open.\n. Thanks for looking into this @LegNeato! Unfortunately it doesn't appear to solve my issue :-( https://github.com/kentcdodds/es6-todomvc/pull/2/files \n. Hi @SpaceK33z! It's been a while, and I got it working eventually. I'm thinking this is a dupe of #337, so I'm going to close this one. Thanks!\n. ",
    "arnihermann": "@sokra I feel this is much better now, we can see the errors in browser console as well as the node process output.\n. @sokra Please let me know if this can be improved more, I'm happy to work on it.\n. ",
    "necolas": "hah no :), just setting things up using the examples in the docs to get started.\n. I don't know\n. Sorry this was my fault \u2013\u00a0didn't change the protocol for the client script.\n. ",
    "pstoica": "I did notice that if you have multiple entrypoints, you have to hit [name].js before any actual entry names work (which compiles everything, defeating the point of lazy). Was this your use case, @necolas?\n. Gotcha, fixed unless you also needed Buffer/String typechecking.\n. Would you be able to do a version bump to include this soon? I've been using a git repo/branch that has the prepublished files.\n. ",
    "SuperOl3g": "Hi there!\n@SpaceK33z Faced with same problem. Does exist any solution to show pretty disconnect message on page for today?\nAs for me, it's critical UX-feature. Because sometimes you just don't see that you your cli task has stopped by some reasons.\nThat is how it's look in BrowserSync:\n\nAs far as I understand overlay option allow to show only compilation errors but not connection error.. ",
    "koistya": "How to make BrowserSync notified when webpack completed bundling? Where to plug the event handler?\nhttps://github.com/kriasoft/React-Seed/blob/88eabc907aa0f3f8be6a00663f265cbc94262276/gulpfile.js#L114-L141\n. One more example in React App SDK\n. @sokra I can't install this package because it conflicts with webpack 1.4.1-beta1. Have you tested it with npm 2.0.0?\n. 1.4.0-beta1 could be called 1.4.0-beta.1 and peer dependency could be ^1.3.0 || ^1.4.0-beta\n. Oh, cool, I didn't see this release\n. ",
    "Devric": "you need to use gulp-webpack to do the synced way. different issue i asked.\nmy issue seems like have to browsersync proxy over the webpack server than\nproxy my dev server....\nOn 15/09/2014 12:01 am, \"Konstantin Tarkus\" notifications@github.com\nwrote:\n\nHow to make BrowserSync notified when webpack completed bundling?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/56#issuecomment-55526480\n.\n. \n",
    "timkelty": "I'm in the same boat - I need a callback for rebuild to send to browsersync to trigger a refresh.\nAnyone know how to achieve this?\n. ",
    "Va1": "Have a look at this:\nhttps://github.com/Va1/browser-sync-webpack-plugin\n. ",
    "ucorina": "It seems that this is actually possible using webpack-dev-middleware and webpack-hot-middleware. BrowserSync provides a nice recipes on how to set this up here: https://github.com/BrowserSync/recipes/tree/master/recipes/webpack.react-hot-loader\n. ",
    "morlay": "A Simple CLI:\nhttps://github.com/morlay/webpack-browser-sync\n. ",
    "tdeekens": "...maybe navigate to node_modules/webpack-dev-server and run npm run-script prepublish which will build the live-bundle if I am not mistaken.\n. That I didn't understand either.\n. Thanks for the response! I understand what you're saying still..\nThat's what I am doing. I am starting the webpack dev sever as in ./node_modules/webpack-dev-server/bin/webpack-dev-server.js --content-base --port 9500 --colors.\nThe webpack.config.js has a \njavascript\n...\ndevServer: {\n   headers: { \"Access-Control-Allow-Origin\": \"*\" }\n}\n...\nheader which is sent when ever the bundle is requested over localhost:9500/app.bundle.js. Still the root of localhost:9500 does not have the header set. I can obviously hardcode it into the Server.js which would make it work. Still those headers I pass in should be set on any resources requested and accessible from the content-base, correct?\nIs there any other way of setting headers on the content-base's index.html?\n. ...alrighty. I will fork and open a pull request - it'll also better communicate what I am after.\n. Any news on merging this in, any changes which have to be made or is it just not of interest?\n. No worries, cheers for merging it in!\n. ",
    "akovalev": "@tdeekens just ran into the same issue. building live.bundle.js helped to solve it \n. ",
    "BerndWessels": "Ran into it myself today - but am pretty sure it worked out of the box before.\nFeels like the npm install of the main project must have done the npm install within the webpack-dev-server folder but now is not doing it anymore ?!\nWe should really figure that out because it freak out everybody who is totally new to all this.\n. ",
    "jedwards1211": "@tdeekens I wonder why the live bundle didn't get built and published to npm though?\n. @gaearon thanks a bunch for that tip!  I didn't even realize Babel was processing my node modules, now it builds about 30X faster!\n. Okay, I found it in NodeWatchFileSystem.js:\n/home/andy/temp/jcore-device-webui/frontend/node_modules/webpack/lib/node/NodeWatchFileSystem.js:\n   17  NodeWatchFileSystem.prototype.watch = function watch(files, dirs, missing, startTime, delay, callback, callbackUndelayed) {\n   28   if(typeof delay !== \"number\")\n   29:      throw new Error(\"Invalid arguments: 'delay'\");\nIt caught me surprise after I unknowingly installed a different version of NodeWatchFileSystem.js (the old one didn't have this line).  Perhaps I have the wrong arguments in one of my config files?  If so seems like Webpack should be reporting an error on my config long before it reaches this function call.\n. Okay, so I was using Webpack 1.9.3 in my project, yet when I did a fresh npm install it got 1.7.3, and 1.7.3 was throwing the error.  So I'll just close this.\n. @SimenB would the approach you guys are discussing work when connecting to your dev machine from other devices?\nTo accomplish that when I need to change the port I've been using this hack:\nhtml\n  <script type=\"text/javascript\">\n    var scriptElem = document.createElement('script');\n    scriptElem.type = 'text/javascript';\n    scriptElem.src = new RegExp('https?://[^:/]+').exec(window.location.href)[0] + ':9090/assets/client.bundle.js';\n    document.head.appendChild(scriptElem);\n  </script>\n. @SimenB What do your script tags look like?  I've been curious myself if there's a better way\n. Oh, are you using Meteor?\n. I see.  But now you're just using http://0.0.0.0:3030... for the src links of the scripts?  I didn't realize this would work\n. @gymb321 I'd recommend using iframe mode (i.e. put a contentBase in your dev server config and go to localhost:port/webpack-dev-server/index.html in your browser).  This is the only way I know of to connect to a backend server via websocket.\nI'm still learning about web sockets but as far as I can tell there's no simple or standard way to proxy websocket traffic that's not intended for webpack-dev-server to the backend server.\n. Hey @thomasboyt, thanks so much for that!!!  I've been dying to be able to proxy websockets!\nI had to make one change to get it to work; if you don't add an error handler to proxy, if it fires an 'error' event, the default error handler will throw the error, which seems to break something (I'm not sure what, the process just seems to hang, but since the error is probably getting thrown in the middle of stream communication it's probably not good).  So if you simply add this underneath the requires:\njs\nproxy.on('error', function(err) {\n    console.error(err.stack);\n});\nIt fixes that issue.  My sockets were sometimes hanging up so it was a major issue for me.\n. @apotropaix are you saying that websocket proxying should work without @thomasboyt's patch?\n. @apotropaix I see...I'm confused though, how is that possible when there aren't any proxy.ws() calls in that version's Server.js?\n. @apotropaix nevermind, I see how it works looking at node-http-proxy documentation.  Thanks for enlightening us!\n. @apotropaix my project uses SockJS, and I can't get it to proxy successfully, whereas @thomasboyt's patch does work.  Maybe the problem is that SockJS makes a mix of http:// and ws:// requests, but since the config can specify only one protocol in the target, one protocol will fail to get proxied?\n. @SpaceK33z no, it lives at /sockjs, so there's no name collision.\n@apotropaix in any case, luckily Thomas Boyt's patch does work with SockJS...unless I misinterpreted something\n. @geddski last time I checked, I couldn't get it to work with webpack 1.14...\n. someone correct me if I'm wrong, but couldn't you just put publicPath: '/subpath/assets/' in your devServer config?\n. Perhaps have all of your static assets in a subpath folder inside your contentBase?\n. Sorry, yeah, I've been too busy with work\n. Sorry, yeah, I've been too busy with work\n. I'm honestly too busy to check right now, so you're welcome to just close this if you can't reproduce it.\n. ",
    "alvaro-cuesta": "Fix worked, thanks! Was driving me crazy :)\nI'm not sure if I should close the issue, feel free to do it yourself.\n. ",
    "omerts": "I have the same problem, but the above solution didn't help me\n. ",
    "dallonf": "I just ran into this today. The workaround suggested by @omerts helped, but I very much hope I don't need fs anywhere in my app!\n. ",
    "iirvine": "I'd like to see an option like this as well. At least from my initial webpack experiments, it seems that being able to write the dev server output to disk would make working in parallel with another server much simpler. Right now I have a fairly complicated work-around of loading static assets from the dev server based on an environment variable, which works okay for a single bundle but breaks code-splitting.\n. Right, it makes a bit more sense now that I've worked with webpack a little more - it just necessitates my server having some notion of that blackbox in development, rather than always just serving assets from disk. \n. ",
    "devel-pa": "yesterday, a bad day, so I'll delete the things I wrote here.\nWebpack works with WebStorm very well.\nYou have to set in remote urls the mapping of your sources starting from \"webpack:///.\"\nPS: and it worked only for a minute. now, back to nothing\n. ",
    "max-mykhailenko": "+1\n. @KyleAMathews you can try setup git hook and run webpack on commit, pull etc.\n. @airwin Your advice doesn't work :( Every callback run only on complete compiling by wepack. I can't find hot reloading compiling callback\n. @airwin @kigorw But i find this:\ncompiler.plugin('done', function() {\n  console.log('i here');\n});\nIt's work!\n. ",
    "diurnalist": "@sompylasar this is a very late reply, but you can examine the generated assets if you visit your dev server under the /webpack-dev-server path. I.e. if you're running it on 9000, http://localhost:9000/webpack-dev-server.\n. @KyleAMathews how so? Nothing about hot reloads requires the assets be written to disk. I'm using it in a project right now without issue.\n. @KyleAMathews hmm, I'm still trying to understand why you need to run two webpack compilations. It seems irrelevant how the bundle is served. The only thing I can think is that somehow you need to do additional processing outside of webpack land on one of your output files? Feel free to send me an email (listed on my profile) - I've had to deal with a few weird things when integrating webpack into a big project, maybe my experience can be of use.\n. @KyleAMathews so, just to be clear (again, happy to discuss via email, these GH comment reply flows get a bit ridic after a certain point...) - does your generated HTML file need to include the script inlined? Or is it fine to include it as an external link? Obviously if the latter is true, you can simply link your script in:\nhtml\n<script src=\"http://localhost:9090/js/your-react-bundle.js\"></script>\nYou'd just need to be able to change the host for when you deploy the app to a remote server, obviously.\nIf you need to actually inline your script... that's a different issue. But, I'd ask: why would you need to do that? For what it's worth, it's possible. I'm currently doing it to bootstrap some page-specific JSON into my app when it starts. The tricky part here is you need to understand what IDs webpack has assigned your modules. To do that, you need to parse the stats object webpack returns when a compilation completes. I have some code I could open-source that helps with this.\nBasically, I have some script template that looks something like this:\njs\nwebpackJsonp([], {\n  0: function (module, exports, require) {\n    var App = require(__APPLICATION_MODULE_ID__);\n    App.start(__BOOTSTRAP_DATA__);\n  }\n});\nAnd then when I'm generating my HTML page, I just read that template and replace the tokens with the webpack module id for the App module and the JSON string of bootstrap data. This works essentially by injecting a dummy webpack chunk on to the page that has no dependencies. You would need to ensure that you have loaded the main webpack library on the page before doing this, or else the webpackJsonp function will not exist yet.\n. ",
    "QuantumInformation": "I basically want the server auto refreshing when I make changes in the code, similar to how the ember-cli works.\n. The closest I can get to what I want, is to run these in separate terminals\nwebpack --watch\nwebpack-dev-server\n. @MrOrz thanks but I still have to manually refresh the page.\n. @MrOrz thanks that works, however on windows chrome keeps crashing :(\n. Closing anyway as the hot mode acheives what I need, however it seems like a lot of extra config to me.\n. Shall I reopen this?\n. Well this is a popular issue.\n. Man I'm tempted to unsubscribe from my own thread ;)\n. I had to use 127.0.0.1\n. I also experience the same issue with 2 separate projects on the mac.\n. ",
    "JorritPosthuma": "I'd like to add an argument for adding this option \ud83d\ude0a. When using electron, in certain cases, you are only allowed to use files from a file: path: https://github.com/atom/electron/blob/master/atom/renderer/lib/web-view/web-view-attributes.coffee#L201\n@nickpresta As far as I know, not right now. You have to run a separate webpack -w. \n. ",
    "thelinuxlich": "+1 for dev server writing to disk!\n. ",
    "mrberggg": "+1 for writing to disk. Just adds confusion when starting out.\n. ",
    "ehgoodenough": "+1 for not only serving the compiled files, but also writing the compiled files to disk.\n. A good solution is to just use Webpack, which actually writes to the disk, which you can pair with something like BrowserSync. It seems like WebpackDevServer is meant only for non-writing-to-disc development. :]\n``` js\nvar webpack = require(\"webpack\")\nvar browersync = require(\"browser-sync\")\nwebpack({\n    watch: true,\n    //put your config here\n}, function(error, stats) {\n    if(!!server && !!server.active) {\n        server.reload()\n    }\n})\nserver = browersync({\n    server: \"./build\",\n    port: 8080\n})\n```\n. @gajus Drop a link, bro! :]\n. ",
    "gajus": "This would be useful when using webpack + BrowserSync to refresh when static assets (ie., CSS) change.\n. This would be useful when using webpack + BrowserSync to refresh when static assets (ie., CSS) change.\n. I have released a plugin that forces webpack-dev-server to write to the file system.\nhttps://github.com/gajus/write-file-webpack-plugin\n. I have released a plugin that forces webpack-dev-server to write to the file system.\nhttps://github.com/gajus/write-file-webpack-plugin\n. There is a plugin for this. Whats everyone upset about? Just use it.\n\nOn Dec 9, 2015, at 21:59, Andrew McPherson notifications@github.com wrote:\nA good solution is to just use Webpack, which actually writes to the disk, which you can pair with something like BrowserSync. It seems like WebpackDevServer is meant only for non-writing-to-disc development. :]\n\u2014\nReply to this email directly or view it on GitHub.\n. There is a plugin for this. Whats everyone upset about? Just use it.\nOn Dec 9, 2015, at 21:59, Andrew McPherson notifications@github.com wrote:\nA good solution is to just use Webpack, which actually writes to the disk, which you can pair with something like BrowserSync. It seems like WebpackDevServer is meant only for non-writing-to-disc development. :]\n\u2014\nReply to this email directly or view it on GitHub.\n. https://github.com/webpack/webpack-dev-server/issues/62#issuecomment-151343141\n. https://github.com/webpack/webpack-dev-server/issues/62#issuecomment-151343141\n. > Unfortunately, your plugin writes only bundle.js and skips other files (e.g. images, fonts). Although its not crucial. Using data-urls for this stuff will solve problem.\n\nIt writes the same what webpack program would. If you have not configured webpack program to write whatever additional resources, it will not write them.\n. > Unfortunately, your plugin writes only bundle.js and skips other files (e.g. images, fonts). Although its not crucial. Using data-urls for this stuff will solve problem.\nIt writes the same what webpack program would. If you have not configured webpack program to write whatever additional resources, it will not write them.\n. > Unfortunately, your plugin writes only bundle.js and skips other files (e.g. images, fonts). Although its not crucial. Using data-urls for this stuff will solve problem.\n@wailorman This has been fixed in the latest release. https://github.com/gajus/write-file-webpack-plugin/issues/14\n. > Unfortunately, your plugin writes only bundle.js and skips other files (e.g. images, fonts). Although its not crucial. Using data-urls for this stuff will solve problem.\n@wailorman This has been fixed in the latest release. https://github.com/gajus/write-file-webpack-plugin/issues/14\n. > @justinjdickow \n\nI'll add my super random need for this as a +1.\n\nhttps://github.com/gajus/write-file-webpack-plugin\n. > @justinjdickow \n\nI'll add my super random need for this as a +1.\n\nhttps://github.com/gajus/write-file-webpack-plugin\n. > I have to stop the dev server every time, build, and watch again.\nJust use https://github.com/gajus/write-file-webpack-plugin. > I have to stop the dev server every time, build, and watch again.\nJust use https://github.com/gajus/write-file-webpack-plugin. > It doesn't seem right that I need a plugin for this.\nWhats the problem with using a plugin?. > It doesn't seem right that I need a plugin for this.\nWhats the problem with using a plugin?. The core features are dictated by the mainstream use. This isn't a mainstream use case. Plugins are to support alternative use cases.. The core features are dictated by the mainstream use. This isn't a mainstream use case. Plugins are to support alternative use cases.. > @gajus Hey, thanks for the plugin. You may want to surround the fs.writeFileSync(relativeOutputPath.split('?')[0], assetSource); in a try-catch since it can throw an exception.\nPR welcome.. > @gajus Hey, thanks for the plugin. You may want to surround the fs.writeFileSync(relativeOutputPath.split('?')[0], assetSource); in a try-catch since it can throw an exception.\nPR welcome.. This will not work if webpack-dev-server is started programmatically.\n. @SpaceK33z thats what we are already doing\nhttps://github.com/gajus/write-file-webpack-plugin/blob/b5ec5c82b06109dd4d68b2bab4904845262290f3/src/index.js#L17\nIt feels a bit hacky though.\nOtherwise, it works.\n. @SpaceK33z thats what we are already doing\nhttps://github.com/gajus/write-file-webpack-plugin/blob/b5ec5c82b06109dd4d68b2bab4904845262290f3/src/index.js#L17\nIt feels a bit hacky though.\nOtherwise, it works.\n. @sokra Any chance of this behaviour changing in 2.0.0?\n. @sokra Any chance of this behaviour changing in 2.0.0?\n. @sokra I will happily raise a PR if this is accepted.\n. @sokra I will happily raise a PR if this is accepted.\n. > @gajus, is there something not working because of this?\nIt was something to do with https://github.com/gajus/write-file-webpack-plugin. However, there are no open issues & I cannot recall what was the problem.\nClosing it. Will re-open if I remember the issue.\n. Just noticed that there is an associated PR.\nhttps://github.com/gajus/write-file-webpack-plugin/pull/18\nSeems like we have solved it by hardcoding the DS too.\n. ",
    "Sridatta19": "@gajus  thank you.\n+1 Still hoping for an official resolution to be provided\n. ",
    "dmitrykuznetsovdev": "+1\n. ",
    "wailorman": "+1 Make it optional at least, please\n. +1 Make it optional at least, please\n. @gajus \nUnfortunately, your plugin writes only bundle.js and skips other files (e.g. images, fonts). Although its not crucial. Using data-urls for this stuff will solve problem.\nI was having a lot of problems with launching web-dev-server via gulp and writing right config for it. So, I've started using webpack-dev-server --content-base dist/ and all problems went out! Highly recommend to use this way. I don't need to write bundle to disk any more\n. @gajus \nUnfortunately, your plugin writes only bundle.js and skips other files (e.g. images, fonts). Although its not crucial. Using data-urls for this stuff will solve problem.\nI was having a lot of problems with launching web-dev-server via gulp and writing right config for it. So, I've started using webpack-dev-server --content-base dist/ and all problems went out! Highly recommend to use this way. I don't need to write bundle to disk any more\n. @gajus Thank you very much! Your plugin is really awesome\n. @gajus Thank you very much! Your plugin is really awesome\n. ",
    "arcseldon": "+1 for a flag that permits writing contents out to disk.\n. ",
    "richburdon": "@sokra \n\nBut why would you need to access the generated assets?\n\nSuppose you're writing a Chrome Extension. These aren't loaded from a server. The bundle file is needed to be loaded from disk. Not adding this option requires setting up a separate Grunt watch task just to call webpack. That's messy since for other bundles I do want to load from the \"dev server\".\n. ",
    "justinjdickow": "I'll add my super random need for this as a +1.\nI am working on a proof of concept for a product that has an HTML5 UI on an embedded (vehicle) OS. The HTML talks to the embedded component over WebSocket and does not have any sort of internet access. There are points in the communication which the embedded component passes a path to the HTML5 app containing assets such as images for display. I am currently creating a tunnel so the app can grab the static files via ip + file path and running nginx on the embedded component to serve the static files (hack) while I run the web app from my mac on the same network. It would be ideal if I could run these on the same OS and launch the index.html file (referencing the compiled index.js file) into the web view so that its url is file:// instead of http:// so that it has access to the file system. To do this I need the compiled index.js (I think)\n. @gajus I did end up finding that and it worked perfectly for my needs. Thank you!\n. ",
    "Hosar": "@gajus excelent plugin, thanks!\n. I'm also getting the same error:\nGET /sockjs-node/info?t=1470203121020 404 8.530 ms - 45\nGET /sockjs-node/info?t=1470203123328 404 1.403 ms - 45\nGET /sockjs-node/info?t=1470203125639 404 0.776 ms - 45\nI'm using:  \"express\": \"^4.14.0\", \"webpack\": \"^1.13.1\", \"webpack-hot-middleware\": \"^2.12.2\", \"webpack-middleware\": \"^1.5.1\".\nAny help is appreciated.\n. ",
    "Kos": "Thank you for the plugin @gajus! For the record, my use case is I'm running selenium tests which expect a bundle to be there on the file system. Currently we're all running webpack dev server, but whenever someone wants to run a selenium test they need to remember to kill the dev server and run webpack --watch instead.. Thank you for the plugin @gajus! For the record, my use case is I'm running selenium tests which expect a bundle to be there on the file system. Currently we're all running webpack dev server, but whenever someone wants to run a selenium test they need to remember to kill the dev server and run webpack --watch instead.. @SteveGBanton I don't think that would provide good usability - most users expect Ctrl+C to be instantenous and a webpack run can easily take half a minute.. @SteveGBanton I don't think that would provide good usability - most users expect Ctrl+C to be instantenous and a webpack run can easily take half a minute.. ",
    "georgiosd": "Very strange that this is not supported. I'm using webpack to write an electron app and since the main module can't really be hot-reloaded, this is a pain in the behind. I have to stop the dev server every time, build, and watch again.. Very strange that this is not supported. I'm using webpack to write an electron app and since the main module can't really be hot-reloaded, this is a pain in the behind. I have to stop the dev server every time, build, and watch again.. Sigh... one of those things where you try again with a fresh head and it doesn't break, as if fatigue made you see errors where there were none.\nI'm not seeing this today, closing for now, sorry for the inconvenience, should have waited until the morning to open the issue.. Sigh... one of those things where you try again with a fresh head and it doesn't break, as if fatigue made you see errors where there were none.\nI'm not seeing this today, closing for now, sorry for the inconvenience, should have waited until the morning to open the issue.. ",
    "simon-paris": "It doesn't seem right that I need a plugin for this.\nOur use case is this: Some of our developers prefer webpack --watch and some prefer webpack-dev-server. We have a button in our app to switch between them. But because the dev server doesn't output files, I need to build with plain webpack first so that I can reach that button.. > Whats the problem with using a plugin?\nI feel like this should be a built in behavior.. ",
    "ashish-chopra": "Thanks @gajus. After a long search related to emit usecase i landed upto this thread and found your plugin a Savior. THanks. +1 for your plugin.. Thanks @gajus. After a long search related to emit usecase i landed upto this thread and found your plugin a Savior. THanks. +1 for your plugin.. ",
    "cchamberlain": "I am writing a C# => TypeScript transpiler plugin. TypeScript editors / type checkers require hard files on disk. Currently detecting if I'm running in watch and using fs.writeFile to emit assets, otherwise I use the assets object. It would be nice to be able to route assets to avoid less differences in dev / prod code paths.. I just started getting this with webpack-hot-middleware today and the cause was a recent refactor of my webpack config builder to es6, now using export default.\nFix for me was to change require('../webpack.config') to require('../webpack.config').default in my server code that wires up the hot middleware. Boils down to the same issue with not having a path set, would be good to have an assert in webpack with a more useful message.\n. @karolyi that is the documented way that it works. When using the WebpackDevServer from node API it doesn't get devServer configuration from the compiler per:\n\nIf you want to specify it in the config simply:\n```js\n  const config = require('./frontend/webpack/config.dev-server')\nconst compiler = webpack(config)\n  const server = new WebpackDevServer(compiler, config.devServer)\n```. ",
    "SteveGBanton": "@anuja8275 @simon-paris @ashish-chopra What if you just use: \n\"start\": \"./node_modules/.bin/webpack-dev-server && ./node_modules/.bin/webpack\"\nin your package.json? Dev server runs first and you make your edits. When done you ctrl-c to close the terminal process and webpack will automatically start to create the file system bundle.. @Kos You're right, might be a bit awkward in some cases. This also works for me:\n\"scripts\": {\n    \"start\": \"./node_modules/.bin/webpack-dev-server\",\n    \"start-disk\": \"./node_modules/.bin/webpack --watch\"\n  }\nRun 'npm start' first, then 'npm run start-disk' in a separate terminal window. You can develop with webpack-dev-server and bundle is automatically written to disk at the same time through webpack --watch... Might need to delete your bundle file to start.. ",
    "feusebio": "I had some problems to get file bundled in dir that i want, the problem was because i run webpack in Windows, and i had to change the slash in paths.\nEx: context: __dirname + '/resources/assets/js', to context: __dirname + '\\\\resources\\\\assets\\\\js',. I had some problems to get file bundled in dir that i want, the problem was because i run webpack in Windows, and i had to change the slash in paths.\nEx: context: __dirname + '/resources/assets/js', to context: __dirname + '\\\\resources\\\\assets\\\\js',. ",
    "asumaran": "I've spent 20 minutes reloading and deleting node_modules and reinstalling everything just to find out webpack-dev-server doesn't write to disk. Usually I want to check what in the bundle is changing or sometimes I want to check how the code is generated (for technical purposes) That's why I think it's useful to have an option to write the generated files to disk so I can check them in my own editor to inspect changes.\n. I've spent 20 minutes reloading and deleting node_modules and reinstalling everything just to find out webpack-dev-server doesn't write to disk. Usually I want to check what in the bundle is changing or sometimes I want to check how the code is generated (for technical purposes) That's why I think it's useful to have an option to write the generated files to disk so I can check them in my own editor to inspect changes.\n. ",
    "herzinger": "@gajus great plugin, thanks!\nThat being said, I'm also of the opinion it should be integrated in the core project, as an optional flag. I don't even have a complicated user case, I just like to see what's being outputted right there in my ide whenever I want to. I don't believe I'm alone in that. . @gajus great plugin, thanks!\nThat being said, I'm also of the opinion it should be integrated in the core project, as an optional flag. I don't even have a complicated user case, I just like to see what's being outputted right there in my ide whenever I want to. I don't believe I'm alone in that. . ",
    "veetil09": "@gajus Hey, thanks for the plugin. You may want to surround the fs.writeFileSync(relativeOutputPath.split('?')[0], assetSource); in a try-catch since it can throw an exception.. https://github.com/gajus/write-file-webpack-plugin/pull/47\nOn Tue, Sep 26, 2017 at 4:46 AM, Gajus Kuizinas notifications@github.com\nwrote:\n\n@gajus https://github.com/gajus Hey, thanks for the plugin. You may\nwant to surround the fs.writeFileSync(relativeOutputPath.split('?')[0],\nassetSource); in a try-catch since it can throw an exception.\nPR welcome.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/62#issuecomment-332130060,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFxjB8FxSj9fYXuYCUkmRSlKir5wqHtPks5smLnXgaJpZM4Cl6x8\n.\n. \n",
    "valorloff": "This feature is highly needed for HMR universal apps, when need re-bundle server and send changed client.bundle to the client. ",
    "heisian": "@everyone I see at least two viable solutions provided here in this thread so let's make a couple things clear before we keep asking to add more stuff:\n1) ANY addition to webpack functionality is by nature a plugin. So if you think writing to disk should be an option and not a plugin, guess what, any way you slice it it will be a (internal) plugin.\n2) @gajus 's solution which I'm about to try out! https://github.com/gajus/write-file-webpack-plugin\n3) @chikara-chan 's super easy plugin which I will try first.\nNow, the reason I want write-to-disk is b/c I need to be able to make server-side changes without having to re-compile the client from scratch when the server restarts. I am aware of chokidar watching for require.cache deletion, but it didn't work at all in my case.\nI've separated out the processes, but the only way I see the forked server process being able to get the references to the webpack assets in-memory is via node's IPC channels (someone correct me if I'm wrong!).\nWhile probably the best/correct solution, I don't really want to mess with it when serving static files on disk is trivial in comparison. Being able to use HMR w/ that absolute path on-disk would be so easy I could eat an everything bagel with morning coffee, take a dump, and read the paper while still filling my daily quota of code lines. Let's see if this works.... @everyone I see at least two viable solutions provided here in this thread so let's make a couple things clear before we keep asking to add more stuff:\n1) ANY addition to webpack functionality is by nature a plugin. So if you think writing to disk should be an option and not a plugin, guess what, any way you slice it it will be a (internal) plugin.\n2) @gajus 's solution which I'm about to try out! https://github.com/gajus/write-file-webpack-plugin\n3) @chikara-chan 's super easy plugin which I will try first.\nNow, the reason I want write-to-disk is b/c I need to be able to make server-side changes without having to re-compile the client from scratch when the server restarts. I am aware of chokidar watching for require.cache deletion, but it didn't work at all in my case.\nI've separated out the processes, but the only way I see the forked server process being able to get the references to the webpack assets in-memory is via node's IPC channels (someone correct me if I'm wrong!).\nWhile probably the best/correct solution, I don't really want to mess with it when serving static files on disk is trivial in comparison. Being able to use HMR w/ that absolute path on-disk would be so easy I could eat an everything bagel with morning coffee, take a dump, and read the paper while still filling my daily quota of code lines. Let's see if this works.... Alright the above doesn't really work because webpack-hot-client does us the gracious service of updating browser assets via websocket and I was trying to cut that part out completely.\nSo! I still need a mechanism to have the server server and the client server as separate processes... more easily done by simply having two servers on two different ports.. pretty much negating the need to write anything to disk in dev. ciao. Alright the above doesn't really work because webpack-hot-client does us the gracious service of updating browser assets via websocket and I was trying to cut that part out completely.\nSo! I still need a mechanism to have the server server and the client server as separate processes... more easily done by simply having two servers on two different ports.. pretty much negating the need to write anything to disk in dev. ciao. ",
    "paulomunoz": "@sokra:\n\nBut why would you need to access the generated assets? This shouldn't be required.\n\nI would normally agree with you, but at this moment I am trying to use Visual Studio Code debugging tools to debug my app, and it only works if you provide it with the file location in disk. I used https://github.com/gajus/write-file-webpack-plugin to do the trick, and that worked fine.\nNormally I would not want it to be written in the disk though, so I'll see if I can separate this in a different npm script or something like that!. ",
    "Matchlighter": "Just my two cents: My project's backend is written in Python using Django. The Webpack HTTP Plugin just wouldn't cut it for my multiple-entry application, so I wrote a plugin to make Webpack write a file with all of the chunks it output and all of their required chunks. Django could then read that file and add the appropriate HTML tags. That blows up when Webpack doesn't spit out any files.\nI will admit that the use case are few, but they do exist. @gajus plugin worked dandily. At least an official link in the README would be nice.. ",
    "euclid1990": "I have released a plugin that solved this problem \nhttps://github.com/euclid1990/write-assets-webpack-plugin. I have released a plugin that solved this problem\nhttps://github.com/euclid1990/write-assets-webpack-plugin. ",
    "TacB0sS": "Extremely late for the party, but my 2 cents on this:\nYou are correct that when you are busy in developing your page and components and styles and apis, this is somewhat redundant, but when you are configuring your environment, adding third party sdks, scripts, configurations, files (and god know what other requirements they have) all that while maintaining dev and prod (maybe also staging) configurations.. things gets complicated, and although I can just execute webpack instead of webpack-dev-server and see the results, I do prefer to catch as many bird in one run... \nAnd since you refuse adding a flag to do it.. you force us, and I do believe most of us, to just use a plugin even if just to save us few seconds every time.. cause these few second pile up eventually, and personally I hate wasting my time for no god reason.. Extremely late for the party, but my 2 cents on this:\nYou are correct that when you are busy in developing your page and components and styles and apis, this is somewhat redundant, but when you are configuring your environment, adding third party sdks, scripts, configurations, files (and god know what other requirements they have) all that while maintaining dev and prod (maybe also staging) configurations.. things gets complicated, and although I can just execute webpack instead of webpack-dev-server and see the results, I do prefer to catch as many bird in one run... \nAnd since you refuse adding a flag to do it.. you force us, and I do believe most of us, to just use a plugin even if just to save us few seconds every time.. cause these few second pile up eventually, and personally I hate wasting my time for no god reason.. ",
    "dschissler": "Am I doing this wrong by additionally adding a script tag at the beginning to /webpack-dev-server.js?\nI think that I'm going to disable this live reloading for the moment since its only causing problems for me.\n. I'm not 100% sure and I'll give it another round of testing.  It should be easy to verify that this is in fact what is causing it.\n. Yes it appears to be making Firefox double submit.  It was easy to test and it does this for me on a Windows VM with no extensions as well.\n. I suppose that I will need to make a video as proof and also to test it again.\n. Fixed.  My fault with document loading with the complex locale init system.\n. It turns out that I'm having an issue with my nginx proxy.  I want to have the option of using https in my dev environment with all of the XSS restrictions but otherwise I'll just use localhost.\n. I haven't had it working for a very long time but I recently did a lot of work to it and I still don't have it working because I am now running the dev server on a VM with a fake domain name.  I think that this might be a known issue with proxies but I haven't looked into it much.  Should this be closed?\n. I've been caught twice now trying to upgrade Webpack during late beta and getting through the config changes only to realize that it was a waste of time since webpack-dev-server wasn't yet supported.  This happened to me on v1 -> v2 and now v3 -> v4.\nI have a question if the serious developers are not using dev-server in their big projects because I can't see how it would be ideal to do a final beta when the two haven't yet been tested together to see if there are unforeseen limitations.  The dev-server isn't as first class as I'd like.  I guess that for now I'll just set this code aside, rollback, remove npm links.  Its annoying.. ",
    "aksonov": "It seems I can't use require('xmlhttprequest').XMLHttpRequest for web?\n. ",
    "codeboyim": "according to @jhnns 's answer, adding this to the externals in webpack.config.js fixed Parse for me.\njs\nexternals:[{\n    xmlhttprequest: '{XMLHttpRequest:XMLHttpRequest}'\n}]\n. ",
    "ShuaiYuan87": "Hi @jhnns I tried to use an alias for the xmlhttprequest module. The way I did is I created a dummy a.js file and I put module.exports = XMLHttpRequest; in it. In my make-webpack-config.js I have \nvar alias = {\n        xmlhttprequest$: \"./a.js\"\n    };\nNow when I start production server I have error \nmodule.exports = XMLHttpRequest;\n                     ^\nReferenceError: XMLHttpRequest is not defined\nIt seems webpack cannot find XMLHttpRequest (the original one supposedly is supported by the browser?) Is there something I'm missing?\nThanks!\n. ",
    "thiagoh": "this worked for me\n```\nconst nodeExternals = require('webpack-node-externals');\nmodule.exports = {\n  //... webpack configs..\n  externals: [nodeExternals()], // in order to ignore all modules in node_modules folder from bundling\n};\n```. ",
    "remoe": "ok, thanks.\n. But how can i define a subfolder in the configuration of the devserver to run the following default index.html:\nhtml\n<html>\n  <body></body>\n  <script src=\"build/build.js\"></script>\n  <link rel=\"stylesheet\" media=\"all\" type=\"text/css\" href=\"build/styles.css\">\n</html>\n?\nCurrently it only works without a subfolder. I don't want to change my index.html only for the devserver.\n. I had a ssl cert issue. I haven't seen this in the console:\nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L149\nI use now:\njavascript\n    proxy: [\n      { path: '/', target: 'https://localhost:3000',\n        secure: false,\n        ssl: {\n          key: fs.readFileSync('./key.pem','utf8'),\n          cert: fs.readFileSync('./cert.pem','utf8'),\n          ca: fs.readFileSync('./ca.pem','utf8')\n        }\n      }]\n. ",
    "amaschas": "I think I'm having a similar problem, which I noted in #485. I think one of the big problems here is that the documentation on publicPath is incredibly vague, both in the webpack docs and the webpack-dev-server docs. I'm not sure what exactly I'm supplying a path to, and I've tried many strings for the path, but none of the results in HMR working if contentBase is more than one level below the root dir.\n. ",
    "steida": "My config:\njs\n// It suppress error shown in console, so it has to be set to false.\nquiet: false,\n// It suppress everything except error, so it has to be set to false as well\n// to see success build.\nnoInfo: false,\nstats: {\n  // Config for minimal console.log mess.\n  assets: false,\n  colors: true,\n  version: false,\n  hash: false,\n  timings: false,\n  chunks: false,\n  chunkModules: false\n}\n. @maspwr Feel free to copy/past from or into https://github.com/steida/este\n. Or gulp-notify. I tried almost everything, and it seems it's impossible to hook webpack-dev-server errors in gulp or whatever. \n. Or gulp-notify. I tried almost everything, and it seems it's impossible to hook webpack-dev-server errors in gulp or whatever. \n. Pardon my ignorance, but what exactly I should do to prevent this message? It worked with previous webpack. Do I have something wrong in my settings? https://github.com/steida/este/tree/master/webpack\n. Pardon my ignorance, but what exactly I should do to prevent this message? It worked with previous webpack. Do I have something wrong in my settings? https://github.com/steida/este/tree/master/webpack\n. Didn't help, same behavior :(\n. Didn't help, same behavior :(\n. I think I got it. Piping is restarting server, and it seems also webpack-dev-server is restarted.  https://github.com/steida/este/blob/master/src/server/index.js#L3\nThank you for directing me.\n. I think I got it. Piping is restarting server, and it seems also webpack-dev-server is restarted.  https://github.com/steida/este/blob/master/src/server/index.js#L3\nThank you for directing me.\n. ",
    "ntdb": "@steida Thank you, this is exactly what I was looking for.\n@kentcdodds The stats config definitely works for me. My frontend scaffold is a lightweight example (webpack version 1.10.1).\n. ",
    "bjunix": "Where is the stats config option documented? If it's not documented, is there in issue for the missing documentation?. ",
    "dan-kez": "Sorry for commenting on an old thread.\nIf others end up here looking for a way to show the startup url on webpack-dev-server initialization (e.g. localhost:3000) but not have a mess in the console this config worked for me:\nJS\n  stats: {\n      all: false,\n      // Show the url we're serving at\n      wds: true,\n      // Config for minimal console.log mess.\n      assets: false,\n      colors: true,\n      version: false,\n      hash: false,\n      timings: false,\n      chunks: false,\n      chunkModules: false,\n    },\nThe wds key is not documented so far as I can tell.\n. ",
    "crucialfelix": "You can close this now. PR was merged.\n. ",
    "JulianIsrael": "I think this is still happening for me, I'm currently on 1.16.2\n. ",
    "tsm91": "i think i still got this problem as well\nconfig.devServer = {\n    contentBase: AOT ? './src/compiled' : './src',\n    port: CONSTANTS.PORT,\n    historyApiFallback: {disableDotRule: true},\n    host: '0.0.0.0',\n    headers: { 'Access-Control-Allow-Origin': '*' },\n    watchOptions: DEV_SERVER_WATCH_OPTIONS\n  };\nXMLHttpRequest cannot load http://localhost:3030/api/v1/cli/ssh. Redirect from 'http://localhost:3030/api/v1/cli/ssh' to 'http://localhost:3000/offline.html' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\n```\nGeneral\nRequest URL:http://localhost:3030/api/v1/cli/ssh\nRequest Method:GET\nStatus Code:307 OK (from ServiceWorker)\nRemote Address:127.0.0.1:3000\nResponse Headers\nlocation:http://localhost:3000/offline.html\nRequest Headers\nProvisional headers are shown\nReferer:http://localhost:3000/cli/add-project\nUser-Agent:Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.90 Safari/537.36\n```\nif (evt.request.headers.get('x-sw') === SW_TYPES.nav) {\n    evt.respondWith(Response.redirect('/offline.html', 307));\n  }\n. ",
    "sheprdinc": "i'm using axios, but could use fetch... to be honest, i care far more about why this issue is happening in production rather than in dev mode, but unfortunately all of my google searches return solutions only for devServer ... any one figured this out with a production setting in webpack? this cors issue is killing me, trying to get data from google maps api using restful endpoint, gmaps library not an option. ",
    "yanlee26": "How about chrome's extensions??. ",
    "jogshraddha": "I am facing same issue when I have added node serialport package in my application\n\n_Module not found: Error: Cannot resolve module 'child_process' in /project/node_modules/serialport/lib/bindings\n\nMy application is created using create-react-app and electronjs. I googled it and the solutions mostly suggested are related to webpack config which I can not directly modify in create-react-app. I tried those solutions like adding 'target: node' and external config etc by ejecting create react app but that also did not work. \nBefoe adding serialport package it was working properly now it looks up for the child_process package into serialport libs. \nCan someone help me out in this? \n. ",
    "abrkn": ":+1:\n. ",
    "ocyedwin": "Hi @ArnoBuschmann , did you manage to find a good solution? I'm having the same problem.\n. @wmertens okay, thanks!\n. ",
    "raineroviir": "I wasn't able to use socket.io + webpack-dev-server.  But like @jhnns mentioned using webpack-dev-middleware in addition to https://www.npmjs.com/package/webpack-hot-middleware gives you hot-reloading without webpack-dev-server\n. ",
    "scottmcnab": "I think this issue could be fixed if #220 was implemented? Then the hot loader could listen to a custom url path that does not conflict with the app, such as /__webpack-dev/socket.io \n. ",
    "mlucool": "I am running into the same problem, is there any better solution than rename the apps io path (which will likely leads to more problems down the road)?\n. ",
    "MoOx": "Indeed it seems to be something like that, I fixed my issue by changing\njs\n{test: /\\.js$/, loaders: [\"react-hot\", \"6to5\", \"jsx\"]},\nto\njs\n{test: /src\\/.*\\.js$/, loaders: [\"react-hot\", \"6to5\", \"jsx\"]},\n. Thanks !\n. Thanks for the tip.\n. The thing is: the default config defined by yarg create an argv[\"content-base\"] so indeed, when you define contentBase via webpack.config.js devServer section, your option is overridden by the code testing the argv.\n. This fix looks good to me!\n. Maybe we could display a warning if a user specify both? Would help a lot :)\n. The tricky part is that argv[content-base] is filled by default, so very tricky to catch when the user specify something from here...\n. > But if there is no other way, that's better than nothing.\nDo not add default in yargs? (and define default later, like it was before)?\n. Don't have the time atm. Sorry :)\n. lgtm! Thanks for the reactivity!\n. ",
    "christianalfoni": "Aha, that explains it :-) But  how to I change the html file launched by\ndev-server, it creates this \"behind the scenes by default\"\nThanks for the help!\nOn Saturday, December 6, 2014, Tobias Koppers notifications@github.com\nwrote:\n\nis being put into my /build folder either\nthe dev-server bundles in memory.\nUncaught ReferenceError: webpackJsonp is not defined\nYou need to include a ",
    "rhumlover": "Got the same, actually fixed it with this comment: https://github.com/webpack/webpack/issues/497#issuecomment-56948560\n\njust got it working with this config:\nentry: [\n    'webpack/hot/dev-server',\n    ...\n],\noutput: {\n    filename: 'www/index.js',\n    publicPath: '/'\n},\nplugins: [\n    new webpack.HotModuleReplacementPlugin()\n]\n. \n",
    "jure": "I had the same issue and while @rhumlover's solution above works, if I understand it correctly, it also puts all of the assets in the root folder?\nIn any case, specifying a full URL in publicPath is what worked for me, before that the hot updates wanted to be loaded from nonexistent nested path (where my app resides, i.e. /admin/assets), instead of the root /assets folder.\nvar publicPath = \"http://localhost:3001/assets/\"\n. ",
    "justin808": "@SpaceK33z I doubt it, but I really don't know. Probably not.\n. ",
    "blackmiaool": "Hey guys~ This problem perplexed me for several hours, and finally I got a solution:\njavascript\n   output: {\n        path: BUILD_DIR,\n        filename: 'bundle.js',\n        publicPath: '/',\n        hotUpdateChunkFilename: 'hot/hot-update.js',\n        hotUpdateMainFilename: 'hot/hot-update.json'\n    }\nWe can just remove the annoying hash by adding the last two params above to the webpack's config file.\n@justin808 \n. It's just a solution for those who always gets 404 error. You can turn off cache in settings panel of chrome's developer tools:Disable cache (while DevTools is open).  @Jacksing \n. ",
    "jackrole": "@blackmiaool Would it caught a cache problem in browser if use a static output filename?\nWebpack, Hot Module Replacement and the public path could be a slightly better solution.\n. ",
    "timothyerwin": "I was getting this until I think I added a catch all route in express to send the index.html...I'm not sure why. maybe it calls next() instead of terminating at the response. This still seems wrong but it's working for now.\n```\napp.use(webpackDevMiddleware(compiler, { publicPath: config.output.publicPath}));\napp.use(webpackHotMiddleware(compiler));\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'web/index.html'));\n});\n```. I was getting this until I think I added a catch all route in express to send the index.html...I'm not sure why. maybe it calls next() instead of terminating at the response. This still seems wrong but it's working for now.\n```\napp.use(webpackDevMiddleware(compiler, { publicPath: config.output.publicPath}));\napp.use(webpackHotMiddleware(compiler));\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'web/index.html'));\n});\n```. ",
    "Ashoat": "I am curiously getting some perhaps related issue where the hashes generated by the server end (webpack-dev-server) and printed to the bash console don't match the hashes requested by the client and printed to the browser JS console. I was able to circumvent it by using @blackmiaool hack above.. ",
    "iddan": "@blackmiaool  you saved my life, thanks. ",
    "eugeniaguerrero": "@blackmiaool thank you so much! . ",
    "nickosepulveda": "var server = new WebpackDevServer(webpack(config), {\n  headers: { \"Access-Control-Allow-Origin\": \"*\" }\ufeff, //Magic line, try it\n  publicPath: config.output.publicPath,\n  hot: true,\n  stats: { colors: true}\n});. ",
    "samuelalvin": "\nWe can just remove the annoying hash by adding the last two params above to the webpack's config file.\n\nI've tried @blackmiaool 's solution and it works for me. Thank you!. ",
    "alexdriaguine": "I have the same problem as @blackmiaool and @Ashoat. When having a syntax error or something that makes webpack compile with errors, upon fixing the error the hashes from the server and the client mismatch. \nSeems like the server responds with the next hash, but after fixing the error, another hash is generated while the client is still trying to access the old hash. Omitting the hash seems to fix this. \nThe problem seems to be that the client does not update the next hash when HMR compiles with errors... I have the same problem as @blackmiaool and @Ashoat. When having a syntax error or something that makes webpack compile with errors, upon fixing the error the hashes from the server and the client mismatch. \nSeems like the server responds with the next hash, but after fixing the error, another hash is generated while the client is still trying to access the old hash. Omitting the hash seems to fix this. \nThe problem seems to be that the client does not update the next hash when HMR compiles with errors... ",
    "Kagami": ":+1:\nSeems like it was already done by @wrobel in his fork: https://github.com/wrobel/webpack-dev-server/tree/feature/variablehostname\nAlso it's a good pratice to bind dev servers only to localhost by default (now webpack-dev-server listen on 0.0.0.0) because of the security measurements.\n. This feature was already merged and released, see: https://github.com/webpack/webpack-dev-server/commits/master (PR #83).\n. I think it was already realesed: https://www.npmjs.com/package/webpack-dev-server (1.7.0)\n. ",
    "madebyherzblut": "We are using webpack inside a virtual machine and it would be nice to bind it something else than localhost. So :+1: \n/edit: Never mind, I just realized the option is already available as of 1.7. Thanks!\n. ",
    "gabel": ":+1: \n. ",
    "Radivarig": "I did that but it turns out I had to install jade package with my os's package manager not globally or locally with npm, I use archlinux so I yaourt nodejs-jade after that npm run prepublish worked.\n. ",
    "jonnyzzz": "Sorry. This is local issue not for the project.\n. ",
    "evandrix": "Closing issue: just realised from here that you shouldn't be doing --hot and new webpack.HotModuleReplacementPlugin() in webpack.config.js > plugins: [] section simultaneously.\n. ",
    "chibicode": "Ran into the same issue. Fixed by removing webpack.HotModuleReplacementPlugin() from config and keeping --hot.\n. ",
    "fgarcia": "I've read about doing the exact opposite, and in the walkthrough linked in the readme suggests using the Plugin, but I also fixed this problem using the command line.\n. Touching the stdout seems kind of scary to me. I try to avoid similar approaches since I always caused more pain than glory taking that approach, specially when more than one of the combined tools require that. I never managed to integrate well tools that require touching the stdout/stderr.\nFrom my point of view the easiest solution would be passing a custom logger parameter (or custom 'console'). A more versatile solution would be having the server to emit different types of signals and run completely silent. However if not many people need this feature, it would be better to just have the first approach. Less intrusive, less feature creep and the option for a custom logger is a very common pattern.. My main concern when requesting features is not asking for low value features that increase the feature creep of free projects. I understand my use-case might not be common, so if this issue gets closed, at least I would like to write down my case story:\nBasically I want to solve my \"one command to start working\" job. It is great having webpack as compiler and webserver, but I also need to start my backend (and sub-services / worker), get my tests to recompile if a file is modified, sync all my devices with browsersync...\nOne tool for this job is Foreman, however I like building my one \"start.js\". Not only I want one terminal window with all my development activity / traces, I want to fine tune the amount of noise I must track.\nFrom webpack I only want to know two things\n- if it starts [re]compiling \n- if the result was an error or success\nNow I don't think the \"provide custom logger\" is what I would like the most. I guess running in total silence \"quiet mode\" and emitting those two signals would be best. If people need more signals, they can open a new issue and explain the new ways they want to extend the tool. ops, now after writing I realized that the title of this issue no longer represents my real issue :scream:. ",
    "mrdulin": "@chibicode work for me!\n. @SpaceK33z no, I want to add a breakpoint in bypass. Not console.log\n. @koddo Same issue with you. The NoErrorsPlugin, I made a syntax error to test this plugin,  but it seems not work.\n. @SpaceK33z  Thanks for answer.\njson\n \"webpack\": \"^1.12.13\",\n \"webpack-dev-server\": \"^1.14.1\",\n. @SpaceK33z Yes. I use npm-check-updates to upgrade webpack-dev-server from ^1.14.1 -> ^1.16.2\uff0c this error gone.  Is this error a bug or something?\n. @SpaceK33z Thanks. I wrote a demo to test it. But it seems nothing different.\nI made a syntax error to test it . But both of them reload the browser. Am I correct?\n. @SpaceK33z OK, thanks. sorry for that.\n. @SpaceK33z OK, thanks. sorry for that.\n. save issue. \nSyntaxError: Use of const in strict mode.\nI fallback webpack-dev-server from ^2.9.1 to ^2.7.1.\nThe error gone.. ",
    "asidiali": "Tried removing the plugin, didn't work. Removed --hot and it worked \ud83d\udc4d \n. ",
    "ambodi": "@sokra @scvnc I came across the issue and the leading ./ was the issue but why the webpack core package doesn't reflect on it and the dev server is throwing the error only? Isn't it inconsistent?\n. ",
    "0x80": "This just cost me a few hours of frustration trying to move an existing project from dev server to middleware. A validation of output.path and a little more descriptive error would be very welcome.\n. ",
    "zedd45": "I encountered this issue trying to find the middle-ground for :global / and :local for CSS modules styles, based on @sokra's comments, here: \nhttps://github.com/css-modules/css-modules/issues/59#issuecomment-144127638\nI did not modify path nor publicPath for my output for this task (nor for some time), but I do believe another misconfiguration on my part caused this same error (and thus led me to this post). \nIn my case, I was importing a stylesheet that had previously been local to a container component, but I switched the stylesheet to be global by default, and my build failed with the same error message.\nI believe my include (preferred) / exclude logic may have been to blame for this (webpack likely could no longer parse this file).  I was experimenting with this feature, and restructuring my CSS locally. \n. ",
    "s-panferov": "+1 for this. It also helps to setup rewrites for Single Page apps. But would prefer to use arguments instead of ENV for configuration.\n. ",
    "hellatan": "@sokra thanks! it was the contentBase (well, --content-base) that i had set incorrectly based on the article. I guess I could have just forgone that option after reading it over again.\n. @sokra i just tried this on a different computer and it seems to work. I'll have to see which versions I have loaded on my home computer to see.  These are the versions I'm using after doing a fresh npm install on my work computer:\n- webpack v1.4.14\n- webpack-dev-server v1.7.0\n. thanks @sokra. my home version was super old.\n. ",
    "tomchentw": "+1 on this\n. docker-osx-dev works great for me. Also its woking well with piping.\n. Any progress/changes on this PR? I'd love to help!. Any progress/changes on this PR? I'd love to help!. WOW!. ",
    "mysterycommand": "Okay, thanks for the quick feedback! Is there a \"config\" way to do what --inline does? Also, if I do devServer: { hot: true } I get a warning about deprecated configuration value (or something) \u2026\u00a0is it going away? What will replace it?\n. Cool, thanks again for the quick feedback. So, now I have an npm script like:\nbash\nwebpack-dev-server --config=./webpack.config.js --port=3000 --inline --hot\n\u2026 and a webpack.config.js like:\n``` javascript\n'use strict';\nmodule.exports = {\n    devServer: {\n        contentBase: './static',\n        stats: { colors: true }\n    },\n    entry: {\n        'main': './source/scripts/main.jsx',\n        'test': 'mocha!./test/manifest.js'\n    },\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n    module: {\n        loaders: [{ test: /.jsx$/, loaders: [ 'react-hot', 'jsx?harmony' ]}]\n    },\n    output: {\n        filename: '[name].js',\n        path: './build/js',\n        publicPath: '/js/'\n    }\n};\n```\n\u2026 so my question is, is there a way to achieve this result, but with an npm script like (all options/flags in the config):\nbash\nwebpack-dev-server --config=./webpack.config.js\n. ",
    "pyrotechnick": "For what it's worth: I managed to get this all working using webpack-hot-middleware/client rather than 'webpack-dev-webpack/client?http://localhost:8080'\n. Superseded by #412 \n. Superseded by #411.\nThank you @Hatlen ^w^\n. ",
    "nodesocket": "Confirmed that you have to do both. Add the hot: true property as well as include the plugin webpack.HotModuleReplacementPlugin(). When I didn't load the plugin, hot reloading did not work correctly.\ndevServer: {\n    contentBase: 'examples',\n    historyApiFallback: true,\n    hot: true,\n    inline: true,\n},\nplugins: [\n    new webpack.HotModuleReplacementPlugin()\n]\n. ",
    "mqliutie": "@pyrotechnick \nMy webpack.config.js is :\nentry: {\n    app: ['./src/client/app.js'],\n    vendor : ['angular']\n}\nAnd 'webpack.dev.config.js' is  :\nentry : {\n    app : ['webpack/hot/dev-server','webpack-hot-middleware/src/client']\n//  app : ['webpack/hot/dev-server','webpack-dev-webpack/src/client?http://localhost:3000']\n},\nAnd gulp.babel.js is :\n```\nwebpackConfig = require('./webpack.config');\nwebpackDevConfig = require('./webpack.dev.config');\nwebpackConfig.entry.app =  webpackConfig.entry.app.concat(webpackDevConfig.entry.app)\nnew WebpackDevServe(webpackConfig,{\n contentBase: \"src/client\",\n hot : true,\n stats: {\n    colors: true\n }\n}).listen('3000','0.0.0.0',function(err){\n if(err) throw new gutil.PluginError ('webpack-dev-server', err);\n})\n```\nIt doesn't work well. When I modified index.html browser was not reloaded.\nCan you help me?\nThanks\n. @pyrotechnick \nMy webpack.config.js is :\nentry: {\n    app: ['./src/client/app.js'],\n    vendor : ['angular']\n}\nAnd 'webpack.dev.config.js' is  :\nentry : {\n    app : ['webpack/hot/dev-server','webpack-hot-middleware/src/client']\n//  app : ['webpack/hot/dev-server','webpack-dev-webpack/src/client?http://localhost:3000']\n},\nAnd gulp.babel.js is :\n```\nwebpackConfig = require('./webpack.config');\nwebpackDevConfig = require('./webpack.dev.config');\nwebpackConfig.entry.app =  webpackConfig.entry.app.concat(webpackDevConfig.entry.app)\nnew WebpackDevServe(webpackConfig,{\n contentBase: \"src/client\",\n hot : true,\n stats: {\n    colors: true\n }\n}).listen('3000','0.0.0.0',function(err){\n if(err) throw new gutil.PluginError ('webpack-dev-server', err);\n})\n```\nIt doesn't work well. When I modified index.html browser was not reloaded.\nCan you help me?\nThanks\n. wow\uff01\uff01\uff01\nAlthough my contentBase is src/client ,\nwebpack-dev-webpack/client?http://localhost:3000 can't  be replaced by webpack-dev-webpack/src/client?http://localhost:3000\nIt has an extra src. \nIt works\uff01\n. @sokra wow, amazing\n. @sokra wow, amazing\n. ",
    "laggingreflex": "There's a typo propagating here: webpack-dev-webpack, it should be webpack-dev-server.\nThis works 'webpack-dev-server/client?http://localhost:3000' but I wanted to avoid the port. So this works too: 'webpack-dev-server/client?' with just a (but necessary) ? at the end (for some reason). \n. ",
    "rachmann": "I tried adding\nhot: true\n... nothing...\nI tried adding\nplugins: [\n    new webpack.HotModuleReplacementPlugin()\n]\nBut then I get \n\nC:\\WebSites\\ReactCourse\\webpack.config.js:22\n        new webpack.HotModuleReplacementPlugin()\n            ^\nReferenceError: webpack is not defined\n\nHelp...\n. ow - that was a dumb error on my part.. But is still didn't work. Infact, if I remove hot: true and the plugin and then just add   watchContentBase: true it works perfectly.. @shellscape Others have asked questions, but you only ask this of me? I love SO, but if you don't want to answer questions, then answer none.. ",
    "shellscape": "@rachmann that error means you haven't defined the webpack variable. that's JavaScript 101. if you need some resources on learning JS I'd be happy to shoot you some links if you ping me on twitter.. @rachmann glad you got the variable sorted. it should be noted that the issues here aren't support forums. I'd recommend heading to Stack Overflow and posting a question with more details on your setup.. @rachmann thanks for the feedback, but you might be taking that a little too personally. we do our best to stay on top of issues when they diverge into support requests. I'd ask that you let that go so the thread can remain on topic. Cheers \ud83c\udf7b . Closing in favor of #616. . @ito2307 please try using Stack Overflow for support questions. the issues here are debugging and improving the project itself.. Given the age the issue and the workarounds available, we're going to close this one. . Please see the releases. While we'd still love to get a PR for this enhancement, this issue is very old and for that reason and inactivity we're going to close. It doesn't appear to be affecting many users to the point where there's an urgent call for this change.. @olehmelnyk solid info. webpack-dev-server uses the opn module, and looking at that it does appear they provide for sending args to the browser command. \nhttps://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L463-L470\nSo in addition to checking if it's a string, we'd need to see if JSON can parse it, and if so, check to see it's got an app property; use the object if so, otherwise fall back to string. And we'd also have to check for an Object in the event that was specified in the devOptions in webpack.config.js.  Whew.\nI think might be a classic case of wds trying to do too much. What a better route might be, would be to petition the opn project to check for a config file that specified how to open certain things; in this case URLs. An .opnrc for example.. @olehmelnyk awesome that you found a solution. though it does make me just a tiny bit sad that it requires more webpack config. still, it works!. @alexlevy0 please avoid posting \"same\" or \"me too\" comments on a thread. Rather, use the reaction button an add a thumbs-up reaction to the OP or another comment. See here for more information on reactions. . @wesleymostien none yet. this is planned for the v3 work. protip: if there were commits against this issue/task, you'd see github list those referenced commits in this issue along with the comments - they make it easy to know if there's been progress without having to post follow-up comments \ud83d\ude04 . We're going to completely remove SockJS in favor of a native solution for v3, tracking in #1057. While this is still a valid issue, it'll be moot when that work completes, and so, closing.. @ggoodman the prefix won't be necessary in v3 because of the complete removal of SockJS in favor of native WebSocket. As of now, there isn't a solution for the 2.x branch. If this is something you're interested in submitting a PR for, we'll welcome and review it.. Closing due to age and inactivity. . #187 resolved the root issue that @SpaceK33z moved over from webpack. If there are errors being thrown please do report it as a bug separately and we can triage. If there's only difficulty in getting it to work, please head to StackOverflow or the webpack gitter for more discussion and peer troubleshooting. . @stevematdavies please try Stack Overflow or the webpack Gitter for support.. @stevematdavies please try Stack Overflow or the webpack Gitter for support.. Closing due to age and inactivity. . (for consecutive comments please use the 'edit' feature on the first comment)\nWe'd be happy to review a pull request that addresses this edge case.. None of the contributors here knew much about the internals until we decided to jump in and start poking around. If that's not something you're interested in, no worries, but don't let not knowing the module top to bottom stop you \ud83d\ude04 . @Zadvornyi please don't add \"me too\" replies to an issue. instead, please use the reaction buttons to add a thumbs up to a comment you're agreeing with, or the original post.. Closing due to inactivity. We'd still welcome a PR for this, however.. It appears that #749 fixed this issue, so closing. please ping me if that's not the case and we'll reopen the discussion.. @ezzaouia ping. closing because stale. please do ping if you have the chance to circle back to this. Pruning due to age, inactivity, and apparent solutions/workarounds.. Pruning due to age, inactivity, and apparent solutions/workarounds.. Pruning due to age, inactivity, and end of official support for IE9 (https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support). Since Microsoft has officially ended support for oldIE (https://www.microsoft.com/en-us/WindowsForBusiness/End-of-IE-support) we can safely close this one. Specific version support can be contributed if the workarounds are reasonable. . Closing due to age, inactivity, and that we're replacing SockJS with a native solution for v3.. Pruning due to age.. Pruning due to age. . Should be resolved in #813 and v2.7.1. If it's not, please ping me and we'll reopen.. Unfortunately I don't. We've had a few PRs related to this and I'm unable to reproduce the issue in any of our tests. If this is still occurring there's a better than average chance that it's your configuration or environment causing it. Sidenote: If you're not on webpack@3 yet, it's time to upgrade.. @DustinArmstrong that may be something the main webpack project can assist with - perhaps a console warning or some such.. We've got a few workarounds posted for folks running into the issue. It seems that this might be slightly edge casey, however. If anyone would like to put together a Pull Request, we'd happily review it and revisit this issue.. Closing due to issue age and inactivity. If anyone would like to put together and submit a pull request for this, we'd be happy to take a look at it. . @mnn we're trying to get the issues queue under control so that we can effectively and efficiently address incoming issues. please remember that folks volunteer their time for the project. some pruning had to happen (and still needs to happen). closing this wasn't unreasonable, and if it gains traction we'd certainly reopen it. but the best course would be to open a PR for the feature. . Translation of @1021683053 's comment: \"Your configuration is wrong, need to configure one\" and\n// This address must be the same as the server address in order to be retrieved from memory\nLooks like that's a solid workaround. . Closing this one due to age and inactivity. But please do continue the discussion and call me out if there is good reason to reopen. . @louisscruz @moimael @rolandfung we've had a few versions drop since this was first reported, are you still seeing the same issues on the latest?. Closing due to inactivity. Please ping me if this is still an issue with 2.7.1 and we'll reopen.. We're going to slate this feature for version 3. We'll be making Server extend EventEmitter that'll allow us to publish a host of events for consumers to use. We'll include the compile event in the slate of first-round events.. Closing issue as we're adding the afore mentioned EventEmitter in version 3 of the module. Given the complexities of doing in this in the 2.x branch, it's not likely to be given priority or acceptance at this time.. Pruning due to age, inactivity. . @sergeymorkovkin we need tests added to this PR for the new option. it'll become too difficult to manually test for each new version otherwise. @frankwinter needs to add that and resolve the conflicts recently introduced for this to get merged I'm afraid.. @frankwinter you'll have to remove the package-lock.json as well.. @shuijingleihen pull request discussions are not forums for support. Please ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack).. @tomchentw I think we're good. @frankwinter needs to resolve the conflicts that popped up. I'll be on vaca until 8/27 but can merge when I'm back. . @tomchentw I think we're good. @frankwinter needs to resolve the conflicts that popped up. I'll be on vaca until 8/27 but can merge when I'm back. . Going to assert the suggestion to make this feature request with http-proxy-middleware so we can consume an option rather than implement it standalone in webpack-dev-server. We can revisit this issue should there need to be any work on this end.. @ebardajiz probably \ud83d\ude04  but in all seriousness, try applying your config to a known-working use of the API by forking this repo and copying your config over to https://github.com/webpack/webpack-dev-server/tree/master/examples/node-api-simple. If it works, then it's something else in your project. If it doesn't work, then it's a webpack config issue.. Pruning due to age and inactivity.. @jamesblight in working on version 3, we've removed SockJS for sockets across the board, instead replacing it with ws for a WebSocket Server, and native WebSocket on the client. Unfortunately, that move has \"broken\" tests for proxying WebSockets. The test has been moved here, on the refactor-lib branch https://github.com/webpack/webpack-dev-server/blob/refactor-lib/test/tests/proxy.js#L199. Any chance you would be willing to take a look a this setup? I've been so far unsuccessful in getting it to work. . @theBull because most folks will benefit from learning how something works versus being fed answers. given the age of this issue, I'd also wager that keez can tell it's user error based on given input and output, but can't say specifically what it is given the limitation of info in the issue. Hashes are also an issue with webpack proper, rather than webpack-dev-server.\nI'll add that it appears you stopped by just to drop a comment that had no real purpose other than to try to paint keez as a jerk. We don't welcome that here.. If anyone can post a link to a simple repo using current dependencies/versions, with vanilla js and without using a framework, that consistently reproduces these symptoms, we'll be happy to take a look and attempt triage. At present none of our tests or examples reproduce this behavior.\nWe're going through issues to try and get the number of them under control so we can more effectively help folks. Closing this one due to age and lack of ability to reproduce, but the discussion is still open. If someone can provide that sample repo, we'd be happy to reopen. . @jonaskello thanks for putting that together. I have a backlog to get through so it might take me until next week to get to debugging this one. Please ping me again if more than 7 days goes by. And as always we'd be happy to review a PR.. @dannyskoog thanks for the ping. unfortunately not. still working on the backlog. that shouldn't discourage anyone from looking into it and opening a PR in the meantime.\nFor what it's worth, you can also try webpack-dev-server@next for the latest alpha of v3 to see if this still happens on that branch. /cc @jonaskello . @jonaskello style-loader was in devDeps, which is why it was passing in our CI. I moved that to deps and published alpha3, which should clear that error up.. @bebraw is this still in progress?. This one is a bit outside my wheelhouse. Hopefully @SpaceK33z can loop back to take a look.. Sadly this isn't something that will happen for webpack-dev-server. RIP wds plugins. . Original issue as reported should be resolved in 400b2896c79f55c6928d59aebfb773b6e037b8ef. Closing due to age and commit. . That commit is in the latest version, yes.. @afhole not sure where you got that. works fine for me.. @afhole I'm not sure about that one I'm afraid.. Correct. @mrtnbroder this is where Git blame comes in handy; Add setup option to prepend custom middlewares #279. In the context/angle you're viewing this from, the middleware ordering doesn't look correct because of the behavior you're seeing and the goal you're trying to achieve. However, there was a good reason that setup was added before middleware in this case. It's always important to try and find the \"why\"\nwhen something looks off or peculiar. \nSo I'd argue that we don't want to move the position of setup in the order. Rather, pre and post can be positioned around middleware without constituting a breaking change or interfering with the original intent of setup. . I'm not sure I agree with your proposed approach. I see pre replacing setup (\"setup\" is rather ambiguous anyhow) and setup being deprecated. Here's what I would prefer at the moment:\njs\nconst server = new Server(compiler, {\n  middleware: {\n    pre: () => { },\n    post: () => { }\n  }\n});\nand while I'm thinking on it, a better pattern here that everyone is probably already familiar with if they've done any kind of test writing:\njs\nconst server = new Server(compiler, {\n  middleware: {\n    before: () => { }, // applied before the built-in middleware\n    after: () => { } // applied after the built-in middleware\n  }\n});\nbefore would be synonymous with setup and setup marked deprecated. after would have to be pushed to defaultFeatures before the call to createServer.\n. Perhaps in the context of a webpack Rule loader it makes more sense. But in terms of middleware, I don't believe it's a better choice than before and after. . If someone can provide a simple test repo that we can reproduce this error with, we'd be more than happy to reopen and triage. Until then we're closing this one due to it's age.. Folks, please don't follow up with \"same\" or \"me too\" comments unless you have additional info, aside from your environment/os, to add to the original issue. Please use the reaction button to add a \ud83d\udc4d to the original post. \nThat said, we'd happily review a pull request for this issue. . This issue is quickly coming up on a 30-day stale date. Last call for a PR from the community. However, it looks like this issue is the cause of many different edge cases amongst those who have replied. . folks, we've got a few workarounds listed in this issue for various cases that produce the same result. we'll reopen if someone can nail down a specific culprit within webpack-dev-server to discuss, and as always we'd happily accept a PR for review. given the age of this issue, the multiple edges that this can be experienced on, and the multiple workarounds, we're going to close this one.. I'd recommend first and foremost updating your dependencies - they're pretty far out of date. david is a great module to help facilitate updates. I'd also check your node version just to be thorough. If that doesn't solve your issues, then we're going to need a test case app in a repo in order to be able to reproduce. This is just one that we've never really seen before. If that test case repo is created and posted here we can revisit this issue.. @viridia out of curiosity, have you tried using webpack-dev-middleware independently to see if that module is the cause. (it sounds like it might be). @viridia ping. I don't want this one to get too stale. We're unable to find a root cause on our end for this. If you can find a cause, we'd be happy to start looking at a fix for you, and we'd always welcome a PR. this one may point back to webpack proper.. @viridia @MichaelOstermann given everything listed here, my inability to reproduce locally here, and that it's reproducible with webpack-dev-middleware, I'm leaning towards this not being an issue with this module. Rather, likely webpack proper. I looked into webpack-dev-middleware and how it was using the compiler, and it's really doing nothing more than pulling path info from it. I think the next stop for you all is an issue on the webpack's main repo. . @viridia great, thanks for that follow up. should we close this issue then, in your mind?. @arjunkathuria we'd happily review a pull request!. Closing issue as abandoned as it's more than 90 days stale. closing because stale. please do ping if you have the chance to circle back to this. Going to close this for tag management. Please give the newer versions of both webpack and webpack-dev-server a try. If the issue persist, we'll need a sample app in a repo to be able to reproduce this. . Closing due to age and inactivity. If someone is able to put together a test case in a repo we can use to reproduce, we'll revisit this one.. > Is it too much to ask that the webpack devs stop breaking api and CLI commands?\nI'd highly recommend taking a less aggressive stance with regard to open source projects that are fueled solely by time donated by maintainers and enthusiasts. Those working on this are doing their best to appease an insanely diverse set of requirements and use cases over an insanely diverse user base, all the while trying to keep security and stability in mind. I get that you're frustrated, but take a step back and have a breath before taking to the comments.\nSecurity concerns are still paramount, as was demonstrated by the rebinding flaw attack vectors and the ssl attack vector issues that arose this year. \nhttps://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\nhttps://medium.com/@mikenorth/webpack-preact-cli-vulnerability-961572624c54\nThose were/are very real threats to people, even if they couldn't personally affect [you], they're still very real and have the possibility to do real damage. For this reason we clearly disagree that user/dev convenience trumps secrity - quite the contrary. We'll always do our best to try to keep security fixes from interfering with users' dev experience, but now and then an uncomfortable change is necessary.\nAlso bear in mind that everyone has the ability to fork and bypass features/code that are there to enforce security. Especially considering that webpack-dev-server is intended to be used in a dev environment, it's therefore not an anti-pattern nor bad practice to link your devDep for webpack-dev-server to a github repo (your stripped fork).. @theohogberg everything is up to you as a dev. you're always free to fork and link to a fork and/or contribute a PR that makes things easier for you and potentially other devs. the language you chose was aggressive; no one has hurt feelings, but please be mindful of that.. We actively welcome contributions from everyone. If you feel there's something that can be made easier, please do considering forking and contributing. . Closing due to age and inactivity. If someone is able to put together a test case in a repo we can use to reproduce, we'll revisit this one.. closing because stale. please do ping if you have the chance to circle back to this. @jacek213 @akatechis have you tried v2.7.1 with the latest webpack?. @akatechis any updates? we're going through issues that have become stale and would like to keep this open if it's still an issue.. Thanks for following up!. Fairly certain that #1012 and #899 resolve this issue. Please try upgrading and giving that a shot.. Please give the current versions a try and make sure your node version and other deps are up to date. Closing due to inactivity for now.. I believe this has been resolved by recent changes to host checking. Please call me out if I'm mistaken. Closing this one for now.. Pruning due to age and inactivity. You might try Stack Overflow or the Webpack Gitter for some additional eyes on the issue. . @orteth01 merged the PR, as its a solid feature and has been in waiting for quite some time, but we still need example/readme updates for this. we've got a little bit of time before we release, would be great if you would be able to add that.. @orteth01 awesome. yes, please do update that readme. It's also suggested to create an example directory to demo the option.. Closing due to age and inactivity. Looks like #364 is a winner. . Looks good. Please sign the CLA (https://github.com/webpack/webpack-dev-server/pull/901#issuecomment-298868768) and we can get this merged. The recent versions of this module have extended support for checkHost which I believe addresses the concerns of the issue. Going to close for now. Please call me out if I'm mistaken.. Pruning due to age and inactivity. . Indeed this one has been resolved.. @Timer looks like there are some issues with the tests to resolve before we can merge this. Please have a look. ping @Timer re: tests for headers/hostname change. @Timer last ping before we close this one as abandoned. please do have a look at the conflicts and adding a test around the hostname change!. Unfortunately there isn't a way with cmd.exe. However, there is a way with PowerShell (https://stackoverflow.com/questions/3644940/click-a-hyperlink-using-powershell) and you can always opt to use something like the Hyper terminal (https://hyper.is/) on Windows. . @FriOne perhaps they're using some console output formatting that I'm not familiar with. The first stop would be the angular cli project on github, analyze (or ask the team there) and find the code/characters responsible for allowing it to be clickable, and then opening a PR here for allowing the same :). Closing this as the resolution to #1021 will resolve it. . Closing due to age and inactivity. We'd happily review a pull request if you happen to find a solution, but this one definitely looks like an edge case. I'd suggest using a tool like forever to ensure it recovers from a crash in the meantime.. We wanted to get some more eyes on this, but after talking with @d3viant0ne we agreed that it was OK to merge. Keep an eye out for a new minor version of the module tomorrow.. @the-spyke that's a bummer and I'm sorry that happened. But without for more info that's not very helpful. I'd suggest opening a new issue, following the issue template, and outlining more. Consider adding an example that would allow developers to reproduce the errors you're seeing. . I think it makes sense to continue the discussion on #616. Closing this one for now.. We'd happily review a Pull Request to resolve this issue.\nClosing due to age and inactivity. . I understand your frustration, I do. Unfortunately we've got new issues coming in every day, very few maintainers to help triage, counsel and fix. And we'd gotten to the point of well over 100 pending issues, a third of which had no replies and were over three months old. At some point pruning was needed. You'll see this kind of thing on other projects, most notably with NPM. The exception being that here, we'll see if/when issues that were closed suddenly gain traction.\nI also understand that you can't spend time on this (or justify the time to implement it for billing purposes), that'll happen. Perhaps someone else will see this issue and want to help out. For now, and for the purposes of managing a fairly large project, we're tagging this one as a nice-to-have. I get that's probably not very comforting, but it's an unfortunate necessary step to get the project back to a sane place where issues can be addressed in a timely fashion. Remember, we're all just volunteering extra time we have to pitch in.. Closing for now since there's a workaround. We'd also happily review a Pull Request for a workaround in the code. . We'd happily accept an update to the documentation. Anyone can edit it! . Unfortunately Microsoft has ended LTS for IE8, IE9, IE10. We're going to follow their lead. \nYou may want to look into polyfills for Objext.defineProperty for your particular situation.. Unfortunately Microsoft has ended LTS for IE8, IE9, IE10. We're going to follow their lead. \nYou may want to look into polyfills for Objext.defineProperty for your particular situation.. You can use the proxy method, or you'll have to extend the middleware to handle HEAD requests. At present it only supports GET. You can view some of the setup for that here. I think this would be a little too edge case to make it a permanent part of WDS.. You can use the proxy method, or you'll have to extend the middleware to handle HEAD requests. At present it only supports GET. You can view some of the setup for that here. I think this would be a little too edge case to make it a permanent part of WDS.. Looks good, but we need to wait for a pending major release before we merge. Didn't want to leave you hanging there.. Looks good, but we need to wait for a pending major release before we merge. Didn't want to leave you hanging there.. We're actually going to be doing a webpack-dev-server major release soon. It may correspond with webpack.. We're actually going to be doing a webpack-dev-server major release soon. It may correspond with webpack.. > This needs a webpack version with webpack/webpack#4960 merged, otherwise require(\"webpack/hot/log\") will error. That's why the tests failed.\n@lbogdan since this module is going to continue to support older versions of webpack, we're going to need some error catching around this change. We can't just let it throw cause it'll affect those unable to upgrade webpack. \nonce we get that in place I think we'll be good to go on this. > This needs a webpack version with webpack/webpack#4960 merged, otherwise require(\"webpack/hot/log\") will error. That's why the tests failed.\n@lbogdan since this module is going to continue to support older versions of webpack, we're going to need some error catching around this change. We can't just let it throw cause it'll affect those unable to upgrade webpack. \nonce we get that in place I think we'll be good to go on this. @lbogdan cool, looks good to me. there's a conflict that needs resolving and then we can merge. @lbogdan cool, looks good to me. there's a conflict that needs resolving and then we can merge. Unfortunately I'm not privy to the workings of webpack main. It might be worth raising an issue there.. Unfortunately I'm not privy to the workings of webpack main. It might be worth raising an issue there.. I think there's some cross-polination between them all, but it's not 1:1. I think there's some cross-polination between them all, but it's not 1:1. Closing due to age, inactivity, and confusing format of the Issue. Please do try Stack Overflow or the Webpack Gitter.. Your dependencies are also pretty out of date, so I'd recommend updating and trying your use case against the newer versions.\nWhat WDS is saying here is that the options schema doesn't support options as they're being passed to it. The options validation and resulting message can be found here. The option definition can be found here. And the processing of the entry property can be found here. If you'd like to submit a PR to accommodate this scenario, we'd happily review it.\nUntil then, we're going to chalk this up to an edge case and close for issue management. \n. OK, you need to add the option to https://github.com/webpack/webpack-dev-server/blob/master/test/Validation.test.js#L51. See https://github.com/webpack/webpack-dev-server/commit/ab889c31a584e193814b2e952410307d071ede61#diff-46ade4578831d079715c6efd9c726d48 for an example. I think you missed the test file in that last commit :). @samuraisam no worries :) PR is solid, but the CLA needs signing (https://github.com/webpack/webpack-dev-server/pull/930#issuecomment-306384164) before we can merge it. Please give that a look.. This has been resolved.. I believe that header can be set through headers https://webpack.js.org/configuration/dev-server/#devserver-headers-\nOtherwise, we'd happily review a pull request to resolve this case. . There aren't presently any hooks setup to allow for this. However, we'd happily review a Pull Request which sought to add one for this purpose. . We'd happily review a pull request to add a feature like this. It's a reasonable request.\n(Closing due to inactivity and there's a clear solution in a community PR). @edi9999 that was a different way of saying \"this can be resolved if a developer in the community opens a PR to introduce the feature.\". That workaround is valid, though opinions on it being clean or not may vary. If you'd like to propose a solution, we'd happily review a pull request.\n(Closing due to inactivity). Closing due to inactivity. Stack Overflow or the Webpack Gitter may yield more support for triaging the issue on your system. It's not been a widely reported issue however. . Since this was asked before we started enforcing the issue template question notice...\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\n... we let this stay up here for discussion. However, we're going to close due to inactivity. Please do try StackOverflow or the Webpack Gitter.. (should've squashed, my bad). Heh, yeah nearly a year late. See: https://medium.com/@mikenorth/webpack-preact-cli-vulnerability-961572624c54. After much discussion between security experts and the webpack team, this was the solution arrived upon. Not here to debate the merits at this point, (and I no longer maintain this repo) only sharing info.. @reda-alaoui sorry that no one followed up on your PR. please do know that it's appreciated. we're going to slate this for v3, which will begin work soon. we'll release a new minor version of webpack-dev-middleware with your PR on that module to support this change when we're closer to releasing v3 of WDS.. After much contemplation and consideration we've decided not to merge this into the codebase. For a more in-depth explanation and further discussion, please see #945.. This one was resolved with #1012 and is available in the latest version.. (this is also tracked in #200)\nwe gave this a lot of thought and consideration. the complexity this introduces between webpack-dev-server and webpack-dev-middleware, combined with the lack of a large community call for the feature, combined with the workarounds available have pointed towards not adding this to the codebase.\nplease rest assured that this was a tough call and that we really, truly appreciate the time you took and work you put into creating the issues and putting the pull requests together. we're closing this issue, but please feel free to discuss. if there's a large community call for this feature we'd be happy to re-evaluate for v3.. Closing citing the solution by @marc101101 . We've got several workarounds that folks have posted that work, and additional info that this may be a problem that was introduced in webpack@3.x. It's likely to be an issue that's better raised with the main webpack project at https://github.com/webpack/webpack. There's been several updates to webpack (and this module) so I'd encourage you all to try both updates as well. \nIf anyone figures out a workaround in code and would like to submit a PR for it, we'd happily review it. Until then we're going to close this one while we continue our effort to get the Issues for webpack-dev-server under control and to a place where we can efficiently addresses issues.. We're gonna mark this one as PR Welcome and a nice-to-have enhancement. Since there's a couple of possible workarounds, if there's no traction on the feature we'll probably archive this one after a while.. this ticket is stale at 60+ days and will be closed if there's no response from the community. last chance to weigh in \ud83d\ude05 . @Vandivier that would be exposing the static express object/fn and there's no functional difference between that and requiring express. Express will be installed along with webpack-dev-server, so you don't have to manage that dependency; simply require it since it's already there.\nClosing up as we have a few workarounds that are solid.. Note that setup is deprecated and you should use before instead ;). @kellyrmilligan the faux-sockets are a constant pain point in 2.x because of SockJS. v3 replaces that with native WebSockets so that should clear up. (first next release coming this week). indeed. resolved in 8978059d9b880c6c28908a6ed4608e27d40f2f69. Welp.. folks, please try to hold off on the multiple comments asking about merge status and pinging contributors. it's awesome that you're all enthusiastic! but unfortunately it only serves to clutter the PR conversation and it's poor form. A much better way to go would be to add your reaction to the original post for this PR. maintainers, contributors, and admins will get to user submissions - webpack is a great org and makes sure that happens - but it's not our full time gig, and rest assured we see all of the notifications.. folks, please try to hold off on the multiple comments asking about merge status and pinging contributors. it's awesome that you're all enthusiastic! but unfortunately it only serves to clutter the PR conversation and it's poor form. A much better way to go would be to add your reaction to the original post for this PR. maintainers, contributors, and admins will get to user submissions - webpack is a great org and makes sure that happens - but it's not our full time gig, and rest assured we see all of the notifications.. We'd happily accept a PR to implement this feature!. We'd happily accept a PR to implement this feature!. @DylanPiercey this ticket is stale at 60+ days and will be closed if there's no response from the community. last chance to weigh in \ud83d\ude05 . @DylanPiercey this ticket is stale at 60+ days and will be closed if there's no response from the community. last chance to weigh in \ud83d\ude05 . Closing as abandoned. Closing as abandoned. @MarioDabrowski @aprather51 @polettoweb @goartur @scarletgirl Please use reactions on the original post in this thread (for example, \ud83d\udc4d ) instead of posting \"+1\" replies. It doesn't contribute to the discussion and only clutters the issue. . @MarioDabrowski @aprather51 @polettoweb @goartur @scarletgirl Please use reactions on the original post in this thread (for example, \ud83d\udc4d ) instead of posting \"+1\" replies. It doesn't contribute to the discussion and only clutters the issue. . #973 resolves this, so when that is merged, this issue will the resolved. locking the convo to avoid more followups.. #973 resolves this, so when that is merged, this issue will the resolved. locking the convo to avoid more followups.. closing citing #946. new version was rolled out on the 7th. We'd happily review a PR to resolve this.. @naganowl this ticket is stale at 60+ days and will be closed if there's no response from the community. last chance to weigh in \ud83d\ude05 . > That said, I do think it's an important piece of information that can benefit others in the future to know about.\nAgreed. And that's why even closed issues remain searchable and an invaluable resource. \nThis is certainly a nice to have, but there doesn't seem to be a large amount of interest that would move this to a high priority. We'll give it another week to see if anyone steps up to the plate \u26be\ufe0f . Closed in #1115 . Without a sample repo that includes all code and config to reproduce this specific case, I'm afraid we won't be able to triage it. \nClosing due to inactivity, but please do ping if you get a sample repo spun up. You might also try Stack Overflow and the Webpack Gitter.. Please do feel free to edit the document for that option. You can do so here: https://github.com/webpack/webpack.js.org/edit/master/content/configuration/dev-server.md. @rosskevin have you found a workaround or solution to this issue?. Cool. Glad there's a workaround for it. There's been several updates to webpack (and this module) so I'd encourage you to try both updates as well. But that's likely going to be an issue that's better raised with the main webpack project at https://github.com/webpack/webpack, since that's where that module lives, and as others have pointed out this is a specific problem that cropped with up with webpack 3.. Closing as duplicate. . It might be there for legacy reasons, not entirely sure. . @chobo2 please provide a sample application for folks to use to debug this case. . @chobo2 please provide a sample application for folks to use to debug this case. . Since this was asked before we started enforcing the issue template question notice...\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\n... we let this stay up here for discussion. However, we're going to close due to inactivity. Please do try StackOverflow or the Webpack Gitter.. Since this was asked before we started enforcing the issue template question notice...\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\n... we let this stay up here for discussion. However, we're going to close due to inactivity. Please do try StackOverflow or the Webpack Gitter.. I believe we have this fixed in the latest version. And the workaround that @lerte mentioned is valid for older versions. . I believe we have this fixed in the latest version. And the workaround that @lerte mentioned is valid for older versions. . @Wernerson please do feel free to open a Pull Request with your proposed changes from your fork and we can go from there. . @Wernerson please do feel free to open a Pull Request with your proposed changes from your fork and we can go from there. . We'd welcome a PR to implement any additional output you'd like to see. . We'd welcome a PR to implement any additional output you'd like to see. . @apeg1515 please void posting \"me too\" or \"same issue\" comments. instead, please use the reaction buttons on the original issue or comment you agree with or want to support.. @apeg1515 please void posting \"me too\" or \"same issue\" comments. instead, please use the reaction buttons on the original issue or comment you agree with or want to support.. Appreciate you taking the time to open this PR. Unfortunately, versions are managed by those with NPM privileges to publish the module. (That's pretty standard for all NPM modules). \ud83c\udf7b . I've pinged a few people, that have a vested interest in the SSL Cert portion of this module, for feedback. Wanted to let you know so you didn't think your PR went unnoticed :D. @cwalv please see comments by mike-north. those are excellent observations that should be addressed before we can merge. . @mike-north if I merge this, would you be willing to fill in the blanks with a subsequent PR? I feat that the author has abandoned the PR, but I'd like to get the changes in there as they're worthwhile, but at the same time I'd like this to end up correct. I'm afraid I don't have the knowledge necessary as yet to implement the changes you'd requested to this one.. @cwalv I'd prefer to maintain ours in-house for the time being. keeping granular control over that for the time being is preferable over a dependency. others are of course free to weigh in on this.. @cwalv yeah there's some debate about whether or not a cert should be automatically trusted. at the moment we're favoring the manual route, as it forces a user to at least be aware of what they're doing. \nlooks like there's some conflicts there that need resolving, and then we can get this merged. we're going to be releasing 2.8.0 here soon and I'd love to get this one in.. @cwalv ok, that doesn't sound as bad. we've got a 3.0 branch starting soon, and moving to devcert would be a good candidate for the new major version. I'll have to spend some time with it to see how the interaction is, and if we'd like to get any improvements to prompts/messages. for the meantime, and the 2.x branch, we'll merge this one in. . @hedrick please check the latest release. I believe we have this resolved. If it's still causing an issue for you, it might be worth following up with the bonjour team as I believe we're doing everything we can on our end. . @mschurr we'd happily review a pull request to resolve this issue.. @mschurr this ticket is stale at 60 days and will be closed if there's no response from the community. last chance to weigh in \ud83d\ude05 . OK thanks for following up. We'll reopen if someone would like to take on the task. . @Panoplos can you reference some of the posts around the web that you mention? we'd like to take a look at their use-cases.\nif we're able to confirm that behavior doesn't match expectations and we choose to move forward with a change for this, it'll be a breaking change (even though it's a correction) and will have to go into the v3 milestone. . Ah, just recalled #954 (I knew this sounded familiar). Closing this a duplicate, please watch that issue for more details.. Closing as changes have been published.. We'd welcome a PR to implement this feature. . this should be resolved by #1054. if it's not, please give me a ping.. > If that's the case then it's a breaking change for WDS, which may have been better to get a major release.\nYeah, that's true. There may be some monkeypatching that can be done in a patch release to resolve this. Investigating. \nUpdate: After looking into this some more, this shouldn't be throwing that error. I killed node_modules, changed my webpack dep to ^2.7.0, installed, verified that the version was correct. After that I opened the cli-public example and ran the following command:\nconsole\nnode ../../bin/webpack-dev-server.js --clientLogLevel info --open --host 0.0.0.0 --public localhost:8080\nI was able to step through the code, verify that the module doesn't exist, for which require.context returns a function that has no keys, and the statement which follows doesn't get executed. @animesh10 @jchip Perhaps it's a Node version issue, or there's some other variable at play, but with a simple test I was able to verify that does indeed account for older versions of Webpack and doesn't throw by default. This is probably a breaking change for an edge case. If you can narrow it down to the cause, we'd be happy to fix.. I've tried to reproduce this about every way I can think of. I you're able to put together a repo that consistently reproduces the issue, we can take another look at it. But at the moment I'm afraid we have to chalk this up to an edge case due to something specific with your system. I'm happy to reopen if needs be.. @jchip no problem. glad you found the root cause!. We'd happily review a pull request to add this feature.. Looks good, thanks!. Closing as issue is 90 days stale without activity.. Closing for the following reasons:\n\nempty issue template\nconfirmation that the module is working with webpack 3.3+. Since this was asked before we started enforcing the issue template question notice...\n\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\n... we let this stay up here for discussion. However, we're going to close due to inactivity. Please do try StackOverflow or the Webpack Gitter.. For thoroughness, please try your test cases using npm rather than yarn. We've had several issues resolved by going that route, believe it or not :). A global install isn't something we've ever really tested for. There's a few other issues that touch on it and it's generally not recommended. I haven't had the chance to attempt to triage a global install. Out of curiosity, why do you need to install the module globally?. Following up on this one...\nI've run several of the tests in the examples with webpack-dev-server installed globally in Node 4.8.4, 6.10.2, 7.8.0 (because why not), and 8.2.1. I'm pleased to report that 2.7.1 behaves normally for all node versions for all examples that I ran (compression, hmr, host-port, https, overlay).\nI can't reproduce the same issue on my end unfortunately. Officially, WDS is intended to be run locally, but all tests over here show that it works as expected globally. This may be a most-cases-but-not-all-cases type of thing. If you can find a specific reason/cause why it's not working with your config/setup, please do ping me and we'll reopen and start working on a fix.. Never a worry, always happy to look into a potential bug, especially a potential one at that level.. We're going to need a test case app within a repo to be able to triage this. The description is pretty vague and hard to grok. If someone can put together that test case repo, we'll revisit this issue. . @orangeyyy I no longer maintain this repo and recommend webpack-serve instead.. We're in a pickle because the updates to socksjs passed all of the tests we presently have before it was merged, and it was reviewed. So it wasn't a bug that was willfully introduced. If anyone can create a small example that devs can use to reproduce, that would be immensely helpful.\nUpdate: I've run through a slew of the examples with no errors. We're definitely going to need an example app that we can reproduce the errors with.. @jaredlunde thanks, that at least got us moving forward. I modified your server options in server.js and was able to stem the tide of websocket errors:\njs\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  sockjsPrefix: '/assets',\n  historyApiFallback: {\n    disableDotRule: true\n  },\n  disableHostCheck: true,\n  quiet: true,\n  inline: true,\n  compress: true\n})\nThe two key changes were to historyFallbackAPI and socksjsPrefix. I'm not sure if folks were overzealous in pushing this forward given this comment, but it appears some incompatibility when historyFallbackAPI is set to true does in fact exist. We could put some logical checks in there to account for the scenarios and force some default values, but I'm open to suggestion from the community. \n. @Grafikart see previous comment.\nTaking my previous comment a bit further I removed the property for historyFallbackAPI entirely, and only added the sockjsPrefix property, which resulted in a successful run. I removed the property and things started failing immediately. So it would seem that when publicPath is set, the code is assuming sockjsPrefix has been set.. @contra That's an incorrect statement; 2.7.0 was not a breaking change. It inadvertently introduced a bug that got through several reviewers and tests. \"me too\" replies aren't helpful, please hold off on those in the repo in the future. At best you're distracting from the discussion around the actual cause of this.. @contra I must disagree; there was no rudeness and \"same issue\" is essentially \"me too.\" The webpack team is presently discussing the best course of action in the mean time. You're welcome to join the webpack gitter to discuss the logistics further, but I'd like this topic to get back on track to discovery and resolution of the issue at hand. . @kellyrmilligan thanks much. Check out @jaredlunde 's example app and how those different options affect the errors in the devtools console. It looks like there's a discrepancy between the actual location of the sockjs-node file and where the client thinks it is. FWIW this only seems to affect apps which set publicPath.. @bdwain thanks for sharing that. out of curiosity, when you also set disableDotRule to true, can you reproduce?. @kellyrmilligan right now the sockjs path doesn't know whether or not the option has been set, it assumes that public path is always the prefix. What we really should do is make the entire options object available in some way to future proof against code needing to assume or derive options from other data, and specifically to provide the prefix option to the client. That's what I've been looking into, while continuing to discuss the issue with the webpack folks. I'm open to suggestion as to how to implement that.\nIt looks like we're getting pushback from NPM on unpublishing 2.7.0 so we'll likely issue 2.7.1 to roll back that commit. (+@TImer) That will likely block you on facebookincubator/create-react-app#1887 until we find a solution.. OK 2.7.1 has been published sans the sockjs changes. That should get everyone back to normal while we try and solve the issue.. @kellyrmilligan no worries, you're definitely not the only one that missed this. We basically need to get to a place where we can pass/inject the WDS config/options into the client bundle. That's the goal I think we need to aim for, then there's no extrapolating options based on other property values. It'll be pretty implicit. . @abergs thanks for checking in. we've confirmed the issue a while back and have a plan to address it. for anyone else that would like to confirm their experience of the issue, please use the reaction buttons on the original post in the thread to do so :). @rgo that's not the same issue, not even close I'm afraid. yours is likely more similar to #1090. \n@ all - during work on v3 we've identified a way to use DefinePlugin to inject the devserver options into the bundles. It's gonna be tricky to back-port that into master given how different the two branches have become, but it's safe to say that a fix will be available in the near future.. @nealoke see my previous comment. doesn't look like the same issue.. @nealoke well I think that your issue is likely closer in relation to https://github.com/webpack/webpack-dev-server/issues/1090, and I think there's a few closed issues with the same description as well. that being said, I'm hoping to have 3.0.0-rc1 on the next tag this week. full release will likely be Jan-Feb. . 2.5.0 is quite old. I'd guess that a fix for that branch probably won't get released if there is indeed an issue with that version of ip. I'd highly recommend upgrading to a newer version. . Yeah, I missed the caret. Not sure what would be causing that. Definitely not getting that error on this end. I see that you're on node 4.5.0. I just tried with 4.8.2 (npm 2.15.11), the latest in the 4.x branch, and all went well. Note that package.json does have:\njson\n  \"engines\": {\n    \"node\": \">=4.7\"\n  },. @usefulthink fantastic PR, thank you for getting this one in.. 2.7.0 was unpublished due to an uncaught regression. Please use 2.7.1 instead.. Please do submit a pull request for this feature, we'd happily review it.. This sounds like it's more so a bug with webpack and not webpack-dev-server. Please correct me if I'm wrong, but this project doesn't use readFile or readFileSync for anything other than the SSL certs when --https is used. I believe you should report this to the webpack project instead.. Thanks for the PR! Could you provide a screenshot of what this feature looks like? We'll also need you to sign the CLA before we can move forward.. > I resolved the conflicts but couldn't test them so far (can't update webpack at my workplace...).\nThat's an interesting restriction they have on you. Please let us know when you're able to test and confirm your conflict resolutions were correct.. Thanks for staying on top of this. We're taking a look at how best to move forward with this type of addition and feature on the client. We haven't forgotten about you :). @Wernerson that's a good idea. we've been wrestling with how to handle additional features for the client like this - we've got the error overlay and now the proposal for the progress overlay. their styles are very different, but we don't have a unified guide for that. now it's clear that we may have other additions that folks may want to add to the client as well, so it presents an interesting question as to how to handle contributions for those moving forward. and your PR here was the catalyst for that \ud83d\udc4d \nall that being said, I don't think merging this PR right this moment is the right call. I do think that sending the progress info to the console is the right call right now, as it gives the user some valuable feedback immediately. however, I'd like to leave this PR open and in a pending state. that's because...\n...what I'd like to do in the near future is to provide a mechanism for overlay plugins that contain their own business logic, move the warning and errors overlay into their own plugins, get this progress overlay into a plugin (I'd be happy to help with that), unify their styles (to match https://webpack.js.org/ as a guide), and release. this would ultimately open the door for any number of overlays on demand that won't need any kind of approval. it should also slim down the codebase for webpack-dev-server and overall be a win.\n. @Wernerson that's a good idea. we've been wrestling with how to handle additional features for the client like this - we've got the error overlay and now the proposal for the progress overlay. their styles are very different, but we don't have a unified guide for that. now it's clear that we may have other additions that folks may want to add to the client as well, so it presents an interesting question as to how to handle contributions for those moving forward. and your PR here was the catalyst for that \ud83d\udc4d \nall that being said, I don't think merging this PR right this moment is the right call. I do think that sending the progress info to the console is the right call right now, as it gives the user some valuable feedback immediately. however, I'd like to leave this PR open and in a pending state. that's because...\n...what I'd like to do in the near future is to provide a mechanism for overlay plugins that contain their own business logic, move the warning and errors overlay into their own plugins, get this progress overlay into a plugin (I'd be happy to help with that), unify their styles (to match https://webpack.js.org/ as a guide), and release. this would ultimately open the door for any number of overlays on demand that won't need any kind of approval. it should also slim down the codebase for webpack-dev-server and overall be a win.\n. @Wernerson we'll close this one, but please do take this branch and create a feature branch from it that adds the status to console messages as you suggested (but leaves out the overlay). I think that's a feature we can introduce immediately.. There's good reason for that: #1021.\n2.7.0 contained a nasty regression and was unpublished. 2.7.1 was published before the unpublish was performed. It all went down on the same day within a 4 hour span, so it sounds like someone generated a lockfile during that period. That's one of the intrinsic faults of lockfiles, but it doesn't usually bite people often. That sort of thing isn't uncommon when things go sideways with a release.. @willin the config and setup for your project is rather complex and we're unable to nail down a root cause. it looks like it might be sockjs related, but I couldn't say for sure. given that we're going to replace sockjs with a native WebSocket solution in v3, this particular issue isn't something we're going to look into further I'm afraid.\nif you find the cause and can point that out, we'd be happy to look at getting a stop-gap fix in a patch release for you, but until then we're going to close this as wont-fix.. @noscripter there's not schedule as far as dates and times (we're all just donating our free time). it's an item in Milestone 3, however. The issues that are slated to be resolved for version 3 can be seen here https://github.com/webpack/webpack-dev-server/milestone/1. . @FourSeventy please do not post \"me too\" or \"same issue\" replies on issues or pull requests. instead, use github reactions on the original post.. @mrsharpoblunto thanks for the PR! please sign the CLA and we can move forward. @rajeesmca Please note that issue templates usually aren't optional. removing their content is generally frowned upon. Unfortunately this issue will be closed citing the issue template:\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.. Thank you for pointing this out. Please feel free to correct the documentation in a Pull Request by going to https://github.com/webpack/webpack.js.org/edit/master/content/configuration/dev-server.md. @arjunkathuria thanks for taking the time to put this together. please note that pull request templates typically aren't optional and it's generally not considered good form to remove their content. please edit the PR description using the template (https://github.com/webpack/webpack-dev-server/blob/master/.github/PULL_REQUEST_TEMPLATE.md) and we'll have a look at the PR afterward :). @arjunkathuria thanks\n\nI'm looking at Server.js#L39 and addDevServerEntrypoints.js#L9 and within webpack-dev-server there seems to be an explicit difference between the two. Overriding the value of options.hot doesn't seem wise, as it'll execute code the user may not have wanted. It could also be considered a breaking change.\nAccording to this comment the real issue lies within webpack itself. Given all of this, it seems that there are two fairly clear solutions that lie outside of webpack-dev-server;\n\nadd HotModuleReplacementPlugin manually\nfile a pull request with the main webpack repo to account for the hot-only command line arg with regard to injection of HotModuleReplacementPlugin\n\nBut it doesn't look like the best solution is going to be in this project.. Sure, can do. If you find more info that suggests the solution should live here, we can reopen.. @ingelity removing issue templates is generally frowned upon, as they're usually required when opening a new issue.\nwe're going to begin enforcing a note that has been within the issue template:\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\nI'm sorry, but this will be closed. Please try the other two options for support.. I've never personally used a hot reload method that supported changing the file structure mid-stream. If that's a feature that you want to see happen, the first stop is the main webpack project's HotModuleReplacementPlugin.\nIt's safe to assume that if you see an issue template in a repo, it's required and one should stick to the format in the template. . Chalking this up to an edge case with bash on Windows. It definitely doesn't happen in bash proper. Would be happy to review a pull request if you'd like to submit one.. I don't have a windows machine available to debug this, so we're going to have to rely on someone in the community to debug why SIGINT doesn't work in that environment. We'll leave this one open for a while in the hopes that someone steps up.. We're going to close this one citing lack of activity and https://github.com/git-for-windows/git/issues/1248. Please do ping me if someone discovers info that webpack-dev-server is doing something wrong with capturing SIGINT on that particular platform and app.. I think we're going to need a link to a simple app in a repo that we can use to reproduce this bug. In prelim tests I wasn't able to reproduce, so it could be something in your codebase specifically. If you can get a simple app going that reproduces this (so we're not chasing a goose of an issue caused by something custom), we can look into it further. . @gcangussu this is an outstanding sample app and readme. thank you for putting that together, we'll have a look.. @gcangussu confirmed that we have an issue here, I was able to reproduce the error using your example.. Definitely an edge case, but one that's sprinkled around the web not with webpack-dev-server, but with express. It seems there's an open issue for this as well. \nThis may be with how we're using express with regard to large files, but this is probably going to be a nuanced solution specific to your environment. . @mtraynham thanks for your diligence.. @MegaUITeam the issue templates are not optional and removing their content is generally frowned upon. from the issue template:\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\nAs such, we'll be closing this issue. Please try one of the other outlets for your question.. @stavlocker the issue templates are not optional and removing their content is generally frowned upon. from the issue template:\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed.\n\nAs such, we'll be closing this issue. Please try one of the other outlets for your question.. @stavlocker I'm watching the issue but I'm not convinced that it's a bug. Many strange issues of this type are due to errant loaders, config issues, or edge cases with a particular environment. Given that process.env is the offending party here, I'm leaning towards this being a combo of those three in some way. I'll keep an eye on this (I see all issue activity and never ignore notifications) but please do continue to try and triage the source of the problem. For now we're going to keep this one closed as a question.. @rdsedmundo I understand that in your environment, in your project, with your config that you see this behaving badly. however, we've not seen this behavior in any of our tests nor examples, which would suggest that it's an issue isolated to an edge case among those with some common element either in platform, setup, or config. That's impossible for us to triage from our end, please understand that. I'd recommend starting with one of the examples for webpack-dev-server that matches your project the closest, and slowly adding elements of your project to that example. That process should yield which party/component is causing the issue for you. It's tedious, but I'm afraid that may be the only way you're able to get to the bottom of it.\nas a side note, giving me a \ud83d\udc4e is a real bummer. I'm giving you my time gratis to try and help guide you through diagnosing a tough issue. please bear that in mind moving forward.. Really appreciate taking the time to open a PR :heart: Unfortunately this is a duplicate of #987. Please check out the comments on that one.. Thanks for taking the time to open an issue. \nThere's a lot of important information missing, however. Does the file exist? Have you tried executing that command that feedback suggests the file is missing for?\nWe've seen similar problems with webpacker and the rails env. I'd suggest debugging your installation locally and looking for the issue on your filesystem first and foremost. This isn't something we've seen with any frequency with webpack-dev-server independently.\nWe'll leave this open in the event that some edge case bugbear is responsible for this, but my money is on a user-specific environment issue of some kind. . @johan-lejdung thanks for the PR! we have one small change request and then we'll be happy to merge.. Thanks!. Thanks!. (please do follow the issue template moving forward, even if it doesn't quite fit the issue, so we're all setting a good example for non-contributors, non-collaborators)\nI think in the near term, we should definitely document that. It's quite an omission, and that's a great catch \ud83d\udc4d . For the long term, we should look at any implications into automatically calling that for hot: true implementations. eg. can we sneak that into a patch release without breaking things for folks already calling that separately. . . . Thanks @bdwain. I'm sure that'll help out some folks. Gonna close this one here for the time being. Ping me if you need it to be reopened!. Thanks @bdwain. I'm sure that'll help out some folks. Gonna close this one here for the time being. Ping me if you need it to be reopened!. This is almost certainly an issue rooted in your webpack (and/or environment) configuration. Check your plugins, loaders, resolvers, etc within your webpack config and try to pick them off until you're at a bare bones config. That's also a pretty complex setup and I'm afraid we won't be able to reproduce that locally.\nWe'll leave this one open in case further triage reveals an edge case bug that needs to be fixed, but we see these kinds of wonky errors come through a few times a week, and that's usually what it ends up being. . This is almost certainly an issue rooted in your webpack (and/or environment) configuration. Check your plugins, loaders, resolvers, etc within your webpack config and try to pick them off until you're at a bare bones config. That's also a pretty complex setup and I'm afraid we won't be able to reproduce that locally.\nWe'll leave this one open in case further triage reveals an edge case bug that needs to be fixed, but we see these kinds of wonky errors come through a few times a week, and that's usually what it ends up being. . @pladaria great to hear, are we good to close this issue?. Thanks all. Much appreciate you taking the time to open a PR \ud83c\udf7b  however #998 seems to me to request automatic port assignment, along with making the random port assigned available for inspection, rather than just exposing the port assigned. I'm not sure you're on the same page as the issue author here. \nCheck out #1054. Much appreciate you taking the time to open a PR \ud83c\udf7b  however #998 seems to me to request automatic port assignment, along with making the random port assigned available for inspection, rather than just exposing the port assigned. I'm not sure you're on the same page as the issue author here. \nCheck out #1054. closing in favor of #1054. thanks again for the PR.\n@doughamlin I think portfinder is still needed to check to see if the specified port is in use.. Considering waiting on this one until 3.0.0. . \ud83c\udf89 . So it's documented, it's due to a bad sockjs port configuration:\n. Digging into this further, it would appear that on this line, __resourceQuery is equal to \"?http://0.0.0.0\" which throws off getting the port on line 179 as urlParts.port is null. Now it's pretty trivial to correct this in the client script, which I've done as a proof of concept for a fix, but I'd rather get down to why the __resourceQuery value is incorrect. I'll spend a little time on that, and if I don't make any progress, make the fix in the client.. @doughamlin so what you should have done was open up webpack.config.js and changed:\nentry: ['./app.js', '../../client/index.js?http://localhost:8080/'],\nto \nentry: ['./app.js', '../../client/index.js?http://localhost:0/'],\nNow, had the port parsing in the client been correct, that would have yielded the results you were after. I have a fix incoming for this but your config is going to have to look something like this:\n```js\n'use strict';\nmodule.exports = {\n  context: __dirname,\n  entry: ['./app.js', '../../client/index.js?http://localhost:0/'],\n  output: {\n    filename: 'bundle.js'\n  },\n  devServer: {\n    overlay: true\n  }\n};\n```\nNow you can always omit the entry property, like in the host-port example, if that's a possibility for you and things should work as expected there too.\nMy fix is going to change two things:\n\nin Server.js the socket server won't be initialized nor started until the listeningApp triggers the callback on listen. That's really the proper time for the socket server to be initialized anyhow.\nin client/index.js the port parsing is going to look for null and '0' on urlParts.port and that'll be refactored slightly.\n\nOnce that's in place you should be good to go. Hopefully this will all become moot with 3.x when I get around to refactoring WebSockets and removing the SockJS dependency. Look for the fix to drop in master sometime tonight. . Please update the tests and CLI options as well. . @xiaoyann why don't you think we need to add this option to the CLI?. That's a rather subjective opinion. Thanks very much for taking the time to put together a PR for this, but we're going to pass on adding this feature at the moment. Instead, we'll be implementing a pass-through API option that will allow people to pass any options to sub-components that they'd like without having to modify the options schema. . \ud83d\ude06 dunno what happened here buuuuuut closed.. I'd also remove the clearing of the console. Best to leave that up to the users to do manually.. @mtraynham there actually wasn't a big refactor, it was a linting implementation and cleanup. looking at the original code, https://github.com/webpack/webpack-dev-server/pull/1058/files#diff-7ca921e48f080bb70b26956b90f5229bL86, iframe.load has existed for some time. \nI'm also not sure what \"Run the IFrame live bundle\" is referring to. Are you speaking of the modus-iframe example?\nUpdate: it's been a while since I had to flex some jquery-foo, but the .load method is a shortcut for .on('load', cb) as can be read here: https://api.jquery.com/load-event/. It's definitely valid, so I think you may be looking in the wrong place for the culprit. . (going off of the modus-live example) Yeah I think you're right. What's odd is that it's a valid jQuery object and element array, but the load method isn't proxying to the event handler. I reverted the code and the same symptoms exist. Looking at the PR, we updated some deps as well:\ndiff\n-    \"jquery\": \"^2.2.0\",\n+    \"jquery\": \"^3.2.1\",\nSo that may have had something to do with it. I tested using .on instead and it did indeed resolve the issue. I'll prepare a fix and we'll get that out today as 2.8.1.\nThanks for triaging the issue.\n. Thanks for the report. This issue is being tracked here: #1079. @mdudek I understand that this works differently (at all) between the two versions. However, you haven't really given us much to go off of here. I'm afraid we're going to need a stripped down test repo from you in order to reproduce this. I'd recommend starting with a bare bones project and slowly adding components of your project back in, and that should reveal the culprit. This issue isn't something we're seeing in our tests or examples. We usually close questions (reports of things not behaving without any additional info, or general questions) but we'll leave this open in case your investigation reveals anything out of sorts.. @tombarton your test repo has a few issues;\n\nthe package name \"test repo\" is invalid, npm errors on that.\n\nconsole\n\u2192 npm install\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN Invalid name: \"test repo\"\n\nyour npm script to run it is incorrect:\n\n```console\n\u2192 npm run webserver\n\ntestrepo@1.0.0 webserver /Users/powella/Code/github/webpack-port-issues\nnode api/src/server.js\n\nmodule.js:473\n      throw err;\n      ^\nError: Cannot find module '/Users/powella/Code/github/webpack-port-issues/api/src/server.js'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:453:25)\n    at Function.Module.runMain (module.js:665:10)\n    at startup (bootstrap_node.js:187:16)\n    at bootstrap_node.js:607:3\n```\njson\n  \"scripts\": {\n    \"webserver\": \"node api/src/server.js\", <<< bad path and filename\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\nI'm not sure if you tested this after you created it, but it's completely non-functional even after fixing the errors.\nWe're going to need a functional, simplistic (meaning no react, no angular, no docker) repo that can consistently, or even semi-consistently, reproduce this issue in order to triage on our end. If that isn't supplied, there's little we can do.\nFor triaging on your side of the glass, you'll want to debug the port that webpack-dev-server is trying to use and compare that against a list of ports in use on your machines. on OSX that can be achieved by running lsof -i | grep LISTEN. I'm too far removed from Windows to remember how to do the same via CMD. . @tombarton your test repo has a few issues;\n\nthe package name \"test repo\" is invalid, npm errors on that.\n\nconsole\n\u2192 npm install\nnpm notice created a lockfile as package-lock.json. You should commit this file.\nnpm WARN Invalid name: \"test repo\"\n\nyour npm script to run it is incorrect:\n\n```console\n\u2192 npm run webserver\n\ntestrepo@1.0.0 webserver /Users/powella/Code/github/webpack-port-issues\nnode api/src/server.js\n\nmodule.js:473\n      throw err;\n      ^\nError: Cannot find module '/Users/powella/Code/github/webpack-port-issues/api/src/server.js'\n    at Function.Module._resolveFilename (module.js:527:15)\n    at Function.Module._load (module.js:453:25)\n    at Function.Module.runMain (module.js:665:10)\n    at startup (bootstrap_node.js:187:16)\n    at bootstrap_node.js:607:3\n```\njson\n  \"scripts\": {\n    \"webserver\": \"node api/src/server.js\", <<< bad path and filename\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\nI'm not sure if you tested this after you created it, but it's completely non-functional even after fixing the errors.\nWe're going to need a functional, simplistic (meaning no react, no angular, no docker) repo that can consistently, or even semi-consistently, reproduce this issue in order to triage on our end. If that isn't supplied, there's little we can do.\nFor triaging on your side of the glass, you'll want to debug the port that webpack-dev-server is trying to use and compare that against a list of ports in use on your machines. on OSX that can be achieved by running lsof -i | grep LISTEN. I'm too far removed from Windows to remember how to do the same via CMD. . @Jotakuun you may be stuck on an older version for a while going with that option. no one has produced a reproducible test repo that can be run on a non-windows machine (I haven't run windows in 10 years) and no one who runs Windows has stepped up to debug this as yet. Until one of those two things happens, this is going to be a pervasive issue for the few it effects.. @httpete I understand that this is impacting you directly, but that's quite the dramatic statement considering we've only had a handful of user reports of this \ud83d\ude09  we'd love it if someone could direct their energies into triaging/debugging the root cause of this on their specific Windows environments.\nWe had another issue that was similar, for example, that was related to a GitBash SIGINT problem on Windows; whereby GitBash wasn't handling that properly and wasn't terminating WDS correctly, which left the server running as a background process that resulted in EADDRINUSE on the next run - that might be something to look into for the cases here as well.\nAnother route to take might be to look at the running apps and which process is using the port you're attempting to use (default is 8080) by running netstat -a -b.\nI'm happy to try and help, answer questions on the code from my end, but this is going to take some effort from one of you all affected to solve.. @httpete you may wish to try putting a return after line 20 here. That came up as a potential fix in an issue not long ago. Other than that I'm out of ideas.. Should be fixed by a3f7277, version 2.9.3. @bohaochen I'm sorry, but this is a valid issue. Please try again using the issue template.. @aloker Thanks for the report. Please note that the issue templates are not optional, we ask everyone to fill them out and not remove the contents of the template.\nThat dang IE though. We tested the changes against Edge, but not IE. I'll queue up a change and release of 2.8.2 to address this today. For the time being you can safely downgrade to 2.7.1.. @aloker no worries, that's a nasty one for sure.\nplease try installing webpack-dev-server from npm install git://github.com/webpack/webpack-dev-server.git#ie-template-fix and running against that. please let me know if that resolves the issue for you. I don't have an IE machine/vm to test with at the moment and I'm coming up short finding an ES5 validator that works on the web. so I'm gonna need your help on this one \ud83d\ude04 . @aloker much appreciated. . Leave it to IE to cause issues. Thanks for that diff. I'll get that implemented. I'll add transpiling to ES5 to the task list for v3 for the client scripts, so we don't run into this again.. @aloker just pushed your changes to the ie-template-fix branch. please have a look and see if we've caught everything. @gin93r thanks for creating an issue, however when you see an issue template, that usually means they aren't optional and you should fill it out/in, rather than removing its contents. also from our issue template:\n\nPlease ask questions on StackOverflow or the webpack Gitter (https://gitter.im/webpack/webpack). Questions will be closed. \n\nClosing as question. Please try one of the other two suggested outlets for support. . @waterfoul thanks for the report. unfortunately I'm having a hard time following you. looking at that commit, the only thing that changed with processOptions was a code format change. The functions are identical in functionality between the two commits: https://github.com/webpack/webpack-dev-server/commit/69239ce854dd0a4bdb752fbd78c47c348aa9f900#diff-83c4482ab4d62154c877147880243858L221\nThe same is true for the blocks surrounding the two calls to startDevServer https://github.com/webpack/webpack-dev-server/commit/69239ce854dd0a4bdb752fbd78c47c348aa9f900#diff-83c4482ab4d62154c877147880243858L364\nI'm afraid we're going to need a more in-depth explanation of what you believe to be the cause. . Managed to get to the bottom of it. Moving forward, please try to be as specific as possible in issues with regard to the lines causing issues. It wasn't immediately clear what you were trying to convey when speaking about the lines mentioned; those two lines were using the wrong variables as the first parameter, and should have been using webpackOptions, instead of wpOpt from the top level scope.. @deedubbu could you explain in more verbose detail why you believe that yargs and a dependency on webpack@3.5.x is breaking this? . @PatrickMcGrath29 please avoid \"me as well\" replies on issues. rather, please use the reaction buttons on the OP https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments. We discussed it and will downgrade for the next patch release. However, it's important to note that webpack-dev-server v3 will leverage webpack@3.\n@deedubbu also of note: your node version exited LTS in June, and it looks like you could go for an update with some additional deps. out-of-LTS node versions are hard to get support for, and most major projects won't support a version that isn't within an LTS cycle.. @richtera this snuck in just before your PR 8f897c575b3c98c3d08b876a4cc4c23c7b48157b. thanks a bunch for putting this together though!. If you haven't already, give devtool: 'source-map' a try. It works with the latest version as can be seen in the example here.\nI can certainly understand the frustration that 2.8.x introduced a regression and this has ceased to work correctly for you. There seems to be a never ending number of edge cases in the webpack world that surfaces with each release. For this particular one bugbear, we'll happily welcome a PR from the community to resolve it. In the meantime, you might choose to use source-map which does work as expected, or you could try the EvalSourceMapDevToolPlugin as talked about here.. @deedubbu do either of the two solutions here work for your setup?. closing this one citing the workarounds listed in the issue and confirmations the issue has been cleared up in the latest Safari version. @lakinmohapatra please do not post successive comments on an issue within seconds of each other, it's considered bad form. instead, edit your previous comment. workarounds for this issue have been posted by other users, we recommend trying those. . @syte old-IE support ended in January 2016. Please see https://www.microsoft.com/en-us/windowsforbusiness/end-of-ie-support. Unfortunately you'll have to use an older version (2.7) if you'd like to continue to support old IE. Old IE support has been discontinued for so long that this can't be considered a breaking change, rather just catching up with the times.\n@teod Hm I think you're mistaken on const breaking IE11. Please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\nThis isn't one we're going to be fixing I'm afraid. For those that still need to run this on old IE, you'll have to set your dependencies to 2.7.1.. Thanks for the feature request! This is fairly easily accomplished in your local project by examining the source for bin/webpack-dev-server.js.\nLine 486 demonstrates how to use the opn module to open a specified URL. Given that webpack-dev-server runs on port 8080 by default, or that you'll know the port that you're specifying in webpack.config.js, you should be able to open the url with ease using the same method. Build this into a reusable file in your tooling, or as a one-off inside of the file that launches webpack-dev-server via the API.\nBut unfortunately, given the ease by which folks can add this to their tooling, this isn't a feature that we're going to expand the API with.. Duplicate of #860. My confidence is high. I believe the point at which the SIGINT actually kicks is in a red herring. The greater issue lies with Windows. If you'd like to add your specific series of events to that issue in a comment, please do :). This issue is already being tracked in #1090. Please see the comments in that issue add your comments for your unique configuration there. . @lbogdan you're a rock star for getting these fixes in. very much appreciated! but I beg of you some additional patience please \ud83d\ude04  we're all human on this side, and to say the last two weeks have been personally trying would be an understatement. please note that it may take a week or so to get a patch release out. I'll be out of town and I don't like to release unless I'm around to put out any fires that pop up. . @lbogdan we can merge this, but as an FYI the overlay and such is going to get a complete makeover for 3.0.0.. @lbogdan this is really strange, as neither Travis nor my local install fail on this. the quotes rule is disabled for that block at line 110 and enabled on line 144. @lbogdan OK so you stumbled across a false-positive here. Your change fixed the immediate issue, but your change doesn't address the actual issue at play here: Node 4 and Node 6 don't respect package-lock.json. Node 4/6 were installing eslint@4.7.0, which fails as you're seeing. Node 8 however, doesn't fail because it's respecting the package-lock.json versions, which is eslint@4.6.1. \nThe work to fix this should address the changes in eslint between 4.7.0 and 4.6.1 in terms of config, before changing the code. \nUpdate: This bug has been reported to ESLint and they're aware of it https://github.com/eslint/eslint/issues/9318. As stated in that issue, it should be cleared up with a patch release on Monday. Going to leave this PR open for the time being, but will likely close when ESLint issues that patch.. @lbogdan I understand what you're saying, but I'm not a fan of band-aiding when a deeper issue exists. Another collaborator may disagree (and I'd be cool with that) but I can't approve and merge this until the greater issue with ESLint is resolved. Holding up a few PRs until they release a patch is OK by me.. @lbogdan yes, and I'm glad you arrived at that conclusion. to merge this (and to make this a full fix) the disable/enable directives should be removed and the other double quote on Line 131 should be cleaned up. As I practice I'll defer to you as to whether or not you'd like to add that to this PR (please do!). . Thanks for getting that in. . Patch releases with bugfixes. We'll get around to it, I promise.. @ai I see that internal-ip 2.0.3 supports Node 4 now. that mean we're good on this issue?. @about-code we're going to need a much simpler repo to triage the issue on our end; the one you provided is quite complex for drilling down and nailing an edge case like this. that doesn't mean we don't encourage you to look into it further. this is almost certainly a config, loader/plugin, dependency, or environment issue over your way, as these kinds of edge cases tend to be. (if this would have been widespread there'd be pitchforks, torches, and angry mobs at the door). I'll leave this open in the event you, or anyone else, can find the cause and it's fixable.. @about-code the mob shows up quite quickly on a project so widely-used, believe that. As a rule I tend not to dive into complex example repos because they're a really large time commitment. (that's why we ask for a simple repo right there in the issue template!) every collaborator and maintainer here volunteers their spare time when they can, so we try to work as efficiently as possible. With the influx of issues we get on a weekly basis, it's a necessity. When we say that things are edge cases, we speak from a basis of experience with the large amount of issues that get created here. These kinds of things are almost always edge cases. I personally can't recall the last time an issue like this didn't boil down to a config/loader issue, once the reporting user simplified their use-case and slowly added components back in. So the whole point of this is to say;  that something is an edge case doesn't make it any less valid an issue, it only means that it's something not affecting a large group of users as yet. \nI would disagree that the changeset between 2.7.1 and 2.8.2 is small, but the enthusiasm is awesome and you should totally deep dive this. It might make a great first contribution if you find the cause!. @about-code \n\nbut you could have saved you some time by just reading the issue completely, before posting\n\nI really take exception to that. Perhaps the language chosen doesn't reflect the tone or message you were going for, but I find it really off-putting. Pushing a volunteer like that isn't a great way to go about seeking help.. @Filip0 that could present a problem, depending on the setup. the current beta of uglifyjs-webpack-plugin supports const and let (which is what you're referring to as \"being unable to process ES6\"). The current stable version of that same plugin works with ES6, but requires an extra install step. Check out the Important! note in the Install section of the README on that link for the extra steps if using the stable version of uglifyjs-webpack-plugin.. @tombarton see this comment a few comments ahead of yours. uglifyjs-webpack-plugin@beta is gonna be the way to go.. @tombarton see this comment a few comments ahead of yours. uglifyjs-webpack-plugin@beta is gonna be the way to go.. Just updated the README with a Caveats section that outlines the thought, cause, and workaround for this issue. Please feel free to continue discussion, however.. Just updated the README with a Caveats section that outlines the thought, cause, and workaround for this issue. Please feel free to continue discussion, however.. @ev1stensberg my apologies, I'm not following. I'm not aware of an effort to merge this project with the main webpack project.. please weigh in if you have comments on this refactor. @ev1stensberg will likely merge and move forward tomorrow morning ET. not to say I can't make modifications should discussion warrant, but I let this sit for a week for comment and gotta get moving on the other aspects of the v4 milestone \ud83d\ude04 . @vincent-cm glad you got your issue resolved. please note that in the future if you remove our issue template instead of filling it out, your issue might be closed. @pavle-goloskokovic  thanks for filing an issue. this is kind of a duplicate of #1091, but you've been more specific, so we'll address it. Unfortunately we're not supporting browsers that don't support const and let - all major browsers two full major versions back support those keywords now. Old IE support ended in January 2016. If you're using a fringe browser that doesn't support those keywords, please open an issue with those browsers' projects. We wrestled with whether or not this was a breaking change that constituted a new major version, but since Old IE support ended so very long ago, and all other major browsers have supported those keywords for over two years, we felt it was reasonable in a minor version. Unfortunately this isn't something we're gong to fix for 2.8.x. If you still need to support those really old browsers, you'll have to stick with 2.7.x.. @bdwain thanks for creating an issue. buuuuuut please do try searching the issues (or if you have, maybe a few different terms) before hand. we've had a few issues on this already (#1091), and I closed one today (#1104) \ud83d\ude04 \nPlease see those issues for an explanation, but unfortunately supporting really old/behind browsers isn't in the cards.. Providing a transpiled version of the script would imply support for older browsers, I'm afraid. Chrome 30 was released in 2014 and is a full 30 versions behind the latest release. webpack-dev-server being a development tool, it's completely reasonable that we support a variety of recent browsers, and move on from the very old versions. I apologize if this causes you issues with your testing, but please do consider a different vector for testing with webpack/webpack-dev-server on very old browsers. . @lkiarest unfortunately you'll have to use a pre-v2.8.0 version of the module to test on unsupported browsers.. @mrdulin this is already documented on the README and at webpack.js.org. Also, please do not post \"me too\" replies on an issue.. @harryfino thanks for checking in. that was cleaned up and you'll find it removed in 2.8.2. I'd recommend adding a tool like david to your build process to alert you of newer versions of modules. It's also a good idea to search a repo for a keyword; searching for remotePort yields no results, meaning that it was already removed \ud83d\ude09  The \"Blame\" function on a file is also a great way to see when something was added, and in this case removed. . @nikolas thanks for checking in. unfortunately we have to close your issue as invalid because you removed our issue template. your issue is also a general question, for which we encourage folks to head to Stack Overflow or the webpack Gitter to seek help. . @cletusw double posting the same comment in multiple places is generally frowned upon, please avoid that in the future (referencing your copied comment on 8de5d0a2bf9916439b268b7b7d9ba2d613f35234). logging in the module will be getting an overhaul in v3. the message being shown isn't an error message; it's a vanilla log message. Deprecation warnings are never error messages.. > logging in the module will be getting an overhaul in v3.. @bdwain very much appreciate the initiative, but we're about to announce a new feature freeze to focus on v3.0.0, and logging throughout the entire module needs improvement as it has the same/similar shortcomings. you can follow progress on v3 here. I won't comment yet on what that will entail because we haven't had time to vet all of the available options. in the meantime we ask for patience.. @bdwain very much appreciate the initiative, but we're about to announce a new feature freeze to focus on v3.0.0, and logging throughout the entire module needs improvement as it has the same/similar shortcomings. you can follow progress on v3 here. I won't comment yet on what that will entail because we haven't had time to vet all of the available options. in the meantime we ask for patience.. @cletusw I think you've made your position abundantly clear \ud83d\ude04  The change will stand as-is for the moment. I'll likely abstain from commenting on this PR moving forward, but please feel free to continue the discussion.. @cletusw I think you've made your position abundantly clear \ud83d\ude04  The change will stand as-is for the moment. I'll likely abstain from commenting on this PR moving forward, but please feel free to continue the discussion.. @penggy what's the command you're using to launch webpack-dev-server from the command line?. This is another errant package update from the cleanup effort I'm afraid. We definitely need some better testing around the different options. I'll push a commit to change the internal-ip dependency back to 1.2.0, which is the module update that broke this option.. @paztis much appreciate the extra hand there, but per previous comments and the referenced commit in the issue, we identified the issue with this and there has been a commit pushed. versions are released when we're able to. please feel free to reference the git repo directly in your package.json in the meantime. @infantito please avoid posting \"me too\" or \"same\" replies on an issue, especially once it's been addressed. instead, you can add reactions to the original post for the issue https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments. @movie4 please give StackOverflow or the webpack Gitter a try for getting support for the issue you're facing. you can always reference the examples which show HMR functioning properly as well. Closing this issue as a question (see issue template header). . @n1474335 we'll happily review a PR from yourself or the community to resolve this one. given that v3 is moving away from SockJS, this isn't something I can see a lot of effort being assigned.. @Arpit1294 thanks for opening an issue. \n\nThe page should not reload if I haven't explicitly mentioned it in my script.\n\nI'm afraid I don't know what you mean by that. Can you elaborate?\nWe're also going to need a simple sample repo that reproduces your issue to triage. . > My question is that why does the browser refreshes my app on save even when I haven't made any changes in the files?\nI'm still not sure what you're saying there. You're saying that you're saving the file, but there aren't any changes to a file? That's a bit contradictory.\nMy suggestion for you would be to start with one of our examples, and slowly add bits of your app to the example, checking to make sure it works along the way. That'll probably reveal where in your app the issue lies. \nI'll keep this open for a bit longer in the event it reveals an actual bug in webpack-dev-server, but this sounds a lot like a config issue and a general support question.. That would suggest an issue with webpack versus webpack-dev-server. @karneaud  thanks for checking in. unfortunately it looks like you might have missed the little bit in our issue template that states:\n\nPlease ask questions on StackOverflow or the\nwebpack Gitter (https://gitter.im/webpack/webpack). General questions, how-to\nquestions, and support requests will be closed.\n\nClosing as question.\nFWIW these kinds of issues are almost always the cause of an errant loader or plugin, a config issue, \nor a limitation with your specific environment. Please give Stack Overflow or the webpack Gitter a try. . @karneaud it's no worries, happens all the time \ud83d\ude04 . @wangxiexe thanks for checking in. unfortunately it looks like you might have missed the little bit in our issue template that states:\n\nPlease ask questions on StackOverflow or the\nwebpack Gitter (https://gitter.im/webpack/webpack). General questions, how-to\nquestions, and support requests will be closed.\n\nClosing as question\n. As a slight modification to your original PR description, this PR doesn't remove validation of header properties, but rather header property values.\nCiting the spec is also useful when submitting PRs for scheme validation changes: https://trac.tools.ietf.org/html/draft-wright-json-schema-validation-01#page-11\nThe documentation will have to be changed once this is merged and published: https://webpack.js.org/configuration/dev-server/#devserver-headers-\n. @wlindner ping. please see comments.. @wlindner thanks for making those updates, and all your work on this PR so far. you've still got a linting error in CI that needs addressing, and the branch is out of date and should be updated.. @wlindner thanks for making those updates, and all your work on this PR so far. you've still got a linting error in CI that needs addressing, and the branch is out of date and should be updated.. @wlindner looks like you still have an issue with CI. Click the \"details\" link for the \"continuous-integration/travis-ci/pr\" item and examine the log to find out what's causing an issue. We can't merge until that's resolved.. @wlindner looks like you still have an issue with CI. Click the \"details\" link for the \"continuous-integration/travis-ci/pr\" item and examine the log to find out what's causing an issue. We can't merge until that's resolved.. FWIW this isn't a bug, the behavior is by design so it really doesn't qualify as a bug. Rather, this is a request for a modification of the current behavior. I'll update the issue template to provide for that option in the future.\n\nI'll create a PR in a few minutes which should show what's the problem and provide a fix for it..\n\nYour PR didn't really explain what the problem here is, but we can infer the issue in code from the PR changeset. This issue is kind of all over the place. The bit about about:blank doesn't provide a whole lot of context but...\n\nI tried to force the socket url by using the public parameter in the options but it's missing support to force the protocol in the URL as well.\n\n...is where the meat of this issue lies. I'll header over to your PR (#1117) and continue the discussion. Moving forward, if you're planning on creating a PR immediately after your issue, you can skip the issue and just add all info to the PR.. Closed in #1117. @robertaistleitner thanks for all your attention and work on this so far. it seems we're at odds with what I'd like to see in this PR and how you'd like to see it. I understand that you had issues with url.parse but I don't feel they're blocking as you say, and I feel strongly that a regex is not appropriate in this case. the differences between a do/while loop and set/clearInterval in the browser are significant, and do/while's ability to block/lock the browser in an errant condition is very widely known. examples also exist to demonstrate options, but not to demonstrate all-encompassing solutions, and shouldn't involve external tools that require additional user action; if you'd prefer, you can remove your example and I'll add one after the fact.\nin the PR's current form I just can't merge it, citing my comments. apologies for being hard on this one but I can't budge on that I'm afraid. if you'd like to abandon, we'll schedule these changes for the v3 and cite your issue for credit. if you'd like to move forward with the requested changes, we'd be happy to continue the review.. @robertaistleitner thanks for all your attention and work on this so far. it seems we're at odds with what I'd like to see in this PR and how you'd like to see it. I understand that you had issues with url.parse but I don't feel they're blocking as you say, and I feel strongly that a regex is not appropriate in this case. the differences between a do/while loop and set/clearInterval in the browser are significant, and do/while's ability to block/lock the browser in an errant condition is very widely known. examples also exist to demonstrate options, but not to demonstrate all-encompassing solutions, and shouldn't involve external tools that require additional user action; if you'd prefer, you can remove your example and I'll add one after the fact.\nin the PR's current form I just can't merge it, citing my comments. apologies for being hard on this one but I can't budge on that I'm afraid. if you'd like to abandon, we'll schedule these changes for the v3 and cite your issue for credit. if you'd like to move forward with the requested changes, we'd be happy to continue the review.. Going to merge this one in now, thanks for all the work on it and apologies it took so long. Please note that it may take a while to get to release. The version 3 effort is in full swing and there's a pending refactor of the client code that I'll need to manually merge your changes into.. This is by design. Change your config to use before instead of setup as instructed by the message and the message will not be shown.. Yep. Looks like we missed the position of those messages. Patch will be published.. Fixed in 8de5d0a2bf9916439b268b7b7d9ba2d613f35234 and published. Duplicate of #1118 . Duplicate of #1118. Please comment there.. Duplicate of #1118. Upgrade to 2.9.1 \ud83d\ude09 . @RDeluxe thanks for checking in. this isn't something we see running in tests or examples, but we've seen similar questions pop up before that were resolved by way of correcting config, identifying an errant loader/plugins, correcting an environment issue, or a combination of the typical culprits.\nunfortunately this issue falls into the category of a support question, which we ask folks to head to Stack Overflow and Gitter first for help on. closing as question.. @RDeluxe thanks for checking in. this isn't something we see running in tests or examples, but we've seen similar questions pop up before that were resolved by way of correcting config, identifying an errant loader/plugins, correcting an environment issue, or a combination of the typical culprits.\nunfortunately this issue falls into the category of a support question, which we ask folks to head to Stack Overflow and Gitter first for help on. closing as question.. @cordoval few things; this isn't a bug but a modification request. that's an important distinction. you can track down who is using mime by inspecting the package-lock.json. and lastly, your webpack and wepback-dev-server versions are very out of date. we haven't received any security notifications about the latest version, so we're closing this one.. @cordoval few things; this isn't a bug but a modification request. that's an important distinction. you can track down who is using mime by inspecting the package-lock.json. and lastly, your webpack and wepback-dev-server versions are very out of date. we haven't received any security notifications about the latest version, so we're closing this one.. @dwjft please provide the structure of your options before and after the first run, only then will we know what to look for specifically.. @dwjft please provide the structure of your options before and after the first run, only then will we know what to look for specifically.. @dwjft as reporter you should provide all available info. thanks for the paste, we'll look into what's modifying that and see what we can put in place.. @dwjft as reporter you should provide all available info. thanks for the paste, we'll look into what's modifying that and see what we can put in place.. This is going to land in the beta branch in the next week or so, and has been implemented in the refactor-lib branch that is currently WIP. If someone steps up to fix this in the 2.9.x branch, we'll happily review a PR, but our energies right now are being directed towards getting 3.0.0@beta out the door.. I believe there is an intermittent problem with the global vs local install detection with the code here. however, the workaround (and preferred way) is to install webpack-dev-server locally, and run webpack-dev-server via an npm script defined in your package.json file. npm will always use a local binary over a global binary from a module, in the event one is installed globally and locally.\nFor example:\njson\n\"scripts:\" {\n  \"start:dev\": \"webpack-dev-server --open --config webpack.config.js\"\n}\nand\nconsole\nnpm run start:dev\nAlternatively, you can use node_modules/.bin/webpack-dev-server in the command line to reach the local install, if you happen to be using makefiles or some other build tool/process.\nThat block of code in question (which I linked to) has been replaced and a better method introduced in the beta branch, which will be available for testing in a few weeks. In the meantime, you can use the workaround which will definitely avoid the issue you're experiencing.. I believe there is an intermittent problem with the global vs local install detection with the code here. however, the workaround (and preferred way) is to install webpack-dev-server locally, and run webpack-dev-server via an npm script defined in your package.json file. npm will always use a local binary over a global binary from a module, in the event one is installed globally and locally.\nFor example:\njson\n\"scripts:\" {\n  \"start:dev\": \"webpack-dev-server --open --config webpack.config.js\"\n}\nand\nconsole\nnpm run start:dev\nAlternatively, you can use node_modules/.bin/webpack-dev-server in the command line to reach the local install, if you happen to be using makefiles or some other build tool/process.\nThat block of code in question (which I linked to) has been replaced and a better method introduced in the beta branch, which will be available for testing in a few weeks. In the meantime, you can use the workaround which will definitely avoid the issue you're experiencing.. @alansouzati the peer dep works as expected using npm. perhaps this is another yarn bug?. @alansouzati the peer dep works as expected using npm. perhaps this is another yarn bug?. @Cherviakov thanks for taking the time to create a very thorough issue. Unfortunately this is less a likely a bug within webpack-dev-server, but rather a configuration or environment issue with your project. it is after all quite complex and uses several external components that may be causing your particular issue.\nWe'd like to request that you open a new question on Stack Overflow or head to the webpack gitter channel for support on this. If you happen across an edge-case bug that is causing this issue for you, and can identify which part of the code is responsible, please do request that this issue be reopened and we'll start taking a look as to how to resolve it. For the moment though, we have to close this as a general support question.. @Cherviakov thanks for taking the time to create a very thorough issue. Unfortunately this is less a likely a bug within webpack-dev-server, but rather a configuration or environment issue with your project. it is after all quite complex and uses several external components that may be causing your particular issue.\nWe'd like to request that you open a new question on Stack Overflow or head to the webpack gitter channel for support on this. If you happen across an edge-case bug that is causing this issue for you, and can identify which part of the code is responsible, please do request that this issue be reopened and we'll start taking a look as to how to resolve it. For the moment though, we have to close this as a general support question.. @Wavum we're going to need a very simple, but complete example of this not working correctly. The config you provided is much appreciated, but unfortunately not enough to go on. The functionality you're reporting is a very core, basic functionality of the module and we have a suit of passing tests and working examples that show it does indeed work.  Citing that, this issue qualifies as more of a support question than a bug report, since our examples can be run locally showing that function working properly. With that, we'd like to suggest that you try Stack Overflow or the webpack Gitter to seek some support. In nearly all cases like this, the issue is traced back to an errant plugin or environment issue in a local config.\nOf course, you may have stumbled across an edge case. If you can put together a simple repo we can use to reproduce this (free of additional plugins, using only the core webpack-dev-server module) we'll be happy to reopen and examine this issue. For the moment, we're closing this one as a question.. @Wavum we're going to need a very simple, but complete example of this not working correctly. The config you provided is much appreciated, but unfortunately not enough to go on. The functionality you're reporting is a very core, basic functionality of the module and we have a suit of passing tests and working examples that show it does indeed work.  Citing that, this issue qualifies as more of a support question than a bug report, since our examples can be run locally showing that function working properly. With that, we'd like to suggest that you try Stack Overflow or the webpack Gitter to seek some support. In nearly all cases like this, the issue is traced back to an errant plugin or environment issue in a local config.\nOf course, you may have stumbled across an edge case. If you can put together a simple repo we can use to reproduce this (free of additional plugins, using only the core webpack-dev-server module) we'll be happy to reopen and examine this issue. For the moment, we're closing this one as a question.. @caryli this is probably the most thorough PR description I've run across, and for that I want to say thank you, it's really very much appreciated \ud83c\udf89 \nNow for what's probably going to be a bummer; this isn't a change we're going to merge, mostly for a lot of the reasons you pointed out. We've got a functional API example here: https://github.com/webpack/webpack-dev-server/tree/master/examples/node-api-simple, which demonstrates how to properly use the API to start a server. Unfortunately if you're going to use the API method, you're going to have to specify host or useLocalIpin your config. \n(Future versions may consolidate the options between the CLI and the API, however. see: #616)\nThis looks like a case of documentation confusion more than anything. Fortunately, the docs can be updated via a PR on this repo: https://github.com/webpack/webpack.js.org\nThanks again for taking the time to create this.. @caryli this is probably the most thorough PR description I've run across, and for that I want to say thank you, it's really very much appreciated \ud83c\udf89 \nNow for what's probably going to be a bummer; this isn't a change we're going to merge, mostly for a lot of the reasons you pointed out. We've got a functional API example here: https://github.com/webpack/webpack-dev-server/tree/master/examples/node-api-simple, which demonstrates how to properly use the API to start a server. Unfortunately if you're going to use the API method, you're going to have to specify host or useLocalIpin your config. \n(Future versions may consolidate the options between the CLI and the API, however. see: #616)\nThis looks like a case of documentation confusion more than anything. Fortunately, the docs can be updated via a PR on this repo: https://github.com/webpack/webpack.js.org\nThanks again for taking the time to create this.. @johanlajili thanks for bringing this to our attention. From the issue you linked to:\n\nAfter tracking it down, it turns out there may be some apps (I don't know how common / uncommon yet) that were providing a file name as the first argument of express.static instead of a file path. This combined with a app.use path that would match the entire URL (like /* for example) seems to have been accidentally serving that file to all URLs in prior Express.js versions.\n\nAs you can see via the lines linked below, we're using only paths with express.static and should be immune from that particular change.\nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L274\nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L298\nIt also looks like express@4.16.1 was released, which was supposed to revert the breaking change. Also tested 4.16.1 locally and it seems to be working on my end. I'll leave this open in case you track down a specific culprit on an edge, but I'm not sure this is an issue with webpack-dev-server.. @johanlajili thanks for bringing this to our attention. From the issue you linked to:\n\nAfter tracking it down, it turns out there may be some apps (I don't know how common / uncommon yet) that were providing a file name as the first argument of express.static instead of a file path. This combined with a app.use path that would match the entire URL (like /* for example) seems to have been accidentally serving that file to all URLs in prior Express.js versions.\n\nAs you can see via the lines linked below, we're using only paths with express.static and should be immune from that particular change.\nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L274\nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L298\nIt also looks like express@4.16.1 was released, which was supposed to revert the breaking change. Also tested 4.16.1 locally and it seems to be working on my end. I'll leave this open in case you track down a specific culprit on an edge, but I'm not sure this is an issue with webpack-dev-server.. @johanlajili please check out my previous comment and let us know if you've had the chance to try the latest version of express.. We're over 30 days without a comment from the OP. Marking this one as stale and closing.. @jacobp100 if you see an issue template, they're usually not optional. it's also always a good idea to read their contents. closing as invalid.. @jacobp100 if you see an issue template, they're usually not optional. it's also always a good idea to read their contents. closing as invalid.. @jacobp100 I know that unfamiliar systems can be a tad confusing at first. Some helpful tips:\n\nwhen an issue is closed, it can still be commented on, unless it's been locked. your prior issue that was closed as invalid wasn't locked. it's always best to stick to the original issue over reposting a duplicate (we typically close duplicates as well)\nyou can always edit your original post, and that's a better practice than creating a duplicate issue\nit looks like you may have missed the bit in the Issue Template that reads: Please do remove this header to acknowledge this message.. we curate our templates to be the most useful to both users and our efforts maintaining the project, so please do read them thoroughly\n\nI examined the history behind the proxy feature and how it works with contentBase by examining the git blame for proxy and searching through older issues (they're always there to search, issues are never deleted). The behavior is by design, and unfortunately since you're proxying the root, that will take precedence. . @jacobp100 I know that unfamiliar systems can be a tad confusing at first. Some helpful tips:\n\nwhen an issue is closed, it can still be commented on, unless it's been locked. your prior issue that was closed as invalid wasn't locked. it's always best to stick to the original issue over reposting a duplicate (we typically close duplicates as well)\nyou can always edit your original post, and that's a better practice than creating a duplicate issue\nit looks like you may have missed the bit in the Issue Template that reads: Please do remove this header to acknowledge this message.. we curate our templates to be the most useful to both users and our efforts maintaining the project, so please do read them thoroughly\n\nI examined the history behind the proxy feature and how it works with contentBase by examining the git blame for proxy and searching through older issues (they're always there to search, issues are never deleted). The behavior is by design, and unfortunately since you're proxying the root, that will take precedence. . This goes back 2+ years https://github.com/webpack/webpack-dev-server/blame/50a2e10153c5541fbc03434fcb496e09bc140440/lib/Server.js to when proxy was first implemented, and then to https://github.com/webpack/webpack-dev-server/blame/e6ccbaffc30bdcbc74285d30d1d93c0109019654/lib/Server.js#L336 when the defaultFeatures order was established about a year ago, which resolved #612 in PR #613. Those are the reasons for the established order \ud83e\udd84  . This goes back 2+ years https://github.com/webpack/webpack-dev-server/blame/50a2e10153c5541fbc03434fcb496e09bc140440/lib/Server.js to when proxy was first implemented, and then to https://github.com/webpack/webpack-dev-server/blame/e6ccbaffc30bdcbc74285d30d1d93c0109019654/lib/Server.js#L336 when the defaultFeatures order was established about a year ago, which resolved #612 in PR #613. Those are the reasons for the established order \ud83e\udd84  . > I think this is particularly confusing because http-server serves static files in precedence to proxying.\nIf you would be so kind as to paste the links to the docs or a working example that could show this, I think it would be a reasonable change to make for version 3, which is currently in progress. That'd be a breaking change, so it'd have to go into a major version. Version 3 is currently being worked on in the beta branch.. Let's dive a little deeper into this before getting to code. You're linking to a third-party module (http-server) which isn't a core node module, so we can't use that README as an argument for the change because it's not a standard, but just the way that module happens to handle things. That is unless of course you can dig up documentation from https://nodejs.org/en/docs/ that suggests the way that webpack-dev-server has it setup is incorrect. That's the kind of docs we're going to need to justify a big change like this. (express.js can also be considered an authority here, since WDS uses express under the hood to create a server). Yeah I think we need more documentation to form a non-official but aggregated standard to back up the change. I get what you're saying about bypass and proxy but without a strong case for making those changes it's a tough sell.. After spending some time thinking about this, my conclusion is that there isn't a \"right way\" to go about this ordering of precedence. Either way you go, there are people who will expect it differently. @jacobp100 you're firmly in one camp, perhaps out of necessity, but it's reasonable to say that there will be many others in the other camp.\nTo that end, we need to devise a meaningful way to adjust the order by which things are positioned in the \"features\" stack; an array that is put together to assign middleware in a particular order. That'll have to be given some thought as well in order to do that \"right.\". While working on the refactor for version 3, I was reminded that one can pass options.features to override the order in which middleware features are executed. see: https://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L368\nThat should provide enough flexibility for the rare circumstances where the ordering needs to be modified. This is an undocumented option, as it's not recommended that consumers play with the ordering, but it looks like it'll work for you in your case.. @jacobp100 see previous comment re: options.features. that will provide you the flexibility to order things how you see fit. It's oddly missing from the documentation at https://webpack.js.org/configuration/dev-server/#devserver and is a good opportunity for a contribution.\nalso important to recognize that we can't cater the logical-assumptions of everyone at once. if this were a hardcoded change, we'd have legions of angry users complaining that it wasn't the previous ordering. that's a seldom-considered condition of being a module used by millions daily (no joke). @zwug thanks for checking in. could you elaborate a bit on what you mean by \"enumerable\" in this case? I'm not 100% sure I understand how polyfills.js is conflicting with stylus.. @zwug thanks for checking in. could you elaborate a bit on what you mean by \"enumerable\" in this case? I'm not 100% sure I understand how polyfills.js is conflicting with stylus.. Thanks for elaborating. If you'd like to contribute the change for this so you get credit, we'd be happy to accept. Otherwise I'm good to make this change as well..  (I clicked the close button by accident, whoops!)\nWDS console/terminal output really shouldn't be changed from the perspective of the module - the output is specifically tailored to the lifecycle of the module and encouraging that to be changed isn't something I think we'll be keen on. That said, you could pipe the output from the webpack-dev-server command to another script that could examine the output as it's piped and manipulate it there. https://gist.github.com/mhart/2585671 and https://gist.github.com/polotek/977813 would be good starting points if your script accepting the piped data were written in Node.\nWe'll leave this open for discussion for a day or two in case anyone has some thoughts that'd convince us to reverse course on this, but I think piping to another script is the way to go here. . Well the exception here is that logging in this module has always been a problem. We need to get that on track before we even think about throwing more complication into the mix with the ability for people to manipulate the output. While I understand your use-case, I don't think there's a high demand and don't think it's the right time for the addition of a feature like that.. No worries, issues do evolve. I think what you're going for is pretty common; simplification of tooling. But I think the want for webpack-dev-server to make that easier for you is a little bit of a stretch. The mission of the module is to make developing and debugging with wepback a breeze, but not to assist with specific approaches to tooling - it'd be impossible to cater to the tooling needs of everyone who uses the module. I really think your best bet is going to be to redirect output, or pipe output, to another script and parse it. That way you can do whatever you'd like to without limitation. Going to close this one again for those reasons and your updated use-case. Much appreciate working through this one.. Please do make sure you're perusing all of the info on the README \ud83d\ude09 https://github.com/webpack/webpack-dev-server#caveats\nThere are also several issues which address this which have enjoyed discussion and have been closed (#1101, #1104, #1084). Please try the search function on issues before creating another in the future \ud83d\udd0e . No worries. FWIW I plugged in \"ES6\" to pull those three up. . Thanks for checking in with a feature request. Unless there's a high demand for this we're going to have to pass on an option to disable that portion of WDS. That's a pretty core function to the module. In the meantime I'd suggest using the API instead of the CLI. It'll require a few more steps, but you'll have complete control over how WDS is initialized. react-dev-utils is also a fairly popular project that's been around a while, so I have to imagine that some folks have found a way around this limitation. I'd encourage you to seek some support from their community.. @kesne not at this time, but really appreciate your willingness to! I'm not convinced it's a good addition to the module, as it doesn't look like the wider demand for that option exists. we're also hard at work on v3 and are really trying not to introduce new features until that lands. . @RDGthree thanks for stopping in. FYI I removed the bug label for this issue because I'm not convinced that this is in fact a bug. I can't dig up anything on webpack using script tags with the module type, other than this article which mentions it in passing. webpack-dev-middleware isn't setup to watch scripts loaded outside of the bundle that webpack builds. So from there we'd like you answer a few questions:\n\ndoes webpack yet support importing scripts as part of the build? if no, then please close the issue and open a new one at webpack/webpack\nif webpack does support this, does the hot module reloading portion of webpack support script modules? if no, then please close this issue and create a new one at the same repo\nif #1 and #2 are both yes, then have you confirmed this is a bug in webpack-dev-server and not webpack-dev-middleware?\n\nIf you made it to question #3, my bet is that it's a shortcoming in webpack-dev-middleware, and that really needs to be verified. Because this capability isn't mentioned in the docs for either webpack-dev-server or webpack itself (and please do correct me if I'm wrong here, it's totally possible I missed it) this is probably more along the lines of a new feature, and even then I'm not sure where it should go.. @katiasmet thanks for stopping in. unfortunately this qualifies as a support question. \n\nPlease ask questions on StackOverflow or the\nwebpack Gitter (https://gitter.im/webpack/webpack). General questions, how-to\nquestions, and support requests will be closed.\n\nIf you happen to find a bug specifically within webpack-dev-server that is impacting SCSS directly, and not the cause of a third party loader or plugin, please let us know and we'll reopen this. At present though, none of our tests locally have issues with loading css files as part of the bundle and hot reloading when they change. The modus-iframe example is a good sample for that. This is more than likely a loader, plugin, or config issue. I'm seeing a lot of activity on Google for scss and hot reaload issues, so that might be a good place to start. This issue looks promising and might yield a fix for you.. Please see the issue template regarding support questions.. @deadhandsignal there isn't one. https://github.com/webpack/memory-fs\nWhat's the difference between a directory and a folder? That's an important distinction that folks with significant experience in technology should understand.\n\nI don't understand why people don't just answer the question\n\nBecause on github there is a decorum. It's not acceptable to remove or ignore an issue or pull request template. Also important. . @7h3w4rd0c70r are you using webpack-dev-server via the CLI or the API?. @7h3w4rd0c70r in that case we'll need a stripped-down repo from you to reproduce. I'm afraid we won't be able to triage this issue without one.. We've got a known-issue with global versus local in the CLI. The fix for this was part of the refactor of the CLI code in the beta branch https://github.com/webpack/webpack-dev-server/blob/beta/cli.js#L19. I've been resisting doing double the work but this has popped up a few times more than I would consider to be isolated. Unfortunately I haven't been able to reproduce the global/local conflict on my machine (and your test repo doesn't throw an error for me, but I have no doubt it is on your machine). \nIf you can open up your global and local webpack-dev-server directories and manually add a return after this line: https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L20, that might fix it. Otherwise we're going to have to try and backport the code from the beta branch into the CLI code on master.. And forgot to mention, using webpack-dev-server without the node_modules path in an npm script to start it up should work as well. \njson\n\"scripts\": {\n  \"dev\": \"webpack-dev-server\"\n}\nand\nconsole\nnpm run dev. @7h3w4rd0c70r the beta will probably take a few more weeks before it's ready for a publish, and even then it's going to be on the @beta tag in npm. A workaround is fine, but someone affected by this bug needs to step up and try to help find a fix, because I've as yet been unable to reproduce it. That's why I suggested opening up those modules on your machine and seeing if adding that return; fixed it for you.. @7h3w4rd0c70r that's so awesome! thanks for recording that!\nOK so you have the option of creating a PR with that change to get commit credit for it, or I'll be happy to include your username in a commit and take care of it from my end. Which would you prefer?. @hammer65 not sure if this will help you, but give this a look https://msdn.microsoft.com/en-us/commandline/wsl/about. from what I understand, you may not need git bash any longer.. Should be fixed by a3f7277, version 2.9.3. Please do make sure you're perusing all of the info on the README \ud83d\ude09 https://github.com/webpack/webpack-dev-server#caveats\nThere are also several issues which address this which have enjoyed discussion and have been closed (#1136, #1101, #1104, #1084). Please try the search function on issues before creating another in the future \ud83d\udd0e . @cozmo8691 please do try a search before creating a new issue. I just closed an issue with the same exact report 42 minutes ago: https://github.com/webpack/webpack-dev-server/issues/1143\nClosing as duplicate.. @joshuaaron thanks for checking in. unfortunately this isn't the right forum for support questions. citing the issue template:\n\nPlease ask questions on StackOverflow or the\nwebpack Gitter (https://gitter.im/webpack/webpack). General questions, how-to\nquestions, and support requests will be closed.\n\nPlease give one or both of those options a try. It's also super uncool to remove portions of an issue template, and makes the baby seals cry. Templates are always there to help both yourself and the dev teams working on a project. . @awb99 thanks for checking in. unfortunately this isn't the right forum for support questions. citing the issue template:\n\nPlease ask questions on StackOverflow or the\nwebpack Gitter (https://gitter.im/webpack/webpack). General questions, how-to\nquestions, and support requests will be closed.\n\nPlease give one or both of those options a try. It's also super uncool to remove portions of an issue template, and makes the baby seals cry. Templates are always there to help both yourself and the dev teams working on a project. . Holy hiding edge, batman! I award you 10 points for finding that obscure error. I'd say that first and foremost, that should be addressed with the SockJS team, which it looks like you're well on your way to doing.\nI'm focusing my time on the v3 effort and rollout at the moment. Of which one of the major changes is a move away from SockJS and to native WebSocket. I can't speak for all of the contributors of course, but this won't be something I'll be prioritizing for a fix. \nNormally I'd suggest that this be closed, citing the move away from SockJS and the open issue tracking the problem with the SockJS project, but I'm good to leave it open for discussion in the event that another contributor or dev finds and submits a fix.\nEdit: Ah it seems you've already identified a fix in #1148!. Yeah good point; we would actually need a browser for this. I'd leave the example in there as a means to test that change at the moment, even though it's not a traditional example. We can look into headless browser testing for the client in the future.. Thanks much :). Thanks much :). @Andersos thanks for checking in. it looks like what you're asking for is \"rewrites.\" rewrites should already be available via the history-api-fallback options. you can read more about that feature here. \ud83c\udf7b . @Andersos thanks for checking in. it looks like what you're asking for is \"rewrites.\" rewrites should already be available via the history-api-fallback options. you can read more about that feature here. \ud83c\udf7b . Closing as invalid. Please re-read the issue template.. Closing as invalid. Please re-read the issue template.. @Jack-Works thanks for creating a proper issue, and for checking in. Those configuration options are passed directly to http-proxy-middleware. webpack-dev-server doesn't control the options available, so you'll have to create an issue with that project to request that option.. @Jack-Works thanks for creating a proper issue, and for checking in. Those configuration options are passed directly to http-proxy-middleware. webpack-dev-server doesn't control the options available, so you'll have to create an issue with that project to request that option.. Closed in https://github.com/webpack/webpack-dev-server/commit/03ac175ae6eb6fc361e134ea9f8c6f143c273069. Closed in https://github.com/webpack/webpack-dev-server/commit/03ac175ae6eb6fc361e134ea9f8c6f143c273069. resolved in #1183 . resolved in #1183 . @NitsanBaleli because we know that this doesn't happen without the BrowserSyncPlugin, I'm not convinced this is a bug with webpack-dev-server. Have you taken to StackOverflow and/or the webpack Gitter for support on this yet? I'd also suggest creating an issue at https://github.com/Va1/browser-sync-webpack-plugin as your third stop to triaging this issue. I'll lave this open for a bit in the event you find a cause within this module, but we see plugins and loaders screw up WDS all the time, not at the fault of WDS. . @NitsanBaleli because we know that this doesn't happen without the BrowserSyncPlugin, I'm not convinced this is a bug with webpack-dev-server. Have you taken to StackOverflow and/or the webpack Gitter for support on this yet? I'd also suggest creating an issue at https://github.com/Va1/browser-sync-webpack-plugin as your third stop to triaging this issue. I'll lave this open for a bit in the event you find a cause within this module, but we see plugins and loaders screw up WDS all the time, not at the fault of WDS. . @NitsanBaleli please do follow up if this is still a pressing issue. If we reach 30 days without comment it'll be marked as abandoned/stale and closed.. @NitsanBaleli please do follow up if this is still a pressing issue. If we reach 30 days without comment it'll be marked as abandoned/stale and closed.. @zhanwenchen there's so much snark in this one I'm not sure where to begin \ud83d\ude06 \nwe've got tests for routing that pass, and an example for the historyApiCallback feature that works correctly. citing that, I think what you're looking for is some support at configuring your app correctly. And for that we ask folks to swing by StackOverflow or stop by the webpack Gitter first. you're also kind of on an island in this case; this isn't something we see reported. for those reasons, we're going to close this one. unfortunately the issues here aren't a support forum. if you can create a PR with a simple test that reproduces the issue and fails, following the examples that exist as a pattern, without using additional third party modules like React, we'd happily reopen the issue and examine the pull request.. @zhanwenchen there's so much snark in this one I'm not sure where to begin \ud83d\ude06 \nwe've got tests for routing that pass, and an example for the historyApiCallback feature that works correctly. citing that, I think what you're looking for is some support at configuring your app correctly. And for that we ask folks to swing by StackOverflow or stop by the webpack Gitter first. you're also kind of on an island in this case; this isn't something we see reported. for those reasons, we're going to close this one. unfortunately the issues here aren't a support forum. if you can create a PR with a simple test that reproduces the issue and fails, following the examples that exist as a pattern, without using additional third party modules like React, we'd happily reopen the issue and examine the pull request.. @winterbe thanks for the typo fix! please sign the CLA so we can merge this. @winterbe thanks for the typo fix! please sign the CLA so we can merge this. @pateras thanks for checking in. when using hot: true or --hot you don't need to include the plugin. see: https://github.com/webpack/webpack-dev-server/tree/master/examples/hmr\nCan say with all certainty that HMR works as expected on our end. Moving forward, please head to Stack Overflow or the Webpack Gitter before submitting an issue with a configuration problem. . @pateras thanks for checking in. when using hot: true or --hot you don't need to include the plugin. see: https://github.com/webpack/webpack-dev-server/tree/master/examples/hmr\nCan say with all certainty that HMR works as expected on our end. Moving forward, please head to Stack Overflow or the Webpack Gitter before submitting an issue with a configuration problem. . @pateras try running our hmr example first and then building your config on top of that to identify where the problem lies with your config/setup.. @pateras try running our hmr example first and then building your config on top of that to identify where the problem lies with your config/setup.. I'm not sure you have a full handle on how HMR works in this context: https://webpack.js.org/configuration/dev-server/#devserver-hot. I'd also recommend being more specific in your descriptions; there are two types of refresh/reload with regard to HMR - DOM refresh/reload and page refresh/reload as a fallback. Both of these work correctly in our examples. HMR works as intended in webpack-dev-server.\nIf you're experiencing issues with it then you likely have an issue in your config or setup. HMR is part of the main/core webpack project. You can try to take up the issue on that project.. I'm not sure you have a full handle on how HMR works in this context: https://webpack.js.org/configuration/dev-server/#devserver-hot. I'd also recommend being more specific in your descriptions; there are two types of refresh/reload with regard to HMR - DOM refresh/reload and page refresh/reload as a fallback. Both of these work correctly in our examples. HMR works as intended in webpack-dev-server.\nIf you're experiencing issues with it then you likely have an issue in your config or setup. HMR is part of the main/core webpack project. You can try to take up the issue on that project.. We'd be happy to examine a pull request.. We'd be happy to examine a pull request.. ping @filipesilva . ping @filipesilva . @filipesilva nah those client bundles are used in a totally different way. modus-manual-script, modus-inline, modus-frame examples all use the prebuilt client scripts. But the bundles for the other modes have to be built on-demand. Don't really want to go into the \"why\" of that, but changing that would require yet another refactor, and I'm not quite done with the refactor to get us to v3.\nAs a workaround, you could use the DefineWebpackPlugin to set that string; sourceMappingURL=sockjs.min.js.map to an empty string. It's a hack, but it'd probably work just fine.. @filipesilva nah those client bundles are used in a totally different way. modus-manual-script, modus-inline, modus-frame examples all use the prebuilt client scripts. But the bundles for the other modes have to be built on-demand. Don't really want to go into the \"why\" of that, but changing that would require yet another refactor, and I'm not quite done with the refactor to get us to v3.\nAs a workaround, you could use the DefineWebpackPlugin to set that string; sourceMappingURL=sockjs.min.js.map to an empty string. It's a hack, but it'd probably work just fine.. @parkerault webpack-serve. @jakub-wisniewski thanks for checking in. unfortunately you've chosen remove and not to read, or ignore the header of the issue template, which contains important info. for that reason, and for the reasons cited in the issue template, we're closing your issue. . @ev1stensberg we need to get some input from collabs on what kind of version bump this change should warrant. initial thinking is that it should be minor, since we're changing a large dependency, and it appears to be backwards compatible. should also probably hold off on this until webpack accepts https://github.com/webpack/webpack/pull/5869. @ev1stensberg everything seems to work on my end. just waiting for webpack to merge that change.. @ev1stensberg might want to change this over to the next branch instead of master. it's more likely to drop after v3 is released stable, and there's quite a few differences.. @VibhaniNikhil I'm sorry but this isn't the correct repo for questions regarding React. Please also note that Issue Templates are not optional and according to the instructions within it, should not be removed. . @JohannesSanders thanks for stopping in. it looks like you might be new here; searching the issues is always a great place to start, and we recommend using multiple different terms if nothing comes up pertaining to your issue. If all else fails, use the search input at the top of the page, set to \"This repository\" and you'll get results that covers code, pull requests, and issues.\nHowever in this case you're looking for the same result as #1021. please read that conversation and you'll find that pending changes aim to do exactly what you're seeking to do. PR #911 was meant to solve that, but because of issues laid out in #1021, it had to be rolled back.\nWe're going to close this one in favor of the aforementioned issue, so please contribute any additional discussion you'd like to, on that other issue. \n. @tquetano-r7  this is likely caused by your configuration or environment. in this case I'd say the first place to go would be the inspectpack project. please try stack overflow or the webpack gitter for support otherwise. it's important to examine the context of a problem before creating an issue;\n\nCompilation as-of v 3.7.0 (did not exist in 3.6.0 and below)\n\nthis seems to have little to do with webpack-dev-server, but rather an issue with inspectpack or webpack itself, and this repo isn't the right place to raise an issue for either.\nif you can identify an actual bug and culprit within webpack-dev-server, please let us know. closing as a question.. @antoinerousseau this is likely caused by your configuration or environment. please try stack overflow or the webpack gitter for support. if you can identify an actual bug and culprit within webpack-dev-server, please let us know. closing as a question.. @icssjs thanks for stopping in. unfortunately your issue is invalid. please re-read the issue template.. Please do review the documentation in the README https://github.com/webpack/webpack-dev-server#caveats. @MarvinXu you can't use the latest version if you need to support browsers that don't support const and let. iOS 9 was released in 2015 and oldIE support was killed in 2016. As the README states, you'll have to use v2.7.1 if you want to support platforms that old. . @d3viant0ne yeah that was a mistake. I've got a patch release to do so I'll include that fix. \n@MizardX please note that issue templates are not optional, and as stated in ours, if you remove it or ignore it the next time, your issue will be closed without examination. it is not cool to remove an issue template. always fill them out.. @lourenci since you've removed portions of our issue template, your issue is unfortunately invalid. Please re-read the header of the issue template. Stack Overflow or the Webpack Gitter are your support options. \nSince the SSL cert is generated and self-signed, you'll need to click 'ADVANCED' and 'Proceed'. This behavior is expected at the moment. If you'd like to open a PR to modify that behavior we'd be happy to take a look at one.. @BenoitZugmeyer thanks for your patience on this one. It's now merged.. @delabroj thanks for the PR. please be aware that this might take some time to get around to - we have to manually test each and every example in /examples to make sure this won't break anything. and since the beta of v3 is getting released soon, our immediate priorities are to that. (and the beta removes the dependency on jQuery \ud83d\ude04 )\n. @delabroj I neglected to mention that the Pull Request Template is not optional, and removing it is generally frowned up. please don't do that in the future. since jQuery is going to be removed in the next version, we're going to close this PR. thanks again for taking the time to contribute. . @Wavum that means the port you specified is in use. Please see the issue template about support questions and use one of the available options in the future.. @fwielstra thanks for the PR. we'll still have to go through the /examples using this sha to make sure that it doesn't break anything, even though it shouldn't. sockjs in this project is a rather fragile pain point, so we have to be extra certain. please understand that may take a while, as our efforts are focused on v3 (which removes SockJS as a dependency) at the moment. it's also worth noting that this vulnerability shouldn't be an issue for webpack-dev-server, as it should never be run in anything but a dev/test environment, and certainly not exposed to the public.. @mmanavaz I think you might be looking for the main webpack project at webpack/webpack. Even so, this is very clearly a support request rather than a bug report. Please visit Stack Overflow or the Webpack Gitter, as mentioned in the issue template, for help with your compilation issues, or you can also visit the main webpack project.. I'm not sure why you think that; webpack-dev-server contains no TypeScript, and the top-level of that error message is with a file at ./src/main.ts. . @hanxue thanks for the issue! I'm leaning toward not moving forward on this one for a couple of reasons:\n\nit seems that this would be better suited as a PR for webpack itself, as WDS depends directly on it and cannot function without it.\nSeveral issues within the chokidar repo cite having a \"wrong\" version installed that doesn't behave as expected. The project is referencing the version it knows will work with the module, and that'd be easy to get out of sync with.\nchokidar has explicitly set this to an optionalDependency and it has been discussed at length many times in that project.\n\nI'm open to being convinced that this is a needed change, but the reasons need to be compelling.. @ryanwholey (copied from your related PR) thanks for the PR! we love getting new tests submitted and normally would be quick to add them to the repo. right now we're in a holding pattern on new code and new features while we prep v3 on the beta branch. While we're not looking for outside contributions on that branch at the moment, we will be in the near future. we're going to have to put this PR on hold for a bit, but we'll be circling back to it.. Thanks for your patience @ryanwholey and your contributions. We've merged your two PRs.. @ryanwholey thanks for the PR! we love getting new tests submitted and normally would be quick to add them to the repo. right now we're in a holding pattern on new code and new features while we prep v3 on the beta branch. The testing patterns have changed there as well. And while we're not looking for outside contributions on that branch at the moment, we will be in the near future. we're going to have to put this PR on hold for a bit, but we'll be circling back to it.\nAnd just a bit of a side note; when you have related code you want to add to an existing PR, all you need to do is make additional commits to the fork you submitted the PR from, and they'll show up automagically.. @Gehbrial thanks for stopping by. this looks a lot like a support request, more so than a bug report. we ask that users not post support requests here, but rather one of the options listed in the issue template. a bug is something that can be pinpointed to a particular cause, and reproducible outside of your system.\nthere's nothing in WDS that would differentiate between opening a link from a particular source. it also looks like you have an extra colon in the url you say doesn't work; http:://localhost:3000/path/to/access. it sounds a lot like you have a typo somewhere or have a particular issue with your specific environment.\nIf you can put together a test repo that reproduces this consistently (even somewhat consistently), then we'll reopen this one. Rest assured we'll see comments posted.\n. Closing as invalid. See: Issue Template.. @dennisja get to know github and where issue templates live. https://github.com/webpack/webpack-dev-server/blob/master/.github/ISSUE_TEMPLATE.md\nNote: I no longer maintain this repository.. Closed as invalid. Please see the issue template.. @weibangtuo the server behind the scenes is express. webpack-dev-server doesn't modify the headers nor the method nor their casing. if it's a direct issue with the proxy, then the issue lies with http-proxy-middleware. Closed as support request/invalid. Please see the issue template. Additionally; webpack-dev-server doesn't handle the actual bundling, webpack handles that.. @michael-ciniawsky  Please correct me if I'm wrong, but this is a webpack issue, not a webpack-dev-server issue.\n@cmargulhano your previous issue was closed because it was also a support request, which we don't use the issues in this repo for. it's also a better idea to edit an existing issue rather than create a duplicate.\nPlease move the issue over to webpack to address build time issues. webpack-dev-server doesn't handle compilation (webpack-dev-middleware triggers it, webpack does the actual compilation). Closing for now.. @cmargulhano I literally told you how to proceed in my last reply. \n\nPlease move the issue over to webpack to address build time issues. webpack-dev-server doesn't handle compilation (webpack-dev-middleware triggers it, webpack does the actual compilation). Closing for now.. Closing as invalid. Please read the issue template. Please do not open a duplicate issue.. @robert-prib-polestar have you tried using a port set to 0? that should do it. . @robert-prib-polestar thanks for following up. and wow, webpack 1.x is really old! the performance and fidelity improvements alone are worth the upgrade to webpack 3! . @montogeek I no longer maintain this module and have shifted my focus to https://www.npmjs.com/package/webpack-serve. webpack-serve uses https://github.com/sindresorhus/get-port and I believe webpack-dev-server does as well iirc.. Thanks for checking in and for the interest in the project. Unfortunately, this isn't a feature we'll be adding at the moment, and probably not in the future unless there is high demand. I would recommend looking into the overlay option which will show you errors in the browser tab, if there are any.. @micacardillo thanks for checking in and for the thorough explanation of what you're looking to have changed. at the moment the core maintainers aren't doing any work involving sockjs for one important reason - we've removed sockjs in favor of native WebSocket in version 3. we would however, welcome and review a pull request to tackle this.. Yes, the beta branch contains those changes. It's not the socket module at issue; it's the configuration of sockjs in the client. Removing sockjs has removed the need to use a long-polling solution like sockjs, and thus the need/concern for a url tied to the socket, as all websockets use the ws:// protocol.. @ProductivePerson \"when it's ready.\" generally speaking, asking about release dates is kind of taboo for most projects. we've got the milestone in the issues here so you can get a real-time view of what is left to do and what has already been done. coupled with the commit history on the branch, you can get a really good idea of where things are. not to pile on you, but this definitely isn't the right forum for that question. you always have the option to pop into the webpack gitter, or even ping one of the folks in the project on twitter. best to allow issues to stay focused on the original topic.. @AnthonyPaulO I no longer maintain this module and didn't have a hand in the 3.1.0 release. I've moved my attention and efforts to webpack-serve which is a next-gen webpack dev server, and doesn't use SockJS.. We've got this fixed for the v3 beta branch, but would happily review a PR to resolve this for 2.x!. Well it still looks valid for 2.x, so I'd leave it open. And I don't see v3 being released before Feb.. This isn't a support forum. Please see the info in the issue template.. @bochen2014 it's generally considered poor form to continually post replies when editing a single reply will suffice. your comment about a regression is invalid because you are a full major version and several minor versions behind, whilst misusing WDS in an albeit inventive way.. @joltmode thanks for checking in. a few things:\n\n\nremoving the webpack.config.js block makes your issue invalid. since it looks like you're green here, we'll give you a pass given all the other info. but keep in mind we didn't just put those placeholders in for fun.\nyour first stop should have been to search this repo for process.env to see if this module was doing anything with environment variables. In fact, process.env doesn't appear once in code in this repo.\nreally pay attention to your error stacks, as they can provide crucial info and point you in the right direct. more importantly, they can keep you from heading in the wrong direction, where you spend time posting an issue to the wrong project :)\nit looks like the fault may lie with the owner of bootstrap_node.js, or vue-webpack-latest as portfinder is nested under that module's install.\n\nSo for numbers, 2, 3, and 4 we're gonna close this one. If we've overlooked something (it happens) please let us know and we'll reopen, but it looks like your issue lies elsewhere.. No worries @joltmode . @tancnle thanks for checking in. I'd recommend you check out nsp versus sourceclear. NSP is picking up 11 similar vulnerabilities. however, it's important to note that webpack-dev-server is only meant to be run locally, and temporarily for the purpose of debugging. unless you're planning on attacking your own machine, you're not in much danger from the current list. . I'm actually going to reopen this so we can track it in a change to come, and make sure you get credit for the original report in the commit \ud83c\udf7b . Thanks for the PR. Going to pass on this one in favor of a larger update at another time, which will require a minor release. See: https://github.com/webpack/webpack-dev-server/issues/1198#issuecomment-346615350. @hansifer since you chose to remove the code blocks and not provide that for reference, your issue is invalid per the instructions in the issue template.\n\nIf you proceed with this form, please fill out all fields, or your issue may be closed as \"invalid.\"\n\nthe issue you are experiencing is not reproducible, and likely an issue isolated to your specific setup and/or configuration. but we can't really help you there either, because you omitted that information. . @jvanbruegge thanks for checking in. you can use the before option to add additional static middleware (for example; express.static) to suit your needs. . Hm in fairness it kind of is, given it's only the 3rd option listed on the page and in the tree :)\n. That's fair. If you have suggestions for how to improve the docs, we'd welcome a PR at https://github.com/webpack/webpack.js.org. @mrdulin please see the issue template:\n\nPlease ask questions on StackOverflow or the\nwebpack Gitter (https://gitter.im/webpack/webpack). General questions, how-to\nquestions, and support requests will be closed.\n\nUnfortunately you're asking a question seeking support, rather than reporting an actual bug, since our tests cover that exact scenario. your issue is likely a problem with your config or setup. please try one of the support options mentioned.. Closing as invalid. Please see the issue template.. webpack-dev-server uses the opn module to open a browser specified. please take the issue up with that project.. @lileilei I'm sorry, but you left a ton blank on the issue template and I'm really not sure what you're trying to ask. . Just totally ignored the issue template there didn't ya. Closing as invalid.. @websolutions-hamburg thanks for the report, and good catch. I went all the way back through the blame and couldn't figure out when these options were ever used. this commit e7c54525badeee77b3ae19b6a5bd234b4e4fc64f seems to have added the option. It would appear that these are supposed to be used with the chokidar module, which WDS makes use of, but there are some discrepancies. I'll have to get with the team to chat about it and get back to you.. OK so webpack proper is using an org module called watchpack, which is massaging the options before it's passed to chokidar https://github.com/webpack/watchpack/blob/ebcdc813100168af1a61189403a8b1abfa5338a3/lib/DirectoryWatcher.js#L58\nThat's a hold-over from before the project started using chokidar. So we're going to have to update the docs for WDS, and also do the same massaging of options here in WDS (in addition to actually passing the options to chokidar)\nSo there's some work to be done. @jaunkst are you joining this issue to comment on a possibly-related issue, or the same symptoms in a different project? please remember it's best to be verbose. \n\nwatchOptions isn't ignoring anything at all.\n\nin this context that's not actually true. @jaunkst lots of solid info there. but I'm really confused - who is \"we\"? do you work with the original post author?. @jaunkst thanks for clarifying. wanted to make sure I was addressing folks the right way here. Given your discoveries, I think it would be prudent to take this issue up with watchpack first, and webpack second. That is of course, if watchOptions is defined in your webpack.config.js. The other issue we have related to this issue is what I mentioned about the watchOptions not being passed through to chokidar within webpack-dev-server (the commit I linked to) - and that has to be resolved as well. . Waiting on CI to confirm the build and will publish when that's done running. . @evilebottnawi v3 is leveraging loglevel https://github.com/webpack/webpack-dev-server/blob/next/lib/log.js, and output from that should follow the same option, otherwise we'll get unbalanced expectations for log output. that means we need to update webpack-dev-middleware (which I am planning on doing soon) to use the same patterns. going that route, we should introduce the ability for users to provide their own log prefix, rather than granular options.. @evilebottnawi v3 is leveraging loglevel https://github.com/webpack/webpack-dev-server/blob/next/lib/log.js, and output from that should follow the same option, otherwise we'll get unbalanced expectations for log output. that means we need to update webpack-dev-middleware (which I am planning on doing soon) to use the same patterns. going that route, we should introduce the ability for users to provide their own log prefix, rather than granular options.. @evilebottnawi We can merge this as 2.x of WDS is still using 1.x of WDM and 1.x has this older option.\nNote: v2 of webpack-dev-middleware was released and removed reportTime in favor of logTime. v3 of webpack-dev-server supports the same option.. @evilebottnawi We can merge this as 2.x of WDS is still using 1.x of WDM and 1.x has this older option.\nNote: v2 of webpack-dev-middleware was released and removed reportTime in favor of logTime. v3 of webpack-dev-server supports the same option.. @mcpherson-sa thanks for checking in and for doing some dirty work debugging. unfortunately this isn't something we're able to reproduce on our end or in our tests. it's just not something that we know happens in a regular environment. we ask users to provide all of the info requested in the issue template. unfortunately we have no info on how to reproduce and you've removed one of the code blocks and didn't provide a full config. for all of these reasons we're going to close the issue as a support question. we'd also like to ask you to head over to Stack Overflow or pop in the webpack Gitter to request support for this. usually when we see this kind of odd behavior it's due to an errant webpack config or an environment issue. if you happen to put together a project that can reproduce it on a consistent basis, or you find an edge case that causes this on your end, we can reopen the issue and re-evaluate.. @mcpherson-sa thanks for checking in and for doing some dirty work debugging. unfortunately this isn't something we're able to reproduce on our end or in our tests. it's just not something that we know happens in a regular environment. we ask users to provide all of the info requested in the issue template. unfortunately we have no info on how to reproduce and you've removed one of the code blocks and didn't provide a full config. for all of these reasons we're going to close the issue as a support question. we'd also like to ask you to head over to Stack Overflow or pop in the webpack Gitter to request support for this. usually when we see this kind of odd behavior it's due to an errant webpack config or an environment issue. if you happen to put together a project that can reproduce it on a consistent basis, or you find an edge case that causes this on your end, we can reopen the issue and re-evaluate.. @mcpherson-sa closing an issue is an organizational tool. it's not an action that should discourage you. if you feel that our assessment is incorrect, by all means please do dive in. if you find an edge case that can be addressed we'll be happy to reopen to do so. . @mcpherson-sa closing an issue is an organizational tool. it's not an action that should discourage you. if you feel that our assessment is incorrect, by all means please do dive in. if you find an edge case that can be addressed we'll be happy to reopen to do so. . @aaroncass hm I disagree it's not an edge. I can't reproduce it against any example in the repo across four different platforms and OS versions, across multiple stable browsers on real, actual machines on my end. just because we don't agree with an assessment doesn't mean we haven't looked into it. if you can create an example that reproduces that behavior cross-platform on multiple browsers, we'd consider that a legit bug. without that consistency, it is indeed an edge case. @aaroncass hm I disagree it's not an edge. I can't reproduce it against any example in the repo across four different platforms and OS versions, across multiple stable browsers on real, actual machines on my end. just because we don't agree with an assessment doesn't mean we haven't looked into it. if you can create an example that reproduces that behavior cross-platform on multiple browsers, we'd consider that a legit bug. without that consistency, it is indeed an edge case. @Anthony59273 thanks for checking in. unfortunately this falls into a support category. I can see where that might not be really clear, given the fact that this might appear to be a bug. we definitely don't see any of this in any of the tests. I can't find a history of this being reported. if you can track down the culprit, or create a reproducible example (your config is too complex for me to put together something to attempt to reproduce on my end) we'll reopen this one and keep at it, but at the moment we're going to point you to Stack Overflow or the webpack Gitter. I'd also recommend slowly rebuilding your config from a very small starting point and incrementally running to try and figure out what is causing the memory issue. a lot of times that incremental process reveals the bad guy. if all else fails, always try to remove node_modules and reinstall, and if all else fails, try a node reinstall.. @Anthony59273 thanks for checking in. unfortunately this falls into a support category. I can see where that might not be really clear, given the fact that this might appear to be a bug. we definitely don't see any of this in any of the tests. I can't find a history of this being reported. if you can track down the culprit, or create a reproducible example (your config is too complex for me to put together something to attempt to reproduce on my end) we'll reopen this one and keep at it, but at the moment we're going to point you to Stack Overflow or the webpack Gitter. I'd also recommend slowly rebuilding your config from a very small starting point and incrementally running to try and figure out what is causing the memory issue. a lot of times that incremental process reveals the bad guy. if all else fails, always try to remove node_modules and reinstall, and if all else fails, try a node reinstall.. My only other thoughts would be to run the tests in a fork of this repo, and try and run each example to identify which feature may be causing it. If you get through all of the examples and tests without the same error then you'll know that it's not a feature of WDS causing it directly.\nYou could also start a test project using one of the examples in this repo as a base to start with, and slowly adding parts of your app and config into it. You'll absolutely have to go one plugin or loader at a time in order to identify the culprit, or the combo of plugins and loaders which cause the error. I'm afraid this error is probably a toxic combo that'll be really hard to diagnose otherwise.. My only other thoughts would be to run the tests in a fork of this repo, and try and run each example to identify which feature may be causing it. If you get through all of the examples and tests without the same error then you'll know that it's not a feature of WDS causing it directly.\nYou could also start a test project using one of the examples in this repo as a base to start with, and slowly adding parts of your app and config into it. You'll absolutely have to go one plugin or loader at a time in order to identify the culprit, or the combo of plugins and loaders which cause the error. I'm afraid this error is probably a toxic combo that'll be really hard to diagnose otherwise.. @zigang93 thanks for the very thorough issue. this is one of those very complex issues that would require a repo with code to reproduce, and more info on the client that isn't working as expected - mobile OS and mobile browser versions matter too. unfortunately this looks like your mobile client may be running an unsupported browser. given that one client environment is fine and another is not, that points to an issue on the client rather than the server. considering that, and that the code sent to one client isn't any different than another, this isn't a bug report but rather a support request. I'd recommend examining your mobile client for errors and troubleshooting from there. we typically don't let support requests remain open issues, but will leave this one open for 24 hours in the event that you find an edge case that leads to the cause on your end.. @zigang93 thanks for the very thorough issue. this is one of those very complex issues that would require a repo with code to reproduce, and more info on the client that isn't working as expected - mobile OS and mobile browser versions matter too. unfortunately this looks like your mobile client may be running an unsupported browser. given that one client environment is fine and another is not, that points to an issue on the client rather than the server. considering that, and that the code sent to one client isn't any different than another, this isn't a bug report but rather a support request. I'd recommend examining your mobile client for errors and troubleshooting from there. we typically don't let support requests remain open issues, but will leave this one open for 24 hours in the event that you find an edge case that leads to the cause on your end.. You could try to use a different sourcemap generator in your config or prebuild process. Glad you found the culprit, but since it's outside of webpack-dev-server, we have to mark this as a question and close. You can try the webpack gitter, stack overflow, and twitter for help with the sourcemap. . You could try to use a different sourcemap generator in your config or prebuild process. Glad you found the culprit, but since it's outside of webpack-dev-server, we have to mark this as a question and close. You can try the webpack gitter, stack overflow, and twitter for help with the sourcemap. . Nice work. This might also be worth reporting to the webpack main project.. Nice work. This might also be worth reporting to the webpack main project.. @martianmartian given that @zigang93 posted a solution I'm not sure how you can claim that. Regardless, please take to twitter or the Gitter chat for comments like those. They contribute nothing to a discussion, issue, nor pull request. This is not the proper forum for venting. . @martianmartian given that @zigang93 posted a solution I'm not sure how you can claim that. Regardless, please take to twitter or the Gitter chat for comments like those. They contribute nothing to a discussion, issue, nor pull request. This is not the proper forum for venting. . I'd recommend starting with one of the examples, like hmr and slowly applying your changes to the config and code, incrementally testing to make sure it works along the way. That may take a bit, but you'll likely avoid some wall-head contact and the problem should reveal itself relatively quickly. Issues like these are almost always related to a plugin/config or a whacky environment problem.\nAs we hold everyone to, we ask that folks head to Stack Overflow or the Webpack GItter for support questions. Please give one of those a try. We don't leave questions as open issues in this repo, but if you happen to find an edge case bug that we can address, please ping directly and we'll reopen to resolve.. I'd recommend starting with one of the examples, like hmr and slowly applying your changes to the config and code, incrementally testing to make sure it works along the way. That may take a bit, but you'll likely avoid some wall-head contact and the problem should reveal itself relatively quickly. Issues like these are almost always related to a plugin/config or a whacky environment problem.\nAs we hold everyone to, we ask that folks head to Stack Overflow or the Webpack GItter for support questions. Please give one of those a try. We don't leave questions as open issues in this repo, but if you happen to find an edge case bug that we can address, please ping directly and we'll reopen to resolve.. Duplicate. Closing in favor of #1210. Duplicate. Closing in favor of #1210. @Chan-Chun please note that the issue template is not optional, as stated in the issue template. Also as stated in the issue template that this is not a support forum. Closing as invalid.. @Chan-Chun please note that the issue template is not optional, as stated in the issue template. Also as stated in the issue template that this is not a support forum. Closing as invalid.. We already commented on #1215. Creating duplicate issues is frowned upon. Your issue is not a bug, it's a support request. Please use one of the sources mentioned in the issue template for support. . We already commented on #1215. Creating duplicate issues is frowned upon. Your issue is not a bug, it's a support request. Please use one of the sources mentioned in the issue template for support. . @birdwell your webpack config isn't optional. include that, or we'll have to close this as invalid.. I'm unable to reproduce using the watch-content base example, which is very similar to the config you pasted. . > I cloned that repo you referenced\nThat link was to a directory in this repo. So I don't know what you mean by that.\n\nI then used webpack-dev-server command directly instead of npm run webpack-dev-server.\n\nThen you were using a global version of webpack-dev-server?\nI followed the same steps you did, including running using a global install of webpack-dev-server, and was unable to reproduce. You must have run into an edge case on your machine or environment, and will have to debug it on your end. \n. Very strange case indeed. Starting WDS from both methods, on my end, produces and empty object without having to explicitly set it. And no error occurs. I'd like to know more about why your environment seems to be failing to setup the options object properly, but in the mean time you could open a PR for this, and it would be a good first contribution. . @birdwell for sure. the first step is to fork this repo (there's a button near the top right on the main/home page of the repo). then you can change that line you mentioned and commit it. go with a commit message of something like \"fixes #1217: strange case with default watchOptions value\" or whatnot. push your commit to your fork, and you should see a button for opening a pull request on your fork's main/home github page. We'll review it (it'll be quick because it's a small change), merge it, and publish it. And you'll get credit for the fix. ping me on twitter at this same name if you get stuck along the way.. @birdwell that was quick! checkout the comment by jsf-clabot on this PR. we'll need you to sign the CLA so we can merge your PR. . @lencioni thanks for checking in and the PR. unfortunately I can't approve of this change at this time. I don't feel that alpha - or any version-tagged - releases should be included in a dependency range for a non-version-tagged version of a module. When v3 is released as alpha/beta, webpack@4 will be allowed. Until webpack@4 is released as stable, the 2.x branch of WDS will need to stick with the current peerDep range. Of note, that doesn't prevent users from installing and using webpack@4 while it's in alpha.. added this to the alpha release in 03cdce74b2f486a033f52048a80f73a38f149d79. The code in master would seem to disagree with this assessment. \nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L53\nhttps://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L260\nThe example for watch-content-base also works as expected.\nAnd the docs don't show the flags as options that you expect to be working. Your watchOptions should be in a config.\nThis looks like a classic case of misuse.. That's a personal choice of course, but I'd highly recommend reading the actual docs next time before submitting an issue for any project. I don't know as if it holds true that man and --help are the definitive source of info for modern-day tools outside of some hardcore CLI idealists.\nNone the less, what we have here is a display bug resulting from combining webpack's CLI configuration with webpack-dev-server to get some common config for free. See https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L54\nUnfortunately that's adding flags from webpack that webpack-dev-server doesn't support. The docs for this module are correct, the output on the CLI is not. We'll track a new issue to see if we can resolve that. But the takeaway here is to always check the actual docs. . I'd neglected to put this in the response above, but want this to stick out for others who might happen across this issue in the future\nNote the first three lines of the CLI output:\nconsole\nwebpack-dev-server 2.9.7\nwebpack 3.5.6\nUsage: https://webpack.js.org/configuration/dev-server/\nThe important bit there is Usage: https://webpack.js.org/configuration/dev-server/ as the CLI is pointing users towards the proper docs even in the --help output.. Resolved on next branch in 2cb7016. @githoniel thanks for checking in. unfortunately webpack-dev-server doesn't do anything with Promises, babel, nor onunhandledrejection. I believe you're looking at the wrong cause for your particular issue. You're also using a very outdated version of webpack-dev-server. If you can pinpoint the culprit in webpack-dev-server, we'll be happy to reopen. But it looks like you've found a red herring.. That damn package-lock. @ev1stensberg can you address and we'll merge this?. thanks for the issue. should be resolved in alpha5. @kmolerov thanks for checking in. a few things;\n\nwe're not overly concerned about speed given that this is a dev-environment-only server, and some delays are acceptable.\nproxy issues should be taken up with the module which handles the proxies, http-proxy-middleware. webpack-dev-server uses that module directly.\n\nwe've not experience the same kind of dramatic slowdown, so you probably have some kind of a unique situation causing that with http-proxy-middleware. please head to that project to report the issue.. If you feel it's an issue with this module, we'd gladly welcome a pull request that resolved your specific issue. . @robert-prib-polestar thanks for checking in and for the request. But I have to disagree there. By fulfilling your request, we'd be creating an environment of expected unknown quantities. That is to say, the user would never be able to count on what port to expect. Whereas with a strictly defined port, the known value can be counted upon, and if there's an error or the server isn't available on the port specified, a system can react reasonably to that error. \nIf you need dynamic ports, then it's not unreasonable to suggest using the system in place and leaving port undefined. You can count on the first port to be checked/used to be the default of 8080 per https://github.com/webpack/webpack-dev-server/blob/0a8f8965fba4a46a862497f6e7d1ad9377040a15/bin/webpack-dev-server.js#L70. And subsequent ports to be searched and opened from that port. If a base of 8080 isn't preferable for your project, you can always use portfinder in a script on your end to start at a base port more to your liking, and pass the value along for each instance you spawn via the CLI or API. . Yeah it's been considered in the past, but the demand for the feature just hasn't been there. We took a look at express and koa et al as a model to follow, given that we use express under the hood - neither allow automatic port finding and recommend using a third party lib (portfinder) for doing so. We kind of dip the toe in by doing that automagically if a port just straight up isn't defined. But we try very hard not to include every option under the sun, because that just makes a project a maintenance nightmare. When demand is low and a workaround exists, we point folks to the workaround.. Unfortunately this isn't actually a bug in webpack-dev-server, but designed behavior. WDS uses chokidar and the options that WDS uses for chokidar mirror those found in watchpack, which is what webpack proper uses to watch files. \nYou'll notice that depth: 0, is defined in the options both here and in watchpack. That's expicitly to prevent complexity issues. Until watchpack, and by extension webpack, decides to change that value, we must keep it the same. You can try petition the folks running watchpack to allow that value to be changed, however.. @creage I'm not sure why you deleted your comment, but I'm happy to respond none-the-less.\n\n@shellscape well, we've built our build process around this feature, and it was fine for around a year, and now it is removed, and you say it is as designed...\nIs there any workaround to force webpack-dev-server to watch for nested changes of contentBase? I've tried to define my folders as array, but this does not work for some reason - changes still don't trig recompilation.\n\nUnfortunately you built a solution around a bug that was subsequently fixed. If you'd like your use-case to be supported, bearing in mind that it's intentionally unsupported at the moment, the right path is to petition the watchpack module to allow overriding of the depth property to be set via options passed in. If it changes there, webpack-dev-server will quickly follow suit. \n. @creage that's great news. please do share your plugin with the community!. @chasegiunta I no longer maintain this project and instead have shifted my focus to https://github.com/webpack-contrib/webpack-serve, which is in many ways superior to webpack-dev-server and allows users to fully control scenarios like this one. . @SamanthaAdrichem thanks for checking in. A few things: an issue can't be a bug if a feature simply isn't supported, and we don't field support questions (requests for help) in the issues here.\nThat said, webpack-dev-server doesn't control how the proxying works, we leverage http-proxy-middleware. If you have a feature request, that's the proper place to contribute a new feature. . @timtong1982 unfortunately you have an environment setup issue and you're actually requesting support. please try one of the support options listed in the issue template. I'd also recommend brushing up on Github Flavored Markdown syntax as it looks like you have several markdown errors in your post there. Closing as invalid.. @lzl124631x as stated in the issue template, the issue template is not optional and this is not the proper forum for support questions. Closing as invalid.. @zhangwei8607 as stated in the issue template, the issues page here is not a support forum. please use one of the suggested support methods instead in the future.. @ferrybig thanks for reporting the issue. \n\nWebpack dev server starts http://[::]:8080/ in browser what is an invalid ip, what goes against the examples shown here: CLI: Host and Port Options\n\nI'm struggling a little to understand the English here. Can you try to rephrase? . @ferrybig my experience with IPv6 is very limited and I'm afraid we're going to need a PR to resolve this one.. @DoumanAsh thanks for the issue, but please note that webpack-dev-server doesn't appear anywhere in that call stack. if it's an intermittent issue you may want to take it up with the object-hash project instead. Without more information it's hard to tell where that error is originating. webpack-dev-server doesn't depend directly on that module, so I'm afraid it's likely not an issue with this module. We'll leave this one open a while in case you can provide more info, but without greater insight I'm afraid we can't debug this one for you.  (Might want to give updating your version a try too. the current version is 2.9.7). Well it's not used directly, but that's not to say it might be used indirectly, through one of the dependencies. It's just hard knowing what that would be without more info.. @niedzielski thanks for the issue. I'd give webpack-dev-server@next a try and see if that solves the issue first. it's like an issue with optionsSchema.json in the 2.x/master branch. As always we'd welcome a PR.. If i had to venture a guess, it's probably something to do with the schema definition: https://github.com/webpack/webpack-dev-server/blob/master/lib/optionsSchema.json#L282. no worries!. Thanks!. @bencergazda thanks for checking in. We'd be happy to review a pull request for this feature!. @abcd-ca please fill out the pull request template, those aren't optional. we ask that of everyone.. Better, but as a practice you shouldn't remove portions of a template. Looks like you clipped \n\nDid you add or update the examples/?\n\nTemplates (issues and pull requests) are usually there to help everyone interacting with you out :)\nLooks like there are some failures in CI that need to be addressed.. Clicking on the Details link for Travis will show you the builds that failed. Looks like you didn't lint before pushing :). @abcd-ca you don't have to reissue anything (please don't do that). you just need to run npm run test locally and push a fix to the same branch, as the error is in your code.\nHere's the sequence in which you should click on Travis links\n\n\nAnd here's the log in Travis that shows the error\n\nAlways run npm run test before creating a PR for the project :)\n. @abcd-ca thanks for your patience on this one. we've merged it.. @ev1stensberg PR says you're using 2.9.7 - does the same issue exist for 3.0.0? I'm not really sure what your screenshot is trying to convey, I think it's better to use text than images so we can quote, etc. \nalso, what version of webpack does this impact (there's no associated issue, so I don't know what versions of things you're working with to reproduce this. i need to update the PR template :)). We don't see an error that matches on 2.9.7 or 3.0.0 with any of the examples, so I'm not sure why this is causing an issue on your end.. Unfortunately this is a limitation that won't be changed for 2.x. We've ditched SockJS in 3.x (npm i webpack-dev-server@next) in favor of native WebSocket, so this shouldn't be a problem moving forward. \nHowever, I will say that there's just no possible way we can cater to every single person's unique testing environment. The setup you mentioned is one of the more complicated setups for WDS that I've seen [mentioned]. When I see a failure of WDS for something like that, I like to recommend to people that they roll their own server setup using webpack-hot-middleware and webpack-dev-midleware, similar to how koa-webpack does it, and it's not at all that complicated to pull off. That's not to say there isn't a small modifcation to WDS that would avoid the need, but we'd literally go bananas if we tried to tackle the world in this module. . @yyx990803 thanks for the PR, I do appreciate the effort. Unfortunately this isn't one we're going to be merging. It's a topic that's been discussed many times in the issues here. The readme outlines when this was done and what users needing to support unsupported platforms should do (use an older version). If a browser doesn't support const and let,  webpack-dev-server@2.7.1 should be used. The reasons for not bumping a major are also outlined in the readme, whether or not it was the right call has also been debated. Just as webpack@4 (and subsequent major versions of webpack-family modules) is dropping Node 4 support, older platforms can't be supported forever. We're not leaving those users high-and-dry, they'll just have to lag behind as they're already having to do supporting older platforms.. I understand the argument, and as mentioned, this has been discussed at length in other issues.  I would argue it's extremely irresponsible for a browser vendor to continue to distribute a product to 500 million users which is so far beyond modern standards, but there's not much I can say to that effect. These are the same arguments made when China was still predominately on IE6 not long ago. Vendors chose to move forward. At some point the line must be drawn.\nIf users of WDS are stuck having to support very old (or very behind) browsers, they can use v2.7.1 or use workarounds such as this one.\nI also understand the weight your position in the two communities carries, and the water it typically moves. Unfortunately we have a difference of opinion.. A workaround exists for this issue. The webpack core team has taken up discussion of this. Please use the workaround in the meantime. Locking this thread before it goes bananas.. As stated here the webpack core team is discussing this - there are greater issues to consider and patience will be required. Please don't take the \"beat the horse until it's reanimated\" approach. We get that you want to see this happen.. After much discussion amongst the team, we've arrived at a plan for webpack-dev-server moving forward. We're going to merge this PR and will be releasing 2.10.0 once testing is complete.\nMoving forward, webpack-dev-server enters maintenance mode. We won't be accepting any new features or modifications for this module, only fixes. The 2.x branch will be the final major version of webpack-dev-server, and it will be the last to support Node 4, browsers older than the last two major versions, and browsers which don't support WebSockets.\nWe'll make a formal announcement with this info (refined), and info regarding the future direction of dev servers for webpack in mid-February.\n  . @yyx990803 please remove package-lock.json from the PR and we'll merge this.. @yyx990803 it would seem that if the entries are added dynamically (https://github.com/webpack/webpack-dev-server/blob/master/lib/util/addDevServerEntrypoints.js) and inline: true that the scripts don't transpile properly, and this change breaks. IE users are reporting errors with templated strings. See #1268\n  . @JounQin I think I might have mentioned this to you before, but the issue template isn't optional. you MUST fill it out.\n@next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported.. @JounQin I think I might have mentioned this to you before, but the issue template isn't optional. you MUST fill it out.\n@next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported.. All, @next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported. . All, @next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported. . Closing as question. Please see the Issue Template. Clearing DOM events is not the responsibility of this module.. Closing as question. Please see the Issue Template. Clearing DOM events is not the responsibility of this module.. All, @next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported.. All, @next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported.. All, @next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported.. All, @next is no longer being worked on. The team has decided in a change of direction. More info to follow, but you should consider the alpha versions of 3.0.0 unsupported.. Unfortunately we aren't adding any new features to this module for the forseeable future. Please try Stack Overflow or the webpack Gitter to discuss possible workarounds.. Unfortunately we aren't adding any new features to this module for the forseeable future. Please try Stack Overflow or the webpack Gitter to discuss possible workarounds.. We'll happily review a PR to resolve this issue.. We'll happily review a PR to resolve this issue.. Closing as support question. Please see the Issue Template.. Unfortunately @next is no longer being worked on. The team has decided on a change of direction. We do very much appreciate the contribution though!. Thanks for the PR and congrats on your first submission to the project. Unfortunately we're not accepting any new features for the foreseeable future. We do appreciate it though!. Of note, this dependency was in devDeps. If you've forked this repo for any reason, or have a local, non-fork copy, this should be merged to yours. . This isn't a bug. It's by design. Please use a relative URL.. To everyone on this issue who replied \"me too\" - this is not said to be rude, and I say this with \u2764\ufe0f  -\n github reactions have been around for nearly two years now (https://github.com/blog/2119-add-reactions-to-pull-requests-issues-and-comments) specifically to combat the \"me too,\" \"same issue\" replies. Adding those replies to an issue does nothing but make it harder for maintainers to read legitimate information added to the issue by other users. In short, you're hurting the issue more than helping. You should know better by now.\nWe've locked this issue to prevent further flooding in of those kinds of comments. That said, we're working on resolving the problem today. . yargs has been rolled back to v6.6.0 in webpack-dev-server@2.10.1. Issue is resolved. We'll look into the breakages of that dependency update and issue a patch once an upgrade path is found.. Also just added a test to make sure that this dependency doesn't get updated again. It's bit us a few times in the past. Tests will now fail (preventing publish) if that is updated again. Perhaps at some point in the future we'll move away from yargs to something more minimal. . @lpinca thanks for submitting the PR none the less. I'm sorry that I didn't get a chance to review it. I'm currently the only active maintainer and I'm getting married in a few days, so it's been difficult to carve out time for the project. Cheers \ud83c\udf7b . @drcmda per #1259 we're having yargs issues. also note that the peerDeps for this module don't state support for the webpack@next versions. consider it unsupported at this time.. I'd like to amend this slightly:\njs\nif(typeof self !== \"undefined\" && typeof WorkerGlobalScope === \"undefined\" && !self instanceOf WorkerGlobalScope) {\nIf we find another reason to check to see if the script is executing within a WebWorker, we'll want to move that out to a shared var.. I'm in agreement with @Phoenixmatrix and @also . no sense in obfuscating parameters here and one-letter variables make me stabby. please do change v to value. . Please use https://www.npmjs.com/package/internal-ip (first choice) or https://www.npmjs.com/package/dev-ip to replace the need for this file. . I don't feel that lan is semantic for this feature. options.useLocalIp or some such would probably be easier to understand at first glance.. well I'm not sure we want to be telling users about this \ud83d\ude04 . I don't understand why you're using self.WorkerGlobalScope here. self instanceof WorkerGlobalScope should be correct.. this is duplicating the same functionality as the quiet option though, isn't it? https://webpack.js.org/configuration/dev-server/#devserver-quiet-. do we need the || argv[\"open\"] === \"\" from the original logical check? (pretty sure we do, but could be wrong). \"Let the CLI open your browser to a specific page on the site.\". it looks obvious as to why this was changed to hostname but what I'm wondering is if there was reason it was using headers. I think we may need tests around this to be certain.. Maybe I'm having an off day, but I don't see how this is any different..\njs\nvar a = {};\na['b'] || ''  // <== \"\"\nIs argv[\"open-page\"] returning \"undefined\" as a String here or some such for some reason?. you're already performing this check on line 340, and on 461 you're checking the truthy value of options.open which is set on 341 and 343. shouldn't this be if(typeof options.open === \"string\")?. you've changed the type for yargs to string on line 95, and an empty string is falsey - is there a reason you're checking the truthy value of args[\"open\"] and also checking that it's not empty?. not a fan of two nearly identical calls to open and subsequent logging. should be something like this:\n(this is pseudo code, don't copy and paste it)\n```js\nvar openOptions = {};\nvar openMessage = \"Unable to open browser\";\nif (typeof options.open === \"string\") {\n  openOptions = { app: options.open };\n  openMessage =+ \" :  \" + options.open;\n}\nopen(uri + options.openPage, openOptions).catch(function () {\n  console.log(openMessage + \"If you are running in a headless environment, please do not use the open flag.\");\n});\n``. I'm not following you. You're saying that this statement won't be hit because argv is for command line use, yet the statement that my comment was for is within a logical block where the checks are against argv. I'm not sure your reply addresses the comment.. I'd like to see https://www.npmjs.com/package/ip andip.isV4Format` used here, rather than a regex.. If the dependencies were being packaged for a production environment, I'd agree with you. Since this is strictly a development tool, tried and true dependencies to perform utility functions are acceptable. You'll see that pattern throughout the commit history. (for example; loglevel over a custom implementation).. that's true, good catch. It may be worthwhile to solve. I haven't heard of anyone using IPv6 in that way, but the call out by @trygveaa is valid. Totally up to you if you'd like to create a followup PR. I'd like to see a small modification here please. \njs\nvar contextKeys = hotCtx.keys();\nif(contextKeys.length && contextKeys[\"./log\"]) {\n. Please add \"This is passed directly to the https server\" to the description so folks know what the purpose is, since there are some mixed-use child properties in the https property. . not a fan of negative-options, meaning a positive value will result in the negative reassignment of another variable. let's also keep the variable names the same as the querystring parameter. so;\njs\nlet hotReload = true;\n...\nconst qs = window.location.search.toLowerCase();\nhotReload = !qs.indexOf('hotreload=false');\nthe code was trimmed for brevity, but those are the changes I'd like to see. should probably only load this plugin if options.progress is true as well. given that it's an opt-in and the browser console doesn't have control characters, I don't believe it is. . I'll clean up that typo in a bit. this will break dynamic port assignment, port 0 was intentional there for that reason. . preferably we'd follow the same pattern established on line 342 with the setup middleware. 'before' would be inserted into that array before setup and after would be added to the array before line 355. after shouldn't be here. same goes for the changes on lines 353, 357. rather, it should be pushed to defaultFeatures before line 365 - just before the forEach. this is not a good way to check a url for a protocol. please use url.parse instead, and examine the result for a protocol. . this is almost never a good idea in the browser - on the off chance that the while condition is not met, this will lock the browser forcing a close. please use setInterval in conjunction with clearInterval. the log message should also be moved to just before the actual call to reload. sorry, but this is not what was requested in previous comments\n\nthis is not a good way to check a url for a protocol. please use url.parse instead, and examine the result for a protocol. . would probably be better to use includes.shim(); here, no? https://github.com/ljharb/array-includes/blob/master/shim.js. great documentation of the why. that'll certainly be beneficial in the future. these are more for \"how to\" for users, but there's no harm in adding this. the tests that matter are in /test. no worries if you can't get to adding one there, we can do it after merging.. @michael-ciniawsky hm? please elaborate :). haha no worries. something good to keep in mind though!. I may be having a brain fart here, so please correct me if I'm wrong. this doesn't look like it'll avoid mutating the stats property. there's a larger issue here (which is resolved in the v3 beta branch) of the options passed being mutated on the whole:\n\n```js\nvar a = { stats: {} };\nfunction doit (o) {\n  o.stats = Object.assign({}, a.stats, { color: '0' });\n}\ndoit(a);\na;\n// returns\n// {stats: {\u2026}}\n//   stats: {color: \"0\"}\n//   proto: Object\n```\nI could be missing something, but I think the solution is to prevent the top level options object passed to devServer from being mutated. \n. I see, I see. Hadn't considered that case. Could you put a simple test for this in /test?. a less impactful option would have been to set options.progress within the existing if block. keep an eye on those kinds of simple changes in the future and give them favor.. ",
    "appsforartists": "I removed the host in wds.listen altogether and that also works.  I still don't understand why host is behaving like it is.\n. Since removing the host parameter works around this,  I suppose I can close it, but I don't understand the point of host if it binds to a particular IP address (as opposed to filtering by the Host header).  Which IP address a host resolves to is always outside the control of the web server; it's controlled by DNS and/or by the hosts file of the requesting machine.  Moreover, that IP almost always belongs to another device (like a load balancer).\nWhen would you ever want to use .listen(8070, \"bikeindex.local\") to bind to a particular IP address, and how would the computer know which address that was?\n. I encountered a similar problem.  In my case, I'd like to serve one file from /dist/ and another from /static/.  As you can see, webpack serves both from /dist/, the value in the first config in my list.\n. I encountered a similar problem.  In my case, I'd like to serve one file from /dist/ and another from /static/.  As you can see, webpack serves both from /dist/, the value in the first config in my list.\n. I encountered a similar problem.  In my case, I'd like to serve one file from /dist/ and another from /static/.  As you can see, webpack serves both from /dist/, the value in the first config in my list.\n. ",
    "rottmann": "Yes it is the react-router with a sample react component.\n. Thanks, found the problem: apparmor blocked something on port 8080. (previously i run a docker project and uninstalled docker)\nFunny problem, script compilation run and browser message for reload appears, only the browser view not update thats why it was not obvious what was not working.\n. ",
    "bobzhang": "I see the same problem @rottmann , how can I fix it?\nLogs below look perfectly fine, just chrome not updated ..\n[WDS] App hot update...\nbundle.js:8022 [WDS] App hot update...\nbundle.js:7911 [HMR] Checking for updates on the server...\nbundle.js:7945 [HMR] Updated modules:\nbundle.js:7947 [HMR]  - 59\nbundle.js:7897 [HMR] App is up to date.\n. ",
    "mikealexander": "@bobzhang did you find a solution?  I am seeing the same problem.\n. @bobzhang did you find a solution?  I am seeing the same problem.\n. ",
    "mharmuth": "I ran into the same problem yesterday. Any information on how to fix that? \n@mikealexander Did you find a solution for your problem?\n. I ran into the same problem yesterday. Any information on how to fix that? \n@mikealexander Did you find a solution for your problem?\n. ",
    "lxibarra": "I have this same problem, anyone help\n. I have this same problem, anyone help\n. ",
    "YamiOdymel": "Same problem, the browser received the hot-update.js but updated nothing,\nI tried to execute the code which is in the hot-update.js and still nothing happened.\n. Same problem, the browser received the hot-update.js but updated nothing,\nI tried to execute the code which is in the hot-update.js and still nothing happened.\n. Okay, I solved this problem by STOP USING webpack-merge for my config.entry.client.\nmodule.exports = merge(config, \n{\n    entry:\n    {\n        cilent: \n        [\n            'webpack-hot-middleware/client', \n            config.entry.client\n        ]\n    }\n})\nCHANGE TO\nconfig.entry.client = ['webpack-hot-middleware/client', config.entry.client]\n. Okay, I solved this problem by STOP USING webpack-merge for my config.entry.client.\nmodule.exports = merge(config, \n{\n    entry:\n    {\n        cilent: \n        [\n            'webpack-hot-middleware/client', \n            config.entry.client\n        ]\n    }\n})\nCHANGE TO\nconfig.entry.client = ['webpack-hot-middleware/client', config.entry.client]\n. ",
    "wunderg": "Did anyone find a solution?. ",
    "Armour": "I also met this problem, and I solved it by change\n~~~js\nimport { AppContainer } from 'react-hot-loader';\nimport App from 'js/App';\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        ReactDom.render(\n          \n\n,\n          document.getElementById('root'),\n        );\n    });\n}\n~~~\nto \n~~~js\nimport { AppContainer } from 'react-hot-loader';\nimport App from 'js/App';\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        const NextApp = require('js/App').default;\n        ReactDom.render(\n          \n\n,\n          document.getElementById('root'),\n        );\n    });\n}\n~~~\nSeems the App won't refresh it self, so we need to re-import it, also need to make sure import it after(or say inside) the module.hot.accept function call.\nHope it helps :)\n. I also met this problem, and I solved it by change\n~~~js\nimport { AppContainer } from 'react-hot-loader';\nimport App from 'js/App';\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        ReactDom.render(\n          \n\n,\n          document.getElementById('root'),\n        );\n    });\n}\n~~~\nto \n~~~js\nimport { AppContainer } from 'react-hot-loader';\nimport App from 'js/App';\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        const NextApp = require('js/App').default;\n        ReactDom.render(\n          \n\n,\n          document.getElementById('root'),\n        );\n    });\n}\n~~~\nSeems the App won't refresh it self, so we need to re-import it, also need to make sure import it after(or say inside) the module.hot.accept function call.\nHope it helps :)\n. I also met this problem, and I solved it by change\n~~~js\nimport { AppContainer } from 'react-hot-loader';\nimport App from 'js/App';\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        ReactDom.render(\n          \n\n,\n          document.getElementById('root'),\n        );\n    });\n}\n~~~\nto \n~~~js\nimport { AppContainer } from 'react-hot-loader';\nimport App from 'js/App';\nif (module.hot) {\n    module.hot.accept('./App', () => {\n        const NextApp = require('js/App').default;\n        ReactDom.render(\n          \n\n,\n          document.getElementById('root'),\n        );\n    });\n}\n~~~\nSeems the App won't refresh it self, so we need to re-import it, also need to make sure import it after(or say inside) the module.hot.accept function call.\nHope it helps :)\n. ",
    "davincho": "Thanks @Armour. I followed https://webpack.js.org/guides/hmr-react/ which says \"Note that because webpack 2 has built-in support for ES2015 modules, you won't need to re-require your root component in module.hot.accept\" but the browser did not update the view. After \"re-requiring\" the component within the module.hot.accept callback everything worked as expected.\n. Thanks @Armour. I followed https://webpack.js.org/guides/hmr-react/ which says \"Note that because webpack 2 has built-in support for ES2015 modules, you won't need to re-require your root component in module.hot.accept\" but the browser did not update the view. After \"re-requiring\" the component within the module.hot.accept callback everything worked as expected.\n. ",
    "chbinghu": "Thanks @Armour, it works well! \nMy index.js is:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './containers/App'\nconst render = Component => { \n    ReactDOM.render(\n        \n\n,\n        document.getElementById('react-root')\n    )\n}\nrender(App)\n/* It doesn't work\n * \n    if(module.hot) {\n        module.hot.accept('./containers/App', () => {\n            render(App)\n        })\n    }\n /\n// It works well\nif(module.hot) {\n    module.hot.accept('./containers/App', () => {\n        const NextApp = require('./containers/App').default\n        render(NextApp)\n    })\n}\n. Thanks @Armour, it works well! \nMy `index.js` is:\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './containers/App'\nconst render = Component => { \n    ReactDOM.render(\n        \n\n,\n        document.getElementById('react-root')\n    )\n}\nrender(App)\n/* It doesn't work\n * \n    if(module.hot) {\n        module.hot.accept('./containers/App', () => {\n            render(App)\n        })\n    }\n /\n// It works well\nif(module.hot) {\n    module.hot.accept('./containers/App', () => {\n        const NextApp = require('./containers/App').default\n        render(NextApp)\n    })\n}\n```. ",
    "tiodot": "I have the same problem,   there is interesting solution which use \"self-accepting\",\nthe index.js is:\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './containers/App'\nconst render = Component => { \n    ReactDOM.render(\n        \n\n,\n        document.getElementById('react-root')\n    )\n}\nrender(App)\n/* It doesn't work\n * \n    if(module.hot) {\n        module.hot.accept('./containers/App', () => {\n            render(App)\n        })\n    }\n /\n// It works well\nif(module.hot) {\n    module.hot.accept();\n}\n. I have the same problem,   there is interesting [solution](https://github.com/gaearon/react-hot-boilerplate/pull/61#issuecomment-255515129) which use \"self-accepting\",\nthe `index.js` is:\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContainer } from 'react-hot-loader'\nimport App from './containers/App'\nconst render = Component => { \n    ReactDOM.render(\n        \n\n,\n        document.getElementById('react-root')\n    )\n}\nrender(App)\n/* It doesn't work\n * \n    if(module.hot) {\n        module.hot.accept('./containers/App', () => {\n            render(App)\n        })\n    }\n /\n// It works well\nif(module.hot) {\n    module.hot.accept();\n}\n```. ",
    "daviddelusenet": "I'm also experiencing this issue. I've asked a question on StackOverflow which can be seen here:\nhttp://stackoverflow.com/questions/43491310/cant-get-webpack-2-hmr-react-to-work\nThis works for me:\nif(module.hot) {\n  module.hot.accept();\n}\nThis also works for me:\nif(module.hot) {\n  module.hot.accept('./components/TodoApp', () => {\n    const NextApp = require('./components/TodoApp').default;\n    render(NextApp)\n  })\n}\nThis doesn't:\nif (module.hot) {\n  module.hot.accept('./components/TodoApp', () => {\n    render(TodoApp)\n  });\n}\nWhy doesn't the default setup work? Really confused.. I'm also experiencing this issue. I've asked a question on StackOverflow which can be seen here:\nhttp://stackoverflow.com/questions/43491310/cant-get-webpack-2-hmr-react-to-work\nThis works for me:\nif(module.hot) {\n  module.hot.accept();\n}\nThis also works for me:\nif(module.hot) {\n  module.hot.accept('./components/TodoApp', () => {\n    const NextApp = require('./components/TodoApp').default;\n    render(NextApp)\n  })\n}\nThis doesn't:\nif (module.hot) {\n  module.hot.accept('./components/TodoApp', () => {\n    render(TodoApp)\n  });\n}\nWhy doesn't the default setup work? Really confused.. ",
    "hrasoa": "Had the same issue since this morning and this fixed it !. Had the same issue since this morning and this fixed it !. ",
    "ssynix": "I had the same issue and it boils down to how module code generation works in your setup (through Babel/TypeScript). From my limited understanding, webpack 2 should be able to inject the require call using ES6 modules. I use TypeScript, and the below tsconfig values worked for me:\njs\n{\n    \"target\": \"es6\",\n    // \"module\":  Don't override this to anything\n    \"moduleResolution\": \"node\",\n}\nI remember reading about a module: false parameter in Babel that did something similar for webpack + Babel configs.\nmodule.hot.accept() and module.hot.accept('module') may not always be interchangeable. Make sure you understand what they each do.. I had the same issue and it boils down to how module code generation works in your setup (through Babel/TypeScript). From my limited understanding, webpack 2 should be able to inject the require call using ES6 modules. I use TypeScript, and the below tsconfig values worked for me:\njs\n{\n    \"target\": \"es6\",\n    // \"module\":  Don't override this to anything\n    \"moduleResolution\": \"node\",\n}\nI remember reading about a module: false parameter in Babel that did something similar for webpack + Babel configs.\nmodule.hot.accept() and module.hot.accept('module') may not always be interchangeable. Make sure you understand what they each do.. ",
    "derekdon": "@ssynix I'm also using typescript (2.2.2) and I can't seem to get react-hot-loader@next it to work following the https://github.com/gaearon/react-hot-loader/tree/master/docs#webpack-2 example as @davincho did. Re-requiring the app in the hot reload handler works, as does just calling module.hot.accept(), but I'd like to get it working as documented. As I think @ssynix is right \"it boils down to how module code generation works in your setup\", I've been trying a number of different settings without much luck (would like to take advantage of tree shaking). \n// main.tsx\nimport { AppContainer as HotContainer } from 'react-hot-loader';\nimport { default as App } from './containers/AppContainer';\n...\nconst render = (Component: any) => {\n    ReactDOM.render(\n        <HotContainer>\n            <Component\n                store={store}\n                routes={routes}\n            />\n        </HotContainer>,\n        root\n    );\n};\n...\nif (module.hot) {\n        module.hot.accept('./containers/AppContainer', () => {\n            if (root) {\n                ReactDOM.unmountComponentAtNode(root);\n            }\n            render(App);\n        });\n    }\n//.babelrc\n{\n    \"presets\": [\n        [\n            \"es2015\",\n            {\n                \"modules\": false\n            }\n        ],\n        \"stage-0\",\n        \"react\"\n    ],\n    \"plugins\": [\n        \"react-hot-loader/babel\",\n        ...\n    ]\n}\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"isolatedModules\": true,\n    \"moduleResolution\": \"node\",\n    \"target\": \"es2015\"\n    ...\n  }\n}. ",
    "wufenfen": "if(module.hot) {\n  module.hot.accept();\n}\nThis works for me too, in the angular app. Thanks so much~~~. if(module.hot) {\n  module.hot.accept();\n}\nThis works for me too, in the angular app. Thanks so much~~~. ",
    "jasondonnette": "I struggled with this for a bit with Webpack 3 and got it working with the import() syntax. Not sure if this is helpful to anyone but here's what's working for me:\n```import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { AppContainer } from 'react-hot-loader';\nconst run = async () => {\n  const { Root } = await import('index');\n  ReactDOM.render(\n    \n\n,\n    document.getElementById('react'),\n  );\n};\nconst loadedStates = ['complete', 'loaded', 'interactive'];\nif (loadedStates.includes(document.readyState) && document.body) {\n  run();\n} else {\n  window.addEventListener('DOMContentLoaded', run, false);\n}\nmodule.hot.accept('index', run);\n```. ",
    "gdepina": "@swxy \nThis works for me thanks a lot!\nI am using, webpack 2.2 + RRV4 + React-hot-loader v3 and webpack-hot-middleware.\n```\nif(module.hot) {\n    module.hot.accept();\n}\n. @swxy \nThis works for me thanks a lot!\nI am using, webpack 2.2 + RRV4 + React-hot-loader v3 and webpack-hot-middleware.\nif(module.hot) {\n    module.hot.accept();\n}\n. @swxy \nThis works for me thanks a lot!\nI am using, webpack 2.2 + RRV4 + React-hot-loader v3 and webpack-hot-middleware.\nif(module.hot) {\n    module.hot.accept();\n}\n```. ",
    "hedgepigdaniel": "I had this issue and for me the underlying problem was misconfigured babel presets.\nBefore (leading to exactly the same HMR situation as @daviddelusenet):\njavascript\npresets: [\n  [ 'es2015', { modules: false } ],\n  'stage-0',\n   'react',\n]\nAfter (The usual approach now works):\njavascript\npresets: [\n  [ 'env', { modules: false } ],\n   'react',\n]\nI think options to a preset can be overriden by other presets, in this case presumably stage-0 also turned the modules transform back on.\nSource: https://stackoverflow.com/questions/43491310/cant-get-webpack-2-hmr-react-to-work/43500626. I had this issue and for me the underlying problem was misconfigured babel presets.\nBefore (leading to exactly the same HMR situation as @daviddelusenet):\njavascript\npresets: [\n  [ 'es2015', { modules: false } ],\n  'stage-0',\n   'react',\n]\nAfter (The usual approach now works):\njavascript\npresets: [\n  [ 'env', { modules: false } ],\n   'react',\n]\nI think options to a preset can be overriden by other presets, in this case presumably stage-0 also turned the modules transform back on.\nSource: https://stackoverflow.com/questions/43491310/cant-get-webpack-2-hmr-react-to-work/43500626. I had this issue and for me the underlying problem was misconfigured babel presets.\nBefore (leading to exactly the same HMR situation as @daviddelusenet):\njavascript\npresets: [\n  [ 'es2015', { modules: false } ],\n  'stage-0',\n   'react',\n]\nAfter (The usual approach now works):\njavascript\npresets: [\n  [ 'env', { modules: false } ],\n   'react',\n]\nI think options to a preset can be overriden by other presets, in this case presumably stage-0 also turned the modules transform back on.\nSource: https://stackoverflow.com/questions/43491310/cant-get-webpack-2-hmr-react-to-work/43500626. ",
    "jyotendra": "Thanks @hedgepigdaniel. Its mentioned in the react-hot-loader doc here, that \n\n\"To make this work, you'll need to opt out of Babel transpiling ES2015 modules by changing the Babel ES2015 preset to be [\"es2015\", { \"modules\": false }]\". Thanks @hedgepigdaniel. Its mentioned in the react-hot-loader doc here, that \n\"To make this work, you'll need to opt out of Babel transpiling ES2015 modules by changing the Babel ES2015 preset to be [\"es2015\", { \"modules\": false }]\". \n",
    "gpnoel": "I finally got this working after 5+ hours looking through many different github issues and tutorials.\nFirst off, versions for what I'm using currently:\n webpack: 4.1.1\n webpack-dev-server: 3.1.1\nTwo things helped resolve this issue and have the browser reload on source code change:\n\nsetting webpack's config for hot to false -- hot: false\n\nPeople said that they did not include this property in their config s but I had to set the value to false for it to work for me\n\nincluding  a bundle to the client for webpack-dev-server:\n\njavascript\nentry: {\n  hmr_endpoint: 'webpack-dev-server/client?http://localhost:8008'\n}\nWhatever you name it doesn't matter. including it in an array works as well; just be wary of mismatching types if you are doing this all through Node's api like I am.\njavascript\nentry: [\n  'webpack-dev-server/client?http://localhost:8008'\n]\nObviously change the port to whichever one you are working with in your project.\nHope this helps someone and resources I looked at that helped me come to this:\n1 2 3. I finally got this working after 5+ hours looking through many different github issues and tutorials.\nFirst off, versions for what I'm using currently:\n webpack: 4.1.1\n webpack-dev-server: 3.1.1\nTwo things helped resolve this issue and have the browser reload on source code change:\n\nsetting webpack's config for hot to false -- hot: false\n\nPeople said that they did not include this property in their config s but I had to set the value to false for it to work for me\n\nincluding  a bundle to the client for webpack-dev-server:\n\njavascript\nentry: {\n  hmr_endpoint: 'webpack-dev-server/client?http://localhost:8008'\n}\nWhatever you name it doesn't matter. including it in an array works as well; just be wary of mismatching types if you are doing this all through Node's api like I am.\njavascript\nentry: [\n  'webpack-dev-server/client?http://localhost:8008'\n]\nObviously change the port to whichever one you are working with in your project.\nHope this helps someone and resources I looked at that helped me come to this:\n1 2 3. ",
    "ejoo": "@tiodot 's solution worked with Typescript + React but failed with Redux and Redux Saga Integrated.. ",
    "geowarin": "Yep, I think it would be a really cool feature.\nI got a similar request for my plugin: https://github.com/geowarin/friendly-errors-webpack-plugin/issues/7.\nI think it would be very interesting to have React warnings (I think they use console.error for those) show up in the CLI.\nMaybe @gaearon would agree here?\nThose logs would be really useful if emitted as webpack errors, is that possible?\n. ",
    "hswolff": "Would you want to throw an error or just log it?\n. Rebased + updated.\n. Updated!\n. ",
    "jiyinyiyong": "Fixed by changing  port to 8080:\npublicPath: 'http://localhost:8080/assets/',\nStill feeling change.. so it's not a bug, probably something a bit confusing...\n. Because of defer in our case. I'd like to drop defer.\n. Because of defer in our case. I'd like to drop defer.\n. @SpaceK33z not configuring Webpack by myself for long. So, can't reproduce.\n. Looks good to me https://github.com/mvc-works/webpack-hud/tree/with-new-api\nStill want to ask if I can get the stripped string, since in the browser people are unlikely to need ANSI escape code. Then I should not need to strip by myself:\njs\nconst errorMsg = webpackMsg.data.map((s) => stripAnsi(s)).join('\\n');\n. Typo fixed.\n. ",
    "zzz6519003": "it work !\n. guess you should check if there's some proxy extension on your chrome XD\n. or shadow sock something\n. thanks man!\n. ",
    "natew": ":+1: \n. Nice, thank you. I tried this, but now it does this:\nbuild took 12154ms\nYour build is complete.\nNote: If you see a warning about your routes, this is ok!\nWe do dynamic requires that causes Webpack to output this error\nHash: 8e732e1dd38dc1252ce6\nVersion: webpack 1.7.0\nTime: 12088ms\n       Asset     Size  Chunks             Chunk Names\n sunrise.jpg    61778          [emitted]  \n   river.jpg    35232          [emitted]  \n  winter.jpg    30584          [emitted]  \nyosemite.jpg    93280          [emitted]  \n     main.js  1703306       0  [emitted]  main\nchunk    {0} main.js (main) 1508450 [rendered]\n...\nI guess I can do a setTimeout, but is there a cleaner way to hook in so I can output that stuff after the build stats?\n. The setTimeout seems to work alright for now.\n. Seeing this as well. ",
    "luisrudge": "I can't use the inline option as well :(\nnew WebpackDevServer(compiler, {inline: true}) doesn't work\n. :+1:\n. Rolling back to 1.10.1 fixed this issue for me\n. thoughts?\n. thoughts?\n. @iansinnott are you using gulp with webpack?\n. Probably, yeah. I'm using webpack in other projects without gulp with success.\n. I haven't tried with gulp again.. \n. hehe. sorry. It probably was an issue with my config file. I started another one from scratch and it's working :)\n. ",
    "jasonkenneth": "I hate to reopen the discussion, but we have a slightly different requirement. Basically, we're using a pfx file for the certs and have slightly different options. We need these https options in three different places: the main web server, webpack-dev-server, and livereload. \nOne option for webpack-dev-server to support this would be to behave like livereload and pass-thru the https options. Webpack-dev-server could then supply a couple of defaults folks could use:\nnew Server(webpack(config), {https: Server.defaultHttps});\nAnother option is to look for a property on the https options called something like 'overrideDefault' to signal a need to override all https options: like so.\n. ",
    "ruudk": "I'd like a version bump too.. Really want to use this feature!\n. ",
    "maxdow": "+1\n. ",
    "elektronik2k5": "+1\n. ",
    "fusepilot": "Would like this option as well. The logs are a bit verbose after everything is setup correctly.\n. How does this fix #276? Theres still a ton of client side logging and I dont see how to disable it.\n\n. That was it, thanks!\n. ",
    "FlorentD": "+1 as well \n. ",
    "dalhundal": "As a very messy temporary work around, I have a script, development.js which i conditionally append to the entry in webpack.config.js.\n```\n\"use strict\";\n// This is a workaround used alongside the webpack-dev-server hot-module-reload feature\n//  - it's quite chatty on the console, and there's no currently no configuration option\n//    to silence it. Only used in development.\n// Prevent messages starting with [HMR] or [WDS] from being printed to the console\n(function(global) {\n    var console_log = global.console.log\n    global.console.log = function() {\n        if (!(\n            arguments.length == 1 &&\n            typeof arguments[0] === 'string' &&\n            arguments[0].match(/^[(HMR|WDS)]/)\n        )) {\n            console_log.apply(global.console,arguments)\n        }\n    }\n})(window)\n```\nIt overloads console.log - skipping any messages starting with [HMR] or [WDS]. It does the job - the fact that it's only used in development eases my discomfort at its horridness :-)\n. As a very messy temporary work around, I have a script, development.js which i conditionally append to the entry in webpack.config.js.\n```\n\"use strict\";\n// This is a workaround used alongside the webpack-dev-server hot-module-reload feature\n//  - it's quite chatty on the console, and there's no currently no configuration option\n//    to silence it. Only used in development.\n// Prevent messages starting with [HMR] or [WDS] from being printed to the console\n(function(global) {\n    var console_log = global.console.log\n    global.console.log = function() {\n        if (!(\n            arguments.length == 1 &&\n            typeof arguments[0] === 'string' &&\n            arguments[0].match(/^[(HMR|WDS)]/)\n        )) {\n            console_log.apply(global.console,arguments)\n        }\n    }\n})(window)\n```\nIt overloads console.log - skipping any messages starting with [HMR] or [WDS]. It does the job - the fact that it's only used in development eases my discomfort at its horridness :-)\n. ",
    "felipenmoura": "Hi\nOut of nothing, I started seeing these messages in my terminal every time I update a file:\nwebpack built c6aa9a16a68277967229 in 3390ms\nwebpack built 3fdedc302da408daa8dd in 341ms\nI narrowed it down to realize it only happens when I have webpackHotMiddleware enabled, even if I have noInfo: true, quiet: true set.\nAny idea?. ",
    "alansutherland": "Thought it was bad form to leave console.log() lines in your production code.... ",
    "yinsang": "chrome allow-control-allow-origin plugin. ",
    "bebraw": "Yeah, it has been too long since I opened this issue. Better close. I'll re-open if this comes around again.\n. Apparently enabling history api fallback fixes this. A user reported webpack-dev-server -d --inline --history-api-fallback --output-public-path / works.\nPerhaps it should be enabled by default?\n. @mushishi78 Yeah, that's a valid point. It's not a real solution in that sense. It just covers the common case, not all of it.\n. Cool. Sounds great!\n. You should set up a separate configuration for production usage (no HMR, minified etc.). I go through basic techniques here.\nYou can use whatever solution you are comfortable with for serving the build result. You can even generate a simple index.html with html-webpack-plugin. Alternatively you can achieve the same by utilizing webpack stats feature. That provides you enough information for writing references to your template.\n. Here, https://github.com/webpack/webpack-dev-server/commit/efd32a05944499b0c8165da6ff75519fb8fe21a6#diff-15fb51940da53816af13330d8ce69b4e . That removed var proxy = new httpProxy.createProxyServer({secure: false}); and the branch you are pointing depends on that.\n. I think a documentation PR related to this could be welcome. You can document how to achieve delay so people know how to set it up.\n. You can likely adapt one from the main repository. See here.\n. Looks good to me.\n. I'm thinking the best course of action would be to decouple WDS from webpack entirely. I have a feeling their interaction leads some of those configuration issues.\nI understand you need to do entry and HMR configuration on webpack to get this working, but the way it's currently done isn't great. There's also the additional problem of devServer configuration at webpack core. Validation for that should probably happen at WDS.\nGood problems to solve.\n. Time to close?. Ok, let's close.. @sagiavinash Can you respond to Kees' questions so we can proceed with the issue?. The refactoring looks like a good idea to me so \ud83d\udc4d .. Good idea. \ud83d\udc4d . No blockers. Just waiting a merge by @SpaceK33z.. Why does moduleA depend directly on webpack? If it's public, can you link to it.. @pigcan Ok. It's a little tricky problem. One way to solve it would be to push scheme validation to a package of its own, but it's likely that's not going to happen (syncing issues).. @SpaceK33z Yeah. I don't understand why (s)he is using webpack 1 specific tools with webpack 2. There's something obvious I'm missing.. @pigcan Any thoughts on this? Can you explain why you are using webpack 1 tools with webpack 2 setup? I don't think there's any particularly easy solution at WDS for this particular problem.. FYI, there's a PR at #790 for this now.. Note that --hot sets HotModuleReplacementPlugin too. You are missing that from your original configuration. If you use --hot, you should not set it, but if you go through devServer.hot, it has to be used.. Nope.. Hi,\nThere's not enough information to debug. Any chance you could include a full project?. I think I see now. You have to implement the client interface somehow. I have a small write-up here.. You are missing the related import. Please set var path = require('path');.. There's not a lot of code yet. It's the hook part that's completely missing. If we get that, then it's good.. There's not a lot of code yet. It's the hook part that's completely missing. If we get that, then it's good.. There's not a lot of code yet. It's the hook part that's completely missing. If we get that, then it's good.. @shellscape Yeah, waiting for feedback/direction.. @shellscape Yeah, waiting for feedback/direction.. It should be technically simple to implement but I don't know webpack internals well enough. UX-wise this would be a big win (unified config).. It should be technically simple to implement but I don't know webpack internals well enough. UX-wise this would be a big win (unified config).. Hi,\nThis isn't a WDS issue. Could you open a question at Stack Overflow with a standalone project so people can have a good look? Thanks.. Can you set up a standalone project? It's not possible to debug this otherwise.. It uses http-proxy-middleware underneath. Could you try to set up a standalone test case against that so we can rule out a WDS bug?. Can you set up a standalone project?. Closing as this is an intentional behavior as described above.. Based on the error you have process field in your configuration. Removing that should resolve the issue.. @dfcowell Are you using WDS 2.5.0?. Yeah, I haven't seen that one before. It could be a bug somewhere but without a standalone project it's hard to tell.. Yeah, the problem is, how to trigger a warning.\nI tried copying\njavascript\n// This results in a warning:\n// if(!window) require(\"./\" + window + \"parseable.js\");\nto the example from modus-inline, but that doesn't trigger a warning at all (not there either). Maybe something changed between webpack 1 and 2?. The problem is that those two files resolve fine on macOS. It would fail only on Windows and so on.. The only obvious way I can see would be to go through eslint and eslint-loader. That would work regardless of the platform.. Ah, yeah. I see now. I think I have to add the plugin to the configuration as it's not enabled by default.. Got it. You have to do\njavascript\nrequire(\"./casesensitive.js\");\nrequire(\"./caseSensitive.js\");\nIt requires multiple, different imports pointing to the same place in order to work. This is enough for me. \ud83d\udc4d . Done.. Can you write tests for this?. Yeah, agreed. \ud83d\udc4d . ",
    "Offirmo": "For fellow googlers: https://stackoverflow.com/questions/42085609/ignoring-files-with-webpack-dev-server. Could you share your solution for other f***ing morons around the internet, like me?. Ok not what I was expecting but thanks. My solutions for other googlers:\nWhy is webpack-dev-server serving old files?\nwebpack-dev-server has no persistent cache. If you restarted it and it continue serving old files, it means that those files actually exist somewhere in your directory structure and are picked. Did you duplicate your project and are still pointing to the old one, for ex. through \"publicPath\" or \"contentBase\"? (= my problem)\nWhy is react complaining about development is undefined even when I triple-checked?\nYes, the incorrect line 'process.env.NODE_ENV': \"development\" is somewhere in your code. Do a file search for process.env.NODE_ENV and you'll find it ;) In my case, it was in the webpack invocation parameters in package.json/scripts! Also, if you use webpack >=4, you shouldn't have to define this var yourself, it's gained for free through config.mode = 'development'. ",
    "tvararu": "Actually, after further testing I've found that it does not actually solve the entire problem. I'll update the PR.\n. I found the problem and my PR does not address it. For the inline feature to work, the webpack compiler needs to receive a configuration object with an .entry object that respects this format:\njavascript\n{\n  app: [\n    require.resolve('webpack-dev-server/client/') + '?' + 'http://' + config.hostname + ':' + config.webpackPort,\n    'webpack/hot/dev-server',\n    './app/app.js'\n  ]\n}\nWhere config.hostname and config.port are localhost and 8080 respectively in the default usecase.\nThis needs to be better documented. If someone could point me in the right direction, I'll gladly do so when I get a free moment.\n. ",
    "voronianski": "@sokra @steveme @jhnns I have very similar issue:\n``` bash\nwebpack-dev-server --hot --inline --progress --colors\n70% 1/1 build modules\nTypeError: Object /Users/me/github/app-webpack/node_modules/webpack-dev-server/client/index.js?http://localhost:8080,webpack/hot/dev-server,webpack/hot/dev-server has no method 'replace'\nat Tapable. (/Users/me/github/app-webpack/node_modules/webpack/lib/NormalModuleFactory.js:42:26)\n```\nwebpack config:\n``` javascript\n'use strict';\nvar webpack = require('webpack');\nmodule.exports = {\n    entry: [\n        'webpack/hot/dev-server',\n        './src/app.js'\n    ],\n    output: {\n        path: __dirname + '/public/build/',\n        filename: 'bundle.js',\n        publicPath: '/build/'\n    },\n    resolve: {\n        extensions: ['', '.js', '.jsx']\n    },\n    module: {\n        loaders: [\n            {\n                test: /.(js|jsx)$/,\n                exclude: /node_modules/,\n                loaders: ['babel-loader?experimental']\n            }\n        ]\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.NoErrorsPlugin()\n    ]\n};\n```\nbase.html  is served via express server where {{mainJS}} is passed to locals as 'http://localhost:8080/build/bundle.js' (also want to figure out how better serve this in production):\nhtml\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>App Webpack</title>\n</head>\n<body>\n    <div id=\"app\"></div>\n    <script src=\"{{mainJS}}\"></script>\n</body>\n</html>\n. @gaearon I did it.. The only difference is that I'm using CLI instead of Node.js API.\n. @gaearon @sokra demo repo with reproducible bug might help - https://github.com/voronianski/webpack-trouble-demo \n. @gaearon yep, setting publicPath explicitly to http://localhost:8080/build/ solved this error :+1: \n. @gaearon thanks! Probably now issue can be closed.\n. ",
    "iest": "Get this exact error too, what @Zache said. Fixed by removing GTM in dev...\n. ",
    "MattKunze": "I'm getting this when I have the redux-devtools Chrome extension active - the extension injects a script into the document which doesn't have a src attribute\n. ",
    "micha149": "I can confirm this problem with the redux devtools chrome extension\n. ",
    "3LOK": "We get it because we lazy load our scripts...\n. ",
    "hijonathan": ":eyes: me too\n. ",
    "ptz0n": "Same here. Seems to be related to the defer attribute of the script element.\nUpdate: https://github.com/webpack/webpack-dev-server/pull/447 solves the issue. :+1: \n. Same here. Seems to be related to the defer attribute of the script element.\nUpdate: https://github.com/webpack/webpack-dev-server/pull/447 solves the issue. :+1: \n. Sorry, but I don't get what's hindering us from merging either #447 or #394.\nPlease merge or clarify \ud83d\ude38 \n. Sorry, but I don't get what's hindering us from merging either #447 or #394.\nPlease merge or clarify \ud83d\ude38 \n. LGTM :+1: \n. ",
    "achimnol": "I have faced this issue with deferred ZenDesk script injection. Looking forward to find a good solution!\n. ",
    "reem": "I and several other members of my team are hitting this issue as well and I believe it is just because of chrome extensions that we have. It would be really great if the fix from #447 was backported to v1 even if it's only a temporary solution. Right now we are just stuck refreshing the page until it works, which is a very frustrating side effect of an otherwise amazing tool!\n. ",
    "Braincompiler": "Is it also fixed in 1.16.x? We cannot use webpack2 (it tries to resolve our dynamic module loading approach using System.import and we cannot prevent webpack2 from doing this).\n. ",
    "aryzing": "Not sure if this issue is back, but I'm seeing the error\nWarning: React DevTools encountered an error: TypeError: Cannot read property 'replace' of null\nas reported by #381. This error is reported the very first time webpack HMRs. Subsequent HMRs do not cause this error to show up. Let me know if you need a repo reproducing the issue.. ",
    "haustraliaer": "I too can confirm strange errors with uppercase folder names for relative requires...\nMy module folder structure is something like:\nModule/\n   _SomeChild/\n      index.js\n   _AnotherChild/\n      index.js\n   index.js\nWhere in index.js for Module I do:\nrequire('./_SomeChild')\nrequire('./_AnotherChild')\nI thought I may have hit some kind of module limit as my project is getting very large at this stage and I was getting all sorts of weird behavior with this specific group of modules when I added them, such as:\n- webpack-dev-server compiling correctly... but then hanging when I manually refreshed (and giving strange 404 messages and such).\n- hot reloader not applying updates and then hanging in the CLI\n- The whole webpack build process failing to this error:\nfs.js:1056\n    throw errnoException(process._errno, 'watch');\n          ^\nError: watch EMFILE\n    at errnoException (fs.js:1024:11)\n    at FSWatcher.start (fs.js:1056:11)\n    at Object.fs.watch (fs.js:1081:11)\n    at processItem \n    ...\nBut then saw this issue, changed my relatively linked folder names to lowercase:\nModule/\n   _somechild/\n      index.js\n   _anotherchild/\n      index.js\n   index.js\nNow it works fine.\nWhat is also strange, however, is that I only hit this problem at a certain point in time. This leads me to believe that it is not actually the capitalisation - but in fact something more like, I have two relative folders required in my project using the same name.\nBy lowercasing one of them, it would perhaps avoid watch errors on the other?\n. Hmmm I'm not so sure that was the problem now - just seems like I hit a limit on modules with the hot-reloader.\nSwitching to standard dev-server (reload whole app on change) fixes the problem.\n. ",
    "arlair": "I had a similar issue where no files updated in a folder with a starting uppercase letter. I was merging two example projects together and they were using different folder conventions.\nI noticed in the webpack bundling log the folder was showing as lowercase. Once I renamed the folder with a lowercase letter it started working.\nUsing OS X as well.\n. Actually, after further investigation, it seems like the folder was uppercase, but the ES6 import statement was lowercase. The page loaded the first time, but subsequent changes did not reload.\nI tested making the folder uppercase and the ES6 import uppercase and it was reloading on changes. Sorry about that.\n. ",
    "colindresj": "Great thanks guys. @sokra any chance we can get @troutowicz commit published to NPM? It would be great to be able to do this from the config instead of cli.\n. ",
    "MrOrz": "Since WebpackDevServer API is used, I think you have to include HotModuleReplacementPlugin in the webpack config and webpack/hot/dev-server in your entry as well.\nAs for webpack-dev-server.js, you may just add it either using entry (combine 'webpack-dev-server/client' with your existing entry, like the portal entry, as an array) or <script> tag. Adding both might not work better.\n. Probably because API has no access to the webpack config:\nhttps://github.com/webpack/webpack-dev-server/issues/106#issuecomment-74278863\n. @geddski \nThe following two setup should work:\njs\n// webpack.config.js\ndevServer: {\n  proxy: {\n    '*': 'http://localhost:5000'\n  }\n}\nand\njs\n// webpack.config.js\ndevServer: {\n  proxy: {\n    '*': {target: 'http://localhost:5000'}\n  }\n}\nHowever, the deprecation warning for contentBase proxy is a bit confusing. The warning reads:\nUsing contentBase as a proxy is deprecated and will be removed in the next major version. Please use the proxy option instead.\nTo update remove the contentBase option from webpack.config.js and add this\nproxy: {\n    \"*\": [your current contentBase configuration]\n}\nSo I put this in my config and the proxy does not work:\njs\nproxy: {\n    \"*\": [{target: 'http://localhost:5000'}]\n}\nSince [ ] has special meaning in Javascript, I suggest using < > instead of [ ] when wrapping the placeholder text.\n. As far as I know, Google Chrome caches static files quite aggressively. If you spin up other web servers (like python -m SimpleHTTPServer) and browse it using Chrome, you may also need to hit reload several times to get the modified JS come into play.\n. +1 also bumped into this error, plz merge asap\n. :+1:\n. @ALF-er Sorry that you bumped into this issue. I made a pull request that upgrades socket.io-client used in webpack-dev-server to the latest version, which contains a nasty bug.\nIn your webpack.config.js there is a line:\njs\nentry.push(\"webpack-dev-server/client?/\");\nIn theory this should make socket.io-client connect to a socket.io server on localhost:4000, since we asked socket.io-client to connect to /, and as we are currently browsing localhost:4000, the socket.io-client should connect to localhost:4000 as well.\nHowever, there is an open issue ( https://github.com/Automattic/socket.io-client/issues/812 ) that said socket.io-client would ignore the :4000 part in the url and connects to port 80, which has no socket.io server and causes timeouts.\nPersonally I am also having this issue. My current (and ugly) solution is to open up node_modules/webpack-dev-server/node_modules/socket.io-client/lib/url.js, look for loc.hostname, change it to loc.host and hit save. In the master branch of socket.io-client this fix has been already fixed, but somehow it has not been published yet.\n. Hi @talwoolf ,\nHow did you add webpack-dev-server to your webpage? Through <script src=\"http://${wp_host}/webpack-dev-server\"></script> or through webpack \"entry\" config?\nIt seems that wp_host variable is not interpreted to a string correctly.\n. You will need some sort of preprocessor for your config to turn ${WP_HOST} and ${WP_PORT} into valid strings.\nOr you may just replace ${WP_HOST} to the actual value? (ie. 127.0.0.1 or localhost)\n. @talwoolf I think I get your problem... You are using ES6 syntaxes right? (I mistook WP_ for wordpress variables in PHP...)\nES6 template strings should be wrapped with  \" ` \" (back-tick) rather than single or double quotation marks. Thus it should be\n`webpack-dev-server/client?http://${WP_HOST}:${WP_PORT}`\nAlso, make sure your node runtime (i.e. iojs) support template strings.\n. @xpepermint I've also encountered this issue. devServer, as well as output.publicPath, are ignored when webpack.config.js exports an array. Currently I am doing stuff like this to get around:\n``` js\n// Altered version of:\n// https://github.com/webpack/webpack/blob/master/examples/i18n/webpack.config.js\n//\n// All edits are prepended with \"// EDIT:\".\nvar path = require(\"path\");\nvar I18nPlugin = require(\"i18n-webpack-plugin\");\nvar languages = {\n    \"en\": null,\n    \"de\": require(\"./de.json\")\n};\nmodule.exports = Object.keys(languages).map(function(language) {\n    return {\n        name: language,\n        entry: \"./example\",\n        output: {\n            path: path.join(__dirname, \"js\"),\n            filename: language + \".output.js\",\n        // EDIT: Populates __webpack_public_path__ for loaders like file-loader\n        publicPath: \"/some-public-path/\"\n\n    },\n    plugins: [\n        new I18nPlugin(\n            languages[language]\n        )\n    ]\n};\n\n});\n// EDIT: Extend the exported array with additional keys:\n//\nmodule.exports.output = {\n  // EDIT: for webpack-dev-server to serve files under /some-public-path/\n  publicPath: \"/some-public-path/\"\n};\nmodule.exports.devServer = {/ devServer configurations /}\n``\n. @xpepermint I've also encountered this issue.devServer, as well asoutput.publicPath, are ignored whenwebpack.config.js` exports an array. Currently I am doing stuff like this to get around:\n``` js\n// Altered version of:\n// https://github.com/webpack/webpack/blob/master/examples/i18n/webpack.config.js\n//\n// All edits are prepended with \"// EDIT:\".\nvar path = require(\"path\");\nvar I18nPlugin = require(\"i18n-webpack-plugin\");\nvar languages = {\n    \"en\": null,\n    \"de\": require(\"./de.json\")\n};\nmodule.exports = Object.keys(languages).map(function(language) {\n    return {\n        name: language,\n        entry: \"./example\",\n        output: {\n            path: path.join(__dirname, \"js\"),\n            filename: language + \".output.js\",\n        // EDIT: Populates __webpack_public_path__ for loaders like file-loader\n        publicPath: \"/some-public-path/\"\n\n    },\n    plugins: [\n        new I18nPlugin(\n            languages[language]\n        )\n    ]\n};\n\n});\n// EDIT: Extend the exported array with additional keys:\n//\nmodule.exports.output = {\n  // EDIT: for webpack-dev-server to serve files under /some-public-path/\n  publicPath: \"/some-public-path/\"\n};\nmodule.exports.devServer = {/ devServer configurations /}\n```\n. Yeah it seems like when webpack-dev-server loads config, it didn't consider the case that the config is an array.\nSpeaking of fixing it, given an array of configurations (whose publicPath and devServer may differ), which config should webpack-dev-server take? There can be multiple bundles from an array of configuration, but there should be only one running webpack-dev-server instance.\n. Yeah it seems like when webpack-dev-server loads config, it didn't consider the case that the config is an array.\nSpeaking of fixing it, given an array of configurations (whose publicPath and devServer may differ), which config should webpack-dev-server take? There can be multiple bundles from an array of configuration, but there should be only one running webpack-dev-server instance.\n. Maybe webpack-dev-server compiles your code, but did not know when to send them to the browser. Also, webpack-dev-server stores the compiled bundle in memory, thus the old copy remains in the file system. That's why your browser are always getting the old files.\nWebpack-dev-server reads output.publicPath in the config. Whenever browser sends a request to get file under that path, it tries to return the compiled bundle.\nIf you access your bundle.js using <script src=\"/build/bundle.js\"></script>, you may try the following in the CLI, which should be equivalent to setting up output.publicPath in a config file:\nwebpack-dev-server --output-public-path=/build/\n. @QuantumInformation If you want it to live reload, you'll need to setup hot mode as instructed here: http://webpack.github.io/docs/webpack-dev-server.html#hot-mode\n. :+1: for this patch.\nI make webpack-dev-server proxy point to my backend server. It was a real pain to kill the remaining backend server processes every time I made a typo that crashes the proxy. After switching to @mrsharpoblunto 's branch, I never have to do that again!\n. :+1: for this patch.\nI make webpack-dev-server proxy point to my backend server. It was a real pain to kill the remaining backend server processes every time I made a typo that crashes the proxy. After switching to @mrsharpoblunto 's branch, I never have to do that again!\n. ",
    "binarykitchen": "thanks but i chose something else ... couldn't wait so long \n. thanks but sorry, i picked something else ...\n. sorry but we are picking gulp-connect for the dev server because we do not like the idea serving assets from memory\n. ",
    "Chrazy": "server.close()\n. ",
    "pixels4nickels": "@binarykitchen could you please share your solution?\nI need to stop the server (and selenium) from my npm script. So using server.close()will not work for me either.\n. ",
    "cy6erGn0m": "a shutdown port or shutdown via REST would be helpful \n. ",
    "skozin": "Ah, now I see this line in the comments:\njs\n// Note: this does _not_ add the `HotModuleReplacementPlugin` like the CLI option does.\nWhat's the reason for this behaviour?\n. @MrOrz, thanks! I'm closing this issue in favor of that one you linked.\n. I'm seeing this too, several times an hour (running client inside a VM); makes webpack-dev-server completely unusable.\nHere are the related SockJS issues: https://github.com/sockjs/sockjs-node/issues/185 https://github.com/sockjs/sockjs-node/issues/197. They say it's fixed in sockjs-node v0.3.17.\nUpdating version of sockjs in package.json to ^0.3.17 should fix this.\n. @csaintc @byCedric btw, removing your node_modules directory and doing fresh npm install should fix the issue as well, as the new sockjs version 0.3.17 matches the semver ^0.3.15 specified in webpack-dev-server's package.js. If this doesn't help, you can manually npm install sockjs@0.3.17.\nI suggest updating semver in dev-server's package.json only to enforce installation of the new sockjs version in all cases, e.g. behind a caching npm proxy.\n. ",
    "stutrek": "I'm assuming you mean the contentBase option, @sokra? That doesn't work for my situation because I have local files that I need to use with a service that's running on a different port. Unless I misunderstand it, with contentBase it's impossible to access any tests within the repo.\n. Absolutely.\nShould this documentation be updated too?\nhttp://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server\n. @sokra I added them, not sure if you want them styled in any specific way.\n. @sokra I removed the warning for non-deprecated redirects\n. Using contentBase as a proxy is deprecated, using it to serve files or redirect is not.\n@KeKs0r, I'm not sure if you're having trouble with the proxy or serving static files. Try '/api/*' instead, wildcards are handled by express.\n. Good call, @sokra, done.\n. @sokra I changed it to use the same library as express-static to serve the static file. It gets mime-type, content-length, etc. now.\n. @sokra I just added an additional bit of functionality which I can remove from this and make a new PR for if you don't like or don't like how I did it.\nNow, if you prefix a contentBase with devserver:, instead of serving from the local file system, it will serve from the dev server's file system. This is useful when generating files with hashes and referencing them in a generated index.html because the html file only exists in the dev server's file system.\n. @sokra Rebased on master. I need both changes and I imagine you'd rather only have one versioning task, so I changed the devserver: thing to what I think you meant.\njavascript\napp.get(contentItem.path, function (req, res, next) {\n    req.url = contentItem.target.replace('devserver:', '');\n    this.middleware(req, res, next);\n}.bind(this));\nThis is clearly better because there's less duplication. Now it's being blocked on compiling twice, once when the request is made and again when this.middleware is called. The very first thing I tried was mutating the request then calling next, but the middleware executes before this does, causing it to 404.\n. @sokra do you dislike the concept of serving stuff from the dev server or the way it was implemented here? Is there an alternative for serving a single HTML file that's generated by webpack?\n. ",
    "jlongster": "\nThis commit: cf126c0\nThat's not published yet...\n\nHow do you tag versions? It wasn't clear to me how to check what 1.7.0 is.\nBecause I just did npm install webpack-dev-server@1.7.0, see here:\n% npm ls webpack-dev-server\njlongster.com@ /Users/james/projects/jlongster4\n\u2514\u2500\u2500 webpack-dev-server@1.7.0\nWith this version, I definitely hit this bug. I have to downgrade to 1.6.4 to fix it.\n. Oh my gosh. I just hit a terrible npm bug that I've heard about before. You know what fixed it?\nnpm cache clear\nI've heard from others that if you npm install something straight from a local git repo, sometimes the cache gets confused and doing a npm install webpack-dev-server later will still install the local git repo instead of actually downloading the latest version of npm.\nMy problems are gone now and installing the latest version works. OMG. Can't believe how much time that just wasted. Sorry for the noise here. :)\nEDIT: (this bug has been fixed in npm 2.* versions I believe)\n. ",
    "tommedema": "I would like to see this actually. For the command line especially.\n. ",
    "mzedeler": "Does this also work with websockets?\nI'm constantly getting http 404 for http://localhost:3001/sockjs-node/info?t=<...> when i use http.createServer(wds.app).listen(...).\n. Does this also work with websockets?\nI'm constantly getting http 404 for http://localhost:3001/sockjs-node/info?t=<...> when i use http.createServer(wds.app).listen(...).\n. ",
    "Jokero": "This is actually not so rare situation :+1: I need also both http and https. Redirect from http to https also would be ok. @sokra Looks like this is not rare situation :smiley: . Also found that I need a way to change the port for sockjs). Ah, you don't use inline mode. Otherwise there is already public option https://webpack.js.org/configuration/dev-server/#devserver-public. @evilebottnawi Are you kidding?) It's absolutely illogical to have mode=production by default in dev-server. Original message now has 48 upvotes and 0 downvotes, it's for a reason.. @evilebottnawi Are you kidding?) It's absolutely illogical to have mode=production by default in dev-server. Original message now has 48 upvotes and 0 downvotes, it's for a reason.. ",
    "kitsunekyo": "bump. i always need both environments.\nis this possible yet?. ",
    "jasonjiflyer": "This is really not rare situation. ",
    "ehausen": "I would also need both!. ",
    "michaelhartmayer": "Yes please.. ",
    "thisguychris": "+1 here\n. same issue here, it works in osx, same config doesn't work on windows 8.1.\nI was having problem when using the hash option, it started working if I just use bundle.js without a hash.\n. ",
    "geddski": "@sakabako could you provide example of how to use this new option?\n. +1\n. web sockets support will be very nice. I currently proxy them manually with a separate server.\n. webpack-dev-server 1.14.1 has it.\n. This was helpful to me as well, thanks @chemzqm \n. @mik01aj the 1.14.1 release has it.\n. ",
    "SimenB": "npm publish please :smile:\n. Does anyone have a working solution for serving static files using webpack-dev-server, but rerouting all other request to a different server without using contentBase, as it's deprecated?\nJust a quick note to @jamon, not contributing to the issue at hand at all :laughing: \nnpm is really good at resolving GitHub dependencies, so you can just go npm install jamon/webpack-dev-server#installable.\n. @sakabako Ah, I misunderstood then. Thanks for the swift response!\n. https://github.com/SimenB/webpack-fun/\nThat worked with an extremely simple express backend a couple months ago. Haven't tested since, but should still be good.\nWe have a complete working sample at work, I can send relevant parts tomorrow if you still need it.\nEDIT: All we do is\njs\nnew WebpackDevServer(compiler, {\n    hot: true,\n    inline: true,\n    proxy: {\n        '*': 'http://localhost:7021'\n    },\n    stats: { colors: gutil.colors.supportsColor }\n}\nWith localhost being a Spring app running on weblogic. The url kan be staging or other enviros as well, proxying works fine. Using 1.10.1 for both webpack and webpack-dev-server.\ncompiler has no proxying in it.\nThe project is closed source, so I can't link to the complete config\n. This destroys HMR for us. Using client/index.js as it was before this PR works. 1.10.1 works, 1.11.0 does not.\nFirst it says [HMR] Waiting for update signal from WDS... then just the screenshot.\nOur entry is webpack-dev-server/client?http://:::3030 This was the only way to make it work cross-OS for us (at least at the time, might have changed)\n\n. That's correct. We always know the port as that's the port of WebpackDevServer. But the host IP changes. It's basically localhost, but setting either localhost or 0.0.0.0 makes it not available on the LAN. We want to access the running server from other machines than just the one running the dev-server\n. http://:::3030 is perfectly valid IPv6. https://en.wikipedia.org/wiki/IPv6_address#Presentation\nWe should be able to use 0.0.0.0, though...\n. Using 0.0.0.0 works now. No idea why it didn't before... It's been that way for 6 months, I don't really remember why we went with ::.\nEdit: I'll have to test on a WIndows machine tomorrow, will report back. 0.0.0.0 works on my Linux at least\n. Specify what? The entry?\njs\n  webpackConfig.entry = [\n    'webpack-dev-server/client?http://0.0.0.0:3030',\n    'webpack/hot/only-dev-server',\n    path.join(__dirname, 'js/app.js')\n  ];\n. Ah, ok. Makes sense :smile: \n. Hangs forever using 'webpack-dev-server/client?http://[::]:3030' Doesn't throw the error though\n\n. @kentor output.publicPath = '/'\n. Doesn't work on windows, so for now we're stuck on 1.10.1...\n\n. Entry is still 'webpack-dev-server/client?http://0.0.0.0:3030', and yes, localhost\n. Using \njs\nconsole.log(__resourceQuery);\nconsole.log(urlParts);\nconsole.log(window.location.hostname);\nconsole.log(\n  url.format({\n    protocol: urlParts.protocol,\n    auth: urlParts.auth,\n    hostname: (urlParts.hostname === '0.0.0.0') ? window.location.hostname : urlParts.hostname,\n    port: urlParts.port\n  })\n);\nLinux (working):\n\nWindows (failing):\n\n. Oh seems to be Lync messing up the copy paste... Using 0.0.0.0 works!\nLync added the url again in <>, which messed up the parsing.\nI still think url.parse messes up, but this works for us now :smile: \n. Yeah, connecting from other machines works fine, as long as they're on the same LAN. Might work independently of that, but we haven't tested it\n. I use html-webpack-plugin, so no manual script tags.\nRelevant part of template:\nhbs\n<body>\n<div id=\"container\"></div>\n{{#each htmlWebpackPlugin.files.chunks}}\n    <script src=\"{{this.entry}}\"></script>\n{{/each}}\n</body>\nMy entry for webpack can be seen in a comment above\n. No, it's Backbone app, but the templates are using Handlebars, so I kept going with that for html-webpack-plugin (as I really dislike blueimp). Next version of the plugin will support lodash templates though, so we'll probably switch to that.\n. The script tags are generated, and are the entry chunks (of which we have 1).\n\nNo specifying the port in scripts, as webpack-dev-server handles that part\n. Don't use GH dependencies please! Breaks builds on machines without access to the internet\n. Using a proxy. Nexus amongst others supports proxying the npm registry\n. @sokra ping\n. @sokra Updated\n. @sokra ping.\nAlso, thoughts on a v1 branch?\n. @sokra ping.\n. @sokra ping.\n. That's by design. It's for the entrypoint webpack/hot/only-dev-server. You still need to activate hmr with hot.\nThe goal of this option was to avoid supplying entrypoints, as can be seen in my opening post\n. #394 \n. yargs normalizes it, so both works. I can change it though :smile: \n. ",
    "jamon": "I've added a pull request to make this support wildcards/regular expressions in the proxy configuration.  See https://github.com/webpack/webpack-dev-server/pull/148.\nex:\nproxy: [\n            {\n                path: /\\/google(.*)/,\n                target: \"http://www.google.com/\"\n            }\n        ],\nThanks,\nJamon\n. @Keks0r,\nMy solution will probably work for you, because you can selectively proxy subpaths with wildcards.  You can test it by doing an npm install git+https://github.com/jamon/webpack-dev-server.git#installable.  Your conf would look very similar to mine, above:\n```\n devServer = new webpackDevServer(webpack(webpackConfig),{\n        contentBase: './build/',\n        hot: true,\n        watchDelay: 100,\n        proxy: [{\n            /\\/api(.*)/: \"localhost:9091\",\n}],\n    noInfo: true\n});\n\n```\n. For those interested, I've updated my related pull request to allow rewriting the request.  This should solve your issue @pvolok.\nExample:\nutility for rewriting URLs\nvar rewriteUrl = function(replacePath) {\n    return function(req, opt) {  // gets called with request and proxy object\n        var queryIndex = req.url.indexOf('?');\n        var query = queryIndex >= 0 ? req.url.substr(queryIndex) : \"\";\n        req.url = req.path.replace(opt.path, replacePath) + query;\n        console.log(\"rewriting \", req.originalUrl, req.url);\n    };\n};\nconfig\nproxy: [\n            {\n                path: new RegExp(\"/api/example/1/(.*)\"),\n                rewrite: rewriteUrl(\"/$1\"),\n                target: \"http://127.0.0.1:3000/\"\n            }\n        ],\n*note: fixed bug in example code above\n. ",
    "KeKs0r": "Unfortunately I cant get this working with my contentBase setup. I know that contentBase will be deprecated, but with proxies it seems that I loose the capacity to serve static files. And if I set up both: contentbase & proxy, the proxy is never called.\nHere  my Setup:\njavascript\n    devServer = new webpackDevServer(webpack(webpackConfig),{\n        contentBase: './build/',\n        hot: true,\n        watchDelay: 100,\n        proxy: {\n            \"/api\": \"localhost:9091\",\n            //\"/\": {\n            //    target: '/build/'\n            //}\n    },\n        noInfo: true\n    });\n. ",
    "pvolok": "I think contentBase related middleware should be added before the one of proxy. This way it can serve static files if they exist and proxy all other requests to the backend.\nAlso there is no option for adding headers, which might be useful quite often. The backend can expect a Host header, for instance.\n. ",
    "jordansexton": "Huge +1 for @jamon's patch, at least the RegExp support.\nI was already able to use it to have koa serve my static assets while using React to render the page dynamically and have webpack-dev-server and react-hot-loader do HMR using this (partial) config:\njavascript\nconfig.devServer = {\n    contentBase: config.output.path,\n    filename:    'assets/scripts/application.js',\n    host:        'localhost',\n    hot:         true,\n    inline:      true,\n    // webpack-dev-server running on 3002\n    port:        3002,\n    progress:    true,\n    publicPath:  config.output.publicPath,\n    stats:       { colors: true },\n    proxy:       [{\n        // proxy all requests not containing \".hot-update.js\"\n        // regex is still crappy because JS doesn't have negative lookbehind\n        path:    /^(?!.*\\.hot-update\\.js)(.*)$/, \n        // koa running on 3001 with koa-send and isomorphic react\n        target:  'http://localhost:3001/'\n    }]\n};\n. ",
    "stevehu": "I have tried all above configurations and none of them works for me. All calls to the API through proxy have 404. Has anyone had a working github project to use api proxy? Thanks.\n. @SimenB Thanks for the quick reply and the working example. I tried your proxy settings before and it did work; however, all request goes to the API server including request for react javascript. I am using webpack.config.js and use npm start to start webpack-dev-server. I think the difference is you are using gulp to start webpack-dev-server. I will clone your repo and dig into the detail. What I want to do is the proxy all requests to /api/rs to my API server and everything else to the webpack-dev-server. I call the API from react with superagent. \n. @lauterry Yes. It works for me now. You can find a working example from my react shopping cart repo https://github.com/networknt/light/tree/master/efg\n. @lauterry Yes. It works for me now. You can find a working example from my react shopping cart repo https://github.com/networknt/light/tree/master/efg\n. I want to proxy to my API server if uri is /api/rs to http://anotherhost:8080/api/rs. What would be my proxy configuration? I tried several examples and they are not working. Any help would be greatly appreciated. Some people post solutions that use express server to proxy to webpack-dev-server and I don't want to go that route. Thanks.\n. Sorry. Please ignore my previous post as it is working now after upgrade to the latest webpack and webpack-dev-server. Thanks a lot for fixing it.\n. @MikaAK I have tried the same setup but it never worked for me. Have you update any npm modules to make it work? Calling http proxy is very simple but the developer just over engineered it to make the configuration so complicated without providing samples and document. My workaround is to bypass the config and update the server to call my proxy if uri starts with /api\n. ",
    "lauterry": "@stevehu Hi  I have the same issue as you. \nHave you found a solution ? \n. @stevehu Hi  I have the same issue as you. \nHave you found a solution ? \n. ",
    "williamwa": "@KeKs0r @SimenB @sakabako \nto serve static files, you can use it like this:\n```\nvar webpack = require('webpack');\nvar WebpackDevServer = require('webpack-dev-server');\nvar config = require('./webpack.config');\nvar path = require('path');\nvar express = require('express');\nvar app = new WebpackDevServer(webpack(config), {\n  contentBase: config.output.path,\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n});\napp.use('/images/', express.static(path.join(__dirname, './images/')));\napp.listen(3000, '0.0.0.0', function (err, result) {\n  if (err) {\n    console.log(err);\n  }\nconsole.log('Listening at 0.0.0.0:3000');\n});\n```\n. ",
    "alexduan": "@prayerslayer I have sass-loader in my configuration and it is definitely causing my webpack to hang. Were you able to get past this? I'm using sass-loader 1.0.2 and node-sass 3.1.1.\n. ",
    "eldh": "Also been getting this lately, also using sass-loader (1.0.1 & node-sass 3.0.0). Doesn't happen every time though. \n. I'll see what I can do. :)\n. Hey, sorry I was awol. I've tried finding a reproducible example, but failed. So best to close this now, if I manage to get an example working I can re-open. Thanks for the help @SpaceK33z \n. Ok, this is my attempt to fix #651. Don't know if we should suport taking in both a file buffer and string in the config, i don't see why we'd want to do that though. \nPlease let me know what I can do to make this ready to merge.\n. That makes sense. I haven't tried this config before, but switched to it since getting the ERR_SPDY_PROTOCOL_ERROR with my previous setup (using cli flags). I still get that error after this fix, but adding {spdy: {protocols: ['http/1.1']}} works around that issue.\nSo after thinking some more about this, I don't know if this PR really adds brings much value. I do think it makes more sense to supply a file path rather than a buffer though.\n. ",
    "piotrf": "I have similar issue. It appens when I import one file (say config.scss holding all my variables) in differing modules\u2019 .scss files (header.scss, footer.scss and so on\u2026). Weirdly enough, it hangs when I load that config.scss in 3-4 places (and more) whereas it works alrite when loading it just in a couple of places.\nPlus, when I load my config.scss in 2 module stylesheets, run the server, import that config in more stylesheets\u2014it works and the bundle is recompiled. It doesn\u2019t work after restarting the server. Hope that\u2019s useful in some way.\nEDIT:\nPS. Seems to be relate to this.\n. ",
    "mmahalwy": "Any updates on this? \n. ",
    "brandondurham": "Oh boy. Just added one new module and it's stalling. Works fine if I remove it.\n. Updating worked for me!\n. ",
    "m00s": "+1\n. Worked for me too updating sass-loader\n. ",
    "thiagopnts": "uh, same thing here \n. ",
    "nkbt": "UV_THREADPOOL_SIZE=100 webpack works for me\n. New version of node-sass seems to fix the problem. At least on our projects we removed UV_THREADPOOL_SIZE completely. Update your sass-loader to >2.0.0\nIf it works fine for you too, then issue could be closed.\n. If you set server's listen address to 0.0.0.0 it will listen to whatever address is resolved on your machine. Not secure of course, but if you are only accessible from local network, then you should be ok.\n. 1. Run it with the IP-address accessible from remote (like 192.168.1.10). If you are brave or local-only, use 0.0.0.0 to accept connections on any IP.\n2. Check if you port is not blocked by firewall.\n. You can't bundle node-only libs (that do not provide browser shims). It is\nimpossible to run node-redis in the browser.\n. You simply cannot use node redis in your frontend build :).\n. @Dindaleon using externals is the way to tell webpack not to include those deps into a build. But I still have a question, why you are using node-redis in your frontend code? If you are using it only for your server code, then why do you need webpack build there in the first place? Webpack is not supposed to bundle server-side code (well, it potentially could of course, but why?)\n. Why would you ever need compression for dev server?\n. Why would you ever need compression for dev server?\n. I find it quite awkward that people use webpack-dev-server for this matter. Usually if you want to evaluate speed/compression/https/etc you run some setup that is not too different from your production one. Dev is meant to be super-fast and dead-simple... But okay, if you still want it, why not to use webpack middleware with a simple express server and do any configuration including gzip in the app without making webpack-dev-server itself more complex? \nOkay, I made my point here. Not saying I am right, though. Maybe this update actually makes sense.\n. I find it quite awkward that people use webpack-dev-server for this matter. Usually if you want to evaluate speed/compression/https/etc you run some setup that is not too different from your production one. Dev is meant to be super-fast and dead-simple... But okay, if you still want it, why not to use webpack middleware with a simple express server and do any configuration including gzip in the app without making webpack-dev-server itself more complex? \nOkay, I made my point here. Not saying I am right, though. Maybe this update actually makes sense.\n. ",
    "wangwenpei": "@nkbt +1 \nthis works for me. thanks!\n. ",
    "aj0strow": "@nkbt thanks! Works for me too. \n. ",
    "alexilyaev": "I'm still having an issue with this after updating sass-loader to 2.0.1.\nhttps://github.com/jtangelder/sass-loader/issues/100#issuecomment-143749823\n. ",
    "elsigh": "I still have this issue after updating sass-loader to 2.0.1 as well\n. ",
    "mark-norgate": "Anyone got a fix for this issue? I don't know if it's the sass-loader that is causing the issue; it seems to hang during/just after ts compilation. Don't seem to be able to get logs out of webpack to see what's upsetting it. --loglevel verbose doesn't seem to output much more.\n. I discovered a remedy for the problem; even if it is a bit smelly.\nI changed this:\n./node_modules/.bin/webpack-dev-server --display-reasons --display-chunks --watch --loglevel verbose\nTo this:\nenv UV_THREADPOOL_SIZE=128 ./node_modules/.bin/webpack-dev-server --display-reasons --display-chunks --watch --loglevel verbose\nWorks a treat. It\u2019s the sass-loader that is having problems. Giving it more breathing room like this helps, but it\u2019s still painfully slow.\nMark\nFrom:  Greg Liebowitz notifications@github.com\nReply-To:  webpack/webpack-dev-server reply@reply.github.com\nDate:  Wednesday, 24 February 2016 at 15:05\nTo:  webpack/webpack-dev-server webpack-dev-server@noreply.github.com\nCc:  Mark Norgate mark.norgate@gmail.com\nSubject:  Re: [webpack-dev-server] Compilation Hangs (#128)\n@mark-norgate Try removing @import statements from your stylesheets one by one. This worked for me...\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "liebowitz": "@mark-norgate Try removing @import statements from your stylesheets one by one. This worked for me...\n. ",
    "martinbliss": "@SpaceK33z This is an active issue. Issuing webpack alone works just fine (all files are processed and the process exits successfully) but webpack-dev-server hangs after the webpack compilation step but before the files actually get dumped to disk (I know this because I have a CleanWebpackPlugin step that gets executed causing the destination folder to get erased before the build.). ",
    "chuckhacker": "Also experiencing this problem with a fairly minimal configuration with nothing too crazy in it.\nwebpack.config.js.txt\n. This really needs re-opened.. ",
    "virtualfunction": "Still a BIG issue on on docker under OS X. Seems to be fine in native OS X or Linux (be it native or docker). For me webpack compiles but gets stuck when an asset get modified - It seems to be stuck in a deadlock (using low CPU). ",
    "tfrijsewijk": "Same here inside docker on windows. ",
    "mohammedgqudah": "same :(. ",
    "jasonlam-swatow": "Say you wanted to render the index.html under /public in the first place.\nTry add configs below into your webpack.config.js:\ndevServer: {\n    contentBase: \"./public\",\n    hot: true\n},\nAnd it shall work.\n. ",
    "amerllica": "@sokra ,Thanks for your pretty answer.. ",
    "acthp": "Turning off chrome's \"Disable cache (while DevTools is open)\" feature allows it to reload properly.\nI don't understand the root cause, though I note that with \"Disable cache\" the request from chrome includes \"pragma no-cache\", while without \"Disable cache\" it includes \"Cache-control max-age=0\". Perhaps \"no-cache\" is affecting the express server in a perverse fashion.\nI thought express included etags by default, but I don't see etags in the header in either case.\n. Testing FF, reloading works with or without their \"Disable cache\" dev option. Still not sure of the root cause of the problem on Chrome. I note that FF in \"Disable cache\" mode sets both \"pragma no-cache\" and \"cache-control no-cache\".\n. ",
    "imtmh": "@voronianski , I got the similar issue on production, I don't think the same approach works here for me. Any help?\nMy html page looks like below.\n```\n<!doctype html>\n\n\nMy Site\n\n\n\n\n\nPage is loading...\n\n\n\n\n\n\n```. ",
    "aboutqx": "How about a custom size viewport,like width=750?\nThat's useful when developing with h5 app on mobile.\nMay we need alternative live.html or  cope our html meta to the live one in live.html using js. ",
    "PinkyJie": "Hi @chrismcv, is that issue fixed? I also encounter this issue, don't know how to fix it.\nhttp://stackoverflow.com/questions/33760288/css-url-path-in-additional-chunk-of-webpack-can-not-be-resolved-correctly\n. ",
    "honkycat": "+1 having the exact same issue, would appreciate an update\nIs essentially this issue:\nhttps://github.com/remy/nodemon/issues/419\n. :+1: \n. Getting the same issue\n. ",
    "bradbarrow": "+1 \n. ",
    "yvann": "+1 the same for me, I can't use it.\n. ",
    "evandegr": "+1\n. ",
    "myzone": "+1\n. ",
    "muraken720": "+1\n. ",
    "joernroeder": "+1\n. ",
    "johnknaack": "+1\n. ",
    "saulshanabrook": "Use this project: https://github.com/brikis98/docker-osx-dev\nIt picks up file changes events\n. @istarkov When you say:\n\nAnd on host machine hot reload works fine, because of client socket connects to ws://0.0.0.0 address, but this not work over local network a la 192.168.0.101\n\nwhat do you mean? I am currently running into the problem where I access my site at http://dockerhost:8080/ but it looks for the socket.io connection at http://0.0.0.0:8080/socket.io/.\nI am using boot2docker, and that is why my docker ports are not on localhost.\nFYI I have opened this question up on stackoverflow\n. ",
    "natemara": "I am having the same problem, but I feel it's for a different reason. I'm using the --host 0.0.0.0 option to allow the server to listen on all interfaces, but when used in conjunction with the --hot flag, this causes problems. The hot reloader uses the provided host to create an absolute url instead of using a relative url, so all of my reloading ajax calls are going to http://0.0.0.0:8080/socket.io/ instead of just socket.io/, which would work no matter what the host/port was. I'm also proxying the server behind nginx that happens to be running on the same port, but if I wasn't, then this issue would be even worse.\n. ",
    "vectart": "+1\n. +1\n. @nkbt Yes, the rationale is in PR description. As a developer, I want to evaluate size of initial assets considering gzip compression, network throttling and other aspects without deployment to stage or production server.\nThis compression option could be as useful as HTTPS one.\n. @nkbt Yes, the rationale is in PR description. As a developer, I want to evaluate size of initial assets considering gzip compression, network throttling and other aspects without deployment to stage or production server.\nThis compression option could be as useful as HTTPS one.\n. @nkbt I don't use middleware to avoid writing a custom tool since I just need an option that adds only 8 lines and doesn't affect server speed so much. In result, I can see that my ~0.2\u20131Mb source files won't be a big deal in production.\nBasically, the compression option doesn't look strange along with existing historyApiFallback, https, headers and proxy ones.\n. @nkbt I don't use middleware to avoid writing a custom tool since I just need an option that adds only 8 lines and doesn't affect server speed so much. In result, I can see that my ~0.2\u20131Mb source files won't be a big deal in production.\nBasically, the compression option doesn't look strange along with existing historyApiFallback, https, headers and proxy ones.\n. ",
    "fordlee404": "+1\n. I fixed the problem with webpack config:\nwatchOptions: {\n    poll: true\n}\n@fzx thanks!\n. ",
    "plouc": "+1\n. ",
    "svenhornberg": "+1\n. ",
    "jweidler": "+1\n. ",
    "vyorkin": "@sokra I believe it's not related to webpack-dev-server. It's just vboxfs that doesn't support fsevents or inotify.\n. @geddski p.s.: here is a good post about dev env with docker on OS X. My solution is to just set poll: true or if polling is too slow for you use smth like dinghy.\n. ",
    "jimthedev": "Seems like this should probably be closed since the problem is with Virtual Box's (likely reasonable) decision to not pass through inotify events. The current relatively common fix is to use https://github.com/brikis98/docker-osx-dev\nThis is true for anyone using node, python, or any other language in docker who wants watchers. It really has little to do with Webpack. Perhaps it just needs to be documented, but there's little to do from a code standpoint.\n. @langri-sha, the tricky part of documenting/educating on this is that polling has implications for large project structures. It isn't always the best option. In some scenarios it might be ideal, in others, a better option might be to use docker-osx-dev to marshall the diff'ing through alternative means while leaving your webpack config untouched.\n. You are correct. This is an issue with Virtual Box.\n. You are correct. This is an issue with Virtual Box.\n. ",
    "marlonbernardes": "Thanks @fordlee404, setting watchOptions also worked for me!\njs\nwatchOptions: {\n    poll: true\n}\n. ",
    "nrempel": "I believe this is an issue with docker (caused by virtual box and other virtualization tools not supporting inotify events), not webpack-dev-server. \nThere is a proposed solution here: https://github.com/docker/docker/issues/18246\n. I believe this is an issue with docker (caused by virtual box and other virtualization tools not supporting inotify events), not webpack-dev-server. \nThere is a proposed solution here: https://github.com/docker/docker/issues/18246\n. ",
    "vinogradov": "javascript\nwatchOptions: {\n    poll: 1000 // <-- it's worth setting a timeout to prevent high CPU load\n},\n. javascript\nwatchOptions: {\n    poll: 1000 // <-- it's worth setting a timeout to prevent high CPU load\n},\n. ",
    "yangmillstheory": "Changes are picked up by the container in Docker Mac Beta.\n\n. @max-mykhailenko I'm on Version 1.11.1-beta12 (build: 7528).\nCan you try https://github.com/yangmillstheory/react-docker-app?\n. ",
    "bartvanremortele": "For anyone running into this issue that is using a Jetbrains IDE like Webstorm, Intellij, ... Try:\n\nPlease try turning 'Safe write' option ( Settings | Appearance & Behavior | System Settings | Use \"safe write\" (save changes to temporary file first)) off\n\nTook me about 4 hours to figure this out.\n. ",
    "mrnonz": "watchOptions: {\n    poll: true\n  }\nThis worked for me !! \n. ",
    "Rastusik": "just to recap: the solution from @bartvanremortele works better than the one from @vinogradov and @mrnonz , because there is no cpu overhead at all.\n\nPlease try turning 'Safe write' option ( Settings | Appearance & Behavior | System Settings | Use \"safe > write\" (save changes to temporary file first)) off\n. \n",
    "aethant": "I'm running into this issue with Docker beta 20, and what I'm noticing is that it \"works\" inconsistently. Same code, same configs to Docker and Webpack, and it'll work once, maybe a few times, then stop. Then won't work a number of times. Not sure what's causing that.\nNoticing that specific IDEs/editors are mentioned here, too, I'm wondering if vim is part of the issue. \nWith the Docker+Webpack setup running, I opened Atom and attempted editing the file. No dice. Restarted Docker+Webpack, edited same file, seems to respond (worked for ~5min consistently).\nWhy is this (file systems aren't a topic I'm well-versed on)? Is there a way to adjust vim's settings or am I stuck with Atom for the time being?\n. @Rodeoclash that seemed to work, but then i noticed still providing 3-4 saves before Webpack stops responding. Atom is still responding consistently.\nSomething I tried: started up Docker + Webpack. Opened file with vim, saved til it stopped updating. Open Atom, saves have no effect. Restart Docker + Webpack, save with Atom, ~8x. Updates consistently. Open same file in vim, save has no effect, and now saving in Atom is ignored as well. I wonder if the vim .swp file somehow is gumming things up?\n. @NickStefan for me, no. Vim, even after applying :set backupcopy=yes, still makes Webpack inside of a container sputter out. Atom has been working without issue all the same, however. \n. @d3viant0ne Most likely you are correct. That's what I assumed, as well. But it seems like a considerable issue, given the number of vi* users. Other issues had presented the :set backupcopy=yes solution as a workaround, but to no avail. Kinda bummed. Vim mode in Atom just isn't the same. :/ \n. Unfortunately @d3viant0ne, it's a work project. Here's a gist with my webpack config and how I'm starting webpack-dev-server inside of express. Hopefully it'll be of some use to you in investigating. If you need some of the Dockerfile/docker-compose.yml bits as well, let me know.\n. @d3viant0ne sorry, Friday fuzz brain on my part. I included the previously mentioned gist to contain my dev Dockerfile and docker-compose.yml file. \n. @Cmdv npm run dev runs my dev script inside package.json, which runs a gulp routine, including gulp-nodemon. I can't say I have ~40s build times (like <2s-ish), but I don't know the size of your project, either. \n. ",
    "d3viant0ne": "@NickStefan - What version of Docker are you running. I haven't had any issues with Docker / Webpack since moving to the beta on mac.\n@geddski As far as boot2docker support goes, I don't really see the point in supporting something that was handed it's hat quite a while ago and has now been officially deprecated in favor of docker-machine. The vboxfs has countless failings in regards to shared fs performance and reliability. \n//cc @sokra ^^\n@yangmillstheory - That repo also doesn't work on rc4-beta.20 for me. I'll dig into it and see if I can figure out where it's falling down.\n\nAs an aside, I'm writing docs related to Docker & Webpack2 for webpack.io and I would appreciate any insights / issues & pitfalls in webpack/webpack.io#44 from all you docker users so we can make that portion of the docs as robust as humanly possible. I believe docker for web development has significant benefits & should have first class support in Webpack.\n. @NickStefan - There is no Docker for Mac GUI as of yet. It just opens the existing Kitematic\n\nAlso, Is whatever code base you are having issue with public? I can take a look at it and see if I can work out the issue.\n. @NickStefan As an exercise for writing the Docker / Webpack docs I have been dockerizing popular boilerplates people are basing their projects off of.\nI'll dockerize https://github.com/survivejs/react-boilerplate and hopefully it either shines a light on an issue in webpack-X or helps you work through your issue.\nIt's also worth nothing that it's just as possible we find an issue with the docker beta as it is we find one in webpack. There has been a significant amount of code churn for a release candidate, a theme for lots of projects these days unfortunately.\n. @aethant - I would assume this has to do with the buffer mechanism behind vi/vim/nvim\n. @aethant You have a public project where you run into the described behavior? As a Linux / VI / Docker guy I would be curious to tinker and see if I can find a viable resolution to the VI / VIM issue. \n. @aethant It's actually the docker portion I am most curious about. Trying to figure out the common denominator between my docker Webpack setup that I don't have problems with and the setups of people that do. Outside of those still on Virtualbox of course. \n. @Cmdv - I'm saying this as a gulp guy \nWhen working within docker / shared file systems you are already going to pay a performance price. When you add gulp, which has to read more into memory from that file system for every action, that price goes up significantly.\nI've cut my development cycle down considerably by limiting my gulp to utils outside of webpack and used straight npm scripts or @kentcdodds p-s when I wanted/needed to get the bloat out of my package.json or needed a bit more horsepower than an npm script could provide.\nIt may be worth adding a duplicate script for execution within a docker container to test out. Myself and the rest of my dev team found it to be much more performant at dev time.\n. @Cmdv - Given the rise of Universal in Angular2 and it already being a thing in React , I'll make a note to figure this out & get it into the HowTo. \nThus far professionally, the answer to issues with getting the dev server & docker to play well together has always been nginx.\nWhat's the rest of your stack composition look like in your docker-compose.yml for dev?\n. Tagging the above as a reminder: webpack/webpack.io#44\n. @SpaceK33z - I'm a Docker *nix guy.\nHas anyone actually gone in and done a ps -eaf inside a container in question and had a look at the process || checked the syslog for any logging related to why SIGTERM is failing?. @lucsky - You got a Dockerfile I can have a look at?. @kellyrmilligan - Get it rebased if you don't mind and  we'll get it queued up.. FYI - This hasn't been forgotten, most of the people that can pick this up & actually do something with it are all busy i.r.l. I was hoping to get this done without having to ping Kees but it's looking like that's the way it's going to have to be.. The host check can simply be disabled in the interim as mentioned in this comment \nAs to a release, I'll ping someone and ask.. I put out a request in slack, we'll get a patch version out.. @SpaceK33z - Is a.f.k with r.l business.\nI don't have write nor publish access on this side of the house, so unfortunately all I can do at this point is ask which I have done twice.. I would be that other one that missed this :/\n@kellyrmilligan - @shellscape has a viable plan to make all of this work via a small loader to facilitate getting the needed configuration to the client side bundle & a small modification to the original PR to encapsulate the optional sockjs configuration option.\nI'll stick a note in the create-react-app PR regarding the approach just to make sure nobody on that side of the house has an issue with the addition of a small loader.. That SSL cert is generated when you enable the HTTPS option, really should be in a deployment package.\nUpdate: It's not in 2.9.1 so i'm betting that is something that should be ignored & wasn't.\nhttps://github.com/webpack/webpack-dev-server/blob/master/package.json#L37\n//cc @shellscape ^^. @cmargulhano - You may also want to run top while a build is running to make sure you aren't memory starved ( depending on how large you project is ).\n. ",
    "enjikaka": "I'm still having issues with webpack-dev-server in docker with docker-compose and nginx-proxy. \n```\nversion: '2'\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n  web-dev:\n    build: .\n    working_dir: /app\n    volumes:\n      - \"./:/app\"\n      - /app/node_modules\n    expose:\n      - 9090\n    environment:\n      - NODE_ENV=development\n      - VIRTUAL_HOST=app.dev\n    command: npm run web:dev\n    depends_on:\n      - nginx-proxy\n```\nnpm run web:dev === webpack-dev-server --config webpack/webpack.config.web.dev.js --hot --inline --watch-poll\nAll I get is this from nginx-proxy when trying to visit app.dev in the browser;\n2016/09/14 11:04:04 [error] 33#33: \n*9 connect() failed (111: Connection refused) while connecting to upstream, \nclient: 172.18.0.1, \nserver: app.dev, request: \"GET / HTTP/1.1\", \nupstream: \"http://172.18.0.4:9090/\", \nhost: \"app.dev\"\nwebpack-dev-server doesn't seem to allow connection or something? An express server instead of the webpack-dev-server works fine.\n. I'm still having issues with webpack-dev-server in docker with docker-compose and nginx-proxy. \n```\nversion: '2'\nservices:\n  nginx-proxy:\n    image: jwilder/nginx-proxy\n    container_name: nginx-proxy\n    ports:\n      - \"80:80\"\n    volumes:\n      - /var/run/docker.sock:/tmp/docker.sock:ro\n  web-dev:\n    build: .\n    working_dir: /app\n    volumes:\n      - \"./:/app\"\n      - /app/node_modules\n    expose:\n      - 9090\n    environment:\n      - NODE_ENV=development\n      - VIRTUAL_HOST=app.dev\n    command: npm run web:dev\n    depends_on:\n      - nginx-proxy\n```\nnpm run web:dev === webpack-dev-server --config webpack/webpack.config.web.dev.js --hot --inline --watch-poll\nAll I get is this from nginx-proxy when trying to visit app.dev in the browser;\n2016/09/14 11:04:04 [error] 33#33: \n*9 connect() failed (111: Connection refused) while connecting to upstream, \nclient: 172.18.0.1, \nserver: app.dev, request: \"GET / HTTP/1.1\", \nupstream: \"http://172.18.0.4:9090/\", \nhost: \"app.dev\"\nwebpack-dev-server doesn't seem to allow connection or something? An express server instead of the webpack-dev-server works fine.\n. @SpaceK33z Thanks, that made it work!\n. ",
    "nickdima": "Quick question for people using webpack in docker for development. Isn't it slow for non trivial apps with lots of files? After all it's running inside a VM.\n. ",
    "bigmassa": "Not sure if this is related but I have been having a similar issue with running webpack and docker.\nScenario is on osx running webpack --watch from host to build my angular project which is linked in via a volume regularly crashes the container when it detects a file change. Similarly on ubuntu the container does not crash but the webpack --watch fails to recognise there is a change (which led me here).\nI have found that increasing the number of file watchers in both os's have totally fixed my issues. For ubuntu by increasing the amount of inotify watchers https://github.com/guard/listen/wiki/Increasing-the-amount-of-inotify-watchers and for osx ive been running sudo webpack --watch.\nAgain this may not help but may help but thought it was a good idea to post anyway.\n. ",
    "evfreethy": "Anybody using RubyMine or a JetBrains IDE - please see @bartvanremortele's comment to fix this issue. ",
    "jackbraj": "I also have the same problem using laravel-mix which runs webpack.\nI am using it inside docker container and my editor is phpstorm on Mac Sierra.. ",
    "Angelinsky7": "For those interested (on Window), i'm currently working on a solution inspired by another....\nYou can try it at https://github.com/Angelinsky7/Docker-Volume-Watcher/releases and let me know.\nit uses a filewrapper and sends notification to the docker volume container. @patroza :-). ",
    "patroza": "@Angelinsky7 you're a genius! thanks a lot!. ",
    "cristianfraser": "@SpaceK33z Was a Docker section added with the docs overhaul that I'm missing or not?. ",
    "magicsgxie": "In the remote server(centos7), I use command (npm run dev) to start webpack-dev-server, when I close the session, the \"webpack-dev-server\" is closing.  How can i solve this probleam?\nthe dev's config like this\n\"dev\": \"webpack-dev-server --inline --progress --config build/webpack.dev.conf.js\",. ",
    "wachunga": "We are also having issues with 1.8.0. There's a dependency issue downstream with node-xmlhttprequest, which is depended upon by socket.io-client.\n[15:08:12][Step 1/2] npm ERR! fetch failed https://github.com/rase-/node-XMLHttpRequest/archive/a6b6f2.tar.gz\n[15:09:12][Step 1/2] npm http fetch GET https://github.com/rase-/node-XMLHttpRequest/archive/a6b6f2.tar.gz\n[15:09:12][Step 1/2] npm ERR! fetch failed https://github.com/rase-/node-XMLHttpRequest/archive/a6b6f2.tar.gz\n[15:09:12][Step 1/2] npm ERR! Linux 3.2.0-39-generic\n[15:09:12][Step 1/2] npm ERR! argv \"node\" \"/usr/local/bin/npm\" \"install\"\n[15:09:12][Step 1/2] npm ERR! node v0.10.21\n[15:09:12][Step 1/2] npm ERR! npm  v2.1.5\n[15:09:12][Step 1/2] \n[15:09:12][Step 1/2] npm ERR! This request requires auth credentials. Run `npm login` and repeat the request.\n. ",
    "talwoolf": "I am using webpack-dev-server in hot mode when I keep getting this issue. A constant:\nGET http://%24%7Bwp_host%7D/socket.io/?EIO=3&transport=polling&t=1428532872322-46 net::ERR_NAME_NOT_RESOLVED\nhas anyone found or implemented a fix?\n. I was using the entry point, which seems to break things. when I remove it from the entry point and add it into the index.html it seems to work fine. Any idea why its not working using entry? here is my config:\n```\nexport default {\n    // devtool : 'eval',\n    debug   : 'true',\n    cache   : true,\n    watch   : true, \nentry   : { \n    'bundle' : [ \n        './app/browser.js',\n        'webpack-dev-server/client?http://${WP_HOST}:${WP_PORT}',\n        'webpack/hot/dev-server',\n    ]\n},\n\noutput : {\n    filename    : \"[name].js\",\n    chunkFilename: \"[name]-[chunkhash].js\",\n    path        :  contentBase,\n    publicPath  : \"http://${WP_HOST}:${WP_PORT}/assets/\",\n},\n\nmodule : {\n    loaders: [\n      { test: /\\.jpe?g$|\\.gif$|\\.png$|\\.svg$|\\.woff$|\\.ttf$|\\.wav$|\\.mp3$/, loader: \"file-loader\"},\n      { test: /\\.js$/, exclude: /node_modules/, loaders: [\"react-hot\", \"babel\"] },\n      { test: /\\.scss$/, loader: \"style!css!autoprefixer?browsers=last 2 version!sass?outputStyle=expanded&sourceMap=true&sourceMapContents=true\" }\n    ]\n},\n\nprogress : true,\n\n\nplugins : [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoErrorsPlugin(),\n\n    new webpack.DefinePlugin({\n        \"process.env\": {\n            BROWSER     : JSON.stringify(true),\n            NODE_ENV    : JSON.stringify(\"development\")\n        }\n    }),\n\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.OccurenceOrderPlugin()\n]\n\n}\n```\n. thanks @MrOrz that worked great\n. ",
    "ALF-er": "@MrOrz Thank you!\n. ",
    "pdillon": "1.8.0 appears to be defaulting to \"localhost' now. You can open it up by passing the --host option.\n         webpack-dev-server --port 3000 --hot --host 0.0.0.0\n. ",
    "aputinski": "Ahh. Good to know. Thanks!\n. ",
    "honger05": "thanks\u3002\n. How did I use express to do?\n``` js\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  hot: true,\n  stats: {\n    colors: true,\n    chunks: false\n  }\n})\n// use express\napp.use(devMiddleware)\napp.listen(port, host, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  console.log('Listening at ' + host + ':' + port + '\\n')\n})\n```\nIt didn't work!\n. sorry,    It works.  \nAlso, There is no need to specify 'host' when use the express\njs\napp.listen(port, function (err) {\n  if (err) {\n    console.log(err)\n    return\n  }\n  console.log('Listening at  :' + port + '\\n')\n})\n. ",
    "mikhuang": "If you're using WebpackDevServer, be aware that the host argument is part of server.listen as follows:\nvar server = new WebpackDevServer(webpack(webpackConfig), {\n    ...\n  });\n  server.listen(port, \"0.0.0.0\", function(err) { ...\n. If you're using WebpackDevServer, be aware that the host argument is part of server.listen as follows:\nvar server = new WebpackDevServer(webpack(webpackConfig), {\n    ...\n  });\n  server.listen(port, \"0.0.0.0\", function(err) { ...\n. ",
    "BUPT-HJM": "thanks\n. ",
    "Lumersgo": "thanks\n. @anchengjian  Here are some piece code of my server.js\n\nconst compiler = webpack(config);\nnew WebpackDevServer(compiler, config.devServer)\n.listen(config.port, '0.0.0.0', (err) => {\n  if (err) {\n    console.log(err);\n  }\n  console.log('Listening at localhost:' + config.port);\n});\n\nIn listen function ,the second param set '0.0.0.0' , maybe can solve this problom.. ",
    "cunjieliu": "thanks a lot!\n. ",
    "meastes": "@honger05 It'm not sure where the host and port are being set in your code, but you would want to make sure host is set to '0.0.0.0' instead of 'localhost'.\n. ",
    "caisah": "It can also be set from the webpack file by setting devServer.host to 0.0.0.0.\njavascript\ndevServer: {\n    host: '0.0.0.0',\n    port: 8080,\n    ...\n  }\n. ",
    "Mr111222": "oh    my   god\n. oh    my   god\n. ",
    "anchengjian": "devServer: {\n    historyApiFallback: true,\n    noInfo: true,\n    contentBase: './dist',\n    host: '0.0.0.0',\n    hot: true,\n    open: true,\n    historyApiFallback: true,\n    inline: true\n  }\nI turn on the open switch, then the browser will open 'http://0.0.0.0:8080/'. But 0.0.0.0 is not accessible.. It's working for me, @3846masa thanks. ",
    "zzwfe": "@caisah good to know.ths. @caisah good to know.ths. ",
    "cotyembry": "I had to do the following to get mine to work with the help from @pdillon and his comment\nI have Windows 7 so I did\nipconfig\n\nThen went up to LAN and found the ipv4 address\nMine was\n192.168.0.12\n\nSo I edited my npm run start command to be\n\"start\": \"webpack-dev-server --inline --port 8080 --host 192.168.0.12 --content-base .\"\n\nI was then able to access the content that is being served on\nlocalhost:8080\n\nWill be available as the web on another computer by going to\n192.168.0.12:8080\n\nIn the web browsers URL field on the other computer that was connected to the same wifi network. I had to do the following to get mine to work with the help from @pdillon and his comment\nI have Windows 7 so I did\nipconfig\n\nThen went up to LAN and found the ipv4 address\nMine was\n192.168.0.12\n\nSo I edited my npm run start command to be\n\"start\": \"webpack-dev-server --inline --port 8080 --host 192.168.0.12 --content-base .\"\n\nI was then able to access the content that is being served on\nlocalhost:8080\n\nWill be available as the web on another computer by going to\n192.168.0.12:8080\n\nIn the web browsers URL field on the other computer that was connected to the same wifi network. ",
    "sebolio": "just FYI, you can just type 0 instead of 0.0.0.0 for ease of use :). ",
    "ArminSheng": "@honger05  Add host: '0.0.0.0' to your devMiddleware  config, just like below, it works to me.\n~~~\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\n  publicPath: webpackConfig.output.publicPath,\n  hot: true,\n  host: '0.0.0.0',\n  stats: {\n    colors: true,\n    chunks: false\n  }\n})\n~~~. ",
    "peacechen": "Using host: '0.0.0.0' in the devServer section of webpack.config does allow the server to be seen by peers on the LAN, but iOS Safari complains with \"Invalid Host header\".  The only way to get Safari to load is to hard code the IP :(. ",
    "erikyuzwa": "the hardcoded IP wouldn't work for me @peacechen - I was able to get mine to work by disabling disableHostCheck. \neg.\ndevServer: {\n    contentBase: '.',\n    host: '0.0.0.0',\n    port: 3000,\n    disableHostCheck: true\n  },. ",
    "akemando": "pdillon ... you are the man!! Thanks a bunch. pdillon ... you are the man!! Thanks a bunch. ",
    "ChenPt": "@erikyuzwa thanks. @erikyuzwa thanks. ",
    "codingedward": "goodness, thanks. ",
    "joetidee": "Is there a way to dynamically generate the --host IP address in the package.json file or with a setting in webpack.config.js? I am currently using 0.0.0.0, but it has been suggested that this is insecure.. As I am using DHCP, is there a way to specify the --host IP address dynamically?. ",
    "tomholford": "Thanks @pdillon, just got gatsby 1.1.11 to work with:\ngatsby develop --host 0.0.0.0. Thanks @pdillon, just got gatsby 1.1.11 to work with:\ngatsby develop --host 0.0.0.0. ",
    "ZengTianShengZ": "thanks. thanks. ",
    "jwenjian": "For anyone who are using vue webpack template, this issue can be solved by config the config/index.js, find the config of host then change the value to 0.0.0.0, like below:\n```javascript\nmodule.exports = {\n  dev: {\n// Paths\nassetsSubDirectory: 'static',\nassetsPublicPath: '/',\nproxyTable: {},\n\n\n// Various Dev Server settings\nhost: '0.0.0.0', // can be overwritten by process.env.HOST\nport: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined\nautoOpenBrowser: false\n\n}\n  // ... ... other config ignored here\n}\n``. For anyone who are using vue webpack template, this issue can be solved by config theconfig/index.js, find the config ofhostthen change the value to0.0.0.0`, like below:\n```javascript\nmodule.exports = {\n  dev: {\n// Paths\nassetsSubDirectory: 'static',\nassetsPublicPath: '/',\nproxyTable: {},\n\n\n// Various Dev Server settings\nhost: '0.0.0.0', // can be overwritten by process.env.HOST\nport: 8080, // can be overwritten by process.env.PORT, if port is in use, a free one will be determined\nautoOpenBrowser: false\n\n}\n  // ... ... other config ignored here\n}\n```. ",
    "vijaykumar91": "Its working for me thanks . Its working for me thanks . ",
    "konuch": "@anchengjian Use public: 'http://localhost:' + PORT, if you want to keep auto open using open: true and dont want to end up with 0.0.0.0 in browser, which is unreachable. . ",
    "sytpb": "how to change with the create-react-app and express code ,it didn't work.  i don't know which file to be change .. how to do with Express + react ?\u3000\u3000which file to change ?      it didn't work when i adding   \"devServer\": {\n    \"contentBase\": \".\",\n    \"host\": \"0.0.0.0\",\n    \"port\": 3001,\n    \"disableHostCheck\": true\n  } to my client package.json. ",
    "AprilArcus": "This would be super useful for us! We are working on a mock server that has to support a very heterogenous legacy route scheme, and we'd like to be able to white-list certain routes and proxy the rest.\n. This would be super useful for us! We are working on a mock server that has to support a very heterogenous legacy route scheme, and we'd like to be able to white-list certain routes and proxy the rest.\n. ",
    "naistran": "I fixed this in #187. Please a have look.\n. I fixed this in #187. Please a have look.\n. @kisenka Please see #148 for example usage. There are more examples in #127 too.\n. Remove the whole if(options.proxy...)?\n. Added.\n. Yeah it's just for console.log. It's straight from #148, I'll just remove it then.\n. Removed.\n. ",
    "PavelGavlik": "Shouldn't we close this PR when #187 has superseded this PR and it has been merged?\n. Shouldn't we close this PR when #187 has superseded this PR and it has been merged?\n. ",
    "pcostanz": "I fixed the errors in this issue by upgrading less and less-loader dependencies, but my styles were still not being loaded. I ended up actually resolving the problem (that my styles were not being included correctly) by then bumping my extract-text-webpack-plugin dependency.\nHere's a snippet of my current (working) versions for the loaders and plugins that were involved with this issue for my project:\njavascript\n    \"babel-loader\": \"5.1.4\",\n    \"extract-text-webpack-plugin\": \"0.8.1\",\n    \"less\": \"2.5.1\",\n    \"less-loader\": \"2.2.0\",\n. I fixed the errors in this issue by upgrading less and less-loader dependencies, but my styles were still not being loaded. I ended up actually resolving the problem (that my styles were not being included correctly) by then bumping my extract-text-webpack-plugin dependency.\nHere's a snippet of my current (working) versions for the loaders and plugins that were involved with this issue for my project:\njavascript\n    \"babel-loader\": \"5.1.4\",\n    \"extract-text-webpack-plugin\": \"0.8.1\",\n    \"less\": \"2.5.1\",\n    \"less-loader\": \"2.2.0\",\n. ",
    "xpepermint": "Huuum... that actually works (array with additional keys)? Nice hack @MrOrz. Thanks!\nI hope this will be fixed in the near future.\n. Huuum... that actually works (array with additional keys)? Nice hack @MrOrz. Thanks!\nI hope this will be fixed in the near future.\n. @MrOrz I see your point. Good question. I guess the expected behavior would be to get different routes. I see devServer option as route configuration option. \n. @MrOrz I see your point. Good question. I guess the expected behavior would be to get different routes. I see devServer option as route configuration option. \n. ",
    "precious": "Looks like the first element of array is selected unconditionally (even if it does not contain devServer and devServer is presented in the second element).. ",
    "11111000000": "one of the previous version 1.7.0 - work's ok \n. one of the previous version 1.7.0 - work's ok \n. Maybe something like that http://serverfault.com/questions/78048/whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1\n. Yes, when I set --host 0.0.0.0  - all start workin, please add this to Documentation\n. ok\n. ",
    "troutowicz": "What behavior are you referring to? More information would be helpful.\n. http://webpack.github.io/docs/webpack-dev-server.html#cli\nI added the --host flag to the docs a while back. I am with you that that should be in the docs. I interpreted @11111000000's comment as a request for an explanation on the meaning of 0.0.0.0.\n. @gsklee Looks like the docs are wrong. If you look in the code, it only checks for the CLI option. You could submit a PR, or update the docs. :)\n. ",
    "screendriver": "--host 0.0.0.0 should be added to the docs. Only a little hint that 0.0.0.0 is enough to access the machine from other machines like mobile devices.\n. --host 0.0.0.0 should be added to the docs. Only a little hint that 0.0.0.0 is enough to access the machine from other machines like mobile devices.\n. You can have a look at pull request https://github.com/webpack/webpack-dev-server/pull/946. ",
    "deepkolos": "problem still after add --host 0.0.0.0 to cli, but i solved by use another hotspot share software wifi\u5171\u4eab\u5927\u5e08 \nbefore that i use \u5c0f\u5ea6WIFI\njust mark the solution who may use \u5c0f\u5ea6WIFI still got connection refused. ",
    "Cap32": "+1\n. ",
    "queckezz": "While testing I'll forgot to remove:\njs\nnew webpack.NoErrorsPlugin()\nThanks!\n. ",
    "jasonmacdonald": "Same here, I get neither change detection or window reloading. It doesn't recompile on changes, and doesn't reload the browser. No errors. :(\nI can't get \"webpack --watch\" to do detect changes either\n. Same here, I get neither change detection or window reloading. It doesn't recompile on changes, and doesn't reload the browser. No errors. :(\nI can't get \"webpack --watch\" to do detect changes either\n. ",
    "kzima": "if you only care about browser reload and don't need to set up hot mode than follow this workaround:\n1. remove 'webpack/hot/dev-server' from your entry object in wepack config, otherwise you will get this error in your browser console:\n[HMR] Hot Module Replacement is disabled.\n2. in one terminal run webpack --watch\n3. in second terminal run webpack-dev-server\nThat's it. Now your browser should reload every time you modify something in your code. \nHopefully this helps. \n. ",
    "hyzhak": "doesn't recompile and doesn't reload. I'm using shared folders in Vagrant\n. ",
    "alexsandro-xpt": "Same problem here I'm using Windows 8.1 and Gulp.\nIn Web Development Tools at Chrome in Network tab, the websocket only in pending status and return 0 bytes of size.\n. I don't know, but now its working now for me at Windows 8.1... feel free to see https://github.com/alexsandro-xpt/DemoWebPackAngularGulp\n. ",
    "pvasek": "I had the same issue. The reason was that I built the output files with webpack first and than try to run the dev server. It seems that in my configuration the dev server served the files from disk no matter that in memory was something else (I could see reinvalidating bundles after changes). After removing these files from disk everything started to work again.\n. ",
    "finbarmaginn": "webpack-dev-server --watch-poll works for us on win 8.1\n. webpack-dev-server --watch-poll works for us on win 8.1\n. What is the easiest way to remove webpack-dev-server/ from the url?\n. ",
    "dryoma": "I had a similar problem on Windows. webpack-dev-server in one of the projects just wouldn't react to changes to .js files. In the end the reason was quite stupid: you just can't use certain symbols in a path to the project. For example, if there are braces there ((), []), the changes won't be seen by webpack-dev-server; with an ! it won't even start. Maybe there are more, just didn't bother digging.\nHope someone finds this helpful.\n. I had a similar problem on Windows. webpack-dev-server in one of the projects just wouldn't react to changes to .js files. In the end the reason was quite stupid: you just can't use certain symbols in a path to the project. For example, if there are braces there ((), []), the changes won't be seen by webpack-dev-server; with an ! it won't even start. Maybe there are more, just didn't bother digging.\nHope someone finds this helpful.\n. ",
    "nathanborror": "Having the same problem due to Dropbox using () in its naming convention for Dropbox for Business accounts: ~/Dropbox (business name)/. Tried symlinking but webpack ignores the symlink and uses the original path.\n. ",
    "fireproofsocks": "Same problem... none of the above solutions have worked for me, and eliminating the caveats (e.g. Dropbox) has also not gotten the behavior to work as expected.\n. It looks like the version of webpack that is installed by npm by default is too old and doesn't meet the version requirements (webpack@>=1.0.0 <3).  Omitting -g has no effect for me.\n. ",
    "vianvio": "By using --hot, you need to specify the output.publicPath in your webpack.config.js file.\nie. if you have ./build/bundle.js, you need to set output.publicPath as '/build/'. Then it will auto recompile and reload the page.\nHope this helps\n. By using --hot, you need to specify the output.publicPath in your webpack.config.js file.\nie. if you have ./build/bundle.js, you need to set output.publicPath as '/build/'. Then it will auto recompile and reload the page.\nHope this helps\n. ",
    "ocombe": "Thanks @Jakobud, it works with --watch-poll. The reason is (I suspect) that my vagrant VM is a debian, but my shared folder is on windows. The watchers for Linux don't work on windows files (it's also why symlinks won't work in this shared folder), but watch poll works because it checks every x ms if a file changed. It consumes more memory, but at least it works :)\n. Yes it does (but it also works on windows with --watch-poll)\n. You can look at my starter: https://github.com/ocombe/ng2-webpack\nI just add --watch-poll to the npm commands when I have to run it from linux with my shared folder on windows.\nIf I run it from windows (10) I don't have to change anything to make it work.\n. :+1: \nEasy fix, could you merge this please, it would help for unusual environments such as webworkers :)\n. :+1: \nEasy fix, could you merge this please, it would help for unusual environments such as webworkers :)\n. ",
    "adam-beck": "@rictorres when you said \n\nUsing Webpack inside Vagrant on a non-shared folder works fine.\n\nAre you using gulp for that as well? I'm using the dev middleware and the changes are not recognized even if the file is outside of a shared folder. However, I am not using gulp.\n. @rictorres when you said \n\nUsing Webpack inside Vagrant on a non-shared folder works fine.\n\nAre you using gulp for that as well? I'm using the dev middleware and the changes are not recognized even if the file is outside of a shared folder. However, I am not using gulp.\n. Would someone mind explaining this in a little more detail for me\n\nbehind proxy you can use the disableHostCheck: true flag\n\nSo I can set up an nginx server that forwards all requests to my webpackDevServer? How would this fix the security issue? Because in the medium article:\n\nThese is an option to disable the security check (disableHostCheck) but please don\u2019t use it! If you really want to, please make sure to fully understand this security problem.\n. Aren't we talking about leaving our window cracked on the 10th story of an apartment building? . \n",
    "alvinsight": "Hi everyone, \nDoes anyone know if webpack-dev-server work and reload correctly on Linux? \nI'm about to switch to a linux distribution because of this specific issue so it would be great it someone could confirm it.\nThank you, \nAlvin\n. Hi everyone, \nDoes anyone know if webpack-dev-server work and reload correctly on Linux? \nI'm about to switch to a linux distribution because of this specific issue so it would be great it someone could confirm it.\nThank you, \nAlvin\n. Hi, \nThanks guys for the replies, we're using the node version of the server and not the command line client, so are there any configuration options that equal to --watch-poll and/or --inline--hot\nFrom a quick read at the docs, it looks like the watch and hot options do exist, but I'm not sure if they do the same thing ? \nLike so: \n```\nvar server = new WebpackDevServer(compiler, {\n  hot: true, // is this is the same as specifying --inline --hot?\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000 // is this the same as specifying --watch-poll?\n  },\n});\nserver.listen(8080, \"localhost\", function() {});\n```\nThanks a million! I might not have to switch to linux after all.\n. Hi, \nThanks guys for the replies, we're using the node version of the server and not the command line client, so are there any configuration options that equal to --watch-poll and/or --inline--hot\nFrom a quick read at the docs, it looks like the watch and hot options do exist, but I'm not sure if they do the same thing ? \nLike so: \n```\nvar server = new WebpackDevServer(compiler, {\n  hot: true, // is this is the same as specifying --inline --hot?\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000 // is this the same as specifying --watch-poll?\n  },\n});\nserver.listen(8080, \"localhost\", function() {});\n```\nThanks a million! I might not have to switch to linux after all.\n. Hey @joshgeller and other people who managed to get this to work on windows, would you mind sharing the options that you passed to the WebpackDevServer constructor ? \nI just tried this and a lot of other stuff and nothing works :/\nI'm on windows 10 (not sure if it makes any difference).\nThank\n. Hey @joshgeller and other people who managed to get this to work on windows, would you mind sharing the options that you passed to the WebpackDevServer constructor ? \nI just tried this and a lot of other stuff and nothing works :/\nI'm on windows 10 (not sure if it makes any difference).\nThank\n. @ocombe Thanks, your started is really big though, would you mind sending me an e-mail so we can talk in private ?\nI'm still failing unfortunately :(\n. @ocombe Thanks, your started is really big though, would you mind sending me an e-mail so we can talk in private ?\nI'm still failing unfortunately :(\n. ",
    "joshgeller": "@alvinsight I'm in the same boat as you, adding the watchOptions config entry solved the problem. Thanks!\n. @alvinsight I'm in the same boat as you, adding the watchOptions config entry solved the problem. Thanks!\n. ",
    "mikhail-eremin": "Doesn't work on windows 10, tried all possible configs\n. Doesn't work on windows 10, tried all possible configs\n. Doesn't work on windows 10, tried all possible configs\n. ",
    "mrdrozdov": "Not working for me on mac + vagrant + nfs :(\n. ",
    "maikokuppe": "I'm using Ubuntu 14.04. None of the solutions above helped me until I found out that the context in my config was wrong\n```\n// Wrong (relative path)\nmodule.exports = {\n  context: './app',\n  // rest of config\n}\n// Correct (absolute path)\nmodule.exports = {\n  context: process.cwd() + '/app',\n  // rest of config\n}\n```\nI hope this helps someone not wasting hours into that issue like I did.\n. I'm using Ubuntu 14.04. None of the solutions above helped me until I found out that the context in my config was wrong\n```\n// Wrong (relative path)\nmodule.exports = {\n  context: './app',\n  // rest of config\n}\n// Correct (absolute path)\nmodule.exports = {\n  context: process.cwd() + '/app',\n  // rest of config\n}\n```\nI hope this helps someone not wasting hours into that issue like I did.\n. ",
    "xtreemrage": "@oliverjanik\nIt worked for me, with windows 10 and chrome 49, thanks.\nAnd I can access my web-app just via this route: http://localhost:8080.\nThe full command for me is, webpack-dev-server --progress --colors --inline --content-base app/.\njavascript\n\"webpack\": \"^1.12.14\",\n\"webpack-dev-server\": \"^1.14.1\"\nbtw I use intellij and I didn't needed to disable safe writing option for my IDE.\n. ",
    "daaaniel": "Do you have tried with the webpack-livereload-plugin? This did the trick for me.\n. ",
    "skyujilong": "change lazy option off\nit works me win7 well!\nmy config :\n```\n{\n    // webpack-dev-server options\ncontentBase: path.join(__dirname,'build'),\n// or: contentBase: \"http://localhost/\",\ninline:true,\nhot: true,\n// Enable special support for Hot Module Replacement\n// Page is no longer updated, but a \"webpackHotUpdate\" message is send to the content\n// Use \"webpack/hot/dev-server\" as additional module in your entry point\n// Note: this does _not_ add the `HotModuleReplacementPlugin` like the CLI option does.\n\n// Set this as true if you want to access dev server from arbitrary url.\n// This is handy if you are using a html5 router.\nhistoryApiFallback: false,\n\n// Set this if you want to enable gzip compression for assets\ncompress: true,\n\n// Set this if you want webpack-dev-server to delegate a single path to an arbitrary server.\n// Use \"*\" to proxy all paths to the specified server.\n// This is useful if you want to get rid of 'http://localhost:8080/' in script[src],\n// and has many other use cases (see https://github.com/webpack/webpack-dev-server/pull/127 ).\n/*proxy: {\n    \"*\": \"http://localhost:9091\"\n},*/\n\n// pass [static options](http://expressjs.com/en/4x/api.html#express.static) to inner express server\nstaticOptions: {\n},\n// webpack-dev-middleware options\nquiet: false,\nnoInfo: false,\n//lazy: true,\nfilename: \"bundle.js\",\nwatchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n},\npublicPath: \"/assets/\",\nheaders: { \"X-Custom-Header\": \"yes\" },\nstats: { colors: true }\n\n}\n```\n. change lazy option off\nit works me win7 well!\nmy config :\n```\n{\n    // webpack-dev-server options\ncontentBase: path.join(__dirname,'build'),\n// or: contentBase: \"http://localhost/\",\ninline:true,\nhot: true,\n// Enable special support for Hot Module Replacement\n// Page is no longer updated, but a \"webpackHotUpdate\" message is send to the content\n// Use \"webpack/hot/dev-server\" as additional module in your entry point\n// Note: this does _not_ add the `HotModuleReplacementPlugin` like the CLI option does.\n\n// Set this as true if you want to access dev server from arbitrary url.\n// This is handy if you are using a html5 router.\nhistoryApiFallback: false,\n\n// Set this if you want to enable gzip compression for assets\ncompress: true,\n\n// Set this if you want webpack-dev-server to delegate a single path to an arbitrary server.\n// Use \"*\" to proxy all paths to the specified server.\n// This is useful if you want to get rid of 'http://localhost:8080/' in script[src],\n// and has many other use cases (see https://github.com/webpack/webpack-dev-server/pull/127 ).\n/*proxy: {\n    \"*\": \"http://localhost:9091\"\n},*/\n\n// pass [static options](http://expressjs.com/en/4x/api.html#express.static) to inner express server\nstaticOptions: {\n},\n// webpack-dev-middleware options\nquiet: false,\nnoInfo: false,\n//lazy: true,\nfilename: \"bundle.js\",\nwatchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n},\npublicPath: \"/assets/\",\nheaders: { \"X-Custom-Header\": \"yes\" },\nstats: { colors: true }\n\n}\n```\n. change lazy option off\nit works me win7 well!\nmy config :\n```\n{\n    // webpack-dev-server options\ncontentBase: path.join(__dirname,'build'),\n// or: contentBase: \"http://localhost/\",\ninline:true,\nhot: true,\n// Enable special support for Hot Module Replacement\n// Page is no longer updated, but a \"webpackHotUpdate\" message is send to the content\n// Use \"webpack/hot/dev-server\" as additional module in your entry point\n// Note: this does _not_ add the `HotModuleReplacementPlugin` like the CLI option does.\n\n// Set this as true if you want to access dev server from arbitrary url.\n// This is handy if you are using a html5 router.\nhistoryApiFallback: false,\n\n// Set this if you want to enable gzip compression for assets\ncompress: true,\n\n// Set this if you want webpack-dev-server to delegate a single path to an arbitrary server.\n// Use \"*\" to proxy all paths to the specified server.\n// This is useful if you want to get rid of 'http://localhost:8080/' in script[src],\n// and has many other use cases (see https://github.com/webpack/webpack-dev-server/pull/127 ).\n/*proxy: {\n    \"*\": \"http://localhost:9091\"\n},*/\n\n// pass [static options](http://expressjs.com/en/4x/api.html#express.static) to inner express server\nstaticOptions: {\n},\n// webpack-dev-middleware options\nquiet: false,\nnoInfo: false,\n//lazy: true,\nfilename: \"bundle.js\",\nwatchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n},\npublicPath: \"/assets/\",\nheaders: { \"X-Custom-Header\": \"yes\" },\nstats: { colors: true }\n\n}\n```\n. ",
    "yonixw": "Just want to say that a solution that worked for me was to use git bash for windwos.\nRunning the watcher from there worked perfectly.\nWin 7 64 Bit\n. Just want to say that a solution that worked for me was to use git bash for windwos.\nRunning the watcher from there worked perfectly.\nWin 7 64 Bit\n. ",
    "NickSevens": "\nHi, I've got the same issue (I think) on Windows 10.\nTried running in git bash, but without success...\n\nEdit: fixed it by adding windows-style path separators to devServer.contentBase property:\nmodule.exports = {\n  devServer: {\n    contentBase: '.\\\\src\\\\'\n  }\n}\n. Indeed. Changed it to that afterwards :) made it easier for cross platform dev. \n. ",
    "dqisme": "Awesome! Works fine on Windows 10.\nby the way, it is recommended that using path.join for cross-platform to deal with all the path stuff.\n. ",
    "eromoe": "A project I used has below code\n```\nconst path = require('path');\nconst express = require('express');\nconst webpack = require('webpack');\nconst config = require('./webpack.config.dev');\nconst app = express();\nconst compiler = webpack(config);\napp.use(require('webpack-dev-middleware')(compiler, {\n  noInfo: true,\n  publicPath: config.output.publicPath\n}));\napp.use(require('webpack-hot-middleware')(compiler));\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n```\nIt use npm run dev to start, hot reload work on windows 8.1 but windows 7\nWhat's the problem?\nI don't know much about webpack, ..\n. A project I used has below code\n```\nconst path = require('path');\nconst express = require('express');\nconst webpack = require('webpack');\nconst config = require('./webpack.config.dev');\nconst app = express();\nconst compiler = webpack(config);\napp.use(require('webpack-dev-middleware')(compiler, {\n  noInfo: true,\n  publicPath: config.output.publicPath\n}));\napp.use(require('webpack-hot-middleware')(compiler));\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n```\nIt use npm run dev to start, hot reload work on windows 8.1 but windows 7\nWhat's the problem?\nI don't know much about webpack, ..\n. ",
    "rajyavardhanp": "webpack-dev-server  --content-base **  --inline --hot\n* >> should be your output folder\n./dist or wherever you are building the output\nIf you don't want to reload the page every time, for most platforms localhost:8080 is enough, else check in localhost:8080/webpack-dev-server/index.html\n. webpack-dev-server  --content-base **  --inline --hot\n* >> should be your output folder\n./dist or wherever you are building the output\nIf you don't want to reload the page every time, for most platforms localhost:8080 is enough, else check in localhost:8080/webpack-dev-server/index.html\n. ",
    "Ajaybhardwaj7": "Here is the sample working app which I have created after two days of struggle. I have used the webpack dev server API method. https://github.com/Ajaybhardwaj7/webpack-react-sample\n. Here is the sample working app which I have created after two days of struggle. I have used the webpack dev server API method. https://github.com/Ajaybhardwaj7/webpack-react-sample\n. ",
    "blackhawk389": "@QuantumInformation I have successfully launched recompiled file(not manually refresh), how? seting path to dist folder and devServer: {\n        contentBase: \"./dist\",\n    }, doing this\n. @QuantumInformation I have successfully launched recompiled file(not manually refresh), how? seting path to dist folder and devServer: {\n        contentBase: \"./dist\",\n    }, doing this\n. ",
    "synthecypher": "Moved from OS X to Windows 10 and now webpack-dev-server is not detecting changes and rebuilding the bundle. I'm using Atom so there's no safe write, so that shouldn't be the problem.\nI've attempted most solutions in this issue to no avail.\n- Inline\n- Hot\n- Watch - Use Polling\nHere's my config see devServer.\n. @Kekesed I managed to get it working it appears that it was caused by the paths not being correct for Windows. Wrap any applicable paths in path.resolve and path.join should do the job.\nHere's the updated config feel free to clone my repo and test for yourselves.\n. ",
    "Kekesed": "same here, i have the exact same problem with @synthecypher \n. same here, i have the exact same problem with @synthecypher \n. no comment? T^T\n. ",
    "lostpebble": "Depending on what editor you're using, that could be causing the issue. Just found out that WebStorm was giving me this problem from Windows but not on Ubuntu (the settings must have been different on each).\nThe setting I had to disable which made all the difference was use \"safe write\" (found in Appearance & Behaviour > System Settings), which saves changes first to a temporary file. Saving like that doesn't get picked up by webpack of course, was the cause of much frustration.\n. ",
    "amcdnl": "I can't get it to work either, everything loads fine but upon refresh auto or even manual it does not reflect updates.  My config is: https://github.com/swimlane/angular2-data-table/blob/master/webpack.config.js\n. ",
    "AurelioDeRosa": "I've had the same problem with webpack 1.13.1 and webpack-dev-server 1.14.1 on Windows 10. Adding the following code to the webpack.config.js file solved the issue:\njs\nplugins: [\n   new webpack.OldWatchingPlugin()\n]\n. ",
    "cooervo": "This is what worked for me in windows 10:\n//Webpack.config.js file:\n```\nvar debug = process.env.NODE_ENV !== \"production\";\nvar webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\n  context: path.join(__dirname, \"src\"),\n  devtool: debug ? \"inline-sourcemap\" : null,\n  entry: \"./js/client.js\",\n  module: {\n    loaders: [\n      {\n        test: /.jsx?$/,\n        exclude: /(node_modules|bower_components)/,\n        loader: 'babel-loader',\n        query: {\n          presets: ['react', 'es2015', 'stage-0'],\n          plugins: ['react-html-attrs', 'transform-class-properties', 'transform-decorators-legacy'],\n        }\n      }\n    ]\n  },\n  output: {\n    path: path.join(__dirname, '/src/'),\n    publicPath: '/src/', // instead of publicPath: '/build/'\n    filename: 'client.min.js'\n  },\n  plugins: debug ? [] : [\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin({ mangle: false, sourcemap: false }),\n  ],\n};\n```\nGo to cmd and type: webpack-dev-server --watch-poll\nThis is my dir structure: \n\nIn browser go to: http://localhost:8080/webpack-dev-server/\n. This is what worked for me in windows 10:\n//Webpack.config.js file:\n```\nvar debug = process.env.NODE_ENV !== \"production\";\nvar webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\n  context: path.join(__dirname, \"src\"),\n  devtool: debug ? \"inline-sourcemap\" : null,\n  entry: \"./js/client.js\",\n  module: {\n    loaders: [\n      {\n        test: /.jsx?$/,\n        exclude: /(node_modules|bower_components)/,\n        loader: 'babel-loader',\n        query: {\n          presets: ['react', 'es2015', 'stage-0'],\n          plugins: ['react-html-attrs', 'transform-class-properties', 'transform-decorators-legacy'],\n        }\n      }\n    ]\n  },\n  output: {\n    path: path.join(__dirname, '/src/'),\n    publicPath: '/src/', // instead of publicPath: '/build/'\n    filename: 'client.min.js'\n  },\n  plugins: debug ? [] : [\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.OccurenceOrderPlugin(),\n    new webpack.optimize.UglifyJsPlugin({ mangle: false, sourcemap: false }),\n  ],\n};\n```\nGo to cmd and type: webpack-dev-server --watch-poll\nThis is my dir structure: \n\nIn browser go to: http://localhost:8080/webpack-dev-server/\n. ",
    "sushicutta": "Windows 10 - IntelliJ Ultimate (aka Webstrom) this solved it for me:\n<< Depending on what editor you're using, that could be causing the issue. Just found out that WebStorm was giving me this problem from Windows but not on Ubuntu (the settings must have been different on each).\nThe setting I had to disable which made all the difference was use \"safe write\" (found in Appearance & Behaviour > System Settings), which saves changes first to a temporary file. Saving like that doesn't get picked up by webpack of course, was the cause of much frustration. >> Thanks to @lostpebble\n. ",
    "alb3rto269": "This might be related to: https://github.com/webpack/webpack-dev-server/issues/324\nThe solution posted in that other issue solved my problem. \n. This might be related to: https://github.com/webpack/webpack-dev-server/issues/324\nThe solution posted in that other issue solved my problem. \n. ",
    "fazalrasel": "Those using Polling, watch for RAM use...\n. ",
    "An-Dang": "I used Intellij 2016.2.3 on Win1 and I've also solved the problem with ctrl + s. \n. I used Intellij 2016.2.3 on Win1 and I've also solved the problem with ctrl + s. \n. ",
    "awesomund": "Also experienced this problem with webpack-hot-middleware on my own express-server.\nAdding watchOptions to my webpack-dev-middleware-options solved this for me.\nrelevant part of my server.js:\napp.use(require('webpack-dev-middleware')(compiler, {\n  noInfo: true,\n  publicPath: webpackConfig.output.publicPath,\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n  }\n}));\n. Also experienced this problem with webpack-hot-middleware on my own express-server.\nAdding watchOptions to my webpack-dev-middleware-options solved this for me.\nrelevant part of my server.js:\napp.use(require('webpack-dev-middleware')(compiler, {\n  noInfo: true,\n  publicPath: webpackConfig.output.publicPath,\n  watchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n  }\n}));\n. ",
    "dharmesh-khandelwal": "@dryoma Thank You!! I removed () from the folder name, and live reloading works :)\n. @dryoma Thank You!! I removed () from the folder name, and live reloading works :)\n. ",
    "CocaCola183": "@wmira Save my life\n. @wmira Save my life\n. ",
    "jartaud": "@awesomund works for me. Vue Cli webpack, Laravel Homestead, Win10,\n. ",
    "Kielan": "Crazy this issue has been closed a year ago, tons of people on many machines still have it, and no solution by authors. On osx and have the same problem.\nI know one could say \"it's open source you should fix it\" \n. Crazy this issue has been closed a year ago, tons of people on many machines still have it, and no solution by authors. On osx and have the same problem.\nI know one could say \"it's open source you should fix it\" \n. ",
    "davodaslanifakor": "@nickpresta \n@henriquea \nhi please send here some example\n. ",
    "EvHaus": "Fix confirmed in 1.8.2. Thanks!\n. I'm having the same issue, but it's only occurring when running the app on Windows. The app loads fine on Mac and Linux.\nThe error comes from this file: node_modules/webpack-dev-server/node_modules/socker.io-client/node_modules/engine.io-client/node_modules/ws/lib/browser.js\nIt seems that file can't reference this. Furthermore, patching that file, results in other files having issues referencing the window object too.\n. For me, it looks like my exclude regex doesn't work on Windows like it does on Linux/Mac. My exclude for babel is /node_modules\\/(!?ux|custom)/ because I have two node_modules (one called ux and one called custom) that I want to be processed by babel.\nHowever, you have correctly pointed to the issue. It seems that the regex isn't working as expected because all node_modules are being processed. I've changed my exclude rule to the following include rule instead:\ninclude: [\n    path.resolve(__dirname, \"html\"),\n    path.resolve(__dirname, \"node_modules/custom\"),\n    path.resolve(__dirname, \"node_modules/ux\")\n],\nAnd this resolved the issue for me.\nHowever, I still think there's a webpack bug here because the original exclude rule should have worked. It works for Mac/Linux but does not work on Windows.\n. +1 This issue was introduced with webpack-dev-server@1.14.1. When I rollback to webpack-dev-server@1.14.0, everything is fine again\n. For those who want to make the leap to Webpack 2.0 beta, this issue appears to be fixed in webpack-dev-server 2.1.0-beta.0\n. For those who want to make the leap to Webpack 2.0 beta, this issue appears to be fixed in webpack-dev-server 2.1.0-beta.0\n. FYI: This is happening when you have a <script /> tag in your code that doesn't have a src attribute.\n. Changing the output.path to / did not help resolve the issue.\nDowngrading to 2.1.0-beta.2 makes the error go away. So looks like it was something introduced between beta.2 and beta.3\n. Sorry, I take back my previous statement. Changing output.path to / does indeed make the issue go away. My original output.path was set to ./html/build/.\nHere is a minimal webpack.config.js that can be used to reproduce the issue:\nmodule.exports = {\n    entry: {\n        app: ['./html/js/menu.js']\n    },\n    module: {\n        loaders: [\n            {test: /\\.js$/, loader: 'babel'}\n        ]\n    },\n    output: {\n        path: './html/build/',\n        publicPath: '/build/',\n        filename: '[name].js'\n    }\n};\n. Confirmed. Using an absolute path resolves the issue. Thank you.\n. Can you give any more insight into what Command failed with exit code 134. means? I don't know where to start to dig into this deeper.. Same issue here. Some more info for you, this is the error I'm getting:\nvendor.7.0.0.js:178 Uncaught TypeError: Cannot read property 'length' of null\n    at Object.accept (vendor.7.0.0.js:178)\n    at eval (entry.js_+_38_modules:2406)\n    at Object../html/js/entry.js (app.7.0.0.js:154)\n    at __webpack_require__ (vendor.7.0.0.js:696)\n    at fn (vendor.7.0.0.js:117)\n    at __WEBPACK_IMPORTED_MODULE_2_i18next__.default.use.use.init (main.js_+_1_modules:153)\n    at eval (index.js_+_14_modules:1948)\n    at done (index.js_+_14_modules:2055)\n    at Object.eval [as callback] (index.js_+_14_modules:2071)\n    at eval (index.js_+_14_modules:1477)\n    at Array.forEach (<anonymous>)\n    at Connector.loaded (index.js_+_14_modules:1464)\n    at eval (index.js_+_14_modules:1612)\n    at eval (index.js_+_14_modules:1505)\n    at Backend.read (main.js_+_1_modules:28)\n    at Connector.read (index.js_+_14_modules:1498)\nThe failure is in hotCreateModule function:\naccept: function(dep, callback) {\n/******/                if(typeof dep === \"undefined\")\n/******/                    hot._selfAccepted = true;\n/******/                else if(typeof dep === \"function\")\n/******/                    hot._selfAccepted = dep;\n/******/                else if(typeof dep === \"object\")\n                                                // FAILURE HAPPENS HERE BECAUSE dep IS null\n/******/                    for(var i = 0; i < dep.length; i++)\n/******/                        hot._acceptedDependencies[dep[i]] = callback || function() {};\n/******/                else\n/******/                    hot._acceptedDependencies[dep] = callback || function() {};\n/******/            },. ",
    "talmobi": "Exactly what I was looking for, thanks you all.\n. ",
    "grahamb": "Never mind, this looks like it's a DNS-related problem. I'm proxying to a vagrant box; when I change to using its IP address everything is snappy.\n. ",
    "zorji": "I have the same issue, thanks for your finding, it helped me too.\n. ",
    "PaddyMann": "Same issue experienced using recommend instructions with create-react-app. Thanks for sharing solution :). ",
    "MichaelCereda": "Thank you, i discovered that the problem was related to a misconfiguration in the package react-starter.\nEverything runs smoothly now\n. ",
    "jonmanzo": "Seems dirs can get corrupted and not propagate FE Events. Find solution here: http://stackoverflow.com/questions/26708205/webpack-watch-isnt-compiling-changed-files\n. Updating WP to 1.10.1 fixed my issues.\n. ",
    "tanem": "@ChickenFur not sure what the official way to do things would be, but we're using Grunt and I can share what we've done:\n``` js\n// => inside \"wds\" task\n...\nvar wds = new WebpackDevServer(/ compiler, options /);\n// Set up a route handler in the wds itself. \nwds.app.get('/reload', function(req, res){\n  // Tell connected browsers to reload.\n  wds.io.sockets.emit('ok');\n  res.sendStatus(200);\n});\n...\n```\njs\n// => inside \"reload\" task\n...\nhttp.get('http://' + wdsHostname + ':' + wdsPort + '/reload', function(){\n  grunt.log.ok();\n  done();\n}).on('error', function(error){\n  grunt.log.error(error);\n  done(false);\n});\n...\nThe wds task gets kicked off alongside another Node server on startup, so once done the /reload route is available. We can then listen for events and trigger the reload task whenever we want. For example, we use this via Grunt watch to reload the app automatically whenever our core HTML files change (since they're not managed by webpack).\n. No worries @alansouzati, glad you got it working in the end :smiley:\n. ",
    "dangreen": "That's my solution to manual trigger page reload:\n```js\nlet webpackDevServer = null;\nfunction reloadWebpackDevServerPage() {\nif (webpackDevServer === null) {\n    return false;\n}\n\nwebpackDevServer.sockWrite(webpackDevServer.sockets, 'ok');\n\nreturn true;\n\n}\ngulp.task('webpack:dev', () => {\n    webpackDevServer = new WebpackDevServer(...);\n    webpackDevServer.listen(...);\n});\ngulp.task('html:dev', () => {\n    gulp.watch('src/**.html').on('change', reloadWebpackDevServerPage);\n});\n. @illepicjs\n\nconst WebpackDevServer = require('webpack-dev-server')\n...\nvds = new WebpackDevServer(require('webpack')({ entry: './app.js' }))\n...\nvds.sockWrite\n[Function]\n. @illepicjs\nconst WebpackDevServer = require('webpack-dev-server')\n...\nvds = new WebpackDevServer(require('webpack')({ entry: './app.js' }))\n...\nvds.sockWrite\n[Function]\n```. \n",
    "illepic": "@dangreen : Yours looks like the optimal solution for me, but .sockWrite is not a function on the instance of webpack dev server. (webpackDevServer). How do we access these functions on the returned webpack dev server object? . I was able to verify that webpack ^3.4.1 and webpack-dev-server ^2.7.1 works when using a custom npm script:\n``json\n      \"scripts\": {\n        \"webpack-dev-server\": \"webpack-dev-server --open\"\n      },\n````\nAnd calling like so:npm run webpack-dev-server -- --config my.custom.webpack.config`. ",
    "xblxc": "here, it works:\nwebpackDevServer.sockWrite(webpackDevServer.sockets, 'content-changed');. ",
    "tcurdt": "I got much further. So the files are available as\n- http://localhost:8888/build/index\n- http://localhost:8888/build/details/index\nthey are linked from http://localhost:8888/webpack-dev-server\nQuestions left for now:\n- Why \"/build/index\" and not \"/build/index.html\"?\n- Why doesn't \"/build/\" show \"/build/index.html\"\n. Hm. Also seems to use boilerplate html - not mine.\n. Should one always wrap the webpack-dev-server with it's own proxy?\nThe only way I could think of getting around this.\n. ",
    "silhouettes": "+1\n. ",
    "davepile": "+1.\n C:....node-gyp\\0.12.0\\deps\\v8\\include\\v8.h(1599) : see declaration of 'v8::String'       \nC:...\\node_modules\\webpack-dev-server\\node_modules\\socket.io-client\\node_modules\\engine.io-client\\node_ modules\\ws\\node_modules\\nan\\nan.h(487) : see declaration of 'NanAsyncWorker'\nalthough it still seemed to install and work on a very simple test project, including hot-reloading\n. ",
    "claym": "Similar problems here.\n. ",
    "Stas404": "+1\n. Automattic/socket.io#2057 :+1: \n. +1\n. +1 hi all.\n. ",
    "omaksi": "+1\n. For me it was this socket.io issue, the solution was to install ws manually, see: https://github.com/Automattic/socket.io/issues/2057\n. ",
    "codeuniquely": "Related to \nhttps://github.com/webpack/webpack-dev-server/issues/195\nhttps://github.com/webpack/webpack-dev-server/issues/191\n. +1: Related to https://github.com/webpack/webpack-dev-server/issues/195\n- Windows 8\n- node 0.12.4\n- webpack 1.9.10\n- webpack-dev-server 1.9.0\n. ",
    "timknip": "Seems its solved with 1.10.1\n. ",
    "bestic": "same here\n. ",
    "princed": "Thanks for merging!\n. ",
    "quangbuule": "Yeah right, in webpack (function() { return this; })() doesn't return window like in browserify, even when I set target: 'web' in configuration.\n. ",
    "Couto": "Oh boy.... I truly don't envy developers that use Windows.\n. ",
    "jedmao": "Related webpack issue https://github.com/webpack/webpack/issues/278\n. @Couto the issue is not developers using Windows. The issue is developers who do anything having to do with file paths w/o any regard to other operating systems. It goes both ways. I'm a Windows developer and I always use the path API when dealing with paths. If everyone else would do the same, the world would be a better place.\n. ",
    "synthomat": "I don't fully understand, how ignoring node_modules helps to solve this issue. My frontend-application is using dependencies from node_modules which need to be processed/compiled by babel (visjs for example). Maybe I just misunderstood webpack (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b\nEDIT: @globexdesigns oh, thx. That kind of helped\n. @gaearon yeah, understood. Include works great. Thanks!\n. ",
    "DanilloCorvalan": "And what if you need to babel some modules in node_modules ? Is there any way to avoid this problem ? :(\n. ",
    "andy0130tw": "I think the more correct way to get window is Function('return this')() instead. The content in Function constructor is non-strict regardless of the environment it is created in.. ",
    "szarouski": "I did run into the same issue, is there a solution? Thank you.\n. @SpaceK33z sorry it is been a while, since then I didn't use webpack-dev-server. Hopefully speigg will be able to help. If I run into this case again I'll post update here.\n. ",
    "piratus": "Looks like you should export the config\njavascript\nmodule.exports = require('webpack.config.js')\n. ",
    "guoxiangwen": "@piratus where should I import the config?\n. How to set proxy buffer, i want to upload some files to backend. ",
    "yashvekaria": "@piratus @gsklee  where should I import the config?\n. ",
    "mcolburn": "I also have this issue.  Would someone please provide a response.  Thank you!\n. ",
    "121onto": "+1\n. ",
    "jvalen": "Hi,\nI came across with this problem too. I've found two ways to handle it so far.\n1. webpack-dev-server loads your app in an iframe, by default the console of the developer tools have access to the main context but not the variables inside the iframe (unless you expose them somehow with webpack). You can change the context to point to the iframe and access to that data. I tried with Chrome and Firefox and works perfectly.\n2. The other way is just using webpack-dev-server inline mode. We could run the following command webpack-dev-server --inline and check the result at http://<host>:<port>/<path> avoiding the iframe issue.\n. ",
    "alextiley": "Did you ever figure this out? I have the exact same problem...in the console I'm seeing this:\nGET http://localhost:3002/socket.io/?EIO=3&transport=polling&t=1438181843342-11 net::ERR_EMPTY_RESPONSE\nI'm using vagrant with a private network. I'm not sure if that has anything to do with it.\n. @aesopwolf Thanks, think I'll start again :+1: \n. ",
    "aesopwolf": "I can't remember what I did to fix it. I think I wiped everything and started from scratch... I vaguely remember thinking it was a user (my) error though. \n. ",
    "fredantell": "@alextiley If you solve this, would love to hear what you did. We're currently running into this right now. Works on 3 machines, fails on 1. I'll post back if we figure it out.\n. To follow up, I'm not sure that we really solved the problem, but we did work around it. On the machine that was having issues, accessing the server from http://127.0.0.1:8080/ worked where http://localhost:8080/ failed. This is despite the /etc/hosts file appearing to be correct, and despite the fact that a python SimpleHTTPServer was accessible via http://localhost:8080/ with no issues.\nIn addition to that workaround, we also dropped our repo into a docker container. In order to make that function properly we added a \"-host 0.0.0.0\" flag to the command to launch the server. In the end it became:\n\"webpack-dev-server --hot --host 0.0.0.0 --progress --colors\"\nand our webpack.config.js had this entry:\nentry: {\n        app: [\n            \"webpack-dev-server/client?:8080/\", //fix issues with socket.io and live reloading\n            'webpack/hot/dev-server',\n             .......\n            ]\n}\n. ",
    "nbollepalli": "@aesopwolf, I am running into the exact same issue and I have tried to run everything from scratch as well. Did you figure out what exactly was leading to the issue? It will help me tremendously if you know the answer. Thanks!\n. ",
    "amannn": "I've got the same issue. Also in the console webpack doesn't output the stats anymore \u2026\n. ",
    "ariley90": "Did anyone ever figure out how to resolve this? I'm experiencing the exact same behaviour as @fredantell. Localhost host works fine for everything but webpack-dev-server. \n. ",
    "jbschrades": "This might help some of you.  I was experiencing the same issue running a vagrant VM with port forwarding on port 3000.  I could curl http://localhost:3000 from within the VM but content wasn't getting forwarded.  By default, webpack-dev-server binds to localhost (127.0.0.1) which is a loopback address. Therefore you need to add --host 0.0.0.0 to your webpack-dev-server command.  Mine:\nwebpack-dev-server --hot --progress --colors --host 0.0.0.0 --port 3000\nNo other changes were necessary. \n@fredantell provides a similar solution above.\n. ",
    "SunJieMing": "I was able to solve this issue by doing this as well:\nwebpack-dev-server --port 3000\n. ",
    "Loogeek": "webpack-dev-server --inline --hot --progress --colors --host 0.0.0.0 --port 4000\n. ",
    "teazean": "problem: localhost:8080 failed  but 127.0.0.1:8080 worked\ni resolved this problem by delete the line '::1 localhost' in the /etc/hosts\n. problem: localhost:8080 failed  but 127.0.0.1:8080 worked\ni resolved this problem by delete the line '::1 localhost' in the /etc/hosts\n. ",
    "KayBeSee": "I was able to delete '::1 localhost' in /etc/hosts and it works now\n. +1\n. +1\n. ",
    "eduardoh2307": "https://github.com/aepsilon/turing-machine-viz/issues/1 someone can help me please i want install this project. ",
    "SkyCo": "Maybe you could try it that turn \"Global Mode\" to \"Auto Proxy Mode\" in ShadowsocksX.. ",
    "szmtcjm": "@ryankask same to you\n. ",
    "Wicus": "I think this will help you out, Author explained it here: #97 \n. ",
    "bkentdev": "The docs say that the easiest way to use HMR is on the command line:\nwebpack-dev-server --inline --hot\nIts easier if you just set that to npm start in your package.json:\n\"scripts\": {\n  \"start\": \"webpack-dev-server --inline --hot\"\n}\n. ",
    "twelve17": "@SpaceK33z , can you link to the docs you are referring to, that have those three bullet points? The docs for {hot: true}  I see, which are here, state:\n\nNote that webpack.HotModuleReplacementPlugin is required to fully enable HMR. If webpack or webpack-dev-server are launched with the --hot option, this plugin will be added automatically, so you may not need to add this to your webpack.config.js\n\n(Emphasis mine.)\nAm I confusing documentation sources?  Or is it that --hot on the CLI has a different effect than {hot: true} in the config?\nUpdate: I found the reference to the docs above: it's in the wiki.  There seems to be a bit of inconsistency with the docs.  I presume the wiki is the correct one then?\nUpdate 2: I took another pass at reading the docs for the various approaches.  As I understand it now:\n\nYou can run the webpack-dev-server executable from the NPM of the same name, and pass it ---hot --inline, and not need to edit your own config.  \nYou can use the webpack-dev-server NPM's API to create your own executable.  For this approach, you do need to add the plugin and { hot: true } to your config?  \n\n. @SpaceK33z , can you link to the docs you are referring to, that have those three bullet points? The docs for {hot: true}  I see, which are here, state:\n\nNote that webpack.HotModuleReplacementPlugin is required to fully enable HMR. If webpack or webpack-dev-server are launched with the --hot option, this plugin will be added automatically, so you may not need to add this to your webpack.config.js\n\n(Emphasis mine.)\nAm I confusing documentation sources?  Or is it that --hot on the CLI has a different effect than {hot: true} in the config?\nUpdate: I found the reference to the docs above: it's in the wiki.  There seems to be a bit of inconsistency with the docs.  I presume the wiki is the correct one then?\nUpdate 2: I took another pass at reading the docs for the various approaches.  As I understand it now:\n\nYou can run the webpack-dev-server executable from the NPM of the same name, and pass it ---hot --inline, and not need to edit your own config.  \nYou can use the webpack-dev-server NPM's API to create your own executable.  For this approach, you do need to add the plugin and { hot: true } to your config?  \n\n. Wow, this answer is way more thorough than I expected. Thanks kindly for elaborating on the nuances between the setups. I will take some time to go through this. . Wow, this answer is way more thorough than I expected. Thanks kindly for elaborating on the nuances between the setups. I will take some time to go through this. . ",
    "valgaze": "@twelve17 \nFew ways to do this:\n\n\nCLI: run the command with appropriate flags\n\n\nNPM: Same as CLI but simply an entry in your package.json's scripts section which will in turn run the CLI command\n\n\nNode API: Use webpack-dev-server programatically\n\n\nLet's go in reverse order:\n\nYou can use the webpack-dev-server NPM's API to create your own executable. For this approach, you do need to add the plugin and { hot: true } to your config?\n\nNot sure what you mean by 'create your own executable' but I'm assuming you mean using the Node (not NPM) API and creating a script you run yourself (ie you're not typing webpack-dev-server but starting webpack-dev-server programmatically. \nIn this situation (Node API) you'll need to manually modify the entry field of webpack.config.js (see Step I below) and  add the plugin (see Step II). Note, however,  that {hot: true} should NOT be added to your webpack.config.js because it will have no effect if you're starting webpack-dev-server programmatically. You'll need to pass that in server configuration as a parameter (see Step III below) because otherwise it won't be acknowledged from webpack.config.js by webpack-dev-server:\ntxt\nIf you're using dev-server through the Node.js API, \nthe options in devServer will be ignored. \nPass the options as a second parameter instead: new WebpackDevServer(compiler, {...})\n(See here: https://webpack.js.org/configuration/dev-server/#devserver)\nTo take the node API case by itself: You're not using the CLI and instead have written some kind of script where you want to turn on webpack-dev-server and pass in its config\nYou'll need three things for code updates:\n\nSTEP I Update your webpack.config.js file's entry field with:\n\njs\nentry: ['webpack/hot/dev-server', 'webpack-dev-server/client?http://localhost:1337/', 'app/your_app.js'],\n\nSTEP II Update your webpack.config.js file's plugin field with:\n\njs\nplugins: [ new webpack.HotModuleReplacementPlugin() ]\n\nSTEP III Add {hot: true} to the webpack-dev-server's programmatic configuration, it's second parameter-- not webpack.config.js \nex.\n```\nconst Webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst webpackConfig = require('./webpack.config.js'); //If this has devServer or not has no effect when run from Nodejs\nconst compiler = Webpack(webpackConfig);\nconst opts = {\n    hot: true,\n    // contentBase, inline, etc lots of options,\n}\n\nconst server = new WebpackDevServer(compiler, opts); // Notice opts is the second parameter\nserver.listen(1337, 'localhost', (err) => {\n  if (err) {\n   console.log('Error', err);\n  } else {\n   console.log('Starting server on http://localhost:1337');\n }\n});\n```\nNOTE: To be crystal clear, it does not matter if {hot:true} already exists in devServer of webpack.config.js because when using the Node API the devServer section of webpack.config.js gets ignored Instead the config needs to be explicitly passed as the second parameter of the server like above.\nCLI/NPM Case\n\nYou can run the webpack-dev-server executable from the NPM of the same name, and pass it ---hot --inline, and not need to edit your own config.\n\nThat is correct. (Not sure what you mean by \"NPM of the same name\"--I think you mean an npm script. You can name it whatever you want and invoke them with npm run your_script_here)\n\n\n--inline flag will add the correct to the 'entry' field of your webpack.config.js like in Step I above\n\n\n--hot flag will enable Hot Module Reloading-- ie see changes updated without having to hard-reload the entire page by automatically adding the plugin from Step II \n\n\nNote in the CLI  case you CAN assume the devServer configuration from webpack.config.js is acknowledged, so you can either use the CLI flags --hot and --inline OR in the devServer section add hot:true & inline:true)\nSide note:  For the NodeJS programmatic API case, note that you must manually add the changes to the entry & plugin fields since there can be \"no inline: true flag in the webpack-dev-server configuration, because the webpack-dev-server module has no access to the webpack configuration. Instead, the user must add the webpack-dev-server client entry point to the webpack configuration. (This is exactly what we did in Step I in the Node API case above)\n\nAm I confusing documentation sources? Or is it that --hot on the CLI has a different effect than {hot: true} in the config?\n\nIf I understand correctly, there is no difference. Pick one or the other \ud83d\udc4d \nResources\n\n\nAndrew Farmer's HMR overview (less wordy): https://www.javascriptstuff.com/webpack-hmr-tutorial/\n\n\nHandy Wiki: https://github.com/webpack/docs/wiki/webpack-dev-server\n\n\nCanonical Node API example: https://github.com/webpack/webpack-dev-server/blob/master/examples/api/simple/webpack.config.js\n\n\ndevServer config ignored when using webpack-dev-server from the Node API: https://webpack.js.org/configuration/dev-server/#devserver\n\n\nhttps://www.javascriptstuff.com/webpack-hmr-tutorial/\n. @twelve17 \n\n\nFew ways to do this:\n\n\nCLI: run the command with appropriate flags\n\n\nNPM: Same as CLI but simply an entry in your package.json's scripts section which will in turn run the CLI command\n\n\nNode API: Use webpack-dev-server programatically\n\n\nLet's go in reverse order:\n\nYou can use the webpack-dev-server NPM's API to create your own executable. For this approach, you do need to add the plugin and { hot: true } to your config?\n\nNot sure what you mean by 'create your own executable' but I'm assuming you mean using the Node (not NPM) API and creating a script you run yourself (ie you're not typing webpack-dev-server but starting webpack-dev-server programmatically. \nIn this situation (Node API) you'll need to manually modify the entry field of webpack.config.js (see Step I below) and  add the plugin (see Step II). Note, however,  that {hot: true} should NOT be added to your webpack.config.js because it will have no effect if you're starting webpack-dev-server programmatically. You'll need to pass that in server configuration as a parameter (see Step III below) because otherwise it won't be acknowledged from webpack.config.js by webpack-dev-server:\ntxt\nIf you're using dev-server through the Node.js API, \nthe options in devServer will be ignored. \nPass the options as a second parameter instead: new WebpackDevServer(compiler, {...})\n(See here: https://webpack.js.org/configuration/dev-server/#devserver)\nTo take the node API case by itself: You're not using the CLI and instead have written some kind of script where you want to turn on webpack-dev-server and pass in its config\nYou'll need three things for code updates:\n\nSTEP I Update your webpack.config.js file's entry field with:\n\njs\nentry: ['webpack/hot/dev-server', 'webpack-dev-server/client?http://localhost:1337/', 'app/your_app.js'],\n\nSTEP II Update your webpack.config.js file's plugin field with:\n\njs\nplugins: [ new webpack.HotModuleReplacementPlugin() ]\n\nSTEP III Add {hot: true} to the webpack-dev-server's programmatic configuration, it's second parameter-- not webpack.config.js \nex.\n```\nconst Webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst webpackConfig = require('./webpack.config.js'); //If this has devServer or not has no effect when run from Nodejs\nconst compiler = Webpack(webpackConfig);\nconst opts = {\n    hot: true,\n    // contentBase, inline, etc lots of options,\n}\n\nconst server = new WebpackDevServer(compiler, opts); // Notice opts is the second parameter\nserver.listen(1337, 'localhost', (err) => {\n  if (err) {\n   console.log('Error', err);\n  } else {\n   console.log('Starting server on http://localhost:1337');\n }\n});\n```\nNOTE: To be crystal clear, it does not matter if {hot:true} already exists in devServer of webpack.config.js because when using the Node API the devServer section of webpack.config.js gets ignored Instead the config needs to be explicitly passed as the second parameter of the server like above.\nCLI/NPM Case\n\nYou can run the webpack-dev-server executable from the NPM of the same name, and pass it ---hot --inline, and not need to edit your own config.\n\nThat is correct. (Not sure what you mean by \"NPM of the same name\"--I think you mean an npm script. You can name it whatever you want and invoke them with npm run your_script_here)\n\n\n--inline flag will add the correct to the 'entry' field of your webpack.config.js like in Step I above\n\n\n--hot flag will enable Hot Module Reloading-- ie see changes updated without having to hard-reload the entire page by automatically adding the plugin from Step II \n\n\nNote in the CLI  case you CAN assume the devServer configuration from webpack.config.js is acknowledged, so you can either use the CLI flags --hot and --inline OR in the devServer section add hot:true & inline:true)\nSide note:  For the NodeJS programmatic API case, note that you must manually add the changes to the entry & plugin fields since there can be \"no inline: true flag in the webpack-dev-server configuration, because the webpack-dev-server module has no access to the webpack configuration. Instead, the user must add the webpack-dev-server client entry point to the webpack configuration. (This is exactly what we did in Step I in the Node API case above)\n\nAm I confusing documentation sources? Or is it that --hot on the CLI has a different effect than {hot: true} in the config?\n\nIf I understand correctly, there is no difference. Pick one or the other \ud83d\udc4d \nResources\n\n\nAndrew Farmer's HMR overview (less wordy): https://www.javascriptstuff.com/webpack-hmr-tutorial/\n\n\nHandy Wiki: https://github.com/webpack/docs/wiki/webpack-dev-server\n\n\nCanonical Node API example: https://github.com/webpack/webpack-dev-server/blob/master/examples/api/simple/webpack.config.js\n\n\ndevServer config ignored when using webpack-dev-server from the Node API: https://webpack.js.org/configuration/dev-server/#devserver\n\n\nhttps://www.javascriptstuff.com/webpack-hmr-tutorial/\n. \n\n",
    "rafaelchiti": "@sokra is there intentions to merge this in? just to know since I'll be needing it. \nThanks!\n. ",
    "kisenka": "Sorry, can you explain how to use this feature?\n. ",
    "Savageman": "Can confirm, had the same problem. Spaces in path are fine. Parenthesis are not.\n. ",
    "spoeken": "I tried to simply escape options.contentBase in Server.js, no luck.\noptions.contentBase = options.contentBase.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n. Probably related to issue #188 \nCan someone point me in the right direction so I can try fix this? \n. ",
    "heebtob": "I would love to see this feature. In my case I would like to use the passport middleware for authentication.\n:+1: \n. ",
    "danistefanovic": "+1\n. ",
    "mehwww": "+1\n. ",
    "jnv": ":+1: \nOr perhaps you could have a middleware option similar to browserSync, although this is feasible with this solution.\n. :+1: \nOr perhaps you could have a middleware option similar to browserSync, although this is feasible with this solution.\n. ",
    "marbemac": "+1\n. ",
    "chentsulin": "engine.io-client already update ws version from 0.4.31 to 7.2, which fix the io.js \\ ws \\ nan build issue https://github.com/socketio/engine.io-client/issues/376.\nAnd socket.io-client 1.3.6 also update engine.io-client from 1.5.1 to 1.5.2 to follow up.\nCould we just bump socket.io-client to 1.3.6 for fixing many people's trouble here? \n@sokra \n. ok, I opened a pull request at #223 \n. ",
    "cgrossde": "Please republish to npm and bump the package version. \n. I just edited the package.json manually but this does not solve the problem. I still get this error\n```\nWARNING in (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/bufferutil/~/bindings/bindings.js\nCritical dependencies:\n76:22-40 the request of a dependency is an expression\n76:43-53 the request of a dependency is an expression\n @ (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/bufferutil/~/bindings/bindings.js 76:22-40 76:43-53\nWARNING in (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/utf-8-validate/~/bindings/bindings.js\nCritical dependencies:\n76:22-40 the request of a dependency is an expression\n76:43-53 the request of a dependency is an expression\n @ (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/utf-8-validate/~/bindings/bindings.js 76:22-40 76:43-53\nWARNING in (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/bufferutil/~/bindings/package.json\nModule parse failed: /Users/christophgross/Code/Pullover/src/node_modules/webpack-dev-server/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/bufferutil/node_modules/bindings/package.json Line 2: Unexpected token :\nYou may need an appropriate loader to handle this file type.\n| {\n|   \"name\": \"bindings\",\n|   \"description\": \"Helper module for loading your native module's .node file\",\n|   \"keywords\": [\n @ (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/bufferutil/~/bindings ^.\\/.*$\nWARNING in (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/utf-8-validate/~/bindings/package.json\nModule parse failed: /Users/christophgross/Code/Pullover/src/node_modules/webpack-dev-server/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/utf-8-validate/node_modules/bindings/package.json Line 2: Unexpected token :\nYou may need an appropriate loader to handle this file type.\n| {\n|   \"name\": \"bindings\",\n|   \"description\": \"Helper module for loading your native module's .node file\",\n|   \"keywords\": [\n @ (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/utf-8-validate/~/bindings ^.\\/.*$\nWARNING in (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/bufferutil/~/bindings/README.md\nModule parse failed: /Users/christophgross/Code/Pullover/src/node_modules/webpack-dev-server/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/bufferutil/node_modules/bindings/README.md Line 2: Unexpected token ===\nYou may need an appropriate loader to handle this file type.\n| node-bindings\n| =============\n| ### Helper module for loading your native module's .node file\n| \n @ (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/bufferutil/~/bindings ^.\\/.*$\nWARNING in (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/utf-8-validate/~/bindings/README.md\nModule parse failed: /Users/christophgross/Code/Pullover/src/node_modules/webpack-dev-server/node_modules/socket.io-client/node_modules/engine.io-client/node_modules/ws/node_modules/utf-8-validate/node_modules/bindings/README.md Line 2: Unexpected token ===\nYou may need an appropriate loader to handle this file type.\n| node-bindings\n| =============\n| ### Helper module for loading your native module's .node file\n| \n @ (webpack)-dev-server/~/socket.io-client/~/engine.io-client/~/ws/~/utf-8-validate/~/bindings ^.\\/.*$\n```\nHere are my dependencies:\n\"devDependencies\": {\n    \"babel-core\": \"^5.4.7\",\n    \"babel-eslint\": \"^3.1.9\",\n    \"babel-loader\": \"^5.1.2\",\n    \"css-loader\": \"^0.15.6\",\n    \"eslint-plugin-react\": \"^2.3.0\",\n    \"extract-text-webpack-plugin\": \"^0.8.2\",\n    \"html-webpack-plugin\": \"^1.6.0\",\n    \"node-sass\": \"^3.2.0\",\n    \"react-hot-loader\": \"^1.2.7\",\n    \"sass-loader\": \"^1.0.3\",\n    \"style-loader\": \"^0.12.3\",\n    \"webpack\": \"^1.10.5\",\n    \"webpack-dev-server\": \"^1.10.1\"\n  },\n  \"dependencies\": {\n    \"autorun\": \"^1.0.3\",\n    \"eslint\": \"^1.0.0\",\n    \"lodash\": \"^3.10.0\",\n    \"mkdirp\": \"^0.5.1\",\n    \"promise\": \"^7.0.3\",\n    \"react\": \"^0.13.0\",\n    \"request\": \"^2.60.0\"\n  },\nNode 0.12.2\nMac 10.10.4\n. @lelandrichardson Can you elaborate in more detail (maybe gist) on how you did this? I'm having the same problem currently.\n. ",
    "khowling": "Really happy to see https support, but I have same issue\n. ",
    "iansinnott": "If anyone else runs into this issue, you may want to check your webpack.config.js file and make sure you're not using HTTP (without the S) anywhere in your config. This was a problem I ran into where I had set https: true in the webpack dev server config, but my actual webpack config file was still passing a plain http URL. This caused the dev-server to work but hot reloads were failing.\nWhen in doubt grep your whole project for \"http\" and you might find that you have a non-SSL address hardcoded somewhere you wouldn't expect.\n. Yeah I get the same bug in 1.12.2. \n. Yes. Is it possible that's causing the issue?\nOn Mon, Oct 5, 2015 at 6:40 PM, Lu\u00eds Rudge notifications@github.com\nwrote:\n\n@iansinnott are you using gulp with webpack?\nReply to this email directly or view it on GitHub:\nhttps://github.com/webpack/webpack-dev-server/issues/271#issuecomment-145719356\n. Interesting. I'm not using any gulp-specific module, so it may be an issue with the javascript API. Anyway, thanks for the info @luisrudge. I'll try using it without gulp.\n. Yeah I've upgraded a a bunch of modules in my workflow and I don't see this issue anymore. Can't pinpoint what was causing it but it doesn't seem to be a problem now\n. \n",
    "cmfoula": "can it have effect on app performance?. ",
    "leecade": "+1 very confused for me\n. ",
    "crenwick": "Is there a good workaround for this? I have been trying to get webpack-dev-server to run through a proxy to a node server like so:\n``` javascript\n  // 'ip' and 'port' are defined above\n  var devClient = [require.resolve('./node_modules/webpack-dev-server/client/') + '?http://' + ip.address() + ':8080'];\n  devClient.push('webpack/hot/dev-server');\n  config.entry = devClient.concat(config.entry);\nnew WebpackDevServer(webpack(config), {\n    devtool: 'eval-source',\n    stats: { colors: true },\n    progress: true,\n    hot: true,\n    inline: true,\n    historyApiFallback: true,\n    proxy: {\n      '*': 'http://' + ip.address() + ':' + port,\n      'host': 'http://' + ip.address() + ':' + port,\n    },\n  }).listen(8080, ip.address(), function(err) {\n    if(err) throw err;\n    console.log('http://' + ip.address() + ':8080' + '/webpack-dev-server/');\n    console.log('webpack result is served from ');\n  });\n```\nAnd I keep getting weird errors that are not mapped correctly. Also, very related to https://github.com/webpack/webpack-dev-server/issues/256\n. ",
    "vegetableman": "This was brain damage, since, the api for the cli vs node is different.\n. ",
    "cogwire": "I can confirm that this is an issue with the release (v1.9.0) and commit 8e8f540. Appears to be an issue with socket.io as the exception is on line 23 of socket.io/lib/transport/polling.js \nhttps://github.com/Automattic/engine.io-client/blob/d0e8643d050196ce29d88438d129230817f89c85/lib/transports/polling.js \nThe webpack output is as follows, and causes an exception (object is not a function):\nvar xhr = new XMLHttpRequest({ xdomain: false });\nExecuting the following on the console works as expected:\nvar xhr = new XMLHttpRequest.XMLHttpRequest({ xdomain: false });\nComparing the result of var XMLHttpRequest = webpack_require(/! xmlhttprequest / 19);\nNot working:\nfunction XMLHttpRequest()\nWorking:\nfunction module.exports(opts)\nChecking my make-webpack-config.js, I found the problem:\nvar externals = [{\n    xmlhttprequest: '{XMLHttpRequest:XMLHttpRequest}'\n  }];\nRemoving xmlhttprequest from this array solved my problem. I am pretty sure I put it in there to resolve this issue: https://github.com/webpack/webpack-dev-server/issues/66\n@sokra Keep up the great work!\n. ",
    "Andrew8xx8": "@maspwr as written here http://webpack.github.io/docs/webpack-dev-server.html\nyou must put these lines:\nwatchOptions: {\n    aggregateTimeout: 300,\n    poll: 1000\n  },\ninto WebpackDevServer constructor.\nThis works fine for me.\n. ",
    "janraasch": "@Andrew8xx8 works like a charme with my vagrant setup. Thank you.\n. @Andrew8xx8 works like a charme with my vagrant setup. Thank you.\n. ",
    "maspwr": "I see that others aren't having this issue. I'll retest when I need to use that functionality again and reopen if I can reproduce the issue. Thanks.\n. ",
    "jrrbru": "I'm getting similar errors in Node v0.12.2 on Windows 7.\nAny chance this will be fixed? Any way I can help?\n. ",
    "everthis": "I think it's useful for those who develop webapps on remote machines.. @resure Thanks, the --public host:port option really works.. ",
    "niieani": "Any news on this front?. ",
    "SpainTrain": "Sorry for not responding.  Thanks for testing this.  Glad it has gone away, I will have to try it out!\n. ",
    "watsoncj": "Is it me or is the proxy feature no longer reachable? Similar comments made in #213.\n. It appears that the webpack-dev-server proxy can't be defined in webpack.config.js. It is ignored since webpack isn't aware of a proxy feature.\nThe proxy option needs to be passed directly to a WebpackDevServer via something like grunt-webpack.\nSee example in API documentation\n. Good point, @sokra. What do you think of just always passing secure: false, to support valid certificates that don't link to the Node.js certificate chain?\n. http-proxy enables this security enforcement which is disabled by default in Node.js unless secure: false is passed.\n. thanks @sokra, fixed\n. ",
    "wmertens": "@sokra I updated the PR, with the new code it's much simpler :)\nIMHO, the historyApiFallback is in the correct location.\n. ",
    "arturparkhisenko": "And many other dependencies need update too.\n. https://github.com/socketio/engine.io-client/issues/376#issuecomment-123582355\nplease... @sokra @simenbrekken\n. ",
    "cmodijk": "I have created my own binary which fixes my problem for know\n```\nvar webpack             = require('webpack');\nvar WebpackDevServer    = require('webpack-dev-server');\nvar config              = require('./webpack.config');\nnew WebpackDevServer(webpack(config), {\n    publicPath:         '/builds/',\n    hot:                true,\n    historyApiFallback: true\n}).listen(8080, 'localhost', function (err) {\n    if (err) {\n        console.log(err);\n    }\nconsole.log('Listening at localhost:8080');\n\n});\n```\n. ",
    "ywmail": "@ksonnad I have the same problem! Your solution works for me, saved my day!\n. Hi @trsh - I have multi webpack configs, so I followed @ksonnad 's solution, if you just have multi pages, you may have a look at https://webpack.github.io/docs/optimization.html#multi-page-app and https://github.com/ampedandwired/html-webpack-plugin#generating-multiple-html-files, you can handle multi pages with specific chucks or filter chucks.\n. This bug blocks me to use the WDS, but I found a solution from https://github.com/glenjamin/webpack-hot-middleware, the webpack-hot-middleware allows me to use multi compiler instances.\n```\nconst firstConfig = require('./config/first');\nconst secondConfig = require('./config/second');\nlet express = require('express');\nlet middleware = require('webpack-dev-middleware');\nlet app = express();\n// Dev Server\n[firstConfig, secondConfig].forEach(function (config) {\n    let compiler = webpack(config);\n    app.use(middleware(compiler, {\n        publicPath: config.output.publicPath\n    }));\n// Enables HMR\napp.use(webpackHotMiddleware(compiler, {\n    log: console.log, path: config.output.publicPath + '__webpack_hmr', heartbeat: 10 * 1000\n}));\n\n});\nlet server = app.listen(18088);\n```. part of the code:\nserver.js\nconst telcoConfig = require('./config/webpack.dev')({ env: 'development', app: 'telco' });\nconst marketplaceConfig = require('./config/webpack.dev')({ env: 'development', app: 'marketplace' });\nwebpack.dev.js\n```\nconst hotMiddlewareScript = 'webpack-hot-middleware/client?path=__webpack_hmr&timeout=20000&reload=true&dynamicPublicPath=true';\nreturn webpackMerge(commonConfig({ env: ENV, app: app }), {\n\n    entry: {\n\n        'polyfills': ['./src/' + app + '/polyfills.browser.ts', hotMiddlewareScript],\n        'vendor': ['./src/' + app + '/vendor.browser.ts', hotMiddlewareScript],\n        'main': ['./src/' + app + '/main.browser.ts', hotMiddlewareScript]\n\n    },\n\n    devtool: 'cheap-module-source-map',\n\n    output: {\n\n        path: helpers.root('dist/' + app),\n\n        publicPath: '/' + app + '/',\n\n        filename: '[name].bundle.js',\n\n        sourceMapFilename: '[name].map',\n\n        chunkFilename: '[id].chunk.js',\n\n        library: 'ac_[name]',\n        libraryTarget: 'var',\n    },\n\n    plugins: [\n    ],\n\n})\n\n```. ",
    "trsh": "@ywmail where did you put this code? I'm running the code like: webpack-dev-server --config config/webpack.dev.js --progress --profile --watch --content-base src/. Do not see webpack-dev-server at all in last example.\n. @ksonnad that was probably addressed to me. Thanks! Will try tomorrow.\n. @ksonnad what if I have multiple html's by HtmlWebpackPlugin. How can I point from which to start and how to switch? Can you plz drop some ideas!\n. @ksonnad but how does app.use(middleware(webpack( choose the html? Sure it's a start point.\n. @ywmail I understand that. The question is how webpack-dev-server will handle multi pages. Which one will be booted? index.html, test.html... etc. And how can I handle/controll that.\n. ",
    "nikibhatia": "Is it possible we have multiple applications and each applications having separate build using webpack so that we can deploy them individually when needed. .\nPlease anyone give some inputs .how we can do that.?\n. ",
    "VibhaniNikhil": "Any one know, How to manage two react app in single webpack-dev-config file?\n. ",
    "bruno-serfe": "@ksonnad Where exactly should be that configuration to handle multi apps? webpack.common.js? I'm using https://github.com/AngularClass/angular2-webpack-starter/. ",
    "iMoses": "+1\nI used devServer: {hot: true} in the webpack.config file and module.hot in webpack/hot/dev-server equals false which throws an error ([HMR] Hot Module Replacement is disabled.). Tried the CLI option webpack-dev-server --hot and it suddenly works great.\nWould really appreciate a fix. Thanks.\n. Just found that the hard way.\nMy use case is two configs, one for JavaScript and the other for static CSS, each requires a different output and resolves so I am using multi-compiler mode. I would like to be able to run webpack-dev-server simultaneously for both of them, using the same host & port configuration.\nIs anybody working on it or should I take initiative? :). @SpaceK33z \nI pushed a quick fix which does the trick for me. \nLet me know what you think.. ",
    "chemoish": "+1 :+1: \n. @mnpenner https://github.com/MoOx/eslint-loader#emitwarning-default-false\njs\n{\n  enforce: 'pre',\n  exclude: /node_modules/,\n  test: /\\.jsx?$/,\n  use: {\n    loader: 'eslint-loader',\n    options: {\n      emitWarning: true, // @note: only for development\n    },\n  },\n},\n. ",
    "wendellmva": "+1 :+1: \n. ",
    "yieldnow": "Any update on this?\n. ",
    "martin-svk": "+1\n. ",
    "deibeljc": "+1\n. ",
    "chunkai1312": "+1\n. ",
    "mikeys": "+1\n. ",
    "oliverwehn": "+1\n. +1\n. ",
    "LeonFedotov": "@sokra yo yo yo yo :)\n. ",
    "skleinei": "+1\n. ",
    "betolink": "We can manually use the ProgressBarPlugin in the webpack config file and that should do it. \nnpm install --save-dev progress-bar-webpack-plugin\nThe in our development webpack config:\n``` js\nconst ProgressBarPlugin = require('progress-bar-webpack-plugin');\n...\nplugins: plugins.concat([\n  new ProgressBarPlugin({ clear: false })\n])\n```\n. ",
    "feel": "+1\n. ",
    "elmorec": "Simply you can use the webpack ProgressPlugin instead of any other third party plugin.\njavascript\nconfig.plugins.push(new webpack.ProgressPlugin({ profile: false }));\nCheers!\ud83d\ude1c. @alexilyaev Yeah, you are right, thx.. ",
    "PeterShershov": "Yo, any update on this?. ",
    "Stuk": "Thank you for the tool and the merge! \n. ",
    "cdaringe": "hi @sokra, thanks for the great project.  can you add a bit more clarification?  this would be helpful to me as well!  which client reference?  and can you confirm the proper query kv pair?  i assume my client needs to be uri encoded too?  Thanks!\n. ",
    "kentor": "@aaronjensen did you get hot reloading to work? Even with your set up the page always refreshes because it can't find the manifest file. See https://github.com/webpack/webpack-dev-server/issues/262\n. Does this allow changing the domain? It's hard to test in VM where I use 10.0.2.2 instead of localhost to access the dev server asset, but the script still tries to access localhost for the socket.\n. @SimenB where do you specify that? I'm guessing that would solve my issue https://github.com/webpack/webpack-dev-server/issues/262\n. @SimenB That works for connecting to the socket. But what do you specify as the output.publicPath?\n. I don't understand. I followed http://webpack.github.io/docs/configuration.html#output-publicpath, (the warning about the Hot Module Replace Plugin needing to be disabled scares me, if I can't use HMR then what's the point of this?) and created a file called webpack.init.js and in it put\njs\nvar host = window.location.host.split(':')[0];\n__webpack_public_path__ = 'http://' + host + ':45537/';\nand then I modified my entry list to include it:\njs\n entry: [\n    './webpack.init.js',\n    'webpack/hot/only-dev-server',\n    path.join(__dirname, 'src', 'js', 'app.js'),\n  ],\nThat didn't seem to affect anything.\n. Yeah I see the source code says\njs\nfunction hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars\n/******/        if(typeof XMLHttpRequest === \"undefined\")\n/******/            return callback(new Error(\"No browser support\"));\n/******/        try {\n/******/            var request = new XMLHttpRequest();\n/******/            var requestPath = __webpack_require__.p + \"\" + hotCurrentHash + \".hot-update.json\";\nand with my webpack.init.js in the entry file I see in the compiled output\n``` js\n/ 1 /\n/***/ function(module, exports, webpack_require) {\n/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(3), RootInstanceProvider = __webpack_require__(11), ReactMount = __webpack_require__(13), React = __webpack_require__(67); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {\n\n'use strict';\n\nvar host = window.location.host.split(':')[0];\n__webpack_require__.p = 'http://' + host + ':45537/';\n\n```\nSeems like it should work. But __webpack_require__ is a different object in the 1 module than the __webpack_require__ in the hotDownloadManifest function.\n. I think I need to modify __webpack_public_path__ in module 0 instead of any other later module because of this:\njs\n/******/    function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars\n/******/        var me = installedModules[moduleId];\n/******/        if(!me) return __webpack_require__;\n/******/        var fn = function(request) {\nWhatever me is is undefined only the first time we go through this path when moduleId is 0. So.. how do I do that? (Maybe that warning about HMR was right after all?)\n. Thanks @aaronjensen. I think I see why it's working for you but not for me. You are actually accessing the html page served by the dev-server (so same port as the assets) whereas I am only using the dev-server to serve assets and I'm using some other app (and port) to serve the html, so hot reloading would work in your case because the url of the manifest that webpack tries to grab will have the correct port.\n. @aaronjensen Ah ok. I can load webpack-dev-server.js fine. I'm not sure if you're using react-hot-loader, but the thing that's broken for me is when I save a react component module then webpack doesn't use the correct port to get the manifest file. This is what I see when I save a react component file:\n\nIn your case, it would try port 4000 instead of 4001 to grab the manifest file, no?\n. I'm using browserify-hmr now since that allows changing the websocket url at runtime so I'm going to close this. Thanks for the help anyway!\n. I'm using browserify-hmr now since that allows changing the websocket url at runtime so I'm going to close this. Thanks for the help anyway!\n. ",
    "eteeselink": "Note: this was fixed in this PR: https://github.com/webpack/webpack-dev-server/pull/263/files. the latest release on NPM includes this fix. It does exactly what @pwwolf suggested:\n\nIs there any way to make the socket.io relative to whatever URL is in the browser rather than copying the --host value directly?... or just looking at document.location.origin\n\nbut only if the host passed was \"0.0.0.0\".\n. (cc @sokra I therefore believe this issue can be closed)\n. @shellscape First off, thanks for your tremendous work. Maintaining a tool as popular and central as this must be a hard and thankless job.\nI hope to convince you to answer \"yes\" to @pastelsky's question: Would you accept a PR that makes webpack-dev-server ES5 compatible again (either through a prepublish compile step or by hand-editing the code). Thing is, yes, Safari 9 and IE10 are \"officially unsupported\" but at the same time, they did not magically disappear from people's computers.\nI hate IE as much as the next guy, but this change makes it even harder to keep things working there; not easier. If I read things right, I have two options:\n- downgrade to 2.7.1 and hope I'll never need some webpack feature that depends on a newer version\n- dev/debug/etc on IE/Safari without the devserver reload script - not the end of the world tbh, but a fair amount of setup and configuration that I'd rather not touch. Given Webpack's movement toward good low-config defaults (such as v4's new mode field), this feels like the wrong direction.\nI bet I'm not the only Webpack user targeting browsers like IE10 and Safari 9. If Webpack and its devserver are tools meant to make the lives of developers easier, not harder, then wouldn't keeping ES5 compat be a no-brainer?\nI'd be happy to contribute a PR that fixes this, if @pastelsky doesn't beat me to it. Particularly, I can't personally see a big downside to running the injected script through Babel prepublish. But maybe I'm missing something?\nBut I prefer to save the effort if you're on some holy war against old browsers and the devs that wish to support them :-)\nThanks!. ",
    "vaiRk": "Edit: Never mind. My problem seems to be caused by CORS\n. ",
    "daniel-erickson": "This was driving me insane, I have got it working by removing --hot and including \nplugins: [\n    new webpack.HotModuleReplacementPlugin()\n]\nin the webpack.config file. \n. Yeah, can confirm that 1.10.1 fixed it. Thanks!\n. ",
    "smaye81": "I am seeing this issue with 1.11.0 and dev-server 1.10.1.  Had to replace hot: true with:\nplugins: [\nnew webpack.HotModuleReplacementPlugin()\n]\nto get it working\n. ",
    "blade254353074": "@smaye81 \nFixed in same way!\n. ",
    "diegolaciar": "@smaye81 In my case , doing your solution reload the full page, not HMR.. ",
    "dfang": "@smaye81   Thank you, same as webpack-dev-server@^1.16.2. @smaye81   Thank you, same as webpack-dev-server@^1.16.2. ",
    "Kitanga": "can confirm @daniel-erickson and @smaye81 's solution works in webpack 3.4.1 and webpack-dev-server 2.6.1 (reloading not working issue)\n\nI am seeing this issue with 1.11.0 and dev-server 1.10.1. Had to replace hot: true with:\nplugins: [\nnew webpack.HotModuleReplacementPlugin()\n]\nto get it working. \n",
    "colelawrence": "I would consider making a server.emitReload() function available in case the implementation of socketio changes\n. ",
    "kozakl": "Hello, I use react + typescript and when I for example load module without dt.ts definition file I see error in console and reload is prevented...\nSo reloading app when compiler see errors should be optional because IT'S errors usually are not dangerous, but stopping hot reload is really uncomfortable...\n. ",
    "d3lm": "+1\n. ",
    "chrisbateman": "It seems like this is fixed as of webpack-dev-middleware@1.5.0\nhttps://github.com/webpack/webpack-dev-middleware/issues/54\n. ",
    "bluedaniel": "I just started getting this error\n. ",
    "lelandrichardson": "I just figured this out.\nFor me, the problem was my webpack-dev-server was configured to run on both me Server.js file that i'm generating and my bundled files for the client. I had to change my scripts such that i have 2 terminals open, one running webpack-dev-server for the client-side bundles, and another running webpack --watch for the server bundle. Kind of a bummer, but it got rid of the errors...\n. @cgrossde i'm not in a position to get the code back super easily, but the general idea of it was:\n1. I was using webpack to handle builds for BOTH my server-side and client-side code.\n2. webpack-dev-server really only works for client-side bundles (and doesn't really make sense otherwise)\n3. in order to remedy #1 and #2, I had to make sure that my \"dev server\" configuration was separate from my server configuration\n. ",
    "kevinsimper": "Just found out that if you use target: 'atom', that can cause the same problems.\n. You have to post a little more, because it could be a problem with your webpack.config.js :+1: \nCan you perhaps post an example on how to get this problem?\n. @luisrudge It is okay :) Good you solved it!\n. webpack-dev-server does not generate files on disk, but keeps them in memory, can be a bit confusing at start, but that is because it is faster.\nYou need to load the file from the server that webpack-dev-server starts.\n. ",
    "CxRes": "@lelandrichardson I am getting that error as well when paking for node webkit. Could you kindly provide both your webpack.config.js? Thanks. \n. ",
    "joaocunha": "I also get this, and in the most awkward fashion. Here is a simple proof of concept:\nThis works:\n```\nfunction loadIcon() {\n  return require('babel!svg-react!../../svg/Cog.svg?name=Icon');\n}\nvar icon = loadIcon();\n...\n```\nThis doesn't:\n```\nfunction loadIcon(param) {\n  return require(param);\n}\nvar icon = loadIcon('babel!svg-react!../../svg/Cog.svg?name=Icon');\n...\n```\n. ",
    "parker0phil": "There is definitely a problem here and it's even more specific than @joaocunha described.\nGiven:\nfunction load(param) {\n  return require(param);\n}\nSuccess (require directly passing a path with parent reference):\nvar loaded = require('./../someparentfile.json');\nSuccess (require using function param without parent operator):\nvar loaded = load('./somefile.json');\nBreak (require using function param with parent operator):\nvar loaded = load('./../someparentfile.json');\nand reports:\nthe request of a dependency is an expression\nand\nError: Cannot find module './../someparentfile.json').\nUsing: \n\"webpack\": \"1.12.6\",\n\"json-loader\": \"0.5.4\"\n. ",
    "hutber": "Also having the same problems, the file itself is imported perfectly, but I get the warning!\n. Also having the same problems, the file itself is imported perfectly, but I get the warning!\n. ",
    "brandonmp": "Adding to the pile :)\nWorks:\nconst createBlurb = (featureObject) => {\n  return (\n    <div>\n      <img\n        src={require(\"routes/Home/assets/two-people-icon.svg\")}\n      />\n    </div>\n  )\n};\nDoes not work (throws: Critical dependencies: 11-28 the request of a dependency is an expression):\n```\nconst iconPath: \"routes/Home/assets/two-people-icon.svg\";\nconst createBlurb = (featureObject) => {\n  return (\n    \n\n\n  )\n};\n```\nAfter some trial/error, it seems it fails whenever a var is passed to require(). \nI assume this isn't functioning as intended, but I'm a little hazy on require().\nA workaround for my purposes, I was storing icon paths in a separate file and importing them, then creating a series of components. So, if I went into the file w/ icon paths, and changed the icon path string to a require() call, it worked & didn't apparently screw up anything: \n```\nconst iconPath: require(\"routes/Home/assets/two-people-icon.svg\");\nconst createBlurb = (featureObject) => {\n  return (\n    \n\n\n  )\n};\n```\n. ",
    "rubensbiork": "Thanks @brandonmp. Helped a lot!\n. ",
    "ansemjo": "+1 just encoutered this too ...\nIt does seem to work if not the entire argument to require() is built from variables and there is at least some fixed string.\nIm my case something like this works:\njavascript\nprivate requireFn(obj: Object, pathprefix: string = 'assets') {\n  obj[svgpath] = require('../' + pathprefix + '/' + obj[svgpath]);\n  }\n... while this does not:\njavascript\nprivate requireFn(obj: Object, pathprefix: string = '../assets/') {\n  obj[svgpath] = require(pathprefix + obj[svgpath]);\n  }\nRunning an Angular2 project with webpack@1.13.1 and webpack-dev-server@1.14.1.\n. ",
    "sittingbool": "I need require for a variable to be able tun run my code. is there a solution for this? can i somehow suppress the warning?. ",
    "maxcnunes": "@sittingbool Is possible to replace the dynamic requiring with a require.context. This way you make the webpack pre load a context for those files you have to load programatically later.\n```js\nvar req = require.context(\"./templates\", true, /^.\\/.*.jade$/);\nvar tableTemplate = req(\"./table.jade\");\n// tableTemplate === require(\"./templates/table.jade\");\n```\nhttp://webpack.github.io/docs/context.html#context-module-api. ",
    "a2441918": "@lelandrichardson I try to run my index.js using \"node index.js\" and it just works but not when I use webpack.\nI get this weird error.\n\n\n\n\nCould you help me out please? I just run \"npm start\" for now.\n. ",
    "sudhir600": "getting same issue in nuxt application. basically inside a function i wanted to get json data (Don't want to use axios). so my workaround was - \nvar jsonData  = require('../plugins/somedata.json')\nconsole.log(jsonData)\nHowever, i am getting the data but with warning. \neven After spending hours, didn't find proper solution so what i did is that - \nin json file  -\nmodule.exports = {\n    \"users\": {}\n     ...\n}\nand imported this file as import base from '../plugins/base.js'\nthen inside function just calling var a = base;\nHowever Problem has been solved but yet not sure that is it correct way to load any json file?\nPlease guide\nThanks.\n. ",
    "ianor": "@MikaAK Seeing same issue here. Were you able to figure out any kind of work-around?\n. @MikaAK Cool.  I ended up going the other direction and having my express server forward requests to webpack-dev-server. There's a little more set up but it's working well now.  Followed the outline HERE. Good luck and happy coding!\n. ",
    "MikaAK": "@ianor No solution here, it just started working. Though the display from the cli doesn't display that it is working. In my previous tests I would see Forwarding /api/* to localhost:4000 or something simliar, now I've got it working but it doesn't display anything. \n. @watsoncj it actually can. This is from our webpack.config.js\nClosing this issue because specifying from cli is not an option\n```\nvar config = {\n  ...\n  devServer: {\n    proxy: [{\n      path: '/api/*',\n      target: 'http://localhost:3000'\n    }],\nhistoryApiFallback: {\n  rewrites: [{\n    from: /\\/auth.*/,\n    to: '/auth.html'\n  }, {\n    from: /\\/external.*/,\n    to: '/external.html'\n  }, {\n    from: /(\\/school)?.*/,\n    to: '/school.html'\n  }]\n}\n\n}\n}\n``\n. @watsoncj it actually can. This is from ourwebpack.config.js`\nClosing this issue because specifying from cli is not an option\n```\nvar config = {\n  ...\n  devServer: {\n    proxy: [{\n      path: '/api/*',\n      target: 'http://localhost:3000'\n    }],\nhistoryApiFallback: {\n  rewrites: [{\n    from: /\\/auth.*/,\n    to: '/auth.html'\n  }, {\n    from: /\\/external.*/,\n    to: '/external.html'\n  }, {\n    from: /(\\/school)?.*/,\n    to: '/school.html'\n  }]\n}\n\n}\n}\n```\n. An update on this, I found out what was causing this to fail. Turns out if I run on port 3000 i get this error, however using any other port works perfectly fine. My full command to run with this error is this: \nbash\nwebpack-dev-server --content-base='build' --port='3000' --colors --inline --hot --progress --history-api-fallback\n. An update on this, I found out what was causing this to fail. Turns out if I run on port 3000 i get this error, however using any other port works perfectly fine. My full command to run with this error is this: \nbash\nwebpack-dev-server --content-base='build' --port='3000' --colors --inline --hot --progress --history-api-fallback\n. @Authorlove try  \njavascript\nproxy: [{\n      path: `/v1/*`,\n      target: 'http://api.in.uprintf.com'\n}],\n. ",
    "tonytonyjan": "@schovi How do you make Cross-Origin XMLHttpRequest with webpack-dev-server?. @schovi How do you make Cross-Origin XMLHttpRequest with webpack-dev-server?. ",
    "Gabriel0402": "+1\n. ",
    "adamworrall": "@ryancole I'm having the same problem, but changing the HTML script tag to match your example doesn't seem to solve it. Any way you could post your dev server config?\n. @ryancole perfect, thanks!\n. ",
    "chaoyangnz": "+1\n. ",
    "anupambasak": "Use:\ndevServer: {\n    historyApiFallback: {\n      index: '/your-public-path/'\n    }\n  }. ",
    "jashlynn": "Setting the base tag with '/' as href in your index.html fixes it.. ",
    "michaelzoidl": "+1\n. ",
    "frontengineer": "+1\n. ",
    "use-strict": "My original post is still relevant. If you have a look at the webpack-runner tool, inside error-formatter file you will see I did lots of hacky reverse engineering on the webpack errors. I used properties that were available, yet undocumented. While this works, it may break at any time when updating webpack. \nTo summarize:\n1. Normalized errors are something that should be fixed in both webpack and dev server.\n2. Should be able to output to disk as well instead of memory. See https://github.com/use-strict/webpack-dev-server/commit/3f58f6019e17781169372f86797950a09d33b0a4#diff-83c4482ab4d62154c877147880243858\n3. Reporting the errors via HTTP route: https://github.com/use-strict/webpack-dev-server/commit/3f58f6019e17781169372f86797950a09d33b0a4#diff-15fb51940da53816af13330d8ce69b4e\nIf this makes sense, we can split this issue into three separate issues. I don't know why I did everything in a single commit, that was a mistake on my part.\n. > The next release of webpack-dev-middleware will contain a reporter option.\nI'm using the webpack node API. That's the primary concern. dev-server is just a bonus, but I'm thinking a fix for one should also fix the other.\n\nIs this really necessary? Maybe you could use write-file-webpack-plugin for this?\n\nThat plugin could work. I didn't know of its existence. I will test it out.\n\nWould it be possible to hook into the setup option of dev-server and add the route there?\n\nI couldn't find a way to hook into the dev-server from CLI. Much of the options logic is in the CLI entry js file so requiring something directly from dev-server would mean duplicating logic.\n. > The reporter option also works with dev-server. Note that I just released webpack-dev-middleware@1.7.0, which contains this option.\nI mean webpack, not webpack-dev-server node API:\nwebpack(config, (e, stats) => {\n    // process stats.compilation.errors\n});\nCan this reporter option be specified via webpack.config ?\n\nFrom the CLI you can still use the setup option, but it has to be in the webpack config file (devServer.setup). \n\nThanks, I will try and see if it works.\n. > If you want that functionality you'd need to make a PR in the webpack repo.\nWill do that. As far as the dev-server goes, I will check if that reporter functionality works for me. Thanks for the tips.\nMy webpack-runner module is only filling in for the missing reporter functionality in webpack. It's not necessarily for development and it's not using the dev-server. For dev-server integration I had a separate CLI tool that connected to that HTTP route I showed you and redirected output to the console. I didn't publish it because it only worked with a hacked dev-server. If the error hooks work, I will try to adapt it.\n. ",
    "jusefb": "Just had the same issue, once i used ExtractTextPlugin for loading css all worked.\n. Having the same issue here with webpack 2\n. ",
    "inergy": "For those looking for an answer and finding this issue at the top of google :) ... I use the Font Awesome module, and here's what worked for me :\noutput:\npublicPath: '/',\nmodule.rules:\n{\n        test: /.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)$/,\n        loader: 'url-loader?limit=10000',\n      },\nusing the copy-webpack-plugin and the extract-text-webpack-plugin, add this to plugins:\nnew Copy([\n      { from: 'node_modules/font-awesome/fonts', to: 'fonts' },\n      { from: 'node_modules/font-awesome/css/font-awesome.min.css' },\n    ]),\n    new ExtractTextPlugin('style.css'). ",
    "Dindaleon": "oh! What do you suggest me do then?\n. Well sorry then, I am still learning. However, I know this is off topic, but I am able to import redis in my server.js file without any problems, but I cannot import it into any other files as it outputs the error I just mentioned.\nI have looked on google about this but havent been able to find a tutorial or example that talks about this, that could explain what I am doing wrong and what the correct way is.\nThe few tutorials and examples I did find, they import redis into any of their files and it just works. That is why I thought it might be webpack causing this issue.\nIf I install net and hiredis, the errors go away but it outputs a warning that says it could not find the bindings file. I want to avoid having to install these dependencies as I have seen projects not using them while using redis.\nedit: I forgot to include this issue: https://github.com/webpack/webpack-dev-server/issues/60\n. yes, I had no clue. I was still learning about it. Thanks for your help and time.\n. ",
    "shama": "Some modules on npm cannot run in a web browser and some modules cannot run without a web browser. Generally if a module read/writes to a file system (as databases tend to do) or uses APIs native to OSs (such as require('net') or native addons) it will likely not run in a web browser. There is simply no compatible API in the web browser unless the module author has gone out of their way to provide one.\nThink of it like asking, \"Why can't I play Xbox games on my Nintendo?\" Some games are designed to work on both systems, some only Xbox and some only Nintendo.\nSame goes for node modules. Some only work with Node.js v0.12, some only io.js, some only on Chrome, some only on Firefox. Some work everywhere. Most of the time you just need to try it and find out.\n. ",
    "bryanliu-gpsw": "I have the same issue as i am gettin gthis error:\nModule not found: Error: Cannot resolve module 'hiredis' in /code/node_modules/redis/lib/parsers\nFor me the weird thing is that I dont get this error on my local machine but when i pushed this to github and ran on CircleCI, then im getting this error.  \nI'm pretty sure Redis is only on server side code, so im not sure why webpack is running into this issue. Anyone got solution to this?\n. ",
    "claudiordgz": "Hey @bryanliu-gpsw, @Dindaleon. I know it has been a while but have a look here http://jlongster.com/Backend-Apps-with-Webpack--Part-I\nI too use Webpack on the backend for several reasons, by using that configuration I was able to get the best of both worlds.\n. @richburdon I haven't touch this in a while, bear with me, I did it here. I remember we had to do a map of the dependencies manually and pass them to the webpack config. Maybe it stopped working? I'll check it out tomorrow morning. . ",
    "jdelight": "@nickzheng yes exactly - you might be able to get both live reloading working and see the URL changes if you take a look at the instructions here: http://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server\n. ",
    "dennis-b": "HI \nI also ran into a 'node-gyp nightmare', the are no \"straight forward\" way to install node-gyp on windows. for now i using gulp watch for bypass.\ndo you found a solution for this?\nbest regards \ndennis\n. Hi\nI tested it on my environment and it works fine.\nThanks a lot. \n. ",
    "bjrmatos": "in my daily job i use Windows and i agree that node-gyp is a nigthmare on windows, but after follow https://github.com/TooTallNate/node-gyp/#installation i have everything working.\nalso this issue should go in the engine.io repo.. it's not webpack's fault\n. ",
    "seetsy": "I don't use Windows, but unfortunately other team members do so I also feel the pain. We used to run into the node-gyp nightmare every time someone new tries to run their first maven build. \nteam member: \"Hey, the maven build is failing - its complaining something about npm. I have npm installed, what's up?\"\nme: \"Oh right, do you have python and visual studio installed?\" \nteam member: \"Uhhh no... Why would I?\"\nme: \"Ok, just install those and try again.\"\n3 hours later.. \nteam member: \"ok they're installed - it's still failing. now what?\"\nme: sigh... \"ok let me come over and look\"\nDo some googling, read some blogs, try random stuff...\n4-8 hours later... \n\"Success! We got it working finally after wasting an entire day.\"\nteam member: \"Why did we do this again?\"\nme: \"Some javascript packages needed to compile c++\"\nteam member: \"huh?\"\nme: \"don't ask...\"\nteam member gives me a strange/dirty look...\nI now leave all node-gyp dependent packages out of our package.json dev dependency list.\n. ",
    "Himanshuj1088": "Hi Ajar-Ajar, SpaceK33z, \nI have installed web pack server and as per the earlier comments the issue with window is resolved.\nBut still I am unable to run web pack server.\nPlease could you help with it?\n . ",
    "rennen": "I'm a C++ developer, and I agree with Ajar-AJar that it makes no sense.. ",
    "manavsehgal": "This might help. Assuming you want to use react-hot-loader.\nwebpack-dev-server  --host $IP --port $PORT  --hot --inline\nBrowse at https://workspace-user.c9.io/webpack-dev-server/\n. ",
    "mvhenten": "webpack-dev-server --port $PORT --host $IP  --content-base build/\nworks for me\n. ",
    "tsongas": "Hot reloading isn't working for me. My site comes up at https://react-tsongas.c9.io/ however in the browser console I'm getting repeated errors that make it look like hot reload is trying to happen over http rather than https and getting blocked:\nabstract-xhr.js?96d9:128 Mixed Content: The page at 'https://react-tsongas.c9.io/' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://react-tsongas.c9.io:8080/sockjs-node/info?t=1461778636613'. This request has been blocked; the content must be served over HTTPS.\nAny ideas how to solve this? I wonder if it's related to this webpack-dev-server bug? https://community.c9.io/t/mixed-content-with-webpack-dev-server/3053\n. There's an open pull request https://github.com/webpack/webpack-dev-server/pull/470 maybe someone can rattle the chain of the maintainer?\n. Oops I just realized this is a duplicate of PR #470.\n. ",
    "joonhyublee": "As per https://community.c9.io/t/mixed-content-with-webpack-dev-server/3053/4\nyou can go to your node_modules/webpack-dev-server/client/index.js and replace line 62\nprotocol: urlParts.protocol,\nwith\nprotocol: (window.location.protocol == 'https:') ?  'https:' : urlParts.protocol,\nAfter this, you should be able to run dev server with cli, without the --https flag. (I couldn't get it to work with the flag, I get 'ECONNRESET: Request could not be proxied!' and 'There was an error proxying the request.')\nI don't know enough to judge whether this applies to C9 or other https servers in general, and I wonder if anyone should do a pull request on this..?\n. ",
    "emckay": "I was having this problem too on cloud9. After playing around with it for awhile, I got hot reloading on cloud9 to work with webpack-dev-server 1.14.1 without any patches.\nThe key change I made was creating webpack-dev-server/client?https://0.0.0.0:8080 as an entry point.\nRunning webpack-dev-server --host $IP --port $PORT runs my application with hot reloading.\nHere's the full webpack.config.js:\n``` js\nvar webpack = require('webpack');\nconst path = require('path');\nmodule.exports = {\n    \"entry\": [\n        'webpack-dev-server/client?https://0.0.0.0:8080',\n        'webpack/hot/only-dev-server',\n        './app/index.js'\n    ],\n    \"output\": {\n        \"path\": path.join(__dirname, 'build'),\n        \"filename\": \"bundle.js\"\n    },\n    devtool: \"source-map\",\n    \"module\": {\n        \"loaders\": [\n            {\n                \"test\": /.js?$/,\n                \"loader\": 'react-hot!babel-loader',\n                \"exclude\": /node_modules/\n            },\n            {\n                \"test\": /.scss$/,\n                \"loaders\": [\"style\", \"css?sourceMap\", \"sass?sourceMap\"]\n            } \n        ]\n    },\n    devServer: {\n        contentBase: './build',\n        hot: true\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ]\n};\n```\n. For a working example, you can clone this bare-bones react boilerplate repository: https://github.com/eloquently/react-boilerplate .\nnpm install and npm run webpack-dev-server should run the application (master branch is configured for Cloud9).\nChange something in the App component, and you should see the HMR working.\n. For a working example, you can clone this bare-bones react boilerplate repository: https://github.com/eloquently/react-boilerplate .\nnpm install and npm run webpack-dev-server should run the application (master branch is configured for Cloud9).\nChange something in the App component, and you should see the HMR working.\n. Glad you got it working!\n. ",
    "teamgroove": "Can't get it working as described. Works only for me in c9 with patching as mentioned by @joonhyublee \n. Can't get it working as described. Works only for me in c9 with patching as mentioned by @joonhyublee \n. Ok. i will try again tomorrow. i will get back. Thank you.\n. You are right, this configuration works in cloud9 without any mods to: client.js. I'm investigation what the difference actually is.\n. It was completely my fault. I had some overrides in the webpack.config.babel.js for the entry-point, ENV-vars and mcuh more. After fixing my errors - everything runs smoothely. Thanks for the helpful hint!\n. ",
    "AndrewNgKF": "1.In order to get it working, I went into the file that the npm start script calls, \"./node_modules/webpack-dev-server/bin/webpack-dev-server.js\"  \n\n\ngo to node_modules/webpack-dev-server/bin/webpack-dev-server.js file. Line 209, the listen method \n\n\nchange options.host and options.port to process.env.IP and process.env.PORT.  Now u can run it. YAY!\n. 1.In order to get it working, I went into the file that the npm start script calls, \"./node_modules/webpack-dev-server/bin/webpack-dev-server.js\"  \n\n\ngo to node_modules/webpack-dev-server/bin/webpack-dev-server.js file. Line 209, the listen method \n\n\nchange options.host and options.port to process.env.IP and process.env.PORT.  Now u can run it. YAY!\n. \n\n",
    "codersc": "@AndrewNgKF That worked for me thanks a bunch!. @AndrewNgKF That worked for me thanks a bunch!. ",
    "emacreative": "i did all of the things posted here included the last one (modifcation of webpack-dev-server.js) and i cant make work , i got on browser console [WDS] Disconnected! , i will appreciate you help .\nThanks. ",
    "adleviton": "In webpack.config.js:\ndevServer: {\n    historyApiFallback: true,\n    contentBase: './',\n    host: process.env.IP,\n    //https: true,\n    port: process.env.PORT,\n    \"public\": \"your-project.c9users.io\" //no trailing slash\n  }\n. ",
    "pelx": "i did all of the things posted here too... does not work!. i did all of the things posted here too... does not work!. GET http://0.0.0.0:8080/packs/application.js net::ERR_EMPTY_RESPONSE\nIt works on its own but not with Rails server running.\n. GET http://0.0.0.0:8080/packs/application.js net::ERR_EMPTY_RESPONSE\nIt works on its own but not with Rails server running.\n. I have spent many hours trying webpack-dev-server make working with Rails in Cloud 9 .  It didn't  work. I let Rails to serve assets instead. I am still curious. As far as I can see a lot of developers struggling with similar issue. It seems that rails, webpack-dev-server and Cloud 9 limitations (htpps?) impossible to configure to work together. If I use port 8080 for rails and 8081 for webpack-dev-server I get\nhttps://0.0.0.0:8081/packs/application.css net::ERR_EMPTY_RESPONSE\nGET https://0.0.0.0:8081/packs/application.js net::ERR_EMPTY_RESPONSE \nregards\nlaura\n. will it fix this problem?\nMixed Content: The page at 'https://xxxxxxx.c9users.io/' was loaded over HTTPS, but requested an insecure script 'http://xxxxx.c9users.io:3808/webpack/application.js'. This request has been blocked; the content must be served over HTTPS.\nrgds\n. ",
    "nagarajasr": "webpack-dev-server --history-api-fallback --inline --progress --public myproject.c9users.io --host $IP --port $PORT worked for me. webpack-dev-server --history-api-fallback --inline --progress --public myproject.c9users.io --host $IP --port $PORT worked for me. ",
    "ngustavo": "Adding this --host $IP --port $PORT --public $C9_HOSTNAME\nafter this cross-env NODE_ENV=development webpack-dev-server --open --hot\nworks fine for me with hot reloading.. Adding this --host $IP --port $PORT --public $C9_HOSTNAME\nafter this cross-env NODE_ENV=development webpack-dev-server --open --hot\nworks fine for me with hot reloading.. ",
    "x5engine": "webpack-dev-server --public your-project.c9users.io --host $IP --port $PORT  --hot --inline --. webpack-dev-server --public your-project.c9users.io --host $IP --port $PORT  --hot --inline --. ",
    "podenborg": "I struggled for so long until trying @x5engine's suggestions.\nTHANK YOU! I finally got it to work.. ",
    "nlutterman": "I've noticed that when I manually add the tag and script:\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\nThe HMR gets activated, but does not update the page accordingly.  So does that meant that the dev-server isn't adding the script to the page?\n. I've noticed that when I manually add the tag and script:\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\nThe HMR gets activated, but does not update the page accordingly.  So does that meant that the dev-server isn't adding the script to the page?\n. Aha!\nI figured it out.  There was a comment about it on the page that notes how to use webpack-dev-server, but I managed to read over it.\nIf you look in my config you'll see:\n...\noutput: {\n    path: path.resolve(public_dir, \"js\"),\n    filename: \"app.js\",\n    **publicPath: \"/\"**\n},\n...\nI misinterpreted the publicPath key and its path.\nHowever, the example given in the docs shows:\nmodule.exports = {\n  entry: {\n    app: [\"./app/main.js\"]\n  },\n  output: {\n    path: \"./build\",\n    publicPath: \"/assets/\",\n    filename: \"bundle.js\"\n  }\n};\nAnd states:\n\nThis modified bundle is served from memory at the relative path specified in publicPath (see API). It will not be written to your configured output directory. _Where a bundle already exists at the same url path the bundle in memory will take precedence._\n\nHowever, for this example, this bundle will be served from /, not /assets/ because further down, the content base is given as build/.   There's nothing that notes that the directory where the scripts lie is possibly aliased to /assets/ at all, so that's why I placed the / path as the publicPath instead of the subdirectory my JS was actually being served from..\nThe docs note that:\n\nTo teach webpack to make requests (for chunk loading or HMR) to the webpack-dev-server you need to provide a full URL in the output.publicPath option.\n\nSo I changed:\npublicPath: \"/\"\nto:\npublicPath: \"http://localhost:8080/js/\"\nAnd now my files are being served up correctly.  I added the /js/ because that's where I my JavaScript is served from on the actual server.\nIt's not obvious, and the docs are just a little bit misleading.  So that fixes it.  Sorry for the long comment, I just wanted to explain it thoroughly.\n. Aha!\nI figured it out.  There was a comment about it on the page that notes how to use webpack-dev-server, but I managed to read over it.\nIf you look in my config you'll see:\n...\noutput: {\n    path: path.resolve(public_dir, \"js\"),\n    filename: \"app.js\",\n    **publicPath: \"/\"**\n},\n...\nI misinterpreted the publicPath key and its path.\nHowever, the example given in the docs shows:\nmodule.exports = {\n  entry: {\n    app: [\"./app/main.js\"]\n  },\n  output: {\n    path: \"./build\",\n    publicPath: \"/assets/\",\n    filename: \"bundle.js\"\n  }\n};\nAnd states:\n\nThis modified bundle is served from memory at the relative path specified in publicPath (see API). It will not be written to your configured output directory. _Where a bundle already exists at the same url path the bundle in memory will take precedence._\n\nHowever, for this example, this bundle will be served from /, not /assets/ because further down, the content base is given as build/.   There's nothing that notes that the directory where the scripts lie is possibly aliased to /assets/ at all, so that's why I placed the / path as the publicPath instead of the subdirectory my JS was actually being served from..\nThe docs note that:\n\nTo teach webpack to make requests (for chunk loading or HMR) to the webpack-dev-server you need to provide a full URL in the output.publicPath option.\n\nSo I changed:\npublicPath: \"/\"\nto:\npublicPath: \"http://localhost:8080/js/\"\nAnd now my files are being served up correctly.  I added the /js/ because that's where I my JavaScript is served from on the actual server.\nIt's not obvious, and the docs are just a little bit misleading.  So that fixes it.  Sorry for the long comment, I just wanted to explain it thoroughly.\n. ",
    "wolfeidau": "I have removed the default and as suggested defaulted the host value inline.\nI also rebased this to the latest version.\nCheers\n. Updated as specified.\nCheers\n. ",
    "chollier": "I'd love to see that merged\n. ",
    "zerkms": "Guys, any plans to merge this or introduce the public ip:port parameter with some other solution?\n. ",
    "jeffreybrowning": "+1\n. +1\n. ",
    "patrickhousley": "When can we expect a build with this code in it?\n. ",
    "timkrins": "For my own development workflow, as I am only ever going to be serving on the root of a local network IP or localhost, I changed my index.js to say\nio = io.connect(window.location.host);\nWorks for me, but obviously not elegant\n. Yes, fantastic! Works nicely. Somewhat related to #239\n. ",
    "jeremejevs": "I don't remember what it was supposed to be, never committed it, sorry. Just removed ?/ and it seems to be still working, so there's that.\n. This definitely needs to be addressed.\nFor example, look at the official docs on React + HMR and the react-hot-boilerplate: both load the WDS client twice. This means that even those intimate with Webpack don't have full understanding of the difference between CLI and Node API.\nAlso, speaking of config differences, I can see people starting out with CLI and then switching to programmatic use, doing something like new WebpackDevServer(compiler, webpackConfig.devServer), and then not understanding why the client isn't being inlined. Or vice versa, going to CLI and not understanding why the client is being inlined twice (or not even noticing it).. This definitely needs to be addressed.\nFor example, look at the official docs on React + HMR and the react-hot-boilerplate: both load the WDS client twice. This means that even those intimate with Webpack don't have full understanding of the difference between CLI and Node API.\nAlso, speaking of config differences, I can see people starting out with CLI and then switching to programmatic use, doing something like new WebpackDevServer(compiler, webpackConfig.devServer), and then not understanding why the client isn't being inlined. Or vice versa, going to CLI and not understanding why the client is being inlined twice (or not even noticing it).. But why close, if it's not a \"won't fix\"? I don't see how being old/inactive makes this issue obsolete, unless it isn't valid anymore. This isn't even a feature request, it's more of a report of bad UX.\nThere are good-enough workarounds, and HMR is non-essential for us, so I can't justify spending any billed time on addressing this, I'm afraid. However, this kind of fits up-for-grabs / first-timers-only.. I understand why this is low priority, but not why it needs to be closed. How is this policy justified in other projects, like NPM? Why do labels not suffice? Isn't \"closed\" a pretty much universal sign for \"solved\" or \"considered and declined\"?. @michael-ciniawsky \n\nIt's original author abandoned webpack-serve\n\nSource? His latest commit suggests otherwise. The tone also implies conflict, what happened?. ",
    "mingfang": "can we get port to be like this?\nport: urlParts.port ? urlParts.port : window.location.port\n. ",
    "framerate": "Confirming I see this exact behavior!\n. ",
    "dlong500": "Is this fixed now that Nodejs 4.0 (based on iojs) is released?\n. Anyone have updates on this?  I'd like to update to the latest version but the problem is still present with v1.12.0\n. Anyone have updates on this?  I'd like to update to the latest version but the problem is still present with v1.12.0\n. Well, after doing some searching I tried adding the following to the config:\nheaders: { \"Access-Control-Allow-Origin\": \"http://localhost:4000\", \"Access-Control-Allow-Credentials\": \"true\" }\nI'm not getting errors anymore so I think things are working.  However, I'm a bit perplexed as to what changed after v1.10.1 because I did not have errors before without that headers parameter.\n. Well, after doing some searching I tried adding the following to the config:\nheaders: { \"Access-Control-Allow-Origin\": \"http://localhost:4000\", \"Access-Control-Allow-Credentials\": \"true\" }\nI'm not getting errors anymore so I think things are working.  However, I'm a bit perplexed as to what changed after v1.10.1 because I did not have errors before without that headers parameter.\n. @bennidi Do you have the headers parameter set in your dev-server config like I mentioned above?  That solved the issue for me and everything is working with the latest versions of Node and webpack-dev-server.  I don't know why things changed between versions but adding that fixed it for me.\n. @tonyqian66 To be honest, it's been a while since I used this configuration because I switched to invoking webpack middleware in the main server file using hapi-webpack-plugin (I currently use hapi as my main server, but there are also webpack middleware plugins for express).  Doing it that way really simplifies the whole webpack-dev-server implementation in my experience.\nWhat I was previously doing was invoking webpack-dev-server from a gulp task.\nSo, for example, if I required webpack-dev-server in the gulpfile like so:\njavascript\nvar WebpackDevServer = require('webpack-dev-server');\nThen I might have a task configured like this:\njavascript\ngulp.task('webpack-watch', function(done) {\n  new WebpackDevServer(webpack(frontendConfig), {\n    publicPath: \"http://localhost:3000/public/build/js/\",\n    headers: { \"Access-Control-Allow-Origin\": \"http://localhost:4000\", \"Access-Control-Allow-Credentials\": \"true\" },\n    hot: true,\n    stats: outputOptions\n  }).listen(3000, 'localhost', function (err, result) {\n    if(err) {\n      console.log(err);\n    }\n    else {\n      console.log('webpack dev server listening at localhost:3000');\n    }\n  });\n});\n. ",
    "eugene1g": "webpack-dev-server relies on socket.io, and socket.io currently cannot be compiled on Nodejs4. However, the patch has been applied to socket.io (https://github.com/socketio/socket.io/commit/210e6887327e6afed4761940fae405b8e784e8e1) and now webpack awaits for them to cut a new release. A lot of other projects are in the same boat, so it's likely to happen very soon.\n. webpack-dev-server depends on two socket.io packages that have just been patched to work on iojs3 or node4. They haven't cut new releases yet, but you can change the webpack-dev-server package.json file to use the patched versions directly like so \n\"socket.io\": \"socketio/socket.io#210e68\",\n    \"socket.io-client\": \"socketio/socket.io-client#4c22f3\",\nOf course this hack isn't a lasting solution and can't be done in production, but for now it's a simple workaround to get the dev-server stuff working again in your dev environment.\n. webpack-dev-server depends on two socket.io packages that have just been patched to work on iojs3 or node4. They haven't cut new releases yet, but you can change the webpack-dev-server package.json file to use the patched versions directly like so \n\"socket.io\": \"socketio/socket.io#210e68\",\n    \"socket.io-client\": \"socketio/socket.io-client#4c22f3\",\nOf course this hack isn't a lasting solution and can't be done in production, but for now it's a simple workaround to get the dev-server stuff working again in your dev environment.\n. ",
    "lucasterra": "@dlong500 no.\n. ",
    "jdhiro": "@SpaceK33z I've confirmed that it works now.\n. @SpaceK33z I've confirmed that it works now.\n. ",
    "w0rm": "Never mind, I decided to not use webpack dev server, because I don't need hmr feature.\n. ",
    "ivan-kleshnin": "Can you provide some links to consider?\n. Same problem with webpack-dev-server 1.14.0. \nSockJS still didn't not release update 0.3.16 which should fix the root cause of this error.\n. ",
    "sbergotts": "I think it would be a good thing to have because it would allow tool makers to plug a custom logger on emitted stats. Right now that is not possible.. ",
    "eranimo": ":+1: Is this project still being maintained?\n. ",
    "TheLarkInn": "Fixed\n. @matthewdenobrega could you please check and see if you can resolve conflicts on your side first? \n. @matthewdenobrega could you please check and see if you can resolve conflicts on your side first? \n. This doesn't appear to be webpack-dev-server related. \n. Dupe #541 \n. LGTM!\n. Going to add some priority to this. . \ud83d\udc4d\ud83d\udc4c. This would default to CJS module output no? If so, should we be switching this to \"modules\":false? . ",
    "cbelhaffef": "Hi, \nnothing changed.\n. ",
    "pavel06081991": "@SpaceK33z, have the same issue, \"webpack-dev-server\": \"^2.4.2\", the server is alive even after calling stop() method. Do you have any idea why it happens?. @SpaceK33z, how to pass open option when webpack-dev-server is used as module? (https://github.com/webpack/docs/wiki/webpack-dev-server#api). ",
    "pkearney13": "Same here... ",
    "whiteinge": "Rebased and resolved conflicts on top of the 'features' changes in 931bbaf.\n. ",
    "tedpennings": "Thank you for the merge @sokra! I'd love to see a new release when you have the time to push it :joy_cat: \nThank you for all of your time on this project. WDS and hot loading been super helpful for my development workflow :heart: \n. ",
    "josh18": "Just in case anyone is interested this is what I ended up doing:\n1. Removed publicPath: '/js/' from my gulpfile\n2. Added conditional html to my backend so that it only changes the script path if it is loaded from the port that the webpack dev server is running from. Something like\nif (environment === development && port === 9090) {\n    <script src=\"/scripts.js\"></script>\n    <script src=\"/webpack-dev-server.js\"></script>\nelse {\n    <script src=\"js/scripts.js\" async></script>\n}\n. @AllenZeng If I remember correctly this doesn't help because then it can't find bundle.js which is inside the js directory which is why publicPath: '/js/' is necessary.\n. @AllenZeng If I remember correctly this doesn't help because then it can't find bundle.js which is inside the js directory which is why publicPath: '/js/' is necessary.\n. I also was having this issue until I found what it was via trial and error. But this is the error message I was getting:\n.../node_modules/webpack-dev-server/lib/Server.js:25\nthrow new OptionsValidationError(validationErrors);\n^\nAny idea what I am doing different?\nnode v7.1.0 npm v3.10.8\n. I'm just trying to figure out why you got an actual error message but I just got throw new OptionsValidationError(validationErrors);? It looks like it failed on \"throw\"? Might have nothing to do with WDS though so I'll do some research and see what I can find.\n. By the way the error doesn't get thrown properly in Node v7 for some reason (it might well be Nodes fault). It only shows the stack trace and not the message. It works fine on Node v6 or if you put this line at the bottom of the function.. By the way the error doesn't get thrown properly in Node v7 for some reason (it might well be Nodes fault). It only shows the stack trace and not the message. It works fine on Node v6 or if you put this line at the bottom of the function.. Ah ok, good to know.. Ah ok, good to know.. Oh nice, thanks. I had a quick look at the v3 branch but couldn't figure out how it was fixed. I think I'll leave it for now as it is not that big of an issue especially if it is solved in v3.\nShould I close this issue?. ",
    "pklicnik": "+1 would love to see this fixed. I had to resort to some ugly workarounds to get HMR working\n. ",
    "AllenZeng": "@tj @pklicnik in this issues https://github.com/gaearon/react-hot-loader/issues/194 @seburgi suggest adding \" publicPath: '/' \" to output section, so it looks like this:\nbash\noutput: {\n    path: yours,\n    filename: 'bundle.js',\n    publicPath: '/',\n},\nThat help me fixed the problem.\n. ",
    "raffomania": "Additionally, it would be nice if the HMR used the host and port specified via the --public option. With multiple docker containers, HMR doesn't work at the moment.\n. ",
    "max-l": "I tried all the solutions above, and the only one that worked is the one suggested by @josh18 \n```\nif (environment === development && port === 9090) {\n    \n\nelse {\n    \n}\n```\nit would be nice to not have to do this...\nthe problem is exactly as described by @josh18 \n. ",
    "mstaicu": "I've had the same issue and I managed to solve it by adding the output.publicPath property with the '/' value. From reading this thread, people were saying that it wouldn't work for nested bundle.js files, but for me it works. My bundled Javascript file is located under /public/js/bundle.js*. I also believe the order of the required files in the entry array is important.\nServed folder structure looks like this:\n\n/public/\n/js/\n/bundle.js\n\n\n/css/\n\nDependencies:\n webpack@2.6.1\n react-hot-loader@3.0.0 \n* webpack-dev-server@2.4.5\nWebpack config:\n```javascript\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst webpack = require('webpack');\nconst join = require('path').join;\nconst context = join(__dirname, 'src');\nmodule.exports = {\n  context,\n  entry: [\n    'react-hot-loader/patch',\n    './index.js',\n  ],\n  output: {\n    path: join(__dirname, '/public'),\n    filename: 'js/bundle.js',\n    publicPath: '/public/',\n  },\n  devServer: {\n    hot: true,\n    publicPath: '/public/'\n  },\n  resolve: {\n    extensions: ['.js'],\n  },\n  stats: {\n    colors: true,\n    reasons: true,\n    chunks: true,\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin(),\n  ],\n};\n```\n.babelrc\njavascript\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"browsers\": [\"last 2 versions\", \"safari >= 7\"],\n      },\n      \"loose\": true,\n      \"modules\": false,\n    }],\n    \"react\"\n  ],\n  \"plugins\": [\n    \"react-hot-loader/babel\",\n  ],\n}\nindex.js\n```javascript\nimport React from 'react';\nimport { render } from 'react-dom';\nimport App from './components/App';\nfunction renderComponent() {\n  render(, document.getElementById('app'));\n}\nrenderComponent();\nif (module.hot) {\n  module.hot.accept('./components/App', function() {\n    renderComponent();\n  });\n}\n```. ",
    "AndreKR": "@SpaceK33z Would you mind reopening this issue?\nMy application already uses __webpack_public_path__ to find assets in non-dev-server mode. In dev-server mode it interferes with finding the *.hot-update.js files, so I have to maintain two completely separate path configurations for normal builds and for dev-server builds.\nIf we could have a separate option like\njavascript\ndevServer: {\n  hotReloadPath: '' // or '../' depending on whether it is relative to __webpack_public_path__\n}\nor\njavascript\ndevServer: {\n  hotReloadPath: 'http://localhost:8080/'\n}\nit would simplify path configurations a lot.. ",
    "yodairish": "Have a same error, I just installed iojs v3.3.0 and now when I try to run webpack-dev-server I always have an error: Segmentation fault: 11\nwithout webpack-dev-server no problems\n. ",
    "geekyme": "@sokra any thoughts? With node 4.0 around the corner i don't want webpack-dev-server to be the one holding everyone back. \n. npm rebuild works for me. Thanks for the tip!! confirmed on v4.0.0\n. ",
    "fraserxu": "+1\n. or npm rebuild?\n. :+1: \n. ",
    "connor11528": "+1 for npm rebuild\n. Kind of sketch because when I downgrade npm gives a notification that there is a high severity vulnerability\n```\nnpm WARN webpack-dev-server@3.0.0 requires a peer of webpack@^4.0.0-beta.1 but none is installed. You must install peer dependencies yourself.\nadded 910 packages from 590 contributors and audited 9040 packages in 16.697s\nfound 1 high severity vulnerability\n  run npm audit fix to fix them, or npm audit for details\n```\nDowngrading version does fix this with vue-cli. ",
    "FrankFan": "+1 for  npm rebuild\n. ",
    "ctindel": "I went ahead and added the code for such a change here:\nhttps://github.com/webpack/webpack-dev-server/pull/255/files\nI wasn't sure how to update the documentation, is that in a different repo somewhere?\n. Yeah I'm not sure why it's pending, I'd have to resolve the conflicts that arose since then but only if he's interested in merging the PR in.\n. https://github.com/sokra\n. @SpaceK33z can you elaborate a bit more on what you mean by \"assets outside of webpack\" ?  I mean, why provide any option for serving static assets since they can all be served by middleware or a webserver?  Thanks.\n. ",
    "maiopirata": "It seams a good idea for me..\nI would also appreciate a way to set static path like in express.\n. It seams a good idea for me..\nI would also appreciate a way to set static path like in express.\n. ",
    "Mathieuu": "I just saw #1389. It seems that it is a problem of splitting point on my side, and is not related to the web-server. Closing that one then.\n. ",
    "datoulei": "I have same error but it can't work\n. ",
    "lapanoid": "Confirm this\n. Thanks! This works\n. ",
    "joewood": "I see the same error on a clean install of node.js 4. I see the above errors but webpack-dev-server works anyway. Looks like an indirect dependency on Nan is causing an issue ( see here https://github.com/nodejs/node/issues/2798). \nA quick analysis, it looks like Socket.io -> engine.io -> ws -> bufferutil -> nan dependency. The issue being socket.io is waiting on this ticket: https://github.com/socketio/socket.io/issues/2228\nFrom the comments in that thread it looks like an npm update is imminent. Can this ticket be reopened?\n. The problem with socketio has been resolved: https://github.com/socketio/socket.io/issues/2228\nThe change was picked up automatically by webpack-dev-server and it installation works fine on node.js 4.\n. I'm seeing this also. Just since the latest Chrome. Spins a few times \"recompiling\" and eventually settles down.. I'm seeing this also. Just since the latest Chrome. Spins a few times \"recompiling\" and eventually settles down.. I think I resolved this because I was using - - watch on the command line, but also using a watch plug-in. I dropped the command argument. . ",
    "alexprice1": "I got it figured out. I moved my dev-server stuff in an array, and then in my html including the dev-bundle.js:\nwebpack.config.js:\nentry: {\n    dev: [\n      'webpack-dev-server/client?http://localhost:3000',\n      \"webpack/hot/dev-server\",\n    ],\n    oil: \"./private/js/index.jsx\",\n    another: \"./index.jsx\"\n  },\nindex.html:\n```\n<!doctype html>\n\n\n\n\n\n\n\n\n\n\n```\n. ",
    "andresmrm": "Getting segmentation fault (core dumped)  webpack-dev-server with nodejs 4.0.\nDowngraded to nodejs 0.12.7 and it's working again.\n. ",
    "razagill": "I'm getting the same error after updating to node 4.0. Also tried npm rebuild but still the same.\n. Deleted the ~/.node-gyp folder and then did a npm rebuild again which has seemed to work for now. Although I still errors upon installing webpack-dev-server. Same as #258 \n. ",
    "CrocoDillon": "Seems like socket.io is still not updated for Node 4 though, which is sad. Anyway tagging along to get notified when this is fixed.\n. ",
    "mattgi": "Need a socket.io fork that also points its dependency of socket.io-client to what you have provided @eugene1g.\nSo it needs to be:\n\"socket.io\": \"socketio/socket.io#f5b753\",\n\"socket.io-client\": \"socketio/socket.io-client#4c22f3\",\nf5b753 being a later commit.\n. ",
    "chemzqm": "Build errors still exist, but only raise on optional deps [https://github.com/BrowserSync/browser-sync/issues/820]. Looks like no impact on daily usage, just ignore them would be fine.\n. The append middleware would not be triggered as the response already send.\nAccording to this [https://github.com/webpack/webpack-dev-server/commit/6e0e95c5f07751546f1e1db439c68e81be0624ae] commit, you can prepend middlewares like this:\njs\nvar server = new WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  setup: function(app) {\n    app.use(function(req, res, next) {\n      console.log('Middleware triggered');\n      next();\n    });\n  },\n  stats: {\n    colors: true\n  }\n});\nassign the setup option with a function.\n. works fine with --inline option added to webpack-dev-server\n. @SpaceK33z Yep, it's working.\n. ",
    "mkristo": "I'm having the same problem, though my setup is a bit different from what @kentor was using. \nI'm using Cordova and serving my HTML file directly from the file system and requests JS from the devserver. By specifying the host to the devservers IP I managed to get the polling working. But when downloading the manifest it tries to download the JSON from the Android device:\nfile:///android_asset/www/5d9b9c8a0afa9f1bb843.hot-update.json\nIt would be really nice if this could be solved somehow. Hot reloading when working with mobile devices would be really neat.\nThanks!\n. ",
    "gavinwilliams": "I have the same problem here, I'm using Symfony as a front end and webpack to serve assets.\n. ",
    "AlexKvazos": "Has anyone found a solution for this? I am also having this issue where webpack is only serving static files and the application is being served by node/python/ruby etc...\n. ",
    "mareklaco": "Had same issue and was able to get over it using this advice from https://github.com/gaearon/react-hot-loader/blob/master/docs/Troubleshooting.md\n\n404 errors for hot-update.json files\nThis config variable must also match publicPath option specified when creating WebpackDevServer instance.\n\nAlso, note the CORS headers webpack-dev-server config.\n```\n  headers: {\n    \"Access-Control-Allow-Origin\": \"*\",\n  }\n```\n. ",
    "nathanmarks": "Try this: \njs\n  output: {\n    path: path.resolve(ROOT_PATH, 'public/assets'),\n    publicPath: `http://0.0.0.0:${DEV_SERVER_PORT}/assets/`,\n    filename: '[name].js',\n  },\n. Try this: \njs\n  output: {\n    path: path.resolve(ROOT_PATH, 'public/assets'),\n    publicPath: `http://0.0.0.0:${DEV_SERVER_PORT}/assets/`,\n    filename: '[name].js',\n  },\n. @alexkuz ^^^ the above works while running alongside a rails app served separately \n. @alexkuz ^^^ the above works while running alongside a rails app served separately \n. I had 135% CPU with Node v6.3 -- reinstalling node_modules helped a TON. Thanks @JeffAMcGee\n. ",
    "alexkuz": "@nathanmarks thank you for reference, but I think this is another case.\nWhat I need is to hot-reload proxy target, like this:\njs\ndevServer: {\n  proxy: {\n    '/api/*': {\n      target: config.proxyBaseUrl, // this should be reloadable\n      secure: false,\n      changeOrigin: true,\n      alterProxyOptions: true\n    }\n  }\n}\nIf I get it right, the above is not related to this.\n. @nathanmarks thank you for reference, but I think this is another case.\nWhat I need is to hot-reload proxy target, like this:\njs\ndevServer: {\n  proxy: {\n    '/api/*': {\n      target: config.proxyBaseUrl, // this should be reloadable\n      secure: false,\n      changeOrigin: true,\n      alterProxyOptions: true\n    }\n  }\n}\nIf I get it right, the above is not related to this.\n. ",
    "thasmo": "In my case (for browser-sync) I had to use publicPath: 'http://localhost:3000/assets/'.. ",
    "chriscant": "For Cordova the app runs at file:///android_asset/www/ in Android and at something like this in iOS: /var/containers/Bundle/Applications/XXXX/AppNameapp/www/\nIn the webpack config I have output publicPath: '' ie empty. This means that the generated CSS files don't have an awkward path prefix.  There are various generated files referred to in the CSS which must be moved into the css directory at the end of the build.\nFinally in the entry JS file I have something like this:\nvar root = location.pathname.substring(0, location.pathname.lastIndexOf('/') + 1);\n_webpack_public_path__ = root;.\n",
    "bholloway": "+1\n. ",
    "pmq20": "Adding to the list: nodejs/node#2798.\n. @SimenB How would a computer without access to the internet download from npm then?\n. ",
    "gitim": "socket.io 1.3.7 released with node 4 support, webpack-dev-server now works fine, think this pr can be closed\n. ",
    "noxan": "may fix this issue, but would reopen #191 - might be better to just wait for an fixed socket.io version.\n. ",
    "everett1992": "Is there any documentation that should be updated? I can take care of it if you point me to the repos.\nWhat's the release schedule for this project like?\n. Is there any documentation that should be updated? I can take care of it if you point me to the repos.\nWhat's the release schedule for this project like?\n. Cool, I'll update the docs once I this change is published to npm\n. Cool, I'll update the docs once I this change is published to npm\n. ",
    "Sinewyk": "The app does get notified of an error. It just doesn't reload once for nothing anymore. And after you fix your mistake the hot reloading picks up again and reload correctly.\nI'm using react-hot-loader + webpack/hot/dev-server and so it reloads when it needs to reload (if I touch something not hot compatible) and hot-reload when it can (right now when editing React stuff only).\nBut yeah, please confirm if it breaks stuff. Using webpack/hot/dev-server it didn't, not sure about webpack/hot/only-dev-server.\n. The app does get notified of an error. It just doesn't reload once for nothing anymore. And after you fix your mistake the hot reloading picks up again and reload correctly.\nI'm using react-hot-loader + webpack/hot/dev-server and so it reloads when it needs to reload (if I touch something not hot compatible) and hot-reload when it can (right now when editing React stuff only).\nBut yeah, please confirm if it breaks stuff. Using webpack/hot/dev-server it didn't, not sure about webpack/hot/only-dev-server.\n. ",
    "bennidi": "I am seeing the same warnings. It also breaks hot module replacement and connection with browsersync. Downgrade to older version of webpack-dev-server did not help. I am running on iojs 2.3.4\nwebpack: 1.12.2\nwebpack-dev-server: 1.10.1\nwebpack-streams: 2.1.1\nInterestingly I just noticed that this problem only exists with chrome: Version 45.0.2454.101 Ubuntu 15.04 (64-bit)\nFirefox continued to work fine. I did a system update yesterday, then an npm install today and mixed that with some structural refactorings of my build....(good idea?!) Sudddenly all those warnings. Freaked my out quite a bit.\n. @dlong500 Yes, I tried the header parameter. It didn't work for me.\n. ",
    "yunsong0922": "@dlong500 I tried the header parameter. It also does not work for me. So I set the webpack-dev-server back to 1.10.1 as you recommended. Thanks very much.\n. ",
    "tonyqian66": "@dlong500, could you please tell me which configuration file you added and where.\nheaders: { \"Access-Control-Allow-Origin\": \"http://localhost:4000\", \"Access-Control-Allow-Credentials\": \"true\" }\nThanks,\n. Davison,\nReally appreciate your prompt reply.\nTony\n\nFrom: Davison Long notifications@github.com\nSent: Thursday, June 23, 2016 5:03 PM\nTo: webpack/webpack-dev-server\nCc: tonyqian66; Mention\nSubject: Re: [webpack/webpack-dev-server] CORS Access-Control-Allow-Origin problem with v1.11.0 (#277)\n@tonyqian66https://github.com/tonyqian66 To be honest, it's been a while since I used this configuration because I switched to invoking webpack middleware in the main server file using hapi-webpack-plugin (I currently use hapi as my main server, but there are also webpack middleware plugins for express). Doing it that way really simplifies the whole webpack-dev-server implementation in my experience.\nWhat I was previously doing was invoking webpack-dev-server from a gulp task.\nSo, for example, if I required webpack-dev-server in the gulpfile like so:\nvar WebpackDevServer = require('webpack-dev-server');\nThen I might have a task configured like this:\ngulp.task('webpack-watch', function(done) {\n  new WebpackDevServer(webpack(frontendConfig), {\n    publicPath: \"http://localhost:3000/public/build/js/\",\n    headers: { \"Access-Control-Allow-Origin\": \"http://localhost:4000\", \"Access-Control-Allow-Credentials\": \"true\" },\n    hot: true,\n    stats: outputOptions\n  }).listen(3000, 'localhost', function (err, result) {\n    if(err) {\n      console.log(err);\n    }\n    else {\n      console.log('webpack dev server listening at localhost:3000');\n    }\n  });\n});\n\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/webpack/webpack-dev-server/issues/277#issuecomment-228183029, or mute the threadhttps://github.com/notifications/unsubscribe/ATLx3pkdD3kmtNBIE9ripbbsgc8qzH6Zks5qOvSUgaJpZM4GBhvJ.\n. ",
    "mcrawshaw": "+1\n. ",
    "krtr": "+1\n. ",
    "valerybugakov": "+1\nMaybe there's an option to show logs with successfully builded chunks despite --no-info option provided?\nJust: webpack: bundle is now VALID.\n. +1\nMaybe there's an option to show logs with successfully builded chunks despite --no-info option provided?\nJust: webpack: bundle is now VALID.\n. ",
    "FiNGAHOLiC": "+1\n. ",
    "nanwangjkl": "OK, i figure it my self. My html is actually using a bundle I previously built with a not-hot webpack.config.js. \n. OK, i figure it my self. My html is actually using a bundle I previously built with a not-hot webpack.config.js. \n. ",
    "chandanjawale": "@nanwangjkl , Can you please tell? Which changes you did to solve this?\nI'm also facing the same issue. I tried to solve it in a various ways but no luck.. ",
    "enheit": "I had the same issue when I build my project in production. The problem was in entry point of webpack config.   \nThe part of code which produce the error:\n// webpack.config.js\nentry: [\n    'react-hot-loader/patch',\n    'webpack-hot-middleware/client',\n    './client/client.jsx',\n  ]\nShould be fixed like this\n// webpack.config.js\nentry: './client/client.jsx'. ",
    "govorov": "Seems like the changelog is gone again.. ",
    "sontek": "ChangeLog is definitely gone again.. A workaround I found was listening on a socket instead of a port, that way the port doesn't get appended.  Not my preferred route but it does work.. ",
    "Jarema": ":+1:  Lack of websocket proxy support makes using dev-server with \"real\" backend servers that are based on ws impossible. \n. ",
    "readme42": ":+1: \n. ",
    "andreasvoigt": ":+1: \n. ",
    "thomasboyt": "Looks to me that the issue with either of the suggested code snippets is that app.all(path, cb) in express doesn't fire for websocket connections, since express only listens for traditional HTTP(S) connections.\nThere are various middleware modules out there that try to solve this issue, such as express-ws, but I've had trouble getting them to work (possibly because the webpack-dev-server SockJS server is interfering?).\n. Hacked together a quick solution, can turn into a PR if it seems like the right route: https://github.com/thomasboyt/webpack-dev-server/commit/f2fceae96952f4d24012c747924b55cbaba06f3c\n. Ah, this is interesting.\nAs far as I could tell, with my client using raw websockets, webpack-dev-server didn't seem to be even handling the proxied websocket connection. I suspect that either something about SockJS or socket.io's additions over regular websockets may allow them to work where regular websockets aren't (e.g. making HTTP connections that the express server is properly handling), or I'm just doing something entirely wrong in my proxy setup. I'll set up a test case and see what I can figure out :)\n. ",
    "mjrussell": "I am using raw websockets as well and can confirm that the upgrade request is not being honored in webpack-dev-server@1.14.0. However I pulled down @thomasboyt's commit and it works perfectly now\n:+1: for getting that PR in\n. Anyway to get some movement on this? @jedwards1211 @sokra? \nWhat do we need to do in order to get this into webpack-dev-server?\n. @chimurai thanks, I can take your PR for a test run at some point and let you know\n. @chimurai thanks for pointing that out. It does indeed work with #359 which is now merged to master.\n. @k-makarov proxying for websockets does now work in master, however it looks like there isn't going to be a new release until webpack 2.0. I created a branch that you can directly npm install from in the meantime here: https://github.com/mjrussell/webpack-dev-server/tree/pre-dist\n. @k-makarov proxying for websockets does now work in master, however it looks like there isn't going to be a new release until webpack 2.0. I created a branch that you can directly npm install from in the meantime here: https://github.com/mjrussell/webpack-dev-server/tree/pre-dist\n. I couldn't get it either, you need the HPM PR included which came from #359 just after 1.14.1, that's why im still using my fork until I can upgrade to 2.0\n. Yeah thanks for this\n. :+1: for this PR. It adds support for native web sockets which is currently not working in the latest release. Would resolve #283. Also seems like the HTPM has much more mature documentation.\nOne issue I did have though is that the syntax for describing the url to match is a little different.\nBefore this PR:\njs\n  ...\n  proxy: {\n    '/api/*': {\n       ...\n    }\n  }\n  ...\nAfter:\njs\n  ...\n  proxy: {\n    '/api': {\n       ...\n    }\n  }\n  ...\n. @sokra Should there be some documentation regarding the proxy path tweak?\n. Also I noticed a crash when the server being proxied to shuts down, opened an issue with the HTPM since the trace looks like its on them\n. I did run it on my setup and it was definitely not obeying the /api/*. The docs on the npm registry seem to suggest you should just use /api. \nI don't have a great open source example for a demo on hand. @sokra added a rewrite in 33ebd1f. If you can prove that this is unnecessary feel free to and then that check can be removed.\n. I know this would auto upgrade due the the ~ but in case someone were to do some weird shrinkwrap I think its good to be on the safe side...\n. Can confirm we are also experiencing this error proxying websockets when the server doesn't gracefully respond to the connection or it closes abruptly. Only happens on Node 10.x. ",
    "bbguitar77": ":+1: \n. ",
    "chimurai": "PR #359 might just added support for ws proxy.\nI haven't tested it yet.\n. Just connecting the dots. Credits should go to @jamsesso for making the PR. :+1: \n. #392 should fix this issue.\n. HTTP message header field names are case-insensitive according to the specs:\n- https://tools.ietf.org/html/rfc7230#section-3.2\n- https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html\nFrom https://nodejs.org/api/http.html :\nHTTP message header keys are lowercased.\n. @SpaceK33z @jdkrebs \nThis line in http-proxy-middleware kind of ignores/reverts the rewritten path in your fix. (source)\njavascript\n// http-proxy-middleware\nreq.url = (req.originalUrl || req.url);\nNot sure what the best approach would be to make it backwards compatible.\nAs alternative, you could use the .pathRewrite option offered by HPM.\nThe syntax is slightly different...\njavascript\n    proxy: {\n      '/api/**': {\n        target: 'http://localhost:9001',\n        pathRewrite: function (path, req) {\n          return path.replace('/api/foo', '/api/bar');\n        }\n      }\n    }\nFor more info on pathRewrite: http-proxy-middleware/recipes/pathRewrite.md\n\n@SpaceK33z \nI noticed a sudden surge in downloads since v1.15.0 got released and with it also a number of proxy related issues. Feel free to cc me if you need any assistance.\n. Think nullifying the originalUrl with req.originalUrl = null would be the best option to make it backwards compatible, without too much hacking.\nA side note:\nThere is tiny change in pathRewrite behavior as of HPM v0.17.1:\nhttps://github.com/chimurai/http-proxy-middleware/pull/98\nPath rewrites will only be done for paths which will be proxied.\nNot sure what the behavior is of rewrite in WDS... Maybe something to doublecheck / keep an eye on.\n. A fresh npm install after removing node_modules should fetch the newer HPM v0.17.3\n\n\"http-proxy-middleware\": \"~0.17.1\"\nhttps://semver.npmjs.com/. Similar discussion @ https://github.com/facebookincubator/create-react-app/issues/1116\nOn Windows you have to use 127.0.01 instead of localhost to be able to work offline.. Adding agent in your proxy config should do the trick.\nRecipe / details can be found here:\nhttps://github.com/chimurai/http-proxy-middleware/blob/master/recipes/corporate-proxy.md. ",
    "k-makarov": ":+1:\n. :+1:\n. ",
    "hanjunlee": "This was helpful. FYI for someone It was deprecated  like below (here)! \n\nThis option is deprecated in favor of devServer.before and will be removed in v3.0.0.\n. \n",
    "imranismail": "Doesn't work for me and this PR fixed it.\n. ",
    "jhchen": "Of course. I just added a commented out call to https://github.com/webpack/docs/wiki/webpack-dev-server in case people copy/paste the code snippet. Let me know if there is a better way or place.\n. ",
    "SonofNun15": "I tried that and it appeared to only change where the JavaScript bundle was hosted.\n. So if I set publicPath: '/subpath/' then I could load the bundle from http://localhost:8080/subpath/bundle.js, but the index and other static assets from contentBase would still be served at http://localhost:8080/index.html\n. Yeah that works pretty well. Not quite what I was hoping for, but a passable solution. Now I can't get the proxy option to work. :see_no_evil: \n. Currently the only solution to this issue is putting the static assets in a sub folder under the contentBase. This is a workable solution. Any thoughts on providing a baseUrl property long term on the webpack-dev-server settings? Not worthwhile?\n. @finbarmaginn: Add --inline to the command and you will be able to hit the server without \\webpack-dev-server\\\n. ",
    "grantcarthew": "I'm having trouble with this now. It's not stale.\nSome way of defining the base url would be perfect.. For reference: https://github.com/vuejs-templates/webpack/issues/546\n. ",
    "DmitryKorlas": "Oh exactly, i see middleware reslove it. My mistake were not to include defined publicPath into url's to the certain templates (index.html etc) - is a reason to receive \"raw\" files via app.get(\"*\", express.static(contentBase), serveIndex(contentBase)). Thanks!\n. ",
    "FrenchBen": "anyway to get a flag for killing an existing webpack-dev-server? Aka if you're trying to start one, and a matching PID in the local folder exists, then kill it and start the new one?\n. ",
    "pkyeck": "aahh, didn't see this one before. should work for me. thanks\n. ",
    "cristisp": "From what I understand, this socket.io fix should resolve the issue with the GitHub dependency in the postinstall script, which causes nightmares to anyone without direct access to GitHub (please correct me if I'm wrong). Please merge this PR and publish to npm, you will make a lot of people very happy :)\n. Are you running the dev server with any arguments?\n. +1 for replacing Socket.io with something more lightweight :)\n. @sokra Could we hear your opinion on this PR? It would solve the issue with dependency on the github package from socket.io and would be more lightweight.\n. Great job guys! Thank you!\n. ",
    "stevenjlho": "I have same problem. I found this issue can solve the problem. https://github.com/webpack/webpack-dev-server/issues/155#issuecomment-159140735\n. +1\n. +1\n. ",
    "kpe": "as a local workaround one can use the --cert, --cacert, --key options to specify a custom certificate.\n. ",
    "MrEfrem": "yes, thanks. in a week I will be able to check.\n. Please do backwards changes to weback 1.x branch.\n. ",
    "jaylinski": "please merge this, I believe this would fix #367\n. also see #396 #394\n. also see #396 #394\n. also getting this error on client when adding an inline-script-tag\n+1 rolled back to @1.14.0 fixed the problem.\n. @sokra can you have a quick look at this? there are already two issues and three PRs open for this problem.\nhttps://github.com/webpack/webpack-dev-server/issues/381 https://github.com/webpack/webpack-dev-server/pull/300 https://github.com/webpack/webpack-dev-server/pull/394 https://github.com/webpack/webpack-dev-server/pull/396 https://github.com/webpack/webpack-dev-server/pull/447\n. @sokra can you have a quick look at this? there are already two issues and three PRs open for this problem.\nhttps://github.com/webpack/webpack-dev-server/issues/381 https://github.com/webpack/webpack-dev-server/pull/300 https://github.com/webpack/webpack-dev-server/pull/394 https://github.com/webpack/webpack-dev-server/pull/396 https://github.com/webpack/webpack-dev-server/pull/447\n. duplicates #394\n. duplicates #394\n. also see #367\n. ",
    "aromot": "I have the same problem. How to replace socket.io with SockJS?\n. ",
    "eladh": "hi @SpaceK33z \nalso checked the fix and the webpack dev server is up and running on windows.\nany idea when the fixed will be merged and published ? \n10x\n. Important update - in the latest version of Artifactory there is support for this kind of problems (direct http or github resources)  via the NPM/Bower\nhttps://www.jfrog.com/jira/browse/RTFACT-7664\n. thanks :-)\n. Its like the framework cannot handle Large JSON response.\nas a bypass we redirected All REST in Development mode to the Web Server.\n. ",
    "abzainuddin": "\\o/\n. ",
    "muzishuiji": "i still do not know how to solve my trouble, it means that i should get the latest version of webpack-dev-server? or?. ",
    "radotzki": "I'm having the same problem with connect-history-api-fallback.\nThis pull request solved the problem for me.\n. @ChrisJamesC  thank you, that works for me!\n. ",
    "ChrisJamesC": "Any update on this PR? It solves a problem I also have. Can I do something to help speed up the adoption of a fix? \nAt test URL that failed before and now works is http://localhost:3000/hello.world\n. An alternative fix is to replace the historyApiFallback=true line in the server config with: \nhistoryApiFallback: {\n    rewrites: [\n        {\n            from: /^\\/app\\/.*$/,\n            to: function() {\n                return 'index.html';\n            }\n        }\n    ]\n},\nThis will make any page with a dot in the /app path to be redirected to index.html (as it should be if it were not considered as a file)\nSee https://github.com/bripkens/connect-history-api-fallback#rewrites for more info\n. A possible fix is in #303\n. An alternative fix is to replace the historyApiFallback=true line in the server config with:\nhistoryApiFallback: {\n    rewrites: [\n        {\n            from: /^\\/search\\/.*$/,\n            to: function() {\n                return 'index.html';\n            }\n        }\n    ]\n},\nThis will make any page with a dot in the /search path to be redirected to index.html (as it should be if it were not considered as a file)\nSee https://github.com/bripkens/connect-history-api-fallback#rewrites for more info\nDocumenting this should be enough. \n. ",
    "davidhariri": "It would be helpful to mention what option we should specify @SpaceK33z . ",
    "tmcgann": "Use the disableDotRule found here: https://github.com/bripkens/connect-history-api-fallback#disabledotrule. For example:\njs\nhistoryApiFallback: {\n    disableDotRule: true,\n}\nI personally encountered issues with the rewrite rule--for some reason it changed the bundle that was used, which was really confusing. The symptom I observed was the hashes in my output files were different for the rewrite URLs; all the other URLs had the same hash in the output. Not sure why, may need to use the context argument as part of the rewrite (see https://github.com/bripkens/connect-history-api-fallback#rewrites). But the disableDotRule did the trick for me!. Appears to be expected behavior: https://github.com/webpack/webpack/issues/2393#issuecomment-216614060\n. ",
    "roger-russel": "I tried with \"disableDotRule: true\"  but disabled the other files as .js or .css, which made my vuejs project broke.\nThe solution that I found was based on this link.\nwas change this:\napp.use(require('connect-history-api-fallback')());\nTo this:\napp.use(require('connect-history-api-fallback')({\n  rewrites: [\n    {\n      from: /^\\/ip\\/allow\\/.*$/,\n      to: '/'\n    }\n  ]\n}))\nThe trick is create a rewrite to every route that uses dot on it.. ",
    "urish": "+1\n. ",
    "LuminescentMoon": "Why would you need to detect this? You're programmatically starting the webpack dev server so you should know when it's being ran.\n. Why would you need to detect this? You're programmatically starting the webpack dev server so you should know when it's being ran.\n. ",
    "aight8": "Whats about setting a simple environment variable?. Whats about setting a simple environment variable?. Okey SOLVED in my case: Make sure you don't load the new WebpackCleanupPlugin() plugin when you run webpack-dev-server.\n. ",
    "antonholmquist": "No-one else experiencing this? Would be very intersting to know what could be causing it.\n. No-one else experiencing this? Would be very intersting to know what could be causing it.\n. ",
    "sevengo8378": "Hi, \nI have the same question. For some reason i can only call webpack and webpack-dev-server with API mode. How could the console output behavior like CLI mode? Here are the differences compare with CLI mode ,\n1. no color highlight\n2. output show after webpack invoke finished, not immediately mode\n3. not only show the files that have changed and the 'hot-update' files \nMy code:\njavascript\nlet compiler = webpack(webpackCfg, (err, stats) => {\n          //console.log(stats.toString(statsOptions));\n  })\nlet devServerCfg = {\n      contentBase: options.build_dir,\n      colors: true,\n      // progress: true,\n      historyApiFallback: true,\n      inline: false,\n      port: 8888,\n      hot: true,\n      'display-errors-details': true,\n      // quiet: false,  \n      // compress: false, \n    }\nlet server = new WebpackDevServer(compiler, devServerCfg)\nserver.listen(devServerCfg.port, 'localhost', (err, result) => {}). Hi, \nI have the same question. For some reason i can only call webpack and webpack-dev-server with API mode. How could the console output behavior like CLI mode? Here are the differences compare with CLI mode ,\n1. no color highlight\n2. output show after webpack invoke finished, not immediately mode\n3. not only show the files that have changed and the 'hot-update' files \nMy code:\njavascript\nlet compiler = webpack(webpackCfg, (err, stats) => {\n          //console.log(stats.toString(statsOptions));\n  })\nlet devServerCfg = {\n      contentBase: options.build_dir,\n      colors: true,\n      // progress: true,\n      historyApiFallback: true,\n      inline: false,\n      port: 8888,\n      hot: true,\n      'display-errors-details': true,\n      // quiet: false,  \n      // compress: false, \n    }\nlet server = new WebpackDevServer(compiler, devServerCfg)\nserver.listen(devServerCfg.port, 'localhost', (err, result) => {}). ",
    "PatrickJS": ":+1: I need this too\n. can you rebase\n. ",
    "jteplitz": ":+1: Also running up against this issue\n. :+1: Also running up against this issue\n. ",
    "matthewdenobrega": "298 is a fix for the same thing and includes an extra check - unless there's an issue with the extra check I'd suggest #298 gets used for this.\n. #298 is a fix for the same thing and includes an extra check - unless there's an issue with the extra check I'd suggest #298 gets used for this.\n. +1 I'm running a proxy and this change would simplify my setup.\n. ",
    "jFensch": "Any progress on this?  Would be awesome to get working with Angular2 supporting web workers.\n. Any progress on this?  Would be awesome to get working with Angular2 supporting web workers.\n. ",
    "quirinpa": "cool :)\n. cool :)\n. ",
    "craigcosmo": "should have option to define which browser to use. should have option to define which browser to use. I don't see how the reference #542 suggest a solution for this issue. Unless I don't understand it correctly.\n. overlay: true does work for me. Not all errors will be shown as overlay. like this?\njson\nscripts : {\n    \"dev\" : \"killall node && webpack-dev-server\"\n}\nnot working. error No matching processes belonging to you were found\n. @SpaceK33z my bad, the repo is now accessible. Please check again.. actually that set up works well in webpack 1 and web dev server 1. \nYou can try and see, here is demo of that set up: https://github.com/craigcosmo/demo-for-onibag\n. no, in my demo repo just shared with you, I'm not using hot reload for react. I use web dev server HMR which the --hot flag. My css always refresh when I change it.. yes, I don't use hot reload in any repos or project. the only thing I use is the --inline --hot flag. My css has been refreshing with no problem until I use web pack 2. But base on your suggestion, removing the --hot flag, the browser now refreshed to my css changes.\nSo, apparently the --hot in web pack 2 and 1 is quite different, despite the same name. ",
    "milewski": "and is it possible to open open something else?... let's say open /something/else. and is it possible to open open something else?... let's say open /something/else. ",
    "MattyBalaam": "https://github.com/webpack/webpack-dev-server/pull/749. https://github.com/webpack/webpack-dev-server/pull/749. ",
    "bennyn": "Is --open exposed to webpack's Node.js API? I would like to do this:\n```javascript\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  inline: true,\n  stats: { colors: true },\n  headers: { 'Access-Control-Allow-Origin': '*' },\n  open: 'http://localhost:8081'\n}).listen(8081, 'localhost', function (err, result) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log('Listening at http://localhost:8081/');\n});\n``. Is--open` exposed to webpack's Node.js API? I would like to do this:\n```javascript\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  inline: true,\n  stats: { colors: true },\n  headers: { 'Access-Control-Allow-Origin': '*' },\n  open: 'http://localhost:8081'\n}).listen(8081, 'localhost', function (err, result) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log('Listening at http://localhost:8081/');\n});\n``. Is--open` exposed to webpack's Node.js API? I would like to do this:\n```javascript\nnew WebpackDevServer(webpack(config), {\n  publicPath: config.output.publicPath,\n  hot: true,\n  historyApiFallback: true,\n  inline: true,\n  stats: { colors: true },\n  headers: { 'Access-Control-Allow-Origin': '*' },\n  open: 'http://localhost:8081'\n}).listen(8081, 'localhost', function (err, result) {\n  if (err) {\n    return console.log(err);\n  }\n  console.log('Listening at http://localhost:8081/');\n});\n```. Setting up Hot Module Replacement with webpack-dev-server via the Node.js API is pretty tricky. \nWhen using the CLI, all I had to do was adding new webpack.HotModuleReplacementPlugin() in the plugins section of my webpack.config.js and it worked by simply executing webpack-dev-server. As an alternative, I could run webpack-dev-server --hot which then automatically adds the HotModuleReplacementPlugin.\nWhen using the Node.js API, you will have to do three steps:\n1. Set devServer.hot to true\n1. Add new webpack.HotModuleReplacementPlugin() to plugins\n1. Modify your app's entry point as described by @indirectlylit\nThe WebpackDevServer.addDevServerEntrypoints function got removed, so it's no longer of use (tested with webpack 4.26.1 & webpack-dev-server 3.1.10).\nHere is a setup with HMR that I use in my Gulp task:\ngulpfile.js\n```js\nconst chalk = require('chalk');\nconst gulp = require('gulp');\nconst gutil = require('gulp-util');\nconst webpack = require('webpack');\nconst webpackConfig = require('./webpack.config');\nconst WebpackDevServer = require('webpack-dev-server');\ngulp.task('watch:frontend', () => {\n  const config = {...webpackConfig};\n  config.mode = process.env.NODE_ENV === 'production' ? 'production' : 'development';\nconst host = config.devServer.host;\n  const port = config.devServer.port;\n  const frontendUrl = http://${host}:${port};\nconfig.entry[process.env.npm_package_name].unshift(webpack-dev-server/client?${frontendUrl}/, 'webpack/hot/dev-server');\nconst compiler = webpack(config);\n  const server = new WebpackDevServer(compiler, config.devServer);\nserver.listen(port, host, error => {\n    if (error) throw new gutil.PluginError('webpack-dev-server', error);\n    gutil.log('[webpack-dev-server]', ${frontendUrl}/webpack-dev-server/index.html);\n    gutil.log(chalkCheckout the development frontend at \"{green ${frontendUrl}}\".);\n  });\n});\n```\nFor the sake of completeness, here is my webpack configuration:\nwebpack.config.js\n```js\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst path = require('path');\nconst webpack = require('webpack');\nconst dist = path.join(__dirname, 'dist', 'frontend');\nconst src = path.join(__dirname, 'src', 'main', 'frontend');\nmodule.exports = {\n  devServer: {\n    contentBase: path.join(__dirname, 'dist'),\n    host: 'localhost',\n    hot: true,\n    overlay: {\n      errors: true,\n      warnings: true,\n    },\n    port: 8080,\n    stats: 'errors-only',\n    watchContentBase: true\n  },\n  entry: {\n    [process.env.npm_package_name]: [path.join(src, 'index.tsx')],\n  },\n  mode: 'development',\n  module: {\n    rules: [\n      {\n        exclude: /(node_modules)/,\n        loader: 'babel-loader',\n        test: /.tsx?$/,\n      },\n    ]\n  },\n  output: {\n    filename: [name].bundle.js,\n    path: dist,\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new HtmlWebpackPlugin({\n      template: path.join(src, 'index.html'),\n    })\n  ],\n  resolve: {\n    extensions: ['.js', '.jsx', '.ts', '.tsx'],\n  },\n};\n```. ",
    "wesleymostien": "@bennyn did you manage to do this ?. @bennyn did you manage to do this ?. any progress ? . for me, it just reloads the page every time instead of HMR. What could be the problem ?. ok thanks for the update. btw using webpack-browser-plugin will do the trick easily.. Found it : be sure to add options 'port' and 'host'  : \n`\nconst options = {\n  hot: true,\n  publicPath: path.resolve(__dirname, '/dist'),   \n  port: port,\n  host: 'localhost',\n};\nwebpackDevServer.addDevServerEntrypoints(config, options);\n`. ",
    "Lamorale": "In my webpack.config.js:\ndevServer: {\n    open: false\n}\ndoes not prevent webpack to open app in new page.\nI am using webpack 3.6.0 webpack-dev-server 2.9.1\nDoes it work for anyone?\n. In my webpack.config.js:\ndevServer: {\n    open: false\n}\ndoes not prevent webpack to open app in new page.\nI am using webpack 3.6.0 webpack-dev-server 2.9.1\nDoes it work for anyone?\n. ",
    "cyrusmith": "For me devServer: { open: false } doesn't work either.. For me devServer: { open: false } doesn't work either.. For me devServer: { open: false } doesn't work either.. ",
    "emilio-martinez": "@SpaceK33z I'm trying to use the open option on a webpack config via the Node API based on https://webpack.js.org/configuration/dev-server/#devserver-open. However, it won't work. Is this supposed to work outside of the CLI? . @SpaceK33z I'm trying to use the open option on a webpack config via the Node API based on https://webpack.js.org/configuration/dev-server/#devserver-open. However, it won't work. Is this supposed to work outside of the CLI? . @SpaceK33z as of beta.11 webpack-dev-server \"fails\" silently for me. I put fails in quotes because there's no real failure other than nothing happens\u2014btw I'm using the node API.\nThe config that goes into webpack() is roughly:\ndevServer:\n   { quiet: true,\n     noInfo: true,\n     compress: true,\n     colors: true,\n     contentBase: '/absolute/path/to/dir',\n     publicPath: '/',\n     port: 3000,\n     hot: true,\n     inline: true,\n     historyApiFallback: true,\n     host: '0.0.0.0',\n     https: false,\n     setup: [Function],\n     staticOptions: { extensions: [Object] } }\nI can share the rest of my config, but ultimately beta.10 worked fine with this setup, and I can't discern if there's any specific config item that should be called out. I know that there's emphasis on providing validation, but I'l literally getting radio silence. Is there anything specific that's changed in this release that I'm not accounting for?\n. @SpaceK33z hmm! Don't know where I got the colors option from but interestingly enough that's what was stopping the process silently. Logged! Thank you!\n. ",
    "gluons": "@emilio-martinez I face the same problem as you.\nSeems that open option is only used in CLI.\nThe open function that's used to open browser appear only in status function.\nAll files that use status are in bin directory. That mean it works only in CLI.\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/utils.js#L41-L89\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/webpack-dev-server.js#L30-L36\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/webpack-dev-server.js#L404\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/webpack-dev-server.js#L419\nSo, no way to open browser via Node API. \u2639\ufe0f. @emilio-martinez I face the same problem as you.\nSeems that open option is only used in CLI.\nThe open function that's used to open browser appear only in status function.\nAll files that use status are in bin directory. That mean it works only in CLI.\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/utils.js#L41-L89\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/webpack-dev-server.js#L30-L36\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/webpack-dev-server.js#L404\nhttps://github.com/webpack/webpack-dev-server/blob/d0725c98fb752d8c0b1e8c9067e526e22b5f5134/bin/webpack-dev-server.js#L419\nSo, no way to open browser via Node API. \u2639\ufe0f. ",
    "Surreal9": "It looks like replacing my references of __dirname with path.join(__dirname has fixed it.\n. ",
    "Silvenga": "\nDo you have a more detailed stacktrace?\n\nNot really (is there a way to give more verbose output?). All I have is 50KB of this:\n\nERROR in multi main\nModule not found: Error: Cannot resolve directory 'C:\\(Snip)' in C:\\(Snip)\\!Dashboard\\app\n @ multi main\n\n\nERROR in ./app/assets/scss/main.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./../../../.. in C:\\(Snip)\\!Dashboard\\app\\assets\\scss\n @ ./app/assets/scss/main.scss 7:13-90\n\n\nERROR in ./~/react/lib/flattenChildren.js\nModule not found: Error: Cannot resolve directory 'C:\\(Snip)' in C:\\(Snip)\\!Dashboard\\node_modules\\react\\lib\n @ ./~/react/lib/flattenChildren.js 1:0-114\n\nSorry for the snipping - my paths may contain sensitive information. \nThe ! symbol can appear anywhere in the absolute path to the root folder and it causes these issues. \n. ",
    "snaptopixel": "Note: This issue has also been posted in css-loader here https://github.com/webpack/css-loader/issues/186\n. ",
    "flindenberg": "I'm experiencing the same on Ubuntu (using vagrant with Windows host and Ubuntu guest). \nI suspected node-gyp to be the problem, because of several error messages I received earlier. However, thanks to #302, which was merged tonight, socket.io was replaced. socket.io required node-gyp. So this shouldn't be a problem any longer. \nUninstalling and reinstalling everything (including the newest version of webpack-dev-server) still results in command not found when I run $ webpack-dev-server.\nAny ideas how to fix this?\n. I was able to solve this problem on my machine. It appears to have been an issue with permissions. \nI installed webpack and webpack-dev-server globally. However, even then, $ webpack-dev-server resulted in command not found (as stated above). \nThe problem was that npm installed the global packages to /usr/local/lib/node_modules which required root permissions. \nIn order to avoid having to use root permissions, I changed the directory in which global packages are to be installed to a directory in $HOME. To do this, I followed this guide: https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\nI installed webpack and webpack-dev-server globally again (this time without sudo) and verified that they have been installed in my new directory. \nNow, I can finally run $ webpack-dev-server.\nI hope this helps @tconroy!\n. You're welcome! Good luck :-)\n. ",
    "mneil": "I had the same issue using nvm on ubuntu. Just in case anyone else runs into this. \nsudo cp /home/[user]/.nvm/versions/node/[node_version]/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js /usr/local/bin/webpack-dev-server\nchown [user]:[user] /usr/local/bin/webpack-dev-server\nchmod +x /usr/local/bin/webpack-dev-server\nReplace the content in brackets with your specific path info for user and node version.\n. ",
    "fengchuantao": "thanks man! @flindenberg \n. thanks man! @flindenberg \n. ",
    "kabinpokhrel": "Thanks man ! It helped . ",
    "arthursm": "Bro, Thank youuu :+1: . ",
    "villesau": "i'm experiencing the same issue with\n.style {\n    background: url(/img/257.gif) no-repeat;\n}\nthe image is not found. the loader for images i'm using:\n{\n      test: /\\.(?:jpe?g|gif|png|wav|mp3)$/,\n      loaders: ['url?limit=2500000']\n    }\nam i doing something wrong?\n. i'm experiencing the same issue with\n.style {\n    background: url(/img/257.gif) no-repeat;\n}\nthe image is not found. the loader for images i'm using:\n{\n      test: /\\.(?:jpe?g|gif|png|wav|mp3)$/,\n      loaders: ['url?limit=2500000']\n    }\nam i doing something wrong?\n. ",
    "elisechant": "or you could use resolve-url-loader for the css references to let webpack find relative refs\n{\n        test: /\\.(scss)$/,\n    loader: 'style!css?&sourceMap!postcss!resolve-url!sass?sourceMap'\n},\n. You can't hot reload with ExtractTextPlugin. Webpack-dev-server works because its in memory not because of writing to file. \nHot styles are emitted from your bundles js file. Delete your local ref to your css file, remove the extract text plugin.\nYour sass loader for dev mode should look something like this: \n{\n        test: /\\.(scss)$/,\n                loader: 'style!css?&sourceMap!postcss!resolve-url!sass?sourceMap'\n            },\ninstead of :\n{\n        test: /\\.(scss|css)$/,\n        loader: ExtractSass.extract('style', `css?${DEBUG ? 'sourceMap': ''}!postcss!resolve-url!sass?sourceMap`)\n      },\n. webpack.config:\nentry: {\n      ['entry-one']: [`./entry-one`],\n      ['entry-two']: [`./entry-two`],\n},\nthen when you are in devServer mode, edit the entries like this:\nlet devServerPublicPath = `http://localhost:8080/`;\nfor(let [key, value] of Object.entries(webpackConfig.entry)) {\n    if (!Array.isArray(value)) {\n        throw new Error('Entry value must be an array');\n    }\n    value.unshift(\n      `webpack-dev-server/client?${devServerPublicPath}`,\n      'webpack/hot/dev-server',    // reload if HMR fails\n      // app entry point is not required here because it is carried across\n      // from webpack.config\n    );\n}\nBasically you need \n``webpack-dev-server/client?${devServerPublicPath}`,\n'webpack/hot/dev-server'\n```\nper entry\n. ",
    "agileago": "i have reach the same issue. is there a solution?\n. i have reach the same issue. is there a solution?\n. ",
    "menscrem": "@Jakobud Try adding it: \njavascript\n...\nplugins: [\n  new OldWatchingPlugin()\n]\n...\n. @Jakobud Try adding it: \njavascript\n...\nplugins: [\n  new OldWatchingPlugin()\n]\n...\n. ",
    "Elyx0": "@Jakobud please take a look at https://github.com/webpack/webpack/issues/675\n. @Jakobud please take a look at https://github.com/webpack/webpack/issues/675\n. ",
    "altaurog": "It seems an inotify limit might interfere on linux.  Try something like the following:\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf ; sudo sysctl -p\n. It seems an inotify limit might interfere on linux.  Try something like the following:\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf ; sudo sysctl -p\n. ",
    "madjam002": "+1 I'm getting this issue too, 1.12.1 works fine.\n. +1 I'm getting this issue too, 1.12.1 works fine.\n. ",
    "laszlokorte": "could be related to this one sockjs/sockjs-client#262\n. applying #328 fixed it for me. Thank you!\n(after running npm run prepublish inside ./node_modules/webpack-dev-server/)\n. When will there be a new release containing the fix for this? \n. ",
    "carpeliam": "I'm seeing:\nGET http://localhost:8124/sockjs-node/info?t=1448668134012 404 (Not Found)\n[WDS] Disconnected!\nafter upgrading webpack-dev-server from v1.10.1 to v1.14.0. I'm using webpack-dev-server directly in node, via:\n```\n// ...\nvar bundler = new WebpackDevServer(webpack(webpackConfig), {\n    publicPath: '/build/',\n    inline: true,\n    hot: true,\n    quiet: false,\n    noInfo: true,\n    stats: {colors: true}\n});\nbundler.listen(3001, 'localhost');\n// ...\n```\nI tried applying the changes in #328, and I'm still seeing the issue.\n. I'm seeing:\nGET http://localhost:8124/sockjs-node/info?t=1448668134012 404 (Not Found)\n[WDS] Disconnected!\nafter upgrading webpack-dev-server from v1.10.1 to v1.14.0. I'm using webpack-dev-server directly in node, via:\n```\n// ...\nvar bundler = new WebpackDevServer(webpack(webpackConfig), {\n    publicPath: '/build/',\n    inline: true,\n    hot: true,\n    quiet: false,\n    noInfo: true,\n    stats: {colors: true}\n});\nbundler.listen(3001, 'localhost');\n// ...\n```\nI tried applying the changes in #328, and I'm still seeing the issue.\n. @SpaceK33z finally had a chance to come back to this. Looks like it's working for others which is great, but I'm experiencing the same symptom (server logs say 15.12.18 08:10:16 404 GET /sockjs-node/info (Unknown - 1ms)). I completely reinstalled webpack-dev-server (removed the directory, installed webpack/webpack-dev-server#3d3c000df8889e8b557995e5fe918b29072c377f, and ran npm install && npm run prepublish within the webpack-dev-server directory).\nDo I need to include an expicit dependency on sockjs and set up the server myself within my own app?\nEDIT: I had webpack-dev-server listening to port 3001, setting up a proxy to my app running on port 8124. The requests to /sockjs-node/info were against my app port (8124), not my webpack-dev-server port (3001). Looks like proxying has changed since the version I was on previously (1.10.1), I'll look into how proxying is supposed to work now.\n. @SpaceK33z finally had a chance to come back to this. Looks like it's working for others which is great, but I'm experiencing the same symptom (server logs say 15.12.18 08:10:16 404 GET /sockjs-node/info (Unknown - 1ms)). I completely reinstalled webpack-dev-server (removed the directory, installed webpack/webpack-dev-server#3d3c000df8889e8b557995e5fe918b29072c377f, and ran npm install && npm run prepublish within the webpack-dev-server directory).\nDo I need to include an expicit dependency on sockjs and set up the server myself within my own app?\nEDIT: I had webpack-dev-server listening to port 3001, setting up a proxy to my app running on port 8124. The requests to /sockjs-node/info were against my app port (8124), not my webpack-dev-server port (3001). Looks like proxying has changed since the version I was on previously (1.10.1), I'll look into how proxying is supposed to work now.\n. ",
    "savroff": "Get this all the time. Hot reload works, but still get this \n\nI think it's happens when I ugrade Google Chrome browser to v. 47.0.2526.106\n. Get this all the time. Hot reload works, but still get this \n\nI think it's happens when I ugrade Google Chrome browser to v. 47.0.2526.106\n. @timwingfield yes, we use under Rails. I fix it with changing config. Pretty much the same stuff, but I have multiply entries\njavascript\nmodule.exports = {\n  context: __dirname,\n  devtool: 'eval',\n  entry: {\n    'publisher': publisherEntries,\n    'manager': managerEntries,\n    'client': \"webpack-dev-server/client?http://localhost:8080\"\n  },\n  output: {\n    path: __dirname + \"/public/assets/build/\",\n    filename: \"[name].js\",\n    publicPath: 'http://localhost:8080/'\n  },\n  plugins: plugins,\n  module: {\n    loaders: [\n      { test: /\\.js$/, loaders: ['react-hot', 'babel'], exclude: /node_modules/ }\n    ]\n  }\n. @timwingfield yes, we use under Rails. I fix it with changing config. Pretty much the same stuff, but I have multiply entries\njavascript\nmodule.exports = {\n  context: __dirname,\n  devtool: 'eval',\n  entry: {\n    'publisher': publisherEntries,\n    'manager': managerEntries,\n    'client': \"webpack-dev-server/client?http://localhost:8080\"\n  },\n  output: {\n    path: __dirname + \"/public/assets/build/\",\n    filename: \"[name].js\",\n    publicPath: 'http://localhost:8080/'\n  },\n  plugins: plugins,\n  module: {\n    loaders: [\n      { test: /\\.js$/, loaders: ['react-hot', 'babel'], exclude: /node_modules/ }\n    ]\n  }\n. ",
    "ThomWright": "v1.14.1 was released two days ago with this fix in it which is working for me. Have you upgraded to the latest version? If so, what you're seeing might be a different issue.\n. ",
    "timwingfield": "I just upgraded to v1.14.1 and am still seeing it.\n\nEverything works fine, hot reload and the server, just this is constantly coming up in the console. About every 3 seconds.\n. Good question, from my config I think.\nentry: {\n    App: [\n      'webpack-dev-server/client?http://localhost:8080/assets/',\n      'webpack/hot/only-dev-server',\n      './client/javascripts/entry'\n    ]\n  },\n  output: {\n    path: path.join(__dirname, 'app', 'assets', 'javascripts'),\n    filename: '[name]_wp_bundle.js',\n    publicPath: 'http://localhost:8080/assets'\n  },\n. @SpaceK33z upon more digging, I have a feeling Rails is the culprit here as it's configured to serve the web assets from /assets. Still looking. Thanks for pointing me in a new direction, though.\n. Nope, it was my webpack config.\nchanging the first line in the App array fixed it.\nwebpack-dev-server/client?http://localhost:8080/\n. Got it all working now. Thanks @SpaceK33z and @savroff \n. ",
    "liamfd": "@timwingfield I'm having the same issue and attempted your fix. It got rid of the 404s, but, removing the /assets seems to break the actual hot reloading. It's giving me an error and it always refreshes the page. Are you experiencing that?\n\nedit: My apologies, adding the no errors plugin fixed it for me. For posterity:\nplugins: [\n    new webpack.NoErrorsPlugin()\n],\nThough this does seem kind of like a band-aid and not an actual fix, I don't know enough about that plugin to really say. It does seem to be working though.\n. ",
    "leedium": "Hey dudes, getting a similar error, but not sure if it's my implementation or a configuration issue. Any help is appreciated.\n1) App served on localhost:3002/ \n2 ) WDS/HMR bundles on localhost:3001\n3 ) Proxy set up on localhost:3000 to route html requests to localhost:3002, and js-bundle and websocket /upgrade requests to the WDS/HMR on 3001.\nWhen I build I get the following error:\n```\n\n[WDS] Disconnected!\nsock.onclose @ client?e36c:70EventTarget.dispatchEvent @ eventtarget.js?a091:49(anonymous function) @ main.js?75ae:356\nabstract-xhr.js?c9b2:128 \nGET http://localhost:3001/sockjs-node/info?t=1454445244870 AbstractXHRObject._start @ abstract-xhr.js?c9b2:128(anonymous function) @ abstract-xhr.js?c9b2:21\napp.html:1 \nXMLHttpRequest cannot load http://localhost:3001/sockjs-node/info?t=1454445244870. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. The response had HTTP status code 404.\n```\n\nI can't understand why this is because I have set this header value to * in the wpDevMiddleware config.\nAny help would be appreciated.  See configuration below.  Not sure if I'm doing this right or if there is a better way\ndev-middleware.js\nlet devMiddlewareOptions = {\n        quiet:false,\n        noInfo:true,\n        hot:true,\n        inline:true,\n        lazy:false,\n        publicPath: 'http://localhost:3001/',\n        headers:{\n            'Access-Control-Allow-Origin': '*'\n        },\n        stats:{\n            colors:true\n        }\n    }\ndevServer.use(webpackDevMiddleware(bundler,devMiddlewareOptions))\ndevServer.use(webpackHotMiddleWare(bundler));\nwebpack-config.js\nentry:{             \n        app:[\n             'webpack-dev-server/client?http://localhost:3001',\n                 'webpack/hot/dev-server',\n                  path.resolve(appPath, '../src/client.js')\n                 ],\n          },\n    plugins:[\n        new webpack.ProvidePlugin({riot: 'riot'}),\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.optimize.CommonsChunkPlugin({name:\"globals\" , filename: \"build/scripts/globals.bundle.js\"}),\n    ]\n. fixed:\nwebpack-config.js\n```\n    entry:{           \n            app:[\n                 //'webpack-dev-server/client?http://localhost:3001',\n                 //'webpack/hot/dev-server',\n                'webpack-hot-middleware/client?path=http://localhost:3001/__webpack_hmr',\n                  path.resolve(appPath, '../src/client.js')\n                 ],\n```\n. ",
    "gertig": "@timwingfield thanks for the tip on where to look!\nI had\n'webpack-dev-server/client?http://127.0.0.1:' + port\nand needed to add a '/'\n'webpack-dev-server/client?http://127.0.0.1:' + port + '/'\n. ",
    "sohkai": "@timwingfield Nice one, I was having exactly the same issue! I've updated the dev server wiki to reflect the need for the additional / at the end of the entry point.\n. @timwingfield Nice one, I was having exactly the same issue! I've updated the dev server wiki to reflect the need for the additional / at the end of the entry point.\n. ",
    "dannguyen": "FWIW, @SohKai's fix doesn't seem to work  when --content-base is provided as an argument, \ne.g. given a project in which the source is in ./src, a package.json script might be configured as:\njson\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --hot --inline --content-base src\"\n   }\n. FWIW, @SohKai's fix doesn't seem to work  when --content-base is provided as an argument, \ne.g. given a project in which the source is in ./src, a package.json script might be configured as:\njson\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --hot --inline --content-base src\"\n   }\n. ",
    "AlexFrazer": "Did you make sure to use the same port in the devServer.port and webpack-dev-server/client?{url}?. Did you make sure to use the same port in the devServer.port and webpack-dev-server/client?{url}?. ",
    "skesani": "@timwingfield I am using angular-cli, i can't edit webpack config, do you know any other solution for angular-cli users? . ",
    "nicksrandall": "I can verify that this fixes #326. Please merge :smile: \n. Can we create a new release with this fix because the current release is broken?\n. @sokra thoughts on a new patch release?\n. ",
    "supersonicclay": "ok, I updated my package.json file to have this entry:\n\"webpack-dev-server\": \"CodeYellowBV/webpack-dev-server#98fd2f45b4a81\"\nthen ran\nnpm install\ncd node_modules/webpack-dev-server\nnpm run prepublish\nnow this works as expected\n./node_modules/.bin/webpack-dev-server --open\nPlease merge!\n. ",
    "sandwichsudo": "Is it possible to use this option when opening webpackDevServer from a node script?\neg\nconst server = new WebpackDevServer(compiler, {\n    hot : true,\n    harmony : true,\n    host : '0.0.0.0'\n});\nserver.listen(8080);\n. Is it possible to use this option when opening webpackDevServer from a node script?\neg\nconst server = new WebpackDevServer(compiler, {\n    hot : true,\n    harmony : true,\n    host : '0.0.0.0'\n});\nserver.listen(8080);\n. ",
    "calledT": "It's better I could decide which url to open with the --open option is string.Because I want to add querystring to the open url or the default name of my html is not index.\n. ",
    "LucienLee": "Before webpack 2.0 released, I think using [opn](https://www.npmjs.com/package/opn) module is the simplest to open any url in browser.\n. ",
    "alflennik": "I'd love to see this in the config.\ndevServer: {\n  open: true\n}. ",
    "jonkoops": "@alflennik Maybe open a new issue with that as a feature request?. ",
    "lucaritossa": "Is there a way to specify a different url path or the standard url http://host:port will be always used?\nI need to open a url similar to http://host:port/my-custom-path/ (angular project inside an ASP.NET MVC existing project). ",
    "TrySound": "@pavel06081991 No way. It's only CLI feature.. ",
    "kirill-konshin": "I fixed it by adding the following to my webpack config (instead of historyApiFallback: true):\nhistoryApiFallback: {\n    rewrites: [\n        {from: /.*\\.html/, to: '/index.html'}\n    ]\n},\nBut I suspect this should be a default behavior...\n. ",
    "ramboza": "Thanks !!! it works !\n. ",
    "eryshev": "I have the same issue one year  later, thx @kirill-konshin for the solution.\n. I have the same issue one year  later, thx @kirill-konshin for the solution.\n. ",
    "philostler": "OK I came across #197 after writing this and cooked up the following....\njavascript\nhistoryApiFallback: {\n  rewrites: [{\n    from: /\\/(\\d\\.)?app\\.js(\\.map)?/,\n    to: context => context.match[0]\n  }]\n}\n...and omitting --history-api-fallback from the command line.\nSeems to work. Is this the expected way of fixing this?? Shouldn't this be documented somewhere if so!?\n. Closing as I've pretty much worked my way around this\n. @ConAntonakos Glad this issue helped someone else out! I still use the snippet from above today, not come across any other issues with WDS history since\n. ",
    "ConAntonakos": "Thanks for opening this issue. I just ran into the same problem where I have a nested route, and it's being added to my publicPath when attempting to request assets.\n. ",
    "gutenye": "rewrites is not a public documented API, is it a bug?  . ",
    "akxcv": "I don't know if this is still relevant, but the solution specified in https://github.com/gaearon/react-hot-loader/issues/620#issuecomment-321729281 looks much cleaner. \nYou just need to add <base href=\"/\" /> to the <head> of your HTML.\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <base href=\"/\" /> <!-- THIS -->\n    <!-- ... -->\n  </head>\n  <body>\n    <!-- ... -->\n  </body>\n</html>. ",
    "marconak": "+1\n. ",
    "AdamGustavsson": "+1\n. +1\n. ",
    "codingleo": "Hey guys! I'm still having the same issue here.\nDoes the v2 is ready for npm? I'm also having the current versions:\njson\n\"webpack-dev-server\": \"~1.16.2\",\n\"webpack-dev-middleware\": \"~1.8.4\"\nAnd having the error:\n\n. Hey guys! I'm still having the same issue here.\nDoes the v2 is ready for npm? I'm also having the current versions:\njson\n\"webpack-dev-server\": \"~1.16.2\",\n\"webpack-dev-middleware\": \"~1.8.4\"\nAnd having the error:\n\n. ",
    "dsebastien": "Just to clarify for me: with Webpack 1.x we had to define outputPath in our devServer config so that we could have the resources written on disk (via write-file-webpack-plugin).\nCan I now remove outputPath from my devServer config with Webpack 2 rc1 / webpack-dev-server 2 rc1 ?. ",
    "mik01aj": "Duplicate of https://github.com/webpack/webpack-dev-server/issues/281\n. ",
    "pfrankov": "+1\n. ",
    "dickeylth": "+1\n. +1\n. @sokra OK, I'll add it\nDone in https://github.com/webpack/docs/wiki/webpack-dev-server#api\n. @sokra OK, I'll add it\nDone in https://github.com/webpack/docs/wiki/webpack-dev-server#api\n. ",
    "iroy2000": "I have a similar issue here https://github.com/webpack/webpack-dev-server/issues/395\n. ",
    "Praveen-Invoscape": "How to solve it.....anyone give information about that??\n. How to solve it.....anyone give information about that??\n. How to solve it.....anyone give information about that??\n. I am new to reactjs, so i am not have clear understanding to how to use the module.hot.accept()...Plz give some details about module.hot.accept().Thank you for ur reply. I am new to reactjs, so i am not have clear understanding to how to use the module.hot.accept()...Plz give some details about module.hot.accept().Thank you for ur reply. I am new to reactjs, so i am not have clear understanding to how to use the module.hot.accept()...Plz give some details about module.hot.accept().Thank you for ur reply. ",
    "afhole": "Use the rewrite callback:\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        rewrite: function (req){\n         req.url = req.url.replace(/^\\/api(.+)$/,'$1');\n        }\n      }\n    }\n  }\nOr ES2015:\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        rewrite: rewrite: req => req.url = req.url.replace(/^\\/api(.+)$/,'$1')\n      }\n    }\n  }\nI discovered this today by reading the webpack-dev-server code, I have no idea if/where it's documented. It seems to be a feature of webpack-dev-server rather than node-http-proxy itself.\nHope that solves it for you.\nAlastair\n. Use the rewrite callback:\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        rewrite: function (req){\n         req.url = req.url.replace(/^\\/api(.+)$/,'$1');\n        }\n      }\n    }\n  }\nOr ES2015:\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        rewrite: rewrite: req => req.url = req.url.replace(/^\\/api(.+)$/,'$1')\n      }\n    }\n  }\nI discovered this today by reading the webpack-dev-server code, I have no idea if/where it's documented. It seems to be a feature of webpack-dev-server rather than node-http-proxy itself.\nHope that solves it for you.\nAlastair\n. Is the resolution included in v2.7.1?. So the cert generated by dev server automatically still doesn't work with latest Chrome?. @shellscape Oh cool, glad it's sorted. In 2.7.1 I am still getting ERR_CERT_COMMON_NAME_INVALID I wonder if I have the cert cached somewhere? Is there anything I need to do to clear the cache and generate a new cert?. @shellscape Sorry, just to clarify - you no longer have errors with Subject Alternative Name missing and ERR_CERT_COMMON_NAME_INVALID? I just deleted ssl/server.pem and it regenerated, to no avail.. With localhost right? Has anyone else had success/failure with 2.7.1?. @paillave FWIW I still can't get it to work in Chrome 61/macOS 10.12.6, not sure what else to try. Finally I got this to work with webpack-dev-server@2.8.2\nI loaded it in Safari and set it to Always Trust for SSL and now it works in Chrome.\nIt shows as a root CA, is that correct?. ",
    "adiachenko": "Yeah, looks legit. I heard about this function but never quite understood how to work with it. I tried to return new request object from it instead on reassigning value on referenced object in place. You helped me. Thanks.\n. ",
    "plopinou": "For those like me who are mislead by the current available documentation, the rewrite option in webpack-dev-server 2 beta doesn't exist anymore.\nYou just have to use the options from the new http-proxy-middleware : https://github.com/chimurai/http-proxy-middleware\nSo if you want to remove any /api in the url, just use this code :\njavascript\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        pathRewrite: {\n          '/api' : ''\n        }\n      }\n    }\n  }\n. For those like me who are mislead by the current available documentation, the rewrite option in webpack-dev-server 2 beta doesn't exist anymore.\nYou just have to use the options from the new http-proxy-middleware : https://github.com/chimurai/http-proxy-middleware\nSo if you want to remove any /api in the url, just use this code :\njavascript\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        pathRewrite: {\n          '/api' : ''\n        }\n      }\n    }\n  }\n. For those like me who are mislead by the current available documentation, the rewrite option in webpack-dev-server 2 beta doesn't exist anymore.\nYou just have to use the options from the new http-proxy-middleware : https://github.com/chimurai/http-proxy-middleware\nSo if you want to remove any /api in the url, just use this code :\njavascript\ndevServer: {\n    port: 80,\n    proxy: {\n      '/api/*': {\n        host: 'api.io',\n        target: 'http://192.168.33.13/',\n        pathRewrite: {\n          '/api' : ''\n        }\n      }\n    }\n  }\n. ",
    "littlee": "yo~\nHow do I specify this option if I use the API way?\nhttps://webpack.github.io/docs/webpack-dev-server.html#api\n. ``` js\nvar webpack = require('webpack');\nvar WebpackDevServer = require('webpack-dev-server');\nvar config = require('./webpack.config.js');\nvar PORT = 3333;\nnew WebpackDevServer(webpack(config), {\n    publicPath: '/build/',\n    hot: true,\n    historyApiFallback: true,\n    stats: {\n        colors: true\n    },\n        host: '192.168.11.98'\n}).listen(PORT, 'localhost', function(err) {\n    if (err) {\n        console.log(err);\n        return;\n    }\n    console.log(':::Server Running::: ==> localhost:' + PORT);\n});\n```\n@glebmachine after adding host config,\nit still does not work\ncan you show me your working config file?\n. well, my version is 1.14.1 :flushed: \n. ",
    "glebmachine": "Hi @sokra, again)\nHow do i listen all request to my ip (with aliases like localhost or whatever)?\nMuch appreciated for help)\nUse case: I can't to access to WDS by 127.0.0.1 and internal network address like 192.168.10.180 simultaneously.\n. Damn, i had achieve that by set --host 0.0.0.0!\nThank you btw)\n. Yeah)\n. ",
    "adamreisnz": "In case you get some 404's in your browser when trying to access from LAN IP, make sure to remove the publicPath setting, or at least not hardcode it to localhost or an IP, as it will break resource loading.\n. ",
    "PierBover": "I set it like this:\nwebpack-dev-server --inline --content-base build/ --host 192.168.100.102\nYou probably don't need the inline and content-base options.\nIn my package.json set up a command that I run with npm run dev:\n\"scripts\": {\n  \"dev\": \"webpack-dev-server --inline --content-base dev-build/ --host 192.168.100.102\"\n}\n. I set it like this:\nwebpack-dev-server --inline --content-base build/ --host 192.168.100.102\nYou probably don't need the inline and content-base options.\nIn my package.json set up a command that I run with npm run dev:\n\"scripts\": {\n  \"dev\": \"webpack-dev-server --inline --content-base dev-build/ --host 192.168.100.102\"\n}\n. Since I don't use require() or import of CSS files I'm not sure Webpack would compile those. Would it?\nAlso I'm using bourbon and other sass libraries which makes sass compiling last a few seconds. I wouldn't want Webapck to compile sass every time there is a JS change.\nI don't think I'd have much control over those things with Webpack compared to Gulp or simple Node scripts.\n. Sounds great.\nBut then how can I tell sass-loader to build to a specific file?\n. ",
    "chenzhenxi": "FYI: For people who are using API.\nEquivalent to --host 0.0.0.0 is .listen(PORT, '0.0.0.0');.\n. ",
    "Birowsky": "What are you folks calling .listen() on?. ",
    "mkarajohn": "Is there a way to have this work with --open as well?\nIf I do --host 0.0.0.0 --open the browser opens at 0.0.0.0 which is not what we want.\nIf I do --host 0.0.0.0 --public localhost --open the browser opens at localhost which is not what we want, because there is no port specified\nIf I do --host 0.0.0.0 --public localhost:8080 --open the browser opens at localhost:8080 which is not ideal, because I may have another local server running at 8080 at that moment.\nSo, ideally, is there a way to have this work with --open while also automatically opening it on localhost on the correct port?. ",
    "Peripona": "Using --open works perfectly with this config. \n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"start\": \"webpack-dev-server --inline --content-base ./ --host 192.168.2.89 --port 3001 --open\",\n    \"prod\": \"webpack -p\"\n  }\nnpm start will use the correct ip and port and will open the app correctly\n. ",
    "markus-willems": "@joetidee you can use --host 0.0.0.0. From Wikipedia: In the context of servers, 0.0.0.0 can mean \"all IPv4 addresses on the local machine\". If you try to access your dev server via hostname (e.g. myDevServerMachine:8080) and get the Invalid Host header error, you have to set the allowedHosts option or set the disableHostCheck option to true (read the docs before doing so though).\nWith allowedhosts: webpack-dev-server --host 0.0.0.0 --allowed-hosts myDevServerMachine\nWith disableHostCheck: webpack-dev-server --host 0.0.0.0 --disable-host-check. ",
    "muhammadfaizan": "having same issue\n. ",
    "chenwardT": "...and this just occurred with an unrelated package. Looks like an NPM issue.\n. ",
    "Iliyass": "me too, I have the same error !\nUpdate:\nI have succeed at installing webpack-dev-server with this version \nnpm install --save-dev webpack-dev-server@1.9.0\n. ",
    "sceptre12": "I'm also receiving this error, Would this cause an internal issues with webpack? \n. ",
    "Clish": "@Iliyass it's not work for npm install webpack-dev-server@1.9.0 -g\n. ",
    "zsefvlol": "Same issue and solved.\nIt's not about the version, just DO NOT use -g or --global, and install it into local project, it works.\nThough I still want to install it globally...\n. ",
    "lenell16": "Peer Dependencies are no longer implicitly install as of node 5 check here. The latest version is Webpack is being installed through the devDependences. The peerDependencies code in package.json just hasn't been removed yet.\n. ",
    "mummybot": "Thanks @lenell16. So if:\n\n[t]his shifts the responsibility for fulfilling peer dependencies from library / framework / plugin maintainers to application authors\n\nShouldn't the latest version of webpack and webpack-dev-server just install with the basic install commands on the latest node and npm versions, and the beta non-resolving libraries be for edge developers?\nFor example using node 5.6.0 and npm 3.6.0 and run npm install webpack webpack-dev-server --save-dev on a brand new project I get unmet dependency errors.\nUpdates package.json:\n\"devDependencies\": {\n    \"webpack\": \"^2.1.0-beta.1\",   // If I set this manually to the latest non-beta tag\n                                  // \"^1.12.13\" it works fine.\n    \"webpack-dev-server\": \"^1.14.1\"\n  }\nAnd gives the following npm console output:\n```\n\u251c\u2500\u252c UNMET PEER DEPENDENCY webpack@2.1.0-beta.1\n\u2502 \u251c\u2500\u2500 acorn@3.0.2 \n\u2502 \u251c\u2500\u2500 async@1.5.2 \n\u2502 \u251c\u2500\u2500 clone@1.0.2 \n\u2502 \u251c\u2500\u252c enhanced-resolve@2.2.2 \n\u2502 \u2502 \u2514\u2500\u2500 graceful-fs@4.1.3 \n\u2502 \u251c\u2500\u2500 interpret@1.0.0 \n\u2502 \u251c\u2500\u2500 loader-runner@2.1.1 \n\u2502 \u251c\u2500\u252c loader-utils@0.2.12 \n\u2502 \u2502 \u251c\u2500\u2500 big.js@3.1.3 \n\u2502 \u2502 \u2514\u2500\u2500 json5@0.4.0 \n\u2502 \u251c\u2500\u252c memory-fs@0.3.0 \n\u2502 \u2502 \u251c\u2500\u252c errno@0.1.4 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 prr@0.0.0 \n\u2502 \u2502 \u2514\u2500\u252c readable-stream@2.0.5 \n\u2502 \u2502   \u251c\u2500\u2500 core-util-is@1.0.2 \n\u2502 \u2502   \u251c\u2500\u2500 isarray@0.0.1 \n\u2502 \u2502   \u251c\u2500\u2500 process-nextick-args@1.0.6 \n\u2502 \u2502   \u2514\u2500\u2500 util-deprecate@1.0.2 \n\u2502 \u251c\u2500\u252c mkdirp@0.5.1 \n\u2502 \u2502 \u2514\u2500\u2500 minimist@0.0.8 \n\u2502 \u251c\u2500\u252c node-libs-browser@1.0.0 \n\u2502 \u2502 \u251c\u2500\u2500 assert@1.3.0 \n\u2502 \u2502 \u251c\u2500\u252c browserify-zlib@0.1.4 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 pako@0.2.8 \n\u2502 \u2502 \u251c\u2500\u252c buffer@4.5.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 base64-js@1.0.4 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 ieee754@1.1.6 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 isarray@1.0.0 \n\u2502 \u2502 \u251c\u2500\u252c console-browserify@1.1.0 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 date-now@0.1.4 \n\u2502 \u2502 \u251c\u2500\u2500 constants-browserify@1.0.0 \n\u2502 \u2502 \u251c\u2500\u252c crypto-browserify@3.11.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c browserify-cipher@1.0.0 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c browserify-aes@1.0.6 \n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 buffer-xor@1.0.3 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c browserify-des@1.0.0 \n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c des.js@1.0.0 \n\u2502 \u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 minimalistic-assert@1.0.0 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 evp_bytestokey@1.0.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c browserify-sign@4.0.0 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 bn.js@4.10.3 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 browserify-rsa@4.0.0 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u252c elliptic@6.2.3 \n\u2502 \u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 brorand@1.0.5 \n\u2502 \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 hash.js@1.0.3 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u252c parse-asn1@5.0.0 \n\u2502 \u2502 \u2502 \u2502   \u2514\u2500\u2500 asn1.js@4.5.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 create-ecdh@4.0.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c create-hash@1.1.2 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 cipher-base@1.0.2 \n\u2502 \u2502 \u2502 \u2502 \u251c\u2500\u2500 ripemd160@1.0.1 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 sha.js@2.4.4 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 create-hmac@1.1.4 \n\u2502 \u2502 \u2502 \u251c\u2500\u252c diffie-hellman@5.0.2 \n\u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 miller-rabin@4.0.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 pbkdf2@3.0.4 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 public-encrypt@4.0.0 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 randombytes@2.0.2 \n\u2502 \u2502 \u251c\u2500\u2500 domain-browser@1.1.7 \n\u2502 \u2502 \u251c\u2500\u2500 events@1.1.0 \n\u2502 \u2502 \u251c\u2500\u252c http-browserify@1.7.0 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 Base64@0.2.1 \n\u2502 \u2502 \u251c\u2500\u2500 https-browserify@0.0.1 \n\u2502 \u2502 \u251c\u2500\u2500 os-browserify@0.2.0 \n\u2502 \u2502 \u251c\u2500\u2500 path-browserify@0.0.0 \n\u2502 \u2502 \u251c\u2500\u2500 process@0.11.2 \n\u2502 \u2502 \u251c\u2500\u2500 punycode@1.4.0 \n\u2502 \u2502 \u251c\u2500\u2500 querystring-es3@0.2.1 \n\u2502 \u2502 \u251c\u2500\u2500 stream-browserify@2.0.1 \n\u2502 \u2502 \u251c\u2500\u2500 string_decoder@0.10.31 \n\u2502 \u2502 \u251c\u2500\u2500 timers-browserify@1.4.2 \n\u2502 \u2502 \u251c\u2500\u2500 tty-browserify@0.0.0 \n\u2502 \u2502 \u251c\u2500\u252c url@0.11.0 \n\u2502 \u2502 \u2502 \u251c\u2500\u2500 punycode@1.3.2 \n\u2502 \u2502 \u2502 \u2514\u2500\u2500 querystring@0.2.0 \n\u2502 \u2502 \u251c\u2500\u2500 util@0.10.3 \n\u2502 \u2502 \u2514\u2500\u252c vm-browserify@0.0.4 \n\u2502 \u2502   \u2514\u2500\u2500 indexof@0.0.1 \n\u2502 \u251c\u2500\u2500 object-assign@4.0.1 \n\u2502 \u251c\u2500\u2500 source-map@0.5.3 \n\u2502 \u251c\u2500\u252c supports-color@3.1.2 \n\u2502 \u2502 \u2514\u2500\u2500 has-flag@1.0.0 \n\u2502 \u251c\u2500\u2500 tapable@0.2.4 \n\u2502 \u251c\u2500\u252c uglify-js@2.6.1 \n\u2502 \u2502 \u251c\u2500\u2500 async@0.2.10 \n\u2502 \u2502 \u251c\u2500\u2500 uglify-to-browserify@1.0.2 \n\u2502 \u2502 \u2514\u2500\u252c yargs@3.10.0 \n\u2502 \u2502   \u251c\u2500\u2500 camelcase@1.2.1 \n\u2502 \u2502   \u251c\u2500\u252c cliui@2.1.0 \n\u2502 \u2502   \u2502 \u251c\u2500\u252c center-align@0.1.3 \n\u2502 \u2502   \u2502 \u2502 \u251c\u2500\u252c align-text@0.1.4 \n\u2502 \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 longest@1.0.1 \n\u2502 \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 repeat-string@1.5.2 \n\u2502 \u2502   \u2502 \u2502 \u2514\u2500\u2500 lazy-cache@1.0.3 \n\u2502 \u2502   \u2502 \u2514\u2500\u2500 right-align@0.1.3 \n\u2502 \u2502   \u2514\u2500\u2500 window-size@0.1.0 \n\u2502 \u251c\u2500\u252c watchpack@1.0.1 \n\u2502 \u2502 \u251c\u2500\u2500 async@0.9.2 \n\u2502 \u2502 \u2514\u2500\u252c chokidar@1.4.2 \n\u2502 \u2502   \u251c\u2500\u252c anymatch@1.3.0 \n\u2502 \u2502   \u2502 \u251c\u2500\u2500 arrify@1.0.1 \n\u2502 \u2502   \u2502 \u2514\u2500\u252c micromatch@2.3.7 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c arr-diff@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 arr-flatten@1.0.1 \n\u2502 \u2502   \u2502   \u251c\u2500\u2500 array-unique@0.2.1 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c braces@1.8.3 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c expand-range@1.8.1 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u252c fill-range@2.2.3 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 is-number@2.1.0 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 isobject@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u2514\u2500\u2500 randomatic@1.1.5 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 preserve@0.2.0 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 repeat-element@1.1.2 \n\u2502 \u2502   \u2502   \u251c\u2500\u2500 expand-brackets@0.1.4 \n\u2502 \u2502   \u2502   \u251c\u2500\u2500 extglob@0.3.2 \n\u2502 \u2502   \u2502   \u251c\u2500\u2500 filename-regex@2.0.0 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c kind-of@3.0.2 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 is-buffer@1.1.2 \n\u2502 \u2502   \u2502   \u251c\u2500\u2500 normalize-path@2.0.1 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c object.omit@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c for-own@0.1.3 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 for-in@0.1.4 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 is-extendable@0.1.1 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c parse-glob@3.0.4 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 glob-base@0.3.0 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 is-dotfile@1.0.2 \n\u2502 \u2502   \u2502   \u2514\u2500\u252c regex-cache@0.4.2 \n\u2502 \u2502   \u2502     \u251c\u2500\u2500 is-equal-shallow@0.1.3 \n\u2502 \u2502   \u2502     \u2514\u2500\u2500 is-primitive@2.0.0 \n\u2502 \u2502   \u251c\u2500\u2500 async-each@0.1.6 \n\u2502 \u2502   \u251c\u2500\u252c fsevents@1.0.7 \n\u2502 \u2502   \u2502 \u251c\u2500\u2500 nan@2.2.0 \n\u2502 \u2502   \u2502 \u2514\u2500\u252c node-pre-gyp@0.6.19 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c mkdirp@0.5.1 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 minimist@0.0.8 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c nopt@3.0.6 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 abbrev@1.0.7 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c npmlog@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 ansi@0.3.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c are-we-there-yet@1.0.5 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 delegates@0.1.0 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u252c gauge@1.2.2 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u2500 has-unicode@1.0.1 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u252c lodash.pad@3.1.1 \n\u2502 \u2502   \u2502   \u2502   \u2502 \u251c\u2500\u2500 lodash._basetostring@3.0.1 \n\u2502 \u2502   \u2502   \u2502   \u2502 \u2514\u2500\u252c lodash._createpadding@3.6.1 \n\u2502 \u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 lodash.repeat@3.0.1 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u2500 lodash.padleft@3.1.1 \n\u2502 \u2502   \u2502   \u2502   \u2514\u2500\u2500 lodash.padright@3.1.1 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c rc@1.1.6 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 deep-extend@0.4.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 ini@1.3.4 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 minimist@1.2.0 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 strip-json-comments@1.0.4 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c request@2.67.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 aws-sign2@0.6.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 bl@1.0.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 caseless@0.11.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c combined-stream@1.0.5 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 delayed-stream@1.0.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 extend@3.0.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 forever-agent@0.6.1 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c form-data@1.0.0-rc3 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 async@1.5.1 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c har-validator@2.0.3 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u252c chalk@1.1.1 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 ansi-styles@2.1.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 escape-string-regexp@1.0.4 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c has-ansi@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 strip-ansi@3.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 supports-color@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u252c commander@2.9.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 graceful-readlink@1.0.1 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u252c is-my-json-valid@2.12.3 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 generate-function@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u252c generate-object-property@1.2.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u2502 \u2514\u2500\u2500 is-property@1.0.2 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 jsonpointer@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 xtend@4.0.1 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u252c pinkie-promise@2.0.0 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u2514\u2500\u2500 pinkie@2.0.1 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c hawk@3.1.2 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u2500 boom@2.10.1 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u2500 cryptiles@2.0.5 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u2500 hoek@2.16.3 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 sntp@1.0.9 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c http-signature@1.1.0 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u2500 assert-plus@0.1.5 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u251c\u2500\u252c jsprim@1.2.2 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 extsprintf@1.0.2 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u251c\u2500\u2500 json-schema@0.2.2 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2502 \u2514\u2500\u2500 verror@1.3.6 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u252c sshpk@1.7.2 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 asn1@0.2.3 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 assert-plus@0.2.0 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 dashdash@1.11.0 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 ecc-jsbn@0.1.1 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 jodid25519@1.0.2 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u251c\u2500\u2500 jsbn@0.1.0 \n\u2502 \u2502   \u2502   \u2502 \u2502   \u2514\u2500\u2500 tweetnacl@0.13.2 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 is-typedarray@1.0.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 isstream@0.1.2 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 json-stringify-safe@5.0.1 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c mime-types@2.1.9 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 mime-db@1.21.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 node-uuid@1.4.7 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 oauth-sign@0.8.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 qs@5.2.0 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 stringstream@0.0.5 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 tough-cookie@2.2.1 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 tunnel-agent@0.4.2 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c rimraf@2.5.0 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u252c glob@6.0.3 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u252c inflight@1.0.4 \n\u2502 \u2502   \u2502   \u2502   \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u252c minimatch@3.0.0 \n\u2502 \u2502   \u2502   \u2502   \u2502 \u2514\u2500\u252c brace-expansion@1.1.2 \n\u2502 \u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 balanced-match@0.3.0 \n\u2502 \u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 concat-map@0.0.1 \n\u2502 \u2502   \u2502   \u2502   \u251c\u2500\u252c once@1.3.3 \n\u2502 \u2502   \u2502   \u2502   \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502   \u2502   \u2502   \u2514\u2500\u2500 path-is-absolute@1.0.0 \n\u2502 \u2502   \u2502   \u251c\u2500\u2500 semver@5.1.0 \n\u2502 \u2502   \u2502   \u251c\u2500\u252c tar@2.2.1 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u2500 block-stream@0.0.8 \n\u2502 \u2502   \u2502   \u2502 \u251c\u2500\u252c fstream@1.0.8 \n\u2502 \u2502   \u2502   \u2502 \u2502 \u2514\u2500\u2500 graceful-fs@4.1.2 \n\u2502 \u2502   \u2502   \u2502 \u2514\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502   \u2502   \u2514\u2500\u252c tar-pack@3.1.2 \n\u2502 \u2502   \u2502     \u251c\u2500\u2500 debug@0.7.4 \n\u2502 \u2502   \u2502     \u251c\u2500\u252c fstream-ignore@1.0.3 \n\u2502 \u2502   \u2502     \u2502 \u2514\u2500\u252c minimatch@3.0.0 \n\u2502 \u2502   \u2502     \u2502   \u2514\u2500\u252c brace-expansion@1.1.2 \n\u2502 \u2502   \u2502     \u2502     \u251c\u2500\u2500 balanced-match@0.3.0 \n\u2502 \u2502   \u2502     \u2502     \u2514\u2500\u2500 concat-map@0.0.1 \n\u2502 \u2502   \u2502     \u251c\u2500\u2500 once@1.1.1 \n\u2502 \u2502   \u2502     \u251c\u2500\u252c readable-stream@2.0.5 \n\u2502 \u2502   \u2502     \u2502 \u251c\u2500\u2500 core-util-is@1.0.2 \n\u2502 \u2502   \u2502     \u2502 \u251c\u2500\u2500 isarray@0.0.1 \n\u2502 \u2502   \u2502     \u2502 \u251c\u2500\u2500 process-nextick-args@1.0.6 \n\u2502 \u2502   \u2502     \u2502 \u251c\u2500\u2500 string_decoder@0.10.31 \n\u2502 \u2502   \u2502     \u2502 \u2514\u2500\u2500 util-deprecate@1.0.2 \n\u2502 \u2502   \u2502     \u251c\u2500\u252c rimraf@2.4.5 \n\u2502 \u2502   \u2502     \u2502 \u2514\u2500\u252c glob@6.0.3 \n\u2502 \u2502   \u2502     \u2502   \u251c\u2500\u252c inflight@1.0.4 \n\u2502 \u2502   \u2502     \u2502   \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502   \u2502     \u2502   \u251c\u2500\u2500 inherits@2.0.1 \n\u2502 \u2502   \u2502     \u2502   \u251c\u2500\u252c minimatch@3.0.0 \n\u2502 \u2502   \u2502     \u2502   \u2502 \u2514\u2500\u252c brace-expansion@1.1.2 \n\u2502 \u2502   \u2502     \u2502   \u2502   \u251c\u2500\u2500 balanced-match@0.3.0 \n\u2502 \u2502   \u2502     \u2502   \u2502   \u2514\u2500\u2500 concat-map@0.0.1 \n\u2502 \u2502   \u2502     \u2502   \u251c\u2500\u252c once@1.3.3 \n\u2502 \u2502   \u2502     \u2502   \u2502 \u2514\u2500\u2500 wrappy@1.0.1 \n\u2502 \u2502   \u2502     \u2502   \u2514\u2500\u2500 path-is-absolute@1.0.0 \n\u2502 \u2502   \u2502     \u2514\u2500\u2500 uid-number@0.0.3 \n\u2502 \u2502   \u251c\u2500\u2500 glob-parent@2.0.0 \n\u2502 \u2502   \u251c\u2500\u252c is-binary-path@1.0.1 \n\u2502 \u2502   \u2502 \u2514\u2500\u2500 binary-extensions@1.4.0 \n\u2502 \u2502   \u251c\u2500\u252c is-glob@2.0.1 \n\u2502 \u2502   \u2502 \u2514\u2500\u2500 is-extglob@1.0.0 \n\u2502 \u2502   \u251c\u2500\u2500 path-is-absolute@1.0.0 \n\u2502 \u2502   \u2514\u2500\u252c readdirp@2.0.0 \n\u2502 \u2502     \u2514\u2500\u252c minimatch@2.0.10 \n\u2502 \u2502       \u2514\u2500\u252c brace-expansion@1.1.3 \n\u2502 \u2502         \u251c\u2500\u2500 balanced-match@0.3.0 \n\u2502 \u2502         \u2514\u2500\u2500 concat-map@0.0.1 \n\u2502 \u251c\u2500\u252c webpack-sources@0.1.1 \n\u2502 \u2502 \u2514\u2500\u2500 source-list-map@0.1.5 \n\u2502 \u2514\u2500\u252c yargs@3.32.0 \n\u2502   \u251c\u2500\u2500 camelcase@2.1.0 \n\u2502   \u251c\u2500\u252c cliui@3.1.0 \n\u2502   \u2502 \u2514\u2500\u2500 wrap-ansi@1.0.0 \n\u2502   \u251c\u2500\u252c decamelize@1.1.2 \n\u2502   \u2502 \u2514\u2500\u2500 escape-string-regexp@1.0.5 \n\u2502   \u251c\u2500\u252c os-locale@1.4.0 \n\u2502   \u2502 \u2514\u2500\u252c lcid@1.0.0 \n\u2502   \u2502   \u2514\u2500\u2500 invert-kv@1.0.0 \n\u2502   \u251c\u2500\u252c string-width@1.0.1 \n\u2502   \u2502 \u251c\u2500\u252c code-point-at@1.0.0 \n\u2502   \u2502 \u2502 \u2514\u2500\u2500 number-is-nan@1.0.0 \n\u2502   \u2502 \u2514\u2500\u2500 is-fullwidth-code-point@1.0.0 \n\u2502   \u251c\u2500\u2500 window-size@0.1.4 \n\u2502   \u2514\u2500\u2500 y18n@3.2.0 \n\u2514\u2500\u252c webpack-dev-server@1.14.1 \n  \u251c\u2500\u252c compression@1.6.1 \n  \u2502 \u251c\u2500\u252c accepts@1.3.1 \n  \u2502 \u2502 \u2514\u2500\u2500 negotiator@0.6.0 \n  \u2502 \u251c\u2500\u2500 bytes@2.2.0 \n  \u2502 \u251c\u2500\u252c compressible@2.0.7 \n  \u2502 \u2502 \u2514\u2500\u2500 mime-db@1.22.0 \n  \u2502 \u251c\u2500\u252c debug@2.2.0 \n  \u2502 \u2502 \u2514\u2500\u2500 ms@0.7.1 \n  \u2502 \u251c\u2500\u2500 on-headers@1.0.1 \n  \u2502 \u2514\u2500\u2500 vary@1.1.0 \n  \u251c\u2500\u2500 connect-history-api-fallback@1.1.0 \n  \u251c\u2500\u252c express@4.13.4 \n  \u2502 \u251c\u2500\u252c accepts@1.2.13 \n  \u2502 \u2502 \u2514\u2500\u2500 negotiator@0.5.3 \n  \u2502 \u251c\u2500\u2500 array-flatten@1.1.1 \n  \u2502 \u251c\u2500\u2500 content-disposition@0.5.1 \n  \u2502 \u251c\u2500\u2500 content-type@1.0.1 \n  \u2502 \u251c\u2500\u2500 cookie@0.1.5 \n  \u2502 \u251c\u2500\u2500 cookie-signature@1.0.6 \n  \u2502 \u251c\u2500\u2500 depd@1.1.0 \n  \u2502 \u251c\u2500\u2500 escape-html@1.0.3 \n  \u2502 \u251c\u2500\u2500 etag@1.7.0 \n  \u2502 \u251c\u2500\u252c finalhandler@0.4.1 \n  \u2502 \u2502 \u2514\u2500\u2500 unpipe@1.0.0 \n  \u2502 \u251c\u2500\u2500 fresh@0.3.0 \n  \u2502 \u251c\u2500\u2500 merge-descriptors@1.0.1 \n  \u2502 \u251c\u2500\u2500 methods@1.1.2 \n  \u2502 \u251c\u2500\u252c on-finished@2.3.0 \n  \u2502 \u2502 \u2514\u2500\u2500 ee-first@1.1.1 \n  \u2502 \u251c\u2500\u2500 parseurl@1.3.1 \n  \u2502 \u251c\u2500\u2500 path-to-regexp@0.1.7 \n  \u2502 \u251c\u2500\u252c proxy-addr@1.0.10 \n  \u2502 \u2502 \u251c\u2500\u2500 forwarded@0.1.0 \n  \u2502 \u2502 \u2514\u2500\u2500 ipaddr.js@1.0.5 \n  \u2502 \u251c\u2500\u2500 qs@4.0.0 \n  \u2502 \u251c\u2500\u2500 range-parser@1.0.3 \n  \u2502 \u251c\u2500\u252c send@0.13.1 \n  \u2502 \u2502 \u251c\u2500\u2500 destroy@1.0.4 \n  \u2502 \u2502 \u2514\u2500\u2500 statuses@1.2.1 \n  \u2502 \u251c\u2500\u2500 serve-static@1.10.2 \n  \u2502 \u251c\u2500\u252c type-is@1.6.11 \n  \u2502 \u2502 \u2514\u2500\u2500 media-typer@0.3.0 \n  \u2502 \u251c\u2500\u2500 utils-merge@1.0.0 \n  \u2502 \u2514\u2500\u2500 vary@1.0.1 \n  \u251c\u2500\u252c http-proxy@1.13.2 \n  \u2502 \u251c\u2500\u2500 eventemitter3@1.1.1 \n  \u2502 \u2514\u2500\u2500 requires-port@1.0.0 \n  \u251c\u2500\u252c optimist@0.6.1 \n  \u2502 \u2514\u2500\u2500 wordwrap@0.0.2 \n  \u251c\u2500\u252c serve-index@1.7.3 \n  \u2502 \u251c\u2500\u252c accepts@1.2.13 \n  \u2502 \u2502 \u2514\u2500\u2500 negotiator@0.5.3 \n  \u2502 \u251c\u2500\u2500 batch@0.5.3 \n  \u2502 \u251c\u2500\u2500 http-errors@1.3.1 \n  \u2502 \u2514\u2500\u2500 mime-types@2.1.10 \n  \u251c\u2500\u252c sockjs@0.3.15 \n  \u2502 \u251c\u2500\u252c faye-websocket@0.9.4 \n  \u2502 \u2502 \u2514\u2500\u252c websocket-driver@0.6.4 \n  \u2502 \u2502   \u2514\u2500\u2500 websocket-extensions@0.1.1 \n  \u2502 \u2514\u2500\u2500 node-uuid@1.4.7 \n  \u251c\u2500\u252c sockjs-client@1.0.3 \n  \u2502 \u251c\u2500\u252c eventsource@0.1.6 \n  \u2502 \u2502 \u2514\u2500\u2500 original@1.0.0 \n  \u2502 \u251c\u2500\u2500 faye-websocket@0.7.3 \n  \u2502 \u251c\u2500\u2500 inherits@2.0.1 \n  \u2502 \u251c\u2500\u2500 json3@3.3.2 \n  \u2502 \u2514\u2500\u252c url-parse@1.0.5 \n  \u2502   \u2514\u2500\u2500 querystringify@0.0.3 \n  \u251c\u2500\u2500 stream-cache@0.0.2 \n  \u251c\u2500\u252c strip-ansi@3.0.1 \n  \u2502 \u2514\u2500\u2500 ansi-regex@2.0.0 \n  \u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.0.0 <3\n  \u2514\u2500\u252c webpack-dev-middleware@1.5.1 \n    \u2514\u2500\u2500 mime@1.3.4 \nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.5.1 requires a peer of webpack@>=1.0.0 <3 but none was installed.\n``\n. Nice link to http://semver.npmjs.com/ @arantir ! The reason>=1.0.0-beta1works fine is that it is excluding the offending beta tag2.0.0-beta, not sure why given there is no^` to fix it to the major versions and 2 is greater than 1.\nGenerally I am not keen on installing webpack and webpack-dev-server globally. IMHO it is better to have all environmental packages included as part of a project so that setup for different developers is a known quantity.\nMy question to the webpack-dev-server dev contributors: why the have published the beta as the latest tag on npm such that npm install webpack-dev-server installs this rather than the latest stable release 1.14.1?\n. Nice link to http://semver.npmjs.com/ @arantir ! The reason >=1.0.0-beta1 works fine is that it is excluding the offending beta tag 2.0.0-beta, not sure why given there is no ^ to fix it to the major versions and 2 is greater than 1.\nGenerally I am not keen on installing webpack and webpack-dev-server globally. IMHO it is better to have all environmental packages included as part of a project so that setup for different developers is a known quantity.\nMy question to the webpack-dev-server dev contributors: why the have published the beta as the latest tag on npm such that npm install webpack-dev-server installs this rather than the latest stable release 1.14.1?\n. Are you proxying, using the iframe mode or referencing your scripts inline to the server run with Vagrant? It may be that the something in that server set up is conflicting with how the webpack-dev-server operates.\nI had an issue when trying to use webpack alongside Apache and Wordpress where things in Wordpress were impacting the webpack-dev-server: Wordpress was rewriting URLs and stripping the port required for proxying, and was making all referenced assets absolute URLs rather than starting with a '/' which meant Webpack couldn't reference them.\n. Webpack has many different ways to set up a project, and some of them conflict. The docs aren't too clear on exactly what combination of which you should be using when, and using virtual machines or over networks also complicates issues. I have a working simple repo here with hot module reloading:\nhttps://github.com/mummybot/webpack-hmr-network-multiple-entry-points-issue\n. What are you trying to achieve? \nBy host I assume you actually mean web server, as a URL is just a reference pointer to an actual server. In a normal web set up these are served from one server. If you want to have multiple hosts (API calls, serve separate HTML, split the assets et cetera) then you need to run multiple servers. A single Webpack Dev Server only serves the static assets (HTML, JS, images, CSS, fonts et cetera) which you have set it up to.\nWebpack Dev Server provides ways to integrate other servers with the Webpack static assets (a simple example), but fundamentally they are still separate servers.\n. Why do you need to change the host? Are you trying to access it from a remote browser (in a VM or a separate machine)? If so then your bundled assets should be linked without the host and port e.g. <script src=\"/build/bundle.sj\"></script>. Check out the simple example link in my previous reply to see this in action.\n\nIn most dev environments, the server just responds to a request and doesn't care what the host value (or domain name for a lack of a better term)\n\nThat's not true, servers require a mapping to point URLs to actual servers. I have multiple domains set up in my hosts file on my development machine pointing to different file locations: I run Apache with many different Virtual hosts, and multiple instances of Webpack Dev Server on different ports. You are right, localhost, 127.0.0.1 and your computer's network IP point to the same location on your development machine and the server running on the port enables the browser to get to any of the URLs. However depending on where you are trying to access those URLs from (your dev box or an external computer) the host values will gain their local context.\nSorry if all of this seems \"obvious\" and accessing it from other machines is not your issue. I just don't understand what you are trying to achieve.\nEdit: Removed text below that was not relevant - this is for referencing from an external machine AND working with an external server.\nI'm still learning this nonsense and am trying to get my head around it, but I think if you use the proxy option and provide the contentBase to the devServer, but no publicPath to the output you will find it resolves localhost/IP issues.\njavascript\noutput: {\n    path: path.resolve(__dirname, '/build'),\n    filename: 'bundle.js'\n},\ndevServer: {\n    contentBase: '/build',\n    proxy: {\n        '*': 'http://localhost:5000' // Your external server being proxied\n    }\n},\n. Okay, that makes more sense. I have yet to get hot reloading working remotely (very close though), but otherwise I have my local site set up so that it can be accessed via remote URLs. I'm not sure how an external IP mapped to your local IP will work in this situation. It hopefully will, give it a try. My set up is as follows:\n- Backend site is using Wordpress. HTML is generated by Wordpress and Webpack assets have to be included on page without host and port. This is served via an Apache Virtual host at http://mywpsite.dev\n- Assets served by Webpack Dev Server at http://localhost:8080\nHTML\n<!-- In head -->\n<link rel='stylesheet' href='/wp-content/themes/tpbc/build/main.css?ver=1.0.0' type='text/css' media='all' />\n<!-- At bottom of page -->\n<script type='text/javascript' src='/wp-content/themes/tpbc/build/app_bundle.js?ver=1.0.0'></script>\nThe webpack.config.js is:\n``` javascript\n/global require module __dirname/\nvar path = require('path'),\n  webpack = require('webpack'),\n  BrowserSyncPlugin = require('browser-sync-webpack-plugin'),\n  ExtractTextPlugin = require('extract-text-webpack-plugin'),\n  autoprefixer = require('autoprefixer'),\n  postcssImport = require('postcss-import'),\n  precss = require('precss');\nvar buildPath = 'wp-content/themes/tpbc/build/'; // Will probably be just 'build/' or 'dist/'. Wordpress themes are nested many directories.\nvar serverURL = 'http://localhost:8080/'; // Webpack Dev Server\nvar proxyURL = 'http://mywpsite.dev'; // Your external HTML server\nvar proxy = {\n  '*': proxyURL\n};\nvar config = {\n  entry: {\n    app: [\n      'webpack-dev-server/client?' + serverURL,\n      'webpack/hot/only-dev-server',\n      path.join(__dirname, 'src/main.js')\n    ]\n  },\n  output: {\n    path: path.resolve(__dirname, buildPath),\n    filename: '[name]_bundle.js',\n    publicPath: serverURL + buildPath\n  },\n  resolve: { alias: {} },\n  devServer: {\n    contentBase: serverURL + buildPath,\n    proxy: proxy\n  },\n  module: {\n    loaders: [\n      {\n        noParse: [],\n        test: /.jsx?$/,\n        loader: 'babel-loader',\n        query: {\n          presets: ['react', 'es2015']\n        }\n      },\n      { \n        test: /.s?css$/,\n        loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap&modules&importLoaders=1!postcss-loader')\n      }\n    ]\n  },\n  postcss: function(webpack) {\n    return [\n      postcssImport({ addDependencyTo: webpack }),\n      precss,\n      autoprefixer\n    ];\n  },\n  plugins: [\n    new BrowserSyncPlugin({\n      host: 'localhost',\n      port: 3000,\n      proxy: serverURL\n    },\n    {\n      reload: false\n    }),\n    // Set the name of the single CSS file here.\n    new ExtractTextPlugin('main.css', { allChunks: true }),\n    new webpack.HotModuleReplacementPlugin()\n  ]\n};\nmodule.exports = config;\n```\nBrowsersync is great, because it even gives you the output of the URLs to access by.\nIf you are not using an external server, then this is even easier. Just make sure that you haven't hardcoded your URLs into your index.html. You may need to mess around with output.publicPath and devServer.contentBase (this is what I am stuck on at the moment) but you should find a scenario which works for you.\n. I have tried adding CORS headers to devServer to no avail:\njavascript\ndevServer: {\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n    }\n  },\n. Hi @sokra and others,\nI have created a test repo with a simplified webpack.config.js to show exactly this happening. Hopefully it is just my config setup.\nCheers\n. Thanks for pointing me in the right direction @sokra :  I couldn't get this to work, possibly due to using a Mac locally and connecting via a windows machine which was not resolving the hostname correctly. However putting the IP in worked correctly:\n``` bash\nhttps://www.npmjs.com/package/ip\nnpm install ip --save-dev \n```\n'webpack-dev-server/client?http://' + require(\"ip\").address() + ':9191/',\n. Thanks for pointing me in the right direction @sokra :  I couldn't get this to work, possibly due to using a Mac locally and connecting via a windows machine which was not resolving the hostname correctly. However putting the IP in worked correctly:\n``` bash\nhttps://www.npmjs.com/package/ip\nnpm install ip --save-dev \n```\n'webpack-dev-server/client?http://' + require(\"ip\").address() + ':9191/',\n. Hi @sokra and others,\nI have created a test repo to show exactly this happening. Hopefully it is just my config setup.\nThanks for your help\n. Might be related to #416, the demo shows both bugs.\n. Thanks @sokra \nInstead of hardcoding your IP in the webpack config for different developers machines, you can use an IP library to specify the current IP.\n``` bash\nhttps://www.npmjs.com/package/ip\nnpm install ip --save-dev \n```\n'webpack-dev-server/client?http://' + require(\"ip\").address() + ':9191/',\n. Thanks @sokra \nInstead of hardcoding your IP in the webpack config for different developers machines, you can use an IP library to specify the current IP.\n``` bash\nhttps://www.npmjs.com/package/ip\nnpm install ip --save-dev \n```\n'webpack-dev-server/client?http://' + require(\"ip\").address() + ':9191/',\n. ",
    "ehzawad": "-- UNMET PEER DEPENDENCY webpack@^1.3.0\nSame here...Ubuntu 14.04.3 LTS...\n. ",
    "douglascorrea": "Same here using npm 3.6.0 and node 5.7.1\n. ",
    "cablegunmaster": "+1 on this issue! Got the same problem on the stable versions using the -g flags, without those it seem to work.\nUsing: webpack 1.12.14 \nand webpack-dev-server: 1.14.1\nCan't use this combination global even though they are the last stable releases. Which seems to me like a bug, or should be explained somewhere if there is a reason why it cannot be used global.\n. ",
    "bigdawggi": "I was having the same issue, and came across this other closed PR (https://github.com/webpack/webpack-dev-server/issues/429). Not quite expert-level enough to say why this works, but it does.  Possibly it's because my global npm dir has always been ~/.npm (back long before npm was 3.x when they changed some dependency management)??\n. I was having the same issue, and came across this other closed PR (https://github.com/webpack/webpack-dev-server/issues/429). Not quite expert-level enough to say why this works, but it does.  Possibly it's because my global npm dir has always been ~/.npm (back long before npm was 3.x when they changed some dependency management)??\n. ",
    "wataruoguchi": "+1 No error installing it locally, but globally.\nwebpack version is 1.12.14, though npm install -g webpack-dev-server tells\n/usr/local/bin/webpack-dev-server -> /usr/local/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js\n/usr/local/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.14.1 \n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\n. +1 No error installing it locally, but globally.\nwebpack version is 1.12.14, though npm install -g webpack-dev-server tells\n/usr/local/bin/webpack-dev-server -> /usr/local/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js\n/usr/local/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.14.1 \n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\n. ",
    "jakeNiemiec": "Fix:\nbash\n$ npm install -g webpack\n$ npm install -g webpack-dev-server    <- will error\n$ webpack-dev-server                   <- seems to work fine reguardless\n. Fix:\nbash\n$ npm install -g webpack\n$ npm install -g webpack-dev-server    <- will error\n$ webpack-dev-server                   <- seems to work fine reguardless\n. ",
    "wouterbeek": "Same issue here!  Fedora 23, Node.js 5.10.1, NPM 3.8.5.\nbach\nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n. Same issue here!  Fedora 23, Node.js 5.10.1, NPM 3.8.5.\nbach\nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n. ",
    "mengxiw": "The same issue when I install webpack with newest version --2.1.0-beta.6.\nNode.js-- 5.4.0, Npm --3.3.12\nnpm WARN EPEERINVALID webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN EPEERINVALID webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n. ",
    "raparlasiva": "Getting this unmet peer dependency message\n\n\u279c  ~ npm install webpack-dev-server -g\n/usr/local/bin/webpack-dev-server -> /usr/local/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js\n/usr/local/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.14.1 \n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\n\nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n. Getting this unmet peer dependency message\n\n\u279c  ~ npm install webpack-dev-server -g\n/usr/local/bin/webpack-dev-server -> /usr/local/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js\n/usr/local/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.14.1 \n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\n\nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n. ",
    "janaagaard75": "I think the solution is to install both webpack and webpack-dev-server at the same time. If you already have webpack installed, you don't need to uninstall it first. This was the solution for me.\nnpm install --global webpack webpack-dev-server\n. I think the solution is to install both webpack and webpack-dev-server at the same time. If you already have webpack installed, you don't need to uninstall it first. This was the solution for me.\nnpm install --global webpack webpack-dev-server\n. ",
    "kholbekj": "@janaagaard75 That suppressed the warning, but did not resolve the version missmatch. You'll get the same result installing them seperately, only diff is the warning.\n. @janaagaard75 That suppressed the warning, but did not resolve the version missmatch. You'll get the same result installing them seperately, only diff is the warning.\n. ",
    "robaxelsen": "Same issue here. Ubuntu 16.04, Nodejs v4.2.6, Npm v3.5.2.\n. Same issue here. Ubuntu 16.04, Nodejs v4.2.6, Npm v3.5.2.\n. ",
    "NivedhithaV": "+1\n. ",
    "Pyro979": "Same here. \nNPM 3.10.3\nNode 6.3.1\nvagrant@vagrant-ubuntu-trusty-64:/vagrant/app_ng$ npm install -g --no-bin-links\n webpack-dev-server@1.14.1\n/home/vagrant/.nvm/versions/node/v6.3.1/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.14.1\n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n. Weirdly enough it works in Win7 just fine.\nnode 6.2.1\nnpm 3.9.3\n. ",
    "gaboAcosta": "So, what the heck is wrong with webpack? is this a zombie project or how come no one from the contributors seem to comment about getting it fixed?\n. ",
    "DougFerron": "Having the same problem\n/usr/local/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.14.1 \n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\nFixed my my problem. I was using fish in my command line shell with webstorm after removing it all seems to work fine but not quite sure why. But I hope this helps  someone.\n. I did but I somehow fixed the problem after removing the fish shell. I don't know why this fixed it but all seems well now.\nDoug Ferron\ne:  dougferron@hotmail.co.uk\n\nFrom: Kees Kluskens notifications@github.com\nSent: 03 August 2016 18:55\nTo: webpack/webpack-dev-server\nCc: DougFerron; Author\nSubject: Re: [webpack/webpack-dev-server] After installing webpack@1.13.1 globally (#541)\nHave you also installed webpack globally? npm install webpack -g\n\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/webpack/webpack-dev-server/issues/541#issuecomment-237310450, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ACFENCtkr4OJn_tZtv0zIeDV-G9iQ4v1ks5qcNYFgaJpZM4JY2O3.\n. ",
    "jseyfert": "when i installed webpack localy it fixed the issue\n. ",
    "mgumiero9": "For me, the update of npm solved:\nsudo npm install -g npm\n. ",
    "dikidewanto": "yes, I just do : \nsudo npm update. ",
    "SrikanthChebrolu": "npm install --save-dev webpack-dev-server\nnpm ERR! code ENOVERSIONS\nnpm ERR! No valid versions available for pinkie-promise\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/srikanthchebrolu/.npm/_logs/2018-01-06T20_54_28_968Z-debug.log. Issue resolved, NPM outage affected it . ",
    "Chubby886": "With o. \n\n. \n. ",
    "bakkujp": "This is my solution. Install 3 packages together.\nnpm install -g webpack webpack-dev-server webpack-cli. ",
    "santoshsaho077": "No @bakkujp , it doesn't solve it. \nWhenever I try to install \" npm install && bower install \" , I get this error .\nCan anyone please suggest a solution \n$ npm install && bower install\nnpm WARN deprecated npmconf@0.0.24: this package has been reintegrated into npm and is now out of date with respect to npm\n\nphantomjs@1.9.7-15 install D:\\github\\from branch-2\\ui\\node_modules\\phantomjs\nnode install.js\n\ninvalid configloglevel=\"notice\"\nDownloading https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-windows.zip\nSaving to C:\\Users\\user\\AppData\\Local\\Temp\\phantomjs\\phantomjs-1.9.7-windows.zip\nReceiving...\nError making request.\nError: connect ETIMEDOUT 18.205.93.0:443\n    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1161:14)\nPlease report this full log at https://github.com/Medium/phantomjs\nnpm WARN grunt-util-args@0.0.6 requires a peer of grunt@~1 but none is installed. You must install peer dependencies yourself.\nnpm WARN webpack-dev-middleware@1.12.2 requires a peer of webpack@^1.0.0 || ^2.0.0 || ^3.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN webpack-dev-server@1.9.0 requires a peer of webpack@^1.3.0 but none is installed. You must install peer dependencies yourself.\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! phantomjs@1.9.7-15 install: node install.js\nnpm ERR! Exit status 1\nnpm ERR!\nnpm ERR! Failed at the phantomjs@1.9.7-15 install script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     C:\\Users\\user\\AppData\\Roaming\\npm-cache_logs\\2018-10-12T12_56_25_047Z-debug.log\n. ",
    "Noi-Git": "Hey guys,\nI got the same error message. I found this on Stack Overflow, and it works. \nrun this on the command line   -->    npm i -D webpack@latest\n+ webpack-cli@3.1.2\n+ @webpack-cli/init@0.1.2\nadded 563 packages from 320 contributors, updated 2 packages, moved 6 packages and audited 78499 packages in 35.325s\nfound 14 vulnerabilities (4 low, 6 moderate, 4 high)\n  runnpm audit fixto fix them, ornpm auditfor details\npatthamavadees-iMac:travel Noi$ webpack\nOne CLI for webpack must be installed. These are recommended choices, delivered as separate packages:\n - webpack-cli (https://github.com/webpack/webpack-cli)\n   The original webpack full-featured CLI.\nWe will use \"npm\" to install the CLI via \"npm install -D\".\nDo you want to install 'webpack-cli' (yes/no): npm audit fix\nYou need to install 'webpack-cli' to use webpack via CLI.\nYou can also install the CLI manually.\npatthamavadees-iMac:travel Noi$ npm install webpack-cli --save-dev\nnpm WARN @webpack-cli/generators@0.1.2 requires a peer of webpack@^4.x.x but none is installed. You must install peer dependencies yourself.\nnpm WARN ajv-keywords@2.1.1 requires a peer of ajv@^5.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN webpack-dev-middleware@3.4.0 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN webpack-dev-server@3.1.10 requires a peer of webpack@^4.0.0 but none is installed. You must install peer dependencies yourself.\nnpm WARN webpack-cli@3.1.2 requires a peer of webpack@^4.x.x but none is installed. You must install peer dependencies yourself.\nnpm WARN travel@1.0.0 No description\n. ",
    "huula": "Got the same issue here, accessing the rest api endpoint is fine, but through the proxy, only the initial part shows up. \nMight be caused by some response headers, since I don't have the issue before upgrading from PlayFramework 2.3 to 2.5.\n. ",
    "rmanuel200": "If anyone ever sees truncated json with the wds proxy if may be helpful to add this header to proxy config: headers: {\"Accept-Encoding\": \"\"}. Actually the fix may have been to add a host:\nhost:\"10.0.....\",\nbut https://localhost:3000 will spin a lot after [WDS] Disconnected!. This problem seems to be somewhat project specific but I can't narrow down what it is outside of webpack-dev-server 2 using inline. For instance I removed proxy:{..., vpn, route guards etc. Setting wds option inline:false also fixes the problem but we want the page refreshes on code change.\n. Actually the fix may have been to add a host:\nhost:\"10.0.....\",\nbut https://localhost:3000 will spin a lot after [WDS] Disconnected!. This problem seems to be somewhat project specific but I can't narrow down what it is outside of webpack-dev-server 2 using inline. For instance I removed proxy:{..., vpn, route guards etc. Setting wds option inline:false also fixes the problem but we want the page refreshes on code change.\n. Actually the fix may have been to add a host:\nhost:\"10.0.....\",\nbut https://localhost:3000 will spin a lot after [WDS] Disconnected!. This problem seems to be somewhat project specific but I can't narrow down what it is outside of webpack-dev-server 2 using inline. For instance I removed proxy:{..., vpn, route guards etc. Setting wds option inline:false also fixes the problem but we want the page refreshes on code change.\n. \n\n. \n\n. \n\n. Upgrading 2.4.2 didn't fix it. I don't have hot module enabled but it may be the same problem, it seems similar. I ran one of angular's seed projects and it worked fine but the project is simplistic. Not sure why binding to a specific host does the trick. BTW my chrome was updated by IT remotely and I just upgraded to latest webpack and started using localhost so there are many changes occuring at once.. Upgrading 2.4.2 didn't fix it. I don't have hot module enabled but it may be the same problem, it seems similar. I ran one of angular's seed projects and it worked fine but the project is simplistic. Not sure why binding to a specific host does the trick. BTW my chrome was updated by IT remotely and I just upgraded to latest webpack and started using localhost so there are many changes occuring at once.. Upgrading 2.4.2 didn't fix it. I don't have hot module enabled but it may be the same problem, it seems similar. I ran one of angular's seed projects and it worked fine but the project is simplistic. Not sure why binding to a specific host does the trick. BTW my chrome was updated by IT remotely and I just upgraded to latest webpack and started using localhost so there are many changes occuring at once.. I made a project skeleton that demos the issue. https://github.com/rmanuel200/testwds  . I made a project skeleton that demos the issue. https://github.com/rmanuel200/testwds  . I made a project skeleton that demos the issue. https://github.com/rmanuel200/testwds  . ",
    "kevin123de": "hello!I would like to ask you how to solve this problem.\n. ",
    "py-in-the-sky": ":+1: \nFor the time being, I have resolved this locally by fixing the version number of two npm packages:\n- npm install --save-dev socket.io-client@1.3.7\n- npm install --save-dev webpack-dev-server@1.12.1\n. ",
    "mnpenner": "@py-in-the-sky I tried your fix, I'm still seeing:\nXMLHttpRequest cannot load http://myproject.dev3:5584/assets/?EIO=3&transport=polling&t=1453247154614-3. A wildcard '*' cannot be used in the 'Access-Control-Allow-Origin' header when the credentials flag is true. Origin 'http://myproject.dev3' is therefore not allowed access.\n. I think I just solved it!\nIt works with inline: false + you have to omit the omit the path in the entry bundle: it should be something like webpack-dev-server/client?http://0.0.0.0:5584 not `webpack-dev-server/client?http://0.0.0.0:5584/assets/.\nSo my webpack-dev-server config is:\n``` js\nvar devServerPort = 5584;\nvar publicPath = webpackConfig.output.publicPath;\nwebpackMerge(webpackConfig, {\n    devtool:  debug ? 'source-map' : 'eval',\n    entry: {\n        main: [\n            'webpack-dev-server/client?http://0.0.0.0:' + devServerPort,\n            'webpack/hot/only-dev-server',\n        ],\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n    ],\n    devServer: {\n        port: devServerPort,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n        },\n        hot: true,\n        inline: false,\n        historyApiFallback: false,\n        stats: {\n            colors: true,\n        },\n        watchOptions: {\n            aggregateTimeout: 250,\n            poll: 50\n        },\n        watch: true,\n        host: '0.0.0.0',\n        noCredentials: true,\n        lazy: false, // No watching, compiles on request (cannot be combined with --hot).\n        quiet: false, // Display nothing to the console\n        noInfo: true, // Display no info to console (only warnings and errors)\n    },\n    output: {\n        publicPath: 'http://' + wxConfig.server + ':' + devServerPort + publicPath\n    }\n});\n```\nBy digging through the source I discovered that inline: true adds two entry bundles:\n- webpack-dev-server/client?http://0.0.0.0:5584\n- webpack/hot/dev-server\nI wanted webpack/hot/only-dev-server instead so I can't use inline: true.\nnoCredentials is not a valid option for devServer. One of the nested dependencies (sockjs) uses it somewhere, but it turns out it's not actually needed (anymore?). ~~\"Access-Control-Allow-Origin\": \"*\" alone will fix it.~~ [No headers are needed]\nTesting with webpack 1.12.11 and webpack-dev-server 1.14.1.\n. @tquetano-r7 Where specifically did you have emitError? In .eslintrc.js or somewhere else?\nI can't find that setting in either my webpack.config.js nor .eslintrc.js but this is the behaviour I'm observing.. I just had this issue with webpack-serve. Try adding:\njs\n                watchOptions: {\n                    aggregateTimeout: 250,\n                    poll: 50,\n                    ignored: /\\bnode_modules\\b/\n                },\nThat fixed it for me.. ",
    "garrettmaring": "Any update on this?\n. I really terrible hack to this is to go to the node_modules http-browserify and look for the lines that set the params.withCredentials to true. Comment this out and set it to false. Never a good idea to edit node_modules like that but I couldn't find a way of doing it through the webpack config!\n. ",
    "jonathanong": "sorry, this was because i configured it wrong. took days to figure out how to configure it correctly. lol.\ni haven't tried v2, but will once it's stable. don't wanna spend another few days on that :P\nthanks\n. ",
    "jamsesso": "Thanks for the merge. If there is a documentation repository I can make the changes for the proxy path tweak. I tested the /api/* path and I am pretty sure it worked. Can you verify that it is not working before the documentation is updated?\n. This ability was added in #359 (merged) along with onProxyRes and others.\n. ",
    "unindented": "@sokra What's the schedule for webpack-dev-server releases? I'd love to get this on npm.\n(I can't install it straight from git because npm doesn't seem to run the prepublish tasks.)\n. ",
    "fritx": "How to disable parent window.postMessage (probably called in sockjs) ?\nIn my case, it is the parent window was set to null by nw.js and caused the error.\n. ",
    "Pomax": "No idea, it's been about half a year since I ran into it, but it should be relatively straight forward to bootstrap a webpack config and seeing if this is still the case.\n. No idea, it's been about half a year since I ran into it, but it should be relatively straight forward to bootstrap a webpack config and seeing if this is still the case.\n. wfm, thanks\n. wfm, thanks\n. ",
    "cebor": "same issue, with latest 1.x version\n. same issue, with latest 1.x version\n. json\n{\n    \"webpack\": \"^1.12.12\",\n    \"webpack-dev-server\": \"^1.14.1\"\n}\nhmm ok\n. @katopz i haven't tried it with 2.0.0-beta yet, waiting for final\n. A workaround is renaming the template for HtmlWebpackPlugin.\nFor example: index.html -> index.tmpl.html. \nnew HtmlWebpackPlugin({\n  template: './src/index.tmpl.html',\n  chunksSortMode: 'dependency'\n}),\nSo the template does not get interpreted as index in the contentBase path.\n. works for me, thanks!\n. ",
    "Markus-ipse": "Same issue, here as well, with \"webpack-dev-server\": \"~1.14.1\" \n. Same issue, here as well, with \"webpack-dev-server\": \"~1.14.1\" \n. ",
    "iamface": "I'm having this issue as well. I have always not defined the --content-base but now using it serving into www folder --content-base www/ my app.js file cannot be found loading the index.html. If I remove it, my app continues to work.. I'm having this issue as well. I have always not defined the --content-base but now using it serving into www folder --content-base www/ my app.js file cannot be found loading the index.html. If I remove it, my app continues to work.. Hey @wbern,\nHere is an example config where I have this working in webpack 2.\n// webpack.config.js\nmodule.exports = {\n    // Output file\n    output: {\n        filename: 'app.js',\n        path: __dirname + '/public'\n    },\n}\n// package.json\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --content-base public/\",\n  },\nFolder structure:\n/app\n   - app.js\n/public\n   - index.html\n   - app.js\nWhen I start the dev server, I simply go to http://localhost and my app pulls up.. Hey @wbern,\nHere is an example config where I have this working in webpack 2.\n// webpack.config.js\nmodule.exports = {\n    // Output file\n    output: {\n        filename: 'app.js',\n        path: __dirname + '/public'\n    },\n}\n// package.json\n\"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --content-base public/\",\n  },\nFolder structure:\n/app\n   - app.js\n/public\n   - index.html\n   - app.js\nWhen I start the dev server, I simply go to http://localhost and my app pulls up.. ",
    "5angel": "Yeah, same thing here: for some reason, dev server cannot reach files in a subfolder (despite them being compiled there). Weird.. ",
    "kerryChen95": "@SpaceK33z \n\nNote that using contentBase when you're using html-webpack-plugin has no effect. contentBase is meant to serve static files in the given path. The index.html generated by html-webpack-plugin is not static, it's compiled by webpack.\n\nI guess it's because webpack-dev-server serve static files from memory instead of disk, thus webpack-dev-server cannot server index.html generated by html-webpack-plugin from disk, is it right? \nMoreover, how can we serve index.html by webpack-dev-server?\n. @SpaceK33z \n\nNote that using contentBase when you're using html-webpack-plugin has no effect. contentBase is meant to serve static files in the given path. The index.html generated by html-webpack-plugin is not static, it's compiled by webpack.\n\nI guess it's because webpack-dev-server serve static files from memory instead of disk, thus webpack-dev-server cannot server index.html generated by html-webpack-plugin from disk, is it right? \nMoreover, how can we serve index.html by webpack-dev-server?\n. ",
    "simonmysun": "Hi @SpaceK33z ,\nThank you for your great project. I have encountered a similar problem and found no answer could help. I must have mistaken the configuration file. Would you please help me have a look? I have deleted irrelevant code to make it clear, and uploaded to Github Repo. You may clone it, install the dependencies and run it. \nOn my computer npm run dev serves the directory and I can find the index.html and the bundle script nowhere. I have tried to add a contentBase attributed and the result is just serving the corresponding directory. Actually I don't have any static file to serve. \nBesides my environment is node@v7.4.0 and npm@4.1.1 on 4.8.13-1-ARCH. . @SpaceK33z I see! (but.. why?)\nThank you very much! . ",
    "wbern": "@SpaceK33z Been trying to follow your advice.\nI have these paths\n/target/classes/static/js/bundle.js\n/target/classes/static/index.html\n\npublicPath defined as \"/\"\noutput { path } points to path.join(__dirname, 'target/classes/static/js')\n\noutput: {\n    filename: '[name].js',\n    path: path.join(__dirname, 'dist/static'),\n    publicPath: 'static/',\n},\nEither the index.html file doesn't get picked up properly in static (or maybe not generated there), or I tinked around a bit and end up breaking something else.\nDo you have any good example config to share that is up-to-date with webpack 2?. @SpaceK33z Been trying to follow your advice.\nI have these paths\n/target/classes/static/js/bundle.js\n/target/classes/static/index.html\n\npublicPath defined as \"/\"\noutput { path } points to path.join(__dirname, 'target/classes/static/js')\n\noutput: {\n    filename: '[name].js',\n    path: path.join(__dirname, 'dist/static'),\n    publicPath: 'static/',\n},\nEither the index.html file doesn't get picked up properly in static (or maybe not generated there), or I tinked around a bit and end up breaking something else.\nDo you have any good example config to share that is up-to-date with webpack 2?. ",
    "leesiongchan": "+1\n. +1\n. ",
    "mindreframer": "that is true... could we keep up the 1.x releases for some time, until the rest of the ecosystem has caught up with changes? \nFor example I really need this commit: \n- https://github.com/webpack/webpack-dev-server/commit/434651fc21ddaea8f4875c1f4dd0eaea754f17d0\nI'm using a framework (Phoenix / Elixir) , that starts webpack in the background and currently it just continues to run after the main application stops. I was hoping for a 1.4.2 release, but it is only available in 2.0.0-beta, which I can't use, because there is a boatload of plugins not compatible with 2.0 webpack  (at least in the package.json). Updating them all just to be able to install webpack 2.0 is unfeasible. \nWould it be possible to release some more 1.4.x versions with changes that don't break backward-compatibility? \nThat would be great! \n. that is true... could we keep up the 1.x releases for some time, until the rest of the ecosystem has caught up with changes? \nFor example I really need this commit: \n- https://github.com/webpack/webpack-dev-server/commit/434651fc21ddaea8f4875c1f4dd0eaea754f17d0\nI'm using a framework (Phoenix / Elixir) , that starts webpack in the background and currently it just continues to run after the main application stops. I was hoping for a 1.4.2 release, but it is only available in 2.0.0-beta, which I can't use, because there is a boatload of plugins not compatible with 2.0 webpack  (at least in the package.json). Updating them all just to be able to install webpack 2.0 is unfeasible. \nWould it be possible to release some more 1.4.x versions with changes that don't break backward-compatibility? \nThat would be great! \n. ",
    "jamesdwilson": ":+1: having same problem \n. ",
    "danamajid": "Instead of using the hot: true flag, just add the hot module replacement plugin to your webpack.config.js\n. Instead of using the hot: true flag, just add the hot module replacement plugin to your webpack.config.js\n. ",
    "Elijen": "Having the same problem after upgrading to Webpack2. I tried to remove the --hot flag and use new webpack.HotModuleReplacementPlugin() in plugins, but no luck.\n@danamajid Do you know if there is anything else I need to do after migrating from Webpack1?\n. ",
    "alberto2000": "Any update on this? Having same issue but strangely only when editing html files. JS files trigger HMR correctly \ud83e\udd14\n. Any update on this? Having same issue but strangely only when editing html files. JS files trigger HMR correctly \ud83e\udd14\n. ",
    "jin5354": "Having the same problem after upgrading to Webpack2.. Having the same problem after upgrading to Webpack2.. ",
    "crohlfs": "Works for me after using both --hot and new webpack.HotModuleReplacementPlugin() (even though guides seem to say only use either) and having a webpack/hot/dev-server entry as outlined here. My setup has changed a bit since then, can't remember why. My current solution is:\n\nnew webpack.HotModuleReplacementPlugin() in my plugins list\na devServer entry in my webpack.config.js, I think you will need to have at least hot: true and inline: true\nand I run it with node ./node_modules/webpack-dev-server/bin/webpack-dev-server.js as an npm script\n\nIf you have it full refreshing it could mean you aren't watching for/applying the changes properly with the module.hot.accept callback. Using ES6 modules I do it as follows:\njs\nif (module && module.hot) {\n  module.hot.accept('./reducer', () => {\n    store.replaceReducer(rootReducer);\n  })\n}\nMy object rootReducer is defined as import rootReducer from './reducer';\nInside the callback it is automatically reimported with the hot reloaded changes (or any changes it depends on) and I put a line of code there to tell it how to apply the new rootReducer over the old one.\nIf you ever get the page full refreshing like that you should be able to figure out why from the console.. ",
    "oller": "Has anyone else got a definitive solution for this, I'm pretty sure I've tried every possible combination of:\n- CLI options hot/hotOnly/inline (which I do via grunt-webpack options),\n- adding/removing the webpack.HotModuleReplacementPlugin()\n- adding/removing the webpack-dev-server entry points.\nUnfortunately I can't replicate @crohlfs success!\nThe closest I can get is using just the hotOnly options so in the CLI: --hotOnly --inline, then the plugin webpack.HotModuleReplacementPlugin() defined and just the \"webpack/hot/only-dev-server\" added to the entry points array.  This will get styles hot replacing, however it limits the dev-server into only refreshing when it can hot replace, and this is not a react app, so a JS change just fires up a console.warn that this change would require a refresh, i.e. I need full hot mode, which I used to have with v1, hot replacing for styles - auto refreshing for js/html updates.\nVersions\n\"webpack\": \"^2.4.1\",\n\"webpack-dev-server\": \"^2.4.5\". +1 for this issue,  I'm on a mac, don't think it's a windows specific issue.. On further investigation, this looks like a duplicate of : https://github.com/webpack/webpack-dev-server/issues/364\nShall try those recommendations and shall close if appropriate. ",
    "mauron85": "I was facing same problem. In my case I was just missing webpack-dev-server dependency. Chrome console was actually showing '[WDS] App hot update...', so I'had feeling everything is ok, but no module was reloaded. Installing npm i webpack-dev-server --save-dev resolved my problem.. I was facing same problem. In my case I was just missing webpack-dev-server dependency. Chrome console was actually showing '[WDS] App hot update...', so I'had feeling everything is ok, but no module was reloaded. Installing npm i webpack-dev-server --save-dev resolved my problem.. ",
    "roz0n": "Hey guys, I ran into this issue today as well with an older React project where I didn't use create-react-app. I stitched together a few solutions from some Stack posts and ultimately did as @mauron85 instructed and it finally works. Here's my webpack.config.js in case others stumble upon this issue. \nNote: I am starting the dev server with webpack-dev-server --hot --inline\n```var path = require('path');\nmodule.exports = {\n    entry: [\n        './src/index.js'\n    ],\n    devServer: {\n      publicPath: \"/\",\n      contentBase: \"./dist\",\n      hot: true\n    },\n    output: {\n        path: path.join(__dirname, '/dist'),\n        filename: 'bundle.js',\n        publicPath: \"/\"\n    },\n    devtool: 'source-map',\n    module: {\n        loaders: [\n            {\n                test: /.jsx?$/,\n                loader: 'babel-loader',\n                exclude:   /node_modules/,\n                query: { presets: ['react']}\n            }\n        ]\n    }\n}\n. ",
    "davvidbaker": "Ran into this issue tonight too. Solution ended up being the exact same as @mauron85. I have webpack-dev-server installed globally, so the browser console was showing signs of life, but those should not have been trusted! \u26a0Beware misleading WDS messages from the console\u26a0!. ",
    "YangFan789": "The problem can be solved by cleaning up system temporary files.. ",
    "rastogiachyut": "I fixed this by increasing the number of watchers using:\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p. I fixed this by increasing the number of watchers using:\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p. ",
    "xiayx": "I forgot to use the command npm install webpack --save-dev,\nwhen i installed webpack-dev-server, warn webpack-dev-server@2.7.1 requires a peer of webpack@^2.2.0 || ^3.0.0 but none was installed.,  but I thought I had it installed, Actually not\n. ",
    "nosir": "Ran into the same issue, @mauron85 's solution solved it. ",
    "krini": "Removing the --hot flag solved my issue. ",
    "mersanuzun": "After 5 hours, I have solved the problem with removing 'hot: true' from options for WebDevServers constructor.\nconst devServer = new WebpackDevServer(compiler, {\n      publicPath: `http://0.0.0.0:${this.port}/`,\n      hot: true, // Removed\n      historyApiFallback: true,\n      stats: {\n        colors: true,\n        chunks: false\n      },\n      headers: { \"Access-Control-Allow-Origin\": \"*\"}\n    });. ",
    "DevCubeHD": "Problem still alive, just sayin. https://stackoverflow.com/questions/51813399/static-webpage-webpack-hotloader-does-not-work. ",
    "benzen": "You've got some conflict here, you'll need to resolve it before anything can be done\n. Which is the context in which is affect youy, the inline mode or the iframe mode?\n. I was wondering if you used this: https://webpack.github.io/docs/webpack-dev-server.html#iframe-mode\n. Thanks for the info.\nThis should be mentioned in the doc, or the new doc\n. ",
    "vmaudgalya": "I am currently using the bundled files, please let me know if/when you approve of the proxy options and I'll clean up this commit and revert commit 3027379\n. @jamsesso Thanks for letting me know! If you don't mind, could you please provide me with an example of it being used with the use case I have above (setting headers when a particular API is called)?\nMore specifically, how would I do this?\nproxy: {\n  \"/first/api/*\": \"http://localhost:8100\",\n  \"/second/api/*\" : \"http://localhost:8200\",\n  \"/third/api/*\" : \"http://localhost:8300\",\n  \"/fourth/api/*\" : \"http://localhost:8400\",\n  \"/fifth/api/*\" : \"http://localhost:8500\"\n },\n onProxyReq : function (proxyReq, req, res) {\n   if (req.path.indexOf(\"/first/api\") === 0) {\n     console.log(\"Called first API!\");\n   }\n   Object.keys(proxyHeaders).forEach(function (header) {\n     proxyReq.setHeader(header, proxyHeaders[header]);\n   });\n }\n. I figured it out: http://webpack.github.io/docs/webpack-dev-server.html\nIf anyone finds this, I used\n{\n    devServer: {\n        proxy: {\n            '/some/path*': {\n                target: 'https://other-server.example.com',\n                secure: false,\n                bypass: function(req, res, proxyOptions) {\n                    if (req.headers.accept.indexOf('html') !== -1) {\n                        console.log('Skipping proxy for browser request.');\n                        return '/index.html';\n                    }\n                },\n            },\n        },\n    },\n}\nfrom the documentation and modified the headers I was sending out.\n. ",
    "cloudsan": "+1, rollback to @1.14.0 is fine for me, \n. ",
    "le0pard": "The same error after update to 1.4.1\n. ",
    "liujason": "+1 rolledback to @1.14.0 fixed the problem. \n. ",
    "kwtangerine": "+1. thanks for the tip, rolling back to 1.14.0 works for me too\n. ",
    "christophehurpeau": ":+1: \n. :+1: \n. ",
    "kenjim83": "+1 me too.  1.14.0 works.\n. ",
    "Qrysto": "+1, same issue as this and #381. Why is this unresolved for so long?\n. ",
    "goodseller": "+1\n. +1\n. ",
    "denich": "+1\n. ",
    "foxtree": "+1\n. +1\n. ",
    "incleaf": "+1\n. Same problem with 1.14.0\n. ",
    "saponifi3d": "+1\n. ",
    "benediktarnold": "Any news on the merge? I'd love to see this in webpack\n. ",
    "dcosson": "+1\n. ",
    "margru": "I'm experiencing a similar issue with AJAX requests which are proxied to a backend server. It's a big issue as even POST requests are sent again by the webpack dev proxy server and thus creating multiple records on the server side (the creation takes some minutes to finish as some calculation are done there). Is there any possibility to set the proxy timeout or to avoid it completely?\n. I'm experiencing a similar issue with AJAX requests which are proxied to a backend server. It's a big issue as even POST requests are sent again by the webpack dev proxy server and thus creating multiple records on the server side (the creation takes some minutes to finish as some calculation are done there). Is there any possibility to set the proxy timeout or to avoid it completely?\n. ",
    "oers": "This was giving me major headaches. There seems to be hard wired timeout (like 2 minutes) after which the proxy sends the request again.\nI too have long running actions.\nThe second request will always crash due to database locks and report a failure to the client.\nI really need a way to disable this proxy timeout or set it to a higher value.\n. same issue like this?:\nhttps://github.com/webpack/webpack-dev-server/issues/369\nI think we need a way to configure/disable the timeout for long running requests.\n. ",
    "Martin-Wegner": "@SpaceK33z please reopen this issue because we got the same behaviour with 2.1.0-beta.11 :( We have a long running job (3-4 minutes) and after 2 minutes the proxy sends a second request to the server.. @SpaceK33z please reopen this issue because we got the same behaviour with 2.1.0-beta.11 :( We have a long running job (3-4 minutes) and after 2 minutes the proxy sends a second request to the server.. Hopefully @phillipj can fix it? An easy way, hmmm, a REST interface which waits 3 minutes before responding and logging all incoming requests... Or a nodejs server which the same functionality... I'm working on it!. Hopefully @phillipj can fix it? An easy way, hmmm, a REST interface which waits 3 minutes before responding and logging all incoming requests... Or a nodejs server which the same functionality... I'm working on it!. @phillipj how to set the timeout for the webpack dev server proxy?. @phillipj how to set the timeout for the webpack dev server proxy?. @phillipj it would be great if you could find it out next time you have a real computer :). @phillipj it would be great if you could find it out next time you have a real computer :). @phillipj this does not help :( After 2 minutes the request was repeated :(\nPlease checkout this little example:\nhttps://github.com/Martin-Wegner/webpack-dev-server-issue-369\nand run npm install and npm start.\nFinally open your brower and go to http://localhost:8080/test/.\nYou will see the message incoming request and after 2 minutes as second message incoming request.. @phillipj thanks.\n\nwhen the connection is closed before receiving a response from the server\n\nBut who closes the connection?\nIn general the connection should not be closed and therefore no retry should be applied. A good example is the use of asynchronous servlets for web push notifications.\n. @phillipj a PR would be great :). ",
    "phillipj": "Reading the previous comments here, the issue here is requests being retryed? Not the whole webapp being reloaded, like which was the issue issue in #478.\nWorth mentioning that 2 minutes is the default timeout in Node.js core, that's probably the reason several of you have experienced a 2 minute timeout. It's configurable with https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_request_settimeout_timeout_callback. Reading the previous comments here, the issue here is requests being retryed? Not the whole webapp being reloaded, like which was the issue issue in #478.\nWorth mentioning that 2 minutes is the default timeout in Node.js core, that's probably the reason several of you have experienced a 2 minute timeout. It's configurable with https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_request_settimeout_timeout_callback. ATM I don't know -- I don't have a computer available, and reading the source code on mobile isn't really my thing \ud83d\ude15. ATM I don't know -- I don't have a computer available, and reading the source code on mobile isn't really my thing \ud83d\ude15. As most of the proxy functionality comes from http-proxy-middleware, I'd try providing the proxyTimeout option:\njs\ndevServer: {\n  proxy: {\n    '/*': {\n        target: process.env.SERVER,\n        secure: false,\n        changeOrigin: true,\n        proxyTimeout: 1000 * 60 * 5, // 5 minutes\n    },\n  },\n},. @Martin-Wegner thanks for creating that repro project!\nI've done some digging now, and haven't found anything in webpack-dev-server or the http-proxy-middleware explicitly doing some retrying for all HTTP requests being proxied.\nBecause of that I started suspecting the browser as the culprit, and found a couple of hints suggesting that actually might be the case: http://stackoverflow.com/a/19697278. That's new to me and I've never encountered this before, but I don't have any other suspects ATM.. > But who closes the connection?\nExcellent question which made me do another round of digging, which let me to find the culprint.\nhttp-proxy doesn't set a timeout on the incoming request,  which is 2 minutes as default, and therefore closes the incoming request too early even when proxyTimeout is set.\nThe proxyTimeout option only sets timeout on the outgoing request the proxy makes, which is neccessary to solve this issue, but it's only one of the two timeouts which needs to be set.\nAlthough not documented, incoming requests to a Node.js HTTP server has default timeout of 2 minutes. If one wants to change that, request.setTimeout() has to be invoked.\nBy invoking req.setTimeout(x) in http-proxy's request listener and doing something similar in your repro server https://github.com/Martin-Wegner/webpack-dev-server-issue-369/pull/1, I was able to get the Hello World message printed.\nI probably won't be able to open a PR against the http-proxy module in the next few days, so anyone who wants to give it a shot, please go ahead.. @Martin-Wegner sorry for dropping the ball on this. I've submitted the PR https://github.com/nodejitsu/node-http-proxy/pull/1154, fingers crossed we'll get this fixed at last.. @Martin-Wegner sorry for dropping the ball on this. I've submitted the PR https://github.com/nodejitsu/node-http-proxy/pull/1154, fingers crossed we'll get this fixed at last.. @nhjk I stumbled upon this my self, so I opened #478. Fingers crossed it'll get merged :)\n. ",
    "mohankumarv2005": "Solved, please see https://github.com/webpack/webpack-dev-server/issues/391\nNeed to set timeout in Server.js. @yjcxy12, it worked perfectly, thanks!\nnode_modules\\webpack-dev-server\\lib\\Server.js\nthis.listeningApp.timeout = 600000; //10 Minutes. ",
    "mikechabot": "See: https://github.com/webpack/webpack/issues/1890\nFix: https://github.com/ampedandwired/html-webpack-plugin/pull/179\n. ",
    "samarhaider": "Changing Echo.channel('xyz') to window.Echo.channel('xyz') should fix that.\n. ",
    "agarwalsween": "@gatorcse\nHello Sir,\nStill, Getting same error ,Please help me asap.. ",
    "hmeerlo": "This issue still happens for me, only not on a hot reload. It happens at the first page load immediately. But the same stack (with punycode and url). My html-webpack-plugin is up-to-date (2.30.1). Any idea's?. ",
    "Dakuan": "@hmeerlo ditto, I've also created a stack overflow issue: https://stackoverflow.com/questions/48700978/webpack-dll-plugin-not-running. ",
    "Merott": "Just came across this myself - curious to know if it's expected behaviour or not...\n. ",
    "eric1iu": "Got this weird issue too. BTW, @andreisoare 'babel-polyfill' and NamedModulesPlugin significantly increase the bundle size. And I think you can remove 'babel-polyfill' since you use 'transform-runtime'.\n. Got this weird issue too. BTW, @andreisoare 'babel-polyfill' and NamedModulesPlugin significantly increase the bundle size. And I think you can remove 'babel-polyfill' since you use 'transform-runtime'.\n. ",
    "waldnercharles": "Shouldn't this decision be left to the developer to decide?\nIt's possible that webpack will create new files, but plugin's exist to clean up those old files. https://github.com/gpbl/webpack-cleanup-plugin for example.\nI'm fairly new to web development and webpack, but wouldn't cache-busting still be useful for development? . ",
    "ryanwilsonperkin": "@SpaceK33z looking at adopting this pattern for our own project but I have a question: if the bundle no longer has a hash in the name, how do we prevent the browser from caching a stale version of the bundle from a previous run?. ",
    "agupta1989": "\nClosing this, because you should not use [chunkhash] or [hash] for development. This will cause many other issues, like a memory leak, because the dev server does not know when to clean up the old files.\n\n:+1:  Make sense :)\n. Use reactions \ud83d\udc4d  option if you want to give more value to this issue instead of commenting +1.. Use reactions \ud83d\udc4d  option if you want to give more value to this issue instead of commenting +1.. ",
    "c0debreaker": "Folks, I'm interested about memory leak when hash is used. Memory leak in what? Is there any bug ticket related to the memory leak when hash is used? I'd like to read more about it. Thank you.. ",
    "GeekStocks": "This is a zombie issue (lol), it just won't die! I thought this issue was solved when @just-boris posted the following, which certainly voiced my frustration that no one was posting a solution to the issue:\n\nThe issue is closed, but no any solution has been provided. How do you solve the problem?\nSo far I have come up with the following code in my webpack config:\nfilename: `[name]${isDev ? '' : '[chunkhash:8]'}.js`,\nI am migrating websites to Webpack 4 this weekend, and my issue is that the concept of \"environment\" in Webpack has changed in v4. There is no longer a value for process.env.NODE_ENV upon which to create an isDev boolean to use in @just-boris code above. We are now being told to use --mode development in the command line.\n\nFor those in the same boat I offer my current solution, albeit hacky. After dumping process.env to the console and sifting the entrails, this code is working for me to provide the v4 environment boolean:\nlet isDev = (process.env.npm_lifecycle_script.indexOf('development') === -1) ? false : true;. ",
    "ImaginateWayne": "I have the same issue, also on osx \n. @cebor what version are you on? After looking through the code it appears that version 1.4.1 doesn't have the --open flag this is a 2.x.x feature.\n. It has been updated!\n. ",
    "katopz": "@cebor Get it working? which version btw? All I get is UNMET PEER DEPENDENCY when try to use 2.0.0 beta both webpack and web-pack-dev-server\n. ",
    "sigo": "The same issue here. Problem was affected at all linux-machine at our office. Explicitly defining watchOptions works.\nThanks @mnpenner.\n. ",
    "BHSPitMonkey": "@benzen What specifically do you mean? The problem in my case manifested by the <iframe> containing my application being drawn over the webpack error/stacktrace printout; The z-index fix in this patch solved it for me.\n. Ah, I wasn't aware it went by that name. But yes, that's where this bug comes in (the fix I made only affects CSS for the <iframe> element).\n. We could make it so the webpack messages and the application aren't stacked/positioned in the same place, and just lay them out sequentially?\n. ",
    "matiss": "I have the same situation as the OP. I also have a inline script which loads the bundle and I am getting the same error when I upgraded Webpack dev server to 1.14.1. Downgrade fixed the error, though.\n. ",
    "techird": "Same problem, seems a problem with 1.14.1, 1.14.0 is alright.\n. ",
    "Nebukam": "Same issue happened to me. Downgraded as well, works like a charm with 1.14.0\n. Same issue happened to me. Downgraded as well, works like a charm with 1.14.0\n. ",
    "adamhartford": "I was able to work around this with a hack-ish change:\n``` javascript\n\n    document.currentScript.src =''; // So that the script executes, but later has a src.</p>\n<pre><code>// ... Do rest of work.\n</code></pre>\n<p>\n```\n. ",
    "damonmcminn": "I also have this issue. The sole script tag on my page contains a src attribute:\n<script src=\"bundle.js\"></script>\nDowngrading to 1.14.0 solved the issue.\n. @idoco thanks!\nMy exact issue. Whitelisting the appropriate dev domains solves the issue.\n. @idoco thanks!\nMy exact issue. Whitelisting the appropriate dev domains solves the issue.\n. ",
    "marcelpanse": "Same problem here because of the Google Tag Manager script in the index.html\n. ",
    "JustinMGaiam": "This issue affected us as well.  Fixing it required setting webpack-dev-server to 1.14.0 in package.json and then the running npm install again.\n. ",
    "idoco": "Just to point out for anyone else having the same issue - \nFor me this issue occurred because of using the Poper Blocker chrome extension. I didn't have no script tag without 'src' attribute in the page I was working on, so it was very confusing to understand that this extension injects a script tag (without an 'src' attribute) during the page loading.\nI have disabled the extension until this issue will be fixed.\n. @adrianmc Yes, I think this is just because the extension injects a script tag with no 'src' attribute to the page which is the real root cause.\n. ",
    "adrianmcli": "@idoco I can confirm that the popup blocker extension is causing the error for me. Not sure why that is though.\n. ",
    "vutran": "Also getting this problem with the similar script injections. The solution provided above (downgrading to 1.14.0) works for me.\n. ",
    "imbhargav5": "I had this error because of a 'defer' attribute in my script tag.\n. ",
    "kamono": "I had this issue when the variable I used was equal to null. Just added a check to perform .replace if not null, and it works now. Hope this helps someone.\n. ",
    "lovemyliwu": "just for somebody rush into this issue:\ni missed there is no correct entry in webpack config file after i git check out other branch\nthe webpack still watch old entry. ",
    "maxifjaved": "faced the same issue. I just clear the cache data, it works.. faced the same issue. I just clear the cache data, it works.. ",
    "charlest7": "yeah. ",
    "lili21": "Sorry . I forget that.\nI think I am running webpack-dev-server mannual , by node.js api.\ndocs.\nHope that can be helpful.\n. ",
    "acusti": "Would be nice if this was fixed. Can\u2019t install webpack-dev-server 2.x. I\u2019m not clear why \">=2.0.3-beta <3\" fails on 2.0.7-beta, but it does. And either way, it seem silly that the lower bound of the currently listed peer dependency range (2.0.3-beta) doesn\u2019t exist as a published version of webpack.\n. Would be nice if this was fixed. Can\u2019t install webpack-dev-server 2.x. I\u2019m not clear why \">=2.0.3-beta <3\" fails on 2.0.7-beta, but it does. And either way, it seem silly that the lower bound of the currently listed peer dependency range (2.0.3-beta) doesn\u2019t exist as a published version of webpack.\n. Quick note for those on node v8.x: I also had to delete my package-lock.json file (in addition to node_modules) before running npm install. ",
    "Hatlen": "Webpack has released some new versions so I think this https://github.com/webpack/webpack-dev-server/pull/411 pull request might replace this.\nAlso found this site http://semver.npmjs.com/ that does an excellent job in explaining how npm version strings works.\n. :+1: \n. :+1: \n. Same thing here as my comment on your pull request for fixing babel-loader's package.json\n(changing 2.1.0-beta.0 to ^2.1.0-beta.0 would make it also match 2.1.0-beta.1 and 2.1.0-beta.2, which also has been released now)\n. :+1: \n. ",
    "dperetti": "The issue affects Electron as well !\n. ",
    "svsool": "Fix it and create another fresh pull https://github.com/webpack/webpack-dev-server/pull/594\n. for example in electron or any other opened local file in browser, protocol === 'file' and hostname = undefined, hence SockJs url resolves to \"http:/sockjs-node\" that caused a bug SyntaxError: The URL's scheme must be either 'http:' or 'https:'. 'file:' is not allowed, so we need to be sure that protocol contain 'http' part\n. ",
    "MatthiasWinkelmann": "Webpack-dev-server doesn't write to the fs but serves the requests from memory. See https://webpack.github.io/docs/webpack-dev-server.html#content-base.\n(+1 on your suggesting to improve the docs, or, even better, uninsanify the config) \n. The travis built is failing on the webpack version specifier, but I haven't found a way to successfully require the 2.0 betas in package.json because webpack apparently doesn't follow semver.\n. ",
    "Tjorriemorrie": "Thanks. What is the best practice to change your html file to include the webpack-dev-server files instead of the build files when developing?\n. Thanks. What is the best practice to change your html file to include the webpack-dev-server files instead of the build files when developing?\n. Using this does not help:\nentry: [\n        'webpack-dev-server/client?http://localhost:9898',\n        'webpack/hot/only-dev-server',\n        path.resolve(__dirname, 'assets/jsx/index.jsx')\n    ],\nUsage of this library is really confusing.\n. Using boilerplate example works fine, not sure what's wrong with my setup?\n. It seems I need to make it publicPath: 'http://localhost:9898/static/build', and prefix server with \"dev\": \"npm run build && .... This seems to work, but I'm not sure why there must be a physical file for it to initially work. And I thought the publicPath is for built assets' links?\n. ",
    "eisisig": "I just do\nentry: {\n    App: './scripts/index' ,\n    Profile: './profile.js',\n    Feed: './feed.js',\n    Dev: [\n        'webpack-dev-server/client?http://0.0.0.0:8080', \n        'webpack/hot/only-dev-server',\n    ]\n}\nAdd the dev stuff to it's own named entry\n. I found this in one of my project. Tried it and it worked. So you can use that as reference\nwebpack.config.js (entry)\njavascript\n// ...\nentry: {\n    main: [\n        './src/main'\n    ]\n},\noutput: {\n    path: path.join(__dirname, '/dist/'),\n    filename: '[name].bundle.js',\n    publicPath: 'http://localhost:9090/dist/',\n    chunkFilename: '[id].js'\n},\n// ...\nserver.js\n``` javascript\nvar express          = require('express'),\n    app              = express(),\n    webpack          = require('webpack'),\n    WebpackDevServer = require('webpack-dev-server'),\n    webpackConfig    = require('./webpack.config');\n// Serve index page\napp.get('*', function ( req, res ) {\n    res.sendFile(__dirname + '/index.html');\n});\nwebpackConfig.plugins.push(new webpack.HotModuleReplacementPlugin())\nwebpackConfig.entry.main = webpackConfig.entry.main.concat([\n    'webpack-dev-server/client?http://localhost:9090',\n    'webpack/hot/only-dev-server'\n])\nvar webpackServer = new WebpackDevServer(webpack(webpackConfig), {\n    publicPath: webpackConfig.output.publicPath,\n    hot: true,\n    historyApiFallback: true,\n    stats: { colors: true }\n});\nwebpackServer.listen(9090, 'localhost', function ( err ) {\n    if ( err ) { console.log(err); }\n});\nvar server = app.listen(8000, function () {\n    var host = 'localhost';\n    var port = server.address().port;\nconsole.log('React server listening at http://%s:%s', host, port);\n\n});\n```\nindex.html\nhtml\n<script src=\"http://localhost:9090/dist/main.bundle.js\"></script>\n. ",
    "shinygang": "@eisisig \nit's good ,but the HotModuleReplacementPlugin is not work when I used like your's code.\n```\n'use strict'\nvar webpack = require('webpack');\nvar WebpackDevServer = require('webpack-dev-server');\nvar config = require('./webpack.config');\n//config.entry.unshift('webpack-dev-server/client?http://localhost:9090', \"webpack/hot/dev-server\");\nconfig.entry.Dev = ['webpack-dev-server/client?http://localhost:9090', \"webpack/hot/dev-server\"];\nconfig.plugins.push(new webpack.HotModuleReplacementPlugin());\n//start app\nvar app = new WebpackDevServer(webpack(config), {\n    publicPath: config.output.publicPath,\n    hot:true,\n    historyApiFallback: true\n});\napp.listen(9090);\n```\n. ok\uff0cit's good! thanks.\n. ",
    "serkanyersen": "@sokra Thanks for the reply, we switched to inline mode because of this problem. \n. ",
    "revathskumar": "@sokra Is this settings available on webpack 1.x? . ",
    "ShadowManu": "@sokra any reference to the PR? angular/angular-cli seems to have an error about this and I'm searching for information about it.. ",
    "pjivers": "@sokra Any reference to the PR?. I agree with @e01010100 . I just ran into this issue and it took me a while to figure out what was going on (Thought it had something to do with my webpack config or babel-loader).. I agree with @e01010100 . I just ran into this issue and it took me a while to figure out what was going on (Thought it had something to do with my webpack config or babel-loader).. ",
    "asfernandes": "I'm still having a timeout with a reconnect after 2 minutes with webpack-dev-server 2.11.1.. ",
    "fuadmuhtaz": "If you want no timeout you can set 0 to proxyTimeout and onProxyReq.. ",
    "qhwa": "+1 \n. ",
    "vinhlh": "yo guys, why dont you guys release a new npm version for this?\n. yo guys, why dont you guys release a new npm version for this?\n. Yo guys, let's try to change * to **. It works for me with latest webpack-dev-server (latest commit).\nCheck wildcard path matching section in https://github.com/chimurai/http-proxy-middleware\n. Yo guys, let's try to change * to **. It works for me with latest webpack-dev-server (latest commit).\nCheck wildcard path matching section in https://github.com/chimurai/http-proxy-middleware\n. already fixed in https://github.com/webpack/webpack-dev-server/commit/2c9a461b3433bb9d58fa2cea576aab822b88d5fd\n. already fixed in https://github.com/webpack/webpack-dev-server/commit/2c9a461b3433bb9d58fa2cea576aab822b88d5fd\n. ",
    "joual": "I have the exact same issue. I narrowed it down to the same line. It adds module ID 0 as a parent. I setup an example repo reproducing the issue both with the CLI and a separate server.\nhttps://github.com/joual/hmrbreak\n. ",
    "AriaFallah": "Have you tried\njavascript\nif (module.hot)\n  module.hot.accept()\nhttps://webpack.github.io/docs/hot-module-replacement-with-webpack.html#what-is-needed-to-use-it\nI know more than a few people who have forgotten this, and didn't know why HMR was not working.\n. @hammeiam https://github.com/AriaFallah/WebpackTutorial/issues/18#issuecomment-187722775\n. Take a look here:\nhttps://github.com/AriaFallah/WebpackTutorial/tree/master/part1/html-reload\nand here\nhttp://stackoverflow.com/questions/33183931/how-to-watch-index-html-using-webpack-dev-server-and-html-webpack-plugin\n. ",
    "hammeiam": "@iroy2000 Could you post some more details on step 2 of your resolution? Much appreciated! \n. ",
    "henrikra": "I installed this plugin https://github.com/gaearon/react-transform-hmr and now my webpack doesn't do full reload anymore! :dancers: \n. ",
    "mattisa": "@AriaFallah: \nif (module.hot)\n  module.hot.accept()\nWorks for me. Did not notice that on documentation at first. \n. ",
    "zwhitchcox": "Nevermind, as usual, it was me being a f***ing moron\n. Lmao. You've got to put development in a string. So, it would need to be \njs\nnew webpack.DefinePlugin({\n        'process.env.NODE_ENV': '\"development\"'\n Otherwise, the define plugin just literally puts development with no quotation marks, which makes it an undefined variable.\n. But that can't be right, because it works when I run webpack-dev-server from the command line, and that gets run on the same environment. I haven't been able to find an react example with the webpack-dev-server node api. I've verified that it does the same thing on other machines, so if you were to clone the repo, it would even do it on your machine. Again, it only does it with the node api, not from command line. the \"http://www.w3.org/2000/svg\" is just the jsx I was using. If I made a different error in the jsx, it would output that. . Ok, I went ahead and copied the webpack-dev-server node-api example, and the only thing I changed was to add the babel-preset-react to it, and it outputs the garbly gook. https://github.com/zwhitchcox/webpack-dev-server-bug\nSo, the webpack-dev-server from the command line works, fine and only outputs the garbldy gook with the node api. Is this the intended behavior? It doesn't seem like very good design. If this is a bug, will you please reopen this issue.. You win. ",
    "bigsee": "\ud83d\udc46\ud83c\udffdThis... \n...made me look for stupid, obvious stuff and found an accidentally duplicated folder that was confusing things. \ud83d\ude48\nThank you, @Offirmo!. ",
    "zhangmengxue": "@jiayihu Hi,What do you mean?\nIn my experience , the bundle in the output path doesn't served when modified .It seems not be written to my configured output directory. I still couldn't find a way out. \nNow,when i change something, I have to control+C & webpack &webpack-dev-server.\ner....\nthis is my webpack.config.js:\n```\nvar webpack = require('webpack');\nvar path = require('path');\nvar ROOT_PATH = path.resolve(__dirname);\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\nentry: [\n    'webpack/hot/dev-server',\n     path.resolve(ROOT_PATH, 'www/src/p/index.js')\n  ],\noutput: {\n    path: path.resolve(ROOT_PATH, 'www/build'),\n    filename: 'bundle.js'\n  },\nmodule: {\n    loaders: [\n        { test: /.css$/, loader: \"style!css\" },\n        {test: /.less/,loader: 'style-loader!css-loader!less-loader'},\n        {\n          test: /.js$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n          query:\n          {\n            presets:['react']\n          }\n        }\n    ]\n  },\nresolve:{\n      extensions:['','.js','.json']\n  },\ndevServer: {\n    contentBase: path.resolve(ROOT_PATH,'www/build'),\n    hot: true,\n    inline: true,\n    historyApiFallback: false\n  },\nplugins: [\n    new webpack.NoErrorsPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new HtmlwebpackPlugin({\n      title: 'Task'\n    })\n  ]\n};\n```\n. @jiayihu Hi,What do you mean?\nIn my experience , the bundle in the output path doesn't served when modified .It seems not be written to my configured output directory. I still couldn't find a way out. \nNow,when i change something, I have to control+C & webpack &webpack-dev-server.\ner....\nthis is my webpack.config.js:\n```\nvar webpack = require('webpack');\nvar path = require('path');\nvar ROOT_PATH = path.resolve(__dirname);\nvar HtmlwebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\nentry: [\n    'webpack/hot/dev-server',\n     path.resolve(ROOT_PATH, 'www/src/p/index.js')\n  ],\noutput: {\n    path: path.resolve(ROOT_PATH, 'www/build'),\n    filename: 'bundle.js'\n  },\nmodule: {\n    loaders: [\n        { test: /.css$/, loader: \"style!css\" },\n        {test: /.less/,loader: 'style-loader!css-loader!less-loader'},\n        {\n          test: /.js$/,\n          exclude: /node_modules/,\n          loader: \"babel-loader\",\n          query:\n          {\n            presets:['react']\n          }\n        }\n    ]\n  },\nresolve:{\n      extensions:['','.js','.json']\n  },\ndevServer: {\n    contentBase: path.resolve(ROOT_PATH,'www/build'),\n    hot: true,\n    inline: true,\n    historyApiFallback: false\n  },\nplugins: [\n    new webpack.NoErrorsPlugin(),\n    new webpack.HotModuleReplacementPlugin(),\n    new HtmlwebpackPlugin({\n      title: 'Task'\n    })\n  ]\n};\n```\n. ok, I was figure out this through https://webpack.github.io/docs/webpack-dev-server.html#combining-with-an-existing-server . actually , where is the newest bundle.js file is the issue.\n. ",
    "jiayihu": "@zhangmengxue thanks for your reply! I already solved the problem and it was my fault, since I wrote the wrong src path when including the script in my HTML file. Therefore it loaded the script in the disk meanwhile the one in the memory was also available on a different path.\nI thought it was an issue because someone else already had the same problem (from a quick search on Google) and no solution was provided.\nI'm going to close this issue.\n. @zhangmengxue thanks for your reply! I already solved the problem and it was my fault, since I wrote the wrong src path when including the script in my HTML file. Therefore it loaded the script in the disk meanwhile the one in the memory was also available on a different path.\nI thought it was an issue because someone else already had the same problem (from a quick search on Google) and no solution was provided.\nI'm going to close this issue.\n. ",
    "johnnyoshika": "@mummybot: I want my server to respond to any request as long as it receives it.\nFor example, all of these:\n- http://localhost:3000\n- http://127.0.0.1:3000\n- http://192.168.1.100:3000\nIn most dev environments, the server just responds to a request and doesn't care what the host value (or domain name for a lack of a better term) is as long as the request is received (e.g. Ember CLI, ASP.NET Server, Node.js).  With Webpack Dev Server, I need to keep changing the host parameter when I switch from  http://localhost:3000 to http://192.168.1.100:3000 for example.\n. Thank you @mummybot  for all of this info.  The reason why I need to access it using multiple IP/host/domain (not sure what the right term is :-)) is that I'm trying to access the server from many devices (for example, test with iPhone, Android, tablets, etc).  I could hard code my machine's IP address but that will break other developer's environments as soon as I check in my code.  So here's our situation:\nDeveloper 1:\n\nDevelopment machine IP Address is 192.168.1.100\nWants to test with a mobile device on http://192.168.1.100:3000\n\nDeveloper 2:\n\nDevelopment machine IP Address is 192.168.1.200\nWants to test with a mobile device on http://192.168.1.200:3000\nWants to also let external testers access the server via external IP address: http://123.123.123.123:3000\n\nDesigner:\n\nHas no idea what his IP address is and doesn't care.\nWants to test on http://localhost:3000\n\nSo what we all end up doing is changing the host value in Webpack Dev Server to support our individual scenarios.  We sometime even create custom domain mappings in our host file to support this.  But of course we need to make sure we don't check in this change into source control, otherwise, we could break the environments of other developers (which has already happened many times).  So every time we make a commit or pull from remote, we're constantly being reminded that we need to pay attention to the host parameter in Webpack Dev Server.  Compare this to developing using Ember CLI.  We just run our server and everything works.  We never worry about setting the host value.\nI hope that makes sense.  I'm hoping I can enable something similar in Webpack Dev Server.  \nPlease let me know if there's any other information I can provide.\nThanks!\n. @mummybot: Just had a look at your proxy comment.  Although we do use a proxy to support other requirements, I don't think it will solve our host problem (unless i misunderstood you).  Thanks!\n. @sokra: wow, that's exactly what I was looking for.  0.0.0.0 is the catch-all host.\n. @sokra: wow, that's exactly what I was looking for.  0.0.0.0 is the catch-all host.\n. ",
    "matteodem": "Would be extremely helpful to have that in the webpack docs.\n. ",
    "fweep": "0.0.0.0 worked in this case, and it works for most people, but there are legitimate reasons for binding to multiple specific hosts, rather than wildcard. I want to bind to multiple addresses for the same reason that @johnnyoshika wanted to bind to different addresses: testing from multiple machines on my LAN, and also from localhost. I'm going to use 0.0.0.0 as well, but I really don't want it binding to my public IP address. I'll firewall it off, but the right solution is to allow binding the multiple specific hosts. If I stick with webpack, I'll look into submitting a patch.\n. ",
    "AlennGK": "@mummybot thank you sir, this is awesome I am looking for this solution ages. \u2665\n(I don't know how, but my <links> are kinda strange, but working: http://localhost:8080/Z:/.../Devjs/app.bundle.js and my js files are in public not Dev). ",
    "Cristy94": "Any updates on this?  I need to have two  hostnames, one for local one for LAN connection from other PCs, I need to use hostnames so that the HTTPS certificate work locally. (local.site.com and pc1.site.com). Any updates on this?  I need to have two  hostnames, one for local one for LAN connection from other PCs, I need to use hostnames so that the HTTPS certificate work locally. (local.site.com and pc1.site.com). ",
    "kubatek94": "@Cristy94\nI have following config and it works nicely behind reverse proxy:\ndevServer: {\n            host: '0.0.0.0',\n            port: '7654',\n            hot: true,\n            inline: true,\n            disableHostCheck: true,\n            public: '0.0.0.0:0'\n        },\nWith such config, due to setting public to '0.0.0.0:0', it works because:\n- hostname is overridden to use window location on this line:\nhttps://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js#L182\n\nport is overridden to use window location port on this line:\nhttps://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js#L42. @MatTheCat Actually there is a hack for the port - it needs to be 0.\nI have following config and it works nicely behind reverse proxy:\n\ndevServer: {\n            host: '0.0.0.0',\n            port: '7654',\n            hot: true,\n            inline: true,\n            disableHostCheck: true,\n            public: '0.0.0.0:0'\n        },\nWith such config, due to setting public to '0.0.0.0:0', it works because:\n- hostname is overridden to use window location on this line:\nhttps://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js#L182\n\nport is overridden to use window location port on this line:\nhttps://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js#L42\n. \n",
    "lemieux": "Pretty sure it's related to webpack 2.0 and not to webpack-dev-server because it's happening to me on webpack-dev-server 1.14.1 with webpack 2.0-beta4. I'll try to downgrade to webpack 1 .\n. ",
    "aaugustin": "You're probably right.\nIn my project, this doesn't seem to happen anymore with webpack 2.1.0 beta.\n. ",
    "favetelinguis": "Just updated npm to v3.7.3 but still getting the same problem.\n. Just updated npm to v3.7.3 but still getting the same problem.\n. turned out node was already using 8080.\n. ",
    "marko911": "\nI have similar issue, but I get 404 instead of CONN refused. I am using dev middleware and hot middleware on express server to run the server. The page loads fine but the hot reload doesn't work. When I save a change , webpack rebuilds but doesn't automatically load the changes in the browser. \nwebpack conifg:\nentry: [\nrequire.resolve('webpack-dev-server/client'),\nrequire.resolve('webpack/hot/dev-server'),\nrequire.resolve('./polyfills'),\nrequire.resolve('webpack-hot-middleware/client'),\npath.join(paths.appSrc, 'index')\n  ],\noutput: {\n// Next line is not used in dev but WebpackDevServer crashes without it:\npath: paths.appBuild,\npathinfo: true,\nfilename: 'bundle.js',\npublicPath: '/'\n },\nserver.js : \n```\n  const express = require('express');\n  const path = require('path');\n  const app = express();\n  const webpackDevMiddleware =require('webpack-dev-middleware');\n  const webpackHotMiddleware =require('webpack-hot-middleware');\n  require('babel-core/register');\n// const router=express.Router();\n  // app.use(router);\n(function (){\nconst webpack=require('webpack');\nconst config=require('../config/webpack.config.dev');\nconst compiler=webpack(config);\n\napp.use(webpackDevMiddleware(compiler, {\n    publicPath: config.output.publicPath,\n    stats: {colors: true}\n}));\n\napp.use(webpackHotMiddleware(compiler, {\n  log: console.log,\n  path: '/__webpack_hmr',\n  heartbeat: 10 * 1000\n}));\n\n})();\napp.use(express.static('../'));\napp.listen(3000, ()=>console.log('Listening on port 3000'));\n```\nAny ideas?\n. ",
    "ralphsmith80": "I also has some issues using \n'webpack-dev-server/client?http://' + require(\"os\").hostname() + ':9090/',\nI expect using the IP as @mummybot suggested would work, but I just used 0.0.0.0.\n'webpack-dev-server/client?http://0.0.0.0:9090'\n. ",
    "rlabrecque": "Just for future reference I was hitting 404 on this because I had: 'webpack-dev-server/client?0.0.0.0:9090' without the http://\n. ",
    "rnitame": "@chrchm I've fixed this issue.\nrefs https://github.com/webpack/webpack-dev-server/issues/704#issuecomment-262242139. ",
    "gfried77": "For all people with the same error. It will also occur if your server (webpack-dev-sever) is listening on another port (e.g. 8080) than in line \n\"webpack-dev-server/client?http://localhost:3000\" \nChange the webpack.config.js to \ndevServer: {\n    host: 'localhost', \n    port: 3000\n  },\nor change the port in the correspoding line:\n\"webpack-dev-server/client?http://localhost:8080\" to correct the port.\n. ",
    "onehorsetown": "@gfried77 - Thanks!\n. ",
    "stevenmusumeche": "@gfried77 you're my hero. ",
    "kaleemullah360": "since I am using angular-cli based project. it uses webpack but all the configurations are hidden from user. I mean I can't find webpack.config.js so please help me. ",
    "scottsword": "I get this error if I try and do a get request on webpack dev server.\ne.g.\n// From a completely different web server I make a request to webpack dev server.\n$.getScript('http://localhost:8081/bundle.js', function() {\n  console.log('loaded'); \n});\nThe above actually works fine, but then it sets off all the get requests to the sock-js that blow up my console. Is there a way to just disable this? I'm not using HMR.. Turns out my issue was because I was running code on https and when I request something from webpack dev server it runs the socket code and uses whatever level of security is currently being used (in my case https). All I had to do was set https: true and it worked like a charm.. I'm not running in lazy mode, but I have found that if I set inline: false that I appear to get a jQuery deferred error. If I remove inline: false and go with the default everything works fine. This is unfortunate however, because I'm requesting an asset from webpack-dev-server for another app, if I don't set inline: false it reloads the whole page for my non-webpack app.\nHere is the error:\njQuery.Deferred exception: n(...) is not a function TypeError: n(...) is not a function\n    at HTMLDocument.<anonymous> (https://localhost:8080/__webpack_dev_server__/live.bundle.js:1:163209)\n    at c (https://localhost:8080/__webpack_dev_server__/live.bundle.js:1:105849)\n    at l (https://localhost:8080/__webpack_dev_server__/live.bundle.js:1:106151) undefined\nT.Deferred.exceptionHook @ live.bundle.js:1\n. I'm not running in lazy mode, but I have found that if I set inline: false that I appear to get a jQuery deferred error. If I remove inline: false and go with the default everything works fine. This is unfortunate however, because I'm requesting an asset from webpack-dev-server for another app, if I don't set inline: false it reloads the whole page for my non-webpack app.\nHere is the error:\njQuery.Deferred exception: n(...) is not a function TypeError: n(...) is not a function\n    at HTMLDocument.<anonymous> (https://localhost:8080/__webpack_dev_server__/live.bundle.js:1:163209)\n    at c (https://localhost:8080/__webpack_dev_server__/live.bundle.js:1:105849)\n    at l (https://localhost:8080/__webpack_dev_server__/live.bundle.js:1:106151) undefined\nT.Deferred.exceptionHook @ live.bundle.js:1\n. @SpaceK33z thanks man, I saw that someone added a fix for it yesterday, just hasn't made its way out.  For posterity, the issue I encountered was different than OP's and was fixed with this commit - https://github.com/webpack/webpack-dev-server/commit/f2db057ac105ec945f0e62dba64441c4ccfde59c. @SpaceK33z thanks man, I saw that someone added a fix for it yesterday, just hasn't made its way out.  For posterity, the issue I encountered was different than OP's and was fixed with this commit - https://github.com/webpack/webpack-dev-server/commit/f2db057ac105ec945f0e62dba64441c4ccfde59c. ",
    "appsparkler": "This is what worked for me:\n\n// vue.config.js\nmodule.exports = {\n  baseUrl: '',\n  devServer: {\n    host: 'localhost'\n  }\n}\nGood Luck.... Removing hot: true and setting overlay: true makes it work faster for some reason.  I am not sure why, though.. ",
    "kouhin": "@sokra Yes\uff0cI understand. Thank you.\nNow, I\u2019m using git-rev-sync instead of [hash], it works perfect. \n. ",
    "em-cd": "nvm, /etc/hosts was messed up after all. my bad!\n. ",
    "nebiljabari": "If it can help someone with the same annoying error : https://github.com/angular/angular-cli/issues/2227#issuecomment-285955502. ",
    "Chewiwehavecompany": "I tried to run the command ng serve in terminal and I get this error\ngetaddrinfo ENOTFOUND localhost\nError: getaddrinfo ENOTFOUND localhost\n    at errnoException (dns.js:50:10)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)\nHelp please. ",
    "paulvanbladel": "Yep, I confirm that proxy is not working.\n. ",
    "cwhenderson20": "I am also experiencing this issue and am not using any kind of rewrites, just a simple:\njs\nproxy: {\n  '/api/*': {\n    target: 'http://localhost:4001'\n  }\n}\nSimilarly to @chrismcv, I get a 404 for /api routes and the server to which I am proxying never receives the request.\nEdit: express in debug mode reports this progress of events when one of the endpoints is hit:\nexpress:router dispatching GET /api/test +6s\n  express:router query  : /api/test +1ms\n  express:router expressInit  : /api/test +0ms\n  express:router webpackDevMiddleware  : /api/test +1ms\n  express:router <anonymous>  : /api/test +1ms\n  express:router middleware  : /api/test +0ms\n... but any logging within the express route does not happen.\n. I am also experiencing this issue and am not using any kind of rewrites, just a simple:\njs\nproxy: {\n  '/api/*': {\n    target: 'http://localhost:4001'\n  }\n}\nSimilarly to @chrismcv, I get a 404 for /api routes and the server to which I am proxying never receives the request.\nEdit: express in debug mode reports this progress of events when one of the endpoints is hit:\nexpress:router dispatching GET /api/test +6s\n  express:router query  : /api/test +1ms\n  express:router expressInit  : /api/test +0ms\n  express:router webpackDevMiddleware  : /api/test +1ms\n  express:router <anonymous>  : /api/test +1ms\n  express:router middleware  : /api/test +0ms\n... but any logging within the express route does not happen.\n. ",
    "robertjmason": "For those committed to Webpack 2 beta but need request proxying with your HMR, if you install webpack-dev-server@1.14.1 and swap in 2.0.0 beta's reloadApp() in /client/index.js, it ships the webpackHotUpdate messages via EventEmitter and world peace ensues. It's just a workaround/bandaid, but it's a relatively painless one: gist\n. ",
    "denglingbo": "http how to proxy https?\nhttp://page.com/\najax: https://xxxxx\n. ",
    "tomascharad": "Hi, \nI'm getting a 502 (Bad Gateway) error while using webpack 2 beta and webpack-dev-server with HMR while trying to proxy.\nAny clues on this?\n. Hi, \nI'm getting a 502 (Bad Gateway) error while using webpack 2 beta and webpack-dev-server with HMR while trying to proxy.\nAny clues on this?\n. Was caused by a Rails problem, not webpack. Sorry. \n(if someone is using Rails 5.rc you should change localhost:3000 to [::1]:3000 in the meantime).\n. Was caused by a Rails problem, not webpack. Sorry. \n(if someone is using Rails 5.rc you should change localhost:3000 to [::1]:3000 in the meantime).\n. Hi @brusand,\nHow did you manage to solve this? I'm very stuck with this.\nMany thanks.\n. Hi @brusand,\nHow did you manage to solve this? I'm very stuck with this.\nMany thanks.\n. ",
    "westor21": "For me before angular2 rc.5 this worked:\nproxy: {\n  '/api*': {\n    target: 'http://localhost:5001'\n  }\n}\nNow I got also 404 errors for all of my services.\nI removed the * and that fixed it:\nproxy: {\n  '/api': {\n    target: 'http://localhost:5001'\n  }\n}\n. ",
    "johnhamm": "Just incase anyone else is running into this issue - the PHP standalone server also requires \"[::1]\" instead of localhost:\n proxy: [\n            {\n                path: '**',\n                target: 'http://[::1]:3000',\n                secure: false\n            }\n        ]. ",
    "jellyfish-tom": "above solution works on OS X, hitting java server running on 8081, from webpack on 9000. \nThanks!. replace localhost with [::1]. \nlike so: 'http://[::1]:3000'\nthis works for me: \ndevServer: {\n  proxy: {\n    \"*\": \"http://[::1]:8081\"\n    // \"secure\": false,\n    // \"changeOrigin\": true\n  }\n},\none wildcard, or double, with 'secure' or 'changeOrigin' - doesnt matter. [::1] is the game changer. \nGood luck!. ",
    "karl-gustav": "We got 404 from azure api servers, and we solved it by  adding changeOrigin: true to our proxy config. \n\"/api\": {\n    target: \"https://devapi.example.com\",\n    secure: false,\n    changeOrigin: true\n}. We got 404 from azure api servers, and we solved it by  adding `changeOrigin: true` to our proxy config.\n\n\"/api\": {\n    target: \"https://devapi.example.com\",\n    secure: false,\n    changeOrigin: true\n}. @tindn I\u2019m afraid we won\u2019t be much help here, we just tried stuff until it worked :-( .\n",
    "Wowgreat": "@karl-gustav  Good, I do so  and it works well now.. ",
    "nimatullah": "I have same issue. All above advice does not work. ",
    "stevematdavies": "Ive been trying to add it to an Angular Cli app, and it doesn't work either, no solutions thus far\n. configuration has an unknown property 'modules'.\nReact 2.5.1 and followed all advice, documentation is useless. Any help?. configuration has an unknown property 'modules'.\nReact 2.5.1 and followed all advice, documentation is useless. Any help?. ",
    "NodiraIbrogimova": "I tried all options above in my vuejs app, but none of them seem to work. \nIn webpack.config.js I added the following:\ndevServer: {\n    historyApiFallback: true,\n    // noInfo: false,\n    // overlay: false, \n    proxy: {\n      '/accountApi': {\n        target: 'http://someapiurl.net/',\n        secure: false,\n        changeOrigin: true,\n        pathRewrite: {\n          '^/accountApi' : ''\n        }\n      }\n    }\n  }\nand writing POST request in one of the components as: \naxios\n        .post(`/accountApi/api/users/....`, {\n          current_password: this.currentPassword,\n          password: this.newPassword_1,\n          password_confirmation: this.newPassword_2\n        })\n        .then(response => {\n          ....\n        })\nBut, this seems not to work, as long as I'm getting the error :\nThe requested URL /accountApi/api/users/... was not found on this server.\nAnybody can help me to figure out what's wrong here, please?. ",
    "davidblurton": "It's been two months with no commits, please ask for help maintaining this important project. \n. ",
    "anthonybarsotti": "I've gotten around this temporarily by imposing the timeout on the server but I'm still curious to see if there is a solution to this.\n. ",
    "vanwagonet": "It looks like aborting a proxied request triggers a \"proxy error\" message through the socket, which causes the client to reload.\n. Changing the node major version probably trips up the native fsevents, so does it fall back to pulling badly? Reinstalling fixed it for me as well.\n. ",
    "jiarongxu": "Same issue here. Any solution?\n. ",
    "makuko": "This can be fixed by adding the following line between lines 147 and 148 of lib/Server.js in 1.14.1:\nif (err.code === 'ECONNRESET') return;\nECONNRESET means it was not actually an error but intentional by the client.\n. ",
    "hantsy": "I always encountered the ECONNRESET when used a proxy config in my Angular2 project(generated by Angular CLI 1.0.0 which shipped webpack-dev-server 2.3.0). \n[HPM] GET /api/upload/uploads-1490782788752.png -> http://localhost:3000\n[HPM] Error occurred while trying to proxy request /api/upload/uploads-1490782788752.png from localhost:4300 to http://localhost:3000 (ECONNRESET) (https://nodejs.org/api/errors.html#errors_common_system_errors)\n. @dhatawesomedude It seems it is disappeared in the latest Angular 4+, I was using newest Angular CLI to create the projects.. @dhatawesomedude It seems it is disappeared in the latest Angular 4+, I was using newest Angular CLI to create the projects.. ",
    "dhatawesomedude": "@hantsy how did you get around this for Angular 2 projects?. ",
    "sudanvellakovilkanakavel": "Ifinally found the solution.my global in stallion  path was the problem\nnpm config set prefix ~/.npm-global\nnpm install -g babel webpack webpack webpack-dev-server\n. ",
    "dandv": "I get a similar error without any global installation or \"stallion path\" (?)\n\nUNMET PEER DEPENDENCY webpack@2.1.0-beta.25\n\njs\n\"devDependencies\": {\n  \"webpack\": \"^2.1.0-beta.25\",\n  \"webpack-dev-server\": \"^1.16.1\"\n}\n. Correct, the solution was to specify the dev server at the beta too. Thanks.\njs\n{\n   \"webpack\": \"^2.1.0-beta.25\",\n    \"webpack-dev-server\": \"^2.1.0-beta.8\"\n}\n. ",
    "edanweis": "I have this issue with Angular2 and Neo4j. Can you suggest a workaround?\n. ",
    "matteotosi": "@BowlingX do you handle the requests of type OPTIONS (the preflight requests sent to the server before every other kind of request)?\n. ",
    "joshhunt": "What about for assets that arent HTML?\n. :/ \nThis is a fairly annoying breaking change to just automatically get - I would appreciate at least a warning if using *. Preferably, automatically mapping * to **  would be a lot more helpful.\n. ",
    "mikekolganov": "+1 @ericlau-solid \n. ",
    "wildeyes": "@sokra how do you that?\n. ",
    "joshunger": "Yeah how do you look up charset webpack is using?\nOn Mon, Sep 12, 2016, 10:17 AM Kees Kluskens notifications@github.com\nwrote:\n\nTechnically this is an issue in webpack-dev-middleware, that package takes\ncare of making a response. This line\nhttps://github.com/webpack/webpack-dev-middleware/blob/master/middleware.js#L231\nis responsible for generating the Content-Type.\nI'm not sure though if we can just add charset=UTF-8 to ALL responses,\nwithout breaking something.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/432#issuecomment-246306216,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACMfl85bYBz5jHy0UbMO1HPrwgeG1hvWks5qpSadgaJpZM4H1nu2\n.\n. Ah is there a constants file we can just reference? Then we can fix the pr?\nIs that what you're thinking?\n\nOn Mon, Sep 12, 2016, 10:28 AM Kees Kluskens notifications@github.com\nwrote:\n\nAs far as I can tell, it's only possible to change it with\nwebpack-encoding-plugin\nhttps://github.com/quackes/webpack-encoding-plugin. This PR\nhttps://github.com/webpack/webpack/pull/1797/files from the webpack\nrepo also assumes utf-8.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/432#issuecomment-246308413,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACMflwoeIwQzVCzrA2q08WxoEd8nPeNwks5qpSkzgaJpZM4H1nu2\n.\n. \n",
    "callumacrae": "Is there any workaround or fix to this yet?\nAfter being built with webpack:\n\nBeing served with webpack-dev-server:\n\nI can help investigate / fix this if it would be helpful.\nI wouldn't class this as a \"Nice to Have\": it's making it impossible to test my site properly without pushing it to a staging environment.\n. @SpaceK33z: That fixes the issue for me. I've sent a PR: https://github.com/webpack/webpack-dev-middleware/pull/136\n. ",
    "mitya": "Well, actually, two different public paths haven't helped here: no matter what public path I've used \u2014\u00a0the webpack-dev-server serves all its content from that public path, while I've wanted everything but the index.html to be served from the bundle, and index.html to be served from the root dir.\nInstead, I've generating the bundle using webpack, which writes the index.html into the file system, and then webpack-dev-server uses the index.html from the file system and all the other files from memory. That works for me, as my index.html doesn't use the asset hashes, but if somebody's index.html is dynamic it will not work.\n. Well, actually, two different public paths haven't helped here: no matter what public path I've used \u2014\u00a0the webpack-dev-server serves all its content from that public path, while I've wanted everything but the index.html to be served from the bundle, and index.html to be served from the root dir.\nInstead, I've generating the bundle using webpack, which writes the index.html into the file system, and then webpack-dev-server uses the index.html from the file system and all the other files from memory. That works for me, as my index.html doesn't use the asset hashes, but if somebody's index.html is dynamic it will not work.\n. ",
    "gebin": "@kongakong\nHave you solved the problem? I am also troubled by the problem.\nCan you tell me about the way how to solve?\n. ",
    "wbobeirne": "I'm still getting the broken red lock of doom in Chrome Canary (Version 53.0.2766.0 canary) it's complaining that the cert hasn't been verified by a third party. Is this something that can be resolved?\n\n. I'm still getting the broken red lock of doom in Chrome Canary (Version 53.0.2766.0 canary) it's complaining that the cert hasn't been verified by a third party. Is this something that can be resolved?\n\n. @wwselleck it looks like you're using the old certificate, likely meaning you're on a version of webpack-dev-server that hasn't been updated since March 24th. The current stable version on npm (1.14.1) has the old cert.\n. ",
    "wwselleck": "I'm getting a red lock as well, but with a different error (Chrome 51.0.2704.84)\n\n. I'm getting a red lock as well, but with a different error (Chrome 51.0.2704.84)\n\n. I just upgraded to these versions\n\"webpack\": \"^2.1.0-beta.0\",\n\"webpack-dev-server\": \"^v2.1.0-beta.0\"\nand am now getting the same error as @wbobeirne \n\n. I just upgraded to these versions\n\"webpack\": \"^2.1.0-beta.0\",\n\"webpack-dev-server\": \"^v2.1.0-beta.0\"\nand am now getting the same error as @wbobeirne \n\n. @wbobeirne Refresh, I updated and got the same error as you \ud83d\ude04 \n. I was able to get past the \"This certificate has not been verified...\" error by just proceeding anyway on Chrome, and adding a security exception on Firefox, once I got to the red lock screen. After that calls to the webpack dev server were going through.\n. Github Pages just serves static pages, like webpack-dev-server. Just build your webpack project normally and have index.html in the root of your repo.\n. ",
    "deevus": "Is there a definitive solution for this? What is the earliest version that has the new certificate?\n. I have another project that enforces HSTS so proceeding only works as long as I don't visit the other site. That doesn't work well when I'm trying to implement SSO D:\n. ",
    "ashier": "Got this working via pointing the key, cert and ca to the correct files. \n```\nvar fs = require('fs');\nvar path = require('path');\nvar webpack = require('webpack')\nvar WebpackDevServer = require('webpack-dev-server')\nvar config = require('./webpack.local.config')\nvar ops = {\n    cert: '/path to webpack ssl/server.crt',\n    ca: '/path to webpack ssl/ca.crt',\n    key: '/path to webpack ssl/server.key'\n};\nnew WebpackDevServer(webpack(config), {\n  https: true,\n  cert: fs.readFileSync(ops.cert),\n  ca: fs.readFileSync(ops.cert),\n  key: fs.readFileSync(ops.key),\n  requestCert: true,\n  rejectUnauthorized: true,\n  publicPath: config.output.publicPath,\n  hot: true,\n  inline: true,\n  historyApiFallback: true\n}).listen(3000, '0.0.0.0', function(err, result) {\n  if (err) {\n    console.log(err)\n  }\nconsole.log('Listening at https://localhost:3000')\n})\n```\nThen adding the certificate to my Keychain Access and trusting the certificate.\nHope this helps.\n- ashier\n. ",
    "cayuu": "FWIW I was hitting the same issue and hunting for a solution. Fix for me was separating Stateless and Stateful components per file. \n. We ended up using a combo of environment variables and dynamic scripting to swap out the ports we needed based on context. Not pretty, but it worked.. We ended up using a combo of environment variables and dynamic scripting to swap out the ports we needed based on context. Not pretty, but it worked.. ",
    "manuelmazzuola": "There is no need to use hash in webpack dev server, there is no cache problems.\n. Move it under devServer section\n. ",
    "harmony7": "Hi, I have a comment on this. It seems that with --hot-only, the HotModuleReplacementPlugin plugin does not get loaded as it would with --hot. At the current time I can work around this problem by supplying both --hot and --hot-only to get the behavior I want.\nDigging deeper it seems that this processing is done in webpack/bin/convert-argv.\nifBooleanArg(\"hot\", function() {\n            ensureArray(options, \"plugins\");\n            var HotModuleReplacementPlugin = require(\"../lib/HotModuleReplacementPlugin\");\n            options.plugins.push(new HotModuleReplacementPlugin());\n        });\nHow would we go about getting this fixed? Is it something that needs fixing in webpack? (Why is it webpack's job to handle ARGV for webpack-dev-server, anyway?)\n. Thanks for your response.\nOkay.  I saw this code change you made in Server.js:\nthis.hot = options.hot || options.hotOnly;\nSo I thought you were trying to make it so you had to specify only one or the other to activate hot\n. ",
    "gartz": "Or allow, add list of files to watch for changes that restart the server if changed.\n. Or allow, add list of files to watch for changes that restart the server if changed.\n. ",
    "diskodan": "I found a way to do this with the ever-useful nodemon\nnodemon restarts webpack-dev-server any time I change my webpack.config.js file.\n\nI frequently forget to restart my server after config changes and I've wasted lots of time \"debugging\" things that work because of that.  I think anything that can lower the cognitive overhead in our workflows is generally worthwhile. The fewer environmental gotchas I need to worry about, the more of my limited brainpower I can direct towards the important stuff--writing cool apps.\nHowever I can see an argument for not adding a restart feature to webpack (keeping it light and focused on what it does well). If my 'nodemon' hack is sufficient, perhaps it could become an example in the documentation. \n\nI've set up the command in my packages.json as the start script .\n\u00a0\u00a0I now run $ npm start \n\u00a0\u00a0instead of  $ webpack-dev-server\n``` json\n\"scripts\": {\n  \"start\": \"nodemon --watch webpack.config.js ./node_modules/.bin/webpack-dev-server\",\n\"test\": \"echo \\\"Error: no test specified. Write some tests, you slacker\\\" && exit 1\"\n},\n\"dependencies\": \n  ...\n```\nnote: nodemon's --watch flag doesn't like paths to be prefixed with ./\n. I found a way to do this with the ever-useful nodemon\nnodemon restarts webpack-dev-server any time I change my webpack.config.js file.\n\nI frequently forget to restart my server after config changes and I've wasted lots of time \"debugging\" things that work because of that.  I think anything that can lower the cognitive overhead in our workflows is generally worthwhile. The fewer environmental gotchas I need to worry about, the more of my limited brainpower I can direct towards the important stuff--writing cool apps.\nHowever I can see an argument for not adding a restart feature to webpack (keeping it light and focused on what it does well). If my 'nodemon' hack is sufficient, perhaps it could become an example in the documentation. \n\nI've set up the command in my packages.json as the start script .\n\u00a0\u00a0I now run $ npm start \n\u00a0\u00a0instead of  $ webpack-dev-server\n``` json\n\"scripts\": {\n  \"start\": \"nodemon --watch webpack.config.js ./node_modules/.bin/webpack-dev-server\",\n\"test\": \"echo \\\"Error: no test specified. Write some tests, you slacker\\\" && exit 1\"\n},\n\"dependencies\": \n  ...\n```\nnote: nodemon's --watch flag doesn't like paths to be prefixed with ./\n. ",
    "rashtay": "@diskodan For some reason, nodemon --watch config/webpack.config.js --exec webpack-dev-server --config config/webpack.config.js doesn't work. More details: https://stackoverflow.com/questions/51611788/nodemon-failed-to-parse-config-webpack-config-js\nEDIT: I figured it out\n\"start:dev\": \"nodemon --watch config --exec 'webpack-dev-server --config ./config/webpack.config.js'\". ",
    "flut1": "Note:\nIE will throw an error on the line where you execute the function. It will not throw an error if you explicitly execute it against the window scope using bind() or call()\nmodule.exports = typeof window !== 'undefined' ? window.open.bind(window) : null\ntest.call(window, 'https://github.com/');\n. Note:\nIE will throw an error on the line where you execute the function. It will not throw an error if you explicitly execute it against the window scope using bind() or call()\nmodule.exports = typeof window !== 'undefined' ? window.open.bind(window) : null\ntest.call(window, 'https://github.com/');\n. ",
    "volokolamskspb": "change your webpack.config to this:\njs \nconst path = require('path');\nmodule.exports = {\n  devtool: \"source-map\",\n  entry: ['babel-polyfill', path.resolve(__dirname, './yourjs.js')],\n  mode: 'production',\n  output: {\n    path: __dirname+'/draft.iml.ru/static/main/js/',\n    filename: 'yout.js'\n  }\n};\nYou have to to add devtool : \"source-map\" option.. change your webpack.config to this:\njs \nconst path = require('path');\nmodule.exports = {\n  devtool: \"source-map\",\n  entry: ['babel-polyfill', path.resolve(__dirname, './yourjs.js')],\n  mode: 'production',\n  output: {\n    path: __dirname+'/draft.iml.ru/static/main/js/',\n    filename: 'yout.js'\n  }\n};\nYou have to to add devtool : \"source-map\" option.. ",
    "anhkhoi": "Post wrong place, this should move to https://github.com/webpack/webpack/issues\n. Post wrong place, this should move to https://github.com/webpack/webpack/issues\n. ",
    "MarkPieszak": "Just a tip, you can preserve console logs inside chrome with the checkbox.\n\n. Please use stackoverflow for such issues as this is not an issue with webpack-dev-server itself.\n. Have you had any luck getting HMR to work through a proxy? I kept noticing HMR was still sending through the original port when I tried this :(\n. This isn't a dev-server issue, but more of a loader issue in your code. Please use stackoverflow to get help with these. @williamstar \n. I've been wondering that myself There hasn't been an update in 28 days.  :( A whole bunch of PRs waiting too.\nI think @sokra has been super busy with webpack 2.0 lately.\n. ",
    "Jack-Barry": "According to the docs, -d is the equivalent of using\n--debug --devtool source-map --output-pathinfo\nThe devtool options are listed here.  Did you maybe make a typo or place the devtool object somewhere incorrectly? \nAlso, if any of your modules already has a source map, you have to use source-map-loader\n. Running killall node before restarting usually does the trick for me.\n. When you're running killall node and there's nothing to kill, that's what it will return.  I wouldn't recommend adding it to an npm script, just run it as needed, or have a script to run it only if there are node processes running that need to be killed.\n. Have you tried running it without the contentBase: \"./public\"? It looks like it might be pointing to your public directory when you pull it up in the browser.  You might also try moving the index.html into the public directory temporarily to see if it loads as you're expecting to see if that's what's happening.\n. ",
    "ortallevi07": "I have this issue on Linux. . ",
    "mathieusteele": "Thank you!\n. ",
    "Authorlove": "when i set proxy option: changeOrigin: true, it works.\nFrom the node-http-proxy's document, it says,\n'changeOrigin: true/false, Default: false - changes the origin of the host header to the target URL'. Does the changeOrigin option depend on the remote backend server framework?\n. Because I use nginx as my server, it needs Host header filed, so when i set changeOrigin: true, it works. And my case is done.\n. ",
    "fractalf": "+1\nCan't get proxy to work, no matter what i put in proxy options.\nServer.js:\noptions.proxy.forEach(function (proxyOptions) {\n    proxyOptions.ws = proxyOptions.hasOwnProperty('ws') ? proxyOptions.ws : true;\n    app.all(proxyOptions.path, function (req, res, next) {\n        var bypassUrl = typeof proxyOptions.bypass === 'function' ? proxyOptions.bypass(req, res, proxyOptions) : false;\n        if (bypassUrl) {\n            req.url = bypassUrl;\n            next();\n        } else {\n            if(typeof proxyOptions.rewrite === 'function') proxyOptions.rewrite(req, proxyOptions);\n            if (proxyOptions.host) {\n                req.headers.host = proxyOptions.host;\n            }\n            proxy.web(req, res, proxyOptions, function(err){\n                var msg = \"cannot proxy to \" + proxyOptions.target + \" (\" + err.message + \")\";\n                this.sockWrite(this.sockets, \"proxy-error\", [msg]);\n                res.statusCode = 502;\n                res.end();\n            }.bind(this));\n            if (proxyOptions.configure) {\n                proxyOptions.configure(proxy);\n            }\n        }\n    }.bind(this));\n}.bind(this));\nThe code inside app.all doesn't seem to run at all..\nWould be great with a working example\n. ",
    "KingScooty": "@vinhlh this saved me! Wish there was an upgrade doc for webpack 2.0.\n. @vinhlh this saved me! Wish there was an upgrade doc for webpack 2.0.\n. ",
    "ljwagerfield": "@vinhlh also worked for me.\nNeither of the following worked:\nproxy: {'*': 'http://localhost:3000'}\ncontentBase: {target: 'http://localhost:3000'}\nBut this does: proxy: {'**': 'http://localhost:3000'} \n\ud83d\udc4d \n. ",
    "zbowhay": "May be helpful for some,\nI was able to get my proxy to a express server by using this config:\nproxy:{\n            '/api/**': {\n                target: 'http://localhost:4001',\n                secure: false\n            }\n        }\nin my case adding http:// and /** resolved my issues.\n. ",
    "pgangwani": "Although this is closed issue, Need some guidance.\nI dont know how much I am screwing up. Can any one of you help me in my configuration, I wish to \nproxy all \"/api/**\" request to \"jsonplaceholder.typicode.com\". For example: \"localhost:3001/api/users/1\" to \"jsonplaceholder.typicode.com/users/1\"\nMy configurations : \nproxy: {\n'/api/**': { \n                target: {\n                    'host': 'jsonplaceholder.typicode.com',\n                    'port': 80,\n                    'protocol': 'http:'\n                }, \n                secure: false, \n                changeOrigin: true, \n                                pathRewrite: {\n                    '^/api': ''\n                }\n}\nI am just suferring from trail of 404s.\nKindly response if you can identify the issue.\n. That returns 404 .\nI guess same path is passed to target path '/api' should be removed before sending to target.\nAny configuration ? \n. No. webpack@2.1.0-beta.6\n. Can any one else help?\n. Not working.\nI think there is some other issue not a  configuration.\nOn Sep 1, 2016 12:10 AM, \"Brad J\" notifications@github.com wrote:\n\n@pgangwani https://github.com/pgangwani\nTry this. Was able to get this to run.\nproxy:{\n      '/api/*' : {\n        target: 'http://jsonplaceholder.typicode.com/',\n        changeOrigin: true,\n        pathRewrite: {\n        '^/api': ''\n        }\n      }\n    }\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/458#issuecomment-243859936,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ANpzLHgauP9vG0QaiZtFeD4WW4NmGX3Oks5qlcqBgaJpZM4IKlqv\n.\n. \n",
    "bivvo": "@pgangwani \nTry this. Was able to get this to run.\nproxy:{\n      '/api/*' : {\n        target: 'http://jsonplaceholder.typicode.com/', \n        changeOrigin: true,\n        pathRewrite: {\n        '^/api': ''\n        }\n      }\n    }\n. ",
    "BrendanDougan": "My config has stopped working after 6 months on an npm install. \nwebpack-dev-server 1.15.0 is version\nReverting to 1.14.1 fixed the issue\n. ",
    "johnelliott": "Thanks @vinhlh.\nFor others fiddling with this, here's what I ended up with to get hot module reloading working and still able to hit my API server:\nI began here: https://github.com/chimurai/http-proxy-middleware#context-matching, looking at pattern matching:\n\n\nwildcard path matching\n\nFor fine-grained control you can use wildcard matching. Glob pattern matching is done by micromatch. Visit micromatch or glob for more globbing examples.\n\nInitially it appeared that I could specify a quoted array as the key for the proxy property of the webpack config e.g. \"['/a', '/b']\": {target, secure, etc} to match /a and /b/, but this turned out not to be the case and brace expansion was the way.\nMy solution was just to use whatever bits of the glob library would work in the webpack config. In https://www.npmjs.com/package/glob#glob-primer I used two things, the ! and the {} brace expansion. \n{} brace expansion:\n!/**/*.css\n!/**/*.js\n!/**/*.hot-update.json\nThen, according to the glob docs:\n\n!(pattern|pattern|pattern) Matches anything that does not match any of the patterns provided.\n\nSo any path not ending in these three extensions would match and thus be proxied.\njs\n  devServer: {\n    // progress: true,\n    hot: true,\n    inline: true,\n    // https: true,\n    // port: 8081,\n    contentBase: path.resolve(__dirname,'public'),\n    proxy: {\n      '!/**/*.{css,js,hot-update.json}': {\n        target: 'http://localhost:3000',\n        secure: false\n        // changeOrigin: true\n      }\n    }\n  },\nThere's surely a better way, but this is working for now.\n. @luddens what are you trying to do here?\nThis is more a matter of understanding and configuring https://github.com/chimurai/http-proxy-middleware than anything about webpack or this dev server. Here under path matching I see something similar to your example with /api.  For me, the quickest way forward was trying lots of things\u2014even ones that seemed a bit silly\u2014to understand how it all worked before going to my particular problem.. ",
    "zcoding": "webpack@1.14.1\njson\n{\"changeOrigin\": true}\nworks for me\n. ",
    "mrsufgi": "@mproid that config worked for me too! \njs \nvar apiProxy = proxy('/api/**', {\n    target: 'https://api.instagram.com/v1/',\n    pathRewrite: {\n      \"^/api\": \"\"\n    },\n    changeOrigin: true,\n    logLevel: 'debug',\n  });\npathRewrite is a must here since we don't wont to prefix requests with an actual '/api' \nThanks. ",
    "YuyangWitness": "@bivvo \nThank you very much, I have solved this problem finally.\nwhen I add pathRewrite, this problem was solved!!!\n. ",
    "erosenberg": "I'm unable to get any of these options to work \ud83d\udc4e \nMy main server that serves HTML/ejs is: localhost:3000\nMy webpack-dev-server is localhost:9000\nHere is my config at the moment:\n```\nconst DEV_SERVER_PORT = 9000;\nconst DEV_HOST = 'http://localhost';\nconst config = _.merge(baseConfig, {\n  entry: {\n    bundle: [\n      webpack-dev-server/client?${DEV_HOST}:${DEV_SERVER_PORT},\n      'webpack/hot/only-dev-server',\n      'react-hot-loader/patch',\n      paths.indexPath,\n    ],\n  },\n  output: {\n    filename: 'bundle.js',\n    path: paths.buildPath,\n    publicPath: '/static/build/',\n  },\n  module: {\n    loaders: [{\n      test: /.js$/,\n      exclude: [paths.nodeModulesPath],\n      loader: 'babel-loader',\n    }],\n  },\n  devtool: 'eval-source-map',\n  devServer: {\n    contentBase: paths.buildPath,\n    // publicPath: http://lopcalhost:3000/${path.buildPath},\n    publicPath: '/static/build/',\n    hot: true,\n    host: '0.0.0.0',\n    port: DEV_SERVER_PORT,\n    historyApiFallback: true,\n    proxy: {\n      // '/static/build/': 'http://[::1]:3000/static/build',\n      '': 'http://[::1]:3000/static/build',\n      secure: false,\n      changeOrigin: true,\n    },\n  },\n  resolve: {\n    extensions: ['.js', '.json'],\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('development'),\n    }),\n    new HtmlWebpackPlugin({\n      template: path.resolve(paths.staticPath, 'index.ejs'),\n    }),\n  ],\n});\n```\nMy HTML markup contains a script tag that is looking for a local bundle.js file.\n<script src=\"/static/build/bundle.js\"></script>\nWhat I would like and expect to happen is when I go to request localhost:9000/static/build/bundle.js/ I am proxied to localhost:3000/static/build/bundle.js.\nWhat am I missing here? I'm also using the following:\nOSX\n\"webpack\": \"^3.5.5\",\n\"webpack-dev-server\": \"^2.7.1\",\nnpm v5.3.0\nnode v8.4.0\nand the exact error I'm getting is: \n[HPM] Error occurred while trying to proxy request /static/build/bundle.js from localhost:9000 to http://[::1]:5000/ (ECONNREFUSED) (https://nodejs.org/api/errors.html#errors_common_system_errors)\nEDIT: I think I was expecting the opposite behavior for some weird reason. By proxying the web server through the dev server, I should still be using the dev server, not the actual server while developing.. I'm unable to get any of these options to work \ud83d\udc4e \nMy main server that serves HTML/ejs is: localhost:3000\nMy webpack-dev-server is localhost:9000\nHere is my config at the moment:\n```\nconst DEV_SERVER_PORT = 9000;\nconst DEV_HOST = 'http://localhost';\nconst config = _.merge(baseConfig, {\n  entry: {\n    bundle: [\n      webpack-dev-server/client?${DEV_HOST}:${DEV_SERVER_PORT},\n      'webpack/hot/only-dev-server',\n      'react-hot-loader/patch',\n      paths.indexPath,\n    ],\n  },\n  output: {\n    filename: 'bundle.js',\n    path: paths.buildPath,\n    publicPath: '/static/build/',\n  },\n  module: {\n    loaders: [{\n      test: /.js$/,\n      exclude: [paths.nodeModulesPath],\n      loader: 'babel-loader',\n    }],\n  },\n  devtool: 'eval-source-map',\n  devServer: {\n    contentBase: paths.buildPath,\n    // publicPath: http://lopcalhost:3000/${path.buildPath},\n    publicPath: '/static/build/',\n    hot: true,\n    host: '0.0.0.0',\n    port: DEV_SERVER_PORT,\n    historyApiFallback: true,\n    proxy: {\n      // '/static/build/': 'http://[::1]:3000/static/build',\n      '': 'http://[::1]:3000/static/build',\n      secure: false,\n      changeOrigin: true,\n    },\n  },\n  resolve: {\n    extensions: ['.js', '.json'],\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n    new webpack.DefinePlugin({\n      'process.env.NODE_ENV': JSON.stringify('development'),\n    }),\n    new HtmlWebpackPlugin({\n      template: path.resolve(paths.staticPath, 'index.ejs'),\n    }),\n  ],\n});\n```\nMy HTML markup contains a script tag that is looking for a local bundle.js file.\n<script src=\"/static/build/bundle.js\"></script>\nWhat I would like and expect to happen is when I go to request localhost:9000/static/build/bundle.js/ I am proxied to localhost:3000/static/build/bundle.js.\nWhat am I missing here? I'm also using the following:\nOSX\n\"webpack\": \"^3.5.5\",\n\"webpack-dev-server\": \"^2.7.1\",\nnpm v5.3.0\nnode v8.4.0\nand the exact error I'm getting is: \n[HPM] Error occurred while trying to proxy request /static/build/bundle.js from localhost:9000 to http://[::1]:5000/ (ECONNREFUSED) (https://nodejs.org/api/errors.html#errors_common_system_errors)\nEDIT: I think I was expecting the opposite behavior for some weird reason. By proxying the web server through the dev server, I should still be using the dev server, not the actual server while developing.. I'm still having issues with this on Mac OSX and have tried everything above.\nWhat else can I do to troubleshoot?\nRelated: https://github.com/webpack/webpack-dev-server/issues/458#issuecomment-325036559\nEDIT: I think I was expecting the opposite behavior for some weird reason. By proxying the web server through the dev server, I should still be using the dev server, not the actual server while developing.. I'm still having issues with this on Mac OSX and have tried everything above.\nWhat else can I do to troubleshoot?\nRelated: https://github.com/webpack/webpack-dev-server/issues/458#issuecomment-325036559\nEDIT: I think I was expecting the opposite behavior for some weird reason. By proxying the web server through the dev server, I should still be using the dev server, not the actual server while developing.. ",
    "granmoe": "I've tried every combination here and none are working for me. Here's my config:\n```javascript\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst IS_DEV = process.env.NODE_ENV === \"development\";\nmodule.exports = {\n    devtool: IS_DEV ? \"inline-source-map\" : \"eval\",\n    entry: \"./src/index.js\",\n    output: {\n        filename: \"app.js\",\n        path: path.resolve(__dirname, \"dist\")\n    },\n    resolve: {\n        modules: [\n            path.resolve(__dirname, \"src\"),\n            \"node_modules\"\n        ],\n        extensions: [\".json\", \".js\"]\n    },\n    module: {\n        rules: [\n            {\n                test: /.html$/,\n                exclude: /node_modules/,\n                loader: \"ractive-loader\"\n            }, {\n                test: /.js$/,\n                exclude: /node_modules/,\n                loader: \"babel-loader\"\n            }, {\n                test: /.css$/,\n                exclude: /node_modules/,\n                loaders: [\n                    \"style-loader\",\n                    \"css-loader\"\n                ]\n            }\n        ]\n    },\n    devServer: {\n        contentBase: \"./dist\",\n        hot: true,\n        proxy: {\n            \"/ext_api/**\": {\n                target: \"http://foo.bar/\" // obscured to hide my employer\n            }\n        }\n    },\n    plugins: [new webpack.HotModuleReplacementPlugin()]\n};\n```\nThe response is a 502, cannotconnect. ",
    "tarunjuneja": "Just to be explicit - In my case mistakenly i have placed proxy at the root however i was suppose to keep it in devServer \nhere is my final configuration\ndevServer: {\n    outputPath: path.join(__dirname, \"dist\"),\n    historyApiFallback: true,\n    stats: \"minimal\",\n    proxy: {\n      \"/rest/**\":  {\n        target: \"https://10.98.0.1/\",\n        secure: false\n      }\n    },    \n  }. ",
    "anson-GH": "npm install webpack -g\nnpm install vue-cli -g\nnpm install\nnpm run dev\nafter run these restart your pc, sometimes need to fresh all again.. ",
    "luddens": "Ugh. None of this works: \n  devServer: {\n    index: '', // specify to enable root proxying\n    host: '...',\n    contentBase: '...',\n    proxy: {\n      '/api': {\n        context: () => true,\n        target: 'http://localhost:3000',\n        changeOrigin: true,\n        pathRewrite: {\n        '^/api': ''\n        },\n        secure: false\n      }\n   },\n\nThe front end is at 8080 and the server at 3000. No combination of any of the suggestions have worked. Why is this so dinky?. ",
    "wulichenyang": "Got the same problem. I solved this by removing setting of allowing CORS from the server and it works for me.. ",
    "davidgolden": "@wulichenyang Yep that did it for me.\nRemoved app.all('/', function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"X-Requested-With\");\n    next();\n}); from my server.js\nMy webpack config looks like this:\nproxy: {\n            '/api': {\n                target: 'http://localhost:5000',\n                pathRewrite: {'^/api': ''},\n            }\n        }\nI'm on webpack-dev-server version 3.2.1. ",
    "jgoux": "A release would be great. There are a lot of fixes done since the last one. :+1: \n. ",
    "cyberxndr": "I can't reproduce this at the moment (@1.15.0). Both scenarios seems to work fine. I'll reopen this, if there will be additional details.\n. ",
    "pseidemann": "I think the default is not to crash. maybe you started the server with --bail?\n. I worked around this issue with doing --content-base nonexistent/ for now\n. @SpaceK33z wow awesome, thanks!\n. ",
    "itsdrewstiles": "I had this issue ... but I solved by just adding path in output options! :|\n. ",
    "LaurensRietveld": "I'm having this issue as well. Any luck finding a solution @Offirmo ? (adding the path to output options does not help, and --bail is not set)\n. ",
    "cgatian": "Fixed this by using an absolute path in my webpack.config\nconst path = require('path');\n...\n output: {\n        // The output directory as absolute path (required).\n        path: path.resolve(__dirname, 'dist'),\n. Actually it's kinda sad it took so long. I mean I know it's open source but\nstill, there's a level of commitment some people hold this team to.\nEspecially buying into the framework.\nOn Fri, Jul 7, 2017, 5:40 PM Avindra Goolcharan notifications@github.com\nwrote:\n\nDawg. @TheLarkInn https://github.com/thelarkinn . You the man. If\nyou're ever around in NYC I'll buy you coffee\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/946#issuecomment-313799688,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABq8ajaVTf8zWwRzgtHayGl6NaQPjkgIks5sLqXOgaJpZM4N-b3N\n.\n. @Andarist I could always write my own. Right?. \n",
    "Venryx": "Since this thread shows in search results on the topic (and I couldn't find any including the solution I eventually found), I thought I'd add the problem (and solution) for my case.\nSo the problem was the same as the one above, basically, in that regular compile errors were causing webpack to crash, even though watch was enabled, and bail was not enabled.\nI eventually found the cause -- the following (inline) plugin was present in the project's webpack.config.js file:\n```diff\nwebpackConfig.plugins = [\n    // Plugin to show any webpack warnings and prevent tests from running\n    function () {\n        let errors = []\n        this.plugin(\"done\", function (stats) {\n            if (stats.compilation.errors.length) {\n                // Log each of the warnings\n                stats.compilation.errors.forEach(function (error) {\n                    errors.push(error.message || error)\n                })\n            // Pretend no assets were generated. This prevents the tests from running, making it clear that there were warnings.\n\n\nthrow new Error(errors)\n            }\n        })\n    },\n```\n\nThat highlighted throw line was the culprit. It was included in the template project from the yoeman-generator I used to begin my app, and it lay there causing the incremental builds (after an error) to not work.\nAnyway, to fix it, all I did was comment out the throw line -- it's only useful if you're doing test-runs anyway, which I'm not. (here is the issue I opened for it, if needed for reference: https://github.com/prescottprue/generator-react-firebase/issues/36)\nAnyway, just thought I'd mention it for anyone else stumbling upon this thread while searching, for a similar problem.. ",
    "Igogrek": "Had exact same issue after migrating to another machine. \nIn my case it was crashing right after the initial loading (which worked absolutely fine).\nSetting higher values in config fixed it for me.\ndevServer: {\n  watchOptions: {\n    aggregateTimeout: 1000,\n    poll: 1500\n  }\n}\n. ",
    "tquetano-r7": "Yeah no dice for me... it still crashes with regularity.\n. Nope, sorry I should have closed this a while ago.\n. Nope I am just an idiot ... i had emitError set to true in the configuration, which was always emitting errors! Derp.\nClosing.. ",
    "orzechowskid": "I'm seeing this crash really frequently as well.  I'm using webpack-dev-server 1.14.1 and node 4.2.2 on Ubuntu 14.04 LTS (x86_64 2.16.0-70-generic).  Setting the devServer options in my webpack config file didn't seem to make a difference.\n. ",
    "rfviolato": "I was getting the same error, but after trying some things out i figured this out:\nMy root component was a stateless functional component (pure function). I refactored it to a class component and BAM! the hot reloading is working again.\nBefore:\nconst App = (props) => (\n  <div>\n    <Header links={headerLinks} logoSrc={logoSrc} />\n    {props.children}\n  </div>\n);\nAfter:\n```\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\nrender() {\n    return (\n      \n\n        {this.props.children}\n      \n    );\n  }\n}\n```\nif anyone need my Webpack config files, i can post it too.\nI know it's not related to webpack-dev-server itself, but i hope i can help someone running trough this issue :)\nEdit: This stateless-component issue is described on react-hot troubleshooting section, so i guess i just missed it :/\n. ",
    "baktiaditya": "solutions that work for me https://stackoverflow.com/a/40050967/8848280. ",
    "sanusart": ":+1: Squashed\n. ",
    "buraktamturk": "Is there any update on this PR? I am using forked version of this library, however it complicates things on my side. Is there any reason to not merge this at all?\n. ",
    "mbroadst": "I'm more at like 20-35% steady cpu usage, still pretty awful. Only noticed when my lap started getting pretty hot \ud83d\ude04 \n. ",
    "micky2be": "I have 100% of CPU with Node 5.x\n. ",
    "JeffAMcGee": "I'm seeing the same problem. I think it may be the same issue as https://github.com/webpack/webpack-dev-middleware/issues/40 .\nIn my grommet project which uses webpack-dev-server, the problem went away when I deleted my node_modules directory and reinstalled everything.\n. ",
    "gbakernet": "Thanks for the tip\nWhen I upgraded from node 6 to node 8, I had the same problem, excessive cpu usage.\nDeleting node_modules and reinstalling was the solution.\n. ",
    "LegNeato": "Sounds like the same as https://github.com/webpack/webpack/pull/2376... can you try that patch and see if it fixes it?\n. Ah, darn...the symptoms sounded a bit similar :-(\n. ",
    "codycoggins": "Experiencing same issue here.\n\"webpack\": \"^1.12.12\",\n\"webpack-dev-server\": \"^1.14.1\",\nRunning an environment based on:\nhttps://github.com/rangle/angular2-redux-starter.git\"\n. ",
    "Volune": "I put a fix there: https://github.com/Volune/webpack-dev-server/tree/serve-sockjs-client-v1.14.x\nThis is based on v1.14.1, let me know if you want a pull request on a specific branch.\n. @SpaceK33z Still happening, please see this gist: https://gist.github.com/Volune/a73b956b2ee911b77c3cbcad5699c85d\n. @SpaceK33z Can we avoid to rely on an external CDN, which may be slow to respond or unavailable at development time?\n. ",
    "jahe": "I fixed it by overriding the dependent \"sockjs-client\" module with version 1.0.1 by creating a npm-shrinkwrap.json file next to the package.json with the following content:\n{\n  \"dependencies\": {\n    \"webpack-dev-server\": {\n      \"version\": \"1.14.1\",\n      \"from\": \"webpack-dev-server@1.14.1\",\n      \"dependencies\": {\n        \"sockjs-client\": {\n          \"version\": \"1.0.1\",\n          \"from\": \"sockjs-client@1.0.1\"\n        }\n      }\n    }\n  }\n}\nThis is kind of a messy solution but it solves the problem.\n. ",
    "AlexGrrr": "@SpaceK33z I tried the gist with \"webpack-dev-server --inline\" and it throws the same error - \"Incompatible SockJS! Main site uses: \"1.1.1\", the iframe: \"1.0.1\"\"\nThe iframe references a CDN script.\nIf you're saying it works, could you post a gist?\n. @SpaceK33z \nThanks for getting back to me.\nThe OS is windows 7\nI tried in many browsers with the  same error - \nChrome 52\nIE 11\nFirefox 47\n. @SpaceK33z \nthanks for your response & quick fix!\n\nin edge cases\n\nYou mean the iframe modus is an edge case and usually it should not create the iframe (thus avoiding this issue altogether)? If so, then how can I avoid the iframe mode?\n. ",
    "volkanunsal": "Any chance of releasing this fix for Webpack 1?. ",
    "yoobit": "any word on this? I updated to webpack 2 and still getting this error. \n\nI tried all the things that were suggested here, including the following. Nothing worked.\nhttps://github.com/webpack/webpack-dev-server/commit/0de52b24a0d0ccc07cb7955679a79ebddc8eb5ec\n. ",
    "arianrhodsandlot": "Hot Module Replacement is still unusable in webpack dev server V1 due to this bug. Will https://github.com/webpack/webpack-dev-server/pull/493 be backported for webpack 1? . Hot Module Replacement is still unusable in webpack dev server V1 due to this bug. Will https://github.com/webpack/webpack-dev-server/pull/493 be backported for webpack 1? . ",
    "rthewhite": "Any idea on when this might be released? It's a quite annoying.\n. @SpaceK33z thank you for the heads up \ud83d\udc4d \n. ",
    "Bruce17": "Yes I'm using noParse.\njs\nnoParse: [\n        /[\\/\\\\]angular\\.js$/,\n        /[\\/\\\\]angular-animate\\.js$/,\n        /[\\/\\\\]angular-ressource\\.js$/,\n        /[\\/\\\\]angular-touch\\.js$/,\n        /[\\/\\\\]angular-translate\\.js$/,\n        /[\\/\\\\]angular-ui-router\\.js$/,\n        /[\\/\\\\]angular-utils-pagination\\.js$/,\n        /[\\/\\\\]hotkeys\\.js$/,\n        /[\\/\\\\]moment\\.js$/,\n        /[\\/\\\\]babel\\.js$/,\n        /lodash/,\n        /locale/,\n        /node_modules[\\/\\\\]webpack[\\/\\\\]/,\n        /node_modules[\\/\\\\]json3[\\/\\\\]/,\n        /\\.html$/\n    ]\nMight /node_modules[\\/\\\\]webpack[\\/\\\\]/ cause a problem?\n. ",
    "Elemino": "Haven't been able to fix this. Project Abandoned. Would be nice to know what might have caused this. Thanks!\n. Sorry. forgot about this issue. But interested in trying it out. Will update once I install dev env. . ",
    "othyn": "Sorry if this is raking up the past, but I've just come across this issue when implementing CI/CD.\nThe build environment on Semaphore was set by default to Node v0.10, which I failed to notice and thus the build failed.\nOnce I realised, I brought the version up to my dev env of v6.9.1 and everything ran smoothly.. ",
    "wips": "@SpaceK33z, the code has been changed significantly since when I posted the issue. Unfortunately, I missed @sokra s response on Jun 2. I need some time to reproduce the issue and try a fix. I will post here as soon as I have information.\n. Thanks guys, removing--hot` has helped. Though is it very hard to find it out oneself.\n. ",
    "frenic": "What version of webpack-dev-server do you have? staticOptions is only available from v2.1.0-beta.0 as you can see in https://github.com/webpack/webpack-dev-server/commit/e5f698deabbb8a4b6d213b43098db85880d62ba4.\n. ",
    "AndrejGajdos": "Actually not, answer is here\n. ",
    "marie-hughes": "@sokra, could we get some movement on this? This issue makes the hotloader unusable.\n. ",
    "elyscape": "@SpaceK33z I'm not sure if this is still the case but, at the time this pull request and issue #474 were opened, sockjs-client wasn't included in client/index.bundle.js.\n. ",
    "t246246": "I found I have to set explicitely  publicPath, hot and historyApiFallback inside 'new WebpackDevServer()'  i.e.\njavascript\n// Start a webpack-dev-server\n    new WebpackDevServer(webpack(myConfig), {\n        stats: {\n            colors: true\n        },\n        hot: true,\n        historyApiFallback: true,\n        publicPath: myConfig.output.publicPath  /* '/dist/' */\n    }).listen(8080, \"localhost\", function(err) {\n        if(err) throw new gutil.PluginError(\"webpack-dev-server\", err);\n        gutil.log(\"[webpack-dev-server]\", \"http://localhost:8080/webpack-dev-server/index.html\");\n    });\ndevServer setting in webserver.config.js seems to be ignored here.\n. I think you will need npm v3.\n. I think you will need npm v3.\n. When you install modules locally, it is located node_modules/.bin.\n$ cd your-folder-that-have-packages.json\n$ node_modules/.bin/webpack-dev-server\nOr if you add package.json\n\"scripts\": {\n        \"start\": \"webpack-dev-server\"\n    },\n$ npm run start\nwill invoke webpack-dev-server\n. When you install modules locally, it is located node_modules/.bin.\n$ cd your-folder-that-have-packages.json\n$ node_modules/.bin/webpack-dev-server\nOr if you add package.json\n\"scripts\": {\n        \"start\": \"webpack-dev-server\"\n    },\n$ npm run start\nwill invoke webpack-dev-server\n. ",
    "brusand": "yes i solved it via HttpsProxyAgent\nBruno\n2016-06-07 5:56 GMT+02:00 Tom\u00e1s Charad notifications@github.com:\n\nHi @brusand https://github.com/brusand,\nHow did you manage to solve this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/495#issuecomment-224166891,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABknscF4-KIO9CHJ0av-8DpLT2S11r0Zks5qJOvjgaJpZM4IqPE1\n.\n. yes i solved it via HttpsProxyAgent\n\nBruno\n2016-06-07 5:56 GMT+02:00 Tom\u00e1s Charad notifications@github.com:\n\nHi @brusand https://github.com/brusand,\nHow did you manage to solve this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/495#issuecomment-224166891,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/ABknscF4-KIO9CHJ0av-8DpLT2S11r0Zks5qJOvjgaJpZM4IqPE1\n.\n. \n",
    "perry-mitchell": "Thanks @SpaceK33z - Will update this as soon as I can \ud83d\ude42\n. @SpaceK33z I've updated the PR - using document.currentScript as you said.\n. ",
    "Mischi": "If you consider releasing 1.14.2 from my webpack-dev-server-1, i would like to backport #499 (after you have merged it) as well.\nDo you know any other commits which may be worth backporting?\n.  https://github.com/Mischi/webpack-dev-server/tree/webpack-dev-server-1 now includes #499 too.\n.  https://github.com/Mischi/webpack-dev-server/tree/webpack-dev-server-1 now includes #499 too.\n. ",
    "taokd": "check whether  the output.publicPath has a value or not? output.publicPath should has a value.\n. ",
    "454de6e": "I have a publicPath defined. I double checked in the browser console by changingconsole.log() in one of my bundled files that HMR works fine for my JavaScript bundle. But automatic refresh for HTML pages still does not work.\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\nis not injected and even if I add it manually, automatic refresh for HTML still does not work.\n. I have a publicPath defined. I double checked in the browser console by changingconsole.log() in one of my bundled files that HMR works fine for my JavaScript bundle. But automatic refresh for HTML pages still does not work.\n<script src=\"http://localhost:8080/webpack-dev-server.js\"></script>\nis not injected and even if I add it manually, automatic refresh for HTML still does not work.\n. Some more insight after playing around. When starting webpack-dev-server with\nwebpack-dev-server --content-base build/ --hot --inline\nHMR works fine, but automatic refresh for HTML pages does not work. When I remove the --hot option and start webpack with\nwebpack-dev-server --content-base build/ --inline\nautomatic refresh for HTML pages works fine and also refresh for JavaScript. Obviously for JavaScript it's not a hot reload.\nAny idea why --hot breaks the HTML auto refresh and is there a way to get both auto refresh for HTML and HMR working, @sokra?\n. Some more insight after playing around. When starting webpack-dev-server with\nwebpack-dev-server --content-base build/ --hot --inline\nHMR works fine, but automatic refresh for HTML pages does not work. When I remove the --hot option and start webpack with\nwebpack-dev-server --content-base build/ --inline\nautomatic refresh for HTML pages works fine and also refresh for JavaScript. Obviously for JavaScript it's not a hot reload.\nAny idea why --hot breaks the HTML auto refresh and is there a way to get both auto refresh for HTML and HMR working, @sokra?\n. ",
    "jpmelnik": "I have the same issue:\n\nwebpack-dev-server --content-base src/ --devtool eval --progress --colors --inline\n\nThe .scss and .js files refresh accordingly. But with html files, something goes wrong.\nI haven't a html-loader assigned in the Webpack config file. \n. ",
    "thisisvilla": "same here... :( . ",
    "spookyvert": "sameeee. ",
    "kurdin": "if somebody else has this problem with proxy not working correctly after upgrading to 2.1.0-beta here is how to fix it:\nin 2.1.x webpack-dev-server uses http-proxy-middleware that expect double asterisk ** instead of one * to proxy all requests.\nso in your config: \nproxy: {\n  '*': 'http://localhost:3000'\n}\nchange to \nproxy: {\n  '**': 'http://localhost:3000'\n}\nhttps://github.com/chimurai/http-proxy-middleware#context-matching\n. ",
    "allienx": "@kurdin thanks! Good link :+1: \n. ",
    "Laleeth": "Thank you :)\n. Thank you :)\n. ",
    "ryanaleksander": "Nvm, the contentBase didn't work as I expected, it was referencing to my disk's root instead of the project folder\n. Nvm, the contentBase didn't work as I expected, it was referencing to my disk's root instead of the project folder\n. ",
    "anri-asaturov": "webpack-dev-server compiles and outputs your sources in-memory, including index.html. Also why would you need hash in dev builds(although possible)? Tell me if you need me to show a working config for you.\n. @lemind Well you will not use webpack-dev-server in production, right. So you need a production configuration that has a [hash] in file name configuration. Refer to documentation please: https://webpack.js.org/configuration/output/#output-filename. @lemind HtmlWebpackPlugin should automatically pick up correct name.  https://github.com/jantimon/html-webpack-plugin. @lemind webpack-dev-server is for development, you need different configuration for prod.. @lemind plugins: [new HtmlWebpackPlugin({inject: true})] read the html-webpack-plugin docs. ",
    "lemind": "Hi @anri-asaturov \nCould you give me more details about this case? \nI have index.html in root folder and use it for webpack-dev-server\nBut I want to use hashes for prod version.\n. @anri-asaturov  I have read this. Problem is webpack-web-server does not invoke html-webpack-plugin.\nEssentially it does but server made index.html version in memory I suppose and I see version index.html which locate in root folder.\n. @anri-asaturov I got it. But how could I insert my .css/.js src links in develop mode?. ",
    "leosj": "compiler.outputFileSystem.readFileSync(compiler.outputPath+'/index.html');. ",
    "ElvisWang27": "You can try to use 'html-webpack-harddisk-plugin' to output the html to disk. ",
    "akhaku": "May want to fix the lint error? See the travis build...\n+1 from me, this is something I would find useful, too.\n. ",
    "Jessidhia": "@SpaceK33z I'm actually not sure this is necessary anymore, IIRC there were changes on the webpack side that might have fixed this, but I don't remember which.\n. Whoops, that was an actual positive match.\nI accidentally put the performance value inside the devServer config.. Unfortunately, just changing the module to http2 won't work because of https://github.com/expressjs/express/issues/3388\nExpress doesn't seem to actually use node's request/response stuff but uses custom ones which are then setPrototypeOf to the node versions, and because of that it actually will not work correctly and crashes as soon as an h2 request happens.. @evilebottnawi this branch itself should reproduce it; the hard part is automated testing.\nTo reproduce it, just do an h2 connection to webpack-dev-server in --https mode.\n\n@michael-ciniawsky \"fixing\" the node bug will just make the spdy module stop crashing but is not the real fix; either fixing the express bug or migrating away from express are.. ",
    "lixinliang": "If I open the website in browser with the localhost that it will work.\nBut, It will show this error when I open the website in the other address by proxy tool.\n. Charles.\nFor example, I map web.me.yy.com/index.html to 172.26.129.111:8080/index.html.\nThen I open web.me.yy.com/index.html on my phone, and I can see the request web.me.yy.com:8080/sockjs-node/info?t=xxx in Charles.\nAnd the log show Disconnected.\nI know the request will be failed because I only map the address instead of domain.\nI can dev the website and see the result immediately on Chrome because webpack hot reload.\nBut, I need to ensure the website is ok on mobile.\nSo I will check again on my phone.\nIs there any configuration that hide the Disconnected log and keep the hot reload working?\n. Well, I've got it, probablely.. I will try it later. THX.\n. ",
    "bsrdjan": "Reading the doc sometimes helps :), the rewrite does not exist any more, pathRewrite can be used instead, for example:\njavascript\n      pathRewrite: function (url) {\n        return url.replace(/^\\/api/, '');\n      }\n. ",
    "oscdeveloper": "Open file:\n\\node_modules\\watchpack\\lib\\DirectoryWatcher.js\nGo to line: 52, it's about:\nthis.watcher = chokidar.watch(directoryPath, {\n        ignoreInitial: true,\n        persistent: true,\n        followSymlinks: false,\nAdd this:\nignored: /node_modules/,\nSave file and run again webpack with ---watch-polls option.\nEx:\ngulp.task('webpack', plugins.shell.task('webpack --config ./config/webpack.dev.js  --watch --watch-poll'));\n. ",
    "wong2": "+1\n. ",
    "lalitkapoor": "you can add react-dev-utils to your package.json and then add 'react-dev-utils/webpackHotDevClient' to your entry (before your app's starting point) - e.g.:\nentry: {\n    'app': [\n      'react-hot-loader/patch',\n      'react-dev-utils/webpackHotDevClient',\n      './public/index.js'\n    ]\n  },. ",
    "mikeaustin": "overlay: true doesn't seem to do anything for me. Am I doing something wrong?\n\"webpack-dev-server\": \"^2.9.2\"\nmodule.exports = {\n  ...\n  devServer: {\n    overlay: true\n  }\n}\n\n. I have seen in rare occurrences. I thought it would be shown for all and any errors, but that doesn't seem to be the case.. Ahh, it doesn't seem to capture runtime errors...?\n\"Uncaught ReferenceError: x is not defined\"\n\"Uncaught TypeError: window.foo is not a function\"\netc.... So we can't use anything > 2.9.7? Many of us can't just drop IE 11 support. Are there other options? Why is strip-ansi using fat arrow functions instead of being compiled to ES5?. ",
    "JerryChin": "Can't capture runtime errors, what a big disappointment.. Can't capture runtime errors, what a big disappointment.. ",
    "dizzyn": "Hi, yes. It does the same even with the configuration:\nmodule: {\n    loaders: [{\n            test: /\\.js?$/,\n            exclude: /(node_modules)/,\n            loader: ['babel-loader']\n        },      \n    ],\n    preLoaders: [\n        {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n}\n. Hi, yes. It does the same even with the configuration:\nmodule: {\n    loaders: [{\n            test: /\\.js?$/,\n            exclude: /(node_modules)/,\n            loader: ['babel-loader']\n        },      \n    ],\n    preLoaders: [\n        {test: /\\.js$/, loader: \"eslint-loader\", exclude: /node_modules/}\n    ]\n}\n. yes. if there is an error for the eslint and i fix that, it says \n'no chnges' but the error is still reported.\n. ",
    "yanyu0517": "I meet the similar problem too. Is there any solutions?\n. ",
    "damassi": "@yanyu0517 - This plugin solved my problem: https://github.com/gajus/write-file-webpack-plugin. Then, i just had to point my public path at the physical location and was able to get it to work. Note that it was a bit tricky, but it is resolvable. \n. Thats a fantastic solution -- will close this issue as it seems sufficient for most cases. \n. ",
    "jamiehill": "If you're using express in front of webpack-dev-server, it's simply a case of adding a route to your Dll:\napp.get(/dll.vendor.js$/, (req, res) => {\n   res.sendFile(`${config.paths.distDir}/js/dll.vendor.js`);\n});\nObviously making sure you've built the Dll before starting up express\n. ",
    "appsolutegeek": "Oh, I forgot to mention, I am using Angular v1 with the above :-)\n. ",
    "graingert": "@dcep93 use options.setup\nhttps://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L255-L258\njs\nconst webpackConfig = {\n    devServer: {\n        setup(app) {\n            app.use(new YourOwnMiddleware())\n        }\n    }\n}\nexport default webpackConfig\n. That's strange, what data is going into url.format that results in the failure?\n. yup it's here: https://github.com/chimurai/http-proxy-middleware/blob/7d1865c84f4339ced230b0292db42c4d45376f1a/lib/handlers.js#L53. @SpaceK33z here's the PR: https://github.com/chimurai/http-proxy-middleware/issues/131. Nice, can you bump the version?. @sokra if you don't want to play whack-a-mole with deps as the npm ecosystem moves to releasing greenfield JS you should have a look at https://github.com/webpack/webpack-dev-server/pull/1279. @julianxhokaxhiu FYI, i've released drop-in-replacement @procensus/webpack-dev-server with my fix in  #1279. > this gets merged :)\nHopefully it won't! ;) publishing `ES${new  @Date().getFullYear()}` to npm is the future.  See #1279\n. @julianxhokaxhiu replied here: https://github.com/webpack/webpack-dev-server/pull/1279#issuecomment-358612600. I had @nobitagit try this out in IE11 and it works great.. thank you @sindresorhus for dragging us into the future!. (replying from https://github.com/webpack/webpack-dev-server/pull/1273#issuecomment-358611966)\n@julianxhokaxhiu are you sure that's not in your own code?\nHere's the bundled JS https://unpkg.com/@procensus/webpack-dev-server@2.11.0/client/index.bundle.js. @julianxhokaxhiu you've not switched to @procensus/webpack-dev-server in polysticky. Can you publish a branch with your changes?. what's this doing on postinstall. This should definitely stay prepublish\n. ",
    "dcep93": "aah, must have missed that\nthanks so much\n. ",
    "poonam6785": "I am facing the same CORS  issue when i try to fetch data from \"http://en.wikipedia.org/w/api.php?format=json&action=query&generator=random&grnnamespace=0&grnlimit=10\". I am using \n  \"dependencies\": {\n    \"react\": \"^15.2.1\",\n    \"react-dom\": \"^15.2.1\",\n    \"webpack\": \"^1.13.1\",\n    \"webpack-dev-server\": \"^1.14.1\"\n  },\nIts working in chrome if i enable CORS extension in chrome.\nThanks\n. ",
    "Soolan": "Thanks @SpaceK33z ,\nI edit the file as follow:\ndevServer: {\n    historyApiFallback: true,\n    watchOptions: { aggregateTimeout: 300, poll: 1000 },\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"GET, POST, PUT, DELETE, PATCH, OPTIONS\",\n      \"Access-Control-Allow-Headers\": \"X-Requested-With, content-type, Authorization\"\n    }\n  },\nStill no luck. Your advice is much appreciated.\n. @SpaceK33z, thank you for your time.\nI'm using Angular2 Http module and what I'm trying to accomplish is fetching the latest trends from this URL: http://hawttrends.appspot.com/api/terms/\nSince CORS didn't work for me I tried JSONP (i.e. http://hawttrends.appspot.com/api/terms/?callback=JSONP_CALLBACK)\nBut I got another issue regarding response which I asked for help here:\nhttp://stackoverflow.com/questions/38810930/angular2-unexpected-token\n. ",
    "CallMeXYZ": "@SpaceK33z your test do works but the json data cannot be fetched.Only get response likes body:(...),bodyUsed:false,headers:Headers,ok:false,status:0,statusText:\"\",type:\"opaque\",url:\"\"\n. ",
    "emeentag": "I experienced the same like @CallMeXYZ. Also adding no-cors mode is not a solution, it could be a solution but for the production, it is not acceptable. Anyway when i add no-cors mode i am getting an error like Response {type: \"opaque\", url: \"\", redirected: false, status: 0, ok: false\u2026} . ",
    "andrerpena": "Today I updated webpack-dev-server from 2.4.1 to 2.4.3 and suddenly HMR stopped working until I added this to my webpack config file:\ndevServer: {\n        headers: {\n            'Access-Control-Allow-Origin': '*'\n        }\n    }. ",
    "karolyi": "@andrerpena interestingly, even if I add those headers in the config with today's 2.4.3, they are absent in the HTTP headers. My dev site is broken.\nInvestigating the issue.. I found the problem, but I'm not sure it's my fault. Webpack is still overly complicated, configurations traveling here and there.\nI use Gulp and Webpack, and so I have a gulpfile.js. Whereas when I put the headers into the webpack config file (from where gulp takes the config in a compiler and passes to WebpackDevServer) doesn't work, when I put the headers into gulpfile.js passing as 'extra options', that works.\nSo here's my current gulp task with which adds the headers to the wrong config in my opinion:\n```javascript\ngulp.task('webpack-dev-server', ['clean'], () => {\n  const config = require('./frontend/webpack/config.dev-server')\nconst compiler = webpack(config)\n  const server = new WebpackDevServer(compiler, {\n    hot: true,\n    inline: true,\n    historyApiFallback: true,\n    contentBase: path.join(__dirname, 'frontend', 'src'),\n    publicPath: '/static/assets/',\n    stats: {\n      colors: true,\n    },\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n  })\n  server.listen(3000, '0.0.0.0', (err) => {\n    if (err) throw new gutil.PluginError('webpack-dev-server', err)\n    // Server listening\n    gutil.log('[webpack-dev-server]', 'http://localhost:3000/')\n  })\n})\n```\nThis extra headers config should go into the actual webpack configuration (./frontend/webpack/config.dev-server in my case), but it doesn't work there.\nLeaving this here as information for future reference, and for people who bump into the same problem.\nI'm not sure as to what changed that caused CORS to start being enforced, because I reverted webpack-dev-server to 2.4.2, and it still doesn't work there, the CORS headers aren't there either. I used it yesterday, and it worked, but it doesn't today. Might be it's a chrome update, I don't know.. Quick update: the access control headers are now replaced to disableHostCheck: true in the config due to #1604.. @sokra, can it be that this is connected with https://github.com/webpack/webpack-dev-server/issues/533#issuecomment-296438189?. +1\n(Please don't drop +1 comments on issues. It interrupts the flow of the discussion. Instead, use the reactions button on the original post in this thread to add a \ud83d\udc4d). ",
    "michaelBenin": "Any reason why the default isn't * ?\nReleated: https://github.com/gaearon/react-hot-loader/issues/56. Hi, I'm building a repro case for this. \nI'm instantiating the server as so: \nconst server = new WebpackDevServer(webpack(config), {\n    publicPath: config.output.publicPath,\n    hot: true,\n    historyApiFallback: true\n  }).listen(3000, 'localhost', (err /* , result*/) => {\n    if (err) {\n      return console.log(err); // eslint-disable-line no-console\n    }\n    console.log('Listening at http://localhost:3000/'); // eslint-disable-line no-console\n    return callback();\n  });\nThen on this method: \nprocess.on('SIGINT', () => {\n    log('Process interrupted');\n    server.close()\n    process.exit();\n  });\nI get an error on server.close.\nI'm going to try not chaining listen and see if that works. I'll more investigating. Will close now and reopen if I'm able to recreate. \n. Hi, I'm building a repro case for this. \nI'm instantiating the server as so: \nconst server = new WebpackDevServer(webpack(config), {\n    publicPath: config.output.publicPath,\n    hot: true,\n    historyApiFallback: true\n  }).listen(3000, 'localhost', (err /* , result*/) => {\n    if (err) {\n      return console.log(err); // eslint-disable-line no-console\n    }\n    console.log('Listening at http://localhost:3000/'); // eslint-disable-line no-console\n    return callback();\n  });\nThen on this method: \nprocess.on('SIGINT', () => {\n    log('Process interrupted');\n    server.close()\n    process.exit();\n  });\nI get an error on server.close.\nI'm going to try not chaining listen and see if that works. I'll more investigating. Will close now and reopen if I'm able to recreate. \n. Unable to close this way either:\n```\ngulp.task('webpack-dev-server', function runWebpackDevServer(callback) {\n  const server = new WebpackDevServer(webpack(config), {\n    publicPath: config.output.publicPath,\n    hot: true,\n    historyApiFallback: true\n  });\n  const activeServer = server.listen(3000, 'localhost', (err / , result/) => {\n    if (err) {\n      return console.log(err); // eslint-disable-line no-console\n    }\n    console.log('Listening at http://localhost:3000/'); // eslint-disable-line no-console\n    return callback();\n  });\nprocess.on('SIGINT', () => {\n    activeServer.close();\n    log('Process interrupted');\n    process.exit();\n  });\n});\n```\n. Unable to close this way either:\n```\ngulp.task('webpack-dev-server', function runWebpackDevServer(callback) {\n  const server = new WebpackDevServer(webpack(config), {\n    publicPath: config.output.publicPath,\n    hot: true,\n    historyApiFallback: true\n  });\n  const activeServer = server.listen(3000, 'localhost', (err / , result/) => {\n    if (err) {\n      return console.log(err); // eslint-disable-line no-console\n    }\n    console.log('Listening at http://localhost:3000/'); // eslint-disable-line no-console\n    return callback();\n  });\nprocess.on('SIGINT', () => {\n    activeServer.close();\n    log('Process interrupted');\n    process.exit();\n  });\n});\n```\n. Modifying this line fixed it: \n// delegate listen call and init sockjs\nServer.prototype.listen = function() {\n    return this.listeningApp.listen.apply(this.listeningApp, arguments);\nGoing to make another PR. \n. Modifying this line fixed it: \n// delegate listen call and init sockjs\nServer.prototype.listen = function() {\n    return this.listeningApp.listen.apply(this.listeningApp, arguments);\nGoing to make another PR. \n. Yea this is fixed in 2.1 Beta. I'll just use the beta release. Thanks and sorry. \n. So i had some issues with peer deps etc with npm. I'm using this branch if anyone else needs this functionality and maintain backwards compat with other libs: https://github.com/michaelBenin/webpack-dev-server/commit/8baf6a11f2a35d21ae2d7b2f382f8ceafe36deb1\n. ",
    "olehmelnyk": "well, Google Chome can be started with two flags/params:\n--user-data-dir=\"C:/Chrome dev session\" --disable-web-security\nthis will start the browser as a completely new user profile (which is good for dev) and with CORS enabled...\nwebpack-dev-server has the option to automatically open HTML in the browser once compilation is done, like\ndevServer: {\n    open: true\n}\nso it would be awesome if we could open it in chrome browser with --user-data-dir and --disable-web-security flags - any idea how to make it work?. yay! looks like I've found what I was looking for:\nnpm i -D webpack-browser-plugin\nthen\nconst path = require('path');\nconst browserPlugin = require('webpack-browser-plugin');\nconst chromeUserDataDir = 'your/path/here';\n...\nplugins: [\n     new browserPlugin({\n            openOptions: {\n                app: [\n                    'chrome',\n                    //'--incognito',\n                    '--disable-web-security', // to enable CORS\n                    '--user-data-dir=' + path.resolve(chromeUserDataDir) // to let Chrome create and store here developers plugins, settings, etc.\n                ]\n            }\n        })\n]\nand now you can work with CORS, and have a dedicated Google Chrome user profile that will include developer plugins and settings and will not overlap with browser settings/plugins for private use. ",
    "thunderkid": "I've found a solution to my ongoing CORS errors - switch to webpack-plugin-serve.\nFWIW, I'd been using webpack-dev-server since webpack 3 and had never been able to get rid of these CORS/sockjs-node errors in the console. I've tried everything listed on this and multiple similar threads - adding Access-Control-Allow-Origin, changing from localhost to 0.0.0.0, changing ports, running chrome without web-security, etc etc. None of these worked for me. I considered switching from webpack-dev-server to webpack-serve, but first one of these stated on its webpage that it was deprecated, then the other one did, then back to the first one. I forget the precise order in which these deprecation notices occurred but they made me nervous about the projects' status.\nThen around the end of 2018 I came across webpack-plugin-serve. It took about an hour of configuration to switch over, and I now get zero console errors. I also slightly prefer its ui (it has a browser overlay of build progress.) So I'd recommend it.. ",
    "also": "Awesome, I was about to submit the same pull request!\n. if(options.port) is the source of the bug, because it excludes 0 by relying on \"truthiness\".\nif(options.port != null) ensures that any options.port value except null or undefined is respected.\nWould a more explicit check with triple-equals like if(options.port !== null && options.port !== undefined) be in line with the code style?. ",
    "KevinHoughton": "I'm getting the same view.\n```\n// Dev server\nconfig.devServer = {\n    contentBase: '/',\n    proxy: {\n        // @see: https://github.com/nodejitsu/node-http-proxy#options\n        '*': {\n            target: 'http://localhost:8000'\n        }\n    },\n    host: '0.0.0.0',\n    port: process.env.WEBPACK_PORT || '8080',\n    // Serve webpack-dev-server over HTTPS Protocol.\n    // Includes a self-signed certificate that is used when serving the requests.\n    https: false\n};\n```\n. ",
    "Zyphrax": "I am having the same problem in the latest version. The contentBase property seems to be ignored. Both relative and absolute path are not working.\nIn my webpack.config.js (this worked fine before the update):\n```\nconst CONFIG = {\n  bundleDir: path.join(__dirname, 'bundle'),\n  mainIndex: 'index.html',\n  serverHost: '0.0.0.0',\n  serverPort: 8000\n}\n...\ndevServer: {\n    host: CONFIG.serverHost,\n    port: CONFIG.serverPort,\n    open: CONFIG.mainIndex,\n    contentBase: CONFIG.bundleDir,\n    colors: true\n}\n```\nNow it only works when I specify the contentBase as a command line argument:\n\"scripts\": {\n  \"server\": \"webpack-dev-server --content-base bundle\",\n}\n. ",
    "ajkhatibi": "I have a very similar problem. Is this an issue with webpack? . ",
    "tudorgergely": "How about adding an option like --suppress-logs ? That would actually make them optional (so maybe if someone wants to see the logs he can still do so)\n. You should not need that. Just set the title attribute of the HTML document you are serving\n. ",
    "rbeesley": "I just hit this exact problem too, but I've installed webpack@1.13.2 globally. I see the following:\n``\nX:\\>npm install webpack -g\nC:\\Users\\<username>\\AppData\\Roaming\\npm\\webpack -> C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\webpack\\bin\\webpack.js\nC:\\Users\\<username>\\AppData\\Roaming\\npm-- webpack@1.13.2\nnpm WARN optional Skipping failed optional dependency /webpack/chokidar/fsevents:\nnpm WARN notsup Not compatible with your operating system or architecture: fsevents@1.0.14\nX:>npm install webpack-dev-server -g\nC:\\Users\\\\AppData\\Roaming\\npm\\webpack-dev-server -> C:\\Users\\\\AppData\\Roaming\\npm\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js\nC:\\Users\\\\AppData\\Roaming\\npm\n+-- UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n-- webpack-dev-server@1.14.1-- UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\nnpm WARN webpack-dev-server@1.14.1 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\nX:>npm -v\n3.10.6\nX:>node -v\nv4.4.5\n```\n. ",
    "Wouter0100": "```\n$ sudo npm install --global webpack\n/usr/local/bin/webpack -> /usr/local/lib/node_modules/webpack/bin/webpack.js\n/usr/local/lib\n\u2514\u2500\u2500 webpack@1.13.2 \nnpm WARN optional Skipping failed optional dependency /webpack/chokidar/fsevents:\nnpm WARN notsup Not compatible with your operating system or architecture: fsevents@1.0.14\n$ sudo npm install --global webpack-dev-server\n/usr/local/bin/webpack-dev-server -> /usr/local/lib/node_modules/webpack-dev-server/bin/webpack-dev-server.js\n/usr/local/lib\n\u251c\u2500\u2500 UNMET PEER DEPENDENCY webpack@>=1.3.0 <3\n\u2514\u2500\u252c webpack-dev-server@1.15.0 \n  \u2514\u2500\u2500 UNMET PEER DEPENDENCY webpack@1 || ^2.1.0-beta\nnpm WARN webpack-dev-server@1.15.0 requires a peer of webpack@>=1.3.0 <3 but none was installed.\nnpm WARN webpack-dev-middleware@1.6.1 requires a peer of webpack@1 || ^2.1.0-beta but none was installed.\n```\nUnfortunately not fixed, as it seems. Webpack is installed globally.\n. ",
    "jerryhall": "I'm having similar if not same issue. I installed Webpack globally (using npm install --global webpack).\n. ",
    "doudounannan": "I also have this issue.I install globally webpack & webpack-dev-server ,but it still occurs \"npm WARN webpack-dev-server@1.15.0 requires a peer of webpack@>=1.3.0 <3 but none was installed\".\nHow to solve this issue?. ",
    "msuperina": "Hi I am looking at this one right now and have a few questions... Please forgive me if I am missing things as I am new to the webpack ecosystem and I have not looked at the whole source code of webpack-dev-server:\n- I was thinking of sending a stringified array of files that have changed. Would you rather keep the \"hash\" as name of the message or change it so something more generic as the message would contain both the hash and the changed values ?\n- client-side, is self the only object interested in the changed files ? I guess so ? if so, which syntax to apply ? at the moment it's \n\"webpackHotUpdate\" + currentHash\nI was thinking of\n\"webpackHotUpdate\" + currentHash + \"|\" + currentChanged. ok I have created an example here https://github.com/msuperina/webpack-dev-server/tree/master/examples/hmr-css \n@jeroenransijn I had exaclty the same problem as you today and it solves it\nI am happy to open a PR but I need some indications about the message contracts in the socket communication. Also, \"webpackHotUpdate\" + currentHash + \"|\" + currentChanged seems hacky, I would rather have event.data as an object but need validation as it could break code of people consuming this library.. @SpaceK33z thanks, I agree the CSS part should not be in the PR, it's only a consumer of the event. I will go ahead with a PR for client/index.js and Server.js as you seem to approve.. I found that one https://github.com/webpack-contrib/extract-text-webpack-plugin/pull/89 which seems to e be a better place to solve this. Will probably create a PR there. @SpaceK33z can you let me know if you still want a PR here to send metadata to the client in addition to the hash please ? . ",
    "simPod": "Ah yes. And it answers my question that it's not yet possible. I'm closing this and will follow that thread. Thanks\n. The problem started around this midnight I suppose\nAnd it seems like it is wrongly listed here https://www.npmjs.com/advisories/725/versions as it says version 3.1.6+ is fine but is listed as affected as well.. Those versions are listed as affected\n\n. On the 1st January I contacted NPM. Should be just fine now\n\n\n. @falsy Have you read my posts? I think it explains it all.. Is your issue Missing Origin Validation? Do have installed only v3.1.11+?. Read the link first then https://nodesecurity.io/advisories/725 to understand that you are using affected version and then upgrade it. . ",
    "sdhhqb": "Turns out the problem is related to chrome version, after update chrome to latest version this issue no longer appear.\n. Sure, it's not worth to solve it.\n. ",
    "superddr": "I have the same issue with latest chrome on win7 \n. ",
    "Yerkon": "The same problem with latest Firefox Developer Edition 51.0a2. Works fine on Chrome\nDetails image\n. https://bugzilla.mozilla.org/show_bug.cgi?id=712329#c23\n. ",
    "samsch": "I'm also getting this issue in one of my projects. For me, the message is (re-)displayed about every 1.2 seconds, with a page refresh. The page loads the https://localhost:8082/sockjs-node/info?t=xxxxxxxxxxxx and a what appears to the be web socket connection request before immediately refreshing.\nThe problem occurs in Firefox (v52, x64, Xubuntu 15.10), and not in Chrome (56.0.2924.87 x64). Webpack@2.2.1, webpack-dev-server@2.4.1. Also running latest sass/css/style loaders, extract-text-plugin, babel-loader.\nFor a weird bit, this same config works fine (in Firefox) when the entrypoint isn't my main project. I have three secondary entry points which are compiled with a config file that imports the main one and changes the entry. (Actually, both the main project and secondary configs work like that -- import the main config and set the entry option). The main project uses a few more packages, but I tested requiring each of those in one of the secondary entries, and that didn't reproduce the issue, so it's not as simple as that.\nIs it possible that the project size could be affecting this? My main project compile is much larger, and takes significantly longer to compile.\nIn my main project, I also tried putting a throw new Error(); before any other code. This didn't seem to stop the problem. I'm wondering if maybe there is a hanging WS handler which is catching something before the refresh is done.\nSince I have known bad and good configuration, I'm willing to test any ideas which could lead to the cause and solution for this issue. I'm very regularly in #react.js on freenode for faster communication.\nUPDATE\nI figured out how to reproduce in the my other config. My main project doesn't run on the / web path, it runs in a (virtual) path. It looks like not running from the root triggers the problem. I'm going to see if I can make a minimal reproduction with this info.. Ok, I managed to build a minimal test case.\nIt's important to have a slow server delaying the page load. I'm guessing the issue is a timeout or a web socket message sent right before the page loads/reloads. I'm also guessing that the reason a test case has been hard to recreate is because it's not normal to intentionally slow things down. I picked up on it because I have a project with a backend which is sluggish (at best) on my local dev machine.\nThe subdirectory bit in my update to the previous comment doesn't seem to be related at all. I think that was just a coincidence. The problem reproduces fine at the root path.. http-proxy-middleware exposes a proxyTimeout option from the underlying node-http-proxy, however, it defaults to not being enabled, and a grep search in this module and webpack-dev-middleware doesn't reveal it being set anywhere.. I'm really just scratching at the surface, since I have no prior familiarity with the webpack-dev-server internals.\nIn client/socket.js, there is a re-connect which takes 1000-1100ms. Could the problem be that the connection is closed on webpack rebuild, the page starts to refresh (causing a connection close, and the [WDS] Disconnected! message), but the timeout fires before the page fully refreshes. Since webpack-dev-server is otherwise idle, the reconnection succeeds, maybe firing reloadApp() in client/index.js?\nIf this is the problem, then maybe there needs to be onbeforeunload handler which cancels or blocks the timeout?. For the fun of it, I tested using version 2.2.0 (original stable v2 release), and it also fails. I don't know if this applies to the v1 branch of the module or not. @adamwallace what version are you using?. I failed to reproduce using these versions in my test case:\nwebpack-dev-server: \"2.4.5\",\nwebpack: \"2.4.1\",\nGoogle Chrome: \"57.0.2987.133\",\nOS: \"Xubuntu 17.04\"\n@zba Can you get a minimal test-case failing? You can fork from my old one if you want.. @ocollins Can you reproduce the problem in a test case with latest? This problem should be fixed in >=2.4.5.. The pull which fixed this issue originally shouldn't fail for even longer server delays, and running my test case with updated versions doesn't fail (in linux). I don't have immediate access to Windows or a Mac to test on right now.\n@ocollins @Sozialarchiv @goodmorninggoaway We need a testcase which fails to diagnose the issue. Feel free to fork from my repo for the test (you will need to update the versions).\nVersions I tested with:\nwebpack-dev-server: \"2.7.1\",\nwebpack: \"3.5.3\",\nFirefox: \"54.0\",\nXubuntu: \"16.10\". This issue seems similar or a duplicate of #544. I also am seeing this problem on a complex project, and having difficulty narrowing down where the cause is.\nI'm using webpack-dev-server 2.4.1, so it doesn't seem that issue is the same. Again, the issue is in Firefox (52), and it works fine in Chrome.\nUPDATE:\nI just posted a minimal test case which fails for me in #544.. @sarora2073 If it's the same issue at fault, then I would suspect that it's sporadic because your server response time varies across the timeout threshold.. ",
    "zba": "still have same issue,\n\"webpack-dev-server\": \"^2.4.5\",\n\"webpack\": \"^2.4.1\",\n\"chromium\": \"57.0.2987.98\",\n\"OS\": \"Linux\". ",
    "Sozialarchiv": "I can confirm this problem:\nwebpack-dev-server: \"2.7.1\",\nwebpack: \"3.5.1\",\nFirfox : \"55\",\nOS: \"Windows 7\". ",
    "xxxfuwei": "I have same problem\n\"webpack\": \"^3.6.0\",\n    \"webpack-bundle-analyzer\": \"^2.9.0\",\n    \"webpack-dev-server\": \"^2.9.1\",\n    \"webpack-merge\": \"^4.1.0\"\nMy chrome is 67.0.3396.99\uff0832 \uff09. @gitors , I have same problem. And my chrome version is 67.0.3396.99 just like you.. @gitors , can you fixed this problem?. ",
    "DirtySoc": "Issue persists in Firefox. See minimal test case here.\nOS: Windows 10\nBrowser: Firefox Dev 66.0b14\n\n\"dependencies\": {\n        \"babel-cli\": \"^6.26.0\",\n        \"babel-loader\": \"^7.1.5\",\n        \"babel-preset-env\": \"^1.6.1\",\n        \"webpack\": \"^4.29.6\",\n        \"webpack-cli\": \"^3.2.3\",\n        \"webpack-dev-server\": \"^3.2.1\"\n  }. \n",
    "evilebottnawi": "@DirtySoc Can't reproduce in Firefox and Chrome (linux and windows), looks bug in Firefox with websockets, please use stable version of Firefox. We should move CLI logic to webpack-cli (we need discussion how better do this). Ideas:\n- Allow package define own command in webpack-cli\n- Remove out bin and add message about using webpack serve instead webpack-dev-server bin\nFeel free to discussion. Somebody can create minimum reproducible test repo? . Issue has a lot of post with difference issue, please confirm what issue exists and provide minimum reproducible test repo, thanks!. Issue was closed due a lot of difference issues in one, also problem should be solved in latest version, anyway feel free to open new issue with reproducible test repo, thanks!. /cc @n1474335 Problem still exists? If yes please create minimum reproducible test repo. webpack-dev-server in maintenance mode. webpack-server (https://github.com/webpack-contrib/webpack-serve) is current stable and long term support version.\nWe rewrite many parts of webpack ecosystem on easy and light versions. It is fast and very stable and flexibility. Perhaps for some it seems strange why we are releasing new packages. Since the existence of webpack, we have received a lot of experience and feedback from the developers, it has allowed us to develop new approaches to solve the problems that you face. Some parts of ecosystem have problem in architecture, we can't break packages because many people still use their.. @marharyta source maps is part of webpack, please read https://webpack.js.org/configuration/devtool/. Somebody still has problem? if yes, please create minimum reproducible test repo, thanks!. /cc @micacardillo Problem still exists?\nIf somebody has problem please report here about this, any reproducible test repo welcome, thanks!. @creage FYI, not a good solution change atime and ctime, you can break cache for package which using this files.. Better example:\n```js\nbefore(app, server) {\n      const chokidar = require(\"chokidar\");\n      const files = [\n        // Refreshing php files\n        \"*/.php\"\n      ];\n  chokidar\n    .watch(files, {\n      alwaysStat: true,\n      atomic: false,\n      followSymlinks: false,\n      ignoreInitial: true,\n      ignorePermissionErrors: true,\n      ignored,\n      persistent: true\n    })\n    .on(\"all\", () => {\n      server.sockWrite(server.sockets, \"content-changed\");\n    });\n}\n\n``. @ferrybig  it is mean - allow to start server on IPv6, but valid use[::]`?\nUse 0.0.0.0 to start on all IPs. We can do this in next major release. /cc @kellyrmilligan @sepo27 sorry for delay, problem still exists?. @andreyvolokitin we use this snippet for php:\n```js\n    before(app, server) {\n      const chokidar = require(\"chokidar\");\n      const files = [\n        // Refreshing php files\n        \"*/.php\"\n      ];\n  chokidar\n    .watch(files, {\n      alwaysStat: true,\n      atomic: false,\n      followSymlinks: false,\n      ignoreInitial: true,\n      ignorePermissionErrors: true,\n      ignored,\n      interval: typeof poll === \"number\" ? poll : null,\n      persistent: true,\n      usePolling: Boolean(poll)\n    })\n    .on(\"all\", () => {\n      server.sockWrite(server.sockets, \"content-changed\");\n    });\n}\n\n. @andreyvolokitin we use this snippet for `php`:js\n    before(app, server) {\n      const chokidar = require(\"chokidar\");\n      const files = [\n        // Refreshing php files\n        \"*/.php\"\n      ];\n  chokidar\n    .watch(files, {\n      alwaysStat: true,\n      atomic: false,\n      followSymlinks: false,\n      ignoreInitial: true,\n      ignorePermissionErrors: true,\n      ignored,\n      interval: typeof poll === \"number\" ? poll : null,\n      persistent: true,\n      usePolling: Boolean(poll)\n    })\n    .on(\"all\", () => {\n      server.sockWrite(server.sockets, \"content-changed\");\n    });\n}\n\n``. @shellscape what do you think about add to documentation example above?. @shellscape what do you think about add to documentation example above?. @andreyvolokitin can you describe you issue on example? You can add own logic to snippet above, also you can use browser-sync plugin for webpack.. @andreyvolokitin can you describe you issue on example? You can add own logic to snippet above, also you can use browser-sync plugin for webpack.. @andreyvolokitinHtmlWebpackPluginworks throughwebpackapi and should be compatibility withdev-serverno need manually reload (i am not familiar with html plugin). @andreyvolokitinHtmlWebpackPluginworks throughwebpackapi and should be compatibility withdev-serverno need manually reload (i am not familiar with html plugin). @chen88 what editor you are use?. @chen88 Can you try run dev server and change file using other editor?. @AKArchy problem still exist? Can you create minimum reproducible test repo?. /cc @hiroppy we need test with latest deps this problem and close this in3.3.0` version. @byzyk \n\nHowever, it might change some default functionality or expected behavior and thank you for pointing it out. But it's not the same as removing feature as a whole.\n\nShould have major label (and will be in next branch, not in master).\nAlso need tests, codecov/patch failed.. @byzyk for me yes, i have some project on php and laravel/blade and now use hack for reloading page https://github.com/webpack/webpack-dev-server/issues/1271#issuecomment-359817498, be good have this option in out of box in next branch, in theory i can use browser-sync for this, but for me it is overload tool (perf also decrease, and memory leak, which don't fix a lot of time :disappointed: ). Also we already have chokidar, just add option for array of glob and refresh page when something changes.. /cc @byzyk sorry for big delay, i think you are right, we need:\n- hot option enable/disable HMR\n- livereload option for enable/disable auto reload page (HMR still works)\nSummary: \n- using --no-hot and --no-livereload you disable HMR and livereload\n- using --no-hot you disable only HMR (browser now always reload pages)\n- using --no-livereload you disable livereload (HMR still works)\n- no options HMR and livereload works together\nAlso we deprecated --hot-only option because it is misleading\nWhat do you think?. @mikeaustin it's better to ask strip-ansi developers. It looks like you just deleted our lovely crafted issue. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. Problem in vue-loader/plugin, you should enable hot feature for components. @peletomi you use style-loader, all css files inside js and inject in DOM from runtime code. @TheLarkInn need patch release after merge, otherwise babel would be a more rational solution. Reproducible test repo doesn't work, also you use outdated version of webpack-dev-server, please update. Closing issue due can't reproduce, anyway feel free to feedback. If somebody can create working reproducible test repo with latest version of webpack-dev-server i will reopen issue and fix problem, thanks!. Need rebase or create new Pr. @gDelgado14 PR welcome, also please don't remove issue template . Close in favor https://github.com/webpack/webpack-dev-server/pull/1632. @vibingopal webpack-dev-server don't have outputPath option. Example:\nmodule.exports = {\n       output: { \n           path: helpers.root('dist')\n       },\n       devServer: {\n            port: METADATA.port,\n            host: METADATA.host,\n            historyApiFallback: true,\n            watchOptions: {\n                aggregateTimeout: 300,\n                poll: 1000\n            }\n        }\n}. @leegee friendly ping, problem still exists? If yes, please create minimum reproducible test repo, thanks. @leegee thanks for answer, let's close issue, if somebody will has same problem feel free to create new issue. It looks like you just deleted our lovely crafted issue. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @billyjanitsch no, you should set mode manually or using NODE_ENV, changing mode and env inside in code is bad practice. Exmaple:\ncross-env NODE_ENV=development webpack-dev-server. @billyjanitsch no, you should set mode manually or using NODE_ENV, changing mode and env inside in code is bad practice. Exmaple:\ncross-env NODE_ENV=development webpack-dev-server. @webpack-bot move to webpack/webpack.js.org. Close in favor https://github.com/webpack/webpack.js.org/issues/2610. /cc @sanonz . @sanonz Yes. Need rebase, CI failed\n@jojo-apollo feel free to recreate the PR . @jojo-apollo looks this PR also abandoned. @JannesMeyer Problem still exists? If yes please create minimum reproducible test repo. Closing due to inactivity. Please test with latest version and feel free to feedback/reopen if still regressions. Thanks!. 192.168.0.101 is not local ip, use 0.0.0.0 as above if you want to attach dev server to all ip or use directly 192.168.0.101. @phiphou before?. Problem still exists? If yes please create minimum reproducible test repo. Somebody can create minimum reproducible test repo?. @VijayKrish93 because webpack-dev-server in maintenance mode (https://github.com/webpack/webpack-dev-server#project-in-maintenance) and only bug/security fixes accepted. My recommendation is migration on webpack-serve. Thanks!. @Binarytales feel free to send a PR. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. Don't try to include webpack in your bundle, it is invalid.. @catamphetamine please create reproducible test repo. @kenotron just wait @shellscape review. @shellscape I think we should maintain package only for bug fix, many people not yet moved to webpack@4 and webpack-serve. I agree what we don't should add new feature. But this PR fix perf bugs and i think we should merge and do patch release.. @shellscape let's do this :+1: . @kenotron all good, v2 also in maintenance mode, because many people use webpack@3 . @SpaceK33z friendly ping :+1: . @lyboy2012 please use issue template and recreate issue. Thanks!. Problem in Safari, we use node API for running server over https (https://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L596). Looks this happens not only for webpack-dev-server https://stackoverflow.com/questions/18964175/how-to-fix-curl-60-ssl-certificate-invalid-certificate-chain. Some Safari version doesn't have good support for self-signed certificates and/or disable support self-signed certificates due security reasons. We can't solve this problem on our side. Feel free to experiment and feedback, also feel free to improve docs about this limitation.\nRef: https://www.osstatus.com/search/results?platform=all&framework=all&search=-9807. Fixed in https://github.com/webpack/webpack-dev-middleware/commit/e606cf1fa747b9b6d828dc259d346d1cf2f0d549, if somebody still have problem feel free to feedback thanks!. Fixed in https://github.com/webpack/webpack-dev-middleware/commit/e606cf1fa747b9b6d828dc259d346d1cf2f0d549, if somebody still have problem feel free to feedback thanks!. Looks like we can close issue! Please upgrade to webpack4.8. If problem still exists after upgrade feel free reopen :+1: . Looks like we can close issue! Please upgrade to webpack4.8. If problem still exists after upgrade feel free reopen :+1: . @hopperhuang problem still exists?. @hopperhuang problem still exists?. PR welcome. PR welcome. FYI: webpack-dev-server should be used only for dev env . FYI: webpack-dev-server should be used only for dev env . @se7en00 remove devServer.publicPath. Looks problem in some plugin/loader. Please update you deps, also you can install webpack or webpack-dev-server globally, pelase update their too and also please dobule check your lock file (if you use). Thanks!. Looks port is not respected when dev server try to load hot updated. PR welcome. Invalid configuration, please create minimum reproducible test repo. Closing in favor https://github.com/webpack/memory-fs/issues/59, also we have problem in webpack-dev-middleware and already fixed this problem, so update deps, if problem still exists feel fee to open new issue with reproducible test repo, thanks. @Rody-Kirwan problem still exists?. @Rody-Kirwan webpack-serve is deprecated and doesn't maintenance anymore. @Rody-Kirwan https://github.com/webpack-contrib/webpack-serve#webpack-serve. @Rody-Kirwan webpack-server is very buggy, better avoid to use this even it looks good and works. /cc @Rody-Kirwan can you create minimum reproducible test repo?. @Rody-Kirwan A lot of issue and work, feel free to investigate and send a PR with fix. @Rody-Kirwan Can we close issue here?. @eayan Why you install webpack-dev-server inside webpack-dev-server package?. It is expected behavior from npm.. @freszyk Looks you delete issue template. Feel free to fix it and reopen issue. Thanks!. /cc @SpaceK33z . It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @0xorial please accept CLA. @0xorial please rebase on master and fix CI problems. Thanks!. Looks on your stacktrace, problem in your configuration file (/home/praveen/Baseblock/client_webpack/client_webpack/webpack.config.js:7:16).. @elrumordelaluz Thanks for issue. wepback-dev-server in maintenance mode, your request is feature. I recomandate to migrate on https://github.com/webpack-contrib/webpack-serve and create issue if you need this behavior. Thanks!. @elrumordelaluz yes webpack-serve replace webpack-dev-server\n\nWhat that means?\n\nonly critical bugs and security fixes. @elrumordelaluz yes, here issue https://github.com/webpack/webpack.js.org/issues/2069. feel free to send a PR. @flekschas feel free to send a PR. Oh we don't have event/hooks right now, we need implement their. @jeremyzahner our semver allow install 2.0.3, why we should change this in package.json? Just update own lock file and all . webpack-dev-server@3 is not compatobility with webpack@1, when you run npm/yarn install you should see this messages. Not all code support HRM also you should use react-hot-loader for react component. Please note that webpack-dev-server is presently in a maintenance-only mode and will not be accepting any additional features in the near term. Most new feature requests can be accomplished with Express middleware; please look into using the before and after hooks in the documentation.\nUse webpack-serve for a fast alternative. Use webpack-dev-server if you need to test on old browsers.\nFrom https://github.com/webpack/webpack-dev-server#project-in-maintenance. @stoykostanchev :+1: PR welcome. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @stoicsquirrel PR welcome :+1: . @rzyanhao please use issue tempmate, otherwise your problem will be ignored or deleted, thanks!. Just use contentBase: false. No new option webpack-dev-server, repo in maintenance mode (only bug fixes), please use https://github.com/webpack-contrib/webpack-serve, in near future documentation will be updated. It looks like you just not filled our lovely crafted issue. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. wait @SpaceK33z . @WellspringCS @chobo2 please create minimum reproducible test repo, thanks. @WellspringCS It is hard to reproduce problem based on your information, i can't help without minimum reproducible test repo. We can contact via email and use NDA if you are afraid for the information in the project.. @WellspringCS translation game :smile: . It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. Close in favor https://github.com/webpack/webpack-dev-server/issues/616#issuecomment-466404912. We solve this for v4. /cc @hiroppy can we check all examples on working :+1: . /cc @hiroppy can we check all examples on working :+1: . @hiroppy don't have pr also, let's use path and just fix example with path. @wtgtybhertgeghgtwtg can you rebase this on master?. If you disable sockjs.js, hot doesn't work. @chavesgu can we close issue?. @shanmugarajbe please provide minimum reproducible test repo and create new issue. /cc @SpaceK33z i think we should merge this and release patch. It is internal behavior of browser, we can't solve this and it is out of scope webpack-dev-server . Problem still exists? Somebody can create minimum reproducible test repo?. Duplicate https://github.com/webpack/webpack-dev-server/issues/1510 .Close this issue due not issue template and test repo. @thomas-darling yep, let's fix it and release new version, can you create minimum reproducible test repo and describe in readme what you have and what you expected?. @thomas-darling yep, let's fix it and release new version, can you create minimum reproducible test repo and describe in readme what you have and what you expected?. Somebody can create reproducible test repo and we fix it in next release. Somebody can create reproducible test repo and we fix it in next release. @Vandivier can you create minimum reproducible test repo?. @Vandivier can you create minimum reproducible test repo?. @EloB oh sorry, i don't have time right now for this :disappointed: maybe someone other can help with this. @EloB oh sorry, i don't have time right now for this :disappointed: maybe someone other can help with this. @EloB friendly ping. @EloB friendly ping. @jojo-apollo why we need test websocket emission issue here?. @jojo-apollo why we need test websocket emission issue here?. @jojo-apollo maybe we can test this manually. @jojo-apollo maybe we can test this manually. @jojo-apollo let's wait 72 hours on answer and feel free to recreate PR. @jojo-apollo let's wait 72 hours on answer and feel free to recreate PR. Don't use ExtractTextPlugin for dev server, this plugins doesn't support hmr and dev-serve as expected. @chromium1337 It is problem in dependencies or in webpack-dev-server code? . @chromium1337 please send details to sheo13666q @ gmail . com . this package should be used only for development purpose, so it is not very high priority. Done in webpack-dev-server@3.1.11. @3stacks Why? Just update you deps. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. Problem still exists?. @jrop you should update webpack-dev-server. Please create minimum reproducible test repo, looks you have invalid configuration. @LeonardoHabitzreuter You reproducible test repo not consistent with what you wrote - no scss files in repo. \nFor JS add this in you config in watch:\njs\nplugins: [\n  new webpack.HotModuleReplacementPlugin()\n]. /cc @SpaceK33z . /cc @Kovensky this PR don't fix problem? Can i look on original issue and/or minimum reproducible test repo?. @philiparvidsson looks something wrong with your shell, what shell you use?. @philiparvidsson can you test this with standard shell?. I closed it, because not related to dev server, feel free to feedback. @robbyemmert you can't get same issue, because this problem related how plugin insert new entries. \n@neo7official It is not bug, you don't have webpack-dev-server client code in you entry. @pybuche this messages mean proxy can't have access to proxy url, maybe you have invalid configuration for proxy or somebody blocked you request (example firewall). @pybuche problem still exists? If yes, can you create minimum reproducible test repo?. @pybuche you webpack configuration is insane, please read documentation before setup webpack or ask other peoples on gitter or stackoverflow how do this in right way. \nProblems:\n1. [HPM] Error occurred while trying to proxy request / from localhost:8080 to http://localhost:8000 (ECONNREFUSED) is not related to HMR. This error means backend server can't response your request - he is not starting/working or already stopped due errors in backend server. In your case webpack-dev-server is async and when you run nodemon server.js script not yet created.\n2. First you should build server (server name configuration) when run server when run client. You need custom start script for this. Running webpack-dev-server start client and server. nodemon run server again. I.e. you have 2 server and one client.\n3. Don't add webpack-dev-server/client?http://localhost:8080. webpack-dev-server do this https://github.com/webpack/webpack-dev-server/blob/master/lib/utils/addEntries.js#L23. Now you have two client scripts, it is invalid.\n4. Don't mess webpack-dev-server --mode development & webpack --mode development --watch, why your start webpack-dev-server and watch together :confused: Just run webpack-dev-server --mode development.\n5. Don't run babel-node in nodemon (see package.json), you already using babel-loader for server entry. Otherwise you run your code throw babel twice.\nNote:\n1. Don't find anything in docs what says you need include react-hot-loader/patch in entry.\n2. Update webpack-cli and babel (a lot of big bugs were fixed).\n3. Add target: 'web' to client to avoid misleading.\nExample of same configuration https://github.com/kriasoft/react-starter-kit. You can investigate how it is work and rework you code base, sorry we can't do this for you.\nI close this issue, because your problems not related to webpack-dev-server, you have invalid configuration and script order.. @michael-ciniawsky We need tests fix. @michael-ciniawsky need rebase. @michael-ciniawsky need rebase. @ferdinando-ferreira yes, webpack-dev-server will be migrate on koa and websockets in near future. @ferdinando-ferreira yes, webpack-dev-server will be migrate on koa and websockets in near future. Close issue, the question is answered. Keep using webpack-dev-server. Feel free to feedback.. Close issue, the question is answered. Keep using webpack-dev-server. Feel free to feedback.. @michael-ciniawsky \n\nwe not testing all of them then\nlet's create issues/note for 4 version about this. @michael-ciniawsky \nwe not testing all of them then\nlet's create issues/note for 4 version about this. We have very low coverage :disappointed: . We have very low coverage :disappointed: . @michael-ciniawsky maybe we catch bug?. @michael-ciniawsky maybe we catch bug?. @michael-ciniawsky oh, let't add label in readme too. @michael-ciniawsky oh, let't add label in readme too. @michael-ciniawsky May be Example section in READNA.md is enough for us?. Let's do this in major release, some developers use examples. @michael-ciniawsky looks appveyor fail maybe need rebase?. Please create minimum reproducible test repo with steps. If somebody can reproducible test please post how here, we can fix it asap. Please create minimum reproducible test repo. Please create minimum reproducible test repo. @danburzo What os i need to reproduce?. @danburzo What os i need to reproduce?. @danburzo @rhys-vdw Very thanks for repo/screenshot and feedback. I will try to find Mac OS system on this week and fix problem. Anyway feel free to investigate why it is happens, code for killing process here https://github.com/webpack/webpack-dev-server/blob/927a2b38d4d3a5d8fd50dfce0343634d46fa8a92/bin/webpack-dev-server.js#L48. Maybe signal have another value?. @danburzo @rhys-vdw Very thanks for repo/screenshot and feedback. I will try to find Mac OS system on this week and fix problem. Anyway feel free to investigate why it is happens, code for killing process here https://github.com/webpack/webpack-dev-server/blob/927a2b38d4d3a5d8fd50dfce0343634d46fa8a92/bin/webpack-dev-server.js#L48. Maybe signal have another value?. @danburzo Awesome, reproduce problem on linux (Ubuntu) too. One interesting thing - it is happens when you try to require('webpack'), if you change this on console.log all works fine. Problem found, we use server.close before run process.exit (close all connections, watchers and etc stuff). server.close use webpackDevServer.close method, what use watching.close (when you in not lazy mode - using webpack-dev-server), but watching.close wait until all was compiled. \n\nWhat we need to fix all problem with CRTL+C:\n1. Implement Watching.kill() method in webpack\n2. Add kill option to webpackDevServer.close (by default false)\n3. Use webpackDevServer.close(cb, true) in Server.close.\nIf somebody have time to help with this issue PRs welcome. @bhavya9107 \n\n\nImplement Watching.kill() method in webpack\n\n\nHere https://github.com/webpack/webpack/blob/master/lib/Watching.js. @bhavya9107 immediately kill watch on webpack side . @bhavya9107 because when you process.exit() you kill process immediately, but in this moment somebody/something can write file to fs or do other async call and it is bad. @jharwig please provide steps and reproducible test repo. @jharwig Better do https://github.com/webpack/webpack-dev-server/issues/1482#issuecomment-417064895. @jharwig better disable bonjour and use before/after to setup own configuration in next major this will be removed in favor before/after. @mwikstrom maybe we should pass option too for before option, feel free to send a PR. Based on comment above problem is solved. Feel free to feedback.. @michael-ciniawsky looks like breaking change :confused: . @michael-ciniawsky feel free to merge and release patch version. @nebrelbug do you use webpack-dev-server or webpack-serve?. @nebrelbug please create minimum reproducible test repo, thanks. @aprilmintacpineda Looks problem in babel-node here. @aprilmintacpineda better create issue in babel-node, we just listen process on CTRL+C and looks babel don't pass this to webpack-dev-server process. Close in favor https://github.com/webpack/webpack-dev-server/issues/1479#issuecomment-442492922. @mike392 it is hard and maybe impossible, why don't develop all locally?. @mike392 maybe, feel free to experiment with options, it is hard to give advice in you case. @bdpartridge yep, please create minimum reproducible test repo, thanks!. Feel free to PR :+1: . Maybe we can use this as default property for protocols. @odinho fixed in https://github.com/webpack/webpack-dev-server/issues/1491, will be shipped in near future. @kadamwhite Briefly: use webpack-dev-server (webpack-serve will be archived in near future)\n@michael-ciniawsky we can't use webpack-serve name due Andrew did not give us consent to this (he is owner and can do with package anything, so it is very dangerous to use this). @jeremejevs it is fork, webpack and webpack-contrib don't support webpack-serve officially, you can use it at your own risk. Some developers create problems, not code. Closer to the new year we will try to release a new version - lightweight and using websocket. . The question is answered. Still use webpack-dev-server (webpack-server is not supported officially and you use this package at one's own risk). Feel free to feedback.. @cinderblock we should use:\njs\nconst options = Object.assign({}, config.devServer || firstWpOpt.devServer);\nto avoid this problem, but it can break other setup in theory, we can fix it in next major release.\n/cc @michael-ciniawsky . @michael-ciniawsky looks we don't support https://github.com/webpack/webpack-dev-middleware#writetodisk, maybe we can do this here?. /cc @michael-ciniawsky please answer on questions before merge in future. @Perlover Thanks for issue, but we use chokidar for track fs events, looks better create this issue in chokidar repo. Sorry, we can't fix it on our side.. Duplicate https://github.com/webpack/webpack-dev-middleware/issues/338\nWIP. @KenilDomadia First we should find where this happens and why. @KenilDomadia \n\nBy \"where this happens\", do you mean the line of code where this happens?\n\nYes\n\nI haven't look into webpack-dev-server code until now. I can get started if you want to me to trace the lines of code.\n\nFeel free to start this. Some busy right now.. /cc @KenilDomadia problem still exists?. /cc @j-langlois problem still exists?. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. Sometimes some fs doesn't support changes, you need setup poll: true in watchOptions.. Close in favor https://github.com/webpack/webpack.js.org/pull/2813. @marcofugaro it is feature,  can you describe use case for this?. PR welcome, it is should be not diffucult. /cc @hiroppy after refactor bin it should be easy to fix, can you help with this too, you are do amazing job :+1: Just need move event handler in Server instead bin, same problem for bonjour. @hiroppy yep, we should move all what starting with https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L172 in lib/Server, it is fix open/ when you use Node API, i think it is architecture bug and will be great fix it.. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @Aladdin-ADD looks good, why we should use 127.0.0.1 instead localhost?. @liyokuna please create minimum reproducible test repo. @liyokuna Do you use right configuration? Please read http://idangero.us/swiper/get-started/\n\nmodule: {\n  rules: [\n    {\n      test: /.js$/, // Check for all js files\n      exclude: /node_modules\\/(?!(dom7|ssr-window|swiper)\\/).*/,\n      loader: 'babel-loader'\n    }\n  ]\n}\n\nYou deps in node_modules in ES6 you need transpile some dependencies from node_modules. Problem is not related to webpack-dev-server. @liyokuna find what?. @liyokuna which?. It looks like you just deleted our lovely crafted issue. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. Looks you should use https://github.com/webpack-contrib/webpack-hot-middleware. @Deathangel908 yep. Looks solved https://github.com/webpack-contrib/webpack-hot-middleware/issues/337. Feel free to feedback.. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @nekolab Any ideas how we can fix it?. Also can you create minimum reproducible test repo to ensure it is problem for node, not in local environment?. Feel free to send a PR. @NirBenya please create minimum reproducible test repo, looks you have invalid configuration. Don't add webpack-dev-server/client to your entries in webpack.config.js. Using addDevServerEntrypoints already do this. \nYou can forget to add plugins: [new webpack.HotModuleReplacementPlugin()].. @nekolab on node@10 all works fine, right?. @nekolab on node@10 all works fine, right?. @nekolab thanks!. @nekolab thanks!. @donaldpipowitch PR welcome. @donaldpipowitch PR welcome. @donaldpipowitch too late? Can you describe where it is late?. @donaldpipowitch too late? Can you describe where it is late?. Also need add tests to avoid regressions in future. Also need add tests to avoid regressions in future. @donaldpipowitch looks you right, please add test, also fix lint problem. @donaldpipowitch looks you right, please add test, also fix lint problem. Hm, CI tests on windows broken :confused: Not related to this PR. Hm, CI tests on windows broken :confused: Not related to this PR. @SerhiiBilyk Can't reproduce, need minimum reproducible test repo. @SerhiiBilyk Can't reproduce, need minimum reproducible test repo. Also MiniCssExtractPlugin doesn't support hmr. Also MiniCssExtractPlugin doesn't support hmr. @SerhiiBilyk feel free to open new issue, thanks!. @SerhiiBilyk feel free to open new issue, thanks!. @YonatanKra Why you use inline?. @YonatanKra Why you use inline?. @YonatanKra i.e. without inline it is not work as expected?. @YonatanKra i.e. without inline it is not work as expected?. @YonatanKra i will see in this in near future. @YonatanKra i will see in this in near future. Ci on travis is still very unstable, we can revisit this in future, right now i am closing this PR, anyway thanks for work. Problem in tests, need rewrite tests first :disappointed: Let's start refactoring. @felixcatto you need hot: true in devServer and new webpack.HotModuleReplacementPlugin(), here docs https://webpack.js.org/guides/hot-module-replacement/.. @uxweb Answer is above. Thanks!. > Actually, while I have you here, I've been trying to figure out an easy way to get the list of files webpack-dev-server is watching, but that appears to be pretty well concealed.\nHere you can get all assets https://github.com/webpack/webpack-dev-server/blob/master/lib/Server.js#L119, maybe problem can be solved using hooks https://github.com/webpack/webpack-dev-server/issues/1509 (webpack-serve deprecated, but you can try use hooksm if it is solved problem we can implement their).\nAnyway adding invalidate route doesn't bad idea.. @camertron Example of tests https://github.com/webpack/webpack-dev-server/blob/master/test/Routes.test.js. @camertron Just add your route in test, it is ensure what all works as expected. @camertron can we rebase master? Also wait review from other contributors, feel free to ping if no one will do this in the next 3 days. @camertron hm, something wrong with travis :confused: . https://github.com/webpack/webpack-dev-server/pull/1549#issuecomment-433843738. No need right now, thanks . Please read https://github.com/webpack/webpack-dev-server/pull/1549#issuecomment-433843738. No need right now, thanks . @VijayKrish93 Thanks for helping, you do this in not right way:\n1. Use next branch to this,\n2. Need remove code what using this apckage\n3. Need add tests using after option for this feature to avoid broke feature for people who use this. @bhavya9107 work on what? Removing? Why?. @bhavya9107 work on what? Removing? Why?. @bhavya9107 thanks for helping better avoid this removing right now, we have many bugs and features issue, you can start fix any, i can help with any :+1: . @bhavya9107 thanks for helping better avoid this removing right now, we have many bugs and features issue, you can start fix any, i can help with any :+1: . @bhavya9107 No need right now, thanks . > I don't know how to reproduce it.\nWe don't know how to fix it, sorry. Please create minimum reproducible test repo and recreate issue.. Use open: false, in future use issue template, it is bug tracker not stackoverflow. @trescenzi feel free to feedback. @trescenzi we need search solution to test this, test value of option is not good test. @trescenzi Also looks travis still fail. @trescenzi hm, looks not related to this PR, if you have time please look what is wrong, feel free to feedback. @trescenzi can you reproducible test failed locally?. @trescenzi can you provide details how you can reproduce problem?. @trescenzi thanks!. /cc @trescenzi can you fix note from me above and we can merge. @trescenzi yep, something wrong with travis ci, rerun CI. Please use issue template, feel free to recreate issue using issue template. @wangzhigang Please create minimum reproducible test repo, can't reproduce. @GaryHos Thanks for answer and helping. @missalyss looks like a bug, feel free to investigate and send a PR. > I'm not 100% if this is intended or what. But this issue can be reproduced without wds/wdm.\nCan you create minimum reproducible test repo?. /cc @ooflorent . @jiankafei what exactly you want to have in API?. @jiankafei it is require a lot of work, also it is impossible only defines middleware and exposes it, we should setup other part of system to more zero configuration - client, default setting, try/catch errors, setup webpack plugins and more. You should use custom setup for these purpose what you describe. @jiankafei here webpack-hot-middleware https://github.com/webpack-contrib/webpack-hot-middleware, what is problem to setup own configuration?. Need more information what is not works as expected. @ncjones \n\nmode (\"production\" vs \"development\")\n\n\nhttps://github.com/webpack/webpack-dev-server/issues/1560\n\n\njs/css asset name format (\"[contenthash]\" not allowed with HMR)\n\nFixed in https://github.com/webpack/webpack/releases/tag/v4.24.0\n\nentries (webpack-hot-middleware/client?path=__webpack_hmr'),\nplugins (HotModuleReplacement and NoEmitOnErrors required for HMR)\n\nHotModuleReplacement is using if you use webpack-dev-server bin, feel free create issue if you think what it is should be not only in bin\nNoEmitOnErrors is not suitable for all developers\n\nstyleLoader\n\nNot related to webpack-dev-server, but feel free to feedback what is wrong. @felixcatto why?. @NaNdreas Feel free to send a PR. @NaNdreas based on user experience, we need implement development by default (don't forget respect mode from configuration). @xtx1130 Please create minimum reproducible test repo, thanks!. @NaNdreas \n\nEDIT: to be clear it's not my decision in the end, I have no power here hehe, I just added my view on it.\nI will look at tests meanwhile\n\nWe need feedback from other developers. @NaNdreas we need add tests and we can merge this. Done in master. Can we fix it here?. No cache setup for this package to avoid same problem. @odinho very thanks for helping, let's disable test and put comment with link on issue :+1: . @odinho do we have way testing this?. @odinho okay, let's merge this. Loos CI still failed. Restart their. Very very weird error in MacOs, segmentation fault 11 sometimes mean is not enough memory, maybe we can try to increase and test again. Strange, looks like a bug, feel free to send a PR. I think we should setup default value\n. Please this create issue in laravel-mix. you use old webpack-dev-server version in laravel-mix. @tanx webpack-dev-server@2 is deprecated and not updated anymore due a lot of bugs and security problems, sorry. Can't reproducible , what is not works as expected? Maybe you can create minimum reproducible test repo?. @bhavya9107 thanks for answer, i think it is won't fix on our side. @cinderblock can you describe use case more verbosely with examples?. @cinderblock why need nginx for development server? Do you read documentation for proxy https://github.com/chimurai/http-proxy-middleware?. @ItamarShDev just setup you port, what is problem i can't understand . @ItamarShDev it is hard to understand what you want, maybe you can create minimum reproducible test repo and what you expected?. Don't use this server for production. . @u9520107 Feel free to send a PR. @weaponhe use this option https://github.com/webpack/webpack-dev-server/blob/master/lib/options.json#L57, need documentation, feel free to create issue about this in webpack docs repo, thanks!. @jrweinb can you create minimum reproducible test repo?. @mehl321 maybe you can create minimum reproducible test repo?. @mehl321 so we can close issue?. /cc @jrweinb friendly ping. I think problem on proxy server side, we don't touch content from proxy. @eemeli we don't touch anything with 3.1.9 around proxy. @emillynge yep, so we need reproducible test repo, it is help to solve this issue. @victors1681 please create minimum reproducible test repo, otherwise issue was closed and marked as spam. @edwint229 Can you provide minimum reproducible test repo?. @edwint229 Can you provide minimum reproducible test repo?. @houfeng0923 Can you create minimum reproducible test repo?. @houfeng0923 thanks for investigateion. @yadue why?. @yadue it is not solution, we should find problem and fix it, no need implement hacks. What is problem create minimum reproducible test repo?. @yadue very thanks, i will looks on this in near future. @samsam2310 can't reproduce, please create minimum reproducible test repo . @samsam2310 feel free to send a PR with fix. @samsam2310 feel free to send a PR with fix. @samsam2310 Do you have link on express.js issue?. @samsam2310 strange, Yes, it will be in the 4.17 release +1 should be solve :confused: Can you send a PR with test, maybe we need update deps. @samsam2310 hm, here PR https://github.com/expressjs/express/pull/3778/files, maybe we need workaround before this will be released. Ping me when PR was ready for review again, thanks!. Good job, thanks!. /cc @mistic Can you help with review?. /cc @u9520107 can you rebase?. Done in https://github.com/webpack/webpack-dev-server/pull/1692. Looks you have invalid configuration, can you create minimum reproducible test repo?. Looks you have invalid configuration, can you create minimum reproducible test repo?. Problem on your side, 502 (Bad Gateway) says what proxy server doesn't response. Problem on your side, 502 (Bad Gateway) says what proxy server doesn't response. @Younghun-Jung :+1: . Please accept CLA. @samsam2310 CLA sometimes buggy, will be shipped in near future. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. Try to don't use inline, without reproducible test repo i can't help and issue will be closed. @ashleymoogle looks problem in plugin, maybe you can create minimum reproducible test repo with plugin. @yuri-sakharov what? polling !== multiple reloading. @yuri-sakharov do you solve problem?. @yuri-sakharov can you create minimum reproducible test repo and describe how we can reproduce problem in README?. /cc @yuri-sakharov friendly ping. Closing, feel free to feedback, if somebody has problem feel free to create new issue. Please post this issue in create-react-app. @AnujRNair i think better create issue in webpack, we just webpack server and run webpack using api. @markleppke npm cache clean/yarn cache clean. Looks tests passed. @odinho hm, maybe random failure, sometimes it is happens, let's merge this PR as is, if problem appear again we investigate deeply, big thanks!\n@odinho Just question: do you want join to webpack as contributor webpack-dev-server? We don't have enough developers and some PRs stalled due i don't have time on all repos (right now i am one active contributor/issue resolver/etc here).. @odinho thanks, just help with issues and PRs (answer, review, mark as duplicate/invalid and etc). Any help welcome :+1: . Also please accept CLA. PR welcome. @yamsellem not sure it is bug, i think it is feature, a lot of issue and PRs, hard to say. @yamsellem not sure, need look code, feel free to send a PR and we will find. Thanks for issue, maybe we can find workaround. @nzapponi sorry for delay, problem still exists? if yes, please create minimum reproducible test repo, thanks!. Fixed https://github.com/webpack/webpack-dev-server/pull/1660/. Fixed https://github.com/webpack/webpack-dev-server/pull/1660/. Please use issue template. @kamilbrk thanks for feedback, can we setup very minimum reproducible test repo? Maybe we can solve on our side without disableHostCheck. @ravshansbox let's keep it open for feedback some time :+1: . @show-me-code what you have? Problem will be solved, please check you deps version and if problem exists please create minimum reproducible test repo. @carlosgeos yes, please tests 3.1.14 version, we implement workaround on our side. @show-me-code what? Issue was fixed in 3.1.14, if you still have problems please create minimum reproducible test repo. Fixed in webpack-dev-server@3.1.14, please your deps before write, anyway feel free to feedback, thanks for helping. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @3846masa thanks for PR, please accept CLA. @lbogdan Thanks!. Also please accept CLA. ~~Also please accept CLA~~ (bug on CLA side). No need right now, thanks . It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @carlosgeos thanks for issue. @carlosgeos hm, can you provide example how we can tests this manually?. @carlosgeos Thanks looks good for me! Can we add some comments about this behavior in code for retries variable? It will be good for future developers and avoid regressions, thanks. @carlosgeos let's do it and we can merge this. /cc @carlosgeos can you rebase?. @carlosgeos Feel free to send a PR :+1: . The webpack-dev-server contains other security fixes (some of them is not public), we strongly recommend to update webpack-dev-server to latest version because backport solve only one security problem. You may receive a new vulnerability report at any time. Also 2 version is not maintenance. Sorry, better spend time to update.. @chris-schmitz can you create full minimum reproducible test repo and describe in readme what you actually have and what you expected?. Also need rebase. @germn please create reproducible test repo, looks you have invalid configuration. @germn yep, we don't remove old assets due perf reason, anyway it may cause some memory leaks so i think it is bug, PR welcome. @skyFi What is it?. @skyFi This problem not related directly to this issue, many of loaders and plugins have memory leak so i don't think it is problem webpack-dev-server\n/cc @hiroppy i think we should investigate this, just create big file (100mb as example) change multiple time and see on memory usage, can you take care about this, don't have time on this right now. Please read here https://github.com/webpack/webpack-dev-server/releases/tag/v3.0.0 . We can't describe all changes in CHANGELOG so we describe only necessary stuff. Better to start update and see documentation. Also no big changes between 2.9 and 3.14. @LilSebastian5000 you need use webpack@4 for webpack-dev-server@3. @kryptokinght We already have examples here https://webpack.js.org/configuration/dev-server/#devserver, feel free to send a PR to webpack docs repo if you think what something misleading or missing. Tests failed, need fix. Yep, expected, we can merge this and release, don't have access for computer right now. /cc @timsly due we don't have tests for v2 so we should test this manually, do you check you solution is work as expected? Because we merge https://github.com/webpack/webpack-dev-server/commit/8bb3ca86d849267a2e22755d2fa3d0b338dc6a3c and https://github.com/webpack/webpack-dev-server/commit/1dfd4fbe0c3ac8d25aa381231cb92b3ed805c8da after original PR to avoid some problems. @timsly we don't have tests for v2 so i can't, can you test this manually? Maybe ping something else for testing too. @amilajack PR was abadoned, so you can continue develop. @panlina Please create minimum reproducible test repo and describer what you have and what you expected in README. @panlina i will look on this in near future, but feel free to investigate and if you think it is bug feel free to send a PR. @panlina not sure, looks like bug. @erpheus Can you provide example and describe use case?. @erpheus can you reduce example? It is hard to debug when developers have big configuration. @erpheus can you reduce example? It is hard to debug when developers have big configuration. @bhavya9107 better do this in webpack docs repo, not here. And provide link on this examples. @bhavya9107 Here repo https://github.com/webpack/webpack.js.org. Close in favor https://github.com/webpack/webpack.js.org/pull/2813. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.\nYou can profile code and find problem places. Some plugins or loaders can increase compilation time. @lukebro done, somethings wrong with Travis, let's wait rebuild, feel free to ping me after build. @lukebro done, somethings wrong with Travis, let's wait rebuild, feel free to ping me after build. @lukebro do you have mac os machine? We need run this on this system and look what is happening. @lukebro do you have mac os machine? We need run this on this system and look what is happening. @lukebro thanks for helping. @lukebro thanks for helping. @lukebro looks something wrong with proxy middleware on mac os, because last build is green https://github.com/webpack/webpack-dev-server/pull/1640. @lukebro hm, don't know without this fix all works fine, maybe something wrong with tests, need investigate how we can reproduce bug without dev server. @lukebro \n\nI can also take a look at the ConcurrentCompilationError errors that the current set of tests are throwing.\n\nFor some tests it is normal.\nOkey, let's comment tests and add todo with link on this issue and i think we can merge. Need rebase too :+1: . @lukebro Looks something wrong with node on macos :confused: Rebuild doesn't solve problem, maybe related https://github.com/webpack/webpack-dev-server/pull/1660, can you try it locally?. @hiroppy other on macos, and it is very strange, maybe we can investigate which test break CI?. Somebody can test this locally?. @hiroppy Great work! Maybe we can skip test what break CI? Like if (node === 11 && isMacOS) { return expect(true).toBe(true); }. /cc @lukebro please rebase. /cc @lukebro please rebase. You have invalid configuration\nplugins: [\n    isInProductionMode && new MiniCssExtractPlugin({\n      filename: '[name].styles.[chunkhash:4].css',\n    }),\n  ],\nrewrite this on \nplugins: [].concat(\n    isInProductionMode \n    ? [\n        new MiniCssExtractPlugin({\n            filename: '[name].styles.[chunkhash:4].css',\n        })] \n    : [])\n  ],. @rvion please check you deps, we doesn't contains events or reflect in our code. @rvion please check you deps, we doesn't contains events or reflect in our code. @rvion webpack doesn't use events too in code, please provide minimum reproducible test repo. @rvion webpack doesn't use events too in code, please provide minimum reproducible test repo. @rvion Can't reproduce, no events package in my code. @rvion Can't reproduce, no events package in my code. @rvion we don't use webpack-hot-middleware, please create issue in webpack-hot-middleware repo. @rvion we don't use webpack-hot-middleware, please create issue in webpack-hot-middleware repo. Union client code from webpack-dev-server and webpack-hot-middleware will be in future, but now we don't use code from webpack-hot-middleware. Union client code from webpack-dev-server and webpack-hot-middleware will be in future, but now we don't use code from webpack-hot-middleware. @rvion i think better wait answer in webpack-hot-middleware, i am not familiar with webpack-hot-middleware code and how they implement hot. @rvion i think better wait answer in webpack-hot-middleware, i am not familiar with webpack-hot-middleware code and how they implement hot. Don't use extract-text-webpack-plugin, it is doesn't work with webpack@4, switch on mini-css-extract-plugin, also you don't need extract-text-webpack-plugin in development mode and don't use webpack-dev-server in production. \nSomething wrong with mithril, axios works as expected:\napp.get('/helloworld', async (req, res, next) => {\n        const axios = require('axios');\n        const data = await axios.get('https://localhost:3000/api/v1/efforts').catch((e) => {\n          console.log('dawm', e);\n        });\n        res.send('OK');\n});\nProblem not on our side.. Maybe you need more configuration for mithril, when you do https request, i am not familiar with mithril so documentation can help with this.. Hm, i get original error:\nError: write EPROTO 140317656524608:error:1408F10B:SSL routines:ssl3_get_record:wrong version number:../deps/openssl/openssl/ssl/record/ssl3_record.c:252\nSomething wrong with https. Ref: https://github.com/openssl/openssl/issues/6289 maybe help. With NODE_TLS_REJECT_UNAUTHORIZED=0 and axios/fetch all work fine. But with mithril not, better ask in their repo how do a request to self signed cert.. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. @mrigne it is impossible, because each os have own algorithm for DNS resolving and it is out of scope package. You can use before/after options to do this. @DemonCloud \nIt looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.\nAlso it is bug tracker please use stackoverflow or gitter for questions.\nYou should use loader or plugin for this purpose. https://webpack.js.org/api/loaders/#this-adddependency. Thanks. README already very small, no need navigation, i think. Thanks!. @kmannislands Can you create minimum reproducible test repo? It is hard to fix without this and maybe never will be fixed without this (so issue will be closed). @kmannislands Fatal error should be don't crash webpack-dev-server so we will accept a PR, but we need test case or minimum reproducible test repo to unsure we fix this problem and avoid regressions in future. @kmannislands we need minimum reproducible test repo for manual testing (hard to testing), it is increase speed for solving problem. @mjrussell can you create minimum reproducible test repo?. @wjdp i can't understand your problem. Please create reproducible test repo.. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. @andyhall it is expected, you use require in module.hot.accept and it is require rebuild all modules. Why you do this? Looks like invalid usage.. @andyhall Please create minimum reproducible test repo, maybe something wrong in env. @andyhall not sure (depends on full config and content in foo.js and some other tweaks), please provide minimum reproducible test repo. @andyhall why don use try/catch? What is expected?. @andyhall i don't have idea how we can allow the error to be caught by the browser, can you describe more verbosely, maybe examples with actual  and expected? Maybe it is part of webpack, not dev server. @hiroppy good job, let's wait CI green. thanks!. Thanks!. @hiroppy spaces. @daryn-k yep, please create reproducible test repo. @hiroppy what about migrate on jest?. @hiroppy thanks for helping :+1: . Good job, let's wait CI green :+1: . @hiroppy hm, coverage is very decrease, something wrong?. @hiroppy Good job, let's wait CI green. @hiroppy let's improve CI testing \nhttps://github.com/webpack/webpack-dev-server/blob/master/.travis.yml (need add 8 and 11)\nhttps://github.com/webpack/webpack-dev-server/blob/master/appveyor.yml (need add node 11)\nMaybe refactor and improve config (add cache)\nCan you take care?. Please create reproducible test repo. mkcert is not related to webpack-dev-server, we don't use this tool, you need to read documentation how it is works, we provide option like ca, pfx, key and cert for https. \nProblem looks like you generated invalid certificate, maybe missing some arguments or somethings else, anyway you get some problems with any servers (nginx, apache and etc). So we can't help you here, sorry.. God job thanks!. What about solve this https://github.com/webpack/webpack-dev-server/issues/1560? Should be easy :+1: PR already exists need add tests https://github.com/webpack/webpack-dev-server/pull/1562 . Let's wait CI green and merge :+1: . Very weird, because test passed before and all works fine :confused: , maybe we can find what tests fails?. @hiroppy any ideas why coverage is dercrease?. :+1: . Great job, thanks for helping :+1: . @hiroppy need minor release other feature will be merged already, i think we can solve couple issues and do release. We don't send ETag header, please create reproducible test repo. Closing due to inactivity. Please test with latest version and feel free to reopen if still regressions. Thanks!. Some projects use webpack-dev-server without cli, so we should avoid peer-deps. You need webpack-cli for run dev server right now, it will be solved in future (in our plans).. @tomasztunik let's avoid this, because boilerplate like create-react-app, vue-cli and etc use webpack-dev-server, it will causes a lot of discontent from other developers. We will use webpack-cli serve/server command for 4 version. So no need this fix right now, it outputs uninstalled peer deps for many application, anyway thanks for PR. /cc @hiroppy let's rebase :+1: . /cc @hiroppy let's solve this too. Can you provide minimum reproducible test repo, should be works. Also please accept CLA. @yi-ge looks you catch the bug in nodejs :smile: Can you create issue in nodejs and add comment with link in source code. Strange can't reproducible locally on latest nodejs. @yi-ge \n\nNow using node v11.9.0 (npm v6.5.0)\n\ncan we add tests for this case and looks what CI show?. @yi-ge Strange, can't reproduce:\nnode -v\nv11.9.0\nInput:\n```\nconst spdy = require('spdy');\nconsole.log(spdy);\n```\nOutput:\n```\nnode test.js\n{ handle: { [Function: Handle] create: [Function: create] },\n  request: { onNewListener: [Function: onNewListener] },\n  response:\n   { writeHead: [Function: writeHead],\n     end: [Function: end],\n     push: [Function: push],\n     writeContinue: [Function: writeContinue] },\n  Socket: [Function: Socket],\n  agent:\n   { Agent: { [Function: Agent] create: [Function: create] },\n     PlainAgent: { [Function: Agent] create: [Function: create] },\n     create: [Function: create] },\n  Agent: { [Function: Agent] create: [Function: create] },\n  createAgent: [Function: create],\n  server:\n   { Server: { [Function: Server] create: [Function: create] },\n     PlainServer: { [Function: Server] create: [Function: create] },\n     create: [Function: create] },\n  Server: { [Function: Server] create: [Function: create] },\n  PlainServer: { [Function: Server] create: [Function: create] },\n  createServer: [Function: create] }\n```\nWhat os you use?. @yi-ge Strange, can't reproduce:\nnode -v\nv11.9.0\nInput:\n```\nconst spdy = require('spdy');\nconsole.log(spdy);\n```\nOutput:\n```\nnode test.js\n{ handle: { [Function: Handle] create: [Function: create] },\n  request: { onNewListener: [Function: onNewListener] },\n  response:\n   { writeHead: [Function: writeHead],\n     end: [Function: end],\n     push: [Function: push],\n     writeContinue: [Function: writeContinue] },\n  Socket: [Function: Socket],\n  agent:\n   { Agent: { [Function: Agent] create: [Function: create] },\n     PlainAgent: { [Function: Agent] create: [Function: create] },\n     create: [Function: create] },\n  Agent: { [Function: Agent] create: [Function: create] },\n  createAgent: [Function: create],\n  server:\n   { Server: { [Function: Server] create: [Function: create] },\n     PlainServer: { [Function: Server] create: [Function: create] },\n     create: [Function: create] },\n  Server: { [Function: Server] create: [Function: create] },\n  PlainServer: { [Function: Server] create: [Function: create] },\n  createServer: [Function: create] }\n```\nWhat os you use?. @yi-ge So this PR doesn't solve problem?. @yi-ge i can't understand you, i can't reproduce problem :disappointed: Maybe it is happens only on macos?. @yi-ge looks like all works fine, i can't understand problem, please clarrify. @yi-ge thanks for clarify, just add comment in code with link on issue and we can merge this :+1: . Looks good! Ready to merge?. @rlamana \nconsole.info node_modules/http-proxy-middleware/lib/logger.js:77\n      [HPM] Proxy created: /  ->  http://0.0.0.0:8080\n    console.error node_modules/http-proxy-middleware/lib/logger.js:89\n      [HPM] Error occurred while trying to proxy request /sockjs-node from localhost:9050 to http://0.0.0.0:8080 (EADDRNOTAVAIL) (https://nodejs.org/api/errors.html#errors_common_system_errors)\n    console.error node_modules/http-proxy-middleware/lib/logger.js:89\n      [HPM] Error occurred while trying to proxy request /main from localhost:9050 to http://0.0.0.0:8080 (EADDRNOTAVAIL) (https://nodejs.org/api/errors.html#errors_common_system_errors)\n  \u25cf Client code \u203a behind a proxy \u203a responds with a 200\n    expected 200 \"OK\", got 500 \"Internal Server Error\"\n      at Test.Object.<anonymous>.Test._assertStatus (node_modules/supertest/lib/test.js:268:12)\n      at Test.Object.<anonymous>.Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n      at Test.Object.<anonymous>.Test.assert (node_modules/supertest/lib/test.js:173:18)\n      at localAssert (node_modules/supertest/lib/test.js:131:12)\n      at node_modules/supertest/lib/test.js:128:5\n      at Test.Object.<anonymous>.Request.callback (node_modules/superagent/lib/node/index.js:756:3)\n      at IncomingMessage.parser (node_modules/superagent/lib/node/index.js:944:18)\n  \u25cf Client code \u203a behind a proxy \u203a requests websocket through the proxy with proper port number\n    Timeout - Async callback was not invoked within the 30000ms timeout specified by jest.setTimeout.\n      58 |     });\n      59 | \n    > 60 |     it('requests websocket through the proxy with proper port number', (done) => {\n         |     ^\n      61 |       runBrowser().then(({ page, browser }) => {\n      62 |         page\n      63 |           .waitForRequest((requestObj) => requestObj.url().match(/sockjs-node/))\n      at new Spec (node_modules/jest-jasmine2/build/jasmine/Spec.js:92:20)\n      at Suite.it (test/Client.test.js:60:5)\n      at Suite.describe (test/Client.test.js:42:3)\n      at Object.describe (test/Client.test.js:24:1)\nMaybe something doesn't handle (like errors) or something starts early then tests. Oh, no ideas\n/cc @hiroppy . Something wrong with CI :confused: . Also please accept CLA. @yoannmoinet we need add tests for stats https://webpack.js.org/configuration/stats/ (warningsFilter option) to ensure we fix problem (what is written in issue) . @yoannmoinet try to do rebase (master). /cc @hiroppy . Please accept CLA. Today. Today. /cc @hiroppy some new changes, please look :+1: . Feel free to feedback. Also please create reproducible test repo, something wrong in your config/env. @marisveide can you run npm ls webpack-dev-server?. @marisveide you have old version, latest 3.2.1 https://github.com/webpack/webpack-dev-server/blob/master/package.json#L3, please update version and check again. @marisveide problem solved? Because we solve this issue for 3.2 version. @marisveide for .pem files you should use --cacert arg. From docs:\nwebpack-dev-server --https --key /path/to/server.key --cert /path/to/server.crt --cacert /path/to/ca.pem\nWe don't generate certificate if you provide key or cert.. @marisveide What version webpacker uses webpack-dev-server? So we can close issue?. @marisveide yep, it is not our area. No need check is browser refreshed, anyway if you do this will be great (example e2e tests https://github.com/webpack/webpack-dev-server/blob/master/test/Client.test.js).\nMain test is mocking chokidar and check event was handled (https://github.com/webpack/webpack-dev-server/blob/21687c3bfc95752957d16470b97d281001dc6a07/lib/Server.js#L954). More infromation about mocking https://jestjs.io/docs/en/mock-functions.html. maybe you already have app on 9001 port? Or you we need run test in serial. Can you provide example where we can reproduce this problem, thanks for PR. We need reproducible test repo, it is hard to debug and search problem without example. > with proxy to spring boot server, https no gzip\nUnexpected token , in JSON at position 8192 at JSON.parse and really missing some characters in that positions\nMaybe related https://github.com/webpack/webpack-dev-server/issues/1574 ? And problem with net::ERR_CONTENT_DECODING_FAILED 200 looks also related to this issue.. Wait reproducible test repo, it is really hard to debug and find problem without this. PR welcome. /cc @hiroppy I think we can merge this as is, for webpack dep bot also doesn't support CLA, we can ignore this. We don't use node-forge directly we need update https://github.com/webpack/webpack-dev-server/blob/master/package-lock.json#L10153. Feel free to send a PR with update. Do not merge due https://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js#L7, we should use babel-loader for node_modules for client\n/cc @hiroppy can you take care?. @hiroppy and yes and no, we need more difficult setup:\n1. Create babel.dependencies.config.js\nWith content:\n```js\n\"use strict\";\nconst MIN_BABEL_VERSION = 7;\nconst verbose = process.env.VERBOSE;\nmodule.exports = function preset(api) {\n  api.assertVersion(MIN_BABEL_VERSION);\nconst env = api.env();\n  const isTestEnv = env === \"test\";\nreturn {\n    plugins: [\n      // Polyfills the runtime needed for async/await, generators, and friends\n      // https://babeljs.io/docs/en/babel-plugin-transform-runtime\n      [\n        \"@babel/plugin-transform-runtime\",\n        {\n          corejs: false,\n          // Use true when you use bundler, it is reduce bundle size\n          helpers: true,\n          regenerator: true,\n          // https://babeljs.io/docs/en/babel-plugin-transform-runtime#useesmodules\n          // We should turn this on once the lowest version of Node LTS\n          // supports ES Modules.\n          useESModules: !isTestEnv\n        }\n      ]\n    ],\n    presets: [\n            // Latest stable ECMAScript features\n            \"@babel/preset-env\",\n            {\n              debug: Boolean(verbose),\n              // See https://github.com/facebook/create-react-app/pull/5278\n              // Exclude transforms that make all code slower\n              exclude: [\"transform-typeof-symbol\"],\n              // Do not transform modules to CJS\n              modules: false,\n              // Don't need for node_modules\n              // You should manually insert polyfills in entry file where you load package(s) from node_modules\n              useBuiltIns: false\n            }\n    ],\n    // Babel assumes ES Modules, which isn't safe until CommonJS\n    // dies. This changes the behavior to assume CommonJS unless\n    // an import or export is present in the file.\n    // https://github.com/webpack/webpack/issues/4039#issuecomment-419284940\n    sourceType: \"unambiguous\"\n  };\n};\n```\nWe should simplify this code, it is just copy/paste from one project.\n2. Register babel-loader with this config for node_modules package (we will have two babel-loader: 1 - for our code, it is allow using import().then() and other stuff, 2 - for node_modules code, it is allow don't add/remove unnecessary polyfills, don't mix difference require and other stuff what we need control directly)\n3. Manually test dist for client (maybe do diff) to ensure all works as expected\n4. Also will be great check/refactor original babel.config.js, if we have something misleading. @hiroppy Also can you change title for dependencies commits on chore(deps): {$message}? Now we can generate invalid changelog, thanks!. Please don't merge this due https://github.com/webpack/webpack-cli/blob/master/package.json#L123 , this can lead to certain problems.. PR welcome. @njwest i think we should open this issue in webpack-cli, for v4 we drop our bin in favor webpack-cli command, so i think we should discussion about this in webpack-cli. We support http2 using spdy module for backward compatibility with old node version, to enable http2 you should enable https option and spdy option, but i agree it is misleading, and looks we doesn't respect spdy (https://github.com/webpack/webpack-dev-server/blob/master/bin/options.js), thanks for issue. We need:\n1. Respect spdy (add alias http2) in CLI\n2. Add tests\nFor future version use http2 module instead node-spdy. @Aghassi no, but fix it very easy. We create new issue in documentation page after merge, please ping me when we can review your PR, anyway code looks good, thanks!. > One question: In the test, I need to request main.js for the test to work, while it looks like other tests use bundle.js. Is this correct?\nGood question, we need check what is file created after run build\nAnyway code looks good, let's investigate about main.js and bundle.js and we can merge\n. @dmohns yep, let's look what file exists in output path for our test config (it should be simple). /cc @hiroppy can you see in test and help, don't have time right now. @dmohns also please rebase on master. @hiroppy some projects like ruby-rails stull use old version, we should fixes only compatibility/security issue when we release v4 we official stop supporting v2 branch, so we can merge this and release as patch  . @ujenjt can you test this PR manually? . @ujenjt nothing unusual just run and do what you usually do when developing. /cc @noelebrun\nCan you clarify clientLogLevel diesn't respect hot? What is spam messages? Maybe you can show what you options/command use and what you actually have and what you expected, thanks?\n. Feel free to feedback/open new issue. @esomkin please create minimum reproducible test repo, all works fine for me. @aryzing can you create minimum reproducible test repo?. Duplicate https://github.com/webpack/webpack-dev-server/issues/1503, thanks for issue, feel free to send a PR with fix. @orange4glace we are happy when you send PRs. You are right, compiler.run is function here starts webpack, need investigate inside webpack why it is happens, also we can test this in watch mode. Here other run https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L130. Thanks for issue, duplicate https://github.com/webpack/webpack-dev-server/pull/1540, Feel free to send a PR. Thanks for issue, duplicate https://github.com/webpack/webpack-dev-server/issues/1510, Feel free to send a PR. @xianshannan i think it is out of scope projects, it is already middleware, we just easy way to configure, you can disable built-in feature and use own middleware. What is problem? Maybe we can provide more option. Yep, reproducible test repo will be great. Thanks for repo, i will see on this in near future, anyway PR welcome. I don't understand you. We use latest version of mime https://github.com/webpack/webpack-dev-middleware/blob/master/package.json#L20. Anyway we can dd more check to avoid problem in future. Also please accept CLA. You should don't use nginx, it is expected, where sockjs should get your domain? Please provide minimum reproducible test repo otherwise issue was closed. Please create minimum reproducible test repo. Sorry you don't provide enough information to help you, please fill issue and create minimum reproducible test repo. Thanks for PR, please don't change semver, it is can break build in future. I.E. remove ^. Don't remove description, In the future, we can derive more friendly errors based on them. const hostname = options.useLocalIp ? internalIp.v4.sync() || 'localhost' : options.host;?. Looks your have  here, maybe better run prettier?. @michael-ciniawsky hm, we should integrate prettier here :confused: . @michael-ciniawsky :+1: . you can avoid ./node_modules/.bin/. @michael-ciniawsky node@8 also affected. @michael-ciniawsky node@10 is not affected. Better use 8, i think we should use lts/NAME_OF_RELEASE or number everywhere than mix they. Also think we should add node@10 and latest night build to avoid regressions and broken package (for linux and windows). Disagree, no need rewrite full package name to short name.. @trescenzi you did everything right, do not rename. Need create utils what get port, no need move listen logic in this utils. @u9520107 we need split the logic of searching free port and starting webserver, also you code doesn't solve problem second port also can be busy. @u9520107 let's use process.env.DEFAULT_PORT_RETRY to allow people setup this, also let's do it by default 3. Why not get-port https://github.com/sindresorhus/get-port. @u9520107 i don't think we really need seeking ports in sequence, most often we need to find any available port.. @u9520107 hm, If we used it before, I propose to leave it and maybe change it in the next version. Good work.. Let's add comment here on issue :+1: . Why we need .replace(/^\\/|\\/$/g, '')?. Why we need use querystring.parse here? . @trescenzi please add comment to code with this information in concise form, thanks. @trescenzi thanks!. Please enable minimize for this example. Why we remove this check, it can be breaking change for some developers?. We need better check here, because some developers can use 192.168.0.1 or other local IPs. @carlosgeos developers are not following the docs :smile: Better avoid this removing, we can do this in next major release. Why don't use parseInt?. Maybe we can move server.listen to separate function, looks it is duplicate code?. Don't move this from utils. It is should be in listen event and remove logic for open from bin file. @u9520107 can we add comment in code about this?. @amilajack listen express events https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L408. @u9520107 hm, let's leave this as is, and refactor this in future. Add newline before and after header. @trescenzi just add this comment to code :+1: . Use this config:\n{\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"arrowParens\": \"always\"\n}. @hiroppy Can't see in PR. Let's don't use prettier here. Maybe just remove spaces from expected? I am afraid another version can also have same problem?. @hiroppy Can you send this change in commit?. @hiroppy let's remove comment and use node_js: 10, stable can be changed in future. Also let's add node_js: 11. :+1: Let's avoid lts/* and stable, better use version directly. Good idea, maybe better name for this are createConfig (avoid misleading between schema and configuration)?. Same here createConfig. :+1: . Let's merge https://github.com/webpack/webpack-dev-server/pull/1658 first and when rebase :+1: . Not sure it is solve the problem. Looks very misleading. webpack-dev-server-data. Breaking change for multi compiler compilation. Never remove messages, because you can have two/three/four clients, and some clients can have delay. @EloB open two or three browsers and tests how it works, we already do same before and remove this, because it is break situation when you have more then one client (some client can disconnect and connect again). Maybe subscribe/unsubscribe. :+1: . All tests failed? Maybe we can skip only one test?. @hiroppy can we ship only their? thanks. :+1: Let's do it. Let's see on issue status with updated http-proxy-middleware. @evilebottnawi no :smile: https://github.com/webpack/webpack-dev-server/pull/1672 we don't run npm test. utf8 is right value https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options. @alan-agius4 hm, maybe, can you provide example?. No need \nhttps://github.com/nodejs/node/blob/master/lib/fs.js#L392\nbuffer.toString :\n```\nencoding  The character encoding to use. Default: 'utf8'.\nbuf.toString([encoding[, start[, end]]])\n. So default is `utf8`. Ignore `test` directory for coverage. yargs support all `arguments` in `camelCase` format, so we don't need use hack like `argv['allowed-hosts']`. Set host only when `CLI` arg specify. Set only when configuration specify (otherwise it was `undefined` and it makes no sense). Need fix, let's do it in other PR. We should prefer use `toBe(true)` to avoid misleading in tests. Same logic for other arguments (otherwise it is `undefined` and it makes no sense. Same logic for other arguments too. @hiroppy in favor `logLevel` option or `logger`, we should refactor this place because we have `4` options for output log and stats, i think we should have 1/2 option, so i mark this as TODO on removing, anyway we can revisit this in future. :+1: . Remove `eslint` comments around stylistics rules, we use `prettier` :+1: . Move this to utils, we should testing their, let's do it in other PR. Add `{` and `}` to all construction (better reading), we should enforce this rule in eslint, let's do it in other PR. We should avoid using `html`, it is bad practice. Also let's do:\n- Remove `Maintainers` section (it is outdated) and no need\n- Don't move `div` after description . @hiroppy yep L21. @hiroppy can you create issue in webpack docs repo?. @hiroppy yep, after merge we need open issue here https://github.com/webpack/webpack.js.org :+1: . Why don't use :js\n// Remove very strange nested check for string and boolean?\nif (bypassRawValue) {\n // Logic\n}\n. Let's avoid `this.DEFAULT_STATS` (because it should be as static private property). Can you provide link where you need it for test? You already have `getStats` method. /cc @rlamana Looks we catch bug, when we use `API`, hot plugin should be added too, can you create issue?. Let's separate `spdy` and `http2` options, because it is misleading, `spdy` and `https2` are difference protocols, better don't mix their. Ok, let's use the `http2` option instead `spdy`. And we can introduce `spdy` under other option in future because `spdy` !== `http2`, also we need throw error if developer doesn't defined `https` when use `http2: true`. Let's move\nthis.stats =\n      options.stats && Object.keys(options.stats).length\n        ? options.stats\n        : Server.DEFAULT_STATS;\n```\nlogic here, we don't need new property like stats. Yep, you are right, we should rewrite this in next major release. @Loonride i thought about it, let's do this in other PR. ",
    "ouqinglai": "@SpaceK33z webpack.config.js entry : { a : [a.js] , b : [b.js] }  when I change a.js file ,then webpack-dev-server will bundle the b.js again? I want only a.js file bundle , like webpack --watch  thanks!\n. ",
    "ShashankaNataraj": "I just lifted over the .dockerfile and .dockerignore from that post and everything works now. Thanks for the tip!\n. ",
    "merapi": "can be helpful for somebody:\nchange the binding address to 0.0.0.0\n\"start\": \"node_modules/.bin/webpack-dev-server --host 0.0.0.0\",\nor\ndevServer: {\n    host: '0.0.0.0',\n    port: 80,\n    ...\n}. ",
    "kamil-kielczewski": "@merapi what if I wanna use subdomains eg my-project.local:3002 (in my case I need to run many projects on different subdomains - each on different port) ?. ",
    "grebenyuksv-preply": "https://github.com/jakedeichert/react-starter/issues/19#issuecomment-299155489. ",
    "EmKayDK": "It has already been set, but since it is served through an iframe it does not find its way all the way to the title of the tab/window.\n. ",
    "joshiste": "With the switch of the underlying proxy in 1.15.0 it seems that it is now possible to hook into the events using the options and there seems no need to get hold of the proxy itself. Therefore I'm closing this issue.\n. ",
    "mjomble": "Ah. In any case, I'd be more comfortable with the developers documenting it. But if they are too busy, I can have a go at it.\n. Ok, I've edited the wiki page.\n. ",
    "JRoper18": "Figured out what a proxy is. Sorry for wasting your time. \n. ",
    "igorsantos07": "we're currently at 1.14.1. thanks for the lightning response :)\n. That doesn't seem to be the same issue, @SpaceK33z... I manually added the line from #357 and it didn't make a difference - docker still timeouts when stopping the container.. \nFrom looking into the docs, docker stop sends SIGTERM to the process and, after 10secs, SIGKILL.\nRunning the project directly in my machine, it seems to respond fine to SIGTERM (see complete output below). However, from inside the machine I'm not able to get a response from kill -15 1 nor kill -9 1; the output of ps aux stays the same.\n\n```\n$ npm start\n\nproject@1.0.0 start /home/me/dev/project\nnode server.js --env=dev\n\nListening at localhost:8000\nTerminated\nnpm ERR! Linux 3.13.0-85-generic\nnpm ERR! argv \"/home/me/.nvm/versions/node/v5.8.0/bin/node\" \"/home/me/.nvm/versions/node/v5.8.0/bin/npm\" \"start\"\nnpm ERR! node v5.8.0\nnpm ERR! npm  v3.7.3\nnpm ERR! code ELIFECYCLE\nnpm ERR! project@1.0.0 start: node server.js --env=dev\nnpm ERR! Exit status 143\nnpm ERR! \nnpm ERR! Failed at the project@1.0.0 start script 'node server.js --env=dev'.\nnpm ERR! Make sure you have the latest version of node.js and npm installed.\nnpm ERR! If you do, this is most likely a problem with the project package,\nnpm ERR! not with npm itself.\nnpm ERR! Tell the author that this fails on your system:\nnpm ERR!     node server.js --env=dev\n[...]\n``\n. You got it now.--stdin` works with that patch :)\n. Actually, I have no idea of what's going on. Even by commenting out the option, both patches, removing and recreating the container... The stop procedure is taking < 4s...\nWill keep this issue as a reminder if the issue happen again :/\n. ",
    "40thieves": "I'm having the same issue on 2.1.0-beta.10. I am also unable to kill 1 or kill -9 1 from inside the machine. Looking at the source it seems that the patch in #352 has already been applied.\nI'm sure if I'm understanding what the --stdin flag in the thread means? I'm running server as an executable (unsure of the wording here - I'm running node devserver.js which is new-ing up a webpack-dev-server instance). I've tried stdin: true as a config option and it doesn't seem to help.\nAny advice?\n. ",
    "lucsky": "Having the same problem still, but I don't think it's a webpack-dev-server issue, the problem is exactly the same if I do webpack --watch.. Just found this in the Docker documentation:\nNote: A process running as PID 1 inside a container is treated specially by Linux: it ignores any signal with the default action. So, the process will not terminate on SIGINT or SIGTERM unless it is coded to do so.\n(source: https://docs.docker.com/engine/reference/run/#/foreground)\nI wonder if that could be the reason behind all this.\n(poke @SpaceK33z). ",
    "batjko": "I'm using webpack-dev-server 2.4.1 and I'm almost sure I have the same issue:\nWe run all our apps and services via docker-compose. In development mode, we build the local project, create a container from it and run webpack-dev-server for live-reload.\nSo then we can just docker-compose up and our app with all its dependent containers just starts up and we can work on the project as if we didn't use docker.\nWhen we then Ctrl+C the whole compose thing, every container shuts down but the process doesn't return (apparently due to webpack-dev-server still running).\n~I don't know if the merged PR above (#787) was supposed to solve this? If so, what version is this released with?~\nActually, I just tried with 2.4.2 (latest release) and it still doesn't work.. ",
    "lukejagodzinski": "It's very strange but I've changed directories structure and it started working. I'm not 100% sure what's the source of the problem but maybe you can help me with that. I've changed directories structure from:\njs/components/Header.js\njs/components/Layout.js\njs/main.js\njs/main.min.js\nindex.html\npackage.json\nwebpack.config.js\nto\nsrc/js/components/Header.js\nsrc/js/components/Layout.js\nsrc/js/main.js\nsrc/js/main.min.js\nindex.html\npackage.json\nwebpack.config.js\nIt seems to be cosmetic change but it started working and I don't know actually why. Are there any prerequisites if it goes about directories structure?\n. ",
    "ova2": "I have the same problem. --hot option doesn't work. My configuration is here https://github.com/ova2/bpmn-editor-poc/blob/master/package.json I start the server as\n\"webpack-dev-server --config config/webpack.dev.js --inline --open\"\nfor now. The full page is refreshed on changes. But I want to enable HRM. Well, it gets enabled with the --hot option. I can see [WDS] Hot Module Replacement enabled but then it says on changes \"Everything is up-to-date\" and nothing happens.\nMy configs are here https://github.com/ova2/bpmn-editor-poc/tree/master/config\n. But I already use loader: ExtractTextPlugin.extract({...}). See my config above. The full part of the common config is here: https://github.com/ova2/bpmn-editor-poc/blob/master/config/webpack.common.js What is wrong here?\n. I have tried as in the example of the extract-text-plugin (at the bottom) and it doesn't work. Have you a running example?\n. Ok, it works now after I've updated my webpack-dev-server. I've used an old version.\n. Yes, just updated it from 1.14.1 to 2.1.0-beta.2 and happiness :-). Errors in SASS / CSS files are shown in the console and the server keeps running without abort. Error corrected --> page gets automatically refreshed. Awesome.\n. ",
    "misoul": "I have the same issue, and apparently it was due to some proxies caching. Not webpack's issue.\nFrom stackoverflow:\n\"\nIf you use some kind of an proxy, that would be the problem. Some proxies cache frequently used files (usually only .js, .css etc., but usually not .html) and ip addresses. If the server is on your local computer, try to use localhost or 127.0.0.1 instead of an ip address, so the request doesn't go trough the proxy. If it's not you have to configure or disable the proxy to access the newest version of the website. I don't know how common this is but, it would be the problem.\n\". ",
    "tmansi1795": "unable to rebuild my project. this is happening after updated my package.json versions .\nCan anyone help me with the possible solutions.. ",
    "farizluqman": "Any updates on the solution?. ",
    "fralonra": "Same issue. I solved it by running webpack in production mode once.. ",
    "Kris-Lee-SH": "Actually, setting devServert.contentBase to false works.\nThe document helps a lot. . ",
    "shkumbin": "Confirmed, this is happening on my project too.\n. ",
    "craigklem": "Seeing the same thing. Confirmed that this happens in Chrome and Firefox on Windows 7. No mouse events in iframe, no rollovers, click, nothing. Keys seem to work.\n. ",
    "MartinMuzatko": "Thanks for fixing this!\n. ",
    "erfangc": "\ud83d\udc4d  Appreciating fixing this in #master! Since this is a pretty show-stopping bug is there plan to release a bugfix patch to the 1.x line  from which the bug emerged?\n. ",
    "cletusw": "@SpaceK33z I'm now getting Fatal error: ENOENT: no such file or directory, open '<project>/node_modules/webpack-dev-server/client/live.bundle.js'\nNot sure if that's from this or if I'm missing something else. I'll look a little deeper.\n. @SpaceK33z That did it! Working fine now, thanks!\n. It took me a while to track down where this error was coming from. Please add a link to the changelog in the error message (or at least include the text webpack-dev-server somewhere).. @shellscape Sorry, I didn't realize that you were also on this issue. Sorry for the double post.. As for error vs. log, I guess my original message wasn't entirely clear. What I meant was, I saw the log text, but I had no idea how to fix it since it wasn't at all clear which setup it was referring to. My mocha test files? Some random setup method in my code? A third-party library? My ask was that the deprecation message at least include the text webpack-dev-server so I know where the message is coming from. Ideally, it would include a link to a page somewhere on the web explaining what the deprecation entails. Sorry I wasn't clear originally.. > logging in the module will be getting an overhaul in v3.\nNot sure what you mean. Are you saying the deprecation warning will be ambiguous until v3 at which time it will change to say webpack-dev-server: \"setup\" is deprecated...?. I would suggest removing this message then. As it is it is unactionable and\nwill generate lots of confusion.\nOn Wed, Sep 27, 2017, 5:47 PM Andrew Powell notifications@github.com\nwrote:\n\n@bdwain https://github.com/bdwain very much appreciate the initiative,\nbut we're about to announce a new feature freeze to focus on v3.0.0, and\nlogging throughout the entire module needs improvement as it has the\nsame/similar shortcomings. you can follow progress on v3 here\nhttps://github.com/webpack/webpack-dev-server/issues?q=is%3Aopen+is%3Aissue+milestone%3A%22Version+3%22.\nI won't comment yet on what that will entail because we haven't had time to\nvet all of the available options. in the meantime we ask for patience.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/1108#issuecomment-332687028,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA0prrc7xRfusLcDp3jN6o26N8_E0NDLks5smt6ngaJpZM4Pdcue\n.\n. I would suggest removing this message then. As it is it is unactionable and\nwill generate lots of confusion.\n\nOn Wed, Sep 27, 2017, 5:47 PM Andrew Powell notifications@github.com\nwrote:\n\n@bdwain https://github.com/bdwain very much appreciate the initiative,\nbut we're about to announce a new feature freeze to focus on v3.0.0, and\nlogging throughout the entire module needs improvement as it has the\nsame/similar shortcomings. you can follow progress on v3 here\nhttps://github.com/webpack/webpack-dev-server/issues?q=is%3Aopen+is%3Aissue+milestone%3A%22Version+3%22.\nI won't comment yet on what that will entail because we haven't had time to\nvet all of the available options. in the meantime we ask for patience.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/1108#issuecomment-332687028,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AA0prrc7xRfusLcDp3jN6o26N8_E0NDLks5smt6ngaJpZM4Pdcue\n.\n. \n",
    "seansfkelley": "Would it be possible to make a release now, just for this, since it's a P0? A lot of my team members keep hitting this issue and wasting time debugging until they find this ticket.\n. Thank you!\n. ",
    "txangel": "@SpaceK33z we had to fix out version to 1.14.1 (instead of ^1.14.1) for now, which is not a very good practice. \nDo you think it would be possible to get a release sometime this week?\nOn top of that you might want to increase the test coverage here to reduce the risk of having another breaking change when upgrading the minor version. \nPlenty of teams depend on your code mate; the price of fame (:\n. ",
    "nickarora": "duplicate of this issue: https://github.com/webpack/webpack-dev-server/issues/562\nClosing as the solution posted there worked for me.\n. ",
    "Yusoo": "Also in version 2.1.0-beta.0\n. ",
    "tahone": "Changing * or /* to ** solved the HPM the error but bypass doesn't do anything anymore. Everything is sent to the proxy.\n. ",
    "davidreher": "@mischi and me are also having issues when using a proxy and HTTPS with own certificates (key, crt and ca).\nWith 1.14.2 we could do a redirect from localhost/abc to localhost:\nmodule.exports.devServer.proxy = {\n  '/abc/**': {\n    target: 'https://localhost:8080',\n    rewrite: function rewrite(req) {\n      req.url = req.url.replace(/^\\/abc/, '');\n    },\n  },\nnow we are getting\n[HPM] PROXY ERROR: UNABLE_TO_VERIFY_LEAF_SIGNATURE. localhost -> https://localhost:8080/abc/\non the console and\nError occured while trying to proxy to: localhost:8080/abc/\ninside the browser.\n. @SpaceK33z pathRewrite was part of the problem. Finally adding secure: false did the trick. Thx for the quick support :+1: \n. ",
    "HZZformGD": "@SpaceK33z  excuse me , can i ask u a question about webpack-dev-server,  my English is not good, so hope you can know what i say,     my problem is when i  npm run dev  ,  i got this error \n```\nD:\\nodejs\\vue+koa+MD\\myblog\\node_modules\\http-proxy-middleware\\lib\\config-factory.js:42\n    throw new Error('[HPM] Missing \"target\" option. Example: {target: \"http://www.e\n\nxample.org\"}');\n``\ni google this, and found someone has this trouble , his trouble is similar to mine.  \nAnd then i follow the suggestion\u2014\u2014copy thelib/server.js which is fixed ,and run again , unluckyly, i got the same error again , ps: i can run node app.js,it works on chrome, it also works when inpm run build`,\n        . ",
    "neight-allen": "As a matter of fact, it does! The workaround in #559 also fixes keydown events, which weren't working. I think possibly because you could never focus the iframe prior to the workaround.\n. ",
    "fkrauthan": "This bug also happens with version 2.1.0-beta.0 Is there a patch release planned for that too?\n. ",
    "tavurth": "Add this to your apps index.js:\njavascript\n// Clear after module reload\nwindow.addEventListener('message', e => {\n    if ('production' !== process.env.NODE_ENV) {\n        console.clear();\n    }\n});\nFor example, this is part of my index.jsx entry point:\n```jsx\n...\nconst render = Component => {\n    ReactDOM.render(\n        \n\n\n\n,\n        document.getElementById('root')\n    );\n};\nrender(App);\nif (module.hot) {\n    module.hot.accept();\nwindow.addEventListener('message', e => {\n    if ('production' !== process.env.NODE_ENV) {\n        console.clear();\n    }\n});\n\n}\n```\nif (module.hot) will get culled out when we run production minification, and every time HMR reloads, we'll clear the console.. ",
    "szalapski": "This doesn't work right for me--it clears the console on any message.  How can I get it to clear only on an HMR reload?. I don't appear to ever have \"e.data\".  I have e.payload and e.source, and nothing in them seems to distinguish a HMR-reload event from any other.. How do I find that?  I don't see a \"devServer\" anywhere in my .js files.  It's a basic web server, right? It appears I am not using it.  Instead, I use HTTP.sys (since this is an ASP.NET Core site) with Webpack dev middleware.  But, I'm not sure why the web server is related to this--maybe it is in the way the server communicates HMR events?  \nMaybe this is the wrong place to ask, but it is the only place on the web that seems to address it at all.  I'll go ask on stackoverflow. . This seemed to work better for me.\n```\nif (module.hot) {\n    module.hot.accept() // already had this init code \nmodule.hot.addStatusHandler(status => {\n    if (status === 'prepare') console.clear()\n})\n\n}\n```\nSee also https://stackoverflow.com/a/53933757/7453 .. ",
    "alex3683": "@szalapski I'm using vue-cli and don't know if it changes something on the messages sent by the webpack-dev-server, but in my case this works:\njs\nwindow.addEventListener('message', e => {\n  if (process.env.NODE_ENV !== 'production' && e.data && e.data.type === 'webpackInvalid') {\n    console.clear();\n  }\n});\nSo the console will be cleared as soon as webpack detects the change (at least that's what I think webpackInvalid is used for ...).. @szalapski Which version of the dev server are you running? Mine is the latest, 3.1.8.. ",
    "rvanmil": "Sorry, I thought I had to create a separate PR for both branches.\n. Not if you're proxying to a backend you don't control.\n. Same issue here, everything seems to be working correctly, but the DOM is not updating.\n\n. I found a solution over here. https://github.com/gaearon/react-hot-loader/issues/511#issuecomment-288673129. ",
    "aarkerio": "Thanks a lot SpaceK33z,  my mistake. I think this issue can be closed.\n. ",
    "ruben5jami": "thank you SpaceK33z.\nhow can i use it using the command line?\n. ",
    "RyoIkarashi": "@SpaceK33z \nWhen I set index: 'index.php' as an option of historyApiFallback, Chrome tries to download HTML contents instead of showing it.\nHow can I fix this problem?\nMy webpack.config.js is below.\nwebpack.config.js\n```\nconst webpack = require('webpack');\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst StyleLintPlugin = require('stylelint-webpack-plugin');\nconst fs = require('fs');\nconst entries = [\n  './src/index.js',\n];\nmodule.exports = {\nstats: {\n    assets: false,\n    colors: true,\n    version: false,\n    hash: true,\n    timings: true,\n    chunks: true,\n    chunkModules: true,\n  },\nentry: entries,\noutput: {\n    path: path.resolve(__dirname, 'dist', 'assets'),\n    filename: '[name].js',\n  },\ndevtool: 'source-map',\ndevServer: {\n    port: 8000,\n    host: 'foobar.example.dev',\n    historyApiFallback: {\n      index: 'index.php',\n    },\n    noInfo: false,\n    stats: 'minimal',\n    contentBase: 'src',\n    hot: true,\n    inline: true,\n    https: true,\n    open: false,\n    cert: fs.readFileSync(path.resolve(__dirname, '..', 'shared', 'certs', 'foobar.example.dev.crt')),\n    key:  fs.readFileSync(path.resolve(__dirname, '..', 'shared', 'certs', 'foobar.example.dev.key')),\n    proxy: {\n      '/wp-json/*': {\n        target: 'https://foobar.example.dev/wp-json',\n        port: 443,\n        secure: false,\n        changeOrigin: true,\n      },\n    },\n  },\nmodule: {\n    rules: [\n      {\n        enforce: 'pre',\n        test: /.js?$/,\n        loader: 'eslint-loader',\n        options: {\n          configFile: '.eslintrc',\n        },\n        exclude: /(node_modules)/,\n      },\n      {\n        test: /.scss$/,\n        use: ExtractTextPlugin.extract({\n          fallback: 'style-loader',\n          use: [\n            'css-loader',\n            'postcss-loader',\n            'sass-loader',\n          ],\n        }),\n      },\n      {\n        test: /.(js|jsx)$/,\n        loaders: 'babel-loader',\n        exclude: /node_modules/,\n        query: {\n          presets: ['es2015', 'stage-1', 'react', 'react-hmre'],\n        },\n      },\n      // Images\n      // First use Base64 Encoded images if it is smaller than 10kb\n      // Otherwise use hashed images and optimize the image\n      {\n        test: /.(jpe?g|png|gif|svg)$/i,\n        loaders: [\n          'url-loader?limit=10000&name=images/[name].[hash].[ext]',\n        ],\n      },\n      // Fonts\n      {\n        test: /.(eot|ttf|woff|woff2)$/,\n        loader: 'file-loader?name=fonts/[name].[ext]',\n      },\n    ],\n  },\nresolve: {\n    extensions: ['.js', '.scss', '.css'],\n  },\nplugins: [\nnew webpack.HotModuleReplacementPlugin(),\n\nnew webpack.NamedModulesPlugin(),\n\nnew StyleLintPlugin({\n  configFile: '.stylelintrc',\n  context: './src/styles',\n  files: '**/*.scss',\n}),\n\nnew webpack.ProvidePlugin({\n  \"React\": \"react\",\n}),\n\nnew ExtractTextPlugin({\n  filename: '/assets/main.css',\n  disable: process.env.NODE_ENV !== 'production',\n  allChunks: true,\n}),\n\n],\n};\n```\nHere is the result of curl command\ncurl -I https://foobar.example.dev --insecure\nHTTP/2 200\nx-powered-by: Express\ncontent-type: text/html; charset=utf-8\ncontent-length: 9577. ",
    "chaddjohnson": "I am noticing the same: if I use index.ejs for historyApiFallback.index, Chrome forces a download rather than serving the content as a normal web page. Definitely a bug, or documentation of additionally necessary configuration is missing.\nUPDATE: Seems this was caused by the existence of build/index.ejs, so nevermind!. @Awpatterson217 It's been a while, so I don't recall well. I think I was trying to send an index.ejs file to a static build directory and have webpack serve that file (and interpolate variables), but that wasn't working. I ended up using index.html instead.. @Awpatterson217 Something like that. The details are very fuzzy at this point.. Using\njavascript\nhistoryApiFallback: true\ninstead of\njavascript\nhistoryApiFallback: {\n    index: '/index.html'\n}\nappears to be working for me. Although I was testing without a slash before index.html.. Using\njavascript\nhistoryApiFallback: true\ninstead of\njavascript\nhistoryApiFallback: {\n    index: '/index.html'\n}\nappears to be working for me. Although I was testing without a slash before index.html.. ",
    "Awpatterson217": "@chaddjohnson  I am having the same problem, could you elaborate on \"Seems this was caused by the existence of build/index.ejs\"?\nWas the problem just having a directory before the entry file?. @chaddjohnson I see, thanks anyway. Do you think it is the .ejs extension that is the problem?. ",
    "jasonsirota": "I don't think webpack-dev-server will process php or ejs files just by mapping them, you have to compile them first into a static file and then map that using historyApiFallback\nThis solution worked great when we changed our wrapping single-page-application to a different file name. ",
    "ErikEklund": "Same issue here. Trying to serve a file named index.php as the index (contains only html, so no processing needed). But because of the filename, it is just downloaded to disk instead of displayed. Would be good to force content-type or similar to make the browser show something other than .html files.. ",
    "narkq": "Should fix #117 for people who is using webpack-dev-server 1.x with inline mode.\n. ",
    "farwayer": "@SpaceK33z It will be very nice if this option can control HMR output also.\n. ",
    "ibrahima": "If I understand correctly, as @farwayer said the HMR output is still logged regardless, so we're still getting some unhelpful spam (which, in my case, is annoying because our front end tests get spammed with it constantly). Not sure whether it's even possible for that code to use the same logger since it's in a different project, but here's the source: https://github.com/webpack/webpack/blob/master/hot/dev-server.js. ",
    "lamo2k123": "SIGINT \nctrl+c / cmd+c\n. Command webpack-dev-server --config webpack --hot --inline\n. You can reproduce this bug using this project: https://github.com/lamo2k123/bp.\ncommand: npm i && npm run development\n. not work --stdin \n. oh lol ))\n. ",
    "provstevi": "Any chance this will get merged into 1.15 as well or will we have to wait for 2? We're currently unable to upgrade from 1.14.1 because of this\n. Any chance this will get merged into 1.15 as well or will we have to wait for 2? We're currently unable to upgrade from 1.14.1 because of this\n. Should the PR be done on the webpack-1 branch? \n. Should the PR be done on the webpack-1 branch? \n. Just submitted PR #604 on webpack-1 branch. \n. Just submitted PR #604 on webpack-1 branch. \n. ",
    "ajoslin": "cc @gdi2290 \n. Alright. Could we explicitly say that \"client scripts\" includes livereload?\nPerhaps:\nInline mode (set to false to disable including client scripts like livereload)\n. I understand that isn't exactly what it does. Maybe it would be better to have an option just for livereload? It's a very reasonable thing to want to disable IMO, and most tools like this have an option for it. \n. :+1: Done\n. :+1: Done\n. \ud83d\udc4c And thank you.\n. \ud83d\udc4c And thank you.\n. ",
    "beliefgp": "the sockServer prefix can configurable  or  auto match current host\nthanks\u3002\n. my local environment \uff1a  chrome   install  SwitchyOmega ,  config \uff1a http   127.0.0.1   2222\nthen use  webpack-dev-server\n. I am sorry that not this.  The same reason\uff0cbut not one  problem, but Sockjs on this scheme can be used\u3002\n. It is my current solution\u3002 I just want to make it more simple\n. I agree, but it is complex \uff08 configuration host,proxy, and exclude dev server \uff09 when use proxy\u3002\nFor new user, it is easy to forget.\nThank you anyway\u3002\n. I am running dev-server in node, remove webpack-dev-server/client, can running, but not hot update\u2026\u2026\nlet compiler = webpack(webpackConfig(compilerOptions, root));\nlet server = new WebpackDevServer(compiler, devServerConfig);. I found somethings in the document after build.  i have try host,but not it;\ndev-server use node module sockjs-client,and  sockjs-client use node moudle debug\nwebpack transform debug to browser js, throw error.\nCan you check diff of your code output below :\n``\n/**\n * Copied fromnode/src/node.js.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumentedtty_wrap.guessHandleType()` which is also lame.\n */\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n// Note stream._type is used for test-module-load-list.js\nswitch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n  // Hack to have stream not keep the event loop alive.\n  // See https://github.com/joyent/node/issues/1726\n  if (stream._handle && stream._handle.unref) {\n    stream._handle.unref();\n  }\n  break;\n\ncase 'FILE':\n  var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"fs\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n  stream = new fs.SyncWriteStream(fd, { autoClose: false });\n  stream._type = 'fs';\n  break;\n\ncase 'PIPE':\ncase 'TCP':\n  var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"net\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n  stream = new net.Socket({\n    fd: fd,\n    readable: false,\n    writable: true\n  });\n\n  // FIXME Should probably have an option in net.Socket to create a\n  // stream from an existing fd which is writable only. But for now\n  // we'll just add this hack and set the `readable` member to false.\n  // Test: ./node test/fixtures/echo.js < /etc/passwd\n  stream.readable = false;\n  stream.read = null;\n  stream._type = 'pipe';\n\n  // FIXME Hack to have stream not keep the event loop alive.\n  // See https://github.com/joyent/node/issues/1726\n  if (stream._handle && stream._handle.unref) {\n    stream._handle.unref();\n  }\n  break;\ndefault:\n  // Probably an error on in uv_guess_handle()\n  throw new Error('Implement me. Unknown stream file type!');\n\n}\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n  stream._isStdio = true;\n  return stream;\n}\n. [here is template](https://gist.github.com/beliefgp/aab5007647322aee8872baf313d40ac9)\nnodejs version v6.6.0\nrun  `npm run test`\noutput error\nERROR in ./~/debug/src/node.js\nModule not found: Error: Can't resolve 'fs' in '/Users/gaopeng/work/webpack-dev-ser-test/node_modules/debug/src'\n @ ./~/debug/src/node.js 174:15-28\n @ ./~/debug/src/index.js\n @ ./~/sockjs-client/lib/main.js\n @ ./~/sockjs-client/lib/entry.js\n @ (webpack)-dev-server/client/socket.js\n @ (webpack)-dev-server/client?http://localhost:8080\n @ multi js/play/live\nERROR in ./~/debug/src/node.js\nModule not found: Error: Can't resolve 'net' in '/Users/gaopeng/work/webpack-dev-ser-test/node_modules/debug/src'\n @ ./~/debug/src/node.js 181:16-30\n @ ./~/debug/src/index.js\n @ ./~/sockjs-client/lib/main.js\n @ ./~/sockjs-client/lib/entry.js\n @ (webpack)-dev-server/client/socket.js\n @ (webpack)-dev-server/client?http://localhost:8080\n @ multi js/play/live\n. [here is template](https://gist.github.com/beliefgp/aab5007647322aee8872baf313d40ac9)\nnodejs version v6.6.0\nrun  `npm run test`\noutput error\nERROR in ./~/debug/src/node.js\nModule not found: Error: Can't resolve 'fs' in '/Users/gaopeng/work/webpack-dev-ser-test/node_modules/debug/src'\n @ ./~/debug/src/node.js 174:15-28\n @ ./~/debug/src/index.js\n @ ./~/sockjs-client/lib/main.js\n @ ./~/sockjs-client/lib/entry.js\n @ (webpack)-dev-server/client/socket.js\n @ (webpack)-dev-server/client?http://localhost:8080\n @ multi js/play/live\nERROR in ./~/debug/src/node.js\nModule not found: Error: Can't resolve 'net' in '/Users/gaopeng/work/webpack-dev-ser-test/node_modules/debug/src'\n @ ./~/debug/src/node.js 181:16-30\n @ ./~/debug/src/index.js\n @ ./~/sockjs-client/lib/main.js\n @ ./~/sockjs-client/lib/entry.js\n @ (webpack)-dev-server/client/socket.js\n @ (webpack)-dev-server/client?http://localhost:8080\n @ multi js/play/live\n```. ",
    "cortopy": "I noticed already that the CHANGELOG mentions paths must be absolute, but I already checked that:\nPATHS.build = /home/juan/code/ng-project/client/build \nWhat I don't understand is the need to put a publicPath. It's just the root for me. If I put PATHS.build no index.html is found. If I put \"/\", no assets are loaded and page breaks\nI never had to use publicPath with versions 1. That config worked fine with webpack 1, but I can't see any mention of how to use publicPath in v2\n. I use node scripts. My old-time command was:\njson\n\"scripts\": {\n   ...\n    \"start\": \"webpack-dev-server --config ./config/webpack.dev.js --display-error-details --progress --no-info\",\n   ...\n  },\nAfter the upgrade, I had to remove the display-error-details option for webpack-dev-server to work. It does work but crashes on reload with the error I mention above. Removing the rest of options except the config option doesn't change any of this.\n. Thanks @SpaceK33z for trying to debug this. It's much appreciated. Changing the hot option doesn't change anything though.\nI have created a repo with my config and a basic angular skeleton.\nhttps://github.com/cortopy/debug-webpack-dev-server\nThe interesting thing is that this repo does replicate my issue. \nSteps to replicate:\n\nnpm install\nnpm start\nGo to http://localhost:3000/\nJust change the html file debug-webpack-dev-server/src/app/app.component.html with anything you want to trigger the reload.\nOn my end, that is enough to get the error.\n. Thank you @SpaceK33z , I've made the corrections you suggested and tested again. I've opened https://github.com/webpack/webpack/issues/2985 now.\n. Having looked at the commit, I've made the same change  locally so that I can at least use it. clientLogLevel works but only for WDS messages. All the warnings are still output to the browser console though. \n\nThe annoying part is that this new behaviour stops all reloads for me (warnings didn't stop earlier versions from reloading so never really bothered)\n. Thanks @SpaceK33z  for amazingly fast response!!\nActually I would not normally want the warnings to disappear but not having a reload defeats the whole purpose of dev server. For what I gather it makes sense not to reload with errors, but my warnings are all about innocuous linting issues. In my case it would be better to reload with warnings like in older versions. Has this actually changed?\n. Yes!! Thank you so much!! I wouldn't expect dev server to sort my warnings too!! :joy: \n. ",
    "gertcuykens": "I followed the guidelines and there was no reference in the documentation that contentBase takes a array as well. So it was a feature request. Please make it clear in the api and documentation that contentBase can take a string or array. I will test this now and reopen the issue if it's not the case.\n. ",
    "rightaway": "Interesting, in fact it works if I just add\nplugins: [\n    new webpack.HotModuleReplacementPlugin(),\n  ],\nI don't even need to add webpack/hot/dev-server or any other entry points, and strangely I don't even need to add hot: true under devServer and hot reloading still seems to work fine. The only difference when I don't add hot: true is that these lines no longer get output to the browser console\n[HMR] Waiting for update signal from WDS...\n[WDS] Hot Module Replacement enabled.\n. ",
    "fanyer": "as for me, it shows [HMR] and [WDS] infos\n[WDS] App updated. Recompiling...\n[WDS] App hot update...\n,however it didn't change the view.......what a fuck!!\nAre there any poor guys experienced like me? how to solve it!!!!\n. in addition, if I host my own server and include some codes as below:\nif (module.hot) {\n  module.hot.accept(\"./example\", function() {\n    console.log(\"HMR Reloading `./app`...\");\n  });\n}\nit works normally.\nBut how can I just work on HMR with webpack-dev-server???\n. ",
    "zhoupeihuang": "show webpack.base.conf.js and look this \"https://stackoverflow.com/questions/41956304/bannerplugin-error-in-webpack-2-2-1\". ",
    "megapctr": "I see, thanks. I thought that the command line arguments translated directly into .devServer config\n. ",
    "skwakman": "Can this fix also be merged for the 1.x branch?\n. Thanks for the merge. Any idea on when 1.x gets a new release?\n. Ah ok, I'll wait for it then. Thanks!\n. @SpaceK33z perhaps it's time for a release? \n. ",
    "axe312ger": "You marked it for version 3. Might it be possible to earlier make more clear what the CLI attaches/changes at the configuration?\nStill have issues with public path, my webpack config works fine with CLI but not with the Node API :(\n. ",
    "the-spyke": "I've tried to run WDS from my own CLI, but I can't make it behave the same way as running the binary directly. Using the examples/api/simple/ with my regular config file doesn't give me page reloading, etc. I'd also like to see console output I got used to: host, history api, etc. But bin/webpack-dev-server.js is doing too much work. It will be cool to extract processOptions() and startDevServer() into separate file(s), so anybody can reuse them. The only logic left in the actual binary will be argv parsing.. Just updated my deps, and looks like this broke my app:\n:8086//sockjs-node/iframe.html#vz40durl\nFailed to load resource: the server responded with a status of 404 (Not Found)\n:8086//sockjs-node/210/zkmtecqi/jsonp?c=_jp.akv1ra3:1\nUncaught SyntaxError: Unexpected token <\nwebpack-internal:///630:146\n[WDS] Disconnected!. Not need for enabling HMR by the way. It doesn't work even without it.. ",
    "obedm503": "994 is still an issue, lack of uniformity between cli and node api is a huge issue for webpack noobs like me.",
    "desy83": "filed this bug on http-proxy-middleware chimurai/http-proxy-middleware#112\n. ",
    "tylercollier": "@SpaceK33z Would you please link to the upstream bug so readers can know where to look for any type of support or workarounds?. @SpaceK33z Would you please link to the upstream bug so readers can know where to look for any type of support or workarounds?. ",
    "kellyrmilligan": "related to this, it would be cool to be able to set the handler for sockjs to be under a subpath as well if you have a few sub apps running at the same time. similar to how you can configure the public path to be a subdirectory, historyapifallback can be configured, etc. . update, how about prefixing it with options.publicPath ?. update, how about prefixing it with options.publicPath ?. is there any way to access the webpack config from within the client/index.js file? any variables injected when webpack is compiling it?. is there any way to access the webpack config from within the client/index.js file? any variables injected when webpack is compiling it?. I need some guidance, in index.js for the client that gets built, i'm wondering \njs\nvar socketUrl = url.format({\n    protocol: protocol,\n    auth: urlParts.auth,\n    hostname: hostname,\n    port: (urlParts.port === \"0\") ? self.location.port : urlParts.port,\n    pathname: urlParts.path == null || urlParts.path === \"/\" ? \"/sockjs-node\" : urlParts.path\n});\nin what scenario does urlParts.path get used?\nwhat other scenarios involve /sockjs-node on the client-side?\n. I need some guidance, in index.js for the client that gets built, i'm wondering \njs\nvar socketUrl = url.format({\n    protocol: protocol,\n    auth: urlParts.auth,\n    hostname: hostname,\n    port: (urlParts.port === \"0\") ? self.location.port : urlParts.port,\n    pathname: urlParts.path == null || urlParts.path === \"/\" ? \"/sockjs-node\" : urlParts.path\n});\nin what scenario does urlParts.path get used?\nwhat other scenarios involve /sockjs-node on the client-side?\n. updated to take a stab at this. it seems like the urlParts.path woudl be used when you pass a query string while including the hot client file. I am not sure this change needs to handle that scenario?\n. updated to take a stab at this. it seems like the urlParts.path woudl be used when you pass a query string while including the hot client file. I am not sure this change needs to handle that scenario?\n. also added an example doing it, although I can't seem to figure out adding historyapifallback into the mix to fully show a subapp. any ideas?\n. also added an example doing it, although I can't seem to figure out adding historyapifallback into the mix to fully show a subapp. any ideas?\n. @SpaceK33z what are your thoughts on this?\nhttps://github.com/facebookincubator/create-react-app/pull/1887\ndepends on this being in place. \n. Yes I can spend some time on it for sure. Been meaning to try and more directly ping someone so thanks for that . :metal:. @d3viant0ne @Timer updated to latest master. I've only been a consumer of webpack dev server in the past, so let me preface this pr with that. I am not sure i'm using the proper variable in the client side portion of this to accommodate the prefix. \n. @RhysyG contentBase needs to be an absolute path on disk. something like path.resolve('_site'). I was able to get the app.use... working for my setup. \nIdeally what i'd like to see is the ability to have bundles served from the publicPath, in my case and looks like others, this could be something like:\n/subapp/\nand have static files served under /subapp/whatever/path\nwhat i'm working around ATM is having publicPath being a sub path, then wanting to have files also served under this path. \nis this possible ATM without this workaround of having middleware?\n. @shellscape good call, I actually did use before. i'm wondering if this is related to the other issue, where websockets can't be under a subpath. \n. ```\nbefore(app) {\n      // This lets us open files from the runtime error overlay.\n      app.use(errorOverlayMiddleware());\n      // This service worker file is effectively a 'no-op' that will reset any\n      // previous service worker registered for the same host:port combination.\n      // We do this in development to avoid hitting the production cache if\n      // it used the same host and port.\n      // https://github.com/facebookincubator/create-react-app/issues/2272#issuecomment-302832432\n      app.use(noopServiceWorkerMiddleware());\n  app.use(`${config.output.publicPath.slice(0, -1)}/assets`, express.static(paths.appPublic))\n},\n\n```\nrelevant section from CRA. would rather not have the /assets there. . great!!  is there anything from what you know that would prevent publicPath and content base being the same? what's the best way to accomplish that?. @shellscape please let me know how I can help with this. sounds like there are some cases I didn't account for. . so yes, right now it is assuming that if public path exists, the sockjs shoudl be mounted under that path, hence the option set. should we make it so that if public path is set it and sockjsprefix isn't set that it assumes public path?. or inject the sock prefix as a variable similar to webpack_public_path so the client can use it?. yeah, fair enough. . @shellscape please let me know how I can help get a solution across the line that can encapsulate sockjs. I apologize for not noticing this underlying assumption in my PR. \n. Awesome. This and the corresponding PR will solve a good chunk of issues. I was wondering yesterday, for this particular change, what if public path and the mount point were the same? I'm trying to think of a case where you would want them to be different? When you use hmr, you generally want the URL you put in the app entry point to have the public path at the end of it anyway to match things up. I think I was trying to make this a minor update but maybe its speed for a breaking change release? When is 3.0?. @valorize from what I understand, folks want to be able to proxy several apps running webpack dev server locally. currently it will always request /sockjs-node, and if it is an app under the root, /subpath, then the desired behavior is to have it request /subpath/sockjs-node.    I thought in v3 the team is just using native websockets, so I am guessing it may be different. \n. ",
    "iam4x": "Thank's you for the fast answer and great investigation spreading some love \ud83d\udc96\nfyi: 200.html it's like an index.html on the root of my project, but I use 200.html to make it work with surge.sh (static webapp hosting) https://surge.sh/help/adding-a-200-page-for-client-side-routing\n. ",
    "aves84": "@SpaceK33z in #625 I already wrote this solution - you need to extract serveIndex from contentBase to independent meddleware.\nI don't interested anymore making PR, everyone of which are reverted :/\nI will prefer just to switch back to browserSync with normal behaviour.\n. @SpaceK33z, for me it works fine, thank you.\n. I have done it, but now this path is not illustrative, it will work even without fix because active dotRule\n. done\n. done\n. done\n. I have made common variable contentBase in function Server scope, I hope this is ok.\n. May be better to add\ndevServer: {\n    historyApiFallback: {\n        disableDotRule: true\n    }\n}\nto webpack.config.js? In this case it will be shown, that rewrite to index.html occurs before trying to serve file.txt.\n. It is done.\n. ",
    "oskarer": "I replicated the issue here; https://github.com/oskarer/webpack-dev-server-webworker-test.\nThe case I have is that I want to hot reload code inside the web worker, not in the main code. Which works fine if window is changed to self; as seen here https://github.com/oskarer/webpack-dev-server/commit/2c73af8db3ffd32a1ce78e48b84db764f371c146. window and self is essentially the same thing in the main thread, so this should not break anything.\nDo you want me to make a PR with this fix?\n. https://github.com/webpack/webpack-dev-server/pull/632\n. Included in v2.1.0-beta.8\n. ",
    "nareshbhatia": "Thanks, @SpaceK33z. I figured out the issue. My env variable was undefined and hence it was not picking up the correct configuration. My bad!\n. ",
    "meltuhamy": "I've done the required changes :) Thanks for merging!\n. Thanks @SpaceK33z ! :)\n. What do you mean? I think users might want to provide a --pfx cli option, - this will end up being on the options. \n. That's now added \ud83d\udc4d \n. Ah, I now understand what you mean. I wasn't sure that was going to work but I tried it and it worked. I've updated the PR with the change. Thanks\n. ",
    "oferh": "You are right, missed it, thanks for pointing me to the right place.\n. ",
    "jskz": "The check and return now happen immediately, and the spacing issue is resolved.\n. ",
    "filipesilva": "Cheers!\n. Closed in favor of https://github.com/webpack/webpack-dev-server/pull/946. Thanks for the quick reply @shellscape! I did find a fix but didn't add a test. Will add one now to make sure everything is fine.. Done, added test.. @shellscape I removed the example, I don't think it's a real user example.\nRegarding the real tests in /test, to test node: false doesn't throw a runtime error, a e2e test would be needed. It looks like there is no test where a browser is actually used. Instead I added node: false to the simple config to ensure that stuff in general still works with it, and that it's not needed for normal webpack-dev-server functioning. WDYT?. @shellscape I removed the example, I don't think it's a real user example.\nRegarding the real tests in /test, to test node: false doesn't throw a runtime error, a e2e test would be needed. It looks like there is no test where a browser is actually used. Instead I added node: false to the simple config to ensure that stuff in general still works with it, and that it's not needed for normal webpack-dev-server functioning. WDYT?. Done, re-added it.. Done, re-added it.. Thank you for the quick review!. Thank you for the quick review!. Hm I see what's happening... The built lib has a //# sourceMappingURL=sockjs.min.js.map and that gets bundled as is. Then the browser tries to look it up.\nTo remove the source map directive (or load the sourcemap properly) the webpack config for the app would need to process this file. \nThis is a similar problem to the one addressed by #1148, where the a workaround was added to prevent the build configuration of webpack-dev-server to affect the client app.\nI'm not sure what the 'real' solution is besides separating the builds... @shellscape I noticed that the npm version of webpack-dev-server actually seems to have bundles for stuff (client/{index,live,sockjs}.bundle.js). Are these used? It sorta feels like using them would fix this class of problems.. ",
    "Foxandxss": "Doesn't work with beta 7 and according to #642 happens from beta 6\n. Works for me too.\n. I just reported it at #640 and I believe it is the same issue.\n. ",
    "WillooWisp": "Works!\n. ",
    "robgha01": "I just found out the hard way >.< any updates on this ? for now i guess i will have to not use this and stick to one embedded theme .... ",
    "NogsMPLS": "Looks like this might be fixed with this merge into dev-middleware: https://github.com/webpack/webpack-dev-middleware/pull/187\njust needs to get published. ",
    "maciej-gurban": "I'm using webpack@2.6.1 and webpack-dev-server@2.4.4 versions, and having two webpack configs - each with different context and devServer.contentBase - still doesn't seem to work. Is it supposed to be supported?\nI'm using this example as it is and it works. This still requires to manually include script tags into index.html like so:\n<script src=\"./desktop.js\"></script>\n<script src=\"./mobile.js\"></script>\nNow if I change the configuration of mobile bundle so that the entry file path is different than in desktop file that previously compiled well (mobile.js) will now throw 404 in the browser.\nThings work well to compile multiple apps with multiple webpack configs, but the moment file path to any of them is different, things break without explanation and webpack does not report any issues.\nEdit: Okay, so apparently the only issue is that webpack won't understand the paths to other directories, but as long as all files are in the same directory it's enough to just do a single require('./my/other/file.js') inside those files to make it work.\n. @faceyspacey Since you've worked on this, is there any docs I could read to understand how to properly configure webpack to use the multicompiler settings? I believe my use case is exactly as what @SpaceK33z described. Or is that workflow supported at all?. ",
    "jonohayon": "Hi, was there any progress on this?\nI see that webpack/webpack-dev-middleware#187 fixed this problem in the middleware part, so that's not a problem anymore, and the code actually looks like it's supposed to be able to run multi-compiler configurations -- anyone knows what may cause this not to work (as it looks like it should)?. ",
    "jonaskello": "If you want to have the same output.publicPath for multiple configs, or have them nested so one is the root and the other is a sub-path, then you need to make sure the configs have the exact same setting for output.path otherwise only the first config will have effect. Not sure why this is, I spent several hours trial and error to find this out so I just wanted to mention it for future reference.\nUPDATE: Seems like this only works if you have the exact same publicPath. Nesting them, for example having one config with output.publicPath = \"/\"  and one with output.publicPath = \"/sub\" does not work.\nUPDATE2: Seems like the trick is to set output.path to exactly follow output.publicPath. For example the following will work for nested paths:\nconfig1.output.path = path.resolve(__dirname, \"./dist\");\nconfig2.output.path = path.resolve(__dirname, \"./dist/sub\");\nconfig1.output.publicPath = \"/\";\nconfig2.output.publicPath = \"/sub\";. @shellscape Here is a minimal repro of this issue: https://github.com/jonaskello/wds-disconnect-loop-repro. @shellscape I tried the webpack-dev-server@next (3.0.0-alpha2), but I got the error below. Seems it has a missing dependency:\nERROR in (webpack)-dev-server/lib/client/js/overlay.js\nModule not found: Error: Can't resolve 'style-loader' in 'C:\\code\\github\\jonaskello\\wds-disconnect-loop-repro\\node_modules\\webpack-dev-server\\lib\\client\\js'\n @ (webpack)-dev-server/lib/client/js/overlay.js 3:0-54\n @ (webpack)-dev-server/lib/client/js?https://localhost:8080\n @ multi (webpack)-dev-server/lib/client/js?https://localhost:8080 babel-polyfill ./src/index.j\nTried to install css-loader in my project to resolve it but then I got this error:\nRROR in ./node_modules/css-loader!(webpack)-dev-server/lib/client/css/overlay.css\nModule build failed: Error: Cannot find module './data/iu-mappings.json'\n    at Function.Module._resolveFilename (module.js:536:15)\n    at Function.Module._load (module.js:466:25)\n    at Module.require (module.js:579:17)\n    at require (internal/module.js:11:18)\n...\n. Also tried my repro on my macbook but there it works fine so it seems to be a windows only problem (which was also indicated in earlier posts).. @shellscape I was able to run with alpha3. It still does not work but the behavior is a bit different. Instead of getting stuck in an infinite reload loop it says it cannot connect and retries. See screenshot below:\n\n. I can confirm too that my repro is no longer having the issue in alpha5. Nice work @shellscape!. As noted above this is fixed in 3.0 which from what i understand will not be released.. ",
    "SergeShkurko": "My solution to a similar problem with webpack multi compiller & react & HMR\nI have 2 sub projects: app & widget\nApp located at localhost:8080/* (except localhost:8080/widget)\nWidget located at localhost:8080/widget\nwebpack.config.js\njavascript\nmodule.exports = [{\n  entry: {\n    app: [\n      'src/app/index.js',\n      // path = output.publicPath + __webpack_hmr\n      'webpack-hot-middleware/client?path=/__webpack_hmr&timeout=20000&reload=true',\n    ],\n  },\n  output: {\n    publicPath: '/',\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/app/index.html',\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n  ],\n  // Other module 1 options\n},{\n  entry: {\n    widget: [\n      'src/app/index.js',\n      // path = output.publicPath + __webpack_hmr !see the difference between entries!\n      'webpack-hot-middleware/client?path=/widget__webpack_hmr&timeout=20000&reload=true',\n    ],\n  },\n  output: {\n    publicPath: '/widget',\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: './src/widget/index.html',\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n  ],\n  // Other module 2 options\n}]\ndev-server.js\n```javascript\nconst\n  fs = require('fs'),\n  http = require('http'),\n  express = require('express'),\n  webpack = require('webpack')\nconst app = express()\n;(function() {\n  const webpackConfig = require(process.env.WEBPACK_CONFIG || './webpack.config')\nwebpackConfig.forEach((config, index) => {\n    const compiler = webpack(config)\napp\n  .use(require('webpack-dev-middleware')(compiler, {\n    publicPath: config.output.publicPath,\n  }))\n  .use(require('webpack-hot-middleware')(compiler, {\n    log: console.log,\n    path: `${config.output.publicPath}__webpack_hmr`,\n    heartbeat: 10 * 1000,\n  }))\n\n})\n})()\nif (require.main === module) {\n  const server = http.createServer(app)\n  server.listen(process.env.PORT || 8080, () =>\n    console.log('Listening on %j', server.address())\n  )\n}\n```\nAnd... add react-hot-loader in app & widget entrypoints\nWorks great \ud83d\udc4d. ",
    "LeTranAnhVu": "Hi. So how can we make the bundle show up in disk instead build in memory? Any suggestion?. ",
    "whatsdis": "I understand, but not getting any good answers.\nyes still getting that error after emptying it out\n. ",
    "thrandre": "That is correct. Neither Chrome or IE even provide such an option.\n. Friendly bump. Chrome 58 started rolling out in Norway this morning.. ",
    "jdiapps": "I can get firefox to proceed by adding an exception. This will get me over the hurdle for now until it is fixed.\n. ",
    "stoffeastrom": "I just tried this but I get NET::ERR_CERT_AUTHORITY_INVALID. Do I have to do something more?\n. Oh yes, I forgot that I have to click Advanced -> continue to unsecure.. bl bla thanks\n. ",
    "charlespwd": "Thanks! \nThat's a very good point. Should be corrected now. Let me know if you want me to squash commits before you merge. \n. Sure thing!\n. But that's the thing. Webpack 2 is in beta. Which means anyone that uses it at work won't be able to use this feature until Webpack 2 is out of beta. \n. ",
    "Pyrolistical": "this branch isn't working for me.  when I try to use this feature I get the error:\nError: ENOENT: no such file or directory, open '/Users/me/my-project/node_modules/webpack-dev-server/client/live.bundle.js'\ni am using the options:\nwebpack-dev-server --progress --colors --inline --history-api-fallback --host 0.0.0.0 --content-base development/ --watch-content-base\n. Found the line: https://github.com/webpack/webpack-dev-server/blob/b85a0ceb946589d345c2b41e4d1efb8a5c945f9c/bin/webpack-dev-server.js#L410\nThat message is incorrect when there are rewrites. OK, found our my issue.\nIt was because the file index.html was taking precedence over the rewrite rules.\nI renamed index.html to main.html and it works.  Might need to add some documentation around this. ",
    "aaronroberson": "@SpaceK33z With 2.1.0-beta.11 I'm getting the following error:\n/node_modules/webpack-dev-server/bin/webpack-dev-server.js:376\n        throw e;\n        ^\nTypeError: webpack.validateSchema is not a function\n    at new Server (/Users/bjon18/ashpod/node_modules/webpack-dev-server/lib/Server.js:23:33)\n    at startDevServer (/Users/bjon18/ashpod/node_modules/webpack-dev-server/bin/webpack-dev-server.js:369:12)\n    at processOptions (/Users/bjon18/ashpod/node_modules/webpack-dev-server/bin/webpack-dev-server.js:307:3)\n    at Object.<anonymous> (/Users/bjon18/ashpod/node_modules/webpack-dev-server/bin/webpack-dev-server.js:431:1)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:394:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:509:3```\n. Good to know, thanks!\n. ",
    "mikeengland": "@SpaceK33z Looks like the fix only went into webpack v2.1.0-beta.x \ud83d\udc4e \n. @koddo I tried both this hack and upgrading to the latest beta webpack-dev-server and webpack releases. The red box is shown if you break a dependency e.g. try and use  instead of , but if you actually break the JSX tag e.g. 'Link>', an error is raised in the console but no further updates actually seem to hot reload on the page.\n. @koddo I tried this but I couldn't get it working if a compilation error occurs. Note, I am not using Create-React-App. One thing I did not do is add if(module.hot) { module.hot.accept( function(err){console.log(err)} ) } to index.js. I am using the Hot Reloader v3 Beta (latest) so I have this in index.js:\n``` javascript\nconst HotContainer = ({store}) => ;\nif (module.hot) {\n    module.hot.accept(Root, () => {\n        render(, document.getElementById('app-root'));\n    });\n}\n```\n. ",
    "koddo": "I have the same issue. Could you point me to the fix in the beta?\nUpdate: Ok, found the commit.\n. I wonder why noErrorsPlugin doesn't work. It should stop any emitting, but it doesn't.\n. When using the noErrorsPlugin, after making an error and then fixing it, module.hot.status() returns \"check\", when it should return \"idle\". So, basically it gets stuck somewhere, I can't figure out.\n. Ok, a tiny monkey patch for this issue. I have webpack v1.13.2 with noErrorsPlugin.\nI know this is an awful hack, please don't hate me.\nFirst, add the setStatus() function in node_modules/webpack/lib/HotModuleReplacement.runtime.js\n``` JavaScript\nmodule.exports = function() {\n    // ...\n    function hotCreateRequire(moduleId) {\n        // ...\n        setStatus: function(s) {\n            hotSetStatus(s);\n        },\n        // ...\n```\nSecond, call it in the module.hot.check callback in node_modules/webpack/hot/only-dev-server.js to make it unstuck from the \"check\" status.\n``` JavaScript\nif(module.hot) {\n    var check = function check() {\n        module.hot.check(function(err, updatedModules) {\n            if(err) {\n                // ...\n                } else {\n                    console.warn(\"[HMR] Update check failed: \" + err.stack || err.message);\n                    module.hot.setStatus(\"idle\");    // <<<---------- here it is !!!\n                }\n                return;\n            }\n            // ...             \n``\n. @mikeengland, what is a red box? I only have errors in the console. I see syntax errors in jsx, fix them, and then it hot reloads. I understand this feeling of helplessness because of lack of live reload in the twenty first century, so I'm willing to help. Do you use webpack v1.13.2 withnoErrorsPlugin,webpack/hot/only-dev-server.js, andwebpack-dev-server/client? I usecreate-react-app, and then eject, and configure this stuff in the webpack.conf.\n. @mikeengland,webpack/hot/only-dev-server.js, not justwebpack/hot/dev-server.js, this is important.\n. @mrdulin, please try the hack I've posted above. I'd share it, but I'll have to create a hundred megabytes repo with all thosenode_modules/`. And that wouldn't be safe for you to run arbitrary code which came from an internet stranger.\nBefore doing the following steps from scratch, try to add an error handler to the module.hot.accept() first. Should look like this: if(module.hot) { module.hot.accept( function(err){console.log(err)} ) }. Without this the HMR goes to fail state: https://github.com/webpack/webpack/issues/418#issuecomment-53398056\n@mikeengland: I forgot to mention that callback for module.hot.accept(). Please try it.\nTo make it work I did create-react-app, ejected it, monkey patched those node_modules/react-scripts/node_modules/webpack/lib/HotModuleReplacement.runtime.js and node_modules/webpack/hot/only-dev-server.js. Then added NoErrorsPlugin and commened out require.resolve('react-dev-utils/webpackHotDevClient'), uncommented require.resolve('webpack-dev-server/client') + '?/' and require.resolve('webpack/hot/dev-server'), we need the only-dev-server though, so I made this edit. And then I put if(module.hot) { module.hot.accept( function(err){console.log(err)} ) } to index.js.\n. @mikeengland, hm, I've just checked, this line has no effect, hmr doesn't break without it. So, I've found the only configuration that works for me. Sorry, can't help you with the hot reloader.\n. ",
    "dsteinman": "I encountered this same problem, and I discovered it was because in my server (nodejs/express) I defined my webpack /build/ directory to be a static directory served by Express:\napp.use(express.static('/build', '../public/build'));\nBut the new webpack-dev-server and hot-loader need to be the one serving your build directory while in development mode.  So my solution was to enable static delivery of my build directory when not in development mode:\nif (process.env.NODE_ENV != 'dev') {\n   app.use(express.static('/build', '../public/build'));\n}\nAnd then in my webpack config I set publicPath to be '/build':\nvar config = {\n    devtool: 'source-map',\n    output: {\n        path: path.resolve(__dirname, '../public/build'),\n        filename: 'bundle.js',\n        publicPath: '/build'\n    },\n    ....\nSo now in dev mode, the bundle and the .hot-update.json files are served by webpack-dev-server:\nhttp://localhost:8000/build/bundle.js\nhttp://localhost:8000/build/c3b3297060d3e2abe0a4.hot-update.json\n. ",
    "resure": "Done, I've appended that changes to the last commit.\n. Typically, I'm using dev server in socket mode together with nginx:\n- nginx is being configured to pass all /webpack/* and /sockjs-node/* to webpack-dev-server\n- webpack-devserver itself is starting with --public=0.0.0.0 option, so hmr client fallbacks to self.location.hostname which is correct value for this usecase\n- Everything is still on one host so no additional configuration for CORS required\n@everthis can you please explain what is your usecase? How do you connecting to that socket?. @vcavallo here is my nginx setup:\n``` \n    root /.../app/public;\nlocation @node {\n    proxy_pass http://localhost:7070;\n    proxy_http_version 1.1;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n}\n\nlocation / {\n    try_files $uri @node;\n}\n\n```\nI've recently switched to webpack hot middleware, but overall scheme should still be same.\nMaybe you have connection problems, like in #416?\n. ",
    "khalidHussain": "@SpaceK33z awesome man thanks\n. ",
    "dnutels": "Absolutely.\nUpgraded to 2.1.0-beta.9\nStill exhibits the same behavior.\n. I do.\nAnyway... I've created a repo demonstrating the issue - \nhttps://github.com/zen-experiments/webpack-dev-server-issue-666\nnpm i\nnpm start\nAccess http://localhost:3000 -> you should see ROOT printed\nAccess http://localhost:3000/aaa -> you should see SERVER printed\nServer does this:\njavascript\npageRouter.get('*', (req, res) => {\n    res.write('SERVER');\n    res.end();\n});\n. Disabling contentBase did nothing. I am not positive how that would work with HTML.\nThe point was to have webpack-dev-server re-load (perhaps even through HMR) on changes, while still having SSR from the FE server it proxies to.\nI expected such a setting to make webpack-dev-server a one-way street, so to speak. Where it will push updates to the browser, but defer to the FE server it proxies on any HTTP requests (or perhaps some).\nI imagine that's what you were going for with 1), but it didn't work for me. Instead it fired a loop of refresh-rebuild sequences that eventually stopped.\n```\nChild html-webpack-plugin for \"index.html\":               \n    chunk    {0} index.html 537 kB [entry]                \n         + 4 hidden modules                               \nwebpack: bundle is now VALID.                             \nwebpack: bundle is now INVALID.                           \nwebpack: wait until bundle finished: /app.js              \nHash: f5ae2c990bf76853cece                                \nVersion: webpack 2.1.0-beta.25                            \nTime: 38ms                                                \nchunk    {0} app.js (app) 232 kB [entry]                  \n   [35] ./src/client/index.js 73 bytes {0} [built]        \n     + 79 hidden modules                                  \nChild html-webpack-plugin for \"index.html\":               \n    chunk    {0} index.html 537 kB [entry]                \n         + 4 hidden modules                               \nwebpack: bundle is now VALID.                             \nwebpack: bundle is now INVALID.                           \nHash: f5ae2c990bf76853cece                                \nVersion: webpack 2.1.0-beta.25                            \nTime: 39ms                                                \nchunk    {0} app.js (app) 232 kB [entry]                  \n   [35] ./src/client/index.js 73 bytes {0} [built]        \n     + 79 hidden modules                                    \nAND MORE HERE            \n``\n. OK. Have to disablepublicPath` as well for your suggestion to work.\nRenaming the HTML to index-dev.html seems to have the desired effect as well.\nHmm... Perhaps add this to the documentation?\n. ",
    "jumper423": "No. \nWithout this dependence.\nI and members of my team do not work websocket.\nWhen this dependence is, then everything works fine.\ndevServer: {\n        port: METADATA.port,\n        host: METADATA.host,\n        historyApiFallback: true,\n        watchOptions: {\n            aggregateTimeout: 300,\n            poll: 1000\n        },\n        inline: true,\n        outputPath: helpers.root('public'),\n        proxy: {\n            '/ws':  {\n                target: global.CONFIG.proxyWS,\n                secure: false,\n                ws: true\n            }\n        },\n. ",
    "ibufu": "It works at webpack-dev-server@1.14.1.\n. It works at webpack-dev-server@1.14.1.\n. @SpaceK33z, slash is a necessary configuration for SPA with htmlWebpackPlugin. Would it be fixed in  future?\n. @SpaceK33z, slash is a necessary configuration for SPA with htmlWebpackPlugin. Would it be fixed in  future?\n. @SpaceK33z, slash is a necessary configuration for SPA with htmlWebpackPlugin. Would it be fixed in  future?\n. @SpaceK33z, for example, my configuration:\njs\nentry: {\n        'app': './src/index.js',\n},\noutput: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: '/[name].js'\n },\nthen the html file generated by htmlWebpackPlugin will be:\nhtml\n<script src=\"/app.js\"></script>\nThe absolute path is required for single page application.\nBut now webpack dev server will response 404 of app.js.\n. @SpaceK33z, for example, my configuration:\njs\nentry: {\n        'app': './src/index.js',\n},\noutput: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: '/[name].js'\n },\nthen the html file generated by htmlWebpackPlugin will be:\nhtml\n<script src=\"/app.js\"></script>\nThe absolute path is required for single page application.\nBut now webpack dev server will response 404 of app.js.\n. @SpaceK33z, for example, my configuration:\njs\nentry: {\n        'app': './src/index.js',\n},\noutput: {\n        path: path.resolve(__dirname, \"dist\"),\n        filename: '/[name].js'\n },\nthen the html file generated by htmlWebpackPlugin will be:\nhtml\n<script src=\"/app.js\"></script>\nThe absolute path is required for single page application.\nBut now webpack dev server will response 404 of app.js.\n. I don't want to change that path, I just want htmlWebpackPlugin generate html file that js file with prefix '/' like this:\nhtml\n<script src=\"/app.js\"></script>\nAnd at webpack-dev-server@1.14.1, it is a easy way to achieve it by the above configuration.\n. I don't want to change that path, I just want htmlWebpackPlugin generate html file that js file with prefix '/' like this:\nhtml\n<script src=\"/app.js\"></script>\nAnd at webpack-dev-server@1.14.1, it is a easy way to achieve it by the above configuration.\n. I don't want to change that path, I just want htmlWebpackPlugin generate html file that js file with prefix '/' like this:\nhtml\n<script src=\"/app.js\"></script>\nAnd at webpack-dev-server@1.14.1, it is a easy way to achieve it by the above configuration.\n. @SpaceK33z, thank you very much, I will help you as far as I can:).\n. @SpaceK33z, thank you very much, I will help you as far as I can:).\n. @SpaceK33z, thank you very much, I will help you as far as I can:).\n. ",
    "dhardtke": "I'm having a similar issue that does not occur with \njson\n\"webpack-dev-server\": \"1.14.1\",\n\"webpack-dev-middleware\": \"1.8.4\",\nThis is my webpack.common.js:\n``` js\nconst webpack = require(\"webpack\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nconst helpers = require(\"./helpers\");\nmodule.exports = {\n    cache: true,\nresolve: {\n    extensions: [\".ts\", \".js\", \".json\"],\n\n    // An array of directory names to be resolved to the current directory\n    modules: [\n        helpers.root(\"app\"),\n        \"node_modules\"\n    ]\n},\n\nmodule: {\n    loaders: [\n        {\n            test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n            loader: \"file?name=assets/[name].[hash].[ext]\"\n        },\n        {\n            // only embed css files that are being required in app/ due to angular2-template-loader\n            test: /\\.css$/,\n            include: helpers.root(\"app\"),\n            loader: \"to-string-loader!css-loader\"\n            // alternative: raw\n        },\n        {\n            // embed and load (inject) css files that are everywhere but in app\n            test: /\\.css$/,\n            exclude: helpers.root(\"app\"),\n            loader: \"to-string-loader!style-loader!css-loader\"\n        },\n        {\n            test: /\\.scss$/,\n            exclude: /node_modules/,\n            loaders: [\"raw-loader\", \"sass-loader\"] // sass-loader not scss-loader\n        },\n        {\n            test: /\\.html$/,\n            loader: \"html\"\n            // alternative: raw\n        }\n    ]\n},\n\n// see https://github.com/webpack/webpack/issues/1716 regarding trailing slashes\noutput: {\n    path: helpers.root(\"dist/\"),\n    publicPath: \"/dist/\",\n    filename: \"[name].[hash].js\",\n    chunkFilename: \"[id].[hash].chunk.js\"\n},\n\nplugins: [\n    // correct order of assets inclusion\n    new webpack.optimize.CommonsChunkPlugin({\n        name: [\"polyfills\", \"vendor\"].reverse()\n    }),\n\n    new HtmlWebpackPlugin({\n        template: \"./app/index.tpl.html\",\n        filename: \"../index.html\",\n        chunksSortMode: \"dependency\",\n        minify: false\n    }),\n\n    new webpack.LoaderOptionsPlugin({\n        options: {\n            minify: true,\n            htmlLoader: {\n                removeAttributeQuotes: false,\n                caseSensitive: true\n            }\n        }\n    }),\n\n    // see https://github.com/AngularClass/angular2-webpack-starter/issues/993#issuecomment-246883410\n    new webpack.ContextReplacementPlugin(/angular(\\\\|\\/)core(\\\\|\\/)(esm(\\\\|\\/)src|src)(\\\\|\\/)linker/, __dirname)\n]\n\n};\n```\nand this is my webpack.dev.js:\n``` js\nconst webpackMerge = require(\"webpack-merge\");\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nconst commonConfig = require(\"./webpack.common.js\");\nconst helpers = require(\"./helpers\");\nmodule.exports = webpackMerge(commonConfig, {\n    entry: {\n        \"polyfills\": \"./app/polyfills.ts\",\n        \"app\":       \"./app/main.ts\",\n        \"vendor\":    \"./app/vendor.ts\"\n    },\nmodule: {\n    loaders: [\n        {\n            test:    /\\.ts$/,\n            loaders: [\n                \"awesome-typescript-loader\",\n                \"angular2-template-loader\",\n                \"angular2-router-loader?aot=false\"\n            ]\n        }\n    ]\n},\n\n//devtool: \"cheap-module-eval-source-map\",\n\noutput: {\n    path:          helpers.root(\"dist\"),\n    publicPath:    \"/\",\n    filename:      \"[name].js\",\n    chunkFilename: \"[id].chunk.js\"\n},\n\nplugins: [\n    new ExtractTextPlugin(\"[name].css\")\n],\n\ndevServer: {\n    historyApiFallback: true,\n    stats:              \"minimal\",\n    proxy:              {\n        \"/rest\": {\n            target: \"http://127.0.0.1:8080\",\n            secure: true\n        }\n    }\n}\n\n});\n```\nIf I use webpack-dev-server@1.14.1 everything is fine, but with webpack-dev-server@2.1.0-beta.9 the resulting index.html is minified (which it shouldn't be), also the <script> and <link> tag URLs are wrong.\nInstead of <script src=\"/app.js\"></script> I get <script src=\"/dist/app.arandomhash.js\"></script>.\nCan't use 2.1.0-beta.9 then :(\n. I'm having a similar issue that does not occur with \njson\n\"webpack-dev-server\": \"1.14.1\",\n\"webpack-dev-middleware\": \"1.8.4\",\nThis is my webpack.common.js:\n``` js\nconst webpack = require(\"webpack\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nconst helpers = require(\"./helpers\");\nmodule.exports = {\n    cache: true,\nresolve: {\n    extensions: [\".ts\", \".js\", \".json\"],\n\n    // An array of directory names to be resolved to the current directory\n    modules: [\n        helpers.root(\"app\"),\n        \"node_modules\"\n    ]\n},\n\nmodule: {\n    loaders: [\n        {\n            test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n            loader: \"file?name=assets/[name].[hash].[ext]\"\n        },\n        {\n            // only embed css files that are being required in app/ due to angular2-template-loader\n            test: /\\.css$/,\n            include: helpers.root(\"app\"),\n            loader: \"to-string-loader!css-loader\"\n            // alternative: raw\n        },\n        {\n            // embed and load (inject) css files that are everywhere but in app\n            test: /\\.css$/,\n            exclude: helpers.root(\"app\"),\n            loader: \"to-string-loader!style-loader!css-loader\"\n        },\n        {\n            test: /\\.scss$/,\n            exclude: /node_modules/,\n            loaders: [\"raw-loader\", \"sass-loader\"] // sass-loader not scss-loader\n        },\n        {\n            test: /\\.html$/,\n            loader: \"html\"\n            // alternative: raw\n        }\n    ]\n},\n\n// see https://github.com/webpack/webpack/issues/1716 regarding trailing slashes\noutput: {\n    path: helpers.root(\"dist/\"),\n    publicPath: \"/dist/\",\n    filename: \"[name].[hash].js\",\n    chunkFilename: \"[id].[hash].chunk.js\"\n},\n\nplugins: [\n    // correct order of assets inclusion\n    new webpack.optimize.CommonsChunkPlugin({\n        name: [\"polyfills\", \"vendor\"].reverse()\n    }),\n\n    new HtmlWebpackPlugin({\n        template: \"./app/index.tpl.html\",\n        filename: \"../index.html\",\n        chunksSortMode: \"dependency\",\n        minify: false\n    }),\n\n    new webpack.LoaderOptionsPlugin({\n        options: {\n            minify: true,\n            htmlLoader: {\n                removeAttributeQuotes: false,\n                caseSensitive: true\n            }\n        }\n    }),\n\n    // see https://github.com/AngularClass/angular2-webpack-starter/issues/993#issuecomment-246883410\n    new webpack.ContextReplacementPlugin(/angular(\\\\|\\/)core(\\\\|\\/)(esm(\\\\|\\/)src|src)(\\\\|\\/)linker/, __dirname)\n]\n\n};\n```\nand this is my webpack.dev.js:\n``` js\nconst webpackMerge = require(\"webpack-merge\");\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nconst commonConfig = require(\"./webpack.common.js\");\nconst helpers = require(\"./helpers\");\nmodule.exports = webpackMerge(commonConfig, {\n    entry: {\n        \"polyfills\": \"./app/polyfills.ts\",\n        \"app\":       \"./app/main.ts\",\n        \"vendor\":    \"./app/vendor.ts\"\n    },\nmodule: {\n    loaders: [\n        {\n            test:    /\\.ts$/,\n            loaders: [\n                \"awesome-typescript-loader\",\n                \"angular2-template-loader\",\n                \"angular2-router-loader?aot=false\"\n            ]\n        }\n    ]\n},\n\n//devtool: \"cheap-module-eval-source-map\",\n\noutput: {\n    path:          helpers.root(\"dist\"),\n    publicPath:    \"/\",\n    filename:      \"[name].js\",\n    chunkFilename: \"[id].chunk.js\"\n},\n\nplugins: [\n    new ExtractTextPlugin(\"[name].css\")\n],\n\ndevServer: {\n    historyApiFallback: true,\n    stats:              \"minimal\",\n    proxy:              {\n        \"/rest\": {\n            target: \"http://127.0.0.1:8080\",\n            secure: true\n        }\n    }\n}\n\n});\n```\nIf I use webpack-dev-server@1.14.1 everything is fine, but with webpack-dev-server@2.1.0-beta.9 the resulting index.html is minified (which it shouldn't be), also the <script> and <link> tag URLs are wrong.\nInstead of <script src=\"/app.js\"></script> I get <script src=\"/dist/app.arandomhash.js\"></script>.\nCan't use 2.1.0-beta.9 then :(\n. I think it is related though. Only happens when using 2.1.0-beta.9, but it works with 1.14.1. How can that be?\n. I think it is related though. Only happens when using 2.1.0-beta.9, but it works with 1.14.1. How can that be?\n. I did try using an absolute URL in output.publicPath. Still no difference. It's like webpack completely ignores my settings (even though I dumped the output of the merge() call and there is absolutely no difference). Maybe it is a bug in https://github.com/ampedandwired/html-webpack-plugin, need to investiagte further...\n. I did try using an absolute URL in output.publicPath. Still no difference. It's like webpack completely ignores my settings (even though I dumped the output of the merge() call and there is absolutely no difference). Maybe it is a bug in https://github.com/ampedandwired/html-webpack-plugin, need to investiagte further...\n. I did try using an absolute URL in output.publicPath. Still no difference. It's like webpack completely ignores my settings (even though I dumped the output of the merge() call and there is absolutely no difference). Maybe it is a bug in https://github.com/ampedandwired/html-webpack-plugin, need to investiagte further...\n. ",
    "NewFuture": "sorry, it does not work .\ud83d\ude02 \nsee here:  https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L276\n. sorry, it does not work .\ud83d\ude02 \nsee here:  https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L276\n. OK,  I have fixed it. \ud83d\ude38 \nI found another bug in ipv6, and fixed both.\nsee this #673 \nBut , i think some  test examples for ipv6 should be added.\n\ud83d\udc31 \n. OK,  I have fixed it. \ud83d\ude38 \nI found another bug in ipv6, and fixed both.\nsee this #673 \nBut , i think some  test examples for ipv6 should be added.\n\ud83d\udc31 \n. \ud83d\ude00 nice!\n. \ud83d\ude00 nice!\n. \ud83d\ude00 nice!\n. \ud83d\ude03  well, it's changed. And some tips are added to the example doc. #676 \n. \ud83d\ude03  well, it's changed. And some tips are added to the example doc. #676 \n. ",
    "angusjiang": "```\n{\n  \"name\": \"h5.online.fontend\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --host 0.0.0.0 --port 8080 --inline --hot --quiet\",\n    \"build\": \"export NODE_ENV=production && webpack --progress --hide-modules\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"mint-ui\": \"^0.2.8\",\n    \"vue-core-image-upload\": \"^0.9.5\",\n    \"vue-progressbar\": \"^0.2.4\",\n    \"vuerify\": \"^0.2.1\",\n    \"webpack\": \"^1.13.2\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer-loader\": \"^3.2.0\",\n    \"babel-core\": \"^6.2.1\",\n    \"babel-loader\": \"^6.2.0\",\n    \"babel-plugin-transform-runtime\": \"^6.1.18\",\n    \"babel-preset-es2015\": \"^6.1.18\",\n    \"babel-preset-stage-0\": \"^6.3.13\",\n    \"babel-runtime\": \"^5.8.0\",\n    \"bootstrap\": \"^3.3.6\",\n    \"css-loader\": \"^0.23.0\",\n    \"echarts\": \"^3.1.3\",\n    \"file-loader\": \"^0.8.5\",\n    \"jquery\": \"^2.2.1\",\n    \"jsx-loader\": \"^0.13.2\",\n    \"less\": \"^2.6.0\",\n    \"less-loader\": \"^2.2.2\",\n    \"mint-ui\": \"^0.2.7\",\n    \"style-loader\": \"^0.13.0\",\n    \"superagent\": \"^1.7.2\",\n    \"url-loader\": \"^0.5.7\",\n    \"vue\": \"^1.0.10\",\n    \"vue-hot-reload-api\": \"^1.2.2\",\n    \"vue-html-loader\": \"^1.0.0\",\n    \"vue-loader\": \"^7.1.7\",\n    \"vue-resource\": \"^0.5.1\",\n    \"vue-router\": \"^0.7.7\",\n    \"vue-strap\": \"^1.0.2\",\n    \"vuerify\": \"^0.2.1\",\n    \"webpack\": \"^1.12.9\",\n    \"webpack-dev-server\": \"^1.14.0\"\n  }\n}\n.\nvar webpack = require('webpack');\n//\u6dfb\u52a0\u5206\u7c7bcss\u63d2\u4ef6\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar hotModuleReplacementPlugin = require(\"webpack/lib/HotModuleReplacementPlugin\");\nmodule.exports = {\n    entry: {\n        home: \"js/home\",\n        detail: \"js/detail\"\n    },\n    output: {\n        path: \"assets\",                   //\u6253\u5305\u8f93\u51fa\u76ee\u5f55\n        publicPath: \"/static/build/\",     //webpack-dev-server\u8bbf\u95ee\u7684\u8def\u5f84\n        filename: \"[name].js\",            //\u8f93\u51fa\u6587\u4ef6\u540d\n        chunkFilename: \"bundle-[id].js\"   //\u8f93\u51fachunk\u6587\u4ef6\u540d\n    },\n    resolve: {\n        modulesDirectories: ['.']\n    },\n    module: {\n        loaders: [\n            {\n                test: /.css$/,\n                loader:  ExtractTextPlugin.extract(\"style-loader\", \"css-loader\")\n            },\n        ]\n    },\n    plugins: [\n        new ExtractTextPlugin(\"[name].css\"),\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devServer: {\n        historyApiFallback: true,\n        hot: true,\n        inline: true,\n        progress: true\n    }\n}\n```\n. @SpaceK33z\n [root@localhost vue]# node -v\nv4.0.0\n[root@localhost vue]# npm -v\n2.14.2\nI have node and npm version. \n. @SpaceK33z\n [root@localhost vue]# node -v\nv4.0.0\n[root@localhost vue]# npm -v\n2.14.2\nI have node and npm version. \n. node_modules \nautoprefixer-loader             file-loader            vue-hot-reload-api\nbabel-core                      html-webpack-plugin    vue-html-loader\nbabel-loader                    http-proxy-middleware  vue-infinite-scroll\nbabel-plugin-transform-runtime  jquery                 vue-loader\nbabel-preset-es2015             jsx-loader             vue-progressbar\nbabel-preset-stage-0            less                   vue-resource\nbabel-preset-stage-2            less-loader            vue-router\nbabel-runtime                   mint-ui                vue-strap\nbootstrap                       opn                    vue-style-loader\nconnect-history-api-fallback    style-loader           webpack\ncss-loader                      superagent             webpack-dev-middleware\necharts                         url-loader             webpack-dev-server\neventsource-polyfill            vue                    webpack-hot-middleware\nexpress                         vue-cli                webpack-merge\nextract-text-webpack-plugin     vue-core-image-upload\n. Thank you for your suggest,But I have  a new problem.\nThe browser console  have this error:\nhome.js:4940 GET http://localhost:8080/sockjs-node/info?t=1478226568062 net::ERR_CONNECTION_ABORTEDAbstractXHRObject._start @ home.js:4940(anonymous function) @ home.js:4829\nhome.js:1151 [WDS] Disconnected!\nwhy have this error?\n. I got it, use \"webpack-dev-server --host 0.0.0.0 --port 8080 --inline --hot --quiet\"  instead of  \"webpack-dev-server\".\nand  add two attribute :\n```\n watch: true,\nwatchOptions: {\n  poll: true\n},\n```\nso, it works...\nThank you again for guidance.\n. ",
    "MichalPodeszwa": "I don't have webpack built files. I'm using legacy by watchOptions.poll in\nwebpack.config.js\npt., 28.10.2016, 13:56 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\n\nNote that this does work, but is a configuration issue.\nlegacy polling\nHow do you use this exactly? With --watch-poll or ...?\nAlso, do you still have the built files that you got when running webpack?\nIf so, try to delete these files and see what happens then. It's possible\nit actually uses those files.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256902435,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMjb2uAdSqrRu3S71-q4eXqbZhX2Oks5q4eMEgaJpZM4KjU1d\n.\n. I tried updating webpack to 1.13.3 and webpack-dev-server to 1.16.2. No change there.\n\nI can still see in the terminal that the change has been picked up, App recompiled. In chrome dev tools I see:\n[HMR] Waiting for update signal from WDS...\n[WDS] Hot Module Replacement enabled.\n[WDS] App updated. Recompiling...\n[WDS] App hot update...\nAnd nothing else comes up.\nMy webpack.config.js:\n``` javascript\n// https://github.com/jtangelder/sass-loader/issues/208#issuecomment-210576342\nrequire.extensions['.scss'] = () => { return; };\nrequire.extensions['.css'] = () => { return; };\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar JasminePlugin = require('jasmine-webpack-plugin');\nvar CopyPlugin = require('copy-webpack-plugin');\nvar webpack = require('webpack');\nvar path = require('path');\nfunction buildPlugins () {\n    let plugins = [\n        new CopyPlugin([\n            {\n                from: '/node_modules/alloyeditor/dist/alloy-editor',\n                to: 'alloy-editor'\n            }\n        ]),\n        new webpack.DefinePlugin({\n            'process.env': {\n                'NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n            }\n        }),\n    ];\nif (isProduction()) {\n    plugins = plugins.concat([\n        new ExtractTextPlugin(\"css/style.css\")\n    ]);\n} else {\n    plugins = plugins.concat([\n        new JasminePlugin(),\n        new CopyPlugin([\n            {\n                from: '/node_modules/jasmine-core',\n                to: 'node_modules/jasmine-core'\n            }\n        ])\n    ]);\n}\nreturn plugins;\n\n}\nfunction buildLoaders () {\n    let loaders = [{\n            test: /.(?:html)$/,\n            loader: 'file?name=[name].[ext]',\n            query: {\n                name: '[name].[ext]'\n            }\n        }, {\n            test: /.(?:eot|woff|woff2|otf|ttf|svg|gif|jpg|png)$/,\n            include: /node_modules/,\n            loader: \"url-loader?limit=1000000\"\n        }\n    ];\nconst cssLoaderQuery = \"camelCase&localIdentName=[local]--[hash:base64:5]\"\n\nif (isProduction()) {\n    loaders = loaders.concat([{\n            test: /\\.jsx?$/,\n            exclude: /node_modules/,\n            loaders: ['babel?presets[]=react&presets[]=es2015&presets[]=stage-0']\n        }, {\n            test: /\\.css$/,\n            loader: ExtractTextPlugin.extract('style', 'css')\n        }, {\n            test: /\\.scss$/,\n            exclude: /node_modules/,\n            loader: ExtractTextPlugin.extract('style', `css?${cssLoaderQuery}!autoprefixer!sass`)\n        }\n    ])\n} else {\n    loaders = loaders.concat([{\n            test: /\\.jsx?$/,\n            exclude: /node_modules/,\n            loaders: ['babel?presets[]=react&presets[]=es2015&presets[]=stage-0&presets[]=react-hmre']\n        }, {\n            test: /\\.css$/,\n            loaders: ['style', 'css']\n        }, {\n            test: /\\.scss$/,\n            exclude: /node_modules/,\n            loaders: ['style', `css?${cssLoaderQuery}`, 'autoprefixer', 'sass']\n        }\n    ])\n}\n\nreturn loaders;\n\n}\nfunction isProduction () {\n    return process.env.NODE_ENV == \"production\";\n}\nmodule.exports = {\n    context: __dirname + '/app',\n    entry: {\n        spec: '../spec.webpack.js',\n        app: './js/app',\n        html: './index.html'\n    },\n    module: {\n        loaders: buildLoaders(),\n    },\n    output: {\n        path: __dirname + '/dist',\n        filename: 'js/[name].js'\n    },\n    plugins: buildPlugins(),\n    externals: {\n        'cheerio': 'window',\n        'react/addons': true,\n        'react/lib/ExecutionEnvironment': true,\n        'react/lib/ReactContext': true\n    },\n    devServer: {\n        stats: {\n            chunks: false\n        }\n    },\n    watchOptions: {\n        poll: 1000\n    }\n};\n```\n. Would that explain why the exact same setup works on both Linux and OS X?\nSorry on missing this detail, but it doesn't work after reloading either.\n(or even opening in different browsers)\npt., 28.10.2016, 20:23 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\n\nAh, you're using hot reload, that was a detail I was missing.\nAccording to the documentation\nhttps://webpack.github.io/docs/webpack-dev-server.html, you need to do\nthis:\nTo teach webpack to make requests (for chunk loading or HMR) to the\nwebpack-dev-server you need to provide a full URL in the output.publicPath\noption.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256992610,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMihGisafBzFiXUXTiggooZMwiiN3ks5q4j2HgaJpZM4KjU1d\n.\n. Yes, that's correct.\nWe've been successfully using this setup for several months now. I'm trying\nto get it working on Windows, but I stumbled upon this rather weird bug.\n\npt., 28.10.2016, 20:32 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\n\nI'm just debugging here, since I don't have a Windows VM with Docker on it\nand don't have time to set that up at the moment.\nSo does it work in Linux and OSX with Docker? Because if so, that would\ndefinitely be a weird bug.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256994853,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMqd-gUf5fvAZS5tCtONidhZVuoVoks5q4j-4gaJpZM4KjU1d\n.\n. In the mean time, I also tried running webpack with --watch. It didn't work\neither, which makes me wonder if it's not webpack problem, instead of dev\nserver's\n\npt., 28.10.2016, 20:34 u\u017cytkownik Micha\u0142 Podeszwa michal.podeszwa@gmail.com\nnapisa\u0142:\n\nYes, that's correct.\nWe've been successfully using this setup for several months now. I'm\ntrying to get it working on Windows, but I stumbled upon this rather weird\nbug.\npt., 28.10.2016, 20:32 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\nI'm just debugging here, since I don't have a Windows VM with Docker on it\nand don't have time to set that up at the moment.\nSo does it work in Linux and OSX with Docker? Because if so, that would\ndefinitely be a weird bug.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256994853,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMqd-gUf5fvAZS5tCtONidhZVuoVoks5q4j-4gaJpZM4KjU1d\n.\n. In the mean time, I also tried running webpack with --watch. It didn't work\neither, which makes me wonder if it's not webpack problem, instead of dev\nserver's\n\npt., 28.10.2016, 20:34 u\u017cytkownik Micha\u0142 Podeszwa michal.podeszwa@gmail.com\nnapisa\u0142:\n\nYes, that's correct.\nWe've been successfully using this setup for several months now. I'm\ntrying to get it working on Windows, but I stumbled upon this rather weird\nbug.\npt., 28.10.2016, 20:32 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\nI'm just debugging here, since I don't have a Windows VM with Docker on it\nand don't have time to set that up at the moment.\nSo does it work in Linux and OSX with Docker? Because if so, that would\ndefinitely be a weird bug.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256994853,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMqd-gUf5fvAZS5tCtONidhZVuoVoks5q4j-4gaJpZM4KjU1d\n.\n. Ok. Thank you for your help.\nI think we can close this issue then\n\npt., 28.10.2016, 20:44 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\n\nOkay, if it's not working with webpack --watch it's definitely not a\nwebpack-dev-server problem. In #143\nhttps://github.com/webpack/webpack-dev-server/issues/143 there are a\nlot of solutions to some Docker problems, maybe try that out.\nI would suggest to try to migrate to webpack v2, even if it's still in\nbeta. It's pretty stable. This upgrade guide\nhttps://webpack.js.org/how-to/upgrade-from-webpack-1/ is pretty good.\nIf it still happens then, you could make an issue in the webpack main repo.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256997810,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMjdr3O6LRzYHc5JilKT9SQp0wA-rks5q4kKNgaJpZM4KjU1d\n.\n. Ok. Thank you for your help.\nI think we can close this issue then\n\npt., 28.10.2016, 20:44 u\u017cytkownik Kees Kluskens notifications@github.com\nnapisa\u0142:\n\nOkay, if it's not working with webpack --watch it's definitely not a\nwebpack-dev-server problem. In #143\nhttps://github.com/webpack/webpack-dev-server/issues/143 there are a\nlot of solutions to some Docker problems, maybe try that out.\nI would suggest to try to migrate to webpack v2, even if it's still in\nbeta. It's pretty stable. This upgrade guide\nhttps://webpack.js.org/how-to/upgrade-from-webpack-1/ is pretty good.\nIf it still happens then, you could make an issue in the webpack main repo.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/678#issuecomment-256997810,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGrJMjdr3O6LRzYHc5JilKT9SQp0wA-rks5q4kKNgaJpZM4KjU1d\n.\n. Just to let you know. Turns out, everything works now. I must've had the built project somehow there.\n. Just to let you know. Turns out, everything works now. I must've had the built project somehow there.\n. \n",
    "vladshcherbin": "Oh, that's sad.\nThank you.\n. Oh, that's sad.\nThank you.\n. ",
    "uMaxmaxmaximus": "This function is not called every time an error occurs. and it is called only when the server can not start.\nWe need it to be called every time the assembly failed!\nImmediately reopen the ticket!\n. do not worry, I created a new issue https://github.com/webpack/webpack-dev-server/issues/688\n. bug report https://github.com/webpack/webpack-dev-server/issues/689\n. > Note that if you make an issue again like this, I'll report this as Spam/Abuse.\nin this case, it really would be spam. but previous times you yourself blunted and closed the ticket and did not understand the question. you could be banned I would have banned you for it, because you disgrace to the community.\n. his tel me this function call in EVERY BUILD ERRORS https://github.com/webpack/webpack-dev-server/issues/687\nhe is liar?\n. MAYBE HE IS NOT THE RIGHTS AND THIS FUNCTION SHOULD NOT called each time the faulty build???\nI'm from Russia, I'm sorry that I speak like a robot. But tell me, how do you then call the function whenever the compile error?)\n. please tell me. i need create error notifer cuz notifer plugins not working for me...\n. ",
    "Rutger": "NICE BUG TNX 4 SHARING !!!!!!!!\n. he is liar!!!!\n. ",
    "foxbunny": "OMG, I feel so stupid. I was using --conf instead of --config as the command line argument. (facepalm)\n. Incidentally, there does not seem to be a check for the case where the wpOpt.entry key is undefined. Is that going to be in for 2.0 or shall I report a feature request? Or is that simply not considered important?\nI'm referring to this part of the code:\n[].concat(wpOpt).forEach(function(wpOpt) {\n        if(typeof wpOpt.entry === \"object\" && !Array.isArray(wpOpt.entry)) {\n            Object.keys(wpOpt.entry).forEach(function(key) {\n                wpOpt.entry[key] = devClient.concat(wpOpt.entry[key]);\n            });\n        } else {\n            wpOpt.entry = devClient.concat(wpOpt.entry);\n        }\n    });\n. ",
    "richtera": ":+1: Works. Now I can use portscanner to search for the first free port :)\n. :+1: Works. Now I can use portscanner to search for the first free port :)\n. Checked 2.7.1 works :). This is to patch the latest official npm registry entry for 2.8.1 which is why it's not on the master branch. I have not tested master, but that part of the code is quite different and probably working there.. ",
    "jeusdi": "I've just installed webpack@2.1.0-beta.27 and webpack-dev-server@2.1.0-beta.11.\nNevertheless, it's telling me that:\nInvalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.\n - configuration has an unknown property 'tslint'. These properties are valid:\n   object { amd?, bail?, cache?, context?, dependencies?, devServer?, devtool?, entry, externals?, loader?, module?, name?, node?, output?, plugins?, profile?, recordsInputPath?, recordsOutputPath?, recordsPath?, resolve?, resolveLoader?, stats?, target?, watch?, watchOp\ntions? }\n   For typos: please correct them.\n   For loader options: webpack 2 no longer allows custom properties in configuration.\n     Loaders should be updated to allow passing options via loader options in module.rules.\n     Until loaders are updated one can use the LoaderOptionsPlugin to pass these options to the loader:\n     plugins: [\n       new webpack.LoaderOptionsPlugin({\n         // test: /\\.xxx$/, // may apply this only for some modules\n         options: {\n           tslint: ...\n         }\n       })\n     ]\n - configuration.module has an unknown property 'postLoaders'. These properties are valid:\n   object { exprContextCritical?, exprContextRecursive?, exprContextRegExp?, exprContextRequest?, loaders?, noParse?, rules?, unknownContextCritical?, unknownContextRecursive?, unknownContextRegExp?, unknownContextRequest?, wrappedContextCritical?, wrappedContextRecursiv\ne?, wrappedContextRegExp? }\n   Options affecting the normal modules (`NormalModuleFactory`).\n - configuration.node.global should be a boolean.\n - configuration.resolve.extensions[0] should not be empty.\n. Yes, it's solved.. Yes, it's solved.. Now it's telling me:\n```\nwebpack-dev-server --config config/webpack.dev.js --progress --profile --content-base src/                                                       10% building modules 3/3 modules 0 active\nProject is running at http://localhost:3000/\nwebpack output is served from /\nContent not from webpack is served from D:\\projects\\living\\user-platform\\project\\src\n404s will fallback to /index.html                                                                                                     9304ms building modules                                                                           4ms add1m150ms 226ms asset82ms emitting\n[default] Checking started in a separate process...\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: This socket is closed\n    at WriteStream.Socket._writeGeneric (net.js:683:19)\n    at WriteStream.Socket._write (net.js:734:8)\n    at doWrite (_stream_writable.js:334:12)\n    at writeOrBuffer (_stream_writable.js:320:5)\n    at WriteStream.Writable.write (_stream_writable.js:247:11)\n    at WriteStream.Socket.write (net.js:661:40)\n    at Console.warn (console.js:51:16)\n    at printErrorAndExit (D:\\projects\\living\\user-platform\\project\\node_modules\\source-map-support\\source-map-support.js:406:11)\n    at process.emit (D:\\projects\\living\\user-platform\\project\\node_modules\\source-map-support\\source-map-support.js:419:16)\n    at process._fatalException (bootstrap_node.js:292:26)\n```\n. Thanks @SpaceK33z . I'm not able to find out what I need to comment.\nWhich line do I need to comment?\nI've tried to comment devtool: 'cheap-module-source-map' on my webpack.dev.js. However, the message is the same.. Mmm, I've asked it on this question on stackoverflow. What do you think about that?. Mmm, I've asked it on this question on stackoverflow. What do you think about that?. Posted on:\nhttp://stackoverflow.com/questions/41218553/webpack-module-not-found-error-cant-resolve-folder-src. ",
    "StefanRiedmann": "Ok understandable. But I don't know how to dig deeper into this... Do you think it can be particular behaviour on Windows Server 2008? My collegues work with Windows 10. But.... it worked fine for me until a week ago. I could not reproduce any steps I took when this error appeared. \nOne question: Where are the generated files (js) supposed to be when the server is running? Or are they being held in memory? . That solved it! Thanks so much, I should have contacted you guys much earlier :-) . ",
    "asterikx": "CLI. Sorry, I should have mentioned.. With webpack-dev-server/client?http://192.168.6.128:9081 (the IP is right as I can reach nginx on that IP) I get the following messages:\n[HMR] Waiting for update signal from WDS...\nGET http://192.168.6.128:9081/sockjs-node/info?t=1479817889657 net::ERR_CONNECTION_REFUSED\n[WDS] Disconnected!\nGET http://localhost:8080/sockjs-node/info?t=1479817889655 net::ERR_CONNECTION_REFUSED\nGET http://192.168.6.128:9081/sockjs-node/info?t=1479817891765 net::ERR_CONNECTION_REFUSED\nGET http://localhost:8080/sockjs-node/info?t=1479817893682 net::ERR_CONNECTION_REFUSED\nGET http://192.168.6.128:9081/sockjs-node/info?t=1479817896821 net::ERR_CONNECTION_REFUSED\n...\nThis time [WDS] Hot Module Replacement enabled is missing from the output. This solved my issue! Thanks a lot. Really appreciate your quick replies. ",
    "huyngkh": "Answer from @SpaceK33z solved my issue as well! it helps me save a lot of time. Thank you!. ",
    "vasudev-hv": "Had the same issue. I had created the react app using create-react-app. Fixed the issue by running \"npm run eject\", and in webpack.config.dev.js, uncomment the following code\nrequire.resolve('webpack-dev-server/client') + '/',\nand replace it with\nrequire.resolve('webpack-dev-server/client') + '?http://localhost:3000',\nand comment out\nrequire.resolve('react-dev-utils/webpackHotDevClient'),. ",
    "mischkl": "@SpaceK33z there are no special characters as in webpack/webpack#2258 and the output doesn't look like in webpack/webpack#2320. I guess it could be webpack/watchpack#25, although the files in question were not newly created.... ",
    "juanmagomezmayoral": "Thank you SpaceK33z for your answer. Running it directly is not a problem:\nPS D:\\GitHub\\frontagregador> node_modules/.bin/webpack-dev-server\n http://localhost:8080/webpack-dev-server/\nwebpack result is served from /\ncontent is served from D:\\GitHub\\frontagregador\n404s will fallback to /index.html\nand my versions are (as I've posted already) \nPS D:\\GitHub\\frontagregador> npm -v\n3.10.9\nand \nPS D:\\GitHub\\frontagregador> node -v\nv7.1.0. Thank you SpaceK33z for your answer. Running it directly is not a problem:\nPS D:\\GitHub\\frontagregador> node_modules/.bin/webpack-dev-server\n http://localhost:8080/webpack-dev-server/\nwebpack result is served from /\ncontent is served from D:\\GitHub\\frontagregador\n404s will fallback to /index.html\nand my versions are (as I've posted already) \nPS D:\\GitHub\\frontagregador> npm -v\n3.10.9\nand \nPS D:\\GitHub\\frontagregador> node -v\nv7.1.0. The contents of the file are:\n0 info it worked if it ends with ok\n1 verbose cli [ 'D:\\nodejs\\node.exe',\n1 verbose cli   'D:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'dev' ]\n2 info using npm@3.10.9\n3 info using node@v7.1.0\n4 verbose run-script [ 'predev', 'dev', 'postdev' ]\n5 info lifecycle test-front-end-agregador@1.0.0~predev: test-front-end-agregador@1.0.0\n6 silly lifecycle test-front-end-agregador@1.0.0~predev: no script for predev, continuing\n7 info lifecycle test-front-end-agregador@1.0.0~dev: test-front-end-agregador@1.0.0\n8 verbose lifecycle test-front-end-agregador@1.0.0~dev: unsafe-perm in lifecycle true\n9 verbose lifecycle test-front-end-agregador@1.0.0~dev: PATH: D:\\GitHub\\frontagregador\\node_modules.bin;D:\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin;D:\\nodejs\\;C:\\Users\\juanm\\AppData\\Roaming\\npm (AND other not related paths)\n10 verbose lifecycle test-front-end-agregador@1.0.0~dev: CWD: D:\\GitHub\\frontagregador\n11 silly lifecycle test-front-end-agregador@1.0.0~dev: Args: [ '/d /s /c',\n11 silly lifecycle   'webpack-dev-server --content-base src --inline --hot' ]\n12 silly lifecycle test-front-end-agregador@1.0.0~dev: Returned: code: 3221226505  signal: null\n13 info lifecycle test-front-end-agregador@1.0.0~dev: Failed to exec dev script\n14 verbose stack Error: test-front-end-agregador@1.0.0 dev: webpack-dev-server --content-base src --inline --hot\n14 verbose stack Exit status 3221226505\n14 verbose stack     at EventEmitter. (D:\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:255:16)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at EventEmitter.emit (events.js:191:7)\n14 verbose stack     at ChildProcess. (D:\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:40:14)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at ChildProcess.emit (events.js:191:7)\n14 verbose stack     at maybeClose (internal/child_process.js:885:16)\n14 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n15 verbose pkgid test-front-end-agregador@1.0.0\n16 verbose cwd D:\\GitHub\\frontagregador\n17 error Windows_NT 10.0.14393\n18 error argv \"D:\\nodejs\\node.exe\" \"D:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"dev\"\n19 error node v7.1.0\n20 error npm  v3.10.9\n21 error code ELIFECYCLE\n22 error test-front-end-agregador@1.0.0 dev: webpack-dev-server --content-base src --inline --hot\n22 error Exit status 3221226505\n23 error Failed at the test-front-end-agregador@1.0.0 dev script 'webpack-dev-server --content-base src --inline --hot'.\n23 error Make sure you have the latest version of node.js and npm installed.\n23 error If you do, this is most likely a problem with the test-front-end-agregador package,\n23 error not with npm itself.\n23 error Tell the author that this fails on your system:\n23 error     webpack-dev-server --content-base src --inline --hot\n23 error You can get information on how to open an issue for this project with:\n23 error     npm bugs test-front-end-agregador\n23 error Or if that isn't available, you can get their info via:\n23 error     npm owner ls test-front-end-agregador\n23 error There is likely additional logging output above.\n24 verbose exit [ 1, true ]. The contents of the file are:\n0 info it worked if it ends with ok\n1 verbose cli [ 'D:\\nodejs\\node.exe',\n1 verbose cli   'D:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli   'run',\n1 verbose cli   'dev' ]\n2 info using npm@3.10.9\n3 info using node@v7.1.0\n4 verbose run-script [ 'predev', 'dev', 'postdev' ]\n5 info lifecycle test-front-end-agregador@1.0.0~predev: test-front-end-agregador@1.0.0\n6 silly lifecycle test-front-end-agregador@1.0.0~predev: no script for predev, continuing\n7 info lifecycle test-front-end-agregador@1.0.0~dev: test-front-end-agregador@1.0.0\n8 verbose lifecycle test-front-end-agregador@1.0.0~dev: unsafe-perm in lifecycle true\n9 verbose lifecycle test-front-end-agregador@1.0.0~dev: PATH: D:\\GitHub\\frontagregador\\node_modules.bin;D:\\nodejs\\node_modules\\npm\\bin\\node-gyp-bin;D:\\nodejs\\;C:\\Users\\juanm\\AppData\\Roaming\\npm (AND other not related paths)\n10 verbose lifecycle test-front-end-agregador@1.0.0~dev: CWD: D:\\GitHub\\frontagregador\n11 silly lifecycle test-front-end-agregador@1.0.0~dev: Args: [ '/d /s /c',\n11 silly lifecycle   'webpack-dev-server --content-base src --inline --hot' ]\n12 silly lifecycle test-front-end-agregador@1.0.0~dev: Returned: code: 3221226505  signal: null\n13 info lifecycle test-front-end-agregador@1.0.0~dev: Failed to exec dev script\n14 verbose stack Error: test-front-end-agregador@1.0.0 dev: webpack-dev-server --content-base src --inline --hot\n14 verbose stack Exit status 3221226505\n14 verbose stack     at EventEmitter. (D:\\nodejs\\node_modules\\npm\\lib\\utils\\lifecycle.js:255:16)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at EventEmitter.emit (events.js:191:7)\n14 verbose stack     at ChildProcess. (D:\\nodejs\\node_modules\\npm\\lib\\utils\\spawn.js:40:14)\n14 verbose stack     at emitTwo (events.js:106:13)\n14 verbose stack     at ChildProcess.emit (events.js:191:7)\n14 verbose stack     at maybeClose (internal/child_process.js:885:16)\n14 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n15 verbose pkgid test-front-end-agregador@1.0.0\n16 verbose cwd D:\\GitHub\\frontagregador\n17 error Windows_NT 10.0.14393\n18 error argv \"D:\\nodejs\\node.exe\" \"D:\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"run\" \"dev\"\n19 error node v7.1.0\n20 error npm  v3.10.9\n21 error code ELIFECYCLE\n22 error test-front-end-agregador@1.0.0 dev: webpack-dev-server --content-base src --inline --hot\n22 error Exit status 3221226505\n23 error Failed at the test-front-end-agregador@1.0.0 dev script 'webpack-dev-server --content-base src --inline --hot'.\n23 error Make sure you have the latest version of node.js and npm installed.\n23 error If you do, this is most likely a problem with the test-front-end-agregador package,\n23 error not with npm itself.\n23 error Tell the author that this fails on your system:\n23 error     webpack-dev-server --content-base src --inline --hot\n23 error You can get information on how to open an issue for this project with:\n23 error     npm bugs test-front-end-agregador\n23 error Or if that isn't available, you can get their info via:\n23 error     npm owner ls test-front-end-agregador\n23 error There is likely additional logging output above.\n24 verbose exit [ 1, true ]. ok, sorry, didn't undertand you.  I've run it on v6 node and it works (lots of non-related errors like \nERROR in ./src/layouts/footer/styles.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./../../../node_modules/css-loader/index.js in D:\\GitHub\\frontagregador/src\\layouts\\footer\n @ ./src/layouts/footer/styles.scss 4:14-199 but the webserver is up)\nIt seems to be an issue related to node v7 then...\nthanks\nJ\n. ok, sorry, didn't undertand you.  I've run it on v6 node and it works (lots of non-related errors like \nERROR in ./src/layouts/footer/styles.scss\nModule not found: Error: Cannot resolve 'file' or 'directory' ./../../../node_modules/css-loader/index.js in D:\\GitHub\\frontagregador/src\\layouts\\footer\n @ ./src/layouts/footer/styles.scss 4:14-199 but the webserver is up)\nIt seems to be an issue related to node v7 then...\nthanks\nJ\n. ",
    "rhday74": "I just tried it in Firefox and Safari and saw the same behavior.  I think i see what it is though.  I've got linting warnings apparently on recompile and that's preventing the reload.  Is there a setting that would let the reload happen inspite of those warnings??  . I just tried it in Firefox and Safari and saw the same behavior.  I think i see what it is though.  I've got linting warnings apparently on recompile and that's preventing the reload.  Is there a setting that would let the reload happen inspite of those warnings??  . ",
    "Orbyt": "Let me know what info you need. As stated, I haven't performed any config changes.\nWebpack is v1.13.3 installed locally, webpack-dev-server is installed as a dev dependency. \nMy npm watch script:\n\"watch\": \"webpack-dev-server --hot --inline\",\nThis is an Electron application.\nPlease advise how to further debug. The only added packages i've recently added have been axios and got. I doubt they would cause a conflict, but I will remove them and test again.. I've tried removing the above packages, though the issue persists. For thoroughness, i've also tried deleting the node_modules directory and reinstalling dependencies. That also did not fix the issue.\nAs mentioned, it still reloads CSS, but seems to be ignoring changes in my react code.. React version is 15.4.1. Not using react-hot-loader. . @SpaceK33z My npm watch script is simply: \"watch\": \"webpack-dev-server --hot --inline\",. Considering you're comments, It sounds like I shouldn't of had hot reloading without react-hot-loader, so I am not sure how it was working.. I wonder if perhaps something built into electron was aiding it. Tutorial like these don't mention react-hot-loader either. Odd.\nRegardless, I'll go ahead and close this, as it must not be an issue with webpack-dev-server.. @SpaceK33z Noticed something interesting. While my React views will not hot reload, other .jsx files will hot reload (eg, router.jsx). Again, react-hot-loader is not implemented. Why would that file hot reload while the .jsx files for my view components are not?. ",
    "vcavallo": "@resure \nIt sounds like you and I have similar setups, except I can't get it to work. After trying nearly everything and purpling all my google searches I keep getting this in the Chrome network inspector:\nclient:176 [WDS] Disconnected!\nclient:176 [WDS] Disconnected!\nsockjs.js:1601 GET http://[DEV URL OMITTED]:3035/sockjs-node/info?t=1528813420684 0 () \n([DEV URL OMITTED] is my note here. that's not in the logs :) ) The GET to sockjs-node sits in pending for a while and then switches to cancelled. this keeps looping forever.\nI'm using a VPS for my dev environment. Running webpack dev server and nginx.\n\nnginx is being configured to pass all /webpack/ and /sockjs-node/ to webpack-dev-server\n\nCan you explain how you set this up? I'm using this:\nlocation /sockjs-node {\n  proxy_pass http://127.0.0.1:3035;\n  proxy_http_version 1.1;\n  proxy_set_header    Upgrade $http_upgrade;\n  proxy_set_header    Connection \"upgrade\";\n  proxy_set_header    Host $http_host;\n  proxy_set_header    X-Real-IP $remote_addr;\n  proxy_redirect off;\n}\n\nwebpack-devserver itself is starting with --public=0.0.0.0 option, so hmr client fallbacks to self.location.hostname which is correct value for this usecase\n\nHow do you set this? If I set anything other than [DEV URL]:3035 for my webpack dev server public config I get 404s:\nsockjs.js:1601 GET http://[DEV URL]/sockjs-node/info?t=1528814691962 404 (Not Found)\nAny help would be greatly appreciated!. ",
    "ratson": "I am not certain what cause the error, I suspect it is because I serve the script in service worker.\nFYI, my webpack config have multiple entries and use react-hot-loader v3.. ",
    "jamesmosier": "Also seeing this on Chrome v54.0.2840.98 on Mac OS X 10.11.6. I do not have any hot reloading though. I am only reloading whenever there is a change.\nUsing webpack-dev-server@^2.2.0-rc.0 and webpack@^2.2.0-rc.1. @SpaceK33z I do not have any service workers with my application. Pretty straightforward application, using Angular & Redux.. Also, after adding this code in this PR in manually to my webpack-dev-server node_module, I see this:\n\n\n. @SpaceK33z yep, that fixed it. I reverted the code in this PR and just changed all self's to window. It reloads as expected with no errors. Thanks for the tip. I can PR this if you'd like, but it might require some more refactoring than just changing self -> window. @SpaceK33z of course now it is working on my machine (as well as a coworkers). We were both seeing it previously for the past week or so. If I see this issue again, I'll be sure to test this scenario. Thanks for taking the time to investigate!. @bebraw hasn't been an issue since my last comment. So all good from my perspective. . ",
    "CrashyBang": "Hey @SpaceK33z I put it here as an intended reference for other users using v2.2.0-rc.0 who come across the problem, and I have tried to provide a in the meantime fix. I do not expect you to do anything with it, just thought you may be interested in knowing...?. Hey @SpaceK33z I have that already (which you can see in SO issue), from what I can tell from the linked debug issue it has nothing to do with my babel config, it is also worth noting it works flawlessly when doing a build without the webpack-dev-server so I do not think doing the above will help.. I will double check tonight when I get home but all of my other excludes have been handled like that and appear to be working, will let you know.. Hey @SpaceK33z only just got back to this today, looks like you were spot on about the /node_modules/ I have updated and everything appears to be working.\nCheers.. ",
    "tremby": "I just tried that: I added the following to my config object:\njs\nwatchOptions: {\n  ignored: /\\.sw[pon]$/,\n},\nand after restarting the server changes to the swap files still trigger rebuilds.\nI tried also with a string with wildcards, rather than a regex.. The codebase doesn't use require.context() to my knowledge. I'll double check when I'm in the office again. I'll do as you suggest too and report back.. I grepped the entire working directory for require.context and the only hits were in node_modules/webpack/lib/dependencies.\nBut for the life of me I can no longer reproduce this. I have no idea what if anything has changed, other than I know the host machine (and VM obviously) have been rebooted. I'll reopen if I ever see this again.\nSorry for the noise... :(. I grepped the entire working directory for require.context and the only hits were in node_modules/webpack/lib/dependencies.\nBut for the life of me I can no longer reproduce this. I have no idea what if anything has changed, other than I know the host machine (and VM obviously) have been rebooted. I'll reopen if I ever see this again.\nSorry for the noise... :(. Oh, I found it again. What I hadn't realized was that it's only changes to arbitrary files in a particular directory which are being picked up.\nThe React module in this particular directory has this line:\njs\nvar svg = require(`./${this.props.icon}.svg`);\nIf I comment this line out, webpack-dev-server stops recompiling when swap files change. If I uncomment it again, it starts recompiling when swap files change again.\nAny idea why?. Oh, I found it again. What I hadn't realized was that it's only changes to arbitrary files in a particular directory which are being picked up.\nThe React module in this particular directory has this line:\njs\nvar svg = require(`./${this.props.icon}.svg`);\nIf I comment this line out, webpack-dev-server stops recompiling when swap files change. If I uncomment it again, it starts recompiling when swap files change again.\nAny idea why?. It's not? webpack-dev-server (or one of its dependencies -- which?) is watching files and deciding to recompile.. It's not? webpack-dev-server (or one of its dependencies -- which?) is watching files and deciding to recompile.. Including the watching of files? Sorry if I'm in totally the wrong place here.. Including the watching of files? Sorry if I'm in totally the wrong place here.. I'm aware of the workaround, but I'd rather not have to use it.\nI posted before about the one line I can change which alters the behaviour\nfor me. Could that be explained by what you just suggested?\n. That could definitely be right. I wonder if I can rewrite that somehow to\nget around it...\n. ",
    "bjakubiak": "There is workaround by configuring vim itself: http://stackoverflow.com/questions/40624078/disable-webpacks-file-watching-for-vim-swp-files\nMaybe webpack-dev-server just reads what libraries search for. For me all lines importing anything from angular2 cause reacting for vim swap files behaviour (from typescript *.ts files):\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';. Just guessing, but maybe webpack cannot resolve the module name before compiling and searches for every file? And something similar may exist inside angular2 libraries.. ",
    "megaboich": "Ok, I found what caused the issue. It was webpack configuration.\nIt was:\nresolve: {\n        extensions: ['.ts'],\n    },\nMissing .js is critical\nSo, correct one is:\nresolve: {\n        extensions: ['.ts', '.js'],\n    },. ",
    "johanroug": "Thanks megaboich. Exactly what I needed. ",
    "asinoai": "I had the same issue and I managed to resolve it, by reading the installation steps until the end :) and installing globally the mentioned packages from the terminal. Also a npm run clean was needed followed by npm install and then finally the npm start. . ",
    "ericwgreene": "Another potential cause of this problem is when the modules option does not contain the project's 'node_modules' folder.\nresolve: {\n  extensions: [ '.js', '.json' ],\n  modules: [ jsFolderPath, path.join(__dirname, 'node_modules') ],\n}\nif this piece of code \"path.join(__dirname, 'node_modules')\" is missing from the \"modules\" array or the path is incorrect you will get the same error.\nPlease do not install the above mentioned packages (the ones listed in the terminal output) globally. Installing packages globally is almost never the solution to any problem. Global packages should almost always be avoided. The only global packages which are appropriate are packages used to initially create a project/package (ex: Yeoman, NPM, Bower), otherwise the package should be installed within the project/package, and referenced locally from \"./node_modules/.bin\". This is always better as you ensure other developers will not have conflicts between versions of global packages. Also, when the package's dependencies are installed with 'npm i', there is no need to do additional installation steps with global packages. Finally, many new Node.js developers on Mac/Linux run into issues with file system permissions and global packages. We do not want them using sudo to run code downloaded from the Internet.. ",
    "prashntsingh": "ERROR in multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./index.js\nModule not found: Error: Can't resolve './index.js' in 'C:\\ReactJs'\n @ multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./index.js\nwebpack: Failed to compile.\nhelp me. ERROR in multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./index.js\nModule not found: Error: Can't resolve './index.js' in 'C:\\ReactJs'\n @ multi (webpack)-dev-server/client?http://localhost:8080 webpack/hot/dev-server ./index.js\nwebpack: Failed to compile.\nhelp me. ",
    "oliverbenns": "Kinda sucks you have to resolve js extensions when your app contains no Javascript \ud83e\udd37\u200d\u2642\ufe0f. ",
    "athergeek": "I had the same issue, just a little typo was giving me headaches. I wrote 'js' instead of '.js'\nWrong\n   resolve: {\n        extensions: ['.ts', 'js']   // Missing dot\n    },\nCorrect\n   resolve: {\n        extensions: ['.ts', '.js']\n    },. ",
    "aamirkhan-91": "I am creating a typescript-webpack-react setup. Can someone explain to me why I need to manually resolve .js files as well when I am only using .tsx files? I managed to pinpoint the issue myself but it's really nagging me why I have to add a resolve for .js files as well even though I am not using them in my app.. ",
    "DrMeers": "I got the same issue when using a symlink for node_modules. When I replaced this with a local directory, the errors resolved.. ",
    "hof": "@aamirkhan-91 webpack-dev-server injects some stuff into your site to implement the auto-reloading. This  is in .js files.. ",
    "bdwain": "sorry forgot about this. i couldn't figure it out, and i ended up creating the dev server in a fork of the original process and things worked fine.. hi @SpaceK33z . sorry to bring up an old issue again. I'm having this issue again (now with webpack 3 and the latest dev server version too). \nI do notice one thing I didn't mention the last time, which is that when i try to restart the server, the entry points from the first configuration still work. But the new ones don't. I see in the console that my new entry points were compiled by webpack, but it's like the server is not recognizing the new content. \nwhat i'm trying to do is build up my list of entry points at runtime, so each time a new one is added, i want to close the old dev server instance and start a new one. I'm making a tool to run unit tests for individual files and it's too slow to build all of them up front, so I need to do it as you choose individual files.. actually this is really weird. while my requests fail after restarting the server, they work if i open an incognito window. but subsequent config changes don't work until i close and reopen the incognito window. curl is always able to request successfully.\nis the dev server doing something weird with cookies or a cache or something?. also this happens in both chrome and safari, so it's not specific to a browser.. sorry for the multiple comments. I'd be happy to make a PR, but i'm not sure what is causing the issue. I don't know enough about webpack dev server's internals to know what would cause that. . i've looked through the code. Nothing stood out to me. I don't even know what could cause this behavior. I tried clearing cookies and cache data in the browser but nothing seemed to fix it. it might not even we webpack-dev-server related. i guess it could be express.. i think that just affects the code that webpack injects into the page to talk to the dev server. I was looking for a way to open somealias.come in the browser when the page opens, but i'd still like to have the host be 0.0.0.0 so other computers on my network can access my dev server.. sure i can do that. had an issue with the CLA so i closed this and opened a new one. i know that version 1 is not under active development, but since v2 is not technically stable yet and a bunch of people asked for this feature and it's small and already done, would you reconsider putting it in v1? It's not always easy to upgrade to v2 right away and this would make v1 better.. @SpaceK33z any chance you could reconsider based on what I said above?. @SpaceK33z Is there anything else you wanted done for this?. cool!. cool!. hi @sokra . Thanks for fixing the security issue. It seems like the disable host check option is not available on CLI. Is it possible to get that added? I'm happy to make a PR if that's an ok change.\nalso, in general I think these changes could use more documentation. I'm pretty confused and not totally sure I need the disable option, but I haven't found a good alternative yet from the release notes or the issues that are filed because I need to hit my local dev server from a tablet. Also, I have custom hosts in my etc/hosts which my app uses to determine things. like foo-local.com vs bar-local.com, both of which are aliased to 127.0.0.1\nEither way, I think it'd be good to expose the disable option in the CLI for people who are using it. . @edmorley i also have another use case that seems to have been broken by this. Not sure if the current implementation has a solution for this.\nFor development, i have a few aliases to 127.0.0.1 in my etc/hosts file. like\n127.0.0.1   foo-local.com bar-local.com\nand my app uses the url format to determine certain things about how it behaves. I noticed i could no longer hit foo-local.com:PORT after this change though.. @sokra thanks that is good to know. Would I have to set the --host option also? Or would the default be ok? \nAlso, is it possible to have more than one host allowed currently? Or would that require something like ALLOWED_HOSTS that @edmorley mentioned?. i feel like every option should be available from node (except what is impossible, like maybe some console output options) and the CLI options should be a subset of that. @edmorley @sokra is there a recommended solution for hitting a local dev server from a tablet without having to enable this flag then? That's a pretty common workflow for me at work and it sounds like @nwoltman is in the same boat. . @d3viant0ne but the change is what exposes the option on the cli, right? so i'd have to change my build process to not use the cli in order to use that option? that's what i'm trying to avoid. . thanks @d3viant0ne !. any word on this?. @SpaceK33z is it possible to get a patch release with the latest master? I've seen a few other issues that would also be resolved just with the latest master being released. . It's been a week now and I know a lot of people are blocked by this. Releasing what's already in master seems like a simple request and it's a little frustrating that it's taking this long. \n@d3viant0ne was there any word when you asked the slack channel to do a release?. @d3viant0ne well thank you for putting in the effort. i do appreciate it.\nit seems like more people need write access since @SpaceK33z seems like a bottleneck for releases and when he's got other things going on nothing can get done. not sure where the best place to suggest that would be but it seems like the solution to the current problem. . thank you for doing the release @SpaceK33z. I was just suggesting that more members be given write/publish access since I know you're all busy and can't always respond ASAP, but trivial requests can often cause issues for many people at a time.\nI appreciate all of the hard work you and everyone else put into this project and I'm sorry if I made it sound like that wasn't the case.. @shellscape i have this issue without public path. \njs\n  let child = spawn('webpack-dev-server', ['--config', argv.config, '--progress', '--colors',\n   '--hot', '--inline', '--port', argv.port,'--history-api-fallback', '--content-base',\n   './devdist/', '--host', '0.0.0.0', '--disable-host-check'], {env});. hm that option doesn't seem to be available via the CLI, so i'm not sure i can test it.. sorry i wasnt really sure if it was a bug or a doc omission so i wasnt sure how i should fill out the template. ill use it next time.\ni can do a PR to update the docs. it's just https://github.com/webpack/webpack.js.org right?. made https://github.com/webpack/webpack.js.org/pull/1539 to address this. . made https://github.com/webpack/webpack.js.org/pull/1539 to address this. . sorry i didn't see those. would it not be possible to provide a transpiled version of the client as part of the library's build process (that could be used via an option on the dev server or something)? I know it's extra work to support older browsers, but it's not much extra work and it's useful for a lot of people.. agreed about the log prefix. most log messages I've seen from webpack dev server start with [WDS]. I spent about 20 minutes this morning googling and searching to see where the warning came from because it's just a random error in the console.\nIt seems like a simple enough change that it shouldn't have to wait until V3's log overhaul. People are going to start seeing the deprecation warning soon and have no idea where it's coming from. @shellscape Would a PR to add [WDS] be approved?. agreed about the log prefix. most log messages I've seen from webpack dev server start with [WDS]. I spent about 20 minutes this morning googling and searching to see where the warning came from because it's just a random error in the console.\nIt seems like a simple enough change that it shouldn't have to wait until V3's log overhaul. People are going to start seeing the deprecation warning soon and have no idea where it's coming from. @shellscape Would a PR to add [WDS] be approved?. this line behaves the same, but domain is also used on line 375 to calculate the url that gets opened, and that's where the behavior changes. @shellscape @mrtnbroder doesn't setup being in this array mean that everyone will see the deprecation warning no matter what? Shouldn't it not be in there but one of the things below this say if(options.setup) defaultFeatures.push('setup') or something? (or maybe keep it in but if options.setup is absent then remove it).\nIt seems that the loop on line 367 will always run the deprecation warning. \nI'm asking because when i upgraded to 2.9 i noticed the deprecation warning even though I don't use this hook at all (though it may just be that a dependency of mine needs upgrading. I'm not totally sure). either that or putting the logs on lines 346-347 inside the if on line 348. I made #1120 for this. ",
    "cchrysostomou": "Thanks for your help. So I tried some of your suggestions above and Im not sure they worked. At this point I'm beginning to think its not an issue with webpack but more with something funky on my setup. I think this because if I restart the computer and run the server for the first time everything seems to work fine; but once I restart the server a second time, then I see the issues described above.\nAs you asked I went ahead and created a repository, webpacktest, and it seems to work fine on an Ubuntu 14.04 setup. . OK so it seems to be working for now on my ubuntu16.04 system. Based on what you said, I started researching potential issues with watchpack and I found the following from: http://stackoverflow.com/questions/26708205/webpack-watch-isnt-compiling-changed-files\nThe suggestion to increase the number of watchers seems to have worked for me:\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\nIm still fairly new to all of this so I am not sure if this was my actual problem, how the number of watchers suddenly changed, or why this helped my issue with nested files.\nHopefully, I wont have any more issues with this. thanks again. \n. ",
    "korotkin": "npm start -- --host 0.0.0.0. npm start -- --host 0.0.0.0. ",
    "mstijak": "@Korotkin \nThis PR fixes the probem if you use --open and --host 0.0.0.0. 0.0.0.0 is not a valid IP address and Chrome refuses to open it.\nnpm start --host 0.0.0.0 --open. @Korotkin \nThis PR fixes the probem if you use --open and --host 0.0.0.0. 0.0.0.0 is not a valid IP address and Chrome refuses to open it.\nnpm start --host 0.0.0.0 --open. ",
    "jouni-kantola": "@SpaceK33z: I don't understand why the outputted file content needs to be different when served with webpack-dev-server?\nWhen I build the same project with webpack@v1.14.0 and webpack-dev-server@v1.16.2, this is the resulting vendor bundle:\nBuild:\nvendor.ab3c1652eb7b852b49a5.dev.js    1.55 kB    6, 5  [emitted]  vendor\nServe:\nvendor.ab3c1652eb7b852b49a5.dev.js    1.55 kB    6, 5  [emitted]  vendor\nContent stays the same.\nWhen I do the same with webpack@v2.2.0-rc.3 and webpack-dev-server@v2.2.0-rc.0 this is the result:\nBuild:\nvendor.ab3c1652eb7b852b49a5.dev.js    1.59 kB    5, 7  [emitted]  vendor\nServe:\nvendor.2449fd38b685a68f5b2c.dev.js     245 kB    5, 7  [emitted]  vendor\nContent's changed.. Link to version where webpack@v1.14.0 and webpack-dev-server@v1.16.2 is used:\nhttps://github.com/jouni-kantola/webpack-output-by-build-type/tree/webpack1-dev-server. Thank you. That fixed the issue. I didn't even know that option existed.\nIs there anyway of controlling where the emitted code for inline should be outputted? I've extracted the webpack manifest and inlined that into the page. This seems like a good place to include what's required for webpack-dev-server as well.. ",
    "zzzgit": "what i mean is that if webpack is only globally installed \nbut without a local installation\nserving will be failed\nand there will be no error in console for that. and another question please\nin dev mode,i think we don't need to set publicPath manually\nWDS can do this automatically for us\nfor example,if we set path to __dirname+\"/dist\",so WDS can figure out the publicPath should be 127.0.0.1:8080/dist/\nin this way,we don't need to set it by ourselves,so it can avoid some mistakes.  yes,i can config it in ./build/webpack.config.base.js\nthe \"devServer\" section . ",
    "DinakaranS": "Oops typo error, thanks Kluskens .. Oops typo error, thanks Kluskens .. ",
    "hugotox": "Hi, I'm having this issue with webpack 2.4.2 and setting the headers didn't help. What else could it be?\nEdit: weird thing is that I see the error in the console, but I also see the response correctly in the network tab:\n\n\n. ",
    "Zadvornyi": "I have had the same issues. ",
    "stsiarzhanau": "In my opinion it should be included and configured just like other options ( --overlay or overlay: true). webpack-dev-server is like an all-in-one and ready-to-use solution (it includes connect-history-api-fallback,  compression and other useful stuff). Why not to add another cool feature? I think that list of devDependencies in modern projects is long enough to create separate package that will be used primarily with webpack-dev-server.\nWhat are the cons of such solution?\nOFFTOP: In webpack 2 docs there's an example. It's reccommended to include line like this 'webpack-dev-server/client?http://localhost:8080' into entries array. But I skim through WDS source code and it seems like WDS handle this automatically. So there's no need to hardcode it in webpack config. And, as WDS can find another port (if 8080 is in use), it's better to not hardcode. Am I right?. ",
    "ezzaouia": "@SpaceK33z I'll check the code later on, the idea I guess is quite simple below are the need steps in pseudocode..\nfunction restartDevServer() {\n  stopDevServer();\n  startDevServer(the_needed_options);\n}\n// an http wrapper is needed to be able to close express server\nfunction stopDevServer() {\n  httpServerWrapper.close(function () {\n    process.exit(0);\n  })\n}\n// need to call this function to attach a listener \n// on typing 'rs' string in the console and restart the server if so\nfunction attachRSEventlistener() {\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', function (data) {\n    data = (data + '').trim().toLowerCase();\n    if (data === 'rs') return restartDevServer();\n  });\n}. @SpaceK33z thank you so much for your review and test; humm there maybe a way to reinitialize the cache, I'm so sorry I can't check now, I'll check this weekend and let you know once done.\nMany thanks and please have a nice day/evening... ;). I see, well I'll change... okay done !. ",
    "stallter4": "I figured out my problem after about 4 hours of fiddling.  It is never stated anywhere that the index.html and the output of the webpack build should be in the same folder, or that index.html can not be on the very outtermost part of the file structure.  However, if you do this the content-base does not work right, and therefore the hot swap doesnt work.  I figured it out by following this guys tutorial and making sure my stuff looked like his:\nhttp://andrewhfarmer.com/webpack-hmr-tutorial/. This link helped me as well.  the index.html does need to be in the same directory as your output of the webpack number one.  and I would also add --inline to your webpack-dev-server command.  Even though I did get it working, it usually only works sporadically.  So if I make one change to an area, and then make another change in that same area it does not hot update. But every once in a while it sees the changes and updates.  Not sure if that helps much but this youtube video did help. https://www.youtube.com/watch?v=9kJVYpOqcVU\nThen the next video that starts the HMR is here:\nhttps://www.youtube.com/watch?v=MhkGQAoc7bc&list=PLoYCgNOIyGABj2GQSlDRjgvXtqfDxKm5b. ",
    "rfgamaral": "@rpoitras Can you post a minimal configuration of your working setup so I could see what I need to do to get my own working? If possible without redux and react-router, not sure if those complicate things.\nThere's so much misinformation lying around that I'm not sure what exactly is the proper setup to get HMR working.\nBut do you use TypeScript too?. @rpoitras Can't remember, will have to try that again but won't be able to do it in the next few days. Well, take your time, no need to rush anything. Actually, let me try that guide again when I have the time and if I still can't get it to work, I'll report back. If then you have time to help me out, I'd really appreciate it. For now, do your own thing. Thank you :). I actually use postcss, so it's not a problem :). ",
    "rpoitras": "I agree this is more likely something I'm doing wrong, or a HMR + react-router issue particular to the combination of libs I'm using.. Fixed for me - Updated module requires browser refresh #515. ",
    "atalis": "Thanks for your response.  The problem is, that with a single page application index.html is the only thing there is, the rest is just relative paths, so loading index.html is not very helpful.  I will look at http-proxy-middleware, as you suggested.. ",
    "xxn520": "same issue. ",
    "afucher": "same issue.. I'm trying to search more useful information to put here... But I don't find anything that could be help. ",
    "nassimus26": "same issue ...!!. ",
    "liyu2012": "the same issue with me!,I find in the http-proxy-middleware,there is a error.\nin function getProxyEventHandler()\n_.get will return undefined instead of a Function type.\nBut it need a function to listen proxyEvents. ",
    "lucasvinals": "Guys, I think \"localhost\" is resolved with an active connection to the router. Try to replace localhost to 0.0.0.0 in your proxy object like this: \nproxy: {\n      '/api': {\n        target: {\n          host: '0.0.0.0',\n          port: 3000,\n        },\n        secure: false,\n      },\n    },\n. ",
    "jbms": "I'm actually unclear on what is intended from that code.  What is the purpose of sendMsg?  Is it intended to have an effect only within a webworker, specifically to send a message to the main thread that created it?  That seems like a bad idea, since it will confuse application code that is using that communication channel.    . I'm actually unclear on what is intended from that code.  What is the purpose of sendMsg?  Is it intended to have an effect only within a webworker, specifically to send a message to the main thread that created it?  That seems like a bad idea, since it will confuse application code that is using that communication channel.    . ",
    "cecilemuller": "Sorry I missed your reply @SpaceK33z and sure, I will prepare a PR to add to the examples.\nAs for solving the issue however, I'm not familiar with the internals of dev server itself, so I'm not yet sure what side-effects changing it might have.. Sorry I missed your reply @SpaceK33z and sure, I will prepare a PR to add to the examples.\nAs for solving the issue however, I'm not familiar with the internals of dev server itself, so I'm not yet sure what side-effects changing it might have.. ",
    "jakobkylberg": "We ran into the same issue in our application. When we run the application using webpack-dev-server we see the issue and when using another server we have no issues.\nThe example given by cecilemuller describes well what we were trying to do, we have a similar simple web worker in our application. \nWe are using: \nwebpack-dev-server 2.2.1\nwebpack 2.2.1\nIt would be great to find a solution to this problem.. If I remove the \"*\" parameter from the line that @cecilemuller suspects is the culprit, our webworker works without issues. However, another error is reported in the console: TypeError: Not enough arguments to Window.postMessage. Maybe something that the commit that introduced this issue tried to fix? The problematic call was introduced in this commit.. ",
    "dangerousdan": "This seems to be caused by having the web worker as an entry point in webpack, as window.postMessage and worker.postMessage expect different arguments.\nThis was originally added in #632.\nChanging if(typeof self !== \"undefined\") { to if(typeof window !== \"undefined\") { fixes the immediate issue but this still leaves us with web worker hot reloading not working, as any web worker updates produces the error [HMR] Update failed: ReferenceError: document is not defined.. Related to #745 . ",
    "hccde": "I've found out how this bug is happening,it's not easy,this is becausewe use iframe.postMessage to communicate with other window (refresh).But unfortunately, in the Worker there is also a method called postMessage ,that's self.postMessage .When ' worker.js'  as an entry in 'webpack.config.js',usually we have to do that,'worker.js' will be packaged with 'webpack-dev-server/client',As previously mentioned\uff0cwe use 'iframe.postMessage' to refresh\uff0cin code,that's:\nif(typeof self !== \"undefined\") {\n            // broadcast update to window\n            self.postMessage(\"webpackHotUpdate\" + currentHash, \"*\");\n             }\n'worker.js'  which is packaged with 'webpack-dev-server/client' also contains this code, pay attention, at this time,  self is not window  but [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage),this is the key point. 'webworker' is in a special context  different from 'window'.so we need to distinguish between these two objects.And i have initiated a 'pr' to fix this. #813. @SEAPUNK hi, if you are sure this patch has been included and the bug is not solved, can you give us an example.you can also test it by using #755 .i think i need more information.. ",
    "SEAPUNK": "I don't think #813  solved the issue, because we're getting the same error even with the patch included.. ",
    "opavader": "@SEAPUNK a temporary workaround for typescript is to reassign the postMessage method to another and use that. e.g. below\n``` typescript\nconst sendMessage: any = self.postMessage;\nonmessage = function(this: Window, data: MessageEvent)  {\n    console.log(data);\n    sendMessage('got it!');\n};\n```. ",
    "mohyeid": "@hccde  Thump up tp @SEAPUNK for the workaround, but yes absolutley its not working. It might be a typescript issue. I am not sure yet if its a web-pack issue, but to repro I used the below example and ran it in Angular project, which is using web-pack and it failed with the same issue \nhttps://github.com/zlepper/typescript-webworker. ",
    "jsf-clabot": " Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.3 out of 16 committers have signed the CLA.:white_check_mark: sokra:white_check_mark: SpaceK33z:white_check_mark: gaearon:x: BHSPitMonkey:x: dickeylth:x: qpias:x: pcorpet:x: Smotko:x: nightwing:x: phillipj:x: sanusart:x: davidreher:x: Ryan Graham:x: graingert:x: narkq:x: provsteviRyan Graham seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.qiang.zhang.sh2@dianping.com seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.13 out of 14 committers have signed the CLA.:white_check_mark: shellscape:white_check_mark: AlexChaseJones:white_check_mark: birdwell:white_check_mark: ryanwholey:white_check_mark: tbroadley:white_check_mark: fwielstra:white_check_mark: BenoitZugmeyer:white_check_mark: evilebottnawi:white_check_mark: sokra:white_check_mark: abcd-ca:white_check_mark: d3viant0ne:white_check_mark: yyx990803:white_check_mark: byzyk:x: Bohdan KhodakivskyiBohdan Khodakivskyi seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.0 out of 2 committers have signed the CLA.:x: caoyangqin:x: Yangqin0607caoyangqin seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.. ",
    "typerory": "I just downloaded https://polypane.rocks and came running here to see how I can have webpack open that up (dev browser) instead of my default 'browsing' browser.. ",
    "Kilian": "@typerory creator of Polypane here, let me see if I that's something I can do :). @typerory so, this took a while (hi!) but with the upcoming version of Polypane, the app is installable and you'll be able to use --open polypane.. ",
    "tobich": "I understand. If I get my PR to 2.0 through, will you accept backport of it to 1.x?. I understand. If I get my PR to 2.0 through, will you accept backport of it to 1.x?. ",
    "hendrikeng": "@SpaceK33z , i used laravel valet , its similar to mamp etc. Without the Proxy localhost:8080 works, HMR etc as well. As soon as i insert the Proxy it does load the site , links the built bundle but isn't loading the webpack cached one (dev with HMR), neither on localhost:8080 or the proxy. localhost:8080 is giving a 404 then... . @SpaceK33z , i used laravel valet , its similar to mamp etc. Without the Proxy localhost:8080 works, HMR etc as well. As soon as i insert the Proxy it does load the site , links the built bundle but isn't loading the webpack cached one (dev with HMR), neither on localhost:8080 or the proxy. localhost:8080 is giving a 404 then... . got it working. i had to add ' publicPath: http://localhost:8080/assets/'\n```\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst path = require('path');\nmodule.exports = {\n  entry: ['./src/js/index.js'],\n  output: {\n    filename: 'app.bundle.js',\n    path: path.resolve(__dirname, 'src/assets'),\n    publicPath: '/assets/',\n  },\n  devtool: 'source-map',\n  module: {\n    rules: [{\n      test: /.scss$/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: ['css-loader', 'sass-loader'],\n        publicPath: '/assets/',\n      }),\n    }],\n  },\n  devServer: {\n    contentBase: path.resolve(__dirname, 'src'),\n    compress: false,\n    publicPath: 'http://localhost:8080/assets/',\n    // port: 8080,\n    watchContentBase: true,\n    public: 'app.dev',\n    proxy: {\n      '/api': {\n        target: 'http://app.dev',\n        secure: false,\n      },\n    },\n  },\n  plugins: [\n    new ExtractTextPlugin({\n      filename: 'app.css',\n      disable: false,\n      allChunks: true,\n    }),\n  ],\n};\n```. ...forgot to delete the assets from an older production build, beside the config above webpack is serving via the proxy , but somehow it wont link to the piped development assets , i looked up \nhttps://github.com/JeffreyWay/laravel-mix/blob/master/docs/hot-module-replacement.md#usage-in-laravel aswell and adjusted the publicPath \nyarn run v0.19.1\n$ webpack-dev-server --open\nProject is running at http://app.dev/\nwebpack output is served from http://localhost:8080/assets/\nContent not from webpack is served from /Users/hendrik/Documents/Github/Projects/app/src. @bebraw thanks a lot, u will find it here :\nhttps://github.com/hendrikeng/webpackHMR\ni made the dependencies minimal but left all the js related stuff that could actually cause the issue.. @bebraw thanks a lot, its working now \ud83d\udc4d . fixed it changing entry to : \n``js\nentry: {\n    'app.bundle.js': [\n      'webpack-dev-server/client?http://localhost:8080',\n      'webpack/hot/only-dev-server',\n      './src/scripts/index',\n    ],\n  },\n  output: {\n    filename: '[name].js',\n    publicPath: 'http://localhost:8080/',\n    chunkFilename: '[chunkhash].js',\n  },\n      .\n      .\n      .\n   devServer: {\n    hot: true,\n    inline: true,\n    overlay: false,\n    quiet: true,\n    host: '0.0.0.0',\n    proxy: {\n      '': {\n        target: 'http://laravelapp.dev/',\n        changeOrigin: true,\n      },\n    },\n    disableHostCheck: true,\n    contentBase: path.resolve(__dirname, './src/templates'),\n    headers: {\n      'Access-Control-Allow-Origin': '',\n    },\n    watchContentBase: true,\n    watchOptions: {\n      poll: false, // might be needed for homestead/vagrant setup, review\n    },\n    historyApiFallback: false,\n    noInfo: true,\n  },\n```. ",
    "kfeinUI": "\nThere's already a log(level, msg) function in there, but it's not applied consistently throughout the client script. There shouldn't be any direct references to console outside of that.\nOnce log() is applied consistently, it's just a matter of adding a test for console being undefined that short-circuits the function. . Sure. I'll prep a PR.. Looks to be a problem with the hot module replacement (HMR) in the webpack core project as well that it's neglecting to check for console.. \n",
    "pawelpabich": "Unfortunately it did not work. I added my comments to the SO thread.. ",
    "analytik": "That doesn't work for me either. Every time I edit a meaningless comment line and save, I get [WDS] App updated. Recompiling... in the browser and it forces a refresh.\nEDIT: Sorry, nvm. Adding a command line param didn't help, because webpack config overwrote it. Changing that config file helped.. @jk21, @Ghazgkull - ~please try mixing this in with your webpack.config.js~\nconfig.devServer = {\n        hot: false,\n        inline: false,\n    }\n~Plus, if you have any custom components for hot reload for your framework (Angular, React...), remove or comment out those as well. Hope this helps!~\nEDIT: Sorry, I just realized for that particular project where I tried this, we still had webpack@1.x. :(. ",
    "jk21": "hello, this is still not working for me! can you please help, how to disable auto-reload?. ",
    "Ghazgkull": "Can this issue please be reopened? We just upgraded to from Webpack 1 to Webpack 2 and this change in the latest webpack-dev-server is extremely disruptive to our workflow. We need to be able to work on our code without constantly causing our page to reload.. I'm working around this using @pawelpabich's suggestion from StackOverflow:\n\nnpm install --save-dev null-loader\nAdd to webpack.config.js:\nconst path = require('path');\n[...]\nmodule.exports = {\n  [...]\n  module: {\n    rules: {\n      [...]\n      { // Disable webpack-dev-server's auto-reload feature in the browser.\n        test: path.resolve(__dirname, 'node_modules/webpack-dev-server/client'),\n        loader: 'null-loader'\n      }\n    }\n}. Based on @jcrben's comment, I just tried updating webpack-dev-server from 2.4.5 to 2.5.0 (with webpack 2.6.1) and the problem does indeed appear to be fixed.. \n",
    "SLyHuy": "\nconfig.devServer = {\n        hot: false,\n        inline: false,\n    }\n\nWorked fine!!. ",
    "aeroxy": "How do I add\nconfig.devServer = {\n  hot: false,\n  inline: false,\n}\nto this\n```\n// @remove-on-eject-begin\n/\n * Copyright (c) 2015-present, Facebook, Inc.\n \n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n /\n// @remove-on-eject-end\n'use strict';\n// Do this as the first thing so that any code reading it knows the right env.\nprocess.env.BABEL_ENV = 'development';\nprocess.env.NODE_ENV = 'development';\n// Makes the script crash on unhandled rejections instead of silently\n// ignoring them. In the future, promise rejections that are not handled will\n// terminate the Node.js process with a non-zero exit code.\nprocess.on('unhandledRejection', err => {\n  throw err;\n});\n// Ensure environment variables are read.\nrequire('../config/env');\nconst fs = require('fs');\nconst chalk = require('chalk');\nconst webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst clearConsole = require('react-dev-utils/clearConsole');\nconst checkRequiredFiles = require('react-dev-utils/checkRequiredFiles');\nconst {\n  choosePort,\n  createCompiler,\n  prepareProxy,\n  prepareUrls,\n} = require('react-dev-utils/WebpackDevServerUtils');\nconst openBrowser = require('react-dev-utils/openBrowser');\nconst paths = require('../config/paths');\nconst config = require('../config/webpack.config.dev');\nconst createDevServerConfig = require('../config/webpackDevServer.config');\nconst useYarn = fs.existsSync(paths.yarnLockFile);\nconst isInteractive = process.stdout.isTTY;\n// Warn and crash if required files are missing\nif (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {\n  process.exit(1);\n}\n// Tools like Cloud9 rely on this.\nconst DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3001;\nconst HOST = process.env.HOST || '0.0.0.0';\n// We attempt to use the default port but if it is busy, we offer the user to\n// run on a different port. detect() Promise resolves to the next free port.\nchoosePort(HOST, DEFAULT_PORT)\n  .then(port => {\n    if (port == null) {\n      // We have not found a port.\n      return;\n    }\n    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';\n    const appName = require(paths.appPackageJson).name;\n    const urls = prepareUrls(protocol, HOST, port);\n    // Create a webpack compiler that is configured with custom messages.\n    const compiler = createCompiler(webpack, config, appName, urls, useYarn);\n    // Load proxy config\n    const proxySetting = require(paths.appPackageJson).proxy;\n    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);\n    // Serve webpack assets generated by the compiler over a web sever.\n    const serverConfig = createDevServerConfig(\n      proxyConfig,\n      urls.lanUrlForConfig\n    );\n    const devServer = new WebpackDevServer(compiler, serverConfig);\n    // Launch WebpackDevServer.\n    devServer.listen(port, HOST, err => {\n      if (err) {\n        return console.log(err);\n      }\n      if (isInteractive) {\n        clearConsole();\n      }\n      console.log(chalk.cyan('Starting the development server...\\n'));\n      openBrowser(urls.localUrlForBrowser);\n    });\n['SIGINT', 'SIGTERM'].forEach(function(sig) {\n  process.on(sig, function() {\n    devServer.close();\n    process.exit();\n  });\n});\n\n})\n  .catch(err => {\n    if (err && err.message) {\n      console.log(err.message);\n    }\n    process.exit(1);\n  });\n```. ",
    "devblazer": "For #2320, it seems unlikely the output there is very different to what I get and mine only occurs on an hmr rebundle not the initial build.  Also I dont have a postcss loader or a extract text plugin.\nIn regards to #25 I might be wrong about this, but I don't think its related either as my watcher loops indefinitely not for a fixed amount of time.\nAs for the webpack --watch what is the command I should use there (i am not used to running webpack in watch mode)\nMy current webpack-dev-server is running on:\n./node_modules/.bin/webpack-dev-server --content-base public --inline --hot\nWhat would the corresponding webpack --watch command line be?\nI tried:\n./node_modules/.bin/webpack --watch --hot\nit did compile, but the watch didn't seem to be working\nIts also worth noting, this issue only started occuring when I migrated to webpack2. For #2320, it seems unlikely the output there is very different to what I get and mine only occurs on an hmr rebundle not the initial build.  Also I dont have a postcss loader or a extract text plugin.\nIn regards to #25 I might be wrong about this, but I don't think its related either as my watcher loops indefinitely not for a fixed amount of time.\nAs for the webpack --watch what is the command I should use there (i am not used to running webpack in watch mode)\nMy current webpack-dev-server is running on:\n./node_modules/.bin/webpack-dev-server --content-base public --inline --hot\nWhat would the corresponding webpack --watch command line be?\nI tried:\n./node_modules/.bin/webpack --watch --hot\nit did compile, but the watch didn't seem to be working\nIts also worth noting, this issue only started occuring when I migrated to webpack2. Thanks {multistep:false} in the hotmodule replacement plugin seems to have solved it.  Although it still rebundles node_modules/moment/locale whenever there is something to bundle, weird.\nBut it no longer gets stuck in a loop, which was my main issue.. Thanks {multistep:false} in the hotmodule replacement plugin seems to have solved it.  Although it still rebundles node_modules/moment/locale whenever there is something to bundle, weird.\nBut it no longer gets stuck in a loop, which was my main issue.. ",
    "brada1703": "Just for anyone who comes along to this page and has the same problem, I found one thing that helped in my situation:\ngo to webpack.mix.js\nIt should have:\nmix.js('resources/js/app.js', 'public/js')\n   .sass('resources/sass/app.scss', 'public/css');\nadd:\n   .options({processCssUrls: false})\nto end up with:\nmix.js('resources/js/app.js', 'public/js')\n   .sass('resources/sass/app.scss', 'public/css')\n   .options({processCssUrls: false})\n   ;\nThis solved it for me. Hopefully, it helps someone along the line. \nThanks ;). ",
    "gfx": "@SpaceK33z Because my project is complex, I can't reproduce it in minimum projects.. ",
    "bstrickl": "We ran into something similar that may be the same issue. Ours seems to be this issue which looks like it can be resolved if sockjs-client is updated from 1.1.1 to 1.1.2.. ",
    "smiile": "Try disabling redux-devtools. ",
    "mgol": "I see. It still seems weird to change the protocol in that way as it then queries a server that may not exist.\nBut maybe, at the core, this can be qualified as an Angular CLI issue as that's what makes the connection use the full URL (and, hence, skip the proxy).. > It was much more useful if it did accept a regex or at least a list of allowed hosts\nThat's what #899 implements.. Django docs say:\n\nA value beginning with a period can be used as a subdomain wildcard: '.example.com' will match example.com, www.example.com, and any other subdomain of example.com.\n\nCould this be added as well?. @orteth01 I guess it makes sense to nest that under existing tests (a separate inner describe sounds good).\nNote, though, that I'm just a user, not a member of Webpack's core team so you might want to wait for someone on the team to decide. I'm just providing my own feedback.. @orteth01 For IPs I'd expect a wildcard going in a different direction, e.g. 192.168... ",
    "Sfinx": "To SpaceK33z: The nginx is proxying the websockets here - just study these lines in nginx.conf:\n...\nproxy_set_header Upgrade $http_upgrade;\nproxy_set_header Connection \"upgrade\";\n...\nThis means that nobody use the unsecure websockets here - app (WDS at least) checks for https transport and start making calls to wss:// (nginx) and nginx successfully proxies the connection to the ws:// (webpack) in the same way as it does with http:// calls.\n This is definitely webpack bug. I think it should provide the template/rewrite option for outgoing URL generation but not blindly use the fixed local one.\nThe temporary workaround is to use 443 port at the both sides - webpack and nginx.\nP.S. The simplest solution I see is to add config option something like ReverseProxyForcePort.. ",
    "shadowwzw": "On the client side, you can specify an arbitrary protocol.\nhttps://github.com/shadowwzw/webpack-dev-server. ",
    "rigolepe": "I'm running against this same problemen in my development setup and I can't understand why this cannot be fixed? Just keep the protocol that is listed in:\n'webpack-dev-server/client?http://localhost:8888'\n. I'm running against this same problemen in my development setup and I can't understand why this cannot be fixed? Just keep the protocol that is listed in:\n'webpack-dev-server/client?http://localhost:8888'\n. ",
    "jandsu": "@rigolepe as explained above, keeping http rather than forcing https causes a mixed content issue\nMixed Content: The page at 'https://foo.bar.com/' was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint 'http://localhost:4200/sockjs-node/\nSo the only option when https is involved would be to use window.location to get the host name and rely on the reverse proxy (nginx, apache, ...) to route it properly. Check out https://github.com/angular/angular-cli/issues/2123#issuecomment-334803554 if you want a workaround for this issue.. ",
    "STRML": "A few comments:\n\noverlay option works fine. :+1:\nI'm not able to get the actual syntax error location from something like <div></span> - I just get the stack with Module build failed. Using HMR and devtool: \"eval\". Is there further setup required?. \n",
    "Restuta": "I am not using \"webpack-dev-server\" directly, I am using \"webpack-dev-middleware\", is there a way to have it as part of the middleware itself? @SpaceK33z . @SpaceK33z I meant hot-middleware, sorry. ",
    "joanasleet": "I went through quite some tutorials already. I also use style-loader in the given example.\nI'll follow your advice then, thanks.. This worked: https://webpack.js.org/guides/hmr-react/\n@SpaceK33z Thank you for pointing me to the right resource. There is so much noise regarding webpack on the internet.. ",
    "awitherow": "@SpaceK33z thanks! What would the example cli look like?. ",
    "tonygentilcore": "It's strange. I filed in both places because webpack-dev-server v1.16.x and v2.2.x both depend on http-proxy-middleware v0.17.x. That suggests the usage changed somehow.. ",
    "ohjames": "With angular-cli I don't see any error from webpack-dev-server but the proxied websocket connections are unusable.. ",
    "kjda": "having the same issue, happens when https is enabled. ",
    "cdupetit": "You must set secure: false in the ws proxy definition: \n'/ws': {\n    target: 'ws://wss_host:wss_port',\n    ws: true,\n    secure: false\n}. You must set secure: false in the ws proxy definition: \n'/ws': {\n    target: 'ws://wss_host:wss_port',\n    ws: true,\n    secure: false\n}. ",
    "atilkan": "@shellscape Version 4 still uses sockJS. . @shellscape Version 4 still uses sockJS. . ",
    "melbourne2991": "Experiencing the same problem\n. ",
    "yakovkhalinsky": "I can confirm that installing acorn 4.0.7 manually fixes the issue. ",
    "aaronbeall": "It seems to have been the acorn issue... I blew away node_modules and re-installed webpack@2 webpack-dev-server@2 and the problem no longer exists, when I look at the acorn package it is using 4.0.8 which apparently fixed the issue.. ",
    "ifree92": "@SpaceK33z thanks a lot!\nYou're right with webpack version.\nI have just installed webpack@1.14.0 and it works as well.\nWill wait when webpack-dev-server will updates to have nice working with new webpack version.. ",
    "andyjessop": "I'm experiencing this same issue, but it seems to be hijacking my worker script:\n```\nconst worker = new Worker('./worker.js');\nworker.postMessage({ a: 'test' });\nIn the worker I have:\nonmessage = (event) => {\n  debugger;\n};\n``\nAnd I'm seeingwebpackOkmessages, but not my{ a: 'test' }`. ",
    "andreicek": "Perhaps this was for @andyjessop . ",
    "sagiavinash": "@SpaceK33z i had to remove both the colors and progress from the devServer config to make devServer to have no errors.\nbut after removing them i don't see any colors in the stats section. when i was using webpack@v1 i used to get a typically green, yellow colorful stats.\nas you can see in the error message both progress & colors are missing in the list of supported options. I just dont get why they are not listed but relevant source is in webpack-dev-server.js\nDo you feel i need to provide more info or want me to check any misconfiguration or package version inconsistencies. ",
    "mir3z": "I see, I'll move it to webpack/webpack. I don't think it's related to chrome since I can't get source maps working in any browser.\nMoved to: https://github.com/webpack/webpack/issues/4207. ",
    "kciter": "Yes, I use Babel.\n\nCan showing highlight from command line. But can't browser.\nIs it ansi-html's problem?. I will investigate it. :). ",
    "kumaresan-subramani": "Errors while compiling. Reload prevented.\n\nthis is my error, i didn't install eslint-loader but this error occur what will i do?. \n",
    "kryptonianson": "I agree with your comment, but since I am getting nowhere I thought it worth a shot here. Also, no one has said it was due to WDS, I was just trying to do my due diligence. I appreciate your response.. ",
    "sjones6": "@kryptonianson ... recognize this is an old, closed thread. That error message from VSCode and is super unclear.\nChances are that Windows doesn't like trying execute webpack-dev-server in the node_modules/.bin. Try changing the \"program\" option to node_modules/webpack-dev-server:\njson\n        {\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"name\": \"webpack-dev-server\",\n            \"program\": \"${workspaceRoot}/node_modules/webpack-dev-server/bin/webpack-dev-server.js\",\n            \"cwd\": \"${workspaceFolder}\"\n        }\nLeaving this hear in case it helps someone in the future.. ",
    "WoodyWoodsta": "AFAIK webpack-dev-server is not supposed to build to the filesystem. It stores built files in memory and serves them from memory as well.. ",
    "sshmyg": "@WoodyWoodsta nevertheless it should and it is run webpack build, but server livereload doesn't work anymore and after manual refresh, no changes, as described @dennisjac.. @SpaceK33z try this https://github.com/serheyShmyg/frontend maybe it's not obvious, but when I start dev server first time, I get such log http://prntscr.com/e7b7z6 and as a result I want to get new bundle, but I don't (probably it's my fault, that I think so :) ). And every time I save any file, in console I see some incremental changes, but server livereload not working. Manual page reload also doesn't help.. @SpaceK33z thanks, it works. Probably you should change readme a little bit, that users understand how to works with publicPath. Because now it's not obvious.\n\nNow, when you change something in your assets, it should live-reload the files. . \n",
    "edgarshurtado": "I've been trying to get HMR to work several hours without luck. Thank you @SpaceK33z, your solution worked for me as well \u263a\ufe0f. ",
    "luckylooke": "This feature\nIf you're having trouble, navigating to the /webpack-dev-server route will show where files are served. For example, http://localhost:9000/webpack-dev-server. (src)\nsaves me, I was able to understand how files are served, then I have changed it by publicPath.\n\ud83c\udf89\nMy problem was in my multiple webpack config environment, so files were served in named contexts.\nLike:\nhttp://localhost:9000/webpackConfig1/yourFiles\nhttp://localhost:9000/webpackConfig2/yourFiles\n...\netc. As I have mentioned here. I was getting bundle file from /dist builded earlier, not the one served from memory.\nThis feature\nIf you're having trouble, navigating to the /webpack-dev-server route will show where files are served. For example, http://localhost:9000/webpack-dev-server. (src)\nsaves me, I was able to understand how files are served, then I have changed it by publicPath.\n\ud83c\udf89\nMy problem was in my multiple webpack config environment, so files were served in named contexts.\nLike:\nhttp://localhost:9000/webpackConfig1/yourFiles\nhttp://localhost:9000/webpackConfig2/yourFiles\n...\netc. ",
    "DawidJanczak": "Is there anything blocking this?. ",
    "jaridmargolin": "Is the server.close() here necessary?. Is the server.close() here necessary?. ",
    "pigcan": "@bebraw e.g.  atool-build roadhog, these packages are building tools which based on  webpack@1. We developed a electron app  likes deco-ide  and due to the development  needs we should support webpack@1 and webpack@2, at the same time we hope that developers can start debugging server as soon as possible,to build-in modules is the easy way, so the problem came.\n. Adding --host 0.0.0.0 could not fix this for me.. ",
    "coltonw": "I am working on a PR. Rebased!. Rebased!. I am having this exact same issue (with a similarly complicated setup) so @pladaria if you do figure it out, I would greatly appreciate it if you post a reply back to this thread!. Yeah, don't keep it open on my account.  Seems to be working for me again.. No, what is happening is that this statement isn't hit at all, because argv is only for command line arguments.\nIn the case of a config file, argv will be mostly empty but options.open and options.openPage may already have been populated by the input config file, so we STILL need to set openPage to empty string regardless of how options.open got set to true.. The change I made to that line only makes sense in the context that it goes right along with the next if statement.\nBefore my change, if you go through this function with argv for open, you get options.open set to true and options.openPage set to either the open-page command line arg or to empty string.  After my change, this logic is identical except the setting openPage to empty string is now a few lines down instead of being inline.  Basically, the line you are concerned about is irrelevant to the change: I removed an unnecessary condition from the code for a tiny bit of code simplification but, if I had left the line in, the behavior would be the same by the time you finish the function.\nBefore my change, if you go through this function with options.open already set to true and no argv, you would have options.openPage set to undefined because you literally never hit the line of code you are asking about. This is what is causing the bug.  After my change, I check for options.open independent of whether you have argv.open or not and set undefined options.openPage to empty string.\nIs that clearer?  I am sorry if I am not being clear. Written communication is not my strongpoint.\nRun through the code in your head before and after with argv set to {} but options.open set to true.  That is the only case I am changing at all and is the case I am fixing.\nThe reason it matters if openPage is undefined or empty string is because later in the file we string concatenate the uri with openPage.\n. ",
    "codelinguist": "I also had this exact issue in my angular 4 app today\nThis occurs when i call a function that opens a WebSocket connection and sends message when the app initializes.\nI thought there's some contention happening so i moved the function call inside setTimeout with 100ms delay to give time for the webpack dev server to initialize. The error is gone!\nI hope this helps.. ",
    "YDJSZY": "I have also this problem, I don't know how to do .... ",
    "devilsbibble": "Do you have set window.self=xxx ?  Delete it .. ",
    "ereztdev": "just don't use self, use that = this, or any other var that would not be self. ",
    "imam": "If you want to use self anywhere in your code, make sure you always redefined self at the very last line of everything (window.self = window). ",
    "steve-taylor": "Have you tried '/api'?. I wonder if there's a way to plug in a reverse proxy that actually works, rather than being handcuffed to http-proxy-middleware.. ",
    "gjunkie": "@steve-taylor I have indeed. /api, api, /api/path, etc. Every variation I could think of.. Yeah not sure.. Here's my whole config in case there's something else afoot. Maybe I've got something funky in the entry?\n```\nconst { resolve } = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: [\n    'react-hot-loader/patch',\n    'webpack-dev-server/client?http://localhost:8080',\n    'webpack/hot/only-dev-server',\n    './app.js',\n  ],\noutput: {\n    filename: 'bundle.js',\n    path: resolve(__dirname, 'dist'),\n    publicPath: '/',\n  },\ncontext: resolve(__dirname, 'client'),\ndevtool: 'inline-source-map',\ndevServer: {\n    hot: true,\n    contentBase: resolve(__dirname, 'dist'),\n    publicPath: '/',\n    proxy: {\n      '/api/**': {\n        target: 'http://localhost:8000',\n        secure: false,\n        changeOrigin: true,\n      }\n    },\n  },\nmodule: {\n    rules: [\n      {\n        test: /.js$/,\n        use: [\n          'babel-loader',\n        ],\n        exclude: /node_modules/\n      },\n      {\n        test: /.css$/,\n        use: [\n          'style-loader',\n          'css-loader?modules',\n          'postcss-loader',\n        ],\n      },\n    ],\n  },\nplugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin()\n  ],\n};\n```. @SpaceK33z I decided to shift over to use Hapijs' cors feature for my needs, however this is the repo I was attempting to proxy in. Beyond removing the proxy option, there haven't been other changes, in case this helps.\nhttps://github.com/gjunkie/hapi-react-kit. ",
    "nancruz": "I have the same problem as @gjunkie. Starting from v1.15.0 the http-proxy-middleware is installed as dependency and a ECONNRESET error is thrown each time I try to make a request to the backend.\nApparently, it is only happening in OS X environment because my colleagues at work are using Ubuntu and they can't reproduce this problem. . ",
    "rpdmiranda": "I could reproduce this bug on OS X. In Windows, it is working just fine.. ",
    "Cottin": "I couldn't get devServer proxy to work either (OS X 10).\nI'm running with a server.js which reads webpack.config.js and my workaround was a reverse proxy using http-proxy in server.js:\n```\nvar httpProxy = require('http-proxy');\nvar apiProxy = httpProxy.createProxyServer();\n// ... was here before\nvar app = express();\nvar compiler = webpack(config);\napp.use(require('webpack-dev-middleware')(compiler, {\n  publicPath: config.output.publicPath\n}));\napp.use(require('webpack-hot-middleware')(compiler));\n// ... end of was here before\napp.all(\"/api/*\", function(req, res) {\n    apiProxy.web(req, res, {target: 'http://localhost:3102'});\n});\n```\nReference: https://codeforgeek.com/2015/12/reverse-proxy-using-expressjs/. ",
    "r01010010": "Having the same issue here, also OSX. This configuration is working for me on OSX (I sweated blood to make it work). I have the GNU Coreutils installed, by the way (don't know if has something to do). \n```js\n, proxy: [\n          {\n            path: /^\\/styleguide(?!\\/core-css\\/build)/\n          , target: 'http://localhost:8000'\n          , bypass: function(req, res, _options) {\n              return req.url.replace('styleguide', styleguideRoothPath + '/build');\n            }\n          }\n        , {\n            path: \"**\",\n            target: \"http://localhost:3000\",\n            secure: false,\n            bypass: function(req, res, options) {\n              if(req.url === '' || req.url === '/') {\n                res.statusCode = 302;\n                res.setHeader('Location', '/a/');\n                return '/a/';\n              }\n          var frontend = new RegExp(\"^\\/$^|\\/a\\/index\\.html|^\\/a\\/|^\\/a$|^\\/styleguide\");\n          if (frontend.test(req.url)) return req.url;\n        }\n      }\n    ]\n\n```. ",
    "yuduxyz": "same issue on OSX. same issue on OSX. ",
    "maxsitu": "Same issue on OSX as well.. ",
    "mitya-borodin-zz": "Same issue on OSX.. ",
    "sun-slaven": "Meet the same issue on mac, any progress here?. ",
    "bdoooh": "It's working for me now. Turned out I was just missing adding new webpack.HotModuleReplacementPlugin(), to the plugins array. ",
    "jrweinb": "Make sure that your request url and port matches that which your webpack-dev-server is running on. So, if your api is located at http://localhost:5000, and your dev server is running on http://localhost:8080, make sure all of your requests are to http://localhost:8080. Its best to make your requests to localhost:8080/api (to avoid conflict with app routes) and use the path rewrite to remove the /api. \nExample:\nWebpack devserver proxy config:\nproxy: {\n    '/api': {\n        target: 'http://localhost:5000',\n        pathRewrite: { '^/api': '' },\n    },\n}\nWebpack dev server running on: http://localhost:8080\nDesired API endpoint: http://localhost:5000/items\nIn your app, make the request to: http://localhost:8080/api/items.\nThis should work. It seems to me that all of the above issues stem from making the request to the API url and port rather than the webpack dev server url and port and using the proxy and path rewrite to direct the request to the API.. @withintheruins14 - (I deleted a previous reply as it was wrong). It looks like your API is not working.  The 404 html is getting parsed in response => response.json(). @withintheruins14 - (I deleted a previous reply as it was wrong). It looks like your API is not working.  The 404 html is getting parsed in response => response.json(). @evilebottnawi - I was unable to reproduce the error when serving a large file from a local node server. I apologize, but I failed to mention in my bug report that I am on a corporate VPN...I believe that this is the source of the issue. I found a relevant issue in the http-proxy-middleware repo:\nhttps://github.com/chimurai/http-proxy-middleware/issues/171\nHowever, adding a \"Connection\": \"keep-alive\" header does not solve the problem for me. The only solution is to run Chrome with web security disabled. @evilebottnawi - I was unable to reproduce the error when serving a large file from a local node server. I apologize, but I failed to mention in my bug report that I am on a corporate VPN...I believe that this is the source of the issue. I found a relevant issue in the http-proxy-middleware repo:\nhttps://github.com/chimurai/http-proxy-middleware/issues/171\nHowever, adding a \"Connection\": \"keep-alive\" header does not solve the problem for me. The only solution is to run Chrome with web security disabled. ",
    "withintheruins14": "@jrweinb, thanks for your clear explanation. I was trying to GET the API port like you had described, but it is still not working. In the console I have two errors, \nGET http://localhost:8080/api/prospects 404 (NOT FOUND)\nUncaught (in promise) SyntaxError: Unexpected token < in JSON at position 0\nThe second error points to line 4 here, there is no '<' as described\nexport function fetchProspects() {\n  return (dispatch) => {\n    dispatch(requestProspects());\n    return fetch('http://localhost:8080/api/prospects')\n      .then(response => response.json())\n      .then(json => dispatch(receiveProspects(json)));\n  };\n}. @jrweinb, thanks for your clear explanation. I was trying to GET the API port like you had described, but it is still not working. In the console I have two errors, \nGET http://localhost:8080/api/prospects 404 (NOT FOUND)\nUncaught (in promise) SyntaxError: Unexpected token < in JSON at position 0\nThe second error points to line 4 here, there is no '<' as described\nexport function fetchProspects() {\n  return (dispatch) => {\n    dispatch(requestProspects());\n    return fetch('http://localhost:8080/api/prospects')\n      .then(response => response.json())\n      .then(json => dispatch(receiveProspects(json)));\n  };\n}.  SOLVED \n@jrweinb, thanks for sticking with me - I am still trying to get this sorted. Yes, my request was 404ing but that is because the dev-server proxy isn't working. To me, my files appear in proper order, here they are:\nactions/prospect.js\nexport function fetchProspects() {\n  return (dispatch) => {\n    dispatch(requestProspects());\n    return fetch('http://localhost:8080/api/prospects')\n      .then(response => response.json())\n      .then(json => dispatch(receiveProspects(json.data)))\n      .catch(ex => dispatch(requestProspectsFailure(ex)));\n  };\n}\nwebpack.config.js\n```\nconst path = require('path');\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nconst DIST_DIR = path.resolve(__dirname, \"dist\");\nconst SRC_DIR = path.resolve(__dirname, \"src\");\nconst config = {\n  entry: [\n    \"babel-polyfill\",\n    SRC_DIR + \"/app/index.js\",\n    SRC_DIR + \"/app/assets/stylesheets/application.scss\",\n    \"font-awesome/scss/font-awesome.scss\",\n  ],\n  output: {\n    path: DIST_DIR + \"/app/\",\n    filename: \"bundle.js\",\n    publicPath: \"/app/\"\n  },\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist',\n    historyApiFallback: true,\n    proxy: {\n    '/api': {\n        target: 'http://localhost:5001',\n    },\n}\n  },\n  module: {\n    rules: [\n      {\n        enforce: \"pre\",\n        test: /.js$/,\n        exclude: /node_modules/,\n        loader: \"eslint-loader\",\n        options: {\n          failOnWarning: false,\n          failOnError: true\n        }\n      },\n      {\n        test: /.js$/,\n        include: SRC_DIR,\n        loader: 'babel-loader',\n        query: {\n          presets: ['react', 'stage-2']\n        }\n      },\n      {\n        test: /.css$/,\n        use: ExtractTextPlugin.extract({\n          use: 'css-loader?importLoaders=1'\n        })\n      },\n      {\n        test: /.scss$/,\n        use: ExtractTextPlugin.extract(['css-loader', 'sass-loader'])\n      },\n      {\n        test: /.(jpe?g|png|gif|svg)$/i,\n        loaders: ['file-loader?context=src/images&name=images/[path][name].[ext]', {\n          loader: 'image-webpack-loader',\n          query: {\n            mozjpeg: {\n              progressive: true,\n            },\n            gifsicle: {\n              interlaced: false,\n            },\n            optipng: {\n              optimizationLevel: 7,\n            },\n            pngquant: {\n              quality: '75-90',\n              speed: 3,\n            },\n          },\n        }],\n        exclude: /node_modules/,\n        include: __dirname,\n      },\n      {\n        test: /.woff2?(\\?v=[0-9].[0-9].[0-9])?$/,\n        // loader: \"url?limit=10000\"\n        use: \"url-loader\"\n      },\n      {\n        test: /.(ttf|eot|svg)(\\?[\\s\\S]+)?$/,\n        use: 'file-loader'\n      },\n    ]\n  },\n  plugins: [\n    new ExtractTextPlugin({\n      filename: \"application.css\",\n      allChunks: true\n    })\n  ]\n};\nmodule.exports = config;\n```\npackage.json\n\"scripts\": {\n    \"test\": \"jest\",\n    \"watch\": \"webpack --progress --watch\",\n    \"start\": \"npm run build\",\n    \"build\": \"webpack -d && cp src/index.html dist/index.html && webpack-dev-server --inline --hot --history-api-fallback\",\n    \"build:prod\": \"webpack -p && cp src/index.html dist/index.html\"\n  }\nThanks!. The above was solved. My problem was on the server and not within my webpack.config.js. Our Flask server prevents all requests from different servers when a server name is specified.  To fix this, we simply left the server name unspecified in config.py. Thanks for your help @jrweinb . ",
    "doomsbuster": "I faced similar issue, however my issue was:\nMy UI ran on: localhost:9000\nMy API ran on localhost:3000 and endpoint /api/**\nMy proxy config:\ndevServer: {\n    proxy: {\n        '/api/**': {\n            target:'http://localhost:3000'\n        }\n    }\n}\nMy problem was - when I was making API calls from my React UI, i was pointing it to locahost:3000/api/** whereas I need to point it at the localhost:9000/api/** so that i can proxy it from the local domain to the remote domain.\n. ",
    "disposedtrolley": "Been scratching my head since Monday trying to figure this out! This ended up working for me:\nproxy: {\n    '**': {\n        target: 'http://localhost:8080',\n        secure: false\n    }\n}\nI have webpack-dev-server running on port 3000, and Express running on port 8080. Requests to the API are made via http://localhost:3000/api/<whatever>. ",
    "michaeljaekel": "I ran into the same issue and found\nnew CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.dev.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\nin  webpack.dev.conf.js .\nSeems, it changes the way, proxyTable is handling the path to static??\nI commented it out, restarted npm run dev and all is running fine again.\nIs there a better way to handle this than deleting the plugin?\nBTW. This is my config for proxytable (now working again):\n```\nproxyTable: {\n            '/static': {\n                target: 'http://firedev.local:8888',\n                changeOrigin: true,\n                logLevel: 'debug'\n            }\n        },\n```. ",
    "sarahmarciano": "I am also facing this issue\nI am trying to be solving it till this morning but with no success\nI've tried every solution but nothing is working for me\ncan anyone help please?\n. ",
    "HabelFoc": "@jellyfish-tom thanks\nNow mine is working, here's my config:\ndevServer: {\n    historyApiFallback: true,\n    contentBase: './dist',\n    watchOptions: {\n      aggregateTimeout: 500,\n      poll: 1000,\n      ignored: /node_modules/\n    },\n    proxy: { '/api': { target: 'http://[::1]:3030', secure: false } }\n  }. ",
    "SilentGert": "For us setting the header Connection: keep-alive did the trick. Requests were handled by the backend server and a response was sent as well, nevertheless we saw the error ECONNRESET for some of the API requests before.\n'api' : {\n  target: SERVER_URL,\n  secure: false,\n  changeOrigin: true,\n  headers: {\n    Connection: 'keep-alive',\n  },\n}. ",
    "ForgeSeven": "Our UX guy has also been suffering the ECONNRESET on macOS for some time and he's tried most things to solve it, however the solution from @SilentGert has solved the problem.. ",
    "Arturszott": "Similar issue: https://github.com/MoOx/eslint-loader/issues/23. ",
    "mnn": "My \"solution\" is to down-grade before breaking change - to version 2.1.0-beta.9. It would be nice to have an option in WDS to disable this feature (misfeature for some).. Both webpack and Awesome TypeScript loader are ignoring the issue. I see here is the same situation.\nNo love for TypeScript :-/. :-1: . Really? It is still an issue, we are not updating this package because of this \"feature\"... :disappointed: . ",
    "mribichich": "any news on this? is there a way to make webpack reload even though there are errors. I'm using typescript ts-loader and the errors should not stop the reloading. In my case was using WebpackChunkHash and ModuleConcatenationPlugin together. \nSince WebpackChunkHash has a bug when using it with ModuleConcatenationPlugin\nhttps://github.com/alexindigo/webpack-chunk-hash/issues/15\nDisabling any of the two works again. ",
    "mightyiam": "Cool. I did not see any mention of this in the docs, though.. https://webpack.js.org/guides/development/#webpack-dev-server instructs to create an html file.. ",
    "HairyRabbit": "@SpaceK33z \nOh, I forget, thanks \ud83d\ude18 . ",
    "ActionScripted": "Since this is the top result for \"webpack dev server proxy headers\", here's the solution:\njavascript\nmodule.exports = {\n  // ... other webpack settings\n  devServer: {\n    proxy: {\n      '**': {\n        target: 'http://some-host.test:1234',\n        headers: {\n          'X-Forwarded-For': '1.2.3.4'\n        }\n      }\n    }\n  }\n};\nHere we're proxying everything to some-host.text on port 1234 and sending along the X-Forwarded-For header with 1.2.3.4.\nYou have to set headers for each proxy object, so if you have several proxy objects to deal with you might create a headers constant and use that with each proxy object:\n```javascript\nconst proxy_headers = {\n  'X-Forwarded-For': '1.2.3.4',\n  'X-Another-Header': 'Hello'\n};\nmodule.exports = {\n  // ... other webpack settings\n  devServer: {\n    proxy: {\n      'api1/': {\n        target: 'http://some-host1.test:1234',\n        headers: proxy_headers\n      },\n      'api2/': {\n        target: 'http://some-host2.test:5678',\n        headers: proxy_headers\n      }\n    }\n  }\n};\n```\n. ",
    "Retired": "Oh, forgot to mention that I'm starting the server without any arguments:\n// package.json\n\"scripts\": {                                                                             \n    \"start\": \"webpack-dev-server\"                                                                                                             \n  },. ",
    "aleksandrmelnyk": "Completely agreed. I didn't find option for setting port for hot reload, it uses 8080 anyway even if I am using nginx (with 443 port) as frontend.\n\n. @barnash nope, didn't have time to focus on it. In general need a way to specify port for webpack live reload. . ",
    "meteorlxy": "@barnash @aleksandrmelnyk \nFor me, --public my.domain (without port) does solve this problem.\n\nwebpack: 4.12.0\nwebpack-dev-server: 3.1.4\n\nI'm using nginx as the reverse proxy.. @michael-ciniawsky Thanks for your explaination \ud83d\ude04 . In fact, webpack has no peerDependencies on webpack-cli at all, that's why I got into the error. I even think webpack-cli should be in dependencies in current version, as webpack could work without webpack-cli, but webpack-dev-server couldn't (for now).\n@SpaceK33z I notice the code, but that code won't exit the process at once. So the error message will be flushed by the following webpack related logs soon, and may not be noticed by users (I couldn't see the error in my console before I scroll back to the very beginning \ud83d\ude05 ). What's more, as I mentioned above, webpack-cli is now a real required package, I think it would be better to add it into dependencies instead of warning in the code.. ",
    "aequasi": "Huh, looks like its actually my development webpack build that just hangs.. Yup, nevermind.. iirc, es-lint was causing issues. I just removed it.. ",
    "abobwhite": "@aequasi What was your issue? I just switched to webpack v2 and I can get the app to run with webpack-dev-server but after I change a file, my console reads webpack: Compiling... and in the browser console, it's [WDS] App updated. Recompiling... and it just hangs. Nothing ever gets reloaded and nothing happens after those lines. I've been fighting this for days.. Thanks - I just figured out the the open-browser-plugin v0.0.4 was causing my issue. Totally unrelated. Cheers!. ",
    "1021683053": "\u4f60\u7684\u914d\u7f6e\u9519\u4e86\uff0c\u9700\u8981\u914d\u7f6e\u4e00\u4e2a\n```javascript\n    devServer: {\n    publicPath: '/static/dist', //\u8fd9\u4e2a\u5730\u5740\u5fc5\u987b\u4e0e\u670d\u52a1\u7aef\u5730\u5740\u76f8\u540c\uff0c\u624d\u80fd\u4ece\u5185\u5b58\u4e2d\u83b7\u53d6\n    proxy: {\n        '/': {\n            target: 'xxxxx.com',\n            secure: false\n        }\n    }\n}\n\n```. ",
    "deiucanta": "@SpaceK33z thanks for the response!\nI have created a repo to showcase this issue better (https://github.com/deiucanta/webpack-electron-issue). Please take a look and let me know if you can pinpoint the cause for this.. Lodash is just a simplified example. In Electron you can import native modules on demand. I don't want to bundle all NodeJS modules. Some of the modules can't be bundled easily because they have dynamic requires.\nThe big question is why the bundle.js works and why the webpack-dev-server doesn't? Both of them using webpack.ExternalsPlugin.. Last time I checked I couldn't load any module that I installed through npm.. ",
    "hendrikras": "Thank you!. ",
    "jquense": "Yeah also suddenly getting 404's. We have a publicPath set but it's not / previously the dev-server handled this fine, and managed to find the files just fine. Suddenly no dice. My hunch is it's change in express tho, as I ran into the same thing suddenly writing a small express server to serve my webpack files just the other idea.. I tried poking around to see and couldn't find anything. I had a very strange issue just this week where I wrote this express server to mimic the dev server but for e2e tests.\n```js\nconst express = require('express');\nconst history = require('connect-history-api-fallback');\nconst httpProxy = require('http-proxy-middleware');\nconst app = express();\nconst { output, devServer } = require('../webpack.config');\nObject.keys(devServer.proxy).forEach((route) => {\n  app.use(httpProxy(route, devServer.proxy[route]));\n});\nconst staticFiles = express.static(devServer.contentBase);\napp.use('*', staticFiles);\napp.use(history({\n  index: devServer.historyApiFallback,\n}));\napp.listen(devServer.port);\n```\nIt was working fine and then suddenly started 404ing a little later\nI eventually had to add:\njs\napp.use(output.publicPath, staticFiles);\nSo maybe its related to the history fallback or proxy, but the culprit seems more like serve-static, (despite not changing recently). hopefully I can put something together. ",
    "louisscruz": "I'm also seeing 404s.\nIn my webpack.config.js:\n```javascript\nvar path = require('path');\nmodule.exports = {\n  context: __dirname,\n  entry: './src/widgets.jsx',\n  output: {\n    path: path.resolve(__dirname, '/dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [\n      {\n        test: [/.jsx?$/],\n        exclude: /node_modules/,\n        loader: 'babel-loader',\n        query: {\n          presets: ['es2015','react']\n        }\n      }\n    ]\n  },\n  devtool: 'source-maps',\n  resolve: {\n    extensions: ['.js', '.jsx', '*']\n  }\n}\n```\nHowever, if I hard code the output as follows, it works as expected:\njavascript\noutput: {\n  filename: './dist/bundle.js'\n}\nAlso, I should mention that everything seems to work find if my bundle is not nested. If, for example, my output is like below (and provide the correct script source), then it can be found:\njavascript\noutput: {\n  filename: './bundle.js'\n}\nIs there something else I need to do? Or is this an identifiable bug? Any help is much appreciated!. One more thing I should add: in the first case, if I just run webpack once, the bundle does indeed show up where expected. . @SpaceK33z Here is a test repository.\n@jquense Does this test repository cover your cases too?. Does this test repository help clarify/reproduce the issue?. ",
    "sanpoChew": "Also getting this error with my bundles unavailable, removing output.path as @louisscruz suggested has fixed it for now. ",
    "serut": "I don't get how to avoid 404, my image /img/background.jpg was correctly retrievable with webpack 1 but not anymore :\nwebpack.config.js\noutput: {\n    // Webpack compilation directory\n    path: `${__dirname}/build`,\n    // Webpack main bundle file name\n    filename: 'bundle.js',\n    // Webpack chunks files namesc\n    chunkFilename: '[id].chunck.js',\n    publicPath: '/',\n  }\n  module: {\n    rules: [\n      {\n        test: /\\.jpg$/,\n        // was  'file-loader?name=/img/[name].[ext]' in my webpack 1 config\n        loader: 'file-loader?name=[name].[ext]&outputPath=./build/img/&publicPath=/img/',\n      },\n    ]\n  },\n  devServer: {\n    port: 3333,\n    // Web directory serve by the webpack dev server\n    contentBase: path.resolve(__dirname, 'build'),\n  }\nCan someone help me?\nNote that if I build my app, the image is inside the right folder.\nEDIT:\nOk the right configuration of file-loader is :\nloader: 'file-loader?name=[name].[ext]&outputPath=./img/',. ",
    "moimael": "I also have the same issue, when I tried to request anything in the publicPath I get a 404 : \n```\n  entry: Object.assign({}, apps()),\noutput: {\n    path: path.join(__dirname, './public/dist'),\n    publicPath: '/galaxy-assets/dist/',\n    filename: production ? '[name].[chunkhash].js' : '[name].[hash].js',\n  },\ndevtool: production ? 'source-map' : 'cheap-module-eval-source-map',\ndevServer: {\n    hot: true,\n    contentBase: path.join(__dirname, './public/dist'),\n    publicPath: '/galaxy-assets/dist/',\n  }\nTried @louisscruz workaround, but it didn't work. Changing the publicPath to / seems to fix it.. I also have the same issue, when I tried to request anything in the publicPath I get a 404 :\n  entry: Object.assign({}, apps()),\noutput: {\n    path: path.join(__dirname, './public/dist'),\n    publicPath: '/galaxy-assets/dist/',\n    filename: production ? '[name].[chunkhash].js' : '[name].[hash].js',\n  },\ndevtool: production ? 'source-map' : 'cheap-module-eval-source-map',\ndevServer: {\n    hot: true,\n    contentBase: path.join(__dirname, './public/dist'),\n    publicPath: '/galaxy-assets/dist/',\n  }\n```\nTried @louisscruz workaround, but it didn't work. Changing the publicPath to / seems to fix it.. ",
    "rolandfung": "Getting the same behavior as @louisscruz, where the bundle is served correctly if output.filename is not nested. Normally I use \nfilename: '/[name]/bundle.js'\nI'm passing an object for config.entry to create named chunks, one for each or our SPA's.\nJust upgraded from WDS 1.16.2 to 2.4.1 and got this behavior. I'm on webpack 2.2.1.. ",
    "mojave27": "For what its worth, I was having this same issue and it was simply an extra empty line at the bottom of the webpack config.  I don't have an explanation, but removing the empty line fixed the 404s.. ",
    "jcklpe": "I'm getting similar errors but erasing the last line did not fix things for me. I'm a designer working my way through a webpack tutorial and even getting the code from the tutorial's repo straight isn't working. \n. ",
    "ben-x9": "I discovered that this works if I append --hot to the CLI command, but it seems I shouldn't have to specify it on the command line if it's already in the config right?. ",
    "alfonsomunozpomer": "I\u2019m seeing something similar. If I use the --hot option I get the following:\n[HMR] Waiting for update signal from WDS...             vendor.bundle.js:111552:2\nSyntaxError: missing ) after argument list              [Learn More]  experimentPicker.bundle.js:21827:169\nTypeError: experimentPicker.render is not a function    [Learn More]  html:106:5\n[WDS] Hot Module Replacement enabled.\nWhen using only hot: true in webpack.config.js, on the other hand, I have no errors and the browser reloads on recompile.\n\"webpack\": \"^2.3.3\",\n\"webpack-dev-server\": \"^2.4.2\",\n\"babel-core\": \"^6.24.0\",\n\"babel-loader\": \"^6.4.1\",\n\"babel-preset-env\": \"^1.3.2\". After a lot of tweaking I managed to get it to work following https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate instead of Webpack\u2019s official guide, which in my opinion is quite confusing and adds some unneeded complications along the way. I\u2019m not entirely sure of my webpack.config.js when I added my comment, but if you\u2019re interested you can have a look at our setup.. I pinned down my error to a bad configuration of babel-loader. I needed to add, besides the react preset, another preset to transform ES6 to browser-compatible JS (env did it for me).. ",
    "williamboman": "This would be really awesome to have in order to re-run e2e tests in watch mode when I change source files.. ",
    "normancarcamo": "Just asking: Is this setting available now?. ",
    "yangkean": "@bebraw , hello, I have implemented the client interface, but console still outputs:\nlog.js:25 Ignored an update to unaccepted module ./src/print.js -> 1\nlog.js:25 [HMR] The following modules couldn't be hot updated: (They would need a full reload!)\nlog.js:25 [HMR]  - ./src/print.js\nthe whole console message is:\nlog.js:23 [HMR] Waiting for update signal from WDS...\nlog.js:23 [HMR] Waiting for update signal from WDS...\nclient?cd17:64 [WDS] Hot Module Replacement enabled.\nclient?cd17:64 [WDS] Hot Module Replacement enabled.\nclient?cd17:67 [WDS] App updated. Recompiling...\nclient?cd17:67 [WDS] App updated. Recompiling...\nclient?cd17:67 [WDS] App updated. Recompiling...\nclient?cd17:67 [WDS] App updated. Recompiling...\nclient?cd17:193 [WDS] App hot update...\nlog.js:23 [HMR] Checking for updates on the server...\nclient?cd17:193 [WDS] App hot update...\nlog.js:23 [HMR] Checking for updates on the server...\nlog.js:25 Ignored an update to unaccepted module ./src/print.js -> 1\n./node_modules/webpack/hot/log.js.module.exports @ log.js:25\nonUnaccepted @ only-dev-server.js:25\nhotApply @ bootstrap e5893b5\u2026:437\n(anonymous) @ only-dev-server.js:20\nlog.js:25 [HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n./node_modules/webpack/hot/log.js.module.exports @ log.js:25\n./node_modules/webpack/hot/log-apply-result.js.module.exports @ log-apply-result.js:12\n(anonymous) @ only-dev-server.js:39\nlog.js:25 [HMR]  - ./src/print.js\n./node_modules/webpack/hot/log.js.module.exports @ log.js:25\n(anonymous) @ log-apply-result.js:14\n./node_modules/webpack/hot/log-apply-result.js.module.exports @ log-apply-result.js:13\n(anonymous) @ only-dev-server.js:39\nlog.js:23 [HMR] Nothing hot updated.\nlog.js:23 [HMR] App is up to date.\nindex.js:8 Accepting the updated printMe module!\nlog.js:23 [HMR] Updated modules:\nlog.js:23 [HMR]  - ./src/print.js\nlog.js:23 [HMR] App is up to date.\nwebpack.config.js:\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst webpack = require('webpack');\nmodule.exports = {\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: path.resolve(__dirname, 'dist'),\n    hotOnly: true,\n  },\n  entry: {\n    app: './src/index.js',\n    print: './src/print.js'\n  },\n  output: {\n    filename: '[name].bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      title: 'Hot Module Replacement',\n      filename: 'index.html',\n    }),\n    new CleanWebpackPlugin(['dist']),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin(),\n  ],\n};\n``` \n./src/index.js:\n```js\nimport _ from 'lodash';\nimport printMe from './print.js';\nif(module.hot) {\n  module.hot.accept('./print.js', function() {\n    console.log('Accepting the updated printMe module!');\ndocument.body.removeChild(element);\nelement = component();\ndocument.body.appendChild(element);\n\n});\n}\nlet element = component();\nfunction component() {\n  const element = document.createElement('div');\n  const btn = document.createElement('button');\nelement.innerHTML = _.join(['Hell', 'webpack'], ' ');\nbtn.innerHTML = 'Click me and check the console!';\n  btn.onclick = printMe;\nelement.appendChild(btn);\nreturn element;\n}\ndocument.body.appendChild(element);\n```\n./src/print.js:\njs\nexport default function printMe() {\n  //console.log('I get called from print.js!');\n  console.log('Updating print.js...')\n}\npackage.json:\njson\n{\n  \"name\": \"webpack-demo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"build\": \"webpack\",\n    \"start\": \"webpack-dev-server --open\"\n  },\n  \"keywords\": [\n    \"webpack\",\n    \"demo\"\n  ],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"lodash\": \"^4.17.4\"\n  },\n  \"devDependencies\": {\n    \"clean-webpack-plugin\": \"^0.1.16\",\n    \"html-webpack-plugin\": \"^2.29.0\",\n    \"webpack\": \"^3.4.1\",\n    \"webpack-dev-server\": \"^2.6.1\"\n  }\n}\nother environment:\n\nnode v7.4.0\nnpm 4.0.5\nmacOS Sierra 10.12\nChrome v59.0.3071.115\n\nplease give me help.. ",
    "swrobel": "+1, this warning is very scary-sounding and Node 7 has come a long way since it was added. Hopefully it's fixed by now, and if so, this warning should be removed.... ",
    "ludovicofischer": "I\u2019m using 2.4.1, which should be the latest. Is this the commit that should fix the issue?. I\u2019ll try. Do you think it could be related to using node 7.6 intead of 6 to run webpack-dev-server? . I can\u2019t reproduce the problem with the simple setup in the repository, but it keeps happening in my own project. \nHere is my webpack config: https://gist.github.com/ludovicofischer/a44babb411341937868fccc3d768a726. I run iwebpack-dev-server with this npm script:\nNODE_ENV=development webpack-dev-server --open\"\nCould eslint-loader interfere with proper reloading? I notice other strange things, like sometimes the error overlay disappears but old page stays (the page does not seem to reload) and some error messages that appear in the console are missing completely in the overlay.. I tested enforce: pre and it doe not change anything. I still cannot reproduce the issue reliably. I tried repeating exactly the same edits and one the overlay updates and another time it gets stuck.. ",
    "codecov[bot]": "Codecov Report\n\nMerging #825 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #825   +/-\n=======================================\n  Coverage   73.17%   73.17%         \n=======================================\n  Files           5        5         \n  Lines         451      451         \n  Branches      143      143         \n=======================================\n  Hits          330      330         \n  Misses        121      121\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cf5dda8...a230754. Read the comment docs.\n. # Codecov Report\nMerging #836 into master will not change coverage.\nThe diff coverage is 100%.\n\n```diff\n@@           Coverage Diff           @@\nmaster     #836   +/-\n=======================================\n  Coverage   72.72%   72.72%         \n=======================================\n  Files           4        4         \n  Lines         407      407         \n  Branches      119      119         \n=======================================\n  Hits          296      296         \n  Misses        111      111\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.65% <100%> (\u00f8) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 42cd23c...a2283e6. Read the comment docs.. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (webpack-1@59348b2). Click here to learn what that means.\nThe diff coverage is 69.53%.\n\n```diff\n@@             Coverage Diff              @@\nwebpack-1     #837   +/-\n============================================\n  Coverage             ?   72.72%         \n============================================\n  Files                ?        4         \n  Lines                ?      407         \n  Branches             ?      119         \n============================================\n  Hits                 ?      296         \n  Misses               ?      111         \n  Partials             ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/addDevServerEntrypoints.js | 12.5% <12.5%> (\u00f8) | |\n| lib/util/createDomain.js | 40% <40%> (\u00f8) | |\n| lib/OptionsValidationError.js | 59.13% <59.13%> (\u00f8) | |\n| lib/Server.js | 82.65% <83.13%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 59348b2...1dc9461. Read the comment docs.. # Codecov Report\nMerging #841 into master will decrease coverage by 0.33%.\nThe diff coverage is n/a.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #841      +/-\n==========================================\n- Coverage   73.05%   72.72%   -0.34%   \n==========================================\n  Files           4        4            \n  Lines         412      407       -5   \n  Branches      120      119       -1   \n==========================================\n- Hits          301      296       -5   \n  Misses        111      111\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.65% <0%> (-0.32%) | :x: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d69559a...d41a8fb. Read the comment docs.. # Codecov Report\nMerging #843 into master will increase coverage by 0.33%.\nThe diff coverage is 100%.\n\n```diff\n@@            Coverage Diff             @@\nmaster     #843      +/-\n==========================================\n+ Coverage   72.72%   73.05%   +0.33%   \n==========================================\n  Files           4        4            \n  Lines         407      412       +5   \n  Branches      119      120       +1   \n==========================================\n+ Hits          296      301       +5   \n  Misses        111      111\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.97% <100%> (+0.31%) | :white_check_mark: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 35a44d1...d24fec3. Read the comment docs.. # Codecov Report\nMerging #856 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #856   +/-\n=======================================\n  Coverage   72.23%   72.23%         \n=======================================\n  Files           4        4         \n  Lines         461      461         \n  Branches      138      138         \n=======================================\n  Hits          333      333         \n  Misses        128      128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9fe53d...eba647e. Read the comment docs.\n. # Codecov Report\nMerging #856 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #856   +/-\n=======================================\n  Coverage   72.23%   72.23%         \n=======================================\n  Files           4        4         \n  Lines         461      461         \n  Branches      138      138         \n=======================================\n  Hits          333      333         \n  Misses        128      128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c9fe53d...eba647e. Read the comment docs.\n. # Codecov Report\nMerging #857 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #857   +/-\n=======================================\n  Coverage   73.05%   73.05%         \n=======================================\n  Files           4        4         \n  Lines         412      412         \n  Branches      120      120         \n=======================================\n  Hits          301      301         \n  Misses        111      111\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60e4727...d33e7fc. Read the comment docs.\n. # Codecov Report\nMerging #857 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #857   +/-\n=======================================\n  Coverage   73.05%   73.05%         \n=======================================\n  Files           4        4         \n  Lines         412      412         \n  Branches      120      120         \n=======================================\n  Hits          301      301         \n  Misses        111      111\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60e4727...d33e7fc. Read the comment docs.\n. # Codecov Report\nMerging #867 into master will increase coverage by 0.93%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #867      +/-\n==========================================\n+ Coverage    71.3%   72.23%   +0.93%   \n==========================================\n  Files           4        4            \n  Lines         453      461       +8   \n  Branches      133      138       +5   \n==========================================\n+ Hits          323      333      +10   \n+ Misses        130      128       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.69% <100%> (+0.51%) | :arrow_up: |\n| lib/OptionsValidationError.js | 60.86% <0%> (+1.73%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a26ab4...932048c. Read the comment docs.\n. # Codecov Report\nMerging #878 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #878   +/-\n=======================================\n  Coverage   73.05%   73.05%         \n=======================================\n  Files           4        4         \n  Lines         412      412         \n  Branches      120      120         \n=======================================\n  Hits          301      301         \n  Misses        111      111\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 60e4727...15c8f5e. Read the comment docs.\n. # Codecov Report\nMerging #881 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #881   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a7fdb06...ca3ca2a. Read the comment docs.\n. # Codecov Report\nMerging #888 into master will increase coverage by 1.6%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #888     +/-\n=========================================\n+ Coverage   72.01%   73.62%   +1.6%   \n=========================================\n  Files           4        4           \n  Lines         436      436           \n  Branches      130      130           \n=========================================\n+ Hits          314      321      +7   \n+ Misses        122      115      -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 83% <100%> (+2.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7d08d1e...f26f985. Read the comment docs.\n. # Codecov Report\nMerging #890 into master will decrease coverage by 1.6%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #890      +/-\n==========================================\n- Coverage   73.62%   72.01%   -1.61%   \n==========================================\n  Files           4        4            \n  Lines         436      436            \n  Branches      130      131       +1   \n==========================================\n- Hits          321      314       -7   \n- Misses        115      122       +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 80.66% <100%> (-2.34%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 662bc31...cca3c5e. Read the comment docs.\n. # Codecov Report\nMerging #896 into master will increase coverage by 0.29%.\nThe diff coverage is 75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #896      +/-\n==========================================\n+ Coverage   73.62%   73.92%   +0.29%   \n==========================================\n  Files           4        4            \n  Lines         436      441       +5   \n  Branches      130      133       +3   \n==========================================\n+ Hits          321      326       +5   \n  Misses        115      115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.62% <75%> (-0.38%) | :arrow_down: |\n| lib/OptionsValidationError.js | 60.86% <0%> (+1.73%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 662bc31...179ed81. Read the comment docs.\n. # Codecov Report\nMerging #899 into master will increase coverage by 0.93%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #899      +/-\n==========================================\n+ Coverage    71.3%   72.23%   +0.93%   \n==========================================\n  Files           4        4            \n  Lines         453      461       +8   \n  Branches      133      138       +5   \n==========================================\n+ Hits          323      333      +10   \n+ Misses        130      128       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.69% <100%> (+0.51%) | :arrow_up: |\n| lib/OptionsValidationError.js | 60.86% <0%> (+1.73%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1a26ab4...0085961. Read the comment docs.\n. # Codecov Report\nMerging #901 into master will decrease coverage by 0.09%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #901     +/-\n=========================================\n- Coverage   72.23%   72.13%   -0.1%   \n=========================================\n  Files           4        4           \n  Lines         461      463      +2   \n  Branches      138      139      +1   \n=========================================\n+ Hits          333      334      +1   \n- Misses        128      129      +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 42.85% <50%> (+2.85%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d5f252...345201e. Read the comment docs.\n. # Codecov Report\nMerging #907 into master will decrease coverage by 0.12%.\nThe diff coverage is 91.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #907      +/-\n==========================================\n- Coverage   72.23%   72.11%   -0.13%   \n==========================================\n  Files           4        4            \n  Lines         461      459       -2   \n  Branches      138      136       -2   \n==========================================\n- Hits          333      331       -2   \n  Misses        128      128\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.56% <91.66%> (-0.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d5f252...3e12a11. Read the comment docs.\n. # Codecov Report\nMerging #911 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #911      +/-\n==========================================\n+ Coverage   72.25%   72.31%   +0.05%   \n==========================================\n  Files           4        4            \n  Lines         465      466       +1   \n  Branches      140      141       +1   \n==========================================\n+ Hits          336      337       +1   \n  Misses        129      129\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.87% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1cf4359...4d87a6d. Read the comment docs.\n. # Codecov Report\nMerging #911 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #911      +/-\n==========================================\n+ Coverage   72.25%   72.31%   +0.05%   \n==========================================\n  Files           4        4            \n  Lines         465      466       +1   \n  Branches      140      141       +1   \n==========================================\n+ Hits          336      337       +1   \n  Misses        129      129\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.87% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1cf4359...4d87a6d. Read the comment docs.\n. # Codecov Report\nMerging #917 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #917   +/-\n=======================================\n  Coverage   72.23%   72.23%         \n=======================================\n  Files           4        4         \n  Lines         461      461         \n  Branches      138      138         \n=======================================\n  Hits          333      333         \n  Misses        128      128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ca97dd...aa6f4ab. Read the comment docs.\n. # Codecov Report\nMerging #917 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #917   +/-\n=======================================\n  Coverage   72.23%   72.23%         \n=======================================\n  Files           4        4         \n  Lines         461      461         \n  Branches      138      138         \n=======================================\n  Hits          333      333         \n  Misses        128      128\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ca97dd...aa6f4ab. Read the comment docs.\n. # Codecov Report\nMerging #918 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #918   +/-\n======================================\n  Coverage    71.3%   71.3%         \n======================================\n  Files           4       4         \n  Lines         453     453         \n  Branches      133     133         \n======================================\n  Hits          323     323         \n  Misses        130     130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a7693c...c9fddf7. Read the comment docs.\n. # Codecov Report\nMerging #918 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster    #918   +/-\n======================================\n  Coverage    71.3%   71.3%         \n======================================\n  Files           4       4         \n  Lines         453     453         \n  Branches      133     133         \n======================================\n  Hits          323     323         \n  Misses        130     130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9a7693c...c9fddf7. Read the comment docs.\n. # Codecov Report\nMerging #921 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #921   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2041b11...6281af7. Read the comment docs.\n. # Codecov Report\nMerging #921 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #921   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2041b11...6281af7. Read the comment docs.\n. # Codecov Report\nMerging #921 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #921   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2041b11...6281af7. Read the comment docs.\n. # Codecov Report\nMerging #925 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #925   +/-\n=======================================\n  Coverage   73.62%   73.62%         \n=======================================\n  Files           4        4         \n  Lines         436      436         \n  Branches      130      130         \n=======================================\n  Hits          321      321         \n  Misses        115      115\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 662bc31...2b371ff. Read the comment docs.\n. # Codecov Report\nMerging #925 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #925   +/-\n=======================================\n  Coverage   73.62%   73.62%         \n=======================================\n  Files           4        4         \n  Lines         436      436         \n  Branches      130      130         \n=======================================\n  Hits          321      321         \n  Misses        115      115\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 662bc31...2b371ff. Read the comment docs.\n. # Codecov Report\nMerging #958 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #958   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5b6202...de11014. Read the comment docs.\n. # Codecov Report\nMerging #973 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #973   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09ffe23...7c2341f. Read the comment docs.\n. # Codecov Report\nMerging #975 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster     #975   +/-\n=======================================\n  Coverage   72.13%   72.13%         \n=======================================\n  Files           4        4         \n  Lines         463      463         \n  Branches      139      139         \n=======================================\n  Hits          334      334         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 047a595...319d8fc. Read the comment docs.\n. # Codecov Report\nMerging #1039 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1039   +/-\n=======================================\n  Coverage   72.25%   72.25%         \n=======================================\n  Files           4        4         \n  Lines         465      465         \n  Branches      139      139         \n=======================================\n  Hits          336      336         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update da188a6...483fd49. Read the comment docs.\n. # Codecov Report\nMerging #1043 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1043   +/-\n=======================================\n  Coverage   72.25%   72.25%         \n=======================================\n  Files           4        4         \n  Lines         465      465         \n  Branches      139      139         \n=======================================\n  Hits          336      336         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update da188a6...c0898cb. Read the comment docs.\n. # Codecov Report\nMerging #1047 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1047   +/-\n=======================================\n  Coverage   72.25%   72.25%         \n=======================================\n  Files           4        4         \n  Lines         465      465         \n  Branches      139      139         \n=======================================\n  Hits          336      336         \n  Misses        129      129\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.81% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2cf847...38aed33. Read the comment docs.\n. # Codecov Report\nMerging #1050 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1050   +/-\n=======================================\n  Coverage   72.25%   72.25%         \n=======================================\n  Files           4        4         \n  Lines         465      465         \n  Branches      139      139         \n=======================================\n  Hits          336      336         \n  Misses        129      129\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2cf847...9a6e55b. Read the comment docs.\n. # Codecov Report\nMerging #1053 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1053      +/-\n==========================================\n+ Coverage   72.25%   72.31%   +0.05%   \n==========================================\n  Files           4        4            \n  Lines         465      466       +1   \n  Branches      139      139            \n==========================================\n+ Hits          336      337       +1   \n  Misses        129      129\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.87% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b4729f...7095f82. Read the comment docs.\n. # Codecov Report\nMerging #1053 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1053      +/-\n==========================================\n+ Coverage   72.25%   72.31%   +0.05%   \n==========================================\n  Files           4        4            \n  Lines         465      466       +1   \n  Branches      139      139            \n==========================================\n+ Hits          336      337       +1   \n  Misses        129      129\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.87% <100%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b4729f...7095f82. Read the comment docs.\n. # Codecov Report\nMerging #1054 into master will decrease coverage by 0.16%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1054      +/-\n==========================================\n- Coverage   73.54%   73.37%   -0.17%   \n==========================================\n  Files           5        5            \n  Lines         446      447       +1   \n  Branches      140      141       +1   \n==========================================\n  Hits          328      328            \n- Misses        118      119       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 37.5% <25%> (-5.36%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 69239ce...89cdd00. Read the comment docs.\n. # Codecov Report\nMerging #1054 into master will decrease coverage by 0.16%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1054      +/-\n==========================================\n- Coverage   73.54%   73.37%   -0.17%   \n==========================================\n  Files           5        5            \n  Lines         446      447       +1   \n  Branches      140      141       +1   \n==========================================\n  Hits          328      328            \n- Misses        118      119       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 37.5% <25%> (-5.36%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 69239ce...89cdd00. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (beta@1c9881e). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nbeta   #1055   +/-\n======================================\n  Coverage        ?   73.6%         \n======================================\n  Files           ?       5         \n  Lines           ?     447         \n  Branches        ?     141         \n======================================\n  Hits            ?     329         \n  Misses          ?     118         \n  Partials        ?       0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c9881e...a1e7802. Read the comment docs.\n. # Codecov Report\nMerging #1058 into master will increase coverage by 1.59%.\nThe diff coverage is 73.18%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1058      +/-\n==========================================\n+ Coverage   71.94%   73.54%   +1.59%   \n==========================================\n  Files           4        5       +1   \n  Lines         467      446      -21   \n  Branches      140      140            \n==========================================\n- Hits          336      328       -8   \n+ Misses        131      118      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/polyfills.js | 100% <100%> (\u00f8) | |\n| lib/util/createDomain.js | 42.85% <33.33%> (\u00f8) | :arrow_up: |\n| lib/OptionsValidationError.js | 62.72% <62.38%> (+1.85%) | :arrow_up: |\n| lib/util/addDevServerEntrypoints.js | 15.38% <8.33%> (+2.88%) | :arrow_up: |\n| lib/Server.js | 80.25% <80.06%> (+0.92%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e6ccbaf...a968d70. Read the comment docs.\n. # Codecov Report\nMerging #1060 into master will decrease coverage by 0.04%.\nThe diff coverage is 37.03%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1060      +/-\n==========================================\n- Coverage   73.37%   73.33%   -0.05%   \n==========================================\n  Files           5        5            \n  Lines         447      450       +3   \n  Branches      141      142       +1   \n==========================================\n+ Hits          328      330       +2   \n- Misses        119      120       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 80.12% <37.03%> (-0.13%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1201ac1...514b188. Read the comment docs.\n. # Codecov Report\nMerging #1061 into master will increase coverage by 0.35%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1061      +/-\n==========================================\n+ Coverage   73.17%   73.52%   +0.35%   \n==========================================\n  Files           5        5            \n  Lines         451      457       +6   \n  Branches      143      144       +1   \n==========================================\n+ Hits          330      336       +6   \n  Misses        121      121\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 80.24% <100%> (+0.37%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f00fcb3...2c2192b. Read the comment docs.\n. # Codecov Report\nMerging #1063 into master will decrease coverage by 0.99%.\nThe diff coverage is 22.22%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1063   +/-\n=======================================\n- Coverage   73.17%   72.17%   -1%   \n=======================================\n  Files           5        5         \n  Lines         451      460    +9   \n  Branches      143      147    +4   \n=======================================\n+ Hits          330      332    +2   \n- Misses        121      128    +7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.28% <22.22%> (-1.59%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d3a650f...a0fc7ad. Read the comment docs.\n. # Codecov Report\nMerging #1066 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1066   +/-\n=======================================\n  Coverage   73.17%   73.17%         \n=======================================\n  Files           5        5         \n  Lines         451      451         \n  Branches      143      143         \n=======================================\n  Hits          330      330         \n  Misses        121      121\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f00fcb3...facb8ea. Read the comment docs.\n. # Codecov Report\nMerging #1068 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1068   +/-\n=======================================\n  Coverage   73.17%   73.17%         \n=======================================\n  Files           5        5         \n  Lines         451      451         \n  Branches      143      143         \n=======================================\n  Hits          330      330         \n  Misses        121      121\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f166177...234375b. Read the comment docs.\n. # Codecov Report\nMerging #1070 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1070   +/-\n=======================================\n  Coverage   73.17%   73.17%         \n=======================================\n  Files           5        5         \n  Lines         451      451         \n  Branches      143      143         \n=======================================\n  Hits          330      330         \n  Misses        121      121\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f00fcb3...0a5d47f. Read the comment docs.\n. # Codecov Report\nMerging #1079 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1079   +/-\n=======================================\n  Coverage   72.39%   72.39%         \n=======================================\n  Files           5        5         \n  Lines         460      460         \n  Branches      147      147         \n=======================================\n  Hits          333      333         \n  Misses        127      127\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 37.5% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e61972a...724b40f. Read the comment docs.\n. # Codecov Report\nMerging #1088 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1088   +/-\n=======================================\n  Coverage   71.92%   71.92%         \n=======================================\n  Files           5        5         \n  Lines         463      463         \n  Branches      148      148         \n=======================================\n  Hits          333      333         \n  Misses        130      130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6e18fa6...bc1db0b. Read the comment docs.\n. # Codecov Report\nMerging #1089 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1089   +/-\n=======================================\n  Coverage   71.92%   71.92%         \n=======================================\n  Files           5        5         \n  Lines         463      463         \n  Branches      148      148         \n=======================================\n  Hits          333      333         \n  Misses        130      130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6e18fa6...de2aad4. Read the comment docs.\n. # Codecov Report\nMerging #1096 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1096   +/-\n=======================================\n  Coverage   71.92%   71.92%         \n=======================================\n  Files           5        5         \n  Lines         463      463         \n  Branches      148      148         \n=======================================\n  Hits          333      333         \n  Misses        130      130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bad7ed5...0cd7039. Read the comment docs.\n. # Codecov Report\nMerging #1097 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1097   +/-\n=======================================\n  Coverage   71.92%   71.92%         \n=======================================\n  Files           5        5         \n  Lines         463      463         \n  Branches      148      148         \n=======================================\n  Hits          333      333         \n  Misses        130      130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e24ac4...631c24e. Read the comment docs.\n. # Codecov Report\nMerging #1098 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1098   +/-\n=======================================\n  Coverage   71.92%   71.92%         \n=======================================\n  Files           5        5         \n  Lines         463      463         \n  Branches      148      148         \n=======================================\n  Hits          333      333         \n  Misses        130      130\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.59% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc22935...aa42892. Read the comment docs.\n. # Codecov Report\nMerging #1102 into beta will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nbeta    #1102   +/-\n=======================================\n  Coverage   71.92%   71.92%         \n=======================================\n  Files           5        5         \n  Lines         463      463         \n  Branches      148      148         \n=======================================\n  Hits          333      333         \n  Misses        130      130\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3e24ac4...c3e9320. Read the comment docs.\n. # Codecov Report\nMerging #1108 into master will increase coverage by 0.08%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1108      +/-\n=========================================\n+ Coverage   71.92%     72%   +0.08%   \n=========================================\n  Files           5       5            \n  Lines         463     468       +5   \n  Branches      148     151       +3   \n=========================================\n+ Hits          333     337       +4   \n- Misses        130     131       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.61% <83.33%> (+0.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8bc6daa...40c6ece. Read the comment docs.\n. # Codecov Report\nMerging #1115 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1115   +/-\n======================================\n  Coverage    76.8%   76.8%         \n======================================\n  Files           5       5         \n  Lines         470     470         \n  Branches      151     151         \n======================================\n  Hits          361     361         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c490b24...1170d8f. Read the comment docs.\n. # Codecov Report\nMerging #1117 into master will increase coverage by 5.22%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1117      +/-\n=========================================\n+ Coverage   71.58%   76.8%   +5.22%   \n=========================================\n  Files           5       5            \n  Lines         468     470       +2   \n  Branches      150     151       +1   \n=========================================\n+ Hits          335     361      +26   \n+ Misses        133     109      -24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 100% <100%> (+62.5%) | :arrow_up: |\n| lib/Server.js | 83.73% <0%> (+5.72%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ee7231b...e170f18. Read the comment docs.\n. # Codecov Report\nMerging #1129 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1129   +/-\n=======================================\n  Coverage   71.58%   71.58%         \n=======================================\n  Files           5        5         \n  Lines         468      468         \n  Branches      151      151         \n=======================================\n  Hits          335      335         \n  Misses        133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 37.5% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a7f26b...852658d. Read the comment docs.\n. # Codecov Report\nMerging #1129 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1129   +/-\n=======================================\n  Coverage   71.58%   71.58%         \n=======================================\n  Files           5        5         \n  Lines         468      468         \n  Branches      151      151         \n=======================================\n  Hits          335      335         \n  Misses        133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createDomain.js | 37.5% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a7f26b...852658d. Read the comment docs.\n. # Codecov Report\nMerging #1134 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1134   +/-\n=======================================\n  Coverage   71.58%   71.58%         \n=======================================\n  Files           5        5         \n  Lines         468      468         \n  Branches      151      150    -1   \n=======================================\n  Hits          335      335         \n  Misses        133      133\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/polyfills.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5a7f26b...a67d527. Read the comment docs.\n. # Codecov Report\nMerging #1137 into beta will decrease coverage by 0.12%.\nThe diff coverage is 69.23%.\n\n\n```diff\n@@            Coverage Diff             @@\nbeta    #1137      +/-\n==========================================\n- Coverage   76.74%   76.61%   -0.13%   \n==========================================\n  Files           5        5            \n  Lines         473      479       +6   \n  Branches      152      153       +1   \n==========================================\n+ Hits          363      367       +4   \n- Misses        110      112       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/addDevServerEntrypoints.js | 10.52% <0%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 83.72% <75%> (-0.31%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bc8f3c5...543321b. Read the comment docs.\n. # Codecov Report\nMerging #1148 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1148   +/-\n======================================\n  Coverage    76.8%   76.8%         \n======================================\n  Files           5       5         \n  Lines         470     470         \n  Branches      151     151         \n======================================\n  Hits          361     361         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32412bb...fe5e48c. Read the comment docs.\n. # Codecov Report\nMerging #1148 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1148   +/-\n======================================\n  Coverage    76.8%   76.8%         \n======================================\n  Files           5       5         \n  Lines         470     470         \n  Branches      151     151         \n======================================\n  Hits          361     361         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32412bb...fe5e48c. Read the comment docs.\n. # Codecov Report\nMerging #1152 into beta will decrease coverage by 2.44%.\nThe diff coverage is 77.41%.\n\n\n```diff\n@@            Coverage Diff             @@\nbeta    #1152      +/-\n==========================================\n- Coverage   76.61%   74.17%   -2.45%   \n==========================================\n  Files           5       10       +5   \n  Lines         479      546      +67   \n  Branches      153      142      -11   \n==========================================\n+ Hits          367      405      +38   \n- Misses        112      141      +29\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/plugins.js | 62.06% <62.06%> (\u00f8) | |\n| lib/util.js | 65.43% <65.43%> (\u00f8) | |\n| lib/DevServer.js | 68.96% <68.96%> (\u00f8) | |\n| lib/server.js | 81.08% <81.08%> (\u00f8) | |\n| lib/log.js | 83.33% <83.33%> (\u00f8) | |\n| lib/features.js | 83.95% <83.95%> (\u00f8) | |\n| lib/app.js | 87.09% <87.09%> (\u00f8) | |\n| lib/proxy.js | 95.55% <95.55%> (\u00f8) | |\n| lib/OptionsValidationError.js | 60.9% <0%> (-2.73%) | :arrow_down: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77d6392...0db9f70. Read the comment docs.\n. # Codecov Report\nMerging #1152 into beta will decrease coverage by 2.44%.\nThe diff coverage is 77.41%.\n\n\n```diff\n@@            Coverage Diff             @@\nbeta    #1152      +/-\n==========================================\n- Coverage   76.61%   74.17%   -2.45%   \n==========================================\n  Files           5       10       +5   \n  Lines         479      546      +67   \n  Branches      153      142      -11   \n==========================================\n+ Hits          367      405      +38   \n- Misses        112      141      +29\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/plugins.js | 62.06% <62.06%> (\u00f8) | |\n| lib/util.js | 65.43% <65.43%> (\u00f8) | |\n| lib/DevServer.js | 68.96% <68.96%> (\u00f8) | |\n| lib/server.js | 81.08% <81.08%> (\u00f8) | |\n| lib/log.js | 83.33% <83.33%> (\u00f8) | |\n| lib/features.js | 83.95% <83.95%> (\u00f8) | |\n| lib/app.js | 87.09% <87.09%> (\u00f8) | |\n| lib/proxy.js | 95.55% <95.55%> (\u00f8) | |\n| lib/OptionsValidationError.js | 60.9% <0%> (-2.73%) | :arrow_down: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77d6392...0db9f70. Read the comment docs.\n. # Codecov Report\nMerging #1157 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1157   +/-\n======================================\n  Coverage    76.8%   76.8%         \n======================================\n  Files           5       5         \n  Lines         470     470         \n  Branches      151     151         \n======================================\n  Hits          361     361         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d72858...93cb3dc. Read the comment docs.\n. # Codecov Report\nMerging #1157 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1157   +/-\n======================================\n  Coverage    76.8%   76.8%         \n======================================\n  Files           5       5         \n  Lines         470     470         \n  Branches      151     151         \n======================================\n  Hits          361     361         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d72858...93cb3dc. Read the comment docs.\n. # Codecov Report\nMerging #1159 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1159   +/-\n======================================\n  Coverage    76.9%   76.9%         \n======================================\n  Files           5       5         \n  Lines         472     472         \n  Branches      151     151         \n======================================\n  Hits          363     363         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2fef58...a1718a1. Read the comment docs.\n. # Codecov Report\nMerging #1159 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1159   +/-\n======================================\n  Coverage    76.9%   76.9%         \n======================================\n  Files           5       5         \n  Lines         472     472         \n  Branches      151     151         \n======================================\n  Hits          363     363         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2fef58...a1718a1. Read the comment docs.\n. # Codecov Report\nMerging #1163 into master will decrease coverage by 0.59%.\nThe diff coverage is 28.57%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1163     +/-\n=========================================\n- Coverage    76.9%   76.31%   -0.6%   \n=========================================\n  Files           5        5           \n  Lines         472      477      +5   \n  Branches      151      154      +3   \n=========================================\n+ Hits          363      364      +1   \n- Misses        109      113      +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.89% <28.57%> (-0.95%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2e501c8...a0a53a5. Read the comment docs.\n. # Codecov Report\nMerging #1174 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1174   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ef18fc8...3b2a76a. Read the comment docs.\n. # Codecov Report\nMerging #1175 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff           @@\nmaster   #1175   +/-\n======================================\n  Coverage    76.9%   76.9%         \n======================================\n  Files           5       5         \n  Lines         472     472         \n  Branches      151     151         \n======================================\n  Hits          363     363         \n  Misses        109     109\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2e501c8...cb24be4. Read the comment docs.\n. # Codecov Report\nMerging #1178 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1178   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e89442...3f923ad. Read the comment docs.\n. # Codecov Report\nMerging #1181 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1181   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e8964d1...e84ef2c. Read the comment docs.\n. # Codecov Report\nMerging #1182 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1182   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a9327e5...f3ee5df. Read the comment docs.\n. # Codecov Report\nMerging #1183 into master will decrease coverage by 0.16%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1183      +/-\n==========================================\n- Coverage    76.9%   76.74%   -0.17%   \n==========================================\n  Files           5        5            \n  Lines         472      473       +1   \n  Branches      151      151            \n==========================================\n  Hits          363      363            \n- Misses        109      110       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 83.58% <50%> (-0.26%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2e501c8...28a44d9. Read the comment docs.\n. # Codecov Report\nMerging #1194 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1194   +/-\n=======================================\n  Coverage   76.74%   76.74%         \n=======================================\n  Files           5        5         \n  Lines         473      473         \n  Branches      151      151         \n=======================================\n  Hits          363      363         \n  Misses        110      110\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b10c9eb...11ba7f3. Read the comment docs.\n. # Codecov Report\nMerging #1199 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1199   +/-\n=======================================\n  Coverage   76.74%   76.74%         \n=======================================\n  Files           5        5         \n  Lines         473      473         \n  Branches      151      151         \n=======================================\n  Hits          363      363         \n  Misses        110      110\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a11122...71ecca8. Read the comment docs.\n. # Codecov Report\nMerging #1209 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1209   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32c3ceb...4e56847. Read the comment docs.\n. # Codecov Report\nMerging #1209 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1209   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32c3ceb...4e56847. Read the comment docs.\n. # Codecov Report\nMerging #1218 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1218   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      153      154    +1   \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.89% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2719590...26b30b5. Read the comment docs.\n. # Codecov Report\nMerging #1223 into next will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nnext    #1223      +/-\n==========================================\n- Coverage   73.35%   73.34%   -0.02%   \n==========================================\n  Files          10       10            \n  Lines         578      574       -4   \n  Branches      147      147            \n==========================================\n- Hits          424      421       -3   \n+ Misses        154      153       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/DevServer.js | 69.38% <0%> (-0.23%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 108989c...2d6ab99. Read the comment docs.\n. # Codecov Report\nMerging #1236 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1236   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fd3c176...e804e1d. Read the comment docs.\n. # Codecov Report\nMerging #1238 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1238   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a168b81...aaca75c. Read the comment docs.\n. # Codecov Report\nMerging #1241 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1241   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a9327e5...8060b25. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@ce30460). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1242   +/-\n=========================================\n  Coverage          ?   76.31%         \n=========================================\n  Files             ?        5         \n  Lines             ?      477         \n  Branches          ?      154         \n=========================================\n  Hits              ?      364         \n  Misses            ?      113         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ce30460...cbec436. Read the comment docs.\n. # Codecov Report\nMerging #1253 into next will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nnext    #1253   +/-\n=======================================\n  Coverage   73.39%   73.39%         \n=======================================\n  Files           9        9         \n  Lines         560      560         \n  Branches      145      145         \n=======================================\n  Hits          411      411         \n  Misses        149      149\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2463030...0d11dcc. Read the comment docs.\n. # Codecov Report\nMerging #1255 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1255   +/-\n=======================================\n  Coverage   76.31%   76.31%         \n=======================================\n  Files           5        5         \n  Lines         477      477         \n  Branches      154      154         \n=======================================\n  Hits          364      364         \n  Misses        113      113\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aab49de...a659398. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@17355f0). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1258   +/-\n=========================================\n  Coverage          ?   75.72%         \n=========================================\n  Files             ?        5         \n  Lines             ?      482         \n  Branches          ?      156         \n=========================================\n  Hits              ?      365         \n  Misses            ?      117         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 17355f0...aabf7a3. Read the comment docs.\n. # Codecov Report\nMerging #1262 into next will decrease coverage by 0.54%.\nThe diff coverage is 36.84%.\n\n\n```diff\n@@            Coverage Diff             @@\nnext    #1262      +/-\n==========================================\n- Coverage   73.39%   72.84%   -0.55%   \n==========================================\n  Files           9        9            \n  Lines         560      545      -15   \n  Branches      145      140       -5   \n==========================================\n- Hits          411      397      -14   \n+ Misses        149      148       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util.js | 47.61% <0%> (-17.39%) | :arrow_down: |\n| lib/plugins.js | 56.25% <50%> (+0.36%) | :arrow_up: |\n| lib/DevServer.js | 85.18% <61.53%> (+13.46%) | :arrow_up: |\n| lib/features.js | 80.64% <66.66%> (+0.21%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2463030...f386bbe. Read the comment docs.\n. # Codecov Report\nMerging #1273 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1273   +/-\n=======================================\n  Coverage   75.72%   75.72%         \n=======================================\n  Files           5        5         \n  Lines         482      482         \n  Branches      156      156         \n=======================================\n  Hits          365      365         \n  Misses        117      117\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c1ed7a...b78e249. Read the comment docs.\n. # Codecov Report\nMerging #1275 into master will increase coverage by 0.05%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1275      +/-\n==========================================\n+ Coverage   75.72%   75.77%   +0.05%   \n==========================================\n  Files           5        5            \n  Lines         482      483       +1   \n  Branches      156      155       -1   \n==========================================\n+ Hits          365      366       +1   \n  Misses        117      117\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <66.66%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c1ed7a...6bb90e4. Read the comment docs.\n. # Codecov Report\nMerging #1276 into master will increase coverage by 0.05%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1276      +/-\n==========================================\n+ Coverage   75.72%   75.77%   +0.05%   \n==========================================\n  Files           5        5            \n  Lines         482      483       +1   \n  Branches      156      155       -1   \n==========================================\n+ Hits          365      366       +1   \n  Misses        117      117\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <66.66%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...88b89bb. Read the comment docs.\n. # Codecov Report\nMerging #1276 into master will increase coverage by 0.05%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1276      +/-\n==========================================\n+ Coverage   75.72%   75.77%   +0.05%   \n==========================================\n  Files           5        5            \n  Lines         482      483       +1   \n  Branches      156      155       -1   \n==========================================\n+ Hits          365      366       +1   \n  Misses        117      117\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <66.66%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...88b89bb. Read the comment docs.\n. # Codecov Report\nMerging #1276 into master will increase coverage by 0.05%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1276      +/-\n==========================================\n+ Coverage   75.72%   75.77%   +0.05%   \n==========================================\n  Files           5        5            \n  Lines         482      483       +1   \n  Branches      156      155       -1   \n==========================================\n+ Hits          365      366       +1   \n  Misses        117      117\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <66.66%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...88b89bb. Read the comment docs.\n. # Codecov Report\nMerging #1277 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1277   +/-\n=======================================\n  Coverage   75.72%   75.72%         \n=======================================\n  Files           5        5         \n  Lines         482      482         \n  Branches      156      156         \n=======================================\n  Hits          365      365         \n  Misses        117      117\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...ff3630d. Read the comment docs.\n. # Codecov Report\nMerging #1279 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1279   +/-\n=======================================\n  Coverage   75.72%   75.72%         \n=======================================\n  Files           5        5         \n  Lines         482      482         \n  Branches      156      156         \n=======================================\n  Hits          365      365         \n  Misses        117      117\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8c1ed7a...377b146. Read the comment docs.\n. # Codecov Report\nMerging #1289 into master will increase coverage by 2.78%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1289      +/-\n==========================================\n+ Coverage   75.72%   78.51%   +2.78%   \n==========================================\n  Files           5        5            \n  Lines         482      484       +2   \n  Branches      156      158       +2   \n==========================================\n+ Hits          365      380      +15   \n+ Misses        117      104      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <100%> (+0.05%) | :arrow_up: |\n| lib/util/addDevServerEntrypoints.js | 94.11% <100%> (+81.61%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...a4f35e3. Read the comment docs.\n. # Codecov Report\nMerging #1289 into master will increase coverage by 2.78%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1289      +/-\n==========================================\n+ Coverage   75.72%   78.51%   +2.78%   \n==========================================\n  Files           5        5            \n  Lines         482      484       +2   \n  Branches      156      158       +2   \n==========================================\n+ Hits          365      380      +15   \n+ Misses        117      104      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <100%> (+0.05%) | :arrow_up: |\n| lib/util/addDevServerEntrypoints.js | 94.11% <100%> (+81.61%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...a4f35e3. Read the comment docs.\n. # Codecov Report\nMerging #1289 into master will increase coverage by 2.78%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1289      +/-\n==========================================\n+ Coverage   75.72%   78.51%   +2.78%   \n==========================================\n  Files           5        5            \n  Lines         482      484       +2   \n  Branches      156      158       +2   \n==========================================\n+ Hits          365      380      +15   \n+ Misses        117      104      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.02% <100%> (+0.05%) | :arrow_up: |\n| lib/util/addDevServerEntrypoints.js | 94.11% <100%> (+81.61%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 83c1625...a4f35e3. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (webpack-4@9852a5f). Click here to learn what that means.\nThe diff coverage is 79.51%.\n\n\n```diff\n@@             Coverage Diff              @@\nwebpack-4    #1310   +/-\n============================================\n  Coverage             ?   75.89%         \n============================================\n  Files                ?        9         \n  Lines                ?      560         \n  Branches             ?      146         \n============================================\n  Hits                 ?      425         \n  Misses               ?      135         \n  Partials             ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/OptionsValidationError.js | 60.9% <100%> (\u00f8) | |\n| lib/plugins.js | 55.88% <55.88%> (\u00f8) | |\n| lib/DevServer.js | 71.71% <71.71%> (\u00f8) | |\n| lib/features.js | 80.43% <80.43%> (\u00f8) | |\n| lib/server.js | 80.55% <80.55%> (\u00f8) | |\n| lib/util.js | 82.5% <82.5%> (\u00f8) | |\n| lib/app.js | 87.09% <87.09%> (\u00f8) | |\n| lib/proxy.js | 95.55% <95.55%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9852a5f...c99553a. Read the comment docs.\n. # Codecov Report\nMerging #1322 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1322   +/-\n=======================================\n  Coverage   78.97%   78.97%         \n=======================================\n  Files           5        5         \n  Lines         490      490         \n  Branches      158      158         \n=======================================\n  Hits          387      387         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f76182c...fc5f7c9. Read the comment docs.\n. # Codecov Report\nMerging #1322 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1322   +/-\n=======================================\n  Coverage   78.97%   78.97%         \n=======================================\n  Files           5        5         \n  Lines         490      490         \n  Branches      158      158         \n=======================================\n  Hits          387      387         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f76182c...fc5f7c9. Read the comment docs.\n. # Codecov Report\nMerging #1329 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1329   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94398c4...691de8e. Read the comment docs.\n. # Codecov Report\nMerging #1331 into master will not change coverage.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1331   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.26% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f2db057...161c5a8. Read the comment docs.\n. # Codecov Report\nMerging #1338 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1338      +/-\n==========================================\n+ Coverage   74.02%   74.06%   +0.03%   \n==========================================\n  Files          10       10            \n  Lines         670      671       +1   \n==========================================\n+ Hits          496      497       +1   \n  Misses        174      174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fa96a76...01f2413. Read the comment docs.\n. # Codecov Report\nMerging #1344 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1344   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a7f7d5...3ea0941. Read the comment docs.\n. # Codecov Report\nMerging #1350 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1350   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1bd264...3af828e. Read the comment docs.\n. # Codecov Report\nMerging #1362 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1362   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.26% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3a7f7d5...40000a9. Read the comment docs.\n. # Codecov Report\nMerging #1372 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1372   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 69a90c7...4a83325. Read the comment docs.\n. # Codecov Report\nMerging #1392 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1392   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 69a90c7...f692948. Read the comment docs.\n. # Codecov Report\nMerging #1398 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1398   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33be88d...2f5f623. Read the comment docs.\n. # Codecov Report\nMerging #1401 into master will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1401      +/-\n==========================================\n+ Coverage   79.07%   79.14%   +0.07%   \n==========================================\n  Files           6        6            \n  Lines         497      494       -3   \n  Branches      161      160       -1   \n==========================================\n- Hits          393      391       -2   \n+ Misses        104      103       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/addDevServerEntrypoints.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 82.26% <0%> (+0.29%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2a5e2f6...7c92138. Read the comment docs.\n. # Codecov Report\nMerging #1402 into master will decrease coverage by 0.11%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1402      +/-\n==========================================\n- Coverage   79.14%   79.03%   -0.12%   \n==========================================\n  Files           6        6            \n  Lines         494      496       +2   \n  Branches      160      161       +1   \n==========================================\n+ Hits          391      392       +1   \n- Misses        103      104       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.08% <50%> (-0.19%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33be88d...30d045b. Read the comment docs.\n. # Codecov Report\nMerging #1403 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1403   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33be88d...f41d696. Read the comment docs.\n. # Codecov Report\nMerging #1409 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1409   +/-\n=======================================\n  Coverage   78.94%   78.94%         \n=======================================\n  Files           5        5         \n  Lines         494      494         \n  Branches      161      161         \n=======================================\n  Hits          390      390         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 807c846...f37402e. Read the comment docs.\n. # Codecov Report\nMerging #1414 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1414   +/-\n=======================================\n  Coverage   79.14%   79.14%         \n=======================================\n  Files           6        6         \n  Lines         494      494         \n  Branches      160      160         \n=======================================\n  Hits          391      391         \n  Misses        103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.26% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33be88d...b81847f. Read the comment docs.\n. # Codecov Report\nMerging #1416 into master will increase coverage by 0.12%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1416      +/-\n==========================================\n+ Coverage   79.14%   79.27%   +0.12%   \n==========================================\n  Files           6        6            \n  Lines         494      497       +3   \n  Branches      160      161       +1   \n==========================================\n+ Hits          391      394       +3   \n  Misses        103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33be88d...c794f60. Read the comment docs.\n. # Codecov Report\nMerging #1425 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1425   +/-\n=======================================\n  Coverage   79.27%   79.27%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          394      394         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...96271da. Read the comment docs.\n. # Codecov Report\nMerging #1425 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1425   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2a5e2f6...560fa45. Read the comment docs.\n. # Codecov Report\nMerging #1426 into master will increase coverage by 0.15%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1426      +/-\n==========================================\n+ Coverage   79.27%   79.43%   +0.15%   \n==========================================\n  Files           6        6            \n  Lines         497      496       -1   \n  Branches      161      159       -2   \n==========================================\n  Hits          394      394            \n+ Misses        103      102       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.5% <25%> (+0.23%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...1bf9dea. Read the comment docs.\n. # Codecov Report\nMerging #1427 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1427   +/-\n=======================================\n  Coverage   79.27%   79.27%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          394      394         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9aad42d...d653089. Read the comment docs.\n. # Codecov Report\nMerging #1429 into master will decrease coverage by 0.12%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1429      +/-\n==========================================\n- Coverage   79.27%   79.14%   -0.13%   \n==========================================\n  Files           6        5       -1   \n  Lines         497      494       -3   \n  Branches      161      161            \n==========================================\n- Hits          394      391       -3   \n  Misses        103      103\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.21% <\u00f8> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...7b6af69. Read the comment docs.\n. # Codecov Report\nMerging #1432 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1432   +/-\n=======================================\n  Coverage   78.94%   78.94%         \n=======================================\n  Files           5        5         \n  Lines         494      494         \n  Branches      161      161         \n=======================================\n  Hits          390      390         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...b724899. Read the comment docs.\n. # Codecov Report\nMerging #1434 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1434   +/-\n=======================================\n  Coverage   79.27%   79.27%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          394      394         \n  Misses        103      103\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...03a21c0. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will decrease coverage by 2.92%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1441      +/-\n==========================================\n- Coverage   79.27%   76.35%   -2.93%   \n==========================================\n  Files           6        6            \n  Lines         497      499       +2   \n  Branches      161      163       +2   \n==========================================\n- Hits          394      381      -13   \n- Misses        103      118      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.97% <100%> (-4.3%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...8328c02. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will decrease coverage by 2.92%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1441      +/-\n==========================================\n- Coverage   79.27%   76.35%   -2.93%   \n==========================================\n  Files           6        6            \n  Lines         497      499       +2   \n  Branches      161      163       +2   \n==========================================\n- Hits          394      381      -13   \n- Misses        103      118      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.97% <100%> (-4.3%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...8328c02. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will decrease coverage by 2.92%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1441      +/-\n==========================================\n- Coverage   79.27%   76.35%   -2.93%   \n==========================================\n  Files           6        6            \n  Lines         497      499       +2   \n  Branches      161      163       +2   \n==========================================\n- Hits          394      381      -13   \n- Misses        103      118      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.97% <100%> (-4.3%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...8328c02. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will decrease coverage by 2.92%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1441      +/-\n==========================================\n- Coverage   79.27%   76.35%   -2.93%   \n==========================================\n  Files           6        6            \n  Lines         497      499       +2   \n  Branches      161      163       +2   \n==========================================\n- Hits          394      381      -13   \n- Misses        103      118      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.97% <100%> (-4.3%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...8328c02. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will decrease coverage by 2.92%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1441      +/-\n==========================================\n- Coverage   79.27%   76.35%   -2.93%   \n==========================================\n  Files           6        6            \n  Lines         497      499       +2   \n  Branches      161      163       +2   \n==========================================\n- Hits          394      381      -13   \n- Misses        103      118      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.97% <100%> (-4.3%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...8328c02. Read the comment docs.\n. # Codecov Report\nMerging #1441 into master will decrease coverage by 2.92%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1441      +/-\n==========================================\n- Coverage   79.27%   76.35%   -2.93%   \n==========================================\n  Files           6        6            \n  Lines         497      499       +2   \n  Branches      161      163       +2   \n==========================================\n- Hits          394      381      -13   \n- Misses        103      118      +15\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.97% <100%> (-4.3%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3c1ff11...8328c02. Read the comment docs.\n. # Codecov Report\nMerging #1447 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1447   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e1bd264...fc1effd. Read the comment docs.\n. # Codecov Report\nMerging #1451 into master will increase coverage by 0.72%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1451      +/-\n==========================================\n+ Coverage    73.3%   74.02%   +0.72%   \n==========================================\n  Files          10       10            \n  Lines         663      666       +3   \n==========================================\n+ Hits          486      493       +7   \n+ Misses        177      173       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.44% <100%> (+1.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4740224...cf3374b. Read the comment docs.\n. # Codecov Report\nMerging #1452 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1452   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ba65ec1...83b3f28. Read the comment docs.\n. # Codecov Report\nMerging #1460 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1460   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898d52a...6c1d8d8. Read the comment docs.\n. # Codecov Report\nMerging #1461 into master will increase coverage by 0.12%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1461      +/-\n==========================================\n+ Coverage   78.94%   79.07%   +0.12%   \n==========================================\n  Files           5        6       +1   \n  Lines         494      497       +3   \n  Branches      161      161            \n==========================================\n+ Hits          390      393       +3   \n  Misses        104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/polyfills.js | 100% <0%> (\u00f8) | |\n| lib/Server.js | 81.97% <0%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 334c3a5...9cb3485. Read the comment docs.\n. # Codecov Report\nMerging #1461 into master will increase coverage by 0.12%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1461      +/-\n==========================================\n+ Coverage   78.94%   79.07%   +0.12%   \n==========================================\n  Files           5        6       +1   \n  Lines         494      497       +3   \n  Branches      161      161            \n==========================================\n+ Hits          390      393       +3   \n  Misses        104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/polyfills.js | 100% <0%> (\u00f8) | |\n| lib/Server.js | 81.97% <0%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 334c3a5...9cb3485. Read the comment docs.\n. # Codecov Report\nMerging #1462 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1462   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898d52a...1707e9e. Read the comment docs.\n. # Codecov Report\nMerging #1462 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1462   +/-\n=======================================\n  Coverage   79.07%   79.07%         \n=======================================\n  Files           6        6         \n  Lines         497      497         \n  Branches      161      161         \n=======================================\n  Hits          393      393         \n  Misses        104      104\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 898d52a...1707e9e. Read the comment docs.\n. # Codecov Report\nMerging #1464 into master will increase coverage by 4.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1464      +/-\n=========================================\n+ Coverage   78.94%   83.5%   +4.56%   \n=========================================\n  Files           5       4       -1   \n  Lines         494     382     -112   \n  Branches      161     113      -48   \n=========================================\n- Hits          390     319      -71   \n+ Misses        104      63      -41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.81% <100%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...42f01c7. Read the comment docs.\n. # Codecov Report\nMerging #1464 into master will increase coverage by 4.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1464      +/-\n=========================================\n+ Coverage   78.94%   83.5%   +4.56%   \n=========================================\n  Files           5       4       -1   \n  Lines         494     382     -112   \n  Branches      161     113      -48   \n=========================================\n- Hits          390     319      -71   \n+ Misses        104      63      -41\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.81% <100%> (-0.11%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...42f01c7. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@418493d). Click here to learn what that means.\nThe diff coverage is 60%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1464   +/-\n========================================\n  Coverage          ?   73.3%         \n========================================\n  Files             ?      10         \n  Lines             ?     663         \n  Branches          ?       0         \n========================================\n  Hits              ?     486         \n  Misses            ?     177         \n  Partials          ?       0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/webpack-dev-server.js | 56.83% <0%> (\u00f8) | |\n| lib/Server.js | 80.16% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 418493d...daa2180. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@418493d). Click here to learn what that means.\nThe diff coverage is 60%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1464   +/-\n========================================\n  Coverage          ?   73.3%         \n========================================\n  Files             ?      10         \n  Lines             ?     663         \n  Branches          ?       0         \n========================================\n  Hits              ?     486         \n  Misses            ?     177         \n  Partials          ?       0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/webpack-dev-server.js | 56.83% <0%> (\u00f8) | |\n| lib/Server.js | 80.16% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 418493d...daa2180. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will decrease coverage by 0.06%.\nThe diff coverage is 90.32%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1465      +/-\n==========================================\n- Coverage   78.94%   78.88%   -0.07%   \n==========================================\n  Files           5        5            \n  Lines         494      502       +8   \n  Branches      161      164       +3   \n==========================================\n+ Hits          390      396       +6   \n- Misses        104      106       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | |\n| lib/Server.js | 81.92% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/createDomain.js | 87.5% <87.5%> (\u00f8) | |\n| lib/utils/createLogger.js | 88.88% <88.88%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...1a7f77d. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will decrease coverage by 0.06%.\nThe diff coverage is 90.32%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1465      +/-\n==========================================\n- Coverage   78.94%   78.88%   -0.07%   \n==========================================\n  Files           5        5            \n  Lines         494      502       +8   \n  Branches      161      164       +3   \n==========================================\n+ Hits          390      396       +6   \n- Misses        104      106       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | |\n| lib/Server.js | 81.92% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/createDomain.js | 87.5% <87.5%> (\u00f8) | |\n| lib/utils/createLogger.js | 88.88% <88.88%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...1a7f77d. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will decrease coverage by 0.03%.\nThe diff coverage is 96.29%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1465      +/-\n==========================================\n- Coverage   75.58%   75.55%   -0.04%   \n==========================================\n  Files           8        8            \n  Lines         680      679       -1   \n==========================================\n- Hits          514      513       -1   \n  Misses        166      166\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 83.43% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | |\n| lib/utils/createDomain.js | 100% <100%> (\u00f8) | |\n| bin/webpack-dev-server.js | 62.63% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/createLogger.js | 87.5% <87.5%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e1f0c1...c4e0073. Read the comment docs.\n. # Codecov Report\nMerging #1465 into master will decrease coverage by 0.03%.\nThe diff coverage is 96.29%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1465      +/-\n==========================================\n- Coverage   75.58%   75.55%   -0.04%   \n==========================================\n  Files           8        8            \n  Lines         680      679       -1   \n==========================================\n- Hits          514      513       -1   \n  Misses        166      166\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 83.43% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | |\n| lib/utils/createDomain.js | 100% <100%> (\u00f8) | |\n| bin/webpack-dev-server.js | 62.63% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/createLogger.js | 87.5% <87.5%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0e1f0c1...c4e0073. Read the comment docs.\n. # Codecov Report\nMerging #1466 into master will decrease coverage by 2.46%.\nThe diff coverage is 67.64%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1466      +/-\n==========================================\n- Coverage   78.94%   76.48%   -2.47%   \n==========================================\n  Files           5        6       +1   \n  Lines         494      540      +46   \n  Branches      161      169       +8   \n==========================================\n+ Hits          390      413      +23   \n- Misses        104      127      +23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createCertificate.js | 100% <100%> (\u00f8) | |\n| lib/Server.js | 77.92% <66.86%> (-4.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...2e191f1. Read the comment docs.\n. # Codecov Report\nMerging #1466 into master will decrease coverage by 2.46%.\nThe diff coverage is 67.64%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1466      +/-\n==========================================\n- Coverage   78.94%   76.48%   -2.47%   \n==========================================\n  Files           5        6       +1   \n  Lines         494      540      +46   \n  Branches      161      169       +8   \n==========================================\n+ Hits          390      413      +23   \n- Misses        104      127      +23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/util/createCertificate.js | 100% <100%> (\u00f8) | |\n| lib/Server.js | 77.92% <66.86%> (-4.01%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...2e191f1. Read the comment docs.\n. # Codecov Report\nMerging #1466 into master will decrease coverage by 1.04%.\nThe diff coverage is 70.54%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1466      +/-\n==========================================\n- Coverage   72.86%   71.82%   -1.05%   \n==========================================\n  Files          10       11       +1   \n  Lines         726      763      +37   \n==========================================\n+ Hits          529      548      +19   \n- Misses        197      215      +18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createCertificate.js | 100% <100%> (\u00f8) | |\n| lib/Server.js | 80.27% <69.93%> (-3.47%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1896fcf...acf50df. Read the comment docs.\n. # Codecov Report\nMerging #1466 into master will decrease coverage by 1.04%.\nThe diff coverage is 70.54%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1466      +/-\n==========================================\n- Coverage   72.86%   71.82%   -1.05%   \n==========================================\n  Files          10       11       +1   \n  Lines         726      763      +37   \n==========================================\n+ Hits          529      548      +19   \n- Misses        197      215      +18\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createCertificate.js | 100% <100%> (\u00f8) | |\n| lib/Server.js | 80.27% <69.93%> (-3.47%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1896fcf...acf50df. Read the comment docs.\n. # Codecov Report\nMerging #1467 into master will decrease coverage by 3.28%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1467      +/-\n==========================================\n- Coverage   78.94%   75.66%   -3.29%   \n==========================================\n  Files           5        8       +3   \n  Lines         494      678     +184   \n  Branches      161        0     -161   \n==========================================\n+ Hits          390      513     +123   \n- Misses        104      165      +61\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/OptionsValidationError.js | 61.85% <0%> (-0.88%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <0%> (\u00f8) | :arrow_up: |\n| examples/util.js | 81.81% <0%> (\u00f8) | |\n| examples/cli/public/webpack.config.js | 100% <0%> (\u00f8) | |\n| bin/webpack-dev-server.js | 62.77% <0%> (\u00f8) | |\n| lib/Server.js | 83.43% <0%> (+1.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...7fbfc60. Read the comment docs.\n. # Codecov Report\nMerging #1467 into master will decrease coverage by 3.28%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1467      +/-\n==========================================\n- Coverage   78.94%   75.66%   -3.29%   \n==========================================\n  Files           5        8       +3   \n  Lines         494      678     +184   \n  Branches      161        0     -161   \n==========================================\n+ Hits          390      513     +123   \n- Misses        104      165      +61\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/OptionsValidationError.js | 61.85% <0%> (-0.88%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <0%> (\u00f8) | :arrow_up: |\n| examples/util.js | 81.81% <0%> (\u00f8) | |\n| examples/cli/public/webpack.config.js | 100% <0%> (\u00f8) | |\n| bin/webpack-dev-server.js | 62.77% <0%> (\u00f8) | |\n| lib/Server.js | 83.43% <0%> (+1.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e2220c4...7fbfc60. Read the comment docs.\n. # Codecov Report\nMerging #1467 into master will decrease coverage by 3.35%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1467      +/-\n==========================================\n- Coverage   78.94%   75.58%   -3.36%   \n==========================================\n  Files           5        8       +3   \n  Lines         494      680     +186   \n  Branches      161        0     -161   \n==========================================\n+ Hits          390      514     +124   \n- Misses        104      166      +62\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/OptionsValidationError.js | 61.85% <0%> (-0.88%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <0%> (\u00f8) | :arrow_up: |\n| examples/util.js | 81.81% <0%> (\u00f8) | |\n| examples/cli/public/webpack.config.js | 100% <0%> (\u00f8) | |\n| bin/webpack-dev-server.js | 62.63% <0%> (\u00f8) | |\n| lib/Server.js | 83.43% <0%> (+1.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b445b68...4fd326b. Read the comment docs.\n. # Codecov Report\nMerging #1467 into master will decrease coverage by 3.35%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1467      +/-\n==========================================\n- Coverage   78.94%   75.58%   -3.36%   \n==========================================\n  Files           5        8       +3   \n  Lines         494      680     +186   \n  Branches      161        0     -161   \n==========================================\n+ Hits          390      514     +124   \n- Misses        104      166      +62\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/OptionsValidationError.js | 61.85% <0%> (-0.88%) | :arrow_down: |\n| lib/util/addDevServerEntrypoints.js | 100% <0%> (\u00f8) | :arrow_up: |\n| examples/util.js | 81.81% <0%> (\u00f8) | |\n| examples/cli/public/webpack.config.js | 100% <0%> (\u00f8) | |\n| bin/webpack-dev-server.js | 62.63% <0%> (\u00f8) | |\n| lib/Server.js | 83.43% <0%> (+1.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b445b68...4fd326b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@418493d). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1468   +/-\n=========================================\n  Coverage          ?   71.82%         \n=========================================\n  Files             ?       11         \n  Lines             ?      763         \n  Branches          ?        0         \n=========================================\n  Hits              ?      548         \n  Misses            ?      215         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 418493d...e1a7b00. Read the comment docs.\n. # Codecov Report\nMerging #1470 into master will decrease coverage by 2.82%.\nThe diff coverage is 53.89%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1470      +/-\n==========================================\n- Coverage   75.55%   72.72%   -2.83%   \n==========================================\n  Files           8       10       +2   \n  Lines         679      726      +47   \n==========================================\n+ Hits          513      528      +15   \n- Misses        166      198      +32\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/options.js | 100% <100%> (\u00f8) | |\n| bin/utils.js | 44.44% <44.44%> (\u00f8) | |\n| bin/webpack-dev-server.js | 56.52% <53.27%> (-6.12%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ee13ab...9b016ae. Read the comment docs.\n. # Codecov Report\nMerging #1471 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1471   +/-\n=======================================\n  Coverage   71.82%   71.82%         \n=======================================\n  Files          11       11         \n  Lines         763      763         \n=======================================\n  Hits          548      548         \n  Misses        215      215\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createDomain.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2d0999d...6fa0de2. Read the comment docs.\n. # Codecov Report\nMerging #1475 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1475   +/-\n=======================================\n  Coverage   75.58%   75.58%         \n=======================================\n  Files           8        8         \n  Lines         680      680         \n=======================================\n  Hits          514      514         \n  Misses        166      166\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c4a1038...d4c6535. Read the comment docs.\n. # Codecov Report\nMerging #1478 into master will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1478      +/-\n==========================================\n+ Coverage   74.02%   74.17%   +0.15%   \n==========================================\n  Files          10       10            \n  Lines         666      666            \n==========================================\n+ Hits          493      494       +1   \n+ Misses        173      172       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 81.71% <0%> (+0.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8ab9eb6...5a74933. Read the comment docs.\n. # Codecov Report\nMerging #1484 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1484   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f37f0a2...d3b0fee. Read the comment docs.\n. # Codecov Report\nMerging #1486 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1486   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createLogger.js | 87.5% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 065978f...94d1ff4. Read the comment docs.\n. # Codecov Report\nMerging #1487 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1487   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7a6ca47...eaf07d9. Read the comment docs.\n. # Codecov Report\nMerging #1488 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1488   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b9d11ca...7516174. Read the comment docs.\n. # Codecov Report\nMerging #1496 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1496   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d37cc5...9a62ec0. Read the comment docs.\n. # Codecov Report\nMerging #1496 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1496   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d37cc5...9a62ec0. Read the comment docs.\n. # Codecov Report\nMerging #1496 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1496   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d37cc5...9a62ec0. Read the comment docs.\n. # Codecov Report\nMerging #1498 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1498   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d37cc5...0cb8ab3. Read the comment docs.\n. # Codecov Report\nMerging #1499 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1499   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3d37cc5...cf54e87. Read the comment docs.\n. # Codecov Report\nMerging #1506 into master will decrease coverage by 0.23%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1506      +/-\n==========================================\n- Coverage   74.25%   74.02%   -0.24%   \n==========================================\n  Files          10       10            \n  Lines         672      666       -6   \n==========================================\n- Hits          499      493       -6   \n  Misses        173      173\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.44% <0%> (-0.31%) | :arrow_down: |\n| bin/utils.js | 44.44% <0%> (\u00f8) | :arrow_up: |\n| bin/options.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bddfe16...5b148d0. Read the comment docs.\n. # Codecov Report\nMerging #1513 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1513   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/options.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb484ad...3ae819e. Read the comment docs.\n. # Codecov Report\nMerging #1514 into master will increase coverage by 0.27%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1514      +/-\n==========================================\n+ Coverage   74.02%   74.29%   +0.27%   \n==========================================\n  Files          10       11       +1   \n  Lines         666      673       +7   \n==========================================\n+ Hits          493      500       +7   \n  Misses        173      173\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/patchPublicPath.js | 100% <100%> (\u00f8) | |\n| bin/webpack-dev-server.js | 57.29% <100%> (+0.46%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb484ad...4e191aa. Read the comment docs.\n. # Codecov Report\nMerging #1520 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1520   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb484ad...6b81fb7. Read the comment docs.\n. # Codecov Report\nMerging #1531 into master will increase coverage by <.01%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1531      +/-\n==========================================\n+ Coverage   74.02%   74.02%   +<.01%   \n==========================================\n  Files          10       10            \n  Lines         666      670       +4   \n==========================================\n+ Hits          493      496       +3   \n- Misses        173      174       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.36% <80%> (-0.08%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e719959...78f5452. Read the comment docs.\n. # Codecov Report\nMerging #1531 into master will increase coverage by <.01%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1531      +/-\n==========================================\n+ Coverage   74.02%   74.02%   +<.01%   \n==========================================\n  Files          10       10            \n  Lines         666      670       +4   \n==========================================\n+ Hits          493      496       +3   \n- Misses        173      174       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.36% <80%> (-0.08%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e719959...78f5452. Read the comment docs.\n. # Codecov Report\nMerging #1533 into master will decrease coverage by 0.61%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1533      +/-\n==========================================\n- Coverage    75.1%   74.49%   -0.62%   \n==========================================\n  Files          10       10            \n  Lines         687      690       +3   \n==========================================\n- Hits          516      514       -2   \n- Misses        171      176       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.53% <100%> (+0.01%) | :arrow_up: |\n| bin/webpack-dev-server.js | 57.06% <100%> (-1.23%) | :arrow_down: |\n| lib/utils/addEntries.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b89fd9...5542a91. Read the comment docs.\n. # Codecov Report\nMerging #1533 into master will decrease coverage by 0.61%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1533      +/-\n==========================================\n- Coverage    75.1%   74.49%   -0.62%   \n==========================================\n  Files          10       10            \n  Lines         687      690       +3   \n==========================================\n- Hits          516      514       -2   \n- Misses        171      176       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.53% <100%> (+0.01%) | :arrow_up: |\n| bin/webpack-dev-server.js | 57.06% <100%> (-1.23%) | :arrow_down: |\n| lib/utils/addEntries.js | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b89fd9...5542a91. Read the comment docs.\n. # Codecov Report\nMerging #1537 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1537   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         666      666         \n=======================================\n  Hits          493      493         \n  Misses        173      173\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d2f4902...e0fdbb0. Read the comment docs.\n. # Codecov Report\nMerging #1538 into master will increase coverage by 2.86%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1538      +/-\n==========================================\n+ Coverage   74.02%   76.89%   +2.86%   \n==========================================\n  Files          10       10            \n  Lines         670      883     +213   \n==========================================\n+ Hits          496      679     +183   \n- Misses        174      204      +30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/options.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 82.81% <0%> (+1.44%) | :arrow_up: |\n| bin/utils.js | 47.22% <0%> (+2.77%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55398b5...889bd49. Read the comment docs.\n. # Codecov Report\nMerging #1541 into master will increase coverage by 0.38%.\nThe diff coverage is 90.54%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1541      +/-\n==========================================\n+ Coverage   74.02%   74.41%   +0.38%   \n==========================================\n  Files          10       14       +4   \n  Lines         670      680      +10   \n==========================================\n+ Hits          496      506      +10   \n  Misses        174      174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addProgressPlugin.js | 100% <100%> (\u00f8) | |\n| lib/utils/statsOptions.js | 100% <100%> (\u00f8) | |\n| lib/utils/getSSLCertificate.js | 85.71% <85.71%> (\u00f8) | |\n| lib/utils/checkHost.js | 90.32% <90.32%> (\u00f8) | |\n| lib/Server.js | 80.12% <90.9%> (-1.25%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1fe82de...9448273. Read the comment docs.\n. # Codecov Report\nMerging #1542 into master will increase coverage by 0.9%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1542     +/-\n=========================================\n+ Coverage   74.34%   75.25%   +0.9%   \n=========================================\n  Files          10       10           \n  Lines         690      687      -3   \n=========================================\n+ Hits          513      517      +4   \n+ Misses        177      170      -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/webpack-dev-server.js | 58.28% <\u00f8> (+1.45%) | :arrow_up: |\n| lib/Server.js | 81.77% <100%> (+0.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bf1f76...204b179. Read the comment docs.\n. # Codecov Report\nMerging #1546 into master will increase coverage by 0.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1546      +/-\n==========================================\n+ Coverage   74.02%   74.59%   +0.56%   \n==========================================\n  Files          10       10            \n  Lines         670      673       +3   \n==========================================\n+ Hits          496      502       +6   \n+ Misses        174      171       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.33% <100%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55398b5...9b16e7f. Read the comment docs.\n. # Codecov Report\nMerging #1546 into master will increase coverage by 0.56%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1546      +/-\n==========================================\n+ Coverage   74.02%   74.59%   +0.56%   \n==========================================\n  Files          10       10            \n  Lines         670      673       +3   \n==========================================\n+ Hits          496      502       +6   \n+ Misses        174      171       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.33% <100%> (+0.96%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55398b5...9b16e7f. Read the comment docs.\n. # Codecov Report\nMerging #1553 into master will increase coverage by 0.07%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1553      +/-\n==========================================\n+ Coverage   74.41%   74.49%   +0.07%   \n==========================================\n  Files          10       10            \n  Lines         688      690       +2   \n==========================================\n+ Hits          512      514       +2   \n  Misses        176      176\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.53% <100%> (+0.04%) | :arrow_up: |\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 11c9896...d252f19. Read the comment docs.\n. # Codecov Report\nMerging #1555 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1555   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         670      670         \n=======================================\n  Hits          496      496         \n  Misses        174      174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/options.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 81.36% <0%> (\u00f8) | :arrow_up: |\n| bin/utils.js | 44.44% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 927a2b3...a1493fb. Read the comment docs.\n. # Codecov Report\nMerging #1562 into master will increase coverage by 0.18%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1562      +/-\n==========================================\n+ Coverage   74.34%   74.52%   +0.18%   \n==========================================\n  Files          10       10            \n  Lines         690      691       +1   \n==========================================\n+ Hits          513      515       +2   \n+ Misses        177      176       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/webpack-dev-server.js | 57.06% <100%> (+0.23%) | :arrow_up: |\n| lib/Server.js | 81.53% <0%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4bf1f76...d1501b2. Read the comment docs.\n. # Codecov Report\nMerging #1563 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1563   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         670      670         \n=======================================\n  Hits          496      496         \n  Misses        174      174\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1fe82de...8c9944a. Read the comment docs.\n. # Codecov Report\nMerging #1564 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1564   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         670      670         \n=======================================\n  Hits          496      496         \n  Misses        174      174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.36% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55398b5...59aaa79. Read the comment docs.\n. # Codecov Report\nMerging #1577 into master will increase coverage by 0.31%.\nThe diff coverage is 80.64%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1577      +/-\n==========================================\n+ Coverage    75.1%   75.42%   +0.31%   \n==========================================\n  Files          10       10            \n  Lines         687      708      +21   \n==========================================\n+ Hits          516      534      +18   \n- Misses        171      174       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/webpack-dev-server.js | 58.19% <66.66%> (-0.1%) | :arrow_down: |\n| bin/utils.js | 60% <89.47%> (+15.55%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4767a31...6d10da9. Read the comment docs.\n. # Codecov Report\nMerging #1580 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1580      +/-\n==========================================\n+ Coverage   74.02%   74.06%   +0.03%   \n==========================================\n  Files          10       10            \n  Lines         670      671       +1   \n==========================================\n+ Hits          496      497       +1   \n  Misses        174      174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.42% <100%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7a3a257...c028b81. Read the comment docs.\n. # Codecov Report\nMerging #1586 into master will decrease coverage by 15.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #1586       +/-\n===========================================\n- Coverage   74.02%   58.95%   -15.08%   \n===========================================\n  Files          10       10             \n  Lines         670      670             \n===========================================\n- Hits          496      395      -101   \n- Misses        174      275      +101\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 68.18% <0%> (-31.82%) | :arrow_down: |\n| lib/Server.js | 55.89% <0%> (-25.48%) | :arrow_down: |\n| lib/utils/createDomain.js | 88.88% <0%> (-11.12%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55398b5...5516fcf. Read the comment docs.\n. # Codecov Report\nMerging #1588 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1588   +/-\n=======================================\n  Coverage   74.02%   74.02%         \n=======================================\n  Files          10       10         \n  Lines         670      670         \n=======================================\n  Hits          496      496         \n  Misses        174      174\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 55398b5...209cd62. Read the comment docs.\n. # Codecov Report\nMerging #1590 into master will not change coverage.\nThe diff coverage is 50%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1590   +/-\n=======================================\n  Coverage   74.06%   74.06%         \n=======================================\n  Files          10       10         \n  Lines         671      671         \n=======================================\n  Hits          497      497         \n  Misses        174      174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.42% <50%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fadae5d...028b76f. Read the comment docs.\n. # Codecov Report\nMerging #1599 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1599   +/-\n=======================================\n  Coverage   74.06%   74.06%         \n=======================================\n  Files          10       10         \n  Lines         671      671         \n=======================================\n  Hits          497      497         \n  Misses        174      174\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fadae5d...8f3b47f. Read the comment docs.\n. # Codecov Report\nMerging #1600 into master will decrease coverage by 0.32%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1600      +/-\n==========================================\n- Coverage   74.27%   73.95%   -0.33%   \n==========================================\n  Files          10       10            \n  Lines         688      691       +3   \n==========================================\n  Hits          511      511            \n- Misses        177      180       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/utils.js | 41.02% <0%> (-3.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 519b703...fc0d158. Read the comment docs.\n. # Codecov Report\nMerging #1603 into master will increase coverage by 0.03%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1603      +/-\n=========================================\n+ Coverage   74.06%   74.1%   +0.03%   \n=========================================\n  Files          10      10            \n  Lines         671     672       +1   \n=========================================\n+ Hits          497     498       +1   \n  Misses        174     174\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.47% <60%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68dd49a...7b9c846. Read the comment docs.\n. # Codecov Report\nMerging #1606 into master will increase coverage by 0.14%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1606      +/-\n==========================================\n+ Coverage    74.1%   74.25%   +0.14%   \n==========================================\n  Files          10       10            \n  Lines         672      672            \n==========================================\n+ Hits          498      499       +1   \n+ Misses        174      173       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.74% <100%> (+0.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ff2874f...e614308. Read the comment docs.\n. # Codecov Report\nMerging #1608 into master will decrease coverage by 0.32%.\nThe diff coverage is 42.85%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1608      +/-\n==========================================\n- Coverage   74.25%   73.93%   -0.33%   \n==========================================\n  Files          10       10            \n  Lines         672      679       +7   \n==========================================\n+ Hits          499      502       +3   \n- Misses        173      177       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.01% <42.85%> (-0.73%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bddfe16...f55088a. Read the comment docs.\n. # Codecov Report\nMerging #1609 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1609   +/-\n=======================================\n  Coverage   74.25%   74.25%         \n=======================================\n  Files          10       10         \n  Lines         672      672         \n=======================================\n  Hits          499      499         \n  Misses        173      173\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.74% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9443239...3ea87a7. Read the comment docs.\n. # Codecov Report\nMerging #1610 into master will decrease coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1610      +/-\n==========================================\n- Coverage   74.07%   73.93%   -0.15%   \n==========================================\n  Files          10       10            \n  Lines         679      679            \n==========================================\n- Hits          503      502       -1   \n- Misses        176      177       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.01% <0%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b7a828...7f7b508. Read the comment docs.\n. # Codecov Report\nMerging #1611 into master will decrease coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1611      +/-\n==========================================\n- Coverage   74.07%   73.93%   -0.15%   \n==========================================\n  Files          10       10            \n  Lines         679      679            \n==========================================\n- Hits          503      502       -1   \n- Misses        176      177       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.01% <0%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b7a828...4d94294. Read the comment docs.\n. # Codecov Report\nMerging #1612 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1612      +/-\n==========================================\n+ Coverage   74.07%   74.12%   +0.04%   \n==========================================\n  Files          10       10            \n  Lines         679      684       +5   \n==========================================\n+ Hits          503      507       +4   \n- Misses        176      177       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 81.01% <0%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b7a828...e476464. Read the comment docs.\n. # Codecov Report\nMerging #1617 into master will decrease coverage by 9.35%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1617      +/-\n==========================================\n- Coverage   83.76%   74.41%   -9.36%   \n==========================================\n  Files           8       10       +2   \n  Lines         536      688     +152   \n  Branches      161        0     -161   \n==========================================\n+ Hits          449      512      +63   \n- Misses         70      176     +106   \n+ Partials       17        0      -17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/utils/createLogger.js | 87.5% <0%> (\u00f8) | :arrow_up: |\n| lib/utils/createDomain.js | 100% <0%> (\u00f8) | :arrow_up: |\n| lib/utils/defaultTo.js | | |\n| lib/utils/findPort.js | | |\n| lib/utils/createConfig.js | | |\n| bin/options.js | 100% <0%> (\u00f8) | |\n| bin/webpack-dev-server.js | 56.83% <0%> (\u00f8) | |\n| examples/cli/public/webpack.config.js | 100% <0%> (\u00f8) | |\n| bin/utils.js | 44.44% <0%> (\u00f8) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb10f83...0eadf6b. Read the comment docs.\n. # Codecov Report\nMerging #1627 into master will decrease coverage by 0.24%.\nThe diff coverage is 28.57%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1627      +/-\n==========================================\n- Coverage   74.27%   74.02%   -0.25%   \n==========================================\n  Files          10       10            \n  Lines         688      693       +5   \n==========================================\n+ Hits          511      513       +2   \n- Misses        177      180       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/utils.js | 51.85% <\u00f8> (+7.4%) | :arrow_up: |\n| lib/Server.js | 79.33% <28.57%> (-1.89%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 349e733...7f326f8. Read the comment docs.\n. # Codecov Report\nMerging #1630 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1630   +/-\n=======================================\n  Coverage   74.41%   74.41%         \n=======================================\n  Files          10       10         \n  Lines         688      688         \n=======================================\n  Hits          512      512         \n  Misses        176      176\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77e05d6...d6b91be. Read the comment docs.\n. # Codecov Report\nMerging #1632 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1632   +/-\n=======================================\n  Coverage   74.27%   74.27%         \n=======================================\n  Files          10       10         \n  Lines         688      688         \n=======================================\n  Hits          511      511         \n  Misses        177      177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 349e733...c569e1d. Read the comment docs.\n. # Codecov Report\nMerging #1633 into master will increase coverage by 0.08%.\nThe diff coverage is 90%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1633      +/-\n==========================================\n+ Coverage   75.37%   75.45%   +0.08%   \n==========================================\n  Files          19       19            \n  Lines         597      599       +2   \n  Branches      172      173       +1   \n==========================================\n+ Hits          450      452       +2   \n  Misses        113      113            \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.55% <90%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 017dc3d...1ea6f06. Read the comment docs.\n. # Codecov Report\nMerging #1633 into master will increase coverage by 0.08%.\nThe diff coverage is 90%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1633      +/-\n==========================================\n+ Coverage   75.37%   75.45%   +0.08%   \n==========================================\n  Files          19       19            \n  Lines         597      599       +2   \n  Branches      172      173       +1   \n==========================================\n+ Hits          450      452       +2   \n  Misses        113      113            \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.55% <90%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 017dc3d...1ea6f06. Read the comment docs.\n. # Codecov Report\nMerging #1640 into master will decrease coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1640      +/-\n==========================================\n- Coverage   74.41%   74.27%   -0.15%   \n==========================================\n  Files          10       10            \n  Lines         688      688            \n==========================================\n- Hits          512      511       -1   \n- Misses        176      177       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.21% <0%> (-0.27%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77e05d6...048372a. Read the comment docs.\n. # Codecov Report\nMerging #1641 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1641   +/-\n=======================================\n  Coverage   74.27%   74.27%         \n=======================================\n  Files          10       10         \n  Lines         688      688         \n=======================================\n  Hits          511      511         \n  Misses        177      177\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 519b703...0dd1d54. Read the comment docs.\n. # Codecov Report\nMerging #1645 into master will increase coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1645      +/-\n==========================================\n+ Coverage    75.1%   75.25%   +0.14%   \n==========================================\n  Files          10       10            \n  Lines         687      687            \n==========================================\n+ Hits          516      517       +1   \n+ Misses        171      170       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.77% <0%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0b89fd9...7b4c5e3. Read the comment docs.\n. # Codecov Report\nMerging #1646 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1646   +/-\n=======================================\n  Coverage   75.25%   75.25%         \n=======================================\n  Files          10       10         \n  Lines         687      687         \n=======================================\n  Hits          517      517         \n  Misses        170      170\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7d57aa4...da36748. Read the comment docs.\n. # Codecov Report\nMerging #1647 into master will increase coverage by 0.18%.\nThe diff coverage is 78.43%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1647      +/-\n==========================================\n+ Coverage    75.1%   75.29%   +0.18%   \n==========================================\n  Files          10       10            \n  Lines         687      688       +1   \n==========================================\n+ Hits          516      518       +2   \n+ Misses        171      170       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/options.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createLogger.js | 87.5% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createCertificate.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| bin/utils.js | 44.44% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/addEntries.js | 100% <100%> (\u00f8) | :arrow_up: |\n| lib/utils/createDomain.js | 100% <100%> (\u00f8) | :arrow_up: |\n| examples/util.js | 81.81% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 81.77% <72.22%> (+0.26%) | :arrow_up: |\n| bin/webpack-dev-server.js | 58.28% <87.5%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4767a31...bf1b436. Read the comment docs.\n. # Codecov Report\nMerging #1649 into master will increase coverage by 0.14%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1649      +/-\n==========================================\n+ Coverage   75.14%   75.29%   +0.14%   \n==========================================\n  Files          10       10            \n  Lines         688      688            \n==========================================\n+ Hits          517      518       +1   \n+ Misses        171      170       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/utils.js | 44.44% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/Server.js | 81.77% <\u00f8> (+0.26%) | :arrow_up: |\n| bin/options.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| bin/webpack-dev-server.js | 58.28% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/addEntries.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| examples/cli/public/webpack.config.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createDomain.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| examples/util.js | 81.81% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createLogger.js | 87.5% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createCertificate.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4a04864...bed6c88. Read the comment docs.\n. # Codecov Report\nMerging #1650 into master will increase coverage by 7.29%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1650      +/-\n==========================================\n+ Coverage   75.14%   82.43%   +7.29%   \n==========================================\n  Files          10       15       +5   \n  Lines         688      484     -204   \n  Branches        0      120     +120   \n==========================================\n- Hits          517      399     -118   \n+ Misses        171       68     -103   \n- Partials        0       17      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| setupTest.js | 100% <100%> (\u00f8) | |\n| test/helpers/run-webpack-dev-server.js | 92.59% <100%> (\u00f8) | |\n| lib/utils/createCertificate.js | 66.66% <0%> (-33.34%) | :arrow_down: |\n| lib/Server.js | 78.9% <0%> (-2.61%) | :arrow_down: |\n| bin/options.js | | |\n| bin/webpack-dev-server.js | | |\n| examples/cli/public/webpack.config.js | | |\n| bin/utils.js | | |\n| examples/util.js | | |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 102941f...10e4bc2. Read the comment docs.\n. # Codecov Report\nMerging #1652 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1652   +/-\n=======================================\n  Coverage   82.43%   82.43%         \n=======================================\n  Files          15       15         \n  Lines         484      484         \n  Branches      120      120         \n=======================================\n  Hits          399      399         \n  Misses         68       68         \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.9% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5833986...4baa647. Read the comment docs.\n. # Codecov Report\nMerging #1653 into master will decrease coverage by 7.02%.\nThe diff coverage is 61.44%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1653      +/-\n==========================================\n- Coverage   82.64%   75.62%   -7.03%   \n==========================================\n  Files          15       18       +3   \n  Lines         484      603     +119   \n  Branches      120      171      +51   \n==========================================\n+ Hits          400      456      +56   \n- Misses         67      113      +46   \n- Partials       17       34      +17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| test/fixtures/schema/webpack.config.simple.js | 100% <100%> (\u00f8) | |\n| lib/utils/createConfig.js | 60.97% <60.97%> (\u00f8) | |\n| bin/utils.js | 13.88% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a52f2d7...65956e1. Read the comment docs.\n. # Codecov Report\nMerging #1658 into master will decrease coverage by 0.49%.\nThe diff coverage is 76.96%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1658     +/-\n=========================================\n- Coverage   75.62%   75.12%   -0.5%   \n=========================================\n  Files          18       18           \n  Lines         603      591     -12   \n  Branches      171      171           \n=========================================\n- Hits          456      444     -12   \n  Misses        113      113           \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.49% <76.96%> (-0.68%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5ea376b...405dc73. Read the comment docs.\n. # Codecov Report\nMerging #1660 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1660      +/-\n==========================================\n- Coverage   75.12%   75.08%   -0.05%   \n==========================================\n  Files          18       18            \n  Lines         591      590       -1   \n  Branches      171      171            \n==========================================\n- Hits          444      443       -1   \n  Misses        113      113            \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.43% <100%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f78a9a3...6a655ec. Read the comment docs.\n. # Codecov Report\nMerging #1662 into master will decrease coverage by 0.89%.\nThe diff coverage is 14.28%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1662     +/-\n=========================================\n- Coverage   83.76%   82.87%   -0.9%   \n=========================================\n  Files           8        8           \n  Lines         536      543      +7   \n  Branches      161      161           \n=========================================\n+ Hits          449      450      +1   \n- Misses         70       76      +6   \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 77.72% <14.28%> (-1.18%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb10f83...44bf6d1. Read the comment docs.\n. # Codecov Report\nMerging #1664 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1664   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb10f83...cf42f28. Read the comment docs.\n. # Codecov Report\nMerging #1664 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1664   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb10f83...cf42f28. Read the comment docs.\n. # Codecov Report\nMerging #1665 into master will increase coverage by 0.06%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1665      +/-\n==========================================\n+ Coverage   83.76%   83.82%   +0.06%   \n==========================================\n  Files           8        8            \n  Lines         536      538       +2   \n  Branches      161      161            \n==========================================\n+ Hits          449      451       +2   \n  Misses         70       70            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createConfig.js | 95.5% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 79% <80%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34a4a26...01ba5f4. Read the comment docs.\n. # Codecov Report\nMerging #1665 into master will increase coverage by 0.06%.\nThe diff coverage is 83.33%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1665      +/-\n==========================================\n+ Coverage   83.76%   83.82%   +0.06%   \n==========================================\n  Files           8        8            \n  Lines         536      538       +2   \n  Branches      161      161            \n==========================================\n+ Hits          449      451       +2   \n  Misses         70       70            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createConfig.js | 95.5% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 79% <80%> (+0.11%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34a4a26...01ba5f4. Read the comment docs.\n. # Codecov Report\nMerging #1666 into master will decrease coverage by 0.32%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1666      +/-\n==========================================\n- Coverage   84.39%   84.06%   -0.33%   \n==========================================\n  Files           7        7            \n  Lines         519      521       +2   \n  Branches      159      160       +1   \n==========================================\n  Hits          438      438            \n- Misses         64       65       +1   \n- Partials       17       18       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.52% <0%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf99c26...ee98dc3. Read the comment docs.\n. # Codecov Report\nMerging #1666 into master will decrease coverage by 0.32%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1666      +/-\n==========================================\n- Coverage   84.39%   84.06%   -0.33%   \n==========================================\n  Files           7        7            \n  Lines         519      521       +2   \n  Branches      159      160       +1   \n==========================================\n  Hits          438      438            \n- Misses         64       65       +1   \n- Partials       17       18       +1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.52% <0%> (-0.42%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bf99c26...ee98dc3. Read the comment docs.\n. # Codecov Report\nMerging #1667 into master will increase coverage by 0.29%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1667      +/-\n==========================================\n+ Coverage   75.08%   75.37%   +0.29%   \n==========================================\n  Files          18       19       +1   \n  Lines         590      597       +7   \n  Branches      171      172       +1   \n==========================================\n+ Hits          443      450       +7   \n  Misses        113      113            \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| test/shouldSkipTestSuite.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b92e5fd...65507ba. Read the comment docs.\n. # Codecov Report\nMerging #1667 into master will increase coverage by 0.29%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1667      +/-\n==========================================\n+ Coverage   75.08%   75.37%   +0.29%   \n==========================================\n  Files          18       19       +1   \n  Lines         590      597       +7   \n  Branches      171      172       +1   \n==========================================\n+ Hits          443      450       +7   \n  Misses        113      113            \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| test/shouldSkipTestSuite.js | 100% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b92e5fd...65507ba. Read the comment docs.\n. # Codecov Report\nMerging #1668 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1668   +/-\n=======================================\n  Coverage   75.37%   75.37%         \n=======================================\n  Files          19       19         \n  Lines         597      597         \n  Branches      172      172         \n=======================================\n  Hits          450      450         \n  Misses        113      113         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2bcdb0...0661da1. Read the comment docs.\n. # Codecov Report\nMerging #1668 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1668   +/-\n=======================================\n  Coverage   75.37%   75.37%         \n=======================================\n  Files          19       19         \n  Lines         597      597         \n  Branches      172      172         \n=======================================\n  Hits          450      450         \n  Misses        113      113         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2bcdb0...0661da1. Read the comment docs.\n. # Codecov Report\nMerging #1668 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1668   +/-\n=======================================\n  Coverage   75.37%   75.37%         \n=======================================\n  Files          19       19         \n  Lines         597      597         \n  Branches      172      172         \n=======================================\n  Hits          450      450         \n  Misses        113      113         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b2bcdb0...0661da1. Read the comment docs.\n. # Codecov Report\nMerging #1671 into master will decrease coverage by 0.33%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1671      +/-\n==========================================\n- Coverage   75.45%   75.12%   -0.34%   \n==========================================\n  Files          19       17       -2   \n  Lines         599      591       -8   \n  Branches      173      172       -1   \n==========================================\n- Hits          452      444       -8   \n  Misses        113      113            \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| setupTest.js | | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f9fc9c7...1986ad6. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@eddd476). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1672   +/-\n=========================================\n  Coverage          ?   75.45%         \n=========================================\n  Files             ?       19         \n  Lines             ?      599         \n  Branches          ?      173         \n=========================================\n  Hits              ?      452         \n  Misses            ?      113         \n  Partials          ?       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update eddd476...cab6f76. Read the comment docs.\n. # Codecov Report\nMerging #1673 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1673   +/-\n=======================================\n  Coverage   75.12%   75.12%         \n=======================================\n  Files          17       17         \n  Lines         591      591         \n  Branches      172      172         \n=======================================\n  Hits          444      444         \n  Misses        113      113         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df113eb...d663ca8. Read the comment docs.\n. # Codecov Report\nMerging #1676 into master will increase coverage by 1.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1676      +/-\n==========================================\n+ Coverage   75.12%   76.17%   +1.04%   \n==========================================\n  Files          17       17            \n  Lines         591      596       +5   \n  Branches      172      173       +1   \n==========================================\n+ Hits          444      454      +10   \n+ Misses        113      108       -5   \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.89% <100%> (+1.34%) | :arrow_up: |\n| lib/utils/createCertificate.js | 100% <0%> (+33.33%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df113eb...d17b5f6. Read the comment docs.\n. # Codecov Report\nMerging #1678 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1678   +/-\n=======================================\n  Coverage   76.17%   76.17%         \n=======================================\n  Files          17       17         \n  Lines         596      596         \n  Branches      173      173         \n=======================================\n  Hits          454      454         \n  Misses        108      108         \n  Partials       34       34\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8d5c1e...db6cb49. Read the comment docs.\n. # Codecov Report\nMerging #1679 into master will increase coverage by 3.25%.\nThe diff coverage is 96%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1679      +/-\n==========================================\n+ Coverage   76.34%   79.59%   +3.25%   \n==========================================\n  Files          17        7      -10   \n  Lines         596      544      -52   \n  Branches      173      165       -8   \n==========================================\n- Hits          455      433      -22   \n+ Misses        107       84      -23   \n+ Partials       34       27       -7\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createConfig.js | 95.06% <96%> (+34.08%) | :arrow_up: |\n| test/helpers/run-webpack-dev-server.js | | |\n| test/fixtures/contentbase-config/webpack.config.js | | |\n| ...xtures/historyapifallback-config/webpack.config.js | | |\n| ...t/fixtures/multi-compiler-config/webpack.config.js | | |\n| ...ures/historyapifallback-2-config/webpack.config.js | | |\n| test/fixtures/simple-config/webpack.config.js | | |\n| ...ures/historyapifallback-3-config/webpack.config.js | | |\n| test/helper.js | | |\n| test/fixtures/proxy-config/webpack.config.js | | |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 66129a8...08f1061. Read the comment docs.\n. # Codecov Report\nMerging #1680 into master will increase coverage by 0.16%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1680      +/-\n==========================================\n+ Coverage   76.17%   76.34%   +0.16%   \n==========================================\n  Files          17       17            \n  Lines         596      596            \n  Branches      173      173            \n==========================================\n+ Hits          454      455       +1   \n+ Misses        108      107       -1   \n  Partials       34       34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 80.15% <0%> (+0.26%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b8d5c1e...49d65ca. Read the comment docs.\n. # Codecov Report\nMerging #1682 into master will increase coverage by 4.55%.\nThe diff coverage is 87.5%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1682      +/-\n==========================================\n+ Coverage   79.59%   84.14%   +4.55%   \n==========================================\n  Files           7        7            \n  Lines         544      511      -33   \n  Branches      165      155      -10   \n==========================================\n- Hits          433      430       -3   \n+ Misses         84       64      -20   \n+ Partials       27       17      -10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/addEntries.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createCertificate.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createLogger.js | 87.5% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createDomain.js | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/defaultTo.js | 100% <100%> (\u00f8) | |\n| lib/utils/createConfig.js | 95.06% <100%> (\u00f8) | :arrow_up: |\n| lib/Server.js | 79.94% <80%> (-0.22%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2e5d12...4cefefb. Read the comment docs.\n. # Codecov Report\nMerging #1683 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1683   +/-\n=======================================\n  Coverage   79.59%   79.59%         \n=======================================\n  Files           7        7         \n  Lines         544      544         \n  Branches      165      165         \n=======================================\n  Hits          433      433         \n  Misses         84       84         \n  Partials       27       27\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createConfig.js | 95.06% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2e5d12...72888ad. Read the comment docs.\n. # Codecov Report\nMerging #1684 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1684      +/-\n==========================================\n+ Coverage   79.59%   79.63%   +0.03%   \n==========================================\n  Files           7        7            \n  Lines         544      545       +1   \n  Branches      165      166       +1   \n==========================================\n+ Hits          433      434       +1   \n  Misses         84       84            \n  Partials       27       27\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 80.15% <\u00f8> (\u00f8) | :arrow_up: |\n| lib/utils/createConfig.js | 95.12% <0%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2e5d12...575779c. Read the comment docs.\n. # Codecov Report\nMerging #1685 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1685   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 419f02e...c0075e9. Read the comment docs.\n. # Codecov Report\nMerging #1686 into master will decrease coverage by 0.39%.\nThe diff coverage is 55.55%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #1686     +/-\n========================================\n- Coverage   79.59%   79.2%   -0.4%   \n========================================\n  Files           7       7           \n  Lines         544     553      +9   \n  Branches      165     169      +4   \n========================================\n+ Hits          433     438      +5   \n- Misses         84      88      +4   \n  Partials       27      27\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createConfig.js | 91.11% <55.55%> (-3.96%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 884fac0...1ea3fae. Read the comment docs.\n. # Codecov Report\nMerging #1688 into master will increase coverage by 0.24%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1688      +/-\n==========================================\n+ Coverage   84.14%   84.39%   +0.24%   \n==========================================\n  Files           7        7            \n  Lines         511      519       +8   \n  Branches      155      159       +4   \n==========================================\n+ Hits          430      438       +8   \n  Misses         64       64            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/createConfig.js | 95.5% <100%> (+0.44%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21687c3...a4d3d76. Read the comment docs.\n. # Codecov Report\nMerging #1691 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1691   +/-\n=======================================\n  Coverage   84.39%   84.39%         \n=======================================\n  Files           7        7         \n  Lines         519      519         \n  Branches      159      159         \n=======================================\n  Hits          438      438         \n  Misses         64       64         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4b2076c...a43c4d8. Read the comment docs.\n. # Codecov Report\nMerging #1692 into master will decrease coverage by 0.62%.\nThe diff coverage is 94.11%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1692      +/-\n==========================================\n- Coverage   84.39%   83.76%   -0.63%   \n==========================================\n  Files           7        8       +1   \n  Lines         519      536      +17   \n  Branches      159      161       +2   \n==========================================\n+ Hits          438      449      +11   \n- Misses         64       70       +6   \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/utils/findPort.js | 94.11% <94.11%> (\u00f8) | |\n| lib/utils/createCertificate.js | 66.66% <0%> (-33.34%) | :arrow_down: |\n| lib/Server.js | 78.89% <0%> (-1.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5d1476e...6727de2. Read the comment docs.\n. # Codecov Report\nMerging #1696 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1696      +/-\n==========================================\n+ Coverage   83.76%   83.85%   +0.09%   \n==========================================\n  Files           8        8            \n  Lines         536      539       +3   \n  Branches      161      162       +1   \n==========================================\n+ Hits          449      452       +3   \n  Misses         70       70            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.05% <100%> (+0.16%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34a4a26...5f3fa33. Read the comment docs.\n. # Codecov Report\nMerging #1697 into master will increase coverage by 2.23%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #1697      +/-\n=========================================\n+ Coverage   83.76%     86%   +2.23%   \n=========================================\n  Files           8       8            \n  Lines         536     536            \n  Branches      161     161            \n=========================================\n+ Hits          449     461      +12   \n+ Misses         70      62       -8   \n+ Partials       17      13       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 82.05% <\u00f8> (+3.16%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34a4a26...aabc562. Read the comment docs.\n. # Codecov Report\nMerging #1698 into master will decrease coverage by 0.12%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1698      +/-\n==========================================\n- Coverage   83.76%   83.64%   -0.13%   \n==========================================\n  Files           8        8            \n  Lines         536      538       +2   \n  Branches      161      161            \n==========================================\n+ Hits          449      450       +1   \n- Misses         70       71       +1   \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.74% <50%> (-0.16%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fa17131...6f64e54. Read the comment docs.\n. # Codecov Report\nMerging #1701 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1701   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f7f052...9304917. Read the comment docs.\n. # Codecov Report\nMerging #1704 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1704   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f7f052...9b307f9. Read the comment docs.\n. # Codecov Report\nMerging #1705 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1705   +/-\n=======================================\n  Coverage   83.85%   83.85%         \n=======================================\n  Files           8        8         \n  Lines         539      539         \n  Branches      162      162         \n=======================================\n  Hits          452      452         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa7de77...7fbc328. Read the comment docs.\n. # Codecov Report\nMerging #1706 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1706   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fa17131...827efc6. Read the comment docs.\n. # Codecov Report\nMerging #1707 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1707   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 07e8129...9e4370d. Read the comment docs.\n. # Codecov Report\nMerging #1708 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1708   +/-\n=======================================\n  Coverage   83.85%   83.85%         \n=======================================\n  Files           8        8         \n  Lines         539      539         \n  Branches      162      162         \n=======================================\n  Hits          452      452         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa7de77...cb5b359. Read the comment docs.\n. # Codecov Report\nMerging #1709 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1709   +/-\n=======================================\n  Coverage   83.85%   83.85%         \n=======================================\n  Files           8        8         \n  Lines         539      539         \n  Branches      162      162         \n=======================================\n  Hits          452      452         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa7de77...60af5b6. Read the comment docs.\n. # Codecov Report\nMerging #1710 into master will decrease coverage by 0.09%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #1710     +/-\n=========================================\n- Coverage   83.85%   83.76%   -0.1%   \n=========================================\n  Files           8        8           \n  Lines         539      536      -3   \n  Branches      162      161      -1   \n=========================================\n- Hits          452      449      -3   \n  Misses         70       70           \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 78.89% <0%> (-0.17%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aa7de77...44bde92. Read the comment docs.\n. # Codecov Report\nMerging #1714 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #1714   +/-\n=======================================\n  Coverage   83.76%   83.76%         \n=======================================\n  Files           8        8         \n  Lines         536      536         \n  Branches      161      161         \n=======================================\n  Hits          449      449         \n  Misses         70       70         \n  Partials       17       17\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34a4a26...02cddb5. Read the comment docs.\n. # Codecov Report\nMerging #1721 into master will increase coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1721      +/-\n==========================================\n+ Coverage   83.76%   83.91%   +0.15%   \n==========================================\n  Files           8        8            \n  Lines         536      541       +5   \n  Branches      161      163       +2   \n==========================================\n+ Hits          449      454       +5   \n  Misses         70       70            \n  Partials       17       17\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 79.05% <100%> (+0.16%) | :arrow_up: |\n| lib/utils/createConfig.js | 95.6% <100%> (+0.09%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 34a4a26...7884dc8. Read the comment docs.\n. \n",
    "sergeymorkovkin": "Any chances to have it merged? :). @shellscape Got it. Thanks for an update. If you think I could do this, please let me known.. ",
    "frankwinter": "Sorry, please excuse the clumsy workflow.. It's my first contribution on a forked github-project :-/. If you call \u2014open without a value argv[\"open\u201c] will contain an empty string and options.open is going to be undefined.\nCurrently I don\u2019t know if this can be managed somewhere else..\n\nAm 11.07.2017 um 17:48 schrieb Andrew Powell notifications@github.com:\n@shellscape commented on this pull request.\nIn bin/webpack-dev-server.js https://github.com/webpack/webpack-dev-server/pull/825#discussion_r126730204:\n\n    options.open = true;\n\n\noptions.openPage = argv[\"open-page\"] || \"\";\noptions.openPage = argv[\"open-page\"];\n}\n+\nif(typeof argv[\"open\"] !== \"undefined\") {\nwhy not\n\n\nif(argv[\"open\"]) {\n  options.open = argv[\"open\"] || true;\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/webpack/webpack-dev-server/pull/825#pullrequestreview-49241590, or mute the thread https://github.com/notifications/unsubscribe-auth/AMvJZksMcp_dOe6I8zOOArmfJGsk4A0Dks5sM5kygaJpZM4MSo_g.\n\n\n. ",
    "shuijingleihen": "How to set the parameter in webpack.config.js file? My configure likes that:\njavascript\ndevServer: {\n    port: '8081'\n    ,compress: true\n    ,watchContentBase: true\n    ,open: 'chrome'\n    ,openPage: 'views/index/'\n}\nbut it doesn't work!!! And throw an error:\n\n. @shellscape Oh sorry, I thought it was an issue, thank you for your reminding\uff01. ",
    "crowscript": "This solves the issue.\nIn package.json:\n\"start\": \"webpack-dev-server  --config webpack.dev.js --open chrome\",\nIn webpack.config.js:\ndevServer: {\n        ...\n        open: 'chrome'\n      },\n. ",
    "NicolasT": "I wanted to bisect this, but turned out I needed some slight tweaks to the test script for it to work with WDS 1.16 (which I wanted to use as a baseline).\nTurns out those tweaks make the thing work with 2.4.1 as well... \ud83d\ude15 \n```diff\n--- script.js   2017-03-06 02:39:47.275218189 +0100\n+++ script2.js  2017-03-06 02:40:45.448963016 +0100\n@@ -21,8 +21,9 @@\n   }\n }\n-const server = mkServer().listen(0, 'localhost', function created() {\n-  const address = server.address();\n+const server = mkServer();\n+server.listen(0, 'localhost', function created() {\n+  const address = server.listeningApp.address();\n   console.log('Server created, running on ' + address.address + ':' + address.port);\nfunction closeServer() {\n``\nI'm quite puzzled.... Hmh, it's late.listenon a WDSServerdoesn't return theServerinstance, but the result ofthis.listeningApp.listen. In that sense, the API of WDSServeris different from anexpressapp, whoselisten` method returns... a server. Or something.\nAnyway, if the current API is the desired API (though I think it may be a bit confusing), I guess this can be closed.. ",
    "matism": "After some researching it looks like it is a webpack issue: https://github.com/webpack/watchpack/issues/42. ",
    "pbarbiero": "I wasnt sure where to open this, here, in webpack itself, or maybe webpack-dev-middleware? I have no issues reopening this in a different spot.. Did some more digging. Issue comes from using\n new webpack.DefinePlugin({process: { env: { NODE_ENV: JSON.stringify('development') } }}) \nin the config file in combination with webpack-dev-server in hot mode and target=electron-main|electron-renderer\nClosing as its not a webpack-dev-server issue, but most likely a webpack issue itself.\n. ",
    "zackify": "Haha. This is what I get for coding too long. Thanks. This is embarrassing!. ",
    "nsuedu": "excuse me,i have same problem\uff0c can you tell me the solution?. @zackify . @SpaceK33z . ",
    "khurram-wasim": "```\nconst express = require('express');\nconst webpackDevServer = require('webpack-dev-server');\nconst webpack = require('webpack');\nconst webpackConfig = require('./webpack.config.js');\nconst app = express();\nconst compiler = webpack(webpackConfig);\napp.use(express.static(__dirname + '/www'));\napp.use(webpackDevServer(compiler, {\n  hot: true,\n  filename: 'bundle.js',\n  publicPath: '/assets/',\n  stats: {\n    colors: true,\n  },\n  historyApiFallback: true,\n}));\n```\nWhen I do npm start\nI am getting this error Cannot set property 'hot' of undefined , any help to get rid of it ?\n. ",
    "ebardajiz": "I'm still getting this error :(. I'm using the Node API\npackage.json:\njson\n    \"webpack\": \"3.5.5\",\n    \"webpack-dev-server\": \"2.7.1\"\nusage:\n```js\nconst Webpack = require('webpack')\nconst WebpackDevServer = require('webpack-dev-server')\nconst config = require('./webpack.dev.config.js')\nconst compiler = Webpack(config)\nconst server = WebpackDevServer(compiler)\nserver.listen(9000, 'localhost', () => {\n  console.log('Bundle available at localhost:9000')\n})\n```\nAm I doing something wrong here?. Thanks for pointing out the example, made me realize how to properly use it!\ndiff\n- const server = WebpackDevServer(compiler)\n+ const server = new WebpackDevServer(compiler). ",
    "koba04": "Thanks!. Thank you!. ",
    "da2018": "@SpaceK33z  Sure,I have done at the same time http://stackoverflow.com/questions/42712054/content-not-from-webpack-is-served-from-foo .Thanks.. ",
    "robolivable": "This should at least be tagged with \"improve-usage-docs\", or something along those lines.. ",
    "raviroshan": "@SpaceK33z : The requirement is to override the HTTP methods. before making a request to actual API using webpack-dev-server proxy.\nAs we already have the option target to dynamically point to different Up-Stream server, do we have any option to override the http methods also.\nServer 1 may support all the Methods, but \nServer 2 supports only GET.\n. @SpaceK33z : I don't have access to Server - 2 write.\nIt was in line with the target option in the proxy object.\nYou can close this ticket, it would be appropriate to  open a feature request @ http-proxy-middleware.\nThanks :). ",
    "bochen2014": "@SpaceK33z   its not a question. Its a feature request. this a regression. something worked before now isn't working anymore\nI'm talking about webpack-dev-server@^1\n. @SpaceK33z  do you have any idea?. I'm switching to https://github.com/indexzero/http-server as it seems to fit the purpose  better \n(server static files with zero configuration. I just think that wds should provide the same functionality -- which it did on wds@^1 -- but I understand it's more a webpack issue). ",
    "sarora2073": "i'm on wds v 2.4.1 and still experience this issue sporadically. i'm going to upgrade to 2.4.2 (assuming that has the fix) and will let you know in a few days if it appears to have gone away \"for good\". It's not reproducible at will for me, hence the need to watch over a few days.. update: this symptom of WDS going into a reload loop appears to have gone away for me after upgrading WDS to 2.4.2. I frequently trigger multiple updates during development (i frequently save one open code file at a time in quick succession, resulting in several interrupted compilation attempts, sometimes leading to the loop). I happen to be using Windows 10 / Chrome, which is different from the other reported environments, so am guessing this affects multiple browsers / OSes, given the related threads / reports of this bug. . ",
    "nojvek": "https://github.com/webpack/webpack/issues/4497. ",
    "StephanBijzitter": "Ha, well I'll be damned.. Ha, well I'll be damned.. devServer: {\n        disableHostCheck: true,\n        // other options\n    }\nYeah, in the end quite obvious... I had to add it as part of the devServer configuration.. ",
    "ryancui-": "I upgraded to v2.4.2, but the problem still exists.. I upgraded to v2.4.2, but the problem still exists.. Today I found the problem disappear...without any upgrade of webpack or webpack-dev-server but a Chrome upgrade and Windows 10 upgrade.\nChrome Version: 58.0.3029.81. ",
    "steve-king": "Upgrading fixed it for me...thanks!. Upgrading fixed it for me...thanks!. ",
    "cwharris": "I'm having this issue as well on webpack-dev-server@2.4.2. The webpack-dev-server client code fails to establish a websocket connection or the websocket is disconnected unexpectedly. Refresh ensues, whole processes starts over and repeats indefinitely. The issue only seems to occur with https enabled. Setting --host localhost per #592 did not resolve the issue.. ",
    "langshu": "Have the same issue here on Chrome 59.0.3071.86 (32-bit)\nwebpack-dev-server is the latest version - 2.4.5\nOS - Win 7. ",
    "laizimo": "have the same issue here on Chrome 59.0.3071.86 (32-bit)\nwebpack-dev-server is the latest version - 2.5.1\nOS - win 10. ",
    "Sayan751": "Have the same issue here on Chrome 59.0.3071.115 (64-bit)\nwebpack-dev-server version - 2.5.1\nwebpack version - 2.7.0\nOS - Win 10. ",
    "soiaz": "Any updates on the issue @Sayan751 posted? Facing the same issue for the same configurations. Any updates on the issue @Sayan751 posted? Facing the same issue for the same configurations. ",
    "izziewong": "Having same issue as well, any updates?\nchrome version is: 59.0.3071.115 (Official Build) (64-bit)\nwebpack version is: 2.6.1\nwebpack-dev-server version is: 2.4.5\nOS is: macOS. ",
    "ywzhaiqi": "[WDS] Disconnected all the same In Chrome 59, Chrome 58, Firefox 54, webpack no compile.\n\nwebpack: 3.4.1\nwebpack-dev-server: 2.6.1. ",
    "lirongfei123": "just add this code to your hosts file, everything will be ok\n127.0.0.1        localhost. ",
    "madaz": "having same problems in Chrome 60.0.3112.113 64bit/Windows10\nwebpack-dev-server --open --inline --hot --content-base dist/ --config ./config/webpack.config.js --env.dev --env.serve\n\"webpack\": \"^3.5.5\",\n    \"webpack-dev-server\": \"^2.7.1\"\nwebpack.config.js\ndevServer: {\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n        },\n      },\nHowever it works in Firefox. The work around with Chrome and windows 10 is to create your own self\nsigned certificate and install that as a trusted certificate. Then use that\ncertificate with webpack-dev-server. I used the self signed certificate\n that came with IIS/IIS Express by exporting as pfx. There are articles on\nthe web on how to trust that certificate.\nOn 15 Sep. 2017 21:04, \"Reverbe\" notifications@github.com wrote:\n\nI also have this issue in Chrome Version 61.0.3163.91 (Official Build)\n(64-bit) (Win 10).\nwebpack 3.5.6\nwebpack-dev-server 2.7.1\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/851#issuecomment-329751414,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABFkvUQTLmKsb1msYWSikWdapuHYkPgVks5silmlgaJpZM4MhKqR\n.\n. \n",
    "Reverbe": "I also have this issue in Chrome Version 61.0.3163.91 (Official Build) (64-bit) (Win 10).\nwebpack 3.5.6\nwebpack-dev-server 2.7.1\n. ",
    "dennisoelkers": "Which script tag?. Your snippet is missing the definition of timedout, probably happening in the same scope as sock?. ",
    "svtfrancisco": "@lucaspaiva1 what you say? no sense. . @lucaspaiva1 what you say? no sense. . ",
    "Mds92": "I have the same problem with @angular/cli: ^1.6.1 and @angular/core: ^5.1.1\nMore details:\nhttps://stackoverflow.com/questions/47852633/angular-5-1-1-infinite-refresh-loop-after-set-proxy-for-signalr. ",
    "jminnick": "Okay, anyone else having this issue, it may be due to having a self-signed cert that google does not like. I got around this by always trusting my cert in Keychain Access.\nEDIT: This post will be helpful\nhttps://stackoverflow.com/questions/7580508/getting-chrome-to-accept-self-signed-localhost-certificate. ",
    "skorunka": "Same problem on Win10, Chrome Version 63.0.3239.132 (Official Build) (64-bit), Angular Cli 1.6.4. Seems it only happens when running as https(ng serve --aot --ssl). Sometimes, just the page refresh helps, sometimes opening a page in a new tab :(. @k1r8r0wn What is development.js file?. ",
    "k1r8r0wn": "In development.js file try to use the following settings for dev_server:\ndev_server: {\n    host: '127.0.0.0'\n    port: 8080\n    https: false\n    disableHostCheck: true\n}. I've meant .config.js file. development.js in Rails app, actually.. ",
    "chuks-o": "This issue is somewhat device specific and it all falls back to your host. Webpack assumes you use \"localhost\" on your dev, and so if you use its IP equivalent say 127.0.1.1, you would get that error. Find out the host you are using and then you can make a change to the \"host\" on your webpack config like so... snippet from Vue webpack config\ndevServer: {\n    clientLogLevel: 'warning',\n    historyApiFallback: {\n      rewrites: [\n        { from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, 'index.html') },\n      ],\n    },\n    hot: true,\n    compress: true,\n    host: '127.0.1.1' || config.dev.host,  // Change the host here\n    port: PORT || config.dev.port,. This issue is somewhat device specific and it all falls back to your host. Webpack assumes you use \"localhost\" on your dev, and so if you use its IP equivalent say 127.0.1.1, you would get that error. Find out the host you are using and then you can make a change to the \"host\" on your webpack config like so... snippet from Vue webpack config\ndevServer: {\n    clientLogLevel: 'warning',\n    historyApiFallback: {\n      rewrites: [\n        { from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, 'index.html') },\n      ],\n    },\n    hot: true,\n    compress: true,\n    host: '127.0.1.1' || config.dev.host,  // Change the host here\n    port: PORT || config.dev.port,. ",
    "cwdott": "I encountered the same issue with the following context:\n\nDeveloping on a remote host (VPS server running Ubuntu 16, vue/vue-cli, webpack/webpack-simple template)\nNginx proxy redirecting domain name to localhost and custom port\n\nWhen I would run npm run dev and refresh my browser I would get the same [WDS] Disconnected! error and looping GET XHR http://localhost/path/\nAdding the following line in webpack.config.js worked to fix this for me:\ndevServer {\n    ...\n    public: 'actualdomain.com',\n    ...\n}. I encountered the same issue with the following context:\n\nDeveloping on a remote host (VPS server running Ubuntu 16, vue/vue-cli, webpack/webpack-simple template)\nNginx proxy redirecting domain name to localhost and custom port\n\nWhen I would run npm run dev and refresh my browser I would get the same [WDS] Disconnected! error and looping GET XHR http://localhost/path/\nAdding the following line in webpack.config.js worked to fix this for me:\ndevServer {\n    ...\n    public: 'actualdomain.com',\n    ...\n}. ",
    "ChapalBarua": "I am facing the same issue even though I can see green padlock in my localhost.  I am using -\n\"webpack\": \"^3.10.0\",\n\"webpack-dev-server\": \"~2.7.1\",\nDo we have any fix in latest release? Or is it not resolved yet?. ",
    "blachawk": "I'm on webpack 4.12 and also using webpack-dev-server 3.1.4.  Setting my publicPath to '/' worked for me removing these [WDS] Disconnected! errors.\n```\n output: {\n   path: path.resolve(__dirname, 'deploy'),\n   filename: 'deploy.js',\n   publicPath: '/'\n  },\n```. ",
    "dvakatsiienko": "same issue still. I have fixed this issue by switching to webpack-serve instead of webpack-dev-server. pretty neat package btw. ",
    "aipi": "@cattermo 's suggestion worked for me! \ud83d\udc4d . @cattermo 's suggestion worked for me! \ud83d\udc4d . ",
    "KingMaks": "@cattermo 's good sulution, works for me!. ",
    "rvanlaak": "FYI: Switching to webpack-serve solved the disconnects and security errors for me. It uses a native websocket implementation, so removes the socket.js dependency that causes these errors on certain browsers (see https://github.com/OfficeDev/office-js/issues/209).. ",
    "blackshadev": "@evilebottnawi  this was one of the issues that moved me to webpack-serve since it completely broke webpack-dev-server with https  for me.. @Rouche This wasn't the case for me. My sockjs is connecting to locahost. Moreover my webpack-dev-server doesn't even listen on an ipaddress besides localhost. \nEven if it would, that work-around wouldn't work for me, because I use an external service which has a CORS header for a local development setup, but this doesn't work with the IP address because multiple devs (with other IPs connect to it) and a CORD wildcard doesn't work because Chrome just drops CORS wildcards with SSL . . @evilebottnawi  this was one of the issues that moved me to webpack-serve since it completely broke webpack-dev-server with https  for me.. Good to hear. I will upgrade my setup next week and report back with the\nresults.\nOn Fri, 31 Aug 2018, 16:23 Roman Nuritdinov, notifications@github.com\nwrote:\n\nWell, it looks fine for the last day with node v10.9.0. I think we can\nreopen this issue if something new will happen.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/1449#issuecomment-417680039,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC11IAnAad6vq1A0jWHpqAZVnVSsSrt8ks5uWUbigaJpZM4VmTdG\n.\n. @evilebottnawi Seems to work just fine. Thanks!. @jrop Which version of webpack-dev-server are you running. For me this is absolutely fixed in webpack-dev-server version 3.1.7. \n",
    "Rouche": "Had this problem for a while and solved it in a odd way.\nDev server starts with 2 adress:\nApp running at:\n  - Local:   https://localhost:8085/\n  - Network: https://192.168.0.151:8085/\nI was using https://localhost:8085/ in browser, but the sock was connecting with Network.\nRequest URL: https://192.168.0.151:8085/sockjs-node/info?t=1535198535563\n[WDS] Disconnected!\nWhen i used https://192.168.0.151:8085 in browser instead of localhost, chrome shown the window to accept certificate and proceed. \nNow everything is ok, on both localhost, and ip.\nNo need for flag. It was not working when i tryed.\nI never bothered to try Network adress.. /bonk. This was too simple.. Today after chrome update bang!\nSelf signed certificate altName is now mendatory.\nNo choice to use host.\nWith vue-cli3 config:\nmodule.exports = {\n...\n    devServer: {\n        open: process.platform === 'darwin',\n        host: 'localhost',\n        port: 8444,\n        https: true,\n        hotOnly: false,\n    },\n}\nYo @simardo \ud83d\udc4d . ",
    "ckarcz": "using 127.0.0.1 instead of localhost fixed this for me \ud83e\udd37\u200d\u2642\ufe0f . ",
    "simardo": "@ckarcz, running webpack-dev-server with --https --host 127.0.0.1 fixed the problem for me as well.\nI can even access my site with https://localhost without problems.\n//cc: @Rouche . ",
    "WellspringCS": "I tried many of the above suggestions, and I could very much have gotten some things wrong, but here's what worked for me. (I call this \"guns a'blazin\" mode, where you try anything, out of desperation....)\n(And note that the following efforts are not listed chronologically. I'm not sure I was sane during the last two days since this issue benighted my life.)\nI started on Angular 6, ended up Angular 7.0.0-rc1  ---> WDS disconnect still there.\nI started on webpack-dev-server I.don't.know and ended up on 3.1.5  ---> WDS disconnect still there.\nI started on sockjs-client I.don't.know and ended up on 1.1.5  ---> WDS disconnect still there.\nI tried all the above IP solutions.   ---> WDS disconnect still there.\nAnd by there, I mean endless looping. Quoth the raven: Disconnected!\nFinally out of sheer desperation, the country bunkin tried brain surgery using the manual. I have NO idea what I did, but I did exactly what @lukace said he/she did, modifying socket.js and index.js.\nAnd....\nIt worked.\nWhat I would like to know is whether the code @lukace modified should be considered a bug to be fixed. For my project, EVERYTHING works now, and it didn't before. All my project was trying to do was redirect to an OAuth2 server to get a security token, and all I was getting was endless looping.\nAll that to say, my project was dead in the water, using all the latest releases. I don't think I had a bug, but this fix was required for my Angular project to work with OAuth2 security. \nFor the sake of the next soul, I log these reflections, but am wondering if an issue should be opened somewhere. Is this a sockjs-client bug? webpack-dev-server bug? @lukace I'm sure what you said was enough to go on, but I'm not a brain surgeon, so I can't discern whether your fix is a global good for all or just a good workaround that has its downsides for other users. As for me I think it's REQUIRED, but hey, I might be biased.\nI end with these words of gratitude: @lukace you saved my bacon. I'll name my next dog after you. If my wife ever lets me buy one.\n. I tried many of the above suggestions, and I could very much have gotten some things wrong, but here's what worked for me. (I call this \"guns a'blazin\" mode, where you try anything, out of desperation....)\n(And note that the following efforts are not listed chronologically. I'm not sure I was sane during the last two days since this issue benighted my life.)\nI started on Angular 6, ended up Angular 7.0.0-rc1  ---> WDS disconnect still there.\nI started on webpack-dev-server I.don't.know and ended up on 3.1.5  ---> WDS disconnect still there.\nI started on sockjs-client I.don't.know and ended up on 1.1.5  ---> WDS disconnect still there.\nI tried all the above IP solutions.   ---> WDS disconnect still there.\nAnd by there, I mean endless looping. Quoth the raven: Disconnected!\nFinally out of sheer desperation, the country bunkin tried brain surgery using the manual. I have NO idea what I did, but I did exactly what @lukace said he/she did, modifying socket.js and index.js.\nAnd....\nIt worked.\nWhat I would like to know is whether the code @lukace modified should be considered a bug to be fixed. For my project, EVERYTHING works now, and it didn't before. All my project was trying to do was redirect to an OAuth2 server to get a security token, and all I was getting was endless looping.\nAll that to say, my project was dead in the water, using all the latest releases. I don't think I had a bug, but this fix was required for my Angular project to work with OAuth2 security. \nFor the sake of the next soul, I log these reflections, but am wondering if an issue should be opened somewhere. Is this a sockjs-client bug? webpack-dev-server bug? @lukace I'm sure what you said was enough to go on, but I'm not a brain surgeon, so I can't discern whether your fix is a global good for all or just a good workaround that has its downsides for other users. As for me I think it's REQUIRED, but hey, I might be biased.\nI end with these words of gratitude: @lukace you saved my bacon. I'll name my next dog after you. If my wife ever lets me buy one.\n. I'm seeing this behavior too. Driving me nuts.. I found a solution for my situation and posted about it here: webpack/webpack-dev-server#851. @evilebottnawi  I apologize, but I cannot, the biggest reason being this: in order to solve the problem I did strip my project bare and rebuild it. And the issue did not resurface until I had added several layers of components and navigation, at which point I started having existential moments, wondering what to do. I finally tried the desperation already noted, and it worked. But it seems that in order to have the problem, you have to have some weight to your project, I can't deliver a working OAuth2/API solution to you, sadly.\nI will clarify, however, that the key features that produced this problem for me were (and I'm not sure which, if any, are the necessary ingredients... I'm just listing some salient features):\n1) OAuth security implemented by oidc-client\n2) Angular 6+\n3) angular materials\n4) lazy loading\nHere's the contents of my package.json\n{\n  \"name\": \"eqp-management-client\",\n  \"version\": \"0.0.0\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"ng\": \"ng\",\n    \"start\": \"ng serve -o\",\n    \"startfresh\": \"ng serve -o\",\n    \"startprod\": \"ng serve -o --prod --configuration=production\",\n    \"startstaging\": \"ng serve -o --prod --configuration=staging\",\n    \"build\": \"ng build\",\n    \"buildprod\": \"ng build --configuration=production\",\n    \"buildstaging\": \"ng build --configuration=staging\",\n    \"buildwatch\": \"ng build --watch --delete-output-path false\",\n    \"test\": \"ng test\",\n    \"lint\": \"ng lint\",\n    \"e2e\": \"ng e2e\",\n    \"ngsw\": \"node_modules/.bin/ngsw-config dist ngsw-config.json\",\n    \"ngsw-config\": \"node_modules/.bin/ngsw-config dist src/ngsw-config.json\",\n    \"ngsw-copy\": \"cp node_modules/@angular/service-worker/ngsw-worker.js dist/\",\n    \"build-prod-ngsw\": \"ng build --prod && npm run ngsw-config && npm run ngsw-copy\",\n    \"serve-prod-ngsw\": \"npm run build-prod-ngsw && http-server dist -p 8080\"\n  },\n  \"prettier\": {\n    \"printWidth\": 80,\n    \"singleQuote\": true,\n    \"useTabs\": false,\n    \"tabWidth\": 2,\n    \"semi\": true,\n    \"bracketSpacing\": true\n  },\n  \"private\": true,\n  \"dependencies\": {\n    \"@angular-devkit/core\": \"0.6.8\",\n    \"@angular/animations\": \"6.1.4\",\n    \"@angular/cdk\": \"^6.1.4\",\n    \"@angular/common\": \"6.1.4\",\n    \"@angular/compiler\": \"6.1.4\",\n    \"@angular/core\": \"6.1.4\",\n    \"@angular/forms\": \"6.1.4\",\n    \"@angular/http\": \"6.1.4\",\n    \"@angular/material\": \"^6.4.6\",\n    \"@angular/platform-browser\": \"6.1.4\",\n    \"@angular/platform-browser-dynamic\": \"6.1.4\",\n    \"@angular/pwa\": \"^0.7.5\",\n    \"@angular/router\": \"6.1.4\",\n    \"@angular/service-worker\": \"^6.1.4\",\n    \"@fortawesome/fontawesome-free\": \"^5.2.0\",\n    \"@ngrx/effects\": \"^6.1.0\",\n    \"@ngrx/store\": \"^6.1.0\",\n    \"@ngrx/store-devtools\": \"^6.1.0\",\n    \"automapper-ts\": \"^1.9.0\",\n    \"bootstrap\": \"4.1.0\",\n    \"core-js\": \"^2.4.1\",\n    \"cosmiconfig\": \"^5.0.5\",\n    \"fast-json-patch\": \"^2.0.6\",\n    \"hammerjs\": \"^2.0.8\",\n    \"idb\": \"^2.1.3\",\n    \"jquery\": \"^3.3.1\",\n    \"json2typescript\": \"^1.0.6\",\n    \"oidc-client\": \"^1.5.1\",\n    \"popper\": \"^1.0.1\",\n    \"popper.js\": \"^1.14.4\",\n    \"resize-observer-polyfill\": \"^1.5.0\",\n    \"rxjs\": \"^6.2.2\",\n    \"zone.js\": \"^0.8.26\"\n  },\n  \"devDependencies\": {\n    \"@angular-devkit/build-angular\": \"~0.7.5\",\n    \"@angular/cli\": \"7.0.0-rc.1\",\n    \"@angular/compiler-cli\": \"6.1.4\",\n    \"@angular/language-service\": \"6.1.4\",\n    \"@types/jasmine\": \"~2.5.53\",\n    \"@types/jasminewd2\": \"~2.0.2\",\n    \"@types/node\": \"~6.0.60\",\n    \"codelyzer\": \"^4.0.1\",\n    \"jasmine-core\": \"~2.6.2\",\n    \"jasmine-spec-reporter\": \"~4.1.0\",\n    \"karma\": \"~1.7.0\",\n    \"karma-chrome-launcher\": \"~2.1.1\",\n    \"karma-cli\": \"~1.0.1\",\n    \"karma-coverage-istanbul-reporter\": \"^1.2.1\",\n    \"karma-jasmine\": \"~1.1.0\",\n    \"karma-jasmine-html-reporter\": \"^0.2.2\",\n    \"protractor\": \"~5.1.2\",\n    \"sockjs-client\": \"1.3.0\",\n    \"ts-node\": \"~3.2.0\",\n    \"tslint\": \"~5.7.0\",\n    \"typescript\": \"^2.9.2\"\n  },\n  \"main\": \"index.js\"\n}\n. Yes, I would be fine with that approach, and if I can be of help I'd gladly do so. Except that your posted name reads \"I want to be evil\" if read backwards. :) Or should I read it \"live\" ? So much riding on the translation!. I may be confused, as I'm using Angular CLI which uses webpack-dev-server, but my version of webpack-dev-server in the root folder node_modules is 3.1.7, and I've specified that in my Angular package.json... and yet STILL I see this crash continuously. I'm going to take my version of node back to 10.5 and see what happens. (Currently it's 10.7). So... five hours later, and I've not seen the error yet. I still have the occasional \"The expression evaluated to a falsy value\" crash, but moving back to 10.5... I count it as a huge win.\nFor me, at least, webpack-dev-server 3.1.7 proved to be a false hope.. ",
    "silvenon": "Not sure when this started happening, but it seems to happen in every browser. Here's a repro.. Works for me when I downgrade to 3.1.10, without any additional options. https://github.com/webpack/webpack-dev-server/issues/1604#issuecomment-449550096. ",
    "c80609a": "Works for me, webpack.confg.js:\nmodule.exports = {\n  devServer: {\n    headers:          { 'Access-Control-Allow-Origin': '*' },\n    https:            false,\n    disableHostCheck: true\n  },\n  [...rest]\n}. ",
    "panzelva": "@c80609a's solution worked for me - actually simply adding disableHostCheck: true to devServer options worked.\n. @c80609a's solution worked for me - actually simply adding disableHostCheck: true to devServer options worked.\n. ",
    "monteiz": "In our case the issue was due to a mismatch between the host name that webpack-dev-server was using to serve the asset, and the host name the application was running from.\nSpecifically, our local application was running from https://dev.resumize.me, but webpack-dev-server was serving the asset from 127.0.0.1.\nYou can control the host name used by webpack-dev-server with the option --host. So in our case, we had to launch it with:\nwebpack-dev-server.js  --host dev.resumize.me --https \nHope this helps.. ",
    "laryssamagalhaes": "On chrome works, but I've the same problem on the firefox (64.0) \ud83d\ude22 . ",
    "chowdam": "issue resolved after adding below in polyfills.ts file:\nimport 'core-js/es7/object';\nimport 'core-js/es7/array';. issue resolved after adding below in polyfills.ts file:\nimport 'core-js/es7/object';\nimport 'core-js/es7/array';. issue resolved after adding below in polyfills.ts file:\nimport 'core-js/es7/object';\nimport 'core-js/es7/array';. ",
    "TSMMark": "What worked for me was adding config for allowedHosts https://webpack.js.org/configuration/dev-server/#devserverallowedhosts. ",
    "johnboxall": "Based on https://github.com/webpack/webpack-dev-server/commit/e97741c84ca69913283ae5d48cc3f4e0cf8334e3 and https://security.stackexchange.com/a/91556 I believe this could be regenerated with something like:\nsh\nopenssl req \\\n    -newkey rsa:2048 \\\n    -x509 \\\n    -nodes \\\n    -keyout server.pem \\\n    -new \\\n    -out server.pem \\\n    -subj /CN=localhost \\\n    -reqexts SAN \\\n    -config <(cat /System/Library/OpenSSL/openssl.cnf \\\n        <(printf '[SAN]\\nsubjectAltName=DNS:localhost')) \\\n    -sha256 \\\n    -days 3650\nOn OSX.\nIt also might be possible to take ssl/server.pem add run it through https://certificatetools.com/, then add an subjectAltName=DNS:localhost.\nAs part of this fix, it may be useful to commit the script used to generate the cert in case it needs to be regenerated again.. Based on https://github.com/webpack/webpack-dev-server/commit/e97741c84ca69913283ae5d48cc3f4e0cf8334e3 and https://security.stackexchange.com/a/91556 I believe this could be regenerated with something like:\nsh\nopenssl req \\\n    -newkey rsa:2048 \\\n    -x509 \\\n    -nodes \\\n    -keyout server.pem \\\n    -new \\\n    -out server.pem \\\n    -subj /CN=localhost \\\n    -reqexts SAN \\\n    -config <(cat /System/Library/OpenSSL/openssl.cnf \\\n        <(printf '[SAN]\\nsubjectAltName=DNS:localhost')) \\\n    -sha256 \\\n    -days 3650\nOn OSX.\nIt also might be possible to take ssl/server.pem add run it through https://certificatetools.com/, then add an subjectAltName=DNS:localhost.\nAs part of this fix, it may be useful to commit the script used to generate the cert in case it needs to be regenerated again.. If we wanted to extend this to Windows \u2013\u00a0we could generate the .p7b file format that Windows likes from the .pem using:\nbash\nopenssl crl2pkcs7 \\\n    -nocrl \\\n    -certfile server.pem\n    -out server.p7b\n. ",
    "ream88": "Apparently this fix works also for Chrome 57. Thx @johnboxall!. Apparently this fix works also for Chrome 57. Thx @johnboxall!. ",
    "jesstelford": "For those who may happen upon this via Google, I also had to set -extensions SAN to get @johnboxall's command to work:\nbash\nopenssl req \\\n    -newkey rsa:2048 \\\n    -x509 \\\n    -nodes \\\n    -keyout server.pem \\\n    -new \\\n    -out server.pem \\\n    -subj /CN=localhost \\\n    -reqexts SAN \\\n    -extensions SAN \\\n    -config <(cat /System/Library/OpenSSL/openssl.cnf \\\n        <(printf '[SAN]\\nsubjectAltName=DNS:localhost')) \\\n    -sha256 \\\n    -days 3650. ",
    "stephanvierkant": "I've used that command, but still getting ERR_CERT_AUTHORITY_INVALID on Chrome 58. Adding it to Chrome doesn't work because of \"Not a Certification Authority\" error message.\nAny idea how to fix this?. ",
    "ianfitzpatrick": "@stephanvierkant \nI don't know what platform you are on, but assuming you are on OSX, you need to follow these instructions to manually trust self signed certificates.\nhttp://www.robpeck.com/2010/10/google-chrome-mac-os-x-and-self-signed-ssl-certificates/#.WPpqZFKZNE4\nFWIW I followed the instructions from @jesstelford above, then manually re-trusted the new certificate following instructions similar to above link, and I'm now all good.\nMy local dev server is running debian on a VM in my mac, so I did have to change /System/Library/OpenSSL/openssl.cnf to /usr/lib/ssl/openssl.cnf\nI already had a key file, so here are the instructions above modified to use an existing key:\nopenssl req \\\n    -key server.local.key \\\n    -x509 \\\n    -nodes \\\n    -new \\\n    -out server.local.crt \\\n    -subj /CN=server.local \\\n    -reqexts SAN \\\n    -extensions SAN \\\n    -config <(cat /usr/lib/ssl/openssl.cnf \\\n        <(printf '[SAN]\\nsubjectAltName=DNS:server.local')) \\\n    -sha256 \\\n    -days 3650\n. ",
    "chibisuke": "Time to migrate away from chrome.... with the latest update chrome is violating RFC2818.. ",
    "zijuexiansheng": "The methods above works for me with Chrome. But I ran into some new issues.\n1) I cannot install the self-signed certificate on Firefox. And if I install it on iphone, it's not trusted. \n2) I added basicConstraints=CA:TRUE,pathlen:0 to the openssl.cnf file. Not it works perfectly for iphone. I can also import it to firefox. But the problem is that I cannot load my webpage with firefox\nDoes anyone have some ideas on how to resolve the firefox issue?. @paillave Chrome has some cache issue with certificates. Try reboot your computer or remove the cert cache and then reboot. ",
    "CreativeWolf": "Facing the same issue as @stephanvierkant mentioned here - https://github.com/webpack/webpack-dev-server/issues/854#issuecomment-295750188\nAppreciate any work around for this please.. ",
    "lehne": "https://serverfault.com/questions/845766/generating-a-self-signed-cert-with-openssl-that-works-in-chrome-58\nI used this method and it worked well.. ",
    "RakeshMangroliya": "Hello All\nplease use below mention solution work for Chrome + 58 and IISexpress 10.\nplease follow below steps\n1. run command prompt as administrator rights\n2 .type powershell -> enter\n3. now provide path of powershell script which i have attached\n4 .run it.\n5464-iisexpress.zip\n. @DBosley \nHi\nPlease use this script and let me know. or provide me port no for webpack-dev-server you are using.\nIISexpress.zip\n. ",
    "szkrd": "@lewis617 mingw git comes with an openssl binary (/mingw64/bin/openssl), use that. Copy /usr/ssl/openssl.cnf to somewhere else, add the two extra lines ([SAN]...) and use the -config param with the customized cnf, the rest of the params are the same as above mentioned. Hope it works!. ",
    "DBosley": "@RakeshMangroliya this script did not work for me. It did fix IIS Express cert issues, but it did not fix the cert bundled with webpack-dev-server. @ianfitzpatrick Thanks for your help! Combining some stuff with others from @jesstelford I was able to edit the cert that comes with webpack-dev-server to have the SAN without invalidating the cert my whole team has already added to their trusted store.\nAll of this was a hassle as a windows user. I couldn't get the <(cat /usr/lib/ssl/openssl.cnf <(printf '[SAN]\\nsubjectAltName=DNS:server.local')) part of the command to work in powershell, so I just ended up adding this section to my cnf file and removing it after I was done:\n[SAN]\nsubjectAltName=DNS:server.local. @ianfitzpatrick Thanks for your help! Combining some stuff with others from @jesstelford I was able to edit the cert that comes with webpack-dev-server to have the SAN without invalidating the cert my whole team has already added to their trusted store.\nAll of this was a hassle as a windows user. I couldn't get the <(cat /usr/lib/ssl/openssl.cnf <(printf '[SAN]\\nsubjectAltName=DNS:server.local')) part of the command to work in powershell, so I just ended up adding this section to my cnf file and removing it after I was done:\n[SAN]\nsubjectAltName=DNS:server.local. ",
    "wilga": "Here is a Windows script to generate the self-signed certificate with openssl:\nmakeCert.bat\nIt will create these files: example.cnf, example.crt, example.key. Here is a Windows script to generate the self-signed certificate with openssl:\nmakeCert.bat\nIt will create these files: example.cnf, example.crt, example.key. ",
    "zrubinrattet": "Took me a moment to figure out (with help from this post) that because I'm using a virtual host set up via MAMP Pro I had to change that command a bit to output key and crt files (to plug into MAMP Pro's SSL tab) and I had to make sure I inputted the correct name of the virtual server (wherever you see \"yoursite.dev\").\nopenssl req \\\n    -newkey rsa:2048 \\\n    -x509 \\\n    -nodes \\\n    -keyout yoursite.key \\\n    -new \\\n    -out yoursite.crt \\\n    -subj /CN=yoursite.dev \\\n    -reqexts SAN \\\n    -extensions SAN \\\n    -config <(cat /System/Library/OpenSSL/openssl.cnf \\\n        <(printf '[SAN]\\nsubjectAltName=DNS:yoursite.dev')) \\\n    -sha256 \\\n    -days 3650. ",
    "finkunlimited": "Hi Folks, for us beginner tech folk who has only ever used MAMP Pro and now pulling hair out as we cannot access our production site, is there a step by step guide explaining where and how to make these changes?\nThanks.. ",
    "k0a1a": "Here is a solution that works for me:\nhttps://ram.k0a1a.net/self-signed_https_cert_after_chrome_58\nTested on Debian/Apache2.4 + Debian/Chromium 59. You can as well add the cert using Chrome/Chromium \nhttps://ram.k0a1a.net/self-signed_https_cert_after_chrome_58#add_cert_to_the_browser\n(although I'm not sure if it works on OSX the same way it does on Linux). ",
    "accentureChris": "We're unable to upgrade to 2.7.1 currently. Any cross-platform guidance? I've tried several guides/openssl cert/key generation.. ",
    "paillave": "I am facing the issue. Whatever I can try doesn't work, I still have this ERR_CERT_AUTHORITY_INVALID after any solution I apply from the net.\nSomething puzzles me: why IISExpress doesn't face this issue? If I get it well, if IIS Express work, this means that, as a matter of a fact, it is possible to provide a certificate that can be accepted by chrome. Why the certificate provided by webpack-dev-server is refused even if it is trusted? BTW, I don't believe we should even create a certificate ourselves for a development server.. ",
    "stevenfitzpatrick": "Still getting issue with latest chrome and latest webpack regarding ERR_CERT_COMMON_NAME_INVALID.\nSo I am trying generating a self signed cert.\nWhat wasn't clear from this thread is where are you placing the self signed cert ?\nAre you replacing the cert in node_modules/webpack-dev-server/ssl/server.pem or like this\nhttps: {\n      ca: fs.readFileSync('server.pem')\n    },. ",
    "wenJanus": "I have the same problem when I use headless mode. Any body have some solution?\n09:24:07.722 DEBUG selenium-nodejs.HomePage: navigate\n[1120/092408.090:VERBOSE1:network_delegate.cc(31)] NetworkDelegate::NotifyBeforeURLRequest: https://localhost/home\n[1120/092408.403:VERBOSE1:navigator_impl.cc(242)] Failed Provisional Load: https://localhost/home, error_code: -501, error_description: , showing_repost_interstitial: 0, frame_id: 1\n. ",
    "czebiniak": "This is such a bullshit issue. This doesn't increase security in my CA at all. Forcing me to add a subject alternative name? WTF are you thinking Google? I'm done with Chrome. This on top of Chrome blocking all https in 2 months... Literally insane.. ",
    "vog": "Note that generating a self-signed certificate with SAN is a lot easier than any of the long commands specified here. In particular, you do not need to know the location of the OpenSSL config file in your system. It is described in the following StackOverflow answer:\n\n\nhttps://stackoverflow.com/a/41366949/19163. Note that generating a self-signed certificate with SAN is a lot easier than any of the long commands specified here. In particular, you do not need to know the location of the OpenSSL config file in your system. It is described in the following StackOverflow answer:\n\n\nhttps://stackoverflow.com/a/41366949/19163. \n\n",
    "calvellido": "Hi!  What's preventing this code to be merged?  Could I help in any way?. Hi!  What's preventing this code to be merged?  Could I help in any way?. ",
    "SidShetye": "@shellscape : what's the final solution ? Seems this is closed and #942 is in limbo.. ",
    "h6ah4i": "@shellscape Yep, I can still reproduce the same issue with 2.7.1.. ",
    "minya92": "I use this script (on windows), but it is not good (webpack-dev-server version 2.7.1)\ntaskkill /F /IM node.exe /T. ",
    "ahlechandre": "We can improve @dwjohnston suggestion by setting his command as a bash alias to avoid typing the command from scratch every time .\n\n\nOpen .bashrc file:\nbash\nvim ~/.bashrc\n\n\nAdd alias (port 3000, in my case):\nbash\nalias killwebpack=\"taskkill //pid \\`netstat -aon | grep 3000 | grep -P '(?<=LISTENING).*' -o | grep -P '\\\\d*' -o\\` //f\"\n\n\nRestart terminal and run whenever you need:\nbash\nkillwebpack. \n\n",
    "petermikitsh": "I'm still getting overlay warnings when using:\ndevServer: {\n      overlay: {\n        warnings: false,\n        errors: true\n      }\n    }\nIn-browser screenshot:\n\nConsole output:\n```\nWARNING in duplicate-package-checker:\n  \n    2.2.1 ./~/@fuego/forge/~/webpack\n    2.3.3 ./~/webpack\nwebpack: Compiled with warnings.\n```\nThe console says it's a warning, but it's still showing up in the browser overlay.. Also, I'm on 2.4.2 of webpack-dev-server.. ",
    "PixsaOJ": "sorry, I am noob here.\n\nI found a solution over here. gaearon/react-hot-loader#511 (comment)\n\nWhat is that App in: \nconst NextApp = require('components/App').default; ?. ",
    "joews": "@shellscape thanks for the ping! I'll put together a PR. Thanks \ud83d\ude04 . ",
    "jgierer12": "@SpaceK33z could you review this?. Sure. hotel is basically a process manager that assigns local URLs (aka Virtual Hosts, e.g. http://my-project.dev) to commands. You can, for example, set it up so that whenever you visit http://my-project.dev, it automatically runs npm start (or any other command) and serves the website. Since hotel uses a random port, exposed in the PORT env variable, it would be great to use that in webpack-dev-server so it's easier to set up. I know I can pass the port manually via a CLI option, but it would be much easer and more intuitive to set up that way.\nAlso, there are a bunch of other tools using PORT. From the top of my head I can think of Heroku and now, although I'm not sure why you'd want to use webpack-dev-server there. But I'm sure ther are other useful tools that expose the PORT variable.. That's what I was using previously, but it started getting problematic when I wanted to use it in a multi-platform project... overall it would just be nicer to have it use the env variable by default. But I totally get your concerns. ",
    "YoannBureau": "Tested on Mobile Chrome : same behaviour. ",
    "mimshwright": "@shellscape I was having the same problem. I created a repo that can reproduce this bug. \nI tried to strip out as much as I could and it appears that it's simply related to using --host x.x.x.x and --https options.\nhttps://github.com/mimshwright/wps-bug\nFYI, when I run this barebones demo on iOS I see the page refresh several times per second and the page never even renders! However, when I worked on a more substantial project, it was refreshing more like once every 3 or 4 seconds.. OK. well, hopefully someone else will pick this up.. ",
    "mrtnbroder": "@shellscape if we agree on 'pre' and 'post', I can submit a PR, however, I DO think the current order is just not correct. I'd expect the webpackMiddleware to be invoked first, so exactly like @msathis suggests it.\nI've stumbled upon an issue with how it is setup currently, so I'd rather like to submit a PR for the correct ordering, instead of adding additional hooks.\nMy current workaround is, using the undocumented options.feature hook, to get the correct order. However, this is not really stable since I do not know in the future which 'features' will be added to this property.. I don't see a usecase for pre yet as you can simply use setup for that, however, I think we introduce a hook within the middleware though that looks like this:\nmiddleware: () => {\n      // include our middleware to ensure it is able to handle '/index.html' request after redirect\n      app.use(this.middleware);\n      if (typeof options.middleware === 'function') { options.middleware(app, this); } // or options.postMiddleware\n    },. But pre and post is something already introduced in the codebase with e.g. a webpack Rule, https://webpack.js.org/configuration/module/#rule-enforce\nI'd try to stick to this pattern. Agreed?. Fixed!\nI've changed the example for middleware as well, saw that one was using the setup hook which is now the before hook.. Fixed.. ",
    "msathis": "Can you plz try removing ExtractTextPlugin for development mode?. ",
    "owenvallis": "Hi msathis,\nThanks for the tip. I removed the ExtractTextPlugin, but it didn't seem to help. However, that got me thinking that it might be related to the flask manifest plugin (manifest-revision-webpack-plugin). Sure enough, removing that seemed to fix the constant recompiling, but it also breaks updating the file names in the Jinja templates. \nIt's possible that the manifest plugin isn't the root issue, so I'll look into using HtmlWebpackPlugin with Jinja and see if that works instead.. ",
    "mrahulreddy": "@owenvallis : The webpack recompiles every millisecond only when I search for any string in the whole project (ctrl+shift+f) in my atom editor. Why is that so?. ",
    "normanaranez": "when it has the same name from entry to out it will compile without changing but when you try change the output name it will not compile again. same what happened to me. but i want to have the same name. how to make it like that?. Constant compile without changing the code\nvar webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\ncontext: __dirname + \"/assets\",\nentry: \"./js/main.js\",\n\noutput: {\n    path: path.resolve(__dirname + \"/dist/js\"),\n    filename: \"[name].js\"\n}\n\n};\nit will work if not same name\nvar webpack = require('webpack');\nvar path = require('path');\nmodule.exports = {\ncontext: __dirname + \"/assets\",\nentry: \"./js/main.js\",\n\noutput: {\n    path: path.resolve(__dirname + \"/dist/js\"),\n    filename: \"bundle.js\"\n}\n\n};. ",
    "aditya-matukumalli": "I was facing the same issue. I upgraded yarn using yarn upgrade and the issue seemed to go away. . ",
    "TomMettam": "I'm getting the same issue, when using webpack-dev-server in conjunction with html-webpack-plugin\nAdding \nnode: {\n        fs: \"empty\"\n    }\ndoes not appear to help.\n. Yes, but it's not available in the browser, which is what is triggering this error. ",
    "zzx88991": "I am not very familiar with nodejs. Isn't fs a built-in module for nodejs?. Thanks. I would take a try.. ",
    "karneaud": "+1. tried this with babel-plugin-transform-es2015-block-scoping did not work. . Ok sorry for this.. ",
    "rewieer": "Personnally I had this problem using the command : \n\u0300webpack-dev-sever webpack.config.dev.js --open\nYou must add the --config flag to put in a custom file.\n\u0300webpack-dev-sever --config webpack.config.dev.js --open\nSolved it for me.. Personnally I had this problem using the command : \n\u0300webpack-dev-sever webpack.config.dev.js --open\nYou must add the --config flag to put in a custom file.\n\u0300webpack-dev-sever --config webpack.config.dev.js --open\nSolved it for me.. ",
    "HauntedSmores": "I made an issue (#885) about this as well. Are you on windows?. ",
    "jorawarsingh": "@HauntedSmores  Yes i am on window!. ",
    "xiiiAtCn": "I met this issue as well. My version is 2.4.4 in windows. ",
    "slaymaker1907": "I am using webpack 3 and also have this issue on Windows.. ",
    "Andrew-Lahikainen": "Same, Windows 10:\nwebpack 2.6.0\nwebpack-dev-server: 2.4.5. ",
    "JonathanJonathanJonathan": "Also problems here,\nWindows 10\nwebpack 3.4.1\nwebpack-dev-server: 2.4.5. ",
    "JesseSingleton": "Having this issue too:\nWindows 10 \nWebpack 3.41\nwebpack-dev-server: 2.4.5\n. ",
    "MichaelZalla": "I'm getting the same behavior. Initial compilation succeeds and all bundles load in the browser. Any subsequent change is (ostensibly) compiled by Webpack but is not available in the browser.\nmacOS 10.12.5\nWebpack 3.4.1\nwebpack-dev-server 2.6.1\nts-loader 2.3.2\ntypescript 2.4.2\nwebpack: Compiled successfully.\nwebpack: Compiling...\nHash: 4c58a816563875a772dd\nVersion: webpack 3.4.1\nTime: 1830ms\n                               Asset      Size  Chunks                    Chunk Names\n                       app.bundle.js    568 kB       0  [emitted]  [big]  app\n                    vendor.bundle.js   5.37 MB       3  [emitted]  [big]  vendor\n0.9bb86568f99493e5e6b1.hot-update.js   19.3 kB       0  [emitted]         app\n9bb86568f99493e5e6b1.hot-update.json  43 bytes          [emitted]         \n [209] (webpack)/hot nonrecursive ^\\.\\/log$ 170 bytes {3} [built]\n [246] ./src/ts/app/.../foo.ts 7 kB {0} [built]\n    + 300 hidden modules\nwebpack: Compiled successfully.\nwebpack: Compiling...\nHash: f7a6e2addadcc8d90ea0\nVersion: webpack 3.4.1\nTime: 1618ms\n                               Asset      Size  Chunks                    Chunk Names\n                       app.bundle.js    568 kB       0  [emitted]  [big]  app\n                    vendor.bundle.js   5.37 MB       3  [emitted]  [big]  vendor\n0.4c58a816563875a772dd.hot-update.js   19.3 kB       0  [emitted]         app\n4c58a816563875a772dd.hot-update.json  43 bytes          [emitted]         \n [209] (webpack)/hot nonrecursive ^\\.\\/log$ 170 bytes {3} [built]\n [246] ./src/ts/app/.../foo.ts 7 kB {0} [built]\n    + 300 hidden modules\nwebpack: Compiled successfully.. ",
    "xusai2014": "I have the same problem . Couldn't auto compile when some files are changed. . ",
    "Nexxado": "I had the same issue, the culprit was webpack-chunk-hash.\nRemoving it from my webpack config solved the problem.\n\nMy Packages:\njson\n\"devDependencies\": {\n    \"@types/facebook-js-sdk\": \"^2.8.3\",\n    \"@types/node\": \"^8.0.25\",\n    \"angular2-template-loader\": \"^0.6.2\",\n    \"autoprefixer\": \"^7.1.2\",\n    \"awesome-typescript-loader\": \"^3.0.4-rc.2\",\n    \"codelyzer\": \"^3.1.2\",\n    \"css-loader\": \"^0.28.5\",\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\n    \"file-loader\": \"^0.11.2\",\n    \"html-loader\": \"^0.5.1\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"image-webpack-loader\": \"^3.2.0\",\n    \"inline-manifest-webpack-plugin\": \"^3.0.1\",\n    \"node-sass\": \"^4.5.0\",\n    \"postcss-flexbugs-fixes\": \"^3.2.0\",\n    \"postcss-load-config\": \"^1.2.0\",\n    \"postcss-loader\": \"^2.0.6\",\n    \"raw-loader\": \"^0.5.1\",\n    \"rimraf\": \"^2.5.4\",\n    \"sass-loader\": \"^6.0.0\",\n    \"script-ext-html-webpack-plugin\": \"^1.8.5\",\n    \"style-loader\": \"^0.18.2\",\n    \"tslint\": \"^5.7.0\",\n    \"tslint-loader\": \"^3.4.2\",\n    \"typescript\": \"^2.5.1\",\n    \"webpack\": \"^3.5.5\",\n    \"webpack-dev-server\": \"^2.7.1\",\n    \"webpack-merge\": \"^4.1.0\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"^4.3.6\",\n    \"@angular/compiler\": \"^4.3.6\",\n    \"@angular/core\": \"^4.3.6\",\n    \"@angular/forms\": \"^4.3.6\",\n    \"@angular/http\": \"^4.3.6\",\n    \"@angular/platform-browser\": \"^4.3.6\",\n    \"@angular/platform-browser-dynamic\": \"^4.3.6\",\n    \"@angular/router\": \"^4.3.6\",\n    \"core-js\": \"^2.5.0\",\n    \"rxjs\": \"^5.4.3\",\n    \"zone.js\": \"^0.8.17\"\n  }\nWebpack config:\n```JS\nmodule.exports = {\n    entry: {\n        'polyfills': './src/polyfills.ts',\n        'vendor': './src/vendor.ts',\n        'app': './src/main.ts'\n    },\n    output: {\n        path: helpers.root('dist'),\n        // publicPath: '/',\n        filename: '[name].[chunkhash].js',\n        chunkFilename: '[id].[chunkhash].chunk.js'\n    },\n    module: {\n        rules: [{\n            test: /.ts$/,\n            loaders: [{\n                loader: 'awesome-typescript-loader',\n                options: {\n                    configFileName: helpers.root('src', 'tsconfig.json')\n                }\n            },\n                'angular2-template-loader'\n            ]\n        }, {\n            test: /.html$/,\n            loader: 'html-loader',\n            query: {\n                ignoreCustomFragments: [/{{.*?}}/],\n                root: helpers.root('src'),\n                attrs: ['img:src', 'img:ng-src']\n            }\n        }, {\n            test: /.(png|jpe?g|gif|svg)$/i,\n            loaders: [\n                'file-loader?hash=sha512&digest=hex&name=images/[name].[hash].[ext]',\n                'image-webpack-loader'\n            ]\n        }, {\n            test: /.(eot|otf|ttf|woff|woff2)$/i,\n            loader: 'file-loader?hash=sha512&digest=hex&name=fonts/[name].[hash].[ext]'\n        }, {\n            test: /.scss$/,\n            exclude: [helpers.root('src', 'app')],\n            loader: ExtractTextPlugin.extract({\n                fallback: 'style-loader',\n                use: [\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            sourceMap: true,\n                            importLoaders: true\n                        }\n                    }, {\n                        loader: 'postcss-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }, {\n                        loader: 'sass-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }\n                ]\n            })\n        },\n            {\n                test: /.scss$/,\n                include: [helpers.root('src', 'app')],\n                loaders: [\n                    {\n                        loader: 'raw-loader'\n                    }, {\n                        loader: 'postcss-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }, {\n                        loader: 'sass-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }\n                ]\n            }\n        ]\n    },\nplugins: [\n    // Workaround for angular/angular#11580\n    new webpack.ContextReplacementPlugin(\n        /angular(\\\\|\\/)core(\\\\|\\/)@angular/, // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n        helpers.root('./src'), // location of your src\n        {} // your Angular Async Route paths relative to this root directory\n    ),\n    new webpack.optimize.CommonsChunkPlugin({\n        name: ['vendor', 'polyfills', 'manifest'],\n        minChunks: Infinity\n    }),\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    new webpack.HashedModuleIdsPlugin(),\n    //new WebpackChunkHash(), // <---------- **Removed this**.\n    new InlineManifestWebpackPlugin({\n        name: 'webpackManifest'\n    }),\n    new HtmlWebpackPlugin({\n        template: helpers.root('src', 'index.ejs'),\n        filename: helpers.root('dist', 'index.html'),\n        minify: {\n            removeComments: true\n        }\n    }),\n    new ScriptExtHtmlWebpackPlugin({\n        defer: [/app/, /vendor/, /polyfills/],\n        defaultAttribute: 'async'\n    }),\n    new ExtractTextPlugin({\n        filename: '[name].[contentHash].css',\n        allChunks: true\n    })\n],\nresolve: {\n    extensions: ['.ts', '.js']\n},\ndevServer: {\n    historyApiFallback: true,\n    stats: 'minimal',\n    compress: true,\n    inline: true,\n    port: 8080\n}\n\n};\n```. I had the same issue, the culprit was webpack-chunk-hash.\nRemoving it from my webpack config solved the problem.\n\nMy Packages:\njson\n\"devDependencies\": {\n    \"@types/facebook-js-sdk\": \"^2.8.3\",\n    \"@types/node\": \"^8.0.25\",\n    \"angular2-template-loader\": \"^0.6.2\",\n    \"autoprefixer\": \"^7.1.2\",\n    \"awesome-typescript-loader\": \"^3.0.4-rc.2\",\n    \"codelyzer\": \"^3.1.2\",\n    \"css-loader\": \"^0.28.5\",\n    \"extract-text-webpack-plugin\": \"^3.0.0\",\n    \"file-loader\": \"^0.11.2\",\n    \"html-loader\": \"^0.5.1\",\n    \"html-webpack-plugin\": \"^2.28.0\",\n    \"image-webpack-loader\": \"^3.2.0\",\n    \"inline-manifest-webpack-plugin\": \"^3.0.1\",\n    \"node-sass\": \"^4.5.0\",\n    \"postcss-flexbugs-fixes\": \"^3.2.0\",\n    \"postcss-load-config\": \"^1.2.0\",\n    \"postcss-loader\": \"^2.0.6\",\n    \"raw-loader\": \"^0.5.1\",\n    \"rimraf\": \"^2.5.4\",\n    \"sass-loader\": \"^6.0.0\",\n    \"script-ext-html-webpack-plugin\": \"^1.8.5\",\n    \"style-loader\": \"^0.18.2\",\n    \"tslint\": \"^5.7.0\",\n    \"tslint-loader\": \"^3.4.2\",\n    \"typescript\": \"^2.5.1\",\n    \"webpack\": \"^3.5.5\",\n    \"webpack-dev-server\": \"^2.7.1\",\n    \"webpack-merge\": \"^4.1.0\"\n  },\n  \"dependencies\": {\n    \"@angular/common\": \"^4.3.6\",\n    \"@angular/compiler\": \"^4.3.6\",\n    \"@angular/core\": \"^4.3.6\",\n    \"@angular/forms\": \"^4.3.6\",\n    \"@angular/http\": \"^4.3.6\",\n    \"@angular/platform-browser\": \"^4.3.6\",\n    \"@angular/platform-browser-dynamic\": \"^4.3.6\",\n    \"@angular/router\": \"^4.3.6\",\n    \"core-js\": \"^2.5.0\",\n    \"rxjs\": \"^5.4.3\",\n    \"zone.js\": \"^0.8.17\"\n  }\nWebpack config:\n```JS\nmodule.exports = {\n    entry: {\n        'polyfills': './src/polyfills.ts',\n        'vendor': './src/vendor.ts',\n        'app': './src/main.ts'\n    },\n    output: {\n        path: helpers.root('dist'),\n        // publicPath: '/',\n        filename: '[name].[chunkhash].js',\n        chunkFilename: '[id].[chunkhash].chunk.js'\n    },\n    module: {\n        rules: [{\n            test: /.ts$/,\n            loaders: [{\n                loader: 'awesome-typescript-loader',\n                options: {\n                    configFileName: helpers.root('src', 'tsconfig.json')\n                }\n            },\n                'angular2-template-loader'\n            ]\n        }, {\n            test: /.html$/,\n            loader: 'html-loader',\n            query: {\n                ignoreCustomFragments: [/{{.*?}}/],\n                root: helpers.root('src'),\n                attrs: ['img:src', 'img:ng-src']\n            }\n        }, {\n            test: /.(png|jpe?g|gif|svg)$/i,\n            loaders: [\n                'file-loader?hash=sha512&digest=hex&name=images/[name].[hash].[ext]',\n                'image-webpack-loader'\n            ]\n        }, {\n            test: /.(eot|otf|ttf|woff|woff2)$/i,\n            loader: 'file-loader?hash=sha512&digest=hex&name=fonts/[name].[hash].[ext]'\n        }, {\n            test: /.scss$/,\n            exclude: [helpers.root('src', 'app')],\n            loader: ExtractTextPlugin.extract({\n                fallback: 'style-loader',\n                use: [\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            sourceMap: true,\n                            importLoaders: true\n                        }\n                    }, {\n                        loader: 'postcss-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }, {\n                        loader: 'sass-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }\n                ]\n            })\n        },\n            {\n                test: /.scss$/,\n                include: [helpers.root('src', 'app')],\n                loaders: [\n                    {\n                        loader: 'raw-loader'\n                    }, {\n                        loader: 'postcss-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }, {\n                        loader: 'sass-loader',\n                        options: {\n                            sourceMap: true\n                        }\n                    }\n                ]\n            }\n        ]\n    },\nplugins: [\n    // Workaround for angular/angular#11580\n    new webpack.ContextReplacementPlugin(\n        /angular(\\\\|\\/)core(\\\\|\\/)@angular/, // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n        helpers.root('./src'), // location of your src\n        {} // your Angular Async Route paths relative to this root directory\n    ),\n    new webpack.optimize.CommonsChunkPlugin({\n        name: ['vendor', 'polyfills', 'manifest'],\n        minChunks: Infinity\n    }),\n    new webpack.optimize.ModuleConcatenationPlugin(),\n    new webpack.HashedModuleIdsPlugin(),\n    //new WebpackChunkHash(), // <---------- **Removed this**.\n    new InlineManifestWebpackPlugin({\n        name: 'webpackManifest'\n    }),\n    new HtmlWebpackPlugin({\n        template: helpers.root('src', 'index.ejs'),\n        filename: helpers.root('dist', 'index.html'),\n        minify: {\n            removeComments: true\n        }\n    }),\n    new ScriptExtHtmlWebpackPlugin({\n        defer: [/app/, /vendor/, /polyfills/],\n        defaultAttribute: 'async'\n    }),\n    new ExtractTextPlugin({\n        filename: '[name].[contentHash].css',\n        allChunks: true\n    })\n],\nresolve: {\n    extensions: ['.ts', '.js']\n},\ndevServer: {\n    historyApiFallback: true,\n    stats: 'minimal',\n    compress: true,\n    inline: true,\n    port: 8080\n}\n\n};\n```. ",
    "ThorstenBux": "Same problem here for now I use:\n\"watch\": \"webpack --progress --watch\",\n    \"start\": \"concurrently -k -p \\\"[{name}]\\\" -n \\\"Webpack,HTTP-Server\\\" -c \\\"cyan.bold,green.bold\\\"  \\\"npm run watch\\\" \\\"npm run serve\\\" \",\n    \"serve\": \"http-server ./dist -p 8081 -o\"\nThe only thing missing it auto-reload . ",
    "aydun1": "I had this problem serving through an Apache reverse proxy with mod_pagespeed enabled.\nThe page would reload when I changed a file, but it would remain the same.\nDisabling mod_pagespeed fixed the issue for me.. ",
    "gzoritchak": "I don't understand why this issue is closed. It's not working even with a basic configuration. The only workaround is to use webpack --watch.. I don't understand why this issue is closed. It's not working even with a basic configuration. The only workaround is to use webpack --watch.. ",
    "miks": "Same for me. It's still not working.. Same for me. It's still not working.. ",
    "indrekru": "Hello, had the same issue. Here's what fixed it for me:\nI had \"webpack-dev-server --config webpack.config.dev.js --content-base ./ --port 1729 --progress --inline\" in my package.json, removing the --content-base ./ fixed it, no need to specify the content-base really, it comes out of the box. Hello, had the same issue. Here's what fixed it for me:\nI had \"webpack-dev-server --config webpack.config.dev.js --content-base ./ --port 1729 --progress --inline\" in my package.json, removing the --content-base ./ fixed it, no need to specify the content-base really, it comes out of the box. ",
    "LeDanielH": "removing devServer option hot: true fixed it for me. . ",
    "elliot-a": "Fix for me : disable all chrome plugins that have similar features to hot reload in my case \"LiveReload\" & \"JetBrains IDE support\".. ",
    "Randore": "@indrekru what goes inside webpack.config.dev.js ?. ",
    "Asalem1": "@gzoritchak Can't tell you how grateful I am for your comment.. ",
    "ProductOfAmerica": "Still getting this issue, workarounds don't work.. ",
    "stnever": "FWIW, I was having a similar symptom (browser was always getting a stale version of the compiled files), which brought me to this issue, BUT in my case the problem was deeper: webpack wasn't actually picking up changes and recompiling.\nI'm using a Xubuntu 16.04 guest in a Windows 8.1 Virtualbox host, using Node 8.6.0, and webpack --watch itself wasn't being notified of changes in the source files. I added the polling option to my webpack.config.js and it started working (even hot reloading):\nmodule.exports = {\n  ...\n  watchOptions: {\n    poll: true\n  }\n}\nI knew there were problems with watches on shared Virtualbox folders, but this particular VM doesn't have any shared folders -- all files are inside the VM.. ",
    "leandroruel": "i made a upgrade on my nodejs to 9.x and it's working now.. ",
    "JoaquinAraujo": "Apparently, the problem was never solved :sob: . ",
    "KokoDoko": "Nope. webpack-dev-server won't recompile or reload for me either, tried all the above fixes.. ",
    "ujwalarak99": "I had the same issue, upgrading packages worked for me :). I had the same issue, upgrading packages worked for me :). ",
    "bangnguyenanh": "Still stuck on this issue :(. ",
    "antimatterjs": "It seems to be working fine for me now on Phaser projects, but not on React projects.\nFor phaser projects, the solution was to make sure that code wasn't wrapped in a window.onload = () => {}\nNot sure what's going on in React - is everyone here using React or are people using something else?. ",
    "50shashwat": "other workaround is to use webpack --watch  but hot reload is not there in that option.. ",
    "hamasho": "This stackoverflow answer may be helpful.\nhttps://stackoverflow.com/a/42717524. ",
    "idbartosz": "Tested with simple app and everything works (node: v8.9.4; webpack: 3.11.0; webpack-dev-server: 2.11.1)\nappRoot\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 public\n\u2502  \u251c\u2500\u2500 index.html\n\u2502  \u251c\u2500\u2500 scripts\n\u2502  \u2502   \u2514\u2500\u2500 bundle.js\n\u2502  \u2514\u2500\u2500 styles\n\u2502       \u2514\u2500\u2500 main.css\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 index.js\n...\nindex.html\nhtml\n...\n    <script src=\"scripts/bundle.js\"></script>\n  </body>\n</html>\nwebpack.config.js\n```js\nconst path = require('path')\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'public/scripts')\n  },\n  devtool: 'source-map',\n  devServer: {\n    contentBase: path.resolve(__dirname, 'public'),\n    publicPath: '/scripts/',\n    host: '127.0.0.1',\n    port: 8080,\n    open: true\n  }\n}\n```\nNote: it's important that <script src=\"scripts/bundle.js\"> points to the same path as devServer.publicPath (ie. http://127.0.0.1:8080/scripts/bundle.js). ",
    "liujiajun1": "same problem. ",
    "jwu910": "@liujiajun1 https://github.com/webpack/webpack-dev-server/issues/875#issuecomment-362101506 this worked for me.. ",
    "pavlohibey": "I was having a similar issue using webpack-dev-middleware with webpack-hot-middleware. The updated bundle was not served after the initial build (first start) of dev server. The updated bundle was served only after forcing webpack to rebuild, e.g. saving any watched project file, and making a hard refresh in the browser.\nThe solution I've found is to force recompilation in the setup script using devMiddleware.invalidate method.\nCurrently using this bootstrap script:\n```js\nconst webpack = require('webpack');\nconst express = require('express');\nconst webpackDevMiddleware = require('webpack-dev-middleware');\nconst webpackHotMiddleware = require('webpack-hot-middleware');\nconst config = require('../webpack.config')('development');\nconst compiler = webpack(config);\nconst app = express();\nconst devMiddleware = webpackDevMiddleware(compiler, {\n  publicPath: config.output.publicPath,\n  historyApiFallback: true,\n  hot: true,\n  inline: true,\n});\n/*\n * This method call instructs a webpack-dev-middleware instance to recompile the bundle\n /\ndevMiddleware.invalidate();\napp.use(webpackHotMiddleware(compiler, { noInfo: false }));\napp.use(devMiddleware);\napp.get('*', (req, res) => {\n  const htmlBuffer = devMiddleware.fileSystem.readFileSync(${config.output.path}/index.html)\nres.send(htmlBuffer.toString())\n})\napp.listen(8181, 'localhost');\n```. ",
    "BrentGrammer": "Just in case this might help someone else, I tried most of the solutions here which did not work for me and wound up just moving my project files from the nested directory they were in onto the desktop, and then webpack dev server worked as expected and the problem was solved.  I have no idea why this works, but just wanted to pass the (simple) solution on in case it helps someone else who has tried all of the above to see if just moving the project files will work.  (FYI, I'm just running on Windows native environment) Good luck.... ",
    "justengland": "I have struggled with this for the better part of a day, then I found this help\nhttps://medium.com/bcgdv-engineering/when-using-react-js-webpack-dev-server-does-not-bundle-c2d340b0a3e8\n. ",
    "GerkinDev": "Hi,\nActually, I think this issue can be highly related to the environment, for at least one of the situations it happens.\n\nOn my MacOS, everything works well, using the configuration bellow. When changing a file (a SCSS in my case), Webpack triggers a recompilation & the output file is updated.\nOn my Ubuntu's Windows integration, the recompilation is triggered but the file is never updated. I have to restart the dev server at every changes to update the ouput file.\n\nI don't have pure Linux OS to test, but I guess it would just work well...\nSo, here is my Webpack config, a bit cutted out\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst mainConf = {\n    entry: ['./assets/src/scripts/main.ts'],\n    buildPath: __dirname,\n    publicPath: 'assets/dist',\n    url: 'http://localhost:8080/'\n};\nmodule.exports = {\n    entry: mainConf.entry,\n    mode: 'development',\n    output: {\n        filename: '[name].bundle.js',\n        path: path.resolve(mainConf.buildPath, mainConf.publicPath),\n        chunkFilename: '[id].[chunkhash].chunk.js',\n        publicPath: mainConf.url + mainConf.publicPath + '/',\n    },\n    resolve: {\n        // Add .ts and .tsx as a resolvable extension.\n        extensions: ['.ts', '.tsx', '.js']\n    },\n    module: {\n        rules: [\n            // A bunch of rules\n        ]\n    },\n    plugins: [\n        // Clean dist folder.\n        new CleanWebpackPlugin([path.resolve(mainConf.buildPath, mainConf.publicPath)], {\n            verbose: true // Write logs to console.\n        }),\n    // avoid publishing when compilation failed.\n    new webpack.NoEmitOnErrorsPlugin(),\n],\ndevServer: {\n    contentBase: './',\n    historyApiFallback: true,\n    inline: true,\n    progress: true,\n    publicPath: mainConf.url + mainConf.publicPath + '/',\n    headers: { \"Access-Control-Allow-Origin\": \"*\" }\n},\n\n// pretty terminal output\nstats: { colors: true },\n\n};\n```\nMy package.json contains following dev-dependencies:\njson\n{\n    \"webpack\": \"^4.6.0\",\n    \"webpack-cli\": \"^2.0.15\",\n    \"webpack-dev-server\": \"^3.1.3\",\n    \"webpack-hot-middleware\": \"^2.22.1\"\n}\nEnvironment infos:\n\nOn Windows:\nNode: 9.11.1\nWindows 10 v1709 - 16299.371\nLinux subsystem version 20170830.1 with ubuntu 16.04 LTS\nOn MacOS:\nNode: 9.10.1\nMacOS: 10.10.4 High Sierra\n\nGL HF with this issue ;) and thanks for the help !. ",
    "Youfka": "have the same problem, really can't find the issue,\nI have \"server\" command in package.json:\n\"server\": \"webpack-dev-server --mode development --open --watch\"\nand this is my webpack config. I tried many solutions, it's compiling, but not building\n````\nconst path = require('path');\nconst ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst webpack = require('webpack');\nlet conf = {\n    entry: './src/index.js',\n    output: {\n        path: path.resolve(__dirname, './dist'),\n        filename: 'main.min.js',\n        publicPath: 'dist/'\n    },\n    devServer: {\n        contentBase: path.join(__dirname, \"dist\"),\n        overlay: true,\n        watchContentBase: true,\n        hot: true\n    },\n        plugins: [\n        new HtmlWebpackPlugin({\n            template: path.resolve(__dirname, './src/index.pug')\n        }),\n        new ExtractTextPlugin(\"style.css\"),\n        new webpack.NamedModulesPlugin(),\n        new webpack.HotModuleReplacementPlugin()\n    ]\n};\nmodule.exports = (env, options) => {\n    let production = options.mode === 'production';\n    conf.devtool = production ? false : 'eval-sourcemap';\n    return conf;\n}\n````. ",
    "hermanomark": "I stumbled upon this problem sometimes it solves when I restart my machine.. ",
    "mahmoudafifi414": "if the webpack not serving code changes so \nin webpack.congif.js write :\nmodule.exports = {\n  //...\n  devServer: {\n    watchOptions: {\n      poll: true\n    }\n  }\n};\nfor further information see this link:\nhttps://webpack.js.org/configuration/dev-server/#devserver-watchoptions-. if the webpack not serving code changes so\nin webpack.congif.js write :\nmodule.exports = {\n//...\ndevServer: {\nwatchOptions: {\npoll: true\n}\n}\n};\nfor further information see this link:\nhttps://webpack.js.org/configuration/dev-server/#devserver-watchoptions-. ",
    "albertian": "Hi guys.\nI'm a newbie in Webpack and I got the same problem.\nBut now it works good. Even without bundle.js file my server works correctly.\ncommand: node_modules/.bin/webpack-dev-server --config webpack.config.js --hot\nwebpack.config.js\noutput: {\n        path: __dirname + '/js',\n        publicPath: '/js',\n        filename: 'bundle.js'\n    },\n    devServer: {\n        contentBase:__dirname + '/',\n        publicPath: '/js'\n    },\nBoth publicPath are url path, so not need to put your file path here.\nAfter my changes my webpage reloades after each file change.\nI hope it will be helpful so someone.. ",
    "khyamay": "like @albertian mentioned and has shown in the example publicPath for output and devServer needs to be same.\n\nwebpack-dev-server doesn\u2019t serve the actual generated bundle from file system. Rather it'll watch your source files, and recompile the bundle whenever they are changed. This modified bundle is served directly from memory.\n\nWhy webpack-dev-server Live-Reload Is Not Working\nWebpack\u200a\u2014\u200aUnderstanding the \u2018publicPath\u2019 mystery\nThese two articles explains in deep about live reloading and publicPath. . ",
    "kistora": "I'm on ubuntu 18.04 and i fix this issue following Visual Code guidelines.\nHope it will help.. I'm on ubuntu 18.04 and i fix this issue following Visual Code guidelines.\nHope it will help.. ",
    "mathstracted": "Not sure if the same issue is happening for other that is happening for me.\nMy problem was that I had created a class but had forgotten to export it. And I started to use the class directly in one of other typescript file in the same module without having to export it. The ide I was using was vs code. I guess it thought the class was in global module and just didn't report error. \nIn my bundled code code would execute upto the point where the I started using the class and after instantiating the could would just suspend(I don't know what else to call it), without reporting any error. To me it was looking like the webpack was not compiling the code. \nAfter going line by line, I found out at which point code stopped. After properly exporting and importing resolved the issue...\nDue to missed error handling I couldn't find out the issue.\nThis was not an issue with webpack though.. ",
    "EdgardoRodriguezSolano": "Live-reload was not working for me. This might be a really dumb error, but I had missed (or deleted) the <meta charset=\"utf-8\" /> tag in the <head></head> section of my index.html. It's working like a charm now.. ",
    "neilmonroe": "Thanks for pointing these out, @khyamay! It really helped me understand how webpack-dev-server works.\n\nlike @albertian mentioned and has shown in the example publicPath for output and devServer needs to be same.\n\nwebpack-dev-server doesn\u2019t serve the actual generated bundle from file system. Rather it'll watch your source files, and recompile the bundle whenever they are changed. This modified bundle is served directly from memory.\n\nWhy webpack-dev-server Live-Reload Is Not Working\nWebpack\u200a\u2014\u200aUnderstanding the \u2018publicPath\u2019 mystery\nThese two articles explains in deep about live reloading and publicPath.\n\nThe \"Why webpack-dev-server Live-Reload Is Not Working\" article is what everyone here should read. This contains most of the answers to the questions here that keep getting repeated.\nHaving local files in an output dir from webpack-cli will cause problems. Remove them or output them to a different path if you are going to use the dev server.. ",
    "xeptore": "i had the same problem, i tried all of these suggestions, but none of them woks for me.\nfinally, i tried to add a newline at the end of the webpack configuration and it just worked!\nawesome!. ",
    "Mozar10": "Restarting the computer fixed it for me :confused: . ",
    "DrakeXiang": "Just figured out sometimes it's about case sensitivity, I'm on macOS, and I misspelled route path from /Auth to /auth, the issue is gone when I fix the typo, hope helped. ",
    "viridia": "I still see this problem several times a day - I'm not asking for someone to solve it with the limited information I can provide, just some hints as to how I might go about investigating the problem.. ping?. This is still happening several times a day, even though I've upgraded both babel, webpack, react, and react-router in the months since I first encountered this bug. I've been working around this using the following technique: Whenever I start webpack, the initial build will always be wrong, however if I 'touch\" any source file, it will do an incremental compilation and then everything will be OK.\nI now have about 6 different webpack projects, and this issue manifests in only one of them (the largest one).\nThe part that's annoying for me is having to explain to the other members of my team that they have to touch a source file after starting the frontend server whenever they want to run it on their workstation.. All right, after much effort I managed to carve away 99% of my application and create a minimal example that demonstrates the problem:\nhttps://github.com/viridia/webpack-miscompile\nTo reproduce:\n1) checkout the code\n2) yarn install\n3) yarn start\n4) navigate to http://localhost:8000/\n5) Look at the JS console. Notice that there's a JS error.\n6) Touch any source file.\n7) Reload the page. Notice that the error is gone!\nNote: when reproducing this, you should see exactly two 'compiled successfully' messages from webpack. If you see any number other than two, hit Ctrl-C and go back to step 3.\nPlease look at this and re-open the bug. Thanks!. Also, a little more info:\nThe JS error that appears on the console will look something like this:\nauthService.js:9 Uncaught TypeError: Cannot read property 'tokenKey' of undefined\n    at Object.<anonymous> (authService.js:9)\n    at __webpack_require__ (bootstrap 1398035\u2026:19)\n    at Object.<anonymous> (main.js:3)\n    at __webpack_require__ (bootstrap 1398035\u2026:19)\n    at Object.module.exports (vertx (ignored):2)\n    at __webpack_require__ (bootstrap 1398035\u2026:19)\n    at bootstrap 1398035\u2026:65\n    at main.1398035\u2026.bundle.js:69\nIn the file 'authService.js' you will see this:\n```\nimport { env } from '../global';\nclass AuthService {}\nAuthService.TOKEN_KEY = env.tokenKey;\n```\nThe value 'env' is undefined.\nHowever, when after an incremental compilation the value is correctly defined.\nIn a large project, this particular problem will show up in different places depending on the order of imports, but the symptoms are always similar: an imported symbol set to undefined value after a full webpack-dev-server build, but correctly defined after an incremental build. Note that non-dev-server builds are not affected, that is a full webpack build always works correctly. The problem only manifests when running via webpack-dev-server.\nI've determined that this is independent of hot reloading; turning hot reloading on or off, or installing the hot module plugin has no effect either way.. I have not, but I can give it a try. I'm not currently using Express in this project (unlike all my other webpack-based projects).. OK further updates:\n\nThe problem is reproduceable using webpack-dev-middleware\nThe problem goes away when I remove the callback argument to webpack, i.e.:\n\n// Bug occurs\nconst compiler = webpack(config, () => {\n  console.log(`Now listening on http://localhost:${PORT}`);\n});\n// Bug does not occur\nconst compiler = webpack(config);\n. Gotcha. Since discovering the effect of the callback, I've been able to work around the problem by simply removing it, as it was non-essential. (My original reason for adding it was to print additional instructions for new engineers.) So my need to have this solved has greatly diminished. (And in fact, I notice that builds have also gotten considerably faster).\nIf I were to spend any more time on this, thie first thing I would check is what the middleware expects the return value of the callback to be.. Fine by me.. ",
    "MichaelOstermann": "I'm currently having the same issues as @viridia and I can confirm removing the callback works, however for some strange reason regular builds don't work without a callback.\nMy version of webpack is 3.5.6 and webpack-dev-server is 2.7.1, running on Mac OS 10.11.5.\nLet me know if there is anything specific that I can look into to help resolving this issue!. ",
    "agoldis": "@benwiley4000 Thank for supporting this request, i am certain that option 2 + documentation fix will make it clearer.\nIt would be good, thought, to get an input from contributors :). ",
    "arjunkathuria": "this bug / issue still around ?\ncan get started on my contributions : ). @shellscape i have a long weekend coming, will look into it : ). @shellscape updated.. hupmh, alright, guess we could close this then ?. ",
    "orangeyyy": "I have got the same problem. Hi @shellscape I have got the same problem, the steps to reproduce the problem is shown as below:\n1, start a webpack dev server at local which is use http;\n2,start a proxy server to proxy the resource online to local(the online site use https),in this case we can debug the online website at local;\neverything is ok now except the HMR, the screen is shown below \uff1a\n\nthe reason of this problem is that HMR send the sockjs-node request with https protocol which is same with the online site, so I wander to know if we can set the protocol of the sockjs-node request to http and the problem will be resolved.\nhttp:\n\nhttps:\n\nsorry that this case need use a online https website so is hard for me to provide a test case repo, hope you can understand what say above\n. @shellscape thx anyway, @webpack-bot could you please help me? . I have got the same issue ++1. ",
    "jtesser": "I have the same exact issue \nconfig is \n'/api': {\n          target: 'http://localhost:8080',\n          changeOrigin: false\n        },\nand I send /api/v1/browsertree/sitename/demo.dotcms.com/uri//\nBUT I get this at the webserver\n/api/v1/browsertree/sitename/demo.dotcms.com/uri/\n. ",
    "jamieathans": "Is it possible for this PR to be merged and a new webpack-dev-server bug-fix release be push to npm ASAP?\nI ask because this issue/behaviour is affecting projects built with the latest version of the angular-cli - 1.0.1 (angular-cli projects hard-code overlay:true in development mode).. ",
    "fielding": "I ran in to \"Invalid Host header\" as well today after upgrading to webpack-dev-server 2.4.3.  My specific instance involved some shenanigans behind nginx reverse proxy to a another ssh tunneled reverse proxy (handles my vhosts for any dev projects with out the man telling me I can't serve up specific ports)... so after spending a short time actually looking over my config/headers, I just rolled ack to 2.4.2 and it fixed it right up with no other changes. \nDoubt that is any news/that helpful, but thought I'd chime in that it seems isolated to 2.4.3/went away when I downgraded. Oh, and I also using 0.0.0.0 specifically for my host settings.. I should have pulled my head out of my ass and read the v2.4.3 release.  Right on, appreciate the attention to the potential vulnerability, and I dig the disableHostCheck ability being put right in even more. Thanks =). ",
    "hooraygith": "@sokra  thx for reply.\nI tried disableHostCheck\uff0cand there is a problem that disableHostCheck not in the lib/optionsSchema.json. ",
    "phairoh": "@sokra I understand the security fix and am grateful as always for all the work done on webpack but I would like to know why this was included in a patch and not a major version. Presumably this security risk has been present for quite some time and as such I don't see the urgency.\nI assume that webpack tries to follow semver which is pretty clear that almost any breaking change should be a major version bump, especially if what you're versioning has a huge audience, which certainly webpack does. A major patch bump is also much better for communicating to users that there are breaking changes which would have saved at least a few people on this thread and presumably more elsewhere hours of lost work. As it is, I'm still trying to figure out how to make this change work with my team's somewhat unique configuration (that's actually somewhat similar to @bdwain's). My guess is that I'll end up rolling back the version but that certainly can't be a permanent solution.\nWhile we could have avoided this by locking down the versions in our package.json we are still in the development and as such haven't done that yet but if packages followed semver it shouldn't be too much of a problem. . Semver concerns aside, there is an error in the implementation that is addressed by #888. Added a few tests for the checkHost method. Validation.test.js seemed like the proper place for these but I wasn't entirely sure.. ",
    "edmorley": "@sokra, perhaps in addition to whitelisting localhost, if the Host header contains any IP, then the request can be accepted? If the request was made to a specific IP (and not a DNS rebound malicious domain), then this cannot have been an attack as made via DNS rebinding.\nThe only concern with this approach would be if a domain could be registered that matched the regex for an IP. However RFC 3696 section 2 seems to suggest that the top level domain can never contain all numeric characters, so a hostname can never overlap with an IPv4 IP.. I've filed a retrospective GitHub issue with the original private disclosure email wording, which should hopefully make things a bit clearer: #887 - happy to answer any additional questions.\n\nFor development, i have a few aliases to 127.0.0.1 in my etc/hosts file. like\n127.0.0.1 foo-local.com bar-local.com\n\nFor this case, I think we need a way to whitelist multiple hostnames, similar to Django's ALLOWED_HOSTS setting:\nhttps://docs.djangoproject.com/en/1.11/ref/settings/#allowed-hosts. > I'm trying to understand the problem this patch fixes.\nSee https://github.com/webpack/webpack-dev-server/issues/882#issuecomment-296799201. > Is this really necessary? I mean most of the time it will expose your dev environment, not production.\nIn addition to information disclosure of anything in the contentBase directory (think disclosure of source or say .gitignored .env files with secrets), many backend development environments expose debugging tools that can perform arbitrary code execution (eg Werkzeug and tools that bundle it, Rails webconsole, ...) - which means potential RCE for those using the proxy option, as explained in #887.\nFor example:\nhttps://benmmurphy.github.io/blog/2016/07/11/rails-webconsole-dns-rebinding/\nI agree that the whitelisting feature needs to be made more flexible however, otherwise people are going to have no choice but to disable the check.. > considering most people are not using the \"dev-server\" as a production environment therefore minimizing the need to block requests for security concerns.\nRCE and information disclosure still affects local development too, so that statement isn't accurate. See #887 for more info.. This security feature protects against a DNS rebinding attack I reported privately to the webpack team, which may still affect you depending on your exact setup.. > @edmorley At some point in the future, would you be able to share this attack with the community?\nI've filed a retrospective GitHub issue with the original private disclosure email wording, which should hopefully make things a bit clearer: #887 - happy to answer any additional questions.\nI've also made a suggestion about improving the UX for the \"use a dynamic IP to access from a mobile device\" case in https://github.com/webpack/webpack-dev-server/issues/882#issuecomment-296794972. This was fixed by https://github.com/webpack/webpack-dev-server/commit/29578537c1ad38f29a445237c57a52c373183e75 , in the versions released on 2017-04-17.. I agree. I wasn't consulted before the fix for the security issue landed, otherwise I would have suggested doing this from the outset.. #931 is filed for adding this retrospectively fwiw.. > Then comes the 'proxy' part, someone please enlighten me how this vulnerability is such a big deal when proxying an API through webpack. Can the attacker make authenticated requests against APIs protected with cookies? No, the rebound domain will not have access to the cookies of the real domain.\nYes they can - think changeOrigin and similar (as mentioned in the OP).\nHowever the real problem is development environments where out of the box there are RCE opportunities. This isn't just a hypothetical - see here for example or any Python environment that uses werkzeug, or a Django stack that uses django-debug-toolbar.\n. Ah ok, my main use of webpack is via https://github.com/mozilla-neutrino/neutrino-dev , which doesn't leave any assets outside of the main output directory (and so makes contentbase default to it), but if that's not a typical usage pattern then I guess this is unavoidable.. As I mentioned in some of the other threads, it should be safe to whitelist all IP-addresses-like hosts names by default, which would save people having to whitelist them manually.. This would unfortunately defeat the newly added security measure. An attacker would just make sure the string \"localhost\" was present (eg <hash>.localhost.evilsite.com), thereby meaning DNS rebinding attacks were still possible per #887.\n. Should we add a few more testcases, for both the valid and invalid IP cases?\nAlso, I wonder if a simplified regex that just checked that each octet was numeric would be simpler to read/faster/still as secure? RFC3696 section 2 says that top level domain names aren't allowed to be all-numeric, so eg 999.999.999.999 still won't be treated as a domain, so can't be used for DNS rebinding.\nFor example:\n// Requests to explicit IP-addresses can't be exploited by DNS rebinding.\n// For simplicity the regex matches numeric ranges that aren't valid IPs, but\n// this is still secure since top level domain names can never be all-numeric:\n// https://tools.ietf.org/html/rfc3696#section-2\nif(/^([0-9]{1,3}(\\.|$)){4}$/.test(hostname)) return true;. ",
    "ekulabuhov": "So what do you do if you're using webpack-dev-server from node script instead of CLI? --public is only available on CLI from what I gather?\nEDIT: public is available from node as well. Example:\njavascript\nconst server = new WebpackDevServer(compiler, {\n    public: '<you public ip>'\n});. I'm trying to understand the problem this patch fixes. Does it make sense to have this option enabled on local servers? What if we don't use webpack-dev-server in production?. ",
    "nick-woodward": "As a followup to the post by @phairoh.\nI understand this was considered a security flaw, however this should have been handled more gracefully.\nThere are entirely valid cases where developers will want to use multiple hostnames. \nMy own example being we have multiple companies that have different logos based on the host.\nA more graceful way of handling this would have been one of the following options:\nOption 1\nDefault disableHostCheck to true. \nThen once webpack-dev-server is ready for a major version bump default disableHostCheck to false.\nThis has a few benefits:\n\nThis prevents us from breaking users via a minor version bump\nUsers who actually care about the feature can set it to false\nYou eventually get it to your ideal default value which is to prevent the security flaw by default\n\nOption 2\nWait for a major version bump, then add the security fix / feature.\nThis option is less than ideal because the user has to wait for a major version bump for his fix to be available.\nObviously this is a fairly simple fix, but it concerns me because rather then following \nsemver webpack-dev-server is allowing breaking changes in minor version bumps.. @evan-scott-zocdoc Totally agree, my primary focus for this PR was to revert the breaking change.\nHowever at this point I'm sure a large enough number of people have worked \naround it that implementing this wouldn't really make sense anymore.. Closing: due to the age of this PR merging it would likely break more users then it would help.. ",
    "JemarJones": "Would've been nice to make the response something like \"Invalid Host Header (Explanation and link to release notes)\" for this version (and remove in the next major), rather than just breaking peoples builds suddenly without explanation.. ",
    "flackjap": "I am developing an app using the Angular CLI which in turn uses Webpack dev server that is served through the Vagrant environment using Nginx.\nOf course, I use an Nginx setup where I just forward (proxy_pass) the hostname request (e.g. app.myapp.com) to the the default ng serve IP and port (http://localhost:4200), and then request it from a browser with a desired hostname.\nThe only solution for me was to also pass that hostname (app.myapp.com) to the ng serve and also change it in the nginx config file because now they have to match everywhere (in browser, in nginx and in webpack dev server).\nHere's an example:\n```\nserver {\n    listen 80;\n    listen [::]:80 ipv6only=on;\nserver_name app.myapp.com;\nroot \"/home/vagrant/projects/jb/Laravel/ng-jb/out\";\nindex index.html index.htm;\n\nclient_max_body_size 10G;\n\nlocation / {\n    proxy_pass http://app.myapp.com:4200;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_buffering off;\n}\n\n}\n```\nAnd then just serve it from the Webpack or NG CLI with the added parameters:\nAngular CLI:\nng serve --host app.myapp.com\nor\nWebpack\nwebpack-dev-server --host app.myapp.com --port 4200\nOn the other hand, I wouldn't recommend hacking in the optionsSchema.json file of the lib and changing the disableHostCheck. But if an option wasn't there, you can then just change the line 402 in Server.js to always/immediately return true.. ",
    "rafrex": "@sokra I have a common use case that I'm not sure how to implement safely with this breaking change. I use webpack-dev-server on my local wifi network with --host 0.0.0.0 so I can test on mobile and other devices. For example, my computer's local ip address is 10.0.1.4 and my phone's ip address is 10.0.1.5.\nPreviously I started the dev server like this (and on my phone would go to 10.0.1.4:8080):\nwebpack-dev-server -d --inline --host 0.0.0.0 --history-api-fallback\nHow do I start the dev server now so I can access it from my phone? I tried adding various options with --public ... but couldn't get it to work. Thanks.. @malikshahzad228 still not working. I don't currently use a config file for the dev server (just a standard webpack.config.js that has nothing server specific). what's in your config/webpack.dev.js?. Thanks, I got it working, deleted and reinstalled node_modules - sorry about that.\nFor the record this is how I'm starting the dev server (I had tried this before cleaning node_modules):\nwebpack-dev-server -d --host 0.0.0.0 --public 10.0.1.4:8080 --history-api-fallback\nWhere 10.0.1.4 is my computer's IP address.. ",
    "malikshahzad228": "@rafrex Same issue was with me, and I solved this by a npm script in package.json like:\n\"server:dev\": \"webpack-dev-server --config config/webpack.dev.js --public xxx.xxx.xxx.xxx src/\",,\nin your case xxx.xxx.xxx.xxx is your computer's ip (i.e. 10.0.1.5)\nand then npm run server:dev will start the server which will be accessible on ip over the same network.. @rafrex config/webpack.dev.js file is replica of Webpack starter guide file\nexpect line\nconst HOST = process.env.HOST || 'localhost';\nis replaced with\nconst HOST = process.env.HOST || '0.0.0.0';. ",
    "crsepulv": "I'm using angular4's cli and still not found the way to set disableHostCheck: true, any hint?. ",
    "satiewaltz": "Set this in a devServer config in a webpack.config.js for those who come across this issue:\nBeware of the security risks when doing this!\njavascript\nmodule.exports = {\n  // Earlier configuration etc...\n  devServer: {\n    host: '0.0.0.0',\n    disableHostCheck: true\n  }\n}. ",
    "fedorl": "It seems that many people who develop multi-tenant systems will use disableHostCheck or other hacks, turning all this security patch to void. \nWhy is it all or none option? It was much more useful if it did accept a regex or at least a list of allowed hosts, to serve multiple test domains in a controlled way that doesn't compromise security.\n. > That's what #899 implements.\nSorry, missed this one, cool!. ",
    "Mario-Eis": "Is it possible to set disableHostCheck via command line? Do we have to modify the webpack config for this?. Can this be set via command line?. ",
    "ApertureSecurity": "Good lord all the security maddness! \nI want to ask , if it's okay to ask here...\nI am trying to read into as much as configuring webpack as possible. I have webpak behind a reverse proxy.\nPublic seemed to be ok, but I realized that the server wasn't listening on an externally listening interface, which results in proxy connections failing with 503....\nI assume that host 0.0.0.0 is a problem due to DNS rebind attacks(among other things) ...\nIs this a secure setting?\n--public blah.com:8080  --host 192.168.x.x \n. I suppose , I am looking for the best , and most secure practice and I find that this isn't always easy to find with JavaScript. \nWhat practice is this ? Is webpack not recommended for prod? . ",
    "jrohatiner": "solution for me:\nopen node_modules/webpack-dev-server/lib server.js\nedit line 451 change false to true\nedit line 473 change false to true\nI think this allows \u201cpublic host name\u201d of listening address and the allowedHost === hostname\nIt appears that server must accept that public hostname and allowedHost are exactly ===\nI am using ubuntu, angular/cli latest. solution for me:\nopen node_modules/webpack-dev-server/lib server.js\nedit line 451 change false to true\nedit line 473 change false to true\nI think this allows \u201cpublic host name\u201d of listening address and the allowedHost === hostname\nIt appears that server must accept that public hostname and allowedHost are exactly ===\nI am using ubuntu, angular/cli latest. ",
    "theohogberg": "Is it too much to ask that the webpack devs stop breaking api and CLI commands? \nbtw, this should be a priority ONE feature imo, considering most people are not using the \"dev-server\" as a production environment therefore minimizing the need to block requests as per security concerns.. @edmorley perhaps I can be more specific.\nWhat I'm trying to do is to access the host webpack-dev-server on a virtualbox instance (local machine). \nHowever, when trying to access the host machine (which is 10.0.2.2 by default in NAT settings) this breaks since the address is being rebound and that doesn't seem to be supported. \nThis can probably be fixed (somehow, bridged connections, etc?) but accessing the host from a virtual instance shouldn't be this hard IMO :disappointed:. @shellscape Ok, didn't know I was being aggressive I was simply asking for a flag/configuration so it can be up to you as a dev\njust saw disableHostCheck: true\nthat's exactly what I was looking for (hopefully) :+1:. @shellscape In that case I'm Sorry. Did not mean to offend anyone, no matter how sensitive they are.\nI guess I have just become a little fed up configuring huge projects. Also, considering webpack has 13,952 (current count) questions on Stackoverflow it might be reasonable to consider making certain things easier.. ",
    "dineshmaths1": "Am using Angular CLI: 6.2.2 , Node: 8.11.1 and OS: darwin x64 This is my etc hosts 127.0.0.1 dinesh.mysocialapi.com\nThis is my comment node_modules/@angular/cli/bin/ng serve --host 0.0.0.0 --disableHostCheck true\nam getting this error how to fix ? Loading failed for the with source \u201chttp://dinesh.mysocialapi.com/vendor.js\u201d. dinesh.mysocialapi.com:34\n. ",
    "nwoltman": "@sokra Sometimes I need to test out features directly on my phone, and to do that I need to use the IP address of my computer that's running webpack-dev-server as the host to be able to connect to it.\nI'm not totally sure that this security feature is necessary for me because when I use webpack-dev-server I'm either on a network with people I trust (home or work), or if I'm on a public network I keep my ports closed.. Oh I see. In that case I'll leave the host check enabled and only disable it when I absolutely need to (which is rarely anyway). \n@edmorley At some point in the future, would you be able to share this attack with the community?. ",
    "chai-jay": "@tanzeelrana That sounds like a feature request to open with Angular CLI project. Their CLI has to support disableHostCheck option and pass it to Webpack. . ",
    "SystemParadox": "I read through various issues relating to this and found it all rather unclear.\nA useful explanation is available here: https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\nTLDR: This issue still affects you even if you are only running webpack-dev-server within a trusted network. The issue is that you may visit a malicious website which can use this bug to make XHR requests to the dev server, possibly exposing private code or internal services available through the dev server proxy.. I read through various issues relating to this and found it all rather unclear.\nA useful explanation is available here: https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a\nTLDR: This issue still affects you even if you are only running webpack-dev-server within a trusted network. The issue is that you may visit a malicious website which can use this bug to make XHR requests to the dev server, possibly exposing private code or internal services available through the dev server proxy.. ",
    "usefulthink": "why are IP-Addresses considered unsafe though? \nThere is no way to dns-rebind an IP-address when accessing the dev-server, so it would make sense to not apply the host-check to requests that use an explicit IP instead of a host-name (given that the server is listening on an interface other than 127.0.0.1). \nThis would possibly stop people everywhere from just using disableHostCheck in order to have their local-network-development environments working.\nIn addition, as the TLD .local is a reserved gTLD and cannot be used by regular DNS-servers it might make sense to have the allowedHosts-option default to ['.local'].\nWould you accept a PR for that?. thanks! I opened a PR in #1007 to fix the ip-address issue.. I think the main point is that a DNS-rebinding attack can in theory exfiltrate information from a service that is written as if it was inaccessible to another party. \nIt's not so much about the question if that is actually a problem in any specific case but about being safe in the assumption that a service bound to an internal interface (be it the loopback-interface or a NATed local network) will not be accessible from the outside.\nRegarding other IPs than 127.0.0.1 I'd say that yes, you might need a very targeted attack for this, but things like spearphising is actually not unheard of, so why not prevent it if possible.. first-time contributor here. Please let me know if there are any docs I need to validate/update or anything else I should think of.. Thanks! \ud83c\udf8a. I like the simplicity and probably would want to do that. We don't validate other aspects of IP adress as well (reserved, multicast, etc) and I can't think of a way to have an invalid or unrouteable IP-address in the browser anyway.. I thought about that as well, but didn't want to introduce any new dependencies for something that could be put in a simple (ok, thats arguable) regex. Is there any policy regarding adding dependencies?. Should I do another PR for this? Did anyone ever use IPv6 in such a context? \nUsing http://[::1]:1234/ is absolutely possible, but that will already break in the lines before as a colon no longer works to split out the port-number from the host-header.. ",
    "dimitrovs": "This should have been done only when listening on 127.0.0.1. The attack makes practically no sense for people using webpack with the most popular frameworks Angular/React and public IP. How would the attacker know what public IP to rebind to? They won't know, unless it is a very targeted attack, in the broad case this only affects servers listening on 127.0.0.1:3000. Let's assume the attacker does know what public IP the Angular /Rect webpack listens on, so with this attack they avoid CORS and access the public resources of the dev server. So what? If they know the public IP they could have just opened it in their browser and seen the same public resources (assuming no firewall). In the Angular/React case this cannot be used to access local files that are not otherwise already public. Then  comes the 'proxy' part, someone please enlighten me how this vulnerability is such a big deal when proxying an API through webpack. Can the attacker make authenticated requests against APIs protected with cookies? No, the rebound domain will not have access to the cookies of the real domain. Can the attacker make authenticates requests against APIs protected by Auth token stored in local storage? No, the rebound domain doesn't have access to local storage. In other words, thank you for discovering this vulnerability but its impact has been heavily overblown for people using webpack on public IP. BTW. thanks for disableHostCheck. Normally I am all for keeping our tools safe, but this feature has been a major source of inconvenience for me working with remote development environments and Angular/React. . ",
    "evan-scott-zocdoc": "Alternatively, I think it makes sense to autoenable this if setting the host to 0.0.0.0 e.g. bind to all IPs. . @sokra how to do you feel about the change described in https://github.com/webpack/webpack-dev-server/pull/890#issuecomment-305040442? I'd be happy to submit a PR.. It's a dev server though... are you recommending people use this in production?. ",
    "ldstein": "Extra testing reveals this issue is not a result of the content-type. ",
    "akatechis": "I have a similar issue. I'm not really using hot reloading, just manually refreshing my browser, and I still run into the issue where WDS is serving cached files, for several minutes after I've saved and recompiled my app.\nMy config looks like\n output: {\n  filename: `[name]${DEVELOPMENT_MODE ? \"\" : \".[chunkhash]\"}.js`,\n  path: path.resolve(__dirname, \"dist\"),\n},\ndevServer: {\n  contentBase: path.join(__dirname, \"dist\"),\n  publicPath: \"http://localhost:9000/\",\n  compress: true,\n  inline: false,\n  port: 9000\n}\n. Will give it a shot with WDS@2.7.1 and Webpack@2.7.0 and let you know how it works out. I haven't been able to reliably reproduce the issue that I'm seeing (and to be quite honest, I'm not 100% certain the behavior I see is that exact same as described by this issue), but will keep you updated.. I have not seen this in a while. It seems to have been fixed. I have no problem closing this out, and opening a new issue if I come across this issue again in the future.\nThanks!. If you're referring to adding new files to a project in which webpack-dev-server is already running and watching the files, then merely adding the file to a directory will not work. You will have to also require() or import() that module from a module that is already being watched by webpack.\nExample:\nIf my project has a main.js entrypoint\njavascript\nvar one = require(\"./one\");\nvar two = require(\"./two\");\nIf I create three.js, webpack will not know that it is part of the project, because the last time it walked the dependency graph, it didn't see it. If I update main.js and add var three = require(\"./three\"); then webpack will recompile main.js, analyze its dependencies again, notice that three.js is now a dependency and start looking at it.. Im particularly suspicious of Git Bash (Msys2 terminal)  itself, since I started seeing this behavior ever since upgrading git to 2.14.1 a few days ago.. Any update available as to the plans for this project? Will there be some other branch? Another project altogether?\nThanks for all your hard work, WDS team :). Any update available as to the plans for this project? Will there be some other branch? Another project altogether?\nThanks for all your hard work, WDS team :). ",
    "davidgoli": "see https://github.com/webpack/webpack-dev-middleware/releases/tag/v1.10.2 for an explanation. ",
    "ntucker": "@davidgoli According to https://github.com/webpack/webpack-dev-server/releases/tag/v2.4.3 \n\nRequests to localhost or 127.0.0.1 are not blocked.\nadded a disableHostCheck option to disable this check.\n\nboth of which are only true for raw resource requests, but not hot-reloading pushes.. @bebraw If you're referring to 1.10.2 of webpack-dev-middleware, that describes removing '*' and does not mention the lack of adding localhost or 127.0.0.1 depending on where the request came from - which is what is done for all requests unrelated to hotreloading.\nPlease read documented behavior of this project in the 2.4.3 release notes to understand this bug.\n\"The Host header of the request have to match the listening adress or the host provided in the public option.\". Looking at some of the code, it looks like the 2.4.3 changes did not affect the headers - those were only changed via the middleware bump. However, I would view those changes as incomplete and needing to encompass CORS headers as well.. Yes this is fixed now, thanks!. ",
    "ssilve1989": "What's the status on this?. What's the status on this?. ",
    "orteth01": "\nWhat's the status on this?\n\n@ssilve1989 waiting on review from one of Webpack's core team members. ",
    "prencher": "@SpaceK33z @sokra I hate to be that guy, but this is preventing us from moving to a more secure setup -- The entire point of the change that prompted this PR. Can we please get movement?\nI am happy to assist if I can.. @SpaceK33z @sokra I hate to be that guy, but this is preventing us from moving to a more secure setup -- The entire point of the change that prompted this PR. Can we please get movement?\nI am happy to assist if I can.. ",
    "sliwey": "@shellscape  I have already signed the CLA.. No problem, I will add some tests later. . Good idea, I will use internal-ip to replace this file.. @shellscape  You're right, I will change the word to useLocalIp to make it more semantic.\nAnd thank you for giving me all the advice.. ",
    "Vanuan": "This SO suggests there's something with text vs binary format:\nhttp://stackoverflow.com/questions/31630544/cant-get-private-key-with-openssl-no-start-linepem-lib-c703expecting-any-p\nWhich key format does the server expect? Can it detect the format itself? Because nginx does fine.. Oh, maybe I should provide contents instead of path?. Yeap, it worked.\ncert: fs.readFileSync('/ssl/server.pem'),\nkey: fs.readFileSync('/ssl/server.key'),. BTW #651 looks similar. Maybe more examples should be added to docs.... ",
    "eXtreaL": "This issue was due to a problem in react-router-dom v4 not working nicely with a  which isn't present at load time and gets rendered at a later point. Closed since this is not an issue in webpack-dev-server, sorry!. ",
    "xxza": "Invalid configuration object. webpack-dev-server has been initialised using a configuration object that does not match the API schema.\n - configuration has an unknown property 'process'. These properties are valid:\n   object { hot?, hotOnly?, lazy?, host?, filename?, publicPath?, port?, socket?, watchOptions?, headers?, clientLogLevel?, overlay?, key?, cert?, ca?, pfx?, pfxPassphrase?, inline?, disableHostCheck?, public?, https?, contentBase?, watchContentBase?, open?, features?, compress?, proxy?, historyApiFallback?, staticOptions?, setup?, stats?, reporter?, noInfo?, quiet?, serverSideRender?, index?, log?, warn? }. ",
    "kasperpeulen": "Seems to be fixed by:\nhttps://github.com/webpack/webpack-dev-server/pull/857/files\n. ",
    "Timer": "Hi! I made these changes on github so I hope they work. \ud83d\ude05\nIn a nutshell, there was no support for IPv6... this remedies that!. Pinging @d3viant0ne; we'd love to see some feedback/progression on this PR so we can land https://github.com/facebookincubator/create-react-app/pull/1887.. @kellyrmilligan would you be available to bring this up to date if we can get the ball rolling?. It would be great if publicHost could be an array so we could provide an IPv6 and IPv4 address.. We just have to make sure this works.. ",
    "AshikNesin": "Not sure if that's easy/possible.\nWe could copy the link to clipboard?\nJust like serve does.\nWhat do you think? @FriOne\n\n. @FriOne Yeah.. Didn't think about that use case. \nLets see if someone can help us :)\n(I'm new to webpack dev ecosystem). ",
    "FriOne": "@AshikNesin The copying may remove something important that a developer copied previously.\nAlso, sometimes you close browser tab and then want to open it again.\nIt is 100% possible, but it may be not so easy with webpack ecosystem.. @schester44 unfortunatly I have windows :) What about Linux?. @shellscape I use Git Bash, so why is it possible with angular cli but doesn't with webpack?. ",
    "Marindrew": "Having the same issue, webpack version 3.10.0, os x 10.13.3. ",
    "williamvasquezladders": "On the same boat. Webpack Version 3.10.0 os x 10.12.6. ",
    "leon-yum": "I'm getting this now :(\nThis started happening recently...\nOSX 10.12.6\nwebpack ^3.3.0\nwebpack-dev-server ^2.9.4\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n       4 modules\nwebpack: Compiled successfully.\nsh: line 1: 25436 Abort trap: 6           webpack-dev-server --colors\nerror An unexpected error occurred: \"Command failed.\nExit code: 134\nCommand: sh\nArguments: -c webpack && webpack-dev-server --colors\nDirectory: /Users/leongaban/projects/go/src/github.com/pizzahutdigital/mythor\nOutput:\n\".\ninfo If you think this is a bug, please open a bug report with the information provided in \"/Users/leongaban/projects/go/src/github.com/pizzahutdigital/mythor/yarn-error.log\".\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.. ",
    "QoT": "I have the same error message when trying to use yarn so it probably is not related specifically to webpack.\n\nVedrans-Mac-mini:tensorflow.js-classifier vedrano$ yarn watch\nyarn run v1.12.1\n$ cross-env NODE_ENV=development parcel index.html --no-hmr --open\nServer running at http://localhost:1234 \n\u2826 Building index-nonode.js...\n<--- Last few GCs --->\n...\n/var/folders/dc/kt06jl4n17393wmd8xmqtcsr0000gn/T/yarn--1541874315534-0.04599513967422797/node: line 3:  4868 Abort trap: 6           \"/usr/local/Cellar/node/11.1.0/bin/node\" \"$@\"\nerror Command failed with exit code 134.\n. \n",
    "imirza10": "And I am getting this information: The command \"grunt.cmd --no-color default\" exited with code 134.\nSo I endorse @willthemoor, its not only the WebPack error apparently\n. ",
    "renchap": "An issue about this has been opened: #1021. I got a similar problem too.\nWith publicPath: 'http://localhost:8080/packs/' HMR is trying to load http://localhost:8080/packs/sockjs-node/info?t=1502201588847 which returns a 404 error. `http://localhost:8080/sockjs-node/info?t=1502201588847 returns the expected value.\nThis is caused by https://github.com/webpack/webpack-dev-server/pull/911. I can confirm that it fixed the issue I encountered!. Is it working with 2.7.1?. ",
    "scott-cornwell": "This is definitely a thing, and also happens on OSX. We were running into this issue on Windows 10 and OSX and found that %20 in the path (path name created by Windows running in a VM on OSX) caused the same issue on both machines. Even worse, webpack-dev-server seems to actually fall back to serving files from the filesystem if a separate dev build was done with the same webpack config. Good news is you can just fix your path and npm install and it works.\nNot sure if this is actually the fault of webpack-dev-server or node itself.. ",
    "zgmf2000": "I've finally solved the problem. I've downgraded my nodeJS to 6.10.3 LTS and the following Webpack configuration:\n webpack v1.15.0\n webpack-dev-server v1.16.5\n* webpack-merge v0.14.1\nMaybe that has to do with Windows 10, I don't know. Anyway, this issue can now be closed.. I've finally solved the problem. I've downgraded my nodeJS to 6.10.3 LTS and the following Webpack configuration:\n webpack v1.15.0\n webpack-dev-server v1.16.5\n* webpack-merge v0.14.1\nMaybe that has to do with Windows 10, I don't know. Anyway, this issue can now be closed.. ",
    "drewwells": "That looks useful to document in the dev server project!\nOn Fri, Jun 2, 2017 at 5:41 AM chimurai notifications@github.com wrote:\n\nAdding agent in your proxy config should do the trick.\nRecipe / details can be found here:\nhttps://github.com/chimurai/http-proxy-middleware/blob/master/recipes/corporate-proxy.md\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/919#issuecomment-305752760,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAOmE2kvXYw2C4KyzYHnx_QoznVT6gIpks5r_-bVgaJpZM4NklRH\n.\n. \n",
    "jeffreznik": "Actually the issue is occurring in a different place... The Webpack proxy server doesn't die, the client side (browser) tries to reconnect but fails.\nStill, either the client or the proxy server could retry a few times before dying.. Actually the issue is occurring in a different place... The Webpack proxy server doesn't die, the client side (browser) tries to reconnect but fails.\nStill, either the client or the proxy server could retry a few times before dying.. Actually the issue is occurring in a different place... The Webpack proxy server doesn't die, the client side (browser) tries to reconnect but fails.\nStill, either the client or the proxy server could retry a few times before dying.. I should also note that I'm proxying to root ('/') because I am also doing server-side rendering.\njs\nconfig.devServer = {\n  contentBase: \"./public\",\n  publicPath: \"/assets/\",\n  historyApiFallback: true,\n  host: '0.0.0.0',\n  port: 3001,\n  proxy: {\n    // Send all requests to express, except WDS will still serve up its version of /assets/bundle.js for HMR to work\n    '/': {\n      target: 'http://0.0.0.0:3000',\n      secure: false\n    }\n  }\n};\nOn the browser I connect to http://localhost:3001/, which gives me HMR (due to being connected to WDS) and all requests (except for static file requests) get piped to localhost:3000 (API server).  The API server will serve up the bundle on any path but '/api/' (i.e. '*'), but on '/api/' will use my API route handlers.. I should also note that I'm proxying to root ('/') because I am also doing server-side rendering.\njs\nconfig.devServer = {\n  contentBase: \"./public\",\n  publicPath: \"/assets/\",\n  historyApiFallback: true,\n  host: '0.0.0.0',\n  port: 3001,\n  proxy: {\n    // Send all requests to express, except WDS will still serve up its version of /assets/bundle.js for HMR to work\n    '/': {\n      target: 'http://0.0.0.0:3000',\n      secure: false\n    }\n  }\n};\nOn the browser I connect to http://localhost:3001/, which gives me HMR (due to being connected to WDS) and all requests (except for static file requests) get piped to localhost:3000 (API server).  The API server will serve up the bundle on any path but '/api/' (i.e. '*'), but on '/api/' will use my API route handlers.. I should also note that I'm proxying to root ('/') because I am also doing server-side rendering.\njs\nconfig.devServer = {\n  contentBase: \"./public\",\n  publicPath: \"/assets/\",\n  historyApiFallback: true,\n  host: '0.0.0.0',\n  port: 3001,\n  proxy: {\n    // Send all requests to express, except WDS will still serve up its version of /assets/bundle.js for HMR to work\n    '/': {\n      target: 'http://0.0.0.0:3000',\n      secure: false\n    }\n  }\n};\nOn the browser I connect to http://localhost:3001/, which gives me HMR (due to being connected to WDS) and all requests (except for static file requests) get piped to localhost:3000 (API server).  The API server will serve up the bundle on any path but '/api/' (i.e. '*'), but on '/api/' will use my API route handlers.. After reviewing the code, it looks like this is functionality that should be added to http-proxy-middleware instead.. After reviewing the code, it looks like this is functionality that should be added to http-proxy-middleware instead.. After reviewing the code, it looks like this is functionality that should be added to http-proxy-middleware instead.. ",
    "DylanPiercey": "@jeffreznik did you ever find a solution?. @jeffreznik did you ever find a solution?. I'll look into it \ud83d\ude42. I'll look into it \ud83d\ude42. ",
    "jameslai": "Absolutely, I can implement that shortly.. Absolutely, I can implement that shortly.. I've rebased the change into a single commit to keep the history clean.\nSome defaults we were previously setting were able to be removed in lieu of loglevel's native default methods. Additionally a none setting will now utilize loglevel's disableAll.\nWe we need to do a little funny business when receiving the log level from configuration, as Webpack's documentation specifies using the string warning while loglevel expects warn.\nAn error will now be emitted if the configuration is attempting to set an unknown value for clientLogLevel.. I've rebased the change into a single commit to keep the history clean.\nSome defaults we were previously setting were able to be removed in lieu of loglevel's native default methods. Additionally a none setting will now utilize loglevel's disableAll.\nWe we need to do a little funny business when receiving the log level from configuration, as Webpack's documentation specifies using the string warning while loglevel expects warn.\nAn error will now be emitted if the configuration is attempting to set an unknown value for clientLogLevel.. The specific lines you highlighted are not duplicating the quiet functionality, but absolutely our consumption of a log level of none (see https://webpack.js.org/configuration/dev-server/#devserver-clientloglevel for the documentation specifying the use of none) most certainly seems like duplicate functionality. I think this is a good question for the Webpack team, being that we technically have two options which will do roughly the same thing - should one of these options be deprecated?\nA proposed solution is to deprecate the use of none as an option for clientLogLevel since that is technically not a log level (which the name clientLogLevel suggests), and leaving quiet flagged as true for completely silencing output.\nThe other option is to deprecate the use of quiet entirely and keep all logging options within the single configuration value of clientLogLevel.\n. ",
    "tomshaw": "Using the following config I've got it loading and running It's just not refreshing the page. I can see it notices changes to my js/scss it's just not refreshing the page. I have to manually refresh.\n```\nconst path = require('path')\nconst webpack = require('webpack')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin');\nlet environment = process.env.NODE_ENV || 'development'; // Windows: $env:NODE_ENV=\"production\"\nlet BUILD_DIR = path.resolve(__dirname, './public');\nlet APP_DIR = path.resolve(__dirname, 'public/scripts');\nconst config = {\n  entry: APP_DIR + '/main.js',\n  output: {\n    path: path.resolve(__dirname, 'public/'),\n    filename: 'js/build.js'\n  },\n  module: {\n    rules: [{\n      test: /.(js|jsx)$/,\n      exclude: /(node_modules|bower_components)/,\n      loader: 'babel-loader'\n    }, {\n      test: /.(png|jpg|gif|svg|ico)$/,\n      loader: 'file-loader',\n      options: {\n        name: '[name].[ext]?[hash]'\n      }\n    }, {\n      test: /.scss$/,\n      use: ExtractTextPlugin.extract({\n        fallback: 'style-loader',\n        use: ['css-loader', 'sass-loader']\n      })\n    }, {\n      test: /.css$/,\n      loader: 'style-loader!css-loader'\n    }, {\n      test: /.(svg|ttf|woff|woff2|eot)$/,\n      loader: 'url-loader?limit=5000',\n      options: {\n        name: 'fonts/[name].[ext]?[hash]'\n      }\n    }]\n  },\n  resolve: {\n    alias: {\n      \"TweenLite\": path.resolve('node_modules', 'gsap/src/uncompressed/TweenLite.js'),\n      \"TweenMax\": path.resolve('node_modules', 'gsap/src/uncompressed/TweenMax.js'),\n      \"TimelineLite\": path.resolve('node_modules', 'gsap/src/uncompressed/TimelineLite.js'),\n      \"TimelineMax\": path.resolve('node_modules', 'gsap/src/uncompressed/TimelineMax.js'),\n      \"ScrollMagic\": path.resolve('node_modules', 'scrollmagic/scrollmagic/uncompressed/ScrollMagic.js'),\n      \"animation.gsap\": path.resolve('node_modules', 'scrollmagic/scrollmagic/uncompressed/plugins/animation.gsap.js'),\n      \"debug.addIndicators\": path.resolve('node_modules', 'scrollmagic/scrollmagic/uncompressed/plugins/debug.addIndicators.js')\n    }\n  },\n  devServer: {\n    port: 3000,\n    hot: true,\n    inline: true,\n    contentBase: 'public',\n    proxy: {\n      '*': {\n        target: 'http://mysite.dev',\n        secure: false,\n        changeOrigin: true\n      }\n    },\n    historyApiFallback: true\n  },\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    new ExtractTextPlugin('./css/styles.css'),\n    new webpack.ProvidePlugin({\n      jQuery: 'jquery',\n      $: 'jquery'\n    }),\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: JSON.stringify(environment)\n      }\n    })\n  ]\n};\nif (environment === 'production') {\n  config.plugins.push(new webpack.optimize.UglifyJsPlugin());\n} else {\n  config.devtool = \"source-map\"; // cheap-module-source-map\n}\nconsole.log('Running: ' + environment + ' mode.');\nmodule.exports = config;\n```\n. Changing hot to false fixed it. Considering I'm building a generic ES6 project this is good enough for now. . ",
    "Opty1712": "you can go with this code of proxy:\n'/my_url/**': {\n  target: config.targetLocal,\n  bypass: (req) => {\n    req.method = 'GET'; \n  },\n},\n. you can go with this code of proxy:\n'/my_url/**': {\n  target: config.targetLocal,\n  bypass: (req) => {\n    req.method = 'GET'; \n  },\n},\n. ",
    "alzuma": "Why this is closed? It is a normal use case to check etag with HEAD request. This req.method = 'GET'; is just unneeded hacking.. ",
    "sindresorhus": "@shellscape It's also a common use-case to use a HEAD request to check whether the server is running. Can you please reopen?\nExample: https://github.com/sindresorhus/wait-for-localhost/blob/master/index.js. @shellscape It's also a common use-case to use a HEAD request to check whether the server is running. Can you please reopen?\nExample: https://github.com/sindresorhus/wait-for-localhost/blob/master/index.js. ",
    "lbogdan": "Closed, opened https://github.com/webpack/webpack-dev-server/pull/926.. Closed, opened https://github.com/webpack/webpack-dev-server/pull/926.. Maybe we should check if webpack/hot/log exists?\njavascript\nvar hotCtx = require.context(\"webpack/hot\", false, /^\\.\\/log$/);\nif(hotCtx.keys().length > 0) {\n  hotCtx(\"./log\").setLogLevel(level);\n}. Maybe we should check if webpack/hot/log exists?\njavascript\nvar hotCtx = require.context(\"webpack/hot\", false, /^\\.\\/log$/);\nif(hotCtx.keys().length > 0) {\n  hotCtx(\"./log\").setLogLevel(level);\n}. A webpack release, you mean?. A webpack release, you mean?. Makes sense. It would be nice to be able to get rid of the webpack/hot/log check, like in the initial commit. Thanks for the heads up!. Makes sense. It would be nice to be able to get rid of the webpack/hot/log check, like in the initial commit. Thanks for the heads up!. @shellscape The last commit has error catching (more like \"feature\" checking, actually). That's why the tests pass. Can you please check?. @shellscape The last commit has error catching (more like \"feature\" checking, actually). That's why the tests pass. Can you please check?. @shellscape Fixed conflicts, everything looks good.\nAlso, I saw that with https://github.com/webpack/webpack-dev-server/pull/921 webpack-dev-server is now using the loglevel package for logging. Maybe use it in webpack, too?. @shellscape Fixed conflicts, everything looks good.\nAlso, I saw that with https://github.com/webpack/webpack-dev-server/pull/921 webpack-dev-server is now using the loglevel package for logging. Maybe use it in webpack, too?. Oh, ok, I was under the impression that webpack and webpack-dev-server have pretty much the same maintainers. :smiley: . Oh, ok, I was under the impression that webpack and webpack-dev-server have pretty much the same maintainers. :smiley: . Cc @johan-lejdung.. What's even stranger is that it fails only on node 6 and 4, 8 is ok. :smile: . That's an eslint error, so I don't see any reason why it would work differently in node 8 vs. node 4 or 6. Anyway, fixed it in https://github.com/webpack/webpack-dev-server/pull/1098.. Any news on this?. @shellscape Thank you for your kind words, they might not necessarily reflect the reality! :smile:\nThat was just a follow up, sorry if I came off as impatient, I was just curious about an update. I know OSS is made out of people's personal time, and I really appreciate these people and their hard work!. @shellscape Nice, I hope it will be translucent!\nIt would be nice if you could merge this, so that I don't have to \"patch\" it in node_modules for every new project. :smile: . Please merge so I can rebase https://github.com/webpack/webpack-dev-server/pull/1096 and https://github.com/webpack/webpack-dev-server/pull/1097, whose tests are currently failing because of this. Thanks!. @shellscape I knew this doesn't fix the root problem, but I didn't have time to investigate further.\nEven so, for the sake of consistency, I think those two eslint-disable/enable directives can be removed and the quotes replaced, like in this PR.. @shellscape I am completely with you on fixing the ESLint issue. I didn't say for a second to not fix it, I hope it didn't come through that way.\nNow, back to that block of code, I really don't see the reason for those two eslint-disable/enable directives and using single and double quotes interchangeably.\nI mean, can't we fix both?. @shellscape Thanks! I also rebased my two other PRs.. This also affects projects created with @vue/cli - tested a few minutes ago with 3.1.12.. Re: PR title, it's 0.3.19, not 0.13.9.. I can confirm this fixes the websocket origin checking issue with projects created by @vue/cli: https://github.com/webpack/webpack-dev-server/issues/1604#issuecomment-449592635 .. ",
    "p2227": "+1\n\nwebpack successfully builds without error, but webpack-dev-server throws the above error.\n\n\"webpack\": \"^2.4.1\",\n\"webpack-dev-server\": \"^2.4.4\"\n\nwindow7 x64. ",
    "samuraisam": "I'm actually not sure why travis would fail here.. Wow this has to be my personal record for worst managed PR ever. Thanks for being understanding!\n. It looks like I have signed it (the CLA check passes). ",
    "francoisromain": "It works if we add 'webpack-dev-server/client?http://localhost:8080' as one entry. ",
    "edi9999": "Ping (to be notified). Any updates on this ?. In which PR is there a clear solution ?. Any updates ?\nping @shellscape . Ok ! I hope everything will be OK for you. I have just pushed a fix that fixes the eslint issues. Hope this is going to be merged soon !. Fixed :-). ",
    "Mr-Luo": "i think i maybe got the same problem.And i work on the Ubuntu 14.04 64bit.\n```\n\napple@1.0.0 dev /media/milo/Study/nanguan/cherry-ui\ncross-env NODE_ENV=development webpack-dev-server --inline --hot --port 8086\n\ninternal/child_process.js:319\n    throw errnoException(err, 'spawn');\n    ^\nError: spawn EACCES\n    at exports._errnoException (util.js:1020:11)\n    at ChildProcess.spawn (internal/child_process.js:319:11)\n    at Object.exports.spawn (child_process.js:369:9)\n    at spawn (/usr/local/lib/node_modules/cross-env/node_modules/cross-spawn/index.js:17:18)\n    at crossEnv (/usr/local/lib/node_modules/cross-env/dist/index.js:31:38)\n    at Object. (/usr/local/lib/node_modules/cross-env/dist/bin/cross-env.js:6:1)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! apple@1.0.0 dev: cross-env NODE_ENV=development webpack-dev-server --inline --hot --port 8086\nnpm ERR! Exit status 1\nnpm ERR! \nnpm ERR! Failed at the apple@1.0.0 dev script.\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n```\nHere is the debug.log\n``\n0 info it worked if it ends with ok\n1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'run', 'dev' ]\n2 info using npm@5.3.0\n3 info using node@v6.11.2\n4 verbose run-script [ 'predev', 'dev', 'postdev' ]\n5 info lifecycle apple@1.0.0~predev: apple@1.0.0\n6 info lifecycle apple@1.0.0~dev: apple@1.0.0\n7 verbose lifecycle apple@1.0.0~dev: unsafe-perm in lifecycle true\n8 verbose lifecycle apple@1.0.0~dev: PATH: /usr/local/lib/node_modules/npm/bin/node-gyp-bin:/media/milo/Study/nanguan/cherry-ui/node_modules/.bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\n9 verbose lifecycle apple@1.0.0~dev: CWD: /media/milo/Study/nanguan/cherry-ui\n10 silly lifecycle apple@1.0.0~dev: Args: [ '-c',\n10 silly lifecycle   'cross-env NODE_ENV=development webpack-dev-server --inline --hot --port 8086' ]\n11 silly lifecycle apple@1.0.0~dev: Returned: code: 1  signal: null\n12 info lifecycle apple@1.0.0~dev: Failed to exec dev script\n13 verbose stack Error: apple@1.0.0 dev:cross-env NODE_ENV=development webpack-dev-server --inline --hot --port 808613 verbose stack Exit status 1\n13 verbose stack     at EventEmitter.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:289:16)\n13 verbose stack     at emitTwo (events.js:106:13)\n13 verbose stack     at EventEmitter.emit (events.js:191:7)\n13 verbose stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/spawn.js:40:14)\n13 verbose stack     at emitTwo (events.js:106:13)\n13 verbose stack     at ChildProcess.emit (events.js:191:7)\n13 verbose stack     at maybeClose (internal/child_process.js:891:16)\n13 verbose stack     at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n14 verbose pkgid apple@1.0.0\n15 verbose cwd /media/milo/Study/nanguan/cherry-ui\n16 verbose Linux 4.4.0-89-generic\n17 verbose argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"run\" \"dev\"\n18 verbose node v6.11.2\n19 verbose npm  v5.3.0\n20 error code ELIFECYCLE\n21 error errno 1\n22 error apple@1.0.0 dev:cross-env NODE_ENV=development webpack-dev-server --inline --hot --port 8086`\n22 error Exit status 1\n23 error Failed at the apple@1.0.0 dev script.\n23 error This is probably not a problem with npm. There is likely additional logging output above.\n24 verbose exit [ 1, true ]\nHere is the `package.json` :\n{\n  \"name\": \"apple\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Vue.js project\",\n  \"author\": \"L Yunparty yunparty@gmail.com\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --inline --hot --port 8086\",\n    \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.16.2\",\n    \"element-ui\": \"^1.4.2\",\n    \"style-loader\": \"^0.18.2\",\n    \"vue\": \"^2.4.2\",\n    \"vue-resource\": \"^1.3.4\",\n    \"vue-router\": \"^2.3.1\",\n    \"webpack-dev-server\": \"^2.7.1\"\n  },\n  \"devDependencies\": {\n    \"autoprefixer\": \"^6.7.2\",\n    \"babel-core\": \"^6.22.1\",\n    \"babel-eslint\": \"^7.1.1\",\n    \"babel-loader\": \"^6.2.10\",\n    \"babel-plugin-istanbul\": \"^4.1.1\",\n    \"babel-plugin-transform-runtime\": \"^6.22.0\",\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-stage-2\": \"^6.22.0\",\n    \"babel-register\": \"^6.22.0\",\n    \"chai\": \"^3.5.0\",\n    \"chalk\": \"^1.1.3\",\n    \"chromedriver\": \"^2.31.0\",\n    \"connect-history-api-fallback\": \"^1.3.0\",\n    \"copy-webpack-plugin\": \"^4.0.1\",\n    \"cross-env\": \"^4.0.0\",\n    \"cross-spawn\": \"^5.0.1\",\n    \"css-loader\": \"^0.28.0\",\n    \"eslint\": \"^3.19.0\",\n    \"eslint-config-standard\": \"^6.2.1\",\n    \"eslint-friendly-formatter\": \"^2.0.7\",\n    \"eslint-loader\": \"^1.9.0\",\n    \"eslint-plugin-html\": \"^2.0.0\",\n    \"eslint-plugin-promise\": \"^3.4.0\",\n    \"eslint-plugin-standard\": \"^2.0.1\",\n    \"eventsource-polyfill\": \"^0.9.6\",\n    \"express\": \"^4.15.4\",\n    \"extract-text-webpack-plugin\": \"^2.0.0\",\n    \"file-loader\": \"^0.11.1\",\n    \"friendly-errors-webpack-plugin\": \"^1.1.3\",\n    \"html-webpack-plugin\": \"^2.30.1\",\n    \"http-proxy-middleware\": \"^0.17.3\",\n    \"inject-loader\": \"^3.0.1\",\n    \"karma\": \"^1.4.1\",\n    \"karma-coverage\": \"^1.1.1\",\n    \"karma-mocha\": \"^1.3.0\",\n    \"karma-phantomjs-launcher\": \"^1.0.2\",\n    \"karma-phantomjs-shim\": \"^1.4.0\",\n    \"karma-sinon-chai\": \"^1.3.1\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-spec-reporter\": \"0.0.30\",\n    \"karma-webpack\": \"^2.0.4\",\n    \"lolex\": \"^1.5.2\",\n    \"mocha\": \"^3.5.0\",\n    \"nightwatch\": \"^0.9.12\",\n    \"opn\": \"^4.0.2\",\n    \"optimize-css-assets-webpack-plugin\": \"^1.3.0\",\n    \"ora\": \"^1.2.0\",\n    \"rimraf\": \"^2.6.0\",\n    \"selenium-server\": \"^3.5.0\",\n    \"semver\": \"^5.4.1\",\n    \"shelljs\": \"^0.7.6\",\n    \"sinon\": \"^2.4.1\",\n    \"sinon-chai\": \"^2.12.0\",\n    \"url-loader\": \"^0.5.8\",\n    \"vue-loader\": \"^12.2.2\",\n    \"vue-style-loader\": \"^3.0.1\",\n    \"vue-template-compiler\": \"^2.4.2\",\n    \"webpack\": \"^2.7.0\",\n    \"webpack-bundle-analyzer\": \"^2.9.0\",\n    \"webpack-dev-middleware\": \"^1.12.0\",\n    \"webpack-hot-middleware\": \"^2.18.2\",\n    \"webpack-merge\": \"^4.1.0\"\n  },\n  \"engines\": {\n    \"node\": \">= 4.0.0\",\n    \"npm\": \">= 3.0.0\"\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not ie <= 8\"\n  ]\n}\n```. ",
    "mugash": "I was getting the same error with vue-cli.\nTurns out the scripts couldn't be able to spawn a new browser process.\nJust remove the open flag. ",
    "joannesalfa": "removed --open and it didn't work to me. ",
    "nwaughachukwuma": "Sorry guys, but I can't find what file the --open flag is at. It's not for me. Am using node build/dev-server.js. But I was able to solve the problem. It's a read/write permission with the opn module. What I did is grant permission to the file (sudo chmod -R u+x node_module/opn/xdg-open) from the project root, and it was good to go.\nThanks for your timely response @dw72 . ",
    "vijaypandiyan": "follow this thread and has solution for it to downgrade webpack version. \nhttps://github.com/vuejs/vue-cli/issues/714\n. ",
    "bseiller": "Might this be a duplicate of #851?. @callensm: In fact it seems to be an issue with the SSL certificate - but Chrome does a bad job of telling us.\nWe had the same problem and I created a new self-signed certificate (pem) including SAN (Subject Alternative Name) with openssl as per\n\nhttps://github.com/angular/angular-cli/issues/4839#issuecomment-285793753\nhttps://github.com/angular/angular-cli/issues/4839#issuecomment-310422777\nhttps://bugs.chromium.org/p/chromium/issues/detail?id=704199#c6\n\nand used it to replaced \n\\node_modules\\webpack-dev-server\\ssl\\server.pem\nAlso the cert had to be imported into Chrome as a Trusted Root.\nIt was quite a haggle to get there but finally no more \n\n[WDS] Disconnected!\n\nYou can actually download the openssl.conf linked in the chromium issue, adapt it as needed and use it to generated the key and cert file and finally merge them to the pem...\nFollowing some links that helped getting my head around the issue:\n\nhttps://stackoverflow.com/questions/21488845/how-can-i-generate-a-self-signed-certificate-with-subjectaltname-using-openssl\nhttps://stackoverflow.com/questions/10175812/how-to-create-a-self-signed-certificate-with-openssl/27931596#27931596\nhttps://superuser.com/questions/1202498/create-self-signed-certificate-with-subjectaltname-to-fix-missing-subjectaltnam/1202506#1202506\nhttps://stackoverflow.com/questions/21297139/how-do-you-sign-certificate-signing-request-with-your-certification-authority/21340898#21340898\nhttps://superuser.com/questions/1202498/create-self-signed-certificate-with-subjectaltname-to-fix-missing-subjectaltnam/1202506#1202506. \n",
    "callensm": "@bseiller No, my issue is resolved on the removal of the --https flag, while that post has no reference to that as the problem.. Temporarily resolved by mounting onto a self-signed express server using webpack-dev-middleware.\nStill an issue worth resolving entirely.. @jayryemure sounds about right!\nAt first I thought it may have been an issue with the SSL certificate that is generated for the instance but if it eventually settles and remains connected, then that probably isn't it.. ",
    "JamiesWhiteShirt": "I don't know if I am experiencing the issue with subjectAltName, but I am experiencing the same symptoms in Chrome 59.0.3071.115. There seems to be a weird workaround, which is to switch to another tab before the page starts refreshing, and switching back after it's done refreshing (when the favicon is no longer a loading icon).. Could you please fix that indentation error? The first line you added is indented with both spaces and tabs.\nWaiting for this so the page can stop refreshing for no reason.. Now it's even worse. It's all supposed to be indented with tabs \ud83d\ude04.. ",
    "perlun": "Coming in late here - doesn't this mean that you have to re-trust the localhost cert (i.e. add it to Keychain Access if using Chrome) every month if you want to get rid of SSL warnings in the browser? (According to my April 2018 experience, Chrome doesn't trust localhost self-signed certificates unless you add it to the CA root list on the machine, or enable the chrome://flags/#allow-insecure-localhost setting.). @shellscape Thanks for the link and the clarification. Hehe, I'm not even a webpack user myself. \ud83d\ude09 But is implementing SSL support in our Ruby-based application framework and stumbled on this post. I respect the decisions taken by the people you refer to, just thought about the implications. But, the PR also suggests to \"manage your own certificate\" which makes sense.. ",
    "reda-alaoui": "So you are saying that running as many webpack dev servers as paths is just ok?\nBecause this ugly workaround exists, you won't accept it?\nBecause nobody uses a Tomcat or Java WebApp container except me?\nBecause the world is so complex, you don't want to manage this complexity?\nI guess I will manage my own complexity and fork until modules are natively supported by all browsers.. ",
    "dfcowell": "Is there any workaround available for this? Just ran headlong into it. Kind of a bummer.. Hmm, looks like something in my config doesn't play nicely with 2.5.0. Probably unrelated. My 2.4.5 config worked fine though (apart from the issue with allowedHosts of course). I'll have a poke around and see if I can identify the issue.\nIf I get 2.5.0 working I'll report back with the result.\n./node_modules/.bin/webpack-dev-server --config ./webpack/develop.config.js --hot --inline --content-base ./webpack\nError: addMembership EINVAL\n    at Socket.addMembership (dgram.js:507:11)\n    at Socket.<anonymous> (/mnt/c/Users/[my-project]/node_modules/multicast-dns/index.js:53:16)\n    at emitNone (events.js:91:20)\n    at Socket.emit (events.js:185:7)\n    at startListening (dgram.js:121:10)\n    at _handle.lookup (dgram.js:226:7)\n    at _combinedTickCallback (internal/process/next_tick.js:83:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)\n    at Module.runMain (module.js:606:11). ",
    "snyamathi": "@lencioni fyi - Your build is going to fail until https://github.com/webpack/webpack-dev-middleware/pull/200 is released because of the devDependency bump to version 3 (which is the right thing to do).\nnpm ERR! Linux 4.8.12-040812-generic\nnpm ERR! argv \"/home/travis/.nvm/versions/node/v4.8.3/bin/node\" \"/home/travis/.nvm/versions/node/v4.8.3/bin/npm\" \"install\"\nnpm ERR! node v4.8.3\nnpm ERR! npm  v2.15.11\nnpm ERR! code EPEERINVALID\nnpm ERR! peerinvalid The package webpack@3.0.0 does not satisfy its siblings' peerDependencies requirements!\nnpm ERR! peerinvalid Peer webpack-dev-middleware@1.10.2 wants webpack@1 || ^2.1.0-beta || ^2.2.0-rc.0\nnpm ERR! Please include the following file with any support request:\nnpm ERR!     /home/travis/build/webpack/webpack-dev-server/npm-debug.log. Duplicate of https://github.com/webpack/webpack-dev-server/pull/946\nIt's on their radar but not yet merged / released.. ",
    "lencioni": "@snyamathi Yeah, I saw that as well. Thanks for noting it!. Freshly rebased!. Looks like webpack-dev-middleware 1.11.0 is out now, so I've updated this PR to include that as well.. @SpaceK33z @sokra please let me know if there is anything I can do to help move this along. Thanks!. Duplicate of #946. Duplicate of #946 . Ok, thanks!\nOn Thu, Dec 7, 2017, 9:02 PM Andrew Powell notifications@github.com wrote:\n\n@lencioni https://github.com/lencioni thanks for checking in and the\nPR. unfortunately I can't approve of this change at this time. I don't feel\nthat alpha - or any version-tagged - releases should be included in a\ndependency range for a non-version-tagged version of a module. When v3 is\nreleased as alpha/beta, webpack@4 will be allowed. Until webpack@4 is\nreleased as stable, the 2.x branch of WDS will need to stick with the\ncurrent peerDep range. Of note, that doesn't prevent users from installing\nand using webpack@4 while it's in alpha.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/1219#issuecomment-350173030,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAL7zjHNlw0PM6OZ1gqVnxp-VKGKevHbks5s-MLygaJpZM4Q6Xf8\n.\n. \n",
    "ankurk91": "@lencioni\ncan you rebase, your PR gets outdated. @coltonw \nCan you rebase ?. @coltonw \nCan you rebase ?. ",
    "mcbain": "+1. ",
    "deepu105": "@sokra @TheLarkInn @SpaceK33z guys this is preventing us from upgrading to webpack 3 in JHipster. Any idea when this will be moved?\ncc @jdubois. @TheLarkInn any idea when this might be released?. @webpack/core-team @webpack/dev-server-team Guys as an OSS project maintainer I know it's not fair to put pressure on people, but this issue literally makes it impossible to use webpack 3 in real projects, as you would always use webpack-dev-server along with it. So any progress would be extremely appreciated. If we can do anything to help please let us know we will help. @TheLarkInn really appreciated now JHipster can finally ship with webpack 3 :dancer: . Thanks\nThanks & Regards,\nDeepu\nOn Fri, Jul 7, 2017 at 7:56 AM, Sean Larkin notifications@github.com\nwrote:\n\nSo so so sorry about the delay on this all! I have now published as\nwebpack-dev-server@2.5.1 \ud83c\udf89\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/946#issuecomment-313593956,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABDlF_bB1j6lb6HMoYjsCsk411TuWzb9ks5sLciOgaJpZM4N-b3N\n.\n. Yes they are warnings and shouldn't cause any issues\n\nOn 10 Jul 2017 11:47 pm, \"Avindra Goolcharan\" notifications@github.com\nwrote:\n\nPeer dep mismatch are just warnings anyway right?\nAt least it is with Yarn...\nOn Sun, Jul 9, 2017, 6:59 PM Karl Jensen notifications@github.com wrote:\n\nWow, the entitlement.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/946#\nissuecomment-313971243,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/\nAAHvgO8E5FM4FeXmNg3LMB7y3yxozrNKks5sMVtWgaJpZM4N-b3N\n.\n\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/pull/946#issuecomment-314259231,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABDlF1GQU6AYlfGvkpk_Y88s58mJvtwhks5sMpvqgaJpZM4N-b3N\n.\n. \n",
    "mareksuscak": "A new version of webpack-dev-middleware has been out for like 5 days. Can we merge & release this change? What are we waiting for? Let me know if there's anything that needs to be done and I can certainly contribute some of my spare time.. @Download it's not. We also found several core plugins that haven't been updated yet (i.e. extract-text-webpack-plugin). Thus at my company we concluded it's not the right time to update to webpack 3 as of yet.. ",
    "michael-ciniawsky": "@webpack/core-team @webpack/dev-server-team Yo \ud83d\udc4b :D, could someone give this priority please? Seems to be good to go ? . Fixes #932. Yup Yup :) you were first aswell, @webpack/dev-server-team if the dependency bump is fine in #946 just close this one please . Does the build time also increase with webpack v3.4.1 && webpack-dev-server v2.9.4 ? If there is any perf regression I assume this is in webpack itself and unrelated to webpack-dev-server in particular. In any case a reproduction repo is needed for debugging since perf often depends on your particular project and is non-trivial to debug, nearly impossible without any code tbh. A starting point would be using webpack --progress and observe where it more or less 'hangs' for some time. node --inspect --debug-brk ./node_modules/webpack/bin/webpack.js\nChrome DevTools. @shellscape Yep, if it is an regression chances are high it's webpack 3.4.1...3.8.1 + this project and very unlikely to be the related to webpack-dev-server, but who knows for sure \u00af_(\u30c4)_/\u00af\n\n201151ms\n\n@cmargulhano ~3min isn't that bad at all ? \ud83d\ude43 . diff\n    devServer: {\n        contentBase: './',\n-       publicPath: '/dev/assets'\n+       publicPath: '/dev/'\n        ...\n    }. @shellscape I think this should be revisited since the ES5 compat is a minor change to the code base (mainly let/const => var) and if the user base is big enough (~500 million (claimed)) and folks have issues it's an fair point to consider imho. (e.g can't the client files not be transpiled ?). Does this also happen with webpack-dev-server >= v3.0.0 ?. Please try webpack-dev-server@3.0.0-beta.1 which reverted some of the changes made in webpack-dev-server@3.0.0-alpha*, this should not happen anymore now. Closing in favor of #1322 . There were a lot of changes between alpha => beta, which fixes most of the known problems with webpack-dev-server@3.0.0-alpha.*. Upgrade to webpack-dev-server@3.0.0. In case my assumption is wrong here, feel free to reopen :). Closing in favor of #1553. Thx :). @sanonz Are you still interested in eventually continuing this PR ?. https://webpack.js.org/configuration/dev-server/#devserver-quiet- There will be nothing logged to the console once you set this option to true. > Rerun loader when files in site_path change.\n@cmseaton42 The loader code looks correct to me so far, but in case you meant to watch the *.md files and trigger a rebuild, when one of those files changes, you need to add each of them to the webpack watcher individually via this.addDependency(path/to/file.md)  aswell. diff\n- webpack-dev-server --mode development --hot webpack/webpack.config.client.development.babel.js\n+ webpack-dev-server --mode development --hot --config webpack/webpack.config.client.development.babel.js. This isn't really a patch as sadly as it is. I'm not sure if we can backport this tbh. Sry but this is a breaking chnage for the v2.x line, please upgrade to v3.x instead. Closing in favor of https://github.com/webpack/webpack-dev-server/issues/1373. Closing in favor of https://github.com/webpack/webpack-dev-server/issues/1373. i'm going to close issues as it seems folks mainly have issue with configurating HMR 'correctly'  for there setup(s), please go to https://webpack.js.org/ for more information on how to do so\nAnyone with a concrete issue and a repo, feel free to open a new issue instead :). i'm going to close issues as it seems folks mainly have issue with configurating HMR 'correctly'  for there setup(s), please go to https://webpack.js.org/ for more information on how to do so\nAnyone with a concrete issue and a repo, feel free to open a new issue instead :). Released in v3.1.6 \ud83c\udf89 . https://github.com/webpack/webpack-dev-server/pull/1409. Released in v3.1.6 \ud83c\udf89 . @all Does this still happen with https://github.com/webpack/webpack-dev-server/pull/1434 (v3.1.5) ? . Closing in favor of \nhttps://github.com/webpack/webpack-dev-middleware/issues/333 (Issue)\nhttps://github.com/webpack/webpack-dev-middleware/pull/334 (PR). https://webpack.js.org/configuration/dev-server/#devserver-index :). See https://github.com/webpack/webpack-dev-server/pull/1426#issuecomment-406873487 I'm going to close this for now, feel free to reopen or ideally open an issue here and in webpack/watchpack for discussion beforehand :). You currently can't and we are migrating away from that module asap, disabling will not really fix the problem :). @zeroarst Could you post the 404 here please? I will try and see what I can do about it in the meantime if there is anything commonly failing because of sockjs atm. Released in v3.1.6 \ud83c\udf89 . Guessing from that config provided your paths are likel simply off somewhere down the line, please try to provide a simple example with a simple repo to reproduce and feel free to reopen the issue once can provide those :). Guessing from that config provided your paths are likel simply off somewhere down the line, please try to provide a simple example with a simple repo to reproduce and feel free to reopen the issue once can provide those :). Eventually fixed by https://github.com/webpack/webpack-dev-middleware#methods (v3.2.0) (not used by webpackdev-server yet). Eventually fixed by https://github.com/webpack/webpack-dev-middleware#methods (v3.2.0) (not used by webpackdev-server yet). @EloB See https://github.com/webpack/webpack-dev-server/pull/1338/files#diff-5e0bdc9fe7d56299ec06583d181360a5 for a test case and as a starting point :). @EloB See https://github.com/webpack/webpack-dev-server/pull/1338/files#diff-5e0bdc9fe7d56299ec06583d181360a5 for a test case and as a starting point :). I think this is definitely blocked by https://github.com/nodejs/node/issues/21665 and https://github.com/expressjs/express/issues/3388 atm. @Kovensky Yep, I understand it's blocked on that :). Should we better remove the dependency on spdy entirely ? \ud83d\ude43 It doesn't seemed to be promoted for http/2 explicitly nor is there a option to enable http2 manually, so we may get away with that for now :D cc @evilebottnawi . Released in v3.1.7 \ud83c\udf89 . https://webpack.js.org/configuration/entry-context/#context. Did you try with\nwebpack.config.js\njs\nconst config = {\n  devServer: {\n     useLocalIp: false\n  }\n}\n\nThe webpack-dev-middleware supports a custom path for HMR, but the webpack-dev-server equivalent doesn't seem to.\n\nYep, this it is not supported by webpack-dev-server atm, maybe better to usewebpack-dev-middleware + webpack-hot-middleware instead \nThe potentially provide any futher help I would need to see (the relevant parts) of your webpack.config.js and more info about your companies setup and requirements, feel free to reopen the issue if you can provide those :). Test failure seems to be unrelated to the changes made here :) . Test failure seems to be unrelated to the changes made here :) . I can only advise you to hold off on that effort for now, we are in the process to support only one solution in the future to avoid issue like this. The original author of webpack-serve is no longer actively working on it and having two 'official'  solutions wasn't a good idea anyways. The next major version of webpack-dev-server might be based upon parts of webpack-serve, but that's all I can say about it atm, since we just started detangeling the mess. . I can only advise you to hold off on that effort for now, we are in the process to support only one solution in the future to avoid issue like this. The original author of webpack-serve is no longer actively working on it and having two 'official'  solutions wasn't a good idea anyways. The next major version of webpack-dev-server might be based upon parts of webpack-serve, but that's all I can say about it atm, since we just started detangeling the mess. . Yes I will try to keep everyone updated, for now \n\nROADMAP\n\nMilestone. Yes I will try to keep everyone updated, for now \n\n\nROADMAP\n\nMilestone. I can add some more, but tried to use at least one for ever different pattern for now. 'Some more' won't likely make it more reliable if we're not testing all of them then \ud83d\ude2f . I can add some more, but tried to use at least one for ever different pattern for now. 'Some more' won't likely make it more reliable if we're not testing all of them then \ud83d\ude2f . AppVeyor failures are expected atm, since there is no setup yet (appveyor.yml) yet (#1468). AppVeyor failures are expected atm, since there is no setup yet (appveyor.yml) yet (#1468). > We have very low coverage \ud83d\ude1e\n\nTests are the next TODO on the refactor list :). > We have very low coverage \ud83d\ude1e\nTests are the next TODO on the refactor list :). Travis is failing because of outdated npm scripts used in travis.yml for this branch. Travis is failing because of outdated npm scripts used in travis.yml for this branch. AppVeyor failures are definitely valid \ud83d\ude1e . AppVeyor failures are definitely valid \ud83d\ude1e . AppVeyor failures are expected atm, since there is no setup yet (appveyor.yml) yet (#1468). The clearify the main issue in #1109 was simply the fact that internal-ip changed it's API from v1.0.0...2.0.0 making internal.v4 async and now v3.0.0 added a new sync method internal.v4.sync() instead ?. 1) check utility funcitons test createDomain 'localIp':\n Error: done() invoked with non-Error: generated domain http: doesn't match expected http://null:8080\n   at /home/travis/build/webpack/webpack-dev-server/node_modules/mocha/lib/runnable.js:380:21\n   at Server.server.listen (/home/travis/build/webpack/webpack-dev-server/test/Util.test.js:83:11)\n   at Server.returnValue.listeningApp.listen.err (/home/travis/build/webpack/webpack-dev-server/lib/Server.js:78:2095)\n   at Object.onceWrapper (events.js:273:13)\n   at Server.emit (events.js:182:13)\n   at emitListeningNT (net.js:1368:10)\n   at process._tickCallback (internal/process/next_tick.js:63:19)\nhttp://null:8080. @wtgtybhertgeghgtwtg On last rebase please (promised) :). Already landed as https://github.com/webpack/webpack-dev-server/commit/418493d040a5200a709344427cf923baea036f1e but I got 500 for this PR after clicking the merge button \ud83e\udd37\u200d\u2642\ufe0f yesterday. Sry I can't help you with the information provided, currently this sounds like a bug with your CSS ?. > But my page document's width just 336px while my window's width is 1663px.\nI honestly don't know whats happening there :D, but I still can't help really help you with that provided info. Do you add CSS via JS in your index.js file? If not then that's likely the browsers default stylesheet your are seeing and yes they are sadly different between browsers. . Yep :). Could you try with v3.1.6 (#1432) ?. This instance of chokidar is for watching the content base only. Do you bundle your pug files with webpack or do you intend to serve them as static files ? webpack itself will only watch the files which are imported. Ooops sry :) \nYes, please send a fix to grunt-webpack as the utils/* are not meant to be a public API of webpack-dev-server and could change at anytime \n```diff\n- const createDomain = require('webpack-dev-server/lib/util/createDomain');\n+ let createDomain\n\ntry {\ncreateDomain = require('webpack-dev-server/lib/utils/createDomain')\n} catch (err) {\ncreateDomain = require('webpack-dev-server/lib/util/createDomain')\n}\n``. We could expose it, but I would really prefer to avoid it if possible. Strictly speaking yes, but it shouldn't 'break' anything in this case imho . @greim Please sign the CLA. **TL:DR** Useweback-dev-server`, it's actively maintained\n\nIt isn't really decided yet, from a user point of view use webpack-dev-server for now, since it isn't possible to maintain webpack-serve atm. It's original author abandoned webpack-serve and some of it's dependencies are exclusively owned by him. I would co-maintain both packages until a ROADMAP is settled, but it would require an unjustifiable amount of additional work and resources to resolve the aforementioned dependency locks in webpack-serve. The rough plans currently are either to \n\nModernize webpack-dev-server similiar to webpack-serve (http2 (koa), websockets (ws)) (webpack-dev-server v4.0.0) \nOr if and only if the webpack-cli gets support for subcommands (e.g webpack serve --options) in the near future to eventually reused the package name (webpack-serve) for naming consistency and cherry-pick what's needed codewise. This may involve other (bigger) refactorings aswell then. To clarify 1. is more likely to happen as of today but definitely not final atm . Besides of removing the deprecation note I don't see any changes being made to this fork? If the original author intends to keep maintaining webpack-serve and it's dependencies, he can of course do that as he pleases, but from an organizational stand point it's not possible for other contribs to do the same since some dependencies of webpack-serve are exclusively owned by him and would need to be forked/republished which we decided against. e.g webpack-serve and co could be moved to his account by commiting a LICENSE change and requesting a transfer at any time. I wasn't involved in any conflict around this and neither do I have a preference or 'strong feelings'  about that matter. The main issue relies in the unnecessary confusion for users and the lack of feasible options for other contribs to solve it e.g we may have continued 'promoting'  webpack-serve as a successor of webpack-dev-server since the code is definitely more future proofen then the current code base of webpack-dev-server, but again this isn't possible. It's normally simply better to not modify the publicPath at all, could you post the URL's which currently 404 and give an exact example of how the output structure looks like ?. https://webpack.js.org/configuration/dev-server/#devserver-publicpath-\n\n\nMake sure publicPath always starts and ends with a forward slash.\nIt is recommended that devServer.publicPath is the same as output.publicPath.\n\nhttps://webpack.js.org/configuration/dev-server/#devserver-contentbase\n\nTell the server where to serve content from. This is only necessary if you want to serve static files. devServer.publicPath will be used to determine where the bundles should be served from, and takes precedence. So within your current config it's likely that \n\nwebpack.config.js\njs\noutput: {\n  publicPath: 'docs/dist/'\n},\ndevSever: {\n   contentBase: path.resolve(__dirname, 'docs')\n}\n\noutput.publicPath is malformed \nDoes mismatch with devServer.contentBase. kk, then please run a build ($ webpack, no devServer) and share the output structure you get. ```\nfilename: process.env.NODE_ENV === 'development' \n    ? './dist/js/[name].js' // <= wrong ${__dirname}/dist\n    : './docs/dist/js/[name].js',\n\ndevSever: {\n   contentBase: path.resolve(__dirname, 'docs')\n}\n```\nThe filename for development seems to be wrong, should be docs/dist/[name].js\n instead. I strongly recommend to not 'overcomplicate' this stuff e.g\n```js\nconst OUTPUT_DIR = path.resolve(__dirname, 'docs') // ${__dirname}/docs\nconst config = {\n  output: {\n     path: OUTPUT_DIR,\n     filname: 'js/[name].js' // ${__dirname}/docs/js\n  },\n  plugins: [\n     MiniCSSExtractPlugin({\n        filename: 'css/[name].css' // ${__dirname}/docs/css\n     })\n  ],\n  devServer: {\n    contentBase: OUTPUT_DIR // ${__dirname}/docs\n  }\n}\nmodule.exports = config\n```. > This filename: process.env.NODE_ENV === 'development' ? './dist/js/[name].js' : './docs/dist/js/[name].js', line might be a bit redundant or atleast it is possible to simplify but put it like this to test and see if that file path made a difference.\nYes :) that's likely the issue. Works?. > to avoid pulling a dependency for something as trivial as removing some files from a folder\nWhile e.g rimraf may contain slightly more code, it fits the use case (cross-platform rm), is tested and clearly separates itself from the rest of the code base (e.g delete-certs.js wouldn't have belonged into lib, since it's a build helper). Size doesn't really matter here since this module doesn't run in e.g the browser\n\nto allow for the certificates to be removed from the folder even when prepare is not called directly.\n\nYou could propose a clean script and refactored it out of prepare, if it has a concrete benefit/use case. But please open a separate PR for this. @ferdinando-ferreira Please sign the CLA. diff\n        devServer: {\n            contentBase: `./${outputPath}`,\n-           outputPath: path.resolve(ROOT_PATH, outputPath),\n            historyApiFallback: true,\n            hot: true,\n            host: '0.0.0.0',\n            inline: true,\n            port: PORT,\n            progress: true,\n            disableHostCheck: true,\n        },\nSee https://webpack.js.org/configuration/dev-server/ for all available devServer options. For the unhelpful err.message for invalid/additional properties the tracking issue is https://github.com/webpack-contrib/schema-utils/issues/35. https://github.com/webpack/webpack-dev-server/pull/1492 (Update your lockfile if you use one). You need to add those manually if you're not using the HTMLWebpackPlugin which is unfeasable long-term. We need to document usage of the HTMLWebpackPlugin  as an example and eventually add a warning aswell. Confirmed this doesn't work via the bare Node API atm, you could use\nwebpack.config.js\njs\nconst config = {\n  //...\n  devServer: {\n    open: true\n  }\n};\nin the meantime. It seems when you bundle your application a tool like e.g babel (babel-loader) adds a 'use strict'; pragma to the bundle file and depending on the browser (e.g without decent ES2015 (ES6) support) you're using this might leads to the current {Error} you're experiencing. Try to remove the pragma from the app.js file and check if this fixes your {Error}, then checkout how to disable that behavior. I'm closing this issue since it's likely unrelated to webpack-dev-server in particular, but feel free to reopen if more information is provided why this maybe related. https://github.com/webpack/webpack-dev-server/pull/1270\nUpdated to at least webpack-dev-server >= v2.11.0. Either webpack or babel (babel-loader) add  a 'use strict' pragma (I think it is babel). e.g\nfile.js\njs\nconst a = 42\nfile.transpiled.js\n```js\n'use strict'; // <= added by babel\nvar a = 42;\n```\nyet you exlude the node_modules folder and one of your dependencies might use ES6 Syntax which doesn't get transpiled atm eventually leading to e.g \nfile.js\n```js\nimport dep from 'pkg'\nconst a = 42\n```\nfile.transpiled.js\n```js\n'use strict'; // <= added by babel\n// import dep from 'pkg' (not transpiled)\nconst dep = true // <= {Error}\nvar a = 42;\n```. > localhost goes through loopback resolution, whereas 127.0.0.1 does not. lib/Server.js always allows IP based hostnames, so with localhost as the default, then using 127.0.0.1 in your browser will always work, however the inverse is not true.\nI'm closing this PR for the time being since there is no need to change the default here, until this actually fixes a bug . I tested this patch with your reproduction repo and it didn't work (for me) net::ERR_CONNECTION_REFUSED (CORS)\nChrome\nlog.js:26 [HMR] Update check failed: Error: Manifest request to http://localhost/dist/ffba8fa5460e8f94be00.hot-update.json timed out.\n    at XMLHttpRequest.request.onreadystatechange (http://localhost:9000/dist/main.js:45:16)\nFirefox\nXHR GET http://localhost/dist/dfe95e13bf2cbef54181.hot-update.json\n[HMR] Update check failed: hotDownloadManifest/</request.onreadystatechange@http://localhost:9000/dist/main.js:45:16. Released in v3.1.10 \ud83c\udf89. Released in v3.1.10 \ud83c\udf89. Released in v3.1.10 \ud83c\udf89. > I suggest just compare version >= 8 && version < 10, I believe it will not take any side effect because for version from 8 to 8.6, the tls.DEFAULT_ECDH_CURVE is actually not take effect due to node-side bug.\nYes, please\n\nCan we backport this patch to v2 branch?\n\nYes\n. > I suggest just compare version >= 8 && version < 10, I believe it will not take any side effect because for version from 8 to 8.6, the tls.DEFAULT_ECDH_CURVE is actually not take effect due to node-side bug.\nYes, please\n\nCan we backport this patch to v2 branch?\n\nYes\n. This seems to be currently failing on windows \ud83e\udd14 https://ci.appveyor.com/project/sokra/webpack-dev-server/builds/19636987/job/0xps5athsnkc5m22. This seems to be currently failing on windows \ud83e\udd14 https://ci.appveyor.com/project/sokra/webpack-dev-server/builds/19636987/job/0xps5athsnkc5m22. Released in v3.1.10 \ud83c\udf89. npm will pass all the arguments after the -- directly to your script (e.g webpack-dev-server)\npackage.json\njs\n{\n   ...,\n   scripts: {\n     script: \"webpack-dev-server\"\n     ...,\n   },\n   ...,\n}\nnpm run script -- --open\nis equal to\nwebpack-dev-server --open. Please blacklist and remove all the IDE specific files .idea/*. Indendation seems to be off here. process.nextTick() ? But not \ud83d\udcaf . Hmm I think it is bananas from my side tbh :), the intend was \n```js\nserver.close()\nprocess.nextTick(() => process.exit())\n```\nto ensure server.close() finishes before process.exit() is called by pushing it to the next EventLoop 'tick'.  But a callback to server.close() is definitely cleaner and more expressive/logical, so forget what I said \ud83d\ude1b . diff\n- bymiddleware\n+ middleware. The space is intenentional [ a, b ] here, prettier does hopefully leave it :). Yep, prettier will be included with webpack-defaults in webpack-dev-server >= v4.0.0, it should still leave whitespace in this case since it is more readable. Please use e.g del-cli or rimraf instead and remove this file . diff\n\"prepare: \"del-cli ssl/*.pem && ...\"\n- \"prepare:delete-certs: ...\". \"prepare\": \"rimraf ./ssl/*.pem && ...\"\nnpm should look up node_modules/.bin automatically or didn't this work for you (on windows)?. Can we add docs for npm/yarn link usage here instead?  You can keep \"webpack-dev-server\": \"file:../path/to/local/webapck-dev-server/fork\" if you like, but please incoporate it into the first example as an alternative value. diff\n- https://github.com/webpack/webpack-dev-middleware#watchoptions\n+ https://github.com/webpack/webpack-dev-middleware#writetodisk. We need to check for an existing config.output.publicPath e.g\n```js\nconst publicPath = options.publicPath || config.output.PublicPath\nconfig.output = Object.assign({}, config.output, { publicPath: createDomain(options) + publicPath });\n``. Is the version check required here or could this be defaulted to'auto'in general? E.g was this being 'reverted' fornode >= 10.0.0` for some reason? If so, why?\nsuggestion\nconst version = process.version.match(/^v(\\d+).(\\d+)/);. node v9.0.0 is EOL . Just saw https://github.com/webpack/webpack-dev-server/pull/1531#issuecomment-430943980 Hmm..... ```js\nconst version = parseFloat(process.version.slice(1))\nif (10 > version && version >= 8.6) {\n  ...\n}\n. Please remove all `examples` as we don't intend to maintain them in the future (#1469).suggestion\nconst qs = require('querystring');\n.suggestion\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : (qs.parse(urlParts.path).sockPath || urlParts.path)\n```. This needs to be documented by opening a PR in docs repo please. Currently to URL redirects to the dev server 'landing page', which might be confusing for some and ultimately isn't really helpful. ",
    "MitchTalmadge": "I agree with @deepu105, there is not a single webpack project I use that does not use webpack-dev-server. This makes the webpack v3 pretty much useless. ",
    "jdubois": "Can't wait to test the performance enhancements !\nThanks Microsoft :-). ",
    "Download": "Is this on NPM? I am trying to install it with \nsh\nnpm install --save-dev webpack-dev-server\nbut keep getting:\n\nwebpack-dev-server@2.5.0 requires a peer of webpack@^2.2.0 but none was installed.\n\nEDIT:\nLatest release on NPM is 2.5.0:\n\nsokra sokra published a week ago\n2.5.0 is the latest of 100 releases\n. @TheLarkInn Any chance you could npm publish the version for 3?\nAtm, when you npm install webpack webpack-dev-server you get incompatible versions.. Well complaining is not nice maybe. But he does have a point.\nAlso upgrading to webpack3 is not you must do the first day it comes out.\n\nMaybe. But look at it from the other perspective: Releasing Webpack 3 before plugins have had a chance to update is also not something that has to be done right away. Maybe the Webpack team should have taken more time for testing? At least maybe a major release should be a more coordinated effort where all major webpack components push a new version nearly simultaneously?\nI think that the Webpack team really dropped the ball on this release. Remember, as soon as you npm publish a major new version, from that moment on npm install webpack will start picking that new major version. For a project with the scope and reach of Webpack, that's a big deal. For two weeks it was impossible to do npm install webpack webpack-dev-server, which means anyone trying Webpack for the first time during that period will have had a difficult first experience.\nMaybe peer dependencies needs to be looked at more closely? Is it really necessary to limit the upper bound? Can we maybe use open ended ranges? Or should there be a different procedure for release? \nSome introspection is needed. Because what happened with v3 is not what the community expects from a package as big as Webpack. \nNo complaints. Especially not against any of the great people helping with Webpack. Thanks I use it almost every day! But just an observation that the way this went is not good.. Same here. Not using laravel-mix AFAIK. Same here. Not using laravel-mix AFAIK. ",
    "kuhnroyal": "Need this released asap. ",
    "Andarist": "You could have always just use a your own fork for a while with cherry-picked changes. Also upgrading to webpack3 is not you must do the first day it comes out. So really... please stop complaining about free stuff you get from the community.. Yeah. Thats also an option.. ",
    "jensen": "Wow, the entitlement.. ",
    "turnertime": "I had this same issue. I was referencing one package with a dependency on webpack 3 and as well as referening webpack version 2.6.1. The issue was resolved once the webpack reference to version 3.. ",
    "dacz": "any idea when it will be released? Thanks a lot!. ",
    "hlissnake": "I have this issue as well. with webpack-dev-pack@2.5 and webpack@3.0.0\nWebpack normal buddle works very well. Hope can fix it ASAP. ",
    "marc101101": "is there a fix? webpack-dev-pack always throws the error above. . Okay installing it with npm and not with yarn fixes the problem =>  \"webpack-dev-server\": \"^2.6.1\"\n. ",
    "SagiMedina": "+1. @procyon It worked, Thanks!. ",
    "harmon25": "Confirmed I am also having issues with new webpack.optimize.ModuleConcatenationPlugin() in my webpack.dev.config - removing the plugin solved the issue.\nWas not HMR that was the problem though, am not using the dev-server - --watch in general was not working. I am running on Windows 10 without inotify-tools which could be the issue. \nwebpack3 watch +  webpack.optimize.ModuleConcatenationPlugin() - on Windows does not appear to work as expected - code is not rebuilding on changes to the source... removing the ModuleConcatenationPlugin from dev config resolves the issue - will only use it on prod for now... ",
    "timothyallan": "Here as well on macOS 10.12.5, as soon as I remove ModuleConcatenationPlugin, my HMR works again.. ",
    "jdeniau": "Same bug here, same fix, removing ModuleConcatenationPlugin. ",
    "JonasGao": "\"Same bug here, same fix, removing ModuleConcatenationPlugin\" +1\nas @harmon25 said, i try use \"webpack --watch --config xxxxxxx\", also not working\nmacOS 10.12.5, node 8.1.2, npm 5.0.4, webpack 3\n\ni uploaded my project: https://github.com/JonasGao/test-webpack3\nyou can test it\n\nIn fact, in my test project, remove the configuration 'env', {modules: false} from .babelrc, can make hot compilation worked. ",
    "Heartnett": "+1. ",
    "mhaagens": "+1. ",
    "piehei": "I have the same problem. More details below. Hopefully this helps.\n\nHMR error message is always concerning hot-update.json timed out\n\n\nfrom Chrome dev tools it seems the request is never made but canceled on the fly (same can be confirmed from the dev server side: logging all requests shows no requests to the json)\n\n\n\n\ndebugger shows that it cancels with status 0 --> timed out\n\n\n\n\nthe actual hot-update.json file is present and accessible while HMR cancels the request and initiates a full reload\n\n\ndoes not occur on webpack 2.6.1\noccurs on both webpack 3.0.0 and 3.1.0\nno ModuleConcatenationPlugin \nno env: { modules: false } for babel\nwhole project is based on vue-cli webpack (https://github.com/vuejs-templates/webpack)\n\nHMR works correctly if I change to 2.6.1 \u2013 no need to touch any of the configuration files. All that changes is the webpack version.. ",
    "ergenekonyigit": "Fixed after commenting this line in build/dev-server.js file.\nhotMiddleware.publish({ action: 'reload' }). ",
    "HelloLove": "it is not worked for me too\nI use webpack@3.4.1,webpack-dev-server@2.6.1. ",
    "taciomedeiros": "What worked for me was put watchOptions in devServer config\n  watchOptions: {\n      aggregateTimeout: 300,\n      poll: 1000\n    },\n. ",
    "jantimon": "Copied from #webpack/5505\n@TheLarkInn The html-webpack-plugin has some code which should prevent that:\nhttps://github.com/jantimon/html-webpack-plugin/blob/672f34bc98ff4130dba94551866d0e57086a7915/index.js#L77-L90\nHowever the best way would be if webpack would allow me to create a child compiler which only recompiles if one of the child compilers source files changes.\nRight now I have to start the child compiler for the html generation in every webpack make phase and try the best to run as little code as possible with a lot of custom caching logic which really dependents on webpack internals:\nhttps://github.com/jantimon/html-webpack-plugin/blob/672f34bc98ff4130dba94551866d0e57086a7915/index.js#L45-L48\nI guess providing a better childCompiler could increase the performance of many many many webpack compilations out there.\nThe idea of HtmlWebpackHarddiskPlugin is to help complex setups which produce a template which is than used by express server plugins which work only with files from disk or sth similar use cases. It should be used only for that - (therefore it is not part of the html-webpack-plugin). This seems to be a feature request for html-webpack-plugin to support hmr for template files.\nThe only way the webpack-dev-server could help here would be to provide an easier interface for plugin developers.. ",
    "shepelevstas": "Hello! Im not using html-webpack-plugin, not using babel-loader and not using ModuleConcatenationPlugin, I only use vue-loader and ['style-loader','css-loader','sass-loader'] and start webpack-dev-server --open --hot npm script command, and it crashes with many errors. It works ok if I remove --hot. Is it too early to use wepback 3?\nupdate:\nuninstalling webpack 3 and installing webpack 2.6.1 didn't help.. ",
    "AnonymousArthur": "@ergenekonyigit Yes, this one solved my problem.. ",
    "ForsakenHarmony": "Including webpack-dev-server/client & webpack/hot/dev-server in the bundle entry fixed it for me. ",
    "pietrofxq": "Is hot reloading still broken? I updated from webpack 1 to 3 and can't get it to work yet.. ",
    "danielravina": "Setting inline: true in the config fixed the problem for me.\n\"webpack-dev-server\": \"^2.11.1\"\n\"webpack\": \"^3.10.0\". ",
    "realtebo": "Sorry, I've the same problem; how did your solved?. Sorry, I've the same problem; how did your solved?. ",
    "arackaf": "On a hunch, I rebooted - webpack-dev-server now starts fine, but in trying to hit my app, I'm now getting\n\n[HPM] Error occurred while trying to proxy request / from localhost:8080 to http://localhost:3000 (ECONNREFUSED) (https://nodejs.org/api/errors.html#errors_common_system_errors)\n\nNeedless to say, the only things that have changed are webpack and webpack-dev-server.  After the upgrade to webpack 3, wds stopped auto reloading.  I tried to fix by upgrading wds, but that led to the errors above. . Same - closing . ",
    "dielangsea": "i just change the inline server port to anther one, it run, make me confuse. . ",
    "SirPole": "Happened to me as well \ud83d\ude41 it would appear so, that wds got stuck and kept using the defined port and therefore it couldn't start again... I have noticed node task still running on my machine, so I killed it and wds started again. I Can't reliably reproduce it though. Not really sure if it's related or not, but this issue vanished for me after updating to webpack 3.1.0. ",
    "santialbo": "still happening to me with webpack 3.1.0. ",
    "selbekk": "A workaround to this issue is to add this to your config: \njavascript\n{\n  devServer: {\n    contentBase: path.resolve('static'),\n    publicPath: '/some/sub-path/',\n    proxy: {\n      '/some/sub-path/*': {\n        target: 'http://localhost:[port]/',\n        pathRewrite: { '^/some/sub-path': '' },\n    },\n  },\n}\n\nin other words, proxying any requests that are not already handles to /. This works for me because I'm writing a SPA with a router - it might not work for you.. @rmmjohann thanks for your reply. Yeah, using the setup escape hatch works fine  - but I like the proxy workaround better to be honest. Starting to muck around with the actual server seems a bit too much for a config file ^^. Hi!\n\nDoes it work if you just set historyApiFallback to true, and remove the proxy?. Hi!\nDoes it work if you just set historyApiFallback to true, and remove the proxy?. ",
    "rolandjohann": "IMO this configuration key is slightly confusing as the static files won't be affected by it.\nIt seems that it just prefixes output.filename - static file hosting will be unaffected.\nI need to serve static files from a subpath so I can prox non asset requests like html to my server backend to be able to deliver the main html with initial state and be able to do HMR at development.\nThe fix will be easily possible and I'm keen to implement that. We just have to define what config key to use. Using publicPath - which will be the right key (public directory...), IMHO - will break existing apps when developers are updating webpack-dev-server without tweaking their code. staticAssetPath can be used.\n@selbekk a possible workaround will be to hook into webpack-dev-server setup (app) { [...] } where you can access the underlying express.\nhttps://webpack.js.org/configuration/dev-server/#devserver-setup\n```javascript\nconst express = require('express')\nsetup(app) {\n  app.use('/assets', express.static(''))\n}\n```. ",
    "RifeWang": "@selbekk maybe I met the same problem, and I try to  proxy it but didn't work . look at #978 . It's the problem with the src path:\n<script src=\"index.bundle.js\"></script>\nI write to that and then it worked:\n<script src=\"/index.bundle.js\"></script>. It's the problem with the src path:\n<script src=\"index.bundle.js\"></script>\nI write to that and then it worked:\n<script src=\"/index.bundle.js\"></script>. ",
    "bneumann": "Oh man. I was getting really frustrated after 2 hours that I was too stupid to configure the server correctly. So I used the default '/' paths and everything worked. Was about to file a bug just to see you already have filed it. Thanks :) . Same for me. I was trying to work offline and got the same error as @idnesdotlink. When I open my hotspot everything works again. Seems that webpack-dev-server requires to be online to work.\nWorkaround: Go online, start webpack-dev-server, go offline. It builds and refreshes just fine. Restarting the server however results in the error again. ",
    "Vandivier": "I think the setup() method should be standard; but I wouldn't complain if you could expose the express object natively, so I don't have to npm install express\nyou could do\n```\n//const express = require('express') // not needed now\nsetup(app, _express) {\n  app.use('/assets', _express.static(''))\n}\n```. @shellscape what do you mean by supporting the last two major versions of major browsers? It seems to me IE 10 is within that definition.. @shellscape what do you mean by supporting the last two major versions of major browsers? It seems to me IE 10 is within that definition.. Not sure if this is the same issue. I can't do a whole repro but I can drop my devServer snippet:\ndevServer: {\n  contentBase: path.join(__dirname, 'dist'),\n  //compress: true,\n  port: 9000,\n  proxy: {\n    '*api': {\n      target: '', // always use bypass fxn to preserve path\n      secure: false,\n      bypass: function(req, res, proxyOptions) {\n        // for mac/win10 use localhost instead of ip\n        const sNewUrl = 'http://192.168.99.100:3000' + req.originalUrl;\n\n        console.log(sNewUrl);\n        return sNewUrl;\n      },\n    },\n  },\n},\n\nWhen I do this the url I expect is logged, but WDS UI request (localhost:9000) is returning 404 with no error message. Curling 'http://localhost:9000/public-api/auth/cognito' is received by WDS proxy but response is an HTML doc which says \"Error Cannot POST /public-api/auth/cognito\"\nIf I curl the expected sNewUrl then I get the correct expected response.\nIf I GET the expected sNewUrl then I properly receive a 404 with error message {\"code\":404}, which is the expected response from this Docker-hosted local Express server.. Not sure if this is the same issue. I can't do a whole repro but I can drop my devServer snippet:\ndevServer: {\n  contentBase: path.join(__dirname, 'dist'),\n  //compress: true,\n  port: 9000,\n  proxy: {\n    '*api': {\n      target: '', // always use bypass fxn to preserve path\n      secure: false,\n      bypass: function(req, res, proxyOptions) {\n        // for mac/win10 use localhost instead of ip\n        const sNewUrl = 'http://192.168.99.100:3000' + req.originalUrl;\n\n        console.log(sNewUrl);\n        return sNewUrl;\n      },\n    },\n  },\n},\n\nWhen I do this the url I expect is logged, but WDS UI request (localhost:9000) is returning 404 with no error message. Curling 'http://localhost:9000/public-api/auth/cognito' is received by WDS proxy but response is an HTML doc which says \"Error Cannot POST /public-api/auth/cognito\"\nIf I curl the expected sNewUrl then I get the correct expected response.\nIf I GET the expected sNewUrl then I properly receive a 404 with error message {\"code\":404}, which is the expected response from this Docker-hosted local Express server.. The reason WDS proxy lost the request body is because I wasn't using bodyParser and I guess that functionality isn't included. I was tipped off to the solution by these two articles:\n1 - https://github.com/chimurai/http-proxy-middleware/issues/40\n2 - https://stackoverflow.com/questions/39636615/webpack-not-accepting-post-requests\nHere's my now-working devServer snippet:\ndevServer: {\n  before: function(app) {\n    app.use(bodyParser.json());\n    app.use(\n      bodyParser.urlencoded({\n        extended: true,\n      })\n    );\n\n    //app.post(/.*api$/, async function(req, res, next) {\n    app.post('/public-api/auth/cognito', async function(req, res, next) {\n      const sNewUrl = 'http://192.168.99.100:3000' + req.url;\n      const oOptions = {\n        method: 'post',\n        url: sNewUrl,\n        data: req.body,\n      };\n      const oProxiedResponse = await axios.request(oOptions);\n\n      console.log(sNewUrl, req.body);\n      res.json(oProxiedResponse.data);\n    });\n  },\n  contentBase: path.join(__dirname, 'dist'),\n  //compress: true,\n  port: 9000,\n},. The reason WDS proxy lost the request body is because I wasn't using bodyParser and I guess that functionality isn't included. I was tipped off to the solution by these two articles:\n\n1 - https://github.com/chimurai/http-proxy-middleware/issues/40\n2 - https://stackoverflow.com/questions/39636615/webpack-not-accepting-post-requests\nHere's my now-working devServer snippet:\ndevServer: {\n  before: function(app) {\n    app.use(bodyParser.json());\n    app.use(\n      bodyParser.urlencoded({\n        extended: true,\n      })\n    );\n\n    //app.post(/.*api$/, async function(req, res, next) {\n    app.post('/public-api/auth/cognito', async function(req, res, next) {\n      const sNewUrl = 'http://192.168.99.100:3000' + req.url;\n      const oOptions = {\n        method: 'post',\n        url: sNewUrl,\n        data: req.body,\n      };\n      const oProxiedResponse = await axios.request(oOptions);\n\n      console.log(sNewUrl, req.body);\n      res.json(oProxiedResponse.data);\n    });\n  },\n  contentBase: path.join(__dirname, 'dist'),\n  //compress: true,\n  port: 9000,\n},.\n",
    "RhysyG": "Hey guys,\nI have tried multiple setups from the comments but can't get the server working to get a subpath (http://localhost:8080/project/), does anyone know what I might be doing wrong?\nIn a sentence, I'm trying to run the server out of a Jekyll build folder called _site with an extra path in the url http://localhost:8080/project/\ndevServer: {\n    contentBase: '_site/', //disk location\n    watchContentBase: true,\n    setup(app){\n       app.use('_site/', express.static('/project/'));\n    }\n},\nMore of an explanation here:\nhttps://stackoverflow.com/questions/47054824/webpack-middleware-with-jekyll-setup-for-context-path\n. ",
    "Plazmaz": "So I ran into this issue as well, and after hours wasted, I finally found a workaround. As long as you aren't using the --bonjour flag, edit node_modules/webpack-dev-server/bin/webpack-dev-server.js and change\nconst bonjour = require(\"bonjour\")();\nto\nconst bonjour = {};\nBasically, WSL has NO support for mdns, which Bonjour is built upon, and appears to enable when imported.. @StalkAlex absolutely! However, this is an issue with the Windows subsystem, not with bonjour. However, a better error and perhaps checking before enabling would be appropriate.. Is that the full stack trace?. Is that the full stack trace?. Have you tried building from source? There was a similar looking issue fixed in #958 . Have you tried building from source? There was a similar looking issue fixed in #958 . I don't know @ai, I tried PRing a version bump, but they refused to accept it from someone without collaborator access.. I don't know @ai, I tried PRing a version bump, but they refused to accept it from someone without collaborator access.. Ah okay, sorry.. Can confirm this is fixed on the latest branch or windows insider preview v16232(I think >16170 will work).. ",
    "StalkAlex": "Yeah, thanks for finding workaround! But it's not a solution unfortunately, it should be fixed in library globally imho. . Agreed! that's correct, bonjour should be initialized only when option is enabled.. ",
    "educcjr": "I ran into this too. \nIn the windows insider mdns support was already added, but I didn't test it yet: https://github.com/Microsoft/BashOnWindows/issues/2245#issuecomment-310546134.. ",
    "xthule": "This issue also exists on Linux, depending on the configuration. In my case I get the following stack trace:\nError: addMembership ENOBUFS\n    at exports._errnoException (util.js:1016:11)\n    at Socket.addMembership (dgram.js:579:11)\n    at Socket.<anonymous> (/usr/local/nvm/versions/node/v8.1.2/lib/node_modules/webpack-dev-server/node_modules/multicast-dns/index.js:53:16)\n    at emitNone (events.js:110:20)\n    at Socket.emit (events.js:207:7)\n    at startListening (dgram.js:144:10)\n    at _handle.lookup (dgram.js:249:7)\n    at _combinedTickCallback (internal/process/next_tick.js:105:11)\n    at process._tickCallback (internal/process/next_tick.js:161:9)\n    at Function.Module.runMain (module.js:607:11)\n    at startup (bootstrap_node.js:158:16)\n    at bootstrap_node.js:575:3\nThis is fixed by the pull request above.. ",
    "drazisil": "@shellscape Sorry for the multi comments on the PR, I forgot there was an initial issue. Thank you for merging and have a great day.. It looks like @joelface needs to rebase. I'm not sure if that's blocking anything, but it's an issue per GitHub's PR UI that would prevent an easy merge.. It looks like @joelface needs to rebase. I'm not sure if that's blocking anything, but it's an issue per GitHub's PR UI that would prevent an easy merge.. @SpaceK33z Can you or another maintainer take a look at this PR?\nIt's somewhat blocking for Windows programmers, as npm/yarn install undoes the workaround each time.\nThank you in advance, and please let us know if anything else is needed.. @SpaceK33z Can you or another maintainer take a look at this PR?\nIt's somewhat blocking for Windows programmers, as npm/yarn install undoes the workaround each time.\nThank you in advance, and please let us know if anything else is needed.. ",
    "simnalamburt": "I tested it in my local WSL and it worked perfectly.. I tested it in my local WSL and it worked perfectly.. Dear maintainers. If you're concerned about the coding style, let's do it like this\n```diff\n@@ -8,7 +8,7 @@ const net = require(\"net\");\n const portfinder = require(\"portfinder\");\n const addDevServerEntrypoints = require(\"../lib/util/addDevServerEntrypoints\");\n const createDomain = require(\"../lib/util/createDomain\");\n-const bonjour = require(\"bonjour\")();\n+const Bonjour = require(\"bonjour\");\n// Local version replaces global one\n try {\n@@ -455,6 +455,7 @@ function reportReadiness(uri, options) {\n }\nfunction broadcastZeroconf(options) {\n+       const bonjour = Bonjour();\n        bonjour.publish({\n                name: \"Webpack Dev Server\",\n                port: options.port,\n```\nReference\n\nhttps://github.com/simnalamburt/webpack-dev-server/commit/4bafab1824c18d41be57bdd65a758c45448fc5e3. Dear maintainers. If you're concerned about the coding style, let's do it like this\n\n```diff\n@@ -8,7 +8,7 @@ const net = require(\"net\");\n const portfinder = require(\"portfinder\");\n const addDevServerEntrypoints = require(\"../lib/util/addDevServerEntrypoints\");\n const createDomain = require(\"../lib/util/createDomain\");\n-const bonjour = require(\"bonjour\")();\n+const Bonjour = require(\"bonjour\");\n// Local version replaces global one\n try {\n@@ -455,6 +455,7 @@ function reportReadiness(uri, options) {\n }\nfunction broadcastZeroconf(options) {\n+       const bonjour = Bonjour();\n        bonjour.publish({\n                name: \"Webpack Dev Server\",\n                port: options.port,\n```\nReference\n\nhttps://github.com/simnalamburt/webpack-dev-server/commit/4bafab1824c18d41be57bdd65a758c45448fc5e3. \n",
    "rifflock": "Is this scheduled to be merged at any point? I'm currently using the workaround (which needs to be reimplemented after every npm install). Is this scheduled to be merged at any point? I'm currently using the workaround (which needs to be reimplemented after every npm install). ",
    "AndyBarron": "Anything blocking this?. Anything blocking this?. ",
    "joelface": "@drazisil Taken care of.\nI'm happy to make any changes necessary to get this merged in.. @drazisil Taken care of.\nI'm happy to make any changes necessary to get this merged in.. ",
    "mredbishop": "Is this about to be merged in?. Is this about to be merged in?. ",
    "przemyslaw-rzasa": "+1. ",
    "handonam": "Can confirm.  I had to downgrade to 2.4 to get it working again.. Can confirm.  I had to downgrade to 2.4 to get it working again.. ",
    "cardenasJC": "+1. ",
    "JavierLaguna": "+1. +1. ",
    "awmottaz": "Same for me. Using the --open CLI option still works as expected, however. I speculate that this is some order of operations issue, where the middleware is called before the paths are set.. ",
    "Em3k": "Had the same problem with it today. Thanks for solutions! . Had the same problem with it today. Thanks for solutions! . ",
    "MariuszDabrowski": "+1. +1. ",
    "aprather51": "+1. ",
    "ThadeuLuz": "As a quick fix, you can add openPage: '' to your options:\nJavaScript\n  devServer: {\n    host: 'localhost',\n    port: 3000,\n    contentBase: './dist',\n    hot: true,\n    open: true,\n    openPage: '', // <== Add this\n  },. As a quick fix, you can add openPage: '' to your options:\nJavaScript\n  devServer: {\n    host: 'localhost',\n    port: 3000,\n    contentBase: './dist',\n    hot: true,\n    open: true,\n    openPage: '', // <== Add this\n  },. ",
    "polettoweb": "+1. +1. ",
    "hg-pyun": "@ThadeuLuz \nThank you for advise!\nI expect to fix the bug on next version.. @ThadeuLuz \nThank you for advise!\nI expect to fix the bug on next version.. #1315 I have a same issue. It works when I matches 'public path'.. Matching 'publicPath' works fine.. @FLighter7 \nYou should use HMR Plugin.\nhttps://webpack.js.org/guides/hot-module-replacement/\nplugins: [\n+     new webpack.NamedModulesPlugin(),\n+     new webpack.HotModuleReplacementPlugin()\n    ],. You can use publicPath options. Check the publicPath document.. @Tzcodejs \nAre you using the javascript bundle file(production) on WDS(webpack-dev-server)? webpack-dev-server uploads a built javascript to the memory on the public path. It also serve file on the contentBase path files.\ncontentBase: path.resolve(__dirname, 'dist').\nIf the dist folder is not exist, WDS doesn't serve any file. So, It is successful, ran npm run build first. \nHere is my simple exmaple. https://github.com/hg-pyun/rapid-installer/commit/d0e6a85c0da9f6bfb397872636cbfc3f55901872. I wish you could refer. \nThank you.. May be..  it related to #883 ? . ",
    "zhengjunxiang": "@ThadeuLuz\nThank you for advise. ",
    "scarletgirl": "+1. +1. ",
    "awave1": "also I found that this issue doesn't occur when --open flag is used. also I found that this issue doesn't occur when --open flag is used. ",
    "BrahimS": "Hi everyone,\nFor those whose struggling with HMR, you can have a look at BrowserSync plugin for Webpack. Hi everyone,\nFor those whose struggling with HMR, you can have a look at BrowserSync plugin for Webpack. ",
    "marcelometal": "Could you please release a new version with webpack 3 compatibility?. ",
    "Mathspy": "This should be fixed now\nhttps://github.com/webpack/webpack-dev-server/pull/946#issuecomment-313593956. This should be fixed now\nhttps://github.com/webpack/webpack-dev-server/pull/946#issuecomment-313593956. This should be fixed now\nhttps://github.com/webpack/webpack-dev-server/pull/946#issuecomment-313593956. ",
    "PrimeTimeTran": "I'd really like to see this too, I think. lol =)\n. ",
    "naganowl": "This is still an issue and looks like there was interest in having it resolved. I don't have bandwidth to tackle this and understand if it's to be closed per guidelines.\nThat said, I do think it's an important piece of information that can benefit others in the future to know about.. ",
    "larsbs": "@shellscape but then the noInfo option is useless again. At least when I've searched for it in the code is used nowhere. For me it's ok, I can change the code to use quiet, but why keep an unused option around?. ",
    "lerte": "As a quick fix, you can add openPage: '' to your options:\nopenPage: '' // <== Add this\nhttps://github.com/webpack/webpack-dev-server/issues/960\n. ",
    "Wernerson": "I have a first version which just displays the text you can see in the client console in my forked repo.. I have a first version which just displays the text you can see in the client console in my forked repo.. I have tested the code in our real-life app. Worked as well.\nHere is the screenshot (the window appears in the middle of the screen):\n. I resolved the conflicts but couldn't test them so far (can't update webpack at my workplace...).. Found an error from the merge. The code is tested and working. Ready to merge from my side :). Just had an idea. Maybe add an option to display the webpack console output also in the browser console? We could do this the same way with the overlay option. Either true (just displaying the status window) or an object with window and console properties... What do you think?. Just had an idea. Maybe add an option to display the webpack console output also in the browser console? We could do this the same way with the overlay option. Either true (just displaying the status window) or an object with window and console properties... What do you think?. @shellscape yeah that makes sense... I'm gonna think of a possible solution as well and will rewrite the progress feature as a plugin as soon as it's possible. Maybe we can close the PR and sort of label it? And maybe make an issue so we could gather opinions or possible solutions from others? \ud83d\ude04 . @shellscape yeah that makes sense... I'm gonna think of a possible solution as well and will rewrite the progress feature as a plugin as soon as it's possible. Maybe we can close the PR and sort of label it? And maybe make an issue so we could gather opinions or possible solutions from others? \ud83d\ude04 . There were some merge issues. Will check them this weekend and make the branch ready to merge \ud83d\udc4d . Done and ready to merge \ud83d\udc4d . @shellscape Condition added and description edited. Codecov fails though.... @pelotom Whats your loglevel set to? Has to be on info at least.. @g0t4 Good idea, I'll take a look into it.. ",
    "avrelaun": "In fact there is 3 outputs possibles: shell, browser console, et overlay. The overlay is configurable, why not the others ?. ",
    "Micahnator": "@RifeWang, your answer above just helped me solve my react router nested routes issue that I've been fighting for a day or two now. Thank you so much!. @RifeWang, your answer above just helped me solve my react router nested routes issue that I've been fighting for a day or two now. Thank you so much!. ",
    "apeg1515": "im having this very same issue. . im having this very same issue. . sorry about the @shellscape . my issues was that I didn't give webpack a \"out.publicPath\".  I did include some of the recommended solutions up above but I haven't test it in particular to verify that it actually works. The 'out.publicPath\" fixed it for me.. sorry about the @shellscape . my issues was that I didn't give webpack a \"out.publicPath\".  I did include some of the recommended solutions up above but I haven't test it in particular to verify that it actually works. The 'out.publicPath\" fixed it for me.. ",
    "harrisgeo88": "I had the same problem! it seems that the line historyApiFallback: true inside devServer saved the day. I had the same problem! it seems that the line historyApiFallback: true inside devServer saved the day. ",
    "zavjs": "But what about if webpack generates the html and javascript in-memory, with HtmlWebpackPluginConfig? How to remove the relative path of the script, then?\n[EDIT]: adding the 'publicPath' key inside the 'output' object inside the export object inside the webpack.config.js file worked for me:\njs\n{\n...\n  output: {\n    ...\n    publicPath: '/'\n  }\n}. But what about if webpack generates the html and javascript in-memory, with HtmlWebpackPluginConfig? How to remove the relative path of the script, then?\n[EDIT]: adding the 'publicPath' key inside the 'output' object inside the export object inside the webpack.config.js file worked for me:\njs\n{\n...\n  output: {\n    ...\n    publicPath: '/'\n  }\n}. ",
    "gezichenshan": "For me \nhistoryApiFallback: true works.\nnot \npublicPath: '/'.\nI think it is because the refreshing in deeper route(e.g. /about) is requesting the index.html (i.e.  /about/index.html) but got none.\nEdit:\nHowever, I got Refused to execute script from 'http://localhost:8090/topics/bundle.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled. when I refresh in \"http://localhost:9000/topics/components\" if I don't set `publicPath: '/'.`.\nWith both, project is working properly.. For me \nhistoryApiFallback: true works.\nnot \npublicPath: '/'.\nI think it is because the refreshing in deeper route(e.g. /about) is requesting the index.html (i.e.  /about/index.html) but got none.\nEdit:\nHowever, I got Refused to execute script from 'http://localhost:8090/topics/bundle.js' because its MIME type ('text/html') is not executable, and strict MIME type checking is enabled. when I refresh in \"http://localhost:9000/topics/components\" if I don't set `publicPath: '/'.`.\nWith both, project is working properly.. ",
    "idnesdotlink": "@Plazmaz i updated my issues ... closing it with 2.6.1 update. ",
    "abou7mied": "Same for me node 6.11.0, webpack-dev-server 2.5.1 webpack 2.6.1\n```\nevents.js:160\n      throw er; // Unhandled 'error' event\n      ^\nError: addMembership ENODEV\n    at exports._errnoException (util.js:1018:11)\n    at Socket.addMembership (dgram.js:506:11)\n    at Socket. (node_modules/multicast-dns/index.js:53:16)\n    at emitNone (events.js:91:20)\n    at Socket.emit (events.js:185:7)\n    at startListening (dgram.js:121:10)\n    at _handle.lookup (dgram.js:226:7)\n    at _combinedTickCallback (internal/process/next_tick.js:83:11)\n    at process._tickCallback (internal/process/next_tick.js:104:9)\n    at Module.runMain (module.js:606:11)\n    at run (bootstrap_node.js:389:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:504:3\nnpm ERR! Linux 4.8.0-58-generic\n...\n```. ",
    "ai": "@Plazmaz I tested webpack\u2019s master and #958 fixes this problem.\nWhat blocks releasing #958?. @Plazmaz I tested webpack\u2019s master and #958 fixes this problem.\nWhat blocks releasing #958?. @Plazmaz oops, I thought you were from core team :D.\n@TheLarkInn What blocks releasing #958? Because of this issue, it is hard to write code in the most productive time \u2014 during airplane flight :D.. ",
    "roonyh": "npm upgrade webpack-dev-server fixed the issue for me.  \nIts fixed in 2.6.1. ",
    "Telokis": "@shellscape Done.. ",
    "Panoplos": "You can fix this issue by removing 'webpack-hot-middleware/client' from your webpack config.. ",
    "idangoldman": "Thank you @Panoplos and have a great day! :). ",
    "AmareshB": "@Panoplos I tried removing it and hot-reloading doesn't work for me.. ",
    "wuliupo": "thanks @Panoplos. there are two ways for webpack-dev-server hot update:\n1. webpack-dev-server, hot=true, inline=true\n2. express server: webpack-dev-middleware + webpack-hot-middleware, __webpack_hmr\njs\n  const compiler = webpack(webpackConfig);\n  webpackConfig.entry.app = ['webpack-hot-middleware/client', webpackConfig.entry.app];\n  const devMiddleware = require('webpack-dev-middleware')(compiler, {});\n  const app = express();\n  app.use(devMiddleware);\n  //.... ",
    "Verten": "@wuliupo Thanks for the information. ",
    "aakhan89": "\n'webpack-hot-midd\n\nI did the same, but not working. ",
    "Alberto2686": "Confirmed with\nwebpack v3.2.0\nwebpack-dev-server v2.5.1\nThe following works:\nwebpack v3.2.0\nwebpack-dev-server v2.5.0. ",
    "TheKnarf": "I'm replicating this error with the following two lines of code:\nconst yargs = require(\"yargs\");\nrequire(\"webpack/bin/config-yargs\")(yargs);\nname |\u00a0version\n --- | ---\nMacOS | 10.12.5\nNode | v8.1.3\nNpm | 5.0.3\npackage.json\n\"dependencies\": {\n    \"shelljs\": \"^0.7.8\",\n    \"yargs\": \"^8.0.2\"\n  },\n  \"devDependencies\": {\n    \"webpack\": \"^3.2.0\"\n  }\npackage.lock: https://pastebin.com/twDM8rDX\nTrying to write my own command line tool using webpack-dev-server's code for inspiration when I hit upon the same error.\nAnyone have any idea how to fix it?\n. This seems to be the line causing the problem: \nalias(\"help\", \"h\", \"?\")\nhttps://github.com/webpack/webpack/blob/master/bin/config-yargs.js#L12. ",
    "cnkdynamics": "Updated node to 8.5.0.  This error \"YError: Too many arguments provided. Expected max 2 but received 3.\" came out. Revert back to 8.4.0 Everything went fine.\n. ",
    "jbenner": "I'm getting the same error after upgrading to Node 8.5.0. Reverting to Node 8.4.0 does not fix it for me. The error seems to be related to the hot reload functionality; when the error is present, webpack-dev-server serves the files and watch/rebuilds correctly, but the hot reload URL that gets polled is a 404.\nEDIT: Upgrading to Webpack 3.5.6 fixed this for me. ",
    "huangyanxiong01": "the same error\n\u279c  webpack-dev-server --version\nwebpack-dev-server 2.8.1\nwebpack 3.5.6\nnode 8.5. ",
    "DenysVuika": "@huangyanxiong01 you might need to delete the \"node_modules\" and \"package-lock.json\" and trying again. Works fine for me with your versions.. ",
    "evenstensberg": "Downgrade yargs to 6.0.4 . Maybe this could align well with the CLI efforts to merge into webpack? . I'll take a look at it tomorrow, may be no conflicts at all . Sure, I think the only issue here would be that you'd ( in the future ) access an empty repo, and you'd need to change the imports to the cli instead of regular webpack, if you understand . Yep. What you could try, is removing webpack and only go for the cli dep. It should work! . Opening this in a new PR, too many rebase conflicts with empty commits that make the final rebase fail. Done @shellscape . @shellscape Ran WDS from a spawned process for the serve feature, I'll get a repro test for you tomorrow, and test it against 3.0.0 \ud83d\udc4c. Version 3 ( next branch ) ran without errors. I guess this is because the cli and wds depends on different versions of webpack, closing this for now. @shellscape could you ping me a bit before the next branch goes into master, so we can get the new cli version out and some warnings during installation away?. Do you need func params here?. Looks like a regular config, got no opinion here. @evilebottnawi has worked with this more to have a better argument. ",
    "bkazi": "I think this is caused since the loglevel package being used in client/index.js but is listed under devDependencies in the package.json instead of dependencies and hence is not installed\nI resolved it by simply running\nbash\nnpm i loglevel\nEdit: (just realised this was mentioned in the issue, my bad). ",
    "sayanriju": "I was having similar error Module not found: Error: Can't resolve 'loglevel' with webpack-dev-server and also solved it by npm -D loglevel. ",
    "karthikkrishna611": "Now with the recent version of webpack-dev-server you must also install loglevel\nIf you have already globally installed webpack-dev-server. Use command npm install -g loglevel\nif you have already locally installed webpack-dev-server. Use command npm install --save-dev loglevel\n. ",
    "markelog": "But why? Is this a bug or...?. ",
    "zalishchuk": "@markelog I personally 99% sure it's a bug and loglevel should be moved from devDependencies to dependencies. Pull request with solution is already submitted by @athomann (#1001). @DavidNorena, I don't see any critical innovations in webpack-dev-server@2.6.0 improving developer experience, so if you don't need any of these updates, you can fallback to previous version until the bug is fixed or as you said it above, you can manually install loglevel mentioned in @sayanriju comment or if you are using yarn - yarn add -D loglevel. @rojobuffalo loglevel package is currently in dependencies section, are you sure you are using 2.6.1 version?. ",
    "DavidNorena": "Meanwhile we need to manually install loglevel ok ?. @zalishchuk  Thank you so much man !. ",
    "rojobuffalo": "What fallback version doesn't have this bug? I have WDS v2.4.2 in devDependencies and am seeing this.. Are you sure that it's fixed? I'm still getting the same error with v2.6.1. Goes away when I install loglevel. Tried rm -rf node_modules && npm i. Is loglevel supposed to be a peerDependency or is this just a bug?. @zalishchuk I cleaned everything out and re-installed a second and then a third time. After the third try it's all working. Weird, but seems like you can disregard my comment.. ",
    "stephonlawrence": "Thanks for the responses. And I will try that version. Sorry I didn't see these responses until today.. ",
    "vunb": "npm install -D loglevel resolved for me. Thanks!. ",
    "mike-north": "In general, there should be some effort to move away from creating new self-signed root CAs on developer machines. Each one of these is a liability because user-signed trust roots can be used to circumvent some important browser defenses (like public key pinning).\nTo be clear, the certificate currently generated by webpack-dev-server is a ROOT certificate whose name happens to be \"localhost\". It can be used to sign other non-localhost certificates that users' machines will trust.\nIt would be great if we could all rally around davewasmer/devcert and figure out a solution that involves a single user-signed cert authority (which a user could keep on a thumb drive or something), and then non-root certificates for things like webpack-dev-server. This way, we have one project to watch carefully, and many others that are creating less-dangerous (non-root, very short expiration time) single-purpose certs.. Could we have some explanation as to which browsers look to each of these altName fields in order to function w/o warnings?. Another popular domain to use (especially when developing an app that makes use of subdomains) is http://lvh.me. Maybe we can add support for a wildcard domain *.lvh.me here?. While we're making changes to this, consider adding IPv6 loopback IPs\n::1  Most browsers are ok with this being a DNS entry type, but some versions of chrome want it as an IP\nfe80::1. We also need localhost.localdomain for completeness. Reason I ask: I'm not sure which browser specifically wants a URI entry type here (and is not satisfied by the DNS localhost entry above). ",
    "karataev": "Docs. ",
    "yanceyou": "sorry for bad description. \nwhat i need is webpack-dev-middleware.. ",
    "fnll": "have same issue for mac\n```\n/usr/local/lib/node_modules/webpack-dev-server/node_modules/bonjour/lib/mdns-server.js:54\n      ? flatten.depth(Object.keys(self.registry).map(self._recordsFor.bind(self, name)), 1)\n                ^\nTypeError: flatten.depth is not a function\n    at /usr/local/lib/node_modules/webpack-dev-server/node_modules/bonjour/lib/mdns-server.js:54:17\n    at Array.forEach (native)\n    at Server._respondToQuery (/usr/local/lib/node_modules/webpack-dev-server/node_modules/bonjour/lib/mdns-server.js:48:19)\n    at emitTwo (events.js:106:13)\n    at EventEmitter.emit (events.js:194:7)\n    at Socket. (/usr/local/lib/node_modules/webpack-dev-server/node_modules/multicast-dns/index.js:45:40)\n    at emitTwo (events.js:106:13)\n    at Socket.emit (events.js:194:7)\n    at UDP.onMessage [as onmessage] (dgram.js:544:8)\n```\nnode 7.1.0\nnpm 5.2.0\nwebpack-dev-server 2.5.1\nwebpack 2.6.1. ",
    "r4fx": "check 2.6.0 release, it's fixed for me https://github.com/webpack/webpack-dev-server/pull/958. ",
    "hedrick": "Having this issue when using the bonjour npm package on an express app - kind of odd since webpack isn't included in the node_modules, package.json or the package-lock.json.\nI know the npm bonjour package is included in webpack-dev-server but I'm not using this module.. ",
    "antewelec": "This does the trick!. ",
    "evandrogrm": "https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a. ",
    "pmw57": "I had this problem because I had only \"src\" listed for my modules.\nI fixed this problem by adding \"node_modules\" to it.\nmodule.exports = {\n    resolve: {\n        modules: [\"src\", \"node_modules\"],\n        ...\n    }\n};. ",
    "peripateticus": "The solution to this seems to be related to this stack overflow question/answer: https://stackoverflow.com/questions/43747636/live-reloading-in-webpack-dev-server-when-using-node-js-api\nand\nhttps://github.com/webpack/webpack-dev-server/blob/master/examples/node-api-simple/webpack.config.js\nSo, the entry that I used to get this working was:\nentry: {\n    app: [\n      'webpack-dev-server/client?http://localhost:8080',\n      path.resolve(__dirname, '../entry.js'),\n    ],\n  },. ",
    "apai4": "I think this is fixed on master but the changes haven't been published to npm yet, see https://github.com/webpack/webpack-dev-server/issues/955 for a workaround until the maintainers release the next version. ",
    "VitorLuizC": "A workaround to solve it is installing loglevel.\nshell\nnpm i -D loglevel. ",
    "hstarorg": "This dependencie should be in package.json dependencies, but in 2.6.0, it's in devDependencies.\nWe can downgrade version or use npm i -D loglevel to install the dependencie.. ",
    "madlordory": "+1 \nunbelievable mistake. ",
    "sugarshin": "+1. ",
    "vincent-cm": "Closed upgrade to 2.6.1. ",
    "rubencodes": "This happens to me in 2.7.1 (though it worked in 2.6.1)\nRunning:\nnode@7.2.1\nnpm@5.3.0\nwebpack@3.5.5. This happens to me in 2.7.1 (though it worked in 2.6.1)\nRunning:\nnode@7.2.1\nnpm@5.3.0\nwebpack@3.5.5. This worked, thanks!. ",
    "zskovacs": "It happened to me as well when i upgraded from 2.6.1 to 2.7.1.\nYou should try to delete the node_modules folder and run npm install again. It solved the problem for me.. It happened to me as well when i upgraded from 2.6.1 to 2.7.1.\nYou should try to delete the node_modules folder and run npm install again. It solved the problem for me.. ",
    "paviad": "It worked for me as well, but I'm curious why does deleting node_modules sometimes help? Where's the bug hiding?. ",
    "TaylorPzreal": "Same v2.8.2,\ndelete node_modules \nand npm i. ",
    "aykutyararbas": "Added  \"sockjs-client\": \"^1.1.4\", \nIt has the dist folder and js.. @charliebrink Wonderful!. ",
    "goofballLogic": "I had to chmod 777 the file in question :(. ",
    "Omlet": "Closing as this seems to be an issue with extract-text-webpack-plugin - not webpack-dev-server. ",
    "webyonet": "sory this problem is only in the webpack v3.3.0. @AleshaOleg I have not solved the problem. WebPack has already opened issue for the same problem. @AleshaOleg ok. thanks for helping. @AleshaOleg @coockoo  the problem was solved in enhanced-resolve 3.3.0. ",
    "Alex-Sokolov": "@webyonet how you solve it?. @AleshaOleg  No, crashed also. Builded ok, but when hot reload start will crash. Fixed in https://github.com/webpack/enhanced-resolve/releases/tag/v3.4.1. ",
    "AleshaOleg": "Why this issue closed? I have similar error, with v3.3.0. @Alex-Sokolov you mentioned before, that it works with 2.5.1 for you. Is it true? If yes, could you show me your webpack config?. @Alex-Sokolov, same. Do you know, on which versions it will run now? I tried webpack@2.7.0 now, it also crashed. Here is solution: https://github.com/webpack/enhanced-resolve/issues/97. @webyonet you need downgrade enhanced-resolve to 3.3.0, not webpack or webpack-dev-server.. @Alex-Sokolov @the-architect thanks. Updated to 2.8.1 today - I have ReferenceError: Can't find variable: SockJS for Safari browser. Chrome works ok.\nUPD. Back to 2.8.0 - also didn't work for me.\nNow I'm under 2.7.1. Everything fine.. ",
    "coockoo": "Yea, this issue has been closed too soon. Experiencing the same result here.. Maybe someone knows how to downgrade enhanced-resolve to 3.3.0 with yarn (Assuming there is no dependency of enhanced-resolve in project, only webpack). ",
    "the-architect": "Can confirm, upgrade to 3.4.1 works.. ",
    "hectopod": "Working after fresh install. ",
    "jjrchrds": "What do you mean by fresh install? I keep getting these errors.\nthank you. ",
    "jchip": "\nThat file is only available in webpack 3.\nDoes that mean I will have to upgrade to webpack 3 when using wds@2.6.0 or greater ?\n\nIf that's the case then it's a breaking change for WDS, which may have been better to get a major release.\n. @shellscape thanks for looking into this.  Turns out we have a custom resolver plugin that's causing require.context to fail.. @AdamDrobotij My problem was different.  I had a custom resolver plugin that simply broke require.context.  After I fixed that, I get the same thing as you.  I think that's just how webpack does it.  Since WDS is dev only, it shouldn't be an issue.. ",
    "adam-drobotij": "@jchip How did you resolve this? I'm getting this odd output from webpack:\n[./node_modules/webpack/hot ^\\.\\/log$] (webpack)/hot nonrecursive ^\\.\\/log$ 170 bytes {0} [built][./node_modules/webpack/hot ^\\.\\/log$] (webpack)/hot nonrecursive ^\\.\\/log$ 170 bytes {0} [built]\nand the webpack/hot modules are not getting bundled. I believe my issue is related to this line:\nhttps://github.com/webpack/webpack-dev-server/blob/da188a6359b372d7885bde1fe204b5b835ff3466/client/index.js#L79 \nUsing webpack@3.5.2 and webpack-dev-server@2.7.1 Thanks!. ",
    "pasupuletics": "This issues got resolved by adding addContextDependency at loader.. ",
    "skipjack": "@donggw2030521 yeah works fine for me as well although I am seeing some issues when using v2.7.0 of this package. You may want to provide more details...\nWill create a separate issue for the issues I'm seeing with 2.7.0.. @shellscape @kellyrmilligan -- and anyone else I missed -- thank you for jumping on this so quickly! \n\ud83c\udf89  \ud83c\udf89  \ud83c\udf89 . ",
    "robmoorman": "Same issue over here 2.7.0 seems to be broken. ",
    "contra": "Same issue, 2.7.0 was a big breaking change. If this was intended it should have been a 3.0 release, not a minor.. @shellscape If it wasn't intentional that's fine, you should roll it back (push the last working version as 2.7.1, then deprecate 2.7.0) so when people update their deps they aren't having issues. No need to be rude, I'm not \"me too\"ing but actually suggesting a temporary fix so people's code doesn't break between now and when the bug is fixed.. ",
    "rgo": "Using 2.8.2  with Safari 10.0.2 I have ReferenceError: Can't find variable: SockJS\nBut it works with Safari 11.0\n. @shellscape ops, sorry. Thanks for the pointer \ud83d\udc4d . ",
    "nealoke": "@shellscape I'm facing multiple errors which occur on different browsers at run time only (builds fine). Is this the same issue?\nSafari 10.1\n\nSafari 11\n\n. @shellscape didn't notice the remark about version 3. Any idea on when this will be released? Or do you recommend using webpack-dev-server@next?. ",
    "valoricDe": "To summarize it for myself: There are two usecases, right?\n1. You start Webdevserver at localhost:xxxx and have set your publicpath to yyyy.\n    Desired behavior: serve at locahost:xxxx/sockjs-node/\n2. You use a proxy server which redirects path www.zzzz.com/yyyy to localhost:xxxx/\n    Desired behavior: serve at www.zzzz.com/yyyy/sockjs-node so in fact localhost:xxxx/sockjs-node/\nDid I summarize correctly and which scenario is currently possible to achieve (with or without options)?. ",
    "r7l": "Coming from another Issue (#1165) that was closed due to this one ...\nThis issue here is quite long and i could not figure if there has any progress been made. I am running an Nginx Reverse Proxy setup and SocketUrl failed me for port reasons. Since i couldn't find any option to deal with this issue, i've simply hacked the value in webpack code itself (which is bad bad and dirty). Can you please add an option for people like me, so the webpack-dev-server can run with port X while SocketUrl runs its requests with a different port?\nMy current SocketUrl code:\nconst socketUrl = url.format({\n  protocol,\n  auth: urlParts.auth,\n  hostname,\n  port: 443,\n  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\n});\nThanks allot for all your effort with this.. ",
    "cheapsteak": "I opened a PR that should solve the same problem as https://github.com/webpack/webpack-dev-server/pull/911 while also not result in the same bugs that were reported here. ",
    "tylercloke": "Looks like the above PR never merged? I'm still seeing this issue. Is there any progress here? Any workarounds that don't involve manually patching webpack?. ",
    "ehsanul": "The new PR is here: https://github.com/webpack/webpack-dev-server/pull/1553. ",
    "DamienLB": "Isn't 2.7.1 the latest release for webpack-dev-server? If I am installing ^2.5.0 doesn't that include the latest minor release - which would be 2.7?\nIn any case, I just ran an install with \"webpack-dev-server\": \"^2.7.0\" and I received the same message that ip@^1.1.5 does not exist. (Which is odd b/c 1.1.5 appears to exist as the latest ip package release on npm - https://www.npmjs.com/package/ip)\n37364 error Darwin 15.6.0\n37365 error argv \"/usr/local/bin/node\" \"/.npm-packages/bin/npm\" \"install\"\n37366 error node v4.5.0\n37367 error npm  v4.0.5\n37368 error code ETARGET\n37369 error notarget No compatible version found: ip@^1.1.5\n37369 error notarget Valid install targets:\n37369 error notarget 1.1.4, 1.1.3, 1.1.2, 1.1.1, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 0.3.3, 0.3.2, 0.3.1, 0.3.0, 0.2.0, 0.1.0, 0.0.5, 0.0.4, 0.0.3, 0.0.2, 0.0.1\n37370 error notarget This is most likely not a problem with npm itself.\n37370 error notarget In most cases you or one of your dependencies are requesting\n37370 error notarget a package version that doesn't exist.\n37370 error notarget\n37370 error notarget It was specified as a dependency of 'webpack-dev-server'. Thanks shellscape. I thought we had just a little while longer before we needed to do a major update to node/ npm, but we'll do it now to get it over with... ",
    "tamouse": "@renchap i'll try it, i didn't see that in the releases. @renchap It is working as expected in v2.7.1, no config changes, thank you. ",
    "dylansmith": "2.7.0 appears to have been unpublished from npm.. ",
    "MJ111": "@illepic nice! closing the issue.. ",
    "jclangst": "Smacking my head because this was addressed by you all yesterday with the rollout of 2.7.1. Thanks for your hard work.. ",
    "willin": "mark. ",
    "noscripter": "I've run into the same issue here:\n\nCurrent solution is to stop webpack-dev-server and re-run~\nBTW, what's the schedule to replace sock.js?. Sorry, my fault, please check again. I also remove bundle.js from layout.. ",
    "FourSeventy": "I am having the same issue. ",
    "IsmaelEzequiel": "I solved this problem installing webpack-dev-server manually. XD. ",
    "sheldonoreilly": "Worked for me as well. ",
    "mrsharpoblunto": "@shellscape Signed the CLA. This change wasn't in the original pull request. I included live.bundle.js and index.bundle.js in my branch so that I could npm install from my repository. The added files and the change to .gitignore can be reverted (the changes in f170088)\n. I've reverted the added files and .gitignore changes now\n. ",
    "sapegin": "Done: https://github.com/webpack/webpack.js.org/pull/1523\nClosing this issue.. ",
    "ingelity": "@shellscape  Ok, I can put it in issue templates if you prefer that form, but this still seems like a bug.\nI asked the question on stackoverflow a few days ago but no one answered so far.\nhttps://stackoverflow.com/questions/45634664/webpack-dev-server-breaks-on-changing-folder-structure-or-renaming-files-and-req. ",
    "raycashmore": "Same here with 2.14.1. Probably related to https://github.com/git-for-windows/git/issues/1248. ",
    "lzl124631x": "I'm still facing this issue with webpack-dev-server version 2.9.7 using Git Bash for Windows (which caused another issue and wasted my time). But it works fine with CMD. \nRecently nodemon fixed a similar issue by using fork instead of spawn. I'm not sure if this issue can be  solved using the same method.. ",
    "mtraynham": "@shellscape The info is much appreciated.  I was wondering what you suspect be the best plan here?\nOpen a  bug against express to figure out what a workaround would be?  The bug you referenced seems to suspect an incorrect usage of response.end, whereas weback-dev-middleware seems to always call response.send, which is like response.json.  dougwilson seems to believe response.json can handle large objects.\nOr rather, avoid using express and switch to koa-webpack?  Does koa suffer from the same issue?  \nOr avoid *-webpack-middleware altogether for external usage and only use it for localhost development?\nEdit So I tried a pretty simple test circumventing webpack-dev-server and just using Express standalone to ship the large file using response.send.  It did fail (as the dev-server fails), so this is likely not a problem with webpack-dev-server.  \nAlternatively, I did try using a createReadStream(file).pipe(response) and that does work.  The content-length header would be unspecified, but it does ship the file in full.\nSo then I tried changing webpack-dev-middleware to:\njs\n                // server content\n                // var content = context.fs.readFileSync(filename);\n                // content = shared.handleRangeHeaders(content, req, res);\n                res.setHeader(\"Content-Type\", mime.lookup(filename) + \"; charset=UTF-8\");\n                // res.setHeader(\"Content-Length\", content.length);\n                if(context.options.headers) {\n                    for(var name in context.options.headers) {\n                        res.setHeader(name, context.options.headers[name]);\n                    }\n                }\n                // Express automatically sets the statusCode to 200, but not all servers do (Koa).\n                res.statusCode = res.statusCode || 200;\n                context.fs.createReadStream(filename).pipe(res)\n                // if(res.send) res.send(content);\n                // else res.end(content);\n                resolve();\nAnd that seems to work properly.  For some reason, if you (un-comment) and append the Content-Length header,\njs\nres.setHeader(\"Content-Length\", content.length);\neven with streaming, it reintroduces the 206 - Partial Content bug.. Welp, I think I'm going to close this, as the bug is not within Express/WebpackDevServer.  This is a NodeJS bug since Node 8.0.0, per https://github.com/expressjs/express/issues/3392.. Kind of looked like it was calling this api.jquery.com/load function instead, I imagine because my bundle includes jQuery 3.2.1.\nWhat I meant by live-bundle iframe, I have a script tag that requests for webpack-dev-server.js on some port, triggers the sockjs connection and then loads that live.bundle.js file which I guess manages the toolbar on the page.. Much appreciated, thank you!. @SpaceK33z yw.  Do you guys plan on a version bump soon?  This is the last little thing I have before migrating to Webpackv4.. ",
    "stavlocker": "@shellscape My apologies. I updated the original issue. This isn't really a question, but (potentially) a bug. Am I wrong?. @shellscape I updated the issue to match the template. This is not a question but a bug that as you can see ^^ others are suffering from. Can you open the issue? . ",
    "rdsedmundo": "I'm having the same problem.\nIt happens after some re-compilations; I don't know exactly how many, but it's something like after 20~30.\n@shellscape . \nThat's the code (compiled) where the error happens. After some re-compilations, it doesn't receive the process.env property properly anymore. It's definitely a bug and not a configuration problem, as it works perfectly previously, and start bugging randomly then.. ",
    "skbolton": "This is just a guess but I think your problem @stavlocker might be in how you are using webpack.DefinePlugin I don't have any of your code to go off off it but I have ran into this problem a lot. If you look at the documentation for webpack define plugin. You will see this\n\nI have had the situation where my node_env gets set to a variable (I didn't add the quotes) and that variable isn't defined so it chokes.\nSo something like this wont work\njs\nnew webpack.DefinePlugin({\n  'process.env': {\n    NODE_ENV: JSON.stringify(process.env.NODE_ENV) ||'development' // breaks\n    BASE_URL: \"http://localhost:3000\"  // breaks\n  }\n })\nYou have to do this\njs\nnew webpack.DefinePlugin({\n   'process.env': {\n     NODE_ENV: JSON.stringify(process.env.NODE_ENV || 'development')\n     BASE_URL: \"'http://localhost:3000'\"\n   }\n})\nHope that helps. ",
    "jonhue": "@shellscape I did debug my local installation. But this issue occurs with the lastest Rails release as well as all my other apps. All files exist as they should. I spent an entire day debugging already before opening this issue.. ",
    "soundasleep": "This issue can also occur if you are running Yarn pre-1.0 on Windows. Make sure that yarn -v returns 1.0 or greater. See: https://github.com/yarnpkg/yarn/issues/3773\n(If you installed Yarn on Windows through the MSI you'll need to reinstall Yarn from the download site.). ",
    "johan-lejdung": "PR here: https://github.com/webpack/webpack-dev-server/pull/1050. PR here: https://github.com/webpack/webpack-dev-server/pull/1050. Ah damn, of course it's an array.. Don't know what I was thinking :)  If I could, I would approve this change!\nThe build seems to fail, but not related to this file. There seem to be a linting error in Server.js:\n/home/travis/build/webpack/webpack-dev-server/lib/Server.js\n  142:17  error  Strings must use singlequote  quotes\n\u2716 1 problem (1 error, 0 warnings)\n  1 error, 0 warnings potentially fixable with the `--fix` option.. Quickly looked through the changelog for node 8 and there were a lot of Array changes, maybe they allow such access now. . Absolutely! . ",
    "ewanjones": "I tried this method according to the documentation and got error:\nWebpackDevServer.addDevServerEntrypoints(config, options)\n                 ^\nTypeError: WebpackDevServer.addDevServerEntrypoints is not a function\n    at Object.<anonymous> (/opt/webpack/server.dev.js:28:18)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:383:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:496:3\nIs the documentation still relevant?. ",
    "sudkumar": "@bdwain:  That saved me.  Thank you. \ud83d\udc4d . ",
    "indirectlylit": "I don't claim to understand why, but for me the addDevServerEntrypoints call was not enough.\nI also had to modify config.entry as described here, in particular:\njavascript\nconfig.entry.app.unshift(\n  `webpack-dev-server/client?http://localhost:${port}/`,\n  `webpack/hot/dev-server`\n);\n. Did a little more digging, and from what I can tell Server.addDevServerEntrypoints still exists.\nLooking at the source, addDevServerEntrypoints is a helper function for modifying the app entry point, very similar to our unshift code above.\nOne thing that addDevServerEntrypoints does differently is that require.resolve is returning a full system path to the client instead of using the string webpack-dev-server/client. At least in our case, that seems to break HMR.\nIt also might be related to the way that the domain is generated: seems to use the host (0.0.0.0) instead of the public address (localhost).\n. ",
    "stephenmudra": "I've been running into the same issue as well.\nIt seems the issues has something to do with a change in webpack rather than the dev server, as I can reproduce the issue by just upgrading to webpack v3, no other dependencies.\nIt also only occurs when https is enabled, works fine in http mode.. ",
    "pladaria": "We tried to upgrade our deps again to the latest versions. This time without problems! HMR, DLL, https, docker, nginx proxy, several third party and custom plugins... everything works perfectly.\nCurrent versions:\n- webpack: 3.5.6\n- webpack-dev-server: 2.7.1\n. My issue is fixed, not sure if @stephenmudra or @coltonw can confirm. @davidjoy, simply adding spdy: {protocols: ['http/1.1']} to https options in dev-server config workarounded this issue for us. ",
    "doughamlin": "I just realized this doesn't fully address the request in #998 because there is no listening event. It is easy enough to extend Server from EventEmitter and emit the listening event when the server starts listening, but I question the need for that when the server object is accessible inside the server.listen callback.. I just realized this doesn't fully address the request in #998 because there is no listening event. It is easy enough to extend Server from EventEmitter and emit the listening event when the server starts listening, but I question the need for that when the server object is accessible inside the server.listen callback.. @shellscape Yeah, I don't know why I thought portfinder was already being used in lib/Server.js and thus all that was needed was exposing the port.. I know the reason for this is webpack.config.js needs to be updated with the port number, but this is seemingly impossible given the port is unknown, so I think this is rightly considered a bug (anyway it is keeping me from doing what I want to do).. @shellscape Works great. Thanks!. ",
    "olsonpm": "@shellscape \n\nInstead, we'll be implementing a pass-through API option that will allow people to pass any options to sub-components that they'd like without having to modify the options schema\n\nIs this already being worked on?  I don't see relevant code in v3, another branch nor a PR.  I will start the work if nobody's started.  I got here due to needing access to the mimeTypes option.\nedit:\n@xiaoyann this PR worked great as a temporary workaround.  I really appreciate your work. ",
    "g0t4": "I'd like to use this feature but on fast builds it is super chatty, and so I disabled it and will probably forget about it when the build starts slowing down :)\nHow about throttle the console messages if they come in rapidly? \n\nThat way if the build is slow you get a good indication of progress. \nAnd if the build is somewhat slow you get fewer messages. \nAnd if the build is super fast you maybe see one or two of these or maybe none. \n\nOr maybe a simple way to hook into this as a user and apply my own filtering?. ",
    "chrisalexander55": "@shellscape \nI moved excessive stater/boilerplate  comments from HTML docs and all works as expected. This appears to be an issue with html-webpack-plugin rather than webpack-dev-server or some sort of synergized defect. Closing this issue. Thanks for looking into this.. ",
    "slavede": "Done, sorry about that.. ",
    "bdurrer": "@shellscape \nI did sign the CLA, but I used the wrong email. Adding the other email to the GitHub account did not help, nor can I change the js-cla data anymore after submitting \ud83d\ude12 . Resetting and commiting the same thing again worked.. ",
    "ymqy": "\nthis is my directory. ",
    "fumblehool": "@shellscape I would like to work on this. Is anyone currently working on this?. @shellscape I've followed the steps to reproduce this issue but It is working fine on my machine.. ",
    "geeofree": "@shellscape  Hello! Sorry for replying just now, I've actually forgotten about this issue and have actually moved on from this after a week or so of publishing this issue. Uhm, I don't really have that much info to give and don't know what info to give even to help with the issue, so I think I'd be okay with it being closed. Thanks for trying to help though @fumblehool!. ",
    "katzz0": "I've checked the project by narrowing down the search and find out that the source of the problem is extract-text-plugin@3.0.0. I checked the resulting JS code after first build and rebuild and for the first build I had module which exports inherits function but after rebuild I had require insctructions for that module as it exports inherits but it exports an svg image.\nI've created an appropriate issue for that plugin and closed this issue.. ",
    "kud": "Yes. Sorry. :). I understand the point but\u2026 where I've got any setup thing in my config? O_o. ```javascript\n// webpack.config.js\nimport path from 'path'\nimport webpack from 'webpack'\nimport HtmlWebpackPlugin from 'html-webpack-plugin'\nimport babelConfig from './babel.config.js'\nimport envVars from './env.json'\nconst SRC_DIR = path.resolve(__dirname, 'src')\nconst DIST_DIR = path.resolve(__dirname, 'dist')\nexport default (env) => {\n  return {\n    // the source\n    entry: [\n      'react-hot-loader/patch',\n      ${SRC_DIR}/index.js,\n    ],\n// the destination\noutput: {\n  path: DIST_DIR,\n  filename: 'index.js',\n  publicPath: '/'\n},\n\nresolve: {\n  alias: {\n    '~': `${SRC_DIR}`, // thanks to that, we can use import xxx from '~/file'\n  }\n},\n\n// active devtools\n// devtool: 'eval',\ndevtool: 'cheap-module-inline-source-map',\n// devtool: 'cheap-module-source-map',\n\n// plugins\nplugins: [\n  new HtmlWebpackPlugin({\n    template: 'src/index.html',\n    favicon: 'src/favicon.ico',\n    segmentToken: JSON.stringify(envVars[env.flag].SEGMENT_TOKEN),\n  }),\n\n  new webpack.DefinePlugin({\n    API_URL: JSON.stringify(envVars[env.api].API_URL),\n    JOURNAL_URL: JSON.stringify(envVars[env.flag].JOURNAL_URL),\n    FLAG: JSON.stringify(env.flag),\n    'process.env': {\n      'NODE_ENV': JSON.stringify('development')\n    }\n  }),\n],\n\n// what will be used for each type of code\nmodule: {\n  rules: [\n    // javascript\n    {\n      test: /\\.jsx?$/,\n      exclude: /node_modules/,\n      loader: 'babel-loader',\n      options: babelConfig,\n    },\n\n    // files\n    {\n      test: /\\.(png|woff|woff2|eot|ttf|svg)$/,\n      use: {\n        loader: 'url-loader',\n        options: {\n          limit: 100000\n        }\n      }\n    },\n\n    // styles\n    {\n      test: /\\.css$/,\n      exclude: /\\.module\\.css$/,\n      use: [\n        {\n          loader: 'style-loader',\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: false,\n            importLoaders: 1,\n            import: true,\n            alias: {\n              '~': `${SRC_DIR}`\n            }\n          }\n        },\n        {\n          loader: 'postcss-loader'\n        }\n      ]\n    },\n\n    {\n      test: /\\.module\\.css$/,\n      use: [\n        {\n          loader: 'style-loader',\n        },\n        {\n          loader: 'css-loader',\n          options: {\n            modules: true,\n            importLoaders: 1,\n            localIdentName: '[path][name]--[local]-___[hash:base64:5]',\n            import: true,\n            alias: {\n              '~': `${SRC_DIR}`\n            }\n          }\n        },\n        {\n          loader: 'postcss-loader'\n        }\n      ]\n    },\n\n    // images\n    {\n      test: /.*\\.(gif|png|jpe?g|svg)$/i,\n      use: [\n        {\n          loader: 'file-loader'\n        }\n      ]\n    }\n  ]\n}\n\n}\n}\n```. ",
    "hallids": "Related: https://stackoverflow.com/questions/46270587/webpack-dev-server-runs-twice/46334672. ",
    "tombarton": "I'm experiencing the same issue on OS X.\nVersions:\nNode 7.9.0\nWebpack 3.6.0\nWebpack-dev-server: 2.8.2\nOS X 10.12.6\nI've put together a really simple repo, that can be found at the link below:\nhttps://github.com/tombarton/webpack-port-issues\nI can supply logs if necessary.\nAs soon as I downgrade to 2.7.1, it works perfectly.. I'm an idiot, sorry about that. Will put together a repo that actually works.. I'm an idiot, sorry about that. Will put together a repo that actually works.. Apologies, I'm very new to webpack and webpack-dev-server but I think I might have a super simple repo that replicates this issue:\nhttps://github.com/tombarton/webpack-uglify-issue\nnpm install\nnode_modules/.bin/webpack-dev-server\n\nOnce again, I'm sorry if I waste anyone's time on a config issue.\n. Apologies, I'm very new to webpack and webpack-dev-server but I think I might have a super simple repo that replicates this issue:\nhttps://github.com/tombarton/webpack-uglify-issue\nnpm install\nnode_modules/.bin/webpack-dev-server\n\nOnce again, I'm sorry if I waste anyone's time on a config issue.\n. ",
    "httpete": "still fails on the latest 2.9.0. EADDRINUSE.\nwebpack output is served from /\nContent not from webpack is served from c:\\Users\\peters1\\bench\\um_kb\\dist\n404s will fallback to /index.html\nError: listen EADDRINUSE 127.0.0.1:9000\n    at Object._errnoException (util.js:1026:11)\n    at _exceptionWithHostPort (util.js:1049:20)\n    at Server.setupListenHandle [as _listen2] (net.js:1343:14)\n    at listenInCluster (net.js:1391:12)\n    at GetAddrInfoReqWrap.doListen (net.js:1500:7)\n    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:100:10)\nnpm ERR! code ELIFECYCLE. ",
    "Jotakuun": "I'm having this same issue since I upgraded webpack-dev-server from v.2.6.1 to the latest v.2.9.1. \nI figured out I also had webpack-dev-server installed globally, but even uninstalling it I still can't get it working...\nAnyway, @httpete solution of running wds script manually from node_modules works in my case but I'm going to downgrade a few versions until we get to a real solution in next version.\nOS: Windows 10, Version 1703, Build 15063.608\nNode 8.6.0 \nWebpack 3.6.0\nWebpack-dev-server: 2.9.1\n. ",
    "aloker": "Thanks for the quick response.\nI'm sorry about the template, I'll stick to it in the future.. Now it chokes on the shorthand property syntax at https://github.com/webpack/webpack-dev-server/blob/c45fb8bfb210c56cffae8b251bbb1bae318c697b/client/index.js#L69\nIE does not support \nself.postMessage({\n      type: 'webpack' + type,\n      data\n    }, '*'); \nYou'll have to use ES5 syntax:\nself.postMessage({\n      type: 'webpack' + type,\n      data: data\n    }, '*');\nBasically, there's not much ES6 syntax you can use if you want to support IE.... I'll try to fix the errors here and provide a diff.. Below is the patch for the client, that wasn't too hard.\nBut there's another issue: the referenced package strip-ansi uses ES6-syntax itself since version 4.0.0:\nhttps://github.com/chalk/strip-ansi/blob/c299056a42b31d7a479d6a89b41318b2a2462cc7/index.js#L4\nThe previously referenced version, v3.0.0, did not:\nhttps://github.com/chalk/strip-ansi/blob/afd80021ef59354b66c742c161c58682c0b4c450/index.js#L4\nThis is getting a bit hairy...\nAnyway, with this patch and the version of strip-ansi rolled back to v3, I got it working in IE again.\n``` diff\n--- index.js    Thu Sep 14 16:05:41 2017\n+++ index.js    Thu Sep 14 17:10:22 2017\n@@ -66,23 +66,23 @@\n   ) {\n     self.postMessage({\n       type: 'webpack' + type,\n-      data\n+      data: data\n     }, '*');\n   }\n }\nconst onSocketMsg = {\n-  hot() {\n+  hot: function() {\n     hot = true;\n     log.info('[WDS] Hot Module Replacement enabled.');\n   },\n-  invalid() {\n+  invalid: function() {\n     log.info('[WDS] App updated. Recompiling...');\n     // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.\n     if (useWarningOverlay || useErrorOverlay) overlay.clear();\n     sendMsg('Invalid');\n   },\n-  hash(hash) {\n+  hash: function(hash) {\n     currentHash = hash;\n   },\n   'still-ok': function stillOk() {\n@@ -112,7 +112,7 @@\n         log.error('[WDS] Unknown clientLogLevel \\'' + level + '\\'');\n     }\n   },\n-  overlay(value) {\n+  overlay: function(value) {\n     if (typeof document !== 'undefined') {\n       if (typeof (value) === 'boolean') {\n         useWarningOverlay = false;\n@@ -123,7 +123,7 @@\n       }\n     }\n   },\n-  progress(progress) {\n+  progress: function(progress) {\n     if (typeof document !== 'undefined') {\n       useProgress = progress;\n     }\n@@ -131,7 +131,7 @@\n   'progress-update': function progressUpdate(data) {\n     if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');\n   },\n-  ok() {\n+  ok: function() {\n     sendMsg('Ok');\n     if (useWarningOverlay || useErrorOverlay) overlay.clear();\n     if (initial) return initial = false; // eslint-disable-line no-return-assign\n@@ -141,9 +141,9 @@\n     log.info('[WDS] Content base changed. Reloading...');\n     self.location.reload();\n   },\n-  warnings(warnings) {\n+  warnings: function(warnings) {\n     log.warn('[WDS] Warnings while compiling.');\n-    const strippedWarnings = warnings.map(warning => stripAnsi(warning));\n+    const strippedWarnings = warnings.map(function(warning) { return stripAnsi(warning); });\n     sendMsg('Warnings', strippedWarnings);\n     for (let i = 0; i < strippedWarnings.length; i++) { log.warn(strippedWarnings[i]); }\n     if (useWarningOverlay) overlay.showMessage(warnings);\n@@ -151,17 +151,17 @@\n     if (initial) return initial = false; // eslint-disable-line no-return-assign\n     reloadApp();\n   },\n-  errors(errors) {\n+  errors: function(errors) {\n     log.error('[WDS] Errors while compiling. Reload prevented.');\n-    const strippedErrors = errors.map(error => stripAnsi(error));\n+    const strippedErrors = errors.map(function(error) { return stripAnsi(error); });\n     sendMsg('Errors', strippedErrors);\n     for (let i = 0; i < strippedErrors.length; i++) { log.error(strippedErrors[i]); }\n     if (useErrorOverlay) overlay.showMessage(errors);\n   },\n-  error(error) {\n+  error: function(error) {\n     log.error(error);\n   },\n-  close() {\n+  close: function() {\n     log.error('[WDS] Disconnected!');\n     sendMsg('Close');\n   }\n@@ -191,9 +191,9 @@\n }\nconst socketUrl = url.format({\n-  protocol,\n+  protocol: protocol,\n   auth: urlParts.auth,\n-  hostname,\n+  hostname: hostname,\n   port: urlParts.port,\n   pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path\n });\n@@ -201,7 +201,7 @@\n socket(socketUrl, onSocketMsg);\nlet isUnloading = false;\n-self.addEventListener('beforeunload', () => {\n+self.addEventListener('beforeunload', function() {\n   isUnloading = true;\n });\n--- overlay.js  Thu Sep 14 16:05:41 2017\n+++ overlay.js  Thu Sep 14 17:10:33 2017\n@@ -83,7 +83,7 @@\n   }\n// Create iframe and, when it is ready, a div inside it.\n-  overlayIframe = createOverlayIframe(() => {\n+  overlayIframe = createOverlayIframe(function() {\n     overlayDiv = addOverlayDivTo(overlayIframe);\n     // Now we can talk!\n     lastOnOverlayDivReady(overlayDiv);\n@@ -96,7 +96,7 @@\n }\nfunction showMessageOverlay(message) {\n-  ensureOverlayDivExists((div) => {\n+  ensureOverlayDivExists(function(div) {\n     // Make it look similar to our terminal.\n     div.innerHTML = 'Failed to compile.' +\n--- socket.js   Thu Sep 14 16:05:41 2017\n+++ socket.js   Thu Sep 14 16:56:55 2017\n@@ -26,7 +26,7 @@\n       const retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;\n       retries += 1;\n\nsetTimeout(() => {\nsetTimeout(function() {\n         socket(url, handlers);\n       }, retryInMs);\n     }\n```. Looks good to me, I don't get any errors in IE \ud83d\udc4d . \n",
    "shablenko": "issue is still here, i have arrow functions in resulting bundle, so ie 11 is still broken. As mentioned in https://github.com/webpack/webpack-dev-server/issues/1278\nBuild works with dev-server 2.9.7. ",
    "patrickmatte": "It's broken in IE11 for me too because of the arrow functions. ",
    "insanesvk": "2.11.1 fixed this for me.. 2.11.1 fixed this for me.. ",
    "gin93r": "@shellscape Whoops. Sorry about that. I'll ask around SO and Gitter first, but all of my research thusfar has been fruitless.. ",
    "PatrickMcGrath29": "Also getting this behavior. ",
    "deedubbu": "Do you know a timeframe for the next patch release?\nThe code I posted was just a minimal scenario and not my actual app. The package.json uses a >= range for the node engine version. As indicated in the issue, I'm currently using v7.10.0 locally but am using the LTS of v6.11.3 in production for the real app. For this issue the version of node is irrelevant. . I see 2.8.2 was released. Fixes the issue. Thanks! \ud83d\udc4d . ",
    "cheerun": "It occurs on the not only 2.8.x, but also ~ 2.2.0. (or maybe lower version too.)\nI changed code to below (with helping by @shai, my colleague at work), It works well.\n```javascript\n// webpack-dev-server/client/socket.js\nvar SockJS = require('sockjs-client');\nvar retries = 0;\nvar sock = null;\nfunction socket(url, handlers) {\n  sock = new SockJS(url);\n  ...\n```\nI don't know why scope is recognized weirdly, but it works!. ",
    "xiaody": "It seems that Safari has trouble in understanding const scopes in eval. I use babel-plugin-transform-es2015-block-scoping to workaround this issue.. @karneaud You need to include webpack-dev-server's js files in the babel-loader.\nThe config looks like:\n{\n  test: /\\.js$/,\n  loader: 'babel-loader',\n  include: [\n    path.resolve(__dirname, './src'),\n    // webpack-dev-server#1090 for Safari\n    /node_modules\\/webpack-dev-server/\n  ]\n}. ",
    "auchEnia": "Seems like the issue has been fixed in Safari 11.0. Can anyone else confirm that?. ",
    "bitwikinger": "I was facing the same issue, then I updated iOS (and Safari) to version 11.0.whatever and it\u00b4s working fine.\nBtw. I am using webpack 2.4.x and webpack-dev-server 2.4.x.. ",
    "gmarinov": "this means being unable to hit dev URLs on iOS10. not optimal?. ",
    "lakinmohapatra": "I want this to be fixed on Safari 10 .\nHow to fix this ? . Please fix this in recent version for safari 10. Its urgent. . Okay got it . . ",
    "hlawuleka": "For me I edited web-pack-dev-server/client/socket.js as follows:\n ```\n'use strict';\nfunction socket(url, handlers) {\nlet retries = 0;\n  let sock = null;\n  var SockJS = require('sockjs-client/dist/sockjs');\n  sock = new SockJS(url);\nsock.onopen = function onopen() {\n    retries = 0;\n  };```. ",
    "abcd-ca": "@cheerun 's solution helped me figure out what I hope is a nicer solution https://github.com/webpack/webpack-dev-server/issues/1090#issuecomment-329739449\nI wanted to add something that wasn't immediately clear for others. The file to edit is located at \n/node_modules/webpack-dev-server/client/socket.js\nWhat I changed was one line, from this\nfunction socket(url, handlers) {\nto this\nconst socket = function(url, handlers) {\n@shellscape I will create a PR for this. . @shellscape how's that?\n. not clear why Travis CI is failing\n. @shellscape I added that missing part of the template. Next time I'll leave the template there and modify\n. @shellscape I can't see what it is that needs fixing exactly. I don't see anything I can click on to give me an explanation in the Travis CI error view. will re-issue pr to fix travis issue. @shellscape thanks for reminding me to pull the repo and run tests before issuing PR. Pushed a fix. Once PR is merged, do you know how I update my project to get the fix? Never been clear on that as it seems you would maybe have to issue a new release and somehow master may not be current with npm but I'm not too sure how that all works.. ",
    "Jay-PC": "After working through this and a related issue, and not wanting to rely on Safari 11 upgrades, I found a different work-around... in the project folder, i forced the local CLI up to the latest version...\nnpm install --save-dev @angular/cli@latest\nmy app ran fine in Safari 10.x after that. Granted, some of my npm dependencies will now probably need to be updated, but fortunately all of them appeared to work even with some warnings upon ng serve.. ",
    "teod": "It breaks IE11 as well.. ",
    "nightlyop": "If you are using Git for Windows, that might be the problem: https://github.com/git-for-windows/git/issues/1219 (There is workaround described in that link).. ",
    "ThomasG77": "I encountered the same issue with one of my side project https://github.com/ThomasG77/mapboxgl-webpack and solved it locally doing the same way as @about-code (downgrading to 2.7.1)\ngit clone https://github.com/ThomasG77/mapboxgl-webpack.git && cd mapboxgl-webpack && git checkout webpack-dev-server-2.8\nnpm install\nnpm run build # Build directly with webpack with no problem\nnpm start # Fails with attached stack trace below\n\nI'm not in hurry for a fix as I'm able to avoid the issue temporarily (and the release is too fresh :)) . I just posted to confirm I also ran into the same issue & to provide another code repo sample to reproduce.. I've tried @Turncoat hotfix and it works with latest webpack-dev-server version e.g 2.8.2.. ",
    "Filip0": "I have the same bug in my project and I believe the bug may be related to #1058. Been googling alot around this error and it appears to be related to uglify being unable to process ES6. The mentioned PR transforms client/index.js from ES5 to ES6\nI haven't done a deep dive in the webpack code so not sure where the uglify process is being run. @shellscape do you have any idea?. ",
    "kucukkanat": "Is there a stable version anybody knows to prevent this ? I have had the same issue for 2 weeks now and about to be fired from my job \ud83d\ude04 . ",
    "duhaime": "I rolled back to 2.7.1 and all was well:\nnpm uninstall webpack-dev-server\nnpm install -D webpack-dev-server@2.7.1. ",
    "pastelsky": "This does seem like unpleasant limitation which makes it tough to test sites in browsers as recent as  even Safari 9. \nGiven that it's not a breaking change with the core lib itself, but because of ES6 syntax, does it not make more sense to transpile this / write it in ES5?\nWould you be willing to accept a PR for the same?. ",
    "e01010100": "Can a \"Breaking Changes\" section be added to the v2.8.0 release notes, noting that browsers that do not natively support ES6 will no longer be supported?\nThis would help alleviate confusion for users upgrading, especially those that test/unit-test on older browsers. \nThank you!. ",
    "HopeLyn": "Agree.I was just involved in some project , which had some webpack config that I am not very familiar with.I was so puzzled until I found this page.. Agree.I was just involved in some project , which had some webpack config that I am not very familiar with.I was so puzzled until I found this page.. ",
    "EloB": "This issue took me more than 2-3 days to figure out after I saw that small notice on README. This is like a side project/repo to webpack and this info is not easy to find. I'm working with multiple \"smart\" devices/platforms that often have really bad debugging possibilities and webpack is the best thing that ever happend to these devices because of hot loading in development etc. Is their a reason why you don't define jsnext:main and main in package.json? It's really easy to add and will remove a lot of headache and is the only blocker right now for webpack-dev-server to run on older browsers/devices. What is the value of this?. @ViggoV It's normal to set babel-loader to exclude node_modules/. Even in their documenation they do it to speed up building time. https://webpack.js.org/loaders/babel-loader/#usage and https://webpack.js.org/loaders/babel-loader/#babel-loader-is-slow-. So your bundle ends up with const and let that crashes older browsers/devices.\nTo money patch this right now you have to use include instead of exclude and pick your own source folder and include some of the files from webpack-dev-server.. @joshhead I think they are added ES5 to the bundle right now... Saw some PRs about it \ud83d\ude03 \nhttps://github.com/webpack/webpack-dev-server/pull/1273\nhttps://github.com/webpack/webpack-dev-server/pull/1270. @joshhead I think they are added ES5 to the bundle right now... Saw some PRs about it \ud83d\ude03 \nhttps://github.com/webpack/webpack-dev-server/pull/1273\nhttps://github.com/webpack/webpack-dev-server/pull/1270. I really hope that you merge this request. It's not just old desktop browsers (that are very easy to upgrade) but other smart devices that has web apps installed on them. That you cannot upgrade. For instance smart tvs/consoles etc. I ran into this issue some days ago and it took me many days before I found out that it was let/const inside the bundle. That was the bug because the lack of debugging tools inside these devices.. I saw another PR about this: https://github.com/webpack/webpack-dev-server/pull/1338\nOne problem with that is that the websocket emit hashes that is node targets. That will crash hot reloading on web.. I saw another PR about this: https://github.com/webpack/webpack-dev-server/pull/1338\nOne problem with that is that the websocket emit hashes that is node targets. That will crash hot reloading on web.. @evilebottnawi Did you read the description? \ud83d\ude04\n\nNeed help writing the tests.. @evilebottnawi Did you read the description? \ud83d\ude04\nNeed help writing the tests.. @evilebottnawi No worry \ud83d\ude04\ud83d\udc4d Lets hope someone has time!. @evilebottnawi No worry \ud83d\ude04\ud83d\udc4d Lets hope someone has time!. If I have some time over this weekend I will try to fix this. I really want that hot reloading on server side :). If I have some time over this weekend I will try to fix this. I really want that hot reloading on server side :). I managed to write a isomorphic webpack config without any changes or plugins with hot reload on both backend and frontend. When I have time I might be able to publish it.. I managed to write a isomorphic webpack config without any changes or plugins with hot reload on both backend and frontend. When I have time I might be able to publish it.. My initial use case is that be able to serialize key events on my browser to send to each device and then unserialize the key event on each device to simulate the key event on the device. This feature will only be in development to speed up testing. Webpack and Webpack dev server has been a great tool for me when working cross platform and multiple devices.\n\nAlso has some other ideas to be able to send logs/errors to webpack dev server because some devices has really shitty development tools. So I can output that data in my laptop console.\nI think there could be multiple new features with this.. > Also will bee great if you create minimum reproducible test repo with this feature (PoC), it is allow to think about how better solve this\nI will add an working example. Just throw this PR together. So I can get feedback :)\nWill continue tomorrow! :). @evilebottnawi I've updated the PR now with an example but haven't written any tests. If you think this feature belongs in webpack-dev-server I will add them :)\nOne usecase\n\nAnother usecase\n\nFlowchart\nTo describe my usecase better I develop cross platform for multiple devices. I use the webpack-dev-server while developing because of the live reloading etc. For production I build with webpack.\nI'm developing one app but I need adapters for each platform for different things. Each build only contains code for that specific platform. The big headache is testing on multiple devices because I need multiple remotes/keyboards etc. My solution is synchronized keystrokes that is sent out from my laptop to each device to emulate those events on each platform. I've already have that working but it's been a hassle and this PR will simplify those type of devtools for the future.\n\n. > Not sure it is right solution:\n\nimport send from 'webpack-dev-server/client/send';\n// To be implemented\nimport listen from 'webpack-dev-server/client/listen';\nWe should export this function or use window.webpackDevServerSend because now you use not publish api, and files can be moved in other directory in any time.\nMaybe we can search other solution for this case? Code really looks very misleading.\n/cc @hiroppy what do you think\n\nThe reason why I did this is because you use __resourceQuery and if users require webpack-dev-server/client within their app then they might include the client twice. Webpack will see these as two different modules right?\nwebpack-dev-server/client?localhost:8080\nwebpack-dev-server/client. More feedback? :)\nSorry for pushing but really want this feature :). > I like export style.\n\nHow about putting(or create) it in index.js?\nIt can resolve files can be moved in other directory in any time.\n\n@hiroppy So you use it like this in your app/devtools?\njs\nimport { send, listen } from 'webpack-dev-server';\nMy concern about that is that webpack-dev-server main file is lib/Server.js and it's es6 code and won't work good with old browsers. It's pretty common to ignore node_modules (official documentation also exclude node_modules) and then that file won't be transpiled and finding these issues can take awhile... Depending on your environment working on...\nhttps://webpack.js.org/loaders/babel-loader/#usage\nThat was one of the reason why I wrote send/listen with es5 code.. I'm blocked the moment and in need some feedback on my questions :). I'm sorry for pushing but I really want this feature. Please give me more feedback so I continue working with this :). @hiroppy another solution is to add another file called for instance browser.js and add client methods there (\"browser\": \"./lib/browser.js\" to the package.json). I think webpack will resolve that by default for web builds.\nThen if something adds like to their entry:\njs\nimport { send, listen } from 'webpack-dev-server';\n// Then ./lib/browser.js will resolve for web builds. This is to prevent websocket to not emit node target specific hashes.. How do you mean? If you lose connection and reconnect you probably don't want to resend all messages again?. I've added the message queue for messages that are sent before the connection is fully established or else you will get an error from sockjs.. Fixed. How do you want it then? :). That initSocket looks really weird in the first place because it's not pure and does side effects on sock in a recursive fashion.. This pattern is pretty known though. Rxjs, redux and react hooks for instance uses it. Where you return the unsubscribe/teardown function. So the consumer don't need to store his handle himself.\nhttps://github.com/reduxjs/redux/blob/master/src/createStore.js#L119. Do you like this better?\n```js\nsubscribeClientData(handle) {\n  const { app }  = this;\napp.on(CLIENT_EVENT, handle);\nreturn function unsubscribeClientData() {\n    app.off(CLIENT_EVENT, handle);\n  };\n}\n``. @evilebottnawi Maybe we could rewrite thatinitSocket` to be pure instead?. Fixed. ",
    "ViggoV": "Wait, what?! So WDS doesn't compile according to the webpack config?. ",
    "joshhead": "I ended up adding --inline=false to webpack-dev-server to test in IE10. It disables auto-refresh but it also prevents the ES6 code from being added into the bundle.. ",
    "lkiarest": "From product feedbacks we got, several browsers of android phone are still using very old version, they even don't support 'let/const' identifier now.. ",
    "penggy": "@shellscape the command is \nnpm run start \nthe script in package.json is \n\"start\": \"cross-env NODE_ENV=development webpack-dev-server\"\nif set useLocalIp: false error info disappear. ",
    "paztis": "In version 1.2.0, internalIp.v4() was returning the ip.\nIn version 2.0.0, internalIp.v4() returns a Promise. That's not the same at all.\nIt fails during: const hostname = options.useLocalIp ? internalIp.v4() : options.host; in createDomain.js.\nIs it possible to publish the version with the fix (rollback to 1.2.0 or correction of the Promise management). ",
    "hockor": "oh..I also encountered the same problem and I run npm install -g  ,it's not work\nif I run npm install in local ,it;s work \nso bad.... ",
    "thebedroomprogrammer": "https://github.com/Arpit1294/React-Redux-Boiler-Plate \nI have updated my comment and this is my repo. \nMy question is that why does the browser refreshes my app on save even when I haven't made any changes in the files?. ok I did the same using webpack 2.2 and everything was okay the problem is observed in 3.6. Even when nothing is changed the page refreshes when using webpack 3.6.. Yes, Thanks for suggesting. Will look into it. Closing this issue.. Can you be more clear about your question?\nDo you want to debug an app?. ",
    "wlindner": "@shellscape I just pushed a new commit that includes tests. I went ahead and restructured the tests in this file so that I could properly do the test setup: one testing headers as a string and one as an array. If this is not how you want it to be structured please let me know.. @shellscape I've made all the changes you requested, and tests and linting passed locally. But, it looks like it's failing for node 6 with a route test in CI. I moved the describe blocks around in that test file, but didn't change any of the content of those tests and I don't think it's related to the header validation change. Any suggestions for what I should do to fix this so CI passes?. ",
    "robertaistleitner": "Hey guys, just checked why the tests failed (they work on my machine), and it seems the timeout with 2 seconds is a little too low, is there a possibility to increase it? The test case which fails is generating a ssl certificate (option https is set to true for server).\n. Regarding the too complex example: there's no other way to show why this is even needed (reverse proxy running on https + iframes + dev-server) so I don't get how the simple scenario should show how and why it works.. Regarding the too complex example: there's no other way to show why this is even needed (reverse proxy running on https + iframes + dev-server) so I don't get how the simple scenario should show how and why it works.. Sorry for not writing back sooner, I definitely want to get this merged and I'll propose solutions for the requested stuff as soon as possible... Sorry for not writing back sooner, I definitely want to get this merged and I'll propose solutions for the requested stuff as soon as possible... Thanks, I'm happy it got merged!. I don't really get what you mean with using setInterval and clearInterval here and how this will improve the code.\n+1 for moving the log down. I wrote in the commit comment that url.parse is not appropriate here.. I did it with url.parse before but the new tests I provided showed it's not working as it should..\n\nfound a bug due to tests: url.parse doesn't properly parse a provided public option since it counts everything before the port colon as the protocol which is just wrong. I replaced it with a protocol regex.. Sorry, but I looked up url.parse documentation again, as well as searching for issues with what I'm experiencing, and there's no easy solution possible by using url.parse.\n\nWhy? The public parameter can be a non-valid url like \"localhost:8080\" which is parsed to somethin like this:\n```javascript\n\nurl.parse(\"localhost:8080\")\nUrl {\n  protocol: 'localhost:',\n  slashes: null,\n  auth: null,\n  host: '8080',\n  port: null,\n  hostname: '8080',\n  hash: null,\n  search: null,\n  query: null,\n  pathname: null,\n  path: null,\n  href: 'localhost:8080' }\n```\nAs you can see, the protocol is incorrect and I would need to do more processing to find out what's going on. I think the solution using regex is the better option here.\n\nAlso have a look at https://github.com/nodejs/node/issues/5755, where they're discussing the same issue on parsing urls.. ",
    "jarodtaylor": "@shellscape interesting, I got 2.9.0 from running a fresh npm install --save-dev webpack-dev-server. Thanks for the response, I'm good to go, now.. ",
    "cordoval": "thanks i will upgrade \ud83d\udc4d . thanks i will upgrade \ud83d\udc4d . i use yarn run secure \"secure\": \"nsp check\"\nyarn nsp check but not sure if this package gets screened like this. i use yarn run secure \"secure\": \"nsp check\"\nyarn nsp check but not sure if this package gets screened like this. ",
    "dwjft": "I mean, you can figure that out by just reading the snippet of code.\n```javascript\nconst config = {};\nnew WebpackDevServer(compiler, config);\nconsole.log(config);\n/*\n * output: \n * config: {\n    reportTime: false,\n    reporter: [Function: defaultReporter],\n    log: [Function: bound bound consoleCall],\n    warn: [Function: bound bound consoleCall],\n    error: [Function: bound bound consoleCall] }\n/. I mean, you can figure that out by just reading the snippet of code.\n```javascript\nconst config = {};\nnew WebpackDevServer(compiler, config);\nconsole.log(config);\n/*\n * output: \n * config: {\n    reportTime: false,\n    reporter: [Function: defaultReporter],\n    log: [Function: bound bound consoleCall],\n    warn: [Function: bound bound consoleCall],\n    error: [Function: bound bound consoleCall] }\n/. ",
    "alansouzati": "thanks for the quick answer here. Let me try npm install, I will follow up with yarn on this.\nI would expect the caret to allow for 3.4. So I agree with you this sounds like a yarn bug.. ",
    "jacobp100": "@shellscape I did some searching, but I couldn't find much. I can only find #127, where the order was questioned, although not answered. If its by design, did your examination dig up any history on why that decision was made? Otherwise, I'm not sure I see the use-case for a proxy taking precedence.\nI think this is particularly confusing because http-server serves static files in precedence to proxying.. @shellscape I did some searching, but I couldn't find much. I can only find #127, where the order was questioned, although not answered. If its by design, did your examination dig up any history on why that decision was made? Otherwise, I'm not sure I see the use-case for a proxy taking precedence.\nI think this is particularly confusing because http-server serves static files in precedence to proxying.. Just trying to understand this. Is the idea that with each proxy config, you can either (but not both):\n\nDefine a URL to fetch resources from\n\nRedirect resources to a later proxy or contentBase. Just trying to understand this. Is the idea that with each proxy config, you can either (but not both):\n\n\nDefine a URL to fetch resources from\n\nRedirect resources to a later proxy or contentBase. Absolutely! In the docs it reads,\n\n\n-P or --proxy Proxies all requests which can't be resolved locally to the given url. e.g.: -P http://someurl.com\n\nTo me it seems like the current proxy is conflating wanting to redirect files (I.e. a.js to b.js) and reverse proxies.\nWould it make sense to pull out the bypass into its own top-level config? We would be free to make contentBase run after bypass but before proxy so we don\u2019t break people\u2019s current use cases.\nHappy to submit code for this btw!. I see the confusion\u2014sorry about that! I linked it because it\u2019s a very popular package.\nI don\u2019t think node has a built-in proxy or static file server, and express is dependent on how you set up the middleware.\nWould it be finding more projects like http-server and getting data on what they do?\nOther than that, did my comment about the bypass and proxy splitting make sense?. I've now gone through quite a lot of pages of http-server-like projects.\nA lot of them didn't support proxying. Others did an express-style routes configuration, where you decide the priority of proxies over the static content. I have not included these projects as they don't make a decision on this.\nBelow is the projects that I found that included proxies and static content, and made a decision about ordering. I've included the downloads per month.\nStatic files win over proxy\n\nhttp-server (435,346/month)\nlive-server (113,440/month)\nhttp2-server (11/month)\n\nProxy wins over static files\n\nlocal-web-server (16,450/month)\nfreddie (185/month)\n\nUnsure\n\nimpress (2,254/month). \n",
    "twooster": "This is closed, but I'd like to add my vote for contentBase before proxy. I have a few reasons:\nFirst, this behavior follows the principle of least-surprise and common engineering patterns of trying the fastest possible resolutions before attempting longer ones (local first, remote second). Why should the local webpack build have priority over the proxy if the local contentBase doesn't? Putting the proxy between the two is just wildly inconsistent.\nSecond, if you use a blanket-proxy -- which would probably be fairly common pattern for proxying to an API backend -- a 404 from the proxied remote will not result in the contentBase being searched for the missing file. The 404 will be displayed to the user. In this case, contentBase has effectively lost all utility. If the contentBase search came first, then it's composable with the proxy, using it as a fallback.\nLastly, some alternatives simply aren't workable. If you try exacting proxy pattern exclusions rather than a blanket pattern, they aren't always possible to express as minimatch patterns. (E.g., I was working with a publicPath of /assets/, but try forming the following pattern so that it works: !/(favicon.ico|robots.txt|assets/**) -- it doesn't work because the ** glob needs to be outside, but if it's outside, it won't match the base files, etc.) Not to mention the maintenance/consistency cost if new files are added.\nAnyway, whatever you decide: I found the behavior very surprising and ended up losing hours because -- after seeing that the build overrode the proxy, I assumed the contentBase would as well. At the very least, some documentation is warranted to clarify the ordering/locality mismatch between the build/proxy/contentBase. Or a swap flag. (Or, my favorite, just swapping the order by default. :grin:). Thanks for the response. :smiley:\nI was being a bit facetious about just swapping the order. Of course that change would aggravate people who depend on the ordering, but you seemed open to the change given the version bump. A feature flag makes more sense if you think the ordering is being used as-is. I understand and am sympathetic that this is a very widely used module.\nAfter thinking through use-cases and staring at the code for a few hours, the plausible use-case I see for proxy in front of contentBase seems to be for doing local path rewrites and giving the local middleware a second chance before falling back to static content. I can see an argument for preserving that behavior. It seems like that feature is getting lumped in with alternate-server proxying -- the use case in exemplified in the documentation.\nCan you offer other use-cases that I'm missing?\nI spent a while thinking about how to document options.features, too. However since a documented setting is an officially supported setting, I have a couple of concerns with exposing it in its current state. Primarily, the logic behind building the features array is complex and non-obvious (pull #797, #612, amongst others, show the nuance of building this array without introducing errors). I expect that offloading that complexity to users would cause brittle failures down the road.\nIt's also an odd combination of feature-enablement with middleware ordering (watchConfigBase isn't a middleware, for example, and features are added dynamically rather than handled gracefully if disabled in about half of the handlers, and now there are two places to enable/disable features, which is confusing). I considered making the array constant rather than dynamically generated, and encapsulating the fallback complexity, but accomplishing that with allowing reordering and path rewriting with proxy and historyApiFallback gets... really complex.\nI really think a feature flag for this might be the best solution, if you're open. (And leaving features undocumented, basically an internal.). (Or, I could submit a pull request just documenting the current behavior and showing a bypass solution?). ",
    "sturman": "Probably since v3 is released, the link from comment-340639565 is broken. If you use v2 then correct link is https://github.com/webpack/webpack-dev-server/blob/v2/lib/Server.js#L365 or in order to find a source code you may use the keywords  const defaultFeatures = in lib/Server.js.\nbtw, I've solved the issue with the following devServer config:\n.....\n    devServer : {\n        contentBase       : STATIC_ROOT,\n        publicPath        : '/',\n        host              : 'localhost',\n        port              : 3000,\n        quiet             : false,\n        historyApiFallback: true,\n        features          : [\n            'before',\n            'setup',\n            'headers',\n            'middleware',\n            'contentBaseFiles',\n            'proxy',\n            'middleware',\n            'magicHtml'],\n        proxy             : {\n            '/': {\n                target: 'http://localhost:8080',\n                secure: false\n            }\n        }\n    },\n...... ",
    "zwug": "Here is a sample snippet with the problem I am facing\n```\nif (!Array.prototype.someFunc) {\n  Array.prototype.someFunc = function() {\n    return 'something';\n  };\n}\nconst items = ['potato', 'bread', 'milk'];\nfor (let index in items) {\n  console.log(items[index]);\n}\n// potato\n// bread\n// milk\n/\n\u0192 () {\n    return 'something';\n  }\n/\n```\nStylus loader is using the same for..in loop to iterate through an array of strings. And it fails trying to treat function as a string. By enumerable I mean the descriptor value. This code works correctly:\n```\nif (!Array.prototype.someFunc) {\n  Object.defineProperty(Array.prototype, 'someFunc', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: function() {\n        return 'something';\n      }\n  });\n}\nconst items = ['potato', 'bread', 'milk'];\nfor (let index in items) {\n  console.log(items[index]);\n}\n// potato\n// bread\n// milk\n```. Here is a sample snippet with the problem I am facing\n```\nif (!Array.prototype.someFunc) {\n  Array.prototype.someFunc = function() {\n    return 'something';\n  };\n}\nconst items = ['potato', 'bread', 'milk'];\nfor (let index in items) {\n  console.log(items[index]);\n}\n// potato\n// bread\n// milk\n/\n\u0192 () {\n    return 'something';\n  }\n/\n```\nStylus loader is using the same for..in loop to iterate through an array of strings. And it fails trying to treat function as a string. By enumerable I mean the descriptor value. This code works correctly:\n```\nif (!Array.prototype.someFunc) {\n  Object.defineProperty(Array.prototype, 'someFunc', {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: function() {\n        return 'something';\n      }\n  });\n}\nconst items = ['potato', 'bread', 'milk'];\nfor (let index in items) {\n  console.log(items[index]);\n}\n// potato\n// bread\n// milk\n``. I'll do it. It seems like there is no need forif (!Array.prototype.includes) {` because shim checks it anyway. ",
    "billyjanitsch": "Sorry -- I had searched through issues with \"Firefox\" as a keyword, but the existing issues happen to run into this issue in IE and Uglify.. ",
    "kesne": "@shellscape Would you accept a pr that accepts a CLI argument to disable the functionality? I know I can do it with the API, I just thought it'd be nice to do it via the CLI if I could.. ",
    "Ezugudor": "Hey @Kenanyildiz, I think am a bit late :). But I believe someone may still find it useful. So the webpack-dev-server is just a feature to enhance your speed of development. See it this way, it's just there basically to refresh your browser. What  you would have been doing each time you make changes to your files. So even though it does some bundlings, that is solely for its own use and not for you(user). And that's why the build is not made available in your current working directory. \nSo to answer your question, you still need to run  a command to get your \"dist\" folder. And that is \n\"npm run build\"\nSo just see webpack-dev-server as for hot-reloading. \nAnd if you need your \"dist\" anytime, just run \"npm run build\" \nHope that helps. :-) . ",
    "deadhandsignal": "I'm new to coding but have worked in tech for years. I don't understand why people don't just answer the question:\nWhere is the dist folder???\nincredible . ",
    "RobertChanphakeo": "\nI think @kenanyildiz just want to know where \u201cwebpack-dev-server\u201d host the content in disk when it is running\uff1fso do I.\n\nwebpack-dev-server runs in memory, If you want to see the files on disk during development you need to run the standard webpack or set writeToDisk to true (https://github.com/webpack/webpack-dev-server/releases/tag/v3.1.10)\ndevServer: {\n  writeToDisk: true\n}. ",
    "avivash90": "\nI think @kenanyildiz just want to know where \u201cwebpack-dev-server\u201d host the content in disk when it is running\uff1fso do I.\n\nIf you need to see from where webpack is serving the files without writing the content to disk, visit http://localhost:8080/webpack-dev-server on your local.. ",
    "7h3w4rd0c70r": "@shellscape via the CLI. @shellscape Ok, I've created a repo with replicated error. It has the exact same webpack configuration I'm using on project and gives the exact same error.\nHere: https://github.com/7h3w4rd0c70r/wds-misconfiguration-error. Ok, after more digging, I've found an answer buried by google. Here it is: https://stackoverflow.com/a/46527969/5367254\nSeems like global and local webpack-dev-server are killing each other. When I run ./node_modules/.bin/webpack-dev-server everything works just fine.. But I still think this is a bug. At least you should get a different and appropriate error message. This is a problem of conflict between global and local packages, but you still get meesage\nInvalid configuration object. webpack-dev-server has been initialised using a configuration object \n - configuration has an unknown property 'error'. ...\nYou should get an appropriate message, because this can and does lead to thinking that there is something wrong with your configuration..\n@shellscape What do you think?. @shellscape Running the dev server from package.json scripts works perfectly! Thank you :)\nAl right, so it's a known issue, thats good. Well, when are you planing to release the version with the fix? Now I know what the problem is and how to 'solve' it, so I can wait (even a long time). But I'm just afraid that somebody else could end up with a few hours/days of debugging of a working code... @shellscape Ok, So I've done as you wanted and it seems like it solved the problem. Since you can't see it on your machine, I've recorded the fix for you: https://www.youtube.com/watch?v=LiRMrWy4G-c. @shellscape Well, I tried to create PR, but I'm not sure which branch to edit and I don't have permission to create a new branch. So it will be probably better if you'll create the PR.. Thank you :). ",
    "hammer65": "I had this issue too but while it's true that if you execute the script in\nnpm start\nit will work. For me that only worked if I used the Windows CLI not git Bash which is where the problem manifested itself originally for me. If I executed the direct path to the project version in git bash it worked but the same thing in npm start did not.. ",
    "lewismoten": "My team and I are running into the same error as well. The configuration does not have \"error\", but we are being told there is an unknown property \"error\" when we run \"webpack-dev-server\" from the command line in windows. \nnode: 6.11.4\nnpm: 5.5.1\nwebpack: 3.8.1\nwebpack-dev-server: 2.9.2\n. It works for now. Looking forward to that bug fix.. ",
    "mdocter": "I just encountered this issue with IE 11, but it's also present in my production build, so it might be webpack related. Not webpack-dev-server related.. Correction. It's neither webpack nor webpack-dev-server. My code contained ES6 syntax (probably arrow functions), which isn't supported by IE 10 or IE 11 and wasn't transpiled because I was targeting ES6 from TypeScript. Duh :-) Thought I could do that, because of an ES6 polyfill I load globally from some CDN.\nThis SO answer pointed me in the right direction. \nThe correct way to fix this in your tsconfig.json file is:\n\"compilerOptions\": {\n    \"target\": \"es5\",\n    ...\n    \"lib\": [\"dom\", \"es6\"]\n  },\n. ",
    "DominicTobias": "I get this error using webpack 4 with no special customisations, no typescript, very simple setup (and using mode correctly for prod and dev builds - both fail). This is on a library that webpack-devserver is loading, not the app itself which also has the same browserlist settings.\njs\nmodule.exports = [\n  {\n    mode: 'development',\n    output: {\n      library: 'mockster',\n      libraryTarget: 'umd',\n      filename: 'mockster.js',\n    },\n  },\n  {\n    mode: 'production',\n    output: {\n      library: 'mockster',\n      libraryTarget: 'umd',\n      filename: 'mockster.min.js',\n    },\n  },\n];\nUsing babel-prese-env with \"browserslist\": \"last 2 versions, ie 11\",.\nSo in summary does anyone know how to fix this? Thanks. ",
    "vikashpisces": "I did have the similar situations. Using babel-polyfill npm package worked for me for IE 9,10 and 11 versions.. ",
    "Andersos": "Thanks for pointing me in the right direction!. ",
    "pateras": "I'll go to Stack Overflow first in the future, but when I remove the plugin, I get an error that says \"[HMR] Hot Module Replacement is disabled\" on page load. Furthermore, if I include the plugin, but not the \"hot: true\" option, HMR is not enabled. Does that align with your expectations?. I'll go to Stack Overflow first in the future, but when I remove the plugin, I get an error that says \"[HMR] Hot Module Replacement is disabled\" on page load. Furthermore, if I include the plugin, but not the \"hot: true\" option, HMR is not enabled. Does that align with your expectations?. I'm sure you're right. I'll take it over to Stack Overflow and try to find the issue with my configuration. Thank you for your time.. I'm sure you're right. I'll take it over to Stack Overflow and try to find the issue with my configuration. Thank you for your time.. ",
    "andreyvolokitin": "It seems like an old issue, which currently requires sort of a hack to probably make it working: https://github.com/jantimon/html-webpack-plugin/issues/232#issuecomment-239571413. The issue is not about HMR (hot module replacement) \u2014 HMR is working fine, as described in the issue. The issue itself is about automatic full page refresh when HTML changes (it usually called \"Live Reload\", but in the issue it is called \"Automatic Refresh\"). So, when HMR is on \u2014 Live Reload is not working and page is not refreshing on HTML changes. Also, it can be seen in the \"hmr\" example : when we change examples/.assets/layout.html \u2014 webpack compiles changes, but the page in the browser is not refreshing: https://i.imgur.com/z6E3YIb.png. Hot Module Replacement (HMR) \u2014 is a hot reloading of modules (js/css/files). Reloading a full browser page is not HMR, it is a separate feature (sometimes called \"live reload\": when the source file changes the browser page is fully reloaded to apply these changes). So there is HMR and there is \"live reload\". When source files are changed \u2014 these changes are expected to be delivered to the browser in one way or another (HMR or \"live reload\"). So webpack-dev-server uses HMR when it is on (hot: true) (though it wrongly does not reload HTML in that case as per #1271), and it uses \"live reload\" when HMR is off.  Considering all that \u2014 the current behavior is actually correct (despite #1271 which needs fixing), because webpack-dev-server is expected to sync source files changes with the browser page somehow. You want to completely turn off this syncing, so there is no HMR and no \"live reload\". The proper way to do it is to implement a new option i.e. live: false which will turn off \"live reload\". But what you want instead is to disable \"live reload\" by disabling HMR, which is wrong. . I found that it is possible to get a list of changed files which caused recompilation. Would it be feasible to add some logic here, so that when the list of changed files contains certain extensions \u2014 we pass a flag to _sendStats() to indicate that full page reload is needed? It is unclear by now what extensions should be included: .html is fine, but what about countless templating engines which could be used instead and would need the same logic applied?. @evilebottnawi thanks! It works, but what about async issues \u2014 i.e. we pass a content-changed to a socket, and at the same time webpack is starting to compile the same files. We need to reload the page after webpack compilation, but as far as I understand with this snippet there is no guarantee of that? Probably we can add some delay then, but we can not precisely know the exact current compilation time to accommodate it in a delay (and this may cause unwanted delay time). Or this is actually no-issue?. @evilebottnawi my .html files are generated using PostHTML, so webpack is compiling them from the source during each recompilation (they are used by HtmlWebpackPlugin in a template option). This snippet is using chokidar to watch .html files. Webpack is watching the same files. When files change \u2014 webpack starts a recompilation, and at the same time chokidar is executing its callback (server.sockWrite(server.sockets, \"content-changed\");). So webpack recompilation needs to complete before page refresh happens, so that newly generated HTML actually appears in the browser. Might this be a race condition, like if page refresh happens before webpack completes recompilation, so that refreshed page will contain old HTML?. What I mean is there are two separate processes: webpack compilation of updated HTML and chokidar callback on this HTML changes. They need to complete one after another, but there is no guarantee for that. @evilebottnawi with HtmlWebpackPlugin the page is not reloaded when .html changes. There are numerous issues about this in html-webpack-plugin repo (i.e. https://github.com/jantimon/html-webpack-plugin/issues/232), as well as this repo and probably others too. The example code from this issue is actually using html-webpack-plugin and shows this (https://github.com/andreyvolokitin/test-webpack-dev-server). But it is clear that this issue comes from webpack-dev-server which simply does not take .html changes into account when hot: true. @evilebottnawi Would it be a bad thing to add an option to webpack-dev-server, containing a list of required file extensions (like ['.html', '.jade']) which then would be used as described here: https://github.com/webpack/webpack-dev-server/issues/1271#issuecomment-359815525 ? I know I can watch source html files and reload the page on their changes, but it looks like a hack considering that my html is compiled. Page reload should be more like compilation callback and not a parallel process of compilation. And it is clear that this feature is needed either way. If it would be possible though to subscribe a one-time function to compiler event hook like \"done\" within chokidar callback inside devServer.before(), then I could get a page reload guaranteed after compiling. But I am afraid devServer.before() does not expose webpack compiler... And I guess there is no way do define a \"once\" callback on compiler. Maybe add \"onCompile\" callback here and expose compiler and server to it? Then on each compile, it will be possible to get changed files with compiler.watchFileSystem.watcher.mtimes and to do page reload with server.sockWrite(server.sockets, \"content-changed\"):\n```js\ndevServer: {\n  hot: true,\n  onCompile(compiler, server) {\n    const watchFiles = ['.html', '.hbs'];\n    const changedFiles = Object.keys(compiler.watchFileSystem.watcher.mtimes);\nif (\n  this.hot && \n  changedFiles.some(filePath => watchFiles.includes(path.parse(filePath).ext))\n) {\n  server.sockWrite(server.sockets, \"content-changed\");\n}\n\n}\n}\n```\n. ",
    "george-norris-salesforce": "broken link\nhttps://github.com/webpack/webpack-dev-server/tree/master/examples/hmr. broken link\nhttps://github.com/webpack/webpack-dev-server/tree/master/examples/hmr. ",
    "bazineta": "I believe this was introduced by #1148; certainly willing to help with a PR, but would appreciate some direction.. ",
    "aiibe": "I added devtool: 'inline-source-map' in webpack.config.js. It seems to work for me.. ",
    "jacobsun": "Even I tried inline-source-map , firefox console still complains, it won't show in network tab.\nSource map error: request failed with status 404 Resource URL: http://localhost:8081/app.js Source Map URL: sockjs.js.map \nI have tried all 7 type of source maps with mimium context (no babel, no any transformations, just pure webpack with two simple js)\nchrome mentions souce maps detected, but it is never show it. . ",
    "marharyta": "having the same issue as @parkerault described, same versions of webpack and dev server. Any updates?. @evilebottnawi But how do I create source maps with it? My primary problem is that I need good source map support but I cannot find any info on it from webpack-serve\n. That is exactly what does not work for me: whenever I am including devtool (any option) it points me to client.js in browser @evilebottnawi and not to the right fule (see screenshots attached)\n\n\n. ",
    "fredyrivas": "\nI added devtool: 'inline-source-map' in webpack.config.js. It seems to work for me.\n\nyou saved my life. ",
    "jharris4": "I've been getting error Command failed with signal \"SIGABRT\". randomly lately as well. I haven't changed my configuration recently other than upgrading dependencies.\nThese are my webpack related package dependencies:\n\"webpack\":\u00a0\"^3.8.1\",\n\"webpack-bundle-analyzer\":\u00a0\"^2.9.1\",\n\"webpack-dev-middleware\":\u00a0\"^1.12.2\",\n\"webpack-hot-middleware\":\u00a0\"^2.21.0\"\nAnd I'm running Node 9.21. ",
    "MarvinXu": "But this way  I couldn't test my https website  even in an IOS9 machine, how should I fix this if I want to use the latest version of webpack-dev-server?. ",
    "Kjaer": "it is more than access-grant issue than port-in-use issue. I faced the same problem and still don't don't find a clue how to solve it.\nFor a quick solution run your webpack-dev-server with sudo I could manage to start dev server with sudo.. ",
    "smackenz": "May or may not be useful but sometimes when I run into these issues I pass the --no-optional flag magic. ",
    "VayaBuzz": "I ran into the same error message. It turns out I had previously installed tomcat web server on my machine. Tomcat was already utilizing 127.0.0.1:80   (which means tomcat is running on port 80)\nThe error message is a little confusing since the first error message is about \"events.js:183\n      throw er\". But you can ignore that. The real issue is the port conflict:\nError: listen EACCES 127.0.0.1:80\nTo resolve the issue, I updated webpack.config.js to use a different port instead of the default port 80. For me, port 9000, worked great. Here's my complete webpack.config.js file, with the port 9000 specified on one of the last lines:\nmodule.exports = {\n  entry: [\n    './src/index.js'\n  ],\n  output: {\n    path: __dirname,\n    publicPath: '/',\n    filename: 'bundle.js'\n  },\n  module: {\n    loaders: [{\n      exclude: /node_modules/,\n      loader: 'babel',\n      query: {\n        presets: ['react', 'es2015', 'stage-1']\n      }\n    }]\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx']\n  },\n  devServer: {\n    historyApiFallback: true,\n    contentBase: './',\n    port: 9000\n  }\n};. ",
    "mmanavaz": "This is with webpack-dev-server, as the error states. . Sorry for the inconvenience.. I will continue to research the issue.. ",
    "rwholey-eb": "thanks for taking a look! looking forward to the new release . I think I understand what you're saying, since the progress opt is only used here and its not always common to use, it would have been less impactful to set the progress opt inside of the if block so it wouldn't be assigned on every run? \nThank you for the review! Looking forward to the v3 version :). ",
    "IhorVimmi": "share a link please))). ",
    "dennisja": "@shellscape Can you provide a link to the Template issue?. ",
    "weibangtuo": "Updated. Please reopen.. ",
    "jakewies": "It seems that quitting Chrome and restarting solved this issue. I found it strange that this existed in the first place. Could be something on Chrome's end? Anyway, I'll close \ud83d\udc4d . ",
    "robert-prib-polestar": "@shellscape I will give it a go, didn't realise that!. This can be closed, I now realised this project uses portfinder to assign a new port if the current one is in use. I don't believe there is any need to set port to 0 looking at current implementation?\nI just realised that my project is still stuck on old version of webpack and webpack-dev-server and we cant use this feature until we upgrade to webpack2+, as portfinder plugin wasnt added to webpack-dev-server unil version 2.2.0.. > If a base of 8080 isn't preferable for your project, you can always use portfinder in a script on your end to start at a base port more to your liking, and pass the value along for each instance you spawn via the CLI or API.\n@shellscape That workaround sounds reasonable, thanks for the quick reply.\nI think to make more of case for this change;\n You could display a warning to terminal output that the defined port was in use and allow the system to still work.\n Or you could allow the default port to be defined as an option, or a config flag to allow dynamic port assignment or something along those lines.. ",
    "montogeek": "@shellscape What you think about using https://github.com/node-modules/detect-port to do this?. It looks like you just deleted our lovely crafted issue template. It was there for good reasons. Please help us solving your issue by answering the questions asked in this template. I'm closing this. Please either update the issue with the template and reopen, or open a new issue.. This is not related with webpack-dev-server.. Try with https://github.com/zloirock/core-js#map not Array.prototype.map. Code should have same tab/space width, that is current style.. ",
    "micacardillo": "I don't think this particular problem is is happening in the socket module.  client/index.js seems fairly decoupled from socket implementation.   Is there a branch with the sockjs --> WebSocket progress I can take a look at?. @ProductivePerson @calepsol No solution yet.  The browser sees the sockjs requests as a CORS violation if you change it to http.  . ",
    "ProductivePerson": "@micacardillo Did you find a workaround in the meantime? I have the exact same issue and am looking for a short-term solution that can be implemented either in nginx or webpack-dev-server configurations.\nGlad to hear this is getting patched out in future versions, looking forward to 3.0!. @shellscape Noted and understand. Thanks for the cultural explanations as well. I'll remove the previous question to clear up the thread. . ",
    "calepsol": "I have the same problem . ",
    "AnthonyPaulO": "@shellscape I'm confused by everything I've read regarding the move away from socks as I've been having a similar issue as the OP and have been debugging an issue in webpack-dev-server 3.1.0 and it always seems to want to connect to /socksjs-node/... Has version 3 really migrated away from socks? If so, why do I see what the op is seeing in 3.1.0? Is socks by default and I have to set a flag somewhere to enable websocket support?. ",
    "LeoLozes": "webpack Version: 4.28.3\nwebpack-dev-server Version: 3.1.14\nwith the devServer clientLogLevel set to 'warning' I can still see the [HMR] Waiting for update signal from WDS... message every time. \nAm I doing something wrong?. ",
    "joltmode": "Oh, f***, messed up badly on my part. :expressionless: \nSorry for inconvenience.. ",
    "tancnle": "@shellscape Fair point. With that in mind, this is more of less of dependency bumps to keep things up-to-dated. I guess we can close it in favour of larger update later on.. ",
    "jvanbruegge": "Thanks, that works. The option is not really prominent in the docs, so I missed it.. I saw the option, but did not know I could use it that way. I never use express normally. ",
    "xiechao1211": "i have the same question on iphone6  IOS 10.3.3\ni hava test the IOS11 OR andriod,they have no problem. ",
    "ipengyo": "I also encountered the same problem hate bad\n. ",
    "MajorBreakfast": "@ipengyo Would you open another issue that follows their \"template\"?. ",
    "fenixphp": "\"webpack\": \"4.16.1\"\n``` javascript\ndevServer: {\n    hot: true,\n    host: '0.0.0.0',\n    port: 3000,\n    open: true,\n    openPage: 'dashboard/',\n    publicPath: '/dashboard/',\n    contentBase: path.join(__dirname, 'Build'),\n    historyApiFallback: true\n  },\n```\nin browser :  http://0.0.0.0:3000/dashboard/\n\n``` javascript\ndevServer: {\n    hot: true,\n    host: '0.0.0.0',\n    port: 3000,\n    open: true,\n    openPage: 'dashboard/',\n    public: 'localhost:3000',\n    publicPath: '/dashboard/',\n    contentBase: path.join(__dirname, 'Build'),\n    historyApiFallback: true\n  },\n```\nwork.. ",
    "adamchenwei": "specifically this one https://github.com/webpack/webpack-dev-server/tree/master/examples/general/proxy-simple. ",
    "jaunkst": "watchOptions isn't ignoring anything at all. We have a file that is generated before compile time and its triggering another recompile unfortunately.. @shellscape I have looked deeper and have discovered what our issue was, and how to work around it. I think its a combination of a few things. \n1. We are generating an entry file before we are kicking off the webpack-dev-server\n2. The watchpack has a 10s look behind on file changes and it is triggering the second build\n3. The watchOptions.ignore doesn't seem to allow us to ignore files that are entry items \nWe are currently having to backdate the file when its generated. \nSo I think the issue is with watchpacks 10s backdate window. The idea of ignoring a file that is added to webpacks entries does seem weird but in our case it is an autogenerated index.\nI was somewhat confused as to what was actually going on and assumed that somehow the ignored rule wasn't being applied. \nAnyways, I never got the ignore rule to actually work in this particular case and I realize that in this issue it is when watching the baseContent for changes.. @shellscape I do not work with the original author. I was referring to my team, sorry for the confusion.. @shellscape yep, thats what I was thinking. I ended up logging the onChanges event in watchpack to see what files where triggering the recompile. It was the generated file and add adding it to the watchOptions.ignored did nothing. I even tried passing the options down to webpack-dev-servers watch options as you mentioned and it didn't help either. So I am assuming that because it is an entry it isn't being ignored or another watcher is being applied to the entries.. @shellscape yep, thats what I was thinking. I ended up logging the onChanges event in watchpack to see what files where triggering the recompile. It was the generated file and add adding it to the watchOptions.ignored did nothing. I even tried passing the options down to webpack-dev-servers watch options as you mentioned and it didn't help either. So I am assuming that because it is an entry it isn't being ignored or another watcher is being applied to the entries.. ",
    "mcpherson-sa": "I did some more debugging and here is what seems to be going on.\nWhen a page is reloaded due to recompilation, for some reason 2 web socket connections occur. For each connection, 'ok' message are sent s to the client. Without a delay, these message will be seen in the same page context in the client. The first one will see initial as true and then set initial to false. the second one will see initial as false and trigger a reload. \nIf the the 'ok' messages are delayed by one second before being sent to the client then when the first ok is sent, the connection it belongs to is now out of scope on the client (as the page has been reloaded) so nothing is received. The second ok is received by the client, and as initial is still true, no page reload occurs.\nHope this helps.. I did some more debugging and here is what seems to be going on.\nWhen a page is reloaded due to recompilation, for some reason 2 web socket connections occur. For each connection, 'ok' message are sent s to the client. Without a delay, these message will be seen in the same page context in the client. The first one will see initial as true and then set initial to false. the second one will see initial as false and trigger a reload. \nIf the the 'ok' messages are delayed by one second before being sent to the client then when the first ok is sent, the connection it belongs to is now out of scope on the client (as the page has been reloaded) so nothing is received. The second ok is received by the client, and as initial is still true, no page reload occurs.\nHope this helps.. @shellscape - I think its a shame this issue has been closed so quickly. I would have thought it would make sense to wait a while to see if more people are seeing it, especially since I have shown willingness to help out with the debugging. If you feel I have not provided enough info I would happily provide more.. @shellscape - I think its a shame this issue has been closed so quickly. I would have thought it would make sense to wait a while to see if more people are seeing it, especially since I have shown willingness to help out with the debugging. If you feel I have not provided enough info I would happily provide more.. ",
    "aaroncass": "I am also seeing this issue ( #1214). I can confirm the issue only occurs in chrome/chromium and not firefox.\nI'm new to js so unable to investigate further but I'm happy to provide more info.. I am also seeing this issue ( #1214). I can confirm the issue only occurs in chrome/chromium and not firefox.\nI'm new to js so unable to investigate further but I'm happy to provide more info.. My issue (#1214) was closed as a duplicate of this one, but this issue was closed as an edge case because it couldn't be reproduced. It can be reproduced on a standard setup (ubuntu 16.04) with standard installations of node/yarn/chrome . I have tested this on a fresh installation of ubuntu. \nIf it helps, I can create a virtualbox image for you to test against.\nPlease consider reopening this issue.. My issue (#1214) was closed as a duplicate of this one, but this issue was closed as an edge case because it couldn't be reproduced. It can be reproduced on a standard setup (ubuntu 16.04) with standard installations of node/yarn/chrome . I have tested this on a fresh installation of ubuntu. \nIf it helps, I can create a virtualbox image for you to test against.\nPlease consider reopening this issue.. Thanks for explaining @shellscape . I will try to reproduce on other systems and report back if I find anything that advances the issue.. Thanks for explaining @shellscape . I will try to reproduce on other systems and report back if I find anything that advances the issue.. ",
    "Anthony59273": "@shellscape Thanks for your answer.\nApparently this error has been reported already but the issue was closed due to lack of activity: https://github.com/webpack/webpack-dev-server/issues/215\nAlso, I've been following your advices and tried to isolate the source of this error by removing various pieces of the configuration. Sadly I couldn't remove all of the loaders since they're necessary for the build to be complete, but this path lead nowhere. I also reinstalled the node dependencies, which didn't solve my issue neither. About reinstalling node, I don't think this would be helpful since we're several persons working on this project and having this error.\nSo my situation hasn't evolved and I'm not sure where to look at now...\nIf you have some other suggestions, I would be glad to hear from you.. @shellscape Thanks for your answer.\nApparently this error has been reported already but the issue was closed due to lack of activity: https://github.com/webpack/webpack-dev-server/issues/215\nAlso, I've been following your advices and tried to isolate the source of this error by removing various pieces of the configuration. Sadly I couldn't remove all of the loaders since they're necessary for the build to be complete, but this path lead nowhere. I also reinstalled the node dependencies, which didn't solve my issue neither. About reinstalling node, I don't think this would be helpful since we're several persons working on this project and having this error.\nSo my situation hasn't evolved and I'm not sure where to look at now...\nIf you have some other suggestions, I would be glad to hear from you.. @shellscape Fair enough, will follow your latest advice. Thanks for your help.. @shellscape Fair enough, will follow your latest advice. Thanks for your help.. ",
    "zigang93": "### Update\nFirefox desktop console log\n\nIt is a source map issue... damn.. I almost give up webpack setup.. too many issue going out.. \nany idea how to solve this??\nI just check on my desktop firefox , it show the same status with my ios device.. only chrome able to show the images without any console log warning/error.\n. After research a few hour ..\nfinally solve the problem..\nUpdate 5.11.2017\n\nSeem like only the .jpg unable to work well.. .png file fine\n\nSolution:\n\nremove image-webpack-loader or do not compress the jpg\njust using file-loader should be ok\ntry downgrade the version of image-webpack-loader.. it work now..\nI am using v3.4.0 image-webpack-loader downgrade from v3.4.2\n\nREMEMBER in webp setting: \nwebp: {\n                enabled: false\n              }\n. ",
    "martianmartian": "it feels like webpack team has given up on these margin issues. ....... ",
    "wojtekmaj": "What makes me wonder, I may have two hot servers started at the same time, judging by the messages that are shown in the console. Does WDS have any mechanism to prevent such things from happening?. What makes me wonder, I may have two hot servers started at the same time, judging by the messages that are shown in the console. Does WDS have any mechanism to prevent such things from happening?. ",
    "kinkoazc": "Just for reference, in my case the culprit was a \"manually\" installed \"webpack\" node module(I say \"manually\" because webpack was already a required dependency for another module-@angular/cli-). Removing the \"manually\" installed dependency allowed @angularclass/hmr module to work as expected with @angular/cli.. Just for reference, in my case the culprit was a \"manually\" installed \"webpack\" node module(I say \"manually\" because webpack was already a required dependency for another module-@angular/cli-). Removing the \"manually\" installed dependency allowed @angularclass/hmr module to work as expected with @angular/cli.. ",
    "eckdanny-osi": "@shellscape is the CLI's --help output incorrect or are my expectations incorrect?\nsh\n$ ./node_modules/.bin/webpack-dev-server --version\nwebpack-dev-server 2.9.7\nwebpack 3.8.1\n$ ./node_modules/.bin/webpack-dev-server --help | grep watch\n  --watch, -w  Watch the filesystem for changes                        [boolean]\n                      [boolean] [default: It's enabled by default when watching]\n  --watch-stdin, --stdin     close when stdin ends                     [boolean]\n  --watch-aggregate-timeout  Timeout for gathering changes while watching\n  --watch-poll               The polling interval for watching (also enable\n  --watch-content-base    Enable live-reloading of the content-base.   [boolean]. ",
    "isaacuribe": "@shellscape Thanks for taking the time to develop a valuable tool and taking the extra effort to document it.\nWhat @eckdanny-osi did may not be how you operate, but it is a very common pattern for a huge group of users \"out there\" (that's how I got here):\n\nIf you are on a command-line interface, the first thing you do is \"man tool\" or \"tool help\", \"tool -h\", etc.\nAnd if the output is too large, the first natural thing to do is grep the output or \"Cmd + F\"\nAlso, properties from the CLI overriding default values or configurations is the common behavior for most CLI tools, it's the \"least surprising behavior\"\n\nYou are of course free to deviate from the pattern, may I suggest to simply remove the whole output of \"--help\" and replace it with the \"Usage\" link? That would be easier than trying to change people to abandon behaviors that have been proven useful since at least the late 1970's\n  . ",
    "creage": "@shellscape after some deeper diving into the code, I understood, that this depth parameter has a great importance. The issue with it (if you don't limit it) is a huge amount of FS watchers, mostly redundant. Setting it to 0 ensures of watching root folder only.\nSo, I've ended up with writing my custom webpack plugin, which triggers a change event on root folder whenever some of my inner folders updated. Kinda event delegation. Nice approach, I like it more than multiple watchers.. @chasegiunta well, the plugin code is really simple. The idea is every time some paths different then root are updated, I touch some file in the root, which triggers WDS to recompile.\n```javascript\nconst path = require('path'),\n    fs = require('fs');\n/*\n * Forces App to reload by touching index.html everytime module is recompiled\n /\nclass AppWatchPlugin {\nconstructor(dest, file) {\n\n    this.dest = dest;\n\n    this.file = file || 'index.html';\n}\n\napply(compiler) {\n    compiler.plugin('done', () => {\n\n        const currentDate = new Date(),\n            fullPathOfFile = path.resolve(this.dest, this.file);\n\n        fs.utimes(fullPathOfFile, currentDate, currentDate, err => {\n            if (err) {\n                console.log(err);\n            }\n        });\n    });\n}\n\n}\nmodule.exports = AppWatchPlugin;\n```. ",
    "BiggAdd": "I don't think this person built their use-case around a bug, the documentation for watchContentBase states:\n\"Tell the server to watch the files served by the devServer.contentBase option. File changes will trigger a full page reload.\"\nI would say that means all files within that folder. I think your fix for #1208 broke this feature. Either bug should be fixed or if this was genuinely an intended feature then the documentation needs to be updated. . ",
    "chasegiunta": "@creage would you mind sharing your webpack plugin? Also running into this.\n@shellscape I believe that @BiggAdd has a valid point here \u2014 if only watching root for changes is the intended behavior, I believe the documentation needs to updated to reflect that. Appreciate the time & answers to you both @evilebottnawi & @creage . I was really hopeful I could get one of your solutions to work.\n@creage unfortunately, I can't seem to get the plugin to be called after saving a deeper folder.\n@evilebottnawi Also tried your solution but ran into issues with globbing (chokidar doesn't seem to like / in the glob path, throws no parsers registered for: \"]a(r)\" errors)\nI feel defeated! Any further suggestions you two have would be welcome \ud83d\ude05\n UPDATE \nImplemented https://github.com/amasad/sane in place of chokidar and it seems to work! \ud83c\udf89Thanks again for both y'alls help.. ",
    "araphiel": "@evilebottnawi Thanks! Your solution  worked perfectly in my use-case.\nMy webpack-dev-server + Jekyll setup - \nedit: \ud83e\udd26\u200d\u2642\ufe0f as it turns out, I didn't need the manual watchers for my use case at all. \ncontentBase was enough.... but the code still works.. Turns out contentBase was enough for my usecase but this could be worth a gander\n. Hi @marcofugaro,\nHonestly, I misunderstood Webpack + WDS.\nIn my instance, I used Webpack to compile CSS & JS for use with my static site generator.\nSetting contentBase to the root directory used for my dev build - was enough to handle this.\nHowever, if your needs are more comprehensive - you can manually run an additional callback that uses chokidar with more depth settings using devServer.before or devServer.after. However,  I wouldn't recommend this if possible.. ",
    "timtong1982": "This is not exactly an issue.\nSince my app was set to have two entry points A  and B for the dev environment, A is the real implementation, B is a bootstrap of A, in that case, the CSS was injected twice.\nbut still, update the scss in A only reload one CSS. ",
    "zhangwei8607": "var CopyWebpackPlugin = require('copy-webpack-plugin');\nplugins: [\n        new CopyWebpackPlugin([{ from: 'src/assets/', to: 'assets' }])\n    ],. ",
    "ferrybig": "@shellscape \n1. I run webpack-dev-server --host :: --open from the terminal\n2. Since --open is passed, it will open my webbrowser\n3. The url opened in the webbrowser is [::]:8080\n4. The browser complains that [::] is not a valid ip address\nI expect that the localhost ip address of [::] is opened, similar to what happens when you use 0.0.0.0, for IPv6, the equivalent is [::1].\n@evilebottnawi I need support for connecting over ipv6, if I start the server with 0.0.0.0, I cannot connect to my server from my other device using its ip. ",
    "DoumanAsh": "Sorry it seemed logical for me as errors happening only when loading into dev server.\nI suppose it would be better close if object-hash is not used by dev-server at all.. @vundyalaavinash I created issue on object-hash but had no input https://github.com/puleos/object-hash/issues/61\nIn my case the problem was due to using eslint while under dev server(I just disabled eslint when running dev server). ",
    "dontito94": "i got same issue when am doing table migration using sequelize db:migrate\ninternal/crypto/hash.js:53\n    throw new errors.TypeError('ERR_INVALID_ARG_TYPE', 'data',\n    ^\nTypeError [ERR_INVALID_ARG_TYPE]: The \"data\" argument must be one of type string, TypedArray, or DataView\n    at Hash.update (internal/crypto/hash.js:53:11)\n    at sha1 (/home/dontito/NodeORMs/node_modules/mysql2/lib/auth_41.js:30:8)\n    at Object.token [as calculateToken] (/home/dontito/NodeORMs/node_modules/mysql2/lib/auth_41.js:64:16)\n    at new HandshakeResponse (/home/dontito/NodeORMs/node_modules/mysql2/lib/packets/handshake_response.js:28:24)\n    at ClientHandshake.sendCredentials (/home/dontito/NodeORMs/node_modules/mysql2/lib/commands/client_handshake.js:51:27)\n    at ClientHandshake.handshakeInit (/home/dontito/NodeORMs/node_modules/mysql2/lib/commands/client_handshake.js:142:10)\n    at ClientHandshake.Command.execute (/home/dontito/NodeORMs/node_modules/mysql2/lib/commands/command.js:40:20)\n    at Connection.handlePacket (/home/dontito/NodeORMs/node_modules/mysql2/lib/connection.js:502:28)\n    at PacketParser.onPacket (/home/dontito/NodeORMs/node_modules/mysql2/lib/connection.js:81:16)\n    at PacketParser.executeStart (/home/dontito/NodeORMs/node_modules/mysql2/lib/packet_parser.js:77:14)\n    at Socket. (/home/dontito/NodeORMs/node_modules/mysql2/lib/connection.js:89:29)\n    at Socket.emit (events.js:127:13)\n    at addChunk (_stream_readable.js:269:12)\n    at readableAddChunk (_stream_readable.js:256:11)\n    at Socket.Readable.push (_stream_readable.js:213:10)\n    at TCP.onread (net.js:590:20)\n. ",
    "ChetanAudipudy": "@dontito94 I'm running into the same issue. Did you find out how to fix it?. ",
    "niedzielski": "@shellscape, thanks for the reply! I tried @next but there are some big API changes my project isn't quite ready for (in my case, I get Unknown arguments: config, d, w and I didn't see these covered under the breaking changes readme or how to specify the config file elsewhere). I then tried adding a publicPath and stats.all property to the devServerOptions specified in examples/api/simple/server.js but unfortunately that's failing for unrelated reasons. I switched back to the master branch with the same change and stats.all as well as arbitrary stats properties pass. I tried examples/cli/progress too but couldn't get it to fail either. I'll have to circle back on this another time :/. This was my mistake. As mentioned in the error message, it seems that stats.colors is required by webpack-dev-server. What led me to the wrong conclusion is that the following works:\njs\nconst STATS = {all: false, errors: true, errorDetails: true, moduleTrace: true, warnings: true}\nexport default {\n  devServer: { stats: { ...STATS, all: undefined } },\n  ... // The rest of the Webpack configuration.\n}\n..And devServer: { stats: STATS }, fails. Only later did I realize devServer: { stats: { ...STATS } }, passes. I've added STATS.colors and webpack-dev-server works fine with all. to My apologies for the red herring!. ",
    "tbroadley": "No problem \ud83d\ude04 . ",
    "bencergazda": "@michael-ciniawsky Thanks for your response.\nThe reason why I used /dev/assets as publicPath was to automatically collect all asset (not entry) files to an assets folder. (The entry files files got a ../ prefix, see in output.filename to pretend a relativity to /dev instead of /dev/assets).\nBut after some investigation I now realized that I could rather set a different outputPath for url-loader and file-loader in the specific module.rules, where I generate the asset files, so I could remove this ugly hack from the webpack config.. ",
    "MatTheCat": "The setup is complicated because the documentation saying\n\nIt will try to guess the URL of the server based on window.location\n\nis wrong. The URL is actually built from __resourceQuery, which makes no sense when using a reverse proxy.\nSetting host: '0.0.0.0' and disableHostCheck: true is a hack to circumvent the host being wrong but there is no hack for the port.\nRemoving this condition does the job so why is it here?. The setup is complicated because the documentation saying\n\nIt will try to guess the URL of the server based on window.location\n\nis wrong. The URL is actually built from __resourceQuery, which makes no sense when using a reverse proxy.\nSetting host: '0.0.0.0' and disableHostCheck: true is a hack to circumvent the host being wrong but there is no hack for the port.\nRemoving this condition does the job so why is it here?. For now there are 78 :+1: on https://github.com/webpack/webpack-dev-server/issues/1327\n\nWith this change, the warning vanishes which is not correct in my opinion.\n\nThe warning will appear when webpack is used.\nI heard a lot about \u201czero configuration\u201d and \u201csensible defaults\u201d. Is it not sensible for webpack-dev-server to imply a dev enviroment?. For now there are 78 :+1: on https://github.com/webpack/webpack-dev-server/issues/1327\n\nWith this change, the warning vanishes which is not correct in my opinion.\n\nThe warning will appear when webpack is used.\nI heard a lot about \u201czero configuration\u201d and \u201csensible defaults\u201d. Is it not sensible for webpack-dev-server to imply a dev enviroment?. ",
    "yyx990803": "This is extremely irresponsible and overly optimistic about the ES feature set being used around the globe. As I pointed out, UC Browser has 500 million downloads on Google Play which equates to millions of users worldwide. You are essentially shutting down all the developers working in those regions from being able to leverage webpack-dev-server to debug applications in a browser their users choose to use.\nTo put it in more context, webpack-dev-server is used in the default vue-cli webpack template, and we rely on the latest version to take advantage of the new features, so being stuck on 2.7.1 is not an option.\nUsing Node 4 as an analogy also doesn't fly - devs have the choice to upgrade their Node versions, but they don't necessarily have control over what browsers their users choose to use.\nI don't see any practical downside of using ES5 in the dev-server client code - JavaScript is always backwards compatible, so yes, \"older platforms can be supported forever\" in this case.. I still don't see a valid argument on why this should not be merged. Can you provide one such argument in prior discussions?. removed package-lock.json per requested.. Shipping babel-core + babel-loader + babel-preset-env as dependencies of webpack-dev-server is definitely worse than just importing the pre-built bundle.. What are the downsides of including a bundle in a bundle? If webpack can handle that properly, then the only issue is it being \"bad practice\", which does not affect the user in anyway.\nOn the other hand, including the whole babel suite as dependencies means you are shipping ~30Mb of extra payload if the user doesn't use babel, or uses an incompatible version of babel. This amounts to wasted bandwidth cost and installation time, and it compounds during CI jobs. This is a much more practical problem than having a bundle in a bundle.. @shellscape I don't get your aggressiveness in all of this - I know you might have life stress, but as a maintainer myself I just have different perspectives on how the tradeoffs should be weighed. I tried to figure out a better solution after the first PR was rejected. I didn't even get a chance to defend the 2nd PR before you locked it. I simply disagree with your proposed solution of including babel as direct dependencies, for the reasons I outlined above. We are all just trying to find reasonable solutions to fix the problem for the users, and sometimes that means we may disagree on how that should be done, but that doesn't mean it's ok to just give in to your emotions instead of debating the actual problems. If you are busy with your life, maybe it is indeed time you take a break and let someone else take care of this project.\n  . See #1270, which avoids \"bundle in a bundle\" and \"babel as dependency\" at the same time.. @acierto my 1st PR was converting all the client code back to ES5, but it was rejected likely because the maintainers didn't want to have to write ES5 only in one part of the codebase.\nThe break in 2.10 wasn't intentional, it was a regression introduced by my 2nd PR which attempted to transpile the client-side code with babel, so that all client source code can remain ES2015. However the bundling setup was actually used only in live mode and caused CLI inline mode to use the raw ES2015 files.\nThis should be fixed properly in #1270 though.. @graingert FYI #1279 does not fix CLI --inline usage because injected entries will be processed with user config.. Just to explain why #1273 was needed instead of doing this: the webpack/babel transpilation only affects the bundles used in live mode. When the user uses WDS via the CLI with --inline flag, the client is injected by adding an entry to the users' bundle. So this PR would be an incomplete fix.. The client source is still using require, so having modules: false has no effect. Or we can convert to use ES modules imports and enable modules: false, but that may break compat with webpack 2 (not sure if that's still a requirement). ",
    "yoyo837": "I think what they mean is to force the browser and its users to improve, and the browser and its users are always easily turned into negative, backward.... ",
    "wxsms": "Front-end developers can chose Node.js version for themselves, but NOT browsers.\nCan't you simply babel your client side ES6 code to ES5? You can still move as fast as you wish without dropping anyone behind!. ",
    "peter-mouland": "I've just come across the same problem.\nAs webpack v4 is still in alpha, I guess there is some decisions to be made about how else to handle this i.e. it's probably premature to roll this out now, but perhaps a webpack-dev-server v3-beta might be useful with note around people trying webpack v4?\nShould this PR also update the peerDependencies from the package.json also?. Hi @shellscape (sorry for at'ing you directly!) but I was wondering if it was realised that this prevents people from trying out anything greater than webpack v4-alpha.0? (i.e. alpha.1+ wont' work).\nI saw some other issues already mentioning v3-beta but i could not see a branch or release with those tags.  Would v3 fix this issue and Is v3 available for testing?. Hi @shellscape (sorry for at'ing you directly!) but I was wondering if it was realised that this prevents people from trying out anything greater than webpack v4-alpha.0? (i.e. alpha.1+ wont' work).\nI saw some other issues already mentioning v3-beta but i could not see a branch or release with those tags.  Would v3 fix this issue and Is v3 available for testing?. Amazing, thanks guys!!\nfor anyone else, this now works with my current test setup of:\n\"webpack\": \"^4.0.0-beta.1\",\n    \"webpack-cli\": \"^2.0.6\",\n    \"webpack-dev-server\": \"^3.0.0-beta.1\",\n. Amazing, thanks guys!!\nfor anyone else, this now works with my current test setup of:\n\"webpack\": \"^4.0.0-beta.1\",\n    \"webpack-cli\": \"^2.0.6\",\n    \"webpack-dev-server\": \"^3.0.0-beta.1\",\n. will close this in favour or existing PR: https://github.com/webpack/webpack-dev-server/pull/1243\n  . ",
    "probablyup": "Any chance this patch could be released as a beta version so it can be tested alongside the webpack 4 beta?. ",
    "tomas2387": "To test this pull request, you can put it directly in your package.json\n \"devDependencies\": {\n    \"webpack\": \"^4.0.0-beta.0\",\n    \"webpack-cli\": \"^2.0.4\",\n    \"webpack-dev-server\": \"github:donaldpipowitch/webpack-dev-server#patch-1\"\n  },\n\nI executed it and it didn't work. \n$ ./node_modules/.bin/webpack-dev-server\nInvalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.\n - configuration.entry should be one of these:\n   object { <key>: non-empty string | [non-empty string] } | non-empty string | [non-empty string] | function\n   -> The entry point(s) of the compilation.\n   Details:\n    * configuration.entry should be an object.\n      -> Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.\n    * configuration.entry should be a string.\n      -> An entry point without name. The string is resolved to a module which is loaded upon startup.\n    * configuration.entry[1] should be a string.\n      -> A non-empty string\n    * configuration.entry should be an instance of function\n      -> A Function returning an entry object, an entry string, an entry array or a promise to these things.\nI dont know if I'm correctly understanding it, but It seems that it is asking for a configuration when webpack4 doesn't have one in the first place. \ud83e\udd37. To test this pull request, you can put it directly in your package.json\n \"devDependencies\": {\n    \"webpack\": \"^4.0.0-beta.0\",\n    \"webpack-cli\": \"^2.0.4\",\n    \"webpack-dev-server\": \"github:donaldpipowitch/webpack-dev-server#patch-1\"\n  },\n\nI executed it and it didn't work. \n$ ./node_modules/.bin/webpack-dev-server\nInvalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.\n - configuration.entry should be one of these:\n   object { <key>: non-empty string | [non-empty string] } | non-empty string | [non-empty string] | function\n   -> The entry point(s) of the compilation.\n   Details:\n    * configuration.entry should be an object.\n      -> Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.\n    * configuration.entry should be a string.\n      -> An entry point without name. The string is resolved to a module which is loaded upon startup.\n    * configuration.entry[1] should be a string.\n      -> A non-empty string\n    * configuration.entry should be an instance of function\n      -> A Function returning an entry object, an entry string, an entry array or a promise to these things.\nI dont know if I'm correctly understanding it, but It seems that it is asking for a configuration when webpack4 doesn't have one in the first place. \ud83e\udd37. ",
    "JounQin": "Sorry for not filling the issue template, that's my fault for thinking that's an obvious problem there although I didn't remember you've mentioned this to me before.\nSorry again.. Sorry for not filling the issue template, that's my fault for thinking that's an obvious problem there although I didn't remember you've mentioned this to me before.\nSorry again.. ",
    "derrickpelletier": "I'm getting this pretty consistently on 3.0.0-alpha5 without a manual refresh.\nJust a rebuild being triggered via file watching. Unable to find an explicit action that's causing it to crash.\nedit: but it does happen after webpack compiles successfully and chrome reloads the page. Haven't been able to reproduce in firefox yet.. I'm getting this pretty consistently on 3.0.0-alpha5 without a manual refresh.\nJust a rebuild being triggered via file watching. Unable to find an explicit action that's causing it to crash.\nedit: but it does happen after webpack compiles successfully and chrome reloads the page. Haven't been able to reproduce in firefox yet.. @shellscape thanks for the update, where's a good spot we could follow updates (re: more info to follow). @shellscape thanks for the update, where's a good spot we could follow updates (re: more info to follow). ",
    "dev357": "Seems to be an unhandled error(ECONNRESET) in the websocket connection in DevServer.js\nYou can add this on line 128 to fix it for now:\njavascript\nws.on(\"error\", err => {\n  log.error(err);\n});. I have no affiliation with the wds team so cant greenlight any PRs :)\nI created a fork with this fix included, you can use it package.json like this:\njs\n\"devDependencies\": {\n \"webpack-dev-server\": \"dev357/webpack-dev-server#next\"\n}\n  . ",
    "KatFishSnake": "@dev357 the above solution \"on error\", is theres any reason not to introd a temporary fix for the next release?, I find it a bit troublesome to update DevServer.js after each \"npm install\" i do in-between branch switching\nTo reiterate: would you greenlight a PR for it ?. @dev357 the above solution \"on error\", is theres any reason not to introd a temporary fix for the next release?, I find it a bit troublesome to update DevServer.js after each \"npm install\" i do in-between branch switching\nTo reiterate: would you greenlight a PR for it ?. ",
    "lpinca": "Yes, an 'error' listener should always be added.\nRef: https://github.com/websockets/ws/issues/1256. Yes, an 'error' listener should always be added.\nRef: https://github.com/websockets/ws/issues/1256. Closing as per https://github.com/webpack/webpack-dev-server/issues/1245#issuecomment-356278199.. No problem and congratulations \ud83c\udf89 .. @qiulang I don't know, what you are describing sounds like a different issue. This patch had nothing to do with Socket.IO.. As far as I know the 'listening' event handlers receive no arguments.. ",
    "ljani": "@akatechis: Please see v3.0.0-beta.1.. @akatechis: Please see v3.0.0-beta.1.. ",
    "leepowellcouk": "Closing - not sure how I missed the 'public' configuration property.. Closing - not sure how I missed the 'public' configuration property.. ",
    "oscarhco": "Hey @leepowellcouk !\nI am having this issue, can you elaborate on what exactly the 'public' configuration property is?\nThanks in advance.. Hey @leepowellcouk !\nI am having this issue, can you elaborate on what exactly the 'public' configuration property is?\nThanks in advance.. ",
    "sharkySharks": "same ^. same ^. @oscarhco found it: https://webpack.js.org/configuration/dev-server/#devserverpublic. @oscarhco found it: https://webpack.js.org/configuration/dev-server/#devserverpublic. ",
    "benstaker": "I am also experiencing this issue, using webpack-dev-server#2.9.7. Even though I have specified hot: false and do not have the --hot CLI argument.. I am also experiencing this issue, using webpack-dev-server#2.9.7. Even though I have specified hot: false and do not have the --hot CLI argument.. @andreyvolokitin I agree, a live: false option would be handy.. @byzyk I have checked out your fork by defining the following in my package.json:\ngit+ssh://git@github.com:byzyk/webpack-dev-server.git#88b89bbd4054f94a18a67c4f834a99a3eac5769e\nAnd I am receiving the following error when running webpack-dev-server:\n```\nmodule.js:471\n    throw err;\n    ^\nError: Cannot find module '../../client/'\n    at Function.Module._resolveFilename (module.js:469:15)\n    at Function.resolve (internal/module.js:27:19)\n    at addDevServerEntrypoints (C:\\workplace\\feefo\\feefo-admin-ui\\node_modules\\webpack-dev-server\\lib\\util\\addDevServerEntrypoints.js:18:35)\n    at startDevServer (C:\\workplace\\feefo\\feefo-admin-ui\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:363:3)\n    at processOptions (C:\\workplace\\feefo\\feefo-admin-ui\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:350:5)\n    at Object. (C:\\workplace\\feefo\\feefo-admin-ui\\node_modules\\webpack-dev-server\\bin\\webpack-dev-server.js:495:1)\n    at Module._compile (module.js:570:32)\n    at Object.Module._extensions..js (module.js:579:10)\n    at Module.load (module.js:487:32)\n    at tryModuleLoad (module.js:446:12)\n    at Function.Module._load (module.js:438:3)\n    at Module.runMain (module.js:604:10)\n    at run (bootstrap_node.js:383:7)\n    at startup (bootstrap_node.js:149:9)\n    at bootstrap_node.js:496:3\n```\nVersions (working combinations):\n\"webpack\": \"2.7.0\"\n\"webpack-dev-server\": \"2.11.0\" or \"2.5.1\"\nWhich webpack-dev-server version did you base your fix from? And which version of webpack do you have?\nUpdate: I have done a clean install of my npm packages, by clearing the cache and deleting node_modules, and the same error appears.. @byzyk @happypoulp thank you both. I have tried running npm run -s transpile:index instead as I do not have yarn installed, inside of node_modules/webpack-dev-server and I am receiving the following error:\n$ npm run -s transpile:index\nclient-src/default doesn't exist\nSide note: The same error is outputted when running npm run prepublish.\nIt seems that I am having a different result to you both, may be due to the way I have defined and installed byzyk's forked copy (see my previous comment re. package.json). It's missing the client-src/** folder. I will download a zip copy of your changes and report back later.. @happypoulp I have tried running npm install inside of node_modules/webpack-dev-server and as expected, I am receiving the same error because the client-src/** folder does not exist.\nI have now downloaded the zip of branch fix/hmr-disable, deleted the contents of node_modules/webpack-dev-server, then copied the contents of the zip into it. Then ran npm install and npm run prepublish inside of that folder and it no longer errors!\nI have tested running webpack-dev-server and it correctly disables HMR however, I am receiving the following errors in the browser console. Do you see the same errors?\n\n. @happypoulp quite possibly, thank you for checking!\nThis may be due to the v2 webpack and latest webpack-dev-server I am using. We're using this combination because v3 webpack is currently too slow for incremental builds, so have reverted to webpack v2.\nIt seems that this issue is now solved, so please continue \ud83e\udd47 . ",
    "byzyk": "Hey @shellscape, I'd like to work on this PR if no one has started yet.\nThis will be my first contribution to webpack, anything that I should know in advance or any hints where to look up related source files? I'd appreciate that, thanks.. Hey @shellscape, I'd like to work on this PR if no one has started yet.\nThis will be my first contribution to webpack, anything that I should know in advance or any hints where to look up related source files? I'd appreciate that, thanks.. I guess I fixed it in #1276. \n@happypoulp, @benstaker can you check if the fix worked for you?. I guess I fixed it in #1276. \n@happypoulp, @benstaker can you check if the fix worked for you?. @benstaker I tested it with webpack: \"3.10.0\" and fix is based on the latest WDS release which is 2.11.0.\nThis might be related to code builds. As per contributing guide, try this step before testing:\n\nGo to the webpack-dev-server module (cd node_modules/webpack-dev-server), and run npm run prepublish.\n\nLet me know if that helped. @shellscape seems like this PR resolved the issue. Would you be able to review and give your feedback? I see that some tests are failing which is weird since overall coverage increased. . @andreyvolokitin I agree, I also feel like HMR and livereload should be 2 separated features. That's exactly what I stated in PR description. The only reason I haven't implemented it in this PR is that I wanted to confirm this with the project maintainers first.\nHowever, the proposed solution won't disable livereload completely. It'll be still available when hot: true is explicitly set.. @TheLarkInn would you be able to review and give a feedback whether this PR is ok to merge?. @andreyvolokitin please refer to PR description. Suggested changes don't remove so-called live-reload. You'll still have it when explicitly set hot: true, the same way as before. \nAs per #1251 , the issue was that page kept reloading even when hot: false or not specified (HMR is disabled by default) or even with hotOnly: true, which is clearly a bug, isn't it?\nAs we already discussed, currently there is no option to explicitly enable livereload only. It's rather a fallback for HMR, but it would be nice to have it as an option as well. That's why I suggested to add it as a standalone feature and think it's out of the scope of this PR, although I will be more than happy to work on that once confirmed with project maintainers.\nDoes that address your concerns or did I miss something? . @andreyvolokitin thanks for your comment.\nLet me clarify a bit. I can't remember that I've ever said livereload being an addition to HMR. From the very beginning, I stated that those should be 2 distinct features. I'm aware of the fact that livereload is enabled by default, and again I know it's not the same as HMR. \nYour concern is that this PR is aimed to remove livereload feature while again, it's not true. Check the PR description, it will just disable livereload by default which was requested in #1251 and approved by @shellscape. I agree with you that it's not the best way to enable page refresh by actually specifying hot option as it indeed is not relevant. That's why I expressed the same concern in PR description and feel like this can be added as another option cos some people might find it handy. And that's exactly why I asked for reviews from project maintainers, to see how to approach this issue further or if it makes any sense at all (there is a pretty big chance it isn't, and that's fine).\nWhile I appreciate your input, I don't get it why are you so worried about livereload being removed after this is merged, as this PR is not about removing it. However, it might change some default functionality or expected behavior and thank you for pointing it out. But it's not the same as removing feature as a whole.\nJust as a side note, you're referencing docs (which might not be that precise and could be outdated as well), while I'm trying to back up my statements from what I've seen in the source code. Thus, I don't agree with you on hotOnly option, because from code perspective it seemed that livereload was purely meant to be a fallback for HMR. However, I can be wrong on that.\nAnyway, let's wait for the webpack maintainers (@sokra @TheLarkInn @shellscape) to jump in and will see how we should proceed with this one. Otherwise, we can keep this argument going on forever while basically saying almost the same stuff just in different words.\nPeace \u270c\ud83c\udffd. @evilebottnawi thanks, will make those amends when I get a chance.\nWhat is your view on the discussion above? Does it make sense for page reload to be a distinct feature with its own option like live or liveReload so users can enable/disable it explicitly?. @andreyvolokitin I don't see how #1271 is relevant to this. Originally this PR was meant to address #1251 . @andreyvolokitin actually in this PR page refresh should work with hot: true. Have you tested it for your case?. @evilebottnawi do you still think the approach I took here is the right one to move forward with? Based on the discussions above I feel like we should distinguish between livereload and hmr features.. Please check if this PR #1276 fixes an issue for you.. Please check if this PR #1276 fixes an issue for you.. ",
    "happypoulp": "@byzyk works perfectly, thanks!. @byzyk works perfectly, thanks!. @benstaker I had the same issue at first.\nI then did:\ncd node_modules/webpack-dev-server/\nyarn\nyarn transpile:index\nAnd I was able to test the fix.. @benstaker did you run npm install after cd node_modules/webpack-dev-server/ (that's what the yarn command does for me)?\nI used the URL you provided in my package.json to test this PR on my side, so this part should be fine.. @benstaker I did not had those error in my JS console. Maybe the webpack config we use to test this PR differs somehow...\nFTR here's the webpack config I am using:\n```js\nconst path = require(\"path\")\nconst webpack = require(\"webpack\")\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\")\nmodule.exports = (settings) => {\n    return {\n        entry: {\n            app: [\n                path.join(process.cwd(), \"src/index.js\"),\n            ],\n        },\n        output: {\n            filename: \"[name]-[chunkhash].js\",\n            path: path.join(process.cwd(), \"build\"),\n            publicPath: \"/\",\n        },\n        devServer: {\n            contentBase: \"./build\",\n            disableHostCheck: true,\n            historyApiFallback: true,\n            host: \"127.0.0.1\",\n            port: 8181,\n        },\n        resolve: {\n            symlinks: false,\n            modules:\u00a0[path.join(process.cwd(), \"src\"), \"node_modules\"],\n        },\n        module: {},\n        plugins: [\n            new HtmlWebpackPlugin({\n                filename: \"index.html\",\n                template: \"index.html\",\n                inject: true,\n                minify: false,\n            }),\n        ],\n    }\n}\n```. ",
    "sepo27": "Same here for \"webpack-dev-server\": \"^3.1.4\". Actually i've struggled a bit to figure different modes.\nHere is what i found:\nTo disable all \"live updates\"\n\nunset output.publicPath\nTurned out this setting is the real one that controls any \"live updates\" / HMR.\n\n\"Live updates\" mode\n\nset output.publicPath (of the webpack config itself; devServer one won't work)\nrun webpack-dev-server\n\nHMR mode\n\nset output.publicPath\nadd new webpack.HotModuleReplacementPlugin()\nset devServer.httpOnly flag (seems like devServer.hot doesn't work at all)\n\nadd module.hot into index.js:\n```javascript\n    const renderApp = () => {\n      const App = require('./App').App;\n      render(\n        ,\n        document.getElementById('root'),\n      );\n    };\nif (module.hot) {\n  module.hot.accept('./modules/core/App', () => {\n    console.log('=== Hot reloading the app...');\n    renderApp();\n  });\n}\nrenderApp();\n``\n- runwebpack-dev-server`\n\n\nWatch mode\n\ndisable live updates (see above)\nset watch flag (webpack config)\nrun webpack-dev-server\nrun webpack build. Same here for \"webpack-dev-server\": \"^3.1.4\". Actually i've struggled a bit to figure different modes.\nHere is what i found:\n\nTo disable all \"live updates\"\n\nunset output.publicPath\nTurned out this setting is the real one that controls any \"live updates\" / HMR.\n\n\"Live updates\" mode\n\nset output.publicPath (of the webpack config itself; devServer one won't work)\nrun webpack-dev-server\n\nHMR mode\n\nset output.publicPath\nadd new webpack.HotModuleReplacementPlugin()\nset devServer.httpOnly flag (seems like devServer.hot doesn't work at all)\n\nadd module.hot into index.js:\n```javascript\n    const renderApp = () => {\n      const App = require('./App').App;\n      render(\n        ,\n        document.getElementById('root'),\n      );\n    };\nif (module.hot) {\n  module.hot.accept('./modules/core/App', () => {\n    console.log('=== Hot reloading the app...');\n    renderApp();\n  });\n}\nrenderApp();\n``\n- runwebpack-dev-server`\n\n\nWatch mode\n\ndisable live updates (see above)\nset watch flag (webpack config)\nrun webpack-dev-server\nrun webpack build. \n",
    "kmehmety": "I have the same issue. I solved this problem with \"NODE_ENV=production nuxt build\" . ",
    "ForbesLindesay": "I'd appreciate an individual response as to why you think this library is better without the attached change. It's difficult not to be offended by a generic response stating that you do not accept any new features, however small, simple or reasonable they are.\nWhat is your suggestion for how this should be handled?. ",
    "sanonz": "Turned out to be such, no add:\n// webpack.config.js\ndiff\n{\n+    entry: (devClient) => {\n+      return {\n+        app:  './src/setup.server',\n+      };\n+    },\n    output: {\n      path: path.resolve(__dirname, 'dist/server')\n      filename: 'app.js',\n      chunkFilename: '[name].js',\n      libraryTarget: 'commonjs2'\n    },\n    target: 'node'\n  }\nThe update cannot be used:\nhttps://github.com/webpack/webpack-dev-server/commit/f4f14cec31f25ffb46898d1e281fe9569a8569ae#diff-6a9b3dfc5b6956a454f4233ea7a4992cR24. I want to creating isomorphic apps, which contains two webpack configuration files,  one for client app and one for server-side app. The server side app runs in a node environment, so the webpack/hot scripts is not required.. The Node target add https://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js file.\nThe runs in node environment throw error self not defined at line: https://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js#L180\nNode environment need client code?. Sorry, I question write wrong. I make PR and test at tomorrow. Thanks!. What else do I need to do?. It's ok?. ",
    "sethomas": "+1 I am also experiencing the same thing.\n@SpaceK33z what's the status on merging @sanonz PR? . ",
    "vvolodin": "What is the reasoning behind this design decision? If I'm allowed to override publicPath for webpack-dev-server, why can't I use absolute URL? How do I use hot webpack-dev-server with a different backend serving the HTML?. ",
    "werkzeugh": "i ran into the same problem.\n\u279c my workaround is to proxy  the request with the \"requestly\"-extension in chrome:\n\nand i set the CORS-headers in my setup as well.\n. ",
    "stephan-v": "The Webpack community never ceases to amaze me with its stupidity.. ",
    "emodo": "+1. @ganesharulanantham Me too, it took me lots of time to figure out. ",
    "ganesharulanantham": "Same issue, Never realised it is related the version upgrade. ",
    "avaleriani": "Same error here, was working before update.. ",
    "sricc": "Same. v2.9.7 is working fine for me.. ",
    "AjiMIde": "Same error here, was working before update. Use vue-cli to build a new project but....... ",
    "jpamorgan": "Same here!  Still haven't been able to resolve the issue. ",
    "JackSoby": "having the same issue . ",
    "subramn": "Same issue for me as well. ",
    "Vanessa85": "Same error!, I am using v2.9.7 instead v2.10.\n  . ",
    "kylecombes": "This is an issue on Ubuntu 16.04 as well.. ",
    "brettstack": "\"Same here\" comments are not helpful. Please just +1 the issue. If you want to be notified of updates, click the \"Subscribe\" button to the right.. ",
    "ArtOfCode-": "Hit this issue too. Moving back to 2.4.5 is a temporary fix; all higher versions that I've tried have been affected.. @readeujet I am; tried that with no dice.. ",
    "readeujet": "Is anyone here using yarn? Found a good ol' removal of node_modules and an npm install did the trick. ",
    "chetanraj": "installing node modules from yarn is the issue, did npm i it worked.. ",
    "jinyun": "Both yarn and npm can not worked for me , downgrading to 2.9.7\nnode:v8.9.3\nos: ubuntu1604. ",
    "sidlynx": "I got the same problem.I'm using version 2.9.2.node version 8.9.4 on ubuntu 16.tried both npm and yarn I still have the same issue. As stated before.The problem is the new version of webpack-dev-server.A simple downgrade does the trick.\nTry\nnpm install --save-dev webpack-dev-server@2.9.7 and try again. ",
    "jovanNajdic": "Same problem. I'm using v2.9.1, node v9.3.0, windows 10. Tried both npm and yarn.\nworked:\n npm install webpack-dev-server@2.9.7 --save-dev\n and inline:false. ",
    "DanielQuero": "Edit: @guohui8 Solution worked for me (npm install webpack-dev-server@2.9.7 --save-dev). At least until they fixed it.\nHow did you roll back to that version?\nPS: Same Issue on Arch-Linux\n  . ",
    "chabanov": "Someone found a solution to the problem?. \nrollback version is prohibited by the company's protocol. ",
    "guohui8": "I have solved this problem by this command:\nnpm install webpack-dev-server@2.9.7 --save-dev. ",
    "sebtoun": "same here, commit 00e8500b0853312be3cf369976509fbce2a4b7dc seems to have introduced this bug.. for those who have to work with old browsers incompatibles with es6, downgrade to 2.7.1 to have livereload working:\nnpm install --save-dev webpack-dev-server@2.7.1\n  . Downgrading yargs dependency in webpack-dev-server from 10.0.3 to 8.0.2 fixes this issue. So it really looks like it is a yargs problem.. specifically commit 00e8500b0853312be3cf369976509fbce2a4b7dc introduce the bug and even more specifically changing yargs dep from 6.6.0 to 10.0.3. I have the same issue using Firefox 38.4.0: injected client code is not transpiled to es5. \nAs a result firefox complains that let is a reserved keyword. \nThe faulty injected code resides in client/index.js.\nI'm new to webpack and have not grasped its internals yet but there seems to be already some rules in client/webpack.config.js that handles this file and the transpiled file (index.bundle.js) is laying in the node_module/webpack-dev-server/client but this is not the file that is injected in my entry point.\nI don't know what to do to fix and would appreciate any help...\n  . My client company has a very restrictive work environment upgrade policies, I have to support that exact firefox version. It is thus safer for me to develop on the exact same environment and not having livereload really bothers me. I use webpack-dev-server v2.7.1 in the meantime but will upgrade to latest when this is fixed.\nDespite your comment, I still don't get why node_module/webpack-dev-server contains both client/index.js and  client/index.bundle.js (As far as I understand, those are the same code : the source version and the transpiled version) and I can't find where the client/index.js version is used and why it is used in this version (not the transpiled one). Again, I don't really grasp how webpack-dev-server is working in its entirety.. Why not using client/index.bundle.js instead of client/index.js when using inline: true ? Aren't those two versions the same code before and after transpilation|minification ?. The problem is more general than that line and IE11, it is an incompatibility between the whole client code (written with es6) and browsers that do not support all es6 features used.. ",
    "GoKu-gaga": "npm install webpack-dev-server@2.9.7 --save-dev. ",
    "ricosmall": "I solved this problem by reinstall version 2.9.7 of webpack-dev-server:\nyarn add -D webpack-dev-server@2.9.7. ",
    "larister": "Could this be a repeat of https://github.com/webpack/webpack-dev-server/issues/1087?. Public Service Announcement: Please do not comment with +1, Same here, etc. Instead, click the \"thumbs up\" icon underneath the opening post:\n\n. ",
    "yongjie-xu": "I have got the same issue ++1. ",
    "Suixinlei": "same issue, version 2.9.7 will help.. ",
    "Y2Lin": "+1 \nmac os:  10.13.2 \nnode:   v7.2.1. ",
    "micrologic": "I have got the same issue. ",
    "ajhsu": "Got the same issue here, and it breaks the latest version of vue-cli. ",
    "dangger": "Mac OS:10.12.6\nnode:v8.9.4\nnpm:5.6.0\nrollback webpack-dev-server version to 2.9.7 fix it.\nnpm install webpack-dev-server@2.9.7 --save-dev\n. ",
    "mringg": "+1. ",
    "dolgiyspb": "I have got the same issue\nIf i copy webpack-dev-server which installed 2 days ago it works fine (just cp -r /old_project/node_modules/webpack-dev-server/ /new_project/node_modules/).\nrollback version to old versions (2.9.7, 2.9.3) does not fork for me.\n. ",
    "Sun1ive": "faced same issues here, downgrading manually to 2.9.7 helped. ",
    "csvan": "Confirming that this is a yargs issue. For us it happened when moving from \"~10.0.3\" to \"~10.1.1\" on webpack 3.10.. ",
    "quanzhiyuan": "mark. ",
    "ImCharmainejoy": "Operating System: Windows\nNode Version: 8.9.4\nNPM Version: 6.5.0\nwebpack Version: 3.6.0\nwebpack-dev-server Version: 2.9.0\ni'm having the same problem of \ncannot destructure property compile of 'undefined' or 'null'\nand my solution is at @smackgg \nwith this command: npm install --save-dev webpack-dev-server@2.9.7\nThank you so much .. ",
    "antoniobrandao": "It's back up, sorry for the panic.. ",
    "rajkadiyala": "This is a problem again. ",
    "altugyavuz": "same issue +1. ",
    "eugene-gavriloff": "join, same problem +. ",
    "luisbelloch": "Duplicates #1268. That was... 2 hours ago \ud83d\ude05 \nSorry, didn't notice.. ",
    "anymost": "so do I!. ",
    "Ky6uk": "Ahh. It seems to be duplicate of #1259. @evilebottnawi I am not sure, because I am using node v10.5.0 because of the bug. I will try to use the latest node from now. Let's see.. Well, it looks fine for the last day with node v10.9.0. I think we can reopen this issue if something new will happen.. ",
    "tobilen": "@sokra looks like dependencies are still not being transpiled (SS taken with Win8 / IE10):\n\n. ",
    "ripeshade": "devServer: {\n    contentBase: path.join(__dirname, 'src'),\n    watchContentBase: true,\n    hot: true,\n  }\nMaybe, it's some sort of a solution.. ",
    "ChoLinTsai": "@ripeshade \nwatchContentBase this optional setting fixed the issue I have. Now I can use HMR and the HTML also can auto refresh. Thx mate. I think this might be the reason why webpack team did not fix the issue. Because there is a solution already!. ",
    "avdd": "@andreyvolokitin give this a try\nI don't think that contentBase is the right place to put HTML templates.\n. @andreyvolokitin good catch.  I've updated that snippet to compare with the previous emit.. ",
    "cloudratha": "I've had good success using the private watch method provided by the Server.js\njs\nbefore(app, server) {\n    server._watch(`some/path/to/watch/*/**.html`);\n}\nAlthough using an internal (private) method doesn't seem like a good idea.. ",
    "julianxhokaxhiu": "Are you planning on merging and releasing this ASAP? I am also impacted by the same identical issue at the moment.. Thanks, I'll use that temporary until this gets merged :). I tested your drop-in replacement and I still get the same error:\nSyntax error on L2114:\nmodule.exports = input => typeof input === 'string' ? input.replace(ansiRegex(), '') : input;\nit seems that the ansi-module is not transpiled from arrow functions.\n//EDIT: See also https://github.com/zeit/next.js/issues/2747\nThe solution there was to downgrade strip-ansi: https://github.com/zeit/next.js/pull/2860/commits\nSo this PR is really needed.. Yes definitely sure. Feel free to check the project here: https://github.com/julianxhokaxhiu/polysticky.js\n//EDIT:\nFound also the same issue here: https://github.com/zeit/next.js/issues/2747\nIt seems that downgrading strip-ansi is the solution: https://github.com/zeit/next.js/pull/2860/commits. I tested it locally, and it didn't work. So no need to push a commit that is useless.\nFeel free though to try on your side. Remember that you can try locally by using npm run serve. ",
    "HippieJosh": "I am having the same issue with Windows 7.. ",
    "KlausKu": "Same here, under Windows 10.\non one Laptop it works correct, on a second Laptop - same Project - webpack updates if i open only a html file.\n. yes, on my laptops (both) 3.12.0. ",
    "chen88": "The same is happening to my laptop. Using 2.10.1 after reformatting into Windows 10. I'm using visual studio code, and each time I search for a keyword or focus on a file, it recompiles. . It doesn't happen with Sublime. I'm also maintaining an outdated grunt project using VSCode which uses different live reload plugin, and that project has no such problem.. I've updated to the latest Window 10 version through Windows Update, and it stops the recompiling/reload. Visual Studio Code. I'm not saying it doesn't recompile on file save. Just saying the new windows update helps with the issue of random recompiling/reloading which the original poster and others are facing.. ",
    "jtavarez": "FWIW, I have a similar issue with Windows 7 and VS Code, but the issue comes up only with VS Code. There's something happening with the file watchers that it creates (related: https://github.com/Microsoft/vscode/issues/49683). Have you tried using Sublime or another editor?\nFor VS Code, limiting and opening a subset of the project folder seems to help, though it does still happen intermittently in my case.. ",
    "AKArchy": "The code editor I'm using is Notepad++ (currently v7.5.8), opening individual files. (I can also reproduce the issue with plain old Windows 10 Notepad.). ",
    "pgn-vole": "Same problem here, it is also caused by the use of es6 features :\nhttps://github.com/webpack/webpack-dev-server/blob/v2.11.0/client-src/default/index.js#L68\nUnless your build transpile the dependencies it breaks.\n. ",
    "lydell": "I think 2.9.7 is the last version that works in IE11, because 2.10.0 updated strip-ansi from v3 to v4 which introduced ES2015 syntax. https://github.com/webpack/webpack-dev-server/commit/00e8500b0853312be3cf369976509fbce2a4b7dc#diff-b9cfc7f2cdf78a7f4b91a753d10865a2L67. strip-ansi is one of Sindre Sorhus' packages. As far as I can tell, he's been modernizing his modules, dropping support for older Node.js versions. This means being able to use more modern syntax. However, people occasionally use his modules in the browser. Using the tooling of today, such as webpack, it is not common to run your node_modules through Babel. So npm packages end up more or less as-is in the bundled code for browsers. There's a question about shipping transpiled versions of the modules on Sindre's AMA: https://github.com/sindresorhus/ama/issues/446. His response is basically that the problem should be solved by tools such as webpack and Babel. Which is fair. And work is being done on running node_modules through Babel: https://github.com/facebookincubator/create-react-app/pull/3776\nUntil the then, though, I think it would make sense if webpack-dev-server works in IE11 out of the box. Everything else would be a breaking change (and should bump to 3.0.0).\nMy guess is that this was just an oversight. The commit I mentioned, commit 00e8500b0853312be3cf369976509fbce2a4b7dc, has the commit message \"updating deps and patching as necessary\". In other words, one of those routine \"let's update all the dependencies\" type of thing we all do every once in a while in our projects. I think strip-ansi was updated without thinking about that it would end up in the browser.\nI would suggest going back to strip-ansi@3. Looking at the commit log for strip-ansi, basically the only change between version 3 and 4 was requiring Node.js 4+ and using modern syntax. So we wouldn't miss out on anything.\nIt was also mentioned that webpack-dev-server's own source code uses ES2015 syntax, for example in https://github.com/webpack/webpack-dev-server/blob/v2.11.0/client-src/default/index.js#L68. However, that line was added in #1242, which seem to indicate that the code is run through Babel before shipping, so it should not be a problem.\nEdit: Looks like other people made the same conclusion in #1273.. Just noticed there\u2019s a PR for this: #1279. It runs node_modules code through Babel. Cool!. Pinning strip-ansi is definitely quickest quick-fix. Though I have to admit, I haven't tested for sure that strip-ansi contained the only syntax error in IE11. It could be that the parser will just get a little bit further to another syntax error in another updated dep. But I would guess not ;). Thanks, v2.11.1 works great! :tada:. Thanks, v2.11.1 works great! :tada:. Hi! As you already noticed, this is already tracked in #1278. You can help the maintainers of this repo by closing this issue and \ud83d\udc4d:ing the other one!\nAlso see my analysis of the problem here: https://github.com/webpack/webpack-dev-server/issues/1278#issuecomment-358443674\nLuckily, we can just go back to 2.9.7 for the time being :). Hi! This is already tracked in #1278. You can help the maintainers of this repo by closing this issue and \ud83d\udc4d:ing the other one!\nAlso see my analysis of the problem here: https://github.com/webpack/webpack-dev-server/issues/1278#issuecomment-358443674\nLuckily, we can just go back to 2.9.7 for the time being :). See #1279 for a potential solution of running node_modules through Babel.. ",
    "jjacode": "I'm running into the same issue on 2.11.1 due to the ansi-regex file. If I convert the arrow function to a traditional function I can test locally.\n```\n'use strict';\nmodule.exports = function() {//manually changed from () => \n    const pattern = [\n        '[\\u001B\\u009B][\\#;?](?:(?:(?:[a-zA-Z\\d](?:;[a-zA-Z\\d]))?\\u0007)',\n        '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'\n    ].join('|');\nreturn new RegExp(pattern, 'g');\n\n};\n```\nBut that is a manual change to the node_modules folder at: node_modules/ansi-regex/index.js. ",
    "TimvanScherpenzeel": "I'm experiencing this same issue again in webpack-dev-server@3.1.7\n\n\n. ",
    "nikini": "@TimvanScherpenzeel Did you manage to bypass this? I've been battling this for the last 2 days \ud83d\ude22 . ",
    "duanbowen": "@nikini  https://github.com/vuejs/vue-cli/issues/1789 , maybe, it can help you.. ",
    "joe307bad": "I can confirm this is still an issue with version 3.1.14. Anybody have an alternative to developing with webpack in IE 11?\nUpdate: I decided to move to webpack-serve. @dep it looks like this is slated to be fixed in 3.2 \nhttps://github.com/webpack/webpack-dev-server/issues/1286. ",
    "pajasevi": "I have a similar issue. ansi-regex dependency breaks IE11 because it contains:\njs\nmodule.exports = () => {\n    const pattern = [\nPlease fix this.. ",
    "paveleremin": "+1 have same issue, it's because of arrow functions in code. ",
    "houzhitaohzt": "+1 have same issue, it's because of arrow functions in code\nmodule.exports = () => {\n    const pattern = [\n        '[\\u001B\\u009B][\\#;?](?:(?:(?:[a-zA-Z\\d](?:;[a-zA-Z\\d]))?\\u0007)',\n        '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'\n    ].join('|');\nreturn new RegExp(pattern, 'g');\n\n};\n\"webpack\": \"^4.29.3\",\n \"webpack-cli\": \"^3.2.3\",\n \"webpack-dev-server\": \"^3.1.14\",\n \"webpack-merge\": \"^4.2.1\"\n. ",
    "peduarte": "Getting the same error on Chrome v44 (i know\u2026)\nUpgraded from 2.9.5 to 2.11.0.. thanks @SpaceK33z will take a look now.. ",
    "wayofthefuture": "Broke the entire build\n. ",
    "kaiyoma": "This is causing issues with our project too. If I try to upgrade to the latest version, I start getting yarn errors:\nerror \"nyc#string-width#strip-ansi\" is wrong version: expected \"4.0.0\", got \"3.0.1\"\nwarning \"nyc#string-width#strip-ansi#ansi-regex@^2.0.0\" could be deduped from \"2.1.1\" to \"ansi-regex@2.1.1\"\nerror \"nyc#strip-ansi#ansi-regex\" is wrong version: expected \"3.0.0\", got \"2.1.1\"\nerror Found 2 errors.\nWe're currently on version 2.10.0 and would like to upgrade as the dev server is broken in IE11 in this version.. This is causing issues with our project too. If I try to upgrade to the latest version, I start getting yarn errors:\nerror \"nyc#string-width#strip-ansi\" is wrong version: expected \"4.0.0\", got \"3.0.1\"\nwarning \"nyc#string-width#strip-ansi#ansi-regex@^2.0.0\" could be deduped from \"2.1.1\" to \"ansi-regex@2.1.1\"\nerror \"nyc#strip-ansi#ansi-regex\" is wrong version: expected \"3.0.0\", got \"2.1.1\"\nerror Found 2 errors.\nWe're currently on version 2.10.0 and would like to upgrade as the dev server is broken in IE11 in this version.. I'm having a lot of trouble upgrading our project to webpack 4 (webpack-dev-server refuses to \"just work\") and this feature appears to be the only thing that could help. And it's seemingly broken. \ud83d\ude2d . Ah, very interesting. I'm also on Windows and also have spaces in my path, but they can't be removed because they're in the username portion of the path.. ",
    "robvree": "This is also breaking our dev build in IE11. Running node_modules through babel is not a solution. Everything in node_modules should already be transpiled. . Update: Updating from 2.11.0 to 2.11.1 (which uses v3 of strip-ansi) and moving my polyfill for es6-object-assign above the first import in my entry point (not sure if this is related) has fixed my IE11 build.\n```\n// polyFills for IE11 that need to run before the imports\nrequire(\"es6-object-assign\").polyfill();\n// react-hot-loader must come before importing React\nimport \"react-hot-loader\";\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./staffhub/sh-application/components/App\";\nimport DateUtils from \"sh-application/utility/DateUtils\";\nimport StringsStore from \"sh-strings/store\";\nimport { loadTheme } from \"@uifabric/styling\";\nimport { preinitApplication } from \"sh-application\";\nimport { initializeIcons } from \"@uifabric/icons\";\n// polyFills for IE11\nrequire(\"es6-promise\").polyfill();\nrequire(\"string.prototype.startswith\");\nrequire(\"element-closest\");\nrequire(\"ie-array-find-polyfill\");\nrequire(\"array.from\").shim();\nrequire(\"array.prototype.findIndex\").shim();\n```. ",
    "GiancarlosIO": "@haegul what do you mean with 'matches publicPath'? :thinking: \nmy devServer and output objects have the same publicPath :thinking: . ",
    "burtek": "@cheapsteak Does this allow to explicitely set hostname or at least port for socket? I need the socket to connect to a dev server on localhost:3000 from inside another dev site hosted on localhost:80. @cheapsteak got it, thanks for answer. ",
    "flyyang": "What's the status of this PR?. ",
    "THernandez03": "\n@cheapsteak Does this allow to explicitely set hostname or at least port for socket? I need the socket to connect to a dev server on localhost:3000 from inside another dev site hosted on localhost:80\n\nThat should be very nice too, be able to determine the entire url of the socket, not only the path.. ",
    "shangxinbo": "now it throw an error like this :\nUnknown argument: myargv. now it throw an error like this :\nUnknown argument: myargv. ",
    "aikrez": "Might check versions out:\nVersions used in docker\n\nnpm ERR! node v6.12.3\nnpm ERR! npm v3.10.10\n\nAnd you want\n\nNode Version: 8.9.3\nNPM Version: 5.5.1. \n",
    "Drewster727": "@aikrez thanks man -- I eventually got this working (not long after I posted), I did upgrade my node and npm as you said. Forgot to close this!. ",
    "dangodev": "I\u2019m having an issue with code-splitting in v4-beta + WDS (in addition to the fun yargs issue mentioned).\nCode-splitting is trying to load chunks relatively from the path it\u2019s on, rather than absolutely from the root. E.g., if you\u2019re on /pages/about, the chunk is 404-ing trying to load from /pages/1.js rather than /1.js like v3 did.\nNot sure if this is a WDS issue or a webpack v4 issue.\nExample here: https://github.com/dangodev/webpack-v4-code-splitting-test. @damonbauer nice! Just read through that. That\u2019s helpful info, but I don\u2019t think that\u2019s affecting this issue.\nI opened an issue on the core repo. I\u2019m thinking now it\u2019s a webpack thing, not a webpack-dev-server thing.. @SpaceK33z when passing arguments via CLI (e.g., \"start\": \"webpack-dev-server --hot\"), it seems to require installing webpack-cli for yargs. Is this intentional, or a bug?. ",
    "damonbauer": "@dangodev This was just posted a few hours ago, it might be related: https://medium.com/webpack/webpack-4-import-and-commonjs-d619d626b655. ",
    "epeli": "Found couple of issues with the new defaults in Webpack 4.\nVersions:\n\nwebpack-dev-server 3.0.0-beta.1\nwebpack 4.0.0-beta.1\n\nConfig:\njs\nvar config = {\n    mode: \"development\",\n    module: {\n        rules: [\n            {\n                test: /\\.jsx?$/,\n                exclude: /node_modules/,\n                loader: \"babel-loader\",\n            },\n        ],\n    },\n};\nAs the entry is not defined following error is thrown:\nInvalid configuration object. Webpack has been initialised using a configuration object that does not match the API schema.\n - configuration.entry should be one of these:\n   object { <key>: non-empty string | [non-empty string] } | non-empty string | [non-empty string] | function\n   -> The entry point(s) of the compilation.\n   Details:\n    * configuration.entry should be an object.\n      -> Multiple entry bundles are created. The key is the chunk name. The value can be a string or an array.\n    * configuration.entry should be a string.\n      -> An entry point without name. The string is resolved to a module which is loaded upon startup.\n    * configuration.entry[1] should be a string.\n      -> A non-empty string\n    * configuration.entry should be an instance of function\n      -> A Function returning an entry object, an entry string, an entry array or a promise to these things.\nIt works if I define it to entry: \"./src/index.js\" but that should not be required with Webpack 4 as it's the default.\nAnother related thing is that the bundle should be served from /dist/main.js. It seems that it's not served at all. This can be fixed by setting:\njs\noutput: {\n    publicPath: \"/dist\",\n},\nBut it's useable otherwise. Thank you!. Nope, the weppack command works as expected.. Yeah, I can come up with something for sure.. Looking at the code there actually seems to be a default for this:\nhttps://github.com/webpack/webpack-dev-server/blob/v3.0.0-beta.2/bin/webpack-dev-server.js#L267\nCurrently it becomes /main.js when there is no webpack.config.js.\nI but would still like to change it to /dist/main.js to match with Webpack 4.\nThe reasoning is that one would not have to add any config or edit the script tag when using the webpack-dev-server in a Webpack 4 project without the config file.\nIe.\nwebpack-dev-server\nWould be basically same as\nwebpack --watch\npython -m SimpleHTTPServer\nbut with automatic browser reloads.. Yeah, sorry I missed that mark...\nBut is that bad actually since the v3 release can now act as the version with a \"deprecation\" warning about the change? Bit like React does breaking changes.\nAlso the default seems to be currently undocumented?. > Just thinking in some solutions, perhaps we can detect if mode is used and only then apply this change.\nI'm not sure about this. Seems too \"clever\" which can get very confusing. I would not expect it to change with the mode flag...\nWeird. Travis seems to have failed after I added documentation to this PR.. Oh right. Makes sense. Not fan of that but I do think webpack-dev-server should work like the webpack cli as much as possible.. I rebased the pr with this feature.. Did you find anything?. ",
    "chrisckc": "I spotted this and thought i would try it to see if i could simplify my webpack config.\nUnfortunately not, I found that i always need to have either 'webpack-dev-server/client' and/or  'webpack/hot/dev-server' in the 'entry' section when using  --inline and/or --hot on the commandline otherwise the websocket calls are not made and the page never refreshes on changes.\nThis means that the docs on the inline option are a bit misleading.\n. I also found this not to be the case:\nhttps://webpack.js.org/configuration/dev-server/#devserver-hot\n\nNote that webpack.HotModuleReplacementPlugin is required to fully enable HMR. If webpack or webpack-dev-server are launched with the --hot option, this plugin will be added automatically, so you may not need to add this to your webpack.config.js\n\nTried that and the page does not load when --hmr is used without the plugin.\nAlso the wording is a bit odd \"so you may not need to add this\", so that must mean i just have to try it and see then.. ",
    "kryops": "Having the same problem with yarn, I'm behind a proxy as well:\n\nWindows 7\nNodeJS 8.9.2\nYarn 1.3.2\n\nC:\\0\\vc\\frontend-architecture\\src\\main\\frontend>yarn add webpack-dev-server@next --dev\nyarn add v1.3.2\n[1/4] Resolving packages...\nwarning webpack-dev-server > webpack-cli > babel-preset-es2015@6.24.1: \ufffd  Thanks for using Babel: we recommend using babel-preset-env now: please read babeljs.io/env to update!\nwarning webpack-dev-server > webpack-cli > jscodeshift > babel-preset-es2015@6.24.1: \ufffd  Thanks for using Babel: we recommend using babel-preset-env now: please read babeljs.io/env to update!\nerror Refusing to download the git repo {\"hostname\":\"github.com\",\"protocol\":\"git:\",\"repository\":\"git://github.com/kalcifer/recast.git\"} over plain git without a commit hash\ninfo Visit https://yarnpkg.com/en/docs/cli/add for documentation about this command.\nError: Refusing to download the git repo {\"hostname\":\"github.com\",\"protocol\":\"git:\",\"repository\":\"git://github.com/ev1stensberg/generator.git\"} over plain git without a commit hash\n    at C:\\Program Files (x86)\\Yarn\\lib\\cli.js:49352:17\n    at Generator.next (<anonymous>)\n    at step (C:\\Program Files (x86)\\Yarn\\lib\\cli.js:92:30)\n    at C:\\Program Files (x86)\\Yarn\\lib\\cli.js:103:13\n    at <anonymous>. Installing webpack-dev-server@3.0.0-beta.1 is working for me, thanks a lot!\n\ntested with yarn 1.3.2 and npm 5.6.0\nWindows 7\nNodeJS 8.9.2. \n",
    "bhatnagardivyanshu": "Did you get it fixed?. ",
    "egoroof": "Have the same issue :(. ",
    "arkaitzgarro": "@sokra Is there anything we can do? Now that webpack@4 is out of the door, this will block so many upgrades. @TheLarkInn If you have any idea on how to solve it, I'm happy to help.. Hey @SpaceK33z! It works on my side. I cannot fully test it, because some plugins are still failing, but we don\u2019t get this error anymore! \ud83d\udc4d . ",
    "janhommes": "by changing line 69 of lib/Server.js to the following The build works again for MultiCompiler:\njavascript\ncompiler.compilers.forEach((comp) => {\n    comp.plugin('compile', invalidPlugin);\n    comp.plugin('invalid', invalidPlugin);\n    comp.plugin('done', (stats) => {\n      this._sendStats(this.sockets, stats.toJson(clientStats));\n      this._stats = stats;\n    });\n  });\nI think the approach to handling deprecated plugin vs. hooks needs to be updated on webpack side. However, it would be nice if wds could switch to hooks of webpack > 4?. @SpaceK33z works for me as well. Thanks for the fast fix!. ",
    "BigBuckBunny": "Works for me @SpaceK33z,\nNo problems with project 1 of 4, had to use the patch from (https://medium.com/webpack/webpack-4-released-today-6cdb994702d4\n==> yarn add html-webpack-plugin@webpack-contrib/html-webpack-plugin\n\ud83d\udc4d\n. Hey  @SpaceK33z,\n3 different projects work fine on my end.\nThanks\n\ud83d\udc4d\ud83d\udc4d\ud83d\udc4d. ",
    "MattGurney": "I seem to have a similar problem and config, anyone know what the resolution to this is?. ",
    "AMar4enko": "@esausilva unless PR has been merged (or fixed different way) feel free to use \nhttps://github.com/AMar4enko/webpack-dev-server#5c4892dd77e88d0c269912525e2ed717f0dd3c3e\nFix is dead simple. ",
    "esausilva": "@AMar4enko it works thanks. . @SpaceK33z Updated to the latest beta, it is now accepting the --env and --config flags. Thanks.. ",
    "vzorge": "Ok turned out someone had altered the scripts to start the webserver with the --open option. . ",
    "leegee": "Perhpas I misconfigured?\nOn 17 February 2018 at 11:52, Kees Kluskens notifications@github.com\nwrote:\n\nAre you interesting in submitting a PR?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/1307#issuecomment-366433191,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAfTMKvuxcySFZvsz4qH5LRsaiKxL4Ayks5tVq9TgaJpZM4SDU4e\n.\n. Sorry I don't know, I moved on from that shortly afterwards. But thanks for checking.. \n",
    "Apidcloud": "Using webpack-dev-server@3.0.0-beta.1 also solved the following issue:\n```bash\nnode_modules\\webpack-dev-server\\lib\\cli\\util.js:51\n      log();\n      ^\nTypeError: log is not a function\n    at ready (D:\\Workspace\\Github\\scarlett-blast\\node_modules\\webpack-dev-server\\lib\\cli\\util.js:51:7)\n    at Server.devServer.listen (D:\\Workspace\\Github\\scarlett-blast\\node_modules\\webpack-dev-server\\lib\\cli\\start.js:61:7)\n    at Server.returnValue.server.listen (D:\\Workspace\\Github\\scarlett-blast\\node_modules\\webpack-dev-server\\lib\\DevServer.js:179:18)\n    at Object.onceWrapper (events.js:314:30)\n    at emitNone (events.js:110:20)\n    at Server.emit (events.js:207:7)\n    at emitListeningNT (net.js:1371:10)\n    at _combinedTickCallback (internal/process/next_tick.js:135:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n```. ",
    "hugmanrique": "Updating to ^3.0.0-beta.1 fixed the issue! Thanks :). ",
    "engalar": "use 2.11.0 instead (just workaround). ",
    "FLighter7": "I have the following structure:\ndest\n    index.html\nnode_modules\nsrc\n    index.css\n    index.js\npackage-lock.json\npackage.json\nwebpack.config.js\nAnd code:\npackage.json\n{\n    \"name\": \"test\",\n    \"author\": \"test\",\n    \"license\": \"MIT\",\n    \"version\": \"1.0.0\",\n    \"main\": \"index.js\",\n    \"devDependencies\": {\n        \"css-loader\": \"^0.28.9\",\n        \"extract-text-webpack-plugin\": \"^3.0.2\",\n        \"webpack\": \"^3.11.0\",\n        \"webpack-cli\": \"^2.0.9\",\n        \"webpack-dev-server\": \"^3.0.0\"\n    }\n}\nindex.html\n<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div>Hello world!</div>\n    <script src='script.js'></script>\n</body>\n</html>\nindex.css\ndiv{\n    color: red;\n}\nindex.js\nimport './index.css';\nwebpack.config.js\n```\nconst ExtractCSS = new (require('extract-text-webpack-plugin'))('style.css');\nmodule.exports =\n{\n    entry:      ${__dirname}/src/index.js,\n    output: {\n        path:       ${__dirname}/dest,\n        filename:   'script.js?[hash]',\n        publicPath: '/',\n    },\n    module: {\n        rules: [{\n            test: /.css$/,\n            use: ExtractCSS.extract('css-loader')\n        }]\n    },\n    plugins: [ExtractCSS],\n    devServer: {\n        contentBase: ${__dirname}/dest,\n        publicPath: '/',\n    }\n}\n```\nIf I use webpack - OK\nIf webpack-dev-server - OK, with full page reloading\nIf webpack-dev-server --inline - OK, with full page reloading\nIf webpack-dev-server --inline --hot or webpack-dev-server --inline --hot --hot-only - Error, because HMR doesn't work. Only full page reloading, if I change index.js. But if index.css was changed webpack-dev-server compiles a new bundle, but in Chrome console I see:\n[HMR] Checking for updates on the server...\n[HMR] Nothing hot updated.\n[HMR] App is up to date.\nWhy \"nothing\" ?\nDoes someone know the solution?\nP.S. webpack, webpack-dev-server, webpack-cli are installed in global and local scope.. The problem was in extract-text-webpack-plugin.\nBased on No Hot Module Replacement #222\nWith style-loader everything is okay.. ",
    "codepushr": "Getting another error with version 3.1.2\n(using standard style-loader + css-loader)\nChanging the background color from red to blue:\n[Info] [WDS] App updated. Recompiling... (bundle.js, line 27131, x2)\n[Info] [WDS] App hot update... (bundle.js, line 27274)\n[Error] TypeError: undefined is not an object (evaluating 'lastHash.indexOf')\n    upToDate (bundle.js:27651)\n    (anonymous function) (bundle.js:27695)\n    emit (bundle.js:1176)\n    reloadApp (bundle.js:27277)\n    ok (bundle.js:27190)\n    onmessage (bundle.js:27494)\n    dispatchEvent (bundle.js:20222)\n    (anonymous function) (bundle.js:20935)\n    forEach\n    _transportMessage (bundle.js:20933)\n    (anonymous function)\n    emit (bundle.js:20138)\n    onmessage (bundle.js:23009)\nHowever everything is working with version 3.0.0:\n[Info] [WDS] App hot update... (bundle.js, line 27274)\n[Log] [HMR] Checking for updates on the server... (bundle.js, line 27804)\n[Log] [HMR] Updated modules: (bundle.js, line 27804)\n[Log] [HMR]  - ./src/style.css (bundle.js, line 27796)\n[Log] [HMR]  - ./node_modules/css-loader/index.js!./src/style.css (bundle.js, line 27804)\n[Log] [HMR] App is up to date. (bundle.js, line 27804). ",
    "JayAndCatchFire": "I believe the reason this is happening is because of the initial variable in the client source.  I suspect it's the culprit because if you correct the client code that's causing a built-time error, reintroduce the erroneous code, and then remove it a second time, the app will be reloaded as expected.. You're very welcome. I'd really love to add some unit tests to my PR, but the client code doesn't seem to have any tests that I could find. I'd love any help or guidance you could give me as to the best way to unit test that code. . What's going on with travis-ci?  It's been stuck in yellow dot status for 15 hours.. @sokra @shellscape @SpaceK33z Can someone please give travis-ci a kick?  It's been stalled for 2 days.. ",
    "chenxsan": "So the cli.js doesn't exist in webpack-dev-server?. ",
    "thescientist13": "Perfect, thank you @michael-ciniawsky !  This solved the issue for me \ud83d\udc4d . ",
    "sergebat": "@SpaceK33z thanks. I'll try to reproduce with raw 'webpack-dev-middleware' over weekend, and if it occurs there, will create and link issue there. . @SpaceK33z thanks. I'll try to reproduce with raw 'webpack-dev-middleware' over weekend, and if it occurs there, will create and link issue there. . @SpaceK33z interestingly enough, things seem work fine on webpack-dev-middleware:\nhttps://github.com/sergebat/test-webpack-lazymode/blob/master/testmw.js\nFile above works fine on Ubuntu node testmw.js for me (not on Windows, as things seem to be broken there the hard way, but that's another issue I guess https://github.com/webpack/webpack-dev-middleware/issues/270)\nAt the same time, node_modules/.bin/webpack-dev-server displays \"Cannot GET /bundle.js\" for me on Ubuntu. \nIn case it helps someone diagnose the issue, it starts to work if path is explicitly and incorrectly specified like this:\n```\n'use strict';\nmodule.exports = {\n  entry: './app.js',\n  mode: \"development\",\n  output: {\n    filename: \"bundle.js\",\n    path: \"/\" // <- :) \n  },\n  devServer: {\n    lazy: true\n  }\n};\n```\n. @SpaceK33z interestingly enough, things seem work fine on webpack-dev-middleware:\nhttps://github.com/sergebat/test-webpack-lazymode/blob/master/testmw.js\nFile above works fine on Ubuntu node testmw.js for me (not on Windows, as things seem to be broken there the hard way, but that's another issue I guess https://github.com/webpack/webpack-dev-middleware/issues/270)\nAt the same time, node_modules/.bin/webpack-dev-server displays \"Cannot GET /bundle.js\" for me on Ubuntu. \nIn case it helps someone diagnose the issue, it starts to work if path is explicitly and incorrectly specified like this:\n```\n'use strict';\nmodule.exports = {\n  entry: './app.js',\n  mode: \"development\",\n  output: {\n    filename: \"bundle.js\",\n    path: \"/\" // <- :) \n  },\n  devServer: {\n    lazy: true\n  }\n};\n```\n. ",
    "ArnaudD": "Setting the filename option fixed the problem in my case : \ndevServer: {\n  lazy: true,\n  filename: 'index.html',\n}. Setting the filename option fixed the problem in my case : \ndevServer: {\n  lazy: true,\n  filename: 'index.html',\n}. ",
    "NafaaBout": "This issue is still there, I tried all the above-mentioned solutions and no one works. I'm just following the guides and I just tried to play with the different options when I reached the Development section.\n```\nconst path = require('path');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst WebpackManifestPlugin = require('webpack-manifest-plugin');\nconst distFolder = path.resolve(__dirname, 'dist');\nconst filename = 'bundle.js';\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n    print: './src/print.js'\n },\nplugins: [\n    new CleanWebpackPlugin(distFolder),\nnew HtmlWebpackPlugin({\n  title: 'Hello from Output Management'\n})\n\n],\ndevtool: 'inline-source-map',\ndevServer: {\n    open: true,\n    contentBase: distFolder,\n    port: 8008,\n    compress: true\n  },\n  output: {\n    filename: filename,\n    path: distFolder\n  }\n}\n```. This issue is still there, I tried all the above-mentioned solutions and no one works. I'm just following the guides and I just tried to play with the different options when I reached the Development section.\n```\nconst path = require('path');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst WebpackManifestPlugin = require('webpack-manifest-plugin');\nconst distFolder = path.resolve(__dirname, 'dist');\nconst filename = 'bundle.js';\nmodule.exports = {\n  mode: 'development',\n  entry: {\n    app: './src/index.js',\n    print: './src/print.js'\n },\nplugins: [\n    new CleanWebpackPlugin(distFolder),\nnew HtmlWebpackPlugin({\n  title: 'Hello from Output Management'\n})\n\n],\ndevtool: 'inline-source-map',\ndevServer: {\n    open: true,\n    contentBase: distFolder,\n    port: 8008,\n    compress: true\n  },\n  output: {\n    filename: filename,\n    path: distFolder\n  }\n}\n```. ",
    "alexkrolick": "Seems to be fixed: https://github.com/webpack/webpack-dev-middleware/pull/267. Seems to be fixed: https://github.com/webpack/webpack-dev-middleware/pull/267. ",
    "gitterchris": "It looks like v3.1.0 still has the deprecation warning even though webpack-dev-middleware is already updated. Can you please check?\n. It looks like v3.1.0 still has the deprecation warning even though webpack-dev-middleware is already updated. Can you please check?\n. ",
    "foxxyz": "Looks like it was updated in 2b40391bcfa848d5d8e61f5cbeaf350e01198c39 which was committed after the last release was already out. So we're just waiting for the next release.. Looks like it was updated in 2b40391bcfa848d5d8e61f5cbeaf350e01198c39 which was committed after the last release was already out. So we're just waiting for the next release.. Confirming the deprecation warning no longer appears. Thanks @SpaceK33z!. Confirming the deprecation warning no longer appears. Thanks @SpaceK33z!. ",
    "osenvosem": "Updated to version 3.1.1 and still am having this warning for some reason. Maybe because I'm using WDS Node API... \ud83e\udd14. Updated to version 3.1.1 and still am having this warning for some reason. Maybe because I'm using WDS Node API... \ud83e\udd14. @SpaceK33z  Only two standard plugins: webpack.HotModuleReplacementPlugin and webpack.DefinePlugin.\nHere is the code: https://github.com/osenvosem/typescript-full-stack-boilerplate. @SpaceK33z  Only two standard plugins: webpack.HotModuleReplacementPlugin and webpack.DefinePlugin.\nHere is the code: https://github.com/osenvosem/typescript-full-stack-boilerplate. @foxxyz then, I suppose the issue somewhere on my side. Will be investigating. . @foxxyz then, I suppose the issue somewhere on my side. Will be investigating. . ",
    "arloduff": "I'm currently trying to do that as a workaround, but my thinking is that if the publicPath is /foo then anything inside /foo such as /foo/bar or /foo/bar/goo should also redirect to that index.html. Or if that's not one of the purposes of publicPath, then perhaps another variable to specify what the home route of your application is.. I'm currently trying to do that as a workaround, but my thinking is that if the publicPath is /foo then anything inside /foo such as /foo/bar or /foo/bar/goo should also redirect to that index.html. Or if that's not one of the purposes of publicPath, then perhaps another variable to specify what the home route of your application is.. Thanks, had been looking at that, but maybe I had misunderstood the documentation.. Thanks, had been looking at that, but maybe I had misunderstood the documentation.. ",
    "astorije": "I'm with @billyjanitsch here, the default should be development, and I wouldn't deem bad practice to have sensible defaults.\nOverriding the default using mode, --mode, or NODE_ENV should still be expected, but the default shouldn't be production IMO.. ",
    "paleite": "This would be a really nice enhancement.\nwebpack-dev-server with default mode production is unexpected to me.\nIf there was a webpack-production-server, I wouldn't expect it to have default mode development, either.\nHowever, if this repo was called webpack-server, I could understand the argument of not having a default mode (even though that probably goes against the zero-conf policy).. This would be a really nice enhancement.\nwebpack-dev-server with default mode production is unexpected to me.\nIf there was a webpack-production-server, I wouldn't expect it to have default mode development, either.\nHowever, if this repo was called webpack-server, I could understand the argument of not having a default mode (even though that probably goes against the zero-conf policy).. ",
    "kjellski": "I've got the exact same issue, just updated all packages to the very latest versions:\n\"react-hot-loader\": \"^4.0.0\",\n\"webpack\": \"^4.1.1\",\n\"webpack-cli\": \"^2.0.10\",\n\"webpack-dev-server\": \"^3.1.0\"\n\n@SpaceK33z any Idea on how to pin this issue down to a specific package?. ",
    "JannesMeyer": "In another issue it was mentioned that this is happens when you include the HotModuleReplacementPlugin twice. Apparently the --hot flag adds it to your plugins automatically.. Sorry, I don't have time to investigate further neither. I just thought I'd report it in case anyone is interested.. ",
    "uuhan": "@JannesMeyer Thanks, it works fine when I remove the HotModuleReplacementPlugin.. ",
    "Nufeen": "Downgrading webpack-dev-server to 3.0.0 works fine. . ",
    "belachkar": "1 - Upgrade webpack to v4, you must change the webpack.config.js file for compatibility. or\n2 - Downgrade webpack-dev-server to exactly v3.0.0 as @Nufeen said.. ",
    "byamasu-patrick": "Hey I am facing with the same problem too. ",
    "kontrollanten": "@byamasu-patrick for me it was solved by installing webpack-dev-server. I guess it was included in webpack before.. ",
    "ooflorent": "You can add the following to your package.json:\njson\n{\n  \"devDependencies\": {\n    \"webpack-dev-server-old\": \"npm:webpack-dev-server@2.7.1\"\n  }\n}. github: is also supported. Hmm, you are right. npm does not support package renaming. However, we won't publish the package under a different name. The remaining options are:\n\nuse yarn (best)\ncreate a local package webpack-dev-server-old which has a dependency to webpack-dev-server@2.7.1 so npm will install both\npublish webpack-dev-server-old for yourself (worst). \n",
    "dave-irvine": "@Ooflorent that only works in yarn, not npm . ",
    "j0j00": "Any idea when this will be resolved into master? It's currently breaking my build.. Will rebase and create a new PR off this and  https://github.com/webpack/webpack-dev-server/issues/1441.. Yup, if he isn't able to reply soon, I'll probably just rebase this PR and move on.. I'm looking to rebase this PR and write some tests for your PR so it can be merged in.\nDo you have a sample use-case/webpack config for the websocket emission issue?\nI don't think it's a good either to simply skip the compilation hooks in case some plugins rely on them to function.. This PR supposedly supercedes #1338, by attempting to solve some websocket hot reload issues which that PR doesn't address.\nI don't have this websocket issue myself so I'm asking @EloB for clarification on a way to replicate it.. It's difficult to test if we don't know his exact use case, my node target currently uses custom plugins, so I have a feeling his change will break that.\nI just want to confirm if it's an issue with way he wrote his webpack config (and he's configured or used it wrong).\nhttps://webpack.js.org/concepts/targets/. ",
    "hamms011": "I have the same problem, can anyone tell me the solution? . ",
    "The-Bobby": "I was having this issue too. Looks like they're taking care of it.\nhttps://github.com/webpack/webpack/commit/fcf634c81956b7959f83bc9f140db37cc628e92a#diff-f995afcfa4e47968fef81836a5da0bca\n. Looks like it's fixed in the last release! Let us rejoice!\nhttps://github.com/webpack/webpack/releases/tag/v4.2.0. ",
    "MaximeHeckel": "~~I know this has apparently been fixed in webpack 4.2.0, but I'm seeing the same exact issue in webpack 4.5.0~~\n~~Any idea how this could happen?~~\nI seem to have got some versioning issues here, and ended up on the wrong webpack version. . ",
    "wochap": "i think, you need to add the statsoption in your webpack config file, https://webpack.js.org/configuration/stats/#stats\ndiff\nconst devWebpackConfig = merge(baseWebpackConfig, {\n+  stats: {\n+    colors: true,\n+    children: false,\n+    chunks: false,\n+    chunkModules: false,\n+    modules: false\n+  },\n  devServer: {\n+    stats: {\n+      colors: true,\n+      chunks: false\n+    }. ",
    "aeolusheath": "@wochap bro, it did not work. ",
    "drewjenkins": "I kind of thought that may be the case. I'll move this issue over to the main webpack repo :)\nFor anyone else running into this, here's a link to the issue I created on the main Webpack repo https://github.com/webpack/webpack/issues/6767. ",
    "p3x-robot": "Same here, can't work Webpack anymore (just like UglifyJs3 about 4 times slower), looks the same with Webpack case.. ",
    "ajain17": "I had the same issue with Webpack version 4.27.1 and Node V8, V10. I just upgraded my node version to 11.11.0 and my initial build is down from 2 mins to 1min and HMR time is down from 2 mins to 12 seconds. . ",
    "mcmilj": "Adding --host 0.0.0.0 fixed this for me.. ",
    "phiphou": "Was an error from me, sorry.. ",
    "icai": "found the solution:\nRegExp need to ignore  suffix json and  some HMR urls\njs\n      app.get('*', function(req, res, next) {\n        // hidden html suffix\n        // Inspired https://github.com/kapouer/express-urlrewrite\n        if (!/(webpack-dev-server|sockjs|__webpack_dev_server__|assets|static|api|\\.(png|jpe?g|gif|svg|woff2?|eot|ttf|otf|mp4|webm|ogg|mp3|wav|flac|aac|js|json|css|html|ico|pdf)(\\?.*)?$)/.test(req.path)) {\n            var opath = req.path\n            var npath = opath == '/' ? '/' : opath + '.html'\n            res.redirect(req.url.replace(opath, npath))\n            return false;\n        }\n        next();\n      });\n. ",
    "cmseaton42": "Has anyone had time to consider this or help me understand how I might replicate this feature with the existing module?. ",
    "ndabAP": "@DCbryant which version do you use now?. ",
    "styks1987": "I had a similar issue but it was due to not having webpack-cli installed locally. . ",
    "rohan-paul": "Had this issue today, and went away, after upgrading webpack to 4.5.0 and also installing webpack-cli locally... ",
    "zvs001": "npm i webpack@latest -g helps me. ",
    "MgSam": "So this happened because webpack pushed breaking changes in a minor version and most people probably have their package.json file with a carrot or tilde in front of the webpack dependencies. Removing that carrot or tilde to freeze to the version specified and running npm install fixed the problem for me.\nI think it's extremely irresponsible for webpack to have made these breaking changes in a minor version. The webpack CLI separation should have only occurred in a major release. You have literally millions of people depending on this package, please put some more thought into release numbers.. ",
    "kopax": "I have this error in a lerna project when I try to install in two different package it then fail to find the module webpack-cli:\n```bash\n$ ./node_modules/.bin/webpack-dev-server --progress --color --hot --watch --mode development\nThe CLI moved into a separate package: webpack-cli.\nPlease install 'webpack-cli' in addition to webpack itself to use the CLI.\n-> When using npm: npm install webpack-cli -D\n-> When using yarn: yarn add webpack-cli -D\nmodule.js:559\n    throw err;\n    ^\nError: Cannot find module 'webpack-cli/bin/config-yargs'\n    at Function.Module._resolveFilename (module.js:557:15)\n    at Function.Module._load (module.js:484:25)\n    at Module.require (module.js:606:17)\n    at require (internal/module.js:11:18)\n    at Object. (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/webpack-dev-server/bin/webpack-dev-server.js:65:1)\n    at Module._compile (module.js:662:30)\n    at Object.Module._extensions..js (module.js:673:10)\n    at Module.load (module.js:575:32)\n    at tryModuleLoad (module.js:515:12)\n    at Function.Module._load (module.js:507:3)\nerror An unexpected error occurred: \"Command failed.\n````\nso I moved it to the top package.json, and then I have this error:\n```bash\nyarn run v1.5.1\n$ ./node_modules/.bin/webpack-dev-server --progress --color --hot --watch --mode development\n/home/dka/workspace/github.com/yeutech/react-admin/node_modules/webpack/node_modules/ajv-keywords/keywords/instanceof.js:52\n    throw new Error('invalid \"instanceof\" keyword value ' + c);\n    ^\nError: invalid \"instanceof\" keyword value Promise\n    at getConstructor (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/webpack/node_modules/ajv-keywords/keywords/instanceof.js:52:11)\n    at Ajv.compile (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/webpack/node_modules/ajv-keywords/keywords/instanceof.js:21:27)\n    at Object.useCustomRule (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/compile/index.js:275:26)\n    at Object.generate_custom [as code] (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/dotjs/custom.js:32:24)\n    at Object.generate_validate [as validate] (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/dotjs/validate.js:347:35)\n    at Object.generate_anyOf [as code] (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/dotjs/anyOf.js:34:27)\n    at generate_validate (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/dotjs/validate.js:347:35)\n    at localCompile (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/compile/index.js:87:22)\n    at Ajv.compile (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/compile/index.js:56:13)\n    at Ajv._compile (/home/dka/workspace/github.com/yeutech/react-admin/node_modules/ajv/lib/ajv.js:358:27)\nerror An unexpected error occurred: \"Command failed.\nExit code: 1\n```\nI have tried to downgrade webpack from 4.5.0 to 4.2.0 as @silky recommend but that doesn't help.\nAny idea on how to solve this?\n. ",
    "GQM-dong": "maybe you can change your package.json\nupdate the webpack to 4.X \ndelete your node_modules\nnpm install again\nand then it's work. ",
    "BrandonDickson": "@kopax, I was able to solve this by updating lerna to 2.10.0 from 2.0.0-rc5, and updating webpack in all my package.json files. I believe the problem stemmed from the fact that I was updating webpack one project at a time, and I was hoisting the modules with lerna, but the updates resolved it.. ",
    "HamidOsouli": "remember to lower your webpack-dev-server globaly not localy use : \nnpm install webpack-dev-server@2.9.1 -g --save-dev and after that you are set. ",
    "kunwang0916": "npm install webpack-dev-server@2.x, works for me.\n. ",
    "realgs": "I read this topic for a second time within 2 weeks so I decided to write down my own suggestions in case I will come back anytime in the future;) The below is a complete list of dependencies I had to upgrade to upgrade from vulnerable react-dom@16.0.0 to @16.0.1:\n\u276f yarn add react@16.0.1 react-dom@16.0.1 webpack-dev-server@3.1.14 live-server@1.2.1 extract-text-webpack-plugin@next\n\u276f yarn add -D webpack-cli\nremove node_modules\nnpm install\nadd --mode development to your CLI command (webpack-dev-server --mode development)\ntry again to start the project with yarn run dev-server (or whatever is your script to run the project locally)\n. ",
    "VijayKrish93": "I am facing the same issue as well.I was wondering when WDM supports this option why wont WDS support it ? and I end up here . I Would be pleased to see this simple thing shipped in the next release. As mentioned in 'Readme' I believe no features will be accepted until the maintenance work is complete. ",
    "Binarytales": "Given that this project is no longer in maintenance mode (https://github.com/webpack/webpack-dev-server/commit/6c1d8d8ea1c06831a4360cdb661cc58bb52d77ec#diff-04c6e90faac2675aa89e2176d2eec7d8) could this issue be reopened as this functionallity would be very handy for me right now.. ",
    "kenotron": "@sokra - can you please merge after my update?. @shellscape would you mind taking this change? Not everyone in the world can afford to move to the next new thing. I think this little bit of maintenance mode change would benefit quite a LOT of people who still must stick with patch / minor changes.. @sokra - can you merge this?. @SpaceK33z the hash option didn't significantly do anything to our build times, so I think it's probably okay to leave it be. I'd report another bug if we noticed any anomalies.. @SpaceK33z I know this is super in maintenance mode (v2), but would you mind merging this one too?  The v2 branch somehow is faster than v3, so at scale, we're still having to use this.. will do!. Updated. ",
    "fitzgen": "Closing in favor of https://github.com/webpack/webpack/issues/6475. @scottjmaddox I suggest filing a new issue with STR and test case. I'm not a maintainer for webpack-dev-server or familiar with its internals at all, but that is probably the best way to push forward on the issue.. ",
    "scottjmaddox": "@fitzgen I think this should be reopened. This is still an issue with webpack-dev-server, but no longer with normal webpack builds. Building with webpack and then hosting with a separate file server works fine, but hosting with webpack-dev-server results in the same old RangeError: WebAssembly.Instance is disallowed on the main thread, if the buffer size is larger than 4KB. Use WebAssembly.instantiate... ",
    "lizux": "+1.\nMy error msg is 'lastHash is undefined'. ",
    "SolidZORO": "+1.\n\"webpack-dev-server\": \"^3.1.1\". @happystory  I just rollback \"webpack-dev-server\": \"3.1.0\", is work and waitting bug fixed.. ",
    "happystory": "when I upgrade webpack-dev-server from \"^3.1.1\"  to \"^3.1.2\", I encountered the same problem, how to fixed it?. ",
    "Topppy": "+1\n\"webpack-dev-server\": \"^3.1.2\"\n. ",
    "faceyspacey": "Apparently this has to do with the hard-source-webpack-plugin. When building from cache, it doesn't re-create dynamic chunks.. ",
    "dokkis": "I am experiencing the same issue on Safari mobile using the Safari of iOS simulator.\nOn desktop everything works fine in Safari and Chrome.\nWere you able to solve it somehow?\nThanks!. ",
    "44db": "+1. ",
    "ughitsaaron": "+1. It's not at all an ideal solution but I was able to at least stop the constant reloading by setting inline: false.. ",
    "LukeMizuhashi": "For what it's worth--if you don't mind using an SSL certificate that requires a little sysops setup on your part, you can use https://letsencrypt.org/ to get free certificates for your dev environment that are trusted by most systems.\nIf you don't mind using certificates where your private key may or may not be private, try https://zerossl.com/ , an online tool that uses Let's Encrypt as a backend to generate valid certificates for SSL.\nOnce I had a valid SSL Certificate coming out of my Webpack Dev Server, this bug went away on iOS Safari.\nJavaScript\n// ...\ndevServer: {\n    inline: true, // Yeah!\n    https: {\n        key: fs.readFileSync(\"< path to your private key >\"),\n        cert: fs.readFileSync(\"< path to your valid certificate >\"),\n    },\n    public: '< your domain name for your development environment>',\n    host: '< an ip address that works for you, maybe 0.0.0.0 >',\n    port: 443,\n    // and so on\n},\n// .... ",
    "phil-lgr": "I think webpack-dev-server is fine, here is how I made it work:\n\nInstall mkcert  https://github.com/FiloSottile/mkcert\nGenerate a CA and certificate for your project, make sure to include the external ip, e.g: \nmkcert --install\nmkcert 192.168.86.42 localhost 127.0.0.1 0.0.0.0\non my iPhone I sent my certificate by email (the PEM file is fine) and accept it with the mail app\non iOS, go in About > Certificate Trust Settings, toggle Enable Full Trust For Root Certificates\nmake sure you start webpack with --host 0.0.0.0 --cert=./<your.pem> --key=./<your pem key> --https\non Safari, navigate to https://192.168.86.42:9000\n. v3.2.0 broke my --https setup with --host I get the autogenerated certificate instead of the one I pass in parameters. I don't understand the changes here: https://github.com/webpack/webpack-dev-server/commit/0b89fd9#diff-15fb51940da53816af13330d8ce69b4e cc @evilebottnawi \n\n@shobhitsharma  It's sad that such a change was merged and released! Hopefully your revert can be merged quickly!\n. Repro: https://github.com/phil-lgr/repro-https-issue\nThis in on Windows 10, Node LTS\nnode -v\nv10.14.0\n\n\nwith \"webpack-dev-server\": \"3.1.14\":\n\nit actually read the correct key\n. Looks like v3.2.0 just ignores --cert --key and the other --https args? let me know if you have any questions. Hi can we merge this ASAP @evilebottnawi @hiroppy \ud83d\ude4f . ",
    "philipbordallo": "I ran into this issue as well, usually when going between different projects that use webpack-dev-server and https.  What worked for me, albeit a somewhat excessive solution, was clearing the iOS Safari browser data (Settings \u2192 Safari \u2192 Clear History and Website Data). . @tr1s make sure your config for devServer is correct and you are pointing to the certs you made with mkcert.\nFor example,\n```js\n// webpack.dev.js\nconst merge = require('webpack-merge');\nconst common = require('./webpack.common.js');\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'inline-source-map',\n  devServer: {\n    contentBase: './dist/',\n    https: {\n      key: fs.readFileSync('./$DOMAIN-key.pem'),\n      cert: fs.readFileSync('./$DOMAIN.pem'),\n      ca: fs.readFileSync('/Users/$USERNAME/Library/Application Support/mkcert/rootCA.pem'),\n    }\n  }\n});\n```\nSee the documentation for more.. ",
    "tresko": "I also have the same problem that only appears on Windows, but on Mac and Ubuntu, it works fine.\n\nOperating System: Windows 10 x64\nNode Version: 9.11.1\nYarn Version: 1.3.2\nwebpack Version: 4.5.0\nwebpack-dev-server Version: 3.1.3. @MitchTalmadgeUofU you can use the following versions; these are the last ones that worked for me:\n\n\n\"html-webpack-plugin\": \"^3.2.0\",\n \"webpack\": \"^4.5.0\",\n \"webpack-dev-server\": \"3.1.0\"\n\nI receive Cannot GET / on Windows for all versions which are higher than 3.1.0.\nIs this related? https://github.com/webpack/webpack-dev-middleware/issues/270\n. ",
    "MitchTalmadgeUofU": "I downgraded back to these versions:\n\"html-webpack-plugin\": \"^2.30.1\",\n\"webpack\": \"^3.8.1\",\n\"webpack-dev-server\": \"^2.9.3\"\nAnd I can confirm that it works again. This seems to be a problem with upgrading to webpack 4\n. I downgraded back to these versions:\n\"html-webpack-plugin\": \"^2.30.1\",\n\"webpack\": \"^3.8.1\",\n\"webpack-dev-server\": \"^2.9.3\"\nAnd I can confirm that it works again. This seems to be a problem with upgrading to webpack 4\n. @ejnu I can confirm, the problem is solved by removing spaces from the path. Particularly, the contentBase is what must have no spaces in the path.\nIt is quite clear this is a webpack-dev-middleware bug, so everyone please follow this issue until it is fixed, then we can update the dependency in this repository after a fix is released:\nhttps://github.com/webpack/webpack-dev-middleware/issues/296. @ejnu I can confirm, the problem is solved by removing spaces from the path. Particularly, the contentBase is what must have no spaces in the path.\nIt is quite clear this is a webpack-dev-middleware bug, so everyone please follow this issue until it is fixed, then we can update the dependency in this repository after a fix is released:\nhttps://github.com/webpack/webpack-dev-middleware/issues/296. ",
    "GuacheSuede": "@tresko I verify your solution works \ud83d\udc4d . However Webpack Dev Middleware issue still persists, only Version of 3.0.1 for Webpack Dev Middleware works, below(MIME type issue) or above(Cannot GET /) all fails.. ",
    "ejnu": "ok i got this - thanks to this issue - https://github.com/webpack/webpack-dev-server/issues/1375\nfor now - you need remove spaces from the project path. probably You have space in project path - check this - https://github.com/webpack/webpack-dev-server/issues/1373. probably You have space in project path - check this - https://github.com/webpack/webpack-dev-server/issues/1373. ",
    "kasperhhk": "I think this issue is caused by webpack/webpack-dev-middleware#297 , which has been solved yesterday, and a new release of webpack-dev-middleware has come out (v3.1.3) immediately after. This repo should probably update the version it's using from 3.1.2 to 3.1.3.. ",
    "s-h-a-d-o-w": "\nI receive Cannot GET / on Windows for all versions which are higher than 3.1.0.\n\nOdd, 3.1.1 still works for me.\nJust created a project from scratch based on the official webpack docs, got the \"Cannot GET /\" error, downgraded to 3.1.1 and everything is good.. ",
    "nguyenkhois": "This issue has been fixed in version 3.1.4. It works finne for me now \ud83d\udc4d  Thanks so much! \ud83e\udd47 . This issue has been fixed in version 3.1.4. It works finne for me now \ud83d\udc4d  Thanks so much! \ud83e\udd47 . @dandohotaru\n- Webpack Dev Server 3.1.1 or 3.1.4 works fine for me and I rely on 3.1.1. I have not used so much this version 3.1.4 but I think it works very well.\n- Webpack - I use the latest version and it works without a problem.\n- Plugins: You decide what fits your project. You can view my simple example here\nHave a nice day!. @dandohotaru\n- Webpack Dev Server 3.1.1 or 3.1.4 works fine for me and I rely on 3.1.1. I have not used so much this version 3.1.4 but I think it works very well.\n- Webpack - I use the latest version and it works without a problem.\n- Plugins: You decide what fits your project. You can view my simple example here\nHave a nice day!. @PatelDipen92 Have you tried to use \"./\" before output and dist?:\n````\nvar path = require('path');\nmodule.exports = {\n    entry: './src/app.js',\noutput: {\n    path: path.join(__dirname, './output'),\n    filename: 'bundle.js'\n},\n\ndevServer: {\n    contentBase: path.join(__dirname, './dist'),\n    compress: true,\n    port: 9000\n}\n\n}\n````\nI use Windows 10 and WDS works fine for me. You can see here on my repo.. @PatelDipen92 Have you tried to use \"./\" before output and dist?:\n````\nvar path = require('path');\nmodule.exports = {\n    entry: './src/app.js',\noutput: {\n    path: path.join(__dirname, './output'),\n    filename: 'bundle.js'\n},\n\ndevServer: {\n    contentBase: path.join(__dirname, './dist'),\n    compress: true,\n    port: 9000\n}\n\n}\n````\nI use Windows 10 and WDS works fine for me. You can see here on my repo.. ",
    "theliveseven": "@nguyenkhois I had the same issue, upgraded to 3.1.4, and it has been fixed! Thanks!. @dandohotaru  \n\nwebpack : 4.6.0 \nwebpack-dev-server: 3.1.4\n\nI was previously using webpack-dev-server:3.1.3. I had no issue with this before because I was only using my mac for development. I encountered the issue when I set up the project in my PC (Windows 10). Upgrading the webpack-dev-server to version 3.1.4 fixed the issue. \nHere is a part of my package.json file :)\n\"webpack\": \"^4.6.0\",\n\"webpack-bundle-analyzer\": \"^2.11.1\",\n\"webpack-cli\": \"^2.0.14\",\n\"webpack-dev-server\": \"^3.1.4\",\n\"webpack-merge\": \"^4.1.2\"\n. ",
    "dandohotaru": "@nguyenkhois, @theliveseven can you you mention what webpack version (and plugins) do you rely on?. @nguyenkhois well, the only reason i'm asking is because i couldn't have webpack-dev-server refresh as expected for any of the versions i've tried (3.1.x)\nCheck my dependencies in here\nIn the meantime i tackle the problem with lite-server instead :). As far as I'm concerned I've fixed the issue by \n making sure a base path is defined\n making sure all 404s are redirected to index.html\nmodule.exports = {\n  ...\n  output: {\n    ...\n    publicPath: '/'\n  },\n  devServer: {\n    historyApiFallback: true,\n  },\n}\n\"webpack\": \"^4.12.1\",\n\"webpack-cli\": \"^3.0.8\",\n\"webpack-dev-server\": \"^3.1.4\",\n\"webpack-merge\": \"^4.1.3\"\n. the setup bellow works for me as expected for quite some time by now...\nwebpack.config.js\n```\nconst path = require(\"path\")\nconst webpack = require('webpack')\nmodule.exports = {\n  entry: {\n    app: './src/app.js'\n  },\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: '[name].bundle.js',\n    publicPath: '/',\n  },\n  ...\n```\nwebpack.dev.js\n```\nconst path = require(\"path\")\nconst webpack = require('webpack')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.config.js')\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'source-map',\n  devServer: {\n    contentBase: path.join(__dirname, \"dist\"),\n    port: 8080,\n    stats: \"minimal\",\n    watchContentBase: true,\n    historyApiFallback: true,\n    open: false,\n    hot: false\n  },\n  ...\n```\nindex.html\n<head>\n    <base href=\"./\" />\n    ...\n</head>\n. ",
    "hz9527": "I also have the same problem(entrypoint undefined = index.html). first,  I thought it was a bug of webpack4, but I built it by the config, everything is normal. so I thought it was a bug of webpack-dev-server. but I it not work with some other versions. finally, I add \"context: resolve('../')\",  good running!. Duplicate of #1421 e...I try it again.  entryPoint undefined = index.html. but I can use devServer. you can set context and set devServer.publicPath = '/' (not './'). so you can get page with inject js & css. @PatelDipen92 . you should set context & publicPath\nwebpack.config.js\n```js\nconst path = require(\"path\")\nconst webpack = require('webpack')\nmodule.exports = {\n context: path.join(__dirname, '../'),\n  entry: {\n    app: './src/app.js'\n  },\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n    filename: '[name].bundle.js',\n    publicPath: '/',\n  },\n  ...\n```\nwebpack.dev.js\n```js\nconst path = require(\"path\")\nconst webpack = require('webpack')\nconst merge = require('webpack-merge')\nconst common = require('./webpack.config.js')\nmodule.exports = merge(common, {\n  mode: 'development',\n  devtool: 'source-map',\n  devServer: {\n    publicPath: '/',\n    port: 8080,\n    stats: \"minimal\",\n    watchContentBase: true,\n    historyApiFallback: true,\n    open: false,\n    hot: false\n  },\n  ...\n```\nI think contentBase is setting static server(if you need)\nso you set context & publicPath(in devServer). ",
    "PatelDipen92": "I am using \n\"webpack\": \"^4.16.3\",\n\"webpack-cli\": \"^3.1.0\",\n\"webpack-dev-server\": \"^3.1.5\"\nstill getting the error. \nMy webpack.config file looks like \n````\nvar path = require('path');\nmodule.exports = {\n    entry: './src/app.js',\noutput: {\n    path: path.join(__dirname, 'output'),\n    filename: 'bundle.js'\n},\n\ndevServer: {\n    contentBase: path.join(__dirname, 'dist'),\n    compress: true,\n    port: 9000\n}\n\n}. @nguyenkhois I have tried that also but still getting the same error. I am using Windows 8.1\n```\n    entry: './src/app.js',\noutput: {\n    path: path.join(__dirname, './output'),\n    filename: 'bundle.js',\n    publicPath: '/'\n},\n\ndevServer: {\n    contentBase: path.join(__dirname, './dist'),\n    compress: true,\n    port: 9000,\n    historyApiFallback: true\n}\n\n```. @hz9527 @dandohotaru I have tried with both solutions you have provided. But none of it worked.. The problem is resolved. The issue was with the directory name. For the output, I was using \"output\" directory and for devServer I was providing contentBase from \"dist\" which was not containing index.html page. So it was throwing \"Cannot Get /\" error  \n```\nentry: './src/app.js',\noutput: {\n    path: path.join(__dirname, 'output'),\n    filename: 'bundle.js'        \n},\n\ndevServer: {\n    contentBase: path.join(__dirname, 'output'),\n    compress: true,\n    port: 9000,\n    historyApiFallback: true,\n    publicPath: '/'\n}\n\n```. ",
    "adamklepacz": "Got the same problem after downloading some of the boilerplates. Thank You @PatelDipen92  for resolving a problem. ",
    "Gander7": "workaround would be to put your project where there are no spaces in the absolute path. Unfortunately, all my projects are in my user directory (C:/Users/John Doe), which is not trivial to change :(. workaround would be to put your project where there are no spaces in the absolute path. Unfortunately, all my projects are in my user directory (C:/Users/John Doe), which is not trivial to change :(. Found it in webpack-serve as well.\nThey redirected the issue to possibly webpack-dev-middleware since it is a common thread and a likely place.\nAny other possible thoughts, clues, or insights?. Found it in webpack-serve as well.\nThey redirected the issue to possibly webpack-dev-middleware since it is a common thread and a likely place.\nAny other possible thoughts, clues, or insights?. @frontendmonster yea I moved all my projects on that computer to a different root. Couldn't remove spaces because they were in my username. I'll request on all future work computers they refrain from making usernames with spaces lol. @frontendmonster yea I moved all my projects on that computer to a different root. Couldn't remove spaces because they were in my username. I'll request on all future work computers they refrain from making usernames with spaces lol. ",
    "frontendmonster": "Same here, I've wasted 14 hours to figure out why this happening.\nJust downgrade webpack-dev-server to exact v3.1.1 or remove all spaces in project path till fix.. Same here, I've wasted 14 hours to figure out why this happening.\nJust downgrade webpack-dev-server to exact v3.1.1 or remove all spaces in project path till fix.. ",
    "alexcrichton": "For a slightly more self-contained reprodution:\n\nClone https://github.com/alexcrichton/webpack-dev-server-issue-1376\ncd into checkout directory\nnpm install\ncp add1.wasm add.wasm\nnpm run serve\nOpen a web browser to http://localhost:8080, you should see a dialog with \"2\" (1 + 1 = 2)\nIn a different terminal (while npm run serve is still running), execute cp add2.wasm add.wasm\nThis simulates the wasm being updated from a Rust compilation or something like that\nNotice how webpack-dev-server rebuilds... something?\nRefresh the web page. It's expected to see 3 (1 + 2 = 3), but you currently see 2\nKill and restart npm run serve\n\nRefresh the web page, you'll now see 3. For a slightly more self-contained reprodution:\n\n\nClone https://github.com/alexcrichton/webpack-dev-server-issue-1376\n\ncd into checkout directory\nnpm install\ncp add1.wasm add.wasm\nnpm run serve\nOpen a web browser to http://localhost:8080, you should see a dialog with \"2\" (1 + 1 = 2)\nIn a different terminal (while npm run serve is still running), execute cp add2.wasm add.wasm\nThis simulates the wasm being updated from a Rust compilation or something like that\nNotice how webpack-dev-server rebuilds... something?\nRefresh the web page. It's expected to see 3 (1 + 2 = 3), but you currently see 2\nKill and restart npm run serve\nRefresh the web page, you'll now see 3. Awesome, thanks so much @sokra!. Awesome, thanks so much @sokra!. I can confirm this is now fixed on Webpack 4.8\n\nNice!. I can confirm this is now fixed on Webpack 4.8\nNice!. ",
    "jasondavies": "Just ran into this too.  If someone can point me to the relevant module(s) for webpack I can take a look.. ",
    "glenjamin": "I think this is an issue in webpack itself rather than webpack-dev-server.\nSteps to reproduce without using dev server:\n\nModify the package.json and add this to scripts: \"build\": \"webpack\"\ncp add1.wasm add.wasm\nnpm run build - shows 8272f8059cff031ea68e.module.wasm in bundle\ngit grep --untracked '{\"./add.wasm\":' dist/ - shows 8272f8059cff031ea68e in bundle\ncp add2.wasm add.wasm\nnpm run build - shows 767437f29c6ec784dbb9.module.wasm in bundle\ngit grep --untracked '{\"./add.wasm\":' dist/ - shows 767437f29c6ec784dbb9 in bundle\nnpm run build -- --watch and leave it running\ncp add1.wasm add.wasm - shows 8272f8059cff031ea68e.module.wasm in bundle \ngit grep --untracked '{\"./add.wasm\":' dist/ - shows 767437f29c6ec784dbb9 in bundle. I think this is an issue in webpack itself rather than webpack-dev-server.\n\nSteps to reproduce without using dev server:\n\nModify the package.json and add this to scripts: \"build\": \"webpack\"\ncp add1.wasm add.wasm\nnpm run build - shows 8272f8059cff031ea68e.module.wasm in bundle\ngit grep --untracked '{\"./add.wasm\":' dist/ - shows 8272f8059cff031ea68e in bundle\ncp add2.wasm add.wasm\nnpm run build - shows 767437f29c6ec784dbb9.module.wasm in bundle\ngit grep --untracked '{\"./add.wasm\":' dist/ - shows 767437f29c6ec784dbb9 in bundle\nnpm run build -- --watch and leave it running\ncp add1.wasm add.wasm - shows 8272f8059cff031ea68e.module.wasm in bundle \ngit grep --untracked '{\"./add.wasm\":' dist/ - shows 767437f29c6ec784dbb9 in bundle. The fix for events needs to go into webpack itself, see https://github.com/webpack/webpack/pull/8494. \n",
    "sendilkumarn": "@glenjamin Nice catch.\ncc: @xtuc & @sokra do you guys have any idea about this? . @glenjamin Nice catch.\ncc: @xtuc & @sokra do you guys have any idea about this? . @xtuc whether the other issue fixes (which we were discussing) landed in next already ?. @xtuc whether the other issue fixes (which we were discussing) landed in next already ?. ",
    "xtuc": "I don't know how works the caching strategy in Webpack. Maybe it can not compare binary files?. I don't know how works the caching strategy in Webpack. Maybe it can not compare binary files?. ",
    "theKashey": "Could not get HRM working with v3.1.3. After enabling hot - everything stops updating. Also could not saw any \"[HRM enabled]\" string in console.\nhttps://github.com/gaearon/react-hot-loader/issues/934. ",
    "llioor": "It didn't work for me as well.... Check out those steps and it will work: https://webpack.js.org/guides/hot-module-replacement/. It didn't work for me as well.... Check out those steps and it will work: https://webpack.js.org/guides/hot-module-replacement/. ",
    "hopperhuang": "@evilebottnawi i check it just now, this promble still remains.... @evilebottnawi i check it just now, this promble still remains.... @bastienrobert nothing changes.. @bastienrobert nothing changes.. ",
    "SaekiRaku": "I have the same problem. \ud83d\ude15. I have the same problem. \ud83d\ude15. ",
    "indefinitelee": "same issue. I add a simple console.log or small text change and updated code is not displayed \n\nnot sure why there is a 2 next to the first WDS though. \nwebpack: 4.8.3\nwebpack-dev-server: ^3.1.4\nmy webpack setup\n//webpack.common.js\n```\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst srcPath = path.join(__dirname, \"/src\");\nmodule.exports = {\n    plugins: [\n        new webpack.DefinePlugin({\n            \"process.env\": {\n                NODE_ENV: JSON.stringify(process.env.NODE_ENV)\n            }\n        }),\n    ],\n    module: {\n        rules: [\n            {   test: /.js$/,\n                exclude: /node_modules/,\n                include: srcPath,\n                use: {\n                loader: \"babel-loader\",\n                }\n            },\n        ]\n    },\n    optimization: {\n        noEmitOnErrors: true // as an aside not sure if this is needed in webpack 4 or is default\n    }\n//webpack.dev.js\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst path = require(\"path\"); \nconst common = require('./webpack.common.js');\nconst publicPath = \"/assets/\";\nmodule.exports = merge(common, {\n    mode:'development',\n    entry: [ 'webpack-dev-server/client?http://localhost:8000',\n        'webpack/hot/only-dev-server', \n        './src/index'\n    ],\n    output: {\n        path: path.join(__dirname, '/../dist/assets'),\n        filename: 'app.js',\n        publicPath: publicPath\n    }, \n    devServer: {\n        contentBase: \"./src/\",\n        historyApiFallback: true,\n        hot: true,\n        port: 8000,\n        publicPath: publicPath,\n        noInfo: false,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"POST, GET, PUT, DELETE, OPTIONS\"\n        }\n    },\n  cache: true,\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devtool: 'eval-source-map', \n});\n``\n. same issue. I add a simple console.log or small text change and updated code is not displayed \n![screenshot from 2018-06-08 12-02-42](https://user-images.githubusercontent.com/20348276/41168438-f3fa9360-6b13-11e8-8e44-de5bd0428053.png)\nnot sure why there is a2` next to the first WDS though. \nwebpack: 4.8.3\nwebpack-dev-server: ^3.1.4\nmy webpack setup\n//webpack.common.js\n```\nconst webpack = require(\"webpack\");\nconst path = require(\"path\");\nconst srcPath = path.join(__dirname, \"/src\");\nmodule.exports = {\n    plugins: [\n        new webpack.DefinePlugin({\n            \"process.env\": {\n                NODE_ENV: JSON.stringify(process.env.NODE_ENV)\n            }\n        }),\n    ],\n    module: {\n        rules: [\n            {   test: /.js$/,\n                exclude: /node_modules/,\n                include: srcPath,\n                use: {\n                loader: \"babel-loader\",\n                }\n            },\n        ]\n    },\n    optimization: {\n        noEmitOnErrors: true // as an aside not sure if this is needed in webpack 4 or is default\n    }\n//webpack.dev.js\nconst webpack = require('webpack');\nconst merge = require('webpack-merge');\nconst path = require(\"path\"); \nconst common = require('./webpack.common.js');\nconst publicPath = \"/assets/\";\nmodule.exports = merge(common, {\n    mode:'development',\n    entry: [ 'webpack-dev-server/client?http://localhost:8000',\n        'webpack/hot/only-dev-server', \n        './src/index'\n    ],\n    output: {\n        path: path.join(__dirname, '/../dist/assets'),\n        filename: 'app.js',\n        publicPath: publicPath\n    }, \n    devServer: {\n        contentBase: \"./src/\",\n        historyApiFallback: true,\n        hot: true,\n        port: 8000,\n        publicPath: publicPath,\n        noInfo: false,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"POST, GET, PUT, DELETE, OPTIONS\"\n        }\n    },\n  cache: true,\n    plugins: [\n        new webpack.HotModuleReplacementPlugin()\n    ],\n    devtool: 'eval-source-map', \n});\n```\n. my log.js is showing this error. \ndon't know what 'unaccepted module' means, or why it requires a full reload - i'm just adding some text to see if it reloads. \n2\nIgnored an update to unaccepted module ./src/components/Main/index.js -> ./src/components/MarketAnalysis/index.js -> ./src/containers/MarketAnalysis.js -> ./src/components/MarketAnalysis/Marketplace.js -> ./src/index.js -> 0\n2\n[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n2\n[HMR] - ./src/components/Main/index.js. my log.js is showing this error. \ndon't know what 'unaccepted module' means, or why it requires a full reload - i'm just adding some text to see if it reloads. \n2\nIgnored an update to unaccepted module ./src/components/Main/index.js -> ./src/components/MarketAnalysis/index.js -> ./src/containers/MarketAnalysis.js -> ./src/components/MarketAnalysis/Marketplace.js -> ./src/index.js -> 0\n2\n[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n2\n[HMR] - ./src/components/Main/index.js. @bartdominiak I thought this might be the solution because it seems like only my reducers files are being reloaded. But doing so gives me these errors:\n<Provider> does not support changingstoreon the fly. It is most likely that you see this error because you updated to Redux 2.x and React Redux 2.x which no longer hot reload reducers automatically. See https://github.com/reactjs/react-redux/releases/tag/v2.0.0 for the migration instructions.\nmy setup matches the pattern described at that link, and has not changed for a while. \nWarning: [react-router] You cannot change <Router routes>; it will be ignored\nI still get a warning that the file that contains the module.hot code is an unaccepted module. \n[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n[HMR]  - ./src/stores/index.js. @bartdominiak I thought this might be the solution because it seems like only my reducers files are being reloaded. But doing so gives me these errors:\n<Provider> does not support changingstoreon the fly. It is most likely that you see this error because you updated to Redux 2.x and React Redux 2.x which no longer hot reload reducers automatically. See https://github.com/reactjs/react-redux/releases/tag/v2.0.0 for the migration instructions.\nmy setup matches the pattern described at that link, and has not changed for a while. \nWarning: [react-router] You cannot change <Router routes>; it will be ignored\nI still get a warning that the file that contains the module.hot code is an unaccepted module. \n[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\n[HMR]  - ./src/stores/index.js. This is pretty frustrating. . This is pretty frustrating. . @bastienrobert if I only use those two entry points, and don't include 'src/index.js' then nothing loads, just a blank screen. \ni'm confused by your example, is ...config.entry referencing itself?\ni'm seeing that my app is intially loaded via app.js and code changes exist in main.[hash].js but those are never displayed, it only displays app.js https://imgur.com/a/9FzSb2W. @bastienrobert if I only use those two entry points, and don't include 'src/index.js' then nothing loads, just a blank screen. \ni'm confused by your example, is ...config.entry referencing itself?\ni'm seeing that my app is intially loaded via app.js and code changes exist in main.[hash].js but those are never displayed, it only displays app.js https://imgur.com/a/9FzSb2W. @bastienrobert I have those two in my entry array as well as the root of my project as seen in my earlier post\nI\u2019m confused how you can use the spread on config.entry inside of itself. It looks like a circular reference. \nconfig.entry = [\n  'webpack-dev-server/client?http://localhost:8080',\n  'webpack/hot/dev-server',\n  ...config.entry\n]. @bastienrobert I have those two in my entry array as well as the root of my project as seen in my earlier post\nI\u2019m confused how you can use the spread on config.entry inside of itself. It looks like a circular reference. \nconfig.entry = [\n  'webpack-dev-server/client?http://localhost:8080',\n  'webpack/hot/dev-server',\n  ...config.entry\n]. ",
    "shahen94": "+1 Same. +1 Same. ",
    "twinkle77": "+1 Same. +1 Same. ",
    "bastienrobert": "Same here, any updates @hopperhuang ?. By adding two entrypoints (like @indefinitelee comment), it works pretty well. The entrypoints are:\n'webpack-dev-server/client?http://localhost:8080',\n'webpack/hot/dev-server'\nBecause I'm using the API, I think this is a pretty good solution in my start.js script used to start my dev env:\nconfig.entry = [\n  'webpack-dev-server/client?http://localhost:8080',\n  'webpack/hot/dev-server',\n  ...config.entry\n]\njust after the config import.\nEdit (04/2019): I just read back this comment, it may not be clear. Here is how I did it : https://github.com/bastienrobert/halo/blob/master/scripts/start.js (I'm editing my Webpack config from an external script, it's maybe why I look like a circular reference). @indefinitelee You need to add these two entry points before your app index.js in the entry points  array. \nMy example is only for the webpack-dev-server API and for advanced use. Here I\u2019m using the spread operator. . Ok, it seems you\u2019re not using the API so it should look like that:\nconfig.entry = [\n'webpack-dev-server/client?http://localhost:8080',\n'webpack/hot/dev-server',\n'src/index.js'\n]\nIf you\u2019re curious, there\u2019s some references about the API in the doc. . Nope, you\u2019re right but here you\u2019re using the webpack-dev-server CLI with an alias, not the webpack-dev-server API !. @BeSaRa Several solutions have already been explained above. Please add more details if these solutions are not adequate.. @BeSaRa Did you check https://github.com/webpack-contrib/copy-webpack-plugin/issues/270 ? You can still re-open it. Same here but for hot reload too.\nEDIT 26/07: About hot reload -> #1377. ",
    "BeliefRC": "if you use React, you can see react-hot-loader doc. ",
    "chocking": "@bastienrobert \n\nOk, it seems you\u2019re not using the API so it should look like that:\nconfig.entry = [\n'webpack-dev-server/client?http://localhost:8080',\n'webpack/hot/dev-server',\n'src/index.js'\n]\n\ni feel a little confused that it's no need to add two lines 'webpack....' into entry if using npm script like\n//package.json\n...\n\"scripts\": {\n     \"start\": \"webpack-dev-server\"\n }\n...\nnpm start. @bastienrobert \n\nOk, it seems you\u2019re not using the API so it should look like that:\nconfig.entry = [\n'webpack-dev-server/client?http://localhost:8080',\n'webpack/hot/dev-server',\n'src/index.js'\n]\n\ni feel a little confused that it's no need to add two lines 'webpack....' into entry if using npm script like\n//package.json\n...\n\"scripts\": {\n     \"start\": \"webpack-dev-server\"\n }\n...\nnpm start. ",
    "nycat": "I met the same problem as yours.  The example code for me is here: https://github.com/pandoracat/webpack-demos/tree/master/demos/09.hot-module-reload.03.hrm\nSomeone, please help me, it haunted me for a very long time.. I met the same problem as yours.  The example code for me is here: https://github.com/pandoracat/webpack-demos/tree/master/demos/09.hot-module-reload.03.hrm\nSomeone, please help me, it haunted me for a very long time.. ",
    "wuliqiangqiang": "@hopperhuang @bastienrobert \nare you fix it? how do....sos. @hopperhuang @bastienrobert \nare you fix it? how do....sos. @evilebottnawi update it.. ",
    "BeSaRa": "Any solution here Please !??. all applied but nothing work with me.\nand actually after a long time i catch the reason of that, when i add copy-webpack-plugin to the plugins property, the HMR not working. \nshould i open issue here or in copy-webpack--plugin !!??. ",
    "devrsi0n": "I got\ntext\nIgnored an update to unaccepted module...[HMR] The following modules couldn't be hot updated: (They would need a full reload!)\nwarning too, I fixed this issue by replacing webpack config devServer.hotOnly: true to devServer.hot: true.. ",
    "dneufeldcu": "Please remove or upgrade the jQuery dependency.. Please remove or upgrade the jQuery dependency.. ",
    "flee-lether": "but in webpack version 4.5.0.\nit is success.. but in webpack version 4.5.0.\nit is success.. ",
    "ScriptedAlchemy": "Seems this may no longer be the case? Can anyone confirm it working with webpack 4.8. Seems this may no longer be the case? Can anyone confirm it working with webpack 4.8. ",
    "kongshanchat": "set \"html-webpack-plugin\": \"^4.0.0-alpha\" => \"4.0.0-alpha\"\nremove node_modules\nremove package-lock.json\nnpm install\n. ",
    "se7en00": "thanks @evilebottnawi \nI tried this, but it's failed.\nI changed the file-loader config below, the dev server can load the fonts now.\nname: 'fonts/[name].[ext]',\n mimetype: 'application/font-woff',\n publicPath: '../'. thanks @evilebottnawi \nI tried this, but it's failed.\nI changed the file-loader config below, the dev server can load the fonts now.\nname: 'fonts/[name].[ext]',\n mimetype: 'application/font-woff',\n publicPath: '../'. ",
    "LukasBombach": "I had the same issue and I fixed it by changing the name property from starting with a / (which resulted in an absolute path) to a ./ (which is a relative path). My config:\njs\n{\n  test: /\\.(woff|woff2)$/,\n  loader: 'url-loader',\n  options: {\n    limit: 4096,\n    name: './fonts/[name].[ext]?[hash]', // was '/fonts/[name].[ext]?[hash]',\n  },\n},. I had the same issue and I fixed it by changing the name property from starting with a / (which resulted in an absolute path) to a ./ (which is a relative path). My config:\njs\n{\n  test: /\\.(woff|woff2)$/,\n  loader: 'url-loader',\n  options: {\n    limit: 4096,\n    name: './fonts/[name].[ext]?[hash]', // was '/fonts/[name].[ext]?[hash]',\n  },\n},. ",
    "faisaljanjua": "strange, I was using the latest version then downgrade the webpack version, it was not working, now I again upgrade it, now have new error \"Chunk.entrypoints: Use Chunks.groupsIterable and filter by instanceof Entrypoint\"\n\n. ",
    "mzalazar": "After updating webpack, webpack-cli and webpack-dev-server... error is gone! =) . ",
    "hachtr": "I'd just like to second that I believe am running into this problem(or a similar one) as well. My webpack config is as follows:\n```javascript\nconst webpack = require('webpack');\nconst path = require('path');\nconst proxy = 'localhost:22850/clients/dev/default.aspx/'\nmodule.exports = {\n    entry: [\n        'react-hot-loader/patch',\n        './components/App.js',\n        './css/main.scss'\n    ],\n    mode: 'development',\n    module: {\n        rules: [\n          {\n            test: /.(js|jsx)$/,\n            exclude: /node_modules/,\n            use: ['babel-loader']\n            },\n            {\n                test: /.(scss|sass|css|)$/,\n                use: [\n                    'style-loader',\n                    \"css-loader\",\n                    \"sass-loader\"\n                ]\n            },\n            {\n                test: /.(jpe?g|png|gif|woff|woff2|eot|ttf|svg)(\\?[a-z0-9=.]+)?$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 8192,\n                            fallback: 'file-loader',\n                            relativePathName: true,\n                            publicPath: 'http://localhost:8080/'\n                        }\n                    }\n                ]\n            }\n        ]\n      },\n      resolve: {\n            extensions: ['', '.js', '.jsx',  '.png', '.woff', '.woff2']\n      },\n    output: {\n        path: path.resolve(__dirname, '/dist'),\n        filename: 'bundle.js',\n        publicPath: '/'\n    },\n    devtool: 'source-map',\n    devServer: {\n        // https://stackoverflow.com/questions/43544077/react-with-typescript-hot-reload-iis-webserver\n        proxy: {\n            '' : {\n                target: 'http://' + proxy\n            }\n        },\n        port: 8080,\n        host: '0.0.0.0',\n        publicPath: 'http://localhost:8080',\n        hot: true,\n        headers: {'Access-Control-Allow-Origin': '*'}\n    },\n    plugins: [\n        new webpack.HotModuleReplacementPlugin(),\n        new webpack.NamedModulesPlugin(),\n        new webpack.NoEmitOnErrorsPlugin()\n    ],\n    node: {\n        console: true // needed for html5-history package\n    }\n```\nWhen using hotOnly: true, the hotupdate is using localhost:22850 and 404's, but if I manually make the get request using localhost:8080 I receive a response.. ",
    "Nettsentrisk": "Suddenly got this issue as well. Seems to have happened after some change I did while developing caused the dev server update to fail, after which it started serving successful updates from the wrong port number (the one used for serving the site, not the default port 8080).. Anything happening on this one? Started a different project and have updated to all the lastest webpack packages and still having this problem.... ",
    "bretonio": "I also get the page to serve  setting the port manually with say PORT=1111 npm run dev  .... ",
    "joyfulelement": "I'm having the exact same issue with a setup of webpack 4 + webpack-dev-server setup with node.js (version v8.9.1). Still digging.... ",
    "andreasschuele": "I had the same issue. It looks like to be an issue with path handling, since after removing white space from my project path it did work again. \nThere is already an issue for that: webpack/memory-fs#59 . As a quick fix I've added in node_modules\\memory-fs\\lib\\MemoryFileSystem.js the following line to the pathToArray function.\npath = path.replace(/\\%20/g, \" \"); // replace encoded white space\nThe altered function:\nfunction pathToArray(path) {\n    path = path.replace(/\\%20/g, \" \"); // replace encoded white space\n    path = normalize(path);\n    var nix = /^\\//.test(path);\n    if(!nix) {\n        if(!/^[A-Za-z]:/.test(path)) {\n            throw new MemoryFileSystemError(errors.code.EINVAL, path);\n        }\n        path = path.replace(/[\\\\\\/]+/g, \"\\\\\"); // multi slashs\n        path = path.split(/[\\\\\\/]/);\n        path[0] = path[0].toUpperCase();\n    } else {\n        path = path.replace(/\\/+/g, \"/\"); // multi slashs\n        path = path.substr(1).split(\"/\");\n    }\n    if(!path[path.length-1]) path.pop();\n    return path;\n}. ",
    "Rody-Kirwan": "@evilebottnawi I'm not sure - moving to webpack-serve solved any issues I was having. . @evilebottnawi Since when?\nThere is no mention of that here:\nhttps://www.npmjs.com/package/webpack-serve. Hah - That is not good news!\nThanks for the update @evilebottnawi. . @evilebottnawi Yep, I can try to do that ASAP. It may be a couple of days before I can get to it though. Still need to switch back from webpack-serve. Thanks. @evilebottnawi - HI, I've recreated the issue on a repo here:\nhttps://github.com/Rody-Kirwan/webpack-single-runtime\nPlease excuse the repo name . - It was initially created to display another webpack issue.\nI'm not a fan of this /.endpoint pattern on the BE - but it's unfortunately outside my control.\nWhen I was investigating the issue previously, I located the cause to regex matching pattern used by http-proxy-middleware. Oddly - webpack-serve also uses this dependency but didn't have the same issue.. @evilebottnawi Is there any update on this - completely blocked from updating webpack because of the issue.. @evilebottnawi okay thanks. Think the issue is with micromatch dependency of http-proxy-middleware. Will investigate further. @doowb - Thank you. Never spotted that. Works perfectly, so I will create an issue with http-proxy-middleware.\nReally appreciate it :). @evilebottnawi Yup. Closing now. Thanks. ",
    "doowb": "@Rody-Kirwan try setting the dot option to true in http-proxy-middleware. It looks like http-proxy-middleware does not pass any options through to micromatch, so you'd have to manually do this in your node_modules to test.. ",
    "eayan": "@evilebottnawi exactly I do not know where I should install that. Whenever I want to install npm, it comes up with the same error. What is the solution for that?. ",
    "inglkruiz": "This is happening to me too.. ",
    "acwong00": "I have the same issue.. ",
    "ds-codemag": "OK. I made this with  webpack-dev-middleware and webpack-hot-middleware and it works good but I'm not sure if very good because when i change something in css, browser automatically reloads page with changes but when i change somethnig in html or js it compiles changes but not reload browser and I have to do this manually.. I updated node.js, webpack, webpack-cli, and webpack-dev-server to newest versions and configured everything from begining and it works. \nHere is my new webpack.config.js:\n```js\nconst path = require('path');\nconst glob = require('glob');\nconst webpack = require('webpack');\n// Plugins\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nmodule.exports = {\n  target: 'web',\n  mode: 'development',\n  devtool: 'inline-source-map',\ndevServer: {\n      contentBase: path.resolve(__dirname, 'dist'),\n      publicPath: '/',\n      compress: true,\n      host: '10.95.3.111',\n      port: 8080,\n      hot: true,\n      inline: true\n  },\nentry: () => {\n      return glob.sync('./src/js/*.js').reduce(\n          function(prev, curr) {\n              prev[path.basename(curr, '.js')] = curr;\n              return prev;\n          }, {}\n      );\n  },\nmodule: {\n      rules: [\n          { // Loading JavaScript\n              test: /.js$/,\n              use: ['babel-loader']\n          },\n          { // Loading CSS\n              test: /.css$/,\n              use: ['style-loader', 'css-loader']\n          },\n          { // Loading Sass\n              test: /.scss$/,\n              use: ['style-loader', 'css-loader', 'sass-loader']\n          },\n          { // Loading Images\n              test: /.(png|svg|jpg|gif)$/,\n              use: [{\n                  loader: 'file-loader', options: {\n                      outputPath: './img/'\n                  }\n              }]\n          },\n          { // Loading Fonts\n              test: /.(woff|woff2|eot|ttf|otf)$/,\n              use: [{\n                  loader: 'file-loader', options: {\n                      outputPath: './fonts/'\n                  }\n              }]\n          }\n      ]\n  },\nplugins: [\n      new CleanWebpackPlugin(['dist']),\n      new HtmlWebpackPlugin({\n          filename: 'index.html',\n          template: './src/index.html'\n      }),\n      new webpack.NamedModulesPlugin(),\n      new webpack.HotModuleReplacementPlugin()\n  ],\noutput: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].bundle.js',\n  },\n}\n```\nNow I'm trying to run HMR. It works for css changes but for js changes I get full page reload and for HTML changes not see any changes and I have to manually reload. I want working HMR for JS and HTML too.. I make hot reload for SASS, CSS and JS module like 'print.js'\nThis is my actual config:\n```js\nconst path = require('path');\nconst glob = require('glob');\nconst webpack = require('webpack');\n// Plugins\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst CleanWebpackPlugin = require('clean-webpack-plugin');\nmodule.exports = {\n    target: 'web',\n    mode: 'development',\n    devtool: 'inline-source-map',\ndevServer: {\n    compress: true,\n    contentBase: path.resolve(__dirname, 'src'),\n    host: '10.95.3.105',\n    hot: true,\n    hotOnly: true,\n    index: 'index.html',\n    inline: true,\n    port: 8080,\n    publicPath: '/',\n    // watchContentBase: true,\n    // watchOptions: {\n    //     poll: true\n    // }\n},\n\nentry: () => {\n    return glob.sync('./src/js/*.js').reduce(\n        function(prev, curr) {\n            prev[path.basename(curr, '.js')] = curr;\n            return prev;\n        }, {}\n    );\n},\n\nmodule: {\n    rules: [\n        {\n            test: /\\.html$/,\n            use: 'raw-loader'\n        },\n        { // Loading JavaScript\n            test: /\\.js$/,\n            exclude: /node_modules/,\n            use: [{\n                loader: 'babel-loader', options: {\n                    presets: [['env', {'modules': false}]]\n                }\n            }]\n        },\n        { // Loading CSS\n            test: /\\.css$/,\n            use: ['style-loader', 'css-loader']\n        },\n        { // Loading Sass\n            test: /\\.scss$/,\n            use: ['style-loader', 'css-loader', 'sass-loader']\n        },\n        { // Loading Images\n            test: /\\.(png|svg|jpg|gif)$/,\n            use: [{\n                loader: 'file-loader', options: {\n                    outputPath: './img/'\n                }\n            }]\n        },\n        { // Loading Fonts\n            test: /\\.(woff|woff2|eot|ttf|otf)$/,\n            use: [{\n                loader: 'file-loader', options: {\n                    outputPath: './fonts/'\n                }\n            }]\n        }\n    ]\n},\n\nplugins: [\n    new CleanWebpackPlugin(['dist']),\n    new HtmlWebpackPlugin({\n        filename: 'index.html',\n        template: './src/index.html'\n    }),\n    new webpack.HotModuleReplacementPlugin()\n],\n\noutput: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: '[name].bundle.js',\n},\n\n}\n```\nAnd my index.js file:\n```js\nimport '../css/index.css';\nimport '../scss/stylesheet.scss';\nimport printMe from './vendors/print.js';\nimport '../index.html';\nconst component = () => {\n    const element = document.createElement('h1');\n    element.className = 'hello-world';\nelement.innerHTML = 'Hello Webpack!';\n\nreturn element;\n\n};\nconst button = () => {\n    const btn = document.createElement('button');\nbtn.innerHTML = 'Click me and check the console!';\nbtn.onclick = printMe;\n\nreturn btn;\n\n};\ndocument.getElementsByTagName('header')[0].appendChild(component());\nlet btn = button();\ndocument.querySelector('.button').appendChild(btn);\nif (module.hot) {\n    module.hot.accept(['./vendors/print.js'], () => {\n        console.log('Accepting the updated printMe module!');\n        document.querySelector('.button').removeChild(btn);\n        btn = button(); // Re-render the \"component\" to update the click handler\n        document.querySelector('.button').appendChild(btn);\n    })\n}\n```\nWhen I change something in print.js hot reaload works but when i change somtehing in index.js or index.html i get full page raload but I want hot reload tooo.\nNow I'm trying to hot reload HTML and index.js\nI found this tutorial fot html hot reload https://github.com/AriaFallah/WebpackTutorial/tree/master/part1/html-reload. I'm trying this now.. ",
    "tailorsira": "I also updated node.js, webpack, webpack-cli, and webpack-dev-server to newest versions and it works. Here is my config below:\n\nwebpack.config.js\n```\nconst webpack = require('webpack')\nconst path = require('path')\n\nmodule.exports = {\n  entry: './main.js',\n  output: {\n    filename: 'bundle.js'\n  },\n  devServer: {\n    inline:true,//\u6253\u5305\u540e\u52a0\u5165\u4e00\u4e2awebsocket\u5ba2\u6237\u7aef\n    hot:true,//\u70ed\u52a0\u8f7d\n    host: 'localhost',//\u4e3b\u673a\u5730\u5740\n    port: 9090,//\u7aef\u53e3\u53f7\n    compress: true//\u5f00\u53d1\u670d\u52a1\u5668\u662f\u5426\u542f\u52a8gzip\u7b49\u538b\u7f29\uff0c\u8fd9\u90fd\u4e0d\u662f\u5fc5\u987b\u7684\n  },\n  module: {\n    rules:[\n      {\n        test: /.css$/,\n        use: [ 'style-loader', 'css-loader' ]\n      },\n      {\n        test: /.html$/,\n        use: ['html-loader']\n      }\n    ]\n  },\n  plugins: [new webpack.NamedModulesPlugin(), new webpack.HotModuleReplacementPlugin()],\n};\n```\n\nentry file\n\n```\nrequire('./app.css');\nrequire('./index.html');\nrequire('./test.js');\nif (module.hot) {\n  module.hot.accept()\n}\n3. index.html\n\n\n\n\n\nHMR Test\n\n\n```\nNow you change your css or js or html, you would see the browser auto fresh\n. ",
    "dennispg": "hi @SpaceK33z any chance this can be merged?. cheers! no worries at all, thank you!. yikes, didn't even realize I did that! sorry, corrected.. ",
    "tanjaChristina": "i can confirm this problem - the logged error (when calling /webpack-dev-server) refers to the Server.js-file. \nSeems like folder path is escaped wrong: C:\\projects\\example%20directory\\rendering\\static\\dist and therefore not found.\nError: no such file or directory\n    at MemoryFileSystem.readdirSync (C:\\projects\\example directory\\rendering\\static\\node_modules\\memory-fs\\lib\\MemoryFileSystem.js:126:10)\n    at writeDirectory (C:\\projects\\example directory\\rendering\\static\\node_modules\\webpack-dev-server\\lib\\Server.js:161:40)\n    at Server.app.get (C:\\projects\\example directory\\rendering\\static\\node_modules\\webpack-dev-server\\lib\\Server.js:199:9)\n    at Layer.handle [as handle_request] (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:137:13)\n    at Route.dispatch (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:112:3)\n    at Layer.handle [as handle_request] (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\index.js:281:22\n    at Function.process_params (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\index.js:335:12)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\index.js:275:10)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:127:14)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:131:14)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:131:14)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:131:14)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:131:14)\n    at next (C:\\projects\\example directory\\rendering\\static\\node_modules\\express\\lib\\router\\route.js:131:14). i investigated further - the escaping is done within webpack-dev-middleware (util.js) especially for Windows. From Version 3.1.2 to 3.1.3 (3.1.3 is a dependency of webpack-dev-server 3.1.4) a fix for windows paths was included. \nAfter the update, it now works fine for me.. ",
    "TheBegining": "it works fine under webpack-dev-server 3.1.4,thanks.. ",
    "0xorial": "my mistake, I think I did something wrong.. Done. Thanks for the example! I wanted to intercept 'done' event of webpack (but otherwise use webpack-dev-server as it is) and I saw a good amount of code in webpack-dev-server.js. So I was afraid that if I use stuff from 'lib' I will have to end up writing the same code as in webpack-dev-server.js (but probably worse xD)\nNow, after looking at the code more, I start to think that options contain only options used in the lib/Server, so my approach is probably wrong :( \n. ```TypeScript\n      const config = require(configPath);\n      const compiler = webpack(config);\n  const log = require(\"webpack-log\");\n\n  const logger = log({\n    name: \"wds\",\n    level: \"info\",\n    timestamp: true\n  });\n  const devServerInstance = new devServer(compiler, {}, logger);\n  outputChannel.appendLine(\"about to listen...\");\n\n  // mistyped localhost\n  devServerInstance.listen(8080, \"locallllhost\", (err: any) => {\n    // never reached here :(\n    if (err) {\n      outputChannel.appendLine(\"listen error!\");\n      throw err;\n    }\n    outputChannel.appendLine('listening!');\n  });\n\n```. Just for some more context - I am trying to develop an extension for Visual Studio Code to integrate WDS.. ",
    "elrumordelaluz": "Awesome, will give an eye.\n@evilebottnawi  webpack-serve replace webpack-dev-server?\n\nwepback-dev-server in maintenance mode\n\nWhat that means?\n. thanks! \nso this guide will change, right?\nJust, to avoid confusion in webpack users. ",
    "flekschas": "Just in case somebody else stumbles upon this ticket and wonders \"should I use webpack-serve\"? webpack-serve is now deprecated!\n\nDEPRECATED. Please use webpack-dev-server (he is in support and update mode again). Feel free to create a issue if some features are not implemented in webpack-dev-server.. Just as a reference, @elrumordelaluz submitted a PR to webpack-serve regarding this matter: https://github.com/webpack-contrib/webpack-serve/issues/117\n\nSince it's much more involved than I thought it would be I am not sure it's simply to copy it over to webpack-dev-server. :). ",
    "jeremyzahner": "@evilebottnawi Nevermind, it seems like i've had an issue with a lockfile beeing cached.. ",
    "bwalding": "You possibly switched to the webpack-cli loader?\nTry moving webpack itself to your local env:\n```\nnpm uninstall -g webpack\nnpm add webpack --save-dev\nyarn add webpack --save-dev.",
    "sifex": "That as well as moving from webpack-dev-server from 2 > 3. Switched back to 2 and that seemed to work.. ",
    "Asrin-Akbari": "finally how you solve this problem? i have this probleam . ",
    "davebream": "I need solution too. ",
    "lusteng": "I need too. I've solved it, Try chang the webpack-dev-server plugin version. ",
    "ivandurst": "In my case this stackoverflow answer helped me:\nhttps://stackoverflow.com/questions/50374305/cannot-find-module-webpack-schemas-webpackoptions-json-when-trying-to-instal\njust run npm install webpack@4.8.2 then npm install. As others have said, it's a versioning issue.. ",
    "whatsupdev": "Disabling module transformation in .babelrc finally worked. This line did the trick :  \"modules\": false\nI am still not sure why its not working without that line. Is it due to babel transforming code to commonJs syntax and HMR does not work in commonJS syntax ?? \nMy current .babelrc file looks like this: \n{\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"targets\": {\n          \"chrome\": 52\n        },\n        \"modules\": false,\n        \"loose\": true\n      }\n    ]\n  ],\n  \"plugins\": [\"transform-object-rest-spread\"]\n}\n\nPlease close this issue, before that if any explanation on this behaviour will be greatful. \n. ",
    "nontachaiwebdev": "Same you. Wait for someone.. ",
    "Sokrates80": "any update on this?. ",
    "teh0xqb": "Are you trying to explore your server app from the browser? This is a browser security feature. Probably caused because your UI is served in a different location than a server you're trying to access.\nI presume your index.js file is part of a different server? It should set up CORS on its config.\nLet's say that you're using express:\nhttps://github.com/expressjs/cors#usage\nAs a temporary workaround during development and while someone on a \"team\" fixes this, you may:\n1) Start your browser on \"security disabled mode\". In google chrome:\n - <chrome-cmd-app> --args --user-data-dir=/tmp/temp_chrome_user_data_dir --disable-web-security\nor\n2) Set up a reverse proxy, forward both client and server requests to the same ip:port. Then whichever client (browser) you use won't complain about CORS. This is a bit less temporary a solution than [1], maybe, but you might get other follow-up clarifications on best practices around this from experts (I'm not one).\nHopefully some of this helps.. webpack-serve was officially deprecated and archived 6 days ago, commit:\nhttps://github.com/webpack-contrib/webpack-serve/commit/edaf28c6c935c3e29d26dbb02a9d6b672cc5148a\nThere's also a discussion to update README in #1493 . webpack-serve was officially deprecated and archived 6 days ago, commit:\nhttps://github.com/webpack-contrib/webpack-serve/commit/edaf28c6c935c3e29d26dbb02a9d6b672cc5148a\nThere's also a discussion to update README in #1493 . ",
    "mserajnik": "Closing this since the recommended way to work with webpack seems to be using different configurations for development and production anyway (see here).\nI didn't know this when opening this issue and have always adjusted my configuration based on environment variables up until then.. ",
    "kohlikohl": "@berthertogen Thanks for the fix. @evilebottnawi Any chance you could look over it again and get this merged in? Would be tremendously helpful.\nThanks in advance.. ",
    "frenzzy": "But in this case I need to add one more dependency (serve-static) to my package.json and serve static manually using before or after option.\nAlso contentBaseIndex option could be used to provide options to serve-index.... ",
    "shYkiSto": "@evilebottnawi, added. Please review. @SpaceK33z @evilebottnawi be so kind to review, please :). Thanks @SpaceK33z  @evilebottnawi . @SpaceK33z Hey, wanted to check if you got any closer to making a release :) Thanks!. ",
    "jguddas": "What's the status of this? Any plans for a release?. ",
    "hopewise": "I found that loaders should be into rules as I have webpack version 3. ",
    "wtho": "My hacky workaround: edit/fork webpack-dev-server and modify the if-clause in client/index.js to:\njs\nconst dynamicSocksPort = true;\nif (!urlParts.port || urlParts.port === '0' || dynamicSocksPort) {\nWould be great if that would be some dev-server parameter!\nThe __resourceQuery-parameter is hardcoded as the domain webpack-dev-server listens to, although this might not be the domain the app targets primarily (e. g. behind a proxy, as mentioned above).. ",
    "kasvtv": "OP here. For my dev environment I ended up dropping my NGINX reverse proxy altogether and use the reverse proxying feature of the webpack dev server instead. Obviously this solves the problem of dropped requests, but it's still a sub-optimal solution as this is now yet another point at which my dev environment is going to differ from production.. ",
    "waleedahmed3045": "I am getting this message HMR Not receive update signal from WDS and stuck in console console. My page is going in an infinite loading.. ",
    "Bounty31": "Also happening to me, it looks like it is happening since my Chrome updated to V67. ",
    "chobo2": "I think for me it been happening even before v67. I have to admit I never tried any other browser to see if they have the same problem.. @gs-ppara \nIt does not seem to work for me.. @DanielRuf \nYes I restarted Chrome. I am on localhost:8080.\nI went to the stack page and I cannot find the option they are talking about in my version of chrome.. @DanielRuf \nI am not sure, I will try it but I am not really sure how to get to wherever I need to put a bypass in.. Anyone have any other suggestions?. @cnyet \nI don't think I have that flag set, I dont' see it in my webpack config, unless this is something on by default?. I have not seen this problem since I switched over to webpack-serve though now it been deprecated(first it was said to be used over webpack-dev-server not they changed their minds).\nI am scared to switch over because of this issue.. ",
    "gs-ppara": "Open chrome://flags/#allow-insecure-localhost\nChange 'Allow invalid certificates for resources loaded from localhost'  to Enabled\nIt works for me (temporary workaround)\n. ",
    "cnyet": "@chobo2 I had this problem at the beginning\uff0cand because I set optimization.runtimeChunk to true in my webpack configuration. so when I removed optimization.runtimeChunk, it works completely. I hope it will help you.. ",
    "colingreene28": "Unsure if this is related but I noticed that once I updated to Chrome v67 it was forcing localhost over https (or at least I think it was). I added https:true and that seemed to get me back up and running.. ",
    "gitors": "@gs-ppara  it not work for me. \ni have restarted my chrome.\nit is my chrome version ,\n\n. I am a Chinese, my English is not very good, do not know how to express, but now I will encounter endless requests, causing my own server to be blocked\u3002\nCan someone give me some advice\uff1f\nthanks!. @xxxfuwei  i reset my codes from gitlab to solve the problem.\n. I also want to know.. My project has encountered the same situation. What should I do about it. ",
    "Frondor": "I see the HMR module is pinging to https://{network_address}:9443/sockjs-node/info?t=1548216186220 which times out for some reason. But if I manually access to that URL, changing network_address for localhost It finally returns 200.\nwebpack config\n```js\n{\ndevServer: {\n    host: '0.0.0.0',\n    port: 9443,\n    disableHostCheck: true, // process.env.NODE_ENV === 'development'\n    https: true,\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    useLocalIp: false,\n  }\n}\n``. I see the HMR module is pinging tohttps://{network_address}:9443/sockjs-node/info?t=1548216186220which times out for some reason. But if I manually access to that URL, changingnetwork_addressforlocalhost` It finally returns 200.\nwebpack config\n```js\n{\ndevServer: {\n    host: '0.0.0.0',\n    port: 9443,\n    disableHostCheck: true, // process.env.NODE_ENV === 'development'\n    https: true,\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    useLocalIp: false,\n  }\n}\n```. ",
    "greggb": "I was just about to open this same ticket.\nGoing forward should we expect webpack-dev-server to only pair with webpack-cli and webpack-command to pair with webpack-serve?\nMy use case in this situation is not having the time to update my configs for webpack-serve at the moment, so I wanted to retain dev-server while having already moved to webpack-command. Might not be a common enough use case though.. ",
    "rorono": "Excuse me. It was my environmental dependence problem\nSince it is not a public issue, I will close it.. ",
    "dduraipandian91": "Actually files being created as per output configuration. But somehow server is looking for index.html which was default and fails.\nThanks in advance for helping with this issue.\nRegards,\nDurai Pandian. ",
    "pascalBrauns": "@evilebottnawi @SpaceK33z Under what circumstances is this going to be reviewed and merged ?. ",
    "codecov-io": "Codecov Report\n\nMerging #1429 into master will decrease coverage by 0.12%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1429      +/-\n==========================================\n- Coverage   79.07%   78.94%   -0.13%   \n==========================================\n  Files           6        5       -1   \n  Lines         497      494       -3   \n  Branches      161      161            \n==========================================\n- Hits          393      390       -3   \n  Misses        104      104\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| lib/Server.js | 81.92% <\u00f8> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2a5e2f6...4bd4c19. Read the comment docs.\n. # Codecov Report\nMerging #1627 into master will decrease coverage by 0.24%.\nThe diff coverage is 28.57%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #1627      +/-\n==========================================\n- Coverage   74.27%   74.02%   -0.25%   \n==========================================\n  Files          10       10            \n  Lines         688      693       +5   \n==========================================\n+ Hits          511      513       +2   \n- Misses        177      180       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| bin/utils.js | 51.85% <\u00f8> (+7.4%) | :arrow_up: |\n| lib/Server.js | 79.33% <28.57%> (-1.89%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 349e733...7f326f8. Read the comment docs.\n. \n",
    "wtgtybhertgeghgtwtg": "I rebased, but there are still unrelated changes to the package-lock.json.. It works locally, so I'm guessing it just couldn't get the IP inside Travis and that url.format will just be a protocol if hostname is null, so it won't match http://${internalIp.v4.sync()}:8080.. To clarify, internal-ip used to give a fallback if it couldn't find the IP, which I'm guessing is why that test worked.  What should I do with it?. Sounds good to me.  Lemme rebase and I'll push that.. ",
    "zeroarst": "I think it is fine to disable sockjs.js on dev server and prod server, because we don't need hot swap for both. I am seeing a lot of 404 errors as it is pointing to localhost:8080.. I fixed it by disabling it. added --inline=false to my dev and prod scripts in package.json.. ",
    "chavesgu": "thanks\uff0cbrother. @evilebottnawi\nyeah\uff0cthanks. ",
    "norfish": "@B3zo0 I don`t think increase the max-old-space-size is a good solution, even though I have not better solution. ",
    "galvarez421": "While the OPs question was answered, I second @norfish. Isn't there an underlying issue of a memory leak? it seems that increasing the memory as suggested only make the issue less likely to happen rather than eliminating the issue. Would that be fair to say?. ",
    "Morgul": "I'll second this, I have a project where even with 4GB of memory allocated it dies at least twice a day with this error.\nThis ran fine for weeks at a time without restarted the dev server on webpack 3. Our code didn't change between working and not. There's a memory issue in webpack-dev-server and/or webpack 4.\nEdit To help with debugging, here's some version information:\nWorking Stack:\n webpack: v3.10.0\n webpack-dev-server: v2.11.1\nBroken Stack:\n webpack: v4.20.2\n webpack-dev-server: v3.1.9. So, unfortunately, I'm not sure this is a webpack-dev-server issue. This happens with regular webpack in watch mode, or even using webpack-nano and webpack-plugin-server.\nThis is seeming more and more like a core webpack issue.. ",
    "zzis": "The same issue, webpack dev server dies every 10 times re-compile the code.  \nwebpack: 4.12.0\nwebpack-dev-server: 3.1.4. The same issue, webpack dev server dies every 10 times re-compile the code.  \nwebpack: 4.12.0\nwebpack-dev-server: 3.1.4. ",
    "lnorton89": "I'm also getting this issue recently after my project started to increase in size. \n\"webpack\": \"^4.19.0\",\n    \"webpack-cli\": \"^3.1.2\",\n    \"webpack-dev-server\": \"^3.1.9\"\n```<--- Last few GCs --->\n[2056:0000027C4A2D4C20]  6824619 ms: Mark-sweep 1395.6 (1484.9) -> 1395.6 (1484.9) MB, 773.9 / 0.1 ms  allocation failure GC in old space requested\n[2056:0000027C4A2D4C20]  6825512 ms: Mark-sweep 1395.6 (1484.9) -> 1395.5 (1446.9) MB, 892.6 / 0.0 ms  last resort GC in old space requested\n[2056:0000027C4A2D4C20]  6826306 ms: Mark-sweep 1395.5 (1446.9) -> 1395.5 (1446.4) MB, 793.6 / 0.0 ms  last resort GC in old space requested\n<--- JS stacktrace --->\n==== JS stack trace =========================================\nSecurity context: 0000028DFEFA5EE1 \n    1: fromString(aka fromString) [buffer.js:~298] pc=00000351776D37DE\n    3: from [buffer.js:177] [bytecode=000003AE66D34B71 offset=11](this=000000C6A96361B1 ,value=0000029FCC524FE1 ,encoding...\nFATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory\n 1: node_module_register\n 2: v8::internal::FatalProcessOutOfMemory\n 3: v8::internal::FatalProcessOutOfMemory\n 4: v8::internal::Factory::NewRawTwoByteString\n 5: v8::internal::Smi::SmiPrint\n 6: v8::internal::AllocationSpaceName\n 7: v8::String::WriteUtf8\n 8: v8::internal::PagedSpace::SetUp\n 9: node::Buffer::New\n10: node::Buffer::New\n11: 000003517604DBC6```\n. Gotcha, can confirm it persists after updating as well. \n\"webpack\": \"^4.26.1\",\n    \"webpack-cli\": \"^3.1.2\",\n    \"webpack-dev-server\": \"^3.1.10\". ",
    "stoplion": "This is still happening all the time for me. This is still happening all the time for me. ",
    "Mafii": "Any updates?. ",
    "kevinoliveira": "on my project, when i save any file, webpack-dev-server/webpack consumes 5% more of my memory, even if i din`t change anything at all on the file, and the memory consumption keeps incensing on steps of 5% of my total ram, to the point where it freezes my computer and now i have to use a system manager on daily basis to work, and kill the process when i only have 10% of ram left.\nextra info: \n\nOperating System: Ubuntu 18.04 bionic\nTotal ram: 8gb\nNode Version: 8.12.0\nNPM Version: 6.4.1\nwebpack Version: 4.19.1\nwebpack-dev-server Version: 3.1.14\n\ni still waiting for a solution.. ",
    "shanmugarajbe": "I too facing the same issue with the latest webpack. It was working fine in the previous version. I have 8GB of RAM. Is there any solution available ?. ",
    "chrisnicola": "Seeing this as well. It always compiles at least once without running out of memory, but crashes on the second or third recompile after a file changes. I tried a lot of things to fix it but the only thing that worked was setting:\noptimization: {\n  splitChunks: {\n    chunks: 'all',\n  },\n},\nI'm at a loss as to why this works, but I suspect it may have something to do with creating more small common chunks that do not change between recompiles?. ",
    "franjohn21": "@SpaceK33z @evilebottnawi -- would it be possible to take a look at this PR? . ",
    "wocaatm": "I read the code, but i can't find the options.open in Server.js??. ",
    "jslq": "Same here but for overlay too. Same here but for overlay too. ",
    "seanwhudson": "Issue resolved, my apologies.. Always double check your file names and locations guys. ",
    "deckchairlabs": "Also experiencing the same issue, results in 404 not found when posting to a proxy. Also experiencing the same issue, results in 404 not found when posting to a proxy. ",
    "montselozanod": "Hi, what is the status of this? Will webpackdev-server eventually get the fix?. Hi, what is the status of this? Will webpackdev-server eventually get the fix?. ",
    "VishalGulati": "Any update on this? I am also facing this with Webpack 2.10.. Any update on this? I am also facing this with Webpack 2.10.. ",
    "thomas-darling": "Yeah, this issue is more than a little inconvenient - only being able to proxy GET requests effectively makes the proxy feature completely useless, and really gets in our way.\nI see the dependency on webpack-dev-middleware is now at v3.4.0, so sounds like it should be a very easy fix, based on earlier comments.\nAny chance we could have a fix for this out in the near future, @michael-ciniawsky?. Yeah, this issue is more than a little inconvenient - only being able to proxy GET requests effectively makes the proxy feature completely useless, and really gets in our way.\nI see the dependency on webpack-dev-middleware is now at v3.4.0, so sounds like it should be a very easy fix, based on earlier comments.\nAny chance we could have a fix for this out in the near future, @michael-ciniawsky?. Ok, let's try this again...\n@michael-ciniawsky - or maybe @evilebottnawi, just because I noticed you actually commit things.\nThis is becoming really annoying. Being able to proxy API requests is a pretty essential feature, and leaving it broken for months is not acceptable - especially when the fix seem to be already identified and easily implemented. There's a lot of people depending on this project, so please fix this bug now.. Ok, let's try this again...\n@michael-ciniawsky - or maybe @evilebottnawi, just because I noticed you actually commit things.\nThis is becoming really annoying. Being able to proxy API requests is a pretty essential feature, and leaving it broken for months is not acceptable - especially when the fix seem to be already identified and easily implemented. There's a lot of people depending on this project, so please fix this bug now.. Yeah, I'm actually looking into this right now, but can't seem to reproduce it.\nWhen I wrote here a few days ago, I thought I had run into the issue again - it has bitten me quite a few times now, and the error appeared to be the same, hence the frustration - but looks like it was actually a problem on my end this time. Right now, proxying appears to work as expected for all HTTP methods, so unless someone else can still reproduce it, I think it might actually have been fixed somewhere along the way - which would be great \ud83d\ude03 :tada:. Yeah, I'm actually looking into this right now, but can't seem to reproduce it.\nWhen I wrote here a few days ago, I thought I had run into the issue again - it has bitten me quite a few times now, and the error appeared to be the same, hence the frustration - but looks like it was actually a problem on my end this time. Right now, proxying appears to work as expected for all HTTP methods, so unless someone else can still reproduce it, I think it might actually have been fixed somewhere along the way - which would be great \ud83d\ude03 :tada:. ",
    "mishaszu": "I found out that running via CLI with flags works:\njson\n\"start\": \"webpack-dev-server --mode development --config ./webpack/webpack.config.js --hot --open\"\nbut running with webpack config doesn't:\njson\n\"start\": \"webpack-dev-server --mode development --config ./webpack/webpack.config.js\"\njs\ndevServer: {\n    hot:true,\n    open: true,\n}\n. ",
    "fsultani": "You have filename: '[name].bundle.js', in webpack.config.js.  I don't know if that's right.  That object should look more like\noutput: {\n  path: path.resolve(__dirname, 'dist'),\n  filename: 'bundle.js',\n},\nFor your script, try adding in flags for the entry point, and the output:\n\"start\": \"webpack-dev-server --entry ./src/index.tsx --output-filename ./dist/bundle.js\"\nSee if that works, though I don't know if .tsx is the right extension.  May need to compile to js.. ",
    "talolard": "@brandonwiemann This sounds like what I'm doing wrong and suffering with.\nCould you shed more lite on how to link common scripts ? . ",
    "Dozalex": "@evilebottnawi issue updated, it's not ExtractTextPlugin problem. Please, check again.. @ntbm yes, i run node process with wds and it works.\n```javascript\n// server-hmr.js\nconst webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst config = require('./config/webpack.hmr.config');\nconst options = {\n  noInfo: true,\n  compress: true,\n  contentBase: 'build',\n  historyApiFallback: true,\n  hot: true,\n  port: PORT,\n  host: HOST,\n  proxy: {\n    '/api/**': {\n      target: ${apiPath}/api/,\n      secure: false,\n      pathRewrite: { '^/api/': '' }\n    }\n  },\n};\nWebpackDevServer.addDevServerEntrypoints(config, options);\nconst compiler = webpack(config);\nnew WebpackDevServer(compiler, options).listen(PORT, HOST, (err) => {\n  if (err) {\n    console.error(err);\n  }\n});\n```\nAlso, problem may be in https://stackoverflow.com/questions/51622851/webpack-dev-server-does-not-rebuild-bundle\nIn general, I now don't have this problem.. ",
    "yagoestevez": "Hi,\nNot sure if it's the same vulnerability. I was just warn by NPM about these vulnerabilities which webpack-dev-server depends on:\n\n. ",
    "rschultheis": "\ud83d\udc4b Hi I am looking at this issue as it seems to relate to these security advisories:\n- https://nvd.nist.gov/vuln/detail/CVE-2018-14732\n- https://www.npmjs.com/advisories/725\nAs far as I can tell, the fix commit has not made it to master nor been released?  Both the NPM Advisory and CVE report a fix version of 3.1.6, but nothing in 3.1.6 release looks like the fix for this?  The bugfix/origin-header branch needs a PR and to get merged and deployed.\nAm I mistaken or has the fix for this not really been deployed?\nThis package is widely used so I am looking at this from the perspective of making sure the public data sources are correct.\nCC fix commit author @sokra . ",
    "kfern": "In webpack-dev-server 2.11.3, npm audit found 1 high severity vulnerability.\n+1 @xhocquet . We need a 2.x security update patch.. ",
    "3stacks": "Ah, yes. Lockfiles are the problem. Thank you both. ",
    "jrop": "I am getting this in an app created with create-react-app under node 10.9.0\nIt seems to be intermittent. @blackshadev \nmacOS 10.13.6\nwebpack-dev-server 2.9.4\nI created the app using create-react-app --scripts-version react-scripts-ts.   As others have noted, rebooting the machine causes the issue to go away for a limited time.  But then it comes right back.  I have switched to using Node 8.11.4 and the issue has ceased to occur.\n. @evilebottnawi I believe the responsible party to upgrading webpack-dev-server is the team maintaining react-scripts-ts, which is why I have resorted to using an older version of Node instead. ",
    "neo7official": "I am having the same issue.. ",
    "LeonardoHabitzreuter": "@evilebottnawi Do you have checked the reproducible test repo? This certainly not looks like an invalid config. ",
    "addaleax": "Updated the test with an increased timeout because of the on-the-fly key generation.\n(Edit: And updated again to appease the linter.). @Kovensky Without having looked into it deeper, from https://github.com/expressjs/express/pull/3390#issuecomment-408646774 and below, it looks like there might be some movement in that area? :). Btw, are the recommendations for trying out pull requests in the CONTRIBUTING.md accurate? See e.g. https://github.com/nodejs/node/issues/21665#issuecomment-410003250. > I think this is definitely blocked by nodejs/node#21665 and expressjs/express#3388 atm\n@michael-ciniawsky I\u2019m not sure if I\u2019m understanding you correctly, but this PR is not blocked on either of these issues. It fixes the first one, and the second one is just something to keep in mind for the future (fully migrating from SPDY to the built-in HTTP/2 module in Node would be dependent on it being solved).\nWhat this PR may be blocked on is this issue, reported by somebody who tried this code out: https://github.com/nodejs/node/issues/21665#issuecomment-410208986\nI don\u2019t know enough about webpack-dev-server to figure out whether that issue is actually related, and if so, in what way. (And as @Kovensky said, automated testing is hard here & I\u2019m not sure how to do it well.). I\u2019ve rebased, and dropped the commit that adds Node 10 to the CI matrix since the .travis.yml has changed significantly (and I assume it would have been added anyway as part of that refactor if there was interest in it).. ",
    "leup": "Any news on this one ?. ",
    "philiparvidsson": "@evilebottnawi http://cmder.net/ (conemu). I've never seen it anywhere else. What is it supposed to say?. @evilebottnawi Same thing:\n\n. @B3zo0 last screenshot is cmd.exe with win10 defaults. what's the scrambled string supposed to say? I never recall having to change that before. it's correct that cmd.exe is set to oem, however cmder is set to ansi.\nanyway, shouldn't it work fine with default settings=. ",
    "robbyemmert": "I'm getting the same issue on MacOS High Sierra. ",
    "pybuche": "@evilebottnawi thanks for you quick answer!\nI understand what you are saying, but I'm working on a personnal internet connection without any security, I'm on a last-generation Macbook without firewall enabled so I don't see what could cause my requests to be blocked...\nIs there any configuration on my express server to enable webpack-dev-server to proxy it correctly?\nWhat is weird also is that I sometimes manage to have one good refresh, so the server has actually been reached at least once correctly.... Anyone encountered the problem?. Indeed, problem still exists.\nI'll try to do that asap, thanks for looking into it.. @evilebottnawi here you go: https://github.com/pybuche/react-redux-ssr-starter/tree/hmr\nI used an old repo of mine with the same structure: React + Redux + Redux-Saga\nI had the same problem as I had before: I do have \"HMR\" logs in my console, and the \"App hot update...\" when something changes, but no page reloading.\nYou can see the \"Error proxy\" error message if you refresh the page manually.\nAs I told you in the issue description, I had the same issue with my professional project. After digging hours & hours, I was going in circles having either a systematic \"error proxy\" error when the page was reloading or an \"app hot update\" message without hot update...\nI you find the solution, that'd be awesome \\o/\nThx!. ",
    "exAspArk": "js\nhistoryApiFallback: {\n  index: '/myapp/'\n}\n^ that fixed the issue.\nCan anyone who knows how this option works update the docs please? . ",
    "acacia314": "I ran into this issue as well.\nI was running dev server with a specified self signed cert which used localhost as the CA. The page would load fine under localhost but any HMR requests failed because they pointed to the network address.\nhttps: {\n  pfx: fs.readFileSync('../localhost.pfx'),\n  passphrase :  'XXXXXX',\n}\nSetting useLocalIp: false did not resolve the issue for me.\nHowever, specifying the host as localhost did force the hmr requests to go through localhost.\nconst config = {\n  devServer: {\n     host: 'localhost',\n     https: {\n         pfx: fs.readFileSync('../localhost.pfx'),\n         passphrase :  'XXXXXX',\n    }\n  }\n}. ",
    "livemixlove": "Doing my own homework.  Looks like config optimist used to be in that location:\nhttps://github.com/webpack/webpack/tree/c0afdf9c6abc1dd70707c594e473802a566f7b6e/bin\nI'm wondering what would be referencing the old file.... Oh!\nI forgot to install(upgrade)  webpack-cli and webpack-dev-server globally!  Sorry to create noise here.. ",
    "bw": "OK -- thanks for the clarification. webpack-serve wasn't working anyways (I couldn't get React hot reloading to work) so we've reverted back to webpack-dev-server.. OK -- thanks for the clarification. webpack-serve wasn't working anyways (I couldn't get React hot reloading to work) so we've reverted back to webpack-dev-server.. ",
    "rpellerin": "Thank you for the update @michael-ciniawsky \nCould you please keep us posted from time to time on this matter?. Thank you for the update @michael-ciniawsky \nCould you please keep us posted from time to time on this matter?. ",
    "ferdinando-ferreira": "\nhttps://github.com/webpack-contrib/webpack-serve/issues/262#issuecomment-417328623\n@evilebottnawi commented\nDon't use webpack-serve, it will be PoC and all features will be shipped in webpack-dev-server in near future. In near future webpack-serve will be archived.\n\n@michael-ciniawsky: is that a final decision? Other than a few warts webpack-serve (at least for my use case) is faster, more modern and it's codebase a whole lot more organized than webpack-dev-server. . ~~On Windows it doesn't automatically look into that folder~~\n```console\nc:\\path\\webpack-dev-server>.\\node_modules.bin\\rimraf ssl/*.pem\nc:\\path\\webpack-dev-server>rimraf ssl/*.pem\n'rimraf' is not recognized as an internal or external command, operable program or batch file.\n```\nStrike that, npm run does looks into that folder. Done. @michael-ciniawsky beat you to the punch. Already fixed :). ",
    "benwiley4000": "Kind of glad to hear this. I have been using webpack-serve for one of my projects and it generally works great with little config - so it's an awesome tool - but it's frustrating how the maintainer of that project has tended to respond to almost anyone who opens an issue with such a passive-hostile/self-important tone, always rushing to assure folks it's probably their own fault. I'm able to navigate that, but I think it turns away a lot of newcomers who are just trying to get into the ecosystem, when webpack-dev-server has been routing all this traffic over there.\nObviously I'm grateful the maintainer went through the effort to write the module and maintain it, but I expect the javascript community to be a bit more friendly and forgiving.. Aha, thanks for catching that. I didn't account for the case where options.port is defined but argv.port is not (I forgot since argv used to have a default).\nWhat do you think of just changing it to:\njavascript\noptions.port = argv.port === DEFAULT ? (options.port || argv.port) : (argv.port || options.port);\n? This should account for all cases I believe.\n. It's a bit strange semantically when argv.port is not DEFAULT and therefore favored because it's undefined, but we'll still land on options.port in the end.\n. My branch has been updated.\n. ",
    "linlinyang": "I just write a empty page,no css  and just write a console.log in my entry js.And the config is also the base config:\n```js\nlet path = require('path');\nmodule.exports = {\nentry: path.resolve(__dirname,'src/index.js'),\noutput: {\n    path: path.resolve(__dirname,'dist'),\n    filename: 'index.js'\n},\ndevServer: {\n    port: 8080,\n    open: true,\n    contentBase: path.resolve(__dirname,'dist')\n},\nmode: 'development'\n\n};\n```\nMy HTML\nhtml\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <script type=\"text/javascript\" src=\"./index.js\"></script>\n</body>\n</html>\nMy index.js  JS:\nconsole.log('Hello World');\nBut my page document's width just 336px while my window's width is 1663px.\nThis bug hasn't show in firfox and edge or other browser,just in chrome.. @montogeek  How to resolve it .",
    "danburzo": "~~Woo-hoo! Missed that there's 3.1.6 available, works like a charm with it.~~\nOops, spoke too soon. It still reproduces on 3.1.6.... @evilebottnawi here you go: https://github.com/danburzo/webpack-dev-server-repro\n(instructions in Readme). @evilebottnawi here you go: https://github.com/danburzo/webpack-dev-server-repro\n(instructions in Readme). In my initial report, I was on macOS High Sierra (10.13.6) when this happened. I am currently on macOS Mojave (10.14.1) and it still reproduces.. In my initial report, I was on macOS High Sierra (10.13.6) when this happened. I am currently on macOS Mojave (10.14.1) and it still reproduces.. ",
    "SebT": "Having the issue on Linux and Mac with webpack-dev-server v3.1.8.. ",
    "superhawk610": "@SebT I've also had this issue, specifically when using the -theme react preset from the ReasonReact starter. I'm working on getting reproducible steps - it doesn't seem to happen in a dry environment, so I imagine it's some conflict with another file watcher that occurs after some period of use.\nEdit: Alright, I've created a branch that consistently reproduces this here. To reproduce:\n1. Clone and install dependencies.\nyarn\n2. Install bucklescript globally.\nyarn global add bs-platform\n3. Start bucklescript watcher.\nyarn start\n4. Start dev server.\nyarn server\n5. Touch a Reason source file, eg:\ntouch src/components/Stateful/Stateful.re\nAt this point, the dev server gets stuck at Compiling..., with the logs looking something like\nyarn server\nyarn run v1.10.1\n$ webpack-dev-server\n\u2139 \uff62wds\uff63: Project is running at http://localhost:8000/\n\u2139 \uff62wds\uff63: webpack output is served from /home/superhawk610/code/the-completionist/build/\n\u2139 \uff62wds\uff63: Content not from webpack is served from /home/superhawk610/code/the-completionist/build/\n\u2139 \uff62wds\uff63: 404s will fallback to /index.html\n\u2139 \uff62wdm\uff63: Hash: d9fc1cbd98cbce78242b\nVersion: webpack 4.23.1\nTime: 469ms\nBuilt at: 10/31/2018 1:31:25 AM\n     Asset       Size  Chunks             Chunk Names\n  Index.js    1.2 MiB    main  [emitted]  main\nindex.html  257 bytes          [emitted]  \nEntrypoint main = Index.js\n[0] multi (webpack)-dev-server/client?http://localhost:8000 ./src/Index.bs.js 40 bytes {main} [built]\n[./node_modules/ansi-html/index.js] 4.16 KiB {main} [built]\n[./node_modules/ansi-regex/index.js] 135 bytes {main} [built]\n[./node_modules/loglevel/lib/loglevel.js] 7.68 KiB {main} [built]\n[./node_modules/reason-react/src/ReactDOMRe.js] 2.6 KiB {main} [built]\n[./node_modules/reason-react/src/ReasonReact.js] 22.2 KiB {main} [built]\n[./node_modules/strip-ansi/index.js] 161 bytes {main} [built]\n[./node_modules/url/url.js] 22.8 KiB {main} [built]\n[./node_modules/webpack-dev-server/client/index.js?http://localhost:8000] (webpack)-dev-server/client?http://localhost:8000 7.78 KiB {main} [built]\n[./node_modules/webpack-dev-server/client/overlay.js] (webpack)-dev-server/client/overlay.js 3.58 KiB {main} [built]\n[./node_modules/webpack-dev-server/client/socket.js] (webpack)-dev-server/client/socket.js 1.05 KiB {main} [built]\n[./node_modules/webpack/hot sync ^\\.\\/log$] (webpack)/hot sync nonrecursive ^\\.\\/log$ 170 bytes {main} [built]\n[./node_modules/webpack/hot/emitter.js] (webpack)/hot/emitter.js 75 bytes {main} [built]\n[./src/Index.bs.js] 417 bytes {main} [built]\n[./src/components/App/App.bs.js] 1.57 KiB {main} [built]\n    + 32 hidden modules\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint undefined = index.html\n    [./node_modules/html-webpack-plugin/lib/loader.js!./src/index.html] 466 bytes {0} [built]\n    [./node_modules/lodash/lodash.js] 527 KiB {0} [built]\n    [./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 489 bytes {0} [built]\n    [./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes {0} [built]\n\u2139 \uff62wdm\uff63: Compiled successfully.\n\u2139 \uff62wdm\uff63: Compiling...\nCtrl+C exits the process but leaves the server running\n$ ps -ef | grep webpack\nsuperha+ 23562 23551  0 01:31 pts/2    00:00:00 /bin/sh -c webpack-dev-server\nsuperha+ 23563 23562 95 01:31 pts/2    00:06:22 node /home/superhawk610/code/the-completionist/node_modules/.bin/webpack-dev-server\nsuperha+ 24114 22506  0 01:38 pts/1    00:00:00 grep --color=auto webpack. The error (in this case, at least) appears to occur when the dev server gets stuck compiling. Ctrl+C at this point doesn't actually end any processes - all 3 processes listed above remain active after sending SIGINT to the yarn process.\nFWIW, I'm using VSCode with the Reason/OCaml extension.\nEdit: Alright, this latest commit consistently causes webpack to freeze at Compiling... and orphan the dev server process on SIGINT. It's preventing me from any further development :slightly_frowning_face:\nEdit 2: After trying to replicate on a second machine, this seems to be a borked install as everything is working fine.. ",
    "Krzychek": "\nThe error (in this case, at least) appears to occur when the dev server gets stuck compiling. Ctrl+C at this point doesn't actually end any processes - all 3 processes listed above remain active after sending SIGINT to the yarn process.\n\nThe same happens for me on Linux (up-to-date ArchLinux). Also it drains 100% of one CPU core. . ",
    "rhys-vdw": "Can confirm I'm still experiencing this at webpack-dev-server 3.1.10, macOS 10.13.6\ncc @nfm confirm whether you're still experiencing this one?. OS:\n-> sw_vers\nProductName:    Mac OS X\nProductVersion: 10.13.6\nBuildVersion:   17G3025\nUsing the above repo:\n\nEvery time the progress bar is duplicated I am pressing ^C. Also I need to press it to bring the prompt back at the end.. (Note that @nfm is experiencing this on Ubuntu so it's not just macOS). ",
    "nfm": "Yes, this is still happening for me if I try to Ctrl-C when actively compiling. I can successfully Ctrl-C when WDS is idle though.. ",
    "bhavya9107": "I want to work on this issue. How to get started?. What is expected behavior of kill method?. why can't we just process.exit(). if we want to close a specific process then we need specific close and kill methods, otherwise process.exit() is fine according to me. What you say @evilebottnawi . Hi @evilebottnawi, I am working on this, on which branch should I request PR as there is no next branch now.. Hi @evilebottnawi, I am working on this, on which branch should I request PR as there is no next branch now.. I am looking for contribution opportunities, I thought it was meant to be resolved as this PR was open since October.. I am looking for contribution opportunities, I thought it was meant to be resolved as this PR was open since October.. @Snivio 0.0.0.0 is used to access all interfaces on your network. Linux converts/corrects it to 127.0.0.1 silently, whereas Windows doesn't. If using VM keep it 0.0.0.0 else change it to 127.0.0.1 in your config file.. > I think we should rephrase this, you can use webpack-dev-server without index.html, example using proxy\n@evilebottnawi suggest possible ways of using webpack-dev-server(without index.html) that are to be included in the doc. Also, do I needa mention some sample code for each one of them?. > > @bhavya9107 better do this in webpack docs repo, not here\n\n*Could u provide me with the link to that.\n. > I think better provide link on webpack docs site, we can rename/move this file\n\n@evilebottnawi I just changed the link. Please review.. > README already very small, no need navigation, i think\nit makes doc better and more efficient to be referred. I think it must be there. DONE. please reply on this. ",
    "franklion": "@michael-ciniawsky ok, actually I want to implement MHR, and then I have many pug pages as static files. So when I modify one of pug file, I want dev-server to reload browser. At the same time, I modify sass file, It can be Hot reload(not reload browser).\nI found the same issue here (https://github.com/webpack/webpack-dev-server/issues/1271).\nThe last developer @cloudratha commented\nbefore(app, server) {\n    server._watch(`some/path/to/watch/*/**.html`);\n}\nI try to implement it, but it doesn't work. because one of the options depth is 0.\nbefore(app, server) {\n    server._watch(`some/path/to/watch/*/**.pug`);\n}\n. ",
    "mwikstrom": "@evilebottnawi how to figure out which port to publish when using the before approach?\nI need to publish webpack's port and public path, preferably using bonjour. Following the suggestion in this thread, I should invoke bonjour explicitly in my before callback (instead of relying on the bonjour option).\nHowever, the before callback gets two arguments: app and server (no options as given to the built-in bonjour function).  I can't figure out how to extract which port the server is listening to given those arguments.. @jharwig Thank you, that's exactly what I needed!\n@evilebottnawi Yes, that might be a good idea. However, since the port number is available on this it might be sufficient to just document that?. ",
    "nils4iviews": "Is there any JavaScript-API that could be used instead?. I don't mean that you should expose the utils-folder as API. But it seems to me that the grunt-webpack project is using the internal API, because there is no documented way to run the dev-server from JavaScript.\nI honestly haven't had a closer look, what grunt-webpack is really doing with the utils-file, so I can't really tell what they would need. I'm just concerned about a possible break in the future.\nBut I also don't have the time and the resources to look at it, so I won't bother you with anymore.. ",
    "Tzcodejs": "@hg-pyun It also failure. Can you describe it in detail? Thanks!\nThis is my options.\noutput: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'js/[name].min.js',\n        publicPath:'/'\n    }\nOnly on way to sucessfull, ran 'npm run build' first, and ran 'npm start' second. But I don't know reason.\npackage.json\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"watch\": \"webpack --watch\",\n    \"start\": \"webpack-dev-server --open\",\n    \"build\": \"webpack --env.production\"\n  }. @hg-pyun Thank you very much!. ",
    "nebrelbug": "@evilebottnawi I use webpack-dev-server. I think it would work on any repo with Git Bash, probably. ",
    "aprilmintacpineda": "I'm experiencing this same error, but in my case the process exits after a while after ctrl+c.\nThis is the output I get after CTRL+C:\n\nI know that the dev-server is still running because when I run the server again, it would complain that the port is already occupied and I have to manually kill that process.\nThis is how I run the dev server:  babel-node node_modules/.bin/webpack-dev-server --config webpack/start.js. I see, after doing only webpack-dev-server --config webpack/start.js it exited with no error. But then would need to refactor my codes for the build script to work without babel-node. Any suggestion?. ",
    "ninofiliu": "I've got more or less the same behavior:\n\nwebpack-dev-server --open\nEverything works fine when dev-serving the project\nHit Ctrl+C\nlocalhost:8080 doesn't serve anything anymore, however the node task launched by the dev server is still running (30% of the CPU power + ~400MB of RAM)\n\nOS: Windows\nConfig: HMR enabled. ",
    "mike392": "@evilebottnawi, well thank you for the notice... I guess the best option here would be manually turn off the Hot Module Reloading on remote server like this:\ndevServer: {\n   hot: false\n} . ",
    "rathpc": "I also experienced this issue with the following config:\nOperating System: macOS Sierra (10.12.6)\nNode Version: 8.11.2\nNPM Version: 6.1.0\nwebpack Version: 2.7.0\nwebpack-dev-server Version: 2.11.2\nI am using the patch fix mentioned by @misterfresh with some additional logic until an official fix is released.. ",
    "ScorpAL": "\n@davidjoy, simply adding spdy: {protocols: ['http/1.1']} to https options in dev-server config workarounded this issue for us\n\nThank you. That helps me.\ndevServer: {\n    host: '0.0.0.0',\n    port: 3000,\n    https: {\n        spdy: {\n            protocols: ['http/1.1']\n        }\n    }\n}. ",
    "Ailuue": "\n\n@davidjoy, simply adding spdy: {protocols: ['http/1.1']} to https options in dev-server config workarounded this issue for us\n\nThank you. That helps me.\ndevServer: {\n    host: '0.0.0.0',\n    port: 3000,\n    https: {\n        spdy: {\n            protocols: ['http/1.1']\n        }\n    }\n}\n\nAny way to do this from create-react-app without ejecting?. ",
    "iisisrael": "Protocol config fix worked with the caveat that I also had to remove the --https option in our dev build script run line in our package.json, so the devServer https config wouldn't get borked back to just true.. ",
    "kadamwhite": "Thank you both. I feel some README note might be beneficial here, given that less than a month ago I was hearing otherwise; however I understand if the situation with webpack-serve might preclude that. I appreciate your responses regardless. . ",
    "Muzietto": "In my case, adding outputPath to the dev-server config object just doubled the error message:\noptions should NOT have additional properties\noptions should NOT have additional properties\n\nI removed colors: true, (suggested somewhere) and the error message went away. I guess this is all about the version of webpack-dev-server we are using. In my case it's 3.1.8. ",
    "dakom": "On a similar note - I'm not getting live-reloading with multiple configs. I get the rebuild when looking at the terminal, but the browser doesn't refresh (if I manually refresh, I do see the changes).\nI'm happy to file a separate issue but I'm wondering if this is specifically due to multiple configs or some other bug... does live-reload work for you in this case?. Nevermind - my issue is fixed by not having the manual entry point added as suggested at https://stackoverflow.com/a/41223040/784519\nRemoving that fixed things - though it could be that I had it added to all the configs whereas it would have worked if only added to the first shrug\n. ",
    "j-langlois": "Any update on this?. I ended up using a different tool for reasons other than this, sorry. ",
    "cheezy64": "@j-langlois I used create-react-app and the page is being served correctly on my Mac.  I haven't dug into the details, but I think create-react-app does some configuration with webpack-dev-middleware.\nSo, this original issue still exists, but I've been able to work around it.. ",
    "ematipico": "PR updated! . Actually, HtmlWebpackPlugin is not mandatory. A index.html is enough.\nBut I agree that there should be a small paragraph about that! . The guide talks about how to use typescript on your source code, not on your configuration.\nIf you want to run typescript on you configuration, use ts-node, if you don't please revert to see simple JavaScript. This is not an issue related to this project.. I think the issue can be closed as it's not an issue related to this project. I could update the it with link but I'd prefer to do it with another PR, if it's ok. ",
    "lpender": "If using an index.html, do you add a script reference to you bundle? Or does webpack-dev-server inject and serve it from memory?. ",
    "marcofugaro": "Sure thing! Basically I was using these hooks to show only the information I need to the console (same thing I was using webpack-command for).\nHere is config I was using, take a look at the comments:\n```js\nconst formatWebpackMessages = require('react-dev-utils/formatWebpackMessages')\nconst openBrowser = require('react-dev-utils/openBrowser')\nconst prettyMs = require('pretty-ms')\nmodule.exports = {\n  serve: {\n    port: 8080,\n    // don't show all the default webpack stuff\n    logLevel: 'silent',\n    hotClient: {\n      logLevel: 'silent',\n    },\n    devMiddleware: {\n      logLevel: 'silent',\n    },\n    on: {\n      listening: ({ options }) => {\n        // try to open into the already existing tab\n        openBrowser(http://localhost:${options.port})\n      },\n      'build-finished': ({ stats }) => {\n        if (stats.hasErrors()) {\n          return\n        }\n    const time = prettyMs(stats.endTime - stats.startTime)\n    console.log(`Compiled successfully in ${time}`)\n  },\n  'compiler-error': stats => {\n    // format the errors in a nicer way\n    const messages = formatWebpackMessages(stats.json)\n    console.log(messages.errors[0])\n  },\n},\n\n},\n}\n```. @polco as I already specified, I don't want to call webpack from node, I have a simple webpack.config.js and want to keep it that way.. @araphiel how did you solve this issue for your project??. Done!. @evilebottnawi\nFor now I've made the test that edits a nested file, but I should check that chokidar has been triggered and the browser has been refreshed. How do i go about testing this?\nCould you give me more directions?. @evilebottnawi alright I wrote some code that should work, however I am having some troubles with connecting puppeteer to the server, am I doing something wrong?\n\n. @evilebottnawi jest is already being run with the --runInBand, so it should run one at a time.\nAlso no, I don't have anything on the 9001 port, it still gives the error even if I change the port.. Thank you @hiroppy that fixed my problem, however i could not get socket.on('connection', to trigger during tests, so I ended up lisstening to chokidar's change event. \nNow the test works @evilebottnawi!. ",
    "polco": "what about the solution given in this issue: https://github.com/webpack/webpack-dev-server/issues/132 ?\nusing the hook API instead of the deprecated plugin one:\n...\nconst compiler = webpack(webpackConfig);\ncompiler.hooks.done.tap('done', (stats) => {})\nconst server = new WebpackDevServer(compiler, options);\n...\n. My bad . ",
    "roy201603": "\n. \ni have install webpack-dev-server to 2.11.3  and not use babel-loader strict mode  so  you think this is babel bring this problem?. ",
    "Srikanth979": "At First, I included json-loader in dependencies section of package.json\nI included json-loader to loaders section in webpackConfigBuilder to help webpack compile \"moment-timezone\" which has a file latest.json\nI figured, i don't require the same at runtime and moved it to devDependencies section in package.json.\nThis resolved the issue. ",
    "aladdin-add": "In most cases, there is no difference, but localhost can be changed via hosts(I encountered it unexpectedly). \ud83d\ude04 . ",
    "LongLiveCHIEF": "localhost goes through loopback resolution, whereas 127.0.0.1 does not. lib/Server.js always allows IP based hostnames, so with localhost as the default, then using 127.0.0.1 in your browser will always work, however the inverse is not true.\nIn cases where localhost doesn't include 127.0.0.1, then you can use the host: config option to set wds to listen to the correct network interface url so that localhost can still be used.\nChanging this could have impacts to certificates, and there are built-in options provided to support the problem case described by OP.. ",
    "krzystof": "@evilebottnawi I would be happy too, but I am really not sure how to go about this. \nI have not found tests examples that use the socket and test the hot reloading part. Do you have any pointers on how to get started with these?. ",
    "simpert": "I figured it out. The problem I had was mistake in code module.exports =.  I think the error I received kinda through me off that for a bit as according to errors I was looking for issue with the imports.\nchanging to const config = merge... and following export default config; did the trick.. ",
    "liyokuna": "@evilebottnawi here is the link to a test repo :)\n. The problem is on IE 9 and superior version . um... I didn't think that this could cause this problem.\nthank you I will work on it.\n. @evilebottnawi how did you find that ? how did you analyze this issue ?. the configuration is misused ?  @evilebottnawi . ",
    "akoidan": "@evilebottnawi I'm using it, should I close this issue and report new one to webpack-hot-middleware?. ",
    "oNaiPs": "@michael-ciniawsky @evilebottnawi should be good to go. ",
    "RayBowman2017b": "As it turns out, all I had to do was to give the \"hot\" flag on the command to turn on the React Hot Loader:\npackage,json\n    \"dev-server\": \"webpack-dev-server  --env=development --hot\",\nhttps://gaearon.github.io/react-hot-loader/getstarted/\n. ",
    "nekolab": "A really simple repro on: https://github.com/nekolab/repro-webpack-dev-server-1529\nRun npm run dev on different version of nodejs (6/8/10),  and visit https://localhost:8081/ , you will see only node 8 will cause ERR_SSL_VERSION_OR_CIPHER_MISMATCH\nNot dig into how wds server content now, but require(\"tls\").DEFAULT_ECDH_CURVE = \"auto\" may helps, if you guys use third-party library to do the job, maybe we should fill an upstream issue for this. Hi @evilebottnawi \nA quick test confirms that adding require(\"tls\").DEFAULT_ECDH_CURVE = \"auto\"; to the first line of Server.js can slove this issue.\nIf you think this way is acceptable to webpack dev server, I can create a pull request for it. Fixed in https://github.com/webpack/webpack-dev-server/releases/tag/v3.1.10\nPull Request: https://github.com/webpack/webpack-dev-server/pull/1531. @evilebottnawi \nYes, node@10 default tls. DEFAULT_ECDH_CURVE to auto\nSeems this change breaks node@6, so I've added some version check. @evilebottnawi \nYes, node@10 default tls. DEFAULT_ECDH_CURVE to auto\nSeems this change breaks node@6, so I've added some version check. Thanks for merging!\nCan we backport this patch to v2 branch?. Thanks for merging!\nCan we backport this patch to v2 branch?. Oops, we may made a little mistake, 8.12 is less than 8.6 in number, so it won't work for node@^8.10\nI suggest just compare version >= 8 && version < 10, I believe it will not take any side effect because for version from 8 to 8.6, the tls.DEFAULT_ECDH_CURVE is actually not take effect due to node-side bug.\nIf you are okay with this I will made another patch for it, sorry for the inconvenience \n@michael-ciniawsky . Oops, we may made a little mistake, 8.12 is less than 8.6 in number, so it won't work for node@^8.10\nI suggest just compare version >= 8 && version < 10, I believe it will not take any side effect because for version from 8 to 8.6, the tls.DEFAULT_ECDH_CURVE is actually not take effect due to node-side bug.\nIf you are okay with this I will made another patch for it, sorry for the inconvenience \n@michael-ciniawsky . Thanks for guiding, I've update the code and please take a look again.\nThere is another place using regex to match the version, I've changed it too. ",
    "donaldpipowitch": "Then I'd set it in both places, because new Server is called too late, if I use the CLI API, if I'm not mistaken. The custom config file would already be required at that stage.. Then I'd set it in both places, because new Server is called too late, if I use the CLI API, if I'm not mistaken. The custom config file would already be required at that stage.. > Can you describe where it is late?\nWe need this env var, before the webpack.config.js is required. If I'm not mistaken this happens before new Server() in case of the CLI.. > Can you describe where it is late?\nWe need this env var, before the webpack.config.js is required. If I'm not mistaken this happens before new Server() in case of the CLI.. Added lint fix and a small test. \ud83d\udc4d . Added lint fix and a small test. \ud83d\udc4d . I wasn't sure where I should put that test, so I created a new file. Hope that's fine? . I wasn't sure where I should put that test, so I created a new file. Hope that's fine? . Anything more I can do? :) Thanks so far.. Anything more I can do? :) Thanks so far.. Is this a failure on my side? \ud83e\udd14 Hard to tell for me. Should I rebaserebase with the current master?. Is this a failure on my side? \ud83e\udd14 Hard to tell for me. Should I rebaserebase with the current master?. ",
    "SerhiiBilyk": "@evilebottnawi thank you for your fast response, I will share tomorrow a minimum reproducible repo. @evilebottnawi thank you for your fast response, I will share tomorrow a minimum reproducible repo. I have created reproducible repo, and it works fine.\nWhen I'm starting dev-server in VSCode terminal it works as expected, unlike in windows cmd.\nNow dev server in main app works fine.\nI don't know how to explain it. When I will understand what's happened I will reopen issue and reproduce all my steps.\n@evilebottnawi Before all steps, I have replaced MiniCssExtractPlugin to 'style-loader'.\nNow, I'm using MiniCssExtractPlugin  only in production build.\n@evilebottnawi Thank you for your attention\n . I have created reproducible repo, and it works fine.\nWhen I'm starting dev-server in VSCode terminal it works as expected, unlike in windows cmd.\nNow dev server in main app works fine.\nI don't know how to explain it. When I will understand what's happened I will reopen issue and reproduce all my steps.\n@evilebottnawi Before all steps, I have replaced MiniCssExtractPlugin to 'style-loader'.\nNow, I'm using MiniCssExtractPlugin  only in production build.\n@evilebottnawi Thank you for your attention\n . ",
    "YonatanKra": "@evilebottnawi inline is the default. It didn't work, so I tried inlinde:false and it worked.. ",
    "maclockard": "FWIW I was running into this issue as well, but bumping to the latest version webpack-dev-server resolved it.\nVersion: 3.2.1. ",
    "uxweb": "Alright! @michael-ciniawsky and @evilebottnawi Thank you so much!. ",
    "camertron": "Awesome, thanks @evilebottnawi :) Happy to work on tests for this, which test files should I look at specifically?. Great, thanks @evilebottnawi. Is there a standard expectation I can use that asserts that compilation is triggered?. @evilebottnawi added a test a few days ago. No rush, but any idea when this can be merged/released?. @evilebottnawi done :). I need res, but req can be removed. Done :). ",
    "wangzhigang": "Such as:\npage:\n    index.html\n    about.html\n    news.html\n    ......\nI want to select the page I want to preview instead of opening page's folder and open index.html by default\u3002\nbut\uff0cConfigure index:'' to report an error\u3002\ndevServer: {\n        contentBase: [\n            path.join(ROOT, 'src/')\n        ],\n        index:''\n}\n. ",
    "trescenzi": "@evilebottnawi yea I'll put more time into this tonight. The travis test that's failing is the CLI one. Looks like it times out occasionally? . Updated with better tests.\nIf I get a chance this evening I'll look into the cli tests.. The test issues are only in node 11 it seems. I'm still investigating but there isn't anything obvious in the node 11 release notes that would indicate that child process would behave differently.. @evilebottnawi I can reproduce the hanging CLI tests locally. I'm busy over the next few days but I can take a look again on monday.\n. @evilebottnawi all I have to do, on master, is:\n```\n\nbrew switch node 11.0.0\nrm -rf node_modules\nnpm install\nnpm test\n```\n\nSometimes it hangs during the tests, sometimes it segfaults. I don't have issues with node 10.12.0.. My apologies I've been away from this for so long. I've got time over the next few days to figure out what's up and get this out.. When I was trying to get the tests working before I made so updates to the tests for this change that used supertest more idiomatically instead of relying upon request. I've pushed these changes. Should just have to click the update branch button and this will be good to go. Waiting to click though in case it gets out of date again between now and when it's good to merge.\n@odinho definitely interested in debugging node. It's been too long since I've attached gdb to a running process haha. Not sure if I have time this moment to do so though. I'll see when I end up today. The issues are still 100% reproducible in the tests just by switching to node 11. . Any updates here? As far as I'm aware it should be good to merge. Let me know if there's anything else I can do.. My apologies for taking forever to update this. It dropped off my radar. It should be good now.\nI'm going to put up a PR against the docs site now.. Looks like the linting hung? It lints fine for me locally.. qs also conflicts with another variable in the file, and eslint complains about shadowing. That's why it's been renamed from the original PR.. So this is largely to allow users to provide either: sockPath: '/this/is/a/path/' or sockPath: 'this/is/a/path' and have it behave the same way.\nThe leading slash gets added by this template string. Instead of checking if there's a leading slash and only adding one if there isn't one, this just always adds a leading slash and removes any if there is one.\nThe trailing slash is removed because it doesn't mean anything in this case and is likely a result of user error.. That I don't know the answer to. It was left over from the initial pr and I kinda just assumed was how stuff was done. Will investigate and come back with an answer.. So what's happening here is that __resouceQuery gets the sockPath option passed in. This is then parsing that querystring and getting the sockPath option.  . ",
    "odinho": "@trescenzi If you rebase to newest master, Node 11 is disabled for now. I did see one hang on Node 10 too, but I don't run Mac OS X, so it was hard to debug.\nI've opened a bug on node.js, if you potentially want to try this with llnode to get a full stack trace as commented in the bug: https://github.com/nodejs/node/issues/24835. IMHO this sounds like a sane default (so one extra random developer there).\n@NaNdreas: If you rebase, Travis should re-run and hopefully not fail.. Interesting. Seems to both error and fail/crash (/Users/travis/.travis/job_stages: line 104:  3028 Segmentation fault: 11  npm run $SCRIPT) on Mac OS X. That is worrying.\nSeems like same errors are on master branch though. Only there Linux dies in the same way before Mac OS X gets to run.\nSo I'll just re-run it later when whatever problems Travis or master are having have been resolved.. If anything https://github.com/webpack/webpack-dev-server/pull/1543 looks suspicious. It was added to master with its Travis check failing. Both commits since then have failed. The commit before was cancelled, so it actually never got to run a Travis build (but it was also only metadata update).. Maybe remove all caches? https://docs.travis-ci.com/user/common-build-problems/#segmentation-faults-from-the-language-interpreter-ruby-python-php-nodejs-etc\nI have tried some runs with what looked like the culprit removed (https://github.com/webpack/webpack-dev-server/pull/1564) , but it still crashes (only stable though). So if you could kick Travis a bit, remove its caches, that might fix it?\nHowto clear cache from webui: https://docs.travis-ci.com/user/caching#clearing-caches. I've opened a bug with Node.js, hoping they can figure it out. https://github.com/nodejs/node/issues/24835\nAn alternative (that I've been thinking of), is to change your test to test Node 10 instead of Node/stable (which now is Node 11.3.0, but this does not seem stable :P).. > @odinho very thanks for helping, let's disable test and put comment with link on issue\nI've added https://github.com/webpack/webpack-dev-server/pull/1588. > @odinho do we have way testing this?\nIt is an upstream bug, which is tricky to test in a good way downstream. That bug also only surfaced because Chromium fixed something on their side if I understand correctly. So I'm unsure how that would play out.\nSomething that could have caught it would be a stress-test where a browser + the dev server is interacting for a long time (say 10 mins) with lots of different changes.\nNormally, updated version of dependencies won't really get their own tests. Even though having some test that would be able to find such issues would of course be helpful. (Though it'd be prone to noise and flaking, and it would be very little help in actually diagnosing the issues). Mac OS X (stable) still crashed though :man_shrugging: :(. Closing this.. @samsam2310 If you rebase onto newest master, the Travis tests should pass.. If it is successful, I can add a comment with a link to this, so it's easy to remember removing it.. Very interesting. It hung itself right before the test that segfaults on 11. So there's something fishy on 10 as well. :/. Yes, but the first try did fail (before the comment added). So there is a chance that this will be flaky.\nIt went from 100% fail, to something less than that, hopefully a very low fail-%, but we only have two data points. :). > @odinho hm, maybe random failure, sometimes it is happens, let's merge this PR as is, if problem appear again we investigate deeply, big thanks!\nGreat, let's see :)\n\n@odinho Just question: do you want join to webpack as contributor webpack-dev-server? We don't have enough developers and some PRs stalled due i don't have time on all repos (right now i am one active contributor/issue resolver/etc here).\n\nI can't take that on I'm afraid. I'm amazed at all the work you guys are doing, and you being lone maintainer for this one is quite impressive and sad.\nI will have a look at some of the other PRs next week and see why they are stalled and if there's some ways I can help without being a member. :). Yeah, it was a good idea I saw it a bit late :) But I also don't have the URL before actually creating the PR, so :D Will update once the test-run is done.. Forgot updating the comment to 3 times? :). ",
    "zsalzbank": "While waiting for this, I came up with a temporary workaround (assuming you are using webpack). You'll need the file in this gist: https://gist.github.com/zsalzbank/cdee4f852e4a89c116eb7a28491bbf63\nThen, add the exported plugin to your babel plugins like so:\njs\n...\nplugins: [\n  require('sockjs-prefix-modification')('/my-prefix-path/').plugin\n],\n...\nAnd before you import webpack-dev-server for your server, run the following:\njs\nrequire('sockjs-prefix-modification')('/my-prefix-path/').fixWebpackDevServer();\nYou'll need @babel/register and babel-plugin-search-and-replace in your devDependencies.. ",
    "GaryHos": "devServer: {\n        openPage: './pages/login/index.html', \n    }. ",
    "missalyss": "@evilebottnawi to your knowledge, does your client have access to webpack config at all? I've been trying to send it from bin/webpack-dev-server, but it doesn't want to read it. . ",
    "ncjones": "I think this is what I'm looking for too. To reduce the number of API calls on page load I have moved to having a dynamic index.html served by express instead of a static one served by nginx. Now I'm trying to replicate the functionality of webpack-dev-server using webpack-dev-middleware and webpack-hot-middleware. This turns out to be really challenging.\nI'm still lacking incremental compiling (full recompile happens on every change) and page reload is not happening automatically and I have no idea how to fix them. \nI'm considering proxying webpack-dev-server from my express server in dev mode but this means having multiple processes which I don't really want. It would be much easier if I could just mount the webpack-dev-server as a middleware.. @evilebottnawi with webpack-dev-server I didn't need any conditional logic in webpack.config.js - my production mode settings just worked perfectly with the dev server which is great. Now with dev middleware and HMR I must have conditional logic for setting:\n\nmode (\"production\" vs \"development\")\njs/css asset name format (\"[contenthash]\" not allowed with HMR) \nplugins (HotModuleReplacement and NoEmitOnErrors required for HMR)\nentries (webpack-hot-middleware/client?path=__webpack_hmr'),\nstyleLoader.\n\nPlus conditional express routing is required to use either static middleware or webpack middleware. In my case extra config was required to make sure HMR is served with the correct base path since all my micro-front-end apps are proxied (I set the express hot middleware \"path\" and the webpack output \"hotUpdateChunkFilename\" config).\nEverything is working perfectly for me now but it was a very painful 1-2 days to figure out all these tweaks and now my webpack config has conditional logic which I'd rather not have.. ",
    "jiankafei": "Have you tried the following way?\n```js\n// devServer.js\nconst webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst createLogger = require('webpack-dev-server/lib/utils/createLogger');\nconst findport = require('./findport');\nmodule.exports = async (config) => {\n  try {\n    const compiler = webpack(config);\n    const options = config.devServer || {};\n    const log = createLogger(options);\n    const port = await findport(options.port);\n    options.port = port;\n    const devServer = new WebpackDevServer(compiler, options, log);\n    return devServer.app;\n  } catch (error) {\n    console.warn(error);\n  }\n};\n```\ndevServer.app is a express instance.. I think it should be able to run, but I haven't actually tested it yet.. @evilebottnawi \nI think dev-server can be designed as follows:\nmain: defines middleware and exposes it;\nbin: parse the parameters, instantiate express, invoke Middleware of main, and then generate services.\nSuch a design can ensure the use of bin commands, but also allow developers to use the middleware of main. Meet the developer's custom  development.. @evilebottnawi \nok, I think webpack should officially support webpack-hot-middleware or webpack-hot-function-api. Based on webpack-dev-middleware and webpack-hot-middleware, webpack-dev-server can be implemented. If webpack-dev-server can not satisfy developers, developers can also build their own dev-server based on webpack-dev-middleware and webpack-hot-middleware.Maybe it's a good choice.. @evilebottnawi \nI know it. But @ncjones had problems.This means that it can not achieve the effect of webpack-dev-server.. ",
    "felixcatto": "I think ability to manually reload browser window would be great. Such ability exists in BrowserSync, but not in WDS :'(\nconst server =  new WebpackDevServer(compiler, {...})\nserver.refresh() // <-- Something like this. i am using WDS and webpack only for bundling client js. For moving images, process CSS and transpile server js i am using gulp. So when i change my server code, all code transpiled  and i want to refresh browser after this process. I make a simple WDS config with proxy option to target my original server. It works well, when i change client code, but i can't trigger refresh after my server code changed.\nThere was one similar request in the past\nhttps://github.com/webpack/webpack-dev-server/issues/1073\nBut webpack watch does not work for me :(. ",
    "NaNdreas": "Thank you @evilebottnawi \nJust to be sure, do you want the documentation update or setting development by default? \ud83d\ude03 . Hi @ooflorent \nPersonally I think what Webpack's warning is really saying (the reason behind it) is \"Hey, I don't know if you want production or development, please specify or the result may be really wrong\". That makes sense in Webpack's case, because from running webpack there's no way to tell if the user wants production or development. \nBut in this case, from webpack-dev-server, we do know that the user wants (or should have) development, so I don't see the reason to ask for it. (I guess I see webpack-dev-server as the \"webpack user\" that sets the mode)\nWebpack will still warn when the user wants to build a production build with the webpack command\nI could definitely be missing something though, maybe you're thinking of a specific scenario?\nEDIT: to be clear it's not my decision in the end, I have no power here hehe, I just added my view on it. \nI will look at tests meanwhile. Hi, \nI will not have access to a laptop in december, if anyone else feel like taking over this PR, feel free. If nobody worked on it when I am back around new years, I can look at it.\nThanks. Hi,\nI've started looking at the tests and how to effectively test this change, but I'm lost when looking at other tests and don't have the time to deep dive into it. I will have to leave this one as it is now sorry. \nFeel free to take this PR anyone who wants to write the tests. \nThanks. ",
    "xtx1130": "@evilebottnawi  I have tried to use pure vue-cli to  reshow this bug, but I failed. May be nginx caused this error.I will close this issue, thanks for you reply :). ",
    "rc452860": "@evilebottnawi the server.js has three arguments. the last arguments are log. This method does not pass the third argument. and it will be undefined.. @evilebottnawi I think I was wrong. actually, I forget new.\n- var server = WebpackDevServer(compiler, {});\n+ var server = new WebpackDevServer(compiler, {});. ",
    "tpw1314": "I remember the first time I installed laravel via composer + npm install, there was not a problem at all. However, I had to re-install a fresh laravel project so I ended up just 'Right click' and delete the project folder.\nAfter few busy weeks I now decided to have fresh laravel project and then run npm install and boom.. For all of you, this issue appears to be solved by this #1815. Please refer to this issue. Apparently it is not fixed yet.. Anyone manage to run npm install laravel-mix without hitting any error even after a month ?. ",
    "Baspa": "I also get this error. Even when I make a new project and then use npm install I get the following message: \n\naudited 11772 packages in 15.252s\nfound 1 high severity vulnerability\n  run npm audit fix to fix them, or npm audit for details\n\nWhenever I use the npm audit command I get this message:\n\nManual Review\n             Some vulnerabilities require your attention to resolve\n      Visit https://go.npm.me/audit-guide for additional guidance\n\nHigh            Missing Origin Validation\nPackage         webpack-dev-server\nPatched in      >=3.1.6\nDependency of   laravel-mix [dev]\nPath            laravel-mix > webpack-dev-server\nMore info       https://nodesecurity.io/advisories/725\n\nAnyone any ideas on how to fix this?. ",
    "tanx": "Any chance the security fix will get backported to webpack-dev-server@2.x.x? We're still on react-scripts@1.x.x yet which relies on this version range. Thanks for your consideration.\n````\n=== npm audit security report ===                        \nRun  npm install react-scripts@2.1.1  to resolve 1 vulnerability\nSEMVER WARNING: Recommended action is a potentially breaking change\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 High          \u2502 Missing Origin Validation                                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 react-scripts                                                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 react-scripts > webpack-dev-server                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\ufffd\ufffd\ufffd\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/725                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```. Not inreact-scripts@1.x.x` unfortunately though.. ",
    "connecteev": "Seeing the same. This issue hasn't been fixed yet. . ",
    "JhumanJ": "Same here.. ",
    "proliuk": "=== npm audit security report ===\n                             Manual Review\n         Some vulnerabilities require your attention to resolve\n\n      Visit https://go.npm.me/audit-guide for additional guidance\n\n```\nHigh            Missing Origin Validation\nPackage         webpack-dev-server\nPatched in      >=3.1.6\nDependency of   laravel-mix [dev]\nPath            laravel-mix > webpack-dev-server\nMore info       https://nodesecurity.io/advisories/725\nfound 1 high severity vulnerability in 15147 scanned packages\n  1 vulnerability requires manual review. See the full report for details.\n```\nAlready, what we can do with this vulnerabilities? Do it works in a local server?. === npm audit security report ===\n                             Manual Review\n         Some vulnerabilities require your attention to resolve\n\n      Visit https://go.npm.me/audit-guide for additional guidance\n\n```\nHigh            Missing Origin Validation\nPackage         webpack-dev-server\nPatched in      >=3.1.6\nDependency of   laravel-mix [dev]\nPath            laravel-mix > webpack-dev-server\nMore info       https://nodesecurity.io/advisories/725\nfound 1 high severity vulnerability in 15147 scanned packages\n  1 vulnerability requires manual review. See the full report for details.\n```\nAlready, what we can do with this vulnerabilities? Do it works in a local server?. ",
    "DawgOnKing": "Still not resolved as of this evening. Fresh laravel install on Amazon AMI still shows report. Working locally but I haven't tried to deploy.. ",
    "enbermudas": "@SharakPL options actually fixes the problem. Thanks a lot!. ",
    "LaravDev": "\nnpm install laravel-mix@beta fixes the problem\n\ni did this and worked, but i have some kind of issue with babel-core now, guess it's a separated issue. ",
    "deepeshmadkar": "yes i am also getting the same issues.. ",
    "klymenkoo": "I can confirm. I'm using create-react-app.. ",
    "ealexhaywood": "As am I, latest CRA is using webpack-dev-server@3.1.9 so I notified them in the existing issue that was opened https://github.com/facebook/create-react-app/issues/5777#issuecomment-450684848. Everyone who is using create react app should post here https://github.com/facebook/create-react-app/issues/5777.  Webpack has already said they are not back porting fixes.  Tell create-react-app to update their webpack dev server version.. ",
    "amitozdeol": "Issue still persist. Using fresh copy of create-react-app on Mac OS High sierra. ",
    "dvvdev": "Issue is occuring with vue/cli-service. ",
    "tetrohed": "having the same issue with creat-react-app! can somebody clarify why this is closed?! The react issue links to here and is closed as well. ",
    "palkan": "\nis NPM maybe interpreting 3.1.1* as lower that 3.1.6?\n\njust tried 3.1.9 \u2013\u00a0the same(. ",
    "falsy": "If you run 'npm install' on Node v8.12.0, the following error appears. (npm v6.4.1)\n```                       === npm audit security report ===\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                Manual Review                                 \u2502\n\u2502            Some vulnerabilities require your attention to resolve            \u2502\n\u2502                                                                              \u2502\n\u2502         Visit https://go.npm.me/audit-guide for additional guidance          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 High          \u2502 Missing Origin Validation                                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Patched in    \u2502 >=3.1.11                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 webpack-dev-server [dev]                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/725                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nfound 1 high severity vulnerability in 10268 scanned packages\n  1 vulnerability requires manual review. See the full report for details.\n```\n'npm install' on Node v6.14.4 does not output an error. (npm v3.10.10). > @falsy. we are seeing the same thing. I've retried it with 3.1.11 through 3.1.14 and no dice.\n@fergyfresh Hi, fergyfresh.\nFirst of all, I am sorry but I am not good at English. (I didn't understand the meaning of 'dice'.)\nI am currently using v3.1.14. Most webpack-dev-server v3.1.x output an error on node v8.12.0. However, we have used the NVM to change to Node v6.14.4 and have verified that it does not output subsequent installed result errors.\nI don't think this is the solution. \nIf you need more information from me, let me know.\nThank you.. @fergyfresh I tested it on my PC at home and found it installed on node v8.12.0 without errors. \nSorry, I think the cause of the problem is something other than the node version.. @simPod Oh, now the error is not output. Thank you.. ",
    "fergyfresh": "@falsy. we are seeing the same thing. I've retried it with 3.1.11 through 3.1.14 and no dice.. @falsy it just means it did not work. Still have the high vulnerability security warning.. ",
    "evalineBai": "This was due to a typo in the vulnerability database apparently: https://npm.community/t/advisory-725-inconsistently-marks-affected-versions/4333/3. ",
    "quang5566": "I'm also getting the same issues. Althought I was update webpack-dev-server@3.1.14. But I can't run npm run dev. TypeError: Cannot destructure propertycompileof 'undefined' or 'null'.. ",
    "bandisudhir": "I'm also still seeing the issue. If anyone found a solution please help.. > I'm also still seeing the issue. If anyone found a solution please help.\nAfter updating the webpack-dev-server@3.1.14. The problem is resolved though it is still showing 1 high vulnerability I was able to install required packages. If your problem is not resolved delete node_modules folder and install again. Hoping your problem will be resolved.. > Yes it is, and i have the version 3.5.0 installed.\nPlease check the version properly the highest version of webpack-dev-server available is 3.1.14 when I'm writing this comment.. ",
    "jduser36": "I\u00b4m also getting this isusue on a mac. I am new to react.js, so is there a way to solve it or to bypass it?. Yes it is, and i have the version 3.5.0 installed.. ",
    "cinderblock": "I see webpack-dev-server in a development environment as an equivalent to nginx in a full production environment.\nIn nginx, there is a special variable $proxy_add_x_forwarded_for just for the purpose of informing a proxied application who is actually connected.\nConfigurations usually look something like this:\n```nginx\nserver {\n  listen 80;\n  server_name my.server.com;\n  location /api {\n    # api backend that we're proxying\n    proxy_pass http://localhost:8000;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n# Other headers omitted\n\n}\n}\n```\nNote, I'm ignoring the new RFC 7239 Forwarded header for now, but the same ideas still apply.\nSo in a production environment, proxied requests to the api running at port 8000 will have headers that accurately reflect the remote IP of each client that is connected.\nIn webpack-dev-server, there is currently no equivalent feature to this making it impossible to test having multiple different clients connected to the same backend while connecting through webpack-dev-server.\n\nExample use case\nClient 1 and Client 2 have different IPs. The api backend needs to be able to differentiate the clients based on IP.\nClient 1 -\\                                 /- index.html (and other webpacked files)\n           >-- nginx/webpack-dev-server ---<\nClient 2 -/                                 \\- /api (some other backend)\n. Ooops. I don't know how I missed that.\n\nThis is all I needed:\nwebpack.config.js\nmodule.exports = {\n  // ...\n  devServer: {\n    proxy: {\n      '/path': {\n        target: 'http://localhost:8000',\n        xfwd: true,\n      },\n    },\n  },\n};. ",
    "ItamarShDev": "@evilebottnawi which port?\nif i set the webpack to be same as the server, then they are conflicted.. I will try.\nWhat i want is to be able to run production compilation in dev-server, with hot reload.\nIts sounds to me like an unfeasible idea, and I wanted to just ask. Not what I've meant.\nI use it to develop.. ",
    "mehl321": "I also got this issue after upgrading from 3.1.10. Big JSON responses get either truncated or even corrupted.. I created a minimal repo on my machine with a similar config (proxy, HMR, fetching a similar JSON from another local server. No HTTPS though) but I couldn't reproduce the bug.\nThere is a bug for sure because downgrading to 3.1.10 fixed the issue.. Close the issue if you want but I think the bug is still here. I just didn't manage to reproduce it.. ",
    "hkostia": "I'm encountering this too but couldn't make minimum reproducible test repository.\n3.1.9 OK\n3.1.10+ truncates/corrupts proxied https JSON responses\nOperating System: Windows 10\nNode Version: 8.12.0\nNPM Version: 6.4.1\nwebpack Version: 4.29.0\nwebpack-dev-server Version: 3.1.10 - 3.1.14. ",
    "emillynge": "+1 on this issue. downgrade to 3.1.9 worked for me. I have no reproducible test/repo for you.. @evilebottnawi Well, it was literally the only change in my setup. Maybe a dependency changed? in which case it would be helpful to track down which dep could cause this.. ",
    "victors1681": "My Payload is 512KB and I have the same issue. JSON it gets corrupts in webpack-dev-server Version: 3.1.11 - 3.1.14. \nThe only one is working fine is  3.1.10. ",
    "edwint229": "I meet some issue in version 3.1.14, my payload is 27.5KB, enabled https proxy. After I downgrade to 3.1.10, it works fine also. I think the issue should happened in proxy side, please help to check and fixed. Thanks. I meet some issue in version 3.1.14, my payload is 27.5KB, enabled https proxy. After I downgrade to 3.1.10, it works fine also. I think the issue should happened in proxy side, please help to check and fixed. Thanks. ",
    "houfeng0923": "i found our api response data  (large json ) is truncated .   the api server support http2  and it  only  reproduced in http2 .  we can force proxy server  use  http1.1 always: \n```\nhttps: {\nkey: ...\ncert: ...\nspdy: {\n   protocols: ['http1.1']\n }\n}\n// waiting for  'http2'  module stable, and express support. @evilebottnawi  , i guess a http2 bug in node-spdy or http-proxy-middleware . \nwebpack-dev-server depend on express , express use node-spdy to support http2 feature . \ni ceate a spdy-http2/node-spdy#357 here.. ",
    "dnicoara-psft": "I'm having the same issue with webpack-dev-server 3.2.1\nThe JSON response is truncated. Downgrading to 3.1.10 solves the issue.\nCould someone take a look at this, please?. ",
    "lzane": "same issue here with Node v8\nupdate to Node v10 solve my problem. ",
    "yadue": "node v10 forces webpack-dev-server to use https server instead of spdy, I think just an option to select manually would be a solution in that particular case. for users who are not using nodejs 10 for some reasons it uses only spdy which in webpack-dev-server above 3.1.10 fails for some reasons for the guys here, it truncates response in some cases. there is no way for us to use latest versions of webpack-dev-server since we can't manually select which protocol we want to use\nwebpack-dev-server detects node v10 and runs https server which works just fine, node < 10, runs spdy library which above version 3.4.7 fails for some users. here you go:\nhttps://github.com/yadue/webpack-dev-server-proxy-issue\nnpm install\nnpm run start\nopen https://app.localhost:4201/\nyou'll see 2 requests proxied to\nhttp://yadue.synology.me/api3/2jcegul7ephjg2emsfg4v5097g.json (10kb)\nhttp://yadue.synology.me/api3/2jcegul7ephjg2emsfg4v5097g-small.json (2kb)\nhttps://imgur.com/a/sXfyiuY\nit really took me so long to find reproducible case.. I tried to reproduce this with express js but with no luck, but at the end I found out that:\n- with proxy to spring boot server, https, gzip\n net::ERR_CONTENT_DECODING_FAILED 200\nhttps://imgur.com/h0JSywp\n- with proxy to spring boot server, https no gzip \nUnexpected token , in JSON at position 8192 at JSON.parse and really missing some characters in that positions\n- with proxy to express, https gzip - 200, ok\nhttps://imgur.com/tTq9heQ\n- with proxy to express, https, no gzip - 200, ok\n- without proxy, spring boot server, https gzip - 200, ok\nhttps://imgur.com/sM9HZSC\n- without proxy, spring boot server, https, no gzip - 200, ok\nMaybe you'll have some idea what could be wrong but that broken json at 8192~ish position is the key.\n. Yeah, it sounds it\u2019s related, but in my particular case it breaks after 8192 signs, and it worked just fine when using the same json response from express js, same response coming from spring boot didn\u2019t.. here you go:\nhttps://github.com/yadue/webpack-dev-server-proxy-issue\nnpm install\nnpm run start\nopen https://app.localhost:4201/\nyou'll see 2 requests proxied to\nhttp://yadue.synology.me/api3/2jcegul7ephjg2emsfg4v5097g.json (10kb)\nhttp://yadue.synology.me/api3/2jcegul7ephjg2emsfg4v5097g-small.json (2kb)\nhttps://imgur.com/a/sXfyiuY\nit really took me so long to find reproducible case.. ",
    "samsam2310": "Hi @evilebottnawi \nHere is the test repo: https://github.com/samsam2310/wp-bug\nI have tried this and got the same result, hope this will help.\nThanks. Hi @evilebottnawi \nIt seems like package \"send\" use a old version of node mime package, therefore, the .wasm file has wrong mime type.\nThere is a PR which have been merged since one month ago, so the issue should be fixed after next update.\nhttps://github.com/pillarjs/send/pull/154. Hi @evilebottnawi \nIt seems like package \"send\" use a old version of node mime package, therefore, the .wasm file has wrong mime type.\nThere is a PR which have been merged since one month ago, so the issue should be fixed after next update.\nhttps://github.com/pillarjs/send/pull/154. Hi @evilebottnawi\nThe \"send\" package is used by express.js, so I think there is no need to add a new pr. \nBut we need to wait for the next release of  express.js.. Hi @evilebottnawi\nThe \"send\" package is used by express.js, so I think there is no need to add a new pr. \nBut we need to wait for the next release of  express.js.. @evilebottnawi You can take a look about the PR I posted above : https://github.com/pillarjs/send/pull/154\nIt seems like it should be released with send@0.16.2, but it didn't.\nAnd this issue https://github.com/expressjs/express/issues/3589 says it will be released with express@4.17, but 4.17 disappeared and it seems like the next release will be 5.0.0 (There is a new release 5.0.0-alpha).\nSo, ... I don't know....\nIf this is important, maybe we could add express.static.mime.types[\"wasm\"] = \"application/wasm\";  until the next release of express.. @evilebottnawi \nI don't think this can fixed, or, for now it can't.\nIt seems like there isn't express@4.17, the latest release is 4.16.4.\nAnd the issue is caused by send@0.16.2 (bind with express.js) which lock mime to @1.4.1, and the latest release of send is released on Feb 8, 2018.. @evilebottnawi ok, I can make a PR with a workaround solution.. I have accepted but the licence/cla seems still in pending ?. ",
    "u9520107": "Can't tell what caused the segment error on that particular instance. Ran the tests on my mac as well. Any advice?. Can't tell what caused the segment error on that particular instance. Ran the tests on my mac as well. Any advice?. force-pushed after rebase to current master.. @evilebottnawi Done, just waiting for CI to finish tests.. Thanks for doing this. I must apologize for putting this aside for too long. Got bombarded with work right after our Chinese New Year holidays, and I totally forgot to put this into my reminders.. can you elaborate on that? I am not sure if I get what you mean.. I'll see what i can do to separate them. But to your second comment, if the second port is busy as well, it will throw an error with code==='EADDRINUSE' again, then trigger another get port. This modification will allow an instance to try at most 10 times before giving up.. OK!. This was already in use before I made any changes though.... Hmm... get-port will simply fall back to random port instead of trying to look for the next available port in sequence. Although I am not sure if seeking ports in sequence was ever a requirement. This was the behavior before I added the retries, so I try to maintain that behavior.. well, if you're sure, I can switch to get-port. Just need to confirm because portfinder was introduced by whoever introduced port finding in the first place. And normally I try not to change project dependencies for projects that I don't own.. Thanks!. Lol... Proves that comments can be misleading if not properly maintained.\nOK, fixed.. Mainly because NaN == null is false, so if parseInt returns NaN, defaultTo will not work properly.. Indeed, I'll look into that over the weekend. Making sure all the variables are passed in for the subtle differences in each server.listen call would be a bit tedious.. Nvm... the server.listen uses for sockets and ports are too different. I just extract the 2 identical server.listens for port uses in to a local function to keep variable references. Not sure if that's aligned with your coding style standards though. Please comment if that also needs to be changed.. ",
    "anto-christo": "Hi, it was quite difficult task to create a test repo since the project involves a CLI through which I am executing webpack commands on the Vue.js-Electron project. \nNevertheless, my issue got resolved when I added \nrequire('module').globalPaths.push(process.cwd()+'/node_modules');\nin my entry HTML file.\nClosing this issue. Thanks. ",
    "Younghun-Jung": "I solved this problem.\nI did not configure connection options like below.\ndevServer: {\n    publicPath: 'http://localhost:9090/front/static-dev/build/',\n    port: 9090,\n    proxy: {\n        '/**': {\n            target: 'http://localhost:8080',\n            secure: false,\n            changeOrigin: true,\n            headers: {\n                   Connection: 'keep-alive'\n            }\n    },\n    open: true\n}. I solved this problem.\nI did not configure connection options like below.\ndevServer: {\n    publicPath: 'http://localhost:9090/front/static-dev/build/',\n    port: 9090,\n    proxy: {\n        '/**': {\n            target: 'http://localhost:8080',\n            secure: false,\n            changeOrigin: true,\n            headers: {\n                   Connection: 'keep-alive'\n            }\n    },\n    open: true\n}. ",
    "killemth": "It seems that the dev-server can be manipulated to change the content it serves by intercepting the request as per below.\nbefore: function (app, server) {\n      app.get('/', function (req, res, next) {\n        console.log(req.hostname);\n        if (req.hostname.indexOf('host1') === 0) {\n          console.log('changing route');\n          res.sendFile(path.resolve(__dirname, '../dist/entry1/index.html'));\n        } else {\n          res.sendFile(path.resolve(__dirname, '../dist/index.html'));\n        }\n      });\n    },. ",
    "ashleymoogle": "I found the issue:\nI have a plugin that inject the js bundle in my html entry point and for some reasons it keeps injecting the bundle and the bundle bundle.hot-update.js so it keeps piling up. ",
    "yuri-sakharov": "Also got polling after update to 3.1.11 and higher. There is no polling on version 3.1.10. Downgraded. . @evilebottnawi yes you are right that poling not equal to reloading in my case. . solved via downgrade to 3.1.10. @evilebottnawi I will try. I just checked it in v3.2.1 and see that problem with polling was fixed. . ",
    "kwzm": "@montogeek Thanks I will try.. @montogeek I tried it, but didn't work, I guess maybe is create-react-app's bug as @evilebottnawi  said.\n\n. ",
    "yamsellem": "@evilebottnawi thanks for your quick answer. The speed of your answer made me consider this is a known issue, is this?. @evilebottnawi ok, I take a look of how it can be done. Are we agree that the devServer.public should also change the __hmr domain from where the hot-updates files are served?. ",
    "tseho": "@yamsellem I had the same issue as you and I found out the urls for hot-update.json are using the output.publicPath, not the devServer.publicPath.\nIn our project, we have no issue using output.publicPath for webpack in dev.\nThe code responsible for the path generation is there: webpack/lib/MainTemplate.js, called from webpack/lib/web/JsonpMainTemplatePlugin.js.\nI haven't been further, I hope you can find a solution too.. ",
    "rcreasi": "Any movement on this issue? Unfortunately it's not possible for me to use output.publicPath due to some particulars of my project's configuration.. I specifically need the hot files to be served from a separate domain. The code that @tseho linked to above shows where the filename is generated but not where the domain part of the url comes from.\nI did some of my own digging and it appears the domain is hardcoded in the runtime ($require$.p gets interpolated as __webpack_require__.p which maps to the bundle public path).\n. ",
    "nzapponi": "https://github.com/spdy-http2/node-spdy/issues/350. ",
    "yi-ge": "The bug is fixed. https://github.com/webpack/webpack-dev-server/pull/1660. The bug is fixed. https://github.com/webpack/webpack-dev-server/pull/1660. @evilebottnawi the same problem. \ud83d\ude04. @evilebottnawi the same problem. \ud83d\ude04. About it: https://github.com/spdy-http2/node-spdy/issues/350. t.js:\nconst spdy = require('spdy');\nYou can run it (node t.js) in node v11.9.0.\n\nAbout: https://github.com/spdy-http2/node-spdy/issues/350. \ud83d\ude04. @evilebottnawi Thank you.. @evilebottnawi sdpy v4.0\uff1f\nNode.js 11.9.0, spdy 4.0.. @evilebottnawi It's just a line of code. . @evilebottnawi It's just a line of code. . \nvue cli create project.. \nvue cli create project.. https://github.com/webpack/webpack-dev-server/issues/1592. https://github.com/webpack/webpack-dev-server/issues/1592. @evilebottnawi MacOS. Merging code does not affect the result. You can first merge and verify. \ud83d\ude04. @evilebottnawi MacOS. Merging code does not affect the result. You can first merge and verify. \ud83d\ude04. @evilebottnawi This OR can solve the problem. . @evilebottnawi This OR can solve the problem. . @evilebottnawi This PR, No consequences. \ud83d\ude04. @evilebottnawi This PR, No consequences. \ud83d\ude04. \n@evilebottnawi Only on macos, maybe. \ud83d\ude02. \n@evilebottnawi Only on macos, maybe. \ud83d\ude02. @evilebottnawi The same code cannot be run in Mac OS node v11.1.0 +. You can see: https://github.com/spdy-http2/node-spdy/issues/350 or https://github.com/webpack/webpack-dev-server/issues/1592. This PR avoid this kind of situation from happening.. @evilebottnawi The same code cannot be run in Mac OS node v11.1.0 +. You can see: https://github.com/spdy-http2/node-spdy/issues/350 or https://github.com/webpack/webpack-dev-server/issues/1592. This PR avoid this kind of situation from happening.. ",
    "cicibobo": "Issue still exist  node - v11.11.0,   spdy - 4.0.0\nwebpack: Compiled with warnings.\nRangeError: Invalid typed array length: -4095. ",
    "misterdev": "@evilebottnawi are you sure this is a bug?\nI read this in the documentation: \n\ndevServer.openPage \nSpecify a page to navigate to when opening the browser.\n\nThe correct option to use in this case is host\n\ndevServer.host \nSpecify a host to use. By default this is localhost\n\nReading again the issue, this is not a bug, but a feature request.\nFrom my understanding, absolute URLs in openPage shouldn't be allowed and I don't get how this would be different from using the host option :)\nI think my PR should be closed\n. I'm sorry, I'm new to webpack development, may I ask for some guidance writing tests for this?\nI don't know how to get the URL of the page served by the running server..\n. I'm having some difficulties working this:\n\nHow to run the server: from my understanding using lib/Server or test/helper doesn't work since none of these actually execute utils.status. I also tried using require('../bin/webpack-dev-server') in my code but I don't feel is the right approach and I don't know how to pass my configurations to the server.\nHow to spy opn: I'm trying spying it this way without success:\njavascript\nconst open = require('opn');\nthis.sinon.spy(open);\nassert(spyOpn.calledOnce);\n\nThe final (not working) result is:\n```javascript\nconst assert = require('assert');\nconst open = require('opn');\ndescribe('check openPage option', function testHttps() {\n  let spyOpn;\nbefore(function before() {\n    // const options = {\n    //   openPage: 'http://localhost:9090/'\n    // };\n    spyOpn = this.sinon.spy(open);\n    const server = require('../bin/webpack-dev-server');\n  })\nit('should allow absolute URL', (done) => {\n    assert(spyOpn.calledOnce)\n    done();\n  });\n});\n```\nI know this should be easy, any suggestion on what I'm doing wrong is welcome.\nThanks @evilebottnawi for your patience and help.. Any help is welcome! \ud83c\udf84. ",
    "runarberg": "@misterdev You are right. I didn\u2019t know you could use the host option that way.\nclosing. ",
    "spencer-brown": "web worker's can't use window; this isn't an issue in worker-loader. there's a related issue here.. ",
    "lolz42": "It's still same error. Is there any fix for this or I should reinstall my OS?. ",
    "KishanIos007": "I have check with 3 different systems ? and what is bashrc can u please describe ..\n. Okay Thanks actually I go through many stackoverflow questions but I am confused whether they are related to my question or not .. Thant's why posted question over here.. bcz its related to this package..\n. yeah u r right my frd .. :) I don't know how u can reproduce .. I have one of client's project that I need to setup in mu system I can give u zip u just extract it and install the dependencies using yarn when I tried to run using yarn start .. then I got error\n . I really appreciate your efforts :)\n  . just extract it and run following command\n1) yarn\n2) yarn start. ",
    "ravshansbox": "@evilebottnawi yes, sure, here you are: https://github.com/ravshansbox/webpack-dev-server-sample. with disableHostCheck: true there is no warning.. I can confirm that the issue still exists.. The issue has been resolved. Great thanks for support. \ud83d\udc4d\ud83d\udc4f. ",
    "bwigs": "I am seeing this issue as well with 3.1.11.  Rolling back to 3.1.10 fixes it.. ",
    "lambcode": "I also am getting this error in Firefox 64.0 with version 3.1.11. Reverting to 3.1.10 fixes it.. ",
    "juank11memphis": "Same problem here. ",
    "3846masa": "I checked request sent to dev-server via Chrome in localhost, request doesn't have Origin header.\n{ host: 'localhost:8080',\n  'user-agent':\n   'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36',\n  'accept-language': 'ja-JP,ja;q=0.9,en-US;q=0.8,en;q=0.7' }\ncheckHeader will return false when value is empty, so this issue still exists, I think.\nhttps://github.com/webpack/webpack-dev-server/blob/e614308fed6eafc2fccce37837fd16c406f54116/lib/Server.js#L644-L646. Sockjs will remove Origin header.\nRef. https://github.com/sockjs/sockjs-node/pull/247. In my opinion, it is better to revert #1603 until sockjs/sockjs-node#247 is merged.. I tried to add workaround (#1608).\nIt works and resolves this issue in my environment. Please check it.. I signed.. Sorry, it's my fault.\nThe PR I created (#1606) cannot work at Node <= 7.x.\nI sent new PR for fixing.\nPlease use v3.1.11 until merged.. I'll fix code style. sorry. ",
    "carlosgeos": "1608 is working for me (Node 11.5.0 and SockJS 0.3.19). @3846masa said:\n\nWhen sockjs/sockjs-node#247 is merged, this workaround is not necessary.\n\nSo I tested webpack-dev-server version 3.1.13 and changed\nnode_modules/sockjs/lib/transport.js to include origin in the ref array:\njs\n    Session.prototype.decorateConnection = function(req) {\n      var address, headers, i, key, len, ref, remoteAddress, remotePort, socket, x;\n      if (!(socket = this.recv.connection)) {\n        socket = this.recv.response.connection;\n      }\n      try {\n        remoteAddress = socket.remoteAddress;\n        remotePort = socket.remotePort;\n        address = socket.address();\n      } catch (error) {\n        x = error;\n      }\n      if (remoteAddress) {\n        this.connection.remoteAddress = remoteAddress;\n        this.connection.remotePort = remotePort;\n        this.connection.address = address;\n      }\n      this.connection.url = req.url;\n      this.connection.pathname = req.pathname;\n      this.connection.protocol = this.recv.protocol;\n      headers = {};\n      ref = ['referer', 'x-client-ip', 'x-forwarded-for',\n             'x-forwarded-host', 'x-forwarded-port', 'x-cluster-client-ip',\n             'via', 'x-real-ip', 'x-forwarded-proto', 'x-ssl', 'dnt', 'host',\n             'user-agent', 'accept-language', 'origin']; // <-- here !\n      for (i = 0, len = ref.length; i < len; i++) {\n        key = ref[i];\n        if (req.headers[key]) {\n          headers[key] = req.headers[key];\n        }\n      }\n      if (headers) {\n        return this.connection.headers = headers;\n      }\n    };\nAnd it worked. Therefore I guess that if sockjs includes that small change as proposed in sockjs/sockjs-node#247, this issue would also be resolved. \n. Yep, 3.1.14 works fine \ud83d\udc4d . @SharakPL https://www.npmjs.com/advisories/725/versions says all versions are affected so I think this fix had little to do with it:\n\nMy guess is that the npm security team judged that the package still has the vulnerability. What is weird is that in their website, they say the remediation is to update to version 3.1.6 (when the \"presumed\" fix for the origin checking vulnerability came in 3.1.11):\n\nAnd in the report of npm audit it says the patch happened in 3.1.11 but still reports it even though the package has version 3.1.14:\n```\n                      === npm audit security report ===                        \n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                Manual Review                                 \u2502\n\u2502            Some vulnerabilities require your attention to resolve            \u2502\n\u2502                                                                              \u2502\n\u2502         Visit https://go.npm.me/audit-guide for additional guidance          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 High          \u2502 Missing Origin Validation                                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Patched in    \u2502 >=3.1.11                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/725                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nfound 1 high severity vulnerability in 3441 scanned packages\n  1 vulnerability requires manual review. See the full report for details.\n```\n\n@cc616 You mean 3.1.14 has not fixed the infinite Invalid Host/Origin header message ? I think it has\n. Hi, I have no problem with this minimal example (with the latest versions of webpack-cli and webpack-dev-server): https://github.com/carlosgeos/simple-webpack-repo\n@mrbbm in the webpack config like this:\n```js\nmodule.exports = {\n  // ...\n  devServer: {\n    disableHostCheck: true\n  }\n  // ...\n};\n```\n. No idea how to test this sorry. Yes very easy:\n\nHave a simple webpack project. Install webpack-dev-server version 3.1.11 (the bug in this version makes testing easier)\nStart the dev server and open the console\nYou will see an infinite and continuous amount of Invalid Host/Origin header and [WDS] Disconnected!\nNow change: https://github.com/webpack/webpack-dev-server/pull/1617/files#diff-921405d3577e8069eb36a2f7c859c075 and run the dev server again.\nYou will see a maximum of 10 reconnects (not infinite) and spaced out in time.\n\nI also added some logs and did this and this is what I get:\nOLD:\n\nNEW:\n\n. Yes I'll do it. I started doing it, I don't know how to do 2 things:\n\ncreate a failing condition (websocket connection with different origin in the headers)\ninspect the function initSocket or variable retries\n\nI wrote everything in comments in the code, maybe you can help me.. I also like https://github.com/webpack/webpack-dev-server/pull/1619. If that one gets merged, I'll update this PR (to have no conflicts). This check basically means no security (for both static server and sockjs server) (#1618). It is not breaking if people are following the docs :+1: . If they use a local IP, developers should specify public: '192.168.0.x'. It will be covered by the public option further down in the code:\nhttps://github.com/webpack/webpack-dev-server/blob/dd92f3120ff5f7a25c38833f88d490bef8f0c4e5/lib/Server.js#L714-L716\nallowedHosts can also be used.\n. hahahah ok, then I'll close this PR. ",
    "jjjjose": "@vue/cli afectado, que pasooooooooooooo. ",
    "alan-agius4": "Looks like the issue has been solved. Thanks . Shouldn\u2019t this have utf8 encoding as well?. thanks for clarifying . ",
    "show-me-code": "god , i got the same problem and it confused me, maybe i have to roll back. @evilebottnawi  okay, now I may have to roll back to version 3.1.10 . @evilebottnawi OH, I checked my version and find my version is 3.1.11, that's the reason caused problem , thanks a lot. ",
    "cc616": "webpack-dev-server@3.1.14 is not fixed this issue. ",
    "pauldraper": "Yes, it seems the npmjs security team does not know what is going on.\nReported https://npm.community/t/advisory-725-inconsistently-marks-affected-versions/4333. The npmjs advisory is currently inconsistent and there is no 3.1.x patch that npm audit will allow.\nhttps://npm.community/t/advisory-725-inconsistently-marks-affected-versions/4333. ",
    "khalwat": "@davidpelayo yes, it is happening for me as well with the latest versions of both webpack-cli and webpack-dev-server\nFor now, I've added:\ndisableHostCheck: true,\n...which skirts around the issue.. ",
    "mrbbm": "@khalwat > \n\n@davidpelayo yes, it is happening for me as well with the latest versions of both webpack-cli and webpack-dev-server\nFor now, I've added:\ndisableHostCheck: true,\n...which skirts around the issue.\n\nWhere could I add this disableHostCheck: true, ?. @carlosgeos \n\nHi, I have no problem with this minimal example (with the latest versions of webpack-cli and webpack-dev-server): https://github.com/carlosgeos/simple-webpack-repo\n@mrbbm in the webpack config like this:\njs\nmodule.exports = {\n  // ...\n  devServer: {\n    disableHostCheck: true\n  }\n  // ...\n};\n\nThanks for your reply. I would like to know where could I add in my Angular 7 project, there won't be any file namely webpack.config. ",
    "DannyFeliz": "Yes, this definitely fixes the issue.\nNice job \ud83d\udc4d . ",
    "rafamp85": "Good night everybody,\nI don't know how to apply this workaround in my Angular project, what do I have to do.\nBR. ",
    "bradharms": "It seems like I'm still getting this even after installing webpack-dev-server@^3.1.14. I am not using Angular or Vue or any other framework, just React and react-hot-loader.. ",
    "ChuckJonas": "Also still getting this error with 3.1.14 & react-hot-loader. ",
    "clshortfuse": "I \"solved\" my issue using the dirtiest of hacks. It appears webpack-dev-middleware sends a or rewrites the Content-Type and then uses a res.send() or res.end() command. It means it has final say what is sent so no other middleware gets a chance. By the time it gets to options.after, it's too late. \nwebpack-dev-middleware doesn't null-check what is returned from mime.getType(), so it plugs in the adds a string to a null values. Thus, you get null; charset=UTF-8. \nSo what I had to do is the following\nmime.getType2 = mime.getType;\nmime.getType = (key) => {\n  if (key.indexOf('.') === -1) {\n    return '';\n  }\n  return mime.getType2(key);\n};\nClearly, this is unsafe, but you'll get Content-Type: ; charset=UTF-8 which lets IE11 and Edge guess it's a text/html and open properly. I'll be closing this now and opening the issue with webpack-dev-middleware, since it seems that would be the more appropriate location.. @dmohns Sorry for not getting back to you sooner.\nIn my webpack.config.js I added \n````\nconst mime = require('mime');\n....\ngetConfig() {\n  const config = {};\n// Setup config entries, modules, etc\nmime.getType2 = mime.getType;\n  mime.getType = (key) => {\n    if (key.indexOf('.') === -1) {\n      return '';\n    }\n    return mime.getType2(key);\n  };\n  return config;\n}\n````\nBasically, you import mime and change getType before webpack-dev-middleware executes. So when when it runs mime.getType, it actually runs through your proxy. I no longer need this because I actually filed the issue and made a pull-request to fix my issue. It was merged in 3.5.0. \nI do recommend you file the issue with more details over at that repository though. Feel free to ping me if you do. I wouldn't mind taking a look at it.. ",
    "dmohns": "Hey, @clshortfuse Sorry to necro this. I am stuck in a similar scenario where webpack-dev-middleware sets an inappropriate Content-Type and I have no option to modify it in after for reason given in OP.\nI am trying to make your monkey patch work by putting it into my webpack.config.js, but webpack-dev-middleware doesn't quite seem to pick it up. Where do I have to put the monkey patch?. @clshortfuse Thanks!\nI will create and issue in the webpack-dev-middleware repo and ping you there.. @evilebottnawi this PR can be reviewed. I updated the description to mirror the changes from the latest commits. \nOne question: In the test, I need to request main.js for the test to work, while it looks like other tests use bundle.js. Is this correct?. It seems the default naming (when no output.filename is given) is not really documented anywhere. But this comment https://github.com/webpack/webpack/issues/6543#issuecomment-367314843 suggests that the output filename will simply be the chunk name. While the chunk name again will be main because we are not using named (dict) entries but unnamed.\nhttps://github.com/webpack/webpack-dev-server/blob/fa171314bee5fc08308fdfd942dd13053fb2155a/test/fixtures/simple-config/webpack.config.js#L6\n. I am a little lost on this one. From the code, it simply looks like filename is not set (only path), see   https://github.com/webpack/webpack-dev-server/blob/34a4a26ccd8ea9f0349a9d3b257f686d43f027f8/test/fixtures/simple-config/webpack.config.js#L7-L9. ",
    "maddev0": "I have the same issue. I have tried: npm audit fix, manual update of webpack-dev-server to version 3.1.14, removal of node_modules and package-lock.json. Nothing of this helps.\nWith webpack-dev-server version 3.1.10 initially installed npm audit fix says\n+ webpack-dev-server@3.1.14\nupdated 1 package in 3.517s\nfixed 1 of 1 vulnerability...\n\nBut then npm audit still reports about 1 high severity vulnerability:\n~~~\n                       === npm audit security report ===\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                Manual Review                                 \u2502\n\u2502            Some vulnerabilities require your attention to resolve            \u2502\n\u2502                                                                              \u2502\n\u2502         Visit https://go.npm.me/audit-guide for additional guidance          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 High          \u2502 Missing Origin Validation                                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Package       \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Patched in    \u2502 >=3.1.11                                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Dependency of \u2502 webpack-dev-server [dev]                                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Path          \u2502 webpack-dev-server                                           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 More info     \u2502 https://nodesecurity.io/advisories/725                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nfound 1 high severity vulnerability in 9001 scanned packages\n  1 vulnerability requires manual review. See the full report for details.\n~~~. ",
    "Xamanthas": "Still getting this issue despite the fact that I am on v3.1.14. Reinstalling does nothing\n\n. ",
    "manishaggarwalm": "Not working with webpack-dev-server@3.1.14. > there seems to be a typo in the vulnerability database: https://npm.community/t/npm-audit-sweems-to-get-semver-wrong/4352/4\nYou saved my rest of the day. Either wepack and create a new version with 3.2.0 like that would help?\nOn Wed, 2 Jan 2019 at 8:53 PM, Charles Freduah notifications@github.com\nwrote:\n\nhow can we get this typo fixed? some builds require npm audit returning a\nclean bill of health\nNot sure, but the link in my previous post is a bug-report at NPM, so\nmaybe voting on it will help it getting resolved faster.\ndone, thanks\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/1615#issuecomment-450891741,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ApssRpxYQLaW0cLasw6nAvOm62wKYmDqks5u_M8NgaJpZM4Zlnt5\n.\n-- \n\nThanks & Regards,Manish AggarwalMb: +919802551120\nSkype: manish.aggarwalm\n. Okay thanks let them do before its late\nOn Wed, 2 Jan 2019 at 9:00 PM, Syed Farhan notifications@github.com wrote:\n\nEither wepack and create a new version with 3.2.0 like that would help?\nI would just wait for the NPM audit team to fix this. This is widely used\ndependency so I'm sure they'll have it fixed in a few hours.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/webpack/webpack-dev-server/issues/1615#issuecomment-450893487,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ApssRl7Zn_QJkj6H6cBJptPV75A7reemks5u_NCAgaJpZM4Zlnt5\n.\n-- \n\nThanks & Regards,Manish AggarwalMb: +919802551120\nSkype: manish.aggarwalm\n. ",
    "skreborn": "@antimodern Don't worry, you're not being hacked. As you can see, it's trying to access a local address - most likely your own computer. The reason it fails to do so is because you've disconnected from the network, and your computer lost its IP address.. ",
    "charlesfaustin": "I'm getting the same issue, updating to 3.1.14 doesnt solve the issue, npm audit still returns the vulnerability after updating. > there seems to be a typo in the vulnerability database: https://npm.community/t/npm-audit-sweems-to-get-semver-wrong/4352/4\nhow can we get this typo fixed? some builds require npm audit returning a clean bill of health. > > how can we get this typo fixed? some builds require npm audit returning a clean bill of health\n\nNot sure, but the link in my previous post is a bug-report at NPM, so maybe voting on it will help it getting resolved faster.\n\ndone, thanks. ",
    "Diaan": "there seems to be a typo in the vulnerability database: https://npm.community/t/npm-audit-sweems-to-get-semver-wrong/4352/4. > how can we get this typo fixed? some builds require npm audit returning a clean bill of health\nNot sure, but the link in my previous post is a bug-report at NPM, so maybe voting on it will help it getting resolved faster.\n. > Either wepack and create a new version with 3.2.0 like that would help?\nprobably not, unless they are releasing version 3.110.1 ;)\n. I think it is fixed, the audit passes for me.. ",
    "SyedFarhan": "\nEither wepack and create a new version with 3.2.0 like that would help?\n\nI would just wait for the NPM audit team to fix this. This is a widely used dependency so I'm sure they'll have it fixed in a few hours.. ",
    "rosko": "Cool, thank you all!. ",
    "tshravan86": "I'm still getting the error. Can someone please help me how to resolve this issue? Thanks.\n\n. @nelson1212 Thanks for your help, it worked. @chimericdream thanks for your information. Need to change the version number at package-lock.json as well. Thanks once again.. ",
    "nelson1212": "Hi @tshravan86. You must update the version of \"webpack-dev-server\" to 3.1.14  in the following files: package-lock.json and package.json. in all occurrences. Finally, run \"npm update\"\nit works for me. > @nelson1212 Thanks for your help, it worked. @chimericdream thanks for your information. Need to change the version number at package-lock.json as well. Thanks once again.\nMy pleasure. ",
    "smlombardi": "@nelson1212 note that npm update will update all your package to their latest versions, which might not be what you want. ",
    "chimericdream": "If you want to do a more targeted update (and you tend to save exact version numbers in your package.json), here is what I did:\n\nUpdate webpack-dev-server version in package.json\nDelete package-lock.json\nDelete the node_modules directory\nRun npm i to re-fetch everything and write a new package-lock.json\n\nAlternatively, if you use caret notation for your dependencies and want to be certain that only webpack-dev-server is updated, follow what @nelson1212 suggested with the following change:\n\nUpdate package.json and package-lock.json as @nelson1212 described\nBlow away node_modules\nRun npm i. \n",
    "chris-schmitz": "\nMaybe port missmatch 8080 and 3000?\n\nHow so? If I'm understanding correctly, the webpack dev server should be hosting from port 8080 for my front end code base and any requests to :8080/api/v1/... are passed to :3000/api/v1/... via the proxy. That should be what's happening, right?\nBoth the webpack dev server's code base and the express server are working from their respective port, it's just the proxy from one to the other and back that doesn't seem to be working. . ",
    "germn": "@evilebottnawi done:\nhttps://github.com/germn/webpack_dev_server_issue_1623\nTo reproduce, after cloning:\n\nnpm install\nnpm run static-dev-server\nopen compiled file url, for example http://localhost:9001/static/bundle.1e074de3.js\nchange something in ./static_src/app/index.js\nopen new file url and refresh outdated file url: both will work\n\nSame true for css.\nI tried to comment out some sections of config to see where problem is, but without luck so far. Thank you for taking the time to look into this.. ",
    "skyFi": "Looking forward to fix this\nOooops!!\n\n. @evilebottnawi Web pages memory usage in development mode. I found this issue https://github.com/webpack/webpack/issues/6929 . ",
    "LilSebastian5000": "\nPlease read here https://github.com/webpack/webpack-dev-server/releases/tag/v3.0.0 . We can't describe all changes in CHANGELOG so we describe only necessary stuff. Better to start update and see documentation. Also no big changes between 2.9 and 3.14\n\nOk thanks. Actually, when I upgrade to version 3.0, NPM warns me that Webpack 4 is required. So I'm not sure why you're saying there was no big changes between versions? I do see it's mentioned in your link though :). ",
    "timsly": "@hiroppy Done, signed\n@evilebottnawi here is what I see in the build\n\n. That would be great. @hiroppy I cannot rebase from master because this PR is exclusively for v2 and master contains v3. Hm, in this case, I will cherry-pick them here. @evilebottnawi I've ported both fixes, see f6c6af63a2bf426eb47b5afd4f25630d5ed886bf and ff8b19c5814b86dbb0ac4b485bef016bef3f8a49\nCould you please run the build to make sure it works as expected?. ",
    "amilajack": "Does this conflict with https://github.com/webpack/webpack-dev-server/pull/1540?. @evilebottnawi @michael-ciniawsky it seems like https://github.com/webpack/webpack-dev-server/pull/1540 does the same thing as this PR. Should this PR be closed in favor of that PR?. > remove logic for open from bin file\nI'm not sure what do you mean by this. The previous comment says that open logic should be kept in bin. Also socksjs doesn't seem to register a 'listen' event. On what object should i listen for and where should i call it?. But if I listen with express what port should i listen on? Also i don't understand the reason for listening on another port with express. Can you please explain this.. ",
    "panlina": "Following may be not a \"minimum\", but small enough:\nhttps://github.com/panlina/resq-example/tree/webpack-dev-server-issue-1628\n\ngit clone https://github.com/panlina/resq-example.git\ncd resq-example\ngit checkout webpack-dev-server-issue-1628\nnpm i\nnpm start\nopen browser at http://localhost:8080\nlook at the console\n. Sure. Can you answer my question at the end of my post?. After tracing back several blames, an interesting commit is https://github.com/webpack/webpack-dev-server/commit/7dcd41d342c9f0c45ca77a5175345aa3996954a1#diff-895656aeaccff5d7c0f56a113ede9662\n. I'm no sure if that used to work before socket.io is replaced by SockJS.\n@SpaceK33z Can you give us some information? How using urlParts.path as socket url prefix is supposed to work?\n. \n",
    "erpheus": "Sure, here is a quite minimal repository:\nhttps://github.com/erpheus/base-interface-react\nRight now the code has a fixed port 3232 as can be seen on the Makefile and on the Webpack config for the dev server.\nI run the code by using make run-ui-dev, then yarn start:devin the opened terminal and then accessing localhost:3232. Ideally that port wouldn't be fixed so that multiple copies can be run in the same machine at once. In the Makefile this is solved by setting UI_PORT=0 (docker will choose a random available port that can be seen by running docker ps) but then I don't know what to write in the public key for webpack-dev-server such that HMR works.\nIs this clear enough? I can construct a smaller example or give more details on reproduction steps if necessary.. Sure, here is a quite minimal repository:\nhttps://github.com/erpheus/base-interface-react\nRight now the code has a fixed port 3232 as can be seen on the Makefile and on the Webpack config for the dev server.\nI run the code by using make run-ui-dev, then yarn start:devin the opened terminal and then accessing localhost:3232. Ideally that port wouldn't be fixed so that multiple copies can be run in the same machine at once. In the Makefile this is solved by setting UI_PORT=0 (docker will choose a random available port that can be seen by running docker ps) but then I don't know what to write in the public key for webpack-dev-server such that HMR works.\nIs this clear enough? I can construct a smaller example or give more details on reproduction steps if necessary.. ",
    "lukebro": "@evilebottnawi I'm not sure what the issue is with CI, it timed out. \nI ran tests on both Node.js 10.15.0 and everything is green.\nIt doesn't make much sense because the LTS one passed and it's also 10.15.0.\nCan you retrigger the CI?\n. @evilebottnawi failed again by timeout. How do you recommend I debug this?. @evilebottnawi Yeah I'm on macOS 10.14.2 with Node.js v10.6.0.  I've tried with Node.js v10.15.0 also and I can't reproduce the timeout.\nI'm going to setup my own Travis CI build to debug, I'll ping you when I find something.. Waiting for #1667 to be merged.. @evilebottnawi all set \ud83d\udc4d . ",
    "rvion": "@evilebottnawi it's in lib/events.js.EventEmitter code\nthe hot module plugin doesn't seem to register correctly its handlers on electron, and internally do not respond to it's own webpackHotUpdate.\nwith almost no configuration beside what is here, target: 'electron-renderer' makes hot reload fail to send fetch request for updated blob. @evilebottnawi it's in lib/events.js.EventEmitter code\nthe hot module plugin doesn't seem to register correctly its handlers on electron, and internally do not respond to it's own webpackHotUpdate.\nwith almost no configuration beside what is here, target: 'electron-renderer' makes hot reload fail to send fetch request for updated blob. @evilebottnawi \n1. thanks for your quick responses\n2. you can find a minimal repro here: https://github.com/rvion/electron-webpack-failure (all files are as minimal as it can be)\n3. webpack-dev-server hot-reload related code seems to use events, as this shown in below picture\n4. to see how things go wrong, adding a breakpoint here, and going steps by step is useful\n\ncan I do anything else to help ?. @evilebottnawi \n1. thanks for your quick responses\n2. you can find a minimal repro here: https://github.com/rvion/electron-webpack-failure (all files are as minimal as it can be)\n3. webpack-dev-server hot-reload related code seems to use events, as this shown in below picture\n4. to see how things go wrong, adding a breakpoint here, and going steps by step is useful\n\ncan I do anything else to help ?. @evilebottnawi I simplified the minimal repo a bit more\nhere are all files content to ease reading this thread:\nview.js\n```js\nconsole.log(\"CHANGE-ME2\");\nif (module.hot) {\n  module.hot.accept(() => {\n    console.log(\"==== Reload ====\");\n  });\n}\n```\nmain.js\njs\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\nlet mainWindow = null;\nfunction createWindow() {\n    mainWindow = new electron_1.BrowserWindow({ width: 1200, height: 900 });\n    mainWindow.webContents.openDevTools();\n    mainWindow.loadURL(\"http://localhost:9001/index.html\");\n    mainWindow.webContents.openDevTools();\n    mainWindow.on(\"closed\", () => (mainWindow = null));\n}\nelectron_1.app.on(\"ready\", createWindow);\nelectron_1.app.on(\"window-all-closed\", () => {\n    if (process.platform !== \"darwin\")\n        electron_1.app.quit();\n});\nelectron_1.app.on(\"activate\", () => {\n    if (mainWindow === null)\n        createWindow();\n});\nwebpack.dev.js\n```\nconst { join } = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n  mode: \"development\",\n  entry: join(__dirname, \"view.js\"),\n  devtool: \"source-map\",\n  target: \"electron-renderer\",\n  externals: [require(\"webpack-node-externals\")()],\n  output: { path: join(__dirname, \"dist\"), publicPath: \"\" },\n  plugins: [\n    new HtmlWebpackPlugin({ template: join(__dirname, \"./index.html\") })\n  ],\n  devServer: {\n    index: join(__dirname, \"index.html\"),\n    clientLogLevel: \"info\",\n    contentBase: join(__dirname, \"dist\"),\n    port: 9001,\n    hot: true\n  }\n};\n```\npackage.json\njson\n{\n  \"name\": \"electron-webpack-failure\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"author\": \"R\u00e9mi Vion\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"dev-webpack\": \"webpack-dev-server --hot --config webpack.dev.js\",\n    \"dev-electron\": \"electron .\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^4.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"webpack\": \"^4.29.0\",\n    \"webpack-cli\": \"^3.2.1\",\n    \"webpack-dev-server\": \"^3.1.14\",\n    \"webpack-node-externals\": \"^1.7.2\"\n  },\n  \"dependencies\": {}\n}\nindex.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\nreadme.md\n````md\nELECTRON-WEBPACK-FAILURE\n\nrun:\n\n```sh\nsetup:\nnpm install\nthen in 2 terminals, run:\nnpm run dev-webpack\nnpm run dev-electron\n```\n\n\nin view.js, change CHANGE-ME to any string\n\n\nBUG:\n\n\nin electron browser window: console shows:\n\n\n[WDS] App updated. Recompiling...\n    [WDS] App hot update...\n\nnothing is updated, no error\n````. @evilebottnawi I simplified the minimal repo a bit more\n\nhere are all files content to ease reading this thread:\nview.js\n```js\nconsole.log(\"CHANGE-ME2\");\nif (module.hot) {\n  module.hot.accept(() => {\n    console.log(\"==== Reload ====\");\n  });\n}\n```\nmain.js\njs\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\nlet mainWindow = null;\nfunction createWindow() {\n    mainWindow = new electron_1.BrowserWindow({ width: 1200, height: 900 });\n    mainWindow.webContents.openDevTools();\n    mainWindow.loadURL(\"http://localhost:9001/index.html\");\n    mainWindow.webContents.openDevTools();\n    mainWindow.on(\"closed\", () => (mainWindow = null));\n}\nelectron_1.app.on(\"ready\", createWindow);\nelectron_1.app.on(\"window-all-closed\", () => {\n    if (process.platform !== \"darwin\")\n        electron_1.app.quit();\n});\nelectron_1.app.on(\"activate\", () => {\n    if (mainWindow === null)\n        createWindow();\n});\nwebpack.dev.js\n```\nconst { join } = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nmodule.exports = {\n  mode: \"development\",\n  entry: join(__dirname, \"view.js\"),\n  devtool: \"source-map\",\n  target: \"electron-renderer\",\n  externals: [require(\"webpack-node-externals\")()],\n  output: { path: join(__dirname, \"dist\"), publicPath: \"\" },\n  plugins: [\n    new HtmlWebpackPlugin({ template: join(__dirname, \"./index.html\") })\n  ],\n  devServer: {\n    index: join(__dirname, \"index.html\"),\n    clientLogLevel: \"info\",\n    contentBase: join(__dirname, \"dist\"),\n    port: 9001,\n    hot: true\n  }\n};\n```\npackage.json\njson\n{\n  \"name\": \"electron-webpack-failure\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"author\": \"R\u00e9mi Vion\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"dev-webpack\": \"webpack-dev-server --hot --config webpack.dev.js\",\n    \"dev-electron\": \"electron .\"\n  },\n  \"devDependencies\": {\n    \"electron\": \"^4.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"webpack\": \"^4.29.0\",\n    \"webpack-cli\": \"^3.2.1\",\n    \"webpack-dev-server\": \"^3.1.14\",\n    \"webpack-node-externals\": \"^1.7.2\"\n  },\n  \"dependencies\": {}\n}\nindex.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n  </body>\n</html>\nreadme.md\n````md\nELECTRON-WEBPACK-FAILURE\n\nrun:\n\n```sh\nsetup:\nnpm install\nthen in 2 terminals, run:\nnpm run dev-webpack\nnpm run dev-electron\n```\n\n\nin view.js, change CHANGE-ME to any string\n\n\nBUG:\n\n\nin electron browser window: console shows:\n\n\n[WDS] App updated. Recompiling...\n    [WDS] App hot update...\n\nnothing is updated, no error\n```. @evilebottnawi I don't believe you: the webpack-hot-middleware code is here and use.emit()from the events module from either theevents` node package or the https://nodejs.org/api/events.html native node module: https://github.com/webpack-contrib/webpack-hot-middleware/search?q=emit&unscoped_q=emit\n\nthere is no two-way about it.\nDid you even clone my project and run the two commands shown in the readme ? \nIf you clone my repository, run both electron and webpack, then update the string in the view.js file, you'll notice the bug.\nedit: sorry for the tone a bit harsh. @evilebottnawi I don't believe you: the webpack-hot-middleware code is here and use .emit() from the events module from either the events node package or the https://nodejs.org/api/events.html native node module: https://github.com/webpack-contrib/webpack-hot-middleware/search?q=emit&unscoped_q=emit\nthere is no two-way about it.\nDid you even clone my project and run the two commands shown in the readme ? \nIf you clone my repository, run both electron and webpack, then update the string in the view.js file, you'll notice the bug.\nedit: sorry for the tone a bit harsh. I know. I understand that the bug is a combination of webpack, webpack-dev-server, and webpack-hot-middleware when target is electron-renderer. I'm not trying to find a culprit, not to say that webpack-dev-server is faulty. I'm just asking for help (and offering mine) to troubleshoot an issue I'm seeing with webpack-dev-server with almost no configuration when targeting electron. I'll open an other issue in webpack-hot-middleware too. but I think the isue is more relevant here, as their project scope is too narrow.. I know. I understand that the bug is a combination of webpack, webpack-dev-server, and webpack-hot-middleware when target is electron-renderer. I'm not trying to find a culprit, not to say that webpack-dev-server is faulty. I'm just asking for help (and offering mine) to troubleshoot an issue I'm seeing with webpack-dev-server with almost no configuration when targeting electron. I'll open an other issue in webpack-hot-middleware too. but I think the isue is more relevant here, as their project scope is too narrow.. @evilebottnawi also, technically, you use webpack-hot-middleware in some way, since you're instantiating it in webpack-dev-server when --hot is present.\neg1. https://github.com/webpack/webpack-dev-server/search?q=HotModuleReplacementPlugin&unscoped_q=HotModuleReplacementPlugin\neg2. https://github.com/webpack/webpack-dev-server/search?q=hot&unscoped_q=hot\nI understand that I'm a bit stubborn here, but chances are that the bug is related to how this plugin is instantiated when targeting electron. \nanyway, if you think this issue really has nothing to do with webpack-dev-server, then thanks for your help. @evilebottnawi also, technically, you use webpack-hot-middleware in some way, since you're instantiating it in webpack-dev-server when --hot is present.\neg1. https://github.com/webpack/webpack-dev-server/search?q=HotModuleReplacementPlugin&unscoped_q=HotModuleReplacementPlugin\neg2. https://github.com/webpack/webpack-dev-server/search?q=hot&unscoped_q=hot\nI understand that I'm a bit stubborn here, but chances are that the bug is related to how this plugin is instantiated when targeting electron. \nanyway, if you think this issue really has nothing to do with webpack-dev-server, then thanks for your help. thanks !. thanks !. @evilebottnawi \nfound the problem. the culprit was a mix of \n - webpack-node-external \n - target: electron-renderer\n - leading events to be required the wrong way\nreplacing webpack-node-external by some explicit filter list fixed it.\n\nAs a final note, one can find below the list of required modules induced by webpack-dev-server --hot.\n(events module/package is always loaded with 'hot')\n```js\nconst { join } = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst f = (...path) => join(__dirname, ...path);\nmodule.exports = {\n  mode: \"development\",\n  entry: f(\"view.js\"),\n  devtool: \"source-map\",\n  target: \"electron-renderer\",\n  externals: function(context, request, callback) {\n    console.log(context.replace(__dirname, \"- .\").replace(/\\/g, \"/\"), request);\n    callback();\n  },\n  output: { path: f(\"dist\"), publicPath: \"\" },\n  plugins: [new HtmlWebpackPlugin({ template: f(\"./index.html\") })],\n  devServer: {\n    index: f(\"index.html\"),\n    clientLogLevel: \"info\",\n    contentBase: f(\"dist\"),\n    port: 9001,\n    hot: true\n  }\n};\n```\nThe list of modules required are as follow (- <context> <import>)\n- ./node_modules/webpack-dev-server/client url\n- ./node_modules/webpack-dev-server/client strip-ansi\n- ./node_modules/webpack-dev-server/client loglevel\n- ./node_modules/webpack-dev-server/client ./socket\n- ./node_modules/webpack-dev-server/client ./overlay\n- ./node_modules/webpack-dev-server/client webpack/hot/emitter <===== \ud83d\udd14 \n- ./node_modules/webpack/hot ./log\n- ./node_modules/webpack/hot ./log-apply-result\n- ./node_modules/webpack/hot ./emitter\n- ./node_modules/webpack/hot ./log\n- ./node_modules/webpack/hot ./log\n- ./node_modules/webpack/hot events<===== \ud83d\udd14 \n- ./node_modules/webpack-dev-server/client sockjs-client/dist/sockjs\n- ./node_modules/webpack-dev-server/client ansi-html\n- ./node_modules/webpack-dev-server/client html-entities\n- ./node_modules/strip-ansi ansi-regex\n- ./node_modules/html-entities ./lib/xml-entities.js\n- ./node_modules/html-entities ./lib/html4-entities.js\n- ./node_modules/html-entities ./lib/html5-entities.js. @evilebottnawi \nfound the problem. the culprit was a mix of \n - webpack-node-external \n - target: electron-renderer\n - leading events to be required the wrong way\nreplacing webpack-node-external by some explicit filter list fixed it.\n\nAs a final note, one can find below the list of required modules induced by webpack-dev-server --hot.\n(events module/package is always loaded with 'hot')\n```js\nconst { join } = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst f = (...path) => join(__dirname, ...path);\nmodule.exports = {\n  mode: \"development\",\n  entry: f(\"view.js\"),\n  devtool: \"source-map\",\n  target: \"electron-renderer\",\n  externals: function(context, request, callback) {\n    console.log(context.replace(__dirname, \"- .\").replace(/\\/g, \"/\"), request);\n    callback();\n  },\n  output: { path: f(\"dist\"), publicPath: \"\" },\n  plugins: [new HtmlWebpackPlugin({ template: f(\"./index.html\") })],\n  devServer: {\n    index: f(\"index.html\"),\n    clientLogLevel: \"info\",\n    contentBase: f(\"dist\"),\n    port: 9001,\n    hot: true\n  }\n};\n```\nThe list of modules required are as follow (- <context> <import>)\n- ./node_modules/webpack-dev-server/client url\n- ./node_modules/webpack-dev-server/client strip-ansi\n- ./node_modules/webpack-dev-server/client loglevel\n- ./node_modules/webpack-dev-server/client ./socket\n- ./node_modules/webpack-dev-server/client ./overlay\n- ./node_modules/webpack-dev-server/client webpack/hot/emitter <===== \ud83d\udd14 \n- ./node_modules/webpack/hot ./log\n- ./node_modules/webpack/hot ./log-apply-result\n- ./node_modules/webpack/hot ./emitter\n- ./node_modules/webpack/hot ./log\n- ./node_modules/webpack/hot ./log\n- ./node_modules/webpack/hot events<===== \ud83d\udd14 \n- ./node_modules/webpack-dev-server/client sockjs-client/dist/sockjs\n- ./node_modules/webpack-dev-server/client ansi-html\n- ./node_modules/webpack-dev-server/client html-entities\n- ./node_modules/strip-ansi ansi-regex\n- ./node_modules/html-entities ./lib/xml-entities.js\n- ./node_modules/html-entities ./lib/html4-entities.js\n- ./node_modules/html-entities ./lib/html5-entities.js. ",
    "dlepaux": "Thank you @evilebottnawi for your quick answer I'll check it out.\nHave a nice day. You are amazing @evilebottnawi thank you very much. ",
    "hiroppy": "@evilebottnawi sorry but do you want spaces or tabs? I\u2019m fine either way!. @evilebottnawi I changed spaces from tabs:). @evilebottnawi I removed html from prettier. PTAL \ud83d\ude4f . Do you have a repository that realizes such a situation?\nIt worked normally in my environment.. np, thanks for your review!\nyep, I agree with you. I'll migrate to jest from mocha:). hmmm.... I don't know that. Current setting is \"collectCoverageFrom\": [\"(lib|bin)/**/*.js\"],.. Test failed on appveyor.(Environment: nodejs_version=8, webpack_version=latest)\nFAIL test/Routes.test.js\n  \u25cf Routes \u203a headers as an array \u203a GET request with headers as an array\n    expected \"X-Bar\" of \"key1=value1, key2=value2\", got \"key1=value1,key2=value2\"\n      at Test.Object.<anonymous>.Test._assertHeader (node_modules/supertest/lib/test.js:249:12)\n      at Test.Object.<anonymous>.Test._assertFunction (node_modules/supertest/lib/test.js:283:11)\n      at Test.Object.<anonymous>.Test.assert (node_modules/supertest/lib/test.js:173:18)\n      at Server.assert (node_modules/supertest/lib/test.js:131:12). @evilebottnawi Fixed. https://codecov.io/gh/webpack/webpack-dev-server/commit/dfe5bade21a4bd9f02b40cb497cefaee868adae0. The following error occurs only at Node 8 \ud83e\udd14(it also happened on my mac)\nexpected \"X-Bar\" of \"key1=value1, key2=value2\", got \"key1=value1,key2=value2\". @evilebottnawi Since I do not know the cause, I temporarily verified it.\nI think that it is not good, but I think that the influence range is not so big either.(Because the core code is not rewritten)\nhttps://github.com/webpack/webpack-dev-server/pull/1650/commits/29b320d7141725138816367f1cb667d4d531d1e2. @evilebottnawi Thanks for reviewing! CI is green:). Yep, I'll work on that:). I'll try it:). \u2705 rename createSchema to createConfig. Only the MacOS Node 11 fails the test.\nIt seems that https://github.com/webpack/webpack-dev-server/pull/1588 has recurred.\nBut in my pc, it is not caused\ud83d\ude02\nhttps://travis-ci.org/webpack/webpack-dev-server/jobs/490304902. @evilebottnawi CI is green \ud83c\udf4f  I do not know the cause\ud83d\ude35 Thank you for rebuilding.. lib/utils is added to codecov in this pr. https://codecov.io/gh/webpack/webpack-dev-server/compare/a52f2d7c4fe733ce4b50a560f4d6a0fe77db06f8...65956e1173840ed33c6d3716a2615e733a2c6973/tree/lib/utils. Can we release a patch version?\ud83d\ude0f. @evilebottnawi Could you restart Travis CI because I don't have an access right?. I like export style.\nHow about putting(or create) it in index.js?\nIt can resolve files can be moved in other directory in any time.. @EloB  Sorry for late to my reply. I do not think that lib/Server.js(main) will be used at the frontend(browsers) because it uses node.js native modules like fs, path.\nSo concerning the rewrite to ES2015 is no problem.\nBTW, I also apologize for having suggested without thinking about lib/Server.js is using node.js native modules.\nI think this solution is good.\nhttps://github.com/webpack/webpack-dev-server/pull/1662#issuecomment-463570652\n. Sorry for the late reply. Thank you for creating e2e environment.\n@rlamana Could you change the port number because 8080 is popular number?. Yep, thanks! I'll change the default port number(test/helper.js) at other pr.. /cc @evilebottnawi PTAL;). The snapshot test is currently failing. . The snapshot test is currently failing. . looks good. looks good. thx:). wait for #1672. ok, I'll investigate about these tests.. Close because I create new PR.. Note: I tested only Mac OS because I don't have Windows. \n@evilebottnawi This is the sample code, but do you think that testing is necessary?. ok, so I'll install Microsoft Edge Developer to my pc. Wait for a little more plz.. This issue has been fixed.\n\n. CI failed https://ci.appveyor.com/project/sokra/webpack-dev-server/builds/22574490/job/7wk6h9jwhrisjcvt. updated. updated. @marcofugaro This test code should be fixed like below.\n\n\n```diff\ndiff --git a/test/ContentBase.test.js b/test/ContentBase.test.js\nindex 4813372..70b57eb 100644\n--- a/test/ContentBase.test.js\n+++ b/test/ContentBase.test.js\n@@ -20,7 +20,6 @@ const contentBaseOther = path.join(\n describe('ContentBase', () => {\n   let server;\n   let req;\n-  afterEach(helper.close);\n\n   describe('to directory', () => {\n     beforeAll((done) => {\n@@ -32,15 +31,21 @@ describe('ContentBase', () => {\n       addEntries(config, options);\n       server = helper.start(\n         config,\n-        {\n+        Object.assign({}, options, {\n           contentBase: contentBasePublic,\n           watchContentBase: true,\n-        },\n+        }),\n         done\n       );\n       req = request(server.app);\n     });\n\n     it('Request to index', (done) => {\n       req.get('/').expect(200, /Heyo/, done);\n     });\n@@ -54,7 +59,8 @@ describe('ContentBase', () => {\n\n       runBrowser().then(({ page, browser }) => {\n         // wait for first load\n-        page.goto('http://localhost:9001').then(() => {\n+        page.goto('http://0.0.0.0:9001').then(() => {\n+          done(); // TODO: change this\n           // page reloaded after the first load,\n           // meaning it watched the file correctly\n           page.on('load', () => {\n@@ -82,6 +88,12 @@ describe('ContentBase', () => {\n       req = request(server.app);\n     });\n\n+    afterAll((done) => {\n+      helper.close(() => {\n+        done();\n+      });\n+    });\n+\n     it('Request to first directory', (done) => {\n       req.get('/').expect(200, /Heyo/, done);\n     });\n@@ -103,6 +115,12 @@ describe('ContentBase', () => {\n       req = request(server.app);\n     });\n\n+    afterAll((done) => {\n+      helper.close(() => {\n+        done();\n+      });\n+    });\n+\n     it('Request to page', (done) => {\n       req\n         .get('/other.html')\n@@ -123,6 +141,12 @@ describe('ContentBase', () => {\n       req = request(server.app);\n     });\n\n+    afterAll((done) => {\n+      helper.close(() => {\n+        done();\n+      });\n+    });\n+\n     it('Request to page', (done) => {\n       req\n         .get('/foo.html')\n@@ -147,6 +171,12 @@ describe('ContentBase', () => {\n       req = request(server.app);\n     });\n\n+    afterAll((done) => {\n+      helper.close(() => {\n+        done();\n+      });\n+    });\n+\n     it('Request to page', (done) => {\n       req.get('/other.html').expect(200, done);\n     });\n@@ -167,6 +197,12 @@ describe('ContentBase', () => {\n       req = request(server.app);\n     });\n\n+    afterAll((done) => {\n+      helper.close(() => {\n+        done();\n+      });\n+    });\n+\n     it('Request to page', (done) => {\n       req.get('/other.html').expect(404, done);\n     });\n@@ -184,6 +220,12 @@ describe('ContentBase', () => {\n       req = request(server.app);\n     });\n\n+    afterAll((done) => {\n+      helper.close(() => {\n+        done();\n+      });\n+    });\n+\n     it('Request foo.wasm', (done) => {\n       req.get('/foo.wasm').expect('Content-Type', 'application/wasm', done);\n     });\n\n```\n\n\n. Although the test of Node 11 is failed at CI, it has nothing to do with this PR.(pr: https://github.com/webpack/webpack-dev-server/pull/1704). This pr is hotfix so I merged.. @rarkins Thank you for your feedback. I'll add it.. @evilebottnawi Could you review again? I added separateMinorPatch option and delete major group.(individual PR will be submitted if something's library changes as major). @evilebottnawi Do we delete this line? \nhttps://github.com/webpack/webpack-dev-server/blob/master/client-src/default/webpack.config.js#L9. @evilebottnawi Thank you for the description! I'll work on it.\nI changed commit message type, see https://github.com/webpack/webpack-dev-server/pull/1706/files#diff-76e62915fba4048ac877a875e2e3b8d2R2\nfyi: https://renovatebot.com/docs/semantic-commits/. Thank you for your contribution.\nI don't think we still maintain the v2 branch. /cc @evilebottnawi . Oh, I did not know. OK, I'll review this pr.. Added,PTAL. file: https://github.com/webpack/webpack-dev-server/blob/07c764017ea8843d26c131ec45c111c5c8c17889/.prettierrc.js\ncommit: https://github.com/webpack/webpack-dev-server/pull/1647/commits/2051f14944c26ee0c20d0d6cd7810d290abdc005#diff-d9a52777b34c9360910514f53aad911dR5\n. @evenstensberg I made a forced push to add html to prettier.\nfile: https://github.com/webpack/webpack-dev-server/blob/0185f6397e0edd0285fc2154d7e8fe94e9103f51/.prettierrc.js. @evenstensberg  Oops, Sorry, I mistook the name of the destination \ud83d\ude47 . It is strange to use spawn, the following error occurs.\nspawn node ENOENT\nSo We will use execa.. | version | output |spaces|\n| :--- | :--- |:--- |\n| 6| key1=value1, key2=value2 |y|\n| 7 | key1=value1,key2=value2 |n| \n| 8| key1=value1,key2=value2 |n|\n| 9 | key1=value1,key2=value2 |n| \n| 10| key1=value1, key2=value2 |y|\n| 11 | key1=value1, key2=value2 |y|\n6, 10, 11 have the spaces but 7, 8, 9 don't have.\nSo, I change the code to ['v7', 'v8', 'v9'].includes.. added to https://github.com/webpack/webpack-dev-server/pull/1650/files#diff-f1603d639761fe762d975b5ce05e20b1R107. Separated this commit(https://github.com/webpack/webpack-dev-server/pull/1650/commits/10e4bc27c96b6c70b8020cf2e034796a5b552fc0) /cc @evilebottnawi . I would like to erase it if it is stable.. Is it like this?(or we should use 'lts/*'?)\n- &osx\n      stage: Test (MacOS)\n      os: 'osx'\n      env: SCRIPT=test\n    - <<: *osx\n      node_js: 11\n    - <<: *osx\n      node_js: 10\n    - <<: *osx\n      node_js: 8\n    - <<: *osx\n      node_js: 6. Updated. mode is added to the config.. As far as I confirm, running two tests seems to fail.. The first test(anyone) will succeed but subsequent tests will fail. \nProbably postprocessing would be a problem.\nOnce we merge this PR and then I think that it is better to investigate the cause separately.(maybe difficult). it seems good with Node11 \ud83c\udf89 https://travis-ci.org/webpack/webpack-dev-server/jobs/495415842. Why will we remove this from v4?. we can use includes:). Thank you for answering. I understood.. Thank you for separating to utils \ud83d\ude4f . > * Don't move div after description\nsorry, I want to get more details.\nMaybe, L21?. IMO: I think we should leave process.env.DEFAULT_PORT_RETRY as a document.. I think DEFAULT_PORT_RETRY should be added in devServer because currently, we don' use process.env. see https://webpack.js.org/configuration/dev-server/\n@evilebottnawi what do you think?. I think !options.http2 should be added here.. Please check http/2 or not.\njs\n    it('Request to index', (done) => {\n      req\n        .get('/')\n        .expect(200, /Heyo/)\n        .then(({ res }) => {\n          expect(res.httpVersion).toEqual('2.0');\n          done();\n        });\n    });. why is this necessary?. ",
    "tr1s": "@philipbordallo thank you! I missed that. I'll remember this when I try it again. I ended up having to reset my laptop to the hour before I installed mkcert \ud83d\ude12\nI don't really see the advantages of going through all this trouble though. I only needed it for Slate, but I thought the point of https was for live websites, not local development.\nGuess I need to look into it more.. ",
    "tomasztunik": "This was our case, we did not use webpack-cli for anything but when trying to start webpack-dev-server (configured via webpack.config.js) this is what we saw:\n```\nThe CLI moved into a separate package: webpack-cli\nPlease install 'webpack-cli' in addition to webpack itself to use the CLI\n-> When using npm: npm i -D webpack-cli\n-> When using yarn: yarn add -D webpack-cli\ninternal/modules/cjs/loader.js:582\n    throw err;\n    ^\nError: Cannot find module 'webpack-cli/bin/config-yargs'    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:580:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:506:25)\n    at Module.require (internal/modules/cjs/loader.js:636:17)\n    at require (internal/modules/cjs/helpers.js:20:18)\n    at Object. (/Users/tomasztunik/development/impactMapper-Client/node_modules/webpack-dev-server/bin/webpack-dev-server.js:84:1)\n    at Module._compile (internal/modules/cjs/loader.js:688:30)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10)\n    at Module.load (internal/modules/cjs/loader.js:598:32)\n    at tryModuleLoad (internal/modules/cjs/loader.js:537:12)\n    at Function.Module._load (internal/modules/cjs/loader.js:529:3)\n```\nuh, or would it be coming form one of the loaders?. checked the project and the only place that requires webpack-cli/bin/config-yargs is webpack-dev-server in the built file https://github.com/webpack/webpack-dev-server/blob/master/bin/webpack-dev-server.js#L80. ",
    "heymath": "@expertup If I understood your problem, I guess you should check the public option devServer.public.\nFor my own case:\nI got some troubles with my config for Webpack dev server running in a Docker container.\nBecause of Hot Modules Reload / Web Sockets using the --host=$HOST and --port=$PORT options that I gave for running the dev server in the Docker container \"context\", but WS run in the browser in my local machine \"context\" on http://my-app.local.my-domain.\nPassing --public=http://my-app.local.my-domain:80 solved the problem for me \ud83c\udf89.\nBecause the dev server is still running on given --host=$HOST & --port=$PORT, but WS hit on http://my-app.local.my-domain/sockjs-node/info?t=xxxxxxxxxx\nI hope it helps.... ",
    "rlamana": "@evilebottnawi How are you testing the logic of the client code? I looked for it but couldn't find it in any of the tests. I guess webdriver is the right solution here but I didn't want to add too much overhead to your current tests. Guide me on how you recommend to do it and I'll be glad to add it.\n. @evilebottnawi as I understand those tests are checking that the socket and the server are available, but it is not testing the client code that will be executed on the browser's end (more precisely testing the code in https://github.com/webpack/webpack-dev-server/blob/master/client-src/default/index.js).\nAny suggestions on how to test it without adding the overhead of webdriver?\n\nhttps://github.com/webpack/webpack-dev-server/blob/master/test/Socket.test.js\n\n. @evilebottnawi @hiroppy I added some e2e tests using puppeteer headless Chrome API. This allows testing my fix and enables more e2e testing. \nI created a new Client.test.js that contains this client code related tests: https://github.com/webpack/webpack-dev-server/blob/50ef125fbfe04eb51f6788a0c44ada539834ea57/test/Client.test.js\nAlso the runBrowser helper allows to quickly start the headless browser for e2e testing.\nLet me know what you think.. @evilebottnawi it's ready but for some weird reason the test keeps failing in node 6. The proxy I use fails with a EADDRNOTAVAIL error. I've been trying to repro in a container with node 6.16.0 (same version Appveyor uses), but it works just fine and the test passes without problems. Any idea why this could be happening?. @evilebottnawi I'm still trying to figure out why the proxy fails to connect to the devserver on the appveyor Windows environment for node 6 when the host is 0.0.0.0. I tried to launch a local instance of the appveyor env in local to repro the issue and try to debug with no luck...\n. @evilebottnawi @hiroppy, it is now ready to merge.\nApparently, win32/node 6 has issues establishing a connection to 0.0.0.0. I fixed it by just pointing the test proxy to localhost. The test needs the dev server to be listening on 0.0.0.0, it doesn't really matter how the proxy redirects to it anyway, as long as it reaches the dev server.\nWith this PR you can now use the runBrowser helper I included to add more e2e testing. I hope this helps.. @hiroppy in the test code? sure! I just thought since it should be in an isolated environment it wouldn't matter. I'll just set 9001 for the dev server and 9000 for the proxy.. I assumed that it was the API expected behavior, so I didn't think it was a bug. It all makes sense now. I will create the issue then.. I created issue #1703.. ",
    "yoannmoinet": "Actually this won't work if we use a string for options.stats like errors-only.\nWill update and add tests.. @evilebottnawi I've refactored the code to also accepts strings.\nI tried to write tests, but I'm not sure where to begin.\nI tried creating a new test/Server.test.js but I can't make any test pass, I think I'm going in the wrong direction.\nWould you help please?. Can someone help with the tests (cc @evilebottnawi) ?\nHere's what I tried with Server.test.js but I've been unsuccessful.\n```javascript\n'use strict';\nconst webpack = require('webpack');\nconst Server = require('../lib/Server');\nconst config = require('./fixtures/simple-config/webpack.config');\nconst allStats = [\n  {},\n  // eslint-disable-next-line\n  undefined,\n  'errors-only',\n  {\n    assetsSort: \"size\"\n  }\n];\ndescribe('Server', () => {\n  allStats.forEach((s) => {\n    it('should cascade stats options', (done) => {\n      const compiler = webpack(Object.assign({}, config, s && { stats: s }));\n      const server = new Server(compiler, {});\n      const next = () => {\n        const localStats = server.getStats(server._stats);\n    if(!s || !Object.keys(s).length) {\n      expect(localStats).toBe(server.DEFAULT_STATS);\n    } else {\n      expect(localStats).not.toBe(server.DEFAULT_STATS);\n    }\n\n    server.close(() => {\n      done();\n    });\n  };\n  server.listen(8080, 'localhost', (err) => {\n    if (err) return next(err);\n    next();\n  });\n});\n\n});\n});\n``. @evilebottnawi from what I understand, what you pointed to is if we want to use webpack's stats config if none is given to devServer's config, as a fallback.\nI've added a commit that does just that, but on its own, it won't fix the bug, we still need the change inServer.jsfor it to cascade into the browser's console.. > Loooks good, need add tests forwarningsFilter`\n@evilebottnawi I'm not sure what you're asking for.\n\nThe snapshot test is currently failing.\n\n@hiroppy indeed, I cannot reproduce locally though, so I don't know what to look for.. @evilebottnawi oh yes, I'm working on this right now \ud83d\ude09 \nI wasn't sure we were talking about the same thing \ud83d\udc4d . @evilebottnawi here you go, I've added test for the Server.. I'm not sure I understand Travis' errors.. can you help with the failing task in Travis @evilebottnawi please?. I'm not sure what kind of test I'm supposed to add following the codecov/patch task failing.\nI felt like I added all the tests needed.\ncc @evilebottnawi . I needed it for the tests I'm trying to write for Server.js.\nShould I add this as a public static of the Server class?. this is where I'm using it. Oh, good point, will update.. I still need to keep the property this.stats to have access to options.stats.. Not sure it would be useful to move the logic since I still need to keep that this.stats so I can use options.stats in getStats().\nWhat do you think @evilebottnawi ?. ",
    "patrickhrastnik": "Thanks for merging the changes. When are they going to be released, to be available via npm?. Thanks for merging the changes. When are they going to be released, to be available via npm?. Thanks for merging the changes. When are they going to be released, to be available via npm?. ",
    "miketownsend": "\nOperating System: macOS Mojave\nNode Version: 10.15.1\nNPM Version: 6.x\nwebpack Version: 4.x\n\nwebpack-dev-server Version: 3.2.0\n\n\n[x]  This is a bug\n\n[ ]  This is a modification request\n\nI am seeing the same issue, and have a project serving html with a local ssl certificate on:\nhttps://app.domain.com:3000\nThe webpack assets are served on:\nhttps://app.domain.com:8080\nUsing:\n{\n  devServer: {\n    hot: true,\n    inline: true,\n    disableHostCheck: true,\n    host: '0.0.0.0',\n    headers: {\n      'Access-Control-Allow-Origin': 'https://app.domain.com:3000'\n    },\n    https: {\n      key: fs.readFileSync(path.join(__dirname, '../localssl/server.key')),\n      cert: fs.readFileSync(path.join(__dirname, '../localssl/server.crt'))\n    }\n  }\n}\nChrome now rejects assets from webpack due to ssl certificate host check.. ",
    "shobhitsharma": "@evilebottnawi This resolves the issue for me https://github.com/webpack/webpack-dev-server/pull/1686. If you guys have better ideas up there, feel free to commit and let me know.. @evilebottnawi Please write better testing in future to prevent issues like this.. ",
    "jsmith-sapient": "@evilebottnawi I tried null: No difference to false (it does nothing).\nI'll try to find some time this weekend to take a look. I might be posting as @jshado1 (my personal account, not a catfish).. @evilebottnawi please see the commit history:\n\n[\u2026]\nusing webpack-dev-server with return req.url (working)\nusing webpack-dev-server (return false not working) \u2190 checkout this commit. ~@evilebottnawi could you link me to the test case? that might help.~ nvmd, it was easy to find: https://github.com/webpack/webpack-dev-server/blob/master/test/Proxy.test.js#L107-L119. @evilebottnawi I think you're talking about this case:\n\njs\nit('should pass through a proxy when a bypass function returns null', (done) => {\n  req.get('/foo.js').expect(200, /Hey/, done);\n});\nIf so, the function does not return null:\njs\n  '/foo': {\n    bypass(req) {\n      if (/\\.html$/.test(req.path)) {\n        return '/index.html';\n      }\n    },\n  },. I don't think so. I would expect no return to mean \"go ahead, proxy, do your thing\". How else would that be signalled?. I'm having trouble finding where this is in the source code. Could you point me in the right direction?. ",
    "jshado1": "I haven't used bypass with previous versions.. The type check is superfluous because the triple (exactly) equal already asserts the type check.\n. Setting the default value of proxyConfig.bypass to a no-op function would dramatically simplify the code here (assuming noop default):\n```suggestion\n              const bypassUrl = proxyConfig.bypass(req, res, proxyConfig);\n          if (bypassUrl) req.url = bypassUrl;\n          else if (bypassUrl === false) req.url = null;\n\n          next();\n\n```\nIt would also help if the flag for bypass to return was null (since that's apparently what req.url wants), instead of mixing false and null (but that would probably be a breaking change). I think this is right, but the suggested logic is nigh impossible to follow after re-reading it for 15 minutes:\n```js\n              const bypassUrl = proxyConfig.bypass(req, res, proxyConfig);\n          if (bypassUrl || bypassUrl === null) req.url = bypassUrl;\n\n          next();\n\n``.isByPassFuncDefined` wasn't too confusing before, but no harm having it. The new code comments explain it :). ",
    "GitNomster": "@evilebottnawi problem occurs only in npm ci. @evilebottnawi yes, i'm using it locally. I've dig deeper and found default-gateway 3.1.0 package starts using idb-connector.. @evilebottnawi sometimes i'm using it on build server, where i get program for production.. ",
    "martinoppitz": "is that the new feature?\njs\nhttps: {\n  key: './https/server.key',\n  cert: './https/server.crt',\n  ca: './https/ca.pem'\n}. ",
    "arthureggert": "@evilebottnawi I open a PR to fix this.\nIf anything is needed please let me know.. fixed by #1691 . @evilebottnawi Thanks, if approved when will we have a new version on npm!?. Thanks, I will close #1690 then.. ",
    "marisveide": "Having to accept the self-signed certificate is only one part of an issue, which is actually not an issue.\nThe main issue is that I cannot add my own certificate which I can make valid for a longer period. Or am I missing something - how to use my own certificate?\nThat would be really awesome if I could...\nThank you!. That's right - this is an issue: running the command line like this (as explained in the link you sent):\nwebpack-dev-server --https --key /path/to/server.key --cert /path/to/server.crt --cacert /path/to/ca.pem\nIt just ignores those parameters, and still generates its own certificate. It doesn't use my passed certificate.\nThe concrete command I am running, is this:\n./bin/webpack-dev-server --https --cert ~/.ssl/private.pem --key ~/.ssl/private.key\nI have the certificate issued there on the different domain - not the localhost.\nAnd my generated certificate is set to be valid for 10 years.\nHere's how my certificate looks like in KeyChain:\n\nBut when I run the command to use that certificate with WebPacker\n./bin/webpack-dev-server --https --cert ~/.ssl/private.pem --key ~/.ssl/private.key\n, I still get the localhost certificate, which is valid not 10 years, but 25 days:\n\nCan you tell that you have tried to replicate this, but for you, it accepts your custom certificate?. I am using webpack-dev-server version Version: webpack 4.29.5 (upgraded to latest).\nHere is the reproducible steps:\n```\nI delete the current Webpack generated SSL certificate:\nmaris$ rm node_modules/webpack-dev-server/ssl/*\nI start the webpacker with my own certificate\nmaris$ ./bin/webpack-dev-server --https --cert ~/.ssl/private.pem --key ~/.ssl/private.key\n\u2139 \uff62wds\uff63: Generating SSL Certificate\n\u2139 \uff62wds\uff63: Project is running at https://######.dev:3035/\n\u2139 \uff62wds\uff63: webpack output is served from /packs/\n\u2139 \uff62wds\uff63: Content not from webpack is served from /#########/public/packs\n\u2139 \uff62wds\uff63: 404s will fallback to /index.html\n```\nNotice the line \u2139 \uff62wds\uff63: Generating SSL Certificate\nIt generates its own SSL certificate and ignores the command line arguments to use my own certificate.\n. @evilebottnawi , sure!\nmaris$ npm ls webpack-dev-server\nproject@ /Users/maris/...\n\u2514\u2500\u2500 webpack-dev-server@3.1.14\n. Oh, I see where the issue is.\nWe need this package @rails/webpacker (https://github.com/rails/webpacker), and the webpack-dev-server comes as a dependency for that one.\nI upgraded that one, and have the latest webpack-dev-server now.... Sorry, nope, the problem is not solved.\nLook - I have the webpack-dev-server@3.2.1 now.\nStill, when I run the following commands:\nbash\n$ rm node_modules/webpack-dev-server/ssl/*\n$ ./bin/webpack-dev-server --https --cert ~/.ssl/private.pem --key ~/.ssl/private.key\nI see the following output:\nbash\n\u2139 \uff62wds\uff63: Generating SSL Certificate\n\u2139 \uff62wds\uff63: Project is running at https://localhost:3035/\n\u2139 \uff62wds\uff63: webpack output is served from /packs/\nWhen I look in the code of the latest version of this package, in the file node_modules/webpack-dev-server/lib/Server.js I see the following code:\n```JavaScript\nif (!options.https.key || !options.https.cert) {\n        // Use a self-signed certificate if no certificate was configured.\n        // Cycle certs every 24 hours\n        const certPath = path.join(__dirname, '../ssl/server.pem');\n    let certExists = fs.existsSync(certPath);\n\n    if (certExists) {\n      const certTtl = 1000 * 60 * 60 * 24;\n      const certStat = fs.statSync(certPath);\n\n      const now = new Date();\n\n      // cert is more than 30 days old, kill it with fire\n      if ((now - certStat.ctime) / certTtl > 30) {\n        this.log.info(\n          'SSL Certificate is more than 30 days old. Removing.'\n        );\n\n        del.sync([certPath], { force: true });\n\n        certExists = false;\n      }\n    }\n\n    if (!certExists) {\n      this.log.info('Generating SSL Certificate');\n\n      const attrs = [{ name: 'commonName', value: 'localhost' }];\n\n      const pems = createCertificate(attrs);\n\n      fs.writeFileSync(certPath, pems.private + pems.cert, {\n        encoding: 'utf8',\n      });\n    }\n\n    fakeCert = fs.readFileSync(certPath);\n  }\n\n```\nNotice the code const certPath = path.join(__dirname, '../ssl/server.pem'); - it has hardcoded server.pem file path, so there is no way how it could use the passed parameters of my custom .pem file. Or am I not understanding something, how could it work with those parameters of my own PEM file?\nAlso, you can see that it removes the generated PEM file if it is more than 24 hours old.\n. @evilebottnawi - so sorry, but when I pass the arguments as you show, it still generates the certificate.\nI am generating the key, crt and ca.pem according to this doc:\nhttps://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309\nIf I update the SSL parameter file paths to something non-existing, it doesn't complain about that either, so that gives a hint it won't even try to locate those files.\nCan you confirm that when you run it yourself with those parameters, it indeed reads from those files?. Oh, @evilebottnawi - since that all is linked through the Rails \"webpacker\" gem, I think that is the issue. I managed to put the key/cert/ca into the webpacker.yml file, and it took the certificates, and that part is working fine.\nIt looks like the ./bin/webpack-dev-server is actually not passing the correct command line arguments to the real webpack-dev-server NPM package.\nJust now the Rails app \"webpacker\" part doesn't work properly, but it's not your issue.\nThank you so much for your time helping find where the issue is.\nI really appreciate that.. I have rails/webpacker v4.0.2.\nBasically, when I set the correct keys in webpacker.yml, and actually see that SSL certificate is ok, then there is an issue with the Rails - it doesn't find the \"compiled\" .js files.\nThe Rails log then shows:\n```\n2019-03-12 15:09:47 +0200: Rack app error handling request { GET /packs/react-95c59a319e0a6aa1a98d.js }\n\n```\nInterestingly, when the SSL certificate is generated by webpack-dev-server, then everything works, it finds the compiled .js files. It's just when SSL certificate is properly generated, then it doesn't. \ud83e\udd14 \nFound an existing issue here: https://github.com/rails/webpacker/issues/1758\nBut that is not your area, right?. ",
    "mistic": "@evilebottnawi @jshado1 thanks for the suggestions. I tried to make the logic more clear and simple.. @evilebottnawi I think you can merge this \ud83d\ude04 . @u9520107 Just a simple NIT here, I think the code could be more readable in the following way, but feel free to not apply the changes!\n```\nfunction runPortFinder(tryCount, defaultPort, cb) {\n  portfinder.basePort = defaultPort;\n  tryCount += 1;\n  portfinder.getPort((err, port) => {\n    cb(err, port);\n  });\n}\nfunction findPort(server, defaultPort, defaultPortRetry, fn) {\n  let tryCount = 0;\nserver.listeningApp.on('error', (err) => {\n    if (err && err.code !== 'EADDRINUSE') {\n      throw err;\n    }\nif (tryCount >= defaultPortRetry) {\n  fn(err);\n  return;\n}\n\nrunPortFinder(tryCount, defaultPort, fn);\n\n});\nrunPortFinder(tryCount, defaultPort, fn);\n}\n```. ",
    "rarkins": "@hiroppy please also add \"separateMinorPatch\": true to your config if you wish for Renovate to separate patch from minor updates.. ",
    "Aghassi": "As an added note, will respecting the spdy option in the CLI also reflect if I am using this programmatically by importing webpack-dev-server?. ",
    "ujenjt": "Hey, we also use v2 branch, so it would be great to have this fixes in next v2 versions.. > @ujenjt can you test this PR manually?\nSure. I can test this PR with several projects which use webpack-dev-server v2 and check if it works. What kind of test do you want me to do? Any advice how to test better?\n. Just tested git://github.com/Volune/webpack-dev-server.git#v2-dependencies version with my webpack config - it works ok for me both with node v10.15.3 and v8.11.3.. ",
    "noelebrun": "Hey,\nI'm not really able to reproduce the issue, as I was saying in the previous discussion, I think the issue has already been fixed.. ",
    "esomkin": "@evilebottnawi Here is reproducible demo https://github.com/esomkin/repo.\nTo check this, please start web server with host name = repo and root folder = repo/public.. ",
    "orange4glace": "@evilebottnawi Thanks for the comment. It seems time to code XD. @evilebottnawi I'm just trying to find where the compilation start point is, but I can't find it. The only code line I found compiler.run() is here and it seems no actual effect since after delete that function, WDS still works. Could you tell me where the actual webpack compile starts?. @evilebottnawi I mean, I'm finding the start point of  the compilation (or at least which code line of WDS or WDM fires webpack to start compile). The only code line I found which runs compiler.run() is this one. But when I have tested WDS without that code line (by clearing body of rebuild()), WDS still works normally so it looks rebuild() function is not the starting point of it.\njavascript\n  function rebuild() {\n    // if (context.state) {\n    //   context.state = false;\n    //   context.compiler.run((err) => {\n    //     if (err) {\n    //       log.error(err.stack || err);\n    //       if (err.details) {\n    //         log.error(err.details);\n    //       }\n    //     }\n    //   });\n    // } else {\n    //   context.forceRebuild = true;\n    // }\n  }\n```shell\n$ npm start\n\nwebpack-dev-server-test@1.0.0 start D:\\source\\webpack-dev-server-test\nwebpack-dev-server --config ./webpack.config.js --mode development --content-base ./dist\n\ni \uff62wds\uff63: Project is running at http://localhost:8081/\ni \uff62wds\uff63: webpack output is served from /\ni \uff62wds\uff63: Content not from webpack is served from D:\\source\\webpack-dev-server-test\\dist\ni \uff62wdm\uff63: Hash: bc0f3ec509df1dd83567\nVersion: webpack 4.29.6\nTime: 337ms\nBuilt at: 2019-03-16 20:48:54\nAsset     Size  Chunks             Chunk Names\n a.js  347 KiB       a  [emitted]  a\nEntrypoint a = a.js\n[0] multi (webpack)-dev-server/client?http://localhost:8081 ./a.js 40 bytes {a} [built]\n[./a.js] 21 bytes {a} [built]\n.....\ni \uff62wdm\uff63: Compiled successfully.\n// Still works!\n```. ",
    "Loonride": "I have removed the spdy option and instead just have the http2 option. I also made a test which depends on Node's experimental http2 module, since the only way to test an HTTP/2 server is to make an HTTP/2 request. I thought this was a reasonable choice since it will only force testers to have a Node version high enough for that, not normal users. If you think that is a problem, let me know. My alternative solution would be to dig into puppeteer and find the protocol of the request, similar to the way Chrome DevTools can show the protocol of a request.. Sorry, mistake from copying HTTPS tests over as a template. I will remove it.. @hiroppy I've realized this is more difficult than it seems. Supertest sends an HTTP/1.1 request in the test, so the spdy server communicates back with 1.1. I confirmed in the browser that the protocol is h2 and spdy works. The two options I think are: use Node's built-in http2 module for the test and try to communicate with the server using it to confirm HTTP/2 works, or use puppeteer to test with a browser that supports HTTP/2 and confirm that the h2 protocol is used. What do you think?. @evilebottnawi I considered http2 an alias for spdy because http2 needs spdy to work at the moment. As an alternative, I could do this, to allow for future separation of http2 from spdy: \nWhen ONLY http2 is enabled, the spdy server will be run (since this is the only way to run HTTP/2 on express at the moment), and these protocols will be provided to spdy:\njs\noptions.https.spdy = {\n  protocols: ['h2', 'http/1.1'],\n};\nThen the exact same thing will happen as above if http2 is enabled and spdy is enabled.\nIf ONLY spdy is enabled, the options.https.spdy will not be set unless the user specifies it themselves. If the user does not specify it in their options, it will go to the default spdy value as specified here:\njs\nprotocols: ['h2','spdy/3.1', 'spdy/3', 'spdy/2','http/1.1', 'http/1.0']\nDo you like this alternative better?. Ok, that makes sense. Should user still be allowed to provide spdy options like this?:\njs\n{\n  contentBase: './dist',\n  watchContentBase: true,\n  https: {\n    spdy: {\n      protocols: ['h2', 'http/1.1' ...]\n    }\n  },\n  http2: true\n}. ",
    "xianshannan": "Here is what i did with webpack dev server config:\n```js\n// \u5927\u90e8\u5206\u91c7\u7528 create-react-app \u914d\u7f6e\n'use strict';\nconst createMockMiddleware = require('restful-mock-middleware');\nconst createProxyMiddleware = require('webpack-dev-server-proxy-middlware');\nconst composeMiddlewares = require('webpack-launcher-utils/expressMiddlewareCompose');\nconst webpackConfig = require('./webpack.config');\nconst webpackLauncherConfig = require('../config/webpackLauncher.config');\nconst { host, https, appPublic, buildGzip } = webpackLauncherConfig;\nmodule.exports = {\n  // \u5f53\u4f7f\u7528 HTML5 History API \u65f6\uff0c\u4efb\u610f\u7684 404 \u54cd\u5e94\u90fd\u53ef\u80fd\u9700\u8981\u88ab\u66ff\u4ee3\u4e3a index.html\u3002\u901a\u8fc7\u4f20\u5165\u4ee5\u4e0b\u542f\u7528\uff1a\n  historyApiFallback: Object.assign({\n    // \u5f53\u8def\u5f84\u4e2d\u4f7f\u7528\u70b9(dot)\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4f7f\u7528 disableDotRule\n    // \u5982 http://localhost/babel.config\uff0c\u5c31\u5305\u542b (.)\n    disableDotRule: true,\n  }),\n  // \u8bbe\u7f6e\u4e3a true \u65f6\uff0c\u6b64\u9009\u9879\u7ed5\u8fc7\u4e3b\u673a\u68c0\u67e5\u3002\n  // \u4e0d\u68c0\u67e5\u4e3b\u673a\u7684\u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u5bb9\u6613\u53d7\u5230 DNS \u91cd\u65b0\u8fde\u63a5\u653b\u51fb\u3002\n  // \u9ed8\u8ba4\u5f00\u542f\n  disableHostCheck: true,\n  // \u5f00\u542fgzip\u529f\u80fd\n  compress: true,\n  // \u5173\u95edWebpackDevServer\u7e41\u7410\u7684\u8f93\u51fa\u4fe1\u606f\n  // \u4f46\u8b66\u544a\u548c\u9519\u8bef\u4fe1\u606f\u4e0d\u4f1a\u88ab\u5173\u95ed\n  clientLogLevel: 'none',\n  // \u544a\u8bc9\u670d\u52a1\u5668\u4ece\u54ea\u4e2a\u76ee\u5f55\u4e2d\u63d0\u4f9b\u5185\u5bb9\u3002\u53ea\u6709\u5728\u4f60\u60f3\u8981\u63d0\u4f9b\u9759\u6001\u6587\u4ef6\u65f6\u624d\u9700\u8981\u3002\n  // devServer.publicPath \u5c06\u7528\u4e8e\u786e\u5b9a\u5e94\u8be5\u4ece\u54ea\u91cc\u63d0\u4f9b bundle\uff0c\u5e76\u4e14\u6b64\u9009\u9879\u4f18\u5148\u3002\n  contentBase: appPublic,\n  // \u544a\u77e5\u670d\u52a1\u5668\uff0c\u89c2\u5bdf devServer.contentBase \u4e0b\u7684\u6587\u4ef6\u3002\u6587\u4ef6\u4fee\u6539\u540e\uff0c\u4f1a\u89e6\u53d1\u4e00\u6b21\u5b8c\u6574\u7684\u9875\u9762\u91cd\u8f7d\u3002\n  watchContentBase: true,\n  // \u5f53\u51fa\u73b0\u7f16\u8bd1\u5668\u9519\u8bef\u6216\u8b66\u544a\u65f6\uff0c\u5728\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u5168\u5c4f\u8986\u76d6\u5c42\u3002\n  // \u4f7f\u7528 create-react-app wwebpackHotDevClient \u65f6\uff0c\n  // \u8fd9\u4e2a\u8986\u76d6\u6210\u4f1a\u88ab\u66ff\u6362\u6210 create-react-app \u81ea\u5b9a\u4e49\u7684\n  overlay: true,\n  //\u5f00\u542f\u70ed\u66ff\u6362\u529f\u80fd\n  hot: true,\n  //\u8ddf webpack.config \u4e2d publicPath \u76f8\u7b49\uff0cbundle.js \u7b49\u5185\u5b58\u6587\u4ef6\u8f93\u51fa\u76ee\u5f55\n  publicPath: webpackConfig.output.publicPath,\n  // \u4f1a\u5173\u95edWebpackDevServer\u7f16\u8bd1\u540e\u6240\u6709\u7684\u4fe1\u606f\uff08\u5305\u62ec\u9519\u8bef\u8b66\u544a\u4fe1\u606f\uff09\n  // \u540e\u7eed\u901a\u8fc7 compiler.plugin('done',null) \u81ea\u5b9a\u4e49\u4fe1\u606f\n  quiet: true,\n  // watch\u8bbe\u7f6e\n  watchOptions: {\n    ignored: [/node_modules/],\n  },\n  // \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cdev-server \u901a\u8fc7 HTTP \u63d0\u4f9b\u670d\u52a1\u3002\u4e5f\u53ef\u4ee5\u9009\u62e9\u5e26\u6709 HTTPS \u7684 HTTP/2 \u63d0\u4f9b\u670d\u52a1\uff1a\n  https,\n  host: host || 'localhost',\n  // \u7981\u6b62\u4f7f\u7528 webpack-dev-server\n  // \u4f7f\u7528\u72ec\u7acb\u7684 proxy\uff08\u4ece webpack-dev-server \u4e2d\u62bd\u79bb\u7684\uff09\n  // \u7528\u6cd5\u4e0d\u53d8\n  proxy: undefined,\n  /*\n   * \u5728\u670d\u52a1\u5185\u90e8\u7684\u6240\u6709\u5176\u4ed6\u4e2d\u95f4\u4ef6\u4e4b\u524d\uff0c \u63d0\u4f9b\u6267\u884c\u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6\u7684\u529f\u80fd\u3002\n   /\n  before(app, server) {\n    if (buildGzip) {\n      app.use(function(req, res, next) {\n        if (/.(js|css)$/.test(req.url) && !!~req.url.indexOf('dll/dll.')) {\n          // buildGzip \u5bf9 dll \u4e5f\u6709\u6548\n          res.header('Content-Encoding', 'gzip');\n        }\n        next();\n      });\n    }\n// \u7531\u4e8e body-parser \u4f1a\u622a\u53d6 body \u5185\u5bb9\uff0c\u6240\u4ee5 http-proxy-middleware \u5fc5\u987b\u5728 body-parser\uff08 restful-mock-middleware \u7528\u5230\uff09 \u4e4b\u524d\n// \u53ef\u4ee5\u770b\u8fd9\u4e2a issue https://github.com/chimurai/http-proxy-middleware/issues/40\napp.use(function(...args) {\n  // \u53ef\u52a8\u6001\u4fee\u6539 proxy \u914d\u7f6e\n  delete require.cache[require.resolve('webpack-launcher-utils/webpackLauncherConfig')];\n  const { proxy, useMockServer } = require('webpack-launcher-utils/webpackLauncherConfig');\n  const middlewares = [];\n\n  middlewares.push(createProxyMiddleware(proxy, server));\n\n  if (useMockServer) {\n    middlewares.push(createMockMiddleware());\n  }\n\n  composeMiddlewares(middlewares)(...args);\n});\n\n},\n};\n``. @evilebottnawi it's not standard to usemiddlewareinside amiddleware`?\nBut the separation logic is better managed and more convenient.\njs\nfunction createMockMiddleware() {\n  return function(req, res, next) {\n    if (fs.existsSync(mockConfigFile)) {\n      const uploadBodyParser = multer({ dest: uploadDest });\n      composeMiddlewares([\n        bodyParser.json(),\n        bodyParser.raw(),\n        bodyParser.text(),\n        bodyParser.urlencoded({ extended: true }),\n        uploadBodyParser.any(),\n        // mock should be used before body parsing\n        mockMiddleware,\n      ])(req, res, next);\n    } else {\n      next();\n    }\n  };\n}\n. ",
    "tannerlinsley": "I realize this is extremely involved, so I admire your patience should you choose to help me with this. React Static is no walk-in-the-park, but here we go!\n\ngit clone https://github.com/nozzle/react-static.git\nCheckout the v7 branch\nRun yarn\nRun yarn link\nRun yarn start to compile\nIn packages/react-static/templates/basic\nRun yarn\nRun yarn link react-static\nRun yarn start\nThe error is displayed\n\nGiven that this is an alpha branch, any number of things could go wrong, so if you hit a roadblock, let me know and I'll do my best to guide you to the issue.\nPoints of interest:\n- https://github.com/nozzle/react-static/tree/v7/packages/react-static/src/static/webpack contains all of our webpack files. In this case, webpack.dev.js is what is being used to compile.\n. Thanks.. This rabbit hole has led me through a few packages:\n- express\n- serve-static\n- send\n- mime\nIn the mime package, it appears they are not using a mime.types property name, but actually mime._types (https://github.com/broofa/node-mime/blob/master/Mime.js#L8)\nSo when webpack dev server calls express.static.mime.types['wasm'] = '...' it errors. I noticed a ref in the webpack dev server for a specific version of send. Do I need to lock to a specific version for the dev server to work right now?. So I looked for the mime package in my packages and found this:\nbash\n\u279c  react-static (v7) \u2714 yarn why mime\nyarn why v1.12.1\n[1/4] \ud83e\udd14  Why do we have the module \"mime\"...?\n[2/4] \ud83d\ude9a  Initialising dependency graph...\n[3/4] \ud83d\udd0d  Finding dependency...\n[4/4] \ud83d\udea1  Calculating file sizes...\n=> Found \"mime@2.4.0\"\ninfo Has been hoisted to \"mime\"\ninfo Reasons this module exists\n   - \"workspace-aggregator-13bb6450-ff97-4a1c-a3c5-091240e53182\" depends on it\n   - Hoisted from \"_project_#react-static#url-loader#mime\"\n   - Hoisted from \"_project_#react-static#webpack-dev-server#webpack-dev-middleware#mime\"\ninfo Disk size without dependencies: \"144KB\"\ninfo Disk size with unique dependencies: \"144KB\"\ninfo Disk size with transitive dependencies: \"144KB\"\ninfo Number of shared dependencies: 0\n=> Found \"send#mime@1.4.1\"\ninfo This module exists because \"_project_#react-static#webpack-dev-server#express#send\" depends on it.\ninfo Disk size without dependencies: \"72KB\"\ninfo Disk size with unique dependencies: \"72KB\"\ninfo Disk size with transitive dependencies: \"72KB\"\ninfo Number of shared dependencies: 0\n\u2728  Done in 0.91s.\nIt appears that the latest webpack-dev-middleware and url-loader packages are relying on the latest version of mime, but webpack-dev-server is relying on the old version. Looks like webpack-dev-server is trying to use the latest version of mime (which has no mime.types property, but instead has been changed to mime._types).\nThis produces the OP error.. I've also updated the OP description with the stack trace and a link to the dev-server line that is erroring.. Yeah, if webpack-dev-middleware is relying on mime@2.x, then we either need to update express.static.mime.types['wasm'] = '...' to express.static.mime._types['wasm'] = '...' or preferably just remove it (since mime clearly wants _types to be private, there is likely a better way to do this, or its probably not needed anymore). After testing this in an isolated reproduction, it appears to be something to do with React-Static's configuration. Will reopen if needed. Thanks for being my rubber-duck!. I think there is likely more afoot for this issues, and likely a better solution. Closing this for now.. ",
    "dtkahl": "Maybe this is not even a bug, but rather a mistake in the docs like the issue #1312 says:\n\nIt looks like if public is not specified it reverts to http://localhost:8080.\nAt least the webpack generates / WEBPACK VAR INJECTION /}.call(exports, \"?http://localhost:8080\")) for the webpack-dev-server client.\nI also could not find any relevant traces of window.location in the source code.\n\nThe issue #1312 has been close because it did not used the issue template. My issue does.. ",
    "elliottsj": "Getting <script> elements is now behind a conditional to prevent web workers from accessing document (which would throw an error)\n. Still doing window.postMessage here for compatibility with any 3rd-party script that still listens for \"webpackHotUpdate\" events on the window.\n. ",
    "Lekensteyn": "Since you are clearing the interval immediately on execution, why not just:\nrecTimeout = setTimeout(newConnection, 2000, handlers);\nSince newConnection is only called once, the clearInterval is not needed. Same for the other thing in live.js.\n. ",
    "jeffchan": "Just wanted to flag that this breaks certain usage that relied on the previous /socket.io path. They now have to be /sockjs-node. Should this have been a major version bump, according to semver?\n. ",
    "hxuanhung": "You should not add !=null here because it's not consistant with the current code style.\nShould keep if(options.port). You don't need to change this, if(argv[\"open\"]) included undefined check. How about if(options.port || options.port === 0) ?. I didn't get it at first. It's ok for me to keep it like that. . ",
    "Phoenixmatrix": "It makes sense to me that if you're doing a truthy check, you do it as per your code style...but in this case, you specifically want \"if not null and not undefined\", for which the most idiomatic way is != null.\nWhy obfuscate the code? This isn't about stylistic (I'm all about style consistency), it's essentially about correctness in this very particular scenario.. ",
    "TroyHisted": "It's not entirely obvious but there are three potential values that could come from argv[\"open\"]. It could be undefined (meaning the user did not specify the --open option), it could be an empty string (meaning the user added the --open option without a file path), or it could be a string containing a path (meaning the user added the --open option with a file path). The intent here is to only capture the value when it's a blank string or a string containing characters. That's not entirely obvious so I've changed it to the truthy check or a check for a blank string. As I'm thinking about this I could use a typeof string check instead. I can switch it over if you'd prefer.. I added it when I switched it from a boolean to a string, but now that it's back to a boolean we don't need that check.\nBut that did make me think about the same check on the open-page arg, so I changed it around so that I don't need that check anymore by making the open-page argument require a value. I think it's much cleaner now.. Sounds good. I'll update.. ",
    "jhen0409": "I think the correct check should be this:\njs\ntypeof self !== \"undefined\" &&\n(typeof WorkerGlobalScope === \"undefined\" ||\n!(self instanceof self.WorkerGlobalScope))\nUse instanceof only if it not undefined. I changed it. :). Just passing eslint. Anyway I moved it to line 1.. ",
    "trygveaa": "Shouldn't it allow IPv6-adresses as well?. ",
    "cwalv": "I don't know of any browser that requires it; when I tested w/ Chrome, it wasn't required.  I only included it based on this comment.. ",
    "BenoitZugmeyer": "You are right, but it's the stats property value that shouldn't be mutated.\n```js\nvar stats = {};\nvar a = { stats: stats };\nfunction doit (o) {\n  o.stats = Object.assign({}, a.stats, { color: '0' });\n}\ndoit(a);\nstats;\n// {}\n``\n. Sadly I cannot write a good test case because when runningtest/cli.test.js, the packagesupports-colordetect that it doesn't run in a tty, so it returnsfalse` (which webpack sees as valid).. ",
    "mikegreiling": "This will handle both functions which return entry objects and functions which return a Promise due to the behavior of Promise.resolve.  It is the same technique used in the DynamicEntryPlugin itself (link).. I've fixed this test also.  By using assert and not assert.equal, these tests were not doing anything other than ensuring webpackOptions.entry.length was not falsey.. "
}