{
    "yeswalrus": "It's under development, as is the rest of our API, but it's ready for developers to begin using it.  We've hosted this on GitHub as a way to better keep up with the very active javascript community, and feedback or pull requests are welcome if you make any fixes or improvements you'd like to contribute.\n. OK - should be ready for review.  Tests & documentation are all in.\n. OK! Build is working.  Thoughts?\n. Yes, yes, we should.  And now we do.\n. poke plugins have been merged - ETA?\n. It's under development, as is the rest of our API, but it's ready for developers to begin using it.  We've hosted this on GitHub as a way to better keep up with the very active javascript community, and feedback or pull requests are welcome if you make any fixes or improvements you'd like to contribute.\n. OK - should be ready for review.  Tests & documentation are all in.\n. OK! Build is working.  Thoughts?\n. Yes, yes, we should.  And now we do.\n. poke plugins have been merged - ETA?\n. ",
    "joshbuddy": "As well, we're hosting copies of this library at https://leapmotion.com/leap.js and https://leapmotion.com/leap.min.js (so you can easily include it). Happy for any pull-requests/issues.\n. Wait, you're using OS/2 Warp to code? Thats pretty bad ass.\n. This seems like a strange idea to me. Wouldn't this cause leap.js to stop working unless you're viewing a website being served locally?\n. I've made host an option you can pass into connection and controller. I think should solve your problem, let me know!\n. This looks amazing! Thank you!\n. Can you rebase this so it merges cleanly please?\n. I would say, add onEdgeEnter and onEdgeLeave to the BoxedCursor class in ui.js. Go ahead and regenerate a new leap.js and the minified version too, and, include it with this release.\n. Wait .. this relies on code from the gestures branch, eh? I'm gonna have to merge that into master before this will work.\n. If you want to rebase and get this ready, I think I'm ready to accept this.\n. Can you make this change in lib/frame.js instead?\n. Wow! I had no idea! TIL pull requests are for learning.\n. As an aside .. I think it would make more sense to make using the animation loop an option you pass into Leap.loop. What would you think of that?\n. This is way out of date .. closing.\n. I have tool registration working in a local branch. Will add tests and push up tonight. \n. Hey, I've fallen way behind on this issue. I'll be re-implementing the cursor and documenting it this time. :)\n. Fixed in 1d55613c4823df1493e0c4b694571d3f69100362\nPlease let me know if it looks good to you.\n. I haven't finished the nodejs support. Ultimately, it's not going to be via the compiled javascript at the root of the project, but, through a normal require. I've gotten it working, I just need to get the tests running from within node, and, the selection of the connection working from both within node and the browser.\nI also don't want to change the payload from the browser's perspective to support node, which is a blocking issue before I can get this released. Happy to take any patched in the meantime if you want to work out these details.\n. That's cool. Lemme try to get what I have working into a pull request. I'd be happy to have you review it and give it a go.\n. Take a look here @joyrexus ... how's it look? https://github.com/leapmotion/leapjs/pull/29\nI included a rudimentary example at examples/node.js\n. Try using the latest version in git ... here is some sample code, tell me if this is working for you:\n``` javascript\nvar Leap = require('leapjs').Leap;\nvar controller = new Leap.Controller()\ncontroller.loop(function(frame) {\n  // stuff\n});\n```\n. I'm so sorry about this issue, pure typo on my part. Should be fixed in 471fbf74cf81ebc9991d7547489a9efd6278fb39\n. Should be fixed in 3f68ef7ac4d75ec8e4a39be456eb3277f5ee1bf8, wanna take a look?\n. Nope, just findin' my bugs. Sorry about that. I've added tests around this and fixed it in 31164c4906906a5b9dc3a470b07526d66944c1f1. Hopefully this is the last issue here, but, happy to fix anything else if you find.\n. fwiw, @cabbibo is an awesome human being. On another note ... this is still coming, just been a bit delayed on getting this work done :)\n. Makes sense to me, thank you!\n. The underlying problem has been fixed, this should now be working correctly, do you mind confirming?\n. This looks really good, and it's a great idea. Do you want to try writing a test for this new behaviour as well?\n. Aw snap, nice work! Sorry about that :) I should be reading more carefully.\n. +1, hooking it up now\n. https://travis-ci.org/leapmotion/leapjs\n. The gesture array will only exist if gestures have been enabled. This requires at least version 0.7.5 of the sdk. I'm open to suggestions though .. do you feel as though the gestures array should exist regardless of gesture state?\n. This should now be operational in 0.7.5 of the sdk.\n. Hmm .. I'm coming back to this now. It doesn't seem practical to open a port on a user's machine just to serve up a policy file. Doesn't it sound strange to you to have this other low-port server opened up for you? I just wanna hear some comments .... maybe it's cool? I'm just not sure :(\n@cedricpinson that's an interesting thought too, disabling the websocket code. At this point, I'm tempted to just remove flash support altogether. At this point, ie10 is getting websocket support .. I mean really, what's the point? Any comments?\n. Whoa .. you're at TVO? niiice. I miss my precious Ontario.\nOn an unrelated note, I've put up this branch .. \nhttps://github.com/leapmotion/leapjs/tree/remove-websocket-flash\n. Merged the branch .. \n. This things will start to be filtered in the core software itself. :)\n. Hey @likethemammal ... I was just thinking about this issue. What would you expect it to do? As well .. can you try it out with the latest leap.js in master, I'm hoping its more tolerant ..\n. Wow .. so my original code was certainly the best. That's what I get for believing @aghull.\n. Can you give me more details on this one? I'd love to re-create it.\n. This is a pretty deep issue. I have a fix in mind, but, it will take me a bit of time to implement!\n. lolerskates, thanks for fixing my spelling!\n. Are you still having this issue? I agree with what you're saying .. just want to check if the latest leapjs is still exhibiting this problem.\n. Btw, there is an option inNode that you can pass in. Give that a go.\n. Can you verify that this problem is fixed here? Thanks!\nhttps://github.com/leapmotion/leapjs/pull/92\n. No, this is awesome, thank you!\n. Thank you!\n. Thank you!\n. Yes, that is the correct api, sorry about the confusion. The docs should be updated ... where did you see a reference to .x .y and .z?\n. I re-added the serve command! Sorry about that ... (see: df1774fc240ea8acd9d59b4f61784f5c30fd29f0)\nAs @theo-armour points out too, feel free to take a look at the examples over on js.leapmotion.com too .. you can grab this repo and run them from here: https://github.com/leapmotion/js.leapmotion.com\n. Thanks! Looks good.\n. Looks awesome, thank you for the clarification and fix!\n. Do you want to blow this away or merge them together?\nhttps://github.com/leapmotion/leapjs/blob/master/lib/pipeline.js\n. As well, we're hosting copies of this library at https://leapmotion.com/leap.js and https://leapmotion.com/leap.min.js (so you can easily include it). Happy for any pull-requests/issues.\n. Wait, you're using OS/2 Warp to code? Thats pretty bad ass.\n. This seems like a strange idea to me. Wouldn't this cause leap.js to stop working unless you're viewing a website being served locally?\n. I've made host an option you can pass into connection and controller. I think should solve your problem, let me know!\n. This looks amazing! Thank you!\n. Can you rebase this so it merges cleanly please?\n. I would say, add onEdgeEnter and onEdgeLeave to the BoxedCursor class in ui.js. Go ahead and regenerate a new leap.js and the minified version too, and, include it with this release.\n. Wait .. this relies on code from the gestures branch, eh? I'm gonna have to merge that into master before this will work.\n. If you want to rebase and get this ready, I think I'm ready to accept this.\n. Can you make this change in lib/frame.js instead?\n. Wow! I had no idea! TIL pull requests are for learning.\n. As an aside .. I think it would make more sense to make using the animation loop an option you pass into Leap.loop. What would you think of that?\n. This is way out of date .. closing.\n. I have tool registration working in a local branch. Will add tests and push up tonight. \n. Hey, I've fallen way behind on this issue. I'll be re-implementing the cursor and documenting it this time. :)\n. Fixed in 1d55613c4823df1493e0c4b694571d3f69100362\nPlease let me know if it looks good to you.\n. I haven't finished the nodejs support. Ultimately, it's not going to be via the compiled javascript at the root of the project, but, through a normal require. I've gotten it working, I just need to get the tests running from within node, and, the selection of the connection working from both within node and the browser.\nI also don't want to change the payload from the browser's perspective to support node, which is a blocking issue before I can get this released. Happy to take any patched in the meantime if you want to work out these details.\n. That's cool. Lemme try to get what I have working into a pull request. I'd be happy to have you review it and give it a go.\n. Take a look here @joyrexus ... how's it look? https://github.com/leapmotion/leapjs/pull/29\nI included a rudimentary example at examples/node.js\n. Try using the latest version in git ... here is some sample code, tell me if this is working for you:\n``` javascript\nvar Leap = require('leapjs').Leap;\nvar controller = new Leap.Controller()\ncontroller.loop(function(frame) {\n  // stuff\n});\n```\n. I'm so sorry about this issue, pure typo on my part. Should be fixed in 471fbf74cf81ebc9991d7547489a9efd6278fb39\n. Should be fixed in 3f68ef7ac4d75ec8e4a39be456eb3277f5ee1bf8, wanna take a look?\n. Nope, just findin' my bugs. Sorry about that. I've added tests around this and fixed it in 31164c4906906a5b9dc3a470b07526d66944c1f1. Hopefully this is the last issue here, but, happy to fix anything else if you find.\n. fwiw, @cabbibo is an awesome human being. On another note ... this is still coming, just been a bit delayed on getting this work done :)\n. Makes sense to me, thank you!\n. The underlying problem has been fixed, this should now be working correctly, do you mind confirming?\n. This looks really good, and it's a great idea. Do you want to try writing a test for this new behaviour as well?\n. Aw snap, nice work! Sorry about that :) I should be reading more carefully.\n. +1, hooking it up now\n. https://travis-ci.org/leapmotion/leapjs\n. The gesture array will only exist if gestures have been enabled. This requires at least version 0.7.5 of the sdk. I'm open to suggestions though .. do you feel as though the gestures array should exist regardless of gesture state?\n. This should now be operational in 0.7.5 of the sdk.\n. Hmm .. I'm coming back to this now. It doesn't seem practical to open a port on a user's machine just to serve up a policy file. Doesn't it sound strange to you to have this other low-port server opened up for you? I just wanna hear some comments .... maybe it's cool? I'm just not sure :(\n@cedricpinson that's an interesting thought too, disabling the websocket code. At this point, I'm tempted to just remove flash support altogether. At this point, ie10 is getting websocket support .. I mean really, what's the point? Any comments?\n. Whoa .. you're at TVO? niiice. I miss my precious Ontario.\nOn an unrelated note, I've put up this branch .. \nhttps://github.com/leapmotion/leapjs/tree/remove-websocket-flash\n. Merged the branch .. \n. This things will start to be filtered in the core software itself. :)\n. Hey @likethemammal ... I was just thinking about this issue. What would you expect it to do? As well .. can you try it out with the latest leap.js in master, I'm hoping its more tolerant ..\n. Wow .. so my original code was certainly the best. That's what I get for believing @aghull.\n. Can you give me more details on this one? I'd love to re-create it.\n. This is a pretty deep issue. I have a fix in mind, but, it will take me a bit of time to implement!\n. lolerskates, thanks for fixing my spelling!\n. Are you still having this issue? I agree with what you're saying .. just want to check if the latest leapjs is still exhibiting this problem.\n. Btw, there is an option inNode that you can pass in. Give that a go.\n. Can you verify that this problem is fixed here? Thanks!\nhttps://github.com/leapmotion/leapjs/pull/92\n. No, this is awesome, thank you!\n. Thank you!\n. Thank you!\n. Yes, that is the correct api, sorry about the confusion. The docs should be updated ... where did you see a reference to .x .y and .z?\n. I re-added the serve command! Sorry about that ... (see: df1774fc240ea8acd9d59b4f61784f5c30fd29f0)\nAs @theo-armour points out too, feel free to take a look at the examples over on js.leapmotion.com too .. you can grab this repo and run them from here: https://github.com/leapmotion/js.leapmotion.com\n. Thanks! Looks good.\n. Looks awesome, thank you for the clarification and fix!\n. Do you want to blow this away or merge them together?\nhttps://github.com/leapmotion/leapjs/blob/master/lib/pipeline.js\n. ",
    "joshknutson": "as opposed to having the url point to 127.0.0.1?\nThis way my server name locally can be localhost or a server so other people can watch my server rotate a cube\n. as opposed to having the url point to 127.0.0.1?\nThis way my server name locally can be localhost or a server so other people can watch my server rotate a cube\n. ",
    "derryl": "I just pulled the repo, and the visualizer example isn't working for me.\nSeems like some objects have been renamed, for instance hand.rotation is now hand._rotation, and the xBasis property \u2013 used to pull some rotational values \u2013 is now gone. I was gonna debug further, but it seems like this example just needs to be updated, based on whatever changes have been made to the API\n. I just pulled the repo, and the visualizer example isn't working for me.\nSeems like some objects have been renamed, for instance hand.rotation is now hand._rotation, and the xBasis property \u2013 used to pull some rotational values \u2013 is now gone. I was gonna debug further, but it seems like this example just needs to be updated, based on whatever changes have been made to the API\n. ",
    "RobbieOnGithub": "Sorry about that!  I'm fairly new to the collaborative process on github, but I'm a fast learner.  I just caught up to your master to remove conflicts.  I believe you can now get a clean pull.  Please note - I left my onEdgeEnter and onEdgeLeave (for BoxedCursor) in the leap.js file, but I'm happy to remove it if it conflicts with what you want.  I also didn't rake build a new minified file for leap.js as I wasn't sure if you wanted to keep this or not.\nI'm happy to update anything to make the process smoother.  Just let me know :)\n. Ahh...Yes- I believe the onEdgeEnter/onEdgeLeave does indeed rely on the gestures branch.  Sorry for making things confusing.  If it's not ready for the master branch it can be left out for now (along with my navigation drawer example).  What I've committed for the time being now leaves out 'onEdgeEnter/onEdgeLeave', but does include the updated earthRotation example which does not rely on the gestures branch code.\nI wont be with my leap until tomorrow morning, but if you indeed want to merge the gestures branch to your master and include the navigation drawer example I'd be happy to wait for your green light.\n. I just caught up to your directory.  The earth example should be a clean update for you.  Let me know if it's not and I'd be happy to resolve any issues.\nI did not add the onEdgeEnter/onEdgeLeave events to avoid confusion and removed my navigation drawer example.  I'm happy to add it back in if you'd like and add the events to the main lib or the ui.js.\nI also noticed in your latest leap.min.js it ends with '>>>>>>> remove screen' - which looks like a conflict from a previous pull on your end.  Anyways - thought it was worth mentioning.\n. Sorry about that!  I'm fairly new to the collaborative process on github, but I'm a fast learner.  I just caught up to your master to remove conflicts.  I believe you can now get a clean pull.  Please note - I left my onEdgeEnter and onEdgeLeave (for BoxedCursor) in the leap.js file, but I'm happy to remove it if it conflicts with what you want.  I also didn't rake build a new minified file for leap.js as I wasn't sure if you wanted to keep this or not.\nI'm happy to update anything to make the process smoother.  Just let me know :)\n. Ahh...Yes- I believe the onEdgeEnter/onEdgeLeave does indeed rely on the gestures branch.  Sorry for making things confusing.  If it's not ready for the master branch it can be left out for now (along with my navigation drawer example).  What I've committed for the time being now leaves out 'onEdgeEnter/onEdgeLeave', but does include the updated earthRotation example which does not rely on the gestures branch code.\nI wont be with my leap until tomorrow morning, but if you indeed want to merge the gestures branch to your master and include the navigation drawer example I'd be happy to wait for your green light.\n. I just caught up to your directory.  The earth example should be a clean update for you.  Let me know if it's not and I'd be happy to resolve any issues.\nI did not add the onEdgeEnter/onEdgeLeave events to avoid confusion and removed my navigation drawer example.  I'm happy to add it back in if you'd like and add the events to the main lib or the ui.js.\nI also noticed in your latest leap.min.js it ends with '>>>>>>> remove screen' - which looks like a conflict from a previous pull on your end.  Anyways - thought it was worth mentioning.\n. ",
    "barbagallo": "Whoops! Sorry about that, you can ignore the first change in leap.js.\n. Ah, I think it has to do with the best practice that the Chrome team recommends: http://blog.chromium.org/2012/11/build-smoother-web-apps-with-chrome.html\n\nFinally, don\u2019t forget that the best practice for dealing with animations is to use the requestAnimationFrame API, which guarantees that Chromium will call back your animation code in sync with the display refresh.\n. I don't think you need the Screen object, do you?\n\nGiven the context of the browser and the window object that's readily available.\n. Whoops! Sorry about that, you can ignore the first change in leap.js.\n. Ah, I think it has to do with the best practice that the Chrome team recommends: http://blog.chromium.org/2012/11/build-smoother-web-apps-with-chrome.html\n\nFinally, don\u2019t forget that the best practice for dealing with animations is to use the requestAnimationFrame API, which guarantees that Chromium will call back your animation code in sync with the display refresh.\n. I don't think you need the Screen object, do you?\n\nGiven the context of the browser and the window object that's readily available.\n. ",
    "alexhung": "Mmm... not sure what happened with the commit. Looks like a indentation or linebreak reformatting.\n. Closing so I can figure out what happen with all the diffs.\n. @deckar01 Ah, now I see what you mean. I should have changed the js file in the lib directory. Would be good if the README mentions that.\n. Mmm... not sure what happened with the commit. Looks like a indentation or linebreak reformatting.\n. Closing so I can figure out what happen with all the diffs.\n. @deckar01 Ah, now I see what you mean. I should have changed the js file in the lib directory. Would be good if the README mentions that.\n. ",
    "gsilk": "Hmmmmm... would the user then have to detect the right requestAnimationFrame() function to use, and then pass that in?\nI feel like the Chrome background problem is a really rare case -- I can't think of a single other instance like this.\nI suggest keeping it the way it is for now, for the sake of simplicity, and if further complications arise, then change it.\n. Hmmmmm... would the user then have to detect the right requestAnimationFrame() function to use, and then pass that in?\nI feel like the Chrome background problem is a really rare case -- I can't think of a single other instance like this.\nI suggest keeping it the way it is for now, for the sake of simplicity, and if further complications arise, then change it.\n. ",
    "deckar01": "It looks like the change was only made to leap.js and will be lost when the build script is runs next. Also rotationMatrix is similarly missing a return statement. My latest commit fixes both.\n. In #51 the Motion functions have been specialized in Frame and Hand separately, and documented accordingly.\nThere are examples of how to use these functions in the Motion Visualizer (https://developer.leapmotion.com/downloads/leap-motion/examples).\n. This should be closed. The suggested change has been made.\n. Thanks!\n. This pull now fixes #16, #35, #49. #21 still needs documentation.\nI need to update the build tests with the new vector and matrix classes before this passes Travis.\n. Alright! The tests now reflect the current state of the library and pass.\nNext: update the documentation.\n. The documentation now reflects Vector and Matrix usage.\nDocumented specialized Frame and Hand motion functions.\nThe changes have been rebuilt with jsdoc and pushed to the gh-pages branch of deckar01/leapjs-1.\n. I am making a branch to isolate the features for array access.\n. https://npmjs.org/doc/json.html#devDependencies\nIt is bundled in leap.js when we compile, but it is also used as a dep when using node.\nI don't see a reason to change it unless there is a use case where underscore is not being installed.\n. Ya, npm install leapjs does not install underscore.\nAnd the package has not been updated since v0.1.2.\nI will let you know when it has been updated.\n```\n\nnpm install leapjs\nnpm http GET https://registry.npmjs.org/leapjs\nnpm http 200 https://registry.npmjs.org/leapjs\nnpm http GET https://registry.npmjs.org/leapjs/-/leapjs-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/leapjs/-/leapjs-0.1.2.tgz\nnpm http GET https://registry.npmjs.org/ws\nnpm http 200 https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/ws/-/ws-0.4.25.tgz\nnpm http 200 https://registry.npmjs.org/ws/-/ws-0.4.25.tgz\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/options\nnpm http 200 https://registry.npmjs.org/options\nnpm http GET https://registry.npmjs.org/options/-/options-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/options/-/options-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\n```\n\nIn the mean time you can check out the node example. It requires you to run npm install in the leapjs repo to get the devDeps.\nThanks for the example!\n. Confirmed this fixes the issue. Thanks!\n. Awesome. Thank you!\n. It looks like the change was only made to leap.js and will be lost when the build script is runs next. Also rotationMatrix is similarly missing a return statement. My latest commit fixes both.\n. In #51 the Motion functions have been specialized in Frame and Hand separately, and documented accordingly.\nThere are examples of how to use these functions in the Motion Visualizer (https://developer.leapmotion.com/downloads/leap-motion/examples).\n. This should be closed. The suggested change has been made.\n. Thanks!\n. This pull now fixes #16, #35, #49. #21 still needs documentation.\nI need to update the build tests with the new vector and matrix classes before this passes Travis.\n. Alright! The tests now reflect the current state of the library and pass.\nNext: update the documentation.\n. The documentation now reflects Vector and Matrix usage.\nDocumented specialized Frame and Hand motion functions.\nThe changes have been rebuilt with jsdoc and pushed to the gh-pages branch of deckar01/leapjs-1.\n. I am making a branch to isolate the features for array access.\n. https://npmjs.org/doc/json.html#devDependencies\nIt is bundled in leap.js when we compile, but it is also used as a dep when using node.\nI don't see a reason to change it unless there is a use case where underscore is not being installed.\n. Ya, npm install leapjs does not install underscore.\nAnd the package has not been updated since v0.1.2.\nI will let you know when it has been updated.\n```\n\nnpm install leapjs\nnpm http GET https://registry.npmjs.org/leapjs\nnpm http 200 https://registry.npmjs.org/leapjs\nnpm http GET https://registry.npmjs.org/leapjs/-/leapjs-0.1.2.tgz\nnpm http 200 https://registry.npmjs.org/leapjs/-/leapjs-0.1.2.tgz\nnpm http GET https://registry.npmjs.org/ws\nnpm http 200 https://registry.npmjs.org/ws\nnpm http GET https://registry.npmjs.org/ws/-/ws-0.4.25.tgz\nnpm http 200 https://registry.npmjs.org/ws/-/ws-0.4.25.tgz\nnpm http GET https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/options\nnpm http 200 https://registry.npmjs.org/options\nnpm http GET https://registry.npmjs.org/options/-/options-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor\nnpm http GET https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/commander\nnpm http GET https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\nnpm http 200 https://registry.npmjs.org/options/-/options-0.0.5.tgz\nnpm http 200 https://registry.npmjs.org/tinycolor/-/tinycolor-0.0.1.tgz\nnpm http 200 https://registry.npmjs.org/commander/-/commander-0.6.1.tgz\n```\n\nIn the mean time you can check out the node example. It requires you to run npm install in the leapjs repo to get the devDeps.\nThanks for the example!\n. Confirmed this fixes the issue. Thanks!\n. Awesome. Thank you!\n. ",
    "syntagmatic": "From the examples directory:  \nhttps://github.com/leapmotion/leapjs/blob/master/examples/gestures.html\nhttps://github.com/leapmotion/leapjs/blob/master/examples/mapper.html\nIt'd be nice in the README to have an explanation of what these are and how they work\n. Does it work if you pass an empty object into the controller like so:\njavascript\nvar controller = new Leap.Controller({})\n. The code certainly looks better, but a for loop might be faster in these tight loops\nhttp://jsperf.com/jquery-each-vs-for-loop/58\nDamn you, for loops!\n. From the examples directory:  \nhttps://github.com/leapmotion/leapjs/blob/master/examples/gestures.html\nhttps://github.com/leapmotion/leapjs/blob/master/examples/mapper.html\nIt'd be nice in the README to have an explanation of what these are and how they work\n. Does it work if you pass an empty object into the controller like so:\njavascript\nvar controller = new Leap.Controller({})\n. The code certainly looks better, but a for loop might be faster in these tight loops\nhttp://jsperf.com/jquery-each-vs-for-loop/58\nDamn you, for loops!\n. ",
    "pehrlich": "Seems that this is an old issue.  Perhaps this could help?\nhttp://leapmotion.github.io/leapjs-plugins/docs/#screen-position\nClosing...\n. We're now getting these errors on chrome 36+ as well. Work is underway on having a WSS connection to the Leap Service\n(edit: typo \"not -> now\")\n. Actually working on this right now.  We generate a self-signed root cert, and install in the system.\nWe've got chrome/safari working on mac, and are now tacking NSS which will cover firefox on three platforms and Chrome on Linux.\n. IIRC Safari hasn't been updated yet, so it still works without issue.  For\nchrome you'll have to either set the flags @raimo mentioned, or wait for\nour upcoming fix.\nOn Wed, Jul 30, 2014 at 5:22 AM, goldbuick notifications@github.com wrote:\n\n@pehrlich https://github.com/pehrlich what did you do to get\nchrome/safari working on mac?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/leapmotion/leapjs/issues/80#issuecomment-50607081.\n\n\nNOTE: The information in this message and any attachments is confidential \ninformation intended only for the individual to whom it is addressed.  If \nyou are not the intended recipient, any distribution of this message or its \nattachments is prohibited.  If you have received this email in error, \nplease immediately notify us and delete the message.  Thank you.\n. @talkingjeff so this is only half of the fix.  This is designed to work with Leap Motion v2.1.0, which will include a secure websocket server.  That should be available on the developer portal soon.\n. Last week, 2.1.0 was released, which fixes this for Chrome/Safari/IE on mac/win, but not firefox.  You can verify these changes with the following test page:\nhttps://leapmotion.github.io/leapjs/examples/dumper.html\n. Closing this out! Full & proper firefox support went out in the release yesterday :)\n. There's no way to change this in LeapJS currently~ \n. I believe this has been resolved with the methods hand.pitch(), hand.roll(), and hand.yaw()?\n. cc @nashira \n. Sorry about that.  We've cleaned things up a bit, and things should be a bit neater from here on out.\nIf you're looking to tweak examples in this repo, start off from the master branch.\n. So I've solved this before by limiting the gestures-per-second.\ncoffeescript\n @handleSwipe: (swipe)->\n    swipedAt = (new Date).getTime()\n    return if @swipedAt && @swipedAt > (swipedAt - 1000)\nI'd love to wrap this up in a simple plugin some time to prevent gesture flooding..\n. +1\n. @jo3w4rd : \"I just noticed that it is happening in the skeletal-api build (from last week), but it doesn't happen in the current public release build.\"\n. This has been fixed in platform skeletal by Matias (ddfd4a0a). \n. We've just released beta3 on to npm, which resolves this issue!\n. We've just released beta3 on to npm, which resolves this issue.\n. yes, it is resolved!  Perhaps it looks like my message didn't get emailed full by github - if you run npm install leapjs right now, beta3 will be installed, which includes the fix and a couple of others for node.\nLet me know if you have any other issues :-)\n. Okay, we'll keep this in mind.  I'm not too familiar with RequireJS --yet-- so I'd be interested to hear how you're using it and see what's involved in integration.  (also, RequireJS vs CommonJS..?)\n. What do you guys think of adding in a shim to the library itself, like this? \nhttps://github.com/leapmotion/leapjs-plugins/blob/master/utils/leap-plugins-0.1.7-utils.js#L2-L12\n. Thanks @barnaby for figuring out what was going on :-)\n. Just ran a test, and this appears to be working fine.  Perhaps you are not checking the gesture state, which may be start, stop, or update?\njs\n    console.log( gesture.state + ' ' + gesture.type + \" with ID \" + gesture.id + \" in frame \" + frame.id);\nHere's a 5 finger swipe test case\nstart swipe with ID 7 in frame 43876 \n    start swipe with ID 49 in frame 43876 \n    start swipe with ID 54 in frame 43876 \n    update swipe with ID 7 in frame 43877 \n    update swipe with ID 49 in frame 43877 \n    update swipe with ID 54 in frame 43877 \n    start swipe with ID 51 in frame 43877 \n    start swipe with ID 4 in frame 43878 \n    update swipe with ID 7 in frame 43878 \n    update swipe with ID 49 in frame 43878 \n    update swipe with ID 54 in frame 43878 \n    update swipe with ID 51 in frame 43878 \n    update swipe with ID 4 in frame 43879 \n    update swipe with ID 7 in frame 43879 \n    update swipe with ID 49 in frame 43879 \n    update swipe with ID 54 in frame 43879 \n    update swipe with ID 51 in frame 43879 \n    update swipe with ID 4 in frame 43880 \n    update swipe with ID 7 in frame 43880 \n    update swipe with ID 49 in frame 43880 \n    update swipe with ID 54 in frame 43880 \n    update swipe with ID 51 in frame 43880 \n    update swipe with ID 4 in frame 43881 \n    update swipe with ID 7 in frame 43881 \n    update swipe with ID 49 in frame 43881 \n    update swipe with ID 54 in frame 43881 \n    update swipe with ID 51 in frame 43881 \n    update swipe with ID 4 in frame 43882 \n    update swipe with ID 7 in frame 43882 \n    update swipe with ID 49 in frame 43882 \n    update swipe with ID 54 in frame 43882 \n    update swipe with ID 51 in frame 43882 \n    update swipe with ID 4 in frame 43883 \n    update swipe with ID 7 in frame 43883 \n    update swipe with ID 49 in frame 43883 \n    update swipe with ID 54 in frame 43883 \n    update swipe with ID 51 in frame 43883 \n    update swipe with ID 4 in frame 43884 \n    update swipe with ID 7 in frame 43884 \n    update swipe with ID 49 in frame 43884 \n    update swipe with ID 54 in frame 43884 \n    update swipe with ID 51 in frame 43884 \n    update swipe with ID 4 in frame 43885 \n    update swipe with ID 7 in frame 43885 \n    update swipe with ID 49 in frame 43885 \n    update swipe with ID 54 in frame 43885 \n    update swipe with ID 51 in frame 43885 \n    update swipe with ID 4 in frame 43886 \n    update swipe with ID 7 in frame 43886 \n    update swipe with ID 49 in frame 43886 \n    update swipe with ID 54 in frame 43886 \n    update swipe with ID 51 in frame 43886 \n    update swipe with ID 4 in frame 43887 \n    update swipe with ID 7 in frame 43887 \n    update swipe with ID 49 in frame 43887 \n    update swipe with ID 54 in frame 43887 \n    update swipe with ID 51 in frame 43887 \n    update swipe with ID 4 in frame 43888 \n    update swipe with ID 7 in frame 43888 \n    update swipe with ID 49 in frame 43888 \n    update swipe with ID 54 in frame 43888 \n    update swipe with ID 51 in frame 43888 \n    update swipe with ID 4 in frame 43889 \n    update swipe with ID 7 in frame 43889 \n    update swipe with ID 49 in frame 43889 \n    update swipe with ID 54 in frame 43889 \n    update swipe with ID 51 in frame 43889 \n    update swipe with ID 4 in frame 43890 \n    update swipe with ID 7 in frame 43890 \n    update swipe with ID 49 in frame 43890 \n    update swipe with ID 54 in frame 43890 \n    update swipe with ID 51 in frame 43890 \n    update swipe with ID 4 in frame 43891 \n    update swipe with ID 7 in frame 43891 \n    update swipe with ID 49 in frame 43891 \n    update swipe with ID 54 in frame 43891 \n    update swipe with ID 51 in frame 43891 \n    update swipe with ID 4 in frame 43892 \n    update swipe with ID 7 in frame 43892 \n    update swipe with ID 49 in frame 43892 \n    update swipe with ID 54 in frame 43892 \n    update swipe with ID 51 in frame 43892 \n    update swipe with ID 4 in frame 43893 \n    update swipe with ID 7 in frame 43893 \n    update swipe with ID 49 in frame 43893 \n    update swipe with ID 54 in frame 43893 \n    update swipe with ID 51 in frame 43893 \n    update swipe with ID 4 in frame 43894 \n    update swipe with ID 7 in frame 43894 \n    update swipe with ID 49 in frame 43894 \n    update swipe with ID 54 in frame 43894 \n    update swipe with ID 51 in frame 43894 \n    update swipe with ID 4 in frame 43895 \n    update swipe with ID 7 in frame 43895 \n    update swipe with ID 49 in frame 43895 \n    update swipe with ID 54 in frame 43895 \n    update swipe with ID 51 in frame 43895 \n    update swipe with ID 4 in frame 43896 \n    update swipe with ID 7 in frame 43896 \n    update swipe with ID 49 in frame 43896 \n    update swipe with ID 54 in frame 43896 \n    update swipe with ID 51 in frame 43896 \n    update swipe with ID 4 in frame 43897 \n    update swipe with ID 7 in frame 43897 \n    update swipe with ID 49 in frame 43897 \n    update swipe with ID 54 in frame 43897 \n    update swipe with ID 51 in frame 43897 \n    update swipe with ID 4 in frame 43898 \n    update swipe with ID 7 in frame 43898 \n    update swipe with ID 49 in frame 43898 \n    update swipe with ID 54 in frame 43898 \n    update swipe with ID 51 in frame 43898 \n    update swipe with ID 4 in frame 43899 \n    update swipe with ID 7 in frame 43899 \n    update swipe with ID 49 in frame 43899 \n    update swipe with ID 54 in frame 43899 \n    update swipe with ID 51 in frame 43899 \n    update swipe with ID 4 in frame 43900 \n    update swipe with ID 7 in frame 43900 \n    stop swipe with ID 49 in frame 43900 \n    stop swipe with ID 54 in frame 43900 \n    stop swipe with ID 51 in frame 43900 \n    stop swipe with ID 4 in frame 43901 \n    stop swipe with ID 7 in frame 43901\nThe gestures are accumulated from deviceFrames on to animationFrames, but for update events especially, which happen on an animationFrame basis, there's no reason we'd need to attach the deviceFrame info instead of animationFrame info.\nPlease reopen this if I've misunderstood!\n. Hmm.  Have you had this occur regularly in some use case?\nWith some basic hand-waving, and this sample code, it hasn't been an issue:\njavascript\n  ctl.on('frame', function(frame){\n      if (frame.gestures.length && frame.gestures[0].pointableIds.length){\n        for (var i =0; i < frame.gestures[0].pointableIds.length; i++){\n          if (!frame.pointable(frame.gestures[0].pointableIds[i])) {\n            debugger;\n          }\n        }\n      }\n    });\nBut sure, its possible.  A couple possible fixes:\n- Include frameId in gesture.  That can then be used to look up the frame in the history.\n- Gesture could also include a frame() method, which would do that, or also finger(), pointable(), etc.\nEDIT: Looks like that can't be done so easily -- history only holds animationFrames in the browser (https://github.com/leapmotion/leapjs/blob/master/lib/controller.js#L168)\n. We talked it over in the JS meeting today - seems like the frame history should really be holding deviceFrames, not animationFrames (which I believe is currently the case).  When we make the switch, then we'll be able to pop a frameid on to the gesture, and have the data be much more accessible.  \nBut yes for now (that's estimated 0.5.0)-- documentation.\n. We've just released beta3 on to npm, which resolves this issue!\n. I have pushed a second commit, which has the node example work with entry.js instead of lib/index.  This matches the behavior of our js compiler (browserify).\n. This got resolved in 0.5.0 with streamingStarted and streamingStopped events.  \nHooray!\n(also now we have .connected() and .streaming() convenience methods)\n. closed in favor of https://github.com/leapmotion/leapjs/pull/145\n. What's the current status of this?\nI suggest we:\n- Leave the old events \"deviceDisconnected\" and \"deviceConnected\" in for at least one minor version, if not more.\n- Announce their deprecation, and recommend switching to 'deviceStreaming' and 'deviceStopped',\n- Perhaps find a clever way to add a warning message when people bind to the old events.\n- :ship: \n. The tests for deviceConnected/deviceDisconnected should not be deleted.  Until the deprecation period is over, they must still function.\n. As best I can tell, the build failures here are a race condition in the WebSocket, and not an issue with this pull particularly.  (Essentially, it looks like if a websocket message is dropped, leapjs doesn't try to keep decrementing.)\nEdit: I've opened a separate issue, here: https://github.com/leapmotion/leapjs/issues/148\n. We should have tests for deviceConnected/deviceDisconnected, right?\n. Sweet.  Scheduled to merge this in after plugins.  If for whatever reason we need it sooner than that, just shout :)\n. I've added a section \"Generating Events\"\n. I like the idea of moving methods over to pipeline.js, seems like a good location :-)\nAlso @roboleary had some comments around being able to stopUsing plugins, so that's in to TODO list.\n. We'll probably set up with Grunt at some point here-- I've been learning the ropes over at https://github.com/leapmotion/leapjs-plugins/blob/master/Gruntfile.coffee\n. What do you think? https://github.com/leapmotion/leapjs/pull/161\n. merged!\n. Sorry about taking so long to get back to you here - \nDo you have enableGestures: true enabled when you set up your LeapJS controller?  Without that, no gesture data will be emitted.\nThere is a bit of a funny and I believe undocumented (CC @jo3w4rd ) behavior here as well: if one application is using gestures, all of them will receive gesture events.  It is possible (CC Raffi) that the visualizer is setting the flag to true, and as a side-effect  you start getting gestures.  Is it the diagnostic visualizer or the regular one which you are using?\nHope this helps.\n. Hmm, very strange.  Can you share which version of Leap you have installed? (Settings -> About -> Software Version)\nEdit: I should mention, the demo linked works fine for me here.\n. Hi @wilkesalex - I've tried to reproduce both of these, but without any luck.\nHere's the html file that counts fine, running from my local computer:\n``` html\n\n\n</p>\n<pre><code>  #canvas{\n      width:    100%;\n      height:   100%;\n  }\n</code></pre>\n\n\n\n\n<script src=\"http://js.leapmotion.com/0.3.0-beta3/leap.min.js\"></script>\n\n\n\n<pre><code>// Get the canvas DOM element\nvar canvas = document.getElementById('canvas');\n\n// Making sure we have the proper aspect ratio for our canvas\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\n// Create the context we will use for drawing\nvar c =  canvas.getContext('2d');\n\n// Save the canvas width and canvas height\n// as easily accesible variables\nvar width = canvas.width;\nvar height = canvas.height;\n</code></pre>\n<p>controller = new Leap.Controller({enableGestures: true});\n    controller.connect();\n pausedFrame = false;\n controller.on('deviceFrame', function(frame_instance) {\n   latestFrame = frame_instance;\n   console.log('deviceFrame');\n   document.getElementById('out').innerHTML = (pausedFrame ? \"<p><b>PAUSED</b></p>\" : \"\") + \"<div>\"+(pausedFrame || latestFrame).dump()+\"</div>\";\n });</p>\n<p>\n\n\n```\nAnd here's another file, which prints out data:\n``` html\n\n\n\n<script src=\"http://js.leapmotion.com/0.3.0-beta3/leap.min.js\"></script>\n\n\n\n<p>controller = new Leap.Controller({enableGestures: true});\n    controller.connect();\n pausedFrame = false;\n controller.on('deviceFrame', function(frame_instance) {\n   latestFrame = frame_instance;\n   console.log('deviceFrame');\n   document.getElementById('out').innerHTML = (pausedFrame ? \"<p><b>PAUSED</b></p>\" : \"\") + \"<div>\"+(pausedFrame || latestFrame).dump()+\"</div>\";\n });</p>\n<p>\n\n  OUT\n\n\n\n```\nCan you please post your problematic code, in its entirety?\nPS I can recommend dumper.html if you want to simply examine the data.\n. Closing (408 timeout ;-)\n. ugh, this needs to happen outside of the controller scope, or something. closing for now.\n. Reopened properly in https://github.com/leapmotion/leapjs/pull/146\n. we'll revisit later\n. closing this for now,we can revisit if necessary\n. closing this as it is now merged in to the 0.5.0 branch\n. Thanks!\n. Roger that.  I'll work to reproduce, but I think I see the issue in the code.\nI think this would be fixed in https://github.com/leapmotion/leapjs/pull/157 - but to merge it in, we should add an option to make the behavior change in #157 be optional.\ncc @elizabth ?\n. Cross-referencing: https://community.leapmotion.com/t/js-sdk-update-in-background/826/3\n. Closing until this becomes a reported issue\n. Yup - looks fine on 0.8 and 0.10\n. we'll revisit later\n. to see how this PR behaves, I would recommend pulling the branch, and opening dumper.html with the inspector, to see if it acts in a way you would expect.\n. Hm, I'm able to install fine here.  \nAre you using the latest node? (1.4.7)  \nMaybe open an issue on npm https://github.com/npm/npm\n. Here, I've done the same:\n\nshasum leapjs050.tgz \n6080cf7c2c636b3d7644ce818ffacfc91f001322  leapjs050.tgz\n\nIt seems to unarchive fine.\nI wonder what's up with the Expected shasum.\n. Glad you found a fix!\n. Just heard back from npm - there was an issue with an earlier force-publish on our part.  You guys should be good to go!\n. NPM fixed it on their end.  But in the future, it's better to just never force-push.\n. To explain what was happening: focus fires before ready, and in the controller constructor, lastConnectionFrame is set to Frame.Invalid.\n. Transferring the images, raw, requires a pretty high data rate - around 17Mbyte/sec.  Initial tests with sending data over the websocket were prohibitively slow.  \nWebRTC data streaming (over SCTP, maybe even with jumbo frames) might be worth exploring as well, but we don't yet know how that would perform.\nI'd still really like to see it happen though, and will be exploring options and open to ideas.\n. Would be excited to see this! Keep us posted\n. fixed\n. It looks like rotationAngle is being derived via the \"Motions API\" , which is filtered differently from the hand itself.  We'll clean this up in a future release.  For now, here's a way to get a matrix from the hand data directly:\nhttp://jsfiddle.net/kLs8ymye/2/\nThis prints out first the rotationAngle/motions api values, and the calculations based off of hand direction and normal.\nEdit: We also found a couple of other subtle issues, which are documented here: https://github.com/leapmotion/leapjs/issues/191\n. Just checked with our tracking team - it looks like the feature is on a deprecation track, to be removed soon from the other APIs.  May I ask what you're hoping to use the feature for?\n. thanks!\n. cross reference: https://github.com/leapmotion/leapjs/issues/191\n. Pushed, sorry about that!\nAs I tagged 0.6.3 and 0.6.4 together, they appear out of order on the releases page.  Let me know if that's an issue.\nhttps://github.com/leapmotion/leapjs/releases\n. Have a look: https://github.com/leapmotion/leapjs-rigged-hand\n. You need to host the asset on the same domain.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nLike mentioned here, this is an issue tracker, not a support forum.  These issues are best raised on the community forum, where more people will see and be able to get involved.\n. Yes, this is possible.  \nFirstly, the code base is almost entirely shared between Node and Web, so passing in the host option should be just the same.\nTo fix the net::ERR_CONNECTION_REFUSED, check out this thread: https://community.leapmotion.com/t/read-leap-data-from-guest-vm-on-host-machine-using-websockets/1523/9\nIn a nutshell, non-localhost access is by default forbidden, but this can be configured on a per-machine basis.  Also, SSH tunneling is an alternative.\n. - changes should be done in the src files, not in the output files.  All of these changes would get overwritten with a single build call (grunt).\n- if there's not any reason to touch a file, it shouldn't be done - this goes for all the formatting on browserify includes, libraries, and most semicolons, etc.\nIf you would, please open a new PR (or update this one and clean the commit history) with just the minimum effective changes needed for ECMAscript6 support!\n. It's been a while since anyone's touched it, but the transform plugin was designed for exactly this.  Have you seen/tried/discovered any problems with this?\nhttp://leapmotion.github.io/leapjs-plugins/main/transform/\njavascript\n Leap.loop()\n    .use('transform', {\n      vr: true\n    });\n. Hm.  To troubleshoot your connection, try loading over https.  No content will load, but chrome will give you the opportunity to view the certificate: \nhttps://127.0.0.1:6436/v6.json\n\nClick details to get:\n\nYou can also try looking in your Registry for a certificate from Leap Motion:\n(this is on mac, but the registration details should look the same):\n\nThe registration gets added during installation, so it is possible that a reinstall could fix a missing cert.\n. What version of LeapJS are you using? What version of the leap Service?  What hardware?\nAs a hack, you should be able to put a try/catch inside the handleData method, or even replace the whole method with a wrapped version.  Of course that's no real solution to the underlying issue.\npseudocode:\njavascript\nhandleData = myController.connection.handleData\nmyController.connection.handleData = function() {\n   try {\n    handleData()\n   }\n}\n. Apparently there is an alternative download link for linux installations.  Give it a try: https://community.leapmotion.com/t/error-in-leapd-malloc/4271/13. Seems that this is an old issue.  Perhaps this could help?\nhttp://leapmotion.github.io/leapjs-plugins/docs/#screen-position\nClosing...\n. We're now getting these errors on chrome 36+ as well. Work is underway on having a WSS connection to the Leap Service\n(edit: typo \"not -> now\")\n. Actually working on this right now.  We generate a self-signed root cert, and install in the system.\nWe've got chrome/safari working on mac, and are now tacking NSS which will cover firefox on three platforms and Chrome on Linux.\n. IIRC Safari hasn't been updated yet, so it still works without issue.  For\nchrome you'll have to either set the flags @raimo mentioned, or wait for\nour upcoming fix.\nOn Wed, Jul 30, 2014 at 5:22 AM, goldbuick notifications@github.com wrote:\n\n@pehrlich https://github.com/pehrlich what did you do to get\nchrome/safari working on mac?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/leapmotion/leapjs/issues/80#issuecomment-50607081.\n\n\nNOTE: The information in this message and any attachments is confidential \ninformation intended only for the individual to whom it is addressed.  If \nyou are not the intended recipient, any distribution of this message or its \nattachments is prohibited.  If you have received this email in error, \nplease immediately notify us and delete the message.  Thank you.\n. @talkingjeff so this is only half of the fix.  This is designed to work with Leap Motion v2.1.0, which will include a secure websocket server.  That should be available on the developer portal soon.\n. Last week, 2.1.0 was released, which fixes this for Chrome/Safari/IE on mac/win, but not firefox.  You can verify these changes with the following test page:\nhttps://leapmotion.github.io/leapjs/examples/dumper.html\n. Closing this out! Full & proper firefox support went out in the release yesterday :)\n. There's no way to change this in LeapJS currently~ \n. I believe this has been resolved with the methods hand.pitch(), hand.roll(), and hand.yaw()?\n. cc @nashira \n. Sorry about that.  We've cleaned things up a bit, and things should be a bit neater from here on out.\nIf you're looking to tweak examples in this repo, start off from the master branch.\n. So I've solved this before by limiting the gestures-per-second.\ncoffeescript\n @handleSwipe: (swipe)->\n    swipedAt = (new Date).getTime()\n    return if @swipedAt && @swipedAt > (swipedAt - 1000)\nI'd love to wrap this up in a simple plugin some time to prevent gesture flooding..\n. +1\n. @jo3w4rd : \"I just noticed that it is happening in the skeletal-api build (from last week), but it doesn't happen in the current public release build.\"\n. This has been fixed in platform skeletal by Matias (ddfd4a0a). \n. We've just released beta3 on to npm, which resolves this issue!\n. We've just released beta3 on to npm, which resolves this issue.\n. yes, it is resolved!  Perhaps it looks like my message didn't get emailed full by github - if you run npm install leapjs right now, beta3 will be installed, which includes the fix and a couple of others for node.\nLet me know if you have any other issues :-)\n. Okay, we'll keep this in mind.  I'm not too familiar with RequireJS --yet-- so I'd be interested to hear how you're using it and see what's involved in integration.  (also, RequireJS vs CommonJS..?)\n. What do you guys think of adding in a shim to the library itself, like this? \nhttps://github.com/leapmotion/leapjs-plugins/blob/master/utils/leap-plugins-0.1.7-utils.js#L2-L12\n. Thanks @barnaby for figuring out what was going on :-)\n. Just ran a test, and this appears to be working fine.  Perhaps you are not checking the gesture state, which may be start, stop, or update?\njs\n    console.log( gesture.state + ' ' + gesture.type + \" with ID \" + gesture.id + \" in frame \" + frame.id);\nHere's a 5 finger swipe test case\nstart swipe with ID 7 in frame 43876 \n    start swipe with ID 49 in frame 43876 \n    start swipe with ID 54 in frame 43876 \n    update swipe with ID 7 in frame 43877 \n    update swipe with ID 49 in frame 43877 \n    update swipe with ID 54 in frame 43877 \n    start swipe with ID 51 in frame 43877 \n    start swipe with ID 4 in frame 43878 \n    update swipe with ID 7 in frame 43878 \n    update swipe with ID 49 in frame 43878 \n    update swipe with ID 54 in frame 43878 \n    update swipe with ID 51 in frame 43878 \n    update swipe with ID 4 in frame 43879 \n    update swipe with ID 7 in frame 43879 \n    update swipe with ID 49 in frame 43879 \n    update swipe with ID 54 in frame 43879 \n    update swipe with ID 51 in frame 43879 \n    update swipe with ID 4 in frame 43880 \n    update swipe with ID 7 in frame 43880 \n    update swipe with ID 49 in frame 43880 \n    update swipe with ID 54 in frame 43880 \n    update swipe with ID 51 in frame 43880 \n    update swipe with ID 4 in frame 43881 \n    update swipe with ID 7 in frame 43881 \n    update swipe with ID 49 in frame 43881 \n    update swipe with ID 54 in frame 43881 \n    update swipe with ID 51 in frame 43881 \n    update swipe with ID 4 in frame 43882 \n    update swipe with ID 7 in frame 43882 \n    update swipe with ID 49 in frame 43882 \n    update swipe with ID 54 in frame 43882 \n    update swipe with ID 51 in frame 43882 \n    update swipe with ID 4 in frame 43883 \n    update swipe with ID 7 in frame 43883 \n    update swipe with ID 49 in frame 43883 \n    update swipe with ID 54 in frame 43883 \n    update swipe with ID 51 in frame 43883 \n    update swipe with ID 4 in frame 43884 \n    update swipe with ID 7 in frame 43884 \n    update swipe with ID 49 in frame 43884 \n    update swipe with ID 54 in frame 43884 \n    update swipe with ID 51 in frame 43884 \n    update swipe with ID 4 in frame 43885 \n    update swipe with ID 7 in frame 43885 \n    update swipe with ID 49 in frame 43885 \n    update swipe with ID 54 in frame 43885 \n    update swipe with ID 51 in frame 43885 \n    update swipe with ID 4 in frame 43886 \n    update swipe with ID 7 in frame 43886 \n    update swipe with ID 49 in frame 43886 \n    update swipe with ID 54 in frame 43886 \n    update swipe with ID 51 in frame 43886 \n    update swipe with ID 4 in frame 43887 \n    update swipe with ID 7 in frame 43887 \n    update swipe with ID 49 in frame 43887 \n    update swipe with ID 54 in frame 43887 \n    update swipe with ID 51 in frame 43887 \n    update swipe with ID 4 in frame 43888 \n    update swipe with ID 7 in frame 43888 \n    update swipe with ID 49 in frame 43888 \n    update swipe with ID 54 in frame 43888 \n    update swipe with ID 51 in frame 43888 \n    update swipe with ID 4 in frame 43889 \n    update swipe with ID 7 in frame 43889 \n    update swipe with ID 49 in frame 43889 \n    update swipe with ID 54 in frame 43889 \n    update swipe with ID 51 in frame 43889 \n    update swipe with ID 4 in frame 43890 \n    update swipe with ID 7 in frame 43890 \n    update swipe with ID 49 in frame 43890 \n    update swipe with ID 54 in frame 43890 \n    update swipe with ID 51 in frame 43890 \n    update swipe with ID 4 in frame 43891 \n    update swipe with ID 7 in frame 43891 \n    update swipe with ID 49 in frame 43891 \n    update swipe with ID 54 in frame 43891 \n    update swipe with ID 51 in frame 43891 \n    update swipe with ID 4 in frame 43892 \n    update swipe with ID 7 in frame 43892 \n    update swipe with ID 49 in frame 43892 \n    update swipe with ID 54 in frame 43892 \n    update swipe with ID 51 in frame 43892 \n    update swipe with ID 4 in frame 43893 \n    update swipe with ID 7 in frame 43893 \n    update swipe with ID 49 in frame 43893 \n    update swipe with ID 54 in frame 43893 \n    update swipe with ID 51 in frame 43893 \n    update swipe with ID 4 in frame 43894 \n    update swipe with ID 7 in frame 43894 \n    update swipe with ID 49 in frame 43894 \n    update swipe with ID 54 in frame 43894 \n    update swipe with ID 51 in frame 43894 \n    update swipe with ID 4 in frame 43895 \n    update swipe with ID 7 in frame 43895 \n    update swipe with ID 49 in frame 43895 \n    update swipe with ID 54 in frame 43895 \n    update swipe with ID 51 in frame 43895 \n    update swipe with ID 4 in frame 43896 \n    update swipe with ID 7 in frame 43896 \n    update swipe with ID 49 in frame 43896 \n    update swipe with ID 54 in frame 43896 \n    update swipe with ID 51 in frame 43896 \n    update swipe with ID 4 in frame 43897 \n    update swipe with ID 7 in frame 43897 \n    update swipe with ID 49 in frame 43897 \n    update swipe with ID 54 in frame 43897 \n    update swipe with ID 51 in frame 43897 \n    update swipe with ID 4 in frame 43898 \n    update swipe with ID 7 in frame 43898 \n    update swipe with ID 49 in frame 43898 \n    update swipe with ID 54 in frame 43898 \n    update swipe with ID 51 in frame 43898 \n    update swipe with ID 4 in frame 43899 \n    update swipe with ID 7 in frame 43899 \n    update swipe with ID 49 in frame 43899 \n    update swipe with ID 54 in frame 43899 \n    update swipe with ID 51 in frame 43899 \n    update swipe with ID 4 in frame 43900 \n    update swipe with ID 7 in frame 43900 \n    stop swipe with ID 49 in frame 43900 \n    stop swipe with ID 54 in frame 43900 \n    stop swipe with ID 51 in frame 43900 \n    stop swipe with ID 4 in frame 43901 \n    stop swipe with ID 7 in frame 43901\nThe gestures are accumulated from deviceFrames on to animationFrames, but for update events especially, which happen on an animationFrame basis, there's no reason we'd need to attach the deviceFrame info instead of animationFrame info.\nPlease reopen this if I've misunderstood!\n. Hmm.  Have you had this occur regularly in some use case?\nWith some basic hand-waving, and this sample code, it hasn't been an issue:\njavascript\n  ctl.on('frame', function(frame){\n      if (frame.gestures.length && frame.gestures[0].pointableIds.length){\n        for (var i =0; i < frame.gestures[0].pointableIds.length; i++){\n          if (!frame.pointable(frame.gestures[0].pointableIds[i])) {\n            debugger;\n          }\n        }\n      }\n    });\nBut sure, its possible.  A couple possible fixes:\n- Include frameId in gesture.  That can then be used to look up the frame in the history.\n- Gesture could also include a frame() method, which would do that, or also finger(), pointable(), etc.\nEDIT: Looks like that can't be done so easily -- history only holds animationFrames in the browser (https://github.com/leapmotion/leapjs/blob/master/lib/controller.js#L168)\n. We talked it over in the JS meeting today - seems like the frame history should really be holding deviceFrames, not animationFrames (which I believe is currently the case).  When we make the switch, then we'll be able to pop a frameid on to the gesture, and have the data be much more accessible.  \nBut yes for now (that's estimated 0.5.0)-- documentation.\n. We've just released beta3 on to npm, which resolves this issue!\n. I have pushed a second commit, which has the node example work with entry.js instead of lib/index.  This matches the behavior of our js compiler (browserify).\n. This got resolved in 0.5.0 with streamingStarted and streamingStopped events.  \nHooray!\n(also now we have .connected() and .streaming() convenience methods)\n. closed in favor of https://github.com/leapmotion/leapjs/pull/145\n. What's the current status of this?\nI suggest we:\n- Leave the old events \"deviceDisconnected\" and \"deviceConnected\" in for at least one minor version, if not more.\n- Announce their deprecation, and recommend switching to 'deviceStreaming' and 'deviceStopped',\n- Perhaps find a clever way to add a warning message when people bind to the old events.\n- :ship: \n. The tests for deviceConnected/deviceDisconnected should not be deleted.  Until the deprecation period is over, they must still function.\n. As best I can tell, the build failures here are a race condition in the WebSocket, and not an issue with this pull particularly.  (Essentially, it looks like if a websocket message is dropped, leapjs doesn't try to keep decrementing.)\nEdit: I've opened a separate issue, here: https://github.com/leapmotion/leapjs/issues/148\n. We should have tests for deviceConnected/deviceDisconnected, right?\n. Sweet.  Scheduled to merge this in after plugins.  If for whatever reason we need it sooner than that, just shout :)\n. I've added a section \"Generating Events\"\n. I like the idea of moving methods over to pipeline.js, seems like a good location :-)\nAlso @roboleary had some comments around being able to stopUsing plugins, so that's in to TODO list.\n. We'll probably set up with Grunt at some point here-- I've been learning the ropes over at https://github.com/leapmotion/leapjs-plugins/blob/master/Gruntfile.coffee\n. What do you think? https://github.com/leapmotion/leapjs/pull/161\n. merged!\n. Sorry about taking so long to get back to you here - \nDo you have enableGestures: true enabled when you set up your LeapJS controller?  Without that, no gesture data will be emitted.\nThere is a bit of a funny and I believe undocumented (CC @jo3w4rd ) behavior here as well: if one application is using gestures, all of them will receive gesture events.  It is possible (CC Raffi) that the visualizer is setting the flag to true, and as a side-effect  you start getting gestures.  Is it the diagnostic visualizer or the regular one which you are using?\nHope this helps.\n. Hmm, very strange.  Can you share which version of Leap you have installed? (Settings -> About -> Software Version)\nEdit: I should mention, the demo linked works fine for me here.\n. Hi @wilkesalex - I've tried to reproduce both of these, but without any luck.\nHere's the html file that counts fine, running from my local computer:\n``` html\n\n\n</p>\n<pre><code>  #canvas{\n      width:    100%;\n      height:   100%;\n  }\n</code></pre>\n\n\n\n\n<script src=\"http://js.leapmotion.com/0.3.0-beta3/leap.min.js\"></script>\n\n\n\n<pre><code>// Get the canvas DOM element\nvar canvas = document.getElementById('canvas');\n\n// Making sure we have the proper aspect ratio for our canvas\ncanvas.width = canvas.clientWidth;\ncanvas.height = canvas.clientHeight;\n\n// Create the context we will use for drawing\nvar c =  canvas.getContext('2d');\n\n// Save the canvas width and canvas height\n// as easily accesible variables\nvar width = canvas.width;\nvar height = canvas.height;\n</code></pre>\n<p>controller = new Leap.Controller({enableGestures: true});\n    controller.connect();\n pausedFrame = false;\n controller.on('deviceFrame', function(frame_instance) {\n   latestFrame = frame_instance;\n   console.log('deviceFrame');\n   document.getElementById('out').innerHTML = (pausedFrame ? \"<p><b>PAUSED</b></p>\" : \"\") + \"<div>\"+(pausedFrame || latestFrame).dump()+\"</div>\";\n });</p>\n<p>\n\n\n```\nAnd here's another file, which prints out data:\n``` html\n\n\n\n<script src=\"http://js.leapmotion.com/0.3.0-beta3/leap.min.js\"></script>\n\n\n\n<p>controller = new Leap.Controller({enableGestures: true});\n    controller.connect();\n pausedFrame = false;\n controller.on('deviceFrame', function(frame_instance) {\n   latestFrame = frame_instance;\n   console.log('deviceFrame');\n   document.getElementById('out').innerHTML = (pausedFrame ? \"<p><b>PAUSED</b></p>\" : \"\") + \"<div>\"+(pausedFrame || latestFrame).dump()+\"</div>\";\n });</p>\n<p>\n\n  OUT\n\n\n\n```\nCan you please post your problematic code, in its entirety?\nPS I can recommend dumper.html if you want to simply examine the data.\n. Closing (408 timeout ;-)\n. ugh, this needs to happen outside of the controller scope, or something. closing for now.\n. Reopened properly in https://github.com/leapmotion/leapjs/pull/146\n. we'll revisit later\n. closing this for now,we can revisit if necessary\n. closing this as it is now merged in to the 0.5.0 branch\n. Thanks!\n. Roger that.  I'll work to reproduce, but I think I see the issue in the code.\nI think this would be fixed in https://github.com/leapmotion/leapjs/pull/157 - but to merge it in, we should add an option to make the behavior change in #157 be optional.\ncc @elizabth ?\n. Cross-referencing: https://community.leapmotion.com/t/js-sdk-update-in-background/826/3\n. Closing until this becomes a reported issue\n. Yup - looks fine on 0.8 and 0.10\n. we'll revisit later\n. to see how this PR behaves, I would recommend pulling the branch, and opening dumper.html with the inspector, to see if it acts in a way you would expect.\n. Hm, I'm able to install fine here.  \nAre you using the latest node? (1.4.7)  \nMaybe open an issue on npm https://github.com/npm/npm\n. Here, I've done the same:\n\nshasum leapjs050.tgz \n6080cf7c2c636b3d7644ce818ffacfc91f001322  leapjs050.tgz\n\nIt seems to unarchive fine.\nI wonder what's up with the Expected shasum.\n. Glad you found a fix!\n. Just heard back from npm - there was an issue with an earlier force-publish on our part.  You guys should be good to go!\n. NPM fixed it on their end.  But in the future, it's better to just never force-push.\n. To explain what was happening: focus fires before ready, and in the controller constructor, lastConnectionFrame is set to Frame.Invalid.\n. Transferring the images, raw, requires a pretty high data rate - around 17Mbyte/sec.  Initial tests with sending data over the websocket were prohibitively slow.  \nWebRTC data streaming (over SCTP, maybe even with jumbo frames) might be worth exploring as well, but we don't yet know how that would perform.\nI'd still really like to see it happen though, and will be exploring options and open to ideas.\n. Would be excited to see this! Keep us posted\n. fixed\n. It looks like rotationAngle is being derived via the \"Motions API\" , which is filtered differently from the hand itself.  We'll clean this up in a future release.  For now, here's a way to get a matrix from the hand data directly:\nhttp://jsfiddle.net/kLs8ymye/2/\nThis prints out first the rotationAngle/motions api values, and the calculations based off of hand direction and normal.\nEdit: We also found a couple of other subtle issues, which are documented here: https://github.com/leapmotion/leapjs/issues/191\n. Just checked with our tracking team - it looks like the feature is on a deprecation track, to be removed soon from the other APIs.  May I ask what you're hoping to use the feature for?\n. thanks!\n. cross reference: https://github.com/leapmotion/leapjs/issues/191\n. Pushed, sorry about that!\nAs I tagged 0.6.3 and 0.6.4 together, they appear out of order on the releases page.  Let me know if that's an issue.\nhttps://github.com/leapmotion/leapjs/releases\n. Have a look: https://github.com/leapmotion/leapjs-rigged-hand\n. You need to host the asset on the same domain.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\nLike mentioned here, this is an issue tracker, not a support forum.  These issues are best raised on the community forum, where more people will see and be able to get involved.\n. Yes, this is possible.  \nFirstly, the code base is almost entirely shared between Node and Web, so passing in the host option should be just the same.\nTo fix the net::ERR_CONNECTION_REFUSED, check out this thread: https://community.leapmotion.com/t/read-leap-data-from-guest-vm-on-host-machine-using-websockets/1523/9\nIn a nutshell, non-localhost access is by default forbidden, but this can be configured on a per-machine basis.  Also, SSH tunneling is an alternative.\n. - changes should be done in the src files, not in the output files.  All of these changes would get overwritten with a single build call (grunt).\n- if there's not any reason to touch a file, it shouldn't be done - this goes for all the formatting on browserify includes, libraries, and most semicolons, etc.\nIf you would, please open a new PR (or update this one and clean the commit history) with just the minimum effective changes needed for ECMAscript6 support!\n. It's been a while since anyone's touched it, but the transform plugin was designed for exactly this.  Have you seen/tried/discovered any problems with this?\nhttp://leapmotion.github.io/leapjs-plugins/main/transform/\njavascript\n Leap.loop()\n    .use('transform', {\n      vr: true\n    });\n. Hm.  To troubleshoot your connection, try loading over https.  No content will load, but chrome will give you the opportunity to view the certificate: \nhttps://127.0.0.1:6436/v6.json\n\nClick details to get:\n\nYou can also try looking in your Registry for a certificate from Leap Motion:\n(this is on mac, but the registration details should look the same):\n\nThe registration gets added during installation, so it is possible that a reinstall could fix a missing cert.\n. What version of LeapJS are you using? What version of the leap Service?  What hardware?\nAs a hack, you should be able to put a try/catch inside the handleData method, or even replace the whole method with a wrapped version.  Of course that's no real solution to the underlying issue.\npseudocode:\njavascript\nhandleData = myController.connection.handleData\nmyController.connection.handleData = function() {\n   try {\n    handleData()\n   }\n}\n. Apparently there is an alternative download link for linux installations.  Give it a try: https://community.leapmotion.com/t/error-in-leapd-malloc/4271/13. ",
    "bryanberger": "Documentation should change to reflect new way of attaching frame listeners to:\ncontroller.on('frame', function(frame){\n    console.log( frame );\n});\n. Having errors here.\nLooks like Leap.Controller.Frame.Invalid is undefined.\nFrame.Invalid works though.\njavascript\nController.prototype.frame = function(num) {\n  return this.history.get(num) || Leap.Controller.Frame.Invalid;\n}\n. In this Example:\njavascript\nvar controller = new Leap.Controller(); \ncontroller.on('frame', function(e) {\n    console.log( controller.frame(1) );\n})\ncontroller.connect();\nI get 200 logs to the console with valid frames. On the 201st and onward I get Invalid Frames. Am I missing something?\n. Now we're talking, good fix. I'll see what else I can find (hopefully none) Good work!\n. Documentation should change to reflect new way of attaching frame listeners to:\ncontroller.on('frame', function(frame){\n    console.log( frame );\n});\n. Having errors here.\nLooks like Leap.Controller.Frame.Invalid is undefined.\nFrame.Invalid works though.\njavascript\nController.prototype.frame = function(num) {\n  return this.history.get(num) || Leap.Controller.Frame.Invalid;\n}\n. In this Example:\njavascript\nvar controller = new Leap.Controller(); \ncontroller.on('frame', function(e) {\n    console.log( controller.frame(1) );\n})\ncontroller.connect();\nI get 200 logs to the console with valid frames. On the 201st and onward I get Invalid Frames. Am I missing something?\n. Now we're talking, good fix. I'll see what else I can find (hopefully none) Good work!\n. ",
    "joyrexus": "Appreciate the quick response.  I'm hung up and over my head with the websocket swfobject dependency when trying to run leap.js headless w/ jsdom or phantomjs.  No rush, happy to wait on this.\n. Nice.\nHmm. events.js is throwing (both w/ or w/out server running):\nevents.js:71\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: connect ECONNREFUSED\n    at errnoException (net.js:770:11)\n    at Object.afterConnect [as oncomplete] (net.js:761:19)\nWill try to diagnose later.\n. Nice.  The sample code above works fine.  However, there appears to be an issue working with the controller's other methods as of this commit.  When running examples/NodeTest.js:\nTypeError: Cannot read property 'connectionType' of undefined\n  at new exports.Controller (leap-js/lib/controller.js:16:28)\n. FWIW, I've been having success with the node-based interface available via the latest npm distribution (v.0.1.2).  \nStill having issues using the current master branch because of this commit.\nReverting line 16 of lib/controller.js, viz. ...\njavascript\nvar connectionType = opts.connectionType || this.connectionType();\n... to ...\njavascript\n  var connectionType = this.connectionType();\n... seems to address this issue:\nTypeError: Cannot read property 'connectionType' of undefined\n  at new exports.Controller (/Users/jvoigt/Code/leap/Repos/leapjs/lib/controller.js:16:28)\n. @joshbuddy Oi.  A missing this!  How did I not see that?  Thanks for the quick fix.\n. Appreciate the quick response.  I'm hung up and over my head with the websocket swfobject dependency when trying to run leap.js headless w/ jsdom or phantomjs.  No rush, happy to wait on this.\n. Nice.\nHmm. events.js is throwing (both w/ or w/out server running):\nevents.js:71\n        throw arguments[1]; // Unhandled 'error' event\n                       ^\nError: connect ECONNREFUSED\n    at errnoException (net.js:770:11)\n    at Object.afterConnect [as oncomplete] (net.js:761:19)\nWill try to diagnose later.\n. Nice.  The sample code above works fine.  However, there appears to be an issue working with the controller's other methods as of this commit.  When running examples/NodeTest.js:\nTypeError: Cannot read property 'connectionType' of undefined\n  at new exports.Controller (leap-js/lib/controller.js:16:28)\n. FWIW, I've been having success with the node-based interface available via the latest npm distribution (v.0.1.2).  \nStill having issues using the current master branch because of this commit.\nReverting line 16 of lib/controller.js, viz. ...\njavascript\nvar connectionType = opts.connectionType || this.connectionType();\n... to ...\njavascript\n  var connectionType = this.connectionType();\n... seems to address this issue:\nTypeError: Cannot read property 'connectionType' of undefined\n  at new exports.Controller (/Users/jvoigt/Code/leap/Repos/leapjs/lib/controller.js:16:28)\n. @joshbuddy Oi.  A missing this!  How did I not see that?  Thanks for the quick fix.\n. ",
    "xseignard": "Hi,\nSame error here.\nRegards\n. I tried the following with the npm version (0.1.2) and node 0.10.8, running on ubuntu 12.04LTS\n```\nvar Leap = require('leapjs').Leap;\nvar controller = new Leap.Controller({}); // also without the empty object\nconsole.log(controller);\ncontroller.loop(function(frame) {\n  console.log(frame);\n});\n```\nI also tried the following :\n```\nvar Leap = require('leapjs').Leap;\nvar controller = new Leap.Controller({});  // also without the empty object\nconsole.log(controller);\ncontroller.on('frame', function(frame) {\n  console.log(frame);\n});\ncontroller.connect();\n```\nI always got the same error :\n/home/bigx/repos/leapOSC/node_modules/leapjs/lib/base_connection.js:49\n    this.protocol(message, this);\n         ^\nTypeError: Object [object Object] has no method 'protocol'\n    at Connection.handleData (/home/bigx/repos/leapOSC/node_modules/leapjs/lib/base_connection.js:49:10)\n    at WebSocket.<anonymous> (/home/bigx/repos/leapOSC/node_modules/leapjs/lib/node_connection.js:10:49)\n    at WebSocket.EventEmitter.emit (events.js:98:17)\n    at Receiver.self._receiver.ontext (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/WebSocket.js:544:10)\n    at Receiver.opcodes.1.finish (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/Receiver.js:397:14)\n    at Receiver.expectHandler (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/Receiver.js:384:31)\n    at Receiver.add (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/Receiver.js:93:24)\n    at Socket.firstHandler (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/WebSocket.js:524:22)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:736:14)\n. My goal is to use leapjs with https://github.com/rockbot/vektor to control robotics and open hardware\n. Just try the following:\nmkdir leapTest\ncd leapTest\nnpm install leapjs\necho \"var Leap = require('leapjs').Leap;console.log(Leap);\" > test.js\nnode test.js\n. Hi,\nSame error here.\nRegards\n. I tried the following with the npm version (0.1.2) and node 0.10.8, running on ubuntu 12.04LTS\n```\nvar Leap = require('leapjs').Leap;\nvar controller = new Leap.Controller({}); // also without the empty object\nconsole.log(controller);\ncontroller.loop(function(frame) {\n  console.log(frame);\n});\n```\nI also tried the following :\n```\nvar Leap = require('leapjs').Leap;\nvar controller = new Leap.Controller({});  // also without the empty object\nconsole.log(controller);\ncontroller.on('frame', function(frame) {\n  console.log(frame);\n});\ncontroller.connect();\n```\nI always got the same error :\n/home/bigx/repos/leapOSC/node_modules/leapjs/lib/base_connection.js:49\n    this.protocol(message, this);\n         ^\nTypeError: Object [object Object] has no method 'protocol'\n    at Connection.handleData (/home/bigx/repos/leapOSC/node_modules/leapjs/lib/base_connection.js:49:10)\n    at WebSocket.<anonymous> (/home/bigx/repos/leapOSC/node_modules/leapjs/lib/node_connection.js:10:49)\n    at WebSocket.EventEmitter.emit (events.js:98:17)\n    at Receiver.self._receiver.ontext (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/WebSocket.js:544:10)\n    at Receiver.opcodes.1.finish (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/Receiver.js:397:14)\n    at Receiver.expectHandler (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/Receiver.js:384:31)\n    at Receiver.add (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/Receiver.js:93:24)\n    at Socket.firstHandler (/home/bigx/repos/leapOSC/node_modules/leapjs/node_modules/ws/lib/WebSocket.js:524:22)\n    at Socket.EventEmitter.emit (events.js:95:17)\n    at Socket.<anonymous> (_stream_readable.js:736:14)\n. My goal is to use leapjs with https://github.com/rockbot/vektor to control robotics and open hardware\n. Just try the following:\nmkdir leapTest\ncd leapTest\nnpm install leapjs\necho \"var Leap = require('leapjs').Leap;console.log(Leap);\" > test.js\nnode test.js\n. ",
    "henry74": "Here's my nodejs code:\nvar Leap = require('leapjs').Leap; //https://github.com/leapmotion/leapjs/issues/26\nvar controller = new Leap.Controller({});\nGetting the following error:\nvar controller = new Leap.Controller({});\n                         ^\nTypeError: Cannot read property 'Controller' of undefined\n    at Object.<anonymous>\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3\nMy package.json:\n\"dependencies\": {\n    \"express\": \"latest\",\n    \"async\": \"latest\",\n    \"leapjs\": \"latest\",\n    \"ws\": \"latest\",\n    \"underscore\": \"latest\",\n    \"gl-matrix\": \"latest\"\n  }\nnpm -v\n1.3.14\n. @L1fescape Does this library work with v4 of the leapjs PROTOCOL? (https://github.com/leapmotion/leapjs/blob/master/PROTOCOL.md)\n. Just confirming for others, the curtsy library does work with v4 of the leapjs protocol (aka leapjs v0.3.0-beta2)\n. I found this configuration option buried at the end of this page: https://github.com/leapmotion/leapjs/blob/master/PROTOCOL.md\nYou have to pass { background: true } in order to pick up frames.  Also, in v4 there doesn't appear to be an animationFrame event anymore - only a deviceFrame event which can be picked up if you listen for \"frame\" or \"deviceFrame\".  Here is some code which may help you:\njavascript\nvar controller = new Leap.Controller({\n  enableGestures: true,\n  focused: true,\n  background: true\n});\ncontroller.on('deviceFrame', function(frame) {\n  console.log(frame);\n});\nThe documentation is definitely lagging and it's very frustrating to try and use the Leap.  I wish the leapjs folks would do a better job of documenting the latest versions so we can stop debugging through trial and error.\n. This makes it work for me so I can get the basic leap events captured through the controller.  I assume this will get closed once master is pushed to the npm repository.  Currently the latest in npm is beta1 and the master is labeled beta2\n. Here's my nodejs code:\nvar Leap = require('leapjs').Leap; //https://github.com/leapmotion/leapjs/issues/26\nvar controller = new Leap.Controller({});\nGetting the following error:\nvar controller = new Leap.Controller({});\n                         ^\nTypeError: Cannot read property 'Controller' of undefined\n    at Object.<anonymous>\n    at Module._compile (module.js:456:26)\n    at Object.Module._extensions..js (module.js:474:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    at Function.Module.runMain (module.js:497:10)\n    at startup (node.js:119:16)\n    at node.js:901:3\nMy package.json:\n\"dependencies\": {\n    \"express\": \"latest\",\n    \"async\": \"latest\",\n    \"leapjs\": \"latest\",\n    \"ws\": \"latest\",\n    \"underscore\": \"latest\",\n    \"gl-matrix\": \"latest\"\n  }\nnpm -v\n1.3.14\n. @L1fescape Does this library work with v4 of the leapjs PROTOCOL? (https://github.com/leapmotion/leapjs/blob/master/PROTOCOL.md)\n. Just confirming for others, the curtsy library does work with v4 of the leapjs protocol (aka leapjs v0.3.0-beta2)\n. I found this configuration option buried at the end of this page: https://github.com/leapmotion/leapjs/blob/master/PROTOCOL.md\nYou have to pass { background: true } in order to pick up frames.  Also, in v4 there doesn't appear to be an animationFrame event anymore - only a deviceFrame event which can be picked up if you listen for \"frame\" or \"deviceFrame\".  Here is some code which may help you:\njavascript\nvar controller = new Leap.Controller({\n  enableGestures: true,\n  focused: true,\n  background: true\n});\ncontroller.on('deviceFrame', function(frame) {\n  console.log(frame);\n});\nThe documentation is definitely lagging and it's very frustrating to try and use the Leap.  I wish the leapjs folks would do a better job of documenting the latest versions so we can stop debugging through trial and error.\n. This makes it work for me so I can get the basic leap events captured through the controller.  I assume this will get closed once master is pushed to the npm repository.  Currently the latest in npm is beta1 and the master is labeled beta2\n. ",
    "neptunius": "While you do have browser window information, you similarly have screen size information in most graphics engines. However, these do not provide a physical screen location in Leap coordinate space, as the Screen API does once you have run the screen locator tool. You can then convert between Leap coordinates and screen pixels, including projecting from a finger tip onto the screen like a laser pointer. It also supports multiple monitor setups quite well.\nWe have not added the Screen data or the new features coming in the 0.7.4 release to the JSON data or JavaScript API yet, as Josh and others are focusing on improving the core functionality and making the library more testable. Once this is further along, we plan to catch up with the constantly evolving C++ API and distribute the JavaScript library with our main SDK download.\nAlan Davis // Leap SDK team\n. Hi Theo, I hope this covers most of your questions and issues. :-)\nRegarding the absence of pitch, roll, and yaw functions:\n@joshbuddy removed the Vector and Matrix classes in commit 25d803b to introduce gl-matrix, a high-performance math library, so we don't have to maintain our own. As @theo-armour noticed, it lacks some convenience functions in our homebrew math library that @deckar01 ported from LeapMath.h (C++) to JavaScript. If we want to bring those back, we can revive Jared's implementations and convert them to be compatible with vec3 and mat3 types provided by gl-matrix. Josh and I think it would be best to do this in a separate library to keep the LeapJS client library lean. However, there are likely other vector math utility libraries out there already, maybe one built on gl-matrix, that we can use instead of doing it all ourselves. Let's use existing libraries whenever possible!\nRegarding the \"gimbal lock\" issue with hand rotation:\nNeither hand.direction nor hand.palmNormal provide enough information to determine all 3 pitch, roll, and yaw values. You'll notice in the Java snippet you copied from our Sample.java code in your first comment, we use hand.direction to obtain the pitch and yaw, but hand.palmNormal to obtain roll. This is because the user's hand is generally pointing toward their screen, so the direction vector is along the roll axis and a roll value obtained from it would be unstable. Similarly, a yaw value obtained from the palmNormal would be unstable. You can get a pitch value from palmNormal, but it will generally be pointing downward, rather than forward, as you likely want. I noticed in your JSFiddle example that you show the yaw from palmNormal is \"ok\", but this is not what I observe. I also see some flipping issues when the hand's palmNormal is near the neutral position along the negative y-axis.\nRegarding the frame rotation matrix:\nThe frame._rotation matrix is a cumulative value that shouldn't be used directly (hence the underscore), it needs to be compared to another frame's rotation matrix to get the change in rotation between them. Read the implementation of Frame.rotation(sinceFrame) for the details. The frame._translation and ._scale contain cumulative values as well.\nAlan Davis // Leap Motion SDK Team\n. The missing return was accidentally removed in pull request #92, but should be fixed as of commit 399293b.\n. This workaround node example fix is superseded by a proper fix in #132. Thanks @pehrlich!\n. Yes, we should validate JSON blobs coming out of the WebSocket using schema as well, although it doesn't need to be tied to this feature, it could be a future enhancement. That would ensure that the protocol data is unchanged after a forthcoming refactor to the WebSocket server in the Leap Service.\n. Looks good. Ship it!\n. I reviewed the diff and spoke with @pehrlich above subtle details. Looks good \u2013 Ship it! :ship:\n. Code reviewed, looks good and all tests pass. SHIP IT!\n. While you do have browser window information, you similarly have screen size information in most graphics engines. However, these do not provide a physical screen location in Leap coordinate space, as the Screen API does once you have run the screen locator tool. You can then convert between Leap coordinates and screen pixels, including projecting from a finger tip onto the screen like a laser pointer. It also supports multiple monitor setups quite well.\nWe have not added the Screen data or the new features coming in the 0.7.4 release to the JSON data or JavaScript API yet, as Josh and others are focusing on improving the core functionality and making the library more testable. Once this is further along, we plan to catch up with the constantly evolving C++ API and distribute the JavaScript library with our main SDK download.\nAlan Davis // Leap SDK team\n. Hi Theo, I hope this covers most of your questions and issues. :-)\nRegarding the absence of pitch, roll, and yaw functions:\n@joshbuddy removed the Vector and Matrix classes in commit 25d803b to introduce gl-matrix, a high-performance math library, so we don't have to maintain our own. As @theo-armour noticed, it lacks some convenience functions in our homebrew math library that @deckar01 ported from LeapMath.h (C++) to JavaScript. If we want to bring those back, we can revive Jared's implementations and convert them to be compatible with vec3 and mat3 types provided by gl-matrix. Josh and I think it would be best to do this in a separate library to keep the LeapJS client library lean. However, there are likely other vector math utility libraries out there already, maybe one built on gl-matrix, that we can use instead of doing it all ourselves. Let's use existing libraries whenever possible!\nRegarding the \"gimbal lock\" issue with hand rotation:\nNeither hand.direction nor hand.palmNormal provide enough information to determine all 3 pitch, roll, and yaw values. You'll notice in the Java snippet you copied from our Sample.java code in your first comment, we use hand.direction to obtain the pitch and yaw, but hand.palmNormal to obtain roll. This is because the user's hand is generally pointing toward their screen, so the direction vector is along the roll axis and a roll value obtained from it would be unstable. Similarly, a yaw value obtained from the palmNormal would be unstable. You can get a pitch value from palmNormal, but it will generally be pointing downward, rather than forward, as you likely want. I noticed in your JSFiddle example that you show the yaw from palmNormal is \"ok\", but this is not what I observe. I also see some flipping issues when the hand's palmNormal is near the neutral position along the negative y-axis.\nRegarding the frame rotation matrix:\nThe frame._rotation matrix is a cumulative value that shouldn't be used directly (hence the underscore), it needs to be compared to another frame's rotation matrix to get the change in rotation between them. Read the implementation of Frame.rotation(sinceFrame) for the details. The frame._translation and ._scale contain cumulative values as well.\nAlan Davis // Leap Motion SDK Team\n. The missing return was accidentally removed in pull request #92, but should be fixed as of commit 399293b.\n. This workaround node example fix is superseded by a proper fix in #132. Thanks @pehrlich!\n. Yes, we should validate JSON blobs coming out of the WebSocket using schema as well, although it doesn't need to be tied to this feature, it could be a future enhancement. That would ensure that the protocol data is unchanged after a forthcoming refactor to the WebSocket server in the Leap Service.\n. Looks good. Ship it!\n. I reviewed the diff and spoke with @pehrlich above subtle details. Looks good \u2013 Ship it! :ship:\n. Code reviewed, looks good and all tests pass. SHIP IT!\n. ",
    "hyzhak": "@neptunius looking forward to this opportunity. Without Screen API i can't implement precise pointing \n. @joshbuddy good news! we're still waiting it\n. @jackey nope, you miss the point of Screen API. Look there for more information https://developer.leapmotion.com/documentation/Languages/C++/Guides/Leap_Screen_Location.html\n. @joshbuddy new update just fix exception rising but, other problems still the same:\n1. reconnect dosn't work because Connection.prototype.connect function check this.socket != null, that always not null if lib try reconnect after broken connection;\n2. on the other hand after user manualy execute disconnect, lib try reconnect and revent disconnecting. So we can't disconnect library.\nSo my request still usefull.\n. it's good idea\n. @neptunius looking forward to this opportunity. Without Screen API i can't implement precise pointing \n. @joshbuddy good news! we're still waiting it\n. @jackey nope, you miss the point of Screen API. Look there for more information https://developer.leapmotion.com/documentation/Languages/C++/Guides/Leap_Screen_Location.html\n. @joshbuddy new update just fix exception rising but, other problems still the same:\n1. reconnect dosn't work because Connection.prototype.connect function check this.socket != null, that always not null if lib try reconnect after broken connection;\n2. on the other hand after user manualy execute disconnect, lib try reconnect and revent disconnecting. So we can't disconnect library.\nSo my request still usefull.\n. it's good idea\n. ",
    "saschagehlich": "+1\nRight now, we use the absolute position in 3d space to map it to the screen. This is not very precise and doesn't really feel natural. We would still use this as a fallback in case the screen has not been located (a flag for that would be great).\nA real screen position would be awesome though (even though it will be hard to map it to the actual window position)\nAny update on this @neptunius / @joshbuddy ?\n. I did:\nhttps://github.com/saschagehlich/leapjs/blob/2d57c9cf58d710119a82ed53530dccc2bcbc2c78/test/connection.js\nhttps://github.com/saschagehlich/leapjs/blob/2d57c9cf58d710119a82ed53530dccc2bcbc2c78/test/controller.js\n. +1\nRight now, we use the absolute position in 3d space to map it to the screen. This is not very precise and doesn't really feel natural. We would still use this as a fallback in case the screen has not been located (a flag for that would be great).\nA real screen position would be awesome though (even though it will be hard to map it to the actual window position)\nAny update on this @neptunius / @joshbuddy ?\n. I did:\nhttps://github.com/saschagehlich/leapjs/blob/2d57c9cf58d710119a82ed53530dccc2bcbc2c78/test/connection.js\nhttps://github.com/saschagehlich/leapjs/blob/2d57c9cf58d710119a82ed53530dccc2bcbc2c78/test/controller.js\n. ",
    "brianantonelli": "+1\n@saschagehlich could you share the code you're using?\n. @cabbibo This was a HUGE help thank you so much!\n. +1\n@saschagehlich could you share the code you're using?\n. @cabbibo This was a HUGE help thank you so much!\n. ",
    "cabbibo": "@brianantonelli @saschagehlich @Hyzhak \nI personally really enjoy using 'CD gain' as a method of getting more accurate pointing. It basically just multiples the velocity by a 'CD gain' in order to get the new position. I wrote a very hacky demo of some different gain equations that can be used, that you guys are free to check out and tear apart / reuse. I'm happy to answer any questions about it! As you can see some of the equations work better then others, but overall, I like the feel better than absolute positioning, and it allows the user to point to much smaller areas, because it takes away some of the natural hand shake.\nhttp://cabbibo.com/leap/lmlab/mouse/test.html\nAn Image of different CD gain equations that different companies use:\nhttp://www.nonsequitoria.com/v.php?s=research&f=control_display_gain\n. @brianantonelli So glad. It definitely was a super helpful discovery for me as well, so I had to share it!\n. Broke Gestures for me :(\n. The swipe gesture is a multiframe gesture, which means that it will be sending swipe gestures through the entire time that the swipe gesture is occurring. If you just want to read the gesture only the very first time it is seen, you could do something like the following:\n``` js\n// Keeps track of the old frame\nvar oFrame;\nLeap.loop(function(frame) {\n// Assigns the old frame the very first time a frame is seen\n  if( !oFrame ){\n    oFrame = frame;\n  }\n// If the previous frame did not have a gesture, \n  // and this frame does, it must mean that a gesture just started\n  if ( frame.gestures[0] && !oFrame.gestures[0]) {\nvar gesture = frame.gestures[0];\n\n// DO WHAT YOU WILL WITH THE GESTURE HERE\n\n}\n// Every other frame aside from the first frame,\n  // the oFrame will be assigned at the very end of the loop\n  // so that we can keep track of both the current and previous frame\n  oFrame = frame;\n});\n```\nI don't know if this is exactly what your issue was, but if it is, this might help :)\n. http://jeanhelfenstein.com/leap/02/\nSuper into this style\n. @brianantonelli @saschagehlich @Hyzhak \nI personally really enjoy using 'CD gain' as a method of getting more accurate pointing. It basically just multiples the velocity by a 'CD gain' in order to get the new position. I wrote a very hacky demo of some different gain equations that can be used, that you guys are free to check out and tear apart / reuse. I'm happy to answer any questions about it! As you can see some of the equations work better then others, but overall, I like the feel better than absolute positioning, and it allows the user to point to much smaller areas, because it takes away some of the natural hand shake.\nhttp://cabbibo.com/leap/lmlab/mouse/test.html\nAn Image of different CD gain equations that different companies use:\nhttp://www.nonsequitoria.com/v.php?s=research&f=control_display_gain\n. @brianantonelli So glad. It definitely was a super helpful discovery for me as well, so I had to share it!\n. Broke Gestures for me :(\n. The swipe gesture is a multiframe gesture, which means that it will be sending swipe gestures through the entire time that the swipe gesture is occurring. If you just want to read the gesture only the very first time it is seen, you could do something like the following:\n``` js\n// Keeps track of the old frame\nvar oFrame;\nLeap.loop(function(frame) {\n// Assigns the old frame the very first time a frame is seen\n  if( !oFrame ){\n    oFrame = frame;\n  }\n// If the previous frame did not have a gesture, \n  // and this frame does, it must mean that a gesture just started\n  if ( frame.gestures[0] && !oFrame.gestures[0]) {\nvar gesture = frame.gestures[0];\n\n// DO WHAT YOU WILL WITH THE GESTURE HERE\n\n}\n// Every other frame aside from the first frame,\n  // the oFrame will be assigned at the very end of the loop\n  // so that we can keep track of both the current and previous frame\n  oFrame = frame;\n});\n```\nI don't know if this is exactly what your issue was, but if it is, this might help :)\n. http://jeanhelfenstein.com/leap/02/\nSuper into this style\n. ",
    "jackey": "```\n    function xy(mm) {\n        var max_mm_x = 600,\n            max_mm_y = 500;\n        var max_px_x = parseInt($(window.document).width()),\n            max_px_y = parseInt($(window.document).height());\n    var x2 = parseInt(mm[0]) + max_mm_x / 2;\n    var y2 = max_mm_y - parseInt(mm[1]);\n    return [(max_px_x / max_mm_x) * x2 ,(max_px_y / max_mm_y )  * y2];\n}\n\n```\nthis is function to convert position of finger to position in windows screen. \nis it your want ? \n. @L1fescape \nVery great module ! \nthank you so much\n. @L1fescape  @cabbibo \nthank you a lot, guys.\nHere's the code and I follow all you suggestions:\n``` javascript\n    function GestureTrash() {\n        this.swipe = [];\n        this.circle = [];\n        this.tap = [];\n    }\nGestureTrash.prototype.put = function (frame) {\n    var self = this;\n    var gesture = frame.gestures[0];\n\n    // swipe\n    if (gesture && gesture.type == \"swipe\") {\n        if (gesture.state == \"start\" && this.swipe.length)  {\n            this.swipe = [frame];\n        }\n        else {\n            this.swipe.push(frame);\n        }\n    }\n    else{\n        this.swipe = [];\n    }\n\n    // circle\n    if (gesture && gesture.type == \"circle\") {\n        if (gesture.state == \"start\" && this.circle.length)  {\n            this.circle = [frame];\n        }\n        else {\n            this.circle.push(frame);\n        }\n    }\n    else{\n        this.circle = [];\n    }\n\n    // tap\n    if (gesture && ( gesture.type == \"screenTap\" || gesture.type == \"keyTap\") ) {\n        if (gesture.state == \"start\" && this.tap.length)  {\n            this.tap = [frame];\n        }\n        else {\n            this.tap.push(frame);\n        }\n    }\n    else{\n        this.tap = [];\n    }\n}\n\nGestureTrash.prototype.debug = function () {\n    console.log(\"===================================================================================\");\n    console.log(this.swipe);\n    console.log(this.circle);\n    console.log(this.tap);\n    console.log(\"===================================================================================\");\n}\n\nGestureTrash.prototype.hasSwipe = function () {\n    for (var i = this.swipe.length - 1; i > -1; i--) {\n        if (this.swipe[i].gestures[0].state == \"stop\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nGestureTrash.prototype.hasCircle = function () {\n    for (var i = this.circle.length - 1; i > -1; i--) {\n        if (this.circle[i].gestures[0].state == \"stop\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nGestureTrash.prototype.hasTap = function () {\n    for (var i = this.tap.length - 1; i > -1; i--) {\n        if (this.tap[i].gestures[0].state == \"stop\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nif (!window.gestureTrash) {\n    window.gestureTrash = new GestureTrash();\n}\n\n```\nand in the loop I do:\n``` javascript\nvar swiping = false;\nLeap.loop({enableGestures: true}, function (frame) {\n    var gesture = frame.gestures[0];\n    if (!gestureTrash.hasTap() &&  (gesture.type == \"keyTap\" || gesture.type == \"screenTap\") && gesture.state == \"stop\") {\n                   if (!swiping) {\n                          swiping = true;\n                          return setTimeout(function () {actionWhenTap(gesture, frame); swiping = false;}, 100);\n                    }\n\n    }\n            window.gestureTrash.put(frame);\n\n});\n```\nIt work better but still has same issue. \nHope guy  can improve it.\nCheers\n. ```\n    function xy(mm) {\n        var max_mm_x = 600,\n            max_mm_y = 500;\n        var max_px_x = parseInt($(window.document).width()),\n            max_px_y = parseInt($(window.document).height());\n    var x2 = parseInt(mm[0]) + max_mm_x / 2;\n    var y2 = max_mm_y - parseInt(mm[1]);\n    return [(max_px_x / max_mm_x) * x2 ,(max_px_y / max_mm_y )  * y2];\n}\n\n```\nthis is function to convert position of finger to position in windows screen. \nis it your want ? \n. @L1fescape \nVery great module ! \nthank you so much\n. @L1fescape  @cabbibo \nthank you a lot, guys.\nHere's the code and I follow all you suggestions:\n``` javascript\n    function GestureTrash() {\n        this.swipe = [];\n        this.circle = [];\n        this.tap = [];\n    }\nGestureTrash.prototype.put = function (frame) {\n    var self = this;\n    var gesture = frame.gestures[0];\n\n    // swipe\n    if (gesture && gesture.type == \"swipe\") {\n        if (gesture.state == \"start\" && this.swipe.length)  {\n            this.swipe = [frame];\n        }\n        else {\n            this.swipe.push(frame);\n        }\n    }\n    else{\n        this.swipe = [];\n    }\n\n    // circle\n    if (gesture && gesture.type == \"circle\") {\n        if (gesture.state == \"start\" && this.circle.length)  {\n            this.circle = [frame];\n        }\n        else {\n            this.circle.push(frame);\n        }\n    }\n    else{\n        this.circle = [];\n    }\n\n    // tap\n    if (gesture && ( gesture.type == \"screenTap\" || gesture.type == \"keyTap\") ) {\n        if (gesture.state == \"start\" && this.tap.length)  {\n            this.tap = [frame];\n        }\n        else {\n            this.tap.push(frame);\n        }\n    }\n    else{\n        this.tap = [];\n    }\n}\n\nGestureTrash.prototype.debug = function () {\n    console.log(\"===================================================================================\");\n    console.log(this.swipe);\n    console.log(this.circle);\n    console.log(this.tap);\n    console.log(\"===================================================================================\");\n}\n\nGestureTrash.prototype.hasSwipe = function () {\n    for (var i = this.swipe.length - 1; i > -1; i--) {\n        if (this.swipe[i].gestures[0].state == \"stop\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nGestureTrash.prototype.hasCircle = function () {\n    for (var i = this.circle.length - 1; i > -1; i--) {\n        if (this.circle[i].gestures[0].state == \"stop\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nGestureTrash.prototype.hasTap = function () {\n    for (var i = this.tap.length - 1; i > -1; i--) {\n        if (this.tap[i].gestures[0].state == \"stop\") {\n            return true;\n        }\n    }\n    return false;\n}\n\nif (!window.gestureTrash) {\n    window.gestureTrash = new GestureTrash();\n}\n\n```\nand in the loop I do:\n``` javascript\nvar swiping = false;\nLeap.loop({enableGestures: true}, function (frame) {\n    var gesture = frame.gestures[0];\n    if (!gestureTrash.hasTap() &&  (gesture.type == \"keyTap\" || gesture.type == \"screenTap\") && gesture.state == \"stop\") {\n                   if (!swiping) {\n                          swiping = true;\n                          return setTimeout(function () {actionWhenTap(gesture, frame); swiping = false;}, 100);\n                    }\n\n    }\n            window.gestureTrash.put(frame);\n\n});\n```\nIt work better but still has same issue. \nHope guy  can improve it.\nCheers\n. ",
    "mgiraldo": "Hi\nAwesome that you added gestures to the JS API. How do I use them in my application? I am creating the controller with\nvar controller = new Leap.Controller({enableGestures:true});\nbut the controller.loop(function(frame) { function receives no gesture array. Not even empty.\nAny help will be appreciated!\n. Hi\nAwesome that you added gestures to the JS API. How do I use them in my application? I am creating the controller with\nvar controller = new Leap.Controller({enableGestures:true});\nbut the controller.loop(function(frame) { function receives no gesture array. Not even empty.\nAny help will be appreciated!\n. ",
    "julien-c": "I would love to see this merged as well.\n. I would love to see this merged as well.\n. ",
    "void-main": "Yes, I kind of believe gestures are part of the frame, as the hand or fingers, could you please give me some reason or thought why you guys treat gesture different from hands or fingers?\n. Hi @joshbuddy , I still cannot get any gesture.. is there anything wrong with the device? I did run the GestureDemo from SDK, and it worked.. Is it something with the browser? Thank you so much for your answer.. \n. Yes, I kind of believe gestures are part of the frame, as the hand or fingers, could you please give me some reason or thought why you guys treat gesture different from hands or fingers?\n. Hi @joshbuddy , I still cannot get any gesture.. is there anything wrong with the device? I did run the GestureDemo from SDK, and it worked.. Is it something with the browser? Thank you so much for your answer.. \n. ",
    "schnipz": "I have found that the 'circle' gestures works really well but the others only work occasionally and not consistently. The 'swipe' gesture especially only works every so often, even if the same physical gesture is repeated. This is seen using the SDK v0.7.5 JavaScript sample too.\n. I have found that the 'circle' gestures works really well but the others only work occasionally and not consistently. The 'swipe' gesture especially only works every so often, even if the same physical gesture is repeated. This is seen using the SDK v0.7.5 JavaScript sample too.\n. ",
    "logotype": "Hi\nI've also tried to solve this issue with the Socket Policy file. I've even sent them a socket policy server I wrote - but no reply from them yet. We have the same issue in the LeapMotionAS3 library, if you deploy via Flash Player in the browser.\nTo clarify:\n1. When Flash is using a socket-connection, it needs to download a crossdomain.xml file which specifies the ports it can connect to. This is for security purposes.\n2. Specifically, for Leap.js, it needs port access to 6437.\n3. The socket-policy server is ideally running in the Leap.app process (this server can be written in less than 100 lines of plain old C).\nWorkarounds:\nIf the project you are working on are not meant to be public, you can simply run your own socket-policy server at port 843 and serve the xml file yourself. There are several servers available (e.g. python, java, etc). If its a public project, and the users client doesn't support WebSockets - you are out of luck (unless Leap includes the SocketServer!)\nHope it helps!\nAnd dear Leap, would be very happy if the SocketServer I sent to you guys could be included in Leap.app :)\n. I remember it worked the same before, but maybe this functionality isn't implemented yet since the change to gl-matrix?\n. Pitch:\nMath.atan2( y, -z );\nYaw:\nMath.atan2( x, -z );\nRoll:\nMath.atan2( x, -y );\n. What's new for protocol v5? It's not mentioned in PROTOCOL.md yet.\nThanks,\nVictor\nSent from my iPhone\n\nOn 5 Dec, 2013, at 8:23 am, Joe Ward notifications@github.com wrote:\nSteps to reproduce:\n. Use code such as the following to print out the current protocol:\nvar controller = new Leap.Controller({enableGestures:true});\ncontroller.connect();\ncontroller.on('protocol', onProtocol);\nfunction onProtocol(protocol)\n{\n    console.log(\"Protocol event: \" + protocol.version);\n}\n. Start the JS App and observer the console. The log should list version 4 or 5.\n. Open the Leap Motion Settings panel.\n. Uncheck \"Allow Web Apps\"\n. Click Apply\n. Check \"Allow Web Apps\"\n. Click Apply\n. Observe the log. The protocol version is one less than before.\n. Repeat if desired.\nPossibly the Leap.js library is assuming a protocol failure is responsible for the refused connection and decrementing the requested protocol in an attempt to get a successful connection. However, that's not what is happening, so the logic should be improved.\n\u2014\nReply to this email directly or view it on GitHub.\n. WebRTC sounds like a good bet.\n\nAlternatively, given the data rate, maybe a poll/request approach is an option to push?\nSent from my iPhone\n\nOn 8 Oct, 2014, at 8:05 am, Peter Ehrlich notifications@github.com wrote:\nTransferring the images, raw, requires a pretty high data rate - around 17Mbyte/sec. Initial tests with sending data over the websocket were prohibitively slow.\nWebRTC data streaming (over SCTP, maybe even with jumbo frames) might be worth exploring as well, but we don't yet know how that would perform.\nI'd still really like to see it happen though, and will be exploring options and open to ideas.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hi\nI've also tried to solve this issue with the Socket Policy file. I've even sent them a socket policy server I wrote - but no reply from them yet. We have the same issue in the LeapMotionAS3 library, if you deploy via Flash Player in the browser.\n\nTo clarify:\n1. When Flash is using a socket-connection, it needs to download a crossdomain.xml file which specifies the ports it can connect to. This is for security purposes.\n2. Specifically, for Leap.js, it needs port access to 6437.\n3. The socket-policy server is ideally running in the Leap.app process (this server can be written in less than 100 lines of plain old C).\nWorkarounds:\nIf the project you are working on are not meant to be public, you can simply run your own socket-policy server at port 843 and serve the xml file yourself. There are several servers available (e.g. python, java, etc). If its a public project, and the users client doesn't support WebSockets - you are out of luck (unless Leap includes the SocketServer!)\nHope it helps!\nAnd dear Leap, would be very happy if the SocketServer I sent to you guys could be included in Leap.app :)\n. I remember it worked the same before, but maybe this functionality isn't implemented yet since the change to gl-matrix?\n. Pitch:\nMath.atan2( y, -z );\nYaw:\nMath.atan2( x, -z );\nRoll:\nMath.atan2( x, -y );\n. What's new for protocol v5? It's not mentioned in PROTOCOL.md yet.\nThanks,\nVictor\nSent from my iPhone\n\nOn 5 Dec, 2013, at 8:23 am, Joe Ward notifications@github.com wrote:\nSteps to reproduce:\n. Use code such as the following to print out the current protocol:\nvar controller = new Leap.Controller({enableGestures:true});\ncontroller.connect();\ncontroller.on('protocol', onProtocol);\nfunction onProtocol(protocol)\n{\n    console.log(\"Protocol event: \" + protocol.version);\n}\n. Start the JS App and observer the console. The log should list version 4 or 5.\n. Open the Leap Motion Settings panel.\n. Uncheck \"Allow Web Apps\"\n. Click Apply\n. Check \"Allow Web Apps\"\n. Click Apply\n. Observe the log. The protocol version is one less than before.\n. Repeat if desired.\nPossibly the Leap.js library is assuming a protocol failure is responsible for the refused connection and decrementing the requested protocol in an attempt to get a successful connection. However, that's not what is happening, so the logic should be improved.\n\u2014\nReply to this email directly or view it on GitHub.\n. WebRTC sounds like a good bet.\n\nAlternatively, given the data rate, maybe a poll/request approach is an option to push?\nSent from my iPhone\n\nOn 8 Oct, 2014, at 8:05 am, Peter Ehrlich notifications@github.com wrote:\nTransferring the images, raw, requires a pretty high data rate - around 17Mbyte/sec. Initial tests with sending data over the websocket were prohibitively slow.\nWebRTC data streaming (over SCTP, maybe even with jumbo frames) might be worth exploring as well, but we don't yet know how that would perform.\nI'd still really like to see it happen though, and will be exploring options and open to ideas.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "cedricpinson": "Could be nice to enable or disable flash fallback from the build. For example my application will not work on browser that have not websocket, so I dont want to keep flash code in the lib. Maybe a flag could be cool\n. Clearly it's better to remove the flash completely, I just suggested this option if you wanted to keep the flash fallback.\n. Could be nice to enable or disable flash fallback from the build. For example my application will not work on browser that have not websocket, so I dont want to keep flash code in the lib. Maybe a flag could be cool\n. Clearly it's better to remove the flash completely, I just suggested this option if you wanted to keep the flash fallback.\n. ",
    "pmcmonagle": "I'd be inclined to drop the Flash polyfill.\nWe (TVO.org) still see about 7% and 9% of our monthly web site visits come from IE8 and IE9, but this is mostly due to the demographics associated with public television and education. If you expect a lot of public school teachers to be picking up Leap Motion, you'll definitely want to think hard about this. Otherwise, getting the polyfill to work just sounds really risky and not worth it.\n. I'd be inclined to drop the Flash polyfill.\nWe (TVO.org) still see about 7% and 9% of our monthly web site visits come from IE8 and IE9, but this is mostly due to the demographics associated with public television and education. If you expect a lot of public school teachers to be picking up Leap Motion, you'll definitely want to think hard about this. Otherwise, getting the polyfill to work just sounds really risky and not worth it.\n. ",
    "mcarlson": ":+1: if my comment is addressed\n. Nice! This is much cleaner and should be faster and more maintainable. :+1:\n. :+1: if my comment is addressed\n. Nice! This is much cleaner and should be faster and more maintainable. :+1:\n. ",
    "likethemammal": "Just checked it with the latest version. Works fine now. Just to answer your question, I'd probably expect the 'blur' event to be fired because the window is losing focus. At least that's what I assume would happen because its define in the spec.\n. Just checked it with the latest version. Works fine now. Just to answer your question, I'd probably expect the 'blur' event to be fired because the window is losing focus. At least that's what I assume would happen because its define in the spec.\n. ",
    "lukalocniskar": "Its the same issue: http://stackoverflow.com/questions/11768221/firefox-websocket-security-issue\n\" The app itself is under SSL but the websocket being accessed is not. Chrome and Opera don't care but Firefox does. According to:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=303952\nThis is known and is not considered a bug. Mozilla's response: wontfix\"\n. Is there anything I can do? \n. Its the same issue: http://stackoverflow.com/questions/11768221/firefox-websocket-security-issue\n\" The app itself is under SSL but the websocket being accessed is not. Chrome and Opera don't care but Firefox does. According to:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=303952\nThis is known and is not considered a bug. Mozilla's response: wontfix\"\n. Is there anything I can do? \n. ",
    "ronaldsuwandi": "Would like this to be implemented as well :+1:. My extension works fine with Chrome/Safari and failed on Firefox due to this issue :poop:\n. Would like this to be implemented as well :+1:. My extension works fine with Chrome/Safari and failed on Firefox due to this issue :poop:\n. ",
    "raimo": "thanks @bingomanatee \nThis restriction is also in Internet Explorer 11 and is likely to be introduced in Chrome, too. +1 for fixing ASAP.\n. @senko @goldbuick \nWe're aware of the SSL certificate challenges involved in setting up the WSS transport and trying to tackle the issue in the most elegant way possible. In case there's some ideas how to handle localhost certificates, we're interested in following up for sure. Thanks for the support and sorry for the trouble!\nWe're expecting to release a fix for this during the upcoming releases, please be patient. :)\n. For the time being, it looks like Google Chrome has a flag that can be set to workaround the issue:\n1. Go to chrome://flags/\n2. Search for \"Allow insecure WebSocket from https origin\"\n3. Click Enable.\n4. Restart Chrome.\n. @pehrlich looks good to me.\n. ok\n. +1\n. @petoem Not sure if you figured this out already, but just in case someone else bumps up to this issue, I noticed you're using:\njavascript\n    var controller = leap.Controller();\nwhereas the Controller.prototype.useAnimationFrame will be set only if you use it like this:\njavascript\n    var controller = new leap.Controller();\n. thanks @bingomanatee \nThis restriction is also in Internet Explorer 11 and is likely to be introduced in Chrome, too. +1 for fixing ASAP.\n. @senko @goldbuick \nWe're aware of the SSL certificate challenges involved in setting up the WSS transport and trying to tackle the issue in the most elegant way possible. In case there's some ideas how to handle localhost certificates, we're interested in following up for sure. Thanks for the support and sorry for the trouble!\nWe're expecting to release a fix for this during the upcoming releases, please be patient. :)\n. For the time being, it looks like Google Chrome has a flag that can be set to workaround the issue:\n1. Go to chrome://flags/\n2. Search for \"Allow insecure WebSocket from https origin\"\n3. Click Enable.\n4. Restart Chrome.\n. @pehrlich looks good to me.\n. ok\n. +1\n. @petoem Not sure if you figured this out already, but just in case someone else bumps up to this issue, I noticed you're using:\njavascript\n    var controller = leap.Controller();\nwhereas the Controller.prototype.useAnimationFrame will be set only if you use it like this:\njavascript\n    var controller = new leap.Controller();\n. ",
    "bingomanatee": "Am in discussion with Alan Davis re: wss:// protocol options (secure web socket) which apparently don t have this issue..? @pehrlich @neptunius \n. I have written https://github.com/leapmotion/leapjs/pull/136 to specifically test for the non-existence of WebSockets in the browser and hopefully throw up better informative messages in this situation. \n. No. LeapJS is not currently designed to be compatible with requirejs. We may make it so in the future but at this point, Leap, the namespace that LeapJS creates, is a global, and is not designed to work with requirejs. \n. We welcome any community involvement that brings Leap into the requirejs tent. Send us a pull request and we will look at it. \n. FWIW if you load the Leap.js library before you load require, you can refer to it as a global -- that is if you set your script includes in the right order leap can be engaged from Require even though it is not itself AMD/require friendly. \n. this pull request is now complete to the point where invalid objects are build based on schema, defaults and a build factory. This will put us in good stead when pushing out to Skeleton (and beyond) as we build in extra properties etc. to our schema. \n. also note, building the invalid definition is a grunt task; grunt has been added to the build process for the purpose of creating invalid.js. This is necessary as the factory produces JSON, but we want to be assembling JS objects, not JSON files, so the files have to be injected template-style into our code. \n. !!! take note - getting travis to like grunt is a piece of work; check out the travis config mods if you want to make travis friendly github projects.\n. This pull request has stood unchecked for a month. Unless there are tangible issues put forth I am merging it at end of day. \n. I have sat down individually with both Alan and Peter; they have both acknowledged that the inactive objects are more accurate than the active objects; that, and a toJSON() method on some objects (which is not directly consumed by any other part of the code, just nice to have for end to end unit testing) is the only user facing change. \nSo unless someone comes forth with a specific reason, this addresses a public issue that has been outstanding for a while. \n. duplicate of https://github.com/leapmotion/leapjs/issues/80\n. Am in discussion with Alan Davis re: wss:// protocol options (secure web socket) which apparently don t have this issue..? @pehrlich @neptunius \n. I have written https://github.com/leapmotion/leapjs/pull/136 to specifically test for the non-existence of WebSockets in the browser and hopefully throw up better informative messages in this situation. \n. No. LeapJS is not currently designed to be compatible with requirejs. We may make it so in the future but at this point, Leap, the namespace that LeapJS creates, is a global, and is not designed to work with requirejs. \n. We welcome any community involvement that brings Leap into the requirejs tent. Send us a pull request and we will look at it. \n. FWIW if you load the Leap.js library before you load require, you can refer to it as a global -- that is if you set your script includes in the right order leap can be engaged from Require even though it is not itself AMD/require friendly. \n. this pull request is now complete to the point where invalid objects are build based on schema, defaults and a build factory. This will put us in good stead when pushing out to Skeleton (and beyond) as we build in extra properties etc. to our schema. \n. also note, building the invalid definition is a grunt task; grunt has been added to the build process for the purpose of creating invalid.js. This is necessary as the factory produces JSON, but we want to be assembling JS objects, not JSON files, so the files have to be injected template-style into our code. \n. !!! take note - getting travis to like grunt is a piece of work; check out the travis config mods if you want to make travis friendly github projects.\n. This pull request has stood unchecked for a month. Unless there are tangible issues put forth I am merging it at end of day. \n. I have sat down individually with both Alan and Peter; they have both acknowledged that the inactive objects are more accurate than the active objects; that, and a toJSON() method on some objects (which is not directly consumed by any other part of the code, just nice to have for end to end unit testing) is the only user facing change. \nSo unless someone comes forth with a specific reason, this addresses a public issue that has been outstanding for a while. \n. duplicate of https://github.com/leapmotion/leapjs/issues/80\n. ",
    "doolittle": "+1 on adding support for a secure socket. \nI'm using the Leap and the webcam in the browser, and https is the only way that the browser will allow you to \"remember\" the user's permission to access the camera (i.e. the allow/deny dropdown in Chrome). With http, it asks permission every time. With https, it just asks the first time.\nChrome throws the deprecation warning but allows it to run on https; Firefox just stops.\n. +1 on adding support for a secure socket. \nI'm using the Leap and the webcam in the browser, and https is the only way that the browser will allow you to \"remember\" the user's permission to access the camera (i.e. the allow/deny dropdown in Chrome). With http, it asks permission every time. With https, it just asks the first time.\nChrome throws the deprecation warning but allows it to run on https; Firefox just stops.\n. ",
    "senko": "+1 on adding support.\nWe have a HTTPS-only web app that doesn't function at all without WSS support (discovered a couple days ago after the Chrome update)\n. +1 on adding support.\nWe have a HTTPS-only web app that doesn't function at all without WSS support (discovered a couple days ago after the Chrome update)\n. ",
    "goldbuick": "Question, even if you add support for WSS. How are you going to go about providing the proper cert for a localhost address?? Getting chrome, firefox, ie to accept a self-signed cert is a complicated multi-step process\n. @pehrlich what did you do to get chrome/safari working on mac?\n. Question, even if you add support for WSS. How are you going to go about providing the proper cert for a localhost address?? Getting chrome, firefox, ie to accept a self-signed cert is a complicated multi-step process\n. @pehrlich what did you do to get chrome/safari working on mac?\n. ",
    "jundongme": "@pehrlich I noticed there was already a new release 0.6.2 yesterday. Thanks for your quick fix. But after substituting 0.6.2 in my website, it still does not work. I have to enable AllowInsecureWebsocket in my Chrome 36.0.1985.125. Did I miss something? One thing to notice is the SSL certificate is on my server, which has firewall that blocks most ports. But I think leapjs is just front-end stuff, which should not have anything to do with the firewall, right?\n. @pehrlich I noticed there was already a new release 0.6.2 yesterday. Thanks for your quick fix. But after substituting 0.6.2 in my website, it still does not work. I have to enable AllowInsecureWebsocket in my Chrome 36.0.1985.125. Did I miss something? One thing to notice is the SSL certificate is on my server, which has firewall that blocks most ports. But I think leapjs is just front-end stuff, which should not have anything to do with the firewall, right?\n. ",
    "L1fescape": "I believe this was fixed here.\n. No problem!\n. Check out a npm library I made called curtsy that does exactly this.\nRight now it only supports circle and swipe directions. Suggestions welcome!\n. @jackey glad you like it!\n. @henry74 @robinboehm thanks! Glad to hear it's working with v4.\n. I would use setTimeout to read the first gesture that comes through and then wait x amount of time until reading another one (in the example below it's just 1 second). It's not an elegant solution, but it works. It'd be nice if there was an option to pass in to the Leapjs controller when initializing it.\n``` js\nvar readGesture = true;\nLeap.loop(function(frame) {\n  if (frame.gestures.length && readGesture) {\n    var gesture = frame.gestures[0];\n// ... code for going back or forward in history ...\n\nreadGesture = false;\nsetTimeout(function() { readGesture = true; }, 1000);\n\n}\n});\n```\nDoes that help?\n. Thank you!\n. I believe this was fixed here.\n. No problem!\n. Check out a npm library I made called curtsy that does exactly this.\nRight now it only supports circle and swipe directions. Suggestions welcome!\n. @jackey glad you like it!\n. @henry74 @robinboehm thanks! Glad to hear it's working with v4.\n. I would use setTimeout to read the first gesture that comes through and then wait x amount of time until reading another one (in the example below it's just 1 second). It's not an elegant solution, but it works. It'd be nice if there was an option to pass in to the Leapjs controller when initializing it.\n``` js\nvar readGesture = true;\nLeap.loop(function(frame) {\n  if (frame.gestures.length && readGesture) {\n    var gesture = frame.gestures[0];\n// ... code for going back or forward in history ...\n\nreadGesture = false;\nsetTimeout(function() { readGesture = true; }, 1000);\n\n}\n});\n```\nDoes that help?\n. Thank you!\n. ",
    "Spaceghost": "Not the greatest commit message in the world.\n. Not the greatest commit message in the world.\n. ",
    "flynnwt": "I fixed it originally by passing inNode:true and using that it the local inNode statement, but then I saw .defaults() already does the override.  So, the current library code is fine.  Node apps should set it explicitly.\n. Same as issue #87?  Try setting inNode: true option.\n. I fixed it originally by passing inNode:true and using that it the local inNode statement, but then I saw .defaults() already does the override.  So, the current library code is fine.  Node apps should set it explicitly.\n. Same as issue #87?  Try setting inNode: true option.\n. ",
    "raldred": "Yeh all working fine with that patch, great work thanks!\n. Yeh all working fine with that patch, great work thanks!\n. ",
    "theo-armour": "Hi Victor\nThank you for the speedy reply.\nThis question is relates to obtaining the pitch, yaw and roll of a Leap Motion hand object in a designated frame as in (which does not work in JavaScript):\nvar hand = frame.hands[0];\nvar pitch = hand.direction.pitch;\nvar yaw = hand.direction.yaw;\nvar roll = hand.palmNormal.roll;\nYour response - which is accurate - refers to general algebraic calculations and does not relate to particular Leap Motion data. \nPitch, yaw and roll are sailing/aviation terms. In mechanical engineering or computer science we might just say 'rotation angles' and supply a 3D vector.\nSo, for example, in Three.js terms I am looking for a good way of obtaining rotX, rotY and rotZ for use in the following:\ncube.rotation.set( rotX, rotY, rotZ );\nAm I being clear?\nTheo\nPS Did you know that I was the founder of the HK Macintosh User Group?\n. Here's another way of looking at the palm rotation angles issue:\nhttp://jsfiddle.net/theo/6TJNx/\nLooking at the demo and wiggling your hands you will see that neither frame.hands[index].direction nor frame.hands[index].palmNormal supply us with the correct rotation angles for the palm.  \n[The correct rotation angles may well be embedded in frame._rotation which is an array of nine reals with values ranging from 1 to -1. I assume that these may well be three normalized vectors but why does it take three vectors to define the single vector of the three rotation angles is beyond me. On the other hand maybe frame._rotation may have to do something with this frame thing that remains much of a mystery to me.]\nCurrently, I am using an awful hack which has gimbal lock issues. And I remain very jealous of the other APIs with their simple roll, pitch and yaw call. So any discussion would be appreciated. Who knows? Perhaps somebody might be working on this...\n. Hi Alan\nThank you for the very detailed and very understandable explanation. I\nappreciate the effort\n\n\nJosh and I think it would be best to do this in a separate library to\nkeep the LeapJS client library lean.\nHowever, there are likely other vector math utility libraries out there\nalready, maybe one built on gl-matrix,\n\n\nBrandon Jones has certainly done a wonderful job with gl-matrix but, yes,\nmore is needed. I will respond to your pondering in a separate issue.\n\n\nI hope this covers most of your questions and issues\n\n\nYes, your reply does cover all the issues in a considered and detailed\nmanner. The thing is that your reply does not answer the question:\nWhat is the best (or even just a good) method for obtaining the same values\n\n[pitch, roll, yaw] in JavaScript?\n\nI have coded some methods that suck. It is not obvious to me as to how to\ngo from the two vectors to the three reals. Given that the Leap Motion team\nhas a deep understanding of the underlying data and code, it would seem to\nme that you would be the best people to come up with a temporary work\naround until pitch, roll and yaw can be built into Leap.js.\nTheo\nOn Thu, Aug 8, 2013 at 5:26 PM, Alan Davis notifications@github.com wrote:\n\nHi Theo, I hope this covers most of your questions and issues. :-)\nRegarding the absence of pitch, roll, and yaw functions:\n@joshbuddy https://github.com/joshbuddy removed the Vector and Matrix\nclasses in commit 25d803bhttps://github.com/leapmotion/leapjs/commit/25d803bto introduce gl-matrix, a high-performance math library, so we don't have\nto maintain our own. As @theo-armour https://github.com/theo-armournoticed, it lacks some convenience functions in our homebrew math library\nthat @deckar01 https://github.com/deckar01 ported from LeapMath.h (C++)\nto JavaScript. If we want to bring those back, we can revive Jared's\nimplementations and convert them to be compatible with vec3 and mat3 types\nprovided by gl-matrix. Josh and I think it would be best to do this in a\nseparate library to keep the LeapJS client library lean. However, there are\nlikely other vector math utility libraries out there already, maybe one\nbuilt on gl-matrix, that we can use inste ad of doing it all ourselves.\nLet's use existing libraries whenever possible!\nRegarding the \"gimbal lock\" issue with hand rotation:\nNeither hand.direction nor hand.palmNormal provide enough information to\ndetermine all 3 pitch, roll, and yaw values. You'll notice in the Java\nsnippet you copied from our Sample.java code in your first comment, we use\nhand.direction to obtain the pitch and yaw, but hand.palmNormal to obtain\nroll. This is because the user's hand is generally pointing toward their\nscreen, so the direction vector is along the roll axis and a roll value\nobtained from it would be unstable. Similarly, a yaw value obtained from\nthe palmNormal would be unstable. You can get a pitch value from\npalmNormal, but it will generally be pointing downward, rather than\nforward, as you likely want. I noticed in your JSFiddle example that you\nshow the yaw from palmNormal is \"ok\", but this is not what I observe. I\nalso see some flipping issues when the hand's palmNormal is near the\n\"neutral position along the negative y-axis.\nRegarding the frame rotation matrix:\nThe frame._rotation matrix is a cumulative value that shouldn't be used\ndirectly (hence the underscore), it needs to be compared to another frame's\nrotation matrix to get the change in rotation between them. Read the\nimplementation of Frame.rotation(sinceFrame) for the details. The\nframe._translation and ._scale contain cumulative values as well.\nAlan Davis // Leap Motion SDK Team\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leapmotion/leapjs/issues/91#issuecomment-22368202\n.\n. Hi Alan\n\nHave you had any thoughts about how to answer the question?\nAll the other APIs give you pitch, roll and yaw, so why can't the LM JavaScript API?\nAnyway, I had a look at the issue over the weekend.\nHere's what I have so far:\nhttp://jaanga.github.io/gestification/cookbook/pitch-roll-yaw/r1/pitch-roll-yaw.html\nThe left palm is what I am using when I have Three.js. The right palm is for when I have use plain JavaScript.\nThe left palm is not perfect and the right palm is even more not perfect.\nThe essential code I am using for the plain JavaScript is this:\n```\n            var pitchAng = Math.atan2( hand.direction[1] , -hand.direction[2] );\n            palm2.rotation.x = pitchAng;\n        var rollAng = Math.atan2( hand.palmNormal[0], hand.palmNormal[1] );\n        palm2.rotation.z = rollAng;\n\n        var yawAng = Math.atan2( hand.direction[0], -hand.direction[1] );\n        palm2.rotation.y = yawAng;\n\n```\nI assume I am beginning to go in the right direction, but I feel sure that the quality of the motion could be significantly improved. Do you have any thoughts as to how to proceed?\nTheo\n. Peter:\n\nI believe this has been resolved with the methods hand.pitch(),\nhand.roll(), and hand.yaw()?\n\n'Believing' is good.\nIt's a pitch, roll and yaw in a good direction.\n'Resolving' is a byte trickier.\nShow me the test case.\nTheo\nOn Tue, May 6, 2014 at 10:06 PM, Peter Ehrlich notifications@github.comwrote:\n\nI believe this has been resolved with the methods hand.pitch(),\nhand.roll(), and hand.yaw()?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leapmotion/leapjs/issues/91#issuecomment-42389936\n.\n. Nice!\n\nMore comments later.\nAre you open source?\nOn Tue, May 6, 2014 at 11:00 AM, KlausBlass notifications@github.comwrote:\n\nWhen I googled for \"SceneJS Leap Motion\" to find some existing\nimplementation this page of yours came up as the only relevant hit. So I\nhad to start doing something on my own. If you're interested -\nhere is a first result:\nhttps://www.youtube.com/watch?v=jAKr9ZvlGwc\nIf you know of some other implementation I would be very interested...\nKlaus\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leapmotion/leapjs/issues/96#issuecomment-42336776\n.\n. Hi gelicia\n\nI can 'second' your observation and your suggested remedy.\nTheo\n. @jackfranklin \nThank you for answering your own question. It tends to be the most effective way of doing things around here.\nQuick question: Why not just run the examples from here:\nhttp://js.leapmotion.com/examples ?\nTheo\n. Hi Victor\nThank you for the speedy reply.\nThis question is relates to obtaining the pitch, yaw and roll of a Leap Motion hand object in a designated frame as in (which does not work in JavaScript):\nvar hand = frame.hands[0];\nvar pitch = hand.direction.pitch;\nvar yaw = hand.direction.yaw;\nvar roll = hand.palmNormal.roll;\nYour response - which is accurate - refers to general algebraic calculations and does not relate to particular Leap Motion data. \nPitch, yaw and roll are sailing/aviation terms. In mechanical engineering or computer science we might just say 'rotation angles' and supply a 3D vector.\nSo, for example, in Three.js terms I am looking for a good way of obtaining rotX, rotY and rotZ for use in the following:\ncube.rotation.set( rotX, rotY, rotZ );\nAm I being clear?\nTheo\nPS Did you know that I was the founder of the HK Macintosh User Group?\n. Here's another way of looking at the palm rotation angles issue:\nhttp://jsfiddle.net/theo/6TJNx/\nLooking at the demo and wiggling your hands you will see that neither frame.hands[index].direction nor frame.hands[index].palmNormal supply us with the correct rotation angles for the palm.  \n[The correct rotation angles may well be embedded in frame._rotation which is an array of nine reals with values ranging from 1 to -1. I assume that these may well be three normalized vectors but why does it take three vectors to define the single vector of the three rotation angles is beyond me. On the other hand maybe frame._rotation may have to do something with this frame thing that remains much of a mystery to me.]\nCurrently, I am using an awful hack which has gimbal lock issues. And I remain very jealous of the other APIs with their simple roll, pitch and yaw call. So any discussion would be appreciated. Who knows? Perhaps somebody might be working on this...\n. Hi Alan\nThank you for the very detailed and very understandable explanation. I\nappreciate the effort\n\n\nJosh and I think it would be best to do this in a separate library to\nkeep the LeapJS client library lean.\nHowever, there are likely other vector math utility libraries out there\nalready, maybe one built on gl-matrix,\n\n\nBrandon Jones has certainly done a wonderful job with gl-matrix but, yes,\nmore is needed. I will respond to your pondering in a separate issue.\n\n\nI hope this covers most of your questions and issues\n\n\nYes, your reply does cover all the issues in a considered and detailed\nmanner. The thing is that your reply does not answer the question:\nWhat is the best (or even just a good) method for obtaining the same values\n\n[pitch, roll, yaw] in JavaScript?\n\nI have coded some methods that suck. It is not obvious to me as to how to\ngo from the two vectors to the three reals. Given that the Leap Motion team\nhas a deep understanding of the underlying data and code, it would seem to\nme that you would be the best people to come up with a temporary work\naround until pitch, roll and yaw can be built into Leap.js.\nTheo\nOn Thu, Aug 8, 2013 at 5:26 PM, Alan Davis notifications@github.com wrote:\n\nHi Theo, I hope this covers most of your questions and issues. :-)\nRegarding the absence of pitch, roll, and yaw functions:\n@joshbuddy https://github.com/joshbuddy removed the Vector and Matrix\nclasses in commit 25d803bhttps://github.com/leapmotion/leapjs/commit/25d803bto introduce gl-matrix, a high-performance math library, so we don't have\nto maintain our own. As @theo-armour https://github.com/theo-armournoticed, it lacks some convenience functions in our homebrew math library\nthat @deckar01 https://github.com/deckar01 ported from LeapMath.h (C++)\nto JavaScript. If we want to bring those back, we can revive Jared's\nimplementations and convert them to be compatible with vec3 and mat3 types\nprovided by gl-matrix. Josh and I think it would be best to do this in a\nseparate library to keep the LeapJS client library lean. However, there are\nlikely other vector math utility libraries out there already, maybe one\nbuilt on gl-matrix, that we can use inste ad of doing it all ourselves.\nLet's use existing libraries whenever possible!\nRegarding the \"gimbal lock\" issue with hand rotation:\nNeither hand.direction nor hand.palmNormal provide enough information to\ndetermine all 3 pitch, roll, and yaw values. You'll notice in the Java\nsnippet you copied from our Sample.java code in your first comment, we use\nhand.direction to obtain the pitch and yaw, but hand.palmNormal to obtain\nroll. This is because the user's hand is generally pointing toward their\nscreen, so the direction vector is along the roll axis and a roll value\nobtained from it would be unstable. Similarly, a yaw value obtained from\nthe palmNormal would be unstable. You can get a pitch value from\npalmNormal, but it will generally be pointing downward, rather than\nforward, as you likely want. I noticed in your JSFiddle example that you\nshow the yaw from palmNormal is \"ok\", but this is not what I observe. I\nalso see some flipping issues when the hand's palmNormal is near the\n\"neutral position along the negative y-axis.\nRegarding the frame rotation matrix:\nThe frame._rotation matrix is a cumulative value that shouldn't be used\ndirectly (hence the underscore), it needs to be compared to another frame's\nrotation matrix to get the change in rotation between them. Read the\nimplementation of Frame.rotation(sinceFrame) for the details. The\nframe._translation and ._scale contain cumulative values as well.\nAlan Davis // Leap Motion SDK Team\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leapmotion/leapjs/issues/91#issuecomment-22368202\n.\n. Hi Alan\n\nHave you had any thoughts about how to answer the question?\nAll the other APIs give you pitch, roll and yaw, so why can't the LM JavaScript API?\nAnyway, I had a look at the issue over the weekend.\nHere's what I have so far:\nhttp://jaanga.github.io/gestification/cookbook/pitch-roll-yaw/r1/pitch-roll-yaw.html\nThe left palm is what I am using when I have Three.js. The right palm is for when I have use plain JavaScript.\nThe left palm is not perfect and the right palm is even more not perfect.\nThe essential code I am using for the plain JavaScript is this:\n```\n            var pitchAng = Math.atan2( hand.direction[1] , -hand.direction[2] );\n            palm2.rotation.x = pitchAng;\n        var rollAng = Math.atan2( hand.palmNormal[0], hand.palmNormal[1] );\n        palm2.rotation.z = rollAng;\n\n        var yawAng = Math.atan2( hand.direction[0], -hand.direction[1] );\n        palm2.rotation.y = yawAng;\n\n```\nI assume I am beginning to go in the right direction, but I feel sure that the quality of the motion could be significantly improved. Do you have any thoughts as to how to proceed?\nTheo\n. Peter:\n\nI believe this has been resolved with the methods hand.pitch(),\nhand.roll(), and hand.yaw()?\n\n'Believing' is good.\nIt's a pitch, roll and yaw in a good direction.\n'Resolving' is a byte trickier.\nShow me the test case.\nTheo\nOn Tue, May 6, 2014 at 10:06 PM, Peter Ehrlich notifications@github.comwrote:\n\nI believe this has been resolved with the methods hand.pitch(),\nhand.roll(), and hand.yaw()?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leapmotion/leapjs/issues/91#issuecomment-42389936\n.\n. Nice!\n\nMore comments later.\nAre you open source?\nOn Tue, May 6, 2014 at 11:00 AM, KlausBlass notifications@github.comwrote:\n\nWhen I googled for \"SceneJS Leap Motion\" to find some existing\nimplementation this page of yours came up as the only relevant hit. So I\nhad to start doing something on my own. If you're interested -\nhere is a first result:\nhttps://www.youtube.com/watch?v=jAKr9ZvlGwc\nIf you know of some other implementation I would be very interested...\nKlaus\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/leapmotion/leapjs/issues/96#issuecomment-42336776\n.\n. Hi gelicia\n\nI can 'second' your observation and your suggested remedy.\nTheo\n. @jackfranklin \nThank you for answering your own question. It tends to be the most effective way of doing things around here.\nQuick question: Why not just run the examples from here:\nhttp://js.leapmotion.com/examples ?\nTheo\n. ",
    "tjeffree": "I get the direction through the gesture object:\njavascript\nif (gesture.direction[0] > 0) {\n  // swipe to the right\n} else {\n  // swipe to the left\n}\n. I get the direction through the gesture object:\njavascript\nif (gesture.direction[0] > 0) {\n  // swipe to the right\n} else {\n  // swipe to the left\n}\n. ",
    "robinboehm": "@L1fescape \n+1 for curtsy\nMaybe I'll use it in my project:\nhttps://github.com/angular-leap/angular-leap\n. @jo3w4rd Documentation says: \"Swipe \u2014 A linear movement of the hand.\" - that's a little bit confusion :)\nI've tested it with \"finger-swipe\" and it works really good.\nThx for the tip! :)\n. :+1: \nBut I think you should add some tests for this.\nMay you could take a look at https://github.com/leapmotion/leapjs/blob/master/test/controller.js#L79-L90\n. @L1fescape \n+1 for curtsy\nMaybe I'll use it in my project:\nhttps://github.com/angular-leap/angular-leap\n. @jo3w4rd Documentation says: \"Swipe \u2014 A linear movement of the hand.\" - that's a little bit confusion :)\nI've tested it with \"finger-swipe\" and it works really good.\nThx for the tip! :)\n. :+1: \nBut I think you should add some tests for this.\nMay you could take a look at https://github.com/leapmotion/leapjs/blob/master/test/controller.js#L79-L90\n. ",
    "KlausBlass": "When I googled for \"SceneJS Leap Motion\" to find some existing implementation this page of yours came up as the only relevant hit. So I had to start doing something on my own. If you're interested -\nhere is a first result: \nhttps://www.youtube.com/watch?v=jAKr9ZvlGwc\nIf you know of some other implementation I would be very interested...\nKlaus\n. I will upload my sources to GitHub as soon as I have something a bit more complete...\n. When I googled for \"SceneJS Leap Motion\" to find some existing implementation this page of yours came up as the only relevant hit. So I had to start doing something on my own. If you're interested -\nhere is a first result: \nhttps://www.youtube.com/watch?v=jAKr9ZvlGwc\nIf you know of some other implementation I would be very interested...\nKlaus\n. I will upload my sources to GitHub as soon as I have something a bit more complete...\n. ",
    "majodev": "James Burke was so kind to resolve my problems with leap.js when optimized via r.js. Overall the problem is related to your approach to use browserify for converting the node leap-package. Here's a working require.js config covering leap.js that can be optimized via r.js. The important part that is needed in order for it to work is onBuildRead.\njavascript\nvar config = {\n  baseUrl: \"src/\",\n  paths: {\n    \"Leap\": \"../node_modules/leapjs/leap\"\n  },\n  optimize: \"none\",\n  onBuildRead: function(id, url, contents) {\n    if (id === 'Leap') {\n        return 'define(\\'Leap\\', [], function() {var define;\\n ' + contents + ' return Leap; });';\n    } else {\n        return contents;\n    }\n  },\n  logLevel: 0,\n  name: \"issue\", // Name of script to start building from\n  insertRequire: [\"issue\"],\n  out: 'build/' + pjson.name + '-' + pjson.version + '.min.js' // Where to output\n};\nMore information can be found here. \n. James Burke was so kind to resolve my problems with leap.js when optimized via r.js. Overall the problem is related to your approach to use browserify for converting the node leap-package. Here's a working require.js config covering leap.js that can be optimized via r.js. The important part that is needed in order for it to work is onBuildRead.\njavascript\nvar config = {\n  baseUrl: \"src/\",\n  paths: {\n    \"Leap\": \"../node_modules/leapjs/leap\"\n  },\n  optimize: \"none\",\n  onBuildRead: function(id, url, contents) {\n    if (id === 'Leap') {\n        return 'define(\\'Leap\\', [], function() {var define;\\n ' + contents + ' return Leap; });';\n    } else {\n        return contents;\n    }\n  },\n  logLevel: 0,\n  name: \"issue\", // Name of script to start building from\n  insertRequire: [\"issue\"],\n  out: 'build/' + pjson.name + '-' + pjson.version + '.min.js' // Where to output\n};\nMore information can be found here. \n. ",
    "Grsmto": "Wow, sorry but it seems that I was stucked in a parallel dimension or something, I was coming from an old doc link from github pages http://leapmotion.github.io/leapjs/\nDon't know how I got here...!\nI close it.\n. Wow, sorry but it seems that I was stucked in a parallel dimension or something, I was coming from an old doc link from github pages http://leapmotion.github.io/leapjs/\nDon't know how I got here...!\nI close it.\n. ",
    "gelicia": "If you'd rather have me do it and make a pull request, I can. I just didn't write the code so I didn't want to update it.\n. https://github.com/leapmotion/leapjs/pull/105 \n. If you'd rather have me do it and make a pull request, I can. I just didn't write the code so I didn't want to update it.\n. https://github.com/leapmotion/leapjs/pull/105 \n. ",
    "rdepena": "I am also getting this error exclusively on linux mint 15 with node 0.10, the same code works on mac os 10. \n. I am also getting this error exclusively on linux mint 15 with node 0.10, the same code works on mac os 10. \n. ",
    "yuridepra": "I've the same problem on Windows 7... any suggestion?\n. Yes!! !! thank you!! this is the solution!! on win 7 the inNode option takes false value if you don't overwrite it!\n. this works fine for me...\nvar controller = new Leap.Controller({ inNode: true, enableGestures: true});\n. I've the same problem on Windows 7... any suggestion?\n. Yes!! !! thank you!! this is the solution!! on win 7 the inNode option takes false value if you don't overwrite it!\n. this works fine for me...\nvar controller = new Leap.Controller({ inNode: true, enableGestures: true});\n. ",
    "ukpark": "I have the same problem, when I run node.js in the examples folder (I am using leapjs 0.2.2). Where can I set \"inNode: true\" option? \n. I have the same problem, when I run node.js in the examples folder (I am using leapjs 0.2.2). Where can I set \"inNode: true\" option? \n. ",
    "jackfranklin": "What I ended up doing was just running my own small server in the directory. If you're on a Mac (or have Python installed):\npython -m SimpleHTTPServer 8080\nAnd then hit localhost:8080/examples.\nBut yeah, it would be nice if the documentation was updated, or came with a newer way to do this.\n. What I ended up doing was just running my own small server in the directory. If you're on a Mac (or have Python installed):\npython -m SimpleHTTPServer 8080\nAnd then hit localhost:8080/examples.\nBut yeah, it would be nice if the documentation was updated, or came with a newer way to do this.\n. ",
    "MCKapur": "I have the same problem.\n. @andyhall I think I found the problem, haven't tested yet, but I was on pre-1.0.9 (1.0.8), you need to be on the newest release for 0.3 to work.\n. Still doesn't work on 1.0.9\n. Went back to 0.2.2, works now.\n. I am also getting this error.\n. Okay, so I did a console.log on require('leapjs').Leap and it's undefined. While just require('leapjs') is valid. However, now when I run it gives me THIS error:\n_.extend(NodeConnection.prototype, BaseConnection.prototype);\n^\nReferenceError: _ is not defined\n. @jim68000 I see, how can I fix that? I followed the steps on the SO link, but it didn't seem to work...\n. You\u2019ve closed the issue, is it resolved? It breaks the whole Leap Motion JS library so I\u2019d suspect this would be an expedited fix if anything\u2026.\n--\u00a0\nRohan Kapur\nhttp://www.rohankapur.com\nOn 9 January, 2014 at 8:27:52 am, Peter Ehrlich (notifications@github.com) wrote:\nClosed #119.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome, thanks a ton!\n--\u00a0\nRohan Kapur\nhttp://www.rohankapur.com\nOn 9 January, 2014 at 8:36:57 am, Peter Ehrlich (notifications@github.com) wrote:\nyes, it is resolved! Perhaps it looks like my message didn't get emailed full by github - if you run npm install leapjs right now, beta3 will be installed, which includes the fix and a couple of others for node.\n\u2014\nReply to this email directly or view it on GitHub.\n. I have the same problem.\n. @andyhall I think I found the problem, haven't tested yet, but I was on pre-1.0.9 (1.0.8), you need to be on the newest release for 0.3 to work.\n. Still doesn't work on 1.0.9\n. Went back to 0.2.2, works now.\n. I am also getting this error.\n. Okay, so I did a console.log on require('leapjs').Leap and it's undefined. While just require('leapjs') is valid. However, now when I run it gives me THIS error:\n_.extend(NodeConnection.prototype, BaseConnection.prototype);\n^\nReferenceError: _ is not defined\n. @jim68000 I see, how can I fix that? I followed the steps on the SO link, but it didn't seem to work...\n. You\u2019ve closed the issue, is it resolved? It breaks the whole Leap Motion JS library so I\u2019d suspect this would be an expedited fix if anything\u2026.\n--\u00a0\nRohan Kapur\nhttp://www.rohankapur.com\nOn 9 January, 2014 at 8:27:52 am, Peter Ehrlich (notifications@github.com) wrote:\nClosed #119.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome, thanks a ton!\n--\u00a0\nRohan Kapur\nhttp://www.rohankapur.com\nOn 9 January, 2014 at 8:36:57 am, Peter Ehrlich (notifications@github.com) wrote:\nyes, it is resolved! Perhaps it looks like my message didn't get emailed full by github - if you run npm install leapjs right now, beta3 will be installed, which includes the fix and a couple of others for node.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "jim68000": "That looks like an underscore error. Node uses _ for the last returned value so there's a conflict with underscore out of the box. See http://stackoverflow.com/questions/5691901/using-the-underscore-module-with-node-js?rq=1\n. The error is in leapjs/lib/connection/node.js, which isn't requiring underscore. As the underscore conflict link above points out, you can use _ as a local variable pointing to underscore, but not globally.\nIf you add an extra require \nvar WebSocket = require('ws')\n  , BaseConnection = require('./base')\n  , _ = require('underscore')._;\nThe error goes away. I don't know yet whether this makes the entire stack functional.  \nEDIT: it's actually fixed in master, in commit 8413fa8e\n. That looks like an underscore error. Node uses _ for the last returned value so there's a conflict with underscore out of the box. See http://stackoverflow.com/questions/5691901/using-the-underscore-module-with-node-js?rq=1\n. The error is in leapjs/lib/connection/node.js, which isn't requiring underscore. As the underscore conflict link above points out, you can use _ as a local variable pointing to underscore, but not globally.\nIf you add an extra require \nvar WebSocket = require('ws')\n  , BaseConnection = require('./base')\n  , _ = require('underscore')._;\nThe error goes away. I don't know yet whether this makes the entire stack functional.  \nEDIT: it's actually fixed in master, in commit 8413fa8e\n. ",
    "mattbaker": "This just bit me, hope it makes it into a release soon. It's bound to be frustrating a lot of developers.\nGlad this thread is here for reference, 8413fa8 did fix the issue.\n. This just bit me, hope it makes it into a release soon. It's bound to be frustrating a lot of developers.\nGlad this thread is here for reference, 8413fa8 did fix the issue.\n. ",
    "mcfarljw": "I'm interested in having this functionality too. I'm actually ok with it just loading in the global namespace. The problem I'm having now is it doesn't play friendly with the requirejs optimizer when concatenating into a single file (with and without minification).\nI'll give it a look and see if I can find any quick and easy fixes to get it working, but definitely think it's something that should be supported in the future.\n. Hey @pehrlich, my application is using requirejs in two ways. The actual application files I've coded up are being loaded in a modular way, but I'm using it to load all of my libraries up front (in a not so modular way). Here is a link to the libraries file I'm using:\nhttps://github.com/mcfarljw/skritter-html5/blob/13c261c37c2cce750bc6fe872b98aa7f9d574cbf/public_html/js/app/Libraries.js\nSo in my instance I'm not too sure if it's not playing nicely with requirejs or it's not happy about being concatenated in with the other specified libraries. I'm be inclined to say the latter, because it loads globally and works just fine when not concatenated.\n. I'm interested in having this functionality too. I'm actually ok with it just loading in the global namespace. The problem I'm having now is it doesn't play friendly with the requirejs optimizer when concatenating into a single file (with and without minification).\nI'll give it a look and see if I can find any quick and easy fixes to get it working, but definitely think it's something that should be supported in the future.\n. Hey @pehrlich, my application is using requirejs in two ways. The actual application files I've coded up are being loaded in a modular way, but I'm using it to load all of my libraries up front (in a not so modular way). Here is a link to the libraries file I'm using:\nhttps://github.com/mcfarljw/skritter-html5/blob/13c261c37c2cce750bc6fe872b98aa7f9d574cbf/public_html/js/app/Libraries.js\nSo in my instance I'm not too sure if it's not playing nicely with requirejs or it's not happy about being concatenated in with the other specified libraries. I'm be inclined to say the latter, because it loads globally and works just fine when not concatenated.\n. ",
    "dubbl": "You can use require.js and LeapJS without globals if you define a shim in the requireJS config and export 'Leap', like\njavascript\nrequire.config({\n    paths: {\n        leapjs: 'libs/leap-0.6.0'\n    },\n    shim : {\n        'leapjs': { exports: 'Leap'}\n    }\n});\n// load leap motion library\nrequire(['leapjs'], function(Leap) {\n    console.log(Leap);\n});\nEdit: Same thing, now with LeapJS plugin support:\njavascript\nrequire.config({\n    paths: {\n        leapjs: 'libs/leap-0.6.0',\n        leapjswithplugins: 'libs/leap-plugins-0.1.6'\n    },\n    shim : {\n        'leapjs': { exports: 'Leap'},\n        'leapjswithplugins': {exports: 'Leap', deps: ['leapjs']}\n    }\n});\n// load leap motion libraries\nrequire(['leapjswithplugins'], function(Leap) {\n    console.log(Leap);\n    }).use('screenPosition'); // for example\n});\n. You can use require.js and LeapJS without globals if you define a shim in the requireJS config and export 'Leap', like\njavascript\nrequire.config({\n    paths: {\n        leapjs: 'libs/leap-0.6.0'\n    },\n    shim : {\n        'leapjs': { exports: 'Leap'}\n    }\n});\n// load leap motion library\nrequire(['leapjs'], function(Leap) {\n    console.log(Leap);\n});\nEdit: Same thing, now with LeapJS plugin support:\njavascript\nrequire.config({\n    paths: {\n        leapjs: 'libs/leap-0.6.0',\n        leapjswithplugins: 'libs/leap-plugins-0.1.6'\n    },\n    shim : {\n        'leapjs': { exports: 'Leap'},\n        'leapjswithplugins': {exports: 'Leap', deps: ['leapjs']}\n    }\n});\n// load leap motion libraries\nrequire(['leapjswithplugins'], function(Leap) {\n    console.log(Leap);\n    }).use('screenPosition'); // for example\n});\n. ",
    "PascalPrecht": "@jo3w4rd Yea @robinboehm and me having the same problem in our angular.js adapter. However, kinda great to see that it's not an issue on our site. We're currently working around this with a timeout blocker. Hopefully this gets fixed very soonish!\n. @jo3w4rd Ah! Good catch! Didn't know that! We'll investigate.\n. @jo3w4rd Yea @robinboehm and me having the same problem in our angular.js adapter. However, kinda great to see that it's not an issue on our site. We're currently working around this with a timeout blocker. Hopefully this gets fixed very soonish!\n. @jo3w4rd Ah! Good catch! Didn't know that! We'll investigate.\n. ",
    "jo3w4rd": "@PascalPrecht , @robinboehm, Are you sure this is the same problem? Swipes are tied to fingers, not the hand, so you could potentially have 5 swipes generated simultaneously with one movement of the hand. Gestures from the Leap should be considered raw data -- you still need to massage them into something reasonable for your application  (as compared to gestures from the OS or browser -- which have already been massaged for you).\n. The central issue, which can occur with the animationFrame loop, is that there is information in the Gesture object which is tied to a frame (Pointable ID, Hand IDs), but a different frame object is passed to the gesture event callback. \nThus if you try to look up the pointable or hand in the frame by id, and then use the values, then you will get the wrong information. In fact the hand or pointable may no longer even exist.\n. We may just have to document that there is a potential mismatch between the gesture and the current frame when using animationFrames.\n. The JSON object for V5 will have additional data for hands and fingers from the skeleton API. (It hasn't been released yet, but that's currently planned as protocol 5.)\n. My mistake. That's the way \"animationFrame\" behaves. Different meaning of the term, frame, in this case. I guess.\n. I only see this happening with other apps using LeapJS (or the WebSocket server directly). Native apps, including the both the Visualizers, don't affect gestures in web apps. \n. Also, if you change the frame loop to use deviceFrames, the app does get frames in the background.\nHere's the really basic example to duplicate:\n```\n\n\n\n\n\n\n\n    var info = document.getElementById('info');</p>\n<pre><code>var controller = new Leap.Controller({\n host: '127.0.0.1',\n port: 6437,\n enableGestures: true,\n frameEventName: 'animationFrame',\n useAllPlugins: true\n});\n\ncontroller.connect();\ncontroller.setBackground(true);\ncontroller.on('frame', onFrame);\nfunction onFrame(frame) {\n    info.innerHTML = frame.id;\n}\n\n&lt;/script&gt;\n</code></pre>\n<p></body>\n</html>\n```\n. It is an arbitrary placement of the decimal point, but why should LeapJS use a different placement than the native Leap Motion API?\n. Shouldn't an invalid Frame still have a well-constructed InteractionBox object? Invalid objects should be well-formed to avoid problems just like this.\n. isFlipped was never actually implemented in the native APIs either -- it always returns false. There's actually no way for the Leap Motion sensor to know whether hands are coming in from one side or the other (since the device can be mounted either way). It doesn't contain any sensors that would tell it this. In auto-rotate mode, the software assumes are coming into view from the \"normal\" direction -- in desktop mode that will be from the user toward the device -- in HMD mode that will be from below the device reaching upward. The software will flip the z-axis to make this assumption true. However, until the hands first appear, the orientation is in an unknown state, so we can't really say whether the orientation is \"flipped\" or not \"flipped.\" In short, the coordinates of the hand will always be correct for the normal situation. If the user has contorted themselves to put their hands above their head and then down into the field of view, then the auto-orientation result will be incorrect. If you need this behavior, you will have to turn off the auto-orientation feature and provide a way for the user to manually flip the orientation if they have mounted the device upside down.\n. Yes, it happens with circles as well as swipes. I don't know about your second question.\n. This appears to be a bug in the main API, not limited to LeapJS. PLAT-2877.\n. There are no depth maps. The Leap Software uses stereo images, not depth maps. We also have no current plans to expose these stereo images to web applications.\n. @PascalPrecht , @robinboehm, Are you sure this is the same problem? Swipes are tied to fingers, not the hand, so you could potentially have 5 swipes generated simultaneously with one movement of the hand. Gestures from the Leap should be considered raw data -- you still need to massage them into something reasonable for your application  (as compared to gestures from the OS or browser -- which have already been massaged for you).\n. The central issue, which can occur with the animationFrame loop, is that there is information in the Gesture object which is tied to a frame (Pointable ID, Hand IDs), but a different frame object is passed to the gesture event callback. </p>\n<p>Thus if you try to look up the pointable or hand in the frame by id, and then use the values, then you will get the wrong information. In fact the hand or pointable may no longer even exist.<br />\n. We may just have to document that there is a potential mismatch between the gesture and the current frame when using animationFrames.\n. The JSON object for V5 will have additional data for hands and fingers from the skeleton API. (It hasn't been released yet, but that's currently planned as protocol 5.)\n. My mistake. That's the way \"animationFrame\" behaves. Different meaning of the term, <em>frame</em>, in this case. I guess.\n. I only see this happening with other apps using LeapJS (or the WebSocket server directly). Native apps, including the both the Visualizers, don't affect gestures in web apps. <br />\n. Also, if you change the frame loop to use deviceFrames, the app does get frames in the background.</p>\n<p>Here's the really basic example to duplicate:</p>\n<p>```\n<html>\n<head>\n    <script src=\"http://js.leapmotion.com/leap-0.4.2.min.js\">\n\n\n\n",
    "ytham": "(and yes, I realize this is fixed in the latest version, but it is not pushing the latest version when the install command is run).\n. (and yes, I realize this is fixed in the latest version, but it is not pushing the latest version when the install command is run).\n. ",
    "xonev": "Hmm, I missed the property interactionBox on Leap.Frame objects.\n. Hmm, I missed the property interactionBox on Leap.Frame objects.\n. ",
    "paulmand3l": "Might be nice to explicitly document this as a way to either inject data into the various frame objects or to generate events for particular frame conditions.\n. Might be nice to explicitly document this as a way to either inject data into the various frame objects or to generate events for particular frame conditions.\n. ",
    "danieltartarottisobrosa": "There is Gulp too. It is becoming more popular than Grunt.\nhttps://github.com/gulpjs/gulp.\n. There is Gulp too. It is becoming more popular than Grunt.\nhttps://github.com/gulpjs/gulp.\n. ",
    "tuupola": "In couple of months there will be a Zurb.js ;) I would go with Grunt which is more established at the moment.\n. In couple of months there will be a Zurb.js ;) I would go with Grunt which is more established at the moment.\n. ",
    "ngryman": "Gulp is new and seems very cool, but is certainly not more popular than Grunt.\nThat said whatever you choose that is available on mpm will be better than make :)\n. Hi,\n@pehrlich I was using Leap.loop({ enableGestures: true }, callback).\nBut as I said it also happens on your online demos using gestures.\nI use the regular visualizer I guess, the one from Leap Motion Control Panel \u2192 Visualizer.\n. I was using 1.1.3+9188.\n. Gulp is new and seems very cool, but is certainly not more popular than Grunt.\nThat said whatever you choose that is available on mpm will be better than make :)\n. Hi,\n@pehrlich I was using Leap.loop({ enableGestures: true }, callback).\nBut as I said it also happens on your online demos using gestures.\nI use the regular visualizer I guess, the one from Leap Motion Control Panel \u2192 Visualizer.\n. I was using 1.1.3+9188.\n. ",
    "SeanJanis": "Reviewed w/ Peter, looks good :+1: \n. :sailboat: \n. Sorry, catching up late. I don't have as much context on the Pull Request, but just caught the last comment. \nLet's not merge until we get a +1 from someone on the LeapJS team. I agree the PR has been open for a while, but since it's a public repo, we need to tread lightly. @neptunius @pehrlich, can you weigh in?\n. Roger that, thanks for the update - @neptunius @pehrlich, please give the official +1 if you're satisfied or add a comment if you think we should hold.\n. See minor comments above, then :+1: \n. :+1: , looks good on my end, @bingomanatee / @neptunius please review as well\n. @andrewthornton - I'm also getting the same checksum issue on a fresh npm leapjs install. Also tried installing with unstable and past node releases, but no luck. I'll work with @pehrlich to get this sorted out today:\n``` bash\n$ npm -v\n1.4.8\n$ node -v\nv0.10.27\n$ sudo npm install leapjs\nnpm http GET https://registry.npmjs.org/leapjs\nnpm http 304 https://registry.npmjs.org/leapjs\nnpm http GET https://registry.npmjs.org/leapjs/-/leapjs-0.5.0.tgz\nnpm http 200 https://registry.npmjs.org/leapjs/-/leapjs-0.5.0.tgz\nnpm ERR! Error: shasum check failed for /Users/sjanis/tmp/npm-31900-aU7mm2Bu/1399032590528-0.5103966603055596/tmp.tgz\nnpm ERR! Expected: 52ab73dcc9db693b78bc1c6344c4e1994b660df6\nnpm ERR! Actual:   6080cf7c2c636b3d7644ce818ffacfc91f001322\n```\n. Confirmed working on my end, thanks @pehrlich!\n. Reviewed w/ Peter, looks good :+1: \n. :sailboat: \n. Sorry, catching up late. I don't have as much context on the Pull Request, but just caught the last comment. \nLet's not merge until we get a +1 from someone on the LeapJS team. I agree the PR has been open for a while, but since it's a public repo, we need to tread lightly. @neptunius @pehrlich, can you weigh in?\n. Roger that, thanks for the update - @neptunius @pehrlich, please give the official +1 if you're satisfied or add a comment if you think we should hold.\n. See minor comments above, then :+1: \n. :+1: , looks good on my end, @bingomanatee / @neptunius please review as well\n. @andrewthornton - I'm also getting the same checksum issue on a fresh npm leapjs install. Also tried installing with unstable and past node releases, but no luck. I'll work with @pehrlich to get this sorted out today:\n``` bash\n$ npm -v\n1.4.8\n$ node -v\nv0.10.27\n$ sudo npm install leapjs\nnpm http GET https://registry.npmjs.org/leapjs\nnpm http 304 https://registry.npmjs.org/leapjs\nnpm http GET https://registry.npmjs.org/leapjs/-/leapjs-0.5.0.tgz\nnpm http 200 https://registry.npmjs.org/leapjs/-/leapjs-0.5.0.tgz\nnpm ERR! Error: shasum check failed for /Users/sjanis/tmp/npm-31900-aU7mm2Bu/1399032590528-0.5103966603055596/tmp.tgz\nnpm ERR! Expected: 52ab73dcc9db693b78bc1c6344c4e1994b660df6\nnpm ERR! Actual:   6080cf7c2c636b3d7644ce818ffacfc91f001322\n```\n. Confirmed working on my end, thanks @pehrlich!\n. ",
    "supernancychen": "\n\n\n\n\n\n. \n\n\n\n\n\n. ",
    "uberbruns": "you mean npm? currently I use 1.3.11. I'll update.\n. I updated npm and I still get the same error. I downloaded the file manually with curl and checked the shasum. It's the same shasum npm (6080cf7c2c636b3d7644ce818ffacfc91f001322) gets.\nMaybe it's a CDN issue?\n. Seams to be npm issue after all: https://github.com/npm/npm/issues/2701\nSorry that I bothered you.\n. I haven't found a fix. But there are a few more issues open related to this problem. I installed leapjs manually and will keep an eye on the issue.\n. Yes \u2013 but only the manual way.\n- Download the leapjs-0.5.0-2.tgz-File\n- unzip it into node_modules/leapjs\n- go into this directory and run npm install\n. you mean npm? currently I use 1.3.11. I'll update.\n. I updated npm and I still get the same error. I downloaded the file manually with curl and checked the shasum. It's the same shasum npm (6080cf7c2c636b3d7644ce818ffacfc91f001322) gets.\nMaybe it's a CDN issue?\n. Seams to be npm issue after all: https://github.com/npm/npm/issues/2701\nSorry that I bothered you.\n. I haven't found a fix. But there are a few more issues open related to this problem. I installed leapjs manually and will keep an eye on the issue.\n. Yes \u2013 but only the manual way.\n- Download the leapjs-0.5.0-2.tgz-File\n- unzip it into node_modules/leapjs\n- go into this directory and run npm install\n. ",
    "andrewthornton": "@uberbruns Were you able to get this working? I am having the same issue.\n. Thanks, not working for me however. Mine fails installing leap's dependencies. I'm going to have to dig into the stack trace to see I can make sense of it.\n. @uberbruns Were you able to get this working? I am having the same issue.\n. Thanks, not working for me however. Mine fails installing leap's dependencies. I'm going to have to dig into the stack trace to see I can make sense of it.\n. ",
    "krasimir": "@pehrlich Did you do something while publishing the module that fixes the issue?\n. I'm asking because I had a problem with a module of main. That's so weird. It didn't work for me but I just managed to install the package.\n1. Republish a new version of the module several times changing the version\n2. Downgrade the npm version to 1.3.21 and published again\n3. Run npm set registry https://registry.npmjs.org/ on the host machine\n4. Tried again and it worked\nAnyway, thank you for the answer.\n. @pehrlich Did you do something while publishing the module that fixes the issue?\n. I'm asking because I had a problem with a module of main. That's so weird. It didn't work for me but I just managed to install the package.\n1. Republish a new version of the module several times changing the version\n2. Downgrade the npm version to 1.3.21 and published again\n3. Run npm set registry https://registry.npmjs.org/ on the host machine\n4. Tried again and it worked\nAnyway, thank you for the answer.\n. ",
    "Dshankar": "@pehrlich any updates on Image API in JS? IR/RGB passthrough in the browser would be fantastic, even if it requires ugly hacks on my part\n. Chrome extensions have raw TCP sockets (chrome.sockets.tcp). I'm thinking of writing a helper app that uses the ObjectiveC Image API to get image frames, correct distortion, and stream over TCP to the browser. This should get around throughput issues and have little-to-no discernible latency.\nI should have some downtime this weekend to work on this. It's an ugly hack but it might work.\n. @pehrlich any updates on Image API in JS? IR/RGB passthrough in the browser would be fantastic, even if it requires ugly hacks on my part\n. Chrome extensions have raw TCP sockets (chrome.sockets.tcp). I'm thinking of writing a helper app that uses the ObjectiveC Image API to get image frames, correct distortion, and stream over TCP to the browser. This should get around throughput issues and have little-to-no discernible latency.\nI should have some downtime this weekend to work on this. It's an ugly hack but it might work.\n. ",
    "Traksewt": "I just added a jsfiddle demonstrating the problem:\nhttp://jsfiddle.net/7cqmcoxd/\n. Thanks that workaround helped.\n. I just added a jsfiddle demonstrating the problem:\nhttp://jsfiddle.net/7cqmcoxd/\n. Thanks that workaround helped.\n. ",
    "ktansai": "When I use Leap motion attached on HMDs, I can't recognize whether hands coming from up or down and left or right in \"auto flip tracking mode\".\nIf you have any ideas that recognize absolute position & direction of hands instead , it do for me , too.\n. When I use Leap motion attached on HMDs, I can't recognize whether hands coming from up or down and left or right in \"auto flip tracking mode\".\nIf you have any ideas that recognize absolute position & direction of hands instead , it do for me , too.\n. ",
    "GabrielHare": "I\u2019ll take a look tomorrow. Bug me about it please? ;-)\n\nOn 13 Nov, 2014, at 7:41 PM, Peter Ehrlich notifications@github.com wrote:\ncross reference: #191 https://github.com/leapmotion/leapjs/issues/191\n\u2014\nReply to this email directly or view it on GitHub https://github.com/leapmotion/leapjs/pull/198#issuecomment-63006554.\n\n\nNOTE: The information in this message and any attachments is confidential \ninformation intended only for the individual to whom it is addressed.  If \nyou are not the intended recipient, any distribution of this message or its \nattachments is prohibited.  If you have received this email in error, \nplease immediately notify us and delete the message.  Thank you.\n. Does the same happen for circles?\nAlso: could this be due to the use of the LegacyIsExtended test for fingers, instead of the skeletal IsExtended test?\n. I\u2019ll take a look tomorrow. Bug me about it please? ;-)\n\nOn 13 Nov, 2014, at 7:41 PM, Peter Ehrlich notifications@github.com wrote:\ncross reference: #191 https://github.com/leapmotion/leapjs/issues/191\n\u2014\nReply to this email directly or view it on GitHub https://github.com/leapmotion/leapjs/pull/198#issuecomment-63006554.\n\n\nNOTE: The information in this message and any attachments is confidential \ninformation intended only for the individual to whom it is addressed.  If \nyou are not the intended recipient, any distribution of this message or its \nattachments is prohibited.  If you have received this email in error, \nplease immediately notify us and delete the message.  Thank you.\n. Does the same happen for circles?\nAlso: could this be due to the use of the LegacyIsExtended test for fingers, instead of the skeletal IsExtended test?\n. ",
    "brianpeiris": "Thanks! Bower is smart enough to order the versions itself, so that's not a problem.\n. Thanks! Bower is smart enough to order the versions itself, so that's not a problem.\n. ",
    "nanmenxue": "thank you so much ~ i love you ,it is good enough .but i have a little question.the one you give me is a little flat.how to draw a more beautiful hand like the one i give.is it use some tools?or is it just coded by three.js?\n. i use firefox ,it can work! i know why it can't wort.it need http.\n. thank you so much ~ i love you ,it is good enough .but i have a little question.the one you give me is a little flat.how to draw a more beautiful hand like the one i give.is it use some tools?or is it just coded by three.js?\n. i use firefox ,it can work! i know why it can't wort.it need http.\n. ",
    "capnmidnight": "You probably just have your firewall settings blocking that port.\nOn Apr 29, 2015 3:51 AM, \"Joe Chasinga\" notifications@github.com wrote:\n\nIs there a way that a Node server running leapjs on another computer can\nconnect via websocket to the host computer running leapd on port 6437? i.e.\nthis browser function:\nLeap.loop({host: '192.168.x.xx'}, function(frame) {\n    // print frame data to browser console\n});\nOf course on browser this didn't work and got net::ERR_CONNECTION_REFUSED,\nbut is it possible to get the data from another node server? (I noticed in\nthe node.js example there's no way to supply the host argument)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/leapmotion/leapjs/issues/203.\n. You probably just have your firewall settings blocking that port.\nOn Apr 29, 2015 3:51 AM, \"Joe Chasinga\" notifications@github.com wrote:\nIs there a way that a Node server running leapjs on another computer can\nconnect via websocket to the host computer running leapd on port 6437? i.e.\nthis browser function:\nLeap.loop({host: '192.168.x.xx'}, function(frame) {\n    // print frame data to browser console\n});\nOf course on browser this didn't work and got net::ERR_CONNECTION_REFUSED,\nbut is it possible to get the data from another node server? (I noticed in\nthe node.js example there's no way to supply the host argument)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/leapmotion/leapjs/issues/203.\n. \n",
    "codemercenary": "@capnmidnight The webserver is actually configured specifically to accept connections only from localhost.  I'm not exactly sure how I would design a sufficiently secure authentication scheme to serve user input content over the general internet.\n. Bug is trackable to the service in this case.  We've got a fix laid in, it will make it in the next release.\n. @capnmidnight The webserver is actually configured specifically to accept connections only from localhost.  I'm not exactly sure how I would design a sufficiently secure authentication scheme to serve user input content over the general internet.\n. Bug is trackable to the service in this case.  We've got a fix laid in, it will make it in the next release.\n. ",
    "tkluysk": "For others stumbling to this place two years later...\nI had to do a few things:\n\nModify the host IP in base.js (127.0.0.1 by default) to use the IP of the machine the Leap Server is running on.\nModify my config.json file as per this article.\nDisable my local Windows firewall.\n. For others stumbling to this place two years later...\n\nI had to do a few things:\n\nModify the host IP in base.js (127.0.0.1 by default) to use the IP of the machine the Leap Server is running on.\nModify my config.json file as per this article.\nDisable my local Windows firewall.\n. \n",
    "petoem": "@raimo Yes, I've figured it out after reading the \"lib/controller.js\" code. \nThanks for your answer :thumbsup:\n. @raimo Yes, I've figured it out after reading the \"lib/controller.js\" code. \nThanks for your answer :thumbsup:\n. ",
    "seloman": "nvm, I figured out, that you can only detect fingers after you made sure, that the hand is tracked\n(frame.hands.length>0)\n. nvm, I figured out, that you can only detect fingers after you made sure, that the hand is tracked\n(frame.hands.length>0)\n. ",
    "donmccurdy": "That's exactly what I needed, thanks! :smile: \n. That's exactly what I needed, thanks! :smile: \n. ",
    "sumeetkpatel": "Yes, awesome.\nGoing to that address had an invalid certificate\nThere are issues with the site's certificate chain (net::ERR_CERT_DATE_INVALID).\nI accepted the certificate anyway and things worked.\nI had only just updated my run-time before posting originally, I guess the install didn't refresh the certificate.\n. Yes, awesome.\nGoing to that address had an invalid certificate\nThere are issues with the site's certificate chain (net::ERR_CERT_DATE_INVALID).\nI accepted the certificate anyway and things worked.\nI had only just updated my run-time before posting originally, I guess the install didn't refresh the certificate.\n. ",
    "aknoerig": "Thanks for the suggestion! I'm using LeapJS 0.6.4, service 2.3.1 on macOS Sierra, model LM-010.\nIndeed the hack seems to work when fleshed out like this:\njavascript\nmyController.on('connect', function() {\n  var origHandleData = this.connection.handleData;\n  this.connection.handleData = function(data) {\n    try {\n      return origHandleData.call(this, data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n});\nAnyway, I believe this needs to be fixed in the library, maybe in the form of an error callback:\njavascript\nmyController.on('error', function() {...});\nOtherwise leapjs cannot be used safely with node at this point.\n. Thanks for the suggestion! I'm using LeapJS 0.6.4, service 2.3.1 on macOS Sierra, model LM-010.\nIndeed the hack seems to work when fleshed out like this:\njavascript\nmyController.on('connect', function() {\n  var origHandleData = this.connection.handleData;\n  this.connection.handleData = function(data) {\n    try {\n      return origHandleData.call(this, data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n});\nAnyway, I believe this needs to be fixed in the library, maybe in the form of an error callback:\njavascript\nmyController.on('error', function() {...});\nOtherwise leapjs cannot be used safely with node at this point.\n. ",
    "benjaminwingert": "I encountered the same problem. I solved this directly inside the leapjs code by surrounding the JSON.parse(data) with a try-catch-block.\nBaseConnection.prototype.handleData = function(data) {\n    try {\n        var message = JSON.parse(data);\n        var messageEvent;\n        if (this.protocol === undefined) {\n          messageEvent = this.protocol = chooseProtocol(message);\n          this.protocolVersionVerified = true;\n          this.emit('ready');\n        } else {\n          messageEvent = this.protocol(message);\n        }\n        this.emit(messageEvent.type, messageEvent);\n    } catch(err) {\n        // do nothing if data is invalid\n    }\n}\nAnyway I believe too that this should be fixed inside the library itself as aknoerig suggested.\n. I encountered the same problem. I solved this directly inside the leapjs code by surrounding the JSON.parse(data) with a try-catch-block.\nBaseConnection.prototype.handleData = function(data) {\n    try {\n        var message = JSON.parse(data);\n        var messageEvent;\n        if (this.protocol === undefined) {\n          messageEvent = this.protocol = chooseProtocol(message);\n          this.protocolVersionVerified = true;\n          this.emit('ready');\n        } else {\n          messageEvent = this.protocol(message);\n        }\n        this.emit(messageEvent.type, messageEvent);\n    } catch(err) {\n        // do nothing if data is invalid\n    }\n}\nAnyway I believe too that this should be fixed inside the library itself as aknoerig suggested.\n. "
}