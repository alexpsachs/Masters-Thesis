{
    "jtmalinowski": "I'll take a look at it. We want to test just 3.1, 3.2, and 4.0 now, right? Ember-rails has this implemented so it shouldn't be hard.\n. PR send here https://github.com/facebook/react-rails/pull/4\n. Alright!\n. Well, if you consider this article by Yehuda I don't see any reason to keep gemfile locks for different rails versions. We should be compatible with what we define as dependencies, not with particular versions of gem. For now it works fine, but I'll ask someone about it.\n. OK, I'll keep an eye on this: https://github.com/thoughtbot/appraisal/issues/49\n. The easiest way I suppose is to register vendor after default sprockets paths are added, then due to the way priorities are done, assets.resolve('react.js') will return user's react if it exists within the project, or ours' otherwise. Same with jsxtransformer.\nSome potential problems as I started implementing:\n1. We always use react.js and depending on variant, either react.js, or react.min.js is available under this path. There is a certain discrepancy here, because end-user cannot do the same, i.e. he will have to use the same version of react for dev/production\n2. Do we want to test this? If so, probably the best way would be to duplicate dummy app, because otherwise we would have to mess with assets files inside tests.\n. This is implemented in #12 \n. I'll test this in a few days, seems like no one has confirmed the problem since last month.\n. Hey!,\nIt seems that phantomjs cannot run React code, I'll post the issue in React repo.\nThanks for that.\n. Will let you know here as soon as it is pulled in and published to rubygems, in the meantime if you need a workaround, you would have to create a copy of react.js and apply the required change (it's in the PR).\n. As suggested in the PR, just use polyfill for Function.prototype.bind\n. I think we could add es5-shim when test environment is present. Put on my TODO list to rethink or close this issue.\n. How about we display a warning when poltergeist is detected? (phantomjs has been stuck at the shitty version of webkit for quite a time now) On the other hand it looks like ES 6+ features will be shimmed on your side - due to the browser support?\n. I just noticed there is a problem with rails <= 4.0, we need to fit initializer after appending default paths, but before finisher_hook, it's weird that initialize \"...\", :after => :append_assets_path did not work as intended, still investigating this. \n. Got this to work, but a cleanup is needed yet. I'm not sure why I couldn't disable sprockets cache, even with \nconfig.assets.cache_store = :null_store\nSo there simply is a example2.js.jsx, to be compiled with dropped-in JSXTransformer.\n. @zpao let me know if you're fine with this approach before I proceed\n. Funny how they did it, just a 2 lines fix, I should have this finished in a few days. \n. Dirty, but it does the job.\n. I was away for a few days.\nBTW, it's pretty important that we have a fix in JSXTransformer.js for execjs, that was introduced in 0.4.1, included info about this in docs.\n. If JSXTransformer interface stays unchanged, there's no need to tie them. I think adding something like react-source >= 0.4.1 would suffice. If we keep just s.add_dependency 'react-source' without any version, then bundler will take the newest one. So there's no need to make users add this declaration, but applications should define at least minor version of each gem they use (well, Semver says minor is backwards-compatible, but that's another topic) - and this is why it's recommended to define react-source version explicitly.\n0.4 ~ 1.0\n0.5 ~ 1.1\nSo you're just hiding the fact that react-rails and react-source versions are tied together...\n. OK, I got this rebased against current master - this is all as we discussed on IRC. Once we're ok here - I'll probably want to do some squashing.\n. All finished as discussed on IRC - rebased again to be up to date with master. I will be able to add units tests for #15 once this is merged.\n. any updates here? @zpao \n. Sure thing, we could get back to our talk about streamlining this a bit if more PRs were to come.\n. This PR is so stretched in time I actually started forgetting how and what should be done. So AFAIR - react-source is to be specified in gemspec so adding it to Gemfile would achieve nothing. We are allowing to drop-in your chosen version of react into /vendor/assets/react instead.\n. Totally fine.\n. Shouldn't this first appear in react-source?\n. 1. This is not a repo for react, just for it's RoR helpers. What you posted is a react's issue, repo is here: https://github.com/facebook/react\n2. You are setting state once at the beginning of components life, later you change props, but props.color is only assigned to state.color in getInitialState once, and it's not run later on the same component's instance. See why&how here: http://facebook.github.io/react/docs/component-specs.html\n3. Please don't post any more issues on react here, just issues concerning react with Ruby on Rails. If you need more help post an issue on react's repo (link above) or better go to freenode's #reactjs channel \n. A lot of catching up to do on my side... can't tell you right now from the top of my head, but there surely is a nice way! If you're fine with that, I would add tests for this in https://github.com/facebook/react-rails/pull/12 Yeah I know I'm kinda late - but I'm very positive I'll have time to finish it this weekend! Btw, I would love to start using coffee in jsx so much, that it makes me want to finish #12 today :)\n. That looks fine, I would go for unit tests here, what do you think?\n. We had a longer discussion on IRC about gemfiles and decided to have them in the repo. AFAIK argument no. 2, i.e. developer-specific paths, is either already outdated or will soon be, because (https://github.com/thoughtbot/appraisal/issues/49) bundler 1.4 makes these paths relative. I haven't checked yet though.\nAnyway, such changes as including gemfiles or not should belong to a separate PR I think.\nI would ask you to be patient for a few next days, because I will be finishing #15 and #12 even though they are (especially #12) seemingly dead. I hope we'll then have your PR rebased against master and we'll rethink if it's an optimal solution. \n. :+1: \n. I thought it was gonna be much harder.\nOne thing I would add is that you don't have to pack all components into components.js, you could just assume that say: MySpecialComponent is in a file called my_special_component.js and let the asset pipeline do the rest.\nAnother thing is (I haven't tackled that idea in my projects yet) is that sometimes I would want to fetch some data from an http api (otherwise the component that you are rendering will be empty). Implementing that, would give us both faster rendering on the client and (very important!) SEO improvements.\n. @quark-zju @zpao Seems fine, but I'll take another look tomorrow. I just did a dumb take ours + take theirs rebase of this against my PR, and all tests passed. :+1: \n. I will take a look at it when I'm back from skiing next week\n. OK, so... I'm gonna tackle this on Monday.\nIn the meantime could you try this branch https://github.com/jakubmal/react-rails/tree/feature/react-dropin ? Just to prove it's not shady it's here as PR, awaiting some minor formal fixes.\nYou are including it inside a rails engine, would you mind if I asked for a little gist? @kjf  @adtaylor  @steadicat \n. @steadicat is your last message \n\nYour branch did not fix it for me.\n\nabout usage inside rails engine, or not?\n. @kjf you still there?\n. @kjf just making sure, you haven't forgotten...\n@adtaylor maybe you could spare a moment for a repro case\n. Hi, no problem.\nIt is a combination of:\n1. Rails Engine architecture\n2. https://github.com/facebook/react-rails/issues/11\nI'm going to describe the steps I took to make this work, and if it's not enough for you, I could send you a working application.\nLet's start with Rails Engine. Take a look at: http://stackoverflow.com/a/5850503/362830\nEssentially, you need to load dependencies of your engine yourself.\nThen comes the very unfortunate #11, react will not be added to assets, unless config.react.variant is set. You will have to add an initializer, which will run before react_rails.setup_engine. I could slightly help you here, and create a fork for you, variant would come from Rails.env unless otherwise defined.\nAs to when this fix could be in a main branch, not soon, but there are certain changes coming... I will let you know.\n. @steadicat separate issue, please :+1: \n@kjf do you think anything should be changed on react-rails' part? or is should we rather close this?\n. Yeah, you have to force-push after rebase.\nI think it would be valuable to be able to pass data (say JSON) to the component that will be rendered, not sure if you thought about that?\n. @zpao will let you know here over the weekend\n. @robertfall this PR is tied to 1.0.0.pre, and it (1.0.0.pre) needs to be ironed out a bit first.\n. @robertfall I'm testing this PR this weekend, if it's okay it'll be merged right after rebasing. See issues for problems that need to be reviewed before going 1.0.0.rc / 1.0.0\n. @johnthethird could you rebase as soon as you can? I don't want to leave this hanging for too long and I'm pretty sure other PRs will be conflicting. I'll confirm this is good to go sometime today or tomorrow, but in the meantime it would be great if you rebased.\n. @johnthethird \nFirst, thanks for this! It is going to add a great value to our little react-rails! And surely you put a lot of effort into this.\nI think we'll be able to iron out a couple of issues that I highlighted soon.\nAlso, don't hesitate to correct me wherever I'm wrong :+1: \n. @johnthethird could you PR 940c7f2 separately, if you don't mind? I doesn't really fit this PR...\n. @johnthethird I just mailed you, why did you close this?\nEDIT: I'm not sure what happened here - please email me if something is not right!\n. This is getting lengthy, just as I didn't want. I think it'll be sensible to just merge as soon as you rebase, and then work iteratively from there. @johnthethird what do you think?\n. Hi! @petehunt This should get merged today :+1: \n. I'll submit unresolved problems from here as new issues to streamline working on this.\n. looks like you're busy with other things then :)\n. Hm, I don't think it's pushed to rubygems yet, but good you spotted this.\n. We definitely need a disclaimer in master's README to say that 1.x is something different than 0.x, and anyone interested in README should checkout specific branch - @jakecraige do you feel like adding this disclaimer? Do you know the differences between 0.x and 1.x ?\n. @jakecraige are you still interested in contributing here?\n. I hope we'll have a chance to work together in the future!\n. Hi,\nHave you used CS before?\nIt creates a closure, which will likely look like:\n``` JS\n(function() {\n  var div, hello;\ndiv = React.DOM.div;\nHello = React.createClass({\n    render: function() {\n      return div({}, ['Hello ' + this.props.name]);\n    }\n  });\n}).call(this);\n```\nmaking hello inaccessible outside the closure.\nWhat you could do is to assign Hello to window like:\nCS\nwindow.Hello = React.createClass\nor using a shortcut/trick:\nCS\n@Hello = React.createClass\nTo keep your app structure clean, you will need to apply at least a namespace pattern here. http://addyosmani.com/blog/essential-js-namespacing/\n. If you have any more questions, I'm happy to help, otherwise if we're done here, would you mind closing the issue?\n. Well, I think you could fork 0.9 branch, reference it in your Gemfile, and PR here.\nOr: use 1.0.0.pre and force the version of React you need.\nI think we were supposed to push all features specific to react-rails in 1.0.0, because 0.9 feels like React.js versioning. (And then always have a higher version than React itself). On the other hand \n, whenever there is a subjective issue I and @zpao always have slightly different opinions :)\n. But react_ujs is in master, it's from your own PR :)\n. I'll look into it tomorrow, thanks for reporting.\n. I tried to duplicate your stack as precisely as I could to no avail yet.\nWould you mind if I asked you to prepare a repro case?\n. Hi, we are supporting rails 3.2! Could you maybe post your Gemfile.lock if it's not secret? (The one from when the problem occurred)\n. @acrispino thanks for the report! It is just because you didn't set the variant, in 1.0.x we'll default to a variant based on an environment, but in 0.x you need to set it explicitly in config/environments/production|development.rb:\nconfig.react.variant = :development or :production appropriately.\nI can't reproduce @steadicat's issue though.\n. We'll reopen if someone runs into this in the future.\n. @stockandawe are you sure you have config.react.variant = :development or :production in environment?\n. Yeah, I'm not sure what was the reason for this change. Anyway, @johnthethird, whom I can't ref here made a nice fix, and I asked him to PR it separately, because I don't know how much we need to finish server-side rendering. It looks like his busy though, and so if he won't reply in a few days I'll cherry-pick his fix into master, and I'll try to credit him somehow.\nEDIT: So I think Tuesday would be a nice day to review and finish this.\n. I have tested this using current master and it works for all known cases, let's reopen if we find a case for which this won't work.\n. We use files from grunt build directly, see https://github.com/facebook/react/blob/master/react-source.gemspec, I think you have to tackle this issue through facebook/react rather that react-rails. react-source is built into facebook/react repo. I will think about this.\n. We don't have the resources to implement this right now, but putting this on my TODO list.\n. You're right, I've been tight on time lately, but I will surely tackle this today.\n. This is great! It's getting merged as soon as @zpao will confirm your CLA.\n. @lifeiscontent thanks!\n. I expected it should just work with 4.1, I added this to remember to add 4.1 to travis config. \n. Hi @joecritch! Are you sure you have read the disclaimer? Do you think it should be reworded or emphasised?\n. Why don't you take a stab at it? You can probably describe this thing in README clearer as you have a fresh mind :+1: \n. Hi!, @sickill thanks for this! I have to ask @rolfb  to sign the CLA https://developers.facebook.com/opensource/cla to credit him for this change (Facebook policy).\nIf that's a lot of hassle to him, then I'll close this PR and make this change myself - it will also apply to all current branches (0.9, 0.10, 1.0).\nOtherwise @rolfb  please let me know when you sign the CLA, so I can verify.\n. Hi! @rolfb \nWhat exactly is the problem with :group => :all ?\nI'm not sure why it was not here in the first place, see e.g. https://github.com/emberjs/ember-rails/blob/master/lib/ember_rails.rb\n. What's wrong with group: :all approach?\nCan you compare our case against https://github.com/rails/sass-rails/blob/master/lib/sass/rails/railtie.rb#L40 ?\n. @sickill @rolfb \nFirst of all: master is not production ready yet.\nSecond:\nThe problem is in your code, but the underlying reason is the unfortunate choice of not defaulting React's variant when it is not explicitly defined. You line #65 is:\nconfig.react.variant = :production\nAnd if you run RAILS_ENV=production bundle exec rails c with react-rails in assets group, then react-rails is not loaded, and config.reactis undefined.\nCurrent master solves that with defaulting variant for React, also I think that the workaround you need is obvious.\nI will apply group: :all to all branches soon. Should you need any help, let me know.\n. @dferrazm Could you check using 0.10 branch from github?\ngem 'react-rails', git: 'git@github.com:reactjs/react-rails.git', branch: '0.10'\n. @dferrazm have you tried the solution I described?\n. Sorry that I disappeared - I'll verify and close this soon. This gem cannot be in assets group only, and initialize_on_precompile was needed because the react's version was not inferred from environment version - this should not longer be the case but let me verify first.\n. Hi, if https://github.com/rails/rails can be of any indication, they don't hard wrap in their README.md, or rather wrap a bit, but it looks like they don't care, also I looked at a few other gems, and they don't wrap too, btw I think any text editor should be able to do this for you.\nYou are right about the link, so it would be best if you could just remove b833641 and we're ready to go!\nThanks!\n. What we need yet is your CLA :) It's kind of ridiculous for a change this small, but I can't help.\n. I believe that we should follow the standard pattern for this.\n1. Create our own error class which inherites from StandardError or RuntimeError.\n2. Catch any errors from JS and rethrow as our class, while giving access to as much original data as possible (e.g. message, stack trace)\n3. Ensure that this is easily debuggable using  better_errors+binding_of_caller combo.\nI'm gonna give react-rails some love this weekend, so it's release candidate ready on Monday.\nPS. PRs are welcome obviously!\n. Oops. Looks like I had been dead for some time. But hopefully I should take this on soon.\n. Hi,\nThanks for this suggestion!\nWould you mind checking if the version of react we're using (react-source gem) supports this OOBE?\n. Hi,\nI think this should belong to a \"contrib\" kind of repository, unless something like coffee-react-transform is integrated into an official version of react.\nHowever, @zpao is really in charge here when it comes to decisions like this one.\n. Ok :)\nIt's a good place to discuss this for sure! I just meant implementation of this probably won't fit here.\nBut, it looks like it's not a very hard thing to implement. You (or anyone else) should be able to get this working in a separate gem in one evening.\nI'm super busy right now, but I would happily take on this otherwise! Maybe one day :)\n. Hey, if you're talking about the implementation, then just fork the code we have, or fork the ember-rails directly (we try to steal whatever we can from ember-rails). JSXTransformer works in exactly the same way, so it will probably suffice to just change extension names, and JS files which do the dirty work, Sprockets will take care of the rest. Let me know if you need to know more!\n. Closing - the issue referenced above contains more information than this thread.\n. Hi,\nreact_ujs is a script which runs react_component on a client side.\nIt is only available in our beta-quality master branch.\nHope this helps!\n. Thanks for this lovely PR!\nCouple of issues though...\n- I think your squash was a bit too aggressive - first commit's message doesn't explain much!\n- What would be our upgrade strategy if @jsdf stopped supporting his CSJXTransformer? \n- Maybe a repository called reactjs/react-rails-contrib would be a better for this? It would require react-rails, so requiring react-rails-contrib in your Gemfile would be enough to have all of react's stuff for rails.\nYour thoughts?\n. @zpao - let me know if you think this should be in the repo (i.e. coffeescript support) - I'll proceed with this based on your decision.\n. Hi,\nCould you provide any sample code to show what is not working for you?\nThis works for me:\n<%= react_component('TasksComponent', {:name => 'John', :tasks => Task.all}, {:prerender => true}) %>\n```\n{div} = React.DOM\n@TasksComponent = React.createClass\n  getInitialState: ->\n    return null\nrender: ->\n    div null, [\n      div(null, @props.tasks.map((t) -> t.name))\n    ]\n```\nSorry for coffee-script.\n. I cannot see any interest in this thread right now, so closing, but if anyone stumbles upon this - I'll be happy to reopen and rethink!\n. AFAIK the standard is to wrap the JS file in one huge immediately invoked function and then pass window or global to it as a scope or whatever argument - based on what is undefined \nBut we have to decide on one system for DI and embrace it everywhere in react-rails!\nThe problem here is with coffeescript / (c)jsx compilation not with the global scope - putting on my TODO.\n. Putting cache issues on my TODO - they are really painful. Also putting easier README on my TODO.\n. Looks like @xionon was here before https://github.com/reactjs/react-rails/pull/59, beside the hard part of the README do we have any more issues here?\n. Could you post the seed that fails without your fix?\n. I'm just not sure whether it's super good to keep components.js thing as is - we are effectively suggesting that React components in your application should not be dependency-injected, but I guess FB @zpao doesn't have any recommendations for resolving dependencies in React apps right?\n. commonjs would be good https://github.com/reactjs/react-rails/issues/33 but maybe we should just proceed with this and then iteratively improve...\n. Sprockets works fine for Angular apps - it can work fine for us too. But let's proceed with global namespacing for now.\n. +1 for readme, no more comments\n. Thanks for this PR!\nHave you signed the CLA?\n. Looks ok to me! I'll take a short look at this tomorrow / day after and then merge. Thanks!\n. @meleyal #76 is in - can you retest?\n. I have been working with some more sophisticated scenarios with Capybara lately - I think depending on the version either wait_until or synchronize would work here as the best solution - but even they are not recommended. Adding sleeps definitely isn't recommended. Anyway, you wrote the code that works and fixes this - I didn't - so this must be appreciated. Big thanks @xionon! We just need to slightly improve it a little :) \n. Because you need to rescue, otherwise your wait_until looks ok - but Capybara 2 has synchronize built in which does just this.\nAlso: Why is content-based asserting not fine?\n. Sorry I had a certain preconception of how this should be solved, and assumed you were thinking about it the same way. There is a couple of problems with your solution:\nWhich version of Capybara supports page.evaluate_javascript 'typeof Turbolinks !== \"undefined\"' ? Mine does support page.execute_script 'typeof Turbolinks !== \"undefined\"' which returns nil so it looks like you weren't testing anything?\nHowever - I cannot reproduce the problem with: for i inseq 1 10; do rake appraisal; done so what I did was this:\nwait_for_turbolinks_to_be_available()\npage.execute_script '_Turbolinks = Turbolinks;'\npage.execute_script 'delete Turbolinks;'\npage.execute_script 'setTimeout(function () { Turbolinks = _Turbolinks; }, 1000)'\nI hope it is self-explaining. Then this:\nwait_until { page.execute_script('Turbolinks.visit(\"/pages/2\");') }\nassert page.has_content?('Hello Alice')\nwith this code in test_helper:\n```\nrequire 'timeout'\nrequire 'capybara/rails'\nrequire 'capybara/poltergeist'\nlast resort!\ndef wait_until\n  Timeout.timeout(Capybara.default_wait_time) do\nsuccessful = false\nbegin\n  begin\n    yield\n    successful = true\n  rescue Capybara::Poltergeist::JavascriptError\n    successful = false\n    sleep 0.1\n  end\nend until successful\n\nend\nend\n```\nWould you mind trying to reproduce using the above code? (without my faking the Turbolinks not being loaded)\nOne more thing - I think you can see that this snippet doesn't test anything:\n```\nassert page.has_content?('Hello Alice')\nTry Turbolinks javascript API.\nwait_until { page.execute_script('Turbolinks.visit(\"/pages/2\");') }\nassert page.has_content?('Hello Alice')\n```\nvisit is asynchronous, so the assert is done before a new page is loaded.\nIf you confirm that you cannot reproduce the problem with my code - I'll follow with a PR.\n. It makes sense to move to click_link. \nWhat's your Phantomjs version? Does this error happen only for rails < 4.0 ?\n. @glittershark how about we start with a repro case?\n. How about we link to https://github.com/teampoltergeist/poltergeist with a hint to head there?\n. @olance my bad it took me this much time to respond, just let me know if you are still going to finish this PR\n. @meleyal https://github.com/rails/turbolinks/pull/404 is merged, so based on that could you update this PR? Thanks!\n. I think so, just wondering if a warning in README is enough because usually it isn't. Would be best to have a server stdout warning (which you can disable) when we have to turn off Turbolinks' cache. I hope it's not a lot of hassle.\n. I think that is even better to have the warning in browser DevTools when React is in dev mode. console.log should be just fine. I also forced a rerun of Travis tests above (there was a failure due to ECONNREFUSED from rubygems.org)\n. If I remember correctly - we would have to prepare a different build of React to expose require, but this might have changed. Do we have a way to do it now (i.e. implement https://github.com/reactjs/react-rails/issues/33) ?\n. Aside from modifying react_ujs, I guess it would be dead simple to just fork this repo, change our code in https://github.com/reactjs/react-rails/blob/master/lib/react/renderer.rb, maybe make require global if necessary, you would have it working in ~30 minutes - if I understand what you want to achieve.\n. @felixbuenemann should we have any tests here?\n. This is an IE8 regression, so how about we create Sauce Labs account for cases like this? (this way we can automatically test browsers we want to support - probably the same browsers React support.\n@zpao would you mind setting up \"Open Source\" Sauce Labs account for us? \n. Looks good to me, but I'm not sure why we would need JBuilder here. We only let end user pass a string as an alternative to an object.\n. Alright, good job, thanks!\n. Wouldn't it be nice to have something in README about this generator?\n. I rerun tests for your PR - probably a timing issue. Still, this would need a rebase to be merged.\nHowever, I can't see any repro case, where this eval wouldn't work as expected. We assume that react classes are either global or referenced as fields of global objects.\n. Alright! Thanks for this PR.\n. Can you show your components.js (binpaste/gist)?\n. I mean the compiled content, as if you requested http://localhost:3000/assets/components.js\n. What is the result of  #{@@components_js.call}; in https://github.com/reactjs/react-rails/blob/master/lib/react/renderer.rb ? (let me know if you don't how to get it)\n. @elvanja I tried your code in JS Fiddle http://jsfiddle.net/xamwb3h3/ and I get exactly the same error. We do not process components.js in any way, it is taken straight from Asset Pipeline, concatenated with React.js and executed. So you need to figure this out on your own. I would suggest comparing #{@@components_js.call}; with contents of /assets/components.js using rails server in production env and uglyfying turned off.\nUnless there is any convincing argument, I'm going to close this issue, because it is out of our gem's scope.\n. We'd love to have a solution here (once you reach it!), so that anyone can find it in the future.\n. That's great! Thanks!\n. Yeah, I think we need to take a stab at the initializer again\n. Removed, more in the comments below.\n. Looks like I forgot about the README\n. Not sure what you mean here.\n. ",
    "zpao": "Yea, that's the coverage we need. Thanks for taking a look!\n. cd50aa6e4ad29755482c4ee358fb902122a8a198 added it. We'll figure out the rest with #1.\n. It seems like we might have had a little issue with our CLA tracker... I can't for the life of me find you in the database, though I swear you signed it already. Would you mind doing it again? https://developers.facebook.com/opensource/cla\n. Thanks!\n. Awesome! Comments incoming inline\n. Thoughtbot recommends we keep the .lock files checked in too (https://github.com/thoughtbot/appraisal/blob/master/README.md#version-control) so let's do that. I was just wishing that file didn't include specific user info in there. I don't think that removing that part of the file is actually a good idea, I don't know what side effects it would have.\n. Sorry for letting this linger! I'm going to merge in and then if there are any followups we can deal with them then.\nThanks for working on this!\n. Sorry I didn't catch you before you started, but I appreciate you taking this on.\n\nWe always use react.js and depending on variant, either react.js, or react.min.js is available under this path. There is a certain discrepancy here, because end-user cannot do the same, i.e. he will have to use the same version of react for dev/production\n\nI commented on the PR but I think we can solve this.\n\nDo we want to test this? If so, probably the best way would be to duplicate dummy app, because otherwise we would have to mess with assets files inside tests.\n\nYes. We can probably just put nonsense JS in those test files so we can test them easily - doesn't necessarily need to actually be React. Another dummy app seems fine (a lot of extra files for such a simple test, but if that's what we need to do, let's do it).\n. Yea. I mentioned this somewhere (may have been in the React repo), but I thought about making it so that we do exactly what jquery-rails does, and we use the unminified in the development, test and minified in production environment. Or maybe just use those as defaults but allow config overrides. Let me know if you think this would be a better experience. You could work on it :wink:\nRegardless, this does clear it up. And I see you've signed the CLA already so I'll merge this in. Thanks a lot!\n. It could be related to heroku's environment. AFAIK Rails uses uglifyjs to do it's minification so it may have something to do with that. static is a reserved keyword, but it's supposed to be safe to use as an object key (except in old IE).\nIf you don't mind, would you be able to paste the rest of app/assets/javascripts/likes.js.jsx?\n. Oh sorry, this is actually in JSXTransformer.js and coming from a line in esprima...\nNot sure how much we can do about this apart from making a change to esprima to put quotes around static. But that's fragile.\nI was going to ask if you knew which version... I tested back to 0.6 but 0.4 is ancient... :frowning: \n. How do you handle node apps in the rest of the cedar stack? Based on https://devcenter.heroku.com/articles/nodejs-support#versions I should be able to specify the node version I want in my package.json. Would it be crazy to follow the same pattern for ruby apps? Honestly I'd be happy with anything > 0.4.x. That branch is ~2.5 years old\nI also found https://github.com/heroku/heroku-buildpack-ruby, which mentions being able to build and vendor your own version of node. However without hosting our own buildpack, that's prohibitively difficult for most people.\n\nAre there speed improvements in node in later releases by any chance?\n\nPretty sure! I haven't followed closely but IIRC 0.4 was before they switched to using libuv. So at the very least, they rewrote all of their platform abstraction code. V8 in 0.4.9 (looks like last 0.4.x version to get V8 update) was 3.1.8.25. 0.10.8 has v8 @ 3.14.5.9. That's meaningless to me, so I guess if we instead just say that there are 2+ years of V8 improvements in there, there are speed improvements from that alone.\n. Hey guys, we had another person run into this issue yesterday. Is there any update or suggestion we can start making for these people?\n. Thanks for the update @schneems!\n. We're addressing this in the React repo by running an extra transform over JSXTransformer to quote things for ancient versions of node - https://github.com/facebook/react/pull/1097\n. Ah yes, this is confirmed to be working in the linked heroku issue. Thanks @spicyj for the fix :)\n. Hey, sorry if I came off a bit harsh there. Let me know if that's an option for you @tomelm and if not I'll definitely take it into consideration. I've been a bit dogmatic but I'm open to reason :)\n. We're going to need more than es5-shim for React soon, so our story around polyfills in React may change. Follow along in https://github.com/facebook/react/issues/1998\n. @jakubmal I don't know yet where we'll end up with built-in polyfill support for ES*\n. I forgot about that plan, and I've honestly been way too busy with everything else React that I haven't given react-rails any love. I think it would be a great idea to make this more flexible. If you find the time to do it, I wouldn't complain :)\nIf you have any other features you think would be handy (component generators?), feel free. I would love to see this become more useful for people who are actually using it!\n. How would you feel about making it a bit easier to drop files in vendor? It looks like Ember allows this by actually having 2 directories inside their vendor (details...). That way you don't have to do anything different in your assets. I'm not sure where JSXTransformer.js would fit into with 2 dirs... Maybe something like this:\nvendor/react/\n    JSXTransformer.js\n    development/\n        react.js\n    production/\n        react.js (would require manual renaming from react.min.js when put here)\n. I'm a bit confused why we need users to specify the version of react-source in their Gemfile. Could we still tie versions of the real-rails gem to a version of react-source? We could bump versions here as we update the dependency. If we do it right we could set the dependency to 0.4.x and that should be stable. When 0.5 comes out we change that to 0.5.x and bump the react-rails version accordingly (1.0 -> 1.1?)\n. Sorry for the delay! Things have been a little bit hectic lately and this project is lowest on the totem pole :(\nI'm pushing out 0.5.2.0 and 0.8.0.0 right now, but if you rebase on top of those, I'll push the green button and merge it in, then we can go from there.\n. Ok, cool. I couldn't remember exactly where we were but saw that part of the readme and got confused. If the readme is totally fine now then I'll just merge.\n. #17 should fix the failing test (because coffeescript). Let's get one last rebase and then merge for real :)\nWhile you're in there, lets set that version to 1.0.0pre or something, and get a couple more things in before we ship as 1.0. Sound ok?\n. Yep, it will in 0.5, just wanted to make sure this issue was filed.\n. PS this works, but don't know a good way to actually test the combos outside of making an app and requesting assets/application.js (would be 4 different apps here? or maybe we can set config in each test run and restart the app?)\n. Well, I messed up the github flow, but landed the change here in f299db0f5734321007b908a588b163de0dbc953f\n. @jakubmal if you think of a better way to expose addons, let me know. I haven't released this yet (almost did) but it seemed like the best thing short term.\n. Would love unit test. I'm not sure what the best way to do it is though so I'm open to ideas.\n. First, thanks for catching this (and adding a test)! I'll have a few comments inline.\nBut first... Ok, I thought about the .lock files again. I know we previously talked about keeping them but that was when the Appraisal authors suggested it. It looks like they've gone back on that, so I'll remove them (and update the .gitignore appropriately). But that's not the important thing here. But as for keeping gemfiles, I'm going to disagree there and keep them - they just contain what's in the Appraisals file, so there's only explicit version locking.\n. Also, I don't want to block anybody if it can be avoided, so whichever doesn't get it first will need to rebase and test appropriately.\n. Thanks a lot for the quick followup!\nI actually think I'll push out a release today with just this. #15 is already in. #12 is going to include a major version bump and start diverging from the React version number scheme we have now. Or at least it was from what I remember, though that change isn't in there now.\n. I think this is an awesome idea, though I'm not totally sold on the details.\nSome concerns:\n- jQuery - I'd rather not tie us to that if it can be avoided\n- :div - It doesn't actually need to be a div, but that's just what ends up happening a lot. Maybe we can make it an option and default to div?\n- How does this play with turbolinks (is that what page:load is for?)?\n- Should we exclude children for the time being and only focus on top level components?\n. Maybe 2 helpers? render_react_component (which uses a <div>) and render_react_component_into_tag which takes an extra arg for :div, :span, etc?\nMaybe there's another option for turbolinks... I haven't looked at how Rails does it's built-in JSy stuff works (eg. confirm dialogs) but when I looked years ago they were all inline scripts. I'm guessing that's not the case anymore, but maybe there are some ideas we can borrow for solving this. Or just fix turbolinks :)\nFor children, I actually meant something like this: React.renderComponent(<Parent><Child /></Parent>, node); There's no way to represent this with what you have. Static children is a good first step following this, but it would be great to be able to next complex structures. Someday.\nI think we should leave server rendering out entirely for the moment, but I like where you're headed.\n. Sorry, I haven't had a chance to look at this again, but hopefully I'll have a chance over the weekend. I'll try to figure out the Travis issue too.\nDon't feel obligated to squash. I don't mind a merge commit for something like this where there are substantial changes in each commit. If it were a 10 line diff with 10 commits, then I might have an issue ;)\n. I have no opposition to evolving the pattern. So if inline script tags is how we start and we make it better later, fine by me. I'm not writing Rails much anymore so I'm not a good person to decide. But personally, I'd rather have 1 less dependency to have to figure out if I were using this, so all in here seems like the best thing to me.\n. Oh I see. I didn't realize jquery-rails included both of them, I thought there was another gem dependency, which is what I was against.\nIn that case, then I think it's fine to have 2 distinct lines in application.js.\n. @johnthethird @jakubmal, would you be willing to do a once-over here? My brain is very much outside the rails world these days and would appreciate some help :)\n. :thumbsup: \n. \nThanks! If you can sign the CLA, I can merge this right in - https://developers.facebook.com/opensource/cla\n. Nope, I can look you up with our internal tool, you're good to go!\nThanks a lot for this. I misspelled this so many times during my initial work on this, but I thought I did the right thing when I actually wrote code\u2026 :hurtrealbad: \n. I know it's a bit silly for a 1 letter change, but could you sign the CLA? https://developers.facebook.com/opensource/cla\n. Thanks!\n. good catch!\n. @steadicat any more details? Rails version, ruby version, etc.\nI'm not familiar with Rails engines... Can somebody having issues describe the minimum needed to repro?\n. I would argue that this encourages bad behavior. I haven't written a lot of coffeescript but presumably there are patterns people use to share code between files that doesn't involve setting window.*\n. For the record, how would you suggest sharing components across files? I'm sure we'll get the question so I'd like to be prepared (or even add something to the readme)\n. @jakubmal, what do you think?\n. Also, @johnthethird, could you sign the CLA? \n. I forgot to close this out, but I shipped it a month ago - http://rubygems.org/gems/react-rails/versions/0.9.0.0\n. @jakecraige, sorry for the delay. I think it makes sense to do something like this, but I would rather keep master up to date with master. Let's instead have a disclaimer and link to the latest stable branch (0.9 today, 0.10 tomorrow).\n. Rubygems still doesn't support semantic versioning? :frowning:\nI know it's trivial but could you sign the CLA?\n. Is this good to go?\n. I completely missed #23, but it looks likely to be the same issue and has a solution.\n. Can you sign the CLA? https://developers.facebook.com/opensource/cla\n. RIght now, react-rails 0.X == React 0.X. react-rails 1.0 is under development and it will not follow that strict relationship (in hindsight, it shouldn't have tracked React versions at all).\n. Can you sign the cla (https://code.facebook.com/cla)?\n(I personally don't care for the 80 character change BUT I'll let @jakubmal make that call)\n. I don't see Causes under the organization CLAs. Let me know if it's actually a different name or if I should go bug somebody who works on that tool to make sure it didn't get lost.\n. All good on the CLA front, feel free to  merge when ready @jakubmal \n. I think that seems reasonable to me. Logging is much harder to actually keep an eye on. @johnthethird? @jakubmal?\n. JSXTransformer doesn't support that, at least not in shipping version. We added it in master though and it'll be a part of 0.11 (or maybe 0.10.1) release.\nAlso, that sample code you have won't actually work. Extending React.component isn't a thing yet (maybe one day, but not yet)\n. If you read the rest of that, he linked to his app which is using https://github.com/elucidata/react-coffee, which adds React.Component and allows it to work with CoffeeScript class syntax (which presumably ends up having the same semantics as ES6 classes, which would be why it works). You then need to call toComponent to get an actually usable thing in React,\nWe should leave this open so we remember to add harmony support.\n. Harmony works now so if you're interested in adding this, it would probably be appreciated :)\n. Thanks!\n. Same as above, react_ujs doesn't exist in the stable branch (now 0.11.x ), only master.\n. My gut says no, but I'm not going to fight much either way. I'll just say that it's not clear to me why we should do anything if there is the gems @jsdf is shipping do the transform.\n\nalthough there's no planned changes to JSX, right?\n\nThere will undoubtedly be changes to JSX. We're going to make some very soon actually. How we want to version that in react-rails is unclear to me (but that's a separate discussion). At least for JSX we control the transform so we know it'll be updated on our schedule. For an external dependency, we need to make sure that's updated before bundling (as you mentioned).\n. cc @quark-zju\n. Thanks!\n. Doesn't bother me. @jakubmal?\n. RIP hashrockets\n. Not being familiar with this... is there a bundler version or anything else you need for this github format to work? (also that implies ruby 1.9 right?)\n. Boom 9a76532a58c02725ffc9c717a5c5cc50378d4232\nLet me know if you run into any issues.\n. Well, 0.10.0.0 was actually released 2 months ago. I did tag the right commit then. But 64b3061aa25bf69f56714ef32165055115583288 did go in after and we should probably ship 0.10.0.1 with it.\nThe react_component helper doesn't exist in 0.10.* so I don't think that will be an issue :)\n. I definitely don't want to tag 9a76532a58c02725ffc9c717a5c5cc50378d4232 though, that's the merge back into master, which isn't ready for a release afaik.\n. glad you figured it out :) Good luck!\n. My comment on stack overflow: http://stackoverflow.com/questions/24438996/react-rails-component-with-prerender-true-in-options-hash-gives-a-v8error#comment37857875_24438996\nI suspect maybe we have a bug about when we load components.js into the VM. Can anybody test this out?\n. Would page:change handle your case too? Seems like a slightly better option so long as it works for all.\n. If you could make something work in the renderer directly, we could get that checked in. Looks like there's a partial bit of this here: https://github.com/reactjs/react-rails/blob/master/lib/react/renderer.rb#L23-L28\n. Inconsistent tests results and random timeouts are probably related. When I run locally I'm seeing JS errors (ReferenceError: Can't find variable: Turbolinks) in the page Phantom is loading, so I bet there's something to figure out there. I don't have enough experience here to be of any real help :/ (though I wouldn't expect that problem to actually be related to phantom)\n. Sure, let's do it.\n. Could you update the description with information about what's going wrong that this PR fixes. And perhaps a test case since it seems like this isn't covered.\n. I think this is a great idea and would be a welcome addition.\nI started with keeping the folders in lib modeling the modules they're named after (I thought that was a Ruby gem pattern). I don't really care either way, just want to make sure we follow whatever best practices are. But I haven't written much Ruby in the past few years outside of the initial version of this gem, so I'll defer to others.\n. No, sorry I wasn't clear! I think generators would be awesome.\nI was just getting nitpicky on the file path. I was thinking lib/generators/react should be lib/react/generators (to mirror React::Generators). But this is where my lack of Rails/Ruby expertise shows - I don't know what best practices are for files + classes/modules, or if there's actually a requirement for Rails.\n. JS modules (usually commonjs) are what we always recommend. I don't know what best practices are in Rails land for building JS bundles based on dependencies & that sort of thing. Browserify & co have picked up a lot of steam in the node community.\nThere are always going to be issues with the view helpers so I think just be opinionated and build what seems to work best.\n. :thumbsup: Thanks for the explanation. I knew some of the asset pipeline stuff, just not sure if it had really changed in the past few years. Sounds like no. The biggest JS-related innovation seems to be Turbolinks and that's really just to make is easier to continue using server-side views.\nI don't know how any Rails apps with non-trivial JS survive, unless they all use coffeescript and get IIFEs for free. Still needs to be globals somewhere if these bits of code are supposed to talk to each other. There's a lot of room for error with straight file concats but that's what we have.\nIf we want to be good Rails citizens (and I think we do), let's do it their way and use... globals and I guess components.js. At least you can reference objects so react_component 'Foo.Bar' works and you can group things slightly more sanely without completely polluting the global scope.\n. Probably want to add usage to the readme. Apart from that I think this looks fine. Any other comments @jakubmal?\n. Thanks, I think this is a great addition! I'm sure we'll here if anything goes wrong so keep an eye out.\n. I'm going to ship React 0.11.1 soon to fix that, so let's hold off until then.\n. http://rubygems.org/gems/react-rails/versions/0.11.1.0\n. It's been a few more days than we said and this looks good, so let's :shipit: \n. Am I right in saying that we can close this now that #74 is in?\n. Tests pass, I assume you tested this yourself? @xionon, you're our actively participating rails expert, this is the right thing to do?\n. :thumbsup: I'll let you guys work out the right thing.\n. :thumbsup: Let's do it :)\n. > Is there a reason that the gem published to rubygems.org isn't tracking the master branch?\nBecause master has new features. The plan months ago was to get off of the \"track React versions\" path when server rendering and whatever helpers felt good, then call it 1.0. This hasn't gotten enough love to get there. I would love for it to (I'm looking for maintainers, let me know if you want to get more involved!)\n46 is closed and should not be reopened. < 1.0 doesn't include react_ujs so it won't be found.\nAs to why react could not be found, 0.x does not provide any defaults for the variant of react. You must specify config.react.variant. If I do that in your example app, it works. Looking at the readme in the 0.11 branch, that doesn't seem as clear as I remember it. Master defaults to using the version matching your environment (which is a nice detail) - https://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L9\n. This supersedes both #61 & #68, correct?\nAs long as this still works in Rails < 4 (looks like jruby tests are all passing so I assume it does), then this seems fine to me. The Turbolinks thing is annoying :/\n. Awesome, thanks guys!\n. I think we shouldn't do this. It's too magical. You should just use camelcase when using the helper. Also, what if you use a component that does use underscores in its props. It would be impossible to actually use that component from the helper.\nAdding an option to settle the debate would feel pretty anti-rails to me. Do people still say \"convention over configuration\"?\n. No more comments? Alright, I'm going to say no then. Thanks for the PR @atipugin and hopefully saying no doesn't scare you away :)\n. thanks!\n. Just merged #69. Can you see if this is still occurring for you @glittershark?\n. Thanks!\n. Good catch\n. Nothing actionable here, so closing out.\n. Just address the comments but ignore the example test part. You can do it in a new commit or amend your current commit and rebase, your call.\n. I'd be convinced with that manual testing you mentioned.\n. Thanks!\n. I don't know anything about Turbolinks events, but those gifs are pretty convincing. I assume receive is still before the content is actually replaced? cc @meleyal who's done some of our work there.\nAlso, #69 just went in so you'll need to rebase.\n. :thumbsup: thanks!\n. Nice catch! And Thanks @meleyal for the quick fix :) I just merged #88 so we're good to go.\n. Do we want to force that off or should we just make it big and bold in the readme?\n. :thumbsup: \n. Is there a way to detect version/supported events so we can futureproof this code and not get stuck doing hacky things for people on the cutting edge?\n. :clap:\nI might do that PR slightly differently and add a Turbolinks.isEventSupported() API (I think it might be a bit more versatile), or even export Turbolinks.supportedEvents as an array of strings, not the hash. BUT I really want nothing to do with Turbolinks, so if you get it worked out and supported in some way, I'll take whatever I can get :)\n. They are different, but we don't expose that information... Maybe we could set something from rb so it depends on your rails env, not your React?\n. Yea, I think this is fine. This file is getting a bit longer than I wanted and I think we shouldn't export those names and should find something better before we're stuck with them being the API. At the very least we should remove React from them, and perhaps Component as well (see https://github.com/facebook/react/pull/2002). I'm open to suggestions.\n. @rmosolgo I guess the use case isn't 100% clear. I understood it that there were server-rendered things added to the page (I guess via something that isn't turbolinks) and he basically needs to rescan for things added. In that case, piggybacking on the existing infra seems fine BUT I'm not in the Rails world and don't know where people are drawing the UJS line.\nBut if this is meant to cover what you would normally do with React.renderComponent from your own JS that isn't server-rendered then I would probably agree that this doesn't fit.\n. Seems like a reasonable solution, better to raise than log and fail silently. Then the program can handle appropriately itself. I'm game to take this, I'll let it sit for a couple days and see if anybody else has comments.\n. Thanks!\n. Probably fine without tests. I'll leave it to you @jakubmal \n. Just me being terrible, sorry. And then since I let it sit we changed some APIs so we should probably update those. I'll comment inline.\n. I think this looks good.\nExcept I'm the worst reviewer and didn't think of this sooner... If you generate the same component multiple times it's going to overwrite the existing one, right? Would it make sense to ask about overwriting? (I think we should just do whatever rails does in this case)\n. Of course it does :) Cool, then lets do it.\n. I think we decided not go that direction in https://github.com/reactjs/react-rails/pull/47 but there are existing options.\n. Sorry for the (massive) delay:( This looks good to me, but will need a rebase now.\n. Thanks! (and sorry for the delay :( )\n. I'd prefer if these were done separately since they are quite discrete tasks but meh, this is fine. I think just address the things @vipulnsward said and we can merge this.\n. Yup, master is on 0.12 and a stable (based on 0.11, without any of the helpers or server rendering) is published.\n. Yea, master with all the goodies there will eventually become 1.0 (sometime soon perhaps, @jakubmal was leading that effort).\n. We should probably also update examples and tests to not include the @jsx React.DOM pragma\n. Thanjs for the ping :) Let's do it.\n. @wiredprairie I take it you don't want to continue this? Thanks for starting the effort!\n. @wiredprairie Fair enough & thanks again for getting this started!\n. thanks!\n. Thanks!\n. Thanks!\n. Thanks!\n. :+1: sounds good! Sorry for the delay, this project is unfortunately low on the priority list with everything else :(\n. Are there other \"renderers\" out there that we can mimic for API? Personally I also find piggybacking on Rails' render a bit nicer and gives a bit more option value.\n\nI'd rather not have to specify the layout for every action\n\nCan't you just specify it once in the controller? layout false Or even layout false, :except => ['index']\n. I actually think we want to instead fix this so it is used. Based on #127, it would seem that at some point size was used where max_renderers should have been and then not corrected.\n. I'd rather fix it than remove it and re-add it.\n. Sorry for not making this clearer, but I was thinking it might make sense to just do what I said here in this PR. Let me know if you're interested! I didn't mean to shut the discussion down entirely.\n. #153 should take care of this.\n. I think the require issue is going to be too big to really solve in 1.0. Right now we do things \"the rails way\" which is to use the asset pipeline and globals (ughh). Jest is also really focused on a particular style that jives well with node (because modules) but not with the asset pipeline.\nI would love to see the rails community come to a consensus on using modules and then we can piggyback on that effort.\n. Nah, take us home!\nIf anything comes up, just bump versions appropriately (I'm much more on board with that approach than I used to be).\n. sounds like you've made a ton of progress and it's all your call! :shipit: \n. It doesn't look like your test should be causing failures but it is... could you take a look at that?\n. Thanks!\n. Thanks for picking this up, I think it's a great thing to do. You should be able to remove that 2nd commit now that #137 is in (thanks for the help btw).\n. We could also consider documenting the stripTypes option for anybody who wants to give flow a shot. Maybe we should do ruby -> js conversion (options.strip_types -> stripTypes)?\n. Let's do it.\n. :thumbsup: Thanks!\n. gem install react-rails uses the 0.12.x.y release, which does specify patch versions. Only the stable releases have been published. master however is more fluid and uses the latest instead of locking because we don't really have version numbers there. If you did this against the 0.12 branch (https://github.com/reactjs/react-rails/tree/0.12) then I would go ahead and merge this in but we probably shouldn't do this for master.\nWant to do this against the other branch and then I'll publish the v0.12.2.0 gem.\n. Yea, I was actually going to ask. I think you're right that we want the ~>. I think that's safe to go ahead and do.\n. :thumbsup: Thanks!\n. Anybody have any ideas why this would be failing? I thought this would be an easy way to shave a few minutes off our build times but no dice (even after I re-added the explicit bundler install)\n. Can you reduce further? If you remove the whole canUseDOM block does it repro? I'm guess it does (canUseDOM should be false there, especially if you're hitting an error about document). If that's the case then you need to look at what appContext.dispatchInitialState is doing.\nIt might be a bug in React but we don't have enough info yet.\n. I have no idea why this passed but #141 didn't (even when I dropped the bundler install). Oh well. Thanks!\n. I think it would be ok to conditionally return null (though in this case I agree that letting PlayersRepresentation make that call is probably better).\nAnyway, there's no bug with React nor react-rails here, just a JS syntax error.\n. Thanks!\n. There will probably be a standalone 0.13 based on the same branch we've been using for a while when React v0.13 is released, without most of the good stuff in master.\n. I wouldn't release master as 0.13.1 (that's confusing when 0.13.0 and the rest of the 0.x.y family don't have any of the good stuff in master). Just ship 1.0 and forget about versioning with React versions. Just upgrade the dependency purposefully and bump the react-rails version appropriately when you do.\n. Leaving no upper cap isn't really safe either. For argument's sake lets say we were publishing master this whole time and you used react-rails which used React.renderComponentToString. That worked with the react-source specified. But then you specify a different react-source (like 0.13) and that API no longer exists so your app suddenly starts throwing 500 errors even though you didn't touch react-rails.\nUnbounded dependencies are generally not a great idea. I would encourage locking to 0.x and if it turns out that 0.x+1 is also compatible, then ship and update that says so.\n. :boom: 4da2126f948a934b2c56da9d9b1ce653491e41a6\n. @rmosolgo Wanted to give you a heads up before I pushed this. This does not impact master. I'll let you handle that as you see fit.\n. Ah you commented in the issue. I pushed this as 4da2126f948a934b2c56da9d9b1ce653491e41a6 into a new 0.13 branch based on 0.12 and tagged appropriately.\n. react-rails 0.13 shouldn't be any different. It looks like browserify-rails changed its dependencies though.\nI'm going to close this out since its not actionable for anybody here, but thanks for mentioning it. Hopefully somebody else finds it useful.\n. Thanks! I always forget this.\n. :thumbsup:\n. (IMO) Tags should really only be used for actual milestones and not arbitrary checkpoints. Every release shipped to rubygems is already tagged and I think that should continue.\nAnyway, I think the plan is to actually ship master as 1.0 soon, see #133.\n. :thumbsup:\n. I think this happens if we call createElement(Factory). What is ConversationList?\n. Ah, probably this line: https://github.com/bshyong/helpful-web/blob/master/app/assets/javascripts/components/conversation_list.js.jsx#L221\nYou can no longer call classes directly, then need to be passed to createElement (createElement(Conversation, props)) or use JSX which will result in the same thing.\n. @fredericgrati when we've seen that error and you're using JSX, we've usually concluded that the transformer is out of date (transforms to fn calls, not createElement). Are you transforming outside of the asset pipeline? Or maybe using a different version of React/JSXTransformer? When you look at that JS when actually run in the browser, I'm guessing you see Marketplace(...) and React.DOM.div(...) but you should see React.createElement(Marketplace, ...) and React.createElement('div', ...)\n. @mutley The problem has been solved. Make sure you are using an up to date JSX transform (eg, current version of Reactify if you're using Browserify, etc).\n. :shipit::shipit::shipit::shipit::shipit::shipit::shipit::shipit::shipit:\n. It would be helpful to see your fork and a test case.\n. Can you actually do a PR against master as well? That makes sure it goes into the major releases.\n. I can ship 0.13.2.0 with this and React 0.13.2. We could also do 0.13.1.1 if you want with just this.\n. I'm 100% sure this has nothing to do with React. Chances are you have an extension installed in chrome doing that.\n. cc @rmosolgo just a heads up here, looks like this makes the tests actually pass again :)\n. :thumbsup: I was going to ask in the other PR about compatibility.\nThe other option we have here is to stop using react-source entirely. I don't know how useful it actually is at this point. When I first started this project I modeled it after a couple other things (combo of coffeescript and ember) but didn't know the implications.\nWhat we do with pyreact is actually just download the js files from https://github.com/reactjs/react-bower into that repo and then there aren't the constraints of another dependency. If there's no value in react-source, then I'm happy to just kill it, let me know.\n. Yea this is fine, I meant to do that a long time ago.\nWe should probably actually switch to BSD+PATENTS as we've done with our other FB projects.\n. This is a super trivial change so is fine to go in w/o CLA (though we'd love to see you contribute more, which will require it to be signed)\n. Hmm, that's already set on Travis so I think you probably just need to push this (might only check for coverage on master).\n. The plugins: constants bit in the React build config shouldn't apply here. That's a custom plugin to transform __DEV__ away. We never shipped that with JSXTransformer.\nI don't know how custom plugins would hook into this, I'll let you figure that out :) Might be best to not support them initially unless you've tested and documented how it works.\n.  I think it looks cool! This is @rmosolgo's show though so I'll let him take care of it.\n. Sorry for the delay, this looks good to me!\n. Sorry for my lag in the process. Invite sent so once you accept that @BookOfGreg, you're in. Welcome to open source maintenance!\n\n@rmosolgo I hope you won't be a stranger - you've done an amazing job keeping this project going.. \ud83d\udc4d all set! Thanks for helping out @ttanimichi!. I'm going to be unnecessarily picky and ask for better naming of these. rails-3.1, rails-3.2, rails-4.0 (unless that breaks things but I don't think it did)\n. Nit: remove this line\n. Hmm, wish this wasn't in here but AFAIK there isn't a way around it.\n. Nit: remove this line\n. Nit: remove these\n. Nit: space after #\n. Nit: make sure this matches (missed assets)\n. Can you update these too?\n. Let's cleanup the JS a bit and then reformat while we're here. We'll take advantage of the fact that we're in a clean context so this is the global which is guaranteed to exist.\nrb\ncontents =\n  'var global = global || this;' +\n  File.read(React::Source.bundled_path_for('JSXTransformer.js'))\nCan you also add a comment above saying why we're doing this (JSXTransformer has UMD wrapper which only checks for window, global, and self but a clean context in therubyracer doesn't have any of those)\n. arguments.callee is deprecated so let's not use it and just use f.\nOtherwise, I think my only other comment is that I don't like the JS style. Don't let that spacebar scare you :P\n. Let's just drop this since it's old news.\n. I actually want to revisit this again... what happens if we do change the API in JSXTransformer? Then we're out of luck, right? (there's been a discussion about getting the AST out, and we're adding sourcemaps support which might cause issues).\nI also think if the versions aren't tied together we should make it clear that not specifying react-source here is ok and you'll just get whatever version of React we declare in react-rails. But if you do specify a version for react-source you can override easily without dropping files into a specific place.\nDoes that sound reasonable?\n. This looks like it's only true in production.\n. You're only reusing the cached @context in production. All other times you'll reread the file from disk so it should be replaceable without restarting.\n. This has potential for problems (if a component lives outside of the turbolinked node, or however that works), but I think this is fine for an initial version. But beware bug reports :)\n. We can actually default to null for the props (that's actually what we do in the JSX transform to avoid extra object allocations).\n. My mistake. I assumed turbolinks let you operate on a more precise scale. I haven't actually upgraded anything to use it yet...\n. This isn't true anymore, it's sync in master which will be out in 0.9.\n. nit: PhantomJS, and probably worth making that a link.\n. I think we should mention alternative installation methods, namely brew install phantomjs (I hear Ruby people get upset about JS package managers)\n. Nit, let's do each of these on their own lines with their own var. That's more in line with our other styles (and matches both mine and FB's preferred style).\n. Why are you doing this (here and below)? mountReactComponents is already a function\u2026\n. Oh yea\u2026 duh :)\n. nit: typeof rootNode (it's an operator, not a function so the parens don't do anything)\n. What example test? The point is to run the tests of this gem...\n. These gemfiles were autogenerated. Did you fix them manually or does an updated appraisal install do it?\n. Should be just be requiring execjs in here?\n. Honestly, I'd rather we didn't add things to React.* at this point as the functionality provided here is distinct from the rest of React and could lead to confusion/problems down the line (it's unlikely in this case but there are other properties we may want to add to React without potential issues).\n. Style nits. no inlines and use braces.\n```\nif ($) {\n  return $(selector);\n}\nreturn document.querySelectorAll(selector);\n```\nBut I also have concerns because this API will return a jquery object or a NodeList, which will have some overlapping functionality but not entirely. It didn't matter when it was internal usage but once the method is public it's a concern.\n. What's with the whitespace changes?\n. this should be node now.\n. And this should be element\n. We don't need this anymore :)\n. This might be chance to push FB code style for multiline returns :)\nreturn (\n  <div>\n    <div>...</div>\n  </div>\n);\nI don't care too much, it just allows things to line up nicely and helps prevent ASI when refactoring happens.\n. Let's preempt the linters and add a ; here.\n. Still need to get the deprecated ones here in the readme.\n. And let's update the generated sample code here to match the updates you made in the generator\n. I don't know if we ever made any formal declaration that we don't support Ruby 1.8. I think all of our other hash uses continue with the rocket syntax.\nAdditionally, we should just make harmony an option to the transform function (or better, take an options hash) instead of relying on a global config like this.\n. Let's make this slightly more flexible in case whitespace changes. It's pretty unlikely we'll eve add it before the colon but after is pretty reasonable (in fact, I may go get somebody to fix that because it's bothering me now :D).\n. Is there a particular advantage to make this mattr_accessor vs storing these options in a more local place?\nAlso AFAICT mattr_* come from Rails. I suppose that's ok in a rails-specific gem, though I have thought about pulling the rendering out. We could cross that bridge if we ever get to it.\n. I'm not a huge fan of this hack as a whole but while it exists let's make the example even clearer. Can we call it MyRootComponent or something similar so it's clear that this doesn't work for components at arbitrary depth. There's a danger there as in theory a component shouldn't know if it's the top-most since you could render the same component as a child elsewhere. But I suppose that's probably not what most people are doing so let's just make it as clear as possible.\n. s, not spec\n. ",
    "frantic": "Rails is always about convention over configuration, so providing default values with ability to override sound like a good choice. I'll send another PR a bit later. Thanks!\n. ",
    "rafael": "Sure, \nHere is the likes jsx file:\n``` javascript\n/* @jsx React.DOM /\nvar LikeElement = React.createClass({\n  getInitialState: function() {\n    return { liked: this.props.liked,\n             count: this.props.count,\n             resource_type: this.props.resource_type,\n             resource_id: this.props.resource_id };\n  },\n  handleClick: function(event) {\n    var type = this.state.liked ? 'DELETE' : 'POST';\n    $.ajax({\n      url: this.props.url,\n      type: type,\n      dataType: 'json',\n      data: { like: { resource_id: this.state.resource_id, resource_type: this.state.resource_type } },\n      mimeType: 'textPlain',\n      success: function(data) {\n        this.setState({count: data['count']});\n      }.bind(this)\n    });\n    this.setState({liked: !this.state.liked});\n  },\n  render: function() {\n    var text = this.state.liked ? 'unlike' : 'like';\n    return (\n        \n {this.state.count} people likes this \n\n          {text}\n          \n\n    );\n  }\n});\n```\n. I think is the version of node that heroku uses to compile the assets. In my local I have node 0.8.4 and they are using 0.4.\nThe only workaround that I've found so far, is to not compile the assets in heroku... But this approach is far from ideal. \n. Yeah, I agree, that doesn't sound like the right solution. \nI would love to have a way to tell @heroku which version of node to use, but I haven't found one :( \nThanks a lot anyways! \n. ",
    "zeke": "Hey @hone and @schneems, do you know how to specify the node version that's used by sprockets here?\n. ",
    "hone": "Unfortunately, there currently isn't one. I'm not sure there's a standard with ruby apps on how to specify your node version. I've been told node as a whole can be pretty volatile which is why we haven't been aggressively upgrading.\n. ",
    "vjeux": "Node v0.4.3 (first release on their blog) was released Sat, 19 Mar 2011. Two and a half years ago. I'm pretty sure that the latest versions of node are more stable.\n. ",
    "schneems": "Are there speed improvements in node in later releases by any chance?\n. We are tracking this in another issue in our issue tracker https://github.com/heroku/heroku-buildpack-ruby/issues/140  \nIn the mean time you may have to fork the ruby buildpack  \n\nRichard Schneeman\nhttp://heroku.com\n@schneems\nSent from the road\nOn Friday, August 30, 2013 at 1:48 PM, Paul O\u2019Shannessy wrote:\n\nHey guys, we had another person run into this issue yesterday. Is there any update or suggestion we can start making for these people?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/facebook/react-rails/issues/9#issuecomment-23581731).\n. \n",
    "scpike": "@zpao This worked for me on heroku with the default ruby buildpack. Thanks for the awesome library! \n. ",
    "sophiebits": "Yeah, this should work since React 0.9.\n. If you haven't already, can you sign the CLA?\n. See also #49.\n. Perhaps we shouldn't be loading view_helper.rb at all in bundle console?\n. React.renderComponent should be idempotent though\u2026\n. I don't know what the issue is but the fix proposed here sounds off to me.\n. Guessing you don't want the double quotes here?\n. ",
    "tomelm": "Thanks for this @jakubmal!\n. @zpao no problem! I totally understand where you're coming from. I will try the es5-shim and see if that might help the headless browsers with the tests. I don't need anything crazy as long as I can get the tests passing appropriately :p\n. ",
    "daGrevis": "Bump!\nI'm trying to test React using CasperJS (it's based on PhantomJS) and React is not defined. Other libraries I include the same way as React (Lo-Dash, for example) are found.\nCan this be related? What's the current status?\n. This issue is closely related. https://github.com/facebook/react/pull/347\ntl;dr Use https://github.com/es-shims/es5-shim/blob/master/es5-shim.js or don't use PhantomJS/CasperJS at all, but go for Selenium.\n. @Loremaster Sure. Doesn't it for you?\n. @Loremaster Sorry, mate. Maybe you are mising some other required shims.\n. Of course you should use it before. Glad it works now. ;)\n. Feels good to help others! I'm glad I wrote how I solved it here! :+1: \n. ",
    "Loremaster": "@daGrevis Did you just add es5-shim.js and tests started to work?\n. @daGrevis Yes, it doesn't. :( I added es5-shim.js to the vendor folder. Then I required it in application.js:\njs\n//= require jquery\n...\n//= require es5-shim\nI restarted rails server and I can see that new file appeared. But when I try to run tests again then I see the error: \n```\nOne or more errors were raised in the Javascript code on the page. If you don't care about these errors, you can ignore them by setting js_errors: false in your Poltergeist configuration (see documentation for details).\n  TypeError: 'undefined' is not a function (evaluating 'RegExp.prototype.test.bind(\n      /^(data|aria)-[a-z_][a-z\\d_.\\-]*$/\n    )')\n  TypeError: 'undefined' is not a function (evaluating 'RegExp.prototype.test.bind(\n      /^(data|aria)-[a-z_][a-z\\d_.\\-]*$/\n    )')\n      at http://127.0.0.1:54587/assets/application.js:32342\n      at http://127.0.0.1:54587/assets/application.js:28807 in s\n      at http://127.0.0.1:54587/assets/application.js:28807\n      at http://127.0.0.1:54587/assets/application.js:37581\n      at http://127.0.0.1:54587/assets/application.js:28807 in s\n      at http://127.0.0.1:54587/assets/application.js:28807\n      at http://127.0.0.1:54587/assets/application.js:32910\n      at http://127.0.0.1:54587/assets/application.js:28807 in s\n      at http://127.0.0.1:54587/assets/application.js:28807 in e\n      at http://127.0.0.1:54587/assets/application.js:47260\n      at http://127.0.0.1:54587/assets/application.js:28807\n      at http://127.0.0.1:54587/assets/application.js:47262 (Capybara::Poltergeist::JavascriptError)\n  ./features/step_definitions/service.steps.rb:16:in `/^the individual user$/'\n  features/service/new.feature:10:in `Given the individual user'\n\n```\nAny ideas what to do?\n. Hey, I found the solution! I should set es5-shim BEFORE the react init:\napplication.js\njs\n//= require es5-shim\n//= require react\n//= require react_ujs\nNow it works, awesome!\n. ",
    "mockdeep": "I ran into this problem today. Adding es5-shim did the trick. @Loremaster you can use rails-assets-es5-shim so you don't have to put the code in your repo's vendor directory.\n. Hey @rmosolgo. That doesn't seem to fix the issue for me. However, I have discovered something else. Whether or not it reloads properly seems to depend on the location of the files. If I change a file in /app/assets/javascripts/ it reloads as expected. However if it's nested one level deeper in /app/assets/javascripts/components/ it does not reload. In both cases I'm editing a .jsx file.\n. Sure, no problem:\n```\nGIT\n  remote: git://github.com/reactjs/react-rails.git\n  revision: ac4320eb183b948ec328a695cd54d27c769073af\n  specs:\n    react-rails (1.0.0.pre)\n      coffee-script-source (~> 1.9)\n      connection_pool\n      execjs\n      rails (>= 3.1)\n      react-source (~> 0.12)\nGEM\n  remote: https://rubygems.org/\n  remote: https://rails-assets.org/\n  specs:\n    actionmailer (4.2.0)\n      actionpack (= 4.2.0)\n      actionview (= 4.2.0)\n      activejob (= 4.2.0)\n      mail (~> 2.5, >= 2.5.4)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n    actionpack (4.2.0)\n      actionview (= 4.2.0)\n      activesupport (= 4.2.0)\n      rack (~> 1.6.0)\n      rack-test (~> 0.6.2)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.1)\n    actionview (4.2.0)\n      activesupport (= 4.2.0)\n      builder (~> 3.1)\n      erubis (~> 2.7.0)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.1)\n    active_model_serializers (0.9.3)\n      activemodel (>= 3.2)\n    activejob (4.2.0)\n      activesupport (= 4.2.0)\n      globalid (>= 0.3.0)\n    activemodel (4.2.0)\n      activesupport (= 4.2.0)\n      builder (~> 3.1)\n    activerecord (4.2.0)\n      activemodel (= 4.2.0)\n      activesupport (= 4.2.0)\n      arel (~> 6.0)\n    activesupport (4.2.0)\n      i18n (~> 0.7)\n      json (~> 1.7, >= 1.7.7)\n      minitest (~> 5.1)\n      thread_safe (~> 0.3, >= 0.3.4)\n      tzinfo (~> 1.1)\n    addressable (2.3.7)\n    arel (6.0.0)\n    ast (2.0.0)\n    astrolabe (1.3.0)\n      parser (>= 2.2.0.pre.3, < 3.0)\n    autoprefixer-rails (5.1.7)\n      execjs\n      json\n    bcrypt (3.1.10)\n    better_errors (2.1.1)\n      coderay (>= 1.0.0)\n      erubis (>= 2.6.6)\n      rack (>= 0.9.0)\n    binding_of_caller (0.7.2)\n      debug_inspector (>= 0.0.1)\n    bootstrap-sass (3.3.3)\n      autoprefixer-rails (>= 5.0.0.1)\n      sass (>= 3.2.19)\n    builder (3.2.2)\n    bullet (4.14.4)\n      activesupport (>= 3.0.0)\n      uniform_notifier (>= 1.6.0)\n    capybara (2.4.4)\n      mime-types (>= 1.16)\n      nokogiri (>= 1.3.3)\n      rack (>= 1.0.0)\n      rack-test (>= 0.5.4)\n      xpath (~> 2.0)\n    celluloid (0.16.0)\n      timers (~> 4.0.0)\n    childprocess (0.5.5)\n      ffi (~> 1.0, >= 1.0.11)\n    cliver (0.3.2)\n    coderay (1.1.0)\n    coffee-script-source (1.9.1)\n    connection_pool (2.1.1)\n    crack (0.4.2)\n      safe_yaml (~> 1.0.0)\n    dalli (2.7.2)\n    database_cleaner (1.4.0)\n    debug_inspector (0.0.2)\n    diff-lcs (1.2.5)\n    docile (1.1.5)\n    dotenv (1.0.2)\n    dotenv-rails (1.0.2)\n      dotenv (= 1.0.2)\n    erubis (2.7.0)\n    execjs (2.3.0)\n    factory_girl (4.5.0)\n      activesupport (>= 3.0.0)\n    factory_girl_rails (4.5.0)\n      factory_girl (~> 4.5.0)\n      railties (>= 3.0.0)\n    faker (1.4.3)\n      i18n (~> 0.5)\n    ffi (1.9.6)\n    font-awesome-sass (4.3.1)\n      sass (~> 3.2)\n    foreigner (1.7.2)\n      activerecord (>= 3.0.0)\n    formatador (0.2.5)\n    friendly_id (5.1.0)\n      activerecord (>= 4.0.0)\n    globalid (0.3.3)\n      activesupport (>= 4.1.0)\n    guard (2.12.4)\n      formatador (>= 0.2.4)\n      listen (~> 2.7)\n      lumberjack (~> 1.0)\n      nenv (~> 0.1)\n      notiffany (~> 0.0)\n      pry (>= 0.9.12)\n      shellany (~> 0.0)\n      thor (>= 0.18.1)\n    guard-compat (1.2.1)\n    guard-rspec (4.5.0)\n      guard (~> 2.1)\n      guard-compat (~> 1.1)\n      rspec (>= 2.99.0, < 4.0)\n    guard-rubocop (1.2.0)\n      guard (~> 2.0)\n      rubocop (~> 0.20)\n    haml (4.0.6)\n      tilt\n    haml-lint (0.11.0)\n      haml (~> 4.0)\n      rubocop (>= 0.25.0)\n      sysexits (~> 1.1)\n    haml-rails (0.8.2)\n      actionpack (>= 4.0.1)\n      activesupport (>= 4.0.1)\n      haml (>= 3.1, < 5.0)\n      html2haml (>= 1.0.1)\n      railties (>= 4.0.1)\n    hike (1.2.3)\n    hitimes (1.2.2)\n    honeybadger (2.0.6)\n    html2haml (2.0.0)\n      erubis (~> 2.7.0)\n      haml (~> 4.0.0)\n      nokogiri (~> 1.6.0)\n      ruby_parser (~> 3.5)\n    i18n (0.7.0)\n    jquery-rails (4.0.3)\n      rails-dom-testing (~> 1.0)\n      railties (>= 4.2.0)\n      thor (>= 0.14, < 2.0)\n    json (1.8.2)\n    kgio (2.9.3)\n    launchy (2.4.3)\n      addressable (~> 2.3)\n    listen (2.8.5)\n      celluloid (>= 0.15.2)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n    loofah (2.0.1)\n      nokogiri (>= 1.5.9)\n    lumberjack (1.0.9)\n    mail (2.6.3)\n      mime-types (>= 1.16, < 3)\n    method_source (0.8.2)\n    mime-types (2.4.3)\n    mini_portile (0.6.2)\n    minitest (5.5.1)\n    multi_json (1.10.1)\n    nenv (0.2.0)\n    netrc (0.10.3)\n    newrelic_rpm (3.10.0.279)\n    nokogiri (1.6.6.2)\n      mini_portile (~> 0.6.0)\n    notiffany (0.0.6)\n      nenv (~> 0.1)\n      shellany (~> 0.0)\n    parser (2.2.0.3)\n      ast (>= 1.1, < 3.0)\n    pg (0.18.1)\n    poltergeist (1.6.0)\n      capybara (~> 2.1)\n      cliver (~> 0.3.1)\n      multi_json (~> 1.0)\n      websocket-driver (>= 0.2.0)\n    powerpack (0.1.0)\n    pry (0.10.1)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    quiet_assets (1.1.0)\n      railties (>= 3.1, < 5.0)\n    rack (1.6.0)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-mini-profiler (0.9.2)\n      rack (>= 1.1.3)\n    rack-test (0.6.3)\n      rack (>= 1.0)\n    rails (4.2.0)\n      actionmailer (= 4.2.0)\n      actionpack (= 4.2.0)\n      actionview (= 4.2.0)\n      activejob (= 4.2.0)\n      activemodel (= 4.2.0)\n      activerecord (= 4.2.0)\n      activesupport (= 4.2.0)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.2.0)\n      sprockets-rails\n    rails-assets-es5-shim (4.1.0)\n    rails-assets-lodash (3.3.1)\n    rails-assets-normalize.css (3.0.2)\n    rails-assets-react-router (0.12.4)\n    rails-assets-reqwest (1.1.5)\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (>= 4.2.0.alpha)\n    rails-dom-testing (1.0.5)\n      activesupport (>= 4.2.0.beta, < 5.0)\n      nokogiri (~> 1.6.0)\n      rails-deprecated_sanitizer (>= 1.0.1)\n    rails-html-sanitizer (1.0.1)\n      loofah (~> 2.0)\n    rails_12factor (0.0.3)\n      rails_serve_static_assets\n      rails_stdout_logging\n    rails_serve_static_assets (0.0.4)\n    rails_stdout_logging (0.0.3)\n    railties (4.2.0)\n      actionpack (= 4.2.0)\n      activesupport (= 4.2.0)\n      rake (>= 0.8.7)\n      thor (>= 0.18.1, < 2.0)\n    rainbow (2.0.0)\n    raindrops (0.13.0)\n    rake (10.4.2)\n    rb-fsevent (0.9.4)\n    rb-inotify (0.9.5)\n      ffi (>= 0.5.0)\n    react-source (0.12.2)\n    rest-client (1.7.3)\n      mime-types (>= 1.16, < 3.0)\n      netrc (~> 0.7)\n    rspec (3.2.0)\n      rspec-core (~> 3.2.0)\n      rspec-expectations (~> 3.2.0)\n      rspec-mocks (~> 3.2.0)\n    rspec-core (3.2.1)\n      rspec-support (~> 3.2.0)\n    rspec-expectations (3.2.0)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.2.0)\n    rspec-mocks (3.2.1)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.2.0)\n    rspec-rails (3.2.1)\n      actionpack (>= 3.0, < 4.3)\n      activesupport (>= 3.0, < 4.3)\n      railties (>= 3.0, < 4.3)\n      rspec-core (~> 3.2.0)\n      rspec-expectations (~> 3.2.0)\n      rspec-mocks (~> 3.2.0)\n      rspec-support (~> 3.2.0)\n    rspec-support (3.2.2)\n    rubocop (0.29.1)\n      astrolabe (~> 1.3)\n      parser (>= 2.2.0.1, < 3.0)\n      powerpack (~> 0.1)\n      rainbow (>= 1.99.1, < 3.0)\n      ruby-progressbar (~> 1.4)\n    ruby-progressbar (1.7.1)\n    ruby_parser (3.6.4)\n      sexp_processor (~> 4.1)\n    rubyzip (1.1.7)\n    safe_yaml (1.0.4)\n    sass (3.4.12)\n    sass-rails (5.0.1)\n      railties (>= 4.0.0, < 5.0)\n      sass (~> 3.1)\n      sprockets (>= 2.8, < 4.0)\n      sprockets-rails (>= 2.0, < 4.0)\n      tilt (~> 1.1)\n    scss-lint (0.34.0)\n      rainbow (~> 2.0)\n      sass (~> 3.4.1)\n    selenium-webdriver (2.45.0.dev3)\n      childprocess (~> 0.5)\n      multi_json (~> 1.0)\n      rubyzip (~> 1.0)\n      websocket (~> 1.0)\n    sexp_processor (4.4.5)\n    shellany (0.0.1)\n    shoulda-matchers (2.8.0)\n      activesupport (>= 3.0.0)\n    simplecov (0.9.2)\n      docile (~> 1.1.0)\n      multi_json (~> 1.0)\n      simplecov-html (~> 0.9.0)\n    simplecov-html (0.9.0)\n    skylight (0.6.0)\n      activesupport (>= 3.0.0)\n    slop (3.6.0)\n    spring (1.3.2)\n    spring-commands-rspec (1.0.4)\n      spring (>= 0.9.1)\n    sprockets (2.12.3)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sprockets-rails (2.2.4)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      sprockets (>= 2.8, < 4.0)\n    stripe (1.20.0)\n      json (~> 1.8.1)\n      mime-types (>= 1.25, < 3.0)\n      rest-client (~> 1.4)\n    sysexits (1.2.0)\n    teaspoon (0.9.0)\n      railties (>= 3.2.5, < 5)\n    thor (0.19.1)\n    thread_safe (0.3.4)\n    tilt (1.4.1)\n    timecop (0.7.3)\n    timers (4.0.1)\n      hitimes\n    tzinfo (1.2.2)\n      thread_safe (~> 0.1)\n    uglifier (2.7.0)\n      execjs (>= 0.3.0)\n      json (>= 1.8.0)\n    unicorn (4.8.3)\n      kgio (~> 2.6)\n      rack\n      raindrops (~> 0.7)\n    uniform_notifier (1.7.0)\n    vcr (2.9.3)\n    webmock (1.20.4)\n      addressable (>= 2.3.6)\n      crack (>= 0.3.2)\n    websocket (1.2.1)\n    websocket-driver (0.5.3)\n      websocket-extensions (>= 0.1.0)\n    websocket-extensions (0.1.2)\n    xpath (2.0.0)\n      nokogiri (~> 1.3)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  active_model_serializers\n  autoprefixer-rails\n  bcrypt\n  better_errors\n  binding_of_caller\n  bootstrap-sass\n  bullet\n  capybara\n  dalli\n  database_cleaner\n  dotenv-rails\n  factory_girl_rails\n  faker\n  font-awesome-sass\n  foreigner\n  friendly_id\n  guard\n  guard-rspec\n  guard-rubocop\n  haml-lint\n  haml-rails\n  honeybadger\n  jquery-rails\n  launchy\n  newrelic_rpm\n  pg\n  poltergeist\n  quiet_assets\n  rack-cache\n  rack-mini-profiler\n  rails (~> 4.2.0)\n  rails-assets-es5-shim\n  rails-assets-lodash\n  rails-assets-normalize.css\n  rails-assets-react-router\n  rails-assets-reqwest\n  rails_12factor\n  rb-inotify\n  react-rails (~> 1.0.0.pre)!\n  rspec-rails\n  sass-rails\n  scss-lint\n  selenium-webdriver (~> 2.45.0.dev3)\n  shoulda-matchers\n  simplecov\n  skylight\n  spring-commands-rspec\n  stripe\n  teaspoon\n  timecop\n  uglifier\n  unicorn\n  vcr\n  webmock\n```\n. ",
    "feifanzhou": ":+1: Thanks guys! Spent three hours trying to figure this out, glad I found this thread\n. Found this issue through Google. The above fix didn't work for me, but adding the top-level components to window did work:\nvar Wrapper = React.createClass({}); // Doesn't work\nwindow.Wrapper = React.createClass({});  // Works for me\n. ",
    "tirdadc": "Thanks for this. I think it might be worth adding a note about this to README.md.\n. Since that didn't work, I ended up adding require react to my /vendor/assets/javascripts/vendor.js and also set the config value in development.rb. I am now running into issues with the views helper:\nundefined method react_component\nwhen I do this in a view:\n<%= react_component('CommentBox', {}) %>\n. Just realized that both the react:install and the react_component view helper are available for 1.x, not 0.x.\n. @rmosolgo will try that and report back!\n. Just chiming in to say that this seems to have gone away with the latest version. Thanks again for the stellar work, guys!\n. I was trying to use computed property names and it seems to be supported, but despite setting the harmony flag to true I get Uncaught SyntaxError: Unexpected token [ when it hits the new syntax.\nIs there anything else to do aside from setting this in development.rb (and other environment config files)?\nconfig.react.variant = :development\nconfig.react.addons = true\nconfig.react.jsx_transform_options = {\n  harmony: true\n}\n. +1 for this, I assumed it was already possible by setting :tag to nil but I guess not.\n. I can confirm that I have this issue in production with 1.6.0 when server-side rendering is used.\nActionView::Template::Error (No compiled asset for react-server.js, was it precompiled?):\n. Confirming that the workaround works with 1.7.1.\nI tried to get a component that uses moment.js in its getInitialState() to pre-render once I set this up and also added //= require moment to server_rendering.js, but I still got an error:\nEncountered error \"ReferenceError: moment is not defined\" when prerendering Calendar\nAnything else I need to do to get that to work?\n. Exact same issue, prerender works fine with 1.8.1 (or at least didn't cause things to crash) and sprockets 3.7.0, I upgrade to 1.8.2 and I get this:\nSprockets::FileNotFound - couldn't find file 'moment' with type 'application/jsx'\nChecked in these paths:\n  /private/var/srv/otioso/app/assets/images\n  /private/var/srv/otioso/app/assets/javascripts\n  /private/var/srv/otioso/app/assets/stylesheets\n  /private/var/srv/otioso/vendor/assets/javascripts\n  /private/var/srv/otioso/vendor/assets/stylesheets\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/lodash-rails-4.14.1/vendor/assets/javascripts\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/momentjs-rails-2.11.1/vendor/assets/javascripts\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/coffee-rails-4.2.1/lib/assets/javascripts\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/jquery-ui-rails-5.0.5/app/assets/images\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/jquery-ui-rails-5.0.5/app/assets/javascripts\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/jquery-ui-rails-5.0.5/app/assets/stylesheets\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/jquery-rails-4.2.1/vendor/assets/javascripts\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/turbolinks-source-5.0.0/lib/assets/javascripts\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/react-rails-1.8.2/lib/assets/react-source/development-with-addons\n  /Users/tirdad/.rbenv/versions/2.3.0/lib/ruby/gems/2.3.0/gems/react-rails-1.8.2/lib/assets/javascripts:\nthis is my server-rendering.js:\n//= require moment.js\n//= require lodash.min\n//= require react-server\n//= require components\nand I have this line in config/initializers/assets.rb:\nRails.application.config.assets.precompile += %w( vendor.js vendor.css server_rendering.js )\nExact details for Sprockets in my Gemfile.lock:\nsprockets (3.7.0)\n      concurrent-ruby (~> 1.0)\n      rack (> 1, < 3)\n    sprockets-rails (3.1.1)\n      actionpack (>= 4.0)\n      activesupport (>= 4.0)\n      sprockets (>= 3.0.0)\n. A little note for anyone that ended up here migrating from the Sprockets flavor to the Webpack one: if you do not want to rename all your .js.jsx extensions, be sure to update config/webpack/paths.yml to include that extension:\n...\nextensions:\n    - .coffee\n    - .js\n    - .jsx\n    - .js.jsx\n.... Upgrading to Webpacker 1.2 seems to have resolved this.. ",
    "rmosolgo": "glad to hear this was solved!\n. @zaingz @uriklar if you want help debugging, please share code (react_component calls & component source code)\n. @jack128 The JSX file is executing with a delay. Because it type=\"text/babel\", it doesn't run during the initial page load. Instead, it is loaded by babel.js after the page load, then Babel transforms it and executes it. \nAre you transforming your JSX before sending it to the client? If so, you can remove type=\"text/babel\". (If you're using react-rails, it should transform your JSX automatically.)\nIf you're not transforming your JSX ahead of time, then you'll have that delay because Babel has to process your files!\n. In general, shouldn't you require without file extension? eg \n//= require components/common/button\nDoes that work any better? Or does it raise a different error? Also, could you report your sprockets version? It seems like we're still tracking down compatibility issues with Sprockets 3\n. I've also asked here: https://github.com/rails/sprockets-rails/issues/227\n. I hope these problems are resolved with #187, please reopen if this is still an issue!\n. :+1:\n. Added in #136 !\n. :+1: would use. I'm digging React but I just can't quit CoffeeScript. Maybe I'll fork it and take a look...\n. Oh right, I guess travis doesn't have coffee-react :grimacing: \n. Shouts out to @dobrite who bundled CJSXTransform in the same vein as JSXTransform. That would be the way to go I think: https://github.com/dobrite/cjsx-transform\n. Hey guys, thanks for looking this over and thanks for your advice! \n- using coffee-react-transform instead sounds good to me. Great that it's CoffeeScript version-agnostic.\n- I'm not opposed to adding to react-rails-contrib, just say when!\nI'll take another pass at this following @jsdf's suggestion today or early this week...\n. Ok, I updated it to use a browserified version of coffee-react-transform (related PR).  That seems a lot better because coffee-react-transform is a better fit (for the reasons @jsdf mentioned above) and ... I'm not depending on external executables :) \nAs for upgrading, I think we have a bit more protection: \n- we're CoffeeScript version agnostic (so we don't have to upgrade that)\n- if browserifying coffee-react-transform becomes part of that project, we'd have a way to update this file if the transformer has to change (although there's no planned changes to JSX, right?).\nAlso worth pointing out, this means that cjsx files have to end in .js.coffee.cjsx, which seems ok, and after all, that's how the asset pipeline works.\nWhat do you all think? \n. Yeah, at first I was thinking \"How could this not support coffeescript\", especially with @jsdf's awesome transformer out there. But now I see the React team's point about external dependencies.\nThanks for the conversation though. It's ok with me to close this baby. After all, it's Rails -- why not just add another line to your Gemfile :P\n. This code is a hack, and I've ended up using straight coffeescript a la \nReact.DOM.div \n    # ...\nI'll close my PR to keep things tidy!\n. I hope this issue was worked out! Server rendering is very different now, please open another issue if you're having a problem with it! \n. sounds like this was taken care of!\n. :+1:\n. This would be a cool project, if anyone gets it going, please send a PR to the \"Related Projects\" section!\nhttps://github.com/reactjs/react-rails#related-projects\n. Sorry for leaving so long, for a while there's been a short instruction on how to run the tests  in the Readme: \n\nFeel free to rebase & open another PR if you think that documentation should be extended!\n. Another point for this issue: \nIf you use Turbolinks.visit (and consequently, redirect_via_turbolinks_to on the server), the before-change event is never fired (since a link is never clicked). Since before-change isn't fired, componentWillUnmount hooks aren't executed. My flux changeHandlers are still attached!\nHowever, receive is fired by Turbolinks.visit, so this patch should solve that issue, too.\n. Yes, thats right -- from the turbolinks readme:\n\n\npage:receive the page has been fetched from the server, but not yet parsed\n\n\nOk, rebased, looks good locally! \n. geez, this stinks. I see it too. thanks for sharing your workaround.\n. Shucks, it would be nice to make it Just Work TM but that doesn't really seem possible with what we've got. \nI'm in favor of setting Turbolinks.pagesCached(0) (and saying so in the readme) to save people from nasty bugs. (That's what happened to me -- I still had flux-y changeListeners attached even after page change :disappointed:)\n. Looks like we fished our wish -- the next version of Turbolinks will have page:before-unload events :grinning: \n. :+1: until the next version of turbolinks\n. Not that I can tell -- turbolinks JS doesn't expose a version and the events are just called from string literals. \nI'll ask!\n. Took a stab at it: https://github.com/rails/turbolinks/pull/403\n. Haha, I figured this approach benefited the code base a bit and didn't expand the API too much. Besides, I imagine it's quite a rare problem to want to support different versions of Turbolinks. Or, people who do just use the Ruby gem version to ensure whatever feature they need. \n. @meleyal  I'm interested in getting this in, but it doesn't merge cleanly since redoing the UJS. Are you interested in updating?\n. Thanks!\n\n:tada:\n. I don't plan to add commonjs require support to this gem, but I'm certainly open to it if someone else wants to add it. If Sprockets adopts a new dependency management strategy, I'll keep up with that!\n. To me it seems outside the scope of Rails-y UJS. Historically, Rails UJS just gives behaviors based on options in your template (eg remote: true, method: :delete, data: {confirm: \"...\"}). I'm not aware of other UJS APIs that you call in javascript (except maybe Turbolinks.visit, if that counts :stuck_out_tongue: ).\nIn my opinion it's not a good fit, especially considering that this is what React.renderComponent and React.unmountComponentAtNode are for. However if others would use this, maybe I'm wrong!\n. Yeah, I don't quite understand the use case either. @mschulkind, how are you rendering with the view helper, but it isn't there at DOM ready? Does that mean the HTML is fetched by AJAX, then inserted into the document?\n. 6 hours in and I almost understand the issue at hand, thanks for bearing with me!\nI realize I actually have a similar issue. Sometimes I open a modal (inserting HTML from ajax, fancy that).  To set up components, I just fake the turbolinks page:change event: \ncoffee\n$(document).on \"modal:load\", ->\n  $(document).trigger(\"page:load\")\nIt \"re-renders\" existing components, but I think it's no problem. I read in the docs that calling React.renderComponent with the same descriptor will just update the component on that node (if necessary).\nBut now that I think about it, I don't think those components are unmounted properly. I should be unmounting those components when the modal is hidden. No biggie, I think I should just: \ncoffee\n$(document).on \"modal:hide\", ->\n  componentsInModal = $(\"#modal [data-react-class]\")\n  componentsInModal.each -> React.unmountComponentAtNode(this)\nI guess I've gotten away with it so far since none of those components set up change listeners.\nNow that I understand what's going on, I could go either way whether React UJS exposes its mounting/unmounting functions!  I noticed that rails/jquery-ujs functions are available, they're just not talked about much: https://github.com/rails/jquery-ujs/blob/master/src/rails.js#L23\n. @mschulkind It'd be great to get this in for 1.0, are you interested in rebasing & updating etc?\n. Thanks for the inspiration, this feature was implemented in #221 !\n. :clap: :clap: thank you for finding this and fixing it! :+1: \n. :+1: this is a definite improvement, right? browser testing would be nice but does this have to be blocked in the meantime?\n. \n. :+1: \nI never used jbuilder before but this looks good to me\n. I think I'm on your level, your JBuilder example in the test is just to say \"for example, this is why it might be useful\"\n. Yeah, agreed! Nobody will know it's there otherwise, right? Even just showing how to generate the usage notes would be great for the readme.\n. I think this is handled by the gem now, because \n- We watch .jsx files (src)\n- To reload, we clear out existing renderers (src)\nIf that's not sufficient or if I've missed something, please feel free to re-open & rebase on master!\n. :+1: yay for ruby built-ins!\n. :+1:\n. Very cool! Glad to see those refactors are paying  off. \nYes, I want to get a new version out soon, but we're blocked behind https://github.com/rails/sprockets-rails/issues/257 (And I don't have the nerve to dive in and figure it out!)\n. Just a random guy here: this seems weird and un-React-y... why not put something in your componentDidMount hook?\n. Could you send in a prop as the global reference name? \nerb\n<%= react_component(\"MyComponent\", {ref_name: \"MyComponent1\"}) %>\n<%= react_component(\"MyComponent\", {ref_name: \"MyComponent2\"}) %>\njavascript\nvar MyComponent = React.createClass({\n  componentDidMount: function() {\n    window[this.props.ref_name] = this;\n  }\n});\nIf it really must be done, you could even make a nice mixin for it: \njavascript\nvar GlobalReferenceMixin = {\n  propTypes: {\n    ref_name: React.PropTypes.string.isRequired,\n  },\n  componentDidMount: function() {\n    window[this.props.ref_name] = this;\n  },\n  componentWillUnmount: function() {\n    delete window[this.props.ref_name];\n  },\n};\n// ... \nvar MyComponent = React.createClass({\n  mixins: [\n     GlobalReferenceMixin,\n  ],\n})\nAnyways just my 2 cents, this doesn't encourage a React best-practice :)\n. haha, hey, that's just how it goes playing with new toys :)\n. sounds like this could be accomplished in a more explict, context-specific way\n. Hey @sebyx07, I don't quite understand your issue, could you share more detail? For example, some view code, some component code, how you are changes pages, etc.\n. Feel free to reopen this issue with more debug information! \nAlso make sure you're on the latest master \nruby\ngem \"react-rails\", github: \"reactjs/react-rails\"\n. being addressed in #105 \n. haha\n\n. @maxguzenski  took a pass at this in #183, what do you think of that?\n. We don't unmount on beforeUnload anymore, so I think this is no longer relevant!\n. Maybe related to https://github.com/reactjs/react-rails/pull/93 ?\nTurbolinks is defined, but not supported?\n. the UJS now detects if Turbolinks isn't supported and uses native events in that case. If you're still having trouble, feel free to reopen this issue!\n. :+1:\n. Interesting, why is this better than just jamming it into a <script>? for example:\nerb\n<script>\n  window.rubyVar = <%= @some_ruby_var.to_json %>\n</script>\n(My first thought is that this is beyond the scope of react-rails but I could be missing something!)\n. IMO :-1: for being non-idiomatic React\n. Hoping to support more customization of the view helper with #346 !\nThat way you could distribute a custom helper & renderer in a gem and hook them up with a railtie.\n. I hope that new extension point is working for you!\n. I'm in favor (after stewing on it a bit), one approach was tried here also: https://github.com/reactjs/react-rails/pull/91\n. closed because #117 was merged :confetti_ball: \n. :+1: I know there are some other PRs out there regarding turbolinks compatibility and events but this seems like a solid improvement on master. React.ujs seems good to me.\nI see you added a bit about removing data-react-class node when unmounting -- seems fine with me, in my cases that node is always invisible and non-structural or whatnot.\n. seems right to replace the previous one with this one, right? It's the same code (with that bit added), just assigned to React.ujs\n. :+1:\n. @zpao I think we're just waiting on your OK or other suggestion on these 2 questions. It would be nice to get this worked out, then update those other PRs\n. @zpao any objections to going forward like that ^^ ?\n@robrobbins  He said he'd be busy so if we don't hear from him in 48 hours, I think we should take that as agreement :)\n. :+1: you're a good man @robrobbins \ndropped this in locally just to make double-sure & looks good to me \n. :money_with_wings: \n. @jmagoon I'd be in favor of that change. \nThe only downside I can think of is that components wouldn't be re-mountable. But, is that something that  matters? Does anyone depend on that?\nActually, I think I do that sometimes: arbitrarily fire page:change (faking the Turbolinks event) in order to mount components in a just-loaded modal. At present, it just doesn't matter because it re-mounts with the same data-react-class and data-react-props (and React doesn't end up doing anything to the DOM). So maybe if you removed data-react-props, you could also remove data-react-class, so that calling ReactRailsUJS.mountComponents() would just miss those things all together.\nOh wait, that wouldn't work because unmountComponents depends on that data-react-class attribute. :S\nAnyways, I'm open to something like that ^^, especially if we could get something like #91 worked in. (Then I could stop my stupid hack for mounting new components!)\n. @jmagoon Turns out we need to keep those props in the DOM to support turbolinks, see #159 \n. :+1: Although I don't have a place to use it, I think this is a fitting feature. It would be nice if took a :layout option (or maybe even :status?) like render does.\nAlso, before merging, it should be added to the readme!\n. @vipulnsward that is nice,  react_component(...) in the controller keeps the API surface area down too, good for my brain :)\n. I'm not actually doing this in my app, but I found it worked in a quick test: \njavascript\nvar MyComponent = React.createClass({\n  ...\n  componentDidMount: function() {\n    this.getDOMNode().parentElement.removeAttribute(\"data-react-class\");\n  }\n});\nDoes that work for you?\n. For non-Turbolinks settings, this has been disabled by default (since https://github.com/reactjs/react-rails/pull/318)\n. The error message includes the ExecJS stack trace since #215, horray!\n. Hi, this is because the Comment component is using underscore.js, but underscore isn't loaded by the server for prerendering. \nThe only file that gets loaded by the server is app/assets/javascripts/components.js. If you want to load underscore on the server, you might be able to require it in components.js (something like //= require underscore).\n. I double-checked the original PR  ( #24 ) and it seems like it wasn't used in the first place ... weird! :+1:\n. Thanks for the all the examples!\n. Hmm, I can't tell that this is related, but here's what jumped out at me: \nWhen you pass a component name to react_component, that string is looked up in global scope (after loading components.js, source). Are you assigning your component class to global variable Header anywhere? \n(I'm not sure why this would cause \"unexpected token <\" but it's a start .... )\n. :clap: :clap:\n. Sounds like there are a few OK workarounds!\n. sounds like you found a good solution!\n. I think getting the UJS just right: \n- [x] Public & exposed at proper namespace (#117)\n- [x] Can mount & unmount with a selector (#91)\n- [x] Detects turbolinks properly (#93)\n- [x] Works with (or disables) turbolinks cache (#89)\n- [x] Responds to correct turbolinks events (ie before-unload if available) (#89)\n- [x] fix turbolinks cache + removing nodes bug #159 \n- [x] figure out initializer-related (?) issues\n. I totally agree that react-rails should be require-friendly in one way or another, but I don't think it's a 1.0 blocker. (Maybe that's because I'm making no effort to use require in my app :stuck_out_tongue: .)\n. @zpao  I think we're on the home stretch :D\n- For my part, I'm happy with the docs after #191\n- Last UJS issue is in #221, I'll merge it soon if nobody objects\n- Starting the conversation about versioning in #228 \nAny other blockers that you know of? \n. @zpao of course there's still a few outstanding issues, but it's good to be 1.0.0 by me, what do you think?\n. :tada: https://rubygems.org/gems/react-rails/versions/1.0.0\n. No idea why this started failing but his commit fixed the tests in my PR: https://github.com/reactjs/react-rails/commit/98aa77d1205e3d486f9a1627debf5d79cf39f54a\n. I think the short answer is: \n- This gem works great if you do your dependencies Sprockets-style (eg, installing gems like underscore-rails or copy-pasting dependencies into app/assets/javascripts/vendor, then requiring them with //= require ....)\n- This gem doesn't have any trappings to support commonjs requires, and that's a known bummer. No PRs to fix it at the moment, just some suggested workarounds :)\n. @zpao added :strip_types option. It's accepted Ruby-style strip_types and converted to stripTypes under the hood. \nI found that stripTypes didn't work unless harmony: true. Is that a known thing? I didn't see any mention of it on https://github.com/facebook/react/blob/master/npm-react-tools/README.md. My local react-source is 0.12.0:\n$ bundle show react-source\n/Users/rmosolgo/.rbenv/versions/2.1.2/lib/ruby/gems/2.1.0/gems/react-source-0.12.0\n. Oops, had to add a leading / for the tests to pass\n. Nice! Weird that the tests still failed with:\nErrno::EADDRINUSE: Address already in use - bind(2) for 127.0.0.1:46613\nsomething messed up about capybara? Maybe it would ~just work~ a second time since https://github.com/rmosolgo/react-rails/commit/98aa77d1205e3d486f9a1627debf5d79cf39f54a passed.\n. :+1: thanks, good catch!\n. I thought leaving out the minor version was be design -- it installs the latest minor version by default, right? \n. Nice!\n. Yeah, I don't know that bit too well either. I bet that example is for a Rails gemfile. Here's a working example where it's added with add_development_dependency:\nhttps://github.com/jfelchner/ruby-progressbar/blob/master/ruby-progressbar.gemspec\nMaybe that will magically fix the JRuby failure...\n. see also https://github.com/goldstar/blackbeard/blob/master/blackbeard.gemspec\n. finished up in #274 :tada: \n. I'm definitely in the keep-it-simple boat. It seems like everybody has his or her own preferred spin on Flux!\n. If you're still in the market for new ways of server side rendering, I'd love your review of #253!\n. There are a lot of new APIs for customizing JS, I hope some of them are useful for you:\n- injectable view helper implementation\n- per-request view helper setup\n- before_ and after_render hooks for server-rendering \nIf they aren't, please open an issue to describe what's missing!\n. I don't know the first thing about jbuilder, @xionon what do you think of this?\n. Haha, I trust you, but I wouldn't be doing a good job if I didn't double check :P \nI'll give it a try later if we don't here from xionon. I figured I'd ask him since he wrote that feature to start with!\n. :boom: Thanks guys!\n. For my part, I'm using Sprockets and attaching objects to a global namespace, so for example, a class is named like this:\njs\nBlog.PostsForm = React.createClass({ /*... */ })\nI prefix all the classes to be sure they don't conflict.\nI name the files to be underscored version of the class name: \napp/\n  assets/\n    javascripts/\n      components/\n        posts/\n          posts_form.js.jsx\n          posts_index_list.js.jsx\n          posts_index_list_item.js.jsx\n          posts_show_comments.js.jsx\nIt's not exactly the most modern JS organization strategy, but it works well enough :smile: \n. Turned out to be a short conversation :S \nAnyone else??\n. That's nice! I have just that problem, when I use the structure I described, I'm at a loss of where to put those truly reusable classes.\n. Thanks for sharing that info! I guess that was it for the \"conversation\" :'( \n. For my part, I suspect our initializers are a bit off. The problem is, I don't ever have this problem (or other possibly-initializer-related problems). Would you mind testing my hypothesis?\nYou could point your gemfile at the branch in #187 and see if the problem still happens:\nruby\ngem 'react-rails', github: 'rmosolgo/react-rails', ref: '0baaff7fb67010295630af1bd21bf3749cb64ed1'\nI think that would do the trick! I'd love to hear if you can try it and if you see any difference.\n. please reopen if you encounter this again with the latest version!\n. Thank you!\n. thanks!\n. Sorry, I think this has been cold from even before I started maintaining this. \nPlease feel free to reopen if you think this is still an issue!. Using FileUpdateChecker in 2.0 will be more configurable and also catch newly-added files: https://github.com/reactjs/react-rails/pull/682. For my part, I suspect our initializers are a bit off. The problem is, I don't ever have this problem (or other possibly-initializer-related problems). Would you mind testing my hypothesis?\nYou could point your gemfile at the branch in #187 and see if the problem still happens:\nruby\ngem 'react-rails', github: 'rmosolgo/react-rails', ref: '0baaff7fb67010295630af1bd21bf3749cb64ed1'\nI think that would do the trick! I'd love to hear if you can try it and if you see any difference.\n. do you mind sharing your Gemfile.lock? At least for rails version and react-rails version if you don't want to post the whole thing\n. This works for me on the latest react-rails version, please feel free to reopen, comment, or open a new issue if you're still having issues with reloading!\n. If you're using Sprockets (the JS bundler that comes built-in with Rails), you'll need to require the mixin file. This will make the mixin available at load time. \nFor example, let's say your mixin is in /components/mixins/my_mixin.js and your component is in /components/folder/my_component.js. You could require the mixin by  adding like this to /components/folder/my_component.js: \njs\n// = require ../mixins/my_mixin \nMyComponent = React.createClass({\n  mixins: [\n    MyMixin,\n  ],\n})\nSprockets has a few other options for loading files, so be sure to check those out, too!\nDoes that help? \n. closed as duplicate of #128\n. Yes, I think some versions of react-rails + some versions of Turbolinks have this bug: \n- when a page is restored from the Turbolinks cache, components aren't mounted\nI think the solutions are: \n- Disable the turbolinks cache with Turbolinks.pagesCached(0)\n- use react-rails master + the latest version of Turbolinks\nSee related #89 \n. Wow, I didn't realize turbolinks cached the actual document before changing pages. I always assumed it cached the server's response for the URL.\nTurbolinks caching the document as-is\nwhich happens before fetching a new page\nLe sigh, better sort that out \n. Taking a pass at it here: #190, can someone checkout that commit and confirm it solves the problem?\n. I've merged #190, please update to master and reopen if you experience this issue again. Thanks for reporting it!\n. (living on the edge of master, see #133)\n. No reason not to use it in production! I'm using all over PCO Check-ins with no problem. Only caveats:\n- You have to use some tricks if you're using commonjs requires (https://github.com/reactjs/react-rails/issues/129#issuecomment-66222019)\n- For best results, use the latest turbolinks version (https://github.com/reactjs/react-rails/issues/159)\n. FWIW I don't actually use it to go full-SPA. I just use React components like I used to use complicated jQuery-powered bits -- just complicated, dynamic UI elements. It's like a more maintainable alternative to mutating the page with random jQuery. \nSeems like that's how FB uses it too: https://twitter.com/floydophone/status/557348616080076800 (at least for that part of the app)\n. Interesting stuff, I hadn't read about this before. Here's what I understood: \n- depending on how you eval, you'll access different scope\n- depending on how you eval, some browsers may throw errors that happen during the eval\nMy first thought is that this doesn't really affect us because our use of eval is so limited:\n- it's only eval-ing component names, eg MyApp.SomeComponent\n- the components are already global, so what is the risk of leaking?\n- it's performing a lookup, so the odds of an unexpected error are low. Besides this, if you did get an error (ie, the component wasn't found), you'd get an error later on anyways.\nI'm certainly not opposed to this change if it gives us some benefit, but can you help me understand what the benefits are? Did you encounter some bugs with this?\n(For my part, I don't know why eval is used that way in react_ujs.js, but I will assume that a previous author knew something that I don't!)\n. Haven't heard any issues with the existing behavior, but feel free to reopen if something comes up!\n. I think you're right: everything that gets passed into the component is serialized, so you can't pass a function.\n. See also #179 for workarounds like passing the function name as a prop\n. I agree with @xionon -- passing in strings of HTML is not a common React practice, so I don't think react-rails needs to go out of its way to support it.\n. WHY WHY WHY \n\n\n. ohhh i see ... https://github.com/jashkenas/coffeescript/issues/3829\n. :tophat:s  off to @vipulnsward !\n. I thought I'd try updating to master, I got this error:\n```\nrmosolgo ~/code/check-ins $ bundle update react-rails\nUpdating git://github.com/reactjs/react-rails.git\nFetching source index from https://gems.contribsys.com/\nFetching gem metadata from https://rubygems.org/......\nFetching additional metadata from https://rubygems.org/..\nResolving dependencies...\nBundler could not find compatible versions for gem \"coffee-script-source\":\n  In snapshot (Gemfile.lock):\n    coffee-script-source (1.9.0)\nIn Gemfile:\n    react-rails (~> 1.0.0.pre) ruby depends on\n      coffee-script-source (= 1.8.0) ruby\nRunning bundle update will rebuild your snapshot from scratch, using only\nthe gems in your Gemfile, which may resolve the conflict.\n```\nI guess it's for downgrading coffee-script-source in master. It was causing test failures.\nI edited Gemfile.lock and manually switched 1.9.0 to 1.8.0. \nThen I had success: \n```\nrmosolgo ~/code/check-ins $ bundle update react-rails\nUpdating git://github.com/reactjs/react-rails.git\nFetching source index from https://gems.contribsys.com/\nFetching gem metadata from https://rubygems.org/......\nFetching additional metadata from https://rubygems.org/..\nResolving dependencies...\n... gems\nYour bundle is updated!\n```\nDoes that work in your case?\n. i'm with ya, that's such a drag :S I'm pretty sure requiring the smaller coffee-script-source version was the right move, but it stinks that it had some unexpected (and untested) side effects :(\n. Yuck, sorry! They've just released coffee-script-source 1.9.1 which seems to work with react-rails. Try to install again?\n. They should compile on the fly. Did you add .jsx to the filename? For example, my_component.js.jsx.\n. That's nuts ... and you did restart your development server since installing the gem? \n. It caused random failing specs, see https://github.com/reactjs/react-rails/pull/168\nOpen to other suggestions how to deal with this!\n. They just released coffee-script-source 1.9.1 which seems fixed. I re-ran this one but it still installed 1.9.0. I'm going to resolve this with #180 \n. Hi @gauravtiwari , can you help me understand this problem?\nWhen you say you're loading via ajax, you mean you're fetching content for a modal, or something like that, right?\nAnd the page is properly rendered by the server, but then not re-mounted when it's inserted into the page?\nHere's what I've done to handle this case: \n1) include //= require react_ujs in application.js (so that react-ujs is in the main bundle)\n2) manually trigger the UJS mounting by calling ReactRailsUJS.mountComponents(). ( It's available since this PR was merged.)\nDoes that help in your case?\n. Unfortunately, react-rails doesn't provide any special support for running JS tests :( \nYou can see some of the gem's tests run JS via capybara: https://github.com/reactjs/react-rails/blob/master/test/view_helper_test.rb\nIt's a pretty rough option in my opinion :( \nIn the past I've just kept a JS test suite side-by-side with the rails app and just run it separately. You could look into current Rails JS testing options. Maybe the JSX transformer could be hooked into one of those!\n. Good news: #254 please give it a try!\n. Thanks!\n. Depending on where this shared function lives in JavaScript, you could work around this by using a wrapper component. \nGiven a shared function like this:\njs\n// It's not really a good idea to attach random functions to `window`,\n// but it's just an example!\nwindow.onCategorySelect = function(item) {\n    CategoryActions.setSelected(item)\n}\nYou could create a wrapper which passes that function to a component on the inside:\njs\nwindow.CategoryTree = React.createClass({\n  render: function() {\n    return (\n      <Tree \n        tree={this.props.category} \n        onSelect={window.onCategorySelect}\n      />\n    )\n  }\n)\nThen, render the wrapper with the Rails helper: \nerb\n<%= react_component(\"CategoryTree\", tree: @categories) %>\nThat way:\n- Rails renders the wrapper, CategoryTree\n- CategoryTree renders Tree with the desired event handler\nHope that helps!\n. I hope one of these solutions worked for you!\n. Yuck, apparently it's not so simple, it made master fail: https://travis-ci.org/reactjs/react-rails/jobs/51537751#L624\ngiven the problems ~>1.8 is causing, i guess we should just leave ~>1.9 ??\n. It looks to me like that job did bundle 1.9.1, or am I misreading it?\nhttps://travis-ci.org/reactjs/react-rails/jobs/51537751#L112\nhttps://travis-ci.org/reactjs/react-rails/jobs/51537751#L194\nhttps://travis-ci.org/reactjs/react-rails/jobs/51537751#L268\n. Cool feature! Would be nice to have a test that would catch any regression. Don't mind the failures on Travis, we have issues with our coffee-script-source version :(\n. good call @vipulnsward , just using the object's #to_json is a good OOP and Rails-y behavior. \n@mickey does that work in your case?\n. oh @xionon good call, that would be a nice way of splitting it. I may try it in a later PR. \n. just realized this could result in an unexpected double-mount on first page load, thinking...\n. Ok, took another try at this. It should just listen for native unload even when doing turbolinks events.\n. we don't do anything on unload anymore \n. Humm, I think react-rails expects to find that js tmp/react-rails/react.js\nwhich is inserted by an initializer that initializer might be giving other troubles too (#148, #175). \n@roygold is that file present in your project?\n. huh, i wonder if it's running into a problem on that initializer or never running it at all :disappointed: \n. I think the problem is that these lines aren't accomplishing their purpose:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L47-L50\nThey're supposed to copy React-related javascript files into tmp/react-rails/, but like you said, that folder isn't there. So ... how could it be failing?\n- It never runs the initializer at all?\n- It runs, but fails (and doesnt raise an error)?\n- It runs and succeeds, but then somehow that directory is removed?\nRegarding that first possibility, you could try checking out my branch in #187 and see if that improves your case. It seems like, depending on what kind of app server you use in development (and which version of that server), the react-rails initializer behaves slightly differently :confounded: \nRegarding the second possibility, there was some mention of file permissions issues getting in the way of the initializer (#175). Is there any chance of something along those lines in your setup?\nAs for the third possibility, I really don't expect that to happen!\n. I took a try with @bensie's app:\nrmosolgo ~/code $ git clone git@github.com:bensie/react-rails-load-issue.git\nCloning into 'react-rails-load-issue'...\nrmosolgo ~/code $ cd react-rails-load-issue/\nrmosolgo ~/code/react-rails-load-issue $ bundle install\nFetching gem metadata from https://rubygems.org/.........\nrmosolgo ~/code/react-rails-load-issue $ bundle exec rails server\n=> Booting WEBrick\n=> Rails 4.2.1 application starting in development on http://localhost:3000\nI got the same thing:\n\nThen I switched to: \ngem 'react-rails', github: 'reactjs/react-rails'\nAnd I got: \n\n(actually I had to add <h1>It's working</h1>)\nI like @bensie's suggestion to release master as 0.13.1 -- clearly good stuff has happened in master and if we leave that out of these other versions, sadness happens.\n. @bezelga react-rails writes some files into tmp/react-rails, can you see those files in the docker environment? \n. This is such a drag, check out #254 for a copy-less approach to app setup, I hope that will solve this problem!\n. We've merged #254 which removed the copy-on-boot flow completely! Please update to master and give it a try. \n. huh, interesting ... So other transforms work, just not destructuring assignment?\nIf you're interested in looking into this, you could add a test for destructuring into the tests for this gem. \nWe get JSXTransformer.js from the react-source gem (loaded here), so if it turns out to be a gem issue, that's the next place I'd look\n. I assume so, but I don't know for sure! Maybe that's part of it.\n. I don't have any good guesses on what's missing. You could double-check the version of your local JSXTransformer.js file. It should be in tmp/react-rails/JSXTransformer.js with a comment at the top saying its version. Can you tell if it's the latest?\n. We're having issues with that way of vendoring in code, it's not just you :S \nThanks for following up!\n. I believe it was a page taken out of ember-rails's book: \nhttps://github.com/emberjs/ember-rails/blob/master/lib/ember_rails.rb#L36\n. aw heck, can't hurt!\n. I don't think that gem is necessary. I noticed that in your source code, HelloWorld isn't attached to the window (like @danott said), and that's definitely necessary for exposing global objects with coffeescript .\nTry this:\n``` coffee\n@HelloWorld = React.createClass \n...\n```\nIt should have the same effect as the previous comment. \nIf that's not working, put a console.log in your code to make sure the component code is getting reloaded successfully. We've had some issues withthe initializers. You could check out this branch: #187 and try that with different initializer code. \nSince you're not getting parse errors, it seems like the JSX is getting transformed properly!\n. glad to hear it, strange that window. didn't do it, they do the same thing ... :S \n. Thanks for your review @rstudner ! I've removed those suggestions of manually requiring things and made the details of the install task a bit more obvious, what do you think?\n. rebased and updated for replay_console config\n. Yeah, maybe you could do something like that! \nI put it there because, as I understand it, Rails takes all the configs, then runs the initializers. So, you have to let them set app.config.react.jsx_transform_options before you pass them to the renderer. \nWhat if we just skipped the ceremony of app.config.react.jsx_transform and assigned React::JSX.transform_options directly?\n. @bborn I'm looking into this now and trying to reproduce. What Rails version are you using? I see in Rails 4.1, initialize_on_precompile was removed: https://github.com/rails/rails/commit/2d5a6de\nIn the mean time, you could work around this by assigning React::JSX.transform_options directly. Does that work for you?\n. Glad that worked for you!\n. I think this is because prerender currently doesn't support commonjs-style require :( \nYou can find a discussion of that issue & some workarounds here: https://github.com/reactjs/react-rails/issues/129#issuecomment-66222019\n. :+1: hope it helps, feel free to reopen if it turns out to be something else!\n. no :game_die: :(\n. \nInteresting, care to share your motivation?\n. oh, i see, that is bigger, thanks! \nregarding 1.0, feel free to chime in on #133!\n. Great feature! This will be a big win for day-to-day happiness! \n. Changes look great! :+1: \n. looks good to me, last call @vipulnsward @xionon ?\n. Just got a chance to try this out locally. (It took some finagling, my app isn't prerender-ready!). \nI noticed this outputs a warning, too:\n\n(Ignore the uniform notifier, that's some other library complaining)\nBut this seems OK with me, since it's meant for development only (right?).\n. Yep, that was 0.13. I checked out your branch so I'm not sure how that snuck in there! Maybe because react-rails/master has 0.13 now\n. :confetti_ball: thanks!\n. This gets raised when prerendering raises a JavaScript error (https://github.com/reactjs/react-rails/blob/master/lib/react/renderer.rb#L52). It may be some issue related to the component code, do you mind sharing the component source?\n. @jbhatab yeah, some people have expressed interest in a similar feature. \nRight now, the JS instance that performs prerendering has no idea about application state or any data other than things passed to components as props. There's no way to give it any data except via props in the react_component call. \nI can see the value of allowing the prerenderer to have access to some other arbitrary data, but personally it's not high on my list. You can see some related conversation in this discussion about isomorphic flux:\nhttps://github.com/reactjs/react-rails/issues/143\n. :+1:\n. for my part i just use data-remote=true and friends inside JSX, eg \njsx\n<form action=\"/form/target\" method=\"post\" data-remote=\"true\">\n  {/* ... */}\n  <input type='submit' value='Save'/>\n</form>\n. When the form is submitted, I replace the form with a spinner: \ncoffee\n$(document).on 'ajax:send', ->\n  CheckIns.StationSpinner.start() # replaces $(\".main\") with a loading indicator\nAnd the form submission responds with either:\n- new HTML to insert into $(\".main\") (maybe a new page, maybe the form with errors) \n- a JS redirect with Turbolinks.visit\nSo in my case, the form is totally destroyed after submit, then totally rebuilt from the server HTML (via <%= react_component ... %>). The new form has some initial{Whatever} props that become its state.\nHow's that?\n. I hope you got something working! It sounds like a react-rails-forms library might be welcome, see also #73 !\n. Humm, I know this feature is in master. I don't know, @zpao any reason this couldn't be backported to 0.13? \n@zhangsoledad if he says it's alright, then this feature should get some tests, too!\n. Uggg ... that's a bummer! \nIt looks like you're not using the react_component view helper, is that correct?\nIf you're not using the helper, then yes, you'll have to unmount the component yourself. \n(The view helper & the UJS work together in that regard:\n- the view helper inserts data-react-class attributes \n- the UJS searches for nodes with data-react-class attributes and unmounts components from those nodes \n  )\n. Taking inspiration from the UJS:\njs\nwindow.addEventListener(\"unload\", function() {\n  var node = document.getElementById('aisis-writer-panel-contents');\n  React.unmountComponentAtNode(node);\n});\n. Or use a turbolinks event if you're using turbolinks:\njs\n$(document).on(\"page:before-unload\", function() {\n  var node = document.getElementById('aisis-writer-panel-contents');\n  React.unmountComponentAtNode(node);\n})\n. :+1:\n. Thanks for sharing your solutions! I don't think there's anything that needs changing gem-wise so I'm going to close this.. wow, I've seen those leading semicolons before but I never knew what they were for! \n(fancy that, I've had this kind of bug before (not react-rails, somewhere else) but I didn't know this was one way to prevent it)\nThanks!\n. Also, this issue describes a similar error message: https://github.com/reactjs/react-rails/issues/209\n. Thanks for sharing all your solutions here! I don't think there's anything particularly required from this gem, so I'll close this issue.. I don't know of a built-in way to do it!\nYou can see the lambda used for getting the JS source code as a string here:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L66-L70\nYou could accomplish your goal by modifying the config to use ||= instead of = at line 66:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L66\nThen you could pass your own app.config.react.components_js lambda that gathers up source code from wherever you keep it.\n. This should be fixed in the latest react-rails (it uses the sprockets manifest in production). Hopefully we can get that other PR for SprocketsRenderer worked out!\n. At first I didn't merge this because it had this \"unresolved question\" of threadsafety. (I think it's been resolved: \"NBD.\") But now it doesn't merge because server rendering has been totally refactored. \nBesides that, I try to avoid \"just make it a setting\", but I didn't have a better suggestion at the time. \nNow, this feature is supported by passing options to config.react.server_renderer_options. For example:\nruby\n config.react.server_renderer_options = {\n    files: [\"react.js\", \"components.js\"], # files to load for prerendering\n    replay_console: true,                 # if true, console.* will be replayed client-side\n  }\nYou could use whatever you want for files:.\nWould that work for your use case?\n. Interesting! Prerender environments are shared between requests, so this is definitely possible. \nHowever, I'm surprised because I would expect your _conversations = {} inside initPlural to address this problem. It seems like that would reset _converstations to an empty object. What else could it be?\nHow do you read from the store? How do you render that component?\n. Sorry, I'm not sure what you mean by \"adding this string after this issue occurred\". \nDo you mind sharing your render function or the functions used for reading from the store? That info might help debug this issue.\n. Yeah, the background JS thread situation is a bit weird! Glad we got to the bottom of this.\n. Looks like the same failing test that's been bugging us all along:\n2) Error:\nViewHelperTest#test_react_server_rendering_does_not_include_internal_properties:\nActionView::Template::Error: TypeError: Cannot set property 'root' of null\n  (in /home/travis/.rvm/gems/ruby-2.0.0-p598/gems/turbolinks-2.5.3/lib/assets/javascripts/turbolinks.js.coffee)\nThat lingering Turbolinks bug, tried to address here, https://github.com/reactjs/react-rails/pull/168 but locking to 1.8.0 gave people other problems.  \n@andygeers could you add a test that checks for the presence of a backtrace? That would give some insight to how it's treated on the different JS runtimes (and make sure this feature keeps working!)\n. Sorry, should have said first: thanks, this will be a great feature!! :D\n. Yeah, like that, but preferably without stubbing ExecJS::ProgramError#backtrace. While the stub is present, we wouldn't know if the ExecJS API changed. \nI imagine it's hard (and pointless) to test the actual content of the backtrace, but I think it would be an improvement even just to test for a bunch of newlines, for example, \nruby\nassert(err.message.count(\"\\n\") > 2, \"The error has a multi-line backtrace\")\nThat puts a nice regression test on getting what we expect from ExecJS!\n. :+1: :heart_eyes_cat: it'll be great to actually get some context from the prerender environment!\n. thanks again!\n. :+1:\n. thanks!\n. Hum, I wonder if it just misses the document.DOMContentLoaded event?\nhttps://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L89\n. I suspect it's the same issue as described here:\nhttp://stackoverflow.com/questions/9237044/async-loaded-scripts-with-domcontentloaded-or-load-event-handlers-not-being-call\nBecause the react-rails UJS mounts components on DOMContentLoaded: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L90-L94\nYou could mount components manually at the end of your script with \njs\nReactRailsUJS.mountComponents()\n. :tada: \n. Ohhh I see, this is more flexible than when I tried to lock to 1.8.0. I just double-checked that Travis still pulls the latest (1.9.1), and sure enough:\n\n(https://travis-ci.org/reactjs/react-rails/jobs/55249241)\nNice, thanks!\n. thanks!\n. Nice feature! Looks good to me, let me just give it a try locally with Turbolinks and without\n. Looks good in a local test app w/Turbolinks & without, and looks good in PCO Check-ins \n. :tada: :confetti_ball:  thanks!\n. I removed it after reading this note: https://devcenter.heroku.com/articles/rails-asset-pipeline#therubyracer\n. Sorry, I don't use heroku and I don't use prerender! I just wanted to take that warning into consideration.\nThis guy might have more to say: https://github.com/reactjs/react-rails/issues/156\nSorry I don't have much!\n. wow, so maybe I was wrong to remove that suggestion from the readme?\nOn Wed, Mar 25, 2015 at 1:27 PM, bogdan-dumitru notifications@github.com\nwrote:\n\n@tomtaylor https://github.com/tomtaylor I've been using react-rails\nwith pre-rendering on heroku for a few months now. The sad part is I've\nbeen having memory related performance issues with ruby 2.1.2 for a while\nnow so I didn't have a clean slate to compare to after adding therubyracer,\nbut I think the memory usage didn't change dramatically (but with it being\nbad to begin with it's hard to say).\nOne thing I can say for sure is that using the \"node.js\" backend (which I\ndid at first before going live). Is much much slower. And after I looked\ninto it, it made sense to me, but I might be wrong so take this with a\ngrain of salt:\nThe way react-rails works is by keeping a pool of ExecJS javascript\ncontext to use for rendering. These are (usually) warmed up by evaluating\nthe component.js you pass in, and then evaluating the React.renderToString\ncals in those warmed up contexts. The thing is, with therubyracer, because\nit's a JS VM in ruby, the ExecJS context actually stay warm in memory. But\nwith node.js as a backend, each time you render a component, it actually\nreevaluates or the javascript from component.js because the ExecJS\ncontext defers to an actual node process each time and parses the\nresults. So it can't keep those warmed contexts in which it continuously\nevaluates new render cals.\nAgain this might be because of something wrong with my setup, but I\nremember following the code to the end back then. So with node backend I\nwas spending ~5s rendering views, whereas with therubyracer it was ~150ms.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/222#issuecomment-86203274.\n. Check out #290 for some comparisons of ExecJS backends & discussion too\n. seems like this has been settled :)\n. It doesn't work that way. \n\nActually the content of the block is rendered inside the <div data-react-class> placeholder (kind of like a poor man's server-side render)\nSource: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L23\n(It's overriden if you use prerender: true: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L11)\nIf you're interested in mixing HTML strings and react components, you could consider an implementation like this one (except rename the __html prop to children):\nhttps://github.com/reactjs/react-rails/pull/166\n. What versions of turbolinks & react-rails are you using? (In some versions, loading pages from the Turbolinks cache would get messed up.)\nCan you tell if your componentWillUnmount hooks are being called as expected? Maybe they aren't being called at all?\n. Shucks, my instincts say it's a case where some reference to an unmounted component is being kept around. \nMaybe you could test that by checking isMounted() in the callback? (I'm not sure how it's being kept around but that would narrow down the search a bit)\n. I posted the same on stack overflow, you could check out Ryan Florence's guide to jQuery + React:  https://github.com/ryanflorence/react-training/blob/gh-pages/lessons/05-wrapping-dom-libs.md\n. Glad you found something that works, please reopen if you find this to be caused by react-rails!\n. Wow, can you help me understand the problem you're seeing?\nMy local copy of react-source 0.13.1 has JSXTransformer:\n\n(and the file actually has the JSX transformer in it)\nAnd this recent build of react-rails passed\nWith react-source 0.13.1: https://travis-ci.org/reactjs/react-rails/jobs/55727493#L213\nAnd a test for transforming JSX: https://github.com/reactjs/react-rails/blob/master/test/jsxtransform_test.rb\nIt seems like JSX transform is working in some cases, what symptoms are you experiencing?\n. Yep, require vs sprockets is a big incompatibility, you'd have to bundle your code with something like webpack or browserify!\n. No, I expect config.react.addons will only include these: https://facebook.github.io/react/docs/addons.html\n. I hope you were able to load that dependency in your app, sounds like there were some good suggestions here, thanks!\n. Travis needs a \"4/5 not bad\" response :S \n. I'm open to publishing on rubygems, but in the meantime you can also lock to a ref:\nruby\ngem 'react-rails',\n  github: 'reactjs/react-rails',\n  ref: \"a05c5af050311843846dc29c4e3ef6bc34bb89fe\"\n. :confetti_ball:  https://rubygems.org/gems/react-rails/versions/1.0.0 \n:smile: \n. closed because copyless setup is better!\n. Hi, I hope this issue is cleared up in current react-rails, I see some work was done on how the gem initializes. If you're still having this problem, or if it pops up agian, please reopen this issue or open a new one!\n. @blarralde I'm not sure I understand the problem. What do you mean by pre-rendered in this case? Are you talking about the JSX transform? Or are you talking about prerender: true in the view helper?\nQuick test: if you update to the master branch, do you still have this problem? You can use the master branch by changing your gemfile:\nruby\ngem \"react-rails\", github: \"reactjs/react-rails\"\nthen running \n$ bundle install\nand restarting your development server\n. How weird! I'm not sure either. Is there any error in the JS console when this happens?\nSome things I could imagine: \n- Load order issues, eg no React when your component is defined \n- Page event issues, eg your component isn't defined at the time react-rails tries to mount components. This could be especially true if you're using Turbolinks, for example, see: https://github.com/rails/turbolinks/pull/438\nTo troubleshoot further, please share these files (or variations which reproduce the issue): \n- application.js\n- application template \n- component js \n- example page where component fails to load \nthat would help diagnose any of the possibilities above\n. interesting, good to know, thanks for sharing the solution!\nYes, the browser ignores scripts whose type is something other than javascript. text/jsx is for the JSX transformer only!\n. Thanks for reporting this issue. \n- What version of the gem are you using? \n- When (or in what circumstances) does this error occur?\n. Hmm. I'm comparing react_ujs in a05c5aand master. Here's the line where react-rails actually renders components:\nhttps://github.com/reactjs/react-rails/blob/a05c5af050311843846dc29c4e3ef6bc34bb89fe/lib/assets/javascripts/react_ujs.js.erb#L39\nhttps://github.com/reactjs/react-rails/blob/ea28c1997099fba0f10aaf276672b2e6fa840abe/lib/assets/javascripts/react_ujs.js.erb#L44\nSeem's like they're both using the new React.render(React.createElement(...)) API.\nI'm not sure what else to check. Do you mind sharing your component code (or some variation that still has this bug)? Maybe that would shed some light on the issue.\nAlso, unless you're on a05c5a for a certain reason, you could try updating react-rails with bundle update react-rails. It's worth a try :P\n. I wonder if the issue is the 'g' flag. See the note on Flags argument here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\nThat might explain why, in the server case, the second isn't replaced with a_\n. Hmmm Jruby? Do you mind sharing your component file (or at least enough of the file to reproduce this issue)?\nAlso, I noticed the file name ends in .js. If the file has JSX, make sure to add .jsx to the filename.\n. Also see #231 , do you hit this error when loading a page from the development server or when precompiling assets?\n. Ah, yes you can change it, see the component_filenames config: https://github.com/reactjs/react-rails#server-rendering\n. :+1: for proper parallel structure!\n. Yes, that's the issue, sadly nothing to do that I know of! \n. thanks!\n. Glad you found something that works!\n. @a2ikm thanks for taking a first pass at this, sorry some other changes have caused merge conflicts!\nI took a stab at implementing this in #273, so you could pass it as a config option:\nruby\n config.react.jsx_transform_options = {\n   asset_path: \"bower_components/path/to/JSXTransformer.js\" \n }\nWhat do you think of that?\n. I've merged #273, you can pass a custom asset_path: to jsx_transform_options!\n. @kirs I'm trying to reproduce this locally -- what did you do to encounter this error? (I've gotta dummy app on Rails 4.2 + Sprockets 3.0.2 and it starts up & runs ok in development)\n. ok, thanks, yeah I'll close this one and keep an ear out for sprockets 3 issues!\n. Humm, interesting fail. Seems like it's the same line that's causing this problem: https://github.com/reactjs/react-rails/issues/249 I guess we need to change the way we add things to the asset pipeline. \n@kirs one thing that would be really valuable would be to add a failing test. See how there's this Appraisal for a special sprockets version? https://github.com/reactjs/react-rails/blob/master/Appraisals#L5 We could add one for Rails 4 + Sprockets 3. That way we could be sure that, when we fix this, we actually fix it :) \nI can take a deeper look at how react-rails uses the asset pipeline tomorrow or early next week. (Of course, if you get a chance, have at it!)\n. This recent build used sprockets 3 and turned out green, feel free to re-open if an incompatibility is discovered later on!\nhttps://travis-ci.org/reactjs/react-rails/jobs/62607548#L341\n. addressed here https://github.com/reactjs/react-rails/pull/248\n. cool\n. No good reason, only poor maintaining on my part :grimacing:   Yeah, I just pushed the 1.0-stable branch for that purpose!\n. thanks!\n. Are you inserting the html into the page after the AJAX request? (Or maybe a library is doing it for you?)\nIf so, you'll need to trigger the React mounting operation manually: \njs\nReactRailsUJS.mountComponents()\n// Alternatively, scope the mounting operation: \nReactRailsUJS.mountCompunents('#my-container')\nreact-rails does this for you on page load & unload, but if you add components to the page at other times, you must call that function yourself!\n. I don't know, I don't actually use them! Which ones would get hooked up to which React UJS functions?\n. please reopen if manually mounting components didn't work for you!\n. thanks!\n. :+1: weird that this affects the tests but I'll take it! good catch! \n(I thought tilt was a dependency of rails, I guess not so!)\n. Thanks for your detailed report & info about how to measure the issue. This is new turf for me!\nLooks like this was resolved by #253, here's a comparison of 1.0 vs master, running:\nruby -rmemory_profiler -I. -e 'MemoryProfiler.report { require \"config/environment\" }.pretty_print' > memory_report.txt\n1.0\nLots of Sprockets \n```\nTotal allocated 1447748\nTotal retained 463404\nallocated memory by gem\n81814733  sprockets-3.0.3\n  42794787  rubygems\n  17847106  activesupport-4.2.1\n  12381094  mime-types-2.5\n  10138094  sass-3.4.13\n   8725717  json-1.8.2\n   8011839  2.2.2/lib\n   4887473  actionpack-4.2.1\n   4643550  railties-4.2.1\n   4627274  bundler-1.9.6\n```\nmaster\nNow with 20x less Sprockets :P \n```\nTotal allocated 949417\nTotal retained 182311\nallocated memory by gem\n42817946  rubygems\n  17619861  activesupport-4.2.1\n  12381094  mime-types-2.5\n  10138254  sass-3.4.13\n   8725717  json-1.8.2\n   7971678  2.2.2/lib\n   4887201  actionpack-4.2.1\n   4844431  bundler-1.9.6\n   4643519  railties-4.2.1\n   4439556  sprockets-3.0.3 \n```\nLooks good to me, does that look good to you? I'll cut 1.1 after addressing a few more points on #252 \n. Oh i see it's here, I imagine it's a sprockets 2.12 thing. I thought one of the Appraisals ran Sprockets 2 but I guess not. \nLooking now...\n. btw what rake task was that?\n. Yeah, I think the Rails 3.1 Appraisal uses Sprockets 2, eg this job\n. Ah, I reproduced also with rake db:migrate RAILS_ENV=test \nAlso:\n```\n$ rails c\nLoading development environment (Rails 4.2.1)\nirb(main):001:0>\n...\n$ rails c production\n/Users/rmosolgo/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:81:in `expire_index!': can't modify immutable index (TypeError)\n```\nI guess we should either test Sprockets version or make a dependency on Sprockets 3.  But Sprockets 3 is really new (released April 12, 2015), so I don't think we should add that dependency. \nI'm surprised the tests passed!\nPaging @byroot , I guess you were running Sprockets 3? \n. thanks for testing, glad this is cleared up!\n. :+1: I was going to say, can we add a test to make sure this behavior is preserved in the future, but I'm not sure where to add that test ... :S \n. @danielrhodes We just merged #254 which solves this at the root I think -- that PR removed the whole copy-on-boot workflow and replaced it by adding different paths to Sprockets based on your settings. I think that's a much cleaner flow.\nCould you try on master and see if that works in your case?\n. Please let me know if this new solution doesn't work for your case!\n. /shrug\n. I have some ideas to kick things off:\n- Instead of copying files into the app directory, add different gem directories to the asset pipeline based on config.react.variant. (For example, if :development, then add /vendor/development/, whose copy of react.js is the dev build. If :production, add /vendor/production, whose react.js file is the production build. That way, no file copying on boot.)\n- Decouple the server renderer, as suggested here: https://github.com/reactjs/react-rails/issues/143#issuecomment-76065541\n- Write some failing tests for the initializers, fiddle with em til they work!\n. .jsx_transform_options is a wont-fix for me, the work around is to assign JSX.transform_options directly and I think that's fine\n. Somehow I broke a lot of tests :disappointed:  gotta check that out.\n. @johnthethird I made it so you can do prerender: :static and use renderToStaticString \n@rearadmiral I can jive with that, I'll do it tomorrow\n. I'm stumped on this failing test -- the asset pipeline serves the right file, but the route doesn't \nIf i start up the dummy app, it works as expected:\n\nAnd it passes on master, I don't know what I changed between here and there that would change asset delivery :weary: \nTried:\n- Master does pass locally\n- Clearing tmp/cache more, still failed\n- Removing guard, still failed\n. Ugh, it's test order: if I remove the tests I added, everything runs ok.\n. Asking for help https://github.com/rails/sprockets/issues/51\n. It ain't pretty but it's working. \nMy call to the asset pipeline in SprocketsRenderer (in an earlier test) caused react.js to be cached. In an Sprockets version, it's not expired correctly, so I put a workaround in the test. Asset#force? doesn't exist in later Sprockets versions, so it's never called.\nI'm bummed that we have a test-order issue :S  But, it's a very odd case, it only fails on old Sprockets, and the same actions work in the dummy/ app if I boot it locally, so I'm not really concerned.\n. Double-checked this on a local project. Works & reloads on changes :)\n. Shoot, I thought I did that but obviously not :S I'm definitely open to it\nthough!\nOn Fri, May 15, 2015 at 1:15 PM, Bill DePhillips notifications@github.com\nwrote:\n\nI'm happy to see this merged. This is the key foundational step for a\nfuture flux-compatible plugin gem.\n@rmosolgo https://github.com/rmosolgo did you ever have a chance to\nwork on extension points for the base class? See my comment above\n<#14d5937911c00187_issuecomment-97610816> If you haven't spent any time\non it, I can try to write one and see what everyone thinks\nThanks again for pushing this through.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/253#issuecomment-102515499.\n. @mchristen thanks for reporting and finding the problem! I added some tests & worked up a fix here: #268\n. :joy_cat: The same idea hit me while writing up #252 , I love it. \n\nIt looks like this removes support for the \"enviroment drop-in path\" and that's fine with me -- seems like a rare use case with a trivial workaround of just dropping a copy of react.js in your /assets/javascripts/vendor directory (whatever pleases you)\nYou'll probably have to update a couple tests, too. Thanks, this is awesome!\n. Oh I missed the changes to react-source. If you don't feel like altering react-source, I'm open to a rake update_react task that updates the gem, then copies the those files into the react-rails source. \nSo then to add different versions, you'd just add different react-rails asset paths to the sprockets environment (instead of react-source paths).\nYour call, I love the copy-free setup either way\n. How does this work with a new project?\nIf it's a new project, lib/assets/react-source/ would be empty, right? So adding those directories to the asset pipeline wouldn't be much help. I'd rather not make a new user run a rake task just for setup (that would bring back the file copy problems).\nI see that lib/assets/react-source is gitignored, but what if we actually committed that to the repo and distributed it in rubygems? In fact, I think we could commit that instead of vendor/react, since the gem doesn't depend on those files. \nThat way, the rake task would be part of react-rails maintenance. To update the vendored JS, you'd run the task, which:\n- gets the latest from bower into git-ignored directories\n- copies versions into lib/assets/react-source (or wherever)\nThis introduces a hidden dependency on bower, but hey I guess that's the downside of this approach. Worth it IMO.\nWhat do you think of that? Have I missed something?\n. That looks nice! Bower is just the means for getting those files into the right directories. Then, the Railtie switches on config.react.variant and adds the desired directory to the asset pipeline. \nThe only remaining thing is this: is there any test that the directory approach really works? Eg testing production vs. development, testing add-ons vs no add-ons? (I'm not 100% sure how to test it)\nThis removes support for environment-based drop-in react.js files but that's OK with me.  I've never heard anyone using that configuration. I'll create a changelog after this PR is merged.\n. Not sure if this is related, but it rings a bell: https://github.com/reactjs/react-rails/pull/241\n. @byroot I tried another way of adding those assets, and I also added a test for the precompile task (only makes sure no :boom:), here's a PR into your branch: https://github.com/byroot/react-rails/pull/1\nAlmost there!\n. :+1: from me! I'll give it a try locally before I merge it and let it hang here for a bit in case anyone else has suggestions.\n. I gave it a try locally: \n- pointed at \nruby\n    gem 'react-rails', #  '~> 1.0'\n      github: \"byroot/react-rails\",\n      branch: \"dont-crash-on-boot-because-of-file-copying\"\n- tried getting :development and :production variants locally\n- at first, I had trouble -- even after changing to :production, I was still getting the development version\n- I cleared my sprockets cache (manually deleted tmp/cache in my case), then it worked:\n\n:+1:\n. would be nice as a separate PR!\nOn Mon, May 4, 2015 at 2:16 PM, Jean Boussier notifications@github.com\nwrote:\n\nI think byroot@b3ee527\nhttps://github.com/byroot/react-rails/commit/b3ee527ea11949819d9c0c38aef4a724d452797f\nwould solve the issue. Let me know if you want it included in this PR.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/254#issuecomment-98851664.\n. what a huge win, thanks @byroot  :confetti_ball:  :tada: !!\n. whoa! the only part I recognize is unexpected token at 'Unrecognized node in FTL backend: (JSON::ParserError) -- it tries to parse JSON but string isn't JSON, it's an error. \n\nCould you share some info about your environment, and maybe the relevant React code?\n- Ruby version\n- Rails version\n- React-rails version \n- ...?\n. Wow, so that error comes from webkit?  https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/ftl/FTLLowerDFGToLLVM.cpp#L861\nfunction definition: https://github.com/WebKit/webkit/blob/master/Source/JavaScriptCore/ftl/FTLLowerDFGToLLVM.cpp#L409\nI wonder if the coffeescript compiles to something that JavaScriptCore can't parse??\nThat doesn't quite make sense because the Ruby error is from parsing JSON ... so where would the Rails app be expecting JSON, but getting that error message?\n. @arunthampi any word on this issue? Did it get worked out OK?\n. Is version relatively new? It's throwing a NoMethodError so maybe it's not defined in some of the older Rails versions we support (3.2+)\n. :+1: thanks again for upstreaming!\n. It comes from here: https://github.com/reactjs/react-rails/blob/master/lib/react/renderer.rb#L55-L56\nThe server side renderer encountered a JS error while rendering and raised this exception. By the looks of it, JS tried to access a variable called foo which was undefined. We'd need some component code to diagnose further!\n. MM yeah, do other components successfully render on the server? If they all fail, it's possible some other JS lib is looking for foo somewhere and not finding it.\n. any news on this @Marthyn ?\n. Thanks for the suggestions, I hope one of those worked!\n. Good find, thanks for pushing the fix!\n. :+1: Recently I'm using server-rendering more myself, and I've had the same workflow (first make it perfect, then prerender: true). I'd be happy to pitch in or try something out along the way!\n. huh, yeah I usually get normal React errors (or a such-and-such is undefined if I have a typo in the react_component helper). Happy to help debug if you care to share some code. I think I'm on React 0.13, not sure if anything changed since then.\n. What's your react-rails version? The README is correct for master , but the 1.0.0 server rendering options are different. \nSee either the 1.0 readme or run master from github: \nruby\ngem 'react-rails',\n  github: 'reactjs/react-rails',\n  branch: 'master'\nI'm sorry, I forgot this would make the readme out of date, I'm about to add a note about the API change!\nreplicate?\nI tried to replicate this situation locally by setting up a server_render.js like:\njs\n//= require react\n//= require init\n//= require components\nand I was able to use components in a MyApp namespace. So, if this issue persists if you use master, I'll have to dig deeper!\n. By the way thanks for your very detailed report! :confetti_ball: \n. Thanks for following up, seems like there's still some weirdness with watching files. For me, I have to restart the dev server if I add a file ... :S \n. :+1: fixed the reported issue!\n. wow, is there any more stack trace to that? \nIf it's booting a renderer and trying to prerender, I guess it's coming from here: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/sprockets_renderer.rb#L11\nBut why would it work fine in the asset pipeline but not in prerender?\n. Reproduced on Sprockets 2.8 & 2.12. Oh, I misunderstood: it's coming from the asset pipeline, not from prerender!\n. Looks like this was touched recently in sprockets-rails, double-checking here: https://github.com/rails/sprockets-rails/issues/247#issuecomment-103162751\nI didn't notice it before because I was on sprockets 3 :S \n. @mchristen sounds like a sprockets-rails 2.3.1 issue, see this comment: https://github.com/rails/sprockets-rails/issues/247#issuecomment-103666873\n. aiiiyayay well the regression test for this particular issue passes, so i'm gonna go for it\n. @mchristen they've shipped sprockets-rails 2.3.2 & I'm able to use them together:\n~/code/check-ins $ bundle show | grep 'sprockets\\|react'\n  * react-rails (1.0.0 9a4f6ab)\n  * sprockets (2.12.3)\n  * sprockets-rails (2.3.2)\nPlease let me know if you can confirm/deny, if we're clear with the latest sprockets-rails I want to get ready for a new version release :D\n. react-rails doesn't include anything special for testing, but have a look at some of these resources:\n- http://stackoverflow.com/questions/26168081/how-do-i-use-jasmine-in-rails-with-react\n- https://reactjsnews.com/setting-up-rails-for-react-and-jest/\n. Thanks for fixing this! I thought I knew how ~> worked but apparently not :P\nLGTM once Travis is green\n. Aaaand as you suspected, green after re-run!\nBefore\nOnly 2 Rails versions because minor versions were skipped:\n\n\nAfter\n\n\n\n\n. Thanks! :confetti_ball: \n. The ruby looks A-OK, does the component render without errors without prerender?\n. Hmmm... Can you share any of your components files? Maybe something is being loaded into JS VM before being compiled?\n. Yes, it's possible that the \"unexpected }\" was in a JS file!\n. sounds like this has been taken care of!\n. Hey @nottombrown , I'm not sure how this is related to react-rails, can you clarify this issue a bit?\n. I added that clear_sprockets_cache helper to the tests, one of these days I'll go through and weed out all the different ways that the cache is cleared and replace them with that helper\n. @zpao can you help me out? I think I need the CODECLIMATE_REPO_TOKEN, which is under \"Settings\" > \"Test Coverage\". Can you see the gear icon here?\n\n. So I see! Thanks, I looked in the repo and didn't find it, but it must be there:\n\n. A few thoughts: \n- react_component expects a component class, not an instance. In your case, this might be: \nruby\n    react_component(\"UserView\", userName:  \"Eyal\")\n(The second argument is props to instantiate the class)\n- .coffee files are wrapped in an anonymous function, so by default, variables defined in a .coffee file can't be accessed outside that file. Overcome this by attaching your component class to the window object (or @, in coffeescript): \ncoffee\n    @UserView = React.createFactory(...)\n- BTW, that type.toUpperCase ... error is thrown when it can't find a component class with the given name. Usually it's either a typo in one of the names or a missing class.\nDoes any of that help?\n. hope those suggestions helped!\n. Derp, wrong branches :grimacing: \n. the harmony option currently supports some ES6 features, but not all. I've never found a clear-cut list of features it supports but you can see the visitors (which correspond to transforms) here:  https://github.com/facebook/jstransform/tree/master/visitors\n. Try 1.1.0, it uses @vipulnsward 's new BabelTransformer :smile: \n. thanks for porting this change!\n. :confetti_ball: thanks!\n. Hi, sorry it's not working! When you say \"rendered on the server side\", are you talking about server rendering (with the prerender: true option), or mounting components in the page with react_component view helper?\nCan you please share some component source code that replicates this problem?\n. Wow, how do you define a component with a name like that? I didn't think :: was valid in JS identifiers.\nWhen you pass a component class name to react_component:\n- Server rendering passes it to React.createElement src\n- The UJS adapter looks up that name against window (or evals it) src\nFor my part, I'm attaching things to a global object, eg App.PersonAvatar, then rendering them with react_component(\"App.PersonAvatar\", {person: @person}). This is close to \"JSX: namespaced components\"\n. As mentioned, there's nothing in this gem to especially support require. I'll be keeping an eye out for asset changes in 5.1, where webpack may come in the mix!. What's the stack trace from that error?\n. We discussed some options for implementing this on #286 but decided not to add it to react-rails\n. I could be underestimating the desire for this, but I think this is a very specific need. Are there others who want to do this?\nIf you wanted to use a different scheme for accessing components in your app, you could define your own view helper, for example:\nruby\nmodule ApplicationHelper\n  def opal_react_component(module_style_name, props, render_options={})\n    js_name = module_style_name.gsub(\"::\", \".\") # or any other transforms\n    react_component(js_name, props, render_options)\n  end\nend\nI'm happy with the existing features of this gem (mounting components by their JS identifiers) but if this is widely requested, I could be convinced!\n. yes, thanks for the suggestion but I think it's a better fit for an Opal-specific gem!\n. Are there any components in components/ that reference jQuery? Unfortunately jQuery (and consequently, many jQuery plugins) don't work with prerender: true because the server-side JavaScript environment doesn't have a DOM. \nWhat do you think, are there any components in components/ that reference jQuery (or another document-dependent library) at load-time?\n. Wow, nice find! I've noticed that same latency after deploy, but I didn't dig in. I wondered if it was JS instances starting or something. Looks like not!\nI like your approach! Does it require you to compile each of filenames? IE compile react.js and components.js separately? \nI guess you could just handle that in by passing filenames: [\"components.js\"] then //= require react in components js.\n. Here's another try at this: #430\n. Addressed by #430 . Wow, thanks for sharing this really detailed info! Yeah, server rendering was added before I was involved (PR and it looks like connection pool was added but not tested. \nCertainly looks like a global lock: https://github.com/rails/execjs/blob/master/lib/execjs/ruby_racer_runtime.rb#L73-L79\nI'm not in a great situation to test this rigorously because we don't prerender in production. But it would be great to test the efficacy of connection pooling with different ExecJS runtimes (eg, does the Node.js have the same problem?)\n. Curiosity was killing me, here's a benchmark I ran, what do you think?\nhttps://github.com/reactjs/react-rails/pull/290\n. updating code and docs here: https://github.com/rmosolgo/react-rails/commit/850f2b89695cc0974a7444834db815b0b2cb6e89\n. Yeah, I have lock problems sometimes too, I couldn't even get Benchmark.ips to run :S \nThread.new over and over is kind of a stupid way of testing, but I think it shows that there's a lock somewhere further down & ConnectionPool isn't buying us much\n. :money_with_wings: \nmine keeps locking here:\nrmosolgo ~/code/react-rails $ ruby -I lib  benchmarks/server_rendering_benchmark.rb\n                                                    user     system      total        real\nthreaded, 1 conn, 2 threads, therubyracer (V8)  0.140000   0.020000   0.160000 (  0.156010)\nthreaded, 1 conn, 2 threads, Duktape            0.780000   0.010000   0.790000 (  0.790320)\nthreaded, 1 conn, 2 threads, JavaScriptCore     0.180000   0.320000   4.680000 (  4.849217)\nthreaded, 1 conn, 2 threads, Node.js (V8)       0.140000   0.290000  18.570000 ( 18.563796)\nthreaded, 1 conn, 4 threads, therubyracer (V8)  0.190000   0.020000   0.210000 (  0.206175)\nthreaded, 1 conn, 4 threads, Duktape            1.490000   0.020000   1.510000 (  1.500667)\nthreaded, 1 conn, 4 threads, JavaScriptCore     0.270000   0.580000  10.590000 ( 11.642282)\nthreaded, 1 conn, 4 threads, Node.js (V8)       0.250000   0.620000  38.750000 ( 38.782936)\nthreaded, 10 conn, 2 threads, therubyracer (V8)\nBut I get the point anyways! \n@johnthethird, it looks like ExecJS/V8 has a lock which nullifies the use of ConnectionPool in server rendering. Do you know of any red flags in removing it?\n. Thanks @johnthethird , I forgot about JRuby! \nHere's the benchmark with Ruby Rhino & Node.js on jruby:\nrmosolgo ~/code/react-rails $ jruby -I lib  benchmarks/server_rendering_benchmark.rb\n                                                    user     system      total        real\nthreaded, 1 conn, 2 threads, therubyrhino (Rhino)  11.690000   0.180000  11.870000 (  2.922000)\nthreaded, 1 conn, 2 threads, Node.js (V8)           5.410000   0.280000  24.250000 ( 19.702000)\nthreaded, 1 conn, 4 threads, therubyrhino (Rhino)   6.460000   0.120000   6.580000 (  2.127000)\nthreaded, 1 conn, 4 threads, Node.js (V8)           2.340000   0.380000  39.480000 ( 38.058000)\nthreaded, 10 conn, 2 threads, therubyrhino (Rhino)  4.030000   0.050000   4.080000 (  1.025000)\nthreaded, 10 conn, 2 threads, Node.js (V8)          1.480000   0.160000  21.260000 ( 10.446000)\nthreaded, 10 conn, 4 threads, therubyrhino (Rhino)  5.150000   0.060000   5.210000 (  1.078000)\nthreaded, 10 conn, 4 threads, Node.js (V8)          1.930000   0.390000  64.290000 ( 16.491000)\n1 conn, 2 threads, therubyrhino (Rhino)         2.560000   0.030000   2.590000 (  1.086000)\n1 conn, 2 threads, Node.js (V8)                 0.720000   0.170000  19.420000 ( 19.410000)\n1 conn, 4 threads, therubyrhino (Rhino)         1.680000   0.030000   1.710000 (  1.075000)\n1 conn, 4 threads, Node.js (V8)                 2.060000   0.400000  40.220000 ( 38.874000)\n10 conn, 2 threads, therubyrhino (Rhino)        0.750000   0.010000   0.760000 (  0.357000)\n10 conn, 2 threads, Node.js (V8)                0.520000   0.130000  20.160000 ( 10.280000)\n10 conn, 4 threads, therubyrhino (Rhino)        1.860000   0.030000   1.890000 (  0.560000)\n10 conn, 4 threads, Node.js (V8)                1.960000   0.350000  59.300000 ( 15.169000)\n. How's this for takeaways: \n- Default Pool Size to 1 \n- Document: on JRuby, you can up the pool size \n- Recommend RubyRacer for MRI\n??\n. Anybody want to cook up a PR :grimacing: ?? TODO:\n- Default Pool Size to 1\n- Document: Recommend RubyRacer for MRI\n- Document: on MRI, you get a deadlock when pool size > 1\n- Document: on JRuby, you can up the pool size and get effective multi-threading\n. Updating code & docs here: https://github.com/rmosolgo/react-rails/commit/850f2b89695cc0974a7444834db815b0b2cb6e89\n. Personally I think this should be the responsibility of the component, for example: https://github.com/reactjs/react-rails/pull/102#issuecomment-64241185\n. Sounds good, it should be a pretty straight-forward swap. \n- Implement a BabelTransformer which implements #initialize(options) and #transform(code) (just like the existing Transformer)\n- Test BabelTransformer\n- Assign it to React::JSX.transformer =\n- Document the new jsx_transform_options\n- If we make it the default, make some warnings for people using the old options.\nAny takers out there?? :)\n. Wow, this would be quite a feat! However I think a dependency on Slim is outside the scope of react-rails. \nThe master branch has a nice extensibility point for this, though. You could define your own transformer class add assign it to JSX.transformer_class: https://github.com/reactjs/react-rails/blob/master/lib/react/jsx.rb#L10-L14\nWhat do you think of that? \nIf you end up making it work, I'd be happy to add an \"add-ons\" page to the Wiki & include this project as the first entry :)\n. Yeah, hoping to cut a new version soon, but waiting for https://github.com/rails/sprockets-rails/issues/257\n. Please do let me/us know if it comes together, it would be great to add a reference on this project somewhere!\n. Humm, I'm not sure. I just updated to master branch and it worked ok for me. Here's my Gemfile.lock entry:\nGIT\n  remote: git://github.com/reactjs/react-rails.git\n  revision: 6019be97899c74ba351d7cf69877060c52e501d9\n  specs:\n    react-rails (1.0.0)\n      coffee-script-source (~> 1.8)\n      connection_pool\n      execjs\n      rails (>= 3.2)\n      tilt\nCould you please share some more information? For example:\n- Your gemfile.lock entry for react-rails \n- The full stack trace of the exception \nIt's hard to debug without specifics!\n. Thanks, that's very helpful! \nI cloned it and started it up. I also added the better_errors & binding_of_caller gems. \nI found that JSXTransformer#jsx_transform_code was returning nothing instead of returning the JSXTransformer source. Then I saw that the Ruby transformer was looking for the JS code in a non-existent location:\n\nI think this line is causing the problem:\nhttps://github.com/reneweteling/react-slim/blob/ed5f379d4664cc717fcb9910a4491a7721f600be/config/environments/development.rb#L45\n(Maybe it was copy-pasted from the readme?)\n. :clap: :clap: Your implementation looks great!\nI don't understand your question about \"plugins: [constants]\" (I'm not familiar with babel yet), what do you mean by that?\n. Could we get a few minimal tests for BabelTransformer ? IMO it doesn't have to be much, but it would be nice to have a test to ensure some future change doesn't totally break it!\n. @netikular not at all, \"just jumping in\" is the beauty of a public project, thanks for speaking up :)\nI noticed that project as I was sizing up some options. I didn't it very compelling because: \n- the documentation was quite sparse (how do you pass Babel options? how could we make it process .jsx files?)\n- the readme wasn't compelling (\"This plugin is primarily experimental and will never reach a stable 1.0.\")\nSo, I think it's ok to have a custom transformer! \n. :+1: if you guys prefer it, I'm open to it!\n. Cool, sounds like we don't need plugins: [constants]. I agree, custom plugins can be a \"later\" thing.\nAs for coffee-script, what if we left JSXTransformer as the default for 1.1, then switch the default and add a warning for coffee-script users in 1.2? That keeps things working for people now & keeps our project moving forward.\nEither way, I don't think it's a deal-breaker. .coffee users have two decent options: use JSXTransformer or disable strict mode in babel. (And a third very good option: switch to JSX :P)\n. :+1: looks good to me :grinning: \n. :confetti_ball: the future is now :smile: \n. For me, it just seems like the \"right\" thing to do: React components have lifecycle hooks and it seems good to run through them. If people want to skip those lifecycle hooks, ok, go for it, but executing them seems like a good default behavior. \nI imagine another simple work around would be:\nReactRailsUJS.unmountComponents = function() {}\nDo you know how any other React + server framework libraries handle it? Do they unmount on unload?\n. I definitely see your point, I'm open to a PR with a better handling of this case!\n. :+1:\n. Wow, that's a really cool idea!\nI'm hoping to enable this kind of creativity by the React::ServerRendering.renderer = API. This allows you to implement a server renderer and hook into the rest of react-rails. \nA renderer should implement:\n- #initialize(options) which receives react.config.server_renderer_options\n- #render(component_name, props, prerender_options) which returns rendered markup to put into the document.\nDo you think this kind of feature could work with that extension API? I want clean up SprocketsRenderer a bit too, see #299 \n. It's on master, but not ruby-gems \nDefault config from the railtie:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L55\nIs assigned to an attribute on ServerRendering\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering.rb#L6\nSprocketsRenderer as an example:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/sprockets_renderer.rb\nAnd a NullRenderer used for testing:\nhttps://github.com/reactjs/react-rails/blob/master/test/react/server_rendering_test.rb#L3\n. also if you get something like this together, I'd love to add a wiki page or something and link to it! There aren't any other contrib-type projects yet but I think that would be great.\n. somewhat relevant to this thread is my PR to re-implement the view helper to be request-aware. You get one instance of the helper per request. https://github.com/reactjs/react-rails/pull/346\n(sorry, wrong button!)\n. Seems like this was addressed, but I forgot to close it!. no news is good news\n. If type this error into google, I see references to JavaScriptCore. Are you on OSX? \nIf so, is there other JS code in your bundle? Maybe there's another dependency which depends on a feature which JavaScriptCore doesn't implement? (For example, built-in Promise: https://bugs.webkit.org/show_bug.cgi?id=135866)\nIf that doesn't help, please share:\n- Your react-rails configs \n- Any javascript files that are used for server rendering\n. Yeah, I think think this would be good fit! We have a problem with Sprockets in production, too: although sprockets might create a big, compiled file, it's not used by react-rails server rendering (#212 & #288).\nHow about this solution:\n- You could implement CompiledFileRenderer (your call on the name :P) which builds on ExecJSRenderer \n- CompiledFileRenderer accepts a path to file which should be a compiled asset including everything needed for server rendering: React.js, components and any dependencies\nFor Webpack users, they could use this renderer in dev & production, just pointing it at their bundle. For Sprockets users, they could use this in production and point it at the compiled asset. \nOne more consideration: Since Sprockets files often have a big hash in them which we can't predict, the path argument for this renderer should be suitable for Dir.glob (or something similar). That way Sprockets users won't have to worry about different hashes on different builds.\nWhat do you think about that? It would be a big win for react-rails I think!\n. @mchristen I guess you're right about possibly multiple compiled assets. I wonder if you could use the asset_path approach in the config, eg \nruby\nif Rails.env.production?\n  react.config.server_renderer = React::Rails::ServerRendering::StaticFilesRenderer\n  react.config.server_renderer_options = {\n    files: [ActionView::Base.new.asset_path(\"components.js\")]\n  }\nelse \n  # SprocketsRenderer etc\nend\nThat would keep the renderer very \"dumb\" -- still just takes a list of files\n. Yes, I think a \"Related Projects\" section would be a nice addition! There are a few other projects (eg React.rb, react-rails-benchmark_renderer) that could have a line there, too!\n. Thanks for sharing some solutions here! I'll keep an eye out for forthcoming Rails 5.1 asset changes too, and see if there's anything react-rails can take advantage of.. Looks like ExecJS doesn't support require: https://github.com/rails/execjs#faq\nThey mention this possibility: https://github.com/cowboyd/commonjs.rb You could try that (and let us know if you have any luck)!\n. We use Babel for transforming JSX files (on master, as of #295) but supporting require for JS dependencies means working around Sprockets (or reimplementing it?), which is a bit beyond the scope of react-rails!\n. Thanks for sharing some solutions here! I'll keep an eye out for forthcoming Rails 5.1 asset changes too, and see if there's anything react-rails can take advantage of.. ReactRailsUJS mounts components in response to events -- do you know of these events are fired in that test context? \nHere are the events, (ReactRailsUJS tries them in this order): \nTurbolinks page:change: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L85\njQuery ready: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L91\nDOMContentLoaded: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L94\nAlso, what if you add a manual call to ReactRailsUJS.mountComponents(), does that cause them to be mounted?\n. :grin: :money_with_wings: :+1: :tada: \n. Thanks for reporting & including a case to reproduce it. In short, I could not reproduce this issue. I gave a try with:\n- Render function\njs\n    render() {\n      return <div>I'm an apostrophe & + \"</div>\n    },\n- and into the Rails view:\nslim\n    = react_component(\"Mtg.App\", {}, prerender: true)\n- In view-source, I could see it was prerendered:\nhtml\n        <div data-react-class=\"Mtg.App\" data-react-props=\"{}\"><div data-reactid=\".ctiakk93wg\" data-react-checksum=\"-1223354208\">I&#x27;m an apostrophe &amp; + &quot;</div></div>\n- In a normal browser window, it remounted with no errors: \n\n- I'm using:\n  - React: \"0.13.1\"\n  - react-rails: 1.0.0\nCould you share some more info? Maybe your React version, react-rails version, component source, and view mount code\n. Thanks for the details, yes, I'm able to reproduce it with Math.random. However if I push a defined number of <div>s, I don't get any error. \nDo you get an error if you push a fixed number of divs?\nIf this only occurs with Math.random, I'm inclined to leave it as-is. The rendered output looks good & React successfully remounts the components. Perhaps the difference is how React warnings format text from different sources. \n. :sparkles:  :+1:\n. Hi thanks for updating this, I'm sorry it's sat cold for quite some time! \nI hope to add an extension point for the view helper much like we have for transforming JSX & server rendering. Then you could define some class with the inspected behavior and inject it during configuration. That allows us to have lots of different options without packing too much behavior into one class or method. \nThanks again for your work on identifying this problem & proposing a solution, I'll follow up soon!\n. Hoping to support more customization of the view helper with #346 !\nThat way you could distribute a custom helper & renderer in a gem and hook them up with a railtie.\n. Nice! Glad that worked out. \n. Maybe possible, in the meantime you can use tag: :span to at least have span > span ! \n. :tada:  https://github.com/reactjs/react-rails/releases/tag/v1.1.0 \n. Yes please!\nOn Thu, Jul 9, 2015 at 1:53 PM, Boris Rorsvort notifications@github.com\nwrote:\n\n[image: :+1:] Well done! regarding the base extra wrapper. Shall I create\nanother issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/307#issuecomment-120141124\n.\n. aaaand re-running master just worked :S \n. What's the advantage to having two code bases vs. not using the parts of react-rails that don't help your case? Do the features in 2) get in the way?\n\nI also took a spin at extracting JSX a while back: https://github.com/rmosolgo/jsx-ruby I was thinking some sinatra users (etc) might want to use React.\n. when do you get that error? \n. Is Map accessible in the global scope? The react_component helper can only find objects from the global scope. \nTo add Map to the global scope, assign window.Map = Map \nIf that doesn't help please share: \n- react-rails version\n- the .erb file (or at least the react_component call)\n- application.js (or however you're building JS for the page)\n- What file does this error occur in? \n- screenshot & stacktrace of the error\n. react-rails supports Sprockets only :) //= require vendor/my_external_library \nsee some existing issues for discussion of react-rails + require, eg https://github.com/reactjs/react-rails/issues/129\n. Thanks for sharing some solutions here! I'll keep an eye out for forthcoming Rails 5.1 asset changes too, and see if there's anything react-rails can take advantage of.. thanks!\n. BabelTransformer is on master but not on rubygems yet, only JSXTransformer which uses the old JSTransform-backed transformer from react-tools\nfor more debugging please share your \n- rails, react-rails and react version \n- source code (file name & contents)  where the error occurs\n- full stack trace of the error \n. ruh roh, did you also the development server?\n. I'm sorry, I missed a word! \nI meant \"Did you also restart your development sever?\", eg cmd-c -> rails s or powder restart\nThe gem should  add this folder to the asset pipeline: https://github.com/reactjs/react-rails/tree/master/lib/assets/react-source/development-with-addons\nCan you open a rails console and share the result of puts Rails.application.assets.paths ?\n. I'm trying locally with the newest version: \n~/projects/magic_browser $ bundle show react-rails\n/Users/rmosolgo/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/gems/react-rails-1.1.0\nand in application.rb: \nconfig.react.addons = true\nAnd it's defined in the browser: \n\nFor more debugging, could you share: \n- application.rb & development.rb (wherever config.react is used)\n- application.js (or wherever you //= require react)\n- the JS where React.addons is undefined \n- The output of React.application.assets.paths in a console \nthanks\n. could you please share: \n- application.js (or wherever you //= require react)\n- the JS where React.addons is undefined (with file for context, if possible)\n. Any chance it's caused by react-infinite? If you remove //= require react-infinite, is it any different?\n. You could also double-check that there's not another copy of React.js in the asset pipeline: \n``` ruby\nRails.application.assets['react'].filename\n=> \"{path-to}/gems/2.2.0/gems/react-rails-1.1.0/lib/assets/react-source/development-with-addons/react.js\"\n```\n. Cool, glad you tracked it down!\n. I'd support it!\n. if you make the PR, I'll support you :)\n. :confetti_ball: \n. I'm game for this but I wonder, does anyone see any red flags to not unmounting when a user closes a page? \nDoes anyone depend on this behavior?\n. :confetti_ball:  thanks!\n. Thanks for posting a thorough example! \nDo you encounter this problem only when prerender: true, only when prerender: false, or both?\nI ask because the ExecJS context used for prerendering has no access to document (or any DOM for that matter), so any attempt to access document would fail. \nI don't see a reference to document inside Meeting.js.coffee, but I see you're using Browserify for preprocessing your JS. Does browserify insert any references to document? If you're not sure, maybe you could post a copy of the browserified JS bundle.\n. Hard to tell without seeing source code, happy to help debug if you don't mind sharing the relevant Rails views & React components (and anything else, flux stores, etc)!\n. :confetti_ball:  nice! maybe we should add an Appraisal for Rails 5 beta or something next.\n. Thanks @gregors , did you encounter a specific issue in updating?\n. I hope it goes well for you! I'll be doing my best to keep the changelog accurate & helpful. An oldie but a goodie: https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e. woahhhhhh\n\nRails 5 requires Ruby 2.2.2 or newer.\n. No, no built-in way of skipping children during prerendering that I know of! \n\nI think that the prerender context has no document, so you could test: \njs\nvar canUseDOM = typeof document != 'undefined'\nThen use it when rendering:\njsx\n  <div>\n    {canUseDOM && <ChildComponent />}\n  </div>\n(I think there's a robust implementation of canUseDOM in react.js, but I don't think you can get to it from the compiled version!)\n. :+1: sounds good! Any possible drawbacks?\n. cool, let's give it a try! \nAFAIK, you don't have to do the CLA to make the PR, but you have to sign it before it's merged. You could probably hit up a Facebooker for the full details :) \nGlad you're enjoying it! \n. Rails dependency has been removed since 1.8.0. react-rails only handles .jsx files, but if you want to attach react-rails's transform to other file extensions you can do that. \nHere's how it's attached to .jsx, you could attach it to  .es6 in an initializer:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/engine.rb#L5-L6\n(I think we have some files that are .jsx even though they have no JSX in them, we just want the es6 transform :P)\n. I'd gladly accept a PR to support .es6 by default.. Are you talking about server rendering?\nIf so, then yes, all server rendering operations all reuse the same JS runtime instance.\n. They're \"pooled\" (usually a pool size of 1) and reused:\nServerRendering initializes renderers: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering.rb#L12\nthen gets them out of the pool to render components: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering.rb#L16-L18\nI think this is because it's slow to start up a new JS instance!\n. How so!?\n. Yep, it's a similar risk to using Thread.current[:something] in Rails. If you don't clean up, you could be in trouble :S Feel free to improve documentation or code if you have a an improvement in mind!\n. Sorry I'm behind, thanks for the nudge! \nWow, this implementation is really nice. I never knew about the Renderers API before. This seems like a great fit. \nI had a couple of questions I left in line. Besides that, could you add a bit to the readme? \n. :money_with_wings: :confetti_ball:  thanks! \n. Yeah, that would be good. Can you include a note like (coming in 1.3.0) or something? Some way that will signal to people that it's on master but not on Rubygems yet?\n. I hope one of these suggestions worked for you!\n. Could you post your gemfile.lock? I think it's a conflict with a Sprockets/sprockets-rails version\n. Wow, how strange! I never heard of an order dependency in a Rails Gemfile before!\n. Sorry, it's been quite a while since I heard about an instance of this issue. If someone finds it again, please let me know and I'll see if any changes to our railtie can fix it!. Yes, could you add some tests for the generated output? That will help us keep from breaking things down the road :)\n. Sorry, I guess I should have been more specific. I think it's important to add tests for new behaviors, but not important to test shared, pre-existing behaviors. In this case, it would be good to test: \n- The resulting file uses ES6 syntax (eg, checking for the class ... extends syntax in the result)\n- The resulting file assigns propTypes after defining the class (eg, checking for {className}.propTypes =)\n- The resulting file compiles successfully (I think test \"generates working jsx\" is sufficient for that). \nIn my opinion, it's not important to repeat the tests for filename, render function, and propType since those behaviors are unchanged by the --es6 option. \nHow does that sound?\n. :money_with_wings:  Thanks, that's great!\n. Hmm, I expect this to Just Work :tm: because of this to_prepare handler: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L67\nThat causes all the old renderers to die and makes new ones: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering.rb#L10-L13\nIs it not working for you? Maybe to_prepare doesn't work the way I think it does?\n. I expect this to work for jsx files thanks to this line: \nhttps://github.com/reactjs/react-rails/blob/3fe755e32dd8872f89e8b25fd432154107b4aba3/lib/react/rails/railtie.rb#L25\nIf someone is having trouble with that, feel free to reopen this issue. If you'd like to watch more files by default, a patch is welcome!. Using FileUpdateChecker in 2.0 will be more configurable and also catch newly-added files: #682. Hmm, thanks for reporting this. \nAre you using server rendering? If so, maybe it was caused by our changes there. We switched the default pool size from 10 to 1 but that shouldn't have affected total time, because the 10-member \"pool\" was actually running one-at-time anyways (unless you're on JRuby).\nI've seen a couple bugs in the past where sprockets is re-compiling things in production (A server-rendering bug I think) it could be that? \nIf you're not using server rendering then, gosh, I'm not sure :S you could share your configs & one example that times out\n. I saw you have rack-mini-profiler in there, are you able to confirm that the largest part of that 10s is inside the prerender? Basically I'm wondering if it's \n- Slowness on prerender / ExecJS (is it just running slow? Is it over-worked?)\n- Somehow the asset pipeline is getting involved and we're losing time because things are being compiled during request/response cycle \nAnother idea for a work-around -- are you using NodeJS for ExecJS? If so, you could try therubyracer, we found it to be the fastest: https://github.com/reactjs/react-rails/pull/290 \n. Sure thing glad that fixed it for now! :grimacing: \n. :money_with_wings: \n. Sorry, somehow I missed this question before!\nRails engine: I haven't tried it, but it seems like someone is using prerender inside an engine: https://github.com/reactjs/react-rails/issues/360. I'd be happy to help you find the problem if you share your view code, controller code & the full stack trace. \nConditionally-loaded bundles: no, there's no support for this :( React-rails starts up one ExecJS context but that's it! In my own app, I have two controller namespaces two, but i've also prefixed the component names so that there aren't naming conflicts. \n. react-rails has some javascript helpers. On page load, it automatically calls ReactRailsUJS.mountComponents() to mount all the components into their <div>s. If you add new components after page load, you should call that helper yourself. For example: \njavascript\n$.get(\"/more/html\", function(result) {\n  $(\"#content\").append(result) // add it to the page \n  ReactRailsUJS.mountComponents() // mount the React components \n})\nThe function takes a selector too, if you want to scope it to part of the page: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L31\n. That's a cool idea! Seems like something that you could distribute as a separate gem with an ActionController integration.\n. There'd really be two things going on, right? First, adding a mechanism for detection of JS enabled/disabled & exposing it through some helper method: \nruby\n  def javascript_disabled?\n    # check for cookie set by JS\n  end\nThen, you could extend React::Rails::ComponentMount and add a bit of logic to the react_component method: \nruby\nclass MyCustomViewHelper < React::Rails::ComponentMount\n  def react_component(component_name, props = {}, options = {}, &block)\n    if options[:prerender] == :auto \n       options[:prerender] = javascript_disabled?\n       # ^^ Hmm, accessing the `javascript_disabled?` helper from here could be a bit tricky.\n    end\n    super \n  end\nend\nOnce you have that set up, you can tell react-rails to use your custom view helper: \nruby\nconfig.react.view_helper_implementation = MyCustomViewHelper\n(* ^^ this config is only on master! Will be out in 1.3.0.)\n. Let us know if you get a gem together for this!\n. :+1: nice feature! \nCan you investigate that failing test? It looks like it passes on master. Does it fail locally?\nAlso, could you add a test for this new behavior? I think you could base your new test off of the existing one for mounting & unmounting by selector strings. \nYou can see that the test clicks some buttons and makes sure that components are unmounted and re-mounted: https://github.com/reactjs/react-rails/blob/master/test/react/rails/view_helper_test.rb#L135-L136\nThe buttons are defined in this Rails view: https://github.com/reactjs/react-rails/blob/1c03b00b8105c78fbf674abe34be4941084bede4/test/dummy/app/views/pages/show.html.erb\nSo, I think you could make 2 new buttons which call those functions with DOM elements instead of strings. Then, in your test, click those buttons and make sure components are unmounted and re-mounted, just like the existing test.\n. Awesome, please open a new Pull Request! If we merge that one, then we can close this one.\n. closed by #358 , Thanks for getting this started!\n. One way that people have optimized this is make a server_rendering.js file which requires all components needed for server rendering. It's not included in application.js. It's only passed to react-rails, to be loaded into ExecJS. This way, they don't load every component into ExecJS, only the subset which is needed for server rendering. \nDoes this solution offer anything which that ^^ solution doesn't provide?\nAnother option for distributing this code would be to make  a custom renderer. You could make a Ruby gem which depends on react-rails, then in your gem, extend SprocketsRenderer with your desired behavior. \nreact-rails accepts a config, config.react.server_renderer, where you could assign the new renderer class. That would cause react-rails to use your provided renderer instead of a built-in one.\n. Could you elaborate a bit? I don't understand!\n. thanks!\n. Thanks!\n. Hey, great question, thanks for checking in. We used before_initialize because after_initialize failed. Here's the comment thread: https://github.com/reactjs/react-rails/pull/254#issuecomment-97531308\nI think that's the only reason it's in before_initialize, though, so if you can find a better solution that doesn't go :boom:, that would be great!\nI definitely agree that supporting initializer files would be a big improvement!\n. Yeah, I remember trying to find some way to test it also, and basically giving up :P \nBut the way you tested it looks good to me. And it passes on all our Ruby & Rails versions :D \n. Thanks! :confetti_ball: \n. ^^ I agree, signaling that \"normal\" render options still work would be a good addition\n. @garbles if/when you get a chance to update this, go ahead and remove the note about ~>1.3.0. I'll cut a new version after merging, so I don't think it'll be necessary\n. thanks!\n. I can't think of a way to support this out of the box, but I hope I can point you towards some relevant stuff. \nHere's where the ExecJS prerenders using renderToString:  https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/exec_js_renderer.rb#L14-L21\nYou can see it just does React.renderToString(React.createElement(#{component_name}) ... ). There's nothing fancy there to require anything, it just assumes that it will be accessible from the global scope. \nOne reason for this is that ExecJS doesn't support require (see faq). Of course, another reason is that Sprockets (the Rails Way :tm: ) doesn't support require, so there isn't a clear path how to proceed. \n(From the ExecJS docs, I don't know if this helps: https://github.com/cowboyd/commonjs.rb .)\nSo, I guess I just don't know how a require-aware server renderer would even work :S \n. Another issue is the react-rails UJS. It also assumes that the component is available on window: \nhttps://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L40\nI don't quite know how that could become require-aware either! \n. react-rails adds *.jsx* to watchable_files, maybe you could add bundle.js: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L21\n. Oh, nice, that allows you to inject react_redux_state  into the page, then load it up? \nYeah, I imagine if you need custom UJS you could just remove:\njs\n//= require react_ujs\nAnd instead, require the custom UJS\njs\n//= require custom_ujs\n. Sounds good to me, you can see how the es6 option is implemented start from there!\n. By default, the only files that are loaded for prerendering are react.js and components.js. So it's probably not loading fluxxor. \nWhat I do for this is add line to components.js:\njs\n//= require fluxxor\nThat will cause it to be loaded for server rendering.\nDoes that work for you?\n. sounds like I broke something, hmm\n. Ah, is this only in test. I think my implementation depends on Rack middleware doing its thing, let me find a fix for this ...\n. could you share the test that's breaking? The tests in this repo pass but I guess there's another kind of test that I missed!\n. what kind of test is that? what test framework? is it inside a class which extends a base test class? is it part of a describe block?\n. (seems like this middleware is not applied in the test context: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/render_middleware.rb)\n. Ahh awesome, thanks for that info, i can try to reproduce tomorrow!\n. YES, that's super helpful, thank you!!\n. @stevestmartin could you point your gemfile at this branch and give it a try? https://github.com/reactjs/react-rails/pull/356\nfor example, \nruby\ngem 'react-rails', github: 'rmosolgo/react-rails', branch: 'refactor-helper-lifecycle'\n. Thanks for reporting & testing, please try 1.3.1 from rubygems and reopen if you still have this problem!\nGood to know about middleware in the future, but I figure we'll be supporting Rails 4 for a few years still :grimacing: \n. Sorry, I'm on the road this week so I haven't had a chance to properly address this issue. There's a PR to fix Rspec here: https://github.com/reactjs/react-rails/pull/367\nPerhaps something there will be useful in the meantime!\n. @nacengineer Thanks for the heads up about the \"cells\" gem, I'll have to take a look at that!\nI hear your point about putting imperfect code on Rubygems. But I don't want the perfect to be the enemy of the good! 1.3.0 introduced the per-request view helper implementation, which I want to support.\nThe broken use case here is to use a Rails view helper without a Rails controller. I think I can fix that case, but I'm just without a home base at the moment (moving from CA to VA :grimacing:)!\n. I've suggested a fix here: #375 \nThis way, the view helper will work even if you're not in the context of a controller action. Could you give it a try and let me know if that works for you?\nSorry I overlooked this when adding that feature!!\n. Shipped in 1.3.3, please let me know if you find a case where it's still broken! \n. Ok, that PR is stuck, feel free to either checkout his branch and fix the tests or re-implement yourself!\n. :+1: Thanks for getting this in shape! \nI guess it would misbehave if someone did this:\njavascript\nstringObject = new String(\"myString\")\ntypeof stringObject // \"object\"\nBut, every JS guide I've ever seen just says \"don't use new String\", so I don't think we should worry about it!\n. Hmm, gotta try the easy one first: did you restart your local Rails server after installing the gem? The transform is hooked up during initialization, so you have to restart your app (eg, killing rails server and restarting it)\n. Hmm, I'm stumped then! It has a .jsx ending and the file looks right. It looks like that should work! Could you share some info:\n- Gemfile.lock\n- React configs from your app \n. Ah, I see. You're on react-rails 1.0.0, but  BabelTransformer was added in 1.1.0: https://github.com/reactjs/react-rails/blob/master/CHANGELOG.md#new-features-4\nSo, it's using JSXTransformer, which explains why JSX is transformed but ES6 isn't!\nYou should update react-rails to at least 1.1.0 to use Babel transforms.\n. Also, webpacker https://github.com/rails/webpacker. Huh, what in the world -- it's basically the same error, just on different JS runtimes (trying to access .PropTypes of undefined). \nBefore prerendering the component, it loads all the components into the JS environment. Do you have any other components in your project? \nCould you share your prerendering config and any files that are getting included into the environment? I wonder if something isn't getting included that should be included.\n. Looks like the error comes from inside react-bootstrap.min:\n\n. I wonder if React.js is loaded into your prerender environment. \nWhat's your react-rails version? \nTo see if that's the cause, you could try adding //= require react to components.js and see if it boots up\n. How about using componentDidMount inside the component itself? \n``` js\nvar Dashboard = React.createClass({\n// After mounting, set up your subscription:\n  componentDidMount: function() {\n    this._registrationsChannel = dispatcher.subscribe(\"registrations\")\n    this._registrationsChannel.bind(\"new\", this.HandleNewRegistration)\n  },\n// If you need to unsubscribe, you can clean up before unmounting:\n  componentWillUnmount: function() {\n    this._registrationsChannel.unbind(\"new\", this.HandleNewRegistration)\n  }\n})\n```\n(This is a Flux pattern. In Flux, you listen to stores for change events. In this case, you're listening to a websocket connection. They're both event emitters, so this approach works nicely!)\n. Yep, we should definitely update react-rails. I've taken a try at it, but as noted, this one will need a little work: https://github.com/reactjs/react-rails/pull/365\nIf you're not using server rendering, you can get react.js another way, as @krzysiek1507 has suggested! (And I think server rendering would still work, just with warnings)\n. Sorry, not quite! I should have been more specific. This change supports a dropped-in copy of ReactDOM: https://github.com/reactjs/react-rails/pull/366 \n. Took a try at adding 0.14 to the gem here: https://github.com/reactjs/react-rails/pull/376\n. Please try gem version 1.4.0 and open an issue if you have any trouble!\n. Score! It looks like that includes ReactDOMServer, let me give it a try...\n. :weary: It includes ReactDOMServer so that it can attach deprecated functions to React, but it doesn't export the object  (here's my attempt: https://github.com/rmosolgo/react-rails/tree/use-fb-me)\n. @onpaws I'm hoping to take a pass at this on Sunday or Monday, but if you're interested, definitely take a shot at it!\nHere's what I've got in mind:\nGoals\n\nInclude react & react-dom on the client\nInclude react, react-dom and react-dom/server on the server\nPreserve the simple //= require react API inside sprockets JS files (or perhaps react-rails as @vipulnsward  described above)\nPreserve the ability to drop in a local copy of React if you want to override the react-rails default\nPreserve the ability to update the React version in the gem source by running a Rake task (replacing the current rake react:update)\n\nMethod\nI'm open to anything that accomplishes the goals above. I haven't tried it yet, but this is what I'd try:\n- Add a new directory to this project which is a webpack project\n- Make a couple of manifest files for react-rails (one for the client, one for the server) using Node.js require API to get the right packages \n- Set up the webpack config to build those manifests into the existing lib/assets/react-source directories (setting NODE_ENV=production for the production build)\n- Make a rake task that runs webpack for that build \nNot sure about\n\nHow to include add-ons? I see they're all in their own modules now. I'd like to bundle those in the -with-addons files.\nAt some point, I'd like to make it possible to update the React.js version without updating the gem. Maybe supporting React 0.14 will shed some light on how to add that feature.\n. I took a pass at this here: #376 \n. :+1: great, at least we can support drop-in React 0.14 for the time being. Thank you!\n. Thanks for adding this fix! Could you also add a test for this behavior? \n\nI see that you were using Rspec, but this project uses Minitest. Can you test this behavior by adding an ActionView::TestCase to this project? That would be good because it would make sure that we don't break this in the future!\n. Yes, that would be fine!\n. Hmm, not sure what's wrong with this build. \nIt turns out this problem is part of a bigger issue. I was able to reproduce the issue using ActionView::TestCase and I've suggested a fix here: https://github.com/reactjs/react-rails/pull/375\nDo you want to try that branch? If it works for you, I'll merge it, since I think it also fixes the issue described here: https://github.com/reactjs/react-rails/issues/353#issuecomment-148847051\n. Sorry @masarakki , I think this problem was larger than just Rspec tests.  It was also broken for:\n- SimpleForm::Inputs: https://github.com/reactjs/react-rails/issues/377\n- cells gem: https://github.com/reactjs/react-rails/issues/353#issuecomment-148847051\nSo, I refactored the helper a bit and used ActionView::TestCase to ensure that the react_component helper could be used these different ways: https://github.com/reactjs/react-rails/pull/375\nI prefer that option because it's less code overall and it handles more of those broken cases. Could you check that it works for you, too? I've just released it in version 1.3.3.\n. By default, SprocketsRenderer loads components.js for server rendering. Then, inside components.js, you can require other files, for example //= require components/hello_world.\nDoes your components.js include your Opal components? \nYou can customize which files the server renderer loads, see the configs at the bottom of this section: https://github.com/reactjs/react-rails#server-rendering\nIf that's not it, I suspect it has something to do with file organization (folders or file extension), could you share how your opal files are organized inside your project?\n. :confetti_ball: https://rubygems.org/gems/react-rails/versions/1.3.2 How's that? \n(I'm moving right now, so I'm a bit busy, but hopefully next week I can add full-fledged support for 0.14!)\n. The change from a single JS package to many modules has complicated the process for building React.js into the gem code, see full discussion here: https://github.com/reactjs/react-rails/pull/365\nI'm on the road this week so I haven't had a chance to find a new way yet!\n. Please try gem version 1.4.0 which includes React 0.14 and open an issue if you have any trouble!\n. Thanks!\n. Another guide was recently added, see the \"Related Projects\" section. by default, only react.js & components.js are loaded in the server renderer. \nto have moment on the server, you can either:\n- add //= require moment to components.js \n- add moment.js to config.server_renderer_options files: (see the readme)\nDoes one of those work?\n. :confetti_ball: \n. I've only used server-side rendering for a couple for-fun projects, so I don't have much experience with it. But I know how it's supposed to work :P Here are a few questions that might help us find the issue:\n- What do you use to render a PDF? (eg, ruby gem, wkhtml2pdf)\n- How does it fail? (Does the element not appear in the page? Is there a runtime error? Include any stack traces)\n- Does it fail in all cases? Do any components successfully render?\n- What is the code in question? The view, react component and test would all be helpful.\n. @zpao Could you take a look at the JavaScript side of this? I think this is an OK way to use the new JS modules in the browser & server, but I'm a bit out of my element!\n. looks good in my own app, here goes!\n. Sorry to hear that this broke for you! \nLooking at that trace from 1.3.1, I don't really understand what went infinite. Here's the relevant code:\n- react_component view helper: https://github.com/reactjs/react-rails/blob/92f27dee42a73906879074e053e98e9a8b210f56/lib/react/rails/view_helper.rb#L14\n-  Which should call react_component on this other class: https://github.com/reactjs/react-rails/blob/92f27dee42a73906879074e053e98e9a8b210f56/lib/react/rails/component_mount.rb#L24\nI don't see where the loop comes from! \nAnyways, I've just merged #375 which fixes some other bugs with the view helper. Could you try the master branch of this gem and see if it works for you? \n. Shipped in 1.3.3 :confetti_ball: \n. I see your code includes a the tilt dependency, but the issue title is the name of a React addon. Is one of those things a typo?\nI'm happy to merge the tilt dependency, I wonder how it got left behind. Just making sure this is the right thing!\n. No problem, thanks for clarifying. Usually, you can report a bug or request a new feature by opening an issue instead of a pull request. \nI expect 1.4.0 (just released today) to contain React.addons.LinkedStateMixin: https://github.com/reactjs/react-rails/blob/master/react-builds/addons-object.js#L4\nYou can activate mixins in your rails app by adding a config:\n``` ruby\nin application.rb\nMyApp::Application.configure do\n  # ... after other configs ... \n  config.react.addons = true \nend\n```\nThen, restart your development server. React.addons should be defined in the browser. \nDoes that work for you?\n. Yep, that looks right!\n. Glad to hear it!\n. I thought I'd let people minify it with Sprockets / asset pipeline. Is that a bad option for your case?\n. Oh! I thought this was enough, but I guess it wasn't:\nhttps://github.com/reactjs/react-rails/blob/master/react-builds/webpack.config.js#L23\nI'll have to dig deeper in to figure that out\n. :confetti_ball: https://github.com/reactjs/react-rails/pull/380\n. Shipped in 1.4.1, thanks for the report and let me know how that one goes for you!\n. Ah, I'd say this is really the same problem as this: https://github.com/reactjs/react-rails/issues/212\nIn production, server rendering should really use pre-compiled files, it shouldn't be compiling its own! \nI don't know of a great workaround for this :( It's a bit tough since the complied asset can have a different name each deploy.\nI think the right fix is to make SprocketsRenderer environment-aware (or make 2 renders, one for development, another for production). In production, it should read compiled assets only.\n. Not quite -- actually it's a misbehavior on react-rails' part: even if you've precompiled your assets, it tries to compile them into tmp/cache/assets as if you were still in development :cry: \n. ^^ yes please! It'd be great to get a patch for this.\n. Here's a new approach for using precompiled assets instead of compiling them on the fly, happy to hear any feedback (or other things to keep in mind) if you have some! #430\n. This should be fixed in the latest react-rails, please repopen if you're still having this trouble!\n. Awesome! It would be great to get a test for this behavior, too. I think you could: \n- Add an already-compile asset file to the dummy app in test/dummy/public/{??}\n- Add a test to sprockets_renderer_test.rb: \nruby\n  def test_uses_compiled_asset_files \n    Rails.application.config.assets.compile = false \n    precompiled_renderer = SprocketsRenderer.new(files: [\"...\"])\n    result = precompiled_renderer.render(\"SomeComponent\", {}) # based on contents of asset\n    assert_includes(result, \"something\") # whatever should be there \n  ensure \n    Rails.application.config.assets.compile = true\n  end\n- One possible refactor: instead of reaching for Rails.application.config.assets.compile inside #load_asset, you could accept an option to #initialize and store it in an instance variable. The option would default to Rails.application.config.assets.compile, but you could override it for testing without having to mess with the configs.\n. Oh, i guess you could just leave it blank and use the default files option: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/sprockets_renderer.rb#L10\nYes, those files aren't there yet. Normally, they'd be moved to that location by rake assets:precompile. You could run that on the dummy app, for example:\n$ cd test/dummy \n$ rake assets:precompile\nThen it might find them!\n. I don't think it's a fool's errand, but it's just unfamiliar territory for me! I'm sure it's possible to do this \"right\", but it involves digging around in a bunch of Sprockets APIs to figure out how to make it work :grimacing: \n. Very nice, I definitely agree we should allow more options to be passed through the controller renderer! \nBut right now it's pushing through a bunch of ActionController::Base#render options, too: \n```\n<span \n  class=\\\"custom-class\\\" \n  data-react-class=\\\"TodoList\\\" \n  data-react-props=\\\"{\"todos\":[\"Render this inline\"]}\\\" \n  id=\\\"custom-id\\\" \n  layout=\\\"#<Proc:0x000000038db4b0@/home/travis/.rvm/gems/ruby-2.2.0/gems/actionpack-3.2.22/lib/abstract_controller/layouts.rb:383>\\\" \n  prefixes=\\\"server application\\\" \n  props=\\\"{:todos=>[\"Render this inline\"]}\\\" \n  template=\\\"inline_component\\\"\n\n```\n\n(I got this from the Travis CI run)\nWhat do you think about just adding some more options to the whitelist?\n. That's a good point, I wonder if just whitelisting :data, :aria would do the trick, since you can often pass those like data: { remote: true } \n. :tada:  Looks great! Down the road, if someone needs more attributes than this, we could extract a REACT_COMPONENT_OPTIONS array which people could mutate as they see fit. \nThanks for this improvement!\n. Thanks for updating us! \nI don't think there is a  special mime type for .jsx. They're usually requested & served as JavaScript files, so I think the normal JS mime type is good enough! \n. :sparkles: Thanks again for getting us up-to-date (and getting me up to date :stuck_out_tongue_closed_eyes:) ! \n. Hi @justin808,\nWe catch errors as they leave ExecJS, then re-raise them: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/exec_js_renderer.rb#L24\nFeel free to try this out yourself by downloading the gem and taking it for a spin!\n. :moneybag: awesome!\n. Fair enough, I'm not into Class-style components but, hey, you might as well inform people :P\nThanks, you're on a roll! :) \n. I don't think of ExecJSRenderer#render as broken, I think of it as different (simpler, maybe even better)!  I like it because the input types are consistent:\n- props is always a string of JSON  (not a string-or-something-that-responds-to-to_json)\n- prerender_options is always a hash (not a boolean-or-symbol)\nThis means you have to call it differently from the view: \nerb\n<%= react_component(\"Todos\", {todos: [\"Thing 1\", \"Thing 2\"]}.to_json, prerender: {render_function: \"renderToStaticMarkup\"}) %>\nOf course, this is quite a mouthful, so I can think of a couple of ways to reduce that boilerplate code. Would either of these work for you?\nCustom helper\nYou could define a view helper that transforms inputs in the same way SprocketsRenderer does \n``` ruby\nPrepare the arguments, then use the renderer\ndef execjs_react_component(name, props, prerender=nil)\n  # ensure that the props are strings \n  props_string = props.is_a?(String) ? props : props.to_json\n  # prepare the prerender options \n  if prerender.present?\n    prerender_function = prerender == :static ? \"renderToStaticMarkup\" : \"renderToString\"\n    prerender_options = {render_function: prerender_function}\n  else \n    prerender_options = false \n  end\n  react_component(name, props_string, prerender: prerender_options)\nend\n```\nThen you could use it like the other renderer:\nerb\n<%= execjs_react_component(\"Todos\", {todos: [\"Thing 1\", \"Thing 2\"]}, prerender: :static) %>\nCustom renderer\nAlternatively, you could extend ExecJSRenderer and override #render to perform the same input manipulation that SprocketsRenderer does.\nAlso ...\nYou could probably make this a bit simpler by moving this operation to the beginning react_component method: \nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/component_mount.rb#L35\nThen you wouldn't have to make the is_a?(String) check yourself. That would be a nice patch for react-rails, I think!\n(The only downside of this is that if someone made a render which didn't want a string, they'd have to reimplement the helper. But as far as I know, there are no other custom renderers out there!)\nGoals\nHere are my goals in the server renderers: \n- Keep ExecJSRenderer as simple as possible (just coordinating ExecJS + React.js)\n- Push as much Rails-specific logic into SprocketsRenderer\n- Maintain a flexible interface for extending existing renderers or writing new ones (this is why I have prerender: as a Hash, it is more extensible)\n- Provide a simple, pretty API for the most common uses \nWhat do you think? Will any of those other solutions work in your case? Or have I missed something?\n. Wow, i'm surprised that ever worked! I only ever heard of coffeescript + jsx via the \"cjsx\" tool (which I once suggested adding to react-rails: https://github.com/reactjs/react-rails/pull/47 ). Could you share the before/after entries in your Gemfile.lock? I'd be interested to know what changed that caused it to break!\n. Wow, were there any other gems in there for handling CJSX? I just never knew that react-rails ever supported CJSX. \nBy the way, one of the big changes since then was switching from the now-deprecated JSXTransform to Babel. You can see instructions for using the old transformer (still included in the gem) here:\nhttps://github.com/reactjs/react-rails#jsx\n. ohhh interesting. good to know. \nregarding IIFEs, there's nothing special in the gem for that, but if you're using coffeescript, you could try the do operator, for example:\n\n. Cool, thank you!\n. sorry that's related to a bug in react 0.14.0, let me upgrade and release 0.14.2\n. Could you try version 1.4.2? That has the latest React.js version.\n. Maybe so. How do you set up es6 compilation? If you show me how you do that, I can add a test & try to get it going again!\n. I think this is the breaking change: https://github.com/reactjs/react-rails/pull/385 But I'm not sure exactly how it broke things. \nIn your case, do you get an error message? If so, what is the message and what is the stack trace? \nOr does it simply fail to transform? \n. :grimacing: sorry!\n. :cry:  how strange ... where could that be coming from ... A couple questions: \n- Can you see the compiled JavaScript for that component? Does it have any extra whitespace?\n- Which transformer are you using, JSXTransformer or BabelTransformer?\n. I'm just trying to think where that extra whitespace might come from. \nThe actual call to renderToString is quite simple: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/exec_js_renderer.rb#L18\nSo I feel like it must be added somewhere else, I'm just not sure where. That's why I asked about the JavaScript source of the component. The places I can imagine it getting inserted are:\n- JSX -> JS transformation (which you could tell by looking at the foo.js file loaded in the browser \n- Server rendering step (I'm not sure how you'd see just the output from this step)\n- Template processor step (don't slim & haml mess with your whitespace sometime?)\nSo, if you can see the compiled version of Foo component, we could rule out that first possibility \nAlso, could you share the surrounding view code where it is rendered? \n. Great, glad we found it! I've never run into that issue but I remember reading about it somewhere...\n. thanks!\n. Since this doesn't have a test case, I want to read up inject_into_file before I merge it. \nIf you'd like to help me, you could add a test case which demonstrates the new behavior!\n. I tried this out locally:\n- First, I made an application.js which included only:\n//= require_tree ./application \n  //= require_tree ./something_else\n- Using react-rails 1.2.0, I ran bundle exec rails g react:install. \n- I observed the unwanted behavior. It added the react stuff to application.js twice: \n//= require react\n  //= require react_ujs\n  //= require components\n  //= require_tree ./application\n  //= require react\n  //= require react_ujs\n  //= require components\n  //= require_tree ./something_else\n- I reverted application.js to its original state. \n- I pointed at this branch and bundle installed \nUsing react-rails 1.4.1 (was 1.2.0) from git://github.com/towonzhou/react-rails.git (at master)\n- I ran bundle exec rails g react:install\n- I got the desired behavior. application.js contained: \n//= require react\n  //= require react_ujs\n  //= require components\n  //= require_tree ./application\n  //= require_tree ./something_else\n. :confetti_ball:  thank you for this fix! \n. If it were a Rails template, you might use post_path(post) to generate the link. But since we don't have access to that path from JavaScript, we have to find another solution. The two options I've used are: \n- Pass the route in as a prop, then build the URL, so your example might be:\njsx\n  <a href={this.props.postsPath + \"/\" + this.props.post.id}></a>\n- Hardcode the URL. Use the /rails/info/routes page to determine what the URL should be, then write it as a string in the JS code. For example:\njsx\n  <a href={\"admin/posts/\" + this.props.post.id}></a>\nI've never tried it, but a third option could be something like JsRoutes, which brings Rails route helpers into JavaScript. If hardcoding is not feasible or too risky, that might be a good solution!\n. \u261d\ufe0f  yep! You can use ruby but it will be evaluated during assets:precompile, not during application runtime.. I think it's the same problem as https://github.com/reactjs/react-rails/issues/288, but now it totally :boom:s instead of just being inefficient. \nSorry I haven't gotten a chance to fix it yet! Maybe this afternoon.\n. If you're not using server-side rendering, I can't imagine any negative consequences! That's a nice application of the null object pattern :) \nSorry I've been kicking the can on this, just installed the new Rails 5 beta to reproduce the issue locally!\n. I reproduced the issue locally and \"fixed\" it with this patch: https://github.com/reactjs/react-rails/pull/430\nStill a few things to do there but at least I can see the way forward :D \n. You could try: https://github.com/reactjs/react-rails/issues/443#issuecomment-180544359\n. I guess this is fixed on recent versions, please let me know if it isn't!!. Sorry, I'm not sure how this happened! \n\nspecify what JS files are loaded \n\nYes, it's the files: option which you are using. \nHow can you tell that application JS is loaded for server rendering? \nAlso, what are the //= requires in common.js and components.js ?\n. 2.0 will require server_rendering.js by default. It looks like it might have hit an error while compiling onboard.js.jsx, can you share the source for that file? \nOr, is there an issue with Rhino? Look similar to this: https://github.com/andyearnshaw/Intl.js/issues/81\n. Humm, I wonder if it's a JRuby-specific issue, it seems to work ok for me on CRuby. Here's my output:\n$ rails c\nLoading development environment (Rails 4.2.4)\nirb(main):001:0> React::Rails\n=> React::Rails\nirb(main):002:0> React::JSX.transformer_class\n=> React::JSX::BabelTransformer\nirb(main):003:0> React::JSX.transform(%|\nirb(main):004:1\" var Onboard = React.createClass({\nirb(main):005:1\"     render: function() {\nirb(main):006:1\"         return (\nirb(main):007:1\"                 Hi\nirb(main):008:1\"         );\nirb(main):009:1\"     }\nirb(main):010:1\" });\nirb(main):011:1\" |)\n=> \"\\nvar Onboard = React.createClass({\\n    displayName: \\\"Onboard\\\",\\n\\n    render: function () {\\n        return Hi;\\n    }\\n});\"\nirb(main):012:0>\nIs Hi a global object in this case? You could try wrapping it in quotes to make it a string, eg \"Hi\", maybe that would help?\n. Thanks for that version info. Here's the JRuby run on Travis: https://travis-ci.org/reactjs/react-rails/jobs/93226779\n- jruby 1.7.19 (1.9.3p551) 2015-02-05 32f5af0 on Java HotSpot(TM) 64-Bit Server VM 1.7.0_76-b13 +jit [linux-amd64]\n- execjs 2.6.0\n- babel-transpiler 0.7.0\n- NO uglifier \nI see a few differences:\n- JRuby version\n- ExecJS version \n- no uglifier \nCan you try changing any of those things for your environment? Maybe that will shed some light on the issue!\n. Make sure you have therubyracer, it's a much more efficient ExecJS backend than NodeJS. \nRegarding caching, how about applying the cache in your view? For example:\nerb\n<% cache [\"v1\", todo] do %>\n  <%= react_component(\"Todo\", {todo: todo}, prerender: true %>\n<% end %>\n(from DHH's key-based cache expiration)\nI figure, if there's already a robust caching system in Rails, why add another (more bug-prone) one here?! :grimacing: \n. Sorry about the incompatibility, I know ExecJS has some limitations! I hope you found something that worked for you.. I'm open to this! Maybe if you pass prerender: true, tag: nil? \nYou can see the relevant code here: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/component_mount.rb#L24\n. Yes, you'd have to implement it :)\n. Hi! Thanks for adding this feature. I can see how useful this will be!\nHow about making this an opt-in feature? I can think of two ways to make this opt-in:\n- Add a config, like config.camelize_props = true \n- Make the view helper public & add documentation so that people can use it if they want.\nI don't want to make it the default behavior for two reasons:\n- It will be backwards-incompatible for current users \n- I can imagine it would be unpredictable for some users (it's strange to pass in an underscored hash but get a camelized hash). \nThanks again, how does that sound?\n. :tada: thanks, this is great!\n. :+1: thanks for following up on this!\n. oh, there's my missing 1.4.2 commit :(\n. You could try copying this file into your app: https://github.com/PaulLeCam/react-leaflet/blob/master/dist/react-leaflet.js\nFor example, if you copied it to app/assets/javascripts/vendor/react-leaflet.js, you could require it with the asset pipeline: \n//= require leaflet \n//= require react \n//= require vendor/react-leaflet\nThis line (root[\"ReactLeaflet\"] = factory(root[\"L\"], root[\"React\"], root[\"ReactDOM\"]);) tells me that it depends on a few globals: L, React, and ReactDOM. react-rails will provide the last two; I assume L is leaflet?\nFWIW, that's how I bring third party components into my app: \n- Find \"compiled\", non-minified version, either in /dist or on a CDN \n- Copy it into app/assets/javascripts/vendor\n- Add the version number to the filename, for record-keeping (eg, react-leaflet-v0.10.2.js)\n- Require it with sprockets //= require ./vendor/react-leaflet-v0.10.2\n. webpacker is a great way to use react + npm + rails, it will be supported by this gem in the upcoming 2.0 release. Sorry we didn't finsih this, I hope that library was able to help!. Hmm if file extensions makes a difference, I bet it's related to \nhttps://github.com/reactjs/react-rails/pull/385\nhttps://github.com/reactjs/react-rails/pull/411\n. Man, it's been a weekend of Sprockets-wrangling. \nThanks the the demo project. I cloned it locally and started it up. Sure enough, I only got the three log statements. So I pointed it at my local react-rails and started poking and prodding. \nSome things I noticed\n\nIn Sprockets 3, CoffeeScript uses the \"old\" engine feature, but JSX is set up as a mime-type + transformer (the \"new\" way). \nOn Sprockets master CoffeeScript uses the \"new\" way\n\nIt makes me think that somehow our transformer doesn't play well with the engine scheme. \nSome things I tried\n\nAdded a test for #= require in js.jsx.coffee. It worked but that's because I'm testing with Sprockets 2. \nMostly, I tried tweaking stuff in engine.rb\nAdding the .js.jsx.coffee extension to the CoffeeScript mime-type (didn't work, that was before I realized how different Sprockets 3 vs master was)\nRegistering the JSX engine along with the transformer (didn't work)\nRegistering the CoffeeScript processor as a transformer (didn't work) \nManually adding the Sprockets::DirectiveProcessor for .js.jsx.coffee (didn't work)\n\nSo far, nothin! But it has to be, has to be, has to be, something related to engines vs. transformers. \nI've got to get a failing spec in the repo. I'm going to try making some gemfiles with sprockets 3 and Sprockets 2!\n. I opened an issue an issue on Sprockets to see if that team has any suggestions: https://github.com/rails/sprockets/issues/231\n. Tried this again in hopes that it would have been fixed by some work in the last few months, and it seems like it was: \n```\n~/code/react-rails-coffeescript-require-example $ bundle update react-rails\n...\n...\nUsing railties 4.2.5\nInstalling sprockets-rails 3.1.1 (was 2.3.3)\nUsing coffee-rails 4.1.0\nInstalling react-rails 1.8.0 (was 1.5.0)\nUsing rails 4.2.5\nBundle updated!\n```\n\n:tada: \nSince the previous update also bumped sprockets-rails, I locked sprockets-rails to ~> 2.0 and tried again: \n```\n~/code/react-rails-coffeescript-require-example $ bundle update sprockets-rails\n...\nUsing sprockets-rails 2.3.3 (was 3.1.1)\n...\n```\n\n\ud83c\udf8a \n@tmikoss , Are you able to update to the latest react-rails? OK to close this?\n. Hi, do you have any information or examples for this issue?\n. Glad you worked it out!\n. Happy to merge this, but  I think you need to sign the CLA first! \n. Yep, thanks!\n. ExecJS is also required for transforming JSX (by external babel-transpiler or react-rails's JSXTransformer).\nIt doesn't have to be Node.js -- it could be any of ExecJS's JS runtimes. (AFAIK, therubyracer is the best option for CRuby: https://github.com/reactjs/react-rails/pull/290.)\nMaybe you could get away without a JS runtime on your production server if you precompiled assets on a different machine. I'm not sure what it would take to support this in react-rails, but if you can figure it out without too much API change, I'd be on board!\n. A config setting would be a great way to handle that!\n. Thanks!\n. Can you share the source for the file in question (ActivityStream.jsx)?\n. > The implication is that that object instance is inheriting from some data modeling lib?\nYes, I think so. For my part, the only time I've used instanceOf is with Immutable.Map and Immutable.List. \n\nAre React components supposed to be passed as props?\n\nIt's not a common use case, but I think it is possible! Usually I use props.children to render one component inside another.\n. Feel free to PR the Readme if you have an improvement in mind!\n. could you share some code? For example:\n- A component that doesn't work \n- Where you //= require react \n- Where you assign window.React\nAlso, you could share some information about the error:\n- What steps cause the error to occur \n- What message do you see when the error occurs?\n- Does the app boot up? Does a page load? \n- Are you presented with a stack trace? If so, what is it?\n. Sounds like this started working .... Looks like ExecJS doesn't support setTimeout: https://github.com/rails/execjs#faq (Or therubyracer: https://github.com/cowboyd/therubyracer/issues/325)\n. Glad you found a workaround!\n. I think our usage of sprockets can be avoided if you're not on rails. Most of it is through Rails.application.assets. \nHere's the only place we access Sprockets by name:\nhttps://github.com/reactjs/react-rails/blob/c463b8eff14806d5d4249520a7588ca1762e0f80/lib/react/rails/engine.rb#L5-L6\nBut I guess if you're not using Rails, you don't ever run that initializer?\n. I would love to merge this PR, but I'm not quite clear how the Sprockets dependency should be handled: \n- Is it always required? \n- Is it only required when Rails is present? (Since the usage is in a Railtie?)\nI think a good way to answer this question is either: \n- make a demo app with instructions on how to run & ensure react-rails is working properly\n- add an Appraisal without Rails, or somehow add unit tests in a non-rails environment\nAs for coffee-script-source, perhaps we could remove it, initially it was added because of a coffee-script bug https://github.com/reactjs/react-rails/pull/168\n. @natemontgomery Thanks for your work on this! I pulled your commits into #558 along with another PR so that I could test the Sprockets dependency. \n. I just updated my project to 1.5 and it loaded ok in Chrome, Safari and Firefox. \nWhat polyfills are you including with your project? React requires some: https://facebook.github.io/react/docs/working-with-the-browser.html#polyfills-needed-to-support-older-browsers\nWhen you load your app in other browsers, are there any errors in the JS console? \n. Could you add the error stack trace to that Gist?\n. Since you're using Node.js-style requires, you'll need to require React in the component file. \nFor example: \n``` js\nvar React = require(\"react\");\nvar Dashboard = React.createClass({ ... });\nmodule.exports = Dashboard;\n```\nYou must require React for it to be available in the local scope. (Putting it in global context works for Sprockets, but I think you need a local require for Node.js-style builds.)\n. Yeah, I think I was off the mark on asset_host. It sounds like your case would be handled by the default Sprockets::Manifest. \nI was just poking around our own production environment, though, and I noticed that our assets aren't in public/assets, so I'll have to figure out how to handle that!\n. Ug, looks like Manifest has changed a lot in the different sprockets versions\n. Thanks for all the info! It seems like adding support for sprockets 3 also introduced some bugs in other contexts. See also #415 and #423 \nI think the first step will be to add some failing specs for these cases (maybe need a new Gemfile for appraisal) then fix the bug itself.\nI'm working on #430 at the moment but I'll take a look at these sprockets issues next, if nobody gets to them before me!\n. Wow, thanks for that write-up!  A great place to start with react-rails would be to write a failing test. Since I don't really understand the bug yet, I can't give a great suggestion, but I could imagine a few possibilities:\n- Write a test that uses require_asset to reproduce this bug\n- Add a Gemfile which requires Sprockets 3.0 (https://github.com/reactjs/react-rails/tree/master/gemfiles, react-rails uses Appraisal to run tests over different gem configurations) (and another which requires Sprockets 2.7, so we don't backslide)\nIf we had a failing test, that could focus the work toward fixing it!\n. While hunting down a bug in https://github.com/rmosolgo/react-rails-hot-loader, I discovered a behavior change between Sprockets 2 and Sprockets 3. In Sprockets 3: \nruby\nassets[\"my_component.js.jsx\"] # => \"raw\" JSX \nassets[\"my_component.js\"] # => transformed JavaScript\nSo, what if you try requiring those assets without the .jsx in the extension (.js only)?\n. > documented change \nI was about to complain that it wasn't, but I figured I should check the upgrade notes again. Technically it is, it's here, under \"We can request the file under its original content type\". Makes sense, it's a change to support source maps.\n. It sounds like this is a bug in jasmine-rails + sprockets 3, please reopen if there's something we should do in react-rails!\n. I'm running 1.5.0 without any warnings. I can think of a few things to try:\n- Make sure to restart your development server after installing the new gem. Otherwise, it might serve an old version of the assets. \n- Application code may be using React.render, you should update to ReactDOM.render. \n- You may have a dependency (like a React component you downloaded) which uses React.render. You can search your dependencies and update any of them which use the old API.\nIf those don't help you, please paste the full stack trace here -- that will show the exact line where the React.render call is coming from. You can see the full trace by expanding the warning (Chrome): \n\n. Oh, sorry I missed, this! Like I said on the PR, I'm wary of putting too much in the readme about this project. \nIf you want to add a \"Further Reading\"  / \"Related Projects\" / \"See Also\" section, you could add that project! \nMaybe it could also have a link to this: https://github.com/pboling/react-rails-benchmark_renderer\n. Just added to the \"Related Projects\" section here: https://github.com/reactjs/react-rails/pull/444\n. Yes, it's a limitation of ExecJS. \nYou could try something like this: http://madewithenvy.com/ecosystem/articles/2011/running-jquery-code-from-ruby-using-execjs-async/\nYou could also try to integrate with this project: https://github.com/mjackson/react-stdio\n. I hope you found something that works for you!\n. I don't really like this because it sends some false signals:\n- it looks like the \"reactjs\" organization supports React.rb, but we don't have official support\n- it looks like React.rb is bundled with react-rails, which it isn't. \nIf another react-rails maintainer wants to support React.rb, feel free to say so. For my part, I'm busy enough with react-rails alone!\n. I think it would be a good fit for a \"Related Projects\" list in the readme, but I don't think we should include the documentation here!\n. We just got a \"Related Projects\" section here, feel free to update the React.rb section with another PR!\n. Huh, it should be getting Sprockets from the global namespace (from the sprockets gem, which comes with Rails and is in your Gemfile.lock). \nhere's the line: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/engine.rb#L5\nWe could try: \n- adding a require \"sprockets\" call to react-rails.rb (before this: https://github.com/reactjs/react-rails/blob/master/lib/react-rails.rb#L1)\n- adding a :: to make Sprockets explicitly global, eg ::Sprockets\n. Thanks for posting that example. \nHere's a related issue on react-select: https://github.com/JedWatson/react-select/issues/606 Sounds like most cases is requiring React more than once. \nI think I see React being loaded twice in your app, too:\n- Once by Select.js, which is denoted as \"main\" in react-select's package.json: \n\n(This copy of React enters the main bundle because of //= require components in application.js)\n- And again by Sprockets, in application.js:\n\nI think you could fix this problem by loading React only once: \n- Copy node_modules/react-select/dist/react-select.js into application/assets/javascripts \n- Replace var Select = require(\"react-select\") with //= require react-select\nMaybe you don't want to structure your app that way, but it would test if it's a dependency management problem!\n. >  first supposed that since react-select mention var ReactDom = require('react-dom).DOM\nreact-rails provides this library as ReactDOM, so you can probably make it work with: \njs\nvar ReactDom = window.ReactDOM\nPlease reopen or let me know if that doesn't work . I think we could include Relay support here if it doesn't change the existing behavior. (That way, current users won't have to \"work around\" Relay support). \nBut if I was you, I'd try to do it as a separate project -- that way you could set it up how ever you want (and you wouldn't have to wait for me to click \"Merge Pull Request\"). Hopefully react-rails is extensible enough to support that, but if it's not, we could fix that! \nAnyway, your call, I'm happy to consider some non-obtrusive Relay support here!\n. Hmmm what you're doing looks right to me. Here's the only JS test we have in react-rails: \nhttps://github.com/reactjs/react-rails/blob/master/test/react/rails/react_rails_ujs_test.rb\nIt looks like that uses poltergeist too, but with inspector: true. I haven't tried that before, but it says it will open the page in the browser with page.driver.debug. Does that work for you? Can you see the components if you do that?\nIt's so strange that React component functions are called but they don't show up on the page. Are unmount hooks called? (Maybe the component is immediately unmounted for some reason?)\n. Maybe similar to this? http://mikefowler.me/2014/04/22/cached-images-load-event/\n. Yeah, that's why i thought of image caching, I bet in Development, the asset pipeline serves it fresh every time, but in Production, it sends it with cache headers (or something ... )\n. Hmmm why would that not work on staging ... \n- Could you share your Gemfile & Gemfile.lock?\n- Can you open a rails console on staging and check for other signs of the react-rails gem? (For example, is React::Rails::VERSION defined?)\n. (The only thing I can really imagine would be if react-rails was in the :development group only, what else could cause this?!)\n. > Is there any way to get a string of plain html from a react component, but on the client side?\nYou can use ReactDOMServer.renderToString or ReactDOMServer.renderToStaticMarkup (https://facebook.github.io/react/docs/top-level-api.html#reactdomserver)\nTo get the ReactDOMServer object, switch this line: \njs\n// remove this:\n//= require react\nfor this line: \njs\n// add this: \n//= require react-server\n(this gives you the server bundle). \nI use this in my own app for integrating with other JS libraries that expect strings of HTML! \nDoes that answer your question?\n. (I'd like to improve that //= require API so you could require the objects one-by-one instead of picking an off-the-shelf bundle)\n. Could you give that branch a try? Let me know if it works for you -- it looks good to me but I'd like a second opinion before I merge it!\n. Could you try react-rails 1.6.0? It includes #430 which was my first try at fixing this\n. Ok, thanks, let me try to track that down!\n. Ohh strange. When it creates the manifest, the manifest has production/react-server instead of react-server. Then, SprocketsRenderer fails to find react-server since it has a different logical path. \nI found a workaround: \n1. Add a JS file, server_rendering.js\n2. Make sure server_rendering.js is compiled (Rails.application.config.assets.precompile += %w( server_rendering.js ))\n3. Add to server_rendering.js: \njs\n   //= require react-server \n   //= require components\n   // Require everything needed for server rendering\n4. Specify only server_rendering.js for server rendering: \nruby\n     config.react.server_renderer_options = {\n       files: [\"server_rendering.js\"], # files to load for prerendering\n     }\nThis way, it bundles react-server into server_rendering.js, it doesn't look it up when you try to render a page! \nI'll look for a proper fix tonight or tomorrow!\n. Maybe i should add that to rails generate react:install, but add --skip-server-rendering if you don't want the JS manifest & initializer\n. This patch isn't merged yet because it'll be a breaking change. \nDid you try the workaround described here? https://github.com/reactjs/react-rails/issues/443#issuecomment-180544359\n. > doesnt seem to work\nCan you elaborate? For example, did you get an error? What was the message & stack trace? \nAlso, did you restart your development server after changing the configurations?\n. Weird! It shouldn't even be looking for react-server anymore since we override that value with \nruby\n  config.react.server_renderer_options = {\n    files: [\"server_rendering.js\"], # files to load for prerendering\n  }\n:crying_cat_face: \n. (Usually, it's the default provided here: https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/sprockets_renderer.rb#L18)\n. @brettjurgens could you share your file setup? That is, which files do you pass to config.react.server_renderer_options & what do they //= require?\n. To confirm, did you add server_rendering.js to your list of precompiled assets, something like \nruby\nRails.application.config.assets.precompile += %w(server_rendering.js)\n?\n. > until some days ago\nwoah, how strange?! did anything else change in your app at that time?\n. > stopped working in production\nwas it after a redeploy? or, it just started :boom:ing while running?\n. Is the diff for that redeploy small enough to list the changes? For example: \n- Any gem updates?\n- Ruby version update? \n- Application code update?\n- Application configuration update?\n- Server administration changes?\n. Thanks for sharing your findings!!\n. Sounds like we have a couple of options here. Soon I'll merge #471 and remove the confusing defaults. Thanks for sharing your solutions!. Cool, thanks!\n. Thanks for this suggestion, can you help me understand why it is better than the existing code? Is it a style preference? \n. > I think this is a case of: \"If it ain't broke, don't fix it.\"\nYep, that's my instinct too. \nIf it turns out that refactoring this code would improve browser support or fix a bug, let's do it, but otherwise, I think it's better to stick with what has worked well so far!\n. wow, ok! could you add a little explanatory comment so we don't remove it in the future?  eg // support IE8 without jQuery\n. Cool, thanks! :tada:\n. Yep, it's intentional that they're exposed on React.addons right now. That's the way the \"official\" react bundle does it (eg, https://fb.me/react-with-addons-0.14.6.min.js), and besides that, that's how it was when I started working on it, so I don't want to break it for people :P \nI'd also love to see a more flexible & powerful way to load those things. You can see the existing build setup here: https://github.com/reactjs/react-rails/tree/master/react-builds. The addons object is created in addons-object, then tacked on to React. \nI think it'd be nice to pick-and-choose your addons with //= require. Some people also requested making it more require-js friendly (although that doesn't apply to me personally).\n. You can get them from React.addons either by adding addons = true in config, or requiring them one-at-a-time (see the bottom of https://github.com/reactjs/react-rails#reactjs-builds) \nHope that helps!\n. Thanks, I added a note!\n. Oh, I didn't know Sprockets 4 was so close to launching! Will it be part of Rails 5? \nI expect Turbolinks 5 to be supported in the latest (1.6.2). Please open an issue if you have any trouble!\n. They're still on ReactDOMServer though, right? I think we still need them somehow, that's how we implement server-side rendering!\nFor my part, I need renderToString in the browser for integrating with some other libraries, so I'd like to have a nice way to get it from react-rails! \n. @drush React 15 was merged in #512 and just shipped in 1.7.0 :)\n. I think the fix could be as straightforward as a respond_to? check in that code -- if the controller responds to before_action, use that, otherwise, use before_filter!\n. Big :+1: for this feature! Weird failing test though, I'm not really sure what it even means :grimacing: . Does it do the same thing if you rake appraisal test locally?\n. Awesome, thanks for getting this started!\nGem::InstallError: activesupport requires Ruby version >= 2.2.2.\nAn error occurred while installing activesupport (5.0.0.beta1), and Bundler\nLooks like we'll have to only run Rails 5 tests with 2.2+.  (And .... I don't know how to do that!)\n. :tada: !\n. \n. Ok, the remaining failure looks like the match of #415 \n(Rails 4.0 Gemfile is using Sprockets 3 https://travis-ci.org/reactjs/react-rails/jobs/104466644#L345)\n. I removed that failing test. It's important to figure that out, but it doesn't have to block this improvement to the test suite.\n. I removed the tests for 1.9 and 2.0. Apparently 1.9 is EOL and 2.0 is soon to go! (And we have so many test runs, it's just too much!)\n. Wow, i don't know why click_button was so much more reliable than click_link in that case but ... :relieved: \n. Hi, welcome! \nI have a couple suggestions. \n1. Instead of rendering components with ReactDOM.render, how about using the react_component view helper which is provided by react-rails? To use it, do this:\n   - Write your React component in /app/assets/javascripts/components/\n   - Require your component in application.js with //= require components/my_component\n   - In the view, use the react_component helper with the component's name & props. For example, \n ``` ruby\n <%= react_component(\"MyComponent\",  {my_prop: \"my_value\"}) %>\n ```\n\n\nIn your example, there first argument to ReactDOM.render is missing. Where is the component which you want to render?\nMake sure the JavaScript runs after #document has been rendered. For example, this does not work:\n\nhtml\n   <script>document.getElementById(\"container\")</script>\n   <div id=\"container\"></div>\nbut this does work: \nhtml\n   <div id=\"container\"></div>\n   <script>document.getElementById(\"container\")</script>\nIf the JS runs first, it won't find the <div> because it has not been rendered yet!\n. If you're still looking for a way to communicate between unrelated components, have a look at Flux :) \n. :moneybag:  I think that makes the file much clearer! Thanks!\n. :moneybag: :fireworks: Thanks!\n. :+1: So nice! I see this includes an update to 0.14.6 too, right? Thanks for that! \n. Only official react addons!\n. Oops, I didn't realize til now -- some of these addons have require(\"react\") and the like, which causes those dependencies to be bundled in by webpack. As a result, the addon files may also include a lot of duplicated framework code and be much larger than just the addon! \nI think that's why some of them are so big:\n\nI noticed this because I'm working with ReactDOMServer and it's doing the same thing! Hmmm...\n. Looks like the issue where some sprockets-rails versions don't have app.assets, instead they have app.manifest. Could you try this branch? #430 \n. > So what's the difference here between local and heroku ?\nLocal:\nruby\nRails.env #  => \"development\"\nHeroku: \nruby\nRails.env # => \"production\"\nRails has some ways that it behaves differently between development environment and production environment, and assets is one of those things that's different!\nThanks for giving it a try! I'll try to finish up that branch and merge it soon.\n. Huh, I wonder where that's coming from. Could you share this file too?\nC:/Users/Apophis/Downloads/Projects/react/config/application.rb\nThat looks like the first trigger of the bug, but I'm not sure what's in that file!\n. wow, crazy! glad you got to the bottom of it!\n. Yikes! Thanks for reporting this. \nHow do you discover this bug? Did you have to download the plugin separately? \n. Thanks for the test case, that's awesome. \nYikes, I mean, obviously this is a bug in the transpiler, but that project seems quite dormant. (Which is weird because won't sprockets 4 bundle it right in?)\n. Not sure if there's anything to do on react-rails here!. Currently, mounting components into the page is idempotent. It can be done over and over with no problems. But this change makes it destructive: once you mount a component, you can't remount it (because its props have been lost). That's why the test is failing. \nCould you help me understand why this change is desirable?\nCould you handle this at app-level if it wasn't added to react-rails? Or maybe you could make this opt-in instead of default.\n. Uggh, makes sense that would break! Thanks for reporting it. \nHmm, I guess this isn't a good enough check: \nruby\nif manifest_contents.include? 'require_tree'\nMaybe it should check for the whole directive, like this: \nruby\nif manifest_contents.include?('//= require_tree') || manifest_contents.include?('#= require_tree')\n?\nI guess the same fix should be done for the Turbolinks check before that too.\n. nice, thanks!  :confetti_ball: \n. Are you using Sprockets? I know import and export are used by some JavaScript bundlers, but I don't know they'd be used with Sprockets!\n. I have a similar change coming in #430 , which provides an \"Asset container\" interface, something that receives filepaths and returns JS code: https://github.com/reactjs/react-rails/pull/430/files#diff-1cd07a77af52dfe22d04099826f272a9R59\n(Its in order to support loading JS from a Sprockets::Environment vs Sprockets::Manifest.)\nI wonder, would providing an asset container fit the bill for your custom JS?\n. I guess I hesitate about adding another \"extend-and-override\" API. Sometimes it's the only way, but in general I worry about some maintainability issues: \n- How do you keep people from clashing with gem internals? If you \"invite\" them into the class, they might add some other methods for their own behavior, and they might conflict with the gem's implementation (perhaps not immediately, but in a later version).\n- The resulting class is not coherent. The behavior is spread between application code and gem internals, which makes it hard for a new reader to understand what it does and how it does it.\n- It restricts gem development. Since application code is coupled to gem code, we have fewer options to refactor the gem.\nThat's why I've been looking for more dependency-injection-ish approaches lately. It solve a few of those problems:\n- There's no clashing with gem internals\n- The resulting class implements a discrete behavior\n- The only requirement of the gem is to accept and use the injected behavior\nAll that to say, if we can cover this use case with the AssetContainer API, I'd like to do that! If not, we can add a hook (but it would also need unit tests so it's not broken in the future!). \nCan you tell me a little bit about how you're loading assets now, or perhaps share some code for it? \n. Another good solution might to expose some different things from the gem, for example the CONSOLE_POLYFILL or other SprocketsRenderer behaviors, so that, if you're making your own server renderer, you don't need to duplicate as much code!\n. It seems important to support the case you're describing! I'm surprised it hasn't come up already.\nWhat if findDOMNodes searched the matching node AND its children? I think that would work the same for existing users and it would handle this case nicely. (Also, it wouldn't expand the API of this function!)\n. Yeah, that makes sense! if the given selector is a react component, it will unmount that, or it will unmount any child react components. \nI guess technically you could have a bad time if any children of the react component have data-react-class but ... I don't think anyone would do that!\n. That looks great! Those failures look totally unrelated:\n\nMaybe I'll have to find another way to get a recent phantomjs install for Travis!\n. :ship: in 1.6.1, thanks!\n. Thanks for reporting! \nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L62\nI think that whole block can be replaced if we use Sprockets' provided cache_key API (CoffeeScript example)\n. > But then I don't have react_ujs, because it requires React\nSorry, I didn't keep up at that point! Are you able to require just the UJS with sprockets, for example:\njs\n//= require react_ujs\nThen, you could provide React by some other loading system, just attaching it to the window? For example, \njs\nimport React from \"react\" \nwindow.React = React\nDoes that work?\n. It depends a global React at runtime, yes... but does it depend on React before that? Could you share some details on the error you're seeing (for example, a stack trace, or console error, or some wrong behavior)?\nMaybe we could make a way to inject React some other way, then fall back to looking up on window...\n. Oh, so it's looking for ReactDOM in the global namespace but not finding it. Can you provide it from the rest of your build somehow? Like \n``` js\n//= require react_ujs \nwindow.ReactDOM = require('react-dom');\n```\n? \n(Or, if you can't do that, is there an API that would work for you?)\n. Thank you!\n. What's the sprockets version and sprockets-rails version in your gemfile.lock? (I think this happens for any sprockets 3 user)\n. Here's a workaround:  https://github.com/reactjs/react-rails/issues/443#issuecomment-180544359\nHere's a fix (with breaking changes): https://github.com/reactjs/react-rails/pull/471\n. Thanks for sharing your solution! I hope it works for others, too!. > So if this script just adds directory and manifest, so may be I can do it myself?\nYep, you can definitely just do it yourself. \nI wonder what could be stuck!?\n. The readme describes what react:install does, I think this is a complete list: \n\nNext, run the installation script:\nrails g react:install\nThis will:\n- create a components.js manifest file and a app/assets/javascripts/components/ directory, where you will put your components \n- place the following in your application.js:\n//= require react\n//= require react_ujs\n//= require components\n\nYou could just add your own components.js & add those //= requires to your application.js\n. Thanks for the heads up, I guess we'll have to update the UJS! \nI'm hoping we can take the opportunity to put more structure in the UJS. For example react_ujs is actually a manifest of react_ujs_mount + react_ujs_turbolinks_3 + react_ujs_turbolinks_5. That way, if someone wanted to, they could pick and choose which parts they want.\n. It's almost working here, feel free to try out the branch! \nhttps://github.com/reactjs/react-rails/pull/475\n. Could you try 1.6.1? It includes new turbolinks 5 support\n. cool, thanks for trying it out! Someone please let me know if anything is missing!\n. Maybe the old one will still work thanks to \nhttps://github.com/turbolinks/turbolinks/blob/master/src/turbolinks/compatibility.coffee\n. - Rails 4.2 + Turbolinks 2.5\n\n- Rails 5.0 + Turbolinks 5\n\n\n:tada: :question: \n. How could this possibly work? Turbolinks 5 doesn't have Turbolinks.EVENTS!\n. That's more like it: \n\n. Thanks, this will be a great fix! \nWe just changed this code but I guess we missed a spot :grimacing: \n. Thanks for the fix!\n. :ship: in 1.6.1, thanks!\n. Sorry! That will be fixed in the next release: https://github.com/reactjs/react-rails/pull/476\n. Could you try in 1.6.1 ? Please re-open if this problem occurs again, thanks!\n. This seems good! \nBut now I'm trying to figure out ... how did this ever work!?\n. I cherry-picked it to #453  to make sure it was good on all versions of Sprockets. And it looks like it is! So, it got merged to master along with that.\nThanks for this fix!\n. :ship: in 1.6.1, thanks!\n. Nice, thank you!!\n. :ship: in 1.6.1, thanks!\n. I think that would be a responsibility of the React.js library. We wouldn't want to add it here (react-rails) because we're just providing bindings for React.js + Rails. \nYou could try asking in the React.js repo though, good luck! \n. Hmm... interesting. I guess that whitespace is being handled differently in the two contexts. Could you paste the HTML from the server and the HTML after React mounts itself? \nFor example, you might use \"View source\" in Chrome to get the server-rendered HTML. Then \"Inspect element\" to get the client-rendered HTML.\n. Ever since I inherited this project, it said \"supports Rails 3.2\", and I'm still on board for that! We have a Rails 3.2 gemfile, so we mean to support it! \nI think the problem is: \n- SprocketsRender looks for config.assets.compile. If it's false, it uses the asset manifest (src)\n- Apparently that assumption is not safe for Rails 3.2! We must have another way to handle Rails 3.2.\n- This wasn't covered by the tests ... when I got to this problem, I just skipped it, sorry! :grimacing:  (src)\nSo, I can think of a few ways to work around this: \n- Use EnvironmentContainer even when assets are precompiled. This kind of stinks because it compiles assets on the fly in production. But this is how react-rails worked until 1.6.0! You could do this by assigning React::ServerRendering::SprocketsRenderer.asset_container_class = React::ServerRendering::EnvironmentContainer. In that case, it will use the custom-defined asset_container_class instead of ManifestContainer. \n- Make another asset container class for the renderer to get files from. This is the best thing to do, but I'm not exactly sure how it would work. \nI think you'd want to: \n- make a server_rendering.js manifest which includes react-server, components, and dependencies (this will be the default in a future react-rails version, example)\n- tell SprocketsRenderer to only load server_rendering.js: \nruby\n    config.react.server_renderer_options = {\n      files: [\"server_rendering.js\"]\n    }\n- implement an asset container which implements #find_asset(\"server_rendering.js\") to return the compiled output of that manifest file. (EnvironmentContainer will do that, but it will compile the asset on the first load!)\n- assign that asset container class to React::ServerRendering::SprocketsRenderer.asset_container_class \nAll that to say, I think it's within the realm of possibility, but I'm not sure how to get the already-compiled contents of that file in Rails 3.2. How can you find the file if you don't know the digest? Could you grep the directory for  server_rendering*.js ?\n. go for it!\n. :tada: :moneybag: That's awesome! It'd be great to get this into react-rails, I was just thinking about cutting 1.6.1, maybe this could be in it. \nI think you could add some logic here to use YamlManifestContainer: \nhttps://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/sprockets_renderer.rb#L64\nruby\nelsif Rails::VERSION::MAJOR == 3 \n  YamlManifestContainer.new \nelse \n  # ...\nAs far as improving YamlManifestContainer, is there an advantage to creating @manifest instead of accessing the parsed YAML directly? For example,\n``` ruby\nclass YamlManifestContainer\n  def initialize\n    @assets = YAML.load_file(Rails.root.join(\"public/assets/manifest.yml\"))\n  end\ndef find_asset(logical_path)\n    asset_path = @assets[logical_path] || raise(\"No compiled asset for #{logical_path}, was it precompiled?\")\n    asset_full_path = ::Rails.root.join(\"public\", \"assets\", asset_path)\n    File.read(asset_full_path)\n  end\nend\n```\n?\nThen, if you wanted to add unit tests, that'd be great. You could: \n- Setup a mock asset situation: \n  - Add public/assets/manifest.yml to the Rails app in tests/dummy \n  - Add a pretend compiled asset in public/assets and a corresponding entry in manifest.yml\n- Add yaml_manifest_directory_test.rb next to manifest_container_test.rb\n- Assert that find_asset(your_asset_name) returns the file you put in public/assets\nBut, to be honest, that might be more trouble than it's worth! The operation is quite straightforward, you'd practically be testing the Ruby standard library. Do you have and links to documentation handy? If we can be relatively confident that this covers the default setup for Rails 3.2, I think we could skip the  tests.\n. Good call to just precompile assets with 3.2 to make sure it works, that's way better than my suggestion to copy random files!\nCould you switch clear_precompiled_assets to use rm_rf here? \nhttps://github.com/reactjs/react-rails/blob/master/test/test_helper.rb#L51\nI think that would make it skip the directory if it doesn't exist.\n. :moneybag: :rocket: Thanks so much! that's great.\n. :ship: in 1.6.1, thanks!\n. There's no reason you can't use Redux with this gem! You can use this gem to transform JSX and insert React components into Rails views. Your React components can interact with Redux any way they want!\n. > Do you think react-rails necessarily couples frontend and backend?\nYes, to the same degree that off-the-shelf Rails couples frontend to backend. I think this is a feature:  There's only one project -- no overhead for switching projects (same repository, same development team, same build tools, same deployment strategy). Because they are \"coupled\", you can fetch exactly the data you need when you need it. \nIt makes it very easy to add new features and fix things, which is what people really want :shipit: \n\nWhat advantage does react-rails provide compared to a node-packaged React?\n\nI think the biggest advantage is that you don't have to use Node.js :laughing:. npm is not great. For \"normal\" Rails developers (or any developer who started of with <script> tags), the cognitive overhead of require (or import) makes development and in-browser debugging harder. The asset bundlers (webpack, browserify) are good, but they aren't better than Sprockets (maybe rollup is, but nobody uses that, right?). \nI'm happy to stay heavy on Rails and light on Node.js. There are a few nice things that I'd like (named imports, sourcemaps), but I don't think they're worth all the overhead they bring with them!\n. Hmm, what I do with dependencies is: \n- Grab a pre-built version (for example cdnjs)\n- Put it in assets/javascripts/vendor/{library-name}-v{version}.js \n- Add to application js //= require vendor/{library-name}-v{version} \nThen the library's object is available as a global (eg, window.Redux).\nDoes that flow work with Redux?\n. Thanks again not just for the quick fix but also adding the test for the future!\n. shipped in 1.6.2\n. Yes, react-rails uses Sprockets! I'm not sure about npm, I don't use it. \n. Yes, it's possible, although it's not supported out of the box! \nTo support it in your app, you'll want to respond to the right pjax events by calling functions on ReactRailsUJS. \nSee how we setup handlers for turbolinks events?\nhttps://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs_turbolinks.js#L5-L6\nYou want to do something similar for the analogous events in pjax. \nIn fact, if you get it hooked up, that would be a great PR into react-rails :smile: ! You can see how we detect some other Javascript libraries here, then setup their support:\nhttps://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs_event_setup.js#L14-L26\nI think you could detect pjax there, too!\n. Hmmm ... As you can guess, that means that the initial render found a different output than what was in the DOM, even though the existing elements looked like a React result. \nDoes pjax maintain a page cache? I wonder if it's inserting cached React stuff or something. \nDoes it give that error if you go back and forth without changing anything inside react components, or only when you alter their state?\nTo test whether it's caching, you could try it with cache of 0. \nHmm... if that's what turns out to be, I'm not exactly sure to handle it (I don't remember how it works with Turbolinks)\n. Hmm... neither one seems awesome, messing with React's DOM output is a bit of a no-no. What I really want to do is get a little dummy app running with PJAX and debug it..!\n. I finally got a chance to set up a pjax app, then I rebased this on master and POOF! It just worked :D \nI think this was fixed by v15: \n\nThe Facebook gods have smiled on us :P \nRebased in #518\n. Rebased the first 3 commits here:  #518\nThe last one isn't needed in React 15+ :D \nThanks for this feature!\n. I like this idea, I think it would go well with #427 ! Your code style is fine by me.\nOne question: how can we be sure to keep maintaining this in the future? Can we test somehow that react-rails still works in environment without sprockets?\n. Yeah, I was wondering if we might be able to add an appraisal with some configuration that didn't have sprockets ... but, sprockets is a dependency of Rails (right?) so I'm not sure how customizing the gemfile could do that :S\n. Just curious, how do you run Rails without Sprockets? Isn't Sprockets a dependency of Rails (via sprockets-rails?\n. @guzart Thanks for your work on this! I pulled your commit into #555 so I could rebase it & set up a test run without the Sprockets railtie. \n. > Is this a remnant\nYes, I bet it is! would you be able to submit a patch?\n. Yes, that's a bug :disappointed:  \nI removed it from the readme earlier: c18aa380644f972706023e5e47e7c8091815df20\nBut I haven't figured out a good way to support addons one-by-one. The problem is, a bunch of them depend on internal functions from React. \nI had half a mind to write a \"React build generator\" where you could specify the addons you wanted and it would make a script, then pass it through webpack. But that's a tall order!\n. I'm not sure how to handle the requires in that case. Like, check out the \"update\" addon: \nhttps://github.com/facebook/react/blob/master/src/addons/update.js#L16-L19\njavascript\nvar assign = require('Object.assign');\nvar keyOf = require('keyOf');\nvar invariant = require('invariant');\nvar hasOwnProperty = {}.hasOwnProperty;\nSomehow you have to resolve those requires. If you build it with webpack on its own, it finds that code from React and includes it -- but that results in a double-include. \nThe double-include is much worse for say, TestUtils, where it requires React all over again: \njavascript\nvar EventPluginRegistry = require('EventPluginRegistry');\nvar EventPropagators = require('EventPropagators');\nvar React = require('React');\nvar ReactDOM = require('ReactDOM');\nvar ReactDOMComponentTree = require('ReactDOMComponentTree');\nvar ReactElement = require('ReactElement');\nhttps://github.com/facebook/react/blob/master/src/test/ReactTestUtils.js#L18-L19\nSo, that file needs a local variable called ReactElement, how could we provide it in a programmatic way (without copying the whole ReactElement file again)?! :S\n. Thanks for sharing that workaround! I'll be watching for asset changes in Rails 5.1 in case anything there can help react-rails.. Hmmm... it supposed to run automatically, it did for some previous PRs! https://travis-ci.org/reactjs/react-rails/requests\n. :moneybag:  thanks for the fix! nice find and thanks for including a test.\n. What if you want the server to render the initial html, but you want a dynamic UI when the page loads? \nCurrently, the browser will pick up where the server left off, using those props. \nHappy to include this behavior as opt-in, but I don't want to change the default without feedback from other server-side rendering users! (I am not one.)\n. Ohh I see, I misunderstood! \nI agree that this is a safe assumption. It's technically a breaking change but ... only if you're using the library really inefficiently!\n. (maybe I can let this issue rest here in case any other watchers have a reason not to merge it!)\n. Thanks!\n. do you have the whole stack trace? could you share it?\n. (the stack trace includes really useful information, like what code is triggering the error and what code path made it happen!)\n. Hmm so it doesn't event start, this is Rails 3.2 .... \n. Our tests run 3.2.21 and that passes, are you able to try that? Also, what's your Ruby version? (You can see which ones we test here: https://github.com/reactjs/react-rails/blob/master/.travis.yml)\n. I wonder if swapping the require order here would help:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react-rails.rb#L2-L3\nThe line in question is inside app.after_initialize so I would expect it not to matter but ... I don't know!\n. Full stack trace?\n. Hmmm it should come from the ViewHelper:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/view_helper.rb#L19\nWhich gets included by the Railtie: \nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L43\nI wonder why it's not there ... \n. > inside the assets group\nDoes that mean it's used for assets:precompile, but not loaded to boot the app? If so, that would definitely cause problems. react-rails is needed at runtime if you're using view helpers!\nCould you try moving it out of the assets group?\n. :cry: a new surprise around every corner! \nThat's the same error we saw earlier, but only with Sprockets 3! https://github.com/reactjs/react-rails/issues/443#issuecomment-180544359\n. I hope you were able to find something that works for you!. Sorry, I don't really understand this issue! Could you try rephrasing it in the form: \n- What currently happens \n- Why that's bad\n- What you want to happen \n?\n. render returns null, right? \njs\n       // This is false, initial query has {keyword: \"coffee\"}\n       if (initial_query_empty && !has_results) {\n            return func_initialSearchField(this);\n        }\n        // this is true, right? `this.state.response_received` is `undefined`? It's not set in `getInitialState`?\n        else if (!this.state.response_received) {\n          return null\n        }\n        else if (has_results) {\n            var listItems = results.map(function(cont) {\n                return func_contentItemRender(cont);\n            });\n            return func_ListContentsRender(listItems);\n        }\n        else {\n            return func_noContentFound();\n        }\nOh, this.state.response_received would have been set during componentDidMount, but check this bit from the React docs: \n\nInvoked once, only on the client (not on the server), immediately after the initial rendering \n\n(https://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount)\nDoes that seem like it might be the issue?\n. Long story short: prerendering is executed in an ExecJS context, which provides a JavaScript runtime but not:\n- browser-specific stuff (eg, document)\n- asynchronous stuff (eg setTimeout) \n- NodeJS-specific stuff (eg require) \nSo, I doubt ExecJS supports XMLHttpRequest! \nOne option is to move those behaviors to componentDidMount, which is called on the client but not the server (http://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount).\n. Interesting, could you share a couple files that have the issue? Like, one file that defines a component and another that puts the component in the global namespace? \nI wonder if, to support this case, it could be: \n``` js\nvar constructor\n// First, try accessing the name globally: \nconstructor = window[className]\n// If that doesn't work, try eval (to handle \"My.Namespaced.Component\")\nif (!constructor) { \n constructor = eval.call(window, className)\n}\n// Then, if it has a .default attribute, we assume it's exported from Weback in that way: \nif (constructor && constructor.default) {\n  constructor = constructor.default \n}\n```\n. Wow, sorry I left this sitting around for so long! I was just thinking \"I should write some docs for that new component lookup function\" and then I didn't find it on master \ud83d\ude2c \nThanks for this!\n. Shipped in 1.8.0!\n. 1) Sorry! \n2) Could you try to find the error message? You can follow the heroku logs with heroku logs --tail. Then, trigger the error, then check the logs for a message. \n3) I bet it's this problem: https://github.com/reactjs/react-rails/issues/443#issuecomment-191931742\n4) I bet this workaround will help: https://github.com/reactjs/react-rails/issues/443#issuecomment-180544359\nPlease let me know what you find, if that problem/workaround matches your case, maybe it's time to merge those changes to the gem!\n. Let me know if you find anything in the logs!. Hmm, I'm not sure, I use react-rails for mobile browsers and webview-based apps without a problem. \nIf none of the components are showing, perhaps ReactRailsUJS.mountComponents() isn't being triggered? It's usually triggered by \"DOMContentLoaded \", $(document).on(\"ready\") or Turbolinks' page:change. \nYou can see the mount event handlers here:\n- Non-turbolinks: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs_native.js\n- Turbolinks: https://github.com/reactjs/react-rails/tree/master/lib/assets/javascripts  react_ujs_turbolinks*.js files\nIt tries to detect which event to listen to here: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs_event_setup.js\n. Oh, that's ES6 \"Arrow functions\", right? Is there a ES6 \"compile\" step in your build process? (As far as I know, lots of ES6 features are unsupported by many browsers)\n. To get the props from the HTML, you can do this: \njavascript\nvar container = document.querySelector(\".container\"); \nvar propsString = container.getAttribute(\"data-react-props\");\nvar props = JSON.parse(propsString);\nReactDOM.render(<Plan {...props} />, container);\nIs that helpful for you? \nYou can see react-rails's approach to this here: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs_mount.js#L47\n. Hope you found something that works!. I think gem \"react-rails\", \"~> 1.6.0\" is actually a pretty good instruction -- it will install the latest patch version but won't increase the minor version, right?\nReally, I don't want this to become a maintenance bug. Eventually, we'll just forget to update it and people will copy-paste the wrong thing \ud83d\ude16 Could we remove it altogether? Maybe the gem badge at the top header is enough?\n. If you'd like to remove it, feel free to open another PR or reopen this one!\n. SprocketsRenderer expects a files: option, do you mean to use SprocketsRenderer? (That's the default.) \nIf you want to use ExecJSRenderer, you should pass a code: option instead, containing the JavaScript code to load before serving pre-rendered components. \nIn this way ExecJSRenderer is more \"low-level\": it doesn't have any methods of finding or creating JavaScript code. If you want to use the asset pipeline, you can use SprocketsRenderer. Otherwise, you have to fetch that code yourself somehow and pass it to ExecJSRenderer!\n. I'm using Sprockets, here's how I'd do it: \n- Copy the \"compiled\" file into my app: \n  - copy https://github.com/reactjs/react-modal/blob/master/dist/react-modal.js\n  - into /app/assets/javascripts/vendor/react-modal.js\n- Add the version number to the file, for clarity in the future \n  - rename to /app/assets/javascripts/vendor/react-modal-v1.0.0.js\n- Require the file in application.js after requiring React: \njs\n  //= require react \n  //= require ./vendor/react-modal-v1.0.0\n- Use the global ReactModal variable in my code: \njs\n  // inside a component definition:\n  render: function() {\n    return (\n      <div>\n        <ReactModal />\n      </div>\n    )\n  }\n. People usually \"compile\" their compiles-to-JS languages before pushing to NPM, right? So npmcdn might have the compiled version: https://npmcdn.com/autobind-decorator@1.3.3\nThe only problem is that it looks like that is made for a NodeJS-like environment, I see that it assumes an object named exports exists.\nYou could remove those lines to prepare the file for the browser:\n\njs\n// Remove these:\nexports['default'] = autobind;\n//...\nmodule.exports = exports['default'];\n\nOr, since this package is meant to be used with Babel, maybe babel will take care of it? \n. React-rails 2.0.0 will support https://github.com/rails/webpacker which brings nodejs build processes to Rails!. Sprockets doesn't support Node modules, consider webpacker instead: https://github.com/rails/webpacker. Sorry for the delay! Thanks for bumping it. \nEmoji responses are great but they don't trigger a notification ... I wonder if there's a setting for that. \nAnyways, yeah, I think the previous React deprecations are enough for our case!\n. > jbuilder but that shouldn't matter\nIt looks like camelize_props is only applied when the props are provided as a hash: https://github.com/reactjs/react-rails/blob/master/lib/react/rails/component_mount.rb#L50\nAnd if I remember correctly, Jbuilder provides props as a string. \nSo it might make all the difference!\n. Well... react-rails gets a string at that point. If you wanted react-rails to camelize the props, that string would need to be re-parsed into a hash, camelized, then re-stringified. \nYou could do this in your app: \nslim\n- props_string = render(partial: 'api/v1/products/show.json.jbuilder', locals: { product: @product })\n- props_hash = JSON.parse(props_string)\n= react_component 'ProductShow', props_hash\nOf course, it's not very efficient to stringify, parse, and stringify again!\n. It sounds like your mixin is not included in the server rendering manifest. \nBy default, only components.js is loaded on the server. So, if your mixin isn't required by that file, it won't be available on the server. \nTry adding to components.js: \n//= require your_mixin_file\nAlternatively, you could ensure the mixin is loaded by adding a //= require to the component itself, for example: \n``` js\n//= require ../my_mixin_file \nvar MyComponent = React.createClas({ \n  // ... \n})\n```\nThat way, the mixin will be loaded anywhere that the component is loaded. \nDoes that help?\n. If it's available during render, but not during React.createClass, it could be a load order issue. \nFor example, imagine the requires were like this: \njs\n//= require my_component \n//= require my_mixin\nIn that case, MyMixin would not be defined during React.createClass (since it's called when the file is //= require'd). But, it would be loaded during //= require my_mixin. Then, during render(), the mixin would be defined.\nIs it possible that something similar is happening in your case? Perhaps the component is loaded first, then the mixin? \nIf so, you have to make sure the mixin is loaded first. Requiring the mixin at the top of the component file is a sure-fire way to do this. Alternatively, make sure your \"manifest\" loads mixins first, then components, eg:\njs\n//= require my_mixin \n//= require my_component\n. > So it seems that React.createClass is being called the first time around... was this behaviour changed in some version of react-rails??\nI believe this is a standard behavior (perhaps even a feature \ud83d\ude06 ) of Sprockets. When it's building an asset, it makes two passes: \n- First, find all the //= requires and build a dependency tree \n- Second, concatenate all the files to satisfy that dependency tree\nAs a result, a required file is only executed once, and it's executed according to the first time it's //= require'd.\nFrom a user perspective, this implementation is very similar to Ruby's require!\n. Yep, I don't know why it would have been different in a past version!\n. Strange strange ...\nI see this part of the polyfill: \njs\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\nI wonder if that's causing \nTypeError: instanceof called on an object with an invalid prototype property.\nBut, I would have thought someone else on that ReactJS thread would have had the same problem....\nWhat about \nReferenceError: Can't find variable: I18n\n? Is that error coming from JavaScript, or from Ruby? I mean, is there a missing value in JS somewhere?\n. :+1: Makes sense, I guess I picked the wrong event for that! Please go for it!\n. Thanks!. Derp, looks like build troubles: \nThe command \"wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2 -O $PWD/travis-phantomjs/phantomjs-2.1.1-linux-x86_64.tar.bz2\" failed and exited with 8 during\nI'll take a look...\n. I remember fighting with PhantomJS before. Turbolinks needs ... something ... from 2.1 to work properly, but TravisCI comes with 1.9.8 installed. \nIn the end, I cherry-picked your commits into separate PRs to address them separately:\n- #519 Fix phantomJS source (and reduce the entries in the Travis matrix ... it was taking forever)\n- #521 Improve Turbolinks 5 support \nThanks for these fixes!\n. They all passed until we got a 403 for PhantomJS ... I'm calling it good :P (And trying to fix it in #519)\n\n. omg it finally worked \ud83d\ude29 \n. Hmm, a couple of thoughts: \n- Do I understand correctly: If you click <a />s to go back and forth, it's OK, but if you use back/forward buttons, you get this error? \n- Are you using Turbolinks? Does this error occur if you turn off the Turbolinks cache? If the Turbolinks cache makes a difference, that gives us a clue that something is not re-mounting properly. \n- Can you tell what component raises this error? (Perhaps you can expand the stack trace in the JS console?) Can you share the source for that component, and the react_component call which puts it in the page?\n. Thanks for sharing your solution!. Thanks for this! I wonder if it will fix some of the mysterious non-transforming assets with Sprockets 3 too.\nIn general, it looks good to me. Looking back at the PR where it was added (https://github.com/reactjs/react-rails/pull/385), I think it was just to future-proof for Sprockets 4. But maybe we moved too soon! \nRegarding Sprockets 4 support, you could either: \n- Remove it, since it's untested (and currently unsupported) \n- Add Sprockets 4 support: \n  - Add a gemfile to gemfiles/ which includes Sprockets 4 \n  - Add the gemfile to the list in .travis.yml (and add an entry to the exclude: for Ruby 2.1)\n  - Make sure the tests pass \nYour call!\n. > update .travis.yml and allow failures\n\ud83c\udf89  \ud83d\udcb0  \ud83d\ude39  sounds perfect!\n. Just remind me, like you did :) Sorry about the delay, and thanks for the fix!\n. :ship: shipped in 1.7.1!\n. Hi, I've written up a little bit about how I use Sprockets to manage JavaScript dependencies: \nhttp://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/\nhttp://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/\nUnfortunately, \"autobind-decorator\" defies these categories! That project does compile to a single file (as seen on npmcdn), but that file is not usable in a browser because it depends on a global module object. \nOf course, there are other good options for binding, such as React.createClass or binding during constructor!\nI hope that helps a bit! You can also browse other issues here regarding non-Sprockets asset bundling. It's a bit \"off the beaten track\" with Rails but some folks have found nice solutions (like @joerodrig3 's solution above!).\n. What about changing this <% to a <%= ?\nFrom:\nerb\n<%  output['code'].html_safe %>\nTo: \nerb\n<%=  output['code'].html_safe %>\nThat way, ERB will write the output to the page. Does that make it work? \nIf not, can you share the output of output['code'].html_safe? (Perhaps you could inspect the page and copy the contents of the <script> tag)\n. Thanks!\n. :ship: shipped in 1.7.1!\n. I think this behavior is covered by this test: https://github.com/reactjs/react-rails/blob/master/test/server_rendered_html_test.rb#L12\nAnd we have a gemfile for Rails 5 (https://github.com/reactjs/react-rails/tree/master/gemfiles), so I'd say we're all clear! \nThanks!\n. :ship: shipped in 1.7.1!\n. To render markup from string in React you must use __dangerouslySetInnerHTML: https://facebook.github.io/react/tips/dangerously-set-inner-html.html\nSo, you could change your component to: \njsx\nvar SampleComponent = React.createClass({\n    render: function() {\n        return (\n           <div dangerouslySetInnerHTML={{__html: this.props.html}} />\n           </div>\n        );\n    }\n});\n. Thanks for adding it!\n. Sorry, this is currently not supported! If you're interested in patching it, here's the generator:\nhttps://github.com/reactjs/react-rails/blob/master/lib/generators/react/component_generator.rb#L102. That's a great suggestion, maybe we can make that behavior directly accessible!\n. This will be exposed as React.camelize_props(props_hash) in the next version! (#556)\n. It looks like the JSX isn't being compiled. \nI think files are compiled if they have .jsx in their file extensions, eg .js.jsx.\n- What's the full name of your component?\n- Did you restart your development server after installing the gem?\n. Glad you got to the bottom of it and thanks for sharing your findings, I'll keep it in mind for the future! \n. @gilbertravels  please post the whole file, it's hard to tell without the proper context!. Props are serialized as JSON when they're embedded in HTML, so the only valid values JSON values!\nAnother way to lookup components by name is to access them from the window object. For example: \njs\nthis.props.bodyName // => \"ProductSubmissionModal\" \n// lookup window.ProductSubmissionModal:\nvar bodyComponent = window[this.props.bodyName] // => ProductSubmissionModal\nThe next version will also include a ReactRailsUJS.getConstructor(componentName) helper to perform that lookup with the same logic used by <%= react_component(...) %>!\nAlso, you can customize the way that props are injected by the view helper: https://github.com/reactjs/react-rails#custom-view-helper\n. Hi, sorry about that! \nThat code was just changed to support Rails 5: https://github.com/reactjs/react-rails/pull/526\nJudging by the stack trace, this is a Rails 5-beta3 project, correct? \nIf it isn't, you could try bundle exec rails g react:install -- that way it will use the Rails version from your gemfile, in case it doesn't match the default version in your terminal. \nIf it still doesn't work, have no fear. The install task does very little. It creates 1 empty file and adds three lines to application.js, you read the details at the bottom of this section of the readme: https://github.com/reactjs/react-rails#installation\nDoes any of that help!?\n. I'm afraid our change to support Rails 5 may have broken it! I wonder why CI doesn't fail. \nCould you share: \n- The full stack trace from that error \n- Gemfile.lock\n. In the meantime, you could try version 1.7.0, it doesn't have the to_prepare changes\n. Glad to hear it, thanks for sharing your details, i will take a look!\n. I haven't heard any other cases of this, I hope it's cleared up!. Hi, thanks for sharing a link to the app. That's very helpful. I have some ideas on the error message but I don't know why it would work in development but not production!\n- Uncaught Invariant Violation: _registerComponent(...): Target container is not a DOM element. \nI think this is caused when you call ReactDOM.render(<Something />, null). This could be happening here: \n  https://github.com/amphithere/ResearchMap/blob/master/app/assets/javascripts/components/accepted_trip_passes.js.jsx#L110-L113\njs\n  ReactDOM.render(\n    <AcceptedTripPasses data = {this.data}/>,\n    document.getElementById('accepted')\n  );\nThat will be executed immediately by the browser. So, since the script tag is in the <head />, the <body /> won't be loaded yet. \nIf you want to render React components inside Rails views, I suggest the react_component helper which is documented in the readme. \n- Uncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined / Warning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components)\nI think this happens when you put a component in JSX which isn't actually defined, for example \njs\n  <window.NonSenseComponent /> // NonSenseComponent is undefined\nI think that could happen here: \n  https://github.com/amphithere/ResearchMap/blob/master/app/assets/javascripts/components/conversation.js.jsx#L55\nbecause <Converstation /> is rendered at the bottom of that file (likely with the same error described above). \nWhen you //= require_tree, I think sprockets requires files in A-Z order. So, during conversation.js.jsx,  message_list.js has not been loaded yet. \nTo solve this problem, make sure to require your dependencies at the top of the file, for example:  //= require ./message_list. \n(Also, if you use the react_component view helper, render won't be called until after the JS is loaded, so that error might go away)\nI hope some of those suggestions help, let me know!\n. Hi there, I think it is possible to test your views + components with Cucumber. \nThis repository has some tests using Capybara (with Minitest), you can see them here: https://github.com/reactjs/react-rails/blob/master/test/react/rails/react_rails_ujs_test.rb\nA quick google search for \"Cucumber and Capybara\" suggests that many people use these tools together so... I bet it's possible! \nIn general, the testing flow is much like testing a jQuery-powered view:\n- Fetch the page from the server\n- Assert the page has certain DOM elements\n- Send some clicks and key presses\n- Assert the page has certain DOM elements\nDoes that help?\n. It's trying to call React.createElement, right? But React isn't defined ... hmm. Just to be sure, did you restart your development Rails server after changing application.rb? (That file isn't live-reloaded by Rails)\n. Very strange that this is happening during #initialize (seen from this line: react-rails (1.7.1) lib/react/server_rendering/exec_js_renderer.rb:10:in 'initialize'). \nThat means that this error is happening when the files are first loaded. \nUsually, React.createElement isn't called until the JS files are completely loaded, then you render a component. \nAre you using JSX outside of component definition render functions? For example, something like \njs\nReactDOM.render(<Something />, targetElement)\n?  Hmmm... but even then... why would React be undefined? \nAnyhow, I think there's something going wrong while it loads components.js. It's hard to tell what is going wrong, since the stack trace doesn't include JS code. \nThe best suggestion I can make is \"bisect\" to find the error: Remove half of the //= require directives from components.js and see if it still happens. If it still happens, remove another half of the //= require directives. If it doesn't happen, remove the ones that are there and put back the ones you removed (to search the other half of the directives). Eventually, you'll be able to find which file is triggering this bug. \nIf you remove all the //= requires and it still happens, it must be a bug in react-server! \nOr, if you can share your components.js and the files which it requires, I could take a quick look!\n. \ud83c\udf89  thanks, that's awesome! this will prevent a lot of github issues, too!\n. \ud83d\ude01 \n. Hi, Sorry I missed this before! \nOne part of server rendering is that renderers may implement before_render and after_render to add some JS to the rendering code: \nhttps://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/exec_js_renderer.rb#L16-L21\n(That's ExecJSRenderer, the parent class to SprocketsRenderer). \nSo, you could extend SprocketsRenderer and implement those hooks (make sure to call super!). \nDoes that help in your case?\n. Interesting -- this seems feasible. The view helper gets setup and teardown calls during the controller lifecycle, so I guess we'd just need to check out a JS environment during that time, instead of during the react_component call\n. Here's one approach to adding that feature: https://github.com/reactjs/react-rails/pull/559\nHow does that look to you, would that fit your use case? If you want to share some details or example code, maybe I could refine it further. API suggestions are also welcome :)\n. react-rails 2.0.0 will include per_request_react_rails_prerender for controller action-level setup & teardown: 292f917\n. Hi, could you share some details about your situation? for example: \n- React component code snippet \n- Screenshot of rendered components \n- Description of the expected behavior \nThanks!\n. Use className in JSX, don't use class! (https://facebook.github.io/react/docs/jsx-in-depth.html#html-tags-vs.-react-components) Does that fix it? \n(I see that bootstrap's CSS is loaded because the font is Helvetica.)\n. Cool, glad we found it!\n. Out of the box, neither Rails, nor Sprockets, nor React-Rails support import identifier from \"package-name\". \nSprockets uses //= require directives to manage dependencies. \nTo use import, you need to set up a NodeJS bundler like webpack or rollup. Then, require the \"compiled\" result by Sprockets. \nAlternatively, you could give this library a try to use import with sprockets: https://github.com/Shopify/sprockets-commoner\nPlease take a look at some of the existing issues for advice on using external bundlers (webpack, browserify, etc) with Rails ... or just use Sprockets :) \n. Hmm, I see what you mean, that logic for choosing a container could be improved. Option 1. sounds best to me, do you want  to give it a try?\nIn the meantime, I think you can work around it by manually choosing EnvironmentContainer: \nruby\nReact::ServerRendering::SprocketsRenderer.asset_container_class = React::ServerRendering::SprocketsRenderer::EnvironmentContainer\n. feature detection sounds good to me!\n. Awesome, thanks so much for the patch on this bug!\n. > line: 13994, col: 4\nThis suggests to me that assets have been concatenated but some of the files weren't \"compiled\" by Babel. \nYou might be able to find exactly where the failure is by searching app/assets/javascripts for the regexp ^...} (finding a } in the fourth column of a line). \nThis happened to me last week because I had \"ES6\" in a file that didn't have a .jsx extension. React-Rails only compiles files with .jsx extension, so if that's the case, make the filename end in .jsx.js\n. Sorry I didn't respond sooner -- is this a matter of preference, or is there a gain for end users or gem maintainers from this change?. This code is working well and I don't see a need for cosmetic changes. However, thanks for your offer!. Hehe, I have also written pages like that but ... I didn't test them, so, kudos to you!\nSadly, we don't currently have a feature like that :( \nHowever, you might be able to add it! You can see the mountComponents function here: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs_mount.js#L47\nFor a general use case, you could accept a callback as the second param, and pass it along to ReactDOM.render.\nAnother approach would be to accept ReactRailsUJS.afterMount = function() { ... }, then pass that callback to ReactDOM.render. It seems a little less flexible than accepting a callback param, but if you want to hook into the built-in renders, that would be the best (only?) way to do it. Maybe the approaches could even be combined.\nThirdly, you could fork the gem and insert application-specific triggers as needed :) \nDo any of those sound feasible? If you end up trying the general cases, please consider opening a PR, I think this would be a great feature!\n. I hope you found something that worked for you!. Hi, I'm able to use jQuery UJS and Rails together. Here's an example from my app:\n``` jsx\n<a\n  className=\"btn_primary_cta destroy\"\n  data-remote=\"true\"\n  data-method=\"delete\"\n  data-confirm=\"Are you sure you want to delete this resource request?\"\n  href={\"/event_resource_requests/\" + eventResourceRequestId}\n\nremove request\n\n```\n\nDoes adding data-remote work for you? Could you share your JSX?\n. > Do I have to use both jquery_ujs and react_ujs ?\nYes! I bet that's it, good question :)\n. Although jquery_ujs and react_ujs both end in _ujs, they do different (unrelated) things. \n- jquery_ujs powers a bunch of Rails's JavaScript features like remote forms, format: :js responses, and method: :delete links. \n- react_ujs mounts and unmounts React components during the page lifecycle. \n(By the way, the reason they both end in _ujs is because they're both trying to be unobtrusive javascript.)\n\nuse react-rails alone (without jquery-rails) \n\nYes, you can use react-rails without jquery-rails, but you can't use features provided by jquery_ujs! If you want jQuery features, you need jQuery :) \n\nis it designed to be so?\n\nYes, this gem is only concerned with React components. jquery_ujs includes Ajax helpers and global event handlers, but React doesn't have anything to do with that!\nDo those answers help? \n. I'm guessing it's a general problem, but I haven't noticed it because I only use the default ones! \nMaybe that initialization should be moved to the after_initialize block at the bottom of the file? \n(By the way, for a workaround, could you assign the implementation directly? \nruby\n React::Rails::ViewHelper.helper_implementation_class = CustomViewHelper\n?)\n. Yes, that would be great! I didn't know about :load_config_initializers, good to know!\n. yes, thanks!\n. I can't think of a way to test this, but can you confirm that it solves the problem you described in #550  ?\n. \ud83d\ude4c You rock, thanks for the patch!!\n. merged in #551\n. In general, this happens when a React component is left in JS memory even after it has been removed from the DOM. \nFor example, in our app, we have a component that, when you click it, it starts an AJAX request. When the AJAX request succeeds, it calls setState to update itself. BUT, if you change pages while the AJAX request is outstanding, we get that same error. This is because the component was unmounted (on page change) but the success handler was still executed, which called setState on an unmounted component. \nThere are two ways to handle it: \n- Retain a reference to the AJAX request and abort it on componentWillUnmount \n- Use the (deprecated) this.isMounted() check in the success handler\nDoes that sound like a possibility in your case? Is there some way that a component instance could be held around even after a page changes?\n. does it tell you what component is triggering that warning? can you share the code for that component? \n. Other than the $.ajax, it all seems right! There's nothing in componentWillMount or other lifecycle methods? (Sometimes I attach a listener there but forget to remove it on unmount).\nOtherwise, you could try \nsuccess: (data) => \n  if !@isMounted() \n    return\nTo make extra-sure that it's not the AJAX handler!\n. Oh, then I guess it would have to be \n```\ncomponentWillUnmount: \n  @_submitCallback?.abort() \nsubmit:\n  # ... \n  @_submitCallback?.abort() \n  @_submitCallback = $.ajax \n    # ...\n```\n. Thanks for sharing the screenshot, that's very helpful! \nUse className for classes in JSX, not class:\n\nhttps://facebook.github.io/react/docs/jsx-in-depth.html \nIt should look like this:\n\nDoes that work for you?\n. Thanks for reporting this and digging in to see what it was! Just curious, does this happen all the time, or only when there are one or more messages for console.log? \nI don't use server rendering, so I haven't noticed it!\nI wonder what's the best way to handle this ... On the one hand, we could bring your patch into the gem and re-shuffle the rendered HTML after it's been turned into a string. On the other hand, it seems like we could have a simpler, more programmatic approach since we have access to the gem internals. So what other way could we organize this ... hmm...\n. The other options I could think of, none of which were very good: \n- Introduce multiple return, where the return is rendered_component, rendered_logging \n- Instead of logging inline, store the responses and yield them at the bottom of the page, something like content_for(:react_rails_console) \n- Pass a logger into server rendering, where server rendering can send its log messages. Then after server rendering returns, get the messages out and render them \nruby\n  replay_logger = ReplayLogger.new \n  rendered_component = server_render(component, props, logger: replay_logger) \n  container_div = content_tag(:div, rendered_component) \n  if replay_logger.any?\n    (container_div + replay_logger.to_script_tag).html_safe\n  else \n     container_div \n  end\n. You can put this code in an initializer, for example config/initializers/react_rails_workaround.rb\n``` ruby\nconsole_replay puts a ",
    "ygt-mikekchar": "Yes, please put a pointer in the README.  We spent ages on this too (and didn't think to look at a closed issue).\nThank you for figuring this out!  You saved out lives ;-)\n. ",
    "loretoparisi": "I have tried to inject the shim script through page.injectJS, but it didn't work, I guess since page.injectJS does not support closures:\n``` Javascript\npage.open(url, function(status) {\n          if (status === \"success\") {\n        if (page.injectJs('es5-shim.js')) {\n          page.render(pageCaptureFileName, {\n            format: Settings.pageCaptureFileType,\n            quality: Settings.pageCaptureQuality\n          })\n        }\n\n      }\n    });\n\n```\nhttp://phantomjs.org/api/webpage/method/inject-js.html\n. @abreckner that is a great news, but I was using PhantomJS that version already:\nshell\nmacbookproloreto:async-example admin$ phantomjs -v\n2.1.1\n. ",
    "abreckner": "Just wanted to mention that with PhantomJS 2 out (which is ES5 compliant) you no longer need the Es5 shim to get Poltergeist working...\n. ",
    "yazaddaruvala": "Sorry.. classic example of sleep deprived issue creation.\n. ",
    "quark-zju": "Thanks for your comments! I have addressed them. Just curious, is there a planned release after merging #15, #12 and this one?\n. Thanks for your comments! The above implementation is just a draft. About your concerns:\n- Good point and removing jQuery is easy.\n- Makes sence but there is a little problem: where to put the tag option? params and html_options do not sound correct place. 3 hashes feel too many. Probably introduce an options and move html_options to options[:html]? \n- Sadly it doesn't work as expected. A quick debug indicates turbolinks may have a bug handling inline scripts. If that is the case, I will try to fix turbolinks first.\n- Do you mean server rendering stuff? I think so. This PR won't contain (complex) server-rendering stuff. However, I'd like to make it possible to custom static children like content_tag below, for being able to write crawler-freindly code.\nerb\n<%= content_tag :div, class: \"strong\" do -%>\n  Hello world!\n<% end -%>\n. I have attached some code :) Have a look and if no big problem, I am going to write some test and update README.\nNotes:\n- render_* sounds like a controller method, and is long. now it is shorter: react_component, in ActionView.\n- To make things simple, and consider there may be other non-HTML options like whether to use server rendering, I combined the tag option and previously html_options to one options. It seems there is no tag attribute. If somebody do need use it, use string as key: options['tags'].\n- Since DOMContentLoaded is used, IE <9 is not supported. I think it's okay and will note this in README later to tell the developer to polyfill it if IE8 support is needed.\n- Turbolinks stuff now works. It didn't work because there was no removeEventListener, and an uncaught exception because getElementById returns null. Somehow the exception didn't show up in my browser console so I didn't notice it.\n- About the children stuff, I would argue it's not needed, or it is too complex/tricky and doesn't worth to implement XHP-style stuff in Ruby. In practise, people can always abstract XHP-style fragments to new react classes, or use plain jsx without this helper.\n. Umm, travis status is still unavailable. I doubt whether it runs (I guess it probably need something like apt-get libqt-webkit-dev). I am going to sleep now. If everything is okay I am going to squeeze the commits.\n. It doesn't matter. I mean I am not hurry, at all. Take your time. Enjoy the weekend and don't be bothered with work stuff :)\n. I found capybara-webkit is not travis-friendly and switched to poltergeist, which uses external phantomjs. After some trial and error it's working now :smiley:  There may be some wording issues because English is not my native language. Except that, I think it's merge-ready.\n. I'd like to write my thoughts and plans here. Recently I am busy with my graduation and this situation will probably continue for another several weeks. I will finish this PR after that.\nThe implementation and tests are complete. However, the inline script approach doesn't feel good. Something like using data attributes and initialize them dynamically like jquery-ujs feels better. \nCons:\n- Won't work out-of-box. Something like = require react-ujs is required in application.js.\nPros:\n- Generated HTML is more elegant.\n- It's simple so users don't have to use the helper method. They can write plain HTML, for some (e.g. performance) reason.\n- More flexible, users can replace / hook stock react-ujs, to support ancient browsers, for example.\n- Play well with Content Security Policy.\n- Cache-friendly. No more random ids generated server-side.\nComments? ~~And if this is going to happen, do you think it should belong to another gem like react-ujs (I personally object to it)?~~\nEDIT: Added 2 items in Pros. jquery-rails contains both jquery and jquery-ujs. \n. Umm... I am a little confused. Do you mean \"react-ujs.js\" by \"1 less dependency\"? I would argue it is an existing practise in rails' jquery and is an optional dependency.\nThe react and react-ujs pattern is inspired by jquery and jquery-ujs, where the first one is the unmodified version of upstream library and the second one is rails-specific \"unobtrusive javascript\" thing allowing users to use the library without writing js in view templates (for example, link_to ..., :alert => 'Are you sure?' expands to something like <a ... data-confirm='Are you sure?' />, the real alert box logic is implemented in a jquery-ujs. You can confirm it by inspecting the delete comment button on this github page). Developers decide which one (or both) to include in their application.js. Some developers don't like the ujs stuff, they can simply remove = require ...-ujs line.\nTo ease developers' life, follow the common practise of other rails js/css gem, a rake task react:install can be provided. It adds 2 lines to application.js.\n. I think it's better to provide an option for filenames, like config.assets.precompile. The user can set it to %w(components.js), %w(component_a.js component_b.js) or Dir[Rails.root.join('app/assets/javascripts/react/*')].map{|f| File.basename(f)}, etc. Use %w(application.js) as the default value so everything works out of box.\nJS runtime like therubyracer doesn't have network support. But it's easy to workaround, get the data in Ruby code and pass it as a prop named like initialData.\nAnyway, I'd like to implement the ujs stuff first because both renderings can benifit.\n. About configurable filenames: \n- //= require_tree in both application.js (Rails default) and components.js will cause duplicated code. It's not friendly for new-comers. \n- Not all components need to be rendered server-side. Some components like ADs, or something meaningless to the crawler like fb messenger / google hangouts may not need to be rendered server-side. Therefore, the helper doesn't need all react components.\n- Just react components may not be enough. They may depend on other libraries or browser features. For example, using markdown to format text, using localStorage to sync across tabs. In this case, server side js context need to include the library and some dummy shim to make the code using browser feature run.\n- \"convention over configuration\" is a famous saying in Rails. However looking at Rails itself, it provides so many configurations. For example, the user can use a.js instead of application.js. Rails' default configuration is good enough to work out-of-box. But Rails won't stop you from deeply configuring it. Following this pattern, the filename should be configurable. Making it work out-of-box is hard. application.js solves 3rd dependencies problem but introduces browser features problem as you said. Maybe mocking document and window is a step towards a final solution.\n. @johnthethird If application.js doesn't make sense, I am okay with components.js as default or no default value. Anyway, if browser features are used, server rendering becomes difficult. This branch is already big enough so server rendering is probably in another branch.\n@zpao react_ujs is now complete and this branch is probably ready to be merged. Could you take a look?\n. Follow existing pattern of Rails, I think something like :prerender => true in options is better than another method.\nAnd here is a even more fun/crazy idea taking advantage of the existing method render:\nruby\nreact_component(:Foo) # render in client\nrender react_component(:Foo) # pre-render in server\nThis is tricky. But it is implementable by returning a fake Hash object with a special to_s and providing special partial_path, locals. However, it is probably confusing users so don't acturally do it.\n. I just realized that the building logic is in .gemspec file (was looking at Rakefile and thought the building logic lives outside the repository). PR is coming.\nAbout versioning, I also agree that react-rails doesn't need to comply with upstream react. jquery-rails does have a different version with jquery.\n. I'm sorry that I didn't notice that 0.9 doesn't ship with the ujs feature. So I'm patching against master.\n. Yes. I thought ujs was in 0.9, which is the second mistake I made here :(\nThis issue is talking about building the .gem file. react_ujs lives inside vendor and currently .gemspec doesn't include it (s.files). It need a small fix.\n. The title and description are updated to eliminate the confusion. I'm going to use github api to convert it into a PR.\n. I think so. It's a rename, fixing the issue I forgot to edit the .gemspec file.\njquery-rails puts its js files in vendor/assets/, while turbolinks uses lib/assets. It seems both locations are ok.\n. :+1: \nCould you add a test?\n``` diff\n--- a/test/view_helper_test.rb\n+++ b/test/view_helper_test.rb\n@@ -58,6 +58,10 @@ class ViewHelperTest < ActionDispatch::IntegrationTest\n     page.click_link('Bob')\n     assert page.has_content?('Hello Bob')\n\n\nTry going back.\n\npage.execute_script('history.back();')\nassert page.has_content?('Hello Alice')\n+\n     # Try Turbolinks javascript API.\n     page.execute_script('Turbolinks.visit(\"/pages/2\");')\n     assert page.has_content?('Hello Alice')\n```\n\nI just found phantomjs doesn't support Turbolinks (https://github.com/ariya/phantomjs/issues/11100) so the old code could also pass these tests... Hope phantomjs will support it one day or we could move to another test driver.\n. Turbolinks simply replaces entire body in all cases. Components outside body sounds strange. So I think it's okay. For DOM nodes created by script on the fly, they are not mounted by react_ujs. While jquery_ujs uses $.live so it can handle dynamically created nodes. However, monitoring DOM changes is expensive. It's probably fine to let the user manually call React.renderComponent on dynamically created nodes. \n. ",
    "johnthethird": "I have been playing around with your view helper and have one that implements server rendering via ExecJS, which is part of the Asset Pipeline in Rails so everyone should have it.  It pulls in a file called components.js from the asset pipeline, which should contain all of your React components and support code, and uses that to server-render the HTML, and then just pops a script tag in to mount the component client-side.  Any feedback on the approach is welcome.\nhttps://github.com/johnthethird/react-rails/blob/server-rendering/lib/react/rails/view_helper.rb\n. Thanks for the feedback.  The reason I wanted all the components in one JS is so that I could load it once into the JS VM and cache it, then whenever you need to render its just running the React.renderComponentToString function in the pre-loaded VM.  Obviously during development this is not ideal, so it should probably only cache in production. \nAs far as getting data, why not get it in Ruby on the server and just pass it in?  I suppose thats code duplication if you also want to do the same thing on the client.  One idea would be to wrap the external data in a Rails API, and for server rendering you grab it directly from Ruby, and on the client you hit the API.  Or, maybe you can run the HTTP GET from inside the JS VM in getInitialState or something.  Not sure how that would work in multi-threaded Rubies. Kind of a mind-bender!\n. Im not sure what the advantage is to having it configurable. The helper needs all React components loaded in order to work, so convention over configuration here might make sense. You can always make components.js a Sprockets file that just does //= require_tree ./components/ or whatever your specific needs are.  I don't think loading application.js is a good idea since there may be all kinds of stuff in there that may cause problems when loaded into a non-browser environment. By explicitly having a separate components.js file with React-specific code, it cuts down on the surface area for problems. \nI like @quark-zju unobtrusive idea, and took a crack at it here:\nhttps://github.com/johnthethird/react-rails/commit/6ea19d166851a13bda8e3e92381ea0ec57b9b593\nAny data- attributes you put on the node get passed in as props to the component.\n. Sprockets is smart enough not to duplicate code with multiple require_trees (at least in Rails4 which I just tested).  Making the filename configurable with a sensible default would be fine. I am still against pulling in application.js, but will try it out on a few of my apps to see what the issues may be.\n. This looks good to me. Nice work @quark-zju. \nWhen you pull this in I will toss over a PR for a server-rendering component which uses an object pool to allow multiple threads access to a pool of JS VMs with the React code preloaded. Seems to be working well in mri/jruby with puma/torquebox/trinidad (multi-threaded Rails app servers).  \nhttps://gist.github.com/johnthethird/8773084\n. OK, I rebased everything on top of master, and force-pushed (not sure if that was a faux pas). I implemented @quark-zju suggestion for :prerender => true instead of a separate view helper .  I also made it so it should work with 0.8 and 0.9 versions of the renderComponentToString API.\n. @jakubmal Yes, the view helper react_component takes a component name, and an args hash that will be passed in to the component as the initial props.  This works both for server-side rendering and the client-side rendering.  So something like\n<%= react_component \"TodoList\", {:todos => ['todo1', 'todo2', 'todo3']} %>\ngets turned into\n<div data-react-class=\"TodoList\" data-react-props=\"{&quot;todos&quot;:[&quot;todo1&quot;,&quot;todo2&quot;,&quot;todo3&quot;]}\">\n  ...\n</div>\nand then the react_ujs.js can unobtrusively turn that into a React component.\n. @zpao no problem, CLA has been signed. \n. @jakubmal OK, I rebased, added a commit to change to the sync version of renderComponentToString, ran the tests, and pushed. \n. @jakubmal I will review your comments and make any appropriate changes. Also, I was able to reproduce @bensmithett issue, so I will take a look at that as well.\n. I changed the way the initializer works, which should also fix issue #30 and #31as well. @bensmithett can you give it a try and see if it works for you now?\n. I force-pushed a new commit for this feature, re-based on the work I teased out to fix #31.  It would certainly look cleaner to just open a new PR, but I figured the conversation here was probably worth something. \n. @jakubmal OK, rebased and ready to merge into master.\n. Good points @lencioni, I am fine with this change. I think we will need to get a larger audience actually using this thing to really understand all the rough edges people will inevitably encounter. \n. I have set up a Runnable with a sample server rendered component, and it is working on react-rails master with Ruby 1.9.3-p194 and TheRubyRacer gem.   \nhttp://runnable.com/U87J_K82JzoNLOzT/react-rails-server-rendering-example-for-reactjs\n@KurtRMueller Im not sure this is your problem, but the CS file of yours needs to somehow attach AssignmentWindowProgressBar to the global object (unless you have turned off the protective function wrapper that CS usually uses). In the browser that is window and in V8 it is global. So in my example CS I have at the end of my component definition:\ncoffeescript\nwindow.FancyBox = FancyBox if window?\nglobal.FancyBox = FancyBox if global?\nWe need some conventions on how to best do this so everything works on client and server. Im sure nodejs has this figured out, how do they do it? \n. The problem is with this line  https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L51  which when unmounting the React component also deletes the root node, so when coming back there is nothing on the page to mount again. I'm not sure why its doing that but if I remove that line things work for me.\n. +1.  I would like to see a way to render with renderToStaticMarkup as well, would that be a totally different class like SprocketsStaticRenderer or an options flag options[:static_markup] = true?  I am leaning towards the option, as there are 2 ways to render on the server, and you should be able to switch between them. \n. @rmosolgo I wouldnt think the connection pool would matter much on MRI. (Also, V8 has its own GIL, similar to MRI).  But JRuby is a different story. The connection pool gem is battle hardened from its use in Sidekiq, works great on JRuby/JVM, and is used to mediate access to potentially long-running external resources/processes. So it was a perfect fit for mediating access to the JS engine, or so I thought. Ill try to come up with a benchmark that shows what happens with a truly multi-threaded ruby runtime.\n. Jruby has TheRubyRhino which is wicked fast and multithreaded, and lives in the same JVM.\n. Yea, V8 is a lot faster than Rhino, from a pure speed perspective. The new JS engine in Java 8 (Nashorn) approaches V8 in speed. \nFocusing on just the pool concept, I changed to benchmark script to show the advantages of a pool  (I had to normalize the renders so that each test is doing the same number of total renders taking into account the number of threads, to make it a fair test. Also, instead of Math.random do some more real life React things.) \nhttps://gist.github.com/johnthethird/19074284591b6091e367\nThe thing to note in the results, is that 10 threads against a size 10 pool, makes a huge difference, obviously, for JRuby and for even for MRI if it uses an out-of-process JS engine like Node. \nRe the MRI deadlock issue, it looks like not only does V8 have a GIL of its own but ExecJS also has locks around compile and eval \nhttps://github.com/sstephenson/execjs/blob/master/lib/execjs/ruby_racer_runtime.rb#L32  \nSo Im not sure why putting a lock around our render fixes the deadlock, but it sure does. \nFor MRI/RubyRacer, probably the right thing to do is have a pool size of 1. Having the pool there shouldnt really hurt performance, as the overhead of checking in/out of the pool is minimal. The question is whether to make this a hard-coded limit or just issue a warning if pool size > 1 when using RubyRacer.\n. For posterity, there is no difference between an ||= or an if as far as thread safety. If you want to insure a set of instructions is run uninterrupted you have to use a mutex of some kind. Period.  Also, when Rails is initializing, you dont need to worry about threading issues. Those only happen when multiple requests come in to (certain) servers (Puma, etc) which spawn threads to handle each request. By that time the app has already initialized. \n. ",
    "khelben": "Do you need prove of me signing the CLA? How would I do that?\n. ",
    "nikai3d": "Sure, no problem.\n. ",
    "matchu": "And I just signed the CLA :)\n. ",
    "adtaylor": "+1\n. ",
    "alexkuang": "I think it might be related to this issue:  https://github.com/facebook/react-rails/issues/11\nTry setting config.react.variant = :development in config/environments/development.rb (and the corresponding in production, etc) and see if that helps.\n. ",
    "steadicat": "I run into this issue when precompiling assets for production. Yes, I have config.react.variant = :production in my production.rb.\n. Oops, I missed the \"inside rails engine\" part. I'm using react-rails the normal way (react-rails in the the gemfile and line config.react.variant = :production in production.rb). Your branch did not fix it for me.\n. @zpao: Ruby 1.9.3, Rails 3.2.14.\n@jakubmal: I'm not using an engine.\n. I'm still having trouble with this, but I'm not using a Rails engine. I get couldn't find file 'react' when running rake assets:precompile. Should I file a separate issue?\n. Our team just upgraded to Rails 4 and this now works. I don\u2019t have much time to dig into this right now unfortunately. It sounds like I\u2019m the only person running into this, so you can just close this as a wontfix. Thanks for looking into this!\n. Here's the Gemfile.lock from before our Rails 4 port: https://gist.github.com/steadicat/958186cbb9abae280411 Hope it helps!\n. ",
    "kjf": "@jakubmal Sorry, totally forgot about this issue. I'll throw up an example app later today that should highlight the issue.\n. @jakubmal Apologies! Have been swamped.\nThis should highlight the issue: https://github.com/kjf/React-Rails-Engine\nIf you start your rails server and visit: http://localhost:3000/blorgh then you should see the exception Sprockets::FileNotFound thrown with the message \"couldn't find file 'react'\"\n. @jakubmal Gotcha, had tried loading dependencies so it was #11 was tripping me up. Adding initialiser should do the job. Thanks for your help on this!\n. @jakubmal I think everything is clear now. Close away and thanks again!\n. ",
    "5minpause": "Hi @jakubmal.\nSorry for opening this old ticket, but it's my problem exactly!  \nRegarding your answer:\n\nThen comes the very unfortunate #11, react will not be added to assets, unless config.react.variant is set. You will have to add an initializer, which will run before react_rails.setup_engine. I could slightly help you here, and create a fork for you, variant would come from Rails.env unless otherwise defined.\n\nI can't seem to get it to work with my engine setup. \nHere's what I did. Inside lib/my_engine/engine.rb\n```\nmodule MyEngine\n  class Engine < ::Rails::Engine\ninitializer(\"my_engine.react-rails\") do |app|\n  MyEngine::Engine.config.react.variant = :production\nend\n\nrequire 'react-rails'\n\nand more\n```\nWhen I load the Rails console and query:\nirb(main):003:0> MyEngine::Engine.config.react\n=> {:variant=>:production}\nBut loading it in application.js (app/assets/my_engine/application.js) doesn't work.\ncouldn't find file 'react'\nAny help is appreciated.\n. No @JonCrawford, I didn't. I only found a (bad) workaround. \n. ",
    "JonCrawford": "@5minpause Did you figure this out?\n. Same here. That did it. :thumbsup:\nOn Tue, Jul 28, 2015 at 11:17 AM Brett Jurgens notifications@github.com\nwrote:\n\nfor what it's worth, adding require react-rails to my engine.rb worked\nfor me\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/21#issuecomment-125701386.\n. \n",
    "brettjurgens": "for what it's worth, adding require react-rails to my engine.rb worked for me\n. @shenoudab \nput //= require vendor/react-intl in your application.js and it should add it to the asset pipeline\n. for what it's worth i did:\njavascript\nvar document = typeof document === 'undefined' ? '' : document;\nin code that i reference document in and it allowed me to prerender\n. i'm getting this as well with\nrails 4.2.6\nruby 2.2.3p173\nsprockets 3.5.2\nActionView::Template::Error (No compiled asset for react-server.js, was it precompiled?):\n    2: .card-login-container\n    3:   .card.card-login\n    4:     = react_component('LoginForm', { login_url: create_session_path }, { prerender: true })\n  app/views/sessions/new.html.haml:4:in `_app_views_sessions_new_html_haml___2128502748164763252_70237860093020'\n. @rmosolgo my bad it works, ignore me :smile: \n. ",
    "neohunter": "same problem here. solution is not merged into master?\n. config.assets.initialize_on_precompile = true \nis the default value.\n. ",
    "dansimpson": "Setting the following setting to true resolved it issue:\nruby\nconfig.assets.initialize_on_precompile = true\n. ",
    "jamieorc": "I ran into this. It would be useful to have a note about this in the installation notes.\n. ",
    "robertfall": "I just want to chime in and say I would love to see this added to react-rails. \nWe're very keen to start using this fork, but obviously sticking to the authoritative source is more supported in the long run. Is there something holding up the Pull Request being merged in that I can help with?\n. So once 1.0.0.pre is finished up there should be no problem merging this in? Unless of course changes in 1.0.0.pre necessitate changes in this PR.\nIs there anything we can help with for 1.0.0.pre?\n. ",
    "bensmithett": "I'm having issues running a pretty simple sample app in production mode, getting this output. Don't know enough to know if I've done something stupid or if this is a real issue, either way thought I'd flag it here in case the README needs tweaking to avoid this.\n. @johnthethird yep all good now :+1:\n. :smile: :confetti_ball: what @keithpitt said, thanks guys!\n. ",
    "petehunt": "pingping\n. ",
    "keithpitt": "This is so very awesome. Thank you guys for your awesome open source work!\nInternet high fives!\n. This should also watch for files that match: \"*.js.jsx.coffee\"\n. ",
    "nelix": "<3 been waiting for this one\n. ",
    "knwang": "very excited about this!\n. ",
    "jakecraige": "I'm not well versed enough to know the differences between 0.x and 1.x so someone else would be more qualified to add them in. Sorry for the delay\n. I am using server rendering and MRI. \nWe actually have an interesting set up where we are calling react_component around 5+ times per request. I'm unsure if it could be related to that and the pooling change.\nFor a sanity check I configured it with:\nruby\n    config.react.server_renderer_pool_size = 10\n    config.react.jsx_transformer_class = React::JSX::JSXTransformer\nTo try and mimic the previous version and the same thing happens.\nI disabled pre-rendering and it loads fine, so it's definitely related to that. We were sometimes experiencing timeouts before the upgrade to 1.1. \nSince this is tightly integrated to a private application I'm not sure if I can pull out a failing test. But here's a stack trace of one of them that timed out(1.0) https://app.honeybadger.io/fault/44154/42efc9f4960c0e6686bd67844466a881\nThat prerender_component method looks like:\nruby\n  def prerender_component(component_name, props)\n    react_component(component_name, deep_camelize_keys(props), { prerender: false })\n  end\nAny thoughts?\n. Unfortunately I'm unable to look into the mini profiler results since it times out prior to the page rendering.\nHappy news though, adding therubyracer made it stop timing out. :) I had seen that issue but didn't actually add it to my Gemfile to try it out...\nI'll close for now since that seemed to resolve it. I'll reopen if it comes up again.\nThanks for the quick responses and help @rmosolgo !\n. ",
    "themgt": "hehe. yep all set\n. ",
    "KurtRMueller": "Awesome. Thanks for your help. I have used coffeescript before but I still require heavy use of translators like js2coffee. I really need to sit down and take some time to learn how coffeescript compiles to js.\nThanks again for the help.\n. Not, not at all, but before I do, here's a comment from Paul O'Shannessy, from the google groups forum. The link to that post is here:\n```\nOn Saturday, March 1, 2014 12:21:36 PM UTC-5, Paul O\u2019Shannessy wrote:\nCould you file an issue on github? The helper is pretty naive and expects your\n\ncomponents to be available as globals. Coffeescript wraps each file in a closure \nbefore they get joined by sprockets which violates the global assumption. This \ncame up during development but we decided something for some people would \nbe better than nothing for anybody.\n```\n. I've been using @jsdf's sprockets-coffee-react gem with great success. Perhaps adding a link to the readme might be a good compromise?\n. ",
    "uriklar": "Hi @jakubmal, I'm getting the same error (sometimes, not always...) and i'm not using coffeescript. My components are defined as globals. Any idea what the problem is?\nThanks\n. ",
    "ghost": "I am also facing similar issue. I have two components in two different files. The root node component is picked but the second comment doesn't work. It says component didn't define! \n. Its deprecated\n. Fixed. I execute command rails generate react:install and place components in /assets/javascripts/componets. Hi, this was the problem.. I have no sprockets in application.js. The other strange things is if I remove:\n<%= react_component('Post', {}, {prerender: true}) %>\n- server-side element, client-side rendered element works fine. This is from new created app.\nIf I remove prerender option, both components (server-side and client-side) works fine.. Sry, yes I am using default assets pipeline, not Webpacker. I check your example app and there is error, too. Just create another component, but use it without gem helper and use both components one with gem helper (with option prerender) and another without gem helper. The problem coming from prerender option. This is the view:\n<div id=\"react\"></div>\n<%= react_component 'Post', { title: 'A working react component', body: 'Simple but effective' }, prerender: true %>\nand this is the component:\nclass Main extends React.Component {\n  render() {\n    return <h 1>Hello</h 1>\n  }\n}\nwindow.onload = function(){\n  ReactDOM.render(<Main/>,document.getElementById('react'));    \n}\nWithout load event it is another error ReactDOM is not defined. This one is with multiple copies error https://github.com/vladi160/example and requires database and Devise, sry :(. This one https://github.com/vladi160/example02  is with error TypeError: Cannot read property 'createElement' of undefined. May be I am doing something wrong, I am not sure.. This is your example https://github.com/vladi160/example03, without prerender option works fine. ",
    "jack128": "Have similar issue.\ndeviceTable.jsx\nwindow.DeviceTable = window.DeviceTable || React.createClass({\n...\n});\nmy.html\n<script type=\"application/javascript\" src='https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js'></script>\n <script type=\"application/javascript\" src='https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js'></script>\n...\n<script type=\"text/babel\" src='/KTS/resources/js/deviceTable.jsx'></script>\n<div id=\"deviceTable\" data-url='/KTS/springmvc/devices/api'></div>\n<script>\n$(function() {\n//setTimeout(function() {\nReact.render(React.createElement(DeviceTable, {url: $(\"#deviceTable\").attr('data-url')}), $(\"#deviceTable\")[0]);\n//}, 1000);\n});\n</script>\nNote, if I uncomment setTimeout - all works. Its like what jsx file is executing with delay..\n. ",
    "acrispino": "I'm using ruby-2.1.1 with rails-3.2.17 and this script reproduces the problem for me:\n```\n!/bin/sh\nrails 3.2.17 new rtest\ncd rtest\necho 'gem \"react-rails\", \"~> 0.9.0.0\"' >> Gemfile\nbundle install\necho \"//= require react\" >> app/assets/javascripts/application.js\nrake assets:precompile --trace\n```\nadding\nconfig.assets.initialize_on_precompile = true\ndoesn't seem to make a difference\n. ",
    "stockandawe": "@jakubmal,  we are running in to the exact same issue that @steadicat reported. \nWe are using Rails 3.2.13 and ruby 1.9.3p194. \nFull output of  rake assets:precompile \n``\n$ RAILS_ENV=production rake assets:precompile --trace\nWARNING: Nokogiri was built against LibXML version 2.9.1, but has dynamically loaded 2.9.0\n** Invoke assets:precompile (first_time)\n** Execute assets:precompile\n/Users/rutul/.rvm/rubies/ruby-1.9.3-p194/bin/ruby /Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/rake assets:precompile:all RAILS_ENV=production RAILS_GROUPS=assets --trace\nWARNING: Nokogiri was built against LibXML version 2.9.1, but has dynamically loaded 2.9.0\n** Invoke assets:precompile:all (first_time)\n** Execute assets:precompile:all\n** Invoke assets:precompile:primary (first_time)\n** Invoke assets:environment (first_time)\n** Execute assets:environment\n** Invoke tmp:cache:clear (first_time)\n** Execute tmp:cache:clear\n** Execute assets:precompile:primary\nrake aborted!\ncouldn't find file 'react'\n  (in /Users/rutul/BrightFunds/brightfunds/app/assets/javascripts/application.js:1)\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/context.rb:102:inresolve'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/context.rb:142:in require_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/directive_processor.rb:215:inprocess_require_directive'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/directive_processor.rb:165:in block in process_directives'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/directive_processor.rb:163:ineach'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/directive_processor.rb:163:in process_directives'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/directive_processor.rb:97:inevaluate'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/tilt-1.3.7/lib/tilt/template.rb:77:in render'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/context.rb:193:inblock in evaluate'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/context.rb:190:in each'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/context.rb:190:inevaluate'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/processed_asset.rb:12:in initialize'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:249:innew'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:249:in block in build_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:270:incircular_call_protection'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:248:in build_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/index.rb:93:inblock in build_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/caching.rb:19:in cache_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/index.rb:92:inbuild_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:169:in find_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/index.rb:60:infind_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/bundled_asset.rb:16:in initialize'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:252:innew'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:252:in build_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/index.rb:93:inblock in build_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/caching.rb:19:in cache_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/index.rb:92:inbuild_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:169:in find_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/index.rb:60:infind_asset'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/static_compiler.rb:19:in block in compile'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:219:inblock in each_logical_path'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:206:in block (2 levels) in each_file'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:196:ineach'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:196:in each_entry'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:204:inblock in each_file'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:203:in each'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:203:ineach_file'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/sprockets-2.2.2/lib/sprockets/base.rb:217:in each_logical_path'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/static_compiler.rb:18:incompile'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/assets.rake:56:in internal_precompile'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/assets.rake:70:inblock (3 levels) in '\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:246:in call'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:246:inblock in execute'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:241:in each'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:241:inexecute'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:184:in block in invoke_with_call_chain'\n/Users/rutul/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211:inmon_synchronize'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/assets.rake:60:in block (3 levels) in <top (required)>'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/Users/rutul/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211:in mon_synchronize'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:177:ininvoke_with_call_chain'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:170:in invoke'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:143:ininvoke_task'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:101:in block (2 levels) in top_level'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:101:ineach'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:101:in block in top_level'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:110:inrun_with_threads'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:95:in top_level'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:73:inblock in run'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:160:in standard_exception_handling'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:70:inrun'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/bin/rake:33:in <top (required)>'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/rake:19:inload'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/rake:19:in <main>'\nTasks: TOP => assets:precompile:primary\nrake aborted!\nCommand failed with status (1): [/Users/rutul/.rvm/rubies/ruby-1.9.3-p194/b...]\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/file_utils.rb:53:inblock in create_shell_runner'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/file_utils.rb:45:in call'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/file_utils.rb:45:insh'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/file_utils_ext.rb:37:in sh'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/file_utils.rb:80:inruby'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/file_utils_ext.rb:37:in ruby'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/assets.rake:12:inruby_rake_task'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/assets.rake:21:in invoke_or_reboot_rake_task'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/actionpack-3.2.13/lib/sprockets/assets.rake:29:inblock (2 levels) in '\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:246:in call'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:246:inblock in execute'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:241:in each'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:241:inexecute'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:184:in block in invoke_with_call_chain'\n/Users/rutul/.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/monitor.rb:211:inmon_synchronize'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/gems/rake-10.0.4/bin/rake:33:in'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/rake:19:in load'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/rake:19:in'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/ruby_noexec_wrapper:14:in eval'\n/Users/rutul/.rvm/gems/ruby-1.9.3-p194@brightfundsv2/bin/ruby_noexec_wrapper:14:in'\nTasks: TOP => assets:precompile\n``\n. @jakubmal, I haveconfig.react.variant = :productionin config/environments/production.rb andconfig.react.variant = :development` in config/environments/development.rb\n. ",
    "sickill": "I have the exact same issue. I'm using 0.9 and I have specified variant in both development.rb and production.rb (https://gitorious.org/gitorious/mainline/source/596c64564bfb4cb13ab5cdfccd4c585e3de58732:config/environments/production.rb#L65). Rails 3.2.16.\n. Fixes #23 and #30.\n. Update: I have noticed that with this change assets precompilation works fine but you can't start server nor console (in production env). Let's hold with merging this.\n. With both :group => :all and :group => :assets it gives me the following error when gem react-rails is only in the :assets group in Gemfile:\ngitorious/mainline (43ba6ac*) % RAILS_ENV=production bundle exec rails c\n/home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/railtie/configuration.rb:85:in `method_missing': undefined method `react' for #<Rails::Application::Configuration:0x0000000393f5c8> (NoMethodError)\n        from /home/kill/code/gitorious/mainline/config/environments/production.rb:65:in `block in <top (required)>'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/railtie/configurable.rb:24:in `class_eval'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/railtie/configurable.rb:24:in `configure'\n        from /home/kill/code/gitorious/mainline/config/environments/production.rb:1:in `<top (required)>'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:251:in `require'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:251:in `block in require'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:251:in `require'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/engine.rb:576:in `block in <class:Engine>'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/initializable.rb:30:in `instance_exec'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/initializable.rb:30:in `run'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/initializable.rb:55:in `block in run_initializers'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/initializable.rb:54:in `each'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/initializable.rb:54:in `run_initializers'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/application.rb:136:in `initialize!'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/railtie/configurable.rb:30:in `method_missing'\n        from /home/kill/code/gitorious/mainline/config/environment.rb:5:in `<top (required)>'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:251:in `require'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:251:in `block in require'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:236:in `load_dependency'\n        from /home/kill/.gem/ruby/1.9.3/gems/activesupport-3.2.17/lib/active_support/dependencies.rb:251:in `require'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/application.rb:103:in `require_environment!'\n        from /home/kill/.gem/ruby/1.9.3/gems/railties-3.2.17/lib/rails/commands.rb:40:in `<top (required)>'\n        from script/rails:6:in `require'\n        from script/rails:6:in `<main>'\nWhen I move gem react-rails to default group it works fine. I believe putting this gem in a default group shouldn't be necessary (sass-rails works fine when put into :assets only).\nThis is all on Rails 3.2.17 app (Gitorious).\n. ",
    "Migoo": "Hi,\nI'm having a similar with file I want to be precompiled. I put my button.js.jsx in assets/javascripts/components/common/button.js.jsx\nand in our bundle file I require it like that:\n//= require components/common/button.js.jsx\nIn my development.rb I have:\n  config.react.variant = :development\nconfig.react.addons = true\nWe are using Rails 4.2.5.2 and react-rails 1.6.2 with ruby 2.3.0p0\nWhen I reload the page I got the following error:\ncouldn't find file 'components/common/button.js.jsx' with type 'application/javascript'\nAny help is welcoming, actually we are processing the file with gulp and it will be a great improvement if we can use the assets pipelines for it.\nThanks a lot for helping.\n. ",
    "aisrael": "I know this issue is closed but am having a similar issue as @Migoo \n. ",
    "juno": "Same issue here.\nI investigated that this issue introduced by changes in 8b110afef50fb41012520de32b7a083b6190d76c.\n. ",
    "nLight": "Exactly the same issue.\n@jakubmal should we roll back these changes? config.after_initialize won't work due to sprockets architecture.\n'initialiser' block receives Sprockets::Environment instance as app.assets, that allows to expire_index!\nBut 'config.after_initialize' receives Sprokets::Index instance, that throws an exception in expire_index! method. \n. ",
    "thmzlt": "Same issue here. Reverting 8b110af fixes it.\n. What's the relationship between this (project) and react's version scheme?\n. ",
    "bnauta": "Signed!\n. ",
    "joahua": "On a possibly-related note I just chased my tail for a while trying to bundle install (from Rubygems) version 1.0.0 of this gem as per current readme\u2026\nTotally my bad (took too long to check rubygems.org directly!), but odds are others might encounter the same.\n. ",
    "vipulnsward": "@johnthethird this seems to be causing https://github.com/reactjs/react-rails/issues/148 sporadically.\nCan you point me where you  picked up after => \"sprockets.environment\" config? \nI am not able to track it down, to solve this.\n. @zpao updated\n. I think this is pretty useful, as more people are using complete view contents to be served from a React Component, although this deviates from semantics of render and hides render call under magical render_react_component. A good alternative would be to just support:\nruby\nrender inline: react_component('TodoList'), layout: 'my_layout'\n. @golmansax can you share  what error you are seeing? \nEven rails makes use of this internally, not sure why this should be specially handled here.\n. @zpao can you re-run travis build. The failures are un-related.\n. @rmosolgo seeing this now. See https://github.com/reactjs/react-rails/pull/137 for explanation.\n. cc @zpao \n. @rmosolgo I investigated this failure, and looks like fixing  'coffee-script-source' version takes care of this issue.\nruby\ns.add_dependency 'coffee-script-source', '1.8.0'\nNeed to check why this behaviour.\n. Fixed :+1: \nWe could get rid of warnings too, since some of the versions we are testing are unmaintained.\n. Just updated after 1.9.1, and this works without any issues\nshell\n\u279c  iphq git:(master) \u2717 rails g react:install\n       exist  app/assets/javascripts/components\n   identical  app/assets/javascripts/components/.gitkeep\n      insert  app/assets/javascripts/application.js\n      insert  app/assets/javascripts/application.js\n      insert  app/assets/javascripts/application.js\n   identical  app/assets/javascripts/components.js\n@abitdodgy does the fix work for you?\n. I think this can be closed?\n. @JosephShering If you have a reference for this handler defined you could access it from properties. Say you have a handlers property that stores these function references. You could use \njavascript\nhandlers[this.props.selectHandler]\nand pass selectHandler from react_component.  Any issues with achieving that?\n. :clap: \n. Oh, right that will pickup 1.9, we can define hard dependency on 1.9.1 for now. >= 1.9.1\n. Its hard to track down the issue with https://travis-ci.org/reactjs/react-rails/jobs/51537751 , since its not reproducible. It passes for me for ruby 1.9.3\n. This can be configured on rails config itself. Having two separate engines would cause confusion and unusual problems. \nWe are doing custom dump/encode, which is wrong way for handling this, since rails encoder uses as_json with new design, and there may be incompatibilities doing direct calls to dump/encode wrt old/new engine. \nAlso, doesn't Oj/oj_mimic_json already take care of this, if bundled in rails Gemfile?\n. I think we can go ahead with trying https://github.com/reactjs/react-rails/pull/187\n. @roygold for now you can get away by defining config if any on application.rb\n. btw @rmosolgo , the initializer is guaranteed to be run form rails, irrespective of not finding the after \"sprockets\" initializer hook.\n@roygold can you create a sample vanilla app, as you said, which could demonstrate this issue.\n. LGTM\n. @bikegriffith added more comments. Looking forward to this. :smile:\n. LGTM . @bikegriffith can you squash the commits? Its good to track this as a single change to refer in future.\n. Ah, I am afraid an extra commit got in. But that should be ok, since https://github.com/bikegriffith/react-rails/commit/585963f81181891bfb2f64c44e1ad103a67a097e is a clean commit.\nSo :+1: \n. @jbhatab where do you use it? If you are using from within react, you can simply pass from react_component props. Else pass it down as data-attribute from some element.\n. Cool. I think we can close this issue in that case.\n. I think we should make this an opt-in behavior. Add a react config and based on it, allow inline vs script props. \nAlso now we need to call react_component as well as render_react_props. \nYou need to fix test to handle it.\n. @orlando I am curious, this order of require cause any other issues?\nUsually you would require ujs first.\n. @orlando yeah, I get the use case, wast curious about the order in which you required.\nRequiring react_ujs before other requires wouldn't cause this issue.\n. I do what @jongbeau mentioned. Setting a url from style is easier and cleaner.\nAnother way is passing around the values from data attributes, or generated and passed from props.\nIn later case, helpers are freely available when generating props, so it shouldn't be an issue.\n. @andygeers tests are failing, could you take a look?\nAlso we support rubyracer, etc. Would this be affected by this?\n. :100: \n. Many gems rely on doing tag releases on github- helps in this case, to not release the gem, and also to dissect for issues. \nWe already have stable branches, we should adopt doing tag-release. \n. :rocket: :rocket: :rocket: :rocket: :rocket: :rocket: :rocket: \n. These will go away with https://github.com/reactjs/react-rails/pull/295\n. I can give it a try\nOn Wednesday, June 10, 2015, Robert Mosolgo notifications@github.com\nwrote:\n\nSounds good, it should be a pretty straight-forward swap.\n- Implement a BabelTransformer which implements #initialize(options)\n  and #transform(code) (just like the existing Transformer)\n- Test BabelTransformer\n- Assign it to React::JSX.transformer =\n- Document the new jsx_transform_options\n- If we make it the default, make some warnings for people using the\n  old options.\nAny takers out there?? :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/292#issuecomment-110816956\n.\n\n\nVipul A.M.\n+91-8149-204995\n. Couple of notes about the default transformer options:\n- I have referred https://github.com/facebook/react/blob/master/bin/jsx-internal to set these options\n- plugins: [constants] is not part of the options right now since we don't have it in the sources, should this be a part in future?\n. I have been using this alongside react-rails in our application without any issues, to support es6.\nRight now its on track to be merged in sprockets-rails. \nI think we can start looking at handling it, after it lands in sprockets-rails master.\n. Ok, here's the current status- \n- One test fails related to coffeescript due to http://babeljs.io/docs/faq/#why-is-this-being-remapped-to-undefined- . \n  Babel currently has strict mode enabled by default, hence the breaking of tests. It can be disabled(not recommended), or we would need to find workaround only for coffeescript files.\n- plugins: [constants] - this option is defined here - https://github.com/facebook/react/blob/master/bin/jsx-internal#L41 and is a plugin loaded from https://github.com/facebook/react/blob/master/vendor/constants.js and is not included here.  This is a question for @zpao I guess, about whether its needed here, I don't think it applies here.\n- Test taken care of \n. Custom plugins are as simple as just passing to plugin transform_options. \nI think instead of shipping with JSXTransformer as default, we can ship with Babel as default(to be in sync with React) with disabled strict mode to support both coffeescript + JSX and make it explicit that next version default transformer will break CS. Thoughts?\nPS: Even if we ship with breaking changes for CS later, Babel can still be used with passing custom transform options - { blacklist: ['spec.functionName', 'validation.react', 'strict'] }\n. I have pushed an updated version with above changes. I think it makes sense to disable strict by default, to be backwards compatible, since thats how JSXTransformer is handling it.\n. Travis looks happy now :-)\n. @justin808 any conflicts with how its currently available?\nI think both of these parts are relatively pretty small to extract into two gems.\n. Hi @rmosolgo, can you take a look at this when you time. This causes issues when used with newest version of sprockets.\n. @rmosolgo done.\n. \ud83d\ude48 Sprockets is unstable atm with all the refactoring. I will work on\nfixing this against master and keep it backwards compatible.\nOn Wednesday, September 2, 2015, rovr notifications@github.com wrote:\n\n@rmosolgo https://github.com/rmosolgo, @vipulnsward\nhttps://github.com/vipulnsward Just a heads up, I've been trying to\nmake it work with Rails 5 and atm it immediately fails on .register_engine\nline.\nLooks like sprockets removed engines completely\nhttps://github.com/rails/sprockets/commit/37a1e24b0dafe0605ed0fc05e9a8c640caa21bb4\n.\nSo with sprockets 4.0 the initializer should probably look something\nlike:\nsprockets_env.register_mime_type 'text/jsx', extensions: ['.jsx', '.js.jsx']\nsprockets_env.register_transformer 'text/jsx', 'application/javascript', React::JSX::Template\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/322#issuecomment-137001720.\n\n\nVipul A.M.\n+91-8149-204995\n. Hah, I forgot. \n. Good point. I think we should enabled this by default, if babel-transpiler doesn't. \nThat way we can get away without using sprockets-es6 as well.\nSo support .jsx and .es6 by default.\n. When you pass using () => to React.createClass its context won't be bound to the React Component, but the Object you pass it in. You will need to use function() in this case.\n. @dyatlov this is fixed on master. Can you give it a try?\n. @rmosolgo If someone tries to run generator or using the gem on previous versions without the sprockets fix, it errors right now.\n. I was playing around to use redux - https://github.com/vipulnsward/react-rails/commit/e240b6486c866296e6f91275256bf0aa60ca2f0f\nI think, a new helper can be introduced if needed by someone, without affecting existing helper. \nMore tricky is the ujs handling.\n. How are the ones listed on https://facebook.github.io/react/downloads.html generated?\nWe can just reuses the browser bundles from there?\n. I think we can ship with react-rails.js and that should henceforth include whatever is needed to get react running. \n```\n// react-rails.js\n//= require react\n//= require react-dom\n```\nAnd in Application - \n//= require react-rails\n. Doesn't this have issues with sprockets not being available?\n. :-) Let me look at that.\n. @rmosolgo All's good now.\n. \ud83d\ude80\n. Thanks @rmosolgo for taking it upto here! \u2764\ufe0f . Yes, many don't happen to use npm.\n. @olance perhaps an example test, would be nice to have.\n. maybe a test for this too?\n. you can do Benchmark.ms instead, which is what rails uses under the hood, so you don't need to do time*1000\n. How about component_source_files or component_sources, since we are catching multiple files here?\n. ActiveSupport::FileUpdateChecker won't work without a block. Below code would just blow up after warning.\nAlso we are already sending this block from within the app ourselves. I don't think this is required.\n. Here too, extra if condition isn't  required, we are defining this ourselves.\n. We can just merge in passed options and send to render, so someone can easily override layout/ status or other render options.\n. I think this is a bad idea. Warnings are good to come across things we need to fix\n. After checking this again, the warnings are from rails 3.2, etc. Those versions are no longer maintained and won't be patched. So :+1: for this change right now.\n. Won't this cause issues, if arguments in console history loose their context?\n. These can be changed to use ruby 1.9 hashes.\n. Same with this and other places\n. You can change this to:\nruby\nresources :server, only: [:show] do \n  collection do \n    get :console_example\n    get :console_example_suppressed\n  end\nend\n. You can expand on saying, we are just adding as comments instead of actually running the console calls, else developers will be lost.\n. NOTE\n. configuration options\n. This can go at top-level require in lib/react-rails.rb\n. newlines after methods\n. missed this one.\n. Its already been solved in master. Can you sync up.\n. This will make the props non-cachable.\n. view caches\n. ||= is not threadsafe, you can add an if check for presence of the value instead.\n. extra space\n. > A naive if would probably suffer from a possible race condition as well.\nI din't get you, how over here?\n\nDoes multithreaded Rails not have single-threaded initialization?\n\nNo. As a rule of thumb, its better to avoid ||= in places, where multithreaded execution is expected, something like here. Else it will fail sporadically,\n. @rearadmiral  x ||= 10, expands to x = x || 10 . This is not guarded, and all three expressions in the latter are sequential, so x is not always guaranteed to be 10 here by ruby.\nAn if, wouldn't be affected by this. You could simple do \nif app.config.react.components_js.nil?\n  app.config.react.components_js = ...\n  ...\nend\n. @rearadmiral I am not sure, how else I could explain this :smile: \n. unmount\n. would be nice to have these explicit\n. A better comparison would be BM.ips\n. I meant with the default values to be explicit- nil. Just easier to read, nothing specific :-)\n. guard throws a circular loading in progress warning\n. Actually its harder to read that way and make the intent clear why we are doing it.\n. Is this taken care of by sprockets?\n. This is 1.9 mode, and hence fails for Rails 5 right now(Specified this to pick the latest JRuby)\n2.2 mode is not out yet on travis..\n. ",
    "lifeiscontent": "@spicyj done.\n. ",
    "lencioni": "What are the things that need to be done for Rails 4.1 support?\n. Sure thing, all done.\n. We have submitted the corporate CLA, so we should be good to go there. Let me know if there is anything else I need to do.\n. I believe that it was submitted with the company name \"Causes\". Let me know if any additional information would be helpful.\n. If this sounds okay to you, I'd be happy to submit a pull request.\n. Thanks for merging and releasing. However, it looks like you tagged the wrong commit, so everything is broken in 0.10.0. Instead of 9ed1c0219bce50b485b0dd5c82da343e3df6d849, I think you want to tag 9a76532a58c02725ffc9c717a5c5cc50378d4232.\n. I figured I'd create a new issue for this in case someone else runs into it before it is fixed: https://github.com/reactjs/react-rails/issues/53\n. Oh, lulz. I had weirdly assumed that the 0.10 branch coincided with v0.10.0.0 being released. Carry on.\n. :+1: \n. ",
    "TylerLH": "I didn't have any problems using this in a Rails 4.1 app. Not sure what issues OP might be having.\n. I'm not sure what you mean. There's no real decision to be made here, I'm simply attempting to open a discussion about ways to interact with this transform in the context of Rails + React. Not asking for actual integration into this gem. \nI assumed this would be an appropriate place for the discussion, but if you have another suggestion I'm open to it.\n. Agreed. I may try the approach I mentioned above, as it does seem rather simple to do. If anyone has any input on this, I'd love to hear it!\n. ",
    "joecritch": "Aha, interesting! Yes, I think it should be made slightly more obvious. Perhaps use a markdown heading style. Also, small point: 'disclaimer' is spelt wrong on the homepage.\n. ",
    "rolfb": "Hi!\n@sickill I updated the code so it only loads when using the assets group. Unicorns should like that.\n@jakubmal I've signed the CLA for our Powow organization which includes me and @sickill (and some others).\n. The build failed, so apparently using the group :assets is too exclusive?\n. @sickill will have to elaborate on the why's on running server/console not starting in production.\u00a0\nI'm off to bed. Revisiting tomorrow.\u00a0\n\u2014\nRolf\nOn Mon, Apr 14, 2014 at 1:17 AM, Jakub Malinowski\nnotifications@github.com wrote:\n\nHi! @rolfb \nWhat exactly is the problem with :group => :all ?\nI'm not sure why it was not here in the first place, see e.g. https://github.com/emberjs/ember-rails/blob/master/lib/ember_rails.rb\nReply to this email directly or view it on GitHub:\nhttps://github.com/reactjs/react-rails/pull/40#issuecomment-40323330\n. Sounds good to me. Thanks Jakub.\u00a0\n\nOn ons., apr. 16, 2014 at 2:05 AM, Jakub Malinowski notifications@github.com=\"mailto:notifications@github.com\"> wrote:\n@sickill @rolfb \nFirst of all: master is not production ready yet.\nSecond:\nThe problem is in your code, but the underlying reason is the unfortunate choice of not defaulting React's variant when it is not explicitly defined. You line #65 is:\nconfig.react.variant = :production\nAnd if you run RAILS_ENV=production bundle exec rails c with react-rails in assets group, then it is not loaded, and config.reactis undefined.\nCurrent master solves that with defaulting variant for React, also I think that the workaround you need is obvious.\nI will apply group: :all to all branches soon. Should you need any help, let me know.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "dferrazm": "Is there any update on how to resolve this issue?\nI'm not being able to run assets:precompile successfully on rails 3.2.17 using react-rails 0.10.\n. I managed to get it working by moving the gem out of the assets group and\nsetting config.assets.initialize_on_precompile = true\nEm 02/06/2014 18:46, \"Jakub Malinowski\" notifications@github.com escreveu:\n\n@dferrazm https://github.com/dferrazm have you tried the solution I\ndescribed?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/40#issuecomment-44895755.\n. \n",
    "facebook-github-bot": "Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\n. Thank you for signing our Contributor License Agreement. We can now accept your code for this (and any) Facebook open source project. Thanks!\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\nIf you are contributing on behalf of someone else (eg your employer): the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\nIf you are contributing on behalf of someone else (eg your employer): the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.\n. Thank you for your pull request and welcome to our community. We require contributors to sign our Contributor License Agreement, and we don't seem to have you on file. In order for us to review and merge your code, please sign up at https://code.facebook.com/cla - and if you have received this in error or have any questions, please drop us a line at cla@fb.com. Thanks!\nIf you are contributing on behalf of someone else (eg your employer): the individual CLA is not sufficient - use https://developers.facebook.com/opensource/cla?type=company instead. Contact cla@fb.com if you have any questions.\n. ",
    "eins78": "@zpao This issue seems to be resolved, so this issue might be closed.\n. I came here to report the same problem: prerendering doesn't work, and now I don't know if there is a bug or if I did something wrong.\nI've first tried it with a components.js.jsx file, but the JSX was not precompiled (Bug #55).\nI then converted it manually to make a minimal example, this is my current setup:\n\n\nGemfile:  added\n\nrb\n  gem 'react-rails', git: 'https://github.com/reactjs/react-rails.git', ref: 'master'\n- app/assets/javascripts/application.js.coffee: added\nrb\n  #= require react\n  #= require react_ujs\n  #= require components\n- app/assets/javascripts/components.js: (new file)\n``` js\n  /* @jsx React.DOM /\nvar DummyComponent = React.createClass({displayName: 'DummyComponent',\n    render: function () {\n      return (\n        React.DOM.div(null, \n          this.props.text\n        )\n      );\n    }\n  });\n  ```\n- Finally, I took an existing view and replaced everything with just this line:\nhaml\n  =react_component('DummyComponent', {:text => 'Hello'}, {:prerender => true})\n\nThe output of the templating is:\nhtml\n<div data-react-class=\"DummyComponent\" data-react-props=\"{&quot;text&quot;:&quot;Hello&quot;}\" prerender=\"true\"></div>\nSo it is unfortunately not pre-rendered. \nClient-side rendering and mounting work though, since I've included the components.js in the assets and also enables react_ujs.\nMaybe a freshly generated rails app just set up do server-side react rendering would be helpful (for debugging and as a quickstart for people playing around)?\n. @volkanunsal I've just found it :blush: \nAnd inside it, there seems to be the solution: Include this as the last line in your components.js\njs\nvar self, window, global = global || window || self;\nWhen I inclueded therubyracer in my Gemfile, it suddenly threw an error: \nActionView::Template::Error (window is not defined)\nThat hinted in the direction that there is something wrong with the handling of the global object in the different JS engines (in itself entirely unsurprinsing\u2026)\n. I was thinking the same on the way home, will try that tomorrow. \nI'll have to read the snippet again carefully to determine if it could have unintended side effects. \n. I played around with it, and I think I found the actual bug:\nThe component.js is cached, even while in development mode!\nSo I take back my previous two comments, adding the line does not make any difference \u2013\u00a0it was just pure chance that I restartet the rails server in between the changes. I have now running everything as it should (setup as described in my first comment, also the README.\nI made a new bug for this (#58), but since that issue was originally about documentation I think it should be kept open because there is still need for improvement.\n. I just reproduced this in the dummy rails app included with the tests, so it should not be caused by something specific to the app I am working on.\n. Yes, although I can't find any record of it atm other than that this was merged: https://github.com/facebook/react/pull/1770\n. ",
    "pistachiomatt": "Then what's that Groups post going on about? https://groups.google.com/d/msg/reactjs/zbHSSnDQK8A/6rry4xxWpSkJ\n. ",
    "wiredprairie": "I thought adding the Harmony switch was a good idea, so I had a go at it: https://github.com/reactjs/react-rails/pull/107\n. I switched away from Rails shortly after I made the pull request ... and \ndon't have time to make any changes like you suggested.\nOn 12/22/2014 4:35 PM, Paul O\u2019Shannessy wrote:\n\n@wiredprairie https://github.com/wiredprairie I take it you don't \nwant to continue this? Thanks for starting the effort!\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/reactjs/react-rails/pull/107#issuecomment-67899409.\n. \n",
    "dapi": "+1\n. Thanks for a tip )\n. 1.3.2 still broken for rspec\n. ",
    "samratjp": "I'm still experiencing this in 0.11.1.0 - any ideas?!\n. ",
    "katsgeorgeek": "+1\n. ",
    "jsdf": "On the concern around the future of coffee-react-transform. The transformer is more or less finished (like the JSX transformer), and it has been implemented in a way which isn't tied to a specific CoffeeScript version (and should even work with compatible dialects such as IcedCoffeeScript). Thus, even if I were to stop maintaining it for some reason, the transformer should be forward-compatible with future versions of CoffeeScript, unless the syntax changes in very weird ways.\nHowever, this PR uses coffee-react, which bundles a specific version of CoffeeScript. It's intended to be easy to get up and running when used on the command line, but the implication here is that the CoffeeScript version being used is tied to the version of the coffee-react module. \nPerhaps it would be better to just use the coffee-react-transform module to preprocess the CJSX syntax, and then compile the transformed (CoffeeScript) output itself via Sprockets, or the installed ruby-coffee-script version? Additionally, coffee-react-transform could be run under ExecJS, as with ruby-coffee-script.\n. I had a crack at bringing coffee-react-transform into ruby-land this week, and I ended up with two gems: coffee-react and sprockets-coffee-react. I took the approach of registering it as a preprocessor for application/javascript, rather than by file extension, so that it works with both .js.coffee.cjsx files and also just .js.coffee.\nIf you make use of one or both of these gems then you don't need to vendor the browserify-bundled CJSXTransformer.\n. I think a link in the readme in the coffeescript section is a good idea, though for some features (like server side rendering) a bit of integration between the two gems might be a better approach. Could just be something optional, depending on whether the user chooses to install the sprockets coffee react gem. \n. ",
    "meleyal": "I'd suggest coffeescript support should be the default as this is meant to be a no-brainer way to use react with rails.\n. AFAIK this is not possible as the helper is evaluated on the server, while the JS object is only available on the client.\nI guess it could be implemented in react_ujs as some kind of promise that resolves when the component actually mounts.\n. You're right, the test passes regardless of which event is used.\nA possible workaround might be to mock Turbolinks' caching mechanism somehow.\n. Yes this requires ruby 1.9 and bundler 1.6 (the latest version).\n. I saw the same error locally when running the tests, but only intermittently. I think this is unrelated to the patch.\n. The failing tests seem to be related to #59 \n. @jakubmal tests are now passing\n. I think this is the same issue as #69 \n. The routing is handled by Rails.\nYou could use react-router if you want to do the routing on the client.\n. Tested locally and this looks good\n. nice work @rmosolgo \n. @jakubmal happy to, but should it be backwards compatible with older versions of Turbolinks that don't support page:before-unload?\n. For now I added a note in the README. \nTo log this on the server would be possible I guess via Turbolinks::VERSION as @felixbuenemann suggests.\nBut it could be more useful to see it in the console, maybe hooking into React's development logger somehow?\n. @zpao Is there any way to tell if React is in dev mode, I think dev/production are different builds right?\n. The simplest thing I can think of is renaming react_ujs.js > react_ujs.js.erb and checking  Rails.env. How does that sound?\n. Will do\n. Updated\n. ",
    "jorge-marques": "Passing a ruby hash does indeed work. What I'd like to is to pass a reference to a javascript object, to be evaluated at runtime in the browser.\nAlso is the possible to pass another component as a prop with this method?\n. ",
    "kalashnikovisme": "Oh...\nI've had\nruby\nconfig.assets.compile = false\nin my config/environments/production.rb\nChanging it to true has resolved the problem.\n. ",
    "chellberg": "Is there a workaround for this? I got my global scope issue sorted with components.js and global.Component = Component, but I'm now having this V8::Error. Mine is _ is not defined, which may have something to do with Underscore.js.\nUpdate: I was able to get past that error, but only by requiring the underscore library in components.js. The next errors were related to more libraries referenced in components, and the one I'm stuck on now is Encountered error \"ReferenceError: App is not defined\" when prerendering...\nAre React components supposed to avoid using third party libraries/shared application js code? These components work fine when rendered clientside - is there maybe a better way to give the prerender VM access to the application pipeline javascripts?\n. @zkilgore That's one of the ones we ran into - I wanna say it was related to jQuery being unavailable but I'm not 100% sure. The sum of the problems I've encountered makes it seem like the prerenderer is trying to execute the javascript in isolation rather than simulating an actual browser (with a document object, etc) - but then again, I did have to set window.Component = Component to get to this error, so I guess there's at least a window.\n. @jwaldrip did you figure out how to use any plugins successfully?\n. ",
    "zkilgore": "@chellberg I am getting the exact same V8::Error, only with document is not defined instead of the libraries you are talking about.\nWould love to hear if anyone has any insight. Thanks!\n. ",
    "volkanunsal": "Yes, I think it should. Looks like page:change is triggered right before page:restore.\nhttps://github.com/rails/turbolinks/blob/master/lib%2Fassets%2Fjavascripts%2Fturbolinks.js.coffee#L59-L63\n. @eins78 There is a dummy app in the test folder that has a test case for server side rendering, but I haven't had much success with getting started with that. Looks like there is a gem version issue in that.\n\n/Users/newuser/.rvm/gems/ruby-2.0.0-p247/gems/railties-3.1.0/lib/rails/railtie/configuration.rb:78:in method_missing': undefined methodwatchable_files' for #Rails::Application::Configuration:0x007f8ddb0532f8 (NoMethodError)\n. I think I know why this is happening. There is an initializer in the\nrailtie.rb file that observes changes to only the jsx files. I wonder if\nyou were to add component.js there that would make a difference.\n\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb\nOn Friday, July 4, 2014, Max Albrecht notifications@github.com wrote:\n\nI played around with it, and I think I found the actual bug:\nThe component.js is cached, even while in development mode!\nSo I take back my previous two comments, adding the line does not make any\ndifference \u2013 it was just pure chance that I restartet the rails server in\nbetween the changes. I have now running everything as it should (setup as\ndescribed in my first comment, also the README.\nI made a new bug for this (#58\nhttps://github.com/reactjs/react-rails/issues/58), but since that issue\nwas originally about documentation I think it should be kept open because\nthere is still need for improvement.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/57#issuecomment-48030406.\n\n\nVolkan Unsal\nweb and mobile development\nvolkanunsal.com http://bit.ly/1h1ebjy\n. Whoops. Good catch. \n. ",
    "xionon": "@volkanunsal The server renderer uses a memoized class variable for it's server-side javascript. Subsequent calls to Renderer.setup! never delete this memoized value, which is why you have to restart your server to get new JS\n. @jakubmal These issues should be fixed with #59, yes.\nIf you make a separate issue for recommended README updates, I'll be happy to work on it and submit a pull request.\n. This has been driving me nuts, too. I added pull request #59, which fixes this bug\n. I'm not a fan of the sleep(1) calls in the test file I added, but I couldn't get Rails / PhantomJS to reliably pick up that there were changes without adding some delays. If anyone has suggestions on better ways to go about testing this, let me know.\nAlso, in case the comment wasn't clear: there's a bug in server-side rendering in development. It currently caches the concatenated components the first time their used, and doesn't get updates correctly, which breaks the server rendering. React is smart enough to take over when the HTML hits the browser and replace the outdated HTML with new HTML, but it means that you're not actually using server-side rendering in development.\n. Regarding the test failure on Travis, I'm getting inconsistent failures depending on the order the tests are run, and it seems to be unrelated to my patch, and more of a PhantomJS issue. I'm not very familiar with PhantomJS, and would appreciate it if anybody had any ideas.\n. @zpao Yep, I've seen that error, too.\nShould I make a separate issue for that problem? I think it's unrelated. On react-rails/master (i.e., without this patch applied), I can run the tests 10 times in a row, 5 times it will fail, 5 times it will pass. Test::Unit randomizes the order the tests are run in, so it could be a weird dependency issue between multiple tests.\n. Added sleep(0.1) to work around the Turbolinks error, and now even more unrelated (and untouched) tests are failing. \n. Ahh, my bad, upstream changes break mine. I'll re-open once fixed, if it's even necessary anymore.\n. OK, I think I finally fixed this!\nThe issue was pretty gnarly, hopefully I can explain it clearly.\nThe test inconsistencies were related to the way that Rails' Asset Pipeline detects file changes: Rails looks at an asset file's mtime, which tells it if the file has been updated, and if it has the various setup blocks are run and the asset is re-compiled. However, mtime has a resolution of only 1 second, which means that if several operations on a file happen in less than a second, the mtime won't appear to have updated, and the asset pipeline can't detect it and refresh the file list.\nSome of the tests modify the react.js or components files, and then issue a GET to ensure that the contents of that file or the server rendered markup updated correctly. For example, given these two tests:\n```\nTest A: assert that the component renders server-side correctly\nTest B: update the react.js file with a fake string; assert that get 'assets/react.js' \nreturns the fake string, reset react.js; finishes in less than a second\n```\nIf Test A runs before Test B, no problem. However, if Test B runs first, the mtime of the react.js file won't be updated when Test B cleans itself up - which means that Test A will get the fake string instead of the actual react.js code, which will cause it to error out.\nI was seeing these errors both on master and on my branch. If you want me to pull this out into a separate pull request, I'm happy to do that.\n. Also, if you want to run the test several times in sequence to get different seeds and see if your tests fail depending on the order they run in, you can use: for i inseq 1 10; do rake appraisal; done which will run rake appraisal 10 times in a row.\n. @jakubmal I only thought to save a seed that would fail reliably on my branch. I don't have a seed that reliably fails on master.\nUsing Ruby 1.9.3, on xionon/react-rails, commit 1c1ab82d358e88fbc1c5aceb211dab0993dec67b, you can reliably get test failures with TESTOPTS=\"--seed=37924\" bundle exec rake\nSwitching to xionon/react-rails commit 67646306a188e91dc71f9c64860faef63911d5ee fixes this\n. I removed the sleep(0.1) call in test/view_helper_test.rb, because I can't reliably reproduce the test bug that I was hoping to fix.\n```\n\n\nBUNDLE_GEMFILE=/Users/alech/personal/react-rails/gemfiles/rails_4.0.gemfile bundle exec rake\nRun options: --seed=26433\n\n\nRunning:\n...........E.\nFinished in 9.568973s, 1.3586 runs/s, 3.9712 assertions/s.\n1) Error:\nViewHelperTest#test_react_ujs_works_with_Turbolinks:\nCapybara::Poltergeist::JavascriptError: One or more errors were raised in the Javascript code on the page. If you don't care about these errors, you can ignore them by setting js_errors: false in your Poltergeist configuration (see documentation for details).\nReferenceError: Can't find variable: Turbolinks\nReferenceError: Can't find variable: Turbolinks\n    at phantomjs://webpage.evaluate():1\n    at phantomjs://webpage.evaluate():1\n    at phantomjs://webpage.evaluate():1\n    at phantomjs://webpage.evaluate():1\n    poltergeist (1.5.1) lib/capybara/poltergeist/browser.rb:275:in command'\n    poltergeist (1.5.1) lib/capybara/poltergeist/browser.rb:110:inexecute'\n    poltergeist (1.5.1) lib/capybara/poltergeist/driver.rb:134:in execute_script'\n    capybara (2.4.1) lib/capybara/session.rb:512:inexecute_script'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:69:in block in <class:ViewHelperTest>'\n    minitest (5.3.5) lib/minitest/test.rb:106:inblock (3 levels) in run'\n    minitest (5.3.5) lib/minitest/test.rb:204:in capture_exceptions'\n    minitest (5.3.5) lib/minitest/test.rb:103:inblock (2 levels) in run'\n    minitest (5.3.5) lib/minitest/test.rb:256:in time_it'\n    minitest (5.3.5) lib/minitest/test.rb:102:inblock in run'\n    minitest (5.3.5) lib/minitest.rb:317:in on_signal'\n    minitest (5.3.5) lib/minitest/test.rb:276:inwith_info_handler'\n    minitest (5.3.5) lib/minitest/test.rb:101:in run'\n    minitest (5.3.5) lib/minitest.rb:759:inrun_one_method'\n    minitest (5.3.5) lib/minitest.rb:293:in run_one_method'\n    minitest (5.3.5) lib/minitest.rb:287:inblock (2 levels) in run'\n    minitest (5.3.5) lib/minitest.rb:286:in each'\n    minitest (5.3.5) lib/minitest.rb:286:inblock in run'\n    minitest (5.3.5) lib/minitest.rb:317:in on_signal'\n    minitest (5.3.5) lib/minitest.rb:306:inwith_info_handler'\n    minitest (5.3.5) lib/minitest.rb:285:in run'\n    minitest (5.3.5) lib/minitest.rb:149:inblock in __run'\n    minitest (5.3.5) lib/minitest.rb:149:in map'\n    minitest (5.3.5) lib/minitest.rb:149:in__run'\n    minitest (5.3.5) lib/minitest.rb:126:in run'\n    minitest (5.3.5) lib/minitest.rb:55:inblock in autorun'\n```\nfollowed by\n```\n$ TESTOPTS=\"--seed=26433\" BUNDLE_GEMFILE=/Users/alech/personal/react-rails/gemfiles/rails_4.0.gemfile bundle exec rake\nRun options: --seed=26433\nRunning:\n.............\nFinished in 8.946650s, 1.4531 runs/s, 4.5827 assertions/s.\n13 runs, 41 assertions, 0 failures, 0 errors, 0 skips\n```\n-- same seed, same gemfile. First run fails, second run succeeds. Gah.\n. I rebased to upstream/master, and merged in #76, because there would have been a merge conflict between this and #76.\n. @sjltaylor @spicyj I think the \"rails way\" of handling this would be to use a new initializer block in the Railtie.\n``` ruby\nwould add to lib/react/rails/railtie.rb\ninitializer \"react_rails.setup_view_helpers\" do\n  ActionView::Base.send :include, ::React::Rails::ViewHelper\nend\n```\n. Sorry, I guess my comment wasn't very clear. This pull request actually adds the generator for users that have installed the gem into their rails app, which is very similar to how ember-rails works. \nThe idea is to make installation and usage easier for Rails developers, especially those new to React. I have ideas for ways to enhance the generator, and I was looking for feedback about whether or not adding Rails generators was a direction you wanted this project to go in.\nAfter merging this pull request, users who install the gem in their Rails app will be able to run rake generate react:install. This will create the components directory, create a components.js file, and directives to require react, react_ujs, and components.js to the application.js file.\nThe generator currently does not support CoffeeScript or custom names for application.js.\nOne of the additional generators I'd like to build is rails generate react:component MyComponent, which would scaffold out a file in app/assets/javascripts/components/my_component.js.jsx -- but if you're not interested in adding generators to this project (which is totally reasonable), I'll build it as a separate gem. :smile:\n. Oh, gotcha.\nlib/generators/ is where Rails looks to automatically add generators to the rails generate list. AFAIK, it's not just a convention, but a requirement if you want Rails to automatically load them. Even if it were just a convention, though, I would recommend sticking with lib/generators/react, because that's where bigger gems like devise, ember-rails, and backbone-on-rails stick their generators.\n. If there's a better alternative, I'm happy to pull out the components.js\nbit and leave that up to the developer. My goal is to make things easy for\nnew react users, so if it can be scaffolded on install, I'd like to\nimplement it. But I'm having trouble visualizing how js dependency\ninjection would work with the rails asset pipeline and server prerendering.\nCan you give me an example of what you're thinking, even in pseudo-code? Or\nif there's an example JS app using DI and React that I could look at, that\nwould work too.\nOn Tuesday, August 5, 2014, Jakub Malinowski notifications@github.com\nwrote:\n\nI'm just not sure whether it's super good to keep components.js thing as\nis - we are effectively suggesting that React components in your\napplication should not be dependency-injected, but I guess FB @zpao\nhttps://github.com/zpao doesn't have any recommendations for resolving\ndependencies in React apps right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/64#issuecomment-51259795.\n. @jakubmal I agree, supporting additional gems like maccman/sprockets-commonjs is outside the scope of this ticket. \n. @zpao TL;DR - CommonJS would be really nice, but it's not the \"Rails way.\" I would love for that to change, but that's a long ways (and a separate gem) away. For now I would recommend sticking with components.js.\n\nRails does not have a good story for integrating Browseify or CommonJS modules. Instead, Rails uses a version of Sprockets -- the integration is referred to as the asset pipeline. As I remember it, Sprockets was built before node.js really took off, and it's stuck around mainly because that's what Basecamp uses.\nDependencies can be managed using //= require from any file. If two files require the same dependency, it will only be included once. However, by default it's all loaded into the global context - there's no built-in equivalent to module.exports, and I think trying to implement that by default would confuse more people than it would help.\nIt's possible that you could do things like this:\nerb\n<%= react_component 'Bar' %>\njs\n//= require react\n//= require components/foo\nvar Bar = react.createClass({\n  render: function() {\n    return <div><Foo /></div>;\n  }\n});\nIf the view helper then only asked the asset pipeline for the components/bar.js file, the asset pipeline could figure out the dependencies on react and foo and bundle those together. However, I think this is a really bad, Un-Rails-y way of doing it.  It would break a lot of user's assumptions about how the asset pipeline works, and probably would end up building a lot of different js files and holding them in memory.\nThe asset pipeline has a build process, where the //= require directives from a mainfest file (by default, application.js) are parsed and concatenated into a single static file on deploy. You can add more manifest files to the list of files to build, and I think it would make sense for this gem to automatically add components.js to that list. That way, application.js and components.js would both be built on deploy, and components.js could be used separately from the rest of the js.\n. All of your observations and assumptions about Rails projects using non-trivial amounts of Javascript are correct. Turbolinks is flaky, and CoffeeScript allows them to punt on a real JS strategy for a few more years. That said, the situation is much improved from the bad old days, where you just stuck your JS in the public directory grab-bag and Rails dropped in 10-15 individual <script> tags per page.\nI'd love to use CommonJS, and if I were building a large new app from scratch, I'd probably disable the asset pipeline altogether and use something like Broccoli for front-end stuff instead. But I also have to work on legacy projects where the asset pipeline is already working, and I think react-rails could make the most sense for those apps.\n. OK, so, are there any changes I need to make before this can be merged?\n. Apologies for disappearing and letting this drop.\nI added the smallest amount to the README that would be necessary to communicate this. I'm not sure an install generator really needs much more than that.\n. I was working on this today, and it's not as simple as I hoped. In case I run out of time and can't get a pull request done this weekend, I thought I'd share my finding on the upgrade to 0.11.0\nreact.js has a regression in componentWillMount, as detailed here: https://github.com/facebook/react/issues/1866 and fixed here: https://github.com/facebook/react/pull/1870\nJust upgrading the gemspec to react-source 0.11.0 breaks the tests here: https://github.com/reactjs/react-rails/blob/bff5d43a9471040ae3b7fc109c456c0f4a7423c0/test/react_renderer_test.rb#L7 and here: https://github.com/reactjs/react-rails/blob/bff5d43a9471040ae3b7fc109c456c0f4a7423c0/test/view_helper_test.rb#L83\n...because both of those tests rely on componentWillMount() calling setState on the server correctly.\nA refactor of those tests will require removing the setState calls in componentWillMount(), and validating that the component mounted on the server using some different method.\n. @sjltaylor @zpao I suggested this in #61, but apparently didn't dig deep enough. Based on this blog post, it should probably look like this:\nruby\ninitializer \"react_rails.setup_view_helpers\" do\n  ActiveSupport.on_load(:action_view) do\n    ActionView::Base.send :include ::React::Rails::ViewHelper\n  end\nend\nDepending on the scope that Rails passes to the block, you might even be able to use\nruby\ninitializer \"react_rails.setup_view_helpers\" do\n  ActiveSupport.on_load(:action_view) do\n    include ::React::Rails::ViewHelper\n  end\nend\n1) sorry for not suggesting that in the first place, 2) I haven't actually tested this. I should have time this weekend to poke at it, if you don't.\n. @meleyal once #76 gets merged in, the ReferenceError should stop popping up.\n. Here's an example repo, that just tries to include react.js in the application.js file, as specified in the instructions:\nhttps://github.com/xionon/react-test\n. Ahhhh, duh. I've been working off master so long, I forgot I had to specify\nthe variant. Sorry!\nOn Fri, Aug 1, 2014 at 1:02 AM, Paul O\u2019Shannessy notifications@github.com\nwrote:\n\nIs there a reason that the gem published to rubygems.org isn't tracking\nthe master branch?\nBecause master has new features. The plan months ago was to get off of the\n\"track React versions\" path when server rendering and whatever helpers felt\ngood, then call it 1.0. This hasn't gotten enough love to get there. I\nwould love for it to (I'm looking for maintainers, let me know if you want\nto get more involved!)\n46 https://github.com/reactjs/react-rails/issues/46 is closed and\nshould not be reopened. < 1.0 doesn't include react_ujs so it won't be\nfound.\nAs to why react could not be found, 0.x does not provide any defaults for\nthe variant of react. You must specify config.react.variant. If I do that\nin your example app, it works. Looking at the readme in the 0.11 branch,\nthat doesn't seem as clear as I remember it. Master defaults to using the\nversion matching your environment (which is a nice detail) -\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L9\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/71#issuecomment-50849167.\n. I have been trying to think that through. Let's say you generate a scaffold for Post.\n\n``` erb\n app/views/posts/show.html.erb \n<%= react_component 'Post', { post: @post }, { prerender: true } %>\n app/views/posts/index.html.erb \n\n<%= react_component 'PostTable', { posts: @posts }, { prerender: true } %>\n```\n\nand PostTable would render a list of PostTableRow objects, keeping with the Rails convention of scaffolding a table for the index view.\nThose are pretty easy. The scaffolded edit.html.erb and new.html.erb could be quite similar.\nerb\n<%= react_component 'PostForm', { post: @post }, { prerender: true } %>\nIn this example, the form would need to reflect on the post object to determine if it was an edit or new object. Using only Rails' default JSON serializer, I think checking for an id property would be sufficient.\nHowever, I don't think this quite hits the nail on the head. Sure, you get the react_component calls stubbed out for you, but it's not really clear why you would want them in separate ERB templates like that. It leaves the whole question of client-side routing and data updates up to the developer.\ne.g., when you click the \"show\" link from the posts index, you'll just get routed to Rails, which will render the component and send you a new page. You've lost the whole advantage of having a front-end JS library. I think that, if the react-rails gem is going to fully take over the default Rails scaffolds, it should also have an opinion on client-side routing.\nMaybe I'm wrong on that, though? Maybe it's totally fine to start with server-side rendering, and let the developers worry about catching clicks and rendering a different component.\n\nPhilosophically, SHOULD react-rails provide a front-end routing solution? There are a couple out there, rackt/react-router and andreypopp/react-router-component both look like they should work on the server, but I'm not familiar enough with the JavaScript landscape to know if those are appropriate solutions or not. I could also see the argument that it should be done with a different gem - maybe flex-rails :sunglasses: \n. @oguzbilgic for nested attributes, I have found it's almost always better to ignore your database model, and instead model your form as flat as possible. \nAs an example, assuming Person has_one Address, instead of doing this <input name=\"person[address][street_address]\" />, just do <input name=\"person[street_address]\" /> and figure it out on the server. For me, this has been true with and without React. I usually create an object that maps my REST-resource to the backend database models. That way, when the app grows and the backend modeling needs to change, it's much easier to change the way my REST-to-Database models work, rather than all the forms that interact with those models.\n@eliotsykes sorry for missing your question. The form tag turned out to be very simple, so I never bothered making a PR for it. I posted a gist of my form helper. I never found a way to build Rails.FormErrorList that I really thought was re-usable, and the others are so trivial that adding them felt like it would just clutter the framework.\n. Code: :+1: \nCI Fail: \"ReferenceError: Can't find variable: Turbolinks\"\nThis is the most annoying bug. I am 99% sure that it's not your code that failed, it's that sometimes Poltergeist isn't waiting for the javascript to fully finish parsing before it tries to call Turbolinks.\nI had to work around it using sleep(1) in https://github.com/xionon/react-rails/commit/decfcae2e22c6fe51416bce3f45ae6fef49d2195\n. @zpao Correct, this supersedes both #61 and #68 \nI created #75 to help me remember to work on the Turbolinks thing tomorrow.\n. After spending a couple hours on this, I've determined that wait_until isn't going to work.\nUsing this code:\n``` ruby\nrequire \"timeout\"\ndef wait_until\n  Timeout.timeout(Capybara.default_wait_time) do\n    until value = yield\n      puts \"sleep 0.1, turbolinks #{value}\"\n      sleep(0.1)\n    end\n    puts \"turbolinks #{value}\"\n    value\n  end\nend\nsnip...\nwait_until {\n  page.evaluate_script('typeof Turbolinks === \"object\" && typeof Turbolinks.visit === \"function\"')\n}\npage.execute_script('Turbolinks.visit(\"/pages/2\");')\n\n```\nI still see random ReferenceErrors. Re-running the test with or without the same seed value doesn't reproduce the error. \nI tried to see how other people are testing their libraries with Turbolinks, and, as far as I can tell... they're not? Even the official Turbolinks tests are literally just flat .html files with calls to console.log.\nThe suggested method of dealing with timing problems in Poltergeist like this is apparently to just use sleep.\n. Fixed via pull request #76 \n. @jakubmal I'd love to see your scenarios, I'm not up-to-date with Capybara and would definitely appreciate looking at something more sophisticated. And I totally agree this needs improvement. I tried, but I was unable to get wait_until to work properly.\n``` ruby\nwait_until was removed from Capybara 2\nrequire 'timeout'\ndef wait_until\n  Timeout.timeout(Capybara.default_wait_time) do\n    until value = yield\n      sleep 0.1\n    end\n  end\n  value\nend\n...snip...\nwait_until { page.evaluate_javascript 'typeof Turbolinks !== \"undefined\"' }\npage.execute_script('Turbolinks.visit(\"/pages/2\");')\n```\nAt most, it would sleep one cycle, but still throw a ReferenceError. After spending about 2 hours trying to get that to work, I gave up and put in sleep.\nFWIW, I haven't been able to find anyone else on Github that is testing Turbolinks by calling Turbolinks.visit. The official Turbolinks repository isn't any help - it looks like their tests are just \"call console.log, visually confirm that it worked.\"\n. @jakubmal \n\nBecause you need to rescue, otherwise your wait_until looks ok - but Capybara 2 has synchronize built in which does just this.\n\nThe code in the block wouldn't raise an error - it's just evaluating the response. That's what's weird about it - typeof Turbolinks would return \"object\", but calling Turbolinks.visit would throw a reference error. I'm not familiar with synchronize, maybe that would work better.\n\nAlso: Why is content-based asserting not fine?\n\nI didn't write the test, I was only trying to fix it. I think the original intent was to assert that the Turbolinks library itself would keep working with ReactJS. The test probably needs a refactor.\n. I'm totally fine with ripping the direct calls to Turbolinks.visit out of the test suite. I'm pretty sure that nobody in the world is actually testing Turbolinks this way, and I'm not surprised that it's flakey. If you search Github for \"test Turbolinks.visit\", we are the only Ruby repository that actually is testing it like this.\nFor example, Steve Klabnik's performance test of Turbolinks just uses click_link.\n\nI cannot reproduce the problem with: for i in seq 1 10; do rake appraisal; done\n\nThat's really strange! Did you try more than 10 runs? For me, it's not guaranteed that I'll get the error, but it usually shows up 1-in-10 times. Note that a failure doesn't halt execution of the test suite, and since it takes so long to run if you aren't watching it you'll have to scroll.\n\nWhich version of Capybara supports page.evaluate_javascript 'typeof Turbolinks !== \"undefined\"' ? Mine does support page.execute_script 'typeof Turbolinks !== \"undefined\"' which returns nil so it looks like you weren't testing anything?\n\nI'm very sorry, I was typing from memory, not copying working code, and it looks like my example included a typo. The correct call isevaluate_script, which returns the value of the execution. execute_script just runs the code and returns nil. More on the README. The history for the README on github.com/jnicklas/capybara shows this as being available as far back as 2010.\n\nOne more thing - I think you can see that this snippet doesn't test anything:\n\nThat's why I was testing to see if Turbolinks was undefined. But then I was still getting errors, so I gave up and used sleep.\n\nIf you confirm that you cannot reproduce the problem with my code - I'll follow with a PR.\n\nI threw some puts in your code block, and it's definitely working in some cases:\nYield was unsuccessful, sleeping for 0.1\nYield was successful, returning true\nHowever, I am somewhat reliably seeing this: \nPhantomJS has crashed. Please read the crash reporting guide at https://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug report at https://github.com/ariya/phantomjs/issues/new with the crash dump file attached: /tmp/79609223-ACFB-45EC-B7D6-79A047415E25.dmp\n = 0.27 s\n  1) Error:\ntest_react_ujs_works_with_Turbolinks(ViewHelperTest):\nCapybara::Poltergeist::DeadClient: PhantomJS client died while processing {\"name\":\"execute\",\"args\":[\"Turbolinks.visit(\\\"/pages/1\\\");\"]}\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/poltergeist-1.5.1/lib/capybara/poltergeist/server.rb:33:in `send'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/poltergeist-1.5.1/lib/capybara/poltergeist/browser.rb:270:in `command'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/poltergeist-1.5.1/lib/capybara/poltergeist/browser.rb:110:in `execute'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/poltergeist-1.5.1/lib/capybara/poltergeist/driver.rb:134:in `execute_script'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/capybara-2.4.1/lib/capybara/session.rb:512:in `execute_script'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:89:in `block (2 levels) in <class:ViewHelperTest>'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:24:in `block in wait_until'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/timeout.rb:66:in `timeout'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:18:in `wait_until'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:89:in `block in <class:ViewHelperTest>'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:1301:in `run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit/testcase.rb:17:in `run'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/activesupport-3.2.19/lib/active_support/testing/setup_and_teardown.rb:36:in `block in run'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/activesupport-3.2.19/lib/active_support/callbacks.rb:436:in `_run__3033053979345895873__setup__4237587085358944638__callbacks'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/activesupport-3.2.19/lib/active_support/callbacks.rb:405:in `__run_callback'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/activesupport-3.2.19/lib/active_support/callbacks.rb:385:in `_run_setup_callbacks'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/activesupport-3.2.19/lib/active_support/callbacks.rb:81:in `run_callbacks'\n    /Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/activesupport-3.2.19/lib/active_support/testing/setup_and_teardown.rb:35:in `run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:919:in `block in _run_suite'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:912:in `map'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:912:in `_run_suite'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:657:in `block in _run_suites'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:655:in `each'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:655:in `_run_suites'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:867:in `_run_anything'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:1060:in `run_tests'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:1047:in `block in _run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:1046:in `each'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:1046:in `_run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/minitest/unit.rb:1035:in `run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:21:in `run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:774:in `run'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:366:in `block (2 levels) in autorun'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:27:in `run_once'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/test/unit.rb:365:in `block in autorun'\nWith a 10x run, I saw this error 4 times. I'm running this on a 15\" Retina Macbook Pro, 2.7ghz i7.\n. An example alternative for intentionally testing Turbolinks vs No Turbolinks:\nSpec: https://github.com/steveklabnik/turbolinks_test/blob/master/spec/requests/turbolinks_spec.rb\nController: https://github.com/steveklabnik/turbolinks_test/blob/master/app/controllers/pages_controller.rb\nView: https://github.com/steveklabnik/turbolinks_test/blob/master/app/views/pages/show.html.erb\n. > What's your Phantomjs version? \n1.9.7\n\nDoes this error happen only for rails < 4.0 ?\n\nThat would be interesting, but no :cry:. I've seen it at least with = 4.0:\n```\n\n\nBUNDLE_GEMFILE=/Users/alech/personal/react-rails/gemfiles/rails_4.0.gemfile bundle exec rake\nRun options: --seed 47937\n\n\nRunning:\n.....\nYield was successful, returning true\nYield was unsuccessful, sleeping for 0.1\nPhantomJS has crashed. Please read the crash reporting guide at https://github.com/ariya/phantomjs/wiki/Crash-Reporting and file a bug report at https://github.com/ariya/phantomjs/issues/new with the crash dump file attached: /tmp/787FBDAE-BFEF-44F7-9156-0DA0085AA83D.dmp\nE.......\nFinished in 9.922476s, 1.3102 runs/s, 3.8297 assertions/s.\n1) Error:\nViewHelperTest#test_react_ujs_works_with_Turbolinks:\nCapybara::Poltergeist::DeadClient: PhantomJS client died while processing {\"name\":\"execute\",\"args\":[\"Turbolinks.visit(\\\"/pages/1\\\");\"]}\n    poltergeist (1.5.1) lib/capybara/poltergeist/server.rb:33:in send'\n    poltergeist (1.5.1) lib/capybara/poltergeist/browser.rb:270:incommand'\n    poltergeist (1.5.1) lib/capybara/poltergeist/browser.rb:110:in execute'\n    poltergeist (1.5.1) lib/capybara/poltergeist/driver.rb:134:inexecute_script'\n    capybara (2.4.1) lib/capybara/session.rb:512:in execute_script'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:89:inblock (2 levels) in '\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:24:in block in wait_until'\n    /Users/alech/.rvm/rubies/ruby-2.0.0-p481/lib/ruby/2.0.0/timeout.rb:66:intimeout'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:18:in wait_until'\n    /Users/alech/personal/react-rails/test/view_helper_test.rb:89:inblock in '\n    minitest (5.3.5) lib/minitest/test.rb:106:in block (3 levels) in run'\n    minitest (5.3.5) lib/minitest/test.rb:204:incapture_exceptions'\n    minitest (5.3.5) lib/minitest/test.rb:103:in block (2 levels) in run'\n    minitest (5.3.5) lib/minitest/test.rb:256:intime_it'\n    minitest (5.3.5) lib/minitest/test.rb:102:in block in run'\n    minitest (5.3.5) lib/minitest.rb:317:inon_signal'\n    minitest (5.3.5) lib/minitest/test.rb:276:in with_info_handler'\n    minitest (5.3.5) lib/minitest/test.rb:101:inrun'\n    minitest (5.3.5) lib/minitest.rb:759:in run_one_method'\n    minitest (5.3.5) lib/minitest.rb:293:inrun_one_method'\n    minitest (5.3.5) lib/minitest.rb:287:in block (2 levels) in run'\n    minitest (5.3.5) lib/minitest.rb:286:ineach'\n    minitest (5.3.5) lib/minitest.rb:286:in block in run'\n    minitest (5.3.5) lib/minitest.rb:317:inon_signal'\n    minitest (5.3.5) lib/minitest.rb:306:in with_info_handler'\n    minitest (5.3.5) lib/minitest.rb:285:inrun'\n    minitest (5.3.5) lib/minitest.rb:149:in block in __run'\n    minitest (5.3.5) lib/minitest.rb:149:inmap'\n    minitest (5.3.5) lib/minitest.rb:149:in __run'\n    minitest (5.3.5) lib/minitest.rb:126:inrun'\n    minitest (5.3.5) lib/minitest.rb:55:in `block in autorun'\n13 runs, 38 assertions, 0 failures, 1 errors, 0 skips\nrake aborted!\nCommand failed with status (1): [ruby -I\"lib:lib:test\" -I\"/Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/rake-10.3.2/lib\" \"/Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/gems/rake-10.3.2/lib/rake/rake_test_loader.rb\" \"test/*/_test.rb\" ]\n/Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/bin/ruby_executable_hooks:15:in eval'\n/Users/alech/.rvm/gems/ruby-2.0.0-p481@react-rails/bin/ruby_executable_hooks:15:in'\nTasks: TOP => default => test\n(See full trace by running task with --trace)\n``\n. FWIW this should work with RABL, ActiveModel::Serializer, and plain oldto_json` as well. I think the following would work:\nrabl:\nruby\nreact_component(\n  'Todo',\n  Rabl::Renderer.json(@todo, 'todos/show')\n  {prerender: true}\n)\nto_json:\nruby\nreact_component(\n  'Todo',\n  @todo.to_json,\n  {prerender: true}\n)\nHowever, I haven't written test cases for these, so I can't really vouch for the above code :-)  Since Jbuilder is the Rails default, I thought I would start there.\n. JBuilder is only a development dependency. It could be replaced with\nvanilla strings, but since JBuilder is installed by default with rails and\nwould probably be the most likely library used by newer projects, it\nseemed reasonable to test for regressions and document usage.\nOn Monday, October 6, 2014, Jakub Malinowski notifications@github.com\nwrote:\n\nLooks good to me, but I'm not sure why we would need JBuilder here. We\nonly let end user pass a string as an alternative to an object.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/95#issuecomment-58103468.\n. In case there is some confusion, this PR doesn't add support for Jbuilder\nspecifically, but for JSON strings. Jbuilder is just used as a example for\ngenerating said strings.\n\nOn Tuesday, October 7, 2014, Alec Hipshear alechipshear@gmail.com wrote:\n\nJBuilder is only a development dependency. It could be replaced with\nvanilla strings, but since JBuilder is installed by default with rails and\nwould probably be the most likely library used by newer projects, it\nseemed reasonable to test for regressions and document usage.\nOn Monday, October 6, 2014, Jakub Malinowski notifications@github.com\n<javascript:_e(%7B%7D,'cvml','notifications@github.com');> wrote:\n\nLooks good to me, but I'm not sure why we would need JBuilder here. We\nonly let end user pass a string as an alternative to an object.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/95#issuecomment-58103468.\n. I added docs to the README in commit 768e3ef, is there anything else preventing this from being merged? :-)\n. Whoops! README updated.\n. Rails actually handles all that automatically. Users get the option to skip, overwrite, view the diff, overwrite all (if multiple files are generated), or abort.\n. Why would you want to do this instead of passing data in as props? It seems to me that accessing global data is very un-React-y.\n. I guess I still don't understand why this belongs in the react-rails project. If you need the functionality that Gon provides, why not just use Gon? I don't see why this should be a core component for react-rails when other libraries provide the same functionality in a cleaner way.\n\n\nAlternatively, if you have a single parent component, you could pass the props down from the parent to the children.\n. I still don't see how this isn't solved by using a parent component and sharing props between children that way. It seems that using a large amount of global data within the React framework would lead to problems down the line, and a small amount could just be passed in via props.\nCan you provide an example of a case where you would not want React to manage that data?\n. This still sounds like they should be props passed in to each component. I don't understand how adding global variables to each react_component call is any different from just putting the variables in the props hash for that component. If the component is dependent on a particular piece of data to render, it really seems like that data should be passed in as a property.\n. Maybe someone else wants to speak on this, but I think that passing those\nvalues from component1 and component4 is exactly what you're supposed to do\nin react.\nPut another way, if  is a parent node of , and\n depends on prop userCity to render, then  also\ndepends on prop userCity to render. It's not a global, it's a property of\n that gets passed down to its children. And if a separately\nrendered  also has a child , then  should\nget the prop userCity as well.\nOn Thursday, December 11, 2014, Alexey Zhuravlev notifications@github.com\nwrote:\n\nI don't add globals to all components, only there they needed, and only\nduring serverside rendering.\nthis is done for structure like this:\ncomponent1(no globals) -> component2(no globals) -> component3(use globals)\ncomponent4(no globals) -> component3(use globals)\nI think it's not good idea to pass globals as props to component1 or 4,\nthen render them on server\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/115#issuecomment-66578921.\n. Hi! I'd like to help, but I think mostly I've just got bad news.\nThe < error was because if you have any files that are JSX in your javascripts/, even if they have /* @jsx React.DOM / at the top, will cause the runtime to error. After re-reading the readme I renamed them to .js.jsx, but the file comment should probably make that automatic?\n\nThis is how Rails expects things to work. You read the file extensions backwards and apply pre-processors in order. You can do crazy things, like foo.js.coffee.erb, which will first run ERB, then Coffeescript, then serve the file as Javascript. react-rails is following this convention.\n\nrequire is not defined\n\nThis is because we're stuck with the Rails Asset Pipeline. JavaScript is parsed on the server-side using ExecJS, another Rails core component. From the ExecJS FAQ:\n\nWhy can't I use CommonJS require() inside ExecJS?\nExecJS provides a lowest common denominator interface to any JavaScript runtime. Use ExecJS when it doesn't matter which JavaScript interpreter your code runs in. If you want to access the Node API, you should check another library like commonjs.rb designed to provide a consistent interface.\n\nThere's really not much we can do about that without requiring some non-standard Rails libraries, which IMO is beyond the scope of this gem. If you really need require, I suggest setting up a separate build step.\n\nmodule is not defined \"that string is looked up in global scope\"\n\nAgain, this is a limitation of ExecJS: for server rendering in a Rails environment to work, components.js needs to include the component in a way that makes it globally accessible. Theoretically, only the \"top\" component needs to be reachable globally, the rest can be hidden away.\n\nIt seems like any changes to the javascripts files needs a server restart to take place, which slows down progress.\n\nAre you working off the master branch? If so, this is a bug, you should not need to restart the server every time a file needs to be changed. If you can create a reproducable case, I can take a look at it.\n\nI'm going to try putting my deps into the the components folder but I won't have any gaurantee they are run in order, right? How could I make sure to define a missing file?\n\nRails Asset Pipeline has it's own workflow for requiring dependencies in order. If you add //= require underscore to the top of your component file, the Asset Pipeline will make sure that 1 instance (and only one instance) of underscore.js is included before your component, assuming underscore.js is in the Asset Pipeline's lookup path.\nWe're stuck with the Asset Pipeline, because that's what Basecamp likes. Theoretically, you could have a \"side build\" based around Node + g(ulp|runt), with components.js as your output target. So long as you made your top-level component globally available, ExecJS should be able to figure it out.\n. Speaking of \"side builds,\" it looks like @bogdan-dumitru in issue #120 has a pretty good build going.\n. Are you having problems with the react-rails tests, or your app's tests? In react-rails' case, the tests are filled with file rewrites to confirm server rendering and asset pipeline restarts, I am not surprised at all that they aren't thread-safe.\nHave you tested this on multiple platforms? I wasn't familiar with Dir.tmpdir, so I ran it on the envs I had handy:\nOSX, ruby 2.0.0:\nsh\nirb(main):002:0> Pathname.new(Dir.tmpdir).join(\"react-rails\")\n=> #<Pathname:/var/folders/8s/skdx5gfx55l330910j37pbsm39306s/T/react-rails>\nDebian 7 (via Virtualbox), ruby 2.1.2:\nsh\n2.1.2 :021 > Pathname.new(Dir.tmpdir).join(\"react-rails\")\n => #<Pathname:/tmp/react-rails>\nAm I missing something? Maybe we should just make the tmpdir configurable?\n. I am skeptical that anything that includes some sort of Flux library and runs arbitrary code per-request will have decent performance, given the current JS-from-Rails ecosystem. If it could be proven that response time wasn't significantly affected by this, I'd definitely change my mind.\nIMO, react-rails should focus on providing up-to-date versions of React for the asset pipeline, prerendering based on a given set of properties, and Rails-y helpers (methods, generators, and installers). Anything beyond that should be provided by external libraries.\n. I really want to help you solve this problem, it seems clear that it would help at least some people. I'm anxious, because once an API is accepted, it's very hard to get it out or change it, so I really think it's important to try to get it as close to \"right\" as possible.\n\nI still think the ability to isolate get a single JS context per request is crucial.\n\nMy gut feeling is that this will be a pretty complex undertaking. I'd love to see code that proves me wrong, though. The renderer code definitely needs some love!\n\nDo you have any benchmarking scenario to test against for baseline performance indication internally?\n\nI do not have anything automated, I will try to build one.\nWhat hooks into the renderer would be necessary to make this a plugin, rather than a core feature?\n. I think the best way to proceed is to make the default renderer a\nconfiguration option, so that this could be implemented as a separate gem,\ne.g. config.react.renderer = React::DefaultRenderer or\nconfig.react.renderer = FluxExperimentalRenderer\nOn Wed, Feb 25, 2015 at 3:12 PM, Bill DePhillips notifications@github.com\nwrote:\n\nOn the contrary, I'm still very interested in this issue. +1 to\n@bogdan-dumitru https://github.com/bogdan-dumitru 's suggested\nimplementation. Is this something that the maintainers want to implement or\nwould they prefer a pull request?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/143#issuecomment-76045788.\n. Same output, simpler syntax, :+1: from me\n. :+1: \n. Hi! Glad you're using react-rails. For future reference, this question is more appropriate for stack overflow, since it's a bug in your code, not react-rails itself.\n\nIf you look at the error you pasted, it tells you where the problem is:\n\nError: Parse Error: Line 30: Unexpected token .\n\nLine 30 is this line: {this.state.data ?  <PlayersRepresentation data={this.state.data} /> : null}\nThere are a couple problems here. You're getting a syntax error because you can't nest {} segments like this, it doesn't make any sense. Looking at your program logic, there's no case where this.state.data would ever return false or null, since getInitialState returns it as an empty object; therefore, the ternary operator is completely unnecessary. Lastly, it's not \"react-y\" to do this; you should always return an element, and you should always let that element decide what or how much to render based on passed-in props.\ntl;dr your return statement should look like this:\nreturn (<PlayersRepresentation data={this.state.data} />)\n. So, I finally got around to testing this, and I'm not sure that setting watchable_dirs is actually needed.\nWith a fresh Rails app, and both react-rails (master) and sprockets-coffee-react installed, I have no trouble in development mode getting cjsx files to auto-reload. New files and changes are both picked up on reload.\nAre you putting your cjsx files in app/assets/javascripts/components?\n. That works by default for me, too...\nThe railtie already does basically the same thing that you add -- https://github.com/reactjs/react-rails/blob/master/lib/react/rails/railtie.rb#L19-L21\nWhat version of Rails are you using? I'm thinking it's either a bug with our integration with previous versions of Rails, or a bug in your implementation.\n. Ahhh, I see, it's a prerender issue. I misunderstood, sorry!\nI'd rather not go down the path of \"documenting Rails features\" if we can help it. I think I would rather see a change to the railtie in the gem, maybe to watch .*jsx instead of .jsx - would that help?\n. I don't understand why you wouldn't just put this in the component itself?\nIt seems like splitting the HTML template up into two locations like this\nwould (a) break isomorphism, and (b) make things hard to maintain.\nIf you're trying to get some server-generated properties, e.g. i18n\ntranslations, into your component, it seems like it would be better to do\nthis via props that you pass in.\nOn Wed, Feb 4, 2015 at 10:36 PM, Dan Ott notifications@github.com wrote:\n\nUsage\n<%= react_component('FilterChildren') do %>\n  Some child HTML that you want to use in your component\nEven though we'll likely be using React's dangerouslySetInnerHTML property, it's better than writing jQuery and tracking down the magic classes and markup<% end %>\nIn your component, this.props.__html will be available. The value is the\nstring domNode.innerHTML, where domNode is the node being mounted on.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/reactjs/react-rails/pull/166\nCommit Summary\n- feat(ujs) Pass contents of content tag to React component.\nFile Changes\n- M lib/react/rails/view_helper.rb\n  https://github.com/reactjs/react-rails/pull/166/files#diff-0 (9)\nPatch Links:\n- https://github.com/reactjs/react-rails/pull/166.patch\n- https://github.com/reactjs/react-rails/pull/166.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/166.\n. Why not just use render and pass it in as a property?\n\n<% @records = SomeModel.all %>\n<%= react_component( 'RevealMoreChildren', { __html: render(@records) }) %>\n. Do you get the same error when you run bundle exec rails g react:install?\nIf you do get the same error, are you willing to post your Gemfile and\nGemfile.lock?\nOn Mon, Feb 9, 2015 at 2:16 PM, Mohamad El-Husseini \nnotifications@github.com wrote:\n\n@jjulian https://github.com/jjulian sorry, I didn't state that I ran bundle\ninstall because it seemed obvious, but I did run it, and it completes\nnormally.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/169#issuecomment-73570769.\n. @abitdodgy Hi, I spent some time looking into this. I think the issue is with spring. I have no idea if that's our fault, or spring's; I'm not very familiar with spring, and have always generated apps using --skip-spring, and thus haven't noticed this issue before.\n\nI created two brand-new rails 4.2 apps, one with spring, and one without. Only the one with spring showed this behavior.\n``` bash\nrails new react-with-spring\nrails new react-without-spring --skip-spring\ncd react-with-spring\necho \"gem 'coffee-script-source', '1.8.0'\\ngem 'react-rails', github: 'reactjs/react-rails', branch: 'master'\" >> Gemfile\nrm Gemfile.lock\nbundle install\nrails g\nerror message\ncd ../react-without-spring\necho \"gem 'coffee-script-source', '1.8.0'\\ngem 'react-rails', github: 'reactjs/react-rails', branch: 'master'\" >> Gemfile\nrm Gemfile.lock\nbundle install\nrails g\nno problem here\n```\nCan you try removing spring (both the gem and the binstubs) and see if that solves your problem?\n. Instructions for removing spring can be found here.\nI can confirm that removing spring via these instructions made my empty rails app work again.\n. I don't think http://gems.github.com exists anymore, and as of 1.8, the :github key appears to still be supported.\nWere you doing this to solve a specific problem? Can you provide a repro case?\n. You can pass an array as a prop, yes. You cannot pass an array as all the\nprops.\nreact_component's second parameter is expected to be either an object\nthat responds to to_json, or a string from an object that has already\nbeen transformed into JSON. For example, you could pass {:foo => \"Bar\"},\nor {:foo => \"Bar}.to_json. Either way, it expects the output to be a\nkey-value map that React can use as props.\nrender(template: \"some-jbuilder-template.json.jbuilder\") just returns a\nstring, which can be passed into react_component as the second argument.\nThis is a nice way to render more complex JSON than could be expressed\nnicely with #to_json, as well as reuse the JSON templates for both\npre-rendering and client-side fetching.\nThe note is to clarify that Rails default Jbuilder scaffolding for the\nindex view will have render(template: \"index.json.jbuilder\") return the\nlist represented as a flat array, not a map.\nAs an example, if you were hard-coding it, this would work:\n<%= react_component 'MyComponent', '{ posts: [ {id: 1, name: \"Post 1\"} ]\n}' %>\nThis would not work:\n<%= react_component \"MyComponent\", '[ {id: 1, name: \"Post 1\"} ]' %>\nThis second example is the default format that the Rails scaffold will\nrender to. Note that in the second example, we are just passing an array as\nthe props. React won't know what to do with that.\nIf you can think of a way to clarify the README on this, a PR would be\ngreatly appreciated!\nOn Wed, Feb 18, 2015 at 1:19 AM, noinkling notifications@github.com wrote:\n\nUnder \"Important Note\" in the readme there is some advice about Jbuilder\nreturning an array as the root:\nThis is not suitable for ReactJS props, which is expected to be a\nkey-value object. You will need to wrap your index.json.jbuilder node with\na root node...\nBeing new to React, I'm not exactly sure what this refers to, as I can\npass an array through as a prop just fine. Does it refer to setState()\nneeding an object? If so, could the explanation be made clearer about that\nbeing the reason? Or is there some other underlying reason?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/177.\n. :+1: This is much better, thank you!\n. > That's a backwards incompatibility though, maybe we should wait a bit\n\nI don't know if it would divide well along this line, but maybe you could have react_native_ujs and react_turbolinks_ujs, and have react_ujs just be a manifest that includes both?\n. I think spring has issues with gems installed directly from github\nTry stopping and uninstalling spring and running your app again.\nOn Wed, Feb 25, 2015 at 10:39 AM, roygold notifications@github.com wrote:\n\nHello, I'm struggling with a basic react-rails install in a simple/vanilla\napp.\nShort version:\nAfter an attempted install, Loading any page results in the error:\n\"couldn't find file 'react'\n  (in .../app/assets/javascripts/application.js:16)\ncoming from the second line of the extracted source below (from\napp/views/layouts/application.html.erb)\n<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>\n  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>\n<%= csrf_meta_tags %>\n\nAlso, if I try modifying config/environments/development.rb by adding\nconfig.react.variant = :development\nthen as soon as I start the rails server I get an error (personal paths\nchanged to ... below)\n$ bin/rails s -b 0.0.0.0\n=> Booting WEBrick\n=> Rails 4.2.0 application starting in development on http://0.0.0.0:3000\n=> Run rails server -h for more startup options\n=> Ctrl-C to shutdown server\nExiting\n.../.rvm/gems/ruby-2.2.0/gems/railties-4.2.0/lib/rails/railtie/configuration.rb:95:in method_missing': undefined methodreact' for #Rails::Application::Configuration:0x00000001a79d50 (NoMethodError)\n    from .../config/environments/development.rb:42:in block in <top (required)>'\n    from .../.rvm/gems/ruby-2.2.0/gems/railties-4.2.0/lib/rails/railtie.rb:210:ininstance_eval'\n    from .../.rvm/gems/ruby-2.2.0/gems/railties-4.2.0/lib/rails/railtie.rb:210:in configure'\n    from .../config/environments/development.rb:1:in'\n    from .../.rvm/gems/ruby-2.2.0/gems/activesupport-4.2.0/lib/active_support/dependencies.rb:274:in `require'\n...\nI have hit this with both 1.0.0.pre and 0.12.0, with no noticeable change.\nHere are the instructions I believe I've followed:\nhttps://github.com/reactjs/react-rails/blob/master/README.md\nHere's some info about what I'm running:\n$ ruby -v\nruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-linux]\n$ rails -v\nRails 4.2.0\nThis line is at the bottom of my Gemfile:\ngem 'react-rails', '~> 1.0.0.pre', github: 'reactjs/react-rails'\nAnd I ran \"bundle install\", and here's the relevant parts of the output:\nUsing react-source 0.12.2\nUsing react-rails 1.0.0.pre from git://github.com/reactjs/react-rails.git (at master)\nI also ran\nrails g react:install\nHere's the relevant portion of app/assets/javascripts/application.js\n...\n// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details\n// about supported directives.\n//\n//= require jquery\n//= require jquery_ujs\n//= require turbolinks\n//= require react\n//= require react_ujs\n//= require components\n//= require_tree .\nThe sample app works fine if I leave out the newly added \"require\" lines\nfrom application.js (or comment out javascript_include_tag line from\napp/views/layouts/application.html.erb).\nAny suggestions would be very welcome; as I mentioned, I also tried 0.12\n(based on the instructions here, and got the exact same results:\nhttps://github.com/reactjs/react-rails/blob/0.12/README.md )\nThanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/184.\n. Overall, I really like this PR.\n. AFAICT this will only watch files that exist when you boot your development server, new files added after that will not be watched. Wouldn't it make more sense to suggest watchable_dirs here?\n. Why not allow a silence flag, instead?\n\nruby\nt.verbose = ENV['SILENCE_WARNINGS'] != '1'\nt.warning = ENV['SILENCE_WARNINGS'] != '1'\n. I think, instead of doing the fragile \"copy file dance,\" this test should just rely on a new route and jsx file in the test app. Even something super specific, like /console_example.\n. :+1: making it a config option\n. ",
    "mschulkind": "This should probably be closed now?\n. Does any other UJS stuff execute on page load? I think that's part of the\nproblem here.\nOn Mon, Sep 15, 2014 at 7:19 PM, Robert Mosolgo notifications@github.com\nwrote:\n\nTo me it seems outside the scope of Rails-y UJS. Historically, Rails UJS\njust gives behaviors based on options in your template (eg remote: true, method:\n:delete, data: {confirm: \"...\"}). I'm not aware of other UJS APIs that\nyou call in javascript (except maybe Turbolinks.visit, if that counts [image:\n:stuck_out_tongue:] ).\nIn my opinion it's not a good fit, especially considering that this is\nwhat React.renderComponent and React.unmountComponentAtNode are for.\nHowever if others would use this, maybe I'm wrong!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/91#issuecomment-55673495.\n. Yes, I'm dealing with server-loaded, rendered with the view helper, just\nnot available at DOM ready.\n\nOn Mon, Sep 15, 2014 at 7:24 PM, Paul O\u2019Shannessy notifications@github.com\nwrote:\n\n@rmosolgo https://github.com/rmosolgo I guess the use case isn't 100%\nclear. I understood it that there were server-rendered things added to the\npage (I guess via something that isn't turbolinks) and he basically needs\nto rescan for things added. In that case, piggybacking on the existing\ninfra seems fine BUT I'm not in the Rails world and don't know where people\nare drawing the UJS line.\nBut if this is meant to cover what you would normally do with\nReact.renderComponent from your own JS that isn't server-rendered then I\nwould probably agree that this doesn't fit.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/91#issuecomment-55673884.\n. Not 100% what I'm doing, but functionally equivalent here.\n\nOn Mon, Sep 15, 2014 at 7:31 PM, Robert Mosolgo notifications@github.com\nwrote:\n\nYeah, I don't quite understand the use case either. @mschulkind\nhttps://github.com/mschulkind, how are you rendering with the view\nhelper, but it isn't there at DOM ready? Does that mean the HTML is fetched\nby AJAX, then inserted into the document?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/91#issuecomment-55675412.\n. Thanks for considering and looking into this.\n\nWhile that may work, isn't that adding an awful lot of dependencies to your code? You're now dependent on turbolinks event names, the way react-ujs hooks into turbolinks, and the attribute name that react-ujs uses to mark react components. You also rely on javascript performing correctly when 'page:load' is triggered multiple times, which doesn't seem terribly safe.\n. It is a function, but it's not a proper event handler. If I don't wrap it like this, the event gets passed in as the rootNode.\n. gone.\n. ",
    "XyuWang": "I still get the problem when add a component, but I find a way to resolve this. \n by adding  config.watchable_dirs.merge!({\"#{Rails.root}/app/assets/javascripts/**/\" => ['jsx']}) to development.rb\n. ",
    "arBmind": "Without this PR no content is added to the output buffer of the view in Rails 4.1.4. I have not done tests in any other version of Rails. The present tests cover this. Unfortunately the tests are extremely flaky. Travis could be extended to cover Rails 4.1.x\n. I cancel this pull request, in order to work against my master again.\n. ",
    "charypar": "Any update on this? Is there anything we can do? We'd like to switch back to the mainline repo (currently using @sjltaylor's fork).\n. ",
    "sjltaylor": "@spicyj Do you mean something like this: https://github.com/reactjs/react-rails/pull/67 ?\nThe disadvantage is it wouldn't be included in ActionView::Base if ActionView::Base was loaded later \n. @xionon, great suggestion, thanks. Like this then: https://github.com/reactjs/react-rails/pull/68\n. :shipit: \n. @xionon The blocks context is ActionView::Base: https://github.com/reactjs/react-rails/pull/74\n. I'm currently testing this in a Rails 4 app\n. ```\nFrom: /vagrant/react-rails/lib/react/rails/railtie.rb @ line 25 :\n20:       end\n21:\n22:       # Include the react-rails view helper lazily\n23:       initializer \"react_rails.setup_view_helpers\" do\n24:         ActiveSupport.on_load(:action_view) do\n\n=> 25:           binding.pry\n    26:           include ::React::Rails::ViewHelper\n    27:         end\n    28:       end\n    29:\n    30:       # run after all initializers to allow sprockets to pick up react.js and\n[1] pry(ActionView::Base)> \n``\n. The blocks context isActionView::Base`; this works\n. The lazy load feature was introduced in Rails 3 (http://simonecarletti.com/blog/2011/04/understanding-ruby-and-rails-lazy-load-hooks/)\n. ",
    "klebershimabuku": "Hi @xionon, I like the idea of having this kind of generators, specially this one for scaffold.\nMaybe we could have something like an unique scaffold generator for both rails and react.\nAssuming react is installed, maybe generate the react scaffold files when running the rails generate scaffold command and generate all the necessary files with just one single command line.\nWhat do you think?\n. Good question about the front-end routing. I would like to hear from others about this.\nflex-rails is a very nice name for a gem. ;)\n. @adoseofjess I think it is the way you require and not about the file location.\nTry something like:\n//= require path/to/your_lib/greeter\ninstead of:\nvar add = require('./greeter');\n. ",
    "atipugin": "I think it would be better to release it as a separate gem. Anyway, i totally up for it, as i had similar thoughts about Rails-specific components.\n. I made a few changes that makes it totally optional and handles nested hashes.\n. Added stub for Rails.configuration, so config changes won't affect other tests.\n. ",
    "eliotsykes": "@xionon I'd be interested in seeing any work-in-progress code for these helpers, they sound useful.\n. ",
    "oguzbilgic": "I am also working on something similar. But the real issue is input naming, and nested attributes! I would love to hear if you guys found a solution to this.\n. I would suggest you to install React Developer tools for Chrome [0] and just go explore how other people structured their components such as anyroad.com or even facebook.com :) \n[0] : https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en\n. :+1: for coffescript 1.9.0 support.\n. ",
    "danott": "This is an awesome idea. :+1: \n. This may be a terrible idea... but for the server side, what about an API that looks similar to the familiar form_for Rails helper?\nerb\n<%= react_form_for @comment, 'CommentForm' %>\nThis would exist for the purpose of passing all the props that a <Rails.form /> component may need. It may generate something like:\nhtml\n<div data-react-class=\"CommentForm\" data-react-props=\"{ RailsForm: { action: '/comments', csrfToken: 'foo', etc: '...' }, object: { comment: 'properties', would: 'be here' }\" />\nIn my initial thinking, the object key would have @comment.to_json. And if that isn't what you want, a third optional parameter could be passed, to explicitly state object props.\nThen, on the component side, we can use Rails components to build forms in a familiar way, adding behavior as we need it.\n```\nvar CommentForm = React.createClass({\n  propTypes: {\n    RailsForm: React.PropTypes.shape({\n      action: React.PropTypes.string.isRequired,\n      csrfToken: React.PropTypes.string.isRequired,\n      isNewRecord: React.PropTypes.bool.isRequied,\n      errors: React.PropTypes.arrayOf(React.PropTypes.object),\n    }),\n    object: React.PropTypes.object.isRequred,\n  }, \nrender() {\n    \n\n\n\n  },\nhandleTextChange() {\n    / validate? /\n  }\n})\n```\n. I spoke too soon. This didn't resolve my issue.\n. @blainekasten that's a really good separation of reusable components and the views that utilize them!\n. Something to note from upstream in React world... during the QA at React.js Conf, it was mentioned that server-side rendering, while awesome, was not one of the chief design goals of React. It doesn't look like the video of the QA session is up yet. Just something to note as we consider performance when it's wrapped in Ruby.\n. There was a great talk at React.js Conf this past week on this very topic.\nIn the specifics of rails, I'd imagine having some kind of JavaScript object that holds your translations, then referencing those by key in your components.\nGenerating the object from the existing translations yaml would be doable.\n. @rmosolgo we can probably move this conversation to https://github.com/reactjs/react-rails/issues/128\n. I work side-by-side with @rmosolgo, and it's definitely usable in a team environment. The minimal surface area of the react_component helper  and react_ujs for mounting is easy to wrap your head around.\nLet us know if you run into any pain points along the way!\n. @xionon an example of the concept.\nIn Rails, this might look like\n``` erb\n<% @records = SomeModel.all %>\n<%= react_component('RevealMoreChildren', { begin: 4 }) do %>\n  <%= render @records #using partials %>\n<% end %>\n<% @other_records = SomeOtherModel.all %>\n<%= react_component('RevealMoreChildren', { begin: 2 }) do %>\n  <%= render @other_records #using partials %>\n<% end %>\n```\n\nThe use case is that I don't want to write a custom component for every list of items that might be wrapped by RevealMoreChildren. As noted in the PR, having react handle this rather than magical class names and markup is a win over jQuery soup, but it's a loss if we are writing a component for every use case of a simple behavior.\n. I like the explicitness . That's definitely a workable solution for rendering another partial.\nTrying to think about how to pass in the param for a non-partial content tag.\nerb\n<% html_prop = capture do %>\n  <h1>Arbitrary markup</h1>\n  <p>It could be huge</p>\n<% end %>\n<%= react_component( 'RevealMoreChildren', { __html: html_prop }) %>\nThat works, but doesn't read as nice.\n. I've come around to thinking this is not a good idea to include in the main helper. I've created a helper in my app that does what I need.\n. @nicolas-besnard Absolutely! It's a thin wrapper around react_component\n``` ruby\napp/helpers/react_helper.rb\nmodule ReactHelper\n  def react_component_with_content(name, args = {}, options = {}, &block)\n    args[:__html] = capture(&block) if block.present?\n    react_component(name, args, options, &block)\n  end\nend\n``\n.window.HelloWorld = React.createClass()should get you there. You need to do this because CoffeeScript in Rails automatically executes each file in the context of an immediately invoked function to protect the global scope.\n. :+1: on usingdata-remote=\"true\"and letting Rails UJS handle it.  Works just fine.\n. :+1: I've found myself reaching for this exact behavior multiple times. \n. @rmosolgoreact_ujshas affordances forTurbolinks. Would it mitigate some of these issues to provide the same for [Rails jQuery UJS events](https://github.com/rails/jquery-ujs/wiki/ajax#custom-events-fired-during-data-remote-requests)? (ajax:complete`, etc.)\n. The more I revisit it, the more it's clear there's nothing to be gained.\nIf you use data-remote=\"true\", and the response directly manipulates the page (say from a create.js.erb template), no ajax:complete event is fired.\nIf you're listening to the ajax:complete event, you're manipulating the page yourself.\nSo either way, a manual triggering of ReactRailsUJS.mountComponents() would be necessary.\nSuggestion officially redacted.\n. @arunthampi I asked a question on your gist. The coffee can be compiled to JavaScript just fine, but still result in runtime errors.\n. :+1: This will be super helpful!\n. Using https://rails-assets.org/ for external libs has worked well in my practice. The caveat being, those packages have to be on bower.\nThe approach I've started taking for things that are not on bower is to build my own browserify'd or webpack'd version of the other component. A readme for how to do that could be a interim solution.\nOthers' mileage may very, but overall, sticking with Sprockets has been the happiest path I've taken. I've tried browserify-rails, and also built my own webpack_rails solution, but at the end of day, embracing Sprockets with all it's warts works wonderfully if I accept the trade-offs.\n. Someone else can correct me if I'm wrong, but I understood that the motivation is so that multiple calls to ReactRailsUJS.mountComponents don't clobber an already mounted component. If, for instance, an ajax call adds some content to the page, and a call is made to ReactRailsUJS.mountComponents, the minimal number of React.render calls are needed to get the DOM to the desired state.\n. Great work! :100: \n. For es6 style imports and exports, you might be interested in checking out Shopify's sprockets-commoner.\n. @rmosolgo I think I figured it out. The test would only work in Sprockets::VERSION == \"3.0.0\" and up. Sprockets below that version doesn't pass anything useful, so I had to shim the test for now.\n. I still think this feature would be useful. Being introspective, 9 months of me not resolving the failed tests and shepherding this to master has communicated to myself that I don't need this feature as badly as I thought I id. If someone else needs this feature and wants to pick up the code and run with it, feel free to!\n. @kaushik-sundar I was trying to do something similar much earlier in the life of this project. This code may not work now, but you can see how I proposed accomplishing it in this old pr\n. @rmosolgo I believe this can be closed now that #551 has been merged?\n. I also prefer the not-checking-arity route. With the go-ahead to make a breaking change, I'll change the implementation to what you suggested!\n. It shall be removed!\n. ",
    "badenkov": "I also have similar ideas, i posted its here https://github.com/badenkov/react_form_rails\n. ",
    "filp": "While it's a nice idea, it'll be a pretty big BC break, and it does not handle multi-level hashes (we use serializers on some of our components, for example, that go a couple of levels deep).\n. ",
    "glittershark": "So is the issue here actually that trying to render an identical component to a node twice isn't working properly for this version of React?\n. @zpao that does it!\n. @rmosolgo I agree that this smells a bit, but I can totally see the argument for having the 'reference' argument be in the view helper, since it makes things more modular (aka I might have a component that exists in several views but I want to have a different reference name for each of those views)\n. To add my anecdotal evidence to the conversation,  we just deployed a change to our production (heroku) app adding prerendering for all of our react-rails components - load time shot up to 35 seconds (yes, seconds) on pages that had a lot of React components, and we had to roll it back. Going to try this out with therubyracer and see if it's the case still\n. Sure this is covered over there, but I can definitely confirm that using therubyracer cleared the performance problem right up. It doesn't look to be using that much more memory, either\n. Per my comments on #222, I'm definitely throwing my weight behind officially recommending therubyracer on MRI. Should definitely throw in a note there saying that you should do it even though the Heroku docs say not to, to avoid chumps like me thinking one suggestion overrides the other.\n. ",
    "olance": "@jakubmal no worries, I do not have much free time on hand either ^^\nSo yes, I'd like to finish this PR, just let me know: would you go with an example test too? Do I need to rebase the PR?\n. :+1: \n. Thanks for all the comments @zpao (and for your help on IRC ^^), I'll correct and push again shortly.\n. There you go @zpao :)\n. @zpao, has @jwietelmann's objection been taken into account?\n. Maybe this article could help you out: https://medium.com/@olance/rails-react-browserify-e315001d5974 ?\n. After some (painful) digging into V8 trycatch objects, I found the full trace of the error that is triggered:\nReferenceError: document is not defined\n    at getActiveElement (<eval>:16383:12)\n    at ReactReconcileTransaction.ReactInputSelection.getSelectionInformation (<eval>:10247:23)\n    at ReactReconcileTransaction.Mixin.initializeAll (<eval>:15477:30)\n    at ReactReconcileTransaction.Mixin.perform (<eval>:15442:12)\n    at ReactUpdatesFlushTransaction.Mixin.perform (<eval>:15443:20)\n    at ReactUpdatesFlushTransaction.assign.perform (<eval>:13655:38)\n    at Object.<anonymous> (<eval>:13734:21)\n    at Object.wrapper [as flushBatchedUpdates] (<eval>:12400:21)\n    at ReactDefaultBatchingStrategyTransaction.Mixin.closeAll (<eval>:15516:42)\n    at ReactDefaultBatchingStrategyTransaction.Mixin.perform (<eval>:15457:16)\nThis stack matches what I can find around line 16383 in the full V8 evaluated script:\njavascript\nfunction getActiveElement() /*?DOMElement*/ {\n  try {\n    return document.activeElement || document.body;\n  } catch (e) {\n    return document.body;\n  }\n}\nAt the top of this script I've got confirmation React is up do date:\njavascript\n/**\n * React v0.12.2\n */\nHere's the componentWillMount function of my component:\n``` javascript\ncomponentWillMount: function() {\n        var self = this;\n    // Dispatch initial state\n    appContext.dispatchInitialState(this.state);\n\n    if(canUseDOM)\n    {\n        Router.run(routes, Router.HistoryLocation, function(Handler) {\n            var state = self.state;\n            state.routeHandler = Handler;\n            self.setState(state);\n        });\n    }\n},\n\n```\n... where canUseDOM is:\njavascript\ncanUseDOM = require('react/lib/ExecutionEnvironment').canUseDOM\nSo is it some sort of revival of facebook/react#1866 or have I done something really bad?\n. Hey @zpao thanks for the feedback :)\nYou're right I haven't given much info, I focused on the setState whereas it's indeed never called on the server...\nSo yeah, removing the block keeps the \"bug\" on. However removing the appContext.dispatchInitialState will indeed fix it.\nHere's what's going on with my appContext. It's an instance of a Context class which encapsulates a Dispatcher instance from the Facebook Flux library. Stores are registered with that context object and against the Dispatcher instance using the messageHandler method as a dispatch callback.\nHere's the full Context class:\n``` coffeescript\nDispatcher = require('flux').Dispatcher\nBaseStore = require('./base_store')\nActionTypes = require('../constants/common').ActionTypes\nclass Context\n  constructor: ->\n    @_dispatcher = new Dispatcher()\n    @dispatch = @_dispatcher.dispatch.bind(@_dispatcher)\n@_stores = {}\n\n## Store-related methods\n  registerStore: (store) ->\n    throw new TypeError('store is not an instance of BaseStore') unless store instanceof BaseStore\n    throw new Error('A store with the same name is already registered') if @_stores[store.name]?\n# Register the store locally and its message callback against the dispatcher\n@_stores[store.name] = store\nstore.dispatchID = @_dispatcher.register(store.messageHandler.bind(store))\n\nunregisterStore: (storeOrName) ->\n    name = if storeOrName instanceof BaseStore then store.name else storeOrName\n# If a store can be found, unregister it from the dispatcher and remove it from our local list\nstore = @_stores[name]\nif store?\n  @_dispatcher.unregister(store.dispatchID)\n  delete @_stores[name]\n\nfindStore: (storeName) -> @_stores[storeName]\n## Dispatch the initial state object to all registered stores\n  dispatchInitialState: (state) ->\n    @dispatch({\n      type: ActionTypes.INITIAL_STATE\n      data: state\n    })\nmodule.exports = Context;\n```\nMy context is initialized before the instantiation/mounting of the AppRouter component takes place:\n``` javascript\n// Create new context for the app\nvar appContext = new Context();\n// Register stores on the new context\nappContext.registerStore(new PostStore());\n```\nSo, dispatchInitialState just dispatches my initial app context to all registered stores using Disptacher#dispatch which I guess you know/have access to.\nMy only store at the moment being the PostStore, the end of the execution flow from dispatchInitialState will surely be in PostStore#messageHandler or within Dispatcher's own post-dispatch code. Here's the message handler:\n``` coffeescript\nmessageHandler: (payload) ->\n    switch payload.type\n  # App initialization: get the initial list of posts\n  when ActionTypes.INITIAL_STATE\n    @_posts = _.clone(payload.data.posts) if payload.data.posts?\n\n  else return true\n\n@emitChange()\n\ntrue\n\n```\nI thought _.clone could be a cause but the problem still reproduces when I remove it.\nLast thing to note probably is that a Store is a subclass of EventEmitter and that emitChange is:\ncoffeescript\nemitChange: -> @emit(Events.CHANGE)\nThat's it. I hope that's enough information? ^^\nI'm happy to give more if needed!\n. Oh, \"quick\" update...\nI was just noticing that there's no reference to document anywhere in Dispatcher too, so I figure the \"bug\" is just a side effect of dispatchInitialState being called.\nWhat's happening if it is? Well, the PostStore gets populated with initial posts to display, hence my PostsList and Post components come in!\nThe Post component is just a static component really, all it does is displaying props.\nPostsList however registers to changes events from the PostStore and I tracked the bug down to its origin. Here's the PostsList component:\n``` javascript\nvar PostStore = require('../stores/post_store'),\n    Post = require('./post');\nfunction stateFromStores() {\n    return {\n        posts: PostStore.allPosts()\n    };\n}\nvar PostsList = React.createClass({\n    getInitialState: function() {\n        PostStore = this.props.context.findStore('PostStore');\n        return stateFromStores();\n    },\ncomponentWillMount: function() {\n    PostStore.addChangeListener(this._onChange);\n},\n\ncomponentWillUnmount: function() {\n    PostStore.removeChangeListener(this._onChange);\n},\n\n_onChange: function() {\n    // Uncommenting the following line would raise \n    // \"ReferenceError: undefinedFunction is not defined\"\n    // undefinedFunction();\n    this.setState(stateFromStores());\n    // Commenting back the call above and uncommenting this one,\n    // the error is \"document is not defined\"\n    // undefinedFunction();\n},\n\nrender: function() {\n    var posts = this.state.posts.map(function(post) {\n        return <Post key={post.id} post={post} />;\n    });\n\n    return (\n        <div className=\"posts\">\n            {posts}\n        </div>\n    );\n}\n\n});\nmodule.exports = PostsList;\n```\nSo it looks like the call to setState from the _onChange callback is the cause of the problem.\nThere's one thing I don't quite get though... when I leave one of the two undefinedFunction calls in _onChange, the first time my page is loaded, I do not get any error about undefinedFunction being undefined.\nI guess it makes sense because the initial app's state has been dispatched to the PostStore before the PostsList component was ever mounted, so with my app as it is, the store never changes and never posts any other change event. Meaning _onChange wouldn't be called.\nHowever on the second load of the page, an error will be raised and it will be raised from _onChange. Is there some kind of cache of the React app on the server-side that would keep my objects alive and have _onChange be called on the second time the dispatchInitialState function is called? I'm must say I'm a bit lost here!\n. I've been digging inside React's code a bit trying to trace/find the problem. I'll shamelessly admit I'm quite lost in there :P \nHowever in ReactUpdates, it seems to me the fix that had been brought for facebook/react#1866 has been lost? Well at least the whole \"allUnmounted\" check is gone, but maybe that's what the asapEnqueued thing is about? (As you can see I don't get much of what's going on in there :)\nI figured I wouldn't pollute the main repo issues/PR with this, but could that be the source of the problem?\n. Hey, thanks @ConradIrwin :)\nActually, I have already removed //= require react but I still have //=require react_ujs (in application.js).\nI could try removing it, although I do need it to mount my components on the client side... how do you do it?\n. Thanks for the details @ConradIrwin :)\nI have not tested yet but given my trace/analysis of the problem, I'd say that's not my issue indeed.\nHowever I will check and report back for good mesure ^^\n. @ConradIrwin my setup is already similar to what you've done, so that's definitely not the problem.\n@zpao don't my explorations help a bit at identifying the problem?\n. @ericclemmons from what I've understood, setState is designed to run on the server, and its failing should be considered a bug.\nThe link you gave implies that, and it is confirmed in facebook/react#1866 in these comments by @petehunt and @spicyj \n. @zpao for what it's worth, I just found that this bug doesn't reproduce when using Node as an ExternalRuntime for ExecJS instead of therubyracer.\n. Well of course it worked @navela, componentDidMount() is not called on the server side :)\nIt didn't really \"fix\" anything though! ;)\n. Ok ^^\n. ah, I wasn't even aware there was a Formula on Homebrew for PhantomJS :)\n(and I'm a rubyist ^^)\n. ah, that was my feeling too ^^\n. ",
    "jwietelmann": "Can I register a dissenting opinion after-the-fact? There's a lot of code out there using:\nif(typeof(window) !== 'undefined')\nTo make sure that code that can't work server-side will only run client-side.\n. ",
    "felixbuenemann": "Can't you just add a note with the minimum required turbolinks version to the README?\nThere is no hard dependency between rails and turbolinks, so it can be upgraded quite easily.\nIt would be possible to detect the turbolinks version using a js.erb file which could get either the gemspec version or the Turbolinks::VERSION constant added in 2.2.1, but it would add a dependency on sprockets, so I'm not sure it's worth it.\n. I've signed the CLA, not sure why the bot isn't posting that. I've mailed cla@fb.com for clarification.\n. Btw. this also seems to be fixing a checksum error I was seeing with server side rendering in IE8.\nBefore this change I was getting the following error when refreshing a pre-rendered component using js:\n\nReact attempted to use reuse markup in a container but the checksum was invalid. [...]\n. @jakubmal What would you test? You could stub out Turbolinks.supported to simulate an unsupported browser, but I'm not sure that would be that useful.\n. Thanks, @rmosolgo!\n. \n",
    "lowski": "+1 I have the same issue.\nRight now the only solution I came up with includes copyProperties file in my project.\n. Using Browserify outside of Assets Pipeline sounds good but how you debug your application then? Do you generate a source map alongside that bundle?\n. ",
    "remyyounes": "I ended up dropping sprockets.\nFor now, we're packaging all our React stuff with NPM and we import the output bundle from our main application.js file.\n. ",
    "richsoni": "@remyyounes are you handling isomorphism with this solution?  I already have a similar stack, but have not solved that yet. \n. ",
    "mczepiel": "I think I've stumbled into this same problem myself trying to use CommonJS modules.\nI pulled my react app out of the asset pipeline and am browserifying and reactifying it on the side.  I now include the resulting bundle.js alone inside the application.js manifest and rely on react-rails for the view helper and react_ujs alone*\napplication.js\n//= require bundle\n//= require react_ujs\nAs a wrinkle/legacy solution I have kept react_ujs in place and modified it to look for React and MyComponent, not within window, but within a configurable namespace so I can:\nbrowserify index.js --standalone MyApp -o app/assets/javascripts/bundle.js \nmodule.exports.React = require('react');\nmodule.exports.FooApp = require('./components/foo/App.react');\nmodule.exports.BarApp = require('./components/bar/App.react');\nand find MyApp.React and MyApp.FooApp from react_ujs.js after the bundle has loaded:\n(function(document, window, namespace) {\n  ...\n  var React = namespace.React;\n  ...\n  var constructor = namespace[className] || eval.call(namespace, className);\n  ...\n})(document, window, <%= Rails.application.config.react[:standalone_namespace] || 'window' %>);\nI'm not sure if this is doing more harm than good at the moment though, I could just code each top level App I have to look for its own DOM node and skip react_ujs but I figured not including that would help me with server side rendering.\n*Pre-rendering was the main reason I pulled the react app out of the asset pipeline; I couldn't figure out how to get the exejc or commonjs.rb runtimes working within the existing prerenderer without hacking up execjs itself to pass along the require. \nI'm tempted to patch react-rails's prerendering to optionally use an external service\nDoes a nodejs react-component-rendering project exist already?\nDoes any of this sound like a worthwhile direction? I'm just getting back into rails and am new to react.\n.  To be honest I've invested more time in getting this all working than building an app worth debugging :-/ \nBut yes, I have my watchify task generating sourcemaps with the --debug flag. \nThere are certainly more moving parts this way but I don't know enough of about the ecosystem to understand how commonjs support will arrive.\nFWIW I think I also had rails-browserify working at one point which I think was fine for the client side but didn't change the situation on prerendering at all.\n. Oh and hmm found this and it does indeed work, with some tailoring: \nhttp://stackoverflow.com/questions/26048771/render-react-components-from-php\nI might just put this in place myself locally and keep an eye out for any more polished solutions.\nEDIT: Well that works fine just added node-jsx and replaced the prendering with an HTTP call to the node server and I have server side rendering and with the aforementioned mess I've made above I have it working in the client side as well. Not sure this was worth it though\u2026\n. Yep, actually cleared up much of the customization of react_ujs by having browserify --require react and then just var React = require('react') works as expected.\nThe call to the node service is a couple lines of code in the renderer. So far, so good; I am now requiring react and not including it via a script tag and server side rendering works fine. I can do work to make it available to others if anybody is interested, but it's a little ~~hacky~~ customized right now.\n. ",
    "superplussed": "Can anyone speak to whether @jakubmal's suggestion or something similar is on the roadmap?  I love the integration with Rails but this is an issue I keep running into.\n. ",
    "RSO": ":+1: \n. ",
    "HurricaneJames": "No clue what the problem was. I deleted the file, checked it back out of the git repo, and it auto-magically worked...\n. I completely forgot that I created this issue. I ended up figuring out how to make react-rails and browserify-rails work together. I wrote a whole article about it on reactjsnews.com. This setup allows our team to use JEST for unit testing. It also works fine with our cucumber tests, but those are run through selenium/FF instead of PhantomJS.\n. ",
    "pboling": "Yes, please! :+1: \n. This is great! :+1: \n. I agree, testing for truthiness is almost always more appropriate.\n. :+1: \n. Travis build is finished and passed... not sure why github isn't reporting that correctly.\n. I'll try to get to this in the next week or so.\n. Building a better boat here: https://github.com/pboling/react-rails-benchmark_renderer\nIt requires the ServerRendering refactor, so please release it soon!\n. :+1: \n. ",
    "atandon": ":+1: \n. ",
    "arnemart": "Any chance of getting this merged, or getting a feature similar to this? It really is super useful.\n. @rmosolgo \n\nwhy not put something in your componentDidMount hook?\n\nHaha, way to make me feel like a right nitwit. I actually did not think of that.\n. ",
    "willcosgrove": "@rmosolgo Shouldn't you be over at batman.js? :wink: \n. Yeah I agree, it probably isn't going to fly; jamming a particular flavor of flux down everyone's throats.  But I don't think this necessarily needs react-rails to know which flux implementation you're using.  It just needs to pass a store into a component.  It doesn't care what API the store has, just that one exists.\nBut, if we were to pick a particular implementation of Flux (or roll our own), then react-rails could do a lot more.  It could be in charge of taking the serialized data in the controller and loading them into the stores (a bit of a stretch, but I can dream), then passing those stores to the components.\nBut I think most people will agree that keeping react-rails as simple as possible is the right route.  And to that end, I think just allowing you to pass a javascript object into a component as a property would be a great first step.\n. @rearadmiral I'm with you.  Right now, without server rendering, I'm sending my JSON through gon.  Then I have this\n``` coffee\ninitialize_stores.coffee\nActions.initialDataLoad(gon.records)\n```\nThis fires an initialDataLoad action, which my stores listen for:\n``` coffee\nuser_store.coffee\nclass UserStore\n  onInitialDataLoad: (data) ->\n    if data.users?\n      @records = data.users\n```\nI feel like there should be some way to seed some kind of initial data into the server rendering runtime, then you could have a store_initializer file that loads right after your flux/stores/actions which calls that initialDataLoad action.\nI don't know how I would handle this if I was maintaining react-rails.  You could either buddy up with Gon, as it does a pretty good job at the simple task it performs.  And if the react-rails gem detects Gon, it will pass through the gon variable into the server rendering runtime.  OR, you could reimplement the same basic functionality as Gon, and use that.\nI'm not crazy about either approach though.  Like I said above, I think the goal is to try and keep this as simple as possible.  This task might be better suited to a currently nonexistent flux-rails gem...  Let's build it!  We can do it in two weeks!\n\n. This looks great!  I'll have to check it out tomorrow and see if I can use this API to build out something from my original example in #143.\n. I think this needs to be\nrb\ndef config\n  Webpacker.respond_to?(:config) ? Webpacker.config : Webpacker::Configuration\nend\nBecause even in Webpacker 3, the Webpacker::Configuration constant is defined.. ",
    "rtorr": "Looks like the gem has been published? https://rubygems.org/gems/react-rails\n. @zpao Is the server rendering going to still be a thing? (hoping so)\n. Would it be possible to have a separate browserify bundle // required in as a top level component, then all of the require/module problems go away?\n. ",
    "grahamcracker": "Right, didn't realize that would affect tests. Will do.\n. Tried to update the tests, but the build is failing because of some issue in calling React components directly - perhaps someone more familiar with the internals can help out? I assume these errors are related to a deprecation introduced in 0.12.\n. Ok, I looked into the code a bit more and found out where the deprecated calls were coming from. The tests seem to be passing so let me know if there's anything else that needs to be done.\n. I didn't edit them manually, they were added by appraisal.\n. ",
    "mikesea": "ping :)\nthank you for this project!\n. If you're just using the asset pipeline, I found a solution.\nThis does not work:\njs\nrender: function() {\n  return (\n    <img src=\"<%= asset_url('path/to/image.png') %>\" />\n  )\n}\nThis did work (wrap the src prop in braces):\njs\nrender: function() {\n  return (\n    <img src={\"<%= asset_url('path/to/image.png') %>\"} />\n  )\n}\n. So, tests fail when adding a Sprockets 4 gemfile, which seems to be due to a few things:\n- Missing the new app/assets/config/manifest.js file in the dummy app. \n- Chaining processors (e.g., .coffee -> .jsx -> .js) seems to have changed in Sprockets 4. I'm not even sure it's possible to support coffeescript the same way it's done now. For example, Sprockets 4 will write the components/Todo.js.jsx.coffee file to components/Todo.js.jsx.js. At that point, the file still needs to be JSX transformed. I tried a few things (like registering another mime-type to process these files through the JSX processor), but nothing seemed to work.\n- ReactTest#test_the_development_version_with_addons_is_loaded:\n  NoMethodError: undefined method 'pathname' for #<Sprockets::Asset:0x007fd3390b3c68>\n- A few of the server rendering tests fail as well.\nThat said, using react-rails as it exists today on Sprockets 4 does work in some cases. I'm hesitant to drop support entirely, especially for anyone that might be getting by, but there's a good amount of work necessary to make all of these tests pass. \n. How about this: I'll add the gemfiles for sprockets 4, update .travis.yml and allow failures only for the sprockets 4 builds, and add a note to the readme that says Sprockets 4 support is \"use at your own risk\" for the time being. I'd love to help with Sprockets 4 support, but I think it's okay to punt on that for the moment.\n. @rmosolgo done!\n. @rmosolgo Anything else I can do to get this merged?\n. Thank you!\n. Something weird is happening because the Rails 5, no Sprockets build also failed. I'm looking into it.\n. Travis should ignore the Rails 3.2 failures now. I also encountered an issue with one of the Rails 5 builds, which should be fixed.\nThe rails_5_no_sprockets.gemfile tries to test behavior of the gem without Sprockets. Turbolinks 5, however, seems to have an implicit dependency on Sprockets. The line here: https://github.com/turbolinks/turbolinks-rails/blob/master/lib/turbolinks.rb#L17 will try to add the turbolinks source to the list of precompiled assets, but config.assets is only defined when sprockets/railtie is required. To workaround that, I added require: false to the turbolinks dependency in the rails_5_no_sprockets.gemfile Gemfile.\n. @rmosolgo Travis build is passing now, thanks!\n. @rmosolgo ping :)\n. ",
    "tomvleonard": "This was actually a problem on the server itself. The react-rails gem was missing.\n. Unfortunately, I don't recall the specifics. It was likely a human-caused problem related to RVM and Bundler. E.I. Someone tried to fix A and broke B.\n. ",
    "constmontague": "@tomvleonard having a similar issue. Do you remember why react-rails gem was missing on your server? \n. ",
    "brentvatne": ":+1: for this feature\n. ",
    "kimf": "You do it inside the main component. Exactly the same way as your first example. \nreact_component('App')\n. ",
    "jarsbe": "@kimf Oh duh! Thank you.\n. ",
    "conceptualitis": "No problem!\n. ",
    "azhuravlev": "If work with Gon, it escapes variables and puts them into script, as you wrote and return only script content for more than one variable, so you can send to context more than one variable, or function and use them later in server rendered component.\n. 1. Passing data with prop - good idea, but if you have some global data for all components - it's not so good. In this case we should send same set of variables to many components/\n2.  Jamming ruby values to context script also good idea, but in this case we should thought about namespaces and other things, that Gon do.\n. We use Gon, and can't pass any globals when render react component on server, using common functionality.\nAnd if you have many global props, i guess it's not good idea to pass them to all children\n. Ok, I have some components that using others, and them use global data such as user city, sales cities and some other global vars that cached and send with Gon from different places. And i haven't any global component, that can share props. \nI don't want React to manage that data in parent components, because components that using global data - only small building blocks and can be used in different places.\n. I don't add globals to all components, only there they needed, and only during serverside rendering.\nthis is done for structure like this:\ncomponent1(no globals) -> component2(no globals) -> component3(use globals)\ncomponent4(no globals) -> component3(use globals)\nI think it's not good idea to pass globals as props to component1 or 4, then render them on server\n. ",
    "robrobbins": "I see. My use case is a bit different: In an app using a router (Backbone.Router for example) you will have instances where your pushState URL is rendered via the server (a cold refresh) but then is handed to the client. When navigating away I want the components (as well as the then empty data-react-class wrappers) removed from the DOM as my router will call for those after.\nI will, for this PR actually create a separate react_ujs (react_ujs_api or some shit) file so that we can open this conv up a little more with some code to look at. I'll get to it tonight\n. https://github.com/reactjs/react-rails/pull/117\n. Those data-react-class divs can really add up in a SPA, I felt that removing them when calling ...unmount was the most expected behavior. I don't use Turbolinks so can't speak to that compatibility - maybe other collabs will chime in there, but as you said this code would not impact that.\nMy question would be: Do we want to keep 2 different ujs files or just replace react_ujs.js with this one?\n. Sounds good to me. I'll delete the ..._p.js and replace react_us.js with it, write a couple specs to assert the presence of the methods and props and re-PR.\nneed to do some paying work first, so e.t.a on that tonight sometime\n. Replaced the primary ujs file. How do you want to proceed to setup a test to inspect that exported object. My thought was to simply get a global of some sort setup where we could assert a few things...\n. Added tests to the view_helper that looks for the presence of all the exported methods and attributes. All green.\n. Yep, I can proceed as follows (just want the consensus first, so as not to do it again):\n- expose the api as ReactRailsUJS (or other...) not on React\n- leave the $ (return jQuery || Nodelist) \n- fix the style and whitespace issues\n- fix the specs obviously\nI think thats it?\n. sure. i'll get on it later today then\n. Done\n. :+1: Thanks\nDid the same, been using it on the redesign of a big commercial app. Doing fine.\n:shipit: \n. i can look into it. @jmagoon @rmosolgo you guys wanna open an issue with those things summarized? would prob help me to remember, seems like something that could be done fairly easily (famous last words...)\n. Chime in on #117 with comments that we want to see for it to go to 1.0 and I'll make sure its ready:\n- If not on the React obj where? \n- I can pull the ref to $ altogether and use native bindings (or not)\nI think it was just those 2 outstanding, @zpao may want to chime in on those back on the PR \n. That's fair, but raises another question: Where then? I have no strong feelings about where, just that they need to be exposed somewhere. Ideas?\nReason I put them there, risking stating the obvious, is that you are using React + Rails. So the appended namespace is not a surprise? \n. So, 2 very different items here:\n1. OK to the style, thats easily remedied\n2. Less so... Personally, I'd rather drop the $ altogether and handle selection and ready/load/unload natively (even back to IE... what ... 9?). But, the dollar was already here.\n. shit, idk. can kill it tho\n. I'll put in whatever consensus wants. Is there a precedent with any other UJS things?\n. I'm fine with it as-is. Brought it up just in response to @zpao 's comment\n. ",
    "jmagoon": "This is a great addition. Quick question, is there any reason to leave the JSON inside of the data-react-props attribute after you've called React.render()? My current application renders about 5000 objects to the page, and having those sit in the attribute causes the developer console to crawl and sometimes crash.\nMy current approach is just to call node.removeAttribute(PROPS_ATTR) right after the render step in the MountComponents function. Is there a reason to keep that attribute around?\n. Related to @ConradIrwin's advice, react_ujs refers to document all over the place, if it's attempting to prerender in ExecJS there is no document object and it fails.\nRelated to #55 , anytime components.js loads javascript that has references to the document object, the prerenderer will fail. It looks like the simple solution is Conrad's: anything react specific that can be prerendered in the components.js file, and anything that refers to the document object in the asset pipeline.\n(Though I don't think this is your issue)\n. Good to know. It's not a big issue, just wanted to see if anyone else was noticing similar performance issues or if I had a config issue somewhere. I'll close this out.\n. Unless I'm misunderstanding your question, react supports the following standard html attributes:\naccept acceptCharset accessKey action allowFullScreen allowTransparency alt\nasync autoComplete autoFocus autoPlay cellPadding cellSpacing charSet checked classID\nclassName cols colSpan content contentEditable contextMenu controls coords\ncrossOrigin data dateTime defer dir disabled download draggable encType form\nformAction formEncType formMethod formNoValidate formTarget frameBorder height\nhidden href hrefLang htmlFor httpEquiv icon id label lang list loop manifest\nmarginHeight marginWidth max maxLength media mediaGroup method min multiple\nmuted name noValidate open pattern placeholder poster preload radioGroup\nreadOnly rel required role rows rowSpan sandbox scope scrolling seamless\nselected shape size sizes span spellCheck src srcDoc srcSet start step style\ntabIndex target title type useMap value width wmode\nSo your navItem would need to return a <form> with whatever method you needed. I'm not sure I understand your React rendering, as it seems like the rendering should happen in each subcomponent, as opposed to a top level html-like structure. E.g. Navbar should render Nav, Nav should render NavItem, etc. But I also don't use react-bootstrap, so I have no idea if that's what they suggest to do.\n. ",
    "garbles": "@vipulnsward That's an idea, but I'd rather not have to specify the layout for every action. By default rendering inline will not use a layout.\n. > Are there other \"renderers\" out there that we can mimic for API? \n@zpao I could probably make something like that work. Would rather use a custom renderer than calling render inline: react_component(...), layout: .... What about this:\nruby\nrender component: \"TodoList\", data: {...}, options: { prerender: true }, layout: ..., status: ...\n(layout and status are optional, of course)\n\nCan't you just specify it once in the controller? layout false Or even layout false, :except => ['index']\n\n:inline will ignore the layout unless explicitly stated with the :layout option AFAIK.\n/cc @rmosolgo @vipulnsward \n. @rmosolgo @vipulnsward specs failing for me too here https://github.com/reactjs/react-rails/pull/118\nThanks for this\n. @rmosolgo @zpao - wondering what else needs to be done here?\n. @rmosolgo @borisrorsvort I believe that the issues when the PR have been resolved. :family: \n. @rmosolgo Should I add something to the README?\n. @rmosolgo cool cool. I'll write that up tonight. :tada: \n. @borisrorsvort thought about that, but stating The component will be rendered in place of yield. is probably clear enough. As a renderer, it accepts all of the usual options for rendering a view including layout.\nCould change this to The component will be rendered in place of yield in the layout if we think that it makes things slightly more clear.\n. @rmosolgo @borisrorsvort thanks for the bump. I've pushed an update.\n. Good idea. Done here 2cc9748\n. That's a good idea. I've moved it to another spec in this commit https://github.com/reactjs/react-rails/commit/3073fe6db5171ef74a26f1384039c47ac25d74e2\n. https://github.com/garbles/react-rails/commit/adec41d8dfc29f7cacbfbf1f9b3e5d2f587f0b63\n. Added assertions for the tag, prerendering (Render this inline</span> instead of just Render this inline) and the layout (<title>Dummy</title>).\n. Whoops. Yup you're right. :+1: \n. You are correct\n. ",
    "andreynering": "@rmosolgo \nYes, this works perfectly.\nShould this example go to the documentation?\n. I didn't note this warning myself the first time I read the docs, and ended using the master branch in production.\nA warning like this should be big, so users note it.\nAlso, isn't the master branch done to be published in rubygems.org? It seems stable to me.\n. You are right, but I think publishing on Rubygems make it a little more transparent and easier.\n. :+1: \n. @zpao Good point. Done!\n. ",
    "bowd": "@simonsmith I've just started playing around with this and my workflow is based on component.js (which uses CommonJS components).\nMy configs look something like this:\nruby\n  config.react.react_js = lambda { \"\" }\n  config.react.component_filenames = [ 'components-server-side-build.js' ]\nFirst of all I'm telling the gem to forget about loading it's react because if you're writing your components as CommonJS chances are you're requiring a version of react with them and have it bundled in your build file, so if this gem would use it's React to render components defined with another React we would have a bad time.\nIf you take a look at the gems source here:\n``` ruby\n{@@react_js.call};\nReact = global.React;\n{@@components_js.call};\n```\nThis is how these two things are used. So because i have set the @@react_js lambda to an empty string, React would be undefined.\nBut for the @@components_js lambda, my components-server-side-build.js file looks something like this:\njs\n//= require build/components\nReact = require('component-react');\nglobal.React = React;\nThis way I give the server side context access to the React I bundle using component.js.\nAfter that because of the way the gem is written I can do:\nhaml\n= react_component(\"require('./views/test')\", {}, {prerender: true})\nThis works because it takes the component name (in this case: \"require('./views/test')\") and either looks for a global var or tries to execute the string as javascript. The latter works and I get my component!\nP.S. Currently I don't see any drawbacks to this, but it might not work anymore if there are changes to the implementation at some point (hello forking) and I also just started setting this up so there might be issues I haven't yet come across. Hope this helps!\n. @simonsmith I have a similar manifest for the client that looks something like this:\n``` javascript\n//= require console-polyfill\n//= require build/components\n//= require_self\n//= require react_ujs\n// For the dev tools and ujs\nwindow.React = require('component-react');\n```\nSo I basically still rely on UJS but I have to make sure that React is again in the scope when it's loaded and I also add some other sparkles here and there like the console polyfill.\n. @simonsmith and yeah lucky the react_ujs also works out of the box with having \"require('...')\" as the component name because it also falls back to an eval right now.\n. I don't. But let me try to explain a bit. So the build/components.js is the build file for your CommonJS modules. \nThis could be what browserify spits out, if that's your poison, or in my case it's what my custom component.js build spits out.\nIn general it's gonna be a javascript file that defines a require function in the global namespace, and then wraps your dependencies in something like define blocks that result in them being expose when doing require(<module name>).\nHope the helps. In a sense that part of the equation, how you get your dependencies components built together can depend on your setup, in my example I was outlying how to link this CommonJS build (wherever it might come from) to react-rails.\n. @alexfedoseev check out my answer in #120 it might help you out, I have a similar CommonJS build but I'm using component.js and I to my server side rendering using require.\n. I've been also pondering something related to this. Right now I actually have duplicate date to keep things sane, i.e.\n- In a json script tag I dump all the store state on page load, this gets injected in the stores as initial state when my flux \"boots\".\n- Segments of data from the above dump is also passed as props to the toplevel components (server side rendered).\nWe have a convention that top level components use props as initial state (that would normally come from one or more stores). There's basically no way for top level components to receive new props anyway so they are in fact a sort of \"initial state\". \n\nUnrelated but we also enforce that only top level component get data from stores and pass down snippets to lower level components as props.\n\nNow this works great, but I would like to get rid of that data duplication. The only way I can see that happening is to be able to boot up my stores in the server side javascript context. The way I imagine this happening is making sure a request gets one JS context, and you have a way of executing some pseudo arbitrary JS in it, to setup your store states. After that all component renders execute in that JS context.\nI dunno if that makes sense but an API for that would make it easy to incorporate any flux paradigm you want.\n. @rearadmiral just to make this clear, adding extra options to render_component is a good first step... I dunno about you guys, but I personally render a few (more than 1 less than 8) top-level components per request, and that means I would initialise the stores when rendering each component. I still think the ability to isolate get a single JS context per request is crucial.\nAnd @xionon, the perf argument for me seams a bit weird, all of us are including a big components.js or similar which should contain ReactClass definitions, but that's _on good faith__. It's not like something's stoping me for having arbitrary javascript there, I'm only stopped from controlling that on a per request basis. Which means that in sense it's just limiting under the guise of \"protecting devs from themselves\".\nAnyway if we get no resolution on this until 2/1 (magic release date), I will play around with this in a fork and see what happens. Do you have any benchmarking scenario to test against for baseline performance indication internally?\n. @xionon great to have you on board, I also believe this may be a pretty big thing and it's important to get it right and not to opinionated. I might have sounded a bit harsh because it felt like you were dismissing the whole thing.\nI'm actually playing around through the code getting a better feel of how this would look like, I'll get back to you guys with my findings, but most probably post weekend.\n. @uberllama well like I mentioned at some point above it feels to me that what fits most people's needs is the ability to:\n- Have a unique JS context per request\n- Have the ability to execute some \"setup\" JS in that context in before starting to render components. That setup code will be based on per-request data. I'm imagining a user defined lambda in the configs + a method on React::Renderer that calls the lambda (with some params passed into the function) and evals the resulting JS in the context that gets checked out from the pool on this request.\n\nThis would be used basically for initialising your stores with data so that the components can use them. And in general should be a simple function. In my case something like Flux.startForServerSide(<json dump of hash>) (example name, wouldn't wire up dispatchers and stuff just inject initial data in the stores).\n- All further component rendering happens in the one checked out context.\n- There's also some teardown javascript (same lambda config), that gets execute after the request in order to checkin the renderer instance back into the pool.\nThis could be something like Flux.flushStores()\n\n\nThis feels right to me personally, and generic enough to fit any react need, but like you said it might not, so I'm open to figuring out what would work, but I feel like this is the right direction.\n. @rearadmiral I keep trying to find the time but proper work has been a bit killer. That being said if you put anything out there I'll be sure to give feedback for what it's worth. Maybe it might even push me to find the time to contribute :)\n. @abitdodgy another vote of confidence from us at Anyroad, we recently deployed this in production (we've been using React standalone for Anyguide for a while now).\nMy take on your questions is:\n1. We opted for react-rails for server side rendering because we want to facilitate search engine indexing and other crawlers on this part of our product. Which means that right now we pre-render everything, and it's really fast. But I can imagine you could turn it off on some components if you don't care wether they get indexed or not.\n\nAs a side note we also realised that top level components (the ones you render in rails) are pure functions of props (or at least should be IMO), which makes them great for fragment caching, as you can use a serialised version of the props (or an MD5 of it) as a cache key for components, which works pretty well (but won't shave off that much if you don't have complex component hierarchies).\n1. The way we structured things we basically have normal templates for our actions but these templates just render a few top level components. If you go to our landing page on Anyroad you can imagine that all vertically divided sections are top level components.\n   In order to render these components we need props for them, and that's the main job of the controller actions now. We have these sorta decorator/presenters that can be turned into a hash of props for each component, and they can reuse each other. For example the 3 cards on the landing page are setup as props inside of a presenter for that section, but the actual props for each card are built by a separate presenter that is build to be used with the card component.\nAs a side note we also have these kind of presenters for stores, that render our initial state that gets injected into our Flux stores when the app boots on the client. And this will be synced to the props that our top level components get (ones rendered server side), and as a convention we consider all the props that we pass in on the server to be part of the initial state (because it's not like those components can receive other props). This way the components get booted up with the correct initial state and they are wired up to receive changes from the stores that are also booted up with a synced initial state. This makes it really nice to reuse logic and build apps that can be both single page or not. \nThis works great for our search page. The state you can get to by filtering is exactly the state you would get if you refresh from the server with the filters in the url, because when you actually filter client-side, the api request comes back with the same store presenter that was uses server side, so that just gets swapped into the store and all components update.\nOk I went a bit overboard without explaining a lot of things but I hope this at least gets you excited :)\n. Also @gauravtiwari, while @rmosolgo is right about how to fix this, I think there's also a conceptual problem with your plan. While it makes sense to have app endpoints that come fully rendered on a normal html request, to me it feels silly to rely on ajax call to the server to render perishable content using React which is designed for the browser. Why not have your ajax call just fetch data, and render your components client side at that point? \n. Don't wanna be overkill on this @gauravtiwari  (I don't get to debate these sorta things a lot, so I use any chance I get) but that's not necessarily true, depending on how you structure your components.\n\nFor example this search results page has a pagination on the bottom, it's not infinite scroll but you can imagine that it's applicable. When you load the page the cards are rendered server side and when you change the page, a SearchStore gets a new array of props for the cards which are then pushed down by the SearchResults components and updates the cards. You can imagine infinite scroll by just appending to the array in the SearchStore rather than replacing it. I can imagine there might be some optimisations we would do because we would be re rendering all the cards but we already use ImmutableJS so we can get away with a lot easily.\nAnyway this is more of a \"academic\" discussion there's a time and place for everything but I just wanted to point out what I consider a more React/Flux way of handling this. \n. I donno if this is the source of the issue but it is an issue nonetheless. In your ThingsTable component you do\n``` coffeescript\nThingsTable = React.createClass\n  # ...\nmodule.exports = window.ThingsTable\nwindow.ThingsTable  = ThingsTable\n```\nwhich gets (correctly) translated to:\n``` javascript\nvar ThingsTable //, ...;\nThingsTable = React.createClass({ ... });\nmodule.exports = window.ThingsTable // => undefined\nwindow.ThingsTable = ThingsTable\n```\nI'm guessing you should either switch the order of the assignment to window and module.exports or just assign the local var to module.exports, aka:\njavascript\nmodule.exports = ThingsTable;\nwindow.ThingsTable = ThingsTable;\n// or:\nwindow.ThingsTable = ThingsTable;\nmodule.exports = window.ThingsTable;\n. This depends a lot on your stack. What @ericdfields mentioned works if you're compiling JSX inside of the rails asset pipeline. If you're using browserify or webpack it's not as straightforward. In the case of browserify what I did for a while is a have a custom preprocessor for the build and a convention to signal that this needs to be processed like:\njavascript\n// ...\nrender: function() {\n  return (\n    <img src=\"%image_path(some_asset_that_rails_knows.png)%\" />\n  )\n}\n// ...\nThis way I would use my custom preprocessor to match /%([a-z]*)_path\\((.*)\\)%/ and use the proper rails helper with the argument to generate the full asset path and replace that in the build JS.\nNowadays we just use webpack to mange all our frontend assets and it's awesome. Long gone are the days of sprockets :). \n. It's going really good so for, minus some small snafus due to node instability (because of all the moving parts/dependencies). But it's really interesting. I'm working on a blog post about this so I'll keep you guys posted.\n. @tomtaylor I've been using react-rails with pre-rendering on heroku for a few months now. The sad part is I've been having memory related performance issues with ruby 2.1.2 for a while now so I didn't have a clean slate to compare to after adding therubyracer, but I think the memory usage didn't change dramatically (but with it being bad to begin with it's hard to say).\nOne thing I can say for sure is that using the \"node.js\" backend (which I did at first before going live). Is much much slower. And after I looked into it, it made sense to me, but I might be wrong so take this with a grain of salt:\nThe way react-rails works is by keeping a pool of ExecJS javascript context to use for rendering. These are (usually) warmed up by evaluating the component.js you pass in, and then evaluating the React.renderToString cals in those warmed up contexts. The thing is, with therubyracer, because it's a JS VM in ruby, the ExecJS context actually stay warm in memory. But with node.js as a backend, each time you render a component, it actually reevaluates all the javascript from component.js because the ExecJS context defers to an actual node process each time and parses the results. So it can't keep those warmed contexts in which it continuously evaluates new render cals.\nAgain this might be because of something wrong with my setup, but I remember following the code to the end back then. So with node backend I was spending ~5s rendering views, whereas with therubyracer it was ~150ms.\n. @rmosolgo Like I said I might have been wrong abut this but that's my understanding right now, and the result of the last time I investigated this. If anybody knows if ExecJS can keep warm node context in memory then I'm all ears :cake: \n. @tomtaylor you might also wanna fiddle with the number of renderers you want react-rails to keep in the pool (cose that should have a linear impact on the extra memory). So if you're running a single process with X threads you don't need more than X renderers, and I think the default is 10.\n. Testing React with jest has one major prerequisite, that you structure your components as CommonJS modules. So there's (i think) no real way of using jest if you're using the \"naive\" way of structuring your components in the rails asset pipeline. The only way you could go about this is to separate your components from rails and build them using either browserify or webpack. That way you can expose the build to rails but have your components structured as CommonJS modules and be able to test them using Jest.\n\nSide note, with browserify it's pretty straightforward. Webpack still has some kinks that are being worked out because it heavily overloads the node require statement, but there is currently work being done on making the module loader in Jest more modular to allow it to use webpack's module resolution.\n. (sorry I was in the wrong repo, apologies)\n. @rmosolgo It's part of the solution but the problem that @NGMarmaduke is trying to solve (and me as well) is to only setup (and teardown) the arbitrary JS code once per request. So if we're rendering multiple components separately in one request we would like them to have the same javascript context (aka the same store state initialised) rather then setting up the store state for each component render call (which is what I'm doing now).\n. Yeah that's what I ended up doing, assigning the implementation directly, and it works.\n. @rmosolgo Actually I think cleanest solution would be to add an :after => :load_config_initializers to all the initializer blocks defined there, to ensure they are called after we've set the configs in the initializer.\nI'm happy to give that a go and open a pull request if it sounds good.\n. Yeah I also was a bit disappointed in me for adding this without a spec. I can confirm that it does indeed solve it for me. I tested it from my fork without setting the helper class manually and it did set it correctly. \n\nBut for the sake of it, let me try something. I wanna try to write a failing spec for it, open a separate PR for the failing spec just to see it fail in CI and then add the spec to this PR as well. Sounds good?\n. \n. Small note: the failing message is misleading because I added the assertion arguments in the wrong order \ud83d\ude38 \n. ",
    "simonsmith": "@bogdan-dumitru Ah very clever workaround, thanks for sharing!\nSo do you also serve the components-server-side-build.js to the client and wire up the components yourself? Basically what the react_ujs file does\n. ExecJS is used for the server-side rendering. From the repo:\n\nWhy can't I use CommonJS require() inside ExecJS?\nExecJS provides a lowest common denominator interface to any JavaScript runtime. Use ExecJS when it doesn't matter which JavaScript interpreter your code runs in. If you want to access the Node API, you should check another library like commonjs.rb designed to provide a consistent interface.\n\nI'm in a similar position and have found some joy with Webpack and building it with an option to expose all the components to the global object. It's still less than ideal when it comes to sharing dependencies though.\n. ",
    "krashidov": "@bogdan-dumitru do you have an example repo of this anywhere? I don't seem to understand what exactly is in your build/components.js file.\nThanks.\n. ",
    "bizmurr": "@bogdan-dumitru Are you using this with react-router at all? I would love to be able to maintain rails routes, server side render and then pass off to the client to continue to handle the routing and etc. Any thoughts on how this would work?\n. ",
    "bikegriffith": "+1, would be tremendously helpful\n. ~~@rearadmiral I left the stack trace out intentionally.  With a little bit more work, I could update it to include a representation of the stack as an additional part of the message string, but I was really trying to just get something better than what we have now.  Seems like a future enhancement rather than part of this request unless others want it now.~~\nEDIT: whoops, thought I was responding in regards to pull request 196.  Re-reading it, I think you're talking about when your code throws an unhandled exception and ExecJS re-raises the error in Ruby-land with the JS message but not JS stack.  I've been bitten by that as well and don't have a good solution there, but could think of some ways we might address it in the future.\n. Thanks @xionon, @rmosolgo, and @vipulnsward for all the feedback and getting this into better shape.  Hoping this can make it into master. I've been using this branch locally and it's been helpful for my workflow.\n. @vipulnsward I attempted to squash the commits and also pulled the latest from upstream.  Let me know if I did anything weird and I'll try to correct.  Thanks!\n. @rmosolgo I only intended it to be used for development, so I'm less concerned ~~but it is strange because I wasn't seeing it. Are you on ReactJS 0.13?~~\nEDIT: I'm seeing it now also (on React 0.13).  It doesn't appear if you disable the replay_console option.\n. Can do.\n. Thanks for the feedback. I wanted to keep it out of args because that's meant for use by the React component directly. The other place that seems reasonable would be on the app.config.react object, then passing into Renderer.setup!\n. A straight-up \"\" (or \"\") seen anywhere can break the flow of execution in the JS interpreter so need to be careful.\n. Perhaps, but it's better than what we have now, which is nothing.\n. ",
    "vegetabill": "Has anyone been able to get js stack traces? I only ever see the error's message and when it's something generic it makes it really tough to track down a problem.\n. We're using Yahoo's react_intl and merging in its expected properties into every component manually.\nOver-simplified, it looks something like this:\nerb\n<%\n  desired_locale_context = { locales: 'en-US', messages: { 'key': 'value', 'key2': I18n.t('rails.key2') } }\n  other_props = { x: true, y: 2 }\n  component_props = desired_locale_context.merge(other_props)\n%>\n<%= react_component 'MyComponent', component_props %>\nWould be nice if there was a way to have them merged in by default.\n. The particular library I'm using passes them down automatically (or the children fetch from their parents).\nFor other libraries, not sure what the best practice is for this sort of state.  If you're using a Flux-like architecture, a LocaleStore might make sense.  I'm not sure exactly what you're describing but the docs do warn against using props to set state.  https://facebook.github.io/react/tips/props-in-getInitialState-as-anti-pattern.html\n. Does anyone out there have a sensible way to populate stores with JSON data during a server-side render? Right now I'm passing in a prop to my component which during its componentWillMount calls something like:\nstore.initializeWith(JSON.parse(this.props.myJsonDataStringFromRails))\nBut this is backwards according to flux (and common sense). The component shouldn't send data into the stores.  Any ideas?\n. @xionon I understand your concern, but even thought we're talking about Flux, this actually applies more generally. Right now the only way to hand off data from Rails is using a component properties. I think many people, including me, are doing what @bogdan-dumitru mentions.  There is nothing terribly wrong with this, but it's pretty limiting and, as the OP brought this up, it doesn't align with the officially recommended React app architecture, Flux.\nIf the react_component helper took in an optional block that let you feed in page-specific js needed for prerendering, I think that would satisfy the need  In the docs it could be put into context as a risk for perf bottlenecks but the pre-seeding the stores we're talking about here would not be. \nIt might be able to be a plugin for this gem, but unless I misunderstand how prerendering is implemented, it could not be a standalone gem.\n. On the contrary, I'm still very interested in this issue.  +1 to @bogdan-dumitru 's suggested implementation.  Is this something that the maintainers want to implement or would they prefer a pull request?\n. :+1: to the extension point approach\n. Has anyone spent any time on this? If not, I might try to work on something simple this weekend to get y'all's feedback on.\n. I played around with a simple implementation last weekend. I hope to post a really rough PR just for feedback purposes this weekend.  It's not tied to flux, but more just provides access to a react-rails js context.\n. I made something very simple that fits my use case.  Please check it out and see if it would work with your application as well.\nhttps://github.com/rearadmiral/react-rails/commit/201ec430b8e8b13505a29002c97bebfd7735de90\n. Just noticed we still have some hacks in our Rails env file to workaround this. @danielrhodes did you ever have a chance to work on a PR for this? If not, I could take a look.\n. Awesome. Thanks\n. Okay I'll work on a PR then. Thanks\n. PR opened.  Let me know if it needs any changes. #213 \n. @danhart thanks for sharing your code. Personally, I feel your solution is superior. I'd suggest opening a PR for your change and referencing it as a solution to #212. It definitely solves the original problem in a clean way and I hope it would be merged.\nHowever, since I opened this PR, the app I'm working on is now in a transition period from a sprocket-based asset pipeline to a fully gulp one, and in the meantime we have both running simultaneously. In the spirit of making this gem flexible and configurable and not forcing client apps to fork the repo\u2014even if they're doing something a little crazy like I am, I think it would still be worth merging this change, unless there's some downside to having the components_js lambda overridable?\n@johnthethird or others who might know: was there a reason this PR was never merged? I'd really like it to be merged so I can stop using my fork. I see the travis build failed but it doesn't seem related to my change. If this PR would be mergeable assuming a green build, I'd be happy to investigate further so we could close this out.\n. I don't think those options alone will allow users to solve this issue. It's not which files to read, but how they are read. Looking at https://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/sprockets_renderer.rb#L13 it still seems to be hardcoded to assume the asset pipeline exists in production, which is actually not the best practice for Rails. Because of that I think it would be ideal if you incorporated the relevant part (https://github.com/reactjs/react-rails/compare/master...ownerscircle:perf_testing#diff-1cd07a77af52dfe22d04099826f272a9R20) of @danhart 's fix into sprockets_renderer so it will work whether the asset compilation pipeline is enabled or not.\nBut as for my weird use case, with your awesome refactoring I can now just make my own subclass of the renderer to do whatever I want now so I'm going to close this PR.\n. As an abstraction layer, I think this looks good.\nThe direction I took my implementation, basically to support seeding Flux stores from Rails data, reuses much of the impl of Renderer. It would be nice if there were some extension points to allow that.\nFor example:\n``` ruby\n   js_code = <<-JS\n      (function () {\n        #{preparation_js}\n        var result = React.renderToString(React.createElement(#{component_name}, #{props}));\n        #{post_render_js}\n        return result;\n      })()\n   JS\n...\n\ndef preparation_js\n  end\ndef post_render_js\n    @replay_console ? CONSOLE_REPLAY : \"\"\n  end\n```\nThat way I could just subclass the Sprockets render and tweak a few things.\nBut maybe someone more clever than me can come up with a better way to handle the whole Flux thing anyway.\n. I'm happy to see this merged. This is the key foundational step for a future flux-compatible plugin gem.\n@rmosolgo did you ever have a chance to work on extension points for the base class? See my comment above If you haven't spent any time on it, I can try to write one and see what everyone thinks\nThanks again for pushing this through.\n. Ah, oops I should've search for open PRs.\nAt this point, I can't say for sure. Long term we might move all of our assets to a gulp pipeline and so I'm not sure if we'll be using sprockets at all, so I guess I'd still prefer to have this flexibility unless you think it adds unnecessarily complexity to this object.\n. What was your thinking for this change? If you think it's okay to add to provide flexibility, I can fix up the merge conflicts.\n. Thanks for the design rationale for avoiding inheritance. I think that makes good sense.\nThe Asset Container idea should be a good fit for what I would need to vary so I'm going to close this for now. If, after using it, I see advantages to reusing CONSOLE_POLYFILL etc I'll open a separate PR for that.\n. That would be preferable for me as well. I was just worried it would break existing use cases but I guess that's actually unlikely. I'll revise this PR.\n. So, modifying the string case option to create a selector string like this:\n\"#MySelector[data-react-class], #MySelector [data-react-class]\"\nWas that along the lines of what were thinking?\n. Overwrote the branch with a new implementation. Let me know if this seems good.\n. A naive if would probably suffer from a possible race condition as well.  Does multithreaded Rails not have single-threaded initialization?\n. I'm still confused as to how a plain if will be any more or less threadsafe than ||=. Can you show me how you would write this code?\n. @vipulnsward It would be much easier with a whiteboard :-) but I would appreciate if you'd explain more because I wasn't aware of this problem and would like to learn more.\n\nx is not always guaranteed to be 10 here by ruby\n\nWhat are the possible values then? I assumed it would either remain unchanged or be set to 10.\nI still don't think either implementation is threadsafe. Rails.app.config is global so in theory another thread could set it to nil and break either case.\nFor example,if our react-rails init thread has just checked if app.config.react.components_js is nil either by your .nil? guard or the ||= statement, and some other thread sets it to nil at that exact moment, we won't assign it any value and it will remain nil despite it looking like our intention was to assign it a default value when nil.\nSo are you specifically referring to this code being run simultaneously by multiple threads and leading to unexpected outcomes?  By my reading, the unexpected outcome would be the creation of two lambdas which is wasteful but wouldn't break any functionality. Can you explain a case where it would break?\n. ",
    "alexfedoseev": "@bogdan-dumitru thanks! gonna check out this weekend\n. After months of wandering I've came to this approach: https://github.com/alexfedoseev/generator-flux-on-rails\nI'm quite happy with it, so closing this.\n. I decided to separate a concerns and make Rails just JSON API for client apps. And I feel that it's right way of doing SPAs.\nDetails here: https://github.com/alexfedoseev/generator-flux-on-rails\n. ",
    "gauravtiwari": "Thanks @rmosolgo. I figured it out earlier, but didn't get chance to close this post. Anyone using server side rendering, please make use of isMounted() function in react to make sure the component is mounted. You can check this directly in the render() function. \n. Thanks @rmosolgo, makes sense - didn't knew about this.  @bogdan-dumitru Correct! But in this case, I am rendering the content for infinite scroll feed and I don't think if it's possible to do this. \nOne another factor I think is important to consider is multiple HTTP requests, if one pre-renders the component, it saves some HTTP requests. \nYour thoughts?\n. Thanks @bogdan-dumitru. Sorry for late reply. Yup makes sense. :+1: \n. @rmosolgo how do you then set react states after rails ajax call? \n. @rmosolgo Depends on the use case I think. What are you using forms for - simple submissions? Are you updating the UI as well? Why not just use rails RJS pattern? OR Turbolinks.visit alone? I think this would be simple if you are rendering Markups.  \nPersonally, I think React works great where we render changed states on the page, for ex: A CommentBox OR A ChatBox. As you know, it renders changed states pretty fast.  Rather than going to server and then rendering response - I first render the response straightaway from the form to UI by setting new states and then once, I get the JSON response back I update the UI (if some validation fails the UI gets updated accordingly and user sees the validation error or something).  This solves the latency problem. \n. Yes, on development server. Putting a copy of react from react-source into /vendor/assets seems to resolve the issue. Seems like the gem is not picking up the right version from react-source?\n. Yes I did, cleared rake tmp:clear also, just in case. \nSeems like it's there /gems/react-rails-1.1.0/lib/assets/react-source/development-with-addons\nI am getting this output for react source in console. \n. Yes I see, looks like its working in yours. In mine, I have the exact same setup in my environments/* and application.rb but it doesn't seem to load the with-addons version. \n``` ruby\n  # application.rb\n  config.react.addons = true\n  config.react.server_renderer_pool_size  ||= 5\n  config.react.server_renderer_timeout    ||= 20\n  config.react.server_renderer = React::ServerRendering::SprocketsRenderer\n  config.react.server_renderer_options = {\n      files: [\"react.js\", \"components.js\", \"underscore.js\", \"jquery.js\", \"bootstrap-tagsinput.js\", \"js-routes.js\", \"showdown.js\"],\n      replay_console: true,\n    }\n```\nThe error I am getting is for var PureRenderMixin = React.addons.PureRenderMixin;\n\nI have just defined config.react.variant = :development in development.rb. Everything looks fine in the application.js. In fact, if I put react.js into /vendor/assets it loads just fine. \nThe assets path is loaded in the app: /gems/react-rails-1.1.0/lib/assets/react-source/development-with-addons\nI am investigating...\nThank you for working with me to figure this out :)\n. @rmosolgo I actually removed everything from application.js and just used React and $ and still getting the same error. \n//= require jquery\n//= require react\n//= require react-infinite\n//= require react_ujs\n\n. Nope, that doesn't solve the issue :( Investigating...\n. thanks @rmosolgo :) One of the external dependencies was causing this. Really appreciate your help!\n. You could use browserify-rails (1.5.0) gem or bower-rails gem or Rails Assets to pull in third party plugins or components (depending on where they are available). \nWith browserify you will have to use Common JS standard to write modular components. With others you can just use global objects, like: window.jQuery\nIf you decide to use browserify, just follow the gem installation instructions and setup your app like so: \nUsing browserify\nApplication.js Setup\n``` javascript\n//= require_self\n//= require components\n//= require turbolinks\n//= require react-server\n//= require react_ujs\n// Setup React in global scope\nvar React = window.React = global.React = require('react');\nvar ReactDOM= window.ReactDOM = global.ReactDOM = require('react-dom');\nwindow.$ = window.jQuery = require('jquery')\nrequire('jquery-ujs')\n```\nComponents.js\n``` javascript\n// Setup app into global name space for server rendering\nvar app = window.app = global.app = {};\n// Component::Manifest\nvar NoContent = require('./components/no_content.es6.js');\n// Include into app namespace\napp.NoContent = NoContent;\n```\nLoading NPM modules\n``` javascript\n// Require React\nReact = require('react/addons');\nimport component from './component.js'\nimport mui from 'material-ui';\n// Your third party add-ons from react component\n// Define component\nconst NoContent = React.createClass({\nrender() {\n    return (\n        \n         Empty content\n        \n      );\n  },\n});\nmodule.exports = NoContent;\n```\n``` ruby\nrender in rails views\n<%= react_component 'app.NoContent', {prerender: true} %>\n```\nFor Babel Plugins:\nFrom babel 6.0, there are no plugins included by default, you will have to use .babelrc file in project root (in this case rails root) to define presets and plugins like so or pass command line options: \n```\n{\n  \"plugins\": [\"syntax-jsx\"],\n  \"presets\": [\"es2015\", \"react\"]\n}\n```\nbrowserify script.js -o bundle.js \\  -t [ babelify --presets [ es2015 react ] ] (// application.rb with browserify)\nYou could also use react-rails configuration to load es6 functions or plugins like so: \ngem 'babel-transpiler\nruby\n   # application.rb\n    config.react.jsx_transform_options = {\n      plugins: ['transform-class-properties']\n    }\nMake sure you install the plugin via npm npm install babel-plugin-transform-class-properties --save\nThere are others solutions like using: Webpack with separate/integrated client application, for example. \n. @smnplk Yeah you are right :)  I will edit the comment, thanks\n. @smnplk Yes that's right :) As you have pointed out - React DOM is now a separate package therefore, it must be included for rendering components. I have updated the comment.\n. Hey @TSMMark Just double check if you are loading it twice anyhow - both in Sprockets and NPM. You may also want to reinstall node modules (rm -rf node_modules directory first) with node(4 or 5) and npm(3.5+) to make sure there aren't duplicated copies installed.\n. @awe2m2n2s You could also use rails-assets.org. which provides a lot of javascript packages bundled for Sprockets. React leaflet isn't available on rails-assets so I created it by pushing it to Bower. You could go to rails-assets.org and then search react-leaflet, select a version and then install it using your Gemfile. Then you could just include via Sprockets in your application.js. \nruby\nsource 'https://rails-assets.org' do\n  gem 'rails-assets-react-leaflet'\nend\n. @lesliev Is jquery-ujs installed via NPM? You have required it require('jquery-ujs');, but may be not installed. Check package.json please!\n. @awe2m2n2s It depends on how it works for you. React has a standalone browser package and could be used with Sprockets, but as you go deeper and start using libraries around React, you might start getting headaches and roadblocks, because not all of them are made to be compatible with Sprockets. You can of course make them if you want to.\nIdeally, if you are doing a lot of work on client side and not just sprinkling javascript here and there, then it would make sense to use a workflow that's more integrated and efficient for front-end development. Now, that may mean going beyond traditional workflow. There is - Webpack, Browserify, Gulp, Grunt, Brunch, Bower and tons of other package managers. You could take a look at them and see what works for you, FYI, Webpack is most full-featured and popular nowadays. There is another implementation of React for Rails using Webpack - https://github.com/shakacode/react_on_rails\n. @awe2m2n2s I see. Basically, you have to fork the react-leaflet and update the bower.json  include dist/react-leaflet.js as the main file. Once you have done that you can update the package on rails-assets or just reinstall the gem and it should work. \"main\": [\"./dist/react-leaflet.js\"],\n. @jcmorrow Are you providing right presets for transforming JSX? You may want to create a .babelrc file in the root directory with following content: {\n  \"presets\": [ \"es2015\", \"react\", \"stage-0\" ]\n}\nThen you have to install all 3 babel presets, explained here: https://babeljs.io/docs/plugins/preset-react/, after this when you run babelify it will pickup the .babelrc and transform the code using the presets provided. \n. @jcmorrow Can you manually run and compile from command line or terminal? browserify script.js -o bundle.js -t [ babelify --presets [ es2015 react ] ]. You might need to reference the binary from local node_module/ installation if not globally installed.\n. @lesliev That's for ajax requests, jquery-ujs takes care of adding CSRF token to ajax requests so you don't get protect from forgery exceptions on Rails, plus a few more goodies using data-attrs. Could you push this repo somewhere for us to look?\n. @jcmorrow, @awe2m2n2s and @lesliev  https://github.com/gauravtiwari/brunch_on_rails\nPerhaps you would like to look at this setup and see if it works for you? It works without the gem and uses Brunch, which is like Webpack, but quite simple to setup and use. You could tweak it to make it work as you like without much constraints.\n. Example Rails 5 application running with browserify-rails and react-rails: https://github.com/gauravtiwari/browserify_on_rails\n. And, finally using Webpack (https://webpack.github.io/docs/tutorials/getting-started/) without browserify-rails gem. Check out the rails 5 source code here with basic readme: https://github.com/gauravtiwari/webpack_on_rails\nApp uses the react-rails gem for providing view helper, mounting and rendering components on server and client. Performance wise webpack is much faster and provides same workflow as browserify-rails gem does. \n. @luccasmaso try the updated repo: https://github.com/gauravtiwari/browserify_on_rails (Added a react plugin to test) and no duplication error. See show page (ignore the weird styles :)). \n. @Tectract - Browserify uses different workflow than sprockets so, you can't do #= require lodash - it won't work. Instead, where you need to use lodash - use var _ = require('lodash'); or with Babel you could do import _ from 'lodash, and then use _ variable. \nIf you want to make global lodash object, in applications.js attach it to window object like so: var _ = window._ = global._ = require('lodash');\nFor example: React is made global: https://github.com/gauravtiwari/browserify_on_rails/blob/master/app/assets/javascripts/application.js#L19\nYou could do same for lodash. If you just use it inside component, call it locally within component like so: https://github.com/gauravtiwari/browserify_on_rails/blob/master/app/assets/javascripts/components/pages/alert.es6.js#L2 (only with babel) or just use regular var Variable = require('my-node-lib')\n. @Tectract Browserify is fine for simple setup like this, first install lodash from npm: npm install --save lodash and then within your component: _ = require('lodash'\nNo everything will work as before, it just that now you can use npm modules with browserify-rails gem.\n. For rebass, you could do same and require as outlined in the docs at NPM: npm install rebass --save\n. Hey @vinnyoodles Please check out this repo and see if you are missing anything. Btw, have you setup babelrc to transform es6 code?\nhttps://github.com/gauravtiwari/browserify_on_rails/blob/master/.babelrc\n. @vinnyoodles Strange,  I guess you are missing .babelrc or babel is not picking up proper transformer. Did you looked at the code I posted?\n. @CostaRico this might be related to your first issue - I see you are loading react via Sprockets and then again in components.js (multiple versions of react)\n. @CostaRico You are probably adding multiple versions of react source? Please check react-select module and also you are not loading react via Sprockets. \n. @CostaRico the browserify workflow takes care of the dependency management. Sprockets uses a different workflow and for that you have to use different versions of these modules separately. Rails assets https://rails-assets.org/ is one such place to import these libraries and make it work with Sprockets, however since you are using browserify I think it's best to use that. \nAlso, please require react-select only in places you need it, not globally in component.js. For example: If you have a component - Post, where you have used react-select, require on top of the component like so: \njavascript\nvar Select = require('react-select')\nand browserify will take care of all the dependencies etc. Same goes for react, autosize and other modules you are using. It makes sense to require them globally only if you are using it everywhere. \nAlso, use this syntax: \njavascript\nimport React from 'react';\nimport Select from 'react-select';\nCheck some examples here: https://github.com/JedWatson/react-select/blob/master/examples/src/components/CustomComponents.js\n. @reedlaw You can do it like so I guess,\n```js\n//= require react\nconsole.log(React); \nconsole.log(ReactDOM);\nvar ReactDom = window.ReactDOM\n//= require react-select\n//= require react_ujs\n```. @reedlaw Ohh yeah, right sorry? Then, just load it via an external file. \njs\n//= require react\n//= require global-react-dom\n//= require react-select\n//= require react_ujs\njs\n//  global-react-dom.js\nconsole.log(React);\nconsole.log(ReactDOM);\nvar ReactDom = window.ReactDOM. @reedlaw Because it's trying to find react-dom inside node-modules directory. But that's weird because you are using asset pipeline right? What setup you using? how are you adding react-select package via gem or npm?. @reedlaw I suggest the easiest option is to download the Dist build and put it in vendor/assets/ and then require it into application.js and application.css manifest. \nPlease note, you don't need to then explicitly declare that ReactDom variable because it will work with react-rails assigned globals. You can see it here, https://github.com/JedWatson/react-select/blob/master/dist/react-select.js#L683 it's using same window variables. . @reedlaw Use this for classnames, https://rails-assets.org/#/components/classnames (as gem) and dist build for autosize input, https://github.com/JedWatson/react-input-autosize . @reedlaw that's why using asset pipeline nowadays is painful for JS. Take a look at this, https://github.com/gauravtiwari/rails-webpacker (Webpack and Yarn support is coming in Rails 5.1). @BookOfGreg Can you not do this?\nyml\ndefault: &default\n  config: config/webpack\n  entry: entries\n  output: public\n  manifest: manifest.json\n  node_modules: node_modules\n  source: app/assets/javascript\nThe idea behind entry option is to change the entry folder name to anything else (packs, bundles or whatever). The source folder controls the path to javascript app. \nruby\nirb(main):001:0> ::Webpacker::Configuration.output_path.parent.join(::Webpacker::Manifest.lookup('app.js')[1..-1])\n=> #<Pathname:/Users/gaurav/webpacker-example-app/public/entries/app.js>\nirb(main):002:0> ::Webpacker::Configuration.output_path.parent.join(::Webpacker::Manifest.lookup('app.js')[1..-1]).to_s\n=> \"/Users/gaurav/webpacker-example-app/public/entries/app.js\"\nWould this work for you?\n. This is looking pretty good @rmosolgo \ud83c\udf89  \ud83c\udf70  . ",
    "dmitry": "@zpao but I think at least this config option for now should be removed.\n. OK.\n. That's what I'm also doing currently, but it doesn't look right. Hopefully to find out better approach soon.\n. How do you pass current locale to the nested components?\nI'm passing as a normal props and setting them to the state. Isn't it better to set locale as a global state property?\n. Have you read this article: http://aspiringwebdev.com/react-js-and-flux-in-rails-a-complete-example/?\n. In one of the projects I've used https://github.com/mroderick/PubSubJS with react-rails. PubSub can be an alternative to Flux for a small projects.\n. ",
    "joaomilho": "That's a good question. I'm also wondering how to.\n. ",
    "rstudner": "I am using i18njs to do this for now and then just doing I18n.t('my.key.here') to get strings out.\n. Yeah -- thanks for the reminder.\n. This needs another edit.\nIt mentions, up front & correctly to do the rails g install script which puts react/react_ujs & components.js in the application.js file.\nIn then, a page later, has the very old doc that says to just put solely and only react.js in the application.js (manually).\n. Some orgs also have a fairly strict \"beta or not, it has to come from rubygems (or rubyassets)\" sort of policy.  While we all know the difference is philosophical -- it helps with that too :)\n. That is totally fair and works fine.  I haven't had much use of refs yet (not a ton of complicated/stateful components yet :)).  But 'passing in'(injecting/requirejs/whatever) is simple enough :)  Thanks!\n. YES!  -  (sends electric beer your way)\nBecause all the test runners etc 'create a DOM' to hold their test suite in.. and then load in the tests.. all those \"events\" already happened long before it got to my test/page with a react component.\nadding ReactRailsUJS.mountComponents() to my beforeEach's solved the problem 100%\nThanks so much -- super appreciate it.\n. Just my 2 cents.\nI used the react source from rails-assets for 0.14\nmy application.rb is as such:\n    #Make sure server side react components get at least this stuff to use (moment & i18n being key)\n    config.react.server_renderer_options = {\n        files: [\"react/react-with-addons.js\", \"react/react-dom.js\", \"i18n.js\", \"momentjs\", \"components.js\", \"portal.js\"], # files to load for prerendering\n        replay_console: true,                 # if true, console.* will be replayed client-side\n    }\nAnd i'm able to client and server side render with 0.14  (it is possible it's throwing deprecation warnings on the server side of course).\nBut it works! hah.\n. After further digging, it doesn't seem to find a wide variety of just local javascript of mine (things that are 100% in application.js, listed above/before //= require components etc etc\n. That was exactly it.  My apologies -- I see the mention in the readme.md but my brain read that as \"only react components loaded from components.js will be available.  I didn't make the more obvious connection it means all necessary js assets.\nThanks for the quick reply -- greatly appreciated :)\n. I had another question that maybe you've encountered.  So I have an rspec test the tests the ability to generate PDFs.\nIf I try to server side render a react component as part of rendering a PDF, the test fails (to note, the code while running works perfectly in general)\nAny issues you've seen in the past re: an rspec and server side react ?\n. narrowed it down -- so far it is simply that the view helper react_component isn't available to my code.. but i've tried including it in multiple ways without success.\n. figured it out.  I did need to make sure to include the React::Rails::ViewHelper manually.\nI also needed to do rake assets:clobber\n... ;)\nthanks again for all your help etc :)\n. Ahh.  in this case, despite the production looking directory structure, it is actually running in a Rails development mode/environment.\nSo if an app is deployed in production mode with all assets pre-compiled etc.. then this probably would not be an issue?  (and this is more an artifact of it being in 'development' mode, but deployed in a fairly non-normal/sane manner)\n. Hrm. So assets/dev and assets/production have to be write able for server side rendering to work in any environment?\n. @rmosolgo Is there a simple explanation as to why that is true (note, just personally curious/trying to learn something.  Don't take your time if it is a PITA to answer)\nRegardless - in my specific case it is simply because the machine is setup poorly and root owns almost all the folders but doesn't run the webapp (and thus, write permissions).\n. @mchristen thanks for such a detailed response -- much appreciated.\nThat PR looks pretty small for sure (and doesn't seem to have code that would care about 0.13 vs 0.14)\n. @mchristen is there any reason that bit O code isn't an official pull request?  I'm going to build a gem locally and try it out this morning once I get into the office :)\n. I have a fork & branch off the latest master and so far everything is working.  going to put it through some more paces before I submit the PR (and i'll make sure to credit the original author -- I didn't write a line hah)\n. @rmosolgo I'm writing up a test but having an issue digesting your suggested test:\nprecompiled_renderer = SprocketsRenderer.new(files: [\"...\"])\nWhat do I put here?  if I try to put react.js or anything, it says it can't find the file (and that kills the test)\nif I just put:\nprecompiled_renderer = SprocketsRenderer.new()\nthen I get this error:\nErrno::ENOENT: No such file or directory @ rb_sysopen - /Users/roger.studner/git/react-rails/test/dummy/public/assets/react-server.js\n. @rmosolgo  A few points:\n1. I had changed it to try the default files option already -- seemed like the right step.\n2. I didn't think it was legit? for me to require a manual rake assets:precompile before running the tests -- but that makes sense of course. (but then wouldn't rake test have to be overridden to do this for this test? for a travis etc environment?)\n3. the assets get put in react-rails/test/dummy/tmp/cache/assets/test/sprockets/v3.0/\n4. the code still is trying to just look in react-rails/test/public/assets\n5. the filenames of course are like: zOx_HJxZ2xP7SL8yNvetrX_Dn41YDxQYSLjOkxwlvD0.cache \nI guess this leads me to believe the patch code from earlier etc doesn't work at all and this is a minor fools errand :)\nThoughts?\n. I'm going to illicit some help from my Rails expert cohorts (i'm the scala, clojure, ember, angular, backbone, react person) haha.\nThanks for all the help/feedback, hopefully I can get this thing working soon :)\n. @rmosolgo btw - closed this for 2 reasons.  1) was just very stale/already pushed/I love rebase/didn't want to force push haha  2) Found another approach with the help of a coworker/friend (who i'll get his public github and get him the credit asap).. anyway -- going to push up a new branch/PR with this done another way w/ a test etc.\n. @dfguo hrm.  How are you using/testing it?  The issue for me, is that once I \"go to prod\" my application-hash.js \"has react in it\" (and everything else right :)?  and my server side rendering is trying to \"find react.js\" and I haven't been able to figure out (using the manifest cache/anything) how to resolve that.\ndo you have anything like this in your applications.rb:\n#Make sure server side react components get at least this stuff to use (moment & i18n being key)\n    config.react.server_renderer_options = {\n        files: [\"react.js\", \"react-server.js\", \"i18n.js\", \"momentjs\", \"components.js\"], # files to load for prerendering\n        replay_console: true,                 # if true, console.* will be replayed client-side\n    }\nMaybe my issue is that I can have that \"for dev\", but for prod I actually have to make sure NOT to specify those?\n. Ahh yeah, I'm almost to using webpack with this project and then i'd do the exact same as above.  So when you arent using webpack, the problem is that it looks for the files in that list, and of course, they don't exist (since they've been Sprocketed hah).\nHave you seen the gem react_on_rails?  Solid support for doing webpack w/ rails etc.  I didn't realize you could easily do webpack w/ rails and still use this particular gem (i'm behind in reading the docs, clearly)\nHow do you have webpack configured to work with your rails app and this gem (if you don't mind sharing)\n. ",
    "jhilden": "We have been using i18n-js quite successfully with react-rails.  It's very nice being able to reuse translations from your rails app and it works well.\nWe only had to do a little extra setup work to make it work properly with server-side prerendering.  You can find our setup here https://gist.github.com/jhilden/44378421ad54e617b900\n. ",
    "AndrewRayCode": "I'm making some progress, but this gem is putting up a fight.\nI did get a bare bones component to render, buuuuut...\nThe < error was because if you have any files that are JSX in your javascripts/, even if they have /** @jsx React.DOM */ at the top, will cause the runtime to error. After re-reading the readme I renamed them to .js.jsx, but the file comment should probably make that automatic?\nI isolated my header file into its own folder for now and specified that in components.  Here's the errors I encountered:\nrequire is not defined. This is a huge problem. The node and browserify ecosystem mainly use requireJS now to set up modules. Does Rhino not have a module loader in core? I'm way behind on my Rhino knowledge.\nmodule is not defined  \"that string is looked up in global scope\" no no no! The majority of react developers use browserify with requirejs to organize their code. We can't put every module in the global scope.\nIt seems like any changes to the javascripts files needs a server restart to take place, which slows down progress.\nI tried pointing the components directly to my browserify-built bundle.js file, but I realized I have things specified with browserify-shim so they don't get built into the bundle. For example, in my package.json I have:\n\"browserify-shim\": {\n    \"underscore\": \"global:underscore\"\n},\nAnd I include underscore on the page in a regular script tag so it's cached from a cdn. That means underscore isn't built into bundle.js. I'm going to try putting my deps into the the components folder but I won't have any gaurantee they are run in order, right? How could I make sure to define a missing file?\nMy test suite executes some of the files using node, which of course works fine because require works. I don't have to point node at my bundle.js file. I'm not sure what the ideal solution is.\nRight now this gem seems incompatible with a real React workflow. I'm going to keep fiddling with it and see if I can find any tricky ways to get require to work.\n. this project is fundamentally incompatible with a require() workflow https://github.com/reactjs/react-rails/issues/129 as the authors have stated they are sticking with the rails asset pipeline. The mentioned https://github.com/reactjs/react-rails/issues/120 gives a hairy hack that might work for commonjs.\n. ",
    "tabolario": "I've been messing with Teaspoon attempting to get it to work with the React testing addons. Right now I'm stuck on PhantomJS crashing no matter what bind polyfill I use though, so I gave up for the time being. Will report back here once I get some more time to look at it.\n. ",
    "golmansax": "Wow sorry, I totally forgot about this pull.  I'll close this out and switch to using the react-rails gem, and reopen the pull if we run into this issue again.\n. ",
    "zackify": "Fixing some of the limitations noted here would be nice: https://reactjsnews.com/setting-up-rails-for-react-and-jest/ \n\nAt this point it is possible to create React components by placing them in the components.js file and calling them with react_component 'ComponentName', {props}. in the Rails views. However, there are some limitations. First, it cannot make use of Jest for testing, though Jasmine and full integration tests should work. Second, it is not possible to require() any node packages.\n\nI'm new to Rails and have barely used this gem, sorry if this has been fixed\n. :+1: \n. I'm getting this same problem now, trying to figure it out\n. I found a way around this. Instead of exporting, I have to say window.ComponentName = ComponentName below it :/ \n. ",
    "uberllama": "Flux. Or Reflux. Please and thank you. ;)\n. I've also been pre-populating with server-generated JSON rather than actually rendering on the server. My primary motivation is removing the front end from Rails in possible anticipation of full extraction into a SPA. So far so good. And I use the rails-assets workflow for now to bring Reflux into global.\n. My biggest concerns, as others have voiced, is implementation. From my initial projects, Reflux feels right. But some people may want to use Fluxxor, and others may want a full blown Flux pattern. Whereas React is a baseline lib, none of the Flux implementations are. So how do you create a generic enough pipeline in this gem that can service all of those.\n. Yep, and we're using custom stores with backbone events. It would definitely be a mistake IMO to couple this lib specifically with flux. That doesn't mean there couldn't be a complimentary add on lib.\n. Would it help if I said \"trust me\"? :) I've used it on many projects and this is standard wrapped collection syntax. You very rarely use array! in Jbuilder, precisely because you typically need to support multiple nodes on a response.\n. \n. Ha!\n. I have continued to use a pod type structure and its served us well.\nIt looks something like this:\napp/assets/javascripts/components/\n  posts/\n    posts.js.jsx\n    post_item.js.jsx\n    show_post.js.jsx\n  shared/\n    forms/\n      input.js.jsx\n    tables/\n      table.js.jsx\n      paginator.js.jsx\n. ",
    "chantastic": "Great work @rmosolgo!\n. :clap: :clap: :clap: \n. :+1: \n. ",
    "jordanstephens": "\ud83d\ude80\n. @rmosolgo Right now if I install react-rails, I get react-source 0.12.1, even though 0.12.2 is released. \n~ % gem install react-rails\nFetching: react-source-0.12.1.gem (100%)\nSuccessfully installed react-source-0.12.1\nSuccessfully installed react-rails-0.12.1.0\n2 gems installed\nIf the desired behavior is to automatically use the latest patch version, we should use\ns.add_dependency 'react-source', '~> 0.12'\ninstead of\ns.add_dependency 'react-source', '0.12'\nI'll amend this PR if that's what we're after. I wasn't sure if we were intentionally delaying that update or not.\n. Thanks @zpao, I'll open a new PR on the 0.12 branch.\nBefore I close this, I'm still a little bit confused:\n\nmaster however is more fluid and uses the latest instead of locking \n\nI believe the current dependency definition on master is locked (on 0.12.0):\ns.add_dependency 'react-source', '0.12'\nI just double checked the version in my Gemfile.lock after bundling from master and I am indeed seeing react-source (0.12.0).\nDon't we want to use the following on master instead?\ns.add_dependency 'react-source', '~> 0.12'\nThanks again!\n. Just rebased this branch to include the ~>.\nThanks @zpao!\n. Had a little hiccup there in the tests with an upgrade to actionpack 4.2. It looks like this has already been addressed on master.\n. ",
    "jakegavin": ":confetti_ball: Nice work!\n. In other issues, @rmosolgo has suggested adding the library to your vendored javascript files (including the version in the filename can help when it comes time to upgrade). Then you can require it in application.js after requiring React. This will expose the library as a global. This has worked well for us so far. \nWould this kind of approach work for what you're doing? Example: https://github.com/reactjs/react-rails/issues/510#issuecomment-207790440\nSeems like this issue is somewhat common so I agree it might be good to mention it in the read me. \n. ",
    "csm123": "React-rails worked well for me with Fluxxor, one of the Flux-inspired libraries out there. While not perfect, here is a play by play of the implementation. \nSome Flux-based libraries like Reflux are tested for server-side implementation so they don't leak. Fluxxor has an issue stating that it may or may not be ready for server-side. Personally, I pre-load the components with a server-generated JSON string, but don't actually server-render them yet.\nWith no set-in-stone Flux standard outside of Facebook's example/recommendation, it's difficult to see react-rails hardcoding one. I agree, though, that it should provide a way to launch JS on the server that can pass a Flux store (initiated however you want to initiate it) to the component.\n. @rearadmiral Where does your store live and how do you ensure it's loaded on the server along with your component?\n. ^ Completely agreed that such an API would solve this issue and make\nisomorphic with flux much easier\nOn Sunday, January 18, 2015, bogdan-dumitru notifications@github.com\nwrote:\n\nI've been also pondering something related to this. Right now I actually\nhave duplicate date to keep things sane, i.e.\n- In a json script tag I dump all the store state on page load, this\n  gets injected in the stores as initial state when my flux \"boots\".\n- Segments of data from the above dump is also passed as props to the\n  toplevel components (server side rendered).\nWe have a convention that top level components use props as initial state\n(that would normally come from one or more stores). There's basically no\nway for top level components to receive new props anyway so they are in\nfact a sort of \"initial state\".\nUnrelated but we also enforce that only top level component get data from\nstores and pass down snippets to lower level components as props.\nNow this works great, but I would like to get rid of that data\nduplication. The only way I can see that happening is to be able to boot up\nmy stores in the server side javascript context. The way I imagine this\nhappening is making sure a request gets one JS context, and you have a way\nof executing some pseudo arbitrary JS in it, to setup your store states.\nAfter that all component renders execute in that JS context.\nI dunno if that makes sense but an API for that would make it easy to\nincorporate any flux paradigm you want.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/143#issuecomment-70420778.\n. \n",
    "goatslacker": "@willcosgrove sorry to bring this issue back from the dead, did alt solve what you were trying to do originally?\n. ",
    "kanfet": "\nHave you read this article: http://aspiringwebdev.com/react-js-and-flux-in-rails-a-complete-example/?\n\nThere are nothing about server-side rendering.\n. rails/spring#383\nI have same issue.\nWorkaround: run with DISABLE_SPRING environment variable, e.g.:\nDISABLE_SPRING=true rails g react:install\n. ",
    "sgwilym": "+1 for this. Been wrangling with react-rails, Reflux and Turbolinks in particular the last two days and finally have something that (awkwardly) works. I think @bogdan-dumitru's idea of a generic implementation would be a great fit if you don't want to marry this project to any specific way of doing flux.\n. ",
    "ConradIrwin": "I fixed a problem with the same error message by removing //=require react and //= require react_ujs in my components.js. Not sure if that will help you in this case.\n. I have two files, serverside.js is used by react prerendering, and application.js is included on the client and pulls in serverside.js.\n``` javascript\napp/assets/javascript/react/application.js\n//=require react\n//=require react_ujs\n//=require ./serverside.js\n```\n``` javascript\napp/assets/javascript/react/serverside.js\n//=require reflux\n//=require_tree ./actions\n//=require_tree ./stores\n//=require_tree ./components\n```\nTo configure react to use only the serverside file:\n``` ruby\nconfig/application.rb\nconfig.react.component_filenames = ['react/serverside.js']\n```\nTo configure the client to read both files:\n``` erb\nlayouts/application.html.erb\n<%= javascript_include_tag \"react/application.js\" %>\n``\n. I'm not. They're inapp/assets/javascripts/react/components`.\nConrad\nOn Fri, Feb 6, 2015 at 8:17 AM, Alec Hipshear notifications@github.com\nwrote:\n\nSo, I finally got around to testing this, and I'm not sure that setting\nwatchable_dirs is actually needed.\nWith a fresh Rails app, and both react-rails (master) and\nsprockets-coffee-react installed, I have no trouble in development mode\ngetting cjsx files to auto-reload. New files and changes are both picked up\non reload.\nAre you putting your cjsx files in app/assets/javascripts/components?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/154#issuecomment-73262479.\n. I'm using .cjsx files for coffee-script. We could change the gem to watch those too.\n. That sounds great, thanks!\n\nConrad\nOn Friday, February 6, 2015, Alec Hipshear notifications@github.com wrote:\n\nAhhh, I see, it's a prerender issue. I misunderstood, sorry!\nI'd rather not go down the path of \"documenting Rails features\" if we can\nhelp it. I think I would rather see a change to the railtie in the gem,\nmaybe to watch .*jsx instead of .jsx - would that help?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/154#issuecomment-73312433.\n. Good point, fixed! Interestingly enough this approach seemed to work for me because I used Dir[\"#{Rails.root}/app/assets/javascripts/react/*/\"]), which contained the directories too. \n. \n",
    "ericclemmons": "I found this via Google & had the same issue.  This messes up when you try to call setState while rendering on the server.  (I found out the hard way with react-resolver that setState cannot run on the server-side!)\nAnyway, here was my offending code:\n``` javascript\ncomponentWillMount() {\n  setInterval(updateTime, 1000);\n}\nupdateTime() {\n  this.setState({ time: new Date() });\n}\n```\nRemember that componentWillMount runs on both server & client.  Moving the code to componentDidMount, which only happens on the client solved the problem!\n\nhttp://facebook.github.io/react/docs/component-specs.html#mounting-componentwillmount\n. \n",
    "mweitzel": "@olance ..I experience the same error on Node v0.12.0 and React 0.13.2 when I pass a Parent's setState to a Child as a prop, then call it within componentWillMount\n. ",
    "wied03": "I have the same problem without even trying to pass info between child and parent. Just simply calling setState with some values fetched from outside React within componentWillMount on the server side render triggers it. React 0.13.13 / Node  v0.10.35\n. I'll see if I can do that.\n. I haven't looked at the module/dependency code in there, but why not just force someone to include react first, then the addons they want?\n. I would ask how people in a pure JS environment test React components with say Karma but I guess they just use the karma webpack plugin directly and thus they avoid the duplication that way.\nWhat about using this approach? https://github.com/webpack/webpack/tree/master/examples/multi-part-library\nI haven't got a chance to experiment with it yet. Has that been looked into before?\n. @rmosolgo - Are the travis/other hooks manual or did github not run them?\n.  I toggled it. Maybe that will work. \n. If you're have the server do the initial render, which I often do, you won't do a static render, you would just do a prerender: true. Otherwise I think there would be little point to a server side render because without checksums, etc, the client side has to do everything again.\n. ",
    "navela": "@ericclemmons comment worked for me, I had the issue and was trying to set the initial state for a store in componentWillMount(), changed to componentDidMount() and it fixed the problem. I was using alt and need to set the initial state in case you don't want to use the AltContainer. Thanks, a scary problem to debug\n. no you are right it didn't really fix anything, but server side when a route comes in via express I seed my stores using alt.bootstrap, so it was only an issue client side where I need to call an action to update the stores again, because I am using react-router for client side routing.\n. ",
    "chaseadamsio": "Check React issue facebook/react#3620, should be fixed in React 0.14.\n. ",
    "blainekasten": "We've organized our code a little differently. We see components as truly reusable elements/combination of elements. So we have components/ host those things, like a sidebar component, or a vehicle component where they are used in different things. \nThen, for more of typical \"views\" where they aren't quite \"components\" i'd suggest putting them in a views/folder. So structure more like:\napp/\n   assets/\n       javascripts/\n          components/\n              reusable_component.jsx\n          views/\n              posts/\n                  index.jsx\n. Try putting the config.react.addons = true in the config/application.rb file and see if that still works. \n. @ericdfields That seems like a reasonable approach. Thanks for that tip. I could see it being a tall order, so I understand the feeling to hold off on it. I would say releasing v1 is probably a bigger priority.\n. Do you think we could take advantage of the context feature? maybe something like, if a component has a:\njs\nMyComponent.contextTypes = {\n    csrfToken: React.PropTypes.string.isRequired\n}\nThen, that would be available on the context through the gem? Since the gem would have access to the ruby method form_authenticity_token\n. If you're using a build system, download the code through npm. Otherwise you'll probably need to copy/paste the code into a file and load it through the asset pipeline.\nhttps://github.com/yahoo/react-intl/blob/master/dist/react-intl.js\n. Sorry, maybe I wasn't as clear. \nInstalling through npm doesn't give rails the natural ability to find the file. npm is helpful if you use an external build system integrated with rails (like webpack, grunt, gulp, browserify). I would suggest for your situation to simply copy the code, and paste it in \nvendor/\n  javascripts/\n    react-intl.js\nThat file will then be available to the asset pipeline.\n. You probably need to add the files to the precompile list.\n```\n/config/initializers/assets.rb\nRails.application.config.assets.precompile += %w( ... seperate_jsx_file.js )\n```\n. @rmosolgo You're a genius! That completely was it. I changed to use lodash's _.snakeCase fn, and now it works! Thanks a lot.\n. yeah. I could also see something cool like that being printed to the ruby console. a good example of an error indicator is the babel compiler. When it encounters errors, it spits out a syntax highlighted output of the error line and the surrounding lines. That could also be a great solution.\n. ",
    "mattmarcello": "I will add that I've encountered this same problem in a production environment.  There was no issue in development, however.\n. ",
    "KendallPark": "I am having this issue as well. I have config.react.addons = true set in my application.rb file. addons is not defined on React. \n. Nm. Forgot I was using the 0.13 RC. Grabbed the right file with the addons and it's working as expected.\n. ",
    "hopsoft": "Note: config.react.addons = true must be placed in application.rb. Placing it in an initializer does not work.\n. ",
    "paulkaplan": "The readme makes it sound like it belongs in environment/[production|development].rb.\n. ",
    "trivektor": "I'm encountering this in 1.4.2.\n. +1\n. ",
    "maximhoffman": "@xionon @zpao Maybe you are right, but i wrote my project by official tutorial. Anyway, i change getInitialState function on data: null, but rails return Parse Error again:\nError: Parse Error: Line 30: Unexpected token .\nWhen i remove braces, everything is ok.\nThis is reason why i wrote in react-rails gem issue. \n. ",
    "mpereira": "@xionon people using side builds with browserify or webpack might not be using files with a \".jsx\" extension, but \".js\" instead (my case). I had to add config.watchable_files.concat(['app/assets/javascripts/bundle.js']) to config/development.rb to get the JS VM reloading the JS bundle when it changed, for prerender. Using the latest master (99a1b38b28dbade8bac7b58bca0454d7348235de).\n. ",
    "dfguo": "@mpereira I'm in a similar situation. I'm using webpack, but putting \nconfig.watchable_files.concat(['app/assets/javascripts/bundle.js'])\nto config/development.rb doesn't work for me...\n. works after i used absolute path:\nconfig.watchable_files.concat Dir[\"#{Rails.application.root}/app/assets/javascripts/bundle.js\"]\n. +1 on this issue\n. I'm having the same issue where my assets are not found in ::Rails.application.assets[filename].to_s. This change actually fixes it.\n. @rstudner yes, similar problem. I'm not sure why in prod my file returns as nil when calling ::Rails.application.assets[filename].to_s.  I took your code and added a simple cache:\n```\n      def load_asset(file)\n        if ::Rails.application.config.assets.compile\n          ::Rails.application.assets[file].to_s\n        else\n          @filemap[file] ||= read_file(file)\n        end\n      end\n  def read_file(file)\n    asset_path = ActionView::Base.new.asset_path(file)\n    File.read(File.join(::Rails.public_path, asset_path))\n  end\n\n```\nTake note that my set up is slightly different, I use webpack to generate one final bundle file:\nRails.application.config.react.server_renderer_options = {\n    files: ['webpack-bundle.js'], # files to load for prerendering\n}\n. @rstudner it's actually fairly simple. We did a sharing at Ruby Conf China this year. \nVideo: https://www.youtube.com/watch?v=3G4SFsl5p6s\nSlides: https://speakerdeck.com/onlimii/rails-off-assets-pipeline\nTLDR version: output the webpack generated bundle to app/assets/javascript/bundle  folder and let Rails sprocket load it. \nWe have been using react-rails gem purely for server-side rendering. Honestly, it's a bit bloated for what we use it for.\n. ",
    "serv": "Is there any update to this issue?\n. In addition to what others said,\nyou need to add node_modules into your asset compilation path.\nIn application.rb, add\nconfig.assets.paths << Rails.root.join('node_modules')\nRestart the rails server.\nNow you can do something like \n//= require lodash/lodash\n. ",
    "oelmekki": "In case anyone wonders, server side generated component can be cached \nusing rails caching with no problem as far I've tested (I was wondering \nif all react-id things wouldn't be a problem).\nNot sure yet if this is very helpful, as properties passed may change \noften.\n. Hi @ssaunier ,\nNothing fancy, I just use standard russian doll caching:\nhaml\n- cache my_cache_key do\n  = react_component 'MyComponent', my_props, prerender: true\nIn my last project, I've succeeded in caching \npretty much everything. The key here was to make a cache key for my \nthree possible kinds of users: not logged in, logged in and admin. I \n use a helper to generate key:\n``` ruby\n  def custom_cache_key( prefix, resource, collection: false )\n    if current_user\n      prefix += '-logged'\n      prefix += '-admin' if current_user.is_admin?\n    end\nif collection\n  \"#{prefix}-#{resource.maximum( :updated_at ).to_i}\"\nelse\n  \"#{prefix}-#{resource.cache_key}\"\nend\n\nend\n```\nI can then use it like this (the presenter class returns a hash for properties):\nhaml\n  - cache custom_cache_key( 'product-list-hot', @products, collection: true ) do\n    = react_component 'ProductList', ProductPresenter.collection( @products, self ).to_h, prerender: true\nThe thing is, properties can be different for pretty much every user, \nso you have to consider caching while designing your component.\nI've avoided adding user specific info in my components. Should I need\nit at some point, I'll probably retrieve user data in\ncomponentDidMount, either making a xhr or using a data store loaded\nin page, with just the info needed, and then setStateing them.\n. You're welcome :)\nOh, a last thing: given the composable nature of react, you have to \ncache the root component, which can invalidated quite often. A list, \nfor example, will be invalidated for any item change, and you can't ask \nto cache each item instead of the list.\nFor that reason, your caching should be short living, or you'll have \nmemory troubles.\nI use redis, so I've set this in cache configuration:\nruby\n  config.cache_store = :redis_store, redis_url, { expires_in: 90.minutes }\n. ",
    "ssaunier": "@oelmekki Could you provide a code example of how your handle caching the react_component call?\nThanks!\n. @oelmekki Thanks for the quick reply, great material! :+1: \n. ",
    "justin808": "FYI: https://github.com/cowboyd/therubyracer/tree/upgrade-to-v8-4.5 When this comes out, that will enable multi-threaded rendering, hopefully.\n. @cowboyd, any chance that you can comment here?\n. FYI: https://github.com/cowboyd/therubyracer/tree/upgrade-to-v8-4.5 When this comes out, that will enable multi-threaded rendering, hopefully.\n. We should probably have a skype to do some dual code reading. I don't know enough about Sprockets. However, I read the view helper code carefully. The thing about my webpack strategy is that all the configuration for the JS code is in the webpack config file, and ALL the js assets are underneath a /client directory so you can open up the JS code in a JS editor, like WebStorm. Based on reading some react-rails code, it seems like the trick is to make whatever react components global for running execjs. When webpack gets done with it's thing, it just creates one honking es-5 JS file that's got everything neatly bundled. That file is excluded from source code control.\nLet's talk more on skype or slack.\n. The key question is whether it makes sense to have a separate gem that just has the helper methods, and then this gem could depend on the gem with the helpers.\nI think this gem includes the react source and has close integration with sprockets.\nMy solution just requires including one specified JS file that is prepared by webpack either by a watch process during development (using foreman to start, for example), or pre-compiled.\nThe technique is explained here:\nhttp://www.railsonmaui.com/blog/2014/10/03/integrating-webpack-and-the-es6-transpiler-into-an-existing-rails-project/\n. I'll create a fork and throw up a PR for us to play with. It will be really fun to get this working. I'll post a message once this is somewhat working. If anybody wants to work with me on this, please email me: justin@railsonmaui.com.\n. I published an alpha version here: https://rubygems.org/gems/react_on_rails.\nIt relies heavily on webpack. I'd be interested in possibly merging this code, but I'm not sure it makes sense since the approach is a bit different.\nThe API is a little bit different to support redux. You create a function that takes props and returns a React component rather than just rendering a react component.\nHere's the source:\nhttps://github.com/shakacode/react_on_rails/\n. @taylorbrooks What are we missing in the gem https://github.com/shakacode/react_on_rails/ (BTW -- just about to merge a very important PR).\n. @rmosolgo We've got react-rails mentioned a couple of times in our https://github.com/shakacode/react_on_rails/blob/master/README.md for react_on_rails.\nWould you be amenable to a link to react_on_rails from your README as an alternative if one wants to use webpack? BTW, @chrisvfritz has tried out react_on_rails :smile:.\n. @thelamborghinistory Both react-rails and react_on_rails are two completely legit and different ways of attacking the same problem. \n- react-rails is focused on the pure \"Rails\" way of using the asset pipeline at a deep level.\n- react_on_rails is focused on a webpack based technique that keeps the front end code very much in the JavaScript land of tooling. This enables advanced JavaScript features such as CSS Modules and hot reloading. This technique would also make disassociation from Rails relatively easy.\n@thelamborghinistory Does this answer your question?\n@rmosolgo Did I miss anything?\n. > See, my issue was more of a general nature. I am just getting pissed off more and more nowadays with developers, as in general everyone behaves like he needs to do some own thing instead of extending existing solutions to his needs.\nPersonally, I have an attitude of gratitude with open source. IMHO, it's one the greatest things that's ever happened to our industry. \nI have written a very detailed response here on medium.com:\nAn Attitude of Gratitude for Open Source\nIf you read this and agree, please do click the heart at the bottom of the medium page, as this encourages medium to share this article more widely.\nI'm not going to repeat most of what I wrote there. However, for this discussion, some very specific differences between react-rails and react_on_rails v2 are:\nHere\u2019s a few of the key differences I see between React on Rails now and the v2 of react-rails:\n- react_on_rails is available now for Webpack with many live sites listed and probably many more unlisted, at our PROJECTS.md page.\n- Default configuration: Since Webpack will be an add-on for react-rails, it might not have the unified community around it compared to the React on Rails community, backed by my team from ShakaCode. Our community is based around native JavaScript tooling, including webpack and npm.\n- Backwards compatibility: Since react-rails will strive to make their solution an easy upgrade, Webpack will probably not be the default option, as the feature proposal for v2 of react-rails is: Improve the flexibility of React addons: Support custom ReactJS builds (backed with npm & webpack, built into the apps asset directory).\nTo be honest, I\u2019m not the one to speak on v2 react-rails, as I\u2019m only aware of the public feature list posted on github.\nIncidentally, react_on_rails uses Semantic Versioning, so we bump our major version number for any deprecation or other minor configuration changes. Even though we're on v6.x, the changes to upgrade have been very straightforward, as listed in our CHANGELOG.md.\n. @catmando Have you tried https://github.com/shakacode/react_on_rails/ ?\n. @vipulnsward I'm not sure if there are any conflicts. I guess I'll fork and find out!\n. @rmosolgo Hi! After a fair bit tinkering, we've got a working version of a gem focused on using React + Rails with Webpack: https://github.com/shakacode/react_on_rails/. Any feedback would be awesome. We're going to be adding lots of utilities for making webpack integrations with Rails easier.\n@guzart What do you mean \"sprockets\" being an issue?\n. @guzart Why do you want to do that? One of my team members at https://github.com/shakacode/ is @alexfedoseev who wrote up: https://medium.com/@alexfedoseev/isomorphic-react-with-rails-part-i-440754e82a59.\nThere's many advantages to sticking with sprockets, mainly around simplicity, such as:\n1. Using one port for the app so not needing to setup CORS.\n2. Let Rails handle image/font fingerprinting for use with sass-rails, and bootstrap-sass.\n. @guzart wrote:\n\nbut adding an express adds complexity to the app. Which for some might be a good tradeoff in exchange for performance on server side rendering but it's not for me.\n\nThe \"hot reload server\" setup on my system on a different port is totally, 100% optional, if you want to see live reloading. On Alex's system, it's a lot of extra work. FWIW, Alex and I are working on a production system and we're using react_on_rails.\nA year ago, I wrote the https://www.npmjs.com/package/bootstrap-sass-loader/ and I experimented with the extract-text-plugin to write out the sass, but it was more work to make it work with asset fingerprinting, while the bootstrap-sass gem with sass-rails worked perfectly. So we settled on a solution that uses a few shared files and a few sym links.\nIn any case, I'm looking forward to seeing what you come up with and any feedback on our https://github.com/shakacode/react_on_rails gem!\n. :tada: We completed our view helper, generator, and tons of docs at https://github.com/shakacode/react_on_rails\nSupports Redux + Server Rendering + Webpack.\n. I'm getting the same exact issue. I'm trying to make server rendering work with https://github.com/justin808/react-webpack-rails-tutorial/\n. I have code in react_on_rails that simply checks if document is defined before doing anything that's client based (as opposed to server rendering based). \nThus, have a conditional before any place you'd need to use document on the server rendering part.\n. @aflanagan if you want a webpack based solution, take a look at https://github.com/shakacode/react_on_rails/ and the example app: https://github.com/shakacode/react-webpack-rails-tutorial/.\n. @ynonp the gist link only works for you \n. All, we've got this working using https://github.com/shakacode/react_on_rails/. We're about to put in the example of https://github.com/shakacode/react-webpack-rails-tutorial/ using the gem. We're using this in 3 commercial projects. We're about to have this working with react + redux + react-router + server rendering plus rails in the tutorial. It's not so much of a tutorial but a sample. Please feel free to reach me directly if you need more info. PR's on the shakacode projects are desirable!\n. @ynonp We just haven't put that in yet...If you want to make that pull request, I can help you. No reason it shouldn't work. We're planning on it. This is an example: https://github.com/shakacode/react_on_rails/tree/master/spec/dummy\n. https://github.com/shakacode/react_on_rails is READY with Redux + Server Rendering + Webpack.\n. @NullVoxPopuli You're either going to use react-rails or react_on_rails, or you can just do I used to with some build scripts that put the JS file in the Rails, as I used to do.\nhttp://www.railsonmaui.com/blog/2014/10/03/integrating-webpack-and-the-es6-transpiler-into-an-existing-rails-project/\n. If anybody's interested, I just released v1.0.0.pre of react_on_rails https://github.com/shakacode/react_on_rails. Support for React 0.14 & 0.13, Webpack, Rails, Redux, ES7, NPM. I duplicated my test app directory to test for React 0.13. That was a pain. I wonder if there was any easier way.\n. Thanks @rmosolgo! I should make a quick test and compare what happens. \n. @rmosolgo Big thanks! :smile: \n. @woniesong92 You might consider https://github.com/shakacode/react_on_rails/. We have built-in support for Redux, including a Rails generator. See http://www.reactrails.com/ for a live example.\n. @rmosolgo @abevoelker I'll be adding webpacker support for React on Rails within the next couple of weeks. Webpacker is essentially adding some asset helpers that will make it easier to load webpack files from Rails views. This topic is sort of orthogonal to the react-rails and react_on_rails gems other than we can create deployment files easily without going through the asset pipeline. Webpacker is a bit special in that we're going to make it depend on on Webpack v2.x.. This discussion might be related, as Webpacker currently wants hosts in the manifest.json: https://github.com/rails/webpacker/issues/464. I'm trying to get this changed so that React on Rails might depend on Webpacker and not Webpacker Lite.. In case anybody is curious, I'm working on this right now. Stay tuned.. ",
    "SqueezedLight": "That did the trick, thanks a lot rmosolgo! I didn't know that i can do that.\nThank you very much.\n. Hi, seems i can not get things working with javascript_include_tag 'application', async: true\nAny ideas how to fix that?\nThanks!\n. Ok ,thanks for your help. That solved the problem.\n. Thanks for the link, but sadly no :(\nThe strange thing is i can reproduce the behavior in development when i precompile my assets (no minification). That's when things stop working. Without precompiling everything works as expected...\n. Browser cache is disabled and rails /tmp is cleaned before these tests. Then i start the rails dev server from scratch and precompile the assets. That is why i think caching is not the problem here...\nAnother strange thing is that the jquery load() function is also not fired on this image...\ncomponentDidMount: function() {\n  $(\"#img\").load(function(){\n    console.log(\"fire\");            \n  });\n}\n. @rmosolgo I tried your code (from the link) and it works!! Sorry for being so stupid. Right now i don't get where the cached image comes from, but i think we can close this.\nThanks a lot for your help and patience!\n. ",
    "rringham": "Did some more testing, and it looks like it seems to come down to Turbolinks. If I disable Turbolinks (e.g. data-no-turbolink on the body element in my layouts), the problem sort of goes away - at least for Chrome. But on Safari, it becomes even more unpredictable.\nI'd prefer to not disable Turbolinks... but I'm worried that this is going to be a limitation of react-rails.\n. Looks like this resolves this for Safari - it's combination of disabling Turbolinks, and the Safari window.onunload trick:\n<body data-no-turbolink data-no-transition-cache>\n...\n<script type=\"text/javascript\">\n    window.onunload = function(){};\n</script>\n</body>\n. ",
    "luopio": "I had similar issues and my solution was to remove the data-react-class attribute in the component rendered by react_component. Something along these lines inside the component:\njavascript\ncomponentDidMount: function() {\n  $(this.getDOMNode()).parent().removeAttr('data-react-class');\n},\nThe root of the issue seemed to be Turbolinks saving page state when leaving the page and after component unmounting in rails_ujs. I'm not sure what kind of long-term issues this might cause but seems to work so far.\n. Works here. I can get rid of my data-react-class removing code and back navigation still works. \n. ",
    "lolychee": "\nthe document.body is the actual content, please delete https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L51\n. ",
    "baash05": "Is this back? I'm seeing something that might be related.. when I click on an anchor link my component gets removed. . ",
    "abitdodgy": "@rmosolgo @danott thanks guys. That gives me a lot of confidence. Would you be kind enough to elucidate:\n1. When to use server side rendering versus browser rendering?\n2. How do you wire up your restful Rails routes and pass them to the component?\nI have a mental gap of how to bridge the Rails app with something that is meant to handle the view layer only.\n. Thanks everyone and @bogdan-dumitru for chipping in. I think sometimes it's best to take the plunge and see what happens. At this point I'm not concerned about react-rails. I'm more concerned about my ability to be productive doing SAP. Only one way to find out.\n. @rmosolgo yes, I figured that might be the use case, and I intend to use it the same way. I'm just worried about taking the plunge without enough guidance and info out there on integrating it with Rails. I feel like I'm always ready to just fallback to jQuery because I already overcame the learning curve and I can do it quickly. But I also despise the lack of maintainability of spaghetti jQuery.\n. @jjulian sorry, I didn't state that I ran bundle install because it seemed obvious, but I did run it, and it completes normally.\n. Yes, same result, unfortunately. I have this in my gem file:\ngem 'react-rails', '~> 1.0.0.pre', github: 'reactjs/react-rails'\n. @xionon @rmosolgo I'm afraid not. I'm already using 1.8.0 in my Gemlock. Here they are:\n``` ruby\nsource 'https://rubygems.org'\nBundle edge Rails instead: gem 'rails', github: 'rails/rails'\ngem 'rails', '4.2.0'\nUse postgresql as the database for Active Record\ngem 'pg'\nUse SCSS for stylesheets\ngem 'sass-rails', '~> 5.0'\nUse Uglifier as compressor for JavaScript assets\ngem 'uglifier', '>= 1.3.0'\nUse CoffeeScript for .coffee assets and views\ngem 'coffee-rails', '~> 4.1.0'\nSee https://github.com/sstephenson/execjs#readme for more supported runtimes\ngem 'therubyracer', platforms: :ruby\nUse jquery as the JavaScript library\ngem 'jquery-rails'\nTurbolinks makes following links in your web application faster. Read more: https://github.com/rails/turbolinks\ngem 'turbolinks'\nBuild JSON APIs with ease. Read more: https://github.com/rails/jbuilder\ngem 'jbuilder', '~> 2.0'\nbundle exec rake doc:rails generates the API under doc/api.\ngem 'sdoc', '~> 0.4.0', group: :doc\nUse ActiveModel has_secure_password\ngem 'bcrypt', '~> 3.1.7'\nUse Unicorn as the app server\ngem 'unicorn'\nUse Capistrano for deployment\ngem 'capistrano-rails', group: :development\ngroup :development, :test do\n  # Call 'byebug' anywhere in the code to stop execution and get a debugger console\n  gem 'byebug'\n# Access an IRB console on exception pages or by using <%= console %> in views\n  gem 'web-console', '~> 2.0'\n# Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\n  gem 'spring'\nend\n\nAdd custom gems below this line\n\ngem 'bootstrap-sass', '~> 3.3.1'\ngem 'autoprefixer-rails'\ngroup :development do\n  gem 'quiet_assets'\n  gem 'guard'\n  gem 'guard-minitest'\nend\ngroup :test do\n  gem 'shoulda'\nend\ngem 'rack-mini-profiler'\ngem 'devise'\ngem 'devise-i18n'\ngem 'rails-i18n'\ngem 'will_paginate'\ngem 'will_paginate-bootstrap'\ngem 'gravatar_image_tag'\ngem 'font-awesome-rails'\ngem 'react-rails', '~> 1.0.0.pre', github: 'reactjs/react-rails'\n```\n```\nGIT\n  remote: git://github.com/reactjs/react-rails.git\n  revision: 80f67226691280495a9d6f95901c8c0de00ed563\n  specs:\n    react-rails (1.0.0.pre)\n      coffee-script-source (= 1.8.0)\n      connection_pool\n      execjs\n      rails (>= 3.1)\n      react-source (~> 0.12)\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionmailer (4.2.0)\n      actionpack (= 4.2.0)\n      actionview (= 4.2.0)\n      activejob (= 4.2.0)\n      mail (~> 2.5, >= 2.5.4)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n    actionpack (4.2.0)\n      actionview (= 4.2.0)\n      activesupport (= 4.2.0)\n      rack (~> 1.6.0)\n      rack-test (~> 0.6.2)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.1)\n    actionview (4.2.0)\n      activesupport (= 4.2.0)\n      builder (~> 3.1)\n      erubis (~> 2.7.0)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.1)\n    activejob (4.2.0)\n      activesupport (= 4.2.0)\n      globalid (>= 0.3.0)\n    activemodel (4.2.0)\n      activesupport (= 4.2.0)\n      builder (~> 3.1)\n    activerecord (4.2.0)\n      activemodel (= 4.2.0)\n      activesupport (= 4.2.0)\n      arel (~> 6.0)\n    activesupport (4.2.0)\n      i18n (~> 0.7)\n      json (~> 1.7, >= 1.7.7)\n      minitest (~> 5.1)\n      thread_safe (~> 0.3, >= 0.3.4)\n      tzinfo (~> 1.1)\n    arel (6.0.0)\n    autoprefixer-rails (5.1.5)\n      execjs\n      json\n    bcrypt (3.1.10)\n    binding_of_caller (0.7.2)\n      debug_inspector (>= 0.0.1)\n    bootstrap-sass (3.3.3)\n      autoprefixer-rails (>= 5.0.0.1)\n      sass (>= 3.2.19)\n    builder (3.2.2)\n    byebug (3.5.1)\n      columnize (~> 0.8)\n      debugger-linecache (~> 1.2)\n      slop (~> 3.6)\n    celluloid (0.16.0)\n      timers (~> 4.0.0)\n    coderay (1.1.0)\n    coffee-rails (4.1.0)\n      coffee-script (>= 2.2.0)\n      railties (>= 4.0.0, < 5.0)\n    coffee-script (2.3.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.8.0)\n    columnize (0.9.0)\n    connection_pool (2.1.1)\n    debug_inspector (0.0.2)\n    debugger-linecache (1.2.0)\n    devise (3.4.1)\n      bcrypt (~> 3.0)\n      orm_adapter (~> 0.1)\n      railties (>= 3.2.6, < 5)\n      responders\n      thread_safe (~> 0.1)\n      warden (~> 1.2.3)\n    devise-i18n (0.11.3)\n    erubis (2.7.0)\n    execjs (2.3.0)\n    ffi (1.9.6)\n    font-awesome-rails (4.3.0.0)\n      railties (>= 3.2, < 5.0)\n    formatador (0.2.5)\n    globalid (0.3.2)\n      activesupport (>= 4.1.0)\n    gravatar_image_tag (1.2.0)\n    guard (2.12.1)\n      formatador (>= 0.2.4)\n      listen (~> 2.7)\n      lumberjack (~> 1.0)\n      nenv (~> 0.1)\n      notiffany (~> 0.0)\n      pry (>= 0.9.12)\n      shellany (~> 0.0)\n      thor (>= 0.18.1)\n    guard-compat (1.2.1)\n    guard-minitest (2.4.3)\n      guard-compat (~> 1.2)\n      minitest (>= 3.0)\n    hike (1.2.3)\n    hitimes (1.2.2)\n    i18n (0.7.0)\n    jbuilder (2.2.6)\n      activesupport (>= 3.0.0, < 5)\n      multi_json (~> 1.2)\n    jquery-rails (4.0.3)\n      rails-dom-testing (~> 1.0)\n      railties (>= 4.2.0)\n      thor (>= 0.14, < 2.0)\n    json (1.8.2)\n    listen (2.8.5)\n      celluloid (>= 0.15.2)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9)\n    loofah (2.0.1)\n      nokogiri (>= 1.5.9)\n    lumberjack (1.0.9)\n    mail (2.6.3)\n      mime-types (>= 1.16, < 3)\n    method_source (0.8.2)\n    mime-types (2.4.3)\n    mini_portile (0.6.2)\n    minitest (5.5.1)\n    multi_json (1.10.1)\n    nenv (0.2.0)\n    nokogiri (1.6.6.2)\n      mini_portile (~> 0.6.0)\n    notiffany (0.0.4)\n      nenv (~> 0.1)\n      shellany (~> 0.0)\n    orm_adapter (0.5.0)\n    pg (0.18.1)\n    pry (0.10.1)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    quiet_assets (1.1.0)\n      railties (>= 3.1, < 5.0)\n    rack (1.6.0)\n    rack-mini-profiler (0.9.2)\n      rack (>= 1.1.3)\n    rack-test (0.6.3)\n      rack (>= 1.0)\n    rails (4.2.0)\n      actionmailer (= 4.2.0)\n      actionpack (= 4.2.0)\n      actionview (= 4.2.0)\n      activejob (= 4.2.0)\n      activemodel (= 4.2.0)\n      activerecord (= 4.2.0)\n      activesupport (= 4.2.0)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.2.0)\n      sprockets-rails\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (>= 4.2.0.alpha)\n    rails-dom-testing (1.0.5)\n      activesupport (>= 4.2.0.beta, < 5.0)\n      nokogiri (~> 1.6.0)\n      rails-deprecated_sanitizer (>= 1.0.1)\n    rails-html-sanitizer (1.0.1)\n      loofah (~> 2.0)\n    rails-i18n (4.0.3)\n      i18n (~> 0.6)\n      railties (~> 4.0)\n    railties (4.2.0)\n      actionpack (= 4.2.0)\n      activesupport (= 4.2.0)\n      rake (>= 0.8.7)\n      thor (>= 0.18.1, < 2.0)\n    rake (10.4.2)\n    rb-fsevent (0.9.4)\n    rb-inotify (0.9.5)\n      ffi (>= 0.5.0)\n    rdoc (4.2.0)\n    react-source (0.12.2)\n    responders (2.1.0)\n      railties (>= 4.2.0, < 5)\n    sass (3.4.11)\n    sass-rails (5.0.1)\n      railties (>= 4.0.0, < 5.0)\n      sass (~> 3.1)\n      sprockets (>= 2.8, < 4.0)\n      sprockets-rails (>= 2.0, < 4.0)\n      tilt (~> 1.1)\n    sdoc (0.4.1)\n      json (~> 1.7, >= 1.7.7)\n      rdoc (~> 4.0)\n    shellany (0.0.1)\n    shoulda (3.5.0)\n      shoulda-context (~> 1.0, >= 1.0.1)\n      shoulda-matchers (>= 1.4.1, < 3.0)\n    shoulda-context (1.2.1)\n    shoulda-matchers (2.8.0)\n      activesupport (>= 3.0.0)\n    slop (3.6.0)\n    spring (1.3.0)\n    sprockets (2.12.3)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sprockets-rails (2.2.4)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      sprockets (>= 2.8, < 4.0)\n    thor (0.19.1)\n    thread_safe (0.3.4)\n    tilt (1.4.1)\n    timers (4.0.1)\n      hitimes\n    turbolinks (2.5.3)\n      coffee-rails\n    tzinfo (1.2.2)\n      thread_safe (~> 0.1)\n    uglifier (2.7.0)\n      execjs (>= 0.3.0)\n      json (>= 1.8.0)\n    warden (1.2.3)\n      rack (>= 1.0)\n    web-console (2.0.0)\n      activemodel (~> 4.0)\n      binding_of_caller (>= 0.7.2)\n      railties (~> 4.0)\n      sprockets-rails (>= 2.0, < 4.0)\n    will_paginate (3.0.7)\n    will_paginate-bootstrap (1.0.1)\n      will_paginate (>= 3.0.3)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  autoprefixer-rails\n  bootstrap-sass (~> 3.3.1)\n  byebug\n  coffee-rails (~> 4.1.0)\n  devise\n  devise-i18n\n  font-awesome-rails\n  gravatar_image_tag\n  guard\n  guard-minitest\n  jbuilder (~> 2.0)\n  jquery-rails\n  pg\n  quiet_assets\n  rack-mini-profiler\n  rails (= 4.2.0)\n  rails-i18n\n  react-rails (~> 1.0.0.pre)!\n  sass-rails (~> 5.0)\n  sdoc (~> 0.4.0)\n  shoulda\n  spring\n  turbolinks\n  uglifier (>= 1.3.0)\n  web-console (~> 2.0)\n  will_paginate\n  will_paginate-bootstrap\n``\n. @rmosolgo I just removed a bunch of gems and tried again, and the generator still gives me the same error message. Not really sure what's going on. I removed react-source, updated, downgraded coffee-script-source manually to 1.8.0, successfully ran bundle install. But the generator is still busted.\n. Sorry for spouting off, but I guess the generator is not a big deal. I can create the stuff manually. But it's something to look into.\n. @xionon thanks for looking into this. In fact, it's not just the react generator. It seems like all the generators break with the same message, simply by including therails-react` gem.\n. Hi guys, @rmosolgo @vipulnsward I'm afraid not.\nbundle exec gem list coffee-script-source\n*** LOCAL GEMS ***\ncoffee-script-source (1.9.1)\nBoth normal and with bundle exec.\nbundle exec rails g react:install\ngit://github.com/reactjs/react-rails.git (at master) is not yet checked out. Run `bundle install` first.\nI even downgraded coffee-script-source 1.8.0  and I still get the same error. Can anyone share what version of spring they are using?\n. Solved! It turns out it's a Spring issue. Checkout the change log with releases 1.3.2 and 1.3.3 that purportedly fixed the issue. I upgraded Spring to 1.3.3 and it's fixed now.\n. @rmosolgo the links in your comment are broken. Do you have any other examples how to handle reactjs with Turbolinks?. ",
    "valscion": "I actually had misunderstood what was happening before, so actually everything did work correctly. The way eval was called did nevertheless feel a little weird for me, as if it mattered that we explicitly call eval indirectly with eval.call(window...) when just calling it with window.eval would also work (or any other mechanism which would call eval in an indirect way)\nIf we'd want to not accidentally try to load some component in IE <= 8, which would unfortunately have the same name as some variable in the local scope of react_ujs.js, we would not get the result we were looking for. And that would end up in some extremely strange bugs.\nWhat if the eval part was written like this?\njs\neval('window.' + className)\nThen it would at least force the lookup to happen at the window object. And solutions like #120 would still continue to work, and they would only have to worry about making such things visible in the global scope nevertheless.\nI'll admit that it might not be a big benefit if that case was handled, but maybe it would make the code easier to reason about?\n. Huh, I have no idea why the tests fail in CircleCI. They pass on my machine with the same appraisal command ran in Travis\n. > However, I can't see any repro case, where this eval wouldn't work as expected. We assume that react classes are either global or referenced as fields of global objects.\nYes, I actually pondered on this myself for some time ago. I think I have turned my head around the subject and come to the conclusion that this indirect eval actually works good enough and browsers which don't support indirect eval are not even the browsers React should work on (I believe).\nSo maybe this can be closed, as well as the issue related to this. :confused: \n. ",
    "nicolas-besnard": "@danott can you share your helper ?\n. I love it ! Thanks \n. I'm using turbolinks 2.5.3 with react-rails 1.0.0.pre. All my hook are being called as expected componentWillUnmount, componentWillMount etc ... That's really strange\n. Is may be caused by the $(this.refs.selectChosen).chosen(). I'll dig into it and update this post.\n. Still stuck. I think it's a little bit harder than your example to wrap the chosen library :/ I've disabled turbolinks for now.\n. ",
    "borisrorsvort": "I guess you'll still have to pay attention while doing that since: https://facebook.github.io/react/tips/dangerously-set-inner-html.html\n. @rmosolgo  Any idea if you'll switch to Babel one day? since it has become integrated in react-tools, it kind of make cense, am I wrong?\n. Would there be a possibility to remove the extra wrapper tag around each component?  For some small components its just a pity to have div > span if you just want a span.\n. More generally it can lead to some issues when you have a base Component css Class and use :first-child or stuff like that. Plus If you're using components in a loop that leads to massively more nodes in Dom tree and eventually perfomance issue. \n. :+1:  Well done! regarding the base extra wrapper. Shall I create another issue?\n. :+1:  @rmosolgo just to be clear, you'd support a PR or you'll include it in your roadmap?\n. @rmosolgo here you go :) https://github.com/reactjs/react-rails/pull/332\n. :+1: \n. @rmosolgo This is cool :) What is it missing to go on?\n. @rmosolgo  thanks for the review. Hope @garbles have time  to get this right :smile:  Can't wait :stuck_out_tongue: \n. \n. @rmosolgo Good enough?\n. @rmosolgo here you go\n. :+1: \n. Maybe we should say if there is a layout option or not :wink: \n. Or \"it behaves the same as normal render and his usual options\"\n. I believe it's needed for the generators. They also fixed it like suggested in the ticket on the react-on-rails project https://github.com/shakacode/react_on_rails/commit/1918345809869ee7d1a792bd894e52e842104243\ncc @rmosolgo. @szyablitsky Thanks for the clarification. Yet the problem persists with before-render in react-rails 1.10. Do you have any insights about where we should look?. @rmosolgo @hrishimittal Do you expect someone to make a pr or are you already working on a fix?. ",
    "jjulian": "It looks like you need to first run bundle install to get react-rails\ninstalled.\nOn Mon, Feb 9, 2015 at 1:44 PM, Mohamad El-Husseini \nnotifications@github.com wrote:\n\nI'm getting the following output when I try to run rails g react:install.\ngit://github.com/reactjs/react-rails.git (at master) is not yet checked out. Run bundle install first.\nI had a different issue (I believe related to the coffee-script-source\nbeing 1.9.0 but react-rails requiring 1.9.0). I ran bundle update to\nresolve this, but now I'm running into this error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/169.\n. \n",
    "nacengineer": "@abitdodgy I think this dependency is creeping in through the use of coffee-rails 4.1.0 I had the same issue \n```\nBundler could not find compatible versions for gem \"coffee-script-source\":\n  In snapshot (Gemfile.lock):\n    coffee-script-source (1.9.0)\nIn Gemfile:\n    react-rails (~> 1.0.0.pre) ruby depends on\n      coffee-script-source (= 1.8.0) ruby\n```\nBut when I relaxed coffee-rails back to 4.0.1 all was well. \n. also I had to --vendor my gems to run a bundle exec rails console. That may just be on my end. \n. well that part was required with the 1.8.0 bunder on my machine. however I think it was a bug and not an API change. It looks like they addressed this since then\nhttps://github.com/bundler/bundler/blob/master/CHANGELOG.md\nAs such this PR can be closed. \n. FWIW this also also breaks using react_component within the cells gem (in development) the 3.0 branch not current 4.0 branch. Perhaps this may help create a fix in isolation. It's not broken in 1.2.0. Still broken in 1.3.2\nAlso as a side note, perhaps its just me but if it were my gem and I knew it was broken (even if for a smaller subset) and is present in rubygems, I would advise yanking those versions.\n. @rmosolgo congrats on getting back east of the Mississippi, live is better on this side. \nFWIW all I have to do to trigger it is render a cell and use the the react_component helper in its view. Nothing special. \n. @rmosolgo Can confirm it fixes the issue in cells gem. Thanks! I'm always impressed with the responsiveness of react-rails gem's devs. Thanks\nI would still put a small plug in to yank previous 1.3.x gem as they're technically broken. Just from a technical support POV I don't think you want to rely on people coming across this thread if they run into the issue. IMO its not a better v. good issue. Its broken v. working. But its of course your call. \nBest of luck in VA! Thanks for the timely response. \n. aww sweet. I did look into a PR for updating it but didn't run across this doc. Now that I know I will definitely be doing that next time! \nThanks for all your work on this gem! It makes integrating react into rails dead simple. Can confirm this works with master branch \nSide note. You need babel > 7.0.0-beta.31 to use the fragment shorthand. \nrender() {\n  return (\n    <>\n      <ChildA />\n      <ChildB />\n      <ChildC />\n    </>\n  );\n}\nWithout that version of babel you have to use the longform React.Fragment. . ",
    "kirqe": "I can't even bundle with gem 'react-rails', '~> 1.0.0.pre', github: 'reactjs/react-rails'\nsame error as 1 comment above.\n. @rmosolgo works fine now. Thanks!\n. ",
    "arpansac": "@kanfet Thanks! Your solution also worked for me.\n. ",
    "Sonblind": "I had to run spring stop. That worked for me \ud83d\udc4d \n. ",
    "hackley": "Yes, the file is named member_list.js.jsx\nIn my view I have the following:\nerb\n<%= javascript_include_tag('react') %>\n<%= javascript_include_tag('react_components/member_list') %>\nAnd at the top of my JSX file is\njs\n/** @jsx React.DOM */\nI'm getting a console error: GET http://localhost:3000/assets/react_components/member_list.js 404 (Not Found)\nWhen I update the js include tag to:\nerb\n<%= javascript_include_tag('react_components/member_list.js.jsx') %>\nI get this console error: Uncaught SyntaxError: Unexpected token < (because it isn't compiled)\n. Yeah, just did once more to verify, but no change.\n. I got it working! I think it was some combination of a caching issue and JS load order... super weird, though. I'll reply here if I can unearth more details.\nThanks for the help!\n. ",
    "coorasse": "I had the same issue. Components were not precompiled. I had to stop rails, delete the tmp folder, and restart.\n. ",
    "danielrhodes": "@jonswar Having the same issue. I'll make a PR and see if the chmod works.\n. @rearadmiral Yep done. Didn't do anything fancy. Has been working for a couple months in production.\n. ",
    "morenoh149": "I ended up solving it like this\n``` javascript\n// app/assets/javascripts/components/logout_form.js.jsx\nvar Button = ReactBootstrap.Button;\nvar LogoutForm = React.createClass({\n  render: function() {\n    return (\n      \n\nLog out\n\n    );\n  },\nhandleSubmit: function(e) {\n    e.preventDefault();\n    var formData = $( this.refs.form.getDOMNode() ).serialize();\n    this.props.onLogoutSubmit( formData, this.props.form.action );\n  }\n});\n```\n``` javascript\n// app/assets/javascripts/components/navbar.js.jsx\nvar Navbar = ReactBootstrap.Navbar,\nNav = ReactBootstrap.Nav,\nNavItem = ReactBootstrap.NavItem,\nDropdownButton = ReactBootstrap.DropdownButton,\nButton = ReactBootstrap.Button,\nMenuItem = ReactBootstrap.MenuItem;\nvar NavbarInstance = React.createClass({\n  propTypes: {\n    userSignedIn: React.PropTypes.number,\n    presenter: React.PropTypes.string\n  },\ngetInitialState: function() {\n    var state = JSON.parse(this.props.presenter);\n    state.userSignedIn = this.props.userSignedIn; // add userSignedIn to state\n    return state;\n  },\nhandleLogoutSubmit: function(formData, action) {\n    var handler = $.ajax({\n      data: formData,\n      url: action,\n      type: \"DELETE\",\n      dataType: \"json\",\n      success: function ( data ) {\n        this.setState({ userSignedIn: 0 });\n      }.bind(this)\n    });\n    handler.fail(function() {\n      console.log('error');\n    });\n  },\nrender: function() {\n    var message;\n    if (this.state.userSignedIn) {\n      message = (\n        \n      );\n    } else {\n      message = (\n        \n\n            Login with LinkedIn\n          \n\n      );\n    }\nreturn (\n  <Navbar>\n    <Nav>\n      <NavItem eventKey={1} href=\"#\">Home</NavItem>\n      <DropdownButton eventKey={3} title=\"Dropdown\">\n        <MenuItem eventKey=\"1\">Action</MenuItem>\n        <MenuItem eventKey=\"2\">Another action</MenuItem>\n        <MenuItem eventKey=\"3\">Something else here</MenuItem>\n        <MenuItem divider />\n        <MenuItem eventKey=\"4\">Separated link</MenuItem>\n      </DropdownButton>\n    </Nav>\n    <Nav className=\"navbar-right\">\n        { message }\n    </Nav>\n  </Navbar>\n);\n\n}\n});\n```\nerb\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"ROBOTS\" content=\"NOODP\" />\n  <meta name=\"viewport\" content=\"initial-scale=1\" />\n  <%#\n    Configure default and controller-, and view-specific titles in\n    config/locales/en.yml. For more see:\n    https://github.com/calebthompson/title#usage\n  %>\n  <title><%= title %></title>\n  <%= stylesheet_link_tag :application, media: \"all\" %>\n  <%= csrf_meta_tags %>\n</head>\n<body class=\"<%= body_class %>\">\n  <%= react_component('NavbarInstance',\n                      {userSignedIn: user_signed_in?,\n                       presenter: @presenter.to_json}) %>\n  <div class=\"container\">\n    <%= render \"flashes\" -%>\n    <%= yield %>\n    <%= render \"javascript\" %>\n  </div>\n</body>\n</html>\n. solved by adding a transform to browserify. See https://github.com/browserify-rails/browserify-rails/issues/48\n. ",
    "noinkling": "Thanks for explaining, I opened a PR at #178 that will hopefully dispel any ambiguity. I think the issue was mostly that it wasn't clear that \"props\" in this context refers to a single collection of props, rather than individual props in general.\n. ",
    "JosephShering": "That was a solution I came to, but that's going to produce a ton of wrappers, especially for my other components like grids and dropdowns. I might have to ditch the react_component helper to avoid having tons of dumb wrapper components.\n. ",
    "aaronstillwell": "Sorry to dredge up such an old issue, but for the sake of people finding this via google et al., another way to use js in component props is to use a factory-like function in your js.\ne.g\nwindow.MyComponentInstance = (args) => <MyComponent onSelect={() => console.log('onSelect')} {...args} />;\nThen just load MyComponentInstance as you were.. ",
    "diegollams": "if(typeof this.props.onChange === 'string'){\n  window[this.props.onChange](name, value)\n}else{\n  this.props.onChange(name, value)\n}\nI came with this solution so you can pass the name of the function and if it is pass as a string you go check the window object\nDo you think it is a bad idea?. ",
    "elvanja": "components.js:\njs\n//= require_tree ./components\n. ``` js\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&requireif(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&requirefor(var o=0;o<r.length;o++)s(r[o]);return s})({\"/home/elvanja/projects/frugly/frugly-web-app/app/assets/javascripts/components/_stream_0.js\":[function(require,module,exports){\n(function() {\n  var ThingsTableRow;\nThingsTableRow = React.createClass({displayName: \"ThingsTableRow\",\n    render: function() {\n      return (\n    React.createElement(\"tr\", null, \n      React.createElement(\"td\", null, this.props.thing.name), \n      React.createElement(\"td\", null, this.props.thing._embedded.currency.symbol)\n    )\n  );\n    }\n  });\nmodule.exports = ThingsTableRow;\n}).call(this);\n},{}]},{},[\"/home/elvanja/projects/frugly/frugly-web-app/app/assets/javascripts/components/_stream_0.js\"])\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWluY3JlbWVudGFsL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9lbHZhbmphL3Byb2plY3RzL2ZydWdseS9mcnVnbHktd2ViLWFwcC9hcHAvYXNzZXRzL2phdmFzY3JpcHRzL2NvbXBvbmVudHMvX3N0cmVhbV8wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsQ0FBQyxXQUFXO0FBQ1osRUFBRSxJQUFJLGdCQUFnQixDQUFDOztFQUVyQixnQkFBZ0IsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLGtCQUFrQjtJQUNuRSxNQUFNLEVBQUUsV0FBVztNQUNqQjtJQUNGLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUk7TUFDNUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztNQUN4RCxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7S0FDOUU7SUFDRDtLQUNDO0FBQ0wsR0FBRyxDQUFDLENBQUM7O0FBRUwsRUFBRSxNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDOztDQUVuQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBBY2NvdW50c1RhYmxlUm93O1xuXG4gIEFjY291bnRzVGFibGVSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6IFwiQWNjb3VudHNUYWJsZVJvd1wiLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0clwiLCBudWxsLCBcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCBudWxsLCB0aGlzLnByb3BzLmFjY291bnQubmFtZSksIFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInRkXCIsIG51bGwsIHRoaXMucHJvcHMuYWNjb3VudC5fZW1iZWRkZWQuY3VycmVuY3kuc3ltYm9sKVxuICAgIClcbiAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQWNjb3VudHNUYWJsZVJvdztcblxufSkuY2FsbCh0aGlzKTtcbiJdfQ==\n```\nI'm in development, so components.js is empty. Above you have the compiled code of a component. That helps?\n. So I added puts @@components_js.call to the rendered, just at the top of #setup_combined_js method. This is what I get:\n``` js\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&requireif(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&requirefor(var o=0;o<r.length;o++)s(r[o]);return s})({\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/_stream_0.js\":[function(require,module,exports){\n(function() {\n  var ThingsTable, ThingsTableHeader, ThingsTableRow;\nThingsTableHeader = require(\"./things_table_header\");\nThingsTableRow = require(\"./things_table_row\");\nThingsTable = React.createClass({displayName: \"ThingsTable\",\n    getInitialState: function() {\n      return {\n        collection: this.props.initialCollection\n      };\n    },\n    render: function() {\n      var row;\n      row = function(thing) {\n        return (React.createElement(ThingsTableRow, {key: thing.id, thing: thing}));\n      };\n      return (\n    React.createElement(\"div\", {className: \"panel panel-default\"}, \n      React.createElement(\"div\", {className: \"panel-heading\"}, \n        React.createElement(\"h2\", {className: \"panel-title\"}, \"things\")\n      ), \n  React.createElement(\"div\", {className: \"panel-body\"}, \n    React.createElement(\"div\", {className: \"table-responsive\"}, \n      React.createElement(\"table\", {className: \"table table-hover tablesorter\"}, \n        React.createElement(ThingsTableHeader, null), \n        React.createElement(\"tbody\", null, \n          this.state.collection._embedded.things.map(row)\n        )\n      )\n    )\n  )\n)\n\n);\n    }\n  });\nmodule.exports = window.ThingsTable;\nwindow.ThingsTable = ThingsTable;\n}).call(this);\n},{\"./things_table_header\":\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/things_table_header.js.jsx.coffee\",\"./things_table_row\":\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/things_table_row.js.jsx.coffee\"}],\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/things_table_header.js.jsx.coffee\":[function(require,module,exports){\nvar ThingsTableHeader;\nThingsTableHeader = React.createClass({displayName: \"ThingsTableHeader\",\n  render: function() {\n    return (\n    React.createElement(\"thead\", null, \n      React.createElement(\"tr\", null, \n        React.createElement(\"th\", null, \n          React.createElement(\"div\", null, \"Name \", React.createElement(\"span\", {className: \"caret\"}))\n        ), \n        React.createElement(\"th\", null, \n          React.createElement(\"div\", null, \"Currency \", React.createElement(\"span\", {className: \"caret\"}))\n        )\n      )\n    )\n  );\n  }\n});\nmodule.exports = ThingsTableHeader;\n},{}],\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/things_table_row.js.jsx.coffee\":[function(require,module,exports){\nvar ThingsTableRow;\nThingsTableRow = React.createClass({displayName: \"ThingsTableRow\",\n  render: function() {\n    return (\n    React.createElement(\"tr\", null, \n      React.createElement(\"td\", null, this.props.thing.name), \n      React.createElement(\"td\", null, this.props.thing._embedded.currency.symbol)\n    )\n  );\n  }\n});\nmodule.exports = ThingsTableRow;\n},{}]},{},[\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/_stream_0.js\"])\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWluY3JlbWVudGFsL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9lbHZhbmphL3Byb2plY3RzL2ZydWdseS9mcnVnbHktd2ViLWFwcC9hcHAvYXNzZXRzL2phdmFzY3JpcHRzL2NvbXBvbmVudHMvX3N0cmVhbV8wLmpzIiwiL2hvbWUvZWx2YW5qYS9wcm9qZWN0cy9mcnVnbHkvZnJ1Z2x5LXdlYi1hcHAvYXBwL2Fzc2V0cy9qYXZhc2NyaXB0cy9jb21wb25lbnRzL2FjY291bnRzX3RhYmxlX2hlYWRlci5qcy5qc3guY29mZmVlIiwiL2hvbWUvZWx2YW5qYS9wcm9qZWN0cy9mcnVnbHkvZnJ1Z2x5LXdlYi1hcHAvYXBwL2Fzc2V0cy9qYXZhc2NyaXB0cy9jb21wb25lbnRzL2FjY291bnRzX3RhYmxlX3Jvdy5qcy5qc3guY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsQ0FBQyxXQUFXO0FBQ1osRUFBRSxJQUFJLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsQ0FBQzs7QUFFM0QsRUFBRSxtQkFBbUIsR0FBRyxPQUFPLENBQUMseUJBQXlCLENBQUMsQ0FBQzs7QUFFM0QsRUFBRSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7RUFFbkQsYUFBYSxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxXQUFXLEVBQUUsZUFBZTtJQUM3RCxlQUFlLEVBQUUsV0FBVztNQUMxQixPQUFPO1FBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCO09BQ3pDLENBQUM7S0FDSDtJQUNELE1BQU0sRUFBRSxXQUFXO01BQ2pCLElBQUksR0FBRyxDQUFDO01BQ1IsR0FBRyxHQUFHLFNBQVMsT0FBTyxFQUFFO1FBQ3RCLFFBQVEsS0FBSyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxFQUFFO09BQ3JGLENBQUM7TUFDRjtJQUNGLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLHFCQUFxQixDQUFDO01BQzNELEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsU0FBUyxFQUFFLGVBQWUsQ0FBQztRQUNyRCxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsRUFBRSxVQUFVLENBQUM7QUFDekUsT0FBTzs7TUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUM7UUFDbEQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsa0JBQWtCLENBQUM7VUFDeEQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsK0JBQStCLENBQUM7WUFDdkUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUM7WUFDOUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSTtjQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7YUFDbEQ7V0FDRjtTQUNGO09BQ0Y7S0FDRjtJQUNEO0tBQ0M7QUFDTCxHQUFHLENBQUMsQ0FBQzs7QUFFTCxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7QUFFeEMsRUFBRSxNQUFNLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQzs7Q0FFdEMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7QUMzQ2QsSUFBSSxtQkFBbUIsQ0FBQzs7QUFFeEIseUNBQXlDLG1DQUFBO0VBQ3ZDLE1BQU0sRUFBRSxXQUFXO0lBQ2pCO0lBQ0Esb0JBQUEsT0FBTSxFQUFBLElBQUMsRUFBQTtNQUNMLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUE7UUFDRixvQkFBQSxJQUFHLEVBQUEsSUFBQyxFQUFBO1VBQ0Ysb0JBQUEsS0FBSSxFQUFBLElBQUMsRUFBQSxPQUFBLEVBQUssb0JBQUEsTUFBSyxFQUFBLENBQUEsQ0FBQyxTQUFBLEVBQVMsQ0FBQyxPQUFRLENBQU8sQ0FBTSxDQUFBO1FBQzVDLENBQUEsRUFBQTtRQUNMLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUE7VUFDRixvQkFBQSxLQUFJLEVBQUEsSUFBQyxFQUFBLFdBQUEsRUFBUyxvQkFBQSxNQUFLLEVBQUEsQ0FBQSxDQUFDLFNBQUEsRUFBUyxDQUFDLE9BQVEsQ0FBTyxDQUFNLENBQUE7UUFDaEQsQ0FBQTtNQUNGLENBQUE7SUFDQyxDQUFBO0lBQ1I7R0FDRDtBQUNILENBQUMsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUM7O0FBRXJDLGtwQ0FBa3BDOzs7O0FDckJscEMsSUFBSSxnQkFBZ0IsQ0FBQzs7QUFFckIsc0NBQXNDLGdDQUFBO0VBQ3BDLE1BQU0sRUFBRSxXQUFXO0lBQ2pCO0lBQ0Esb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQTtNQUNGLG9CQUFBLElBQUcsRUFBQSxJQUFDLEVBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBVSxDQUFBLEVBQUE7TUFDbEMsb0JBQUEsSUFBRyxFQUFBLElBQUMsRUFBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE1BQVksQ0FBQTtJQUNwRCxDQUFBO0lBQ0w7R0FDRDtBQUNILENBQUMsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7O0FBRWxDLHMrQkFBcytCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEFjY291bnRzVGFibGUsIEFjY291bnRzVGFibGVIZWFkZXIsIEFjY291bnRzVGFibGVSb3c7XG5cbiAgQWNjb3VudHNUYWJsZUhlYWRlciA9IHJlcXVpcmUoXCIuL2FjY291bnRzX3RhYmxlX2hlYWRlclwiKTtcblxuICBBY2NvdW50c1RhYmxlUm93ID0gcmVxdWlyZShcIi4vYWNjb3VudHNfdGFibGVfcm93XCIpO1xuXG4gIEFjY291bnRzVGFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6IFwiQWNjb3VudHNUYWJsZVwiLFxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLnByb3BzLmluaXRpYWxDb2xsZWN0aW9uXG4gICAgICB9O1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByb3c7XG4gICAgICByb3cgPSBmdW5jdGlvbihhY2NvdW50KSB7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChBY2NvdW50c1RhYmxlUm93LCB7a2V5OiBhY2NvdW50LmlkLCBhY2NvdW50OiBhY2NvdW50fSkpO1xuICAgICAgfTtcbiAgICAgIHJldHVybiAoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7Y2xhc3NOYW1lOiBcInBhbmVsIHBhbmVsLWRlZmF1bHRcIn0sIFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7Y2xhc3NOYW1lOiBcInBhbmVsLWhlYWRpbmdcIn0sIFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiaDJcIiwge2NsYXNzTmFtZTogXCJwYW5lbC10aXRsZVwifSwgXCJBY2NvdW50c1wiKVxuICAgICAgKSwgXG5cbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzTmFtZTogXCJwYW5lbC1ib2R5XCJ9LCBcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7Y2xhc3NOYW1lOiBcInRhYmxlLXJlc3BvbnNpdmVcIn0sIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiLCB7Y2xhc3NOYW1lOiBcInRhYmxlIHRhYmxlLWhvdmVyIHRhYmxlc29ydGVyXCJ9LCBcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQWNjb3VudHNUYWJsZUhlYWRlciwgbnVsbCksIFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInRib2R5XCIsIG51bGwsIFxuICAgICAgICAgICAgICB0aGlzLnN0YXRlLmNvbGxlY3Rpb24uX2VtYmVkZGVkLmFjY291bnRzLm1hcChyb3cpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApXG4gICAgKVxuICApO1xuICAgIH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuQWNjb3VudHNUYWJsZTtcblxuICB3aW5kb3cuQWNjb3VudHNUYWJsZSA9IEFjY291bnRzVGFibGU7XG5cbn0pLmNhbGwodGhpcyk7XG4iLCJ2YXIgQWNjb3VudHNUYWJsZUhlYWRlcjtcblxuQWNjb3VudHNUYWJsZUhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKFxuICAgIDx0aGVhZD5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRoPlxuICAgICAgICAgIDxkaXY+TmFtZSA8c3BhbiBjbGFzc05hbWU9XCJjYXJldFwiPjwvc3Bhbj48L2Rpdj5cbiAgICAgICAgPC90aD5cbiAgICAgICAgPHRoPlxuICAgICAgICAgIDxkaXY+Q3VycmVuY3kgPHNwYW4gY2xhc3NOYW1lPVwiY2FyZXRcIj48L3NwYW4+PC9kaXY+XG4gICAgICAgIDwvdGg+XG4gICAgICA8L3RyPlxuICAgIDwvdGhlYWQ+XG4gICk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFjY291bnRzVGFibGVIZWFkZXI7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaUwyaHZiV1V2Wld4MllXNXFZUzl3Y205cVpXTjBjeTltY25WbmJIa3ZabkoxWjJ4NUxYZGxZaTFoY0hBdllYQndMMkZ6YzJWMGN5OXFZWFpoYzJOeWFYQjBjeTlqYjIxd2IyNWxiblJ6TDJGalkyOTFiblJ6WDNSaFlteGxYMmhsWVdSbGNpNXFjeTVxYzNndVkyOW1abVZsSWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUwyaHZiV1V2Wld4MllXNXFZUzl3Y205cVpXTjBjeTltY25WbmJIa3ZabkoxWjJ4NUxYZGxZaTFoY0hBdllYQndMMkZ6YzJWMGN5OXFZWFpoYzJOeWFYQjBjeTlqYjIxd2IyNWxiblJ6TDJGalkyOTFiblJ6WDNSaFlteGxYMmhsWVdSbGNpNXFjeTVxYzNndVkyOW1abVZsSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVUVzYlVKQlFVRTdPMEZCUVVFc2JVSkJRVUVzUjBGQmMwSXNTMEZCU3l4RFFVRkRMRmRCUVU0c1EwRkRjRUk3UVVGQlFTeEZRVUZCTEUxQlFVRXNSVUZCVVN4VFFVRkJMRWRCUVVFN1YwRkJSenM3T3pzN096czdPenM3U1VGQlNEdEZRVUZCTEVOQlFWSTdRMEZFYjBJc1EwRkJkRUlzUTBGQlFUczdRVUZCUVN4TlFXTk5MRU5CUVVNc1QwRkJVQ3hIUVVGcFFpeHRRa0ZrYWtJc1EwRkJRU0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWtGalkyOTFiblJ6VkdGaWJHVklaV0ZrWlhJZ1BTQlNaV0ZqZEM1amNtVmhkR1ZEYkdGemMxeHVJQ0J5Wlc1a1pYSTZJQzArSUdBb1hHNGdJQ0FnUEhSb1pXRmtQbHh1SUNBZ0lDQWdQSFJ5UGx4dUlDQWdJQ0FnSUNBOGRHZytYRzRnSUNBZ0lDQWdJQ0FnUEdScGRqNU9ZVzFsSUR4emNHRnVJR05zWVhOelRtRnRaVDFjSW1OaGNtVjBYQ0krUEM5emNHRnVQand2WkdsMlBseHVJQ0FnSUNBZ0lDQThMM1JvUGx4dUlDQWdJQ0FnSUNBOGRHZytYRzRnSUNBZ0lDQWdJQ0FnUEdScGRqNURkWEp5Wlc1amVTQThjM0JoYmlCamJHRnpjMDVoYldVOVhDSmpZWEpsZEZ3aVBqd3ZjM0JoYmo0OEwyUnBkajVjYmlBZ0lDQWdJQ0FnUEM5MGFENWNiaUFnSUNBZ0lEd3ZkSEkrWEc0Z0lDQWdQQzkwYUdWaFpENWNiaUFnS1dCY2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQkJZMk52ZFc1MGMxUmhZbXhsU0dWaFpHVnlYRzRpWFgwPVxuIiwidmFyIEFjY291bnRzVGFibGVSb3c7XG5cbkFjY291bnRzVGFibGVSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIChcbiAgICA8dHI+XG4gICAgICA8dGQ+e3RoaXMucHJvcHMuYWNjb3VudC5uYW1lfTwvdGQ+XG4gICAgICA8dGQ+e3RoaXMucHJvcHMuYWNjb3VudC5fZW1iZWRkZWQuY3VycmVuY3kuc3ltYm9sfTwvdGQ+XG4gICAgPC90cj5cbiAgKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQWNjb3VudHNUYWJsZVJvdztcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pTDJodmJXVXZaV3gyWVc1cVlTOXdjbTlxWldOMGN5OW1jblZuYkhrdlpuSjFaMng1TFhkbFlpMWhjSEF2WVhCd0wyRnpjMlYwY3k5cVlYWmhjMk55YVhCMGN5OWpiMjF3YjI1bGJuUnpMMkZqWTI5MWJuUnpYM1JoWW14bFgzSnZkeTVxY3k1cWMzZ3VZMjltWm1WbElpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMMmh2YldVdlpXeDJZVzVxWVM5d2NtOXFaV04wY3k5bWNuVm5iSGt2Wm5KMVoyeDVMWGRsWWkxaGNIQXZZWEJ3TDJGemMyVjBjeTlxWVhaaGMyTnlhWEIwY3k5amIyMXdiMjVsYm5SekwyRmpZMjkxYm5SelgzUmhZbXhsWDNKdmR5NXFjeTVxYzNndVkyOW1abVZsSWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFbEJRVUVzWjBKQlFVRTdPMEZCUVVFc1owSkJRVUVzUjBGQmJVSXNTMEZCU3l4RFFVRkRMRmRCUVU0c1EwRkRha0k3UVVGQlFTeEZRVUZCTEUxQlFVRXNSVUZCVVN4VFFVRkJMRWRCUVVFN1YwRkJSenM3T3pzN1NVRkJTRHRGUVVGQkxFTkJRVkk3UTBGRWFVSXNRMEZCYmtJc1EwRkJRVHM3UVVGQlFTeE5RVkZOTEVOQlFVTXNUMEZCVUN4SFFVRnBRaXhuUWtGU2FrSXNRMEZCUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklrRmpZMjkxYm5SelZHRmliR1ZTYjNjZ1BTQlNaV0ZqZEM1amNtVmhkR1ZEYkdGemMxeHVJQ0J5Wlc1a1pYSTZJQzArSUdBb1hHNGdJQ0FnUEhSeVBseHVJQ0FnSUNBZ1BIUmtQbnQwYUdsekxuQnliM0J6TG1GalkyOTFiblF1Ym1GdFpYMDhMM1JrUGx4dUlDQWdJQ0FnUEhSa1BudDBhR2x6TG5CeWIzQnpMbUZqWTI5MWJuUXVYMlZ0WW1Wa1pHVmtMbU4xY25KbGJtTjVMbk41YldKdmJIMDhMM1JrUGx4dUlDQWdJRHd2ZEhJK1hHNGdJQ2xnWEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1FXTmpiM1Z1ZEhOVVlXSnNaVkp2ZDF4dUlsMTlcbiJdfQ==\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&requireif(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&requirefor(var o=0;o<r.length;o++)s(r[o]);return s})({\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/_stream_0.js\":[function(require,module,exports){\n(function() {\n  var ThingsTableHeader;\nThingsTableHeader = React.createClass({displayName: \"ThingsTableHeader\",\n    render: function() {\n      return (\n    React.createElement(\"thead\", null, \n      React.createElement(\"tr\", null, \n        React.createElement(\"th\", null, \n          React.createElement(\"div\", null, \"Name \", React.createElement(\"span\", {className: \"caret\"}))\n        ), \n        React.createElement(\"th\", null, \n          React.createElement(\"div\", null, \"Currency \", React.createElement(\"span\", {className: \"caret\"}))\n        )\n      )\n    )\n  );\n    }\n  });\nmodule.exports = ThingsTableHeader;\n}).call(this);\n},{}]},{},[\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/_stream_0.js\"])\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWluY3JlbWVudGFsL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9lbHZhbmphL3Byb2plY3RzL2ZydWdseS9mcnVnbHktd2ViLWFwcC9hcHAvYXNzZXRzL2phdmFzY3JpcHRzL2NvbXBvbmVudHMvX3N0cmVhbV8wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsQ0FBQyxXQUFXO0FBQ1osRUFBRSxJQUFJLG1CQUFtQixDQUFDOztFQUV4QixtQkFBbUIsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLHFCQUFxQjtJQUN6RSxNQUFNLEVBQUUsV0FBVztNQUNqQjtJQUNGLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUk7TUFDL0IsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSTtRQUM1QixLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJO1VBQzVCLEtBQUssQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztTQUM3RjtRQUNELEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUk7VUFDNUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2pHO09BQ0Y7S0FDRjtJQUNEO0tBQ0M7QUFDTCxHQUFHLENBQUMsQ0FBQzs7QUFFTCxFQUFFLE1BQU0sQ0FBQyxPQUFPLEdBQUcsbUJBQW1CLENBQUM7O0NBRXRDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIihmdW5jdGlvbigpIHtcbiAgdmFyIEFjY291bnRzVGFibGVIZWFkZXI7XG5cbiAgQWNjb3VudHNUYWJsZUhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtkaXNwbGF5TmFtZTogXCJBY2NvdW50c1RhYmxlSGVhZGVyXCIsXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoXG4gICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInRoZWFkXCIsIG51bGwsIFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInRyXCIsIG51bGwsIFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwidGhcIiwgbnVsbCwgXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBudWxsLCBcIk5hbWUgXCIsIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtjbGFzc05hbWU6IFwiY2FyZXRcIn0pKVxuICAgICAgICApLCBcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInRoXCIsIG51bGwsIFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXCJDdXJyZW5jeSBcIiwgUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge2NsYXNzTmFtZTogXCJjYXJldFwifSkpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gICk7XG4gICAgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IEFjY291bnRzVGFibGVIZWFkZXI7XG5cbn0pLmNhbGwodGhpcyk7XG4iXX0=\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&requireif(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&requirefor(var o=0;o<r.length;o++)s(r[o]);return s})({\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/_stream_0.js\":[function(require,module,exports){\n(function() {\n  var ThingsTableRow;\nThingsTableRow = React.createClass({displayName: \"ThingsTableRow\",\n    render: function() {\n      return (\n    React.createElement(\"tr\", null, \n      React.createElement(\"td\", null, this.props.thing.name), \n      React.createElement(\"td\", null, this.props.thing._embedded.currency.symbol)\n    )\n  );\n    }\n  });\nmodule.exports = ThingsTableRow;\n}).call(this);\n},{}]},{},[\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/_stream_0.js\"])\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5LWluY3JlbWVudGFsL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9lbHZhbmphL3Byb2plY3RzL2ZydWdseS9mcnVnbHktd2ViLWFwcC9hcHAvYXNzZXRzL2phdmFzY3JpcHRzL2NvbXBvbmVudHMvX3N0cmVhbV8wLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsQ0FBQyxXQUFXO0FBQ1osRUFBRSxJQUFJLGdCQUFnQixDQUFDOztFQUVyQixnQkFBZ0IsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLGtCQUFrQjtJQUNuRSxNQUFNLEVBQUUsV0FBVztNQUNqQjtJQUNGLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLElBQUk7TUFDNUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztNQUN4RCxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7S0FDOUU7SUFDRDtLQUNDO0FBQ0wsR0FBRyxDQUFDLENBQUM7O0FBRUwsRUFBRSxNQUFNLENBQUMsT0FBTyxHQUFHLGdCQUFnQixDQUFDOztDQUVuQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIoZnVuY3Rpb24oKSB7XG4gIHZhciBBY2NvdW50c1RhYmxlUm93O1xuXG4gIEFjY291bnRzVGFibGVSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7ZGlzcGxheU5hbWU6IFwiQWNjb3VudHNUYWJsZVJvd1wiLFxuICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gKFxuICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0clwiLCBudWxsLCBcbiAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCBudWxsLCB0aGlzLnByb3BzLmFjY291bnQubmFtZSksIFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcInRkXCIsIG51bGwsIHRoaXMucHJvcHMuYWNjb3VudC5fZW1iZWRkZWQuY3VycmVuY3kuc3ltYm9sKVxuICAgIClcbiAgKTtcbiAgICB9XG4gIH0pO1xuXG4gIG1vZHVsZS5leHBvcnRzID0gQWNjb3VudHNUYWJsZVJvdztcblxufSkuY2FsbCh0aGlzKTtcbiJdfQ==\n```\nThe output is the same, regardless of {prerender: true}.\n. @bogdan-dumitru yep, you're right. Thanks for the tip! Doesn't change the result though...\n. @jakubmal the most confusing thing is that the code actually works when not rendered on server side. But OK, I can agree that it's not an issue of this gem. Anyway, thanks for the support!\n. Sure, if I find one, I'll be sure to share :-)\n. Found a fix! In components.js, instead of //= require_tree ./components, just require the main components explicitly, e.g. //= require ./components/things_table. This produces the below pasted code, which works like a charm.\nThe best I can describe this is that code was being pulled in twice. Once with Rails asset manager, and another time with browserify. That can also be seen in previous code samples (e.g. ThingsTableHeader was declared twice).\nAnyway, now react_component works with or without {prerender: true}.\n``` js\n(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&requireif(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&requirefor(var o=0;o<r.length;o++)s(r[o]);return s})({\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/_stream_0.js\":[function(require,module,exports){\nrequire('./components/things_table.js.jsx.coffee');\n},{\"./components/Things_table.js.jsx.coffee\":\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/Things_table.js.jsx.coffee\"}],\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/Things_table.js.jsx.coffee\":[function(require,module,exports){\nvar ThingsTable, ThingsTableHeader, ThingsTableRow;\nThingsTableHeader = require(\"./Things_table_header.js.jsx.coffee\");\nThingsTableRow = require(\"./Things_table_row.js.jsx.coffee\");\nThingsTable = React.createClass({displayName: \"ThingsTable\",\n  getInitialState: function() {\n    return {\n      collection: this.props.initialCollection\n    };\n  },\n  render: function() {\n    var row;\n    row = function(thing) {\n      return (React.createElement(ThingsTableRow, {key: thing.id, thing: thing}));\n    };\n    return (\n    React.createElement(\"div\", {className: \"panel panel-default\"}, \n      React.createElement(\"div\", {className: \"panel-heading\"}, \n        React.createElement(\"h2\", {className: \"panel-title\"}, \"Things\")\n      ), \n  React.createElement(\"div\", {className: \"panel-body\"}, \n    React.createElement(\"div\", {className: \"table-responsive\"}, \n      React.createElement(\"table\", {className: \"table table-hover tablesorter\"}, \n        React.createElement(ThingsTableHeader, null), \n        React.createElement(\"tbody\", null, \n          this.state.collection._embedded.Things.map(row)\n        )\n      )\n    )\n  )\n)\n\n);\n  }\n});\nwindow.ThingsTable = ThingsTable;\nmodule.exports = ThingsTable;\n},{\"./Things_table_header.js.jsx.coffee\":\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/Things_table_header.js.jsx.coffee\",\"./Things_table_row.js.jsx.coffee\":\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/Things_table_row.js.jsx.coffee\"}],\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/Things_table_header.js.jsx.coffee\":[function(require,module,exports){\nvar ThingsTableHeader;\nThingsTableHeader = React.createClass({displayName: \"ThingsTableHeader\",\n  render: function() {\n    return (\n    React.createElement(\"thead\", null, \n      React.createElement(\"tr\", null, \n        React.createElement(\"th\", null, \n          React.createElement(\"div\", null, \"Name \", React.createElement(\"span\", {className: \"caret\"}))\n        ), \n        React.createElement(\"th\", null, \n          React.createElement(\"div\", null, \"Currency \", React.createElement(\"span\", {className: \"caret\"}))\n        )\n      )\n    )\n  );\n  }\n});\nmodule.exports = ThingsTableHeader;\n},{}],\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/components/Things_table_row.js.jsx.coffee\":[function(require,module,exports){\nvar ThingsTableRow;\nThingsTableRow = React.createClass({displayName: \"ThingsTableRow\",\n  render: function() {\n    return (\n    React.createElement(\"tr\", null, \n      React.createElement(\"td\", null, this.props.thing.name), \n      React.createElement(\"td\", null, this.props.thing._embedded.currency.symbol)\n    )\n  );\n  }\n});\nmodule.exports = ThingsTableRow;\n},{}]},{},[\"/home/elvanja/projects/thingy/thingy-web-app/app/assets/javascripts/_stream_0.js\"])\n//# sourceMappingURL=data:application/json;base64,\n```\n. ",
    "mickey": "Hey @rmosolgo! Thanks for your review.\nI changed the test to one using a custom dumb encoder. \n. @vipulnsward @rmosolgo Thanks for your feedback. It sure works for me and makes total sense.\n. :+1: I updated the PR with your recommendation.\n. ",
    "roygold": "Thanks for the reply, but that doesn't seem to make a difference. I stopped the server, did a \"gem uninstall spring,\" also tried \"bin/spring binstub --remove --all\" per instructions here: https://github.com/rails/spring. Removed spring from Gemfile, reran bundle install... spring is no longer showing up in \"gem list\". Then re-ran the rails server, but same results. Note I had the same problem when trying react-rails 0.12 as a local gem.\n. There is no react-rails directory in tmp:\n.../tmp$ ls\ncache  pids  sessions  sockets\n. Hi all, I'm curious if you have any theories as to why I'm seeing this but others aren't (or don't seem to? I couldn't find any other open issues about this exact problem)? This happens every time for me on what feels like the most vanilla of basic install/example. Theories on what I'm doing differently that others aren't? If it matters, I'm running this on Ubuntu under VirtualBox on a recent MacBook Pro (2.8 GHz Intel Core i5). Thanks.\n. ",
    "bensie": "Sitting here with @rmosolgo, I came up with a Rails 4.2.1 app that may demonstrate this issue. For me, the app works fine if I'm running from react-rails/master, but if I lock to a RubyGems version, I get the couldn't find file 'react' error you described.\nhttps://github.com/bensie/react-rails-load-issue\nFails with https://github.com/bensie/react-rails-load-issue/blob/master/Gemfile#L26, but works if I change that line to gem 'react-rails', '~> 1.0.0.pre', github: 'reactjs/react-rails'.\nProposal: release master as 0.13.1.0 (aligns with current React version).\n:heart: :heart: :heart: \n. Cool that makes sense too. Should the README be updated to encourage specifying a custom \"react-source\" line in the Gemfile? That way it's clear that react-rails != react and it should work on any version greater than whatever is in the gemspec.\n. Totally agree. :+1: \n. Played with this a bit in hopes of getting server rendering working and found that to get this to work, we're going to need a custom server renderer that can point at pack files living outside sprockets and its manifest.\nSomething like:\nruby\nconfig.react.server_renderer = React::ServerRendering::WebpackerRenderer\nconfig.react.server_renderer_options = {\n  files: [\"mywebpackpack\"]\n}\nI wasn't able to quickly hack together a renderer that would pull from files written by webpack-dev-server, but here's what I found.\nWe can use Webpacker::Source.new(\"mywebpackpack\").path to get the path (or URL if on another domain/port) to the asset (it can come from webpack-dev-server on another port, can be /packs/mywebpackpack.js in development, or a digested version in production). \nDon't know if I'll have time to dig further on this any time soon, but figured it couldn't hurt to share where I landed so far.. ",
    "bezelga": "Hey guys, I got the same error when I try to run my Rails app in a docker container.\nMy react-rails version is:\ngem 'react-rails' , '~> 1.0'\nand Ruby 2.1.5\nThe strange thing is that running it locally on OSX it works normally.\nDo you have an idea on why this is happening only when using docker?\n. @rmosolgo yes:\nbash\n$ ls tmp/react-rails/\nJSXTransformer.js  react.js\n. ",
    "danillop": "Try to install nodejs, it works for me.\n. ",
    "hartator": "The harmony spec syntax (https://github.com/reactjs/react-rails/blob/master/test/dummy/app/assets/javascripts/harmony_example.js.jsx#L14) <h1 {...this.props}>{greeting}</h1> \"attributes spreading\" works actually in my components. \nBut, the \"destructuring assignment\" var { checked, ...other } = this.props; is not working.\n. Okay, will work on that.\nDo you know if JSXTransformer.js uses the same code base than jsx command line?\n. Humm.. The test I've written is actually working, the compilation is fine. If you want it for the gem test suite: https://github.com/reactjs/react-rails/pull/186\nAny idea of something I've missed inside my app? :/\n. I got JSXTransformer v0.12.2.\n. Okay, I feel like a fool. I've removed the tmp/ directory and restarted everything and now it's working. \nFor other people that might encounter the same thing, I don't have a definitive explanation, maybe it didn't update correctly the gem or the flag wasn't passed correctly at first.\nThanks Robert! :+1: \n. Good to know! :)\nYeah I feel it's kind of weird to have a react-rails tmp that get copied from elsewhere but there must be good reasons.\n. ",
    "olegsobchuk": "yes, I've tryed it, but it not working!\nP.S.\nI found\ngem 'sprockets-coffee-react'\nis it necessary using for Coffee?\n. @rmosolgo, Thanks!\n@ComponentName = ....\nworking!\n. ",
    "bborn": "I'm working in Rails 3.\nIn the mean time, you could work around this by assigning\n\nReact::JSX.transform_options directly. Does that work for you?\n\nYes, that worked fine.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/192#issuecomment-106165237\n.\n. \n",
    "imWildCat": "@rmosolgo Thanks for your reply : )\n. ",
    "jbhatab": "Great you pointed me in the right direction. So I'm defining current user in the top of my application like this,\n```\n- if current_user\n      javascript:\n        window.currentUser = {\n          id : #{current_user.id}\n        }\n- else\n  javascript:\n    window.currentUser = {\n      id : null\n    }\n\n```\nNow the problem is that react_rails is loading just the components.js file which doesnt have the application page. I know this outside the scope of react-rails, but do you have any suggestions on defining a javascript currentUser from my current_user defined in rails? \n. Yeah but I'm not using it as a property like that. I'm using it as a global for things like permissions on every page. Maybe I could just set it up to always pass current_user on every page, but I think a global is doable.\n. Yeah I'd say so. Any help is appreciated but this isn't a react-rails issue.\n. Ahhh, perfect. Yeah this is all kinda getting figured out in general with all the new libraries and frameworks. I'll check that out. Thanks. \n. Yeah you are right. any solution ideas? to auto translate?\nI do this a lot. \n= react_component 'ProductShow', render(partial: 'api/v1/products/show.json.jbuilder', locals: { product: @product })\n. thanks.\n. ",
    "ericdfields": "Wheee! Thank you. \n\nEric\n\nOn Mar 10, 2015, at 19:57, Paul O\u2019Shannessy notifications@github.com wrote:\n4da2126\n\u2014\nReply to this email directly or view it on GitHub.\n. You can render it with a method that's something like <%= form_authentication_token => and pass it to your form however you want. Doing this idiomatically might be a tall order right now. I have a way of doing this in my project right now but will have to look it up in the morning. \n\n\nEric\n\nOn Mar 13, 2015, at 00:08, Blaine Kasten notifications@github.com wrote:\nRails freaks out if you don't have the csrf token in a hidden input on a form. But If I server render the form, I have no way to get the csrf token and have to basically update it once reconcilled on the front end via a lookup to the meta tag. This causes react to throw a warning that we are losing benefits of the server rendering. We should find some idiomatic way of grabbing the csrf token on the server.\n\u2014\nReply to this email directly or view it on GitHub.\n. @blainekasten the method you want is <%= form_authenticity_token %>\n\nI would like to see an approach for building reactive forms with rails and accounting for csrf. I'm building up a form with newforms and am getting happier with the results, but I have to munge up the input names client-side on submit in order to properly format them into the hash rails wants. In the future i hope to have a more elegant solution that allows for all those good server-side benefits. Maybe I can get around to making a gem\u2026\n. Typically you've been able to name your file 'my_script.js.erb' and then call interpolated ruby in your code:\njavascript\nvar image_path = \"<%= asset_path(my_image.png) %>\"\nI don't see why my_script.js.jsx.erb wouldn't work!\n. Might also be #{asset_path(my_image.png)}\u2026\u00a0that's what it was when I was writing coffee, but I assume that was coffeescript syntax.\n. @bogdan-dumitru that sort of preprocessing was a blocker at fully converting our stack to webpack. Thanks for sharing. Still basically running a separate webpack process on dev and then having a compilation step for prod via CI or similar? There's still some gaps in the webpack<>sprockets<>rails relationship in my head.\n. ",
    "zhangsoledad": "React v0.13.0 need harmony option: jsx --harmony  to make ES6 Classes enable\n. ",
    "AdamKyle": "No I am not using the view helper. And I plan to not use the view helper. I am curious - how would you unmount manually in this case?\n. I am using turbolink, I will check out the second example and see if that works. Thank you.\n. ",
    "chrisvfritz": ":+1: This would be great. :smiley: \n. :+1: I also prefer using Webpack to manage my JS, so tighter integration would be helpful for me as well.\n. One minor addition I'd make is the ability to pass an array of file paths. I personally prefer to bundle my vendor assets separately from my application assets, resulting in two files. The reason is my vendor assets rarely change, but are (typically) the largest contributor to file size, while my (again, typically) smaller application code might update on production several times per day. For mobile users, having to redownload a much smaller file can make a noticeable performance difference.\n. @thelamborghinistory As a maintainer of other large projects, I just wanted to let you know that these issues are definitely not the right place for your anger about \"developers nowadays\". You can save that for a blog post.\n. ",
    "acconrad": "Opening this back up, I have a suggestion: \nthe react_component view function take in a csrf_token field, that uses the default value of form_authenticity_token, so the actual function is therefore:\nreact_component(csrf_token: form_authenticity_token, component_name, props)\nAdditionally, you could now always have access to the token via some attribute, or have the react-rails gem come with a component by default, such as <RailsForm> which includes this csrf_token argument. Thoughts?\n. Any progress on this? I'm seeing this issue on Rails 4.2.5 with Ruby 2.1.5 and Sprockets 3.5.2 (Sprockets-rails 3.0)\n. ",
    "axsuul": "Another approach is to use the helper csrf_meta_tags which can be rendered within the layout and then pulled from within a React component. For example, here is my React component which achieves that:\n``` jsx\nvar FormCsrfInput = React.createClass({\n  render() {\n    const token = $('meta[name=\"csrf-token\"]').attr('content');\nreturn (\n  <input type=\"hidden\" name=\"authenticity_token\" value={token} readOnly={true} />\n)\n\n}\n});\n```\nand then used within a dynamic React form.\n. ",
    "jamesmccann": "Opening this back up again, another approach/hack I'm working with is getting react-rails to inject a CSRF token to every component via the controller render method:\n``` rb\n      def call(component_name, options, &block)\n        props = options.fetch(:props, {}).reverse_merge({\n          csrf_token: controller.send(:form_authenticity_token)\n        })\n    options = options.slice(:data, :aria, :tag, :class, :id).merge(prerender: true)\n    react_component(component_name, props, options, &block)\n  end\n\n```\nSee https://github.com/reactjs/react-rails/commit/042e943eb3a4a861298481e7c33c9da5f2e86cc3\nI'm sure there's a tidier way to do it, but this could be a starting point for this and rendering from within a view.\n. @rmosolgo that's right, yes :)\nThanks for those pointers on doc/tests I'll check that out.\n. ",
    "dsuare1": "To expand on @acconrad's answer, I included the Rails helper csrf_token: form_authentication_token as a prop on the component itself, rather than a separate entity on the Component; so:\n<%= react_component(\"ComponentName\", { prop: prop1, csrf_token: form_authenticity_token }) %>\nAnd this worked nicely.. Good catch @abhishekover9000, and thanks for the clarification @BookOfGreg; since posting this, I've actually gone in a different direction for getting the proper token in there; like many, I'm using axios to carry out my API calls. I set a common header for all axios requests to include the csrf-token; this approach has been working nicely for me thus far.\n```\nconst csrfToken = document.querySelector('[name=\"csrf-token\"]').content;\naxios.defaults.headers.common['X-CSRF-Token'] = csrfToken;\n``. I'm quite new to implementing React into a Rails app (been working on it for 1 day so far, lol) but what I notice is that when providing{ prerender: true }, the component does render on the page, but I can't seem to get anonChange` event to fire in an input element. Is this because the component has been server-side rendered and thus the magic client-side rendering of React is mitigated? Any help is greatly appreciated!\nFor more context, I've included:\n\n<%= javascript_pack_tag 'application' %> in my application.html.erb layout file\n\n<%= react_component(\"ComponentName\", { props: @props }) %> in my view file. Thanks for your response @BookOfGreg; there are a few related questions on StackOverflow, but none of them helped me arrive at a solution.\n\n\nThere are no issues in the console that should be related to this problem.\n\nIt does not work if I don't prerender. Well, it's strange because when I don't pass { prerender: true }, I can see the React Component inserted into the DOM, but whatever content is inside the Component does not render to the page, and is not present in the DOM. *See further explanation below\nTurbolinks and jquery-rails as well jquery-ui-rails libraries are included, so that may be causing an issue\n\n*To further explain Point 2 above, if I have a react component structured like:\nclass HelloWorld extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, World</h1>\n      </div>\n    )\n  }\nI can see that there is a <div> rendered to the page with data-react-class=HelloWorld and data-react-props={} attributes, but that inner <h1> content is not included as part of the  nor does it show up on the page.. @BookOfGreg Yes, calling ReactRailsUJS.mountComponents() manually in the console, once the page has loaded, does work and results in the component rendering. But I've read through 762 and the solution in there doesn't seem to fit my issue exactly. Deekor mentions moving the //= require components below the //= require jquery3, but I don't see a //= require components statement in my app/assets/javascripts/application.js file. Am I missing something in there?\nEdit: I added the ReactRailsUJS.mountComponents() manual call as the last line in my app/javascript/packs/application.js file and that resulted in the component being mounted and rendered automatically!\nWondering if this is what we exactly want though...or is it a hacky solution?. @BookOfGreg Thanks for the help! You helped me get unblocked and keep my development moving forward. I'll keep an eye out for when / if this fix comes through, but for now, adding the manual call to ReactRailsUJS.mountComponents in app/javascript/packs/application.js works!. ",
    "abhishekover9000": "@dsuare1 doesn't this open up a vulnerability to those inspecting your site with React- they will be able to grab the csrf token from the React chrome extension.. @BookOfGreg  @dsuare1  ah i see. i was going to expose a rails controller route to GET the CSRF token and call that from React prior to the main request but since it's not a security risk no reason to make the app more chatty.. In Rails 5 they added further complexity to the auth tokens and the var passing in from the component does not match the one in the meta tag, so it's definitely good to use the meta tag selector to get the token.  If using fetch must add       credentials: \"same-origin\", as well as described here- https://blog.codeship.com/level-up-your-security-in-rails/ \n. Solved it- it was actually due to a bootstrap tether dependency. ",
    "BookOfGreg": "@abhishekover9000 The CSRF token is shown on every rails page anyway. Search the source of this page for 'authenticity-token'. This is not a security vulnerability as the purpose of this (simplified for any sticklers in the audience) is to ensure that the page has been loaded in HTML before posting data, so that people can't just post from another website as a trick.. @pjungwir see #166 \nAlthough it looks react-like, it's plain HTML not JSX at that point. I'd welcome a PR if you'd like to wrap the HTML contents of a block with some sort of loader that turns it into JSX.. It's useful enough that even if it was breaking, it would probably be worth cutting as a v2.5 or even v3 if we break a lot.\n@pjungwir This is all yours if you'd like to take it on :) I'll be around to help if you need test/style/design help though I may not get back to you immediately.\nEdit: If you believe it will be easier to nest react_component calls then try that first, though currently they're all run through exec_js immediately so I suspect that won't work without some sort of collector for nested components.\nIf someone attempts to use ERB inside the block, how would you expect that to work? It could evaluate first + inject into react, be syntax invalid (taken as poor html), or be removed by the gem. Or perhaps you will think up a better solution while investigating.. \ud83d\udc4d @BobbyMcWho Yep! It was deprecated because it only supports LibV8 version 3, when the current version is v5. It's also notorious for segfaulting your servers in production. MiniRacer is the current recommendation and it was even a little faster since it's using a newer version of libV8.\nIf you remind me in a few, I might get a benchmark out of it later.. If anyone wants to do this, it should be a pretty easy change.. There are currently only 3 mentions of Babel in the readme on Master, going to close this for now but there are definitely updates that could happen to the docs around this gem, would welcome a PR to help with doc updates.. @node-gs Could you please submit a PR with a change to the readme with what you'd like to see? \ud83d\udcd4 \nIt's always very helpful for us as maintainers to have others contribute the docs because we know how the system works and therefore it's sometimes harder to explain it to a layman.. @robertsosinski In Sprockets there is a guide for source maps here: https://github.com/rails/sprockets/blob/master/guides/source_maps.md\nIf you would be so kind as to let this thread know if this works once you've tried it, that would be appreciated.. Going to close this as it's on an older version of react-rails. Feel free to ask to reopen if this occurs on any more modern versions.. @Tectract You should be sanitizing your own input for your own use case and using the tools react gives. There's nothing specific to this tool that will help you in this regard.. @franciscoGPS do you have any details or reproduction steps. I was going to close the issue as it's old but your comment is more recent.\nCan try help and reopen if you have more details.. Hi,\nBeen a while since any activity on this thread but trying to get through what I can now.\nI'd certainly welcome anyone to submit a PR that adds an Rspec and Minitest helper that could be manually required in, it would be good to have testing helpers that come with the gem, perhaps go so far as to have a test template generated with the components?. For anyone still arriving here from Google:\nIn React-Rails 2.4+ we are using React 16 which does not package PropTypes anymore, instead import PropTypes from 'prop-types' and use like so:\nMyComponent.propTypes = {\n  property: PropTypes.string\n};. @AdrienGiboire If you're using webpack through Webpacker (Part of Rails) then all the .babelrc goodness just works out the box.\nGoing to close as issue is going stale, will reopen if there is more info or help needed.. It's been a while and nobody has reported anything similar, I've also not seen these issues in miniracer or on jruby. Going to close without further details.\nThanks for the report though, these are useful even if just to see nobody else is having these problems.. Looks like this was done sometime in the past.\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/exec_js_renderer.rb#L22\nThis does catch ProgramError and re-raise as PrerenderError. \ud83d\udc4d Thanks for the idea.. Aha, it's tricky when the code moves over time. That's clearer.\nWould you like to help by look into a PR around this feature? It sounds useful and there are a LOT of folk reporting issues when they're using window server-side.. That's true but you wonder if there's any source_map equivalent. I've not seen anyone do it in exec_js so far.\nMay close this as upstream if we're already surfacing everything that exec_js does.. @sekmo See #841\nIf you're using Webpack/Webpacker, it's easy to load in react-dom/test-utils and just use it in your Jasmine/Mocha/JS-test-runner-of-choice test suite as normal.\nIf you're using sprockets there is some more fiddling to do in order to require it in but yeah test away as normal.\n. Is this still an issue? Going to close for now, though it looks like there is some potential enhancement in not using the ConnectionPool if the size is 1.. I tend to bin/spring stop every now and then, never found it very reliable. Let me know if you'd like this re-opened.. @lyonsun That's because React.createClass is no longer a thing in Reactv16:\nhttps://reactjs.org/docs/react-without-es6.html\nIt was replaced with a separate module \"create-react-class\" that is only needed if you can't use React.Component. I started trying to add webpacker support for Rails 5 and Rails 4.2 (Webpacker 1.1 supports both)\nBut I can't seem to get the appraisal gem to run the set that I want, current progress is commenting out rails_3.2 which seems to be broken.\nhttps://github.com/reactjs/react-rails/compare/master...BookOfGreg:webpacker-manifest-support?expand=1\n. @rmosolgo Been using it in one of my internal projects, just to save you from a Gotcha, we changed from ::Webpacker::Configuration.output_path.parent.join( to Rails.root.join('public',.\nThe reason being if you change the config.entry in Webpacker's Path.yml, it changed config.output_path to have the entry twice so it would not be able to find the output location on disk.\neg:\n```yml\npath.yml\nconfig: config/webpack\nentry: assets/packs\noutput: public\nnode_modules: node_modules\nsource: app\nextensions:\n  - .js\n  - .jsx\nruby\nirb(main):001:0> ::Webpacker::Configuration.output_path.parent.join(::Webpacker::Manifest.lookup('components.js')[1..-1])\n=> #\nirb(main):002:0> Rails.root.join('public',::Webpacker::Manifest.lookup('components.js')[1..-1])\n=> #\n``. Hi @christiangenco,\nThere is at least one instruction in reactjs/react-rails/blob/master/README.md#get-started-with-webpacker which is near top. When would you use it during upgrade? Would welcome a PR for doc changes if it helps people, thanks :). Thank you for your contribution!\nI've merged your commits into #798 so it can all go as one cohesive patch.. Hypothetically it will just work out of the box if you're using Sprockets, as seen in this SO answer:\nhttps://stackoverflow.com/a/44731503/193785\nJust don'trequire` it.\nHowever in the specific case of react-select, you would need to vendor create-react-class in order to work as react-select has a dependency on that, and rails-assets hasn't declared it in it's gemspec.. You may want to pass this over to react-select itself.\nI tried this myself here:\nhttps://github.com/BookOfGreg/react-rails-example-app/compare/sprockets...rails-assets-sprockets\nLet me know if I can help further.. Hi @KI12 and @nekogami ,\nIs this issue solved with the latest react-rails v2.3 which updates React and it's addons to fix these depreciation warnings? https://github.com/reactjs/react-rails/pull/798\nI'll close for now but if there's anything I can do along these lines let me know and I'll reopen.\n. Thanks for the Update on this one.. @Bevilacqua, @boxofmattwire or @dklanac is it still happening? Sorry to bother after so long but trying to catch up maintaining.\nI wonder if sometimes it's to do with the sprockets cache, worth a rake tmp:clear every now and then.\nGoing to close this if I hear nothing for a week as the issue is going stale, will reopen if this is still an issue.. @dklanac can you produce some small reproduction of the issue, or maybe some example code?\nI'm struggling to help as I tried to replicate your issue here:\nhttps://github.com/BookOfGreg/react-rails-example-app/pull/3\nWhere I changed the config.react.version to production in my development.rb and it did change.\n\nThat example is using React-Rails 2.4.0, Sprockets 3.7.1. Ooh, this is a good opportunity for me, how are people using browserify with react-rails?\nDo you have a sample, or can point to a repo/blog that is?\nIf you have an example I'd love to add it as a branch of my example app so I can test these things on it, there are a couple other issues open related to browserify I have so far failed to reproduce too.\nI'll try react-rails 2.2, rails 4.2, browserify tonight to see if I can reproduce this one.. If both gems are serving their own React then the most reliable way of guaranteeing which one you get is to vendor your own. Sprockets should be smart enough to always load the one from vendor/assets before a gem's implicit one (If I understand their load order correctly).\nhttps://github.com/rails/sprockets/blob/cb390301071c17f6f346e4abefb9f4e09f890e3f/guides/building_an_asset_processing_framework.md#manipulating-the-load-path\nThis gem serves one version of React for people who do not want to vendor their own but if you have any other react deps, it's probably worth controlling the version of it by hand explicitly.\n. @ttanimichi has a good point. This is not an issue, people using browserify need to contribute if it's to be documented or supported. Works as intended on sprockets.\nClosing for now. Will re-open if there is additional feedback.. @a-x- This work for PropTypes was complete with the 2.3.1 release, and upgrade to React 16 in 2.4.0. Thanks for letting us know about the upgrade! \ud83c\udf89 \nLet me know how you get on with the update.. @dsuare1 You may want to ask on Stack Overflow for these kinds of help questions, or open a new issue as it's quite easy for comments to get lost in closed issues.\nFor now though let's take a look. Server-side rendering doesn't affect client-side rendering as the components are rendered client-side anyway so there should not be a problem with that.\n1) Are there any issues in the console?\n2) Does it work if you do not prerender?\n3) Are there any other JS libraries that may affect it such as Turbolinks or JQuery (Especially JQuery3 as there is a known bug with it)?. Continuing on a hunch, can you run ReactRailsUJS.mountComponents() in your console? I suspect it's JQuery3 breaking the automatic mounting again.\nIf  so then it's just #762 . It's a hacky solution for now but it is safe to do it that way. You will likely be using JQuery 3 and it broke it's support, so someone needs to update the file at https://github.com/reactjs/react-rails/blob/master/react_ujs/src/events/detect.js to play nicely with it.. Going to make a branch of the example app with code chunking and add a wiki article based on content in this thread.\nThanks all, do any of you happen to have a small example I can link?\nhttps://github.com/reactjs/react-rails/wiki/Code-Chunking-with-React-Rails\n. @tarla Did you manage to convert from Sprockets to Webpacker?\nAt my company we run Sprockets for assets and basic JS, and all components are compiled in Webpacker so they run side-by-side OK.. It may be possible to use node modules in Sprockets but I've never done it myself: Here's an article on it.\nhttps://ricostacruz.com/til/npm-in-rails\nThere is a fair amount of material on changing from one to the other.\n\n\nSprockets -> Webpacker\nhttps://www.neontsunami.com/posts/replacing-rails-asset-pipeline-with-webpacker\nhttps://hype.codes/how-assemble-rails-frontend-using-webpacker\n\n\nSprockets -> Webpack\nhttps://engineering.klarna.com/migrating-from-rails-asset-pipeline-to-node-s-webpack-684230e3a93a\nhttps://www.linkedin.com/pulse/sprockets-webpack-gotchas-rails-50-51-upgrade-jon-s/\n\n\nAt my company we managed to move quite freely between Sprockets, to Browserify, to Webpacker with some teething issues but we were able to overcome them. We still use Sprockets for CSS and Images.\nGoing to close this for now as there's not a ton we can do in the gem to help with these kinds of problems. Hope it helps, good look @tarla !. If you don't mind, I'll mark this as closed unless there is something I can help you with. It sounds like this was solved at the time, thank you :). Thanks @tarla \ud83d\udc4d . @kala-lee This should be working just fine (See https://github.com/bookofgreg/react-rails-example-app), could you share your platform (Windows, ruby version, gem versions etc) and which commands you specifically ran?\nIf this is happening to people I'd like to know why.\nEdit: I can re-open if you like.. For those googling in, this could also be used by TheRubyRacer, it uses an old version of LibV8 (They use V3.x, current is V6.x) which doesn't understand some features of React itself.. I'm glad to say React-Rails supports this for Webpacker 3! \ud83d\ude4c \n$ ASSET_HOST=https://example.com rails c\nLoading development environment (Rails 5.1.4)\nirb(main):001:0> helper.javascript_pack_tag 'application.js'\n=> \"<script src=\\\"//assets.example.com/packs/application-ddc460fb88ce313d87be.js\\\"></script>\"\nirb(main):002:0> Webpacker.manifest.lookup('application.js')\n=> \"/packs/application-ddc460fb88ce313d87be.js\"\nThanks for having me check @joeyparis, looks like we fixed it when we added Webpacker 3 support.\nhttps://github.com/BookOfGreg/react-rails-example-app/pull/5\nWhat issue are you having?. Excellent @joeyparis, I didn't know it's specific to when the dev server is running. Now I can get about fixing this. I'll ping this chat when a fix is inbound \ud83d\udc4d . I'm pretty low on help in this gem at the moment and I'm currently working on .hydrate() #808  tonight.\nI'd very much welcome a PR! My crude solution to this would likely be check asset_path contains // and only prepend #{ds.protocol}://#{ds.host_with_port} if not, then look at the neighbouring code to see if there are any more elegant options.. Fixed by #834 Thanks @joeyparis ! \ud83d\udc99 . @f6v Is there still something I can help you with?\nThere is a small example app over at https://github.com/bookofgreg/react-rails-example-app which follows the steps mentioned above.\nWill reopen if there's something I can do here.. Is this still an issue? I've got a test app at https://github.com/bookofgreg/react-rails-example-app that runs Rails 5 that seems OK\n\n. Hi all,\nQuite a few of you in this thread!\nHas anyone been able to replicate this in versions 2.3 or 2.4 of react-rails?\nWe did a bugfix to how event detection happened (Turbolinks was undefined causing execution to stop) which was causing similar issues to this for other folk.. Hmm it's a tough one, if jQuery isn't firing it's ready event due to some other application bug then there's likely nothing we can do to detect it, and we don't want to intentionally use DOMContentLoaded if jQuery is present.\nSeems like this thread seems to be gathering diverse comments that have a variety of causes, some not loading JS in right place, or right order or missing pack tags, enough to be worthy of documenting.\nWill reopen if there is any good solution to this, otherwise will likely add a mention to any future troubleshoot section.\nEdit: First version of Troubleshooting doc: https://github.com/reactjs/react-rails/wiki/Troubleshooting. Thanks @duckworth !\nThat is on the plan to correct though I'm a little strapped for time at the moment.\nThe problem is likely to be with this:\nhttps://github.com/reactjs/react-rails/blob/master/react_ujs/src/events/detect.js#L22\nI'll copy this message to the other issue.. @rmosolgo Can you give me permission on NPM please?\nNot sure what you need to grant me publish, but my account is: https://www.npmjs.com/~bookofgreg\nI'll push this out as part of 2.3.1 I think.\nThanks.. React-rails simply uses Webpacker to compile the pack and then uses that pack to render server and client side.\nTherefore if you want plugins, add them to your application.js file and webpack through your package.json as normal using Yarn or NPM, I prefer Yarn.\nhttps://yarnpkg.com/lang/en/docs/managing-dependencies/. Mind if I close this for now? Given a scan of the open issues, seems there are plenty of people here from Rails land looking for their first foray into Javascript packages and we could definitely cater for that with some Doc improvements and Wiki entries on the subject. Thanks to you and others I'll work on improving the docs across several topics, this being one.. Going to close this without other reproduction steps.\nWill reopen if there's more details, thanks!. Reopening due to the amount of activity here, but it does seem that @timomeh is on the right lines about it not being run client-side. (Thanks @timomeh for helping out here by the way!). @ikanade @yhkang95 can someone provide a way to reproduce the issue? Maybe a small example app to illustrate the problem for me?. @thejamespinto I added a branch to the example app of Rails 4 + React-rails 2.4, installed as per the sprockets readme. example-Rails-4\nIt appears to work but this is only a simple example, is it possible to show a simple reproduction of the issue?. @thejamespinto are you running mini_racer or therubyracer? We stopped supporting therubyracer a while back because it is utter rubbish at keeping up to date (running libv8 3 or something daft)\nTrouble with this gem at the moment is we support many versions of \"Options\", you can't specify minimum versions of something that is optional.\nhttps://github.com/rubygems/rubygems/issues/1811\nFor example we support both Sprockets from V2 and Webpacker from V1.1, but I can't change the Gemspec to reject Sprockets 1 because that would stop you using webpacker, or force to install both.\nYou also can't really do rejecting other gems, for instance therubyracer does not support libv8 that's new enough, you simply must use mini_racer instead on linux. On windows it works with bare Execjs so I can't even lock the libv8 version.\nThis means the gem will 'resolve' in the bundle but will still not have it's deps met.\nAny work I do to make a \"golden\" path (Webpacker > 2, Libv8 > 5, Rails > 4) risks cutting off huge chunks of users doing anything off the beaten path.. @thejamespinto did you manage to upgrade to a newer react-rails version since?\nI'd very much welcome a PR that highlights those compatibility issues. Realised I made the mistake of only \ud83d\udc4d'ing your last message as approval but forgetting that GitHub will not ping you that I did that.\nBeen a crazy busy few months, agree that driving adoption of react + rails is a good thing, been leaning on this gem heavily on professional projects in the past few months, thankfully all Webpack + Rails 5 so smooth sailing for my work. Unfortunately smooth sailing means work doesn't tend to sponsor me fixing problems, also given that I changed jobs lately.. Can I consider this issue closed or is there still an outstanding problem here that I can help with?\nMy project uses Sprockets for CSS/SCSS, Images and some small bits of JS that are sitewide, and it also uses Webpacker for all React Components.\nThat structure works perfectly well because I have no dependence between the code that exists in the webpack and the other assets from sprockets.\nYou would not be able to split your React Components if a component in Webpacker requires a component in Sprockets as it would not be able to see across the boundary.\nIt's probably possible to split React Components between Sprockets and Webpacker as long as they do not require each other too, though you would need a custom helper as the react_component view helper prefers Webpack if available.. Closing, hope the comments here help future visitors wanting to move between Sprockets/Webpacker. @lasernite is this still an issue?\nI have this problem occasionally if I'm using Spring and I keep generating rails apps called foo for testing.. Closing for now.. Hi @mkrajewski90 ,\nAre you still able to replicate the issue?\nI've been unable to do so, if you could tell me how to replicate it from a new rails app or identify how this example is different, it would help me greatly.\nhttps://github.com/BookOfGreg/react-rails-example-app/pull/2/files\nClosing for now unless I can help further.. I've been trying to replicate #758 , @andrewcsmith or @rmosolgo  can you see what should be broken on the sprockets branch of my example app?\nhttps://github.com/BookOfGreg/react-rails-example-app/commit/da1b5594f4d7cc9d0e1489a04636a68597cde002\n. @rmosolgo I have this branch which is .JSX and webpacker which appears to work just fine. Once again am I misunderstanding something? https://github.com/BookOfGreg/react-rails-example-app/pull/2/files. @Deekor I have just documented that observation in https://github.com/reactjs/react-rails/wiki/Troubleshooting , thanks!\nMay do some work to check how the detector is working with the variety of jQuery versions. . From @duckworth at https://github.com/reactjs/react-rails/issues/742#issuecomment-346156982\n\nRan into this as well and it was due to jquery3 removing .on(\"ready\", fn) that react_ujs is binding to.\nhttps://jquery.com/upgrade-guide/3.0/#breaking-change-on-quot-ready-quot-fn-removed\n\nThe problem is likely to be with this:\nhttps://github.com/reactjs/react-rails/blob/master/react_ujs/src/events/detect.js#L22. Could someone confirm it's fixed in the pre-release of the gem?\nhttps://rubygems.org/gems/react-rails/versions/2.4.4.pre\nAlso there's a npm tag of \"pre\" for the UJS too for those using webpack.. Thanks all for the help with this one :+1:. Hi @edwardmp \nSorry for taking so long to get to these issues, just categorising and organising them so I can start working down the open issues list.\nIs #772 a duplicate of this?\nAlso does this still occur?. I believe this to be fixed in #868 (Pre-release if you want to test it)\n@edwardmp I'll reopen if this does not fix it for you. Thanks for the report \ud83d\udc4d . I've merged your code and commits into #798 and corrected the associated tests. Thank you for your help with Coffeescript! Could you test out that branch and see if it meets your needs?. This is a pretty generic error unrelated to this gem, usually it's something to do with incorrectly using webpack or loading something server-side when you shouldn't. Maybe loading in Sprockets which can't do that require style.\nhttps://stackoverflow.com/questions/19059580/client-on-node-uncaught-referenceerror-require-is-not-defined. Closing PR, it's better for people to use the rails 5 rails command rather than rake where available.. I believe this to be fixed in #868 (currently pre-release if you want to test it)\n@efedorenko I'll reopen if not, thanks for the report \ud83d\udc4d . From https://reactjs.org/docs/perf.html\n\nAs of React 16, react-addons-perf is not supported. Please use your browser\u2019s profiling tools to get insight into which components re-render.\n\nSeems as though measuring in the browser is probably the best way of knowing the true performance of your app.\nThere are still a variety of small benchmarks available such as wrapping the view-helper in a call to benchmark\nWill add perf testing to the Wiki. Thanks!. @anaumov New Wiki page detailing performance! \ud83c\udf89 \nhttps://github.com/reactjs/react-rails/wiki/Performance\nIf you have any other thoughts please let me know. Hope this helps!. ```\ngem update rails\ngem update webpacker\nrails new foo --webpack\ncd foo\necho 'gem \"react-rails\", git: \"https://github.com/reactjs/react-rails.git\"' >> Gemfile\nrails webpacker:install\nrails g react:install\nrails g react:component Post name:string\necho '<%= react_component \"Post\", {name: \"Tim\"}, prerender: true %>' > app/views/home/index.html.erb\nrails s\nopen localhost:3000/home/index\n``\nI'm seeingError: Cannot find module \"react\"Interesting. Not quite the same as your error but yeah there's some issue there.. Not sure what changed, ~Webpacker::Manifest.lookup` is still there~ @ https://github.com/rails/webpacker/blob/v3.0.0/lib/webpacker/manifest.rb#L25\nEdit:  It's not a class method anymore, I'm currently researching how to get the current instance of manifest and will PR it in.. Found it: Yep they made it a singleton.\nI'll PR something in to be compatible with their PR\nhttps://github.com/rails/webpacker/pull/636\nhttps://github.com/rails/webpacker/commit/c895cb6a33dbd3531feab886fdfe10fc66c4509e#diff-ccbc9196f591353b07190e7063ca0881R24. I took on the code from #778 , thank you for that one! Makes it a little easier to update.\nCurrently working on trying to make the new config/webpacker.yml and it's env files play nicely with webpacker V1's paths.yml. It's putting my manifest in the webpacker.yml's output location with the paths.yml's manifest name so the webpacker helpers can't find the manifest.\nWill take me some time to figure out all the subtleties of this before I'm done. Very welcome for someone to help with this!\nEdit: Is there a nice way of changing the config files in test/dummy?. Webpacker 1 and 2 have lookup_path, Webpacker 3 does not. and I'll have to compose a method of finding the actual path of a file.. I'll admit that I'm at a bit of a dead end. On #779 I've got all of Travis passing except Rails 5 + Webpacker, but on that branch Webpack builds to public/packs but Webpacker looks in packs/packs instead. That is the case even if I peg Webpack at 1.15.x and Webpacker at ~> 1.0.\nIf a regular committer could help me out to get the tests passing on master then I could continue working here to get more Webpacker support.\nWe should really think about the maintainability of the Webpacker support as the manifest paths between versions seems really flakey and i'm not keen on the pattern of .responds_to? and defined? everywhere.. Master finally passes and this does mean Webpacker 3 support (And 1.1, 1.2, 2.0) on this branch.\nI split out as much as I could do make it clearer but there is still a lot of mess I caused in the code, lots of refactoring to do.\n. This could go in to master it's current state as I believe it to be an improvement but frankly this could use some TLC and refactoring.\nI'm certain all my MAJOR < 3 checks could be extracted into a class following the existing pattern.\nThere are probably better ways of integrating with the Webpacker.dev_server also.\nI found some odd behaviour such as webpack 3 seems to read the wrong node_modules folder when loading in ../../../../react_ujs, so I used the actual npm package for it instead, that might cause some people in the wild issues that I can't even predict if they're messing with node context.\nAll these tweaks could be in future patches to this though.\nEdit: Since I've modified the webpacker 1.1, 1.2 and 2 support, it would be good to see if it still works without bugs on an existing project for confirmation.. I think we should probably merge this if we can be confident that it works. All existing tests pass. I can carry on with a tidy up beyond this.\nEdit: apparently linting broke the tests. How odd. Will keep looking into it.. Tests fail on specific seeds:\nbundle exec appraisal rails-5_no_sprockets_webpacker_3 rake test TESTOPTS=\"--seed=17880\". @rmosolgo If you like, :shipit: and I'll keep PR'ing rubocops, test fixes and refactorings as patch-level changes after this. Be good to start getting some bug reports from folks so I know if this accidentally impacts anyone.. @gaiapunk It's not been released as a gem yet but it's possible to use the master branch directly with:\ngem 'react-rails', git: 'https://github.com/reactjs/react-rails.git', branch: 'master'. I tried the following steps to reproduce but was OK.\nbash\nrbenv shell 2.4.1\ngem install rails\nrails new foo --webpack\ncd foo\necho \"gem 'react-rails', git: 'https://github.com/reactjs/react-rails.git', branch: 'master'\" >> Gemfile\nbundle\nrails g react:install\nrails g react:component page name:string\nCan you check if it's fixed by installing the master branch?\ngem 'react-rails', git: 'https://github.com/reactjs/react-rails.git', branch: 'master'. When a test fails with \"FAILED: ControllerTest#test_something_happened\", you can global find it if the test name matches test_something_happened but not test \"some-thin'g ()happened\".\nPerhaps this is personal preference but it's much much faster for me to fix tests if I can find them.\nEdit: Also when you pass it on the CLI with --name, it also takes it in the form TESTOPTS=\"--name test_something_happened\". Think I found the cause of some of my remaining test failures. I'd been running Webpacker 1 against Webpack 2, which is why all my test files keep ending up in the wrong positions. Will probably implement a version check like https://github.com/shakacode/react_on_rails/blob/master/lib/react_on_rails/version_checker.rb to make at least the tests a bit more stable.\nI'm a little concerned at how much work was involved at getting the master branch passing so far though. Am I doing something wrong or missing something obvious?. FYI The last fail on travis is in the webpacker:compile Rake task which is in capture_io, hence why there is no error output.\nIt's complaining about looking for the manifest in packs/packs when webpack put it in public/packs.\nHonestly not sure what to do about that.. Closing in favour of #777 . This change would drop support for Webpack 1 and 2.. This PR drops Webpacker 1 and 2 support.. Can't really speak for the whole community, but if we look at the numbers I'm probably say definitely drop 1.1 (I wrote one method specific to that version), maybe 1.2 when 3 picks up.\n17,079 downloads  https://rubygems.org/gems/webpacker/versions/3.0.1\n3,786 downloads   https://rubygems.org/gems/webpacker/versions/3.0.0\n179,128 downloads  https://rubygems.org/gems/webpacker/versions/2.0\n59,125 downloads  https://rubygems.org/gems/webpacker/versions/1.2\n17,494 downloads  https://rubygems.org/gems/webpacker/versions/1.1\nNo idea what I did to break the test suite so thoroughly but at least it looks like some JRuby builds are running now. I'll spend more time on this later, I have to do some work for my company for a few days before I can return to this.\nEdit: Actually just upgraded the main application for my day job from Webpacker 1 to 3 in a single hop in a few hours, so it shouldn't be a major problem to my knowledge, that's why I prefer this gem to React On Rails, theirs is too prescriptive and lock you into how they think your webpack should be run, makes it unusable.\nEd2:\nOf course if people want to keep using react-rails with Webpacker 1 or 2, bundler will just use the 2.2 series (Assuming the current master becomes a 2.3 or 3.0) so it's generally safe to drop support for older versions of things.. @rmosolgo The JRuby tests are now green also on this branch. \ud83d\udea2 . I am going to close this until Webpacker 1 becomes difficult to maintain.. Apparently half my workplace wants me to take this one on looking at those thumbs.\nYep I'll be glad to give it a go. My interest is mostly around the Webpack integration + performance as it affect my day job so it may be worth seeking someone who relies on the sprockets side of things in addition.. @rmosolgo Glad we can work to our strengths \ud83d\udc4d \nhttps://rubygems.org/profiles/BookOfGreg. @rmosolgo Is @zpao the main owner of this gem? Who should I know about when working in this area?\nBeen reading https://reactcommunity.org/ to catch up and skimming through a couple of the open issues. Any roadmap thoughts or just pick off what I can when I've got time?. Ah, my inexperience is showing! Email is in my Github profile now. Also added my company so you can see who the sponsor has been for my time spent on this so far.\nI like the attitude the project and yourself have taken so far. This is already the most code I've contributed to open source so far, mostly documentation on other projects so I hope I can make folk happy with what we're doing here.. Going to close this for now, if anyone comes across this, we are always going to be happy to have more maintainers and contributors helping us drive the cutting edge of tech!. https://github.com/rails/webpacker/issues/21\nThis seems a pretty relevant PR on Webpacker.\nI can't see any linked PR from that or linked discussions that solved it for Webpacker (maybe I haven't followed it deep enough though)\nOnce there is a way to do it in Webpacker, that can be rolled into (or documented for) this gem.. I suppose a part of the problem is Webpack won't have access to the 'invisible' gem files like Sprockets would, so it would be impossible to to compile them.\nThe engine could hypothetically do something like have a rake task that generates a compiled JS in the parent's JS directory when it gets installed, similar to how the Devise engine dumps it's views in the parent if needed.\nI could document both solutions in the wiki once I get onto that task.. That's a nice solution! Thank you for the work you put in here, this looks like it does solve the original issue. My apologies for not seeing what you meant originally, I'm much more a ruby dev than a JS dev so missed your meaning.\nCould you add something to the Readme as a starter under an \"Engine\" header?  You deserve the contributor badge with a great solution like that.. Thanks @tomasc for your work on the wiki, I linked it from the Wiki's home.\nI'm glad to see new content in there, it helps greatly with answering questions for folk.\nI plan on trying to put some more time into getting docs up to scratch in general once the issue count is under control.\nCould you close this for now if you're satisfied it solves your original issue?\nIf you have any other thoughts on this gem I'd be glad to hear them \ud83d\udc9a . I did the script below to try replicate it and it launches and pre-renders on heroku OK.\nhttps://infinite-earth-83335.herokuapp.com/home/index\nCan you try make a small example repo that displays the behaviour?\nI previously had some issues with JS files that did not have react components still needing react defined if it was in the components folder, if you have any, maybe try that?\n```bash\nrbenv shell 2.4.1\ngem install rails\npkill -9 spring # I call all my trash apps \"foo\" and spring messes with that\nrails new foo  --database=postgresql\ncd foo\necho \"gem 'react-rails', git: 'https://github.com/reactjs/react-rails.git', branch: 'master'\" >> Gemfile\nbundle\nrails g react:install\nrails g react:component page name:string\ngem install heroku\nheroku create # I already have logged into heroku on other rubies.\nrails g controller home index\necho \"<%= react_component 'Page', {}, prerender: true %>\" > app/views/home/index.html.erb\ngit add -A\ngit commit -m 'initial commit'\ngit push heroku master\nheroku open\ngo to home/index\n``. Thought React 16 was next week, looks like it got released just now!\nI'll have to spend some time tomorrow to see why tests didn't pass just there and see if we can get a few releases out..bundle exec appraisal rails-5.1-sprockets_4 rake test TESTOPTS=\"--seed=56135\"` seems to work.\nNot sure why it's failing in travis. Will bump a file to get it to re-run.\nThe new deprecation warnings for React16: Warning: Accessing factories like React.DOM.div has been deprecated and will be removed in v16.0+. Use the react-dom-factories package instead. are going to need me to cleanup a few things but that's for another PR.. @rdjpalmer As soon as I have some free time, I'm working on this project kindly sponsored by my day job so I have to complete other priorities, hopefully in the next couple of days.. @rdjpalmer Shipped on my weekend, enjoy :)\nLet me know if you have problems with the migration to react 16 in sprockets, I was wondering if I needed to add a teeny migration doc at all for it.. Off it goes!. @rmosolgo\nThe only failing tests on bundle exec appraisal rails-5_no_sprockets_webpacker_3 rake test are around ExecJS::ProgramError: TypeError: Cannot read property 'any' of undefined which I've tracked back to addons.TransitionGroup = require(\"react-transition-group/TransitionGroup\"); which seems to include component.PropType.any which is always undefined.\nI couldn't find a way of getting it to accept the migration to prop-types so I'm considering dropping the addons packages given React 16 doesn't do addons anymore anyway.\nThoughts?\nI'm thinking a release on the 2.3 branch to just do React 15.6 without all the deprecation warnings, and then for React 16 no addons.. Previous version has 3k downloads. Not hearing anything about bugs in its use. Tempting to get ready to merge this one in.. I actually spent a few hours looking into this myself last night, yep I could get HMR to initialize but I didn't make as much progress as you had done, I'll be honest I've never tried using the new HMR features of Webpacker 3 yet until you mentioned it so thanks for showing me something new and interesting \ud83d\udc4d \nDo you happen to know of any running example of HRM in the wild? Maybe a github example project of Webpacker + HMR working sould really help! That will make it infinitely easier for me to be building on a known good base than reinvent the wheel.\nI'll make another attempt at getting a HMR component rendering in an example project when I have time.. Thanks for the investigation work so far! Yep I totally can't get it working without modifying something.\nI've been getting an example app stood up at BookOfGreg/react-rails-example-app to tinker with this. Currently if I switch on HMR and touch a file, the serverside rendering errors with SyntaxError: Unexpected token const so looks like there is some interesting work to do in this area.\nSummoning @RiccardoMargiotta . @kkir That's good news! Could you share some example code, or PR onto https://github.com/bookofgreg/react-rails-example-app ? I've been unable to do it myself as of yet but I've never used HMR before either.. I think it's meant to go in the packs but I've still not had time to work on this.. Thank you! Interesting that their actual github page is still linked to the wrong place, opened an issue for them \ud83d\udc4d \nEdit: Will merge once they confirm it on their github.. Wow, this actually doubles the build speed from 1h25 to 45 minutes for travis.. The one 'hidden' dep is Chrome/Chromium itself. If we're happy with that (maybe I should document it) then we could merge this.. Thank you for the information. From this comment we plan to put forward one more release with React 15.6 with the replacement addons and no deprecation warnings, then from 16 onwards not have addons anymore.\nFeel free to comment on, test, or add to the work in #792 if you want to know more :). Agreed.\nJust spun up my first webpack + Coffeescript project here so that I can actually start testing these things for you. Yep you're totally right, no @ needed.\nLater on I'll write a test for this in this project but thanks.\nEdit: I'll clean up the test failure in a moment.. Added a coffee wiki entry.\nhttps://github.com/reactjs/react-rails/wiki/React-Rails,-Coffeescript,-JSX-and-Webpacker. Thank you!. Thanks! That's why it took me way longer than I thought, tore up half the test suite figuring out why Sprockets 3 or 4 refused to load the file. There is no equivalent for Webpacker yet. I can see why it's been tricky for you, you almost want to keep both Sprockets and Webpacker separated completely for ease of development.... Yep agreed. If possible could you write a failing test? I recently wrote a test in #802 that checked for a JS error within the ruby test suite, if possible could you follow that example? https://github.com/reactjs/react-rails/blob/master/test/react/rails/react_rails_ujs_test.rb#L104-L107. Is this related to #747 ?\nSo far I've been unable to replicate it.\n@cristianrosu and @yhkang95 can you provide a failing test or reproduction steps?. Closing for now. I'll reopen if I hear back. Thank you.. Hi @iamdriz , Sorry I didn't get to this one before it was closed. Did you solve the issue or was it not with the branch? Future visitors to this thread may be interested in your thoughts.\nSounds like some form of load order issue which could be resolved by manually requiring it earlier or a tweak to the gem itself.\nThank you. :). Interesting, could you expand on the window issue you are having, perhaps with another open issue if you can make a basic app/reproducible list of steps. Thank you :). Good questions. If you're using something like webpacks then you could look into only loading those functions from react_ujs and calling them at will.\nMaybe import {mountComponents, detectEvents} from 'react_ujs' : I haven't tried this myself but the idea should be there.. Thanks @anaumov !\nI've added an entry to the Wiki with your example: https://github.com/reactjs/react-rails/wiki/How-to:-Stop-listening-to-events. Cool. I published as npm publish --tag beta as 2.3.0 and all seemed OK (Downloadable as yarn add react_ujs@beta). Downloaded it into my test app and it was all happy. Will add the #802 changes in as 2.3.1.\nJust getting myself in a knot slightly with these branches, just me having teething issues is all.\nI noticed in the npm pack step that both the source and dist folders were sent in the package, I may modify the node package in the future to be more minimal.. https://www.npmjs.com/package/react_ujs\nThat looks better \ud83d\udc4d . Wow, @rmosolgo was just testing this on my company's project and it makes the whole thing WAY faster!\nExcited about this change.. Hi @djvs , can you take a look at this sample project, Rails 5, Webpacker 3, and see if you can see what the difference is between this example and yours? https://github.com/bookofgreg/react-rails-example-app\nI'll find it hard to reproduce your issue without knowing more, thank you :). If you have those env files and the loaders folders, you're likely using or have upgraded from Webpacker 2 to 3 without cleaning up that folder fully. That shouldn't matter too much though, it's just an aside.\nOh, could this be as simple as window is not defined serverside? Apologies for missing this earlier.\nCould you try the following to see if it's a definition thing?\nvar components\ncomponents.MyComponent = require('./components/MyComponent');\n~Then if I understand webpack correctly it should give you a components global variable to use client or serverside.~\nEdit: Some experimentation, and colleagues who know JS better than me, let me know I'm incorrect on this one. Window won't be defined serverside but unsure how to expose your components 'globally' in that case.. Adding my components using var Post = require('../components/post') in packs/application.js made them globally available. That will deal with serverside window being undefined.\nhttps://github.com/BookOfGreg/react-rails-example-app/blob/without-ujs/app/javascript/packs/application.js#L11\nIf your server_rendering.js still contains React_ujs it should be able to automatically serverside render like that as our default renderer tries to use it.\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/server_rendering/exec_js_renderer.rb#L42-L45\nIf not then see https://github.com/reactjs/react-rails#server-side-rendering which talks through not being able to use Document or Window server-side and defining your own renderer if needed.. Apologies for leaving this one for 6 days, I have a bad habit of opening these as soon as I have a notification on my phone and then I don't remember these the next day.\nAre you still having an issue with your redux or has your server_rendering sorted it?\nI'd be interested in seeing how your server_rendering is working with you loading everything into global context as it could be a useful example for others.. This is more a general CSS or JS question for StackOverflow than for here.\nClosing this issue as I don't feel it's to do with the gem, thank you.. This is an interesting issue.\nLets say in my test repo: https://github.com/bookofgreg/react-rails-example-app\nTo make sure I understand this correctly:\nIf you add a .scss file in the components directory, you expected it not to be compiled by default, but it was?\nOr is it more broad:\nIf you add any file (including JS) that was not required, you expected it not to be compiled but it was?. With most things in react-rails world, it's reliant on how the underlying asset pipeline (sprockets or webpacker) compiles things, so I suspect what this gem can do for you will be limited.\nDo you know of any way to do this natively in webpack? If there is a way then we could perhaps look to gain support for it in this gem by using whatever native features webpacker provides.. Hi, @mustmodify,\nGood question.\nNot sure how others feels but personally I believe that Webpacker and Webpack itself is the future of JS on large Rails apps. You're spot on about access to NPM, and it's doubly true if JS is a large part of your application.\nThere will be tons of people out there using Sprockets as their asset pipeline and frankly I prefer Sprockets myself for small apps or when I'm starting out, then when a team of front end devs come onboard it gets swapped to Webpack, especially now it's won out over the alternatives like Browserify.\nWhat topics would you think would make a useful concise discussion point in an intro in the readme, I suspect Rails devs finding their way here will already have some awareness of JS ecosystem if they come seeking native React integration.\nFun little note, I'd forked this gem a year ago and converted it to Gulp/Grunt + Browserify for it's pipeline before Webpacker was even a thing, turned into a total mess! Glad Webacker has the ecosystem behind it now and us Rails devs can keep being super productive.\nWriting this late at night so apologies for babbling \ud83d\ude01 . That's a good series of points. Thanks for your time in making such a handy list.\n@mustmodify Do you reckon this would be well served by a wiki entry linked from the Readme or some other extra material?\nI'm thinking the readme, docs, examples could do with a general tidy up as a couple folk have mentioned to me separately they aren't reading well top to bottom.\n@rmosolgo Mind if I try reworking a lot of the docs around this, incorporating the points above as talking points in a wiki? Have any structural thoughts on it yourself?. The p.s isn't too hard :)\nconfig/webpack.yml\nyaml\ndefault: &default\n  source_path: app/assets/javascript. Webpack will only compile things linked from the entries, and only the extensions listed in extensions, so you should be able to filter out most of the stuff in there.. @mustmodify I've made a Wiki article here, not totally happy with it yet but it's a start.\nThere's a fair amount of content on the subject already so a section of links might help the article.\nI was hoping you might be able to help with some of the content there, you should be able to edit it.. My company can't open source it's main software sadly, though it's implementation is extremely close to the reference webpacker app here: https://github.com/bookofgreg/react-rails-example-app\nWe added a small wrapper around the react_component call that allows us to cache things based on the params property.. Wandered across this one lately:\nhttps://github.com/meltedspork/living-documentation. That's an interesting thought, what did you expect it to do?\nMaybe there is some better expectation setting we could do in the Readme. Likely to be same as this and others:\nhttps://github.com/facebookincubator/create-react-app/issues/2602\nThe title of this issue is quite Googleable and seems to be a generic Export Default issue.\nI suspect if you're creating components that export.default, the webpack should assign __esmodule to true.\nWithin the gem it's only read to check so we know when to load the component or the default from a module here:\nhttps://github.com/reactjs/react-rails/blob/f3f9576345dae018dd7d7e96466824d78b19919d/react_ujs/src/getConstructor/fromRequireContext.js#L13-L22. There seems to be a few polyfills out there for Android 4 + __esmodule so yes, you probably do need a module similar to what you mentioned here: https://github.com/reactjs/react-rails/issues/816#issuecomment-339286790\nDoes it help when you include it?. Will re-open if it's still an issue. Hope that helped.. Hi @Tess10553 , Did you mean to open this PR? You can compare master and 2.3 by using the compare function on github.\nhttps://github.com/reactjs/react-rails/compare/2.3-stable. I assume you are using Sprockets.\nWhat dependency is stopping you go from React-rails 0.13 to 2.4?\nI'll try spin up a version of my example app with redux and see if I can get it going.\nI just started a quick google along the lines of sprockets redux and came across this blogpost using Rails 3.2 + react-rails + redux so I'm hopeful I should be able to help you with this soon.\nhttp://www.lampesberger.net/blog/2016/03/16/react-slash-redux-with-rails-3-dot-2-and-sprockets/. I only recently realised that recent versions of Sprockets actually load in node_modules, would it help you to yarn add redux and load it in your app.js?. http://guides.rubyonrails.org/maintenance_policy.html\nRails 3.x is now unsupported for even security fixes so I don't recommend anything that keeps you on that version. My preference would be upgrade to 4.2 and Webpacker. If React_on_rails supports Rails 3.2 then they aren't being very security minded.\nreact-rails as recently as v2.4.3 worked with Rails 3.2 on sprockets, you could use this with sprockets if you are locked back on other dependencies.\nhttps://github.com/reactjs/react-rails#use-with-asset-pipeline\nhttps://github.com/reactjs/react-rails/commit/abfc1fc389881f3425df2a94fce171005343c35b#diff-354f30a63fb0907d4ad57269548329e3L22. Hi @anugamlath , did you mean to open this PR? Master has Tilt as a dependency since 1.0. I've not been able to replicate it in a simple example so it's likely to be something I've done in my app.. This issue is caused by the sprockets cache not regenerating when swapping out gem versions.\nThis is fixed by rake tmp:clear or more simply rm -rf tmp/cache. @semukas Thanks for taking an interest in react-rails, going to close this as It seems accidental.\nIf you're looking to see what has changed over time, see the Changelog or check out the https://github.com/reactjs/react-rails/compare/master...0.11 compare tool.. I'm afraid so. You could stay on 2.3.1 for now but yes eventually you will have to handle the prop-type issue.\nhttps://reactjs.org/blog/2017/04/07/react-v15.5.0.html#migrating-from-reactproptypes\nI have a codebase that's several thousand likes of JS, for me it was every file require 'prop-types' and global find replace React.Prop -> Prop\nAre you using Webpack or Sprockets? \nFor Sprockets:: The pre-bundled sprockets has prop-types already included for convenience: https://github.com/reactjs/react-rails/blob/master/react-builds/react-browser.js#L4\nFor Webpacker:: You can safely re-run bundle exec rails webpacker:install:react and it will yarn add prop-types for you. https://github.com/rails/webpacker/blob/master/lib/install/react.rb#L26. It's a good opportunity for us to update documentation if it's lacking. Thanks for letting us know the issue :). Hello @vladi160,\nAre you using Webpacker or Sprockets?\nWhich version of React-Rails and which version of ReactRailsUJS do you have?\nI'll help you if I can but I need to know more in order to replicate this issue. \ud83d\udc4d . Don't want to call your app React, it's going to conflict with https://github.com/reactjs/react-rails/blob/master/lib/react.rb\nArguably we shouldn't use the term React either.\nCan you generate a new app with a different name and see if that solves this issue?. What version of React are you running? ReactDOM.hydrate is a function from v16.\nyarn upgrade react react-dom should fix that right up for you \ud83d\udc4d Let me know how it goes.. @xinranxiao Good point, the 2.4.0 change will have not been backward compatible for sprockets users in the Gem (and I even listed it as so in the Changelog) and the UJS is definitely is not backward compatible as it uses without testing for existence of hydrate.\nI must take a moment to apologise for moving too quickly.\n@rmosolgo I'd like your input to this issue as me rushing is what got us here, so me rushing to fix isn't wise either.\nI could release a react_UJS node package 2.4.2 that checks for hydrate and uses render if hydrate is not defined, that lets us get passed the UJS backward compatibility hurdle no bother.\nThere's also the gem itself that is backwards incompatible only for Sprockets users that are using the pre-bundled react, as it forces a React 16 upgrade. Webpacker users and sprockets not pre-bundling have their own React so dodge the issue. I could backport fixes to 2.3-stable branch and release that as gem 2.4.2and then release 2.4.1 as 3.0.\nThe reason I didn't want to release as 3.0 as it seemed like a big leap for the work I was doing, and only affected a subset of users, though the gem is mature enough that I shouldn't be releasing so quickly as I have been doing.\nThoughts please?. > As for Sprockets, I think a corresponding Gem release will solve the problem there. If they have their own React bundled in, and it's less than 16, they'll be ok, because the UJS will choose render instead of hydrate, right?\nAh good point. Yes correcting the UJS will fix it for that set of users.\nFor people on sprockets using the bundled react, I've effectively forced an incompatible upgrade from React 15 to 16, should I release a 3.0 to the gem for that or is that a small enough subset to pass over? They would definitely need to handle PropTypes and CreateReactClass.\nI'll go ahead and work on the 2.4.2 for the UJS for now, thanks for your thoughts.\n. That seems odd, is the server_rendering.js in the browser accidentally somehow?\nI assume you are running Sprockets given the earlier issues.. Sorry I think I may have caused a misunderstanding there, sprockets is the name of the default asset pipeline in rails. If you aren't using webpacker, you are very likely using sprockets without knowing it's name.\nI have a branch if the example app here: https://github.com/bookofgreg/react-rails-example-app/tree/sprockets\nThis should have a similar setup to the one you have, I'll check it runs with the latest version of the gem later, if possible could you try see what the difference is between what you have and that branch? It may help us reproduce the issue in server-side rendering.. Maybe I'm misinterpreting what you said, I'm not able to replicate your issue:\nThis works.\nMain.js.jsx\nJSX\nclass Main extends React.Component { render() { return <h1>Hello</h1> } }\nIndex.html.erb\nerb\n<%= react_component 'Post', { title: 'A working react component', body: 'Simple but effective' }, prerender: true %>\n<%= react_component 'Main', { }, prerender: false %>\n<script type=\"text/javascript\">window.onload = function(){ ReactDOM.render(<Main/>,document.getElementById('react')); }</script>\nThis one has a syntax error on < because you can't use JSX in a script tag.\nIndex.html.erb\nerb\n<%= react_component 'Post', { title: 'A working react component', body: 'Simple but effective' }, prerender: true %>\n<div id=\"react\"></div>\n<script type=\"text/javascript\">window.onload = function(){ ReactDOM.render(<Main/>,document.getElementById('react')); }</script>\nThis one won't load because window is not defined (You can't use window serverside, use self instead)\nMain.js.jsx\nJSX\nclass Main extends React.Component { render() { return <h1>Hello</h1> } } window.onload = function(){ ReactDOM.render(<Main/>,document.getElementById('react')); }\nCan you make a branch from the example app, and Pull Request the changes you want to make, so I can see the issue?. ~In your first example, I couldn't help but notice this line: Rails.application.config.assets.paths << Rails.root.join('node_modules')\nIf you want node modules, you probably want to be using Webpacker.~\n- Edit: Turns out latest versions of Sprockets DO include node_modules by default in it's assets.rb, sorry, I haven't use Sprockets for a couple versions on real projects so I didn't know that was a thing. I still recommend Webpacker anyway as I think it's the future of JS bundling for apps.\nbash\nrails new example --webpacker=react\nYou also have app/assets/frontend/components as well as app/assets/javascripts/components. You should really only have one, and which one depends on the pipeline, I'd probably keep the 2nd and move the first's files in there.\nYou also have a config/webpack/ folder so it looks like your assets have gotten mixed up somehow.\nThere's also a bundle.js file which looks like a webpacked bundle that probably has react in it.\nYou want to not load node_modules in sprockets, and not load the webpacked bundle, that that is at least 2 too many reacts loaded. Maybe there's more, I didn't dig further.\n\nIn example 2:\nYou're attempting to use JQuery in MainTwo\nThat attempts to run client-side code server-side when prerender: :true and reactDom does not exist server-side, it's React-dom-server that exists server-side.\nSo just move the code above into a normal JS location (maybe your application.js and delete the jquery reference server-side from here and it all works! https://github.com/vladi160/example02/blob/master/app/assets/javascripts/server_rendering.js#L1\n\nIn example 3:\nSame again, trying to use JQuery server-side.\nIf you really must use something that depends on document or window server-side, fake it with one of the several global var packages, or do a presence check on window before trying to use it.\nWish there was a good blog post about server-side  variables out there but in general you can't depend on anything you haven't defined server-side, there is no browser.. This was an interesting dive into the things that can go wrong when trying to use the gem, I'll see if I can generate a wiki page for these kinds of problems.\nIt's not an issue with this gem though so I'll add a documentation tag and close it when I get an article up.\nThis has been fun, thanks @vladi160, hope it all helps!. I'll be honest, I spent some time trying to replicate the issue so that I could write a test for this and I couldn't actually trigger it again though I have seen it in the past. Going to merge this for now, it's a safe change unless someone does something truly odd like putting casual URLs in their file names.\nThanks for the contribution, hope you stick around and help out some more, been a pleasure @joeyparis \ud83c\udf89 . Hi @reneweteling ,\nIf you're putting it in /app/assets/javascripts/components, have you modified the webpacker.yml, or are you using sprockets for rendering your components?\nThis gem prefers Webpacker if available and the default component location is app/javascripts\nIf I add this content to app/javascript/components/JsonForm.js\njsx\nimport React from 'react'\nexport default class JsonForm extends React.Component {\n  render() {\n    return (<h1>test 2</h1>)\n  }\n}\nand render this:\n<%= react_component 'JsonForm', {testparam: 'testje'}, {prerender: true} %>\nThen I get a rendered component.. No worries, have fun. What were you going to ask out of professional curiosity?. Yep confirmed, thanks for the correction! \ud83c\udf89 . On an aside, I'll ask at work about getting some JS unit tests in place for situations like this integration and the jQuery bug.. Verified this version of UJS works with React 15.\n\n. Travis is upset due to test failing on TheRubyRacer, but we removed it ages ago so no idea where it picked that gemfile up from.. Hi @wrzasa ,\nYou must be referring to this TestUtils, https://reactjs.org/docs/test-utils.html\nHow did you previously require that in your JS test suite?\nReactDom is available in react-rails 2.4 so you should be able to import ReactTestUtils from 'react-dom/test-utils'; anywhere in your test code for it to be available.\nEdit: Thanks for asking about Testing, it's something that is missing from our docs/wiki, I'd very much welcome a PR to the readme or a new Wiki article on the subject if we work something out together \ud83d\ude04  . We are using Mocha with Webpack, and we have a test_helper.js include TestUtils like this among other things:\nglobal.React = require('react');\nglobal.Component = React.Component;\nglobal.ReactDOM = require('react-dom');\nglobal.TestUtils = require('react-dom/test-utils');\nWe have @rails/webpacker and mocha as dependencies in our package.json (Webpack tree-shakes away mocha for production)\nWe have a test/mocha.opts containing:\ntest/assets/javascript\n--ui tdd\n--reporter dot\n--require test/babel\n--require test/test_helper\nAre you using Sprockets? Also not sure how Jasmine would normally expect you to require things in.\nHope the above info helps, that's how we have it working.. It works just fine for us, running a mocha test suite with v2.4 with Webpack, we did used to use Sprockets and it was fine then too. I do care, just there are no reproduction steps here that I can follow.\n  . @wrzasa My apologies, I mistook this for another open issue without re-reading the comments. I do plan on working on the testing documentation within react-rails. This is currently 4th on my queue.. We probably do want to be more subtle about when we hydrate vs render.\nIn the longer term I'd like to add a data attribute when it's pre-rendered so I can make the UJS choose between rendering and hydrating for each component. For now Hydrate is a better default than render though it does have some side effects.\nI'd welcome a PR to choose hydrate or render based on if a component was pre-rendered for if anyone has time to contribute.. @jsbaltodano , @dwightwatson and @phuctm4192 sorry for causing you all a bug. Thanks a bunch for your help fixing and reporting it all.\nI'll put a release out soon once Travis has run with the new patch in it as v2.4.3. Hi @RazvanDH \nThanks for getting in touch!\nI've not used react-router before but I'd imagine that BrowserRouter just from name won't be able to be used server-side as it will interact with DOM, hence your error message.\nWhat error do you get with the StaticRouter?\nHere is a doc provided by react-router themselves for server-side rendering.\nCould you let me know how it goes?\nhttps://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/guides/server-rendering.md\nFrom a skim seems like you will need to write your components in such a way as BrowserRouter never triggers server-side using the react lifecycle methods.. @programrails pass it in as props server side, that can be your components default state, then save axios for when something in the system changes rather than the componentDidMount.. This is excellent, thanks for the contribution!\nI'll make a small tweak to the changelog to reference the issue and this PR and add a ruby test for the new data attr after I merge this. Great help! \ud83d\ude01 . I tend to use React-Rails with Webpacker which uses Webpack rather than sprockets so I can't say I've tried this myself:\nWith Sprockets you can require in vendored or external JS such as react-dom-factories. I believe if you have a package.json anyway, then Sprockets should be able to scan your node_modules for it.\nBased on: http://railsapps.github.io/rails-javascript-include-external.html#locations\n```\n//= require react-dom-factories\n{div, h1} = ReactDOM\n@Rows = createReactClass\n  render: ->\n    div\n      className: 'rows'\n      h1\n        className: 'title'\n        'Rows'\n```\nBut if you're more familiar with Webpack, use react-rails with Webpacker :+1:. Hi @DamianPereira , Do you have a small example of using that library that I can run?\nRequesting things from JS server-side should theoretically just work and I'll see if I can give you a hand if you have a small example.\nIn our production apps, we put the initial state in using props as we find working in ruby simpler.. @tylerkahn Provide an example and I'll take a look if it should work or not.\nIf you complain without trying to contribute to the community, people will be less likely to try help.\nEdit: The Reproduction steps needed label should have been a hint. Help me to help you.. @tylerkahn Sorry for my short response to you previously, it can be difficult being a maintainer at times though that doesn't excuse me being rude.\nI've personally never used isomorphic-fetch or fetch directly and never seen anyone confirm it as working.\nThe main way of using this gem in an isomorphic way is SSR and passing props, though this is clearly not what you're currently after.\nI assume you're also not trying to statically serve the JS and fetch the data back via props. Any deeper serverside integration is not really possible as ExecJS can't call back into the ruby env to my knowledge so everything has to be passed in serverside at the prop boundary.\nIf you could provide an example repo then I will try look into if something can be done.\nWe're also always looking for additional contributors and maintainers so if you feel you could help with this then would very gladly accept the help.. What is the use case for passing in a context to the render_component helper?\nAre you referring to the same context that is set by default here?: https://github.com/reactjs/react-rails/blob/master/lib/generators/react/install_generator.rb#L99\n@3den I'd be interested in seeing your solution if possible so that I can understand more about the use case and look for possible ways to help :). Thanks a bunch for the detailed report! I'll look into this and let you know.\nEdit: Marked this as an enhancement rather than bug (although obviously buggy) as this seems more inconvenient rather than breaking for most cases. I do intend on fixing this.. @hawkzuo Are you running more than one copy of react-rails, or are you calling mount yourself, or are you invoking React some additional way?\nThis in your error seems quite unusual, I'd appreciate a small reproduction so I can take a look.\nThe node you're attempting to unmount was rendered by another copy of React. @hawkzuo Going to work on the original issue first. Confirmed that the handle_mount is a little messed up at the moment so that needs seeing to, that might fix your issue but will have to double check when I get to it.\n\n. @pioz @hawkzuo Can you try the pre-release of this gem?\nhttps://rubygems.org/gems/react-rails/versions/2.4.4.pre\nThis may fix your issue.. Glad I could help :). I did mean config/application.rb yes.\nThank you for your help! \ud83d\udc9a \ud83d\udc99 . Is this issue, the way React handles forms? https://reactjs.org/docs/forms.html#the-select-tag. Thanks @mabid , once I'm notified there's a new release of react, I'll update the pre-bundle for sprockets users.. Excellent! I may extend this now that you have me reading up on it.\nMy reading list:\nhttps://docs.codeclimate.com/v1.0/docs/advanced-configuration\nhttps://docs.codeclimate.com/v1.0/docs/excluding-files-and-folders\nThanks @Br3nda . @Br3nda Tweaked your PR slightly to use V2 of CodeClimate config based on reading the docs your PR led me to.\nThanks a bunch! Learned a load diving into there. Will merge when it runs green and see how our CodeClimate looks.. Thank you @Br3nda !\n\n. Can you upgrade from v1.5 to v1.11 first to make the leap smaller and isolate which change is making your upgrade hard, then upgrade minor versions until you find your breaking change?\nMap is an ES6 method in Javascript. If you can't run something due to ES6 Map not defined then likely there is something wrong with how it's converting ES6 to ES5.\nI'm going to guess you're using Sprockets as Webpacker is a bit newer than that version.\nDebugging other people's closed source is like fishing in the dark for me so I'm going to need more information than that to help you. Let me know how it goes!\nEdit: Yep you must be using sprockets as v1.5 didn't have Webpacker support yet.\nhttps://github.com/reactjs/react-rails/tree/v1.5.0/lib/react/server_rendering. You don't have to only use ES6, we prefer ES6 to ES5 but in general ES5 is more compatible with things.\nNow I think about it, if you're using therubyracer as the JS runtime, you may need to swap to mini_racer as mini_racer uses a newer version of Chrome's LibV8 which may enable ES6 features such as Map.\nWe dropped therubyracer support a few versions back.. @p-salido that's interesting. I didn't need that module in order to use ES6 in my company's project, I may spend some time seeing why that happens in the new year.. It's always hard for me to understand what level of help to provide on our dependencies, thank you for helping myself and others see what is not obvious usage.\nCould you either move it towards the Webpack section, or mark it as Webpack specific somehow, and then I'll merge it in.\nThank you for your help! Happy new year \ud83d\ude04 . I will probably add a small how-to and an example to the react-example-app repo of code splitting.\nThere are quite a few articles on the subject and although I don't have an example of it interacting with this gem, I'm confident that it should work as we are just using Webpacker directly, the only problem that could happen is if the gem gets upset about the webpacker context serverside, in which case I'd consider that a bug.\nhttps://hackernoon.com/straightforward-code-splitting-with-react-and-webpack-4b94c28f6c3f\nhttps://webpack.js.org/plugins/commons-chunk-plugin/\nhttps://github.com/rails/webpacker/issues/65\nLet me know how you get on! If it works then I'd love to see an example, if not then a bug report would help others trying to do this \ud83d\ude04 Good luck! And happy new year :). \ud83d\ude0d Lovely! Thank you for the contribution, it really helps \ud83d\udc4d \nHave a happy new year.. Thanks for your your PR.\nSome versions of Rails do not appear to be compatible with Ruby 2.5 so they will need to be commented out.. Hi, thanks for the bug report but the steps provided are not correct.\nIf you remove turbolinks from the react-rails-example-app which is fresh rails + react-rails, it works as expected.\n\n. I'll re-open this if you can provide reproduction steps, thank you :). Yes.\n```\nreact-rails-example-app (sprockets *)$ git diff\ndiff --git a/Gemfile b/Gemfile\nindex a65d96a..173e7a1 100644\n--- a/Gemfile\n+++ b/Gemfile\n@@ -22,7 +22,7 @@ gem 'uglifier', '>= 1.3.0'\n # Use CoffeeScript for .coffee assets and views\n gem 'coffee-rails', '~> 4.2'\n # Turbolinks makes navigating your web application faster. Read more: https://github.com/turbolinks/turbolinks\n-gem 'turbolinks', '~> 5'\n+# gem 'turbolinks', '~> 5'\n # Build JSON APIs with ease. Read more: https://github.com/rails/jbuilder\n gem 'jbuilder', '~> 2.5'\n # Use Redis adapter to run Action Cable in production\ndiff --git a/app/assets/javascripts/application.js b/app/assets/javascripts/application.js\nindex 0746f2e..108e6f2 100644\n--- a/app/assets/javascripts/application.js\n+++ b/app/assets/javascripts/application.js\n@@ -11,7 +11,7 @@\n // about supported directives.\n //\n //= require rails-ujs\n-//= require turbolinks\n+\n //= require react\n //= require react_ujs\n //= require components\n``. Have you followed the instructions webpacker provides?\nhttps://github.com/rails/webpacker/blob/master/docs/css.md\nUsually the<%= stylesheet_pack_tag 'application' %>` gets missed.. Thank you for the update and the research into when it broke, nice detective work!\nLooks like Travis broke while building your PR but that doesn't matter as this one is just docs. Still kicked it off again by hand to get the green dot for historical use.\nWill merge once green \ud83d\udc4d . The simple solution is make sure your server_rendering.js isn't chunked. There is no need for doing it as chunking is only for the client's benefit, and it makes the code more complex.\nThe first possible solution is that there is some sort of name conflict with the chunk and file name, and the other one was look at other react with rails solutions, the next best one being https://github.com/renchap/webpacker-react incase that doesn't have the chunking issues.. Note for myself: This will be relevant when it comes to a fix:  https://github.com/renchap/webpacker-react/issues/3#issuecomment-368341147. @not-an-aardvark Thanks for reaching out on this one, styled-components seem interesting and I hadn't seen them before.\nI will probably mark the serverRender method as OK to be overwritten, It's not changed since it was written and is likely to only change if React updating forces us to. Additionally I'd accept a PR that added before/after serverRender hooks that would allow the above method as I can imagine others that may want to modify the text that gets rendered out.. @not-an-aardvark Would you mind if I modified your example to put in the wiki? It looks like a solution like this may help #860 . Thanks @codef0rmer , and using semantic commit message format too \ud83c\udf89 . Hi @ttanimichi \n:+1: thanks for the fix and for going through the time to update the tests!\nInteresting that the controller_renderer and the component_mount handle their args differently. I'll keep that in mind for an eventual refactor there.\nFor my notes:\nhttps://github.com/reactjs/react-rails/pull/409\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/component_mount.rb\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/controller_renderer.rb. This is likely behaviour of capybara-webpack's javascript handler.\nYou might want to try it with another javascript driver, we use Capybara.javascript_driver = :selenium on firefox and it's never had an issue.\n\nSomething that could be related, your JS throws an error due to trying to access process client-side. Sometimes errors can stop JS execution.. You need to import the components you are using at the top of the file:\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport BotCard from \"./botCard\"\n...\nNothing is revealed to the global namespace except ReactRailsUJS so you can't reference them directly.. Let me know if that doesn't help and I can re-open.. No problem, glad I could help! \ud83d\ude04 . Hi @iporollo \nThat's an interesting thing to check.\nThis gem just padded through a lot of responsibility for these things to Webpacker, so if it can be done in Webpacker it can probably be done here.\nHere's a guide provided by Webpacker on specifically this issue: https://github.com/rails/webpacker/blob/master/docs/typescript.md\nLet me know if that doesn't get you there completely and we can work out the rest, or provide me with a typescript component and I'll see if I can get it to run myself.\nIf you were looking to do it in sprockets, there would be significant new wiring involved, starting here:\nhttps://github.com/reactjs/react-rails/blob/master/lib/react/jsx/sprockets_strategy.rb#L43. Glad it worked! Could you add a little note, perhaps in the Readme for others wanting to use TS?. <3 Lovely. And thanks for using the tags and emojis!\nI'll probably link the original text in a later commit but thanks \ud83d\ude04 . @nacengineer Will do. I need to release a version soon for the bugfixes on master too.\nIn the future you could help me out by opening a PR after following this section of contribution guide to speed this up :)\nhttps://github.com/reactjs/react-rails/blob/master/CONTRIBUTING.md#updating-the-pre-bundled-react. Should be all done. If you would be so kind as to confirm the Gem (And NPM package) 2.4.4 does what you like then I'll close this one up \ud83d\ude38 \nYou're welcome! This latest release has probably a dozen people that have helped me out with docs and discovering things so it's always a team effort and building on the great work of @rmosolgo (casual tag ;) ) before me, there's no way I could do it all on my own.. Hi @vipulvkp , could you share some links explaining what createPureClass is? I can't find much about it on the wider internet.. @vipulvkp Thanks for clarifying that one, I should have been able to find it, my Google-fu wasn't strong on this one! \ud83d\ude06 \nI made an example of a pure component in use:\nhttps://github.com/BookOfGreg/react-rails-example-app/pull/7\nThis is using Webpacker and it appears to work out the box.\nIf you're using Sprockets, you're forced to use ES5 syntax currently because it's not able to use babel or ES6 in it's current form, that's provided by Webpack only for now.\nIf you want all the newest features I strongly recommend moving to Webpacker if you're able.. The opposite, you absolutely can create Pure Components in react-rails, just you must be using ES6 and Sprockets doesn't have that as far as I know.\nIt works if you're using react-rails with Webpacker.. Here is some code doing what you want: https://github.com/BookOfGreg/react-rails-example-app/pull/7/files#diff-d526de49e9cd5b02ad8234d87a291767R3\nIn the react-rails-example-app, PR#7 contains the code to use a PureComponent. If you need you can pull down that repository and look at how it all works. It's just a base Rails + Webpacker + react-rails and you can use PureComponents directly.. Been over a week, going to close it for now. Let me know if you need anything further.. Postgres has nothing to do with this gem, you have an issue installing your database but I'll give you a hand anyway.\nCheck your database.yml, it should have the adapter set to \"postgresql\", the 2nd file in this list is a postgres example: https://gist.github.com/jwo/4512764\nYou can validate it by generating rails with these flags: \nrails new myapp --database=postgresql --webpack=react. When I have time I'll try add a redux example branch to react-rails-example-apps.\nIf it works then I'll add it as doc, if not then I'll mark this as a bug. Might take me some time to get around to it however.. <3 @ttanimichi thank you for that example!\nYes I've noticed there are a fair few people who use react-rails as the entry point for transitioning from rails to react, so there are a lot of cases where it's absolutely nothing to do with react-rails and everything to do with Webpack or React themselves but I do still try to help when and where they can.\nThere is probably a real issue where react-rails doesn't define exactly how little it does for people so it's not possible for them to tell when it's an issue using the gem or an issue using something deeper. I've added examples and Wiki pages where possible to help out for those that do read them, not sure how much further to go as beyond a certain point they're better reading the source materials for tools mentioned.. Hi @Skill-Zozo ,\nCould you post an example of what you would like to see? I feel the rails/webpacker already serves as a pretty good introduction to these types of issue, but I'd be happy if there was a better way of directing people to that location.. This is not an issue with the react-rails gem. On the serverside if you look at the console you get the message:\nFailed to load resource: the server responded with a status of 404 (Not Found) for bundle.js\nThe javascript wasn't served to the client in production.\nI found the cause of it is that you've modified your webpack config to output it into the app folder instead of the public folder\noutput: {\n    path: path.resolve(__dirname, \"app\", \"assets\", \"javascripts\"),\n    publicPath: '/assets/',\n    filename: \"bundle.js\"\n  },\nIf you go back to the basic webpack conf and make a file in app/javascript/packs/bundle.js, you will be able to generate the file correctly and put it in the public folder. You should then use <%= javascript_pack_tag    'bundle' %> to load it on the page somewhere where it will be fingerprinted.\nhttps://github.com/rails/webpacker#usage\nThe reason you see anything in dev is because you webpack it into app/assets, it's picked up by development sprockets but you don't want that chain to happen.. > How do I pass the authenticity token properly in my request?\nI'm sorry but this has absolutely nothing to do with react-rails. If you would like help, try in stack overflow where this Q&A style is more appropriate.\nThank you.. Could you post the contents of your index.js?\nI suspect that, or one of its dependencies will reference process which usually is serverside only and will correctly crash client-side.. ```bash\n$ ruby -v\nruby 2.4.3p205 (2017-12-14 revision 61247) [x86_64-darwin16]\n$ rails -v\nRails 5.1.5\n$ rails new foo\n$ cd foo\nadd react-rails to gemfile locked at 2.4.4\n$ bundle install\n$ rails g react:install\nadd your HelloMessage.jsx\n$ rails g controller home index\nadd <%= react_component('HelloMessage', name: 'John') %> to home/index.html.erb\n$ rails s\nGot Uncaught TypeError: React.createClass is not a function\ndowngrade react-rails to 2.3.1\n$ bundle install\n$ rails s\nRenders just fine.\n```\n\nThe reason it didn't work on 2.4.4 is React v16 doesn't support createClass anymore.\nIn React-rails v2.4.4\nrails g react:component HelloNote name:string\nmakes\n```\nvar HelloNote = createReactClass({\n  propTypes: {\n    name: PropTypes.string\n  },\nrender: function() {\n    return (\n      \n        Name: {this.props.name}\n      \n    );\n  }\n});\n```\n\nI suspect you have an issue accidentally loading packages (perhaps in node_modules) that sprockets is trying to compile which reference process, which is not allowed.\nI can't help you further with the steps provided as I cannot replicate them.. @0x2C6 \nThe core of the issue is the previous people were trying to use process client-side. You should be compiling your JS before running it so you aren't trying to run babel in someone's browser.\nIf you're using webpack this is much easier for you to spot.. @ceancymavs Firstly if you have a new issue, please open an issue rather than commenting in a closed thread.\nSecondly we do support Ruby 2.3 and Rails 5.2 at the current time.\nWhat is your issue?. @richling that isn't very polite. If you have an issue please open a new one without cursing.. Thanks @RiccardoMargiotta , Yep that's the answer to this one. Let me know if it needs to be re-opened.. It's possible to import libraries in Sprockets by making it scan the node_modules folder, it's just MUCH easier with Webpacker.. If you're using the default asset pipeline then you need to be importing code the sprockets way.\nhttps://guides.rubyonrails.org/asset_pipeline.html#search-paths\n```\nFor example, these files:\napp/assets/javascripts/home.js\nlib/assets/javascripts/moovinator.js\nvendor/assets/javascripts/slider.js\nvendor/assets/somepackage/phonebox.js\nwould be referenced in a manifest like this:\n//= require home\n//= require moovinator\n//= require slider\n//= require phonebox\n```\nYou can only use Require and Import when using Webpack/Webpacker. Nice work and thanks @dtom90 \ud83d\udc4d \nWonder if in an application with multiple packs, the ReactRailsUJS should be code-split out into a global pack, and then component packs could be loaded independently on each page. That should stop any double ReactRailsUJS loads and allow component blobs at will.\nIf so then there's an easy PR for someone to add to the Readme, or to add to the Wiki.. I'll look into it, fair point that it shouldn't be needed server-side if it's already compiled. Some of these things are specific to sprockets support so it may be related.\nThe readme should say that TheRubyRacer should NOT be used, react does not work on libV8 less than ~v5 and TheRubyRacer is stuck on libV8 ~v3. If you need one, miniracer is the current best.. Nice find @chulkilee . Do you there's a chance for PR to require on first use? Or perhaps with Rails autoloading, we could remove the requires altogether:\nhttps://guides.rubyonrails.org/autoloading_and_reloading_constants.html#autoloading-and-require\nIf someone would be willing to take it on, that would be awesome :). Hi @karan101292 ,\nThe recommended solution is window.location.replace, due to back button issues.\nSee : https://stackoverflow.com/questions/503093/how-do-i-redirect-to-another-webpage/506004#506004\nThere are many other ways such as if you're using react-router, or make a request to an endpoint that redirects or anything like that.\nClosing the issue as it's unrelated to this gem but hope that helps!. If you're using react-rails with Webpacker, react-dom will already be installed. \nHave you tried shimming react-dom to global namespace so mobx can get a hold of it?\nhttps://webpack.js.org/guides/shimming/\nThis is unlikely to be a react-rails gem issue, but does follow the general trend of being hard to debug when things go wrong in JS land. See this Redux issue as a  possible related thread.\nhttps://github.com/reactjs/react-rails/issues/878. I apologise but I'm unlikely to be able to help you with this then. We only support Sprockets and Webpacker, and Webpacker is preferred.\nStill, it's all JS so hopefully the same concepts apply: https://github.com/thlorenz/browserify-shim Might this help to make react-dom available?. Glad to hear it worked OK. Well done and thanks for linking the solution \ud83d\udc4d . Good idea @matt-potter , thanks for the contribution!\nIt looks good. I'll take a look into why the tests are failing, seems to be capybara suddenly upset in a totally different section of code.\nCould you look into adding(or modifying) one test around this area for the new functionality please?\nhttps://github.com/reactjs/react-rails/blob/master/test/generators/component_generator_test.rb#L5. Lovely, that looks good. I'll fixup whatever is going on with CI and get it shipped. Hopefully within the week if I get time at work.. Looks like it was a combo of chromedriver + general ruby updates making master broken but that's close to fixed now.\nThanks again for contributing, hope you stop by to help again \ud83d\ude01 . Can't replicate with the steps provided, can you please give more detail?\nWhat's your nginx config?\nDid your precompile complete successfully?\nCan you provide a longer stack trace? Is it during pre-render?. @suhailnaw Thank you, it's certainly possible to simply peg the version of all the gems down for that appraisal to solve it, but I'd like to know which specific gem had a backward-incompatible change. (So we can go blame them \ud83d\ude09  )\nGood luck and most importantly have fun.. I suspected the gems because it's not easy to get a gemfile lock when using appraisal\nAdditionally I was able to run the tests on my local machine but when I removed my appraisal lockfiles it failed in the same way.\nPerhaps there is a dependency in the appraisals that should be locked lower but isn't. I already tried webpacker as they tend to break stuff and move quickly but wasn't them as far as I can tell this time.. Well done getting to the bottom of this one, it's been bothering me for ages. Do you think Webpack was also mangling the names of internal classes given the removal of assert_includes js_file, 'ReactRailsUJS'?\nI wonder if I declare it as a global then I could re-instate that test.\nOtherwise nice work \ud83d\udc4d . @ttanimichi You have been helping around here a lot lately. Would you consider helping as a maintainer?\nSame vein as #785. @zpao Can you please grant ttanimichi member to the reactjs rails team?. In order to try help diagnosis, I just asked travis to re-run previously passing build 1417.4\nhttps://travis-ci.org/reactjs/react-rails/builds/338407498\nThe re-run of a previously passing build failed, so the reason has to be something that is not locked changing whether that's chrome or gem locks, or something as-yet unpredicted.. Good catch, thank you for the fix!. Yep @ttanimichi beat me to it!\nTo expand, you specified the components directory in this line:\nvar componentRequireContext = require.context(\"components\", true). The option config.react.variant = :production won't do anything for you because you're using webpacker and that's for sprockets.\nNothing bad will happen it's just a no-op.\nOk so you've got React in your package.json and it precompiles successfully. Can you navigate to where your JS files should be served on your production server? Is your HTML referencing that file? What happens when you ReactRailsUJS.handleMount() directly?\nWe will need more information to help you diagnose this, please try answer all the questions above if you can.. You probably haven't configured your server to serve the public files in production. The giveaway for this is the 404 status from Nginx.\nYour Nginx config should root, alias, or try_files the public directory.\nIf you're following a guide such as this one from DigitalOcean then you should be simply missing these parts fron the nginx.conf\n```\nserver {\n...\n    root /home/deploy/appname/public;\ntry_files $uri/index.html $uri @app;\n\n...\n\n```\nEdit: The reason why it works in dev is Rails serves it's own public folder in dev.. Glad you have it fixed and it was just an asset serving issue. Enjoy using React-rails!. Was last tested in #868 where I fixed a double mount.\nDo you have a reproduction?\nEdit: I understand what you mean now, yes when I tested that Turbolinks was loaded via sprockets.\nIf you're willing to offer a PR we'd gladly review it.. In general this gem should avoid making changes or having specific integrations with other gems/packages.\nTurbolinks does fall into the exceptions for this along with JQuery because they are/were Rails defaults and so common.\nHow are you supposed to deal with overloading .ready() in Turbolinks5? For sprockets we have the Turbolinks detector but that doesn't work in Webpack world, though surely Turbolinks doesn't break everyone else listening for .ready()\nI'd rather not make Turbolinks global to make the detector keep working, if possible lets document what the fix is and then look into something to replace the detector in both Sprockets and Webpack worlds.. Thank for for adding that to our docs, this will hopefully help others using Turbolinks in Webpacker. We will monitor to see if any other issues are opened in relation to this to guide us on if an automated solution is needed.. To clarify a small point, I'd consider use with Webpacker to be the vanilla experience. Sprockets is not nearly as easy to use as soon as you want to include node_modules which is what you're wanting to do.\nI've not done it myself personally but there are a variety of blog posts on the topic of using node_modules in sprockets, here's the top result:\nhttps://ricostacruz.com/til/npm-in-rails\nIt should be as easy as following that guide and requiring the JS in your pack to make it available. You may have trouble as soon as you include a package that tries to access window, so those need to be wrapped in the correct phase of the react lifecycle, think it's component_did_mount these days.\nHope that helps. If it works for you please can you acknowledge, this question comes up quite frequently but it's more a sprockets thing than a react-rails thing and your response might help future users.. Actually if you do happen to make it work, I'd gladly accept a PR adding some detail into the Readme, this does come up all the time.. I have a utils.js that I require in each JS file that I need it.\nMust say I'm slightly out of date with the latest trends so idiomatic react might have a different way of doing it. Generally I'm a big fan of the simplest thing that works.. No, just standard ES6 import * from file or js require file in your JS to make it available.\nReact-rails is just a thin layer ontop of sprockets or webpack so all the normal JS rules apply to importing and running your code.. If there's an error there then you should spend time figuring out the cause, being able to use them will make your JS much easier to work with in the future.\nIf you're using sprockets, consider migrating to webpacker, it's generally better for compiling JS in.. Going to close for now as I believe this has been answered.. It's been discussed in the past, currently there's no way to pass in things from the rails context to the components other than as props, if you rendered out two components and wanted to nest then, you'd need to dangerouslysetinnerhtml on it.\nSomeone started working on adding the ability to pass in blocks of HTML as children to the component but they seem to have dropped the effort.\nGoing to close for now as it's not a feature we're likely going to support. I'd recommend composing components within React rather than within Rails.. gsap is probably trying to access something like Window or some invalid thing. It's likely that gsap also wouldn't work in node.js code. Could you start up a node app and add gsap to it to see if it crashes?. https://github.com/reactjs/react-rails/issues/264\nSadly there's extremely little that can be done on our side as it's up to ExecJS to surface the error messages that it handles.. Thanks for leaving the solution for anyone with similar issues. \ud83d\udc4d . @joshchernoff you would be amazed at the amount of issues opened here that are entirely react/JS related and nothing to do with this gem \ud83d\ude01 \nThanks for closing and linking!. Looks like that was the only instance of it according to GH search\nThanks for contributing :). If you're using Sprockets, you can enhance the assets:precompile rake task to assets:clobber files in that directory first.\nIf you're using Webpacker, you can periodically rake assets:clobber as advised here https://github.com/rails/webpacker/issues/1072 and other places.\nIn general it's handy for precompiled assets to build up on your CDN a small amount in case people have stale pages or links from emails etc.. Sadly not.\nReact and Rails can only talk through the props interface. There was an Issue open for someone to work on passing Rails html through as children but that also seems infeasable to me. Basically everything is passed to the ExecJS Runtime and it runs in isolation and returns the server-side rendered react as a string.\nThis must run in isolation because if you think of the client-side story, there is no Rails server for the client to access!. @ttanimichi There it is \ud83e\udd47 Your first version of react-rails out in the wild.\nhttps://rubygems.org/gems/react-rails/versions/2.4.7\nAnd hopefully many more in the future.. Looks good at a skim, will double-check in a couple hours against the list in contributing.md. \ud83d\udc4d Nice work and well done, thanks for jumping on this so quickly!. I'm not sure we can remove those deprecation warnings as long as we support those Rails versions as the dummies are already crushed up to support multiple gemfiles.\nI suppose when Rails 6 comes out we may need to remove another older rails, or split the tests further.\nI was wondering as a longer-term measure, is there a better way than having multiple dummy-apps for different rails versions? I might go look at other gems to see how they do it. I remember checking in the past and most other gems just don't bother or unit test against the interface.. @zucler Webpacker hasn't properly released it's v4 in line with Webpack's v4 so I wasn't in a rush to get this out. I'll update the version of Webpacker to 4.0.0.rc.2 and see if it runs anyway. Our test suite is a little sensitive so will have to see if it can update cleanly or not.\nhttps://github.com/reactjs/react-rails/pull/934. In addition to your suggestion in the final paragraph, we could be making use of a content_for or similar helper to put it into the header of the layout.\nThe issue there would be that the gem needs to install itself into the header of the relevant layout, and then it needs to know when it's outputting styles or not.\nAre you willing to put forward some of your time to provide a proof of concept for this? I haven't used styled-components myself so I'm at a natural disadvantage in getting it working at all.. This is a common error, normally caused by someone trying to include npm packages which only run client-side.\nJust tested on a blank rails app with webpack-dev-server running and rendering server-side.\n\nIt's possible you have included some JS that is badly behaved and tried to access Window when rendering server-side. That package wouldn't run on a normal NodeJS server so it won't run in SSR anyway.\nWhat I checked:\n```bash\nrails new foo --webpack=react\ncd foo\nAdd react-rails to gemfile\nbundle install\nrails g scaffold bar\nrails g react:install\nrails g react:component bar\nadd <%= react_component 'Bar', {}, prerender: true %> to index.html.erb\nadd <%= javascript_pack_tag 'application' %> to application.html.erb\nrun bin/webpack-dev-server in one tab\nrun rails s in another tab\nopen http://localhost:3000/bars\n```\nCan you provide a more complete reproduction? The gem works when following the start of the Readme in the standard case, so there is information that I'm missing in order to help you.. Thank you a bunch for the reproduction, that clears it up.\nI'll make a guess that HMR is causing SSR to fail, which would make sense as there is no reloading in a serverside world.\nWe don't currently have the ability to support HMR so I'm unable to help you at this time. It is a desirable feature though.. For now I recommend not using HMR when using SSR in this gem. It's part of the longer-term plan that I would like it to work successfully but I haven't had the time to be able to enable it yet.\nIt's possible to get them to work together as I'm keeping my eye on the renchap/webpacker-react project as they are working at merging the HMR with SSR in this PR. \nIt's definitely our project to sort as the upstream webpacker gem does let you use HMR, we just need to be clever about not running the module.hot code serverside.. Thanks for the contribution \ud83d\udc4d. I joined the project after v2.0 so, to be able to answer you I'd have to dig around a bit.\nIn general this lib depends on versions of Sprockets or Webpacker rather than Rails itself. I assume since it's an old project your pipeline will likely be Sprockets, what version is it?\nYou might get away with an upgrade of this gem up. Not a massive amount changed other than bugfixes for the last few months and features around Hydrate etc.. After looking at the v1.6 appraisals, it's using whatever Sprockets version exists in 4.2\nIf you can upgrade Rails from 4.x to 5.x without changing Sprockets versions it should still continue to work.\nIf not please let me know and I'll see if I can assist further.\nIn general I do recommend upgrading react-rails as there have been a couple bugfixes between 1.6 and 1.11, and again in 2.x. It sounds quite cool, I'd be interested in seeing a proof of concept.\nIs this something you feel that you could contribute?\nNot sure what the advantage would be over HMR and live-reloading the page in development once we get HMR working but always interested in seeing new ideas.. If you're still having issues, you are probably going to be better served by asking on Stackoverflow.\nIt is likely your issue is about generic server-side rendering SSR in JS, and people may have solutions in other SSR solutions such as Hapi or Meteor or Ember or whatever that you could apply here.. @jcarlson I would still welcome a PR, if it works on some versions of Rails then it's more progress than most make.\nOn earlier versions we tend to follow the if defined?(NewThingy) pattern.\nI agree, this would be a convenient feature.. I'm sorry but I'm not quite sure what you're asking. Could you try rephrase it to help me understand? Perhaps a scenario would help.. Context is not passed between ruby and js environments through anything other than props. If there's anything you want in React land then it must be passed in initially. If there's anything you need client-side at run time, you need to fetch it via ajax and therefore have an endpoint that will serve up what you are after.. @ttanimichi Appears to be some failing test unrelated to this appraisal change. Must say in general I'm finding Travis a little flakey at times but this one does seem like a real failure on Webpacker 3.. If you're using Webpack, your components are unlikely to be exposed to window. Since you're using ReactDOM directly instead of using normal react then it won't be available there.\nWhy are you trying to use React this way rather than standard?. Why does the size of the server rendering bundle matter? It's never sent to the client.. Issue has gone stale, closed. Please re-open if anyone has any thoughts on shrinking the bundle sent to the client or any webpack improvements that could be made to the project!. Thanks for the contribution, yep agree on matching Rails on this one. :+1:. No worries, edited your message to use triple ticks. Hope it works well for you :). This sort of error tends to happen on Windows, WSL or with Spring misbehaving. If it happens again try spring stop incase it's that. On Linux and OSX Machines I turn off spring as they don't need the speed boost that Windows does.. Thank you Ben \ud83d\udc4d . That stack trace points the issue to mini_racer that's beyond my skill to debug. Interesting issue but absolutely nothing to do with this gem.. If you have React available from the asset pipeline, it will be available in the global namespace. Therefore you should be able to use Webpack's Externals feature to make the React-UJS load it from global namespace instead of within the webpack.\nhttps://webpack.js.org/configuration/externals/\nThere are quite a few ways to skin this, another way would be have a pack that includes only common libraries such as React and make that one available to your asset-pipeline code, again via global namespace by exporting it, one possible way is using Webpack's define plugin:\nhttps://webpack.js.org/plugins/define-plugin/\nEither way you want to be using Webpack's built in features to split out the Webpack'ed React-UJS code from the asset-pipelines. I will say it's not known if you can have two instances of React-UJS together, I think there may even be a bug filed by soneone trying to use React-UJS from two packs on the same page, didn't go well.\nWithout specifics I will be unable to really help too much but general practice is that Webpack gives plenty of tools to code split, and then use Globals to load or export the components which you can compose as needed.\nGood luck!!\nEdit, if you do end up with any tricky bugs in the JS, I do recommend skimming through the contents of React-UJS, it's actually a rather simple module, most of the code just does Turbolinks/JQuery detection and then scans the page for any uninitialized React components to hydrate, if stuck there I almost recommend rolling your own initializer as it's pretty simple.. Closing as I'm not sure I have anything to add. Hope it went well!. What issues is it causing for you? I can't exactly fix a bug I can't know of.\nEdit: We're relying on the babel-transpiler gem which appears abandoned. Going to have to pester the Babel organisation to get on top of that.. Are you server-side rendering your components? (I think you are not, given you mention console, but good to check)\nIf yes, does it still error if you client-side render your components?\nI see you're using Webpacker, does the webpack compile successfully?\nIf this is a react_ujs issue (looks likely given the console log), are you able to initialise your client-side code manually via console?\nSorry for the barrage of questions but since this is an integration gem, there are a lot of moving parts it could possibly be.. Is the App component inside your compiled webpack?\nYou should be able to do a find inside the output js file. React_ujs can only find components in a file imported into the application.js pack in general.. Glad you found your solution!\nI've actually never used apollo with this gem, in general this gem is just a pass-through for react, webpack, rails, sprockets so as long as the JS is ok it usually Just Works(tm).\nGood luck and hope you enjoy using this :). It's a good upgrade over the existing params check.\nWas thinking if there were any negative side effects of calling as_json on everything but can't think of one, all major Ruby and Rails enumerable objects likely to be passed in do declare that method as far as I know.\nThe doc for that methods needs to be updated to reflect this change and I need to think if this classes as a breaking change or if I can put it in a feature level patch.\nGood contribution, glad that GitHub added the bookmark notifications tab as to be honest this one got forgotten about a little (sorry!)\nEdit:\nActiveSupport will be defined but we can't guarantee the version, was deep_transform_keys added after RoR v3.2?. Marked the inline doc as a comment.\nAdditions to the readme and/or wiki are always very welcome as they do talk about camelization in general which would be changing.\nI was wondering if there was some sort of option we could put this behind to make it opt-in, thereby letting us release as a feature without breaking people's existing React apps. However since there's already code there to specifically change Params, any toggle ignoring params would be a very odd toggle indeed.\nLikely at this point to make it hold off for a major version bump. Need to update pre-bundled react anyway \ud83d\udc4d . Marked invalid as your provided reproduction does not cause the effect you say for me.\nCould you please provide code that exhibits the issue you are seeing?\nDoes it render client-side?\nEdit: I think I might have seen a similar issue in the past, these style issues are often a missing require in the JS. Are you able to webpack and run your JS directly?. I followed your instructions but I still do not have your issue, here is my bash history:\n509  rails new foo --webpack=react\n  510  cd foo\n  511  bundle add react-rails\n  512  rails g react_install\n  513  rails g react:install\n  514  rails g controller -h\n  515  rails g controller bar index\n  516  rails g react:component Entry\n  517  code . # added render component: :Entry and <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>\n  518  rails s\nStill cannot reproduce your issue.. OH! You're using your system NodeJS\nDo bundle add mini_racer and it will start working for you.\nExecjs automatically loads system JS runtime, which is Chakra on Windows, JSCore on OSX, and usually NodeJS if available. We only support Node > 6 (I think, It's whichever one added ES6 and the new JSX features), therefore we do not support therubyracer as it's using libv8-v3 which is far too old.\nUpgrade your node to > 6, or include mini_racer.. If you are seeing the 'Set undefined' issue on a modern runtime that would be most surprising to me.\nWhat do you see when checking the execjs runtime?\n```\n[2] pry(main)> ExecJS.runtime\n=> #\"UTF-8\", :internal_encoding=>#},\n @runner_path=\n  \"/Users/my_user/.rbenv/versions/2.5.1/lib/ruby/gems/2.5.0/gems/execjs-2.7.0/lib/execjs/support/node_runner.js\">\n[3] pry(main)> ExecJS.runtime.eval 'process.versions'\n=> {\"http_parser\"=>\"2.8.0\",\n \"node\"=>\"8.12.0\",\n \"v8\"=>\"6.2.414.66\",\n \"uv\"=>\"1.19.2\",\n \"zlib\"=>\"1.2.11\",\n \"ares\"=>\"1.10.1-DEV\",\n \"modules\"=>\"57\",\n \"nghttp2\"=>\"1.32.0\",\n \"napi\"=>\"3\",\n \"openssl\"=>\"1.0.2p\",\n \"icu\"=>\"60.1\",\n \"unicode\"=>\"10.0\",\n \"cldr\"=>\"32.0\",\n \"tz\"=>\"2017c\"}\n```. Wow, Duktape. That's a rare runtime, unfortunately it only supports ES5 by the look of it's readme so it's not going to be one we support.\nStill if you can't use miniracer due to it not working on Windows that's a problem, that means that Node would be the only Windows compatible JS runtime and miniracer is about 10x faster than NodeJS.\nOut of curiosity why do you program on Windows?\nNow that you've got to the next issue, it looks like it's still a JS related issue:\nhttps://stackoverflow.com/questions/34130539/uncaught-error-invariant-violation-element-type-is-invalid-expected-a-string\nThis doesn't match your perfectly but is close, and there are lots of results on google for similar issues, mostly Webpack related.. @rahulakurati Glad that solved it for you.. Can I Use seems to agree that it's OK.\nhttps://caniuse.com/#search=json.parse\nWould you like to submit a PR for this to engine.io-client and then update that dependency in this gem?. @dlipeles react-rails does not depend on socket.io-client\nWhere and how are you running the npm audit?\nThe JS half of this project is called react_ujs, was the problem there?. @dlipeles Yep, the react-on-rails project has been trying to steal this namespace for years.\nNo worries, sincerely thank you for trying to make the internet safer though \ud83d\udc4d . https://github.com/reactjs/react-rails#server-side-rendering\nAdd {prerender: true} to the react component in a view.\nMake sure you have a good JS runtime server-side such as miniracer or nodejs. The prerender true is the 3rd argument, if you are not passing props into your react component you can replace 2nd arg with {}.\napplication.html.erb\n```\n\n    <%= react_component('HelloWorld', {}, {prerender: true}) %>\n\n```\nDoes it render without SSR? Get it to render client-side then upgrade to SSR.. File a bug on Mongoid, it's their issue if their gem does not load.\nThe config/initializers/constants will be loaded after the entirety of the Gemfile. See: https://guides.rubyonrails.org/initialization.html\nThanks \ud83d\udc4d \nEdit: you might also seek your answer on stack overflow.. Thanks for the contribution. Always useful to help the docs and make it easier to use :). This is good work. I will need to look into why the tests are failing before merge, based on the current Travis-ci run 1505 and 1506 but then OK to merge.\nEdit:\nLooks like the first set of failures in 1505 is maybe scope related, the ones in 1506 maybe a problem with the autoloader in different rails versions. I may be able to look into this later as I recognise that the test suite for this gem can be quite complex at times.. If it's good enough for Rails, it's good enough for me :) I'll accept that suggestion.. I'll clean up whatever is wrong with the test suite. Thank you for the contribution. I'll try get a release out in the coming weeks.. Looks like an interesting project. Feel free to add the project to our readme in the related section https://github.com/reactjs/react-rails#related-projects\nAnd if you like add yourself to the react-tools section of ruby-toolbox:\nhttps://www.ruby-toolbox.com/categories/react_tools\nhttps://github.com/rubytoolbox/catalog/blob/master/catalog/JavaScript/react_tools.yml. Closing for now. Thanks.. https://github.com/reactjs/react-rails/blob/master/react_ujs/src/events/turbolinks.js\nIt's probably not handling all the turbolinks state changes.\nCan you identify the turbolinks events associated with the change or provide a small sample app for me to test?\nSometimes other libs such as turbolinks add new features and we don't know about them until someone like yourself lets us know so we can be a little slow off the mark in integrating them.\nIt is possible for you to trigger a remount or to tag the HTML generated within react with relevant turbolinks tags manually though of course it's better for this gem to automatically do that if possible.. Good catch! Will review this one and get Travis passing. Thanks.. @richarddewit I've not used Typescript before, but it's clearly popular and pretty widely supported by major players already so we would welcome a PR if you're able to do so.\nhttps://github.com/reactjs/react-rails/tree/master/lib/generators/templates\nThe templates for the generators are in this folder, so anyone implementing would only need to provide a template and then add it to the component generator here:\nhttps://github.com/reactjs/react-rails/blob/master/lib/generators/react/component_generator.rb#L92\nThank you!. That sounds good. If you could put something together that would be compatible with github pages that would be a good boost to this project. I would thank you very much for the effort in putting this together.. sh\nreact-rails-example-app (master)$ rails webpacker:compile\nWebpacker is installed \ud83c\udf89 \ud83c\udf70\nUsing /Users/me/source/react-rails-example-app/config/webpacker.yml file for setting up webpack paths\nCompiling\u2026\nCompiled all packs in /Users/me/source/react-rails-example-app/public/packs\nreact-rails-example-app (master)$\nI was able to webpacker:compile on the react-rails-example-app running webpacker 3.0.2 :\nhttps://github.com/BookOfGreg/react-rails-example-app\nAre you able to clone this repo down and run that command yourself to rule out problems in your env?\nWhen you run rails -T do you see all the normal webpacker tools?\nrails webpacker                          # Lists all available tasks in webpacker\nrails webpacker:check_binstubs           # Verifies that bin/webpack & bin/webpack-dev-server ar...\nrails webpacker:check_node               # Verifies if Node.js is installed\nrails webpacker:check_yarn               # Verifies if Yarn is installed\nrails webpacker:clobber                  # Remove the webpack compiled output directory\nrails webpacker:compile                  # Compile javascript packs using webpack for production...\nrails webpacker:install                  # Install webpacker in this application\nrails webpacker:install:angular          # Install everything needed for Angular\nrails webpacker:install:elm              # Install everything needed for Elm\nrails webpacker:install:react            # Install everything needed for React\nrails webpacker:install:vue              # Install everything needed for Vue\nrails webpacker:verify_install           # Verifies if webpacker is installed\nrails webpacker:yarn_install[arg1,arg2]  # Support for older Rails versions. That looks like an error with browserlist package that its outside of my knowledge I'm afraid.\nMaybe related to these?\nhttps://github.com/browserslist/browserslist/issues/266\nDid you successfully manage to compile the react-rails-example-app?. If you deploy via Git and you want to pre-compile your assets, then you will have to include the public packs you want to deploy with.\nThe process I follow is to build on CI, and then tar the public folder and deploy the tar to the server rather than from Git directly.. That sounds good, if it works for you would you please close the issue. Thank you.. Yep. Looks related to the linked PR.. Aaw whoops. Wondered why my test didn't pass XD Thanks. I've still got issues around Webpacker::Manifest.load, seems to be how I detect respond_to? may be wrong for that one.\n. I was tempted to scrap all the old style generators but was not sure on the effect it would have with sprockets + babel transpiler. I did what looked safe given I still don't fully know the system and saw the option[:es6] used nearby in the same file.\nWill continue on this path a little this afternoon, seems like the most pressing issue for now, then maybe the HMR ( 793 ) thing after once I get time.. Would these work as import rather than requires if it's webpack?. Similar to above, could these be export default rather than module.exports?. This comment will be lost as the erb text is a hint to the formatter. Could you add the extra text as a note below the numbered list above?. You can actually wrap the test in a defined check like this:\nif defined?(ActionController::Parameters)\n  def test_method\n  end\nend\nWhich should make it work on Rails <4\nEdit: Though technically speaking we don't support Rails3. This file probably wants to be reset, turbolinks isn't a dependency of this project.. I see your commit eeef8a3 mentions tests failing without turbolinks but the build before yours ran green. What are you referring to?. Yes please. The tests that matter for this project are the ones on Travis. Rake should work locally when using Appraise but it's easy to pollute the environment on this project accidentally.. We should avoid calling out to shell where possible.\nExecJS is already a dependency of ours and can abstract this cross-os for us.\nSee comment on checking JS runtime;\nhttps://github.com/reactjs/react-rails/issues/947#issuecomment-431569700\nAlso see code on ExecJS Runtime abstraction:\nhttps://github.com/rails/execjs/blob/master/lib/execjs/runtimes.rb\nIn all honesty I'm tempted to see if they'd accept a PR that would give each runtime either versions or capabilities, which we could make use of.. Inline docs here.. How's it going?. Since props are only used in the block, the trailing if could save some computation by doing the following:\n```\nif block_given?\n  props = JSON.parse(dom.attr(\"data-react-props\"))\n  props.deep_transform_keys! { |key| key.to_s.underscore }\n  props.deep_symbolize_keys!\nyield(props)\nend\n``. Would it be useful and/or possible to also allow assertion if it is prerendered or not?. I think there's a better way of including modules in rails without using thesend` keyword, though I've not used it much myself; Devise does it in this way:\nhttps://github.com/plataformatec/devise/blob/master/lib/devise/rails.rb#L21\nand\nhttps://github.com/plataformatec/devise/blob/master/lib/devise.rb#L12. ",
    "panasyuk": "@vipulnsward Please checkout last CI run. I implemented this with tests but for some versions tests are failing due to issue i wrote about.\n. I would like present a GEM for this PR:\nhttps://github.com/panasyuk/react-rails-view_helper_implementation\n. @stereodenis Please take a look at this. I'm now trying to make it more convenient to use.\nhttps://github.com/panasyuk/react-rails-view_helper_implementation\n. @stereodenis I hope this will help:\nhttps://github.com/panasyuk/react-rails-view_helper_implementation\n. Done\n. Which one element of application stack will lose ability to cache this?\n. ",
    "janroesner": "Update: I found a workaround to make prerendering, JEST based testing and CommonJS require work, but I do not know, whether this causes problems, that I do not see at the moment. My current solution:\napp/assets/javascripts/application.js\njavascript\n//= require jquery\n//= require jquery_ujs\n//= require react_ujs\n//= require components\napp/assets/javascripts/components.js\njavascript\nReact = require('react');\n// Explicitely ONLY require components that are used inside Rails helpers\n// NOT SubComponents\nDemoComponent = require('./components/DemoComponent');\nIn the app/assets/javascripts/components folder only components are placed, that are inserted into the page via the react_component helper. In here, CommonJS require statements work properly:\napp/assets/javascripts/components/DemoComponent.js.jsx\n``` javascript\nvar React = require('react');\nvar uniq = require('uniq');\nvar SubComponent = require('../subcomponents/SubComponent');\nvar DemoComponent = React.createClass({\nrender: function() {\n    console.log(\"Uniq: \", uniq([1,2,2,3,3,3]));\n    return(\n      \n         ...\n        \n\n    );\n  }\n});\nmodule.exports = DemoComponent\n```\nAnd subcomponents defined in app/assets/javascripts/subcomponents like:\napp/assets/javascript/subcomponents/SubComponent.js.jsx\n``` javascript\nvar React = require('react');\nvar SubComponent = React.createClass({\nrender: function() {\n    return(\n      \n        Hello from SubComponent\n      \n    );\n  }\n});\nmodule.exports = SubComponent\n```\nJEST specs are defined for top level components and subcomponents in app/assets/javascripts/components/__tests__ and explicitely require the (sub)component like so:\n``` javascript\njest.dontMock('../../subcomponents/SubComponent');\ndescribe('SubComponent', function() {\n  it('should tell us it is a sub component', function() {\n    var React = require('react/addons');\n    var TestUtils = React.addons.TestUtils;\n    var SubComponent = require('../../subcomponents/SubComponent');\n    var subComponent = TestUtils.renderIntoDocument();\n        expect(subComponent.getDOMNode().textContent).toBe('Hello from SubComponent');\n  });\n});\n```\nWith a package.json like:\njson\n{\n  \"name\": \"rexa-webapp\",\n  \"devDependencies\" : {\n    \"browserify\": \"~8.1.0\",\n    \"browserify-incremental\": \"^1.5.0\",\n    \"reactify\": \"^1.1.0\",\n    \"uniq\": \"^1.0.1\",\n    \"react\": \"^0.12.0\",\n    \"react-tools\": \"^0.12.1\",\n    \"jest-cli\": \"^0.2.0\"\n  },\n  \"scripts\": {\n    \"test\": \"node ./node_modules/jest-cli/bin/jest.js\"\n  },\n  \"jest\": {\n    \"rootDir\": \"./app/assets/javascripts/components\",\n    \"scriptPreprocessor\": \"<rootDir>/__tests__/preprocessor.js\",\n    \"moduleFileExtensions\": [ \"js\", \"jsx\"],\n    \"unmockedModulePathPatterns\": [\n      \"react\"\n    ],\n    \"testFileExtensions\": [\"js\", \"jsx\"],\n    \"testPathIgnorePatterns\": [ \"preprocessor.js\" ]\n  },\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">= 0.10\"\n  }\n}\nall seems to work fine. Inside the browser components work properly w/ or w/o prerendering. JEST can be used to test all components, and require pulls in npm-based and local modules as expected.\nBesides the fact that this is a little more manually work to be done, are there any downsides in this approach, that I do not see yet?\n. @orlando: Unfortunately my approach did not work completely. require npm modules from within subcomponents failed and I was not able to find a solution for that. Anyway, your PR fixes the problem, so that the setup described by James Burnett here works just fine. Thx for the hint and your PR.\n. ",
    "orlando": "@janroesner I'm using the same approach to have JEST with react-rails working together. The problem you had before should be solved with #210. Also you should not put react_ujs in your components.js file. ExecJS doesn't have a document object, so that will raise an error. (probably you figure that out already but I'll just leave this comment here if anyone else has this problem)\n. @vipulnsward It's ok, two or more semi-colons in the same statement is not an error.\nFor example\njs\nvar a = 2;;;;;\n;;;;;(function () {\n  console.log(a);\n}());\nAlso, react_ujs doesn't depend on react at compiler time, only at runtime (when calling mountComponents and unmountComponents), so you can declare it before or after react\n. @rmosolgo Yeah, this PR should fix #209, but I think he found the solution already\n. ",
    "jongbeau": "I'm using ES6 and commonJS so I use browserify to do the compiling. Renaming to script.js.jsx.erb was the first thing that I tried and it did not work. Currently, i'm working around this by using a CSS style that sets the content-url. asset_path works fine in the CSS with sprockets.\nI have been looking into webpack recently due to the react hot reload feature. How are things working out as a full replacement of sprockets?\n. ",
    "andyyou": "Thanks @ericdfields , I also think if you are using react-rails that its a easiest way to solve this problem. \n. In fact, it's just a bit trick and not prefect solution, I thought. You can append extension .erb to js(jsx) file and then you can use the ability of erb, but not all of helpers you can use. \n. ",
    "hongkim91": "@bogdan-dumitru Did you end up writing that blog post? I'd be interested in learning about your experience.\n. @rmosolgo Thanks for looking into this. So this problem disappeared for me during development, and after your comment I dug into what had changed, and it seems the problem appeared due to my use of Math.random() to create a dynamic number of dummy comments below the section I was talking about. Obviously using random() is problematic if you want server-client to match, but it's odd that html escaping behavior of different mockup if altered. \nThis component source reproduces the issue for me.\njavascript\nvar Test = React.createClass({\n  render: function() {\n    var i = 0;\n    var arr = [];\n    for (i=0; i<Math.random()*10; i++) {\n      arr.push(<div>test</div>);\n    }\n    return (\n      <div>\n        <div>{\"I'm an &\"}</div>\n        {arr}\n      </div>\n    );\n  }\n});\nBrowser console:\n\nI'm using:\n- React: 0.13.3\n- react-rails: 1.0.0\n. No I don't get an error for a fixed amount of divs. I'm fine with closing this issue, since it does work (as you mentioned) & you shouldn't be rendering different markup on server and client anyways. It was frustrating for me at the moment though. Thanks for the replies!\n. ",
    "j0214ack": "Why not \njs\nrender: function() {\n  return (\n    <img src={this.props.img_src} />\n  )\n}\nand then in your erb\nruby\nrender_component('Component', img_src: image_url('the_path'))\nthis way also makes the component more reusable I suppose\n. ",
    "bcardiff": "@mikesea suggestion works, but since I am using es6 the file needed to be named *.es6.jsx.erb. And the enclosing {...} were not needed.\nclass MyImage extends React.Component {\n  render () {\n    return (\n      <img src=\"<%= asset_url('path/to/image.png') %>\" />\n    );\n  }\n}\n. @pioz not sure, but probably you reach something erb vs rails-erb around http://www.timelessrepo.com/block-helpers-in-rails3 . You may try to use a block with { ... } in the link_to instead of breaking it in multiple <% %>.\nBut that is just the tip of the iceberg. Rails helpers output html and not jsx-html. So class/className. for/htmlFor, etc attributes need to be translated. And you won't be able to use interpolation with jsx expression attr={...}, since they will be quoted attr=\"{...}\". Knowing that, if those restriction are fine, go for it :-)\n. @TxsAdamWest the problem is that the paths probably don't work from the url you are loading the scripts and that is why you get 404. This whole thread is about rendering absolute paths in the views that in production will have the fingerprint. You are using relative paths, that although it might seems right from the actual file location, when rendering from / or /:controller/:action they will fail at least in one.\n. ",
    "arkhamRejek": "you guys are awesome ! I was ripping my hair trying to figure this out \n. ",
    "chalmagean": "Another thing you might prefer is to pass down the asset paths as props, or just use a global object that holds the paths to every asset.\nThat might look something like this:\n``` ruby\napp/controllers/some_controller.rb\ndef some_action\n  @images = {\n    oneIcon: path_to_asset('one_icon.png'),\n    twoIcon: path_to_asset('two_icon.png')\n  }\nend\nprivate\ndef path_to_asset(asset)\n    ApplicationController.helpers.asset_path(asset)\n  end\n```\n``` ruby\napp/views/some_controller/some_action.html.erb\n<%= tag :div, data: { images: @images }, id: \"root\" %>\n```\n``` javascript\napp/assets/javascripts/app.js.jsx\nvar rootElement = document.getElementById(\"root\");\nvar imagePaths = JSON.parse(rootElement.dataset.images);\nwindow.ReactDOM.render(\n  \n  rootElement\n);\n```\n. ",
    "pioz": "In my app/assets/javascripts/components/navbar.js.jsx.erb I can write something like this:\nrender() {\n      return(\n        <div className=\"navbar-header\">\n          <button className=\"navbar-toggle collapsed\" data-target=\"#navbar-collapse\" data-toggle=\"collapse\" type=\"button\">\n            <span className=\"sr-only\">\n              <%= I18n.t('menu.toggle_navigation') %>\n            </span>\n            <span className=\"icon-bar\"></span>\n            <span className=\"icon-bar\"></span>\n            <span className=\"icon-bar\"></span>\n          </button>\n          <ul>\n            <li>\n              <%= link_to root_path, className: 'navbar-brand' do %>\n                <span className='glyphicon glyphicon-home'></span>\n                &nbsp;\n                <%= I18n.t('menu.now') %>\n              <% end %>\n            </li>\n            <li><%= link_to I18n.t('menu.archive'), archive_path%></li>\n          </ul>\n        </div>\n      );\n    }\nAll works fine except for the link_to with block... I have a syntax error: syntax error, unexpected keyword_end, expecting ')'\nIf I remove the block all works fine.\nAny idea?\n. I've same problem after upgrade from react-rails 1.10 to 2.1.0\nIm using sprockets, in my server_rendering.js I've put //= require react_ujs, my ExecJS backend is mini_racer.\n@mattclough1 what were your changes to fixing the problem?. My server_rendering.js:\n```\n//= require namespace\n//= require i18n\n//= require i18n/translations\n//= require underscore/underscore\n//= require inflections/lib/inflections\n//= require underscore.string/dist/underscore.string\n//= require numeral/numeral\n//= require react_ujs\n//= require es6_require\n//= require react-server\n//= require react-router/umd/ReactRouter\n//= require ./components_priority_require\n//= require_tree ./components/server\n//= require_tree ./components/common\n```. It works! Just put react_ujs after react-server require. Thank you very much!. @wrzasa i've same your problem... did you solve? . Ok, ill try tomorrow. \n\nIl giorno 05 feb 2018, alle ore 21:23, Greg Myers notifications@github.com ha scritto:\n@pioz @hawkzuo Can you try the pre-release of this gem?\nhttps://rubygems.org/gems/react-rails/versions/2.4.4.pre\nThis may fix your issue.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. The issue is fixed for me! Thank you for your work!. Im not using webpacker but im using browserify rails. \nIl giorno 08 apr 2018, alle ore 21:30, Greg Myers notifications@github.com ha scritto:\nIf you're using react-rails with Webpacker, react-dom will already be installed.\nHave you tried shimming react-dom to global namespace so mobx can get a hold of it?\nhttps://webpack.js.org/guides/shimming/\nThis is unlikely to be a react-rails gem issue, but does follow the general trend of being hard to debug when things go wrong in JS land. See this Redux issue as a possible related thread.\n878\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. I managed to make mobx work like this:\nIn application.js I've this requires:\n//= require application/components\nwindow.$ = window.jQuery = require('jquery');\nrequire('jquery-ujs');\nvar React = window.React = global.React = require('react');\nvar ReactDOM = window.ReactDOM = global.ReactDOM = require('react-dom');\nrequire('react_ujs');\nAnd I've npm packages with yarn: yarn add react react-dom react_ujs jquery jquery-ujs mobx mobx-react\nmy application/components.js is this:\nwindow.MyComponent = global.MyComponent = require('application/components/MyComponent.jsx').default;\n\nNow all works fine, but if I enable server rendering (with prerender: true option) I get \nReferenceError: window is not defined. I figured out, this a repo with the setup to make all work! https://github.com/pioz/rails_with_react-rails_and_mobx. ",
    "gwong89": "so if im compiling with webpack, which solution from these posts would work?\n. ",
    "varun-raj": "Store it in a JS variable and use it\n. @TxsAdamWest are you using it in a rails project? \n. ",
    "TxsAdamWest": "I am having an issue with the src path...  Console reads a bunch of 404 errors for each of the img's.  Is there something wrong with my formatting or pathing ?         \n<img src={'../images/jesseleach.jpg'} />\n\n. No,  JavaScript.    I think what I was doing wrong was the img src paths\nneeded to be in curly braces.  They wouldn't read otherwise..\nOn Sep 12, 2016 1:26 AM, \"Varun Raj\" notifications@github.com wrote:\n@TxsAdamWest https://github.com/TxsAdamWest are you using it in a rails\nproject?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/211#issuecomment-246259661,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APQ1z6hqF49J2uqtkuSpMRmY6AW6tfbgks5qpPCrgaJpZM4DvWU0\n.\n. ",
    "vkhang55": "This gem seems to solve that issue https://github.com/rainchen/react-rails-img/blob/master/vendor/assets/javascripts/react_rails_img.js.jsx.erb\n. ",
    "nextofsearch": "Hi,\nI am using Rails 5 with react-rails and browserify-rails gems and I can't figure out how to get image tag working with asset pipeline. It seems that browserify-rails take precedence over .js files so there is no chance for Rails process .erb syntax in .js.jsx. Can someone help to use both gems and figure out how to use asset pipeline successfully?\nhttps://github.com/browserify-rails/browserify-rails/issues/48#issuecomment-259595353\n. ",
    "lakesare": "Appending erb to form js.jsx.erb worked. Now I'm using ES6 and can use:\n<section>\n    <%= image_tag 'common/star.svg' %>\n    {reviews}\n</section>. ",
    "aurimus": "My sprockets 4.0.0beta4 simply does not include the file (does not see it) if I change the ending to .js.jsx.erb, works fine with js.jsx. Any ideas?. ",
    "liamm12": "If you have a few images you can just import it directly in your component like this\nimport logo from './Pictures/1.jpg';\n\nThen call it like this \n<img src={logo} alt=\"logo\" width={\"240\"} height={\"240\"}  />\n\nIf you want to get multi images like more than 50 img in own component, my own way to do that to specify each component has a images.js file,and then you can just import all the images that retarded of that component in images.js and  name it as the related component name \n(It will let you know what this images file for.)\n\nAs I prefer to keep all your images in public folder\n\nimages.js\nimport logo from './images/logo.svg';\nimport cover from './images/cover.svg';\nimport profile from './images/profile.svg';\nimport background1 from './images/body.svg';\nexport default {\n    logo,\n    cover,\n    profile,\n    background1\n}\n\nThen in your component you can just import images.js file like this, you can name it whatever you want\nimport images from './images';\n\nThen you can call any img you want like this\n      <img src={images.logo} className=\"App-logo\" alt=\"logo\" />\n      <img src={images.cover} className=\"App-logo\" alt=\"logo\" />\n      <img src={images.profile} className=\"App-logo\" alt=\"logo\" />\n      <img src={images.background1} className=\"App-logo\" alt=\"logo\" />\n\n. ",
    "devp-UditRaj": "you can do this\n${this.props.imagepath})} alt=\"My Image\"/>\nand take imagepath as a prop in the tag and then pass it!!\n. ",
    "hiveer": "What I have done is to import the image to JSX file like:\n`import HeaderLogo from './header_logo.png';\nthen we can refer to it like this:\n<img src={HeaderLogo}>. ",
    "danhart": "This fix also appears to address the same issue: https://github.com/reactjs/react-rails/compare/master...ownerscircle:perf_testing\nNot sure which one is preferable. We used https://github.com/reactjs/react-rails/compare/master...ownerscircle:perf_testing in our project, rather than this one.\n. ",
    "sergeylaptev": "I've added this string after this issue occured. It seems that it doesn't help. \n. Sorry, this is my fault. Let me explain this issue in details.\nFor example, I have MessengerPage component. Client goes on page, where this component should prerender and inside of componentWillMount method of this component I invoke initialize methods of all necessary stores. As parameters I pass data from the server, received via props.\ncoffee\n  componentWillMount: ->\n    CurrentUserStore.initialize @props.currentUser\n    ConversationStore.initPlural @props.conversationsInfo.items\nAs you know Stores are singletons, and they available in global scope for all components. For example here is the code of initPlural method of ConversationStore.\n``` coffee\n_conversations = {}\nConversationStore = assign new BaseStore(),\n  initPlural: (conversations) ->\n    _.forEach conversations, (item) ->\n      _conversations[item.id] = item\n......\n```\nAs you see, _conversations variable exists from the start of script loading and changes when we invoke initPlural method for example. I think, that this variable exists for all user sessions at same time. Force redefining value of private variable works fine, and user can't see data from the store another one. But it seems that it's hacky way, and can't be singular solution.\n. ",
    "andygeers": "@rmosolgo I'm not sure if that's the kind of test you were looking for?\n@vipulnsward From what I can tell, the change in execjs applies to all the different runtime engines they support - we're using rubyracer here, and there are definitely commits related to fixing it in rhino too\n. Ok, done\n. ",
    "jemiam": ":+1: \n. ",
    "christopherstyles": "Sure thing, thanks @rmosolgo! :+1: \n. @rmosolgo anything I need to do to get this passing? \nIt\u2019s throwing ActionView::Template::Error: TypeError: Cannot set property 'root' of null \u2013 maybe the https://github.com/jashkenas/coffeescript/issues/3829 issue again? \n. ",
    "tomtaylor": "Thanks. Have you noticed any performance issues on Heroku?\n\nOn 25 Mar 2015, at 17:25, Robert Mosolgo notifications@github.com wrote:\nI removed it after reading this note: https://devcenter.heroku.com/articles/rails-asset-pipeline#therubyracer\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks @bogdan-dumitru, that's really useful to know. The high memory issues we're seeing with therubyracer aren't causing particular performance issues, I was just surprised at the usage. We're using Ruby 2.2.1.\n\n(We'd like to run more processes in each dyno, if possible, but each process seems to stabilise around ~300MB at the moment, so can't run more than 1 in a 1X dyno (512MB max). Switching to 2X dynos might help, and might give us enough room to run 3 worker processes in each, saving overall.)\n. @bogdan-dumitru yeah, we're using 5 threads in Puma, and max_renderers is set to that too.\n. ",
    "pjungwir": "It's too bad that react-rails doesn't support some way of doing this, since Containment is such a useful part of React's Composition-vs-Inheritance approach. And what @nicolas-besnard suggested certainly seems like the most React-like way of expressing it in your Rails views. And the body should support not just HTML, but nested React components.. Since right now it only supports HTML, then changing it to support JSX would be backwards-compatible (mostly), right? Or even nested react_component helpers? (Actually maybe that works already? I haven't tried it.) I might be interested in working on a PR if that user-facing design is okay with you.. ",
    "gregblass": "Super surprised to see this isn't a thing. Using this.props.children is a core part of React. I assumed I could do:\n<%= react_component 'MyComponent' do %>\n  Stuff Here\n<% end %>\nand then have access to that in this.props.children.\nEDIT: Derp. Op explained this exact thing. But yeah - totally agreed, if this is possible, that would be awesome, and intuitive.. ",
    "Boeing787": "If you advertise a plugin as allowing for react components, it should encapsulate basic expectations and protocols for what React does, like having children props. Too bad we found this so late in development. ",
    "seizmo": "React source was installed using bundler with jruby and the files are missing in the extracted gem.\n\nJSXTransformer is indeed included in the gem file from rubygems. I dont know, why this was not properly extracted in my environment. Might be a bug of rubygems under jruby. So, I guess this has nothing to do with you guys, sorry for the confusion.\n. ",
    "coderjonny": "Yup, webpack + babel is the way to go!\n. ",
    "shenoudab": "Dear Blaine,\nI download react-intl through npm and adding it to my application.js file //= require react-intl and its loaded in header.\nbut when i add:\nvar IntlMixin     = ReactIntl.IntlMixin;\nvar FormattedDate = ReactIntl.FormattedDate;\nto jsx file and adding mixins: [ReactIntl.IntlMixin], to React Class i got error \"ReferenceError: Can't find variable: ReactIntl\"\n. Thanks Blaine, \nfor your fast reply .. its  placed the react-intl.js inside vendor/javascripts as your recommendations.\nbut i got the same error again .. i think the error is about declare ReactIntl not in the assets pipleline.\n\"ReferenceError: Can't find variable: ReactIntl\"\nas i add the following:\nvar IntlMixin     = ReactIntl.IntlMixin;\nvar FormattedDate = ReactIntl.FormattedDate;\nIt can't find a declare for ReactIntl.\nLooking for recommendations and suggestions.\nAnd how to integrate other external react components in my rails app ?\nThanks\n. ",
    "pacarvalho": "Are there plans to make this available through the usual \"config.react.addons = true\"?\n. ",
    "goldnuggets24": "I have been in a few cage matches in the past couple weeks while attempting to integrate 3rd party NPM components with my React/Rails build. I'm not going to tell you I did this correctly, but this is what worked for me. After downloading through NPM, I placed the following at the top of the component I called react-intl in: \nvar ReactIntl = require('react-intl/lib/react-intl');\nvar IntlMixin = ReactIntl.IntlMixin;\nvar FormattedDate = ReactIntl.FormattedDate;\nBasically, Rails wasn't finding 'ReactIntl' by searching for it at the root of my node-modules folder. I had to redirect it over to the associated lib folder. I had to do something similar with Material-UI. Hope that helps! \n. @fletcher91 you are amazing, thank you soooo much for your help! I used your test app to construct my own integration of material-ui with a Rails project. I'm sure I did some things wrong here, but if it helps anyone else, please feel more than free to borrow from my repo.\n. ",
    "blarralde": "Thanks for the reply!\nI did add them to the precompile list. This is just for precompiling on prod though, and it's not compiling on my dev at all.\n. Sorry for the incorrect wording. I mean that my code isn't transformed, which forces me to use JSXTransformer.js on my page. I tried switching to the master branch and it didn't fix the issue. \nActually I think the error isn't that files are not transformed from JSX (the code looks properly formatted), but somehow my React components won't load unless I add JSXTransformer.js to my page. On the other hand, when I require the components code directly in application.js and not on its own in the page body, it works great. Not really sure what that could be about, but I have a feeling that might not be related to this gem?\n. Ghaaa, found the issue. Indeed not related to the Gem. I was including my files with \n= javascript_include_tag 'my_script', type: 'text/jsx'\nIt doesn't like the type: 'text/jsx' part, should just be left blank.\nSorry for the trouble and thanks for helping!\n. ",
    "bshyong": "@rmosolgo thanks for the quick response! From my Gemfile.lock it looks like the version is 1.0.0.pre\nremote: git://github.com/reactjs/react-rails.git\n  revision: a05c5af050311843846dc29c4e3ef6bc34bb89fe\n  specs:\n    react-rails (1.0.0.pre)\nThis happens on view templates that have render_react_component calls, e.g.:\n<%= react_component('ConversationList', 'accountSlug' => @account.slug) %>\n. It's an inbox view that renders a list of Comment Response components. The project is actually open source: here's the code for the component.\nhttps://github.com/bshyong/helpful-web/blob/master/app/assets/javascripts/components/conversation_list.js.jsx\n. awesome thanks!\n. ",
    "fredericgrati": "I have the same issue when I am using JSX syntax.\n```\nrender: function() {\n    var marketplaces = this.state.marketplaces.map(function(marketplace) {\n        return React.createElement(Marketplace, {key: marketplace.id, marketplace: marketplace});\n    });\nreturn React.DOM.div(null, marketplaces);\n\n}\n```\n=> Works as expected\n```\nrender: function() {\n    var marketplaces = this.state.marketplaces.map(function(marketplace) {\n        return ;\n    });\nreturn (\n    <div className=\"marketplaces\">\n        {marketplaces}\n    </div>\n);\n\n}\n```\n=> Uncaught TypeError: Cannot read property '__reactAutoBindMap' of undefined\nAwesome project btw ;)\n. Exactly, I use Browserify in order to use CommonJS modules...\nIf I remove all the Browserify stuff, everything works ;)\n. ",
    "mutley": "any update on getting this to work?\n. ",
    "amunda": "Ah found the issue... it was because i had a separate manifest file named components.js (nothing to do with react components) under my lib directory which i didn't see earlier. This file was referencing some js.erb files in it which caused the issue. \nAfter renaming my components.js to some other name everything worked smoothly.\nIs there a way to set the default name of the manifest file to be something else?\n. ",
    "a2ikm": "@rmosolgo Sorry for my late reply.  Your patch looks very nice, thank you!\n. ",
    "kirs": "Actually, now I found that I can reproduce it only with sprockets-rails on master.\nIf you don't consider it as a bug, feel free to close the issue.\n. Apparently this patch doesn't work in test environment because app.assets.paths is frozen.\n. @rmosolgo any thoughts?\n. @josh I couldn't use config.assets.configure here because it's nil and it's only set in after_initialize: https://github.com/rails/sprockets-rails/blob/master/lib/sprockets/railtie.rb#L142\nMay I use operate directly on app.config.assets.paths here?\n. ",
    "gbanis": "@zpao Sure \n@facebook-github-bot All set \n. ",
    "gbanis-fiksu": "I'll make another PR to add this in 1.0.\nIs there a reason why this doesn't get carried with the new versions?\n. ",
    "jlgasparrini": "Thanks @rmosolgo \ud83d\ude04  Using ReactRailsUJS.mountCompunents('#my-container') after my ajax request works for me!\n. ",
    "kunalmawade": "I was having similar problem. I solved it by adding { prerender: true }. ",
    "mchristen": "This causes extreme app bootup times.\nWhen hosted on Heroku which has a 60s timeout for app boot you can get yourself into some trouble after a server reboot where your servers are marked as crashed and no requests are processed. \nI find the app boot time to be right around 60s and it basically makes deploying to heroku a complete crapshoot on whether or not your app will boot back up.\n. I tried using the current version on master, but I'm receiving the following error during bootup.\nrake aborted!\nTypeError: can't modify immutable index\n/home/matt/.rbenv/versions/2.2.1/lib/ruby/gems/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:81:in `expire_index!'\n/home/matt/.rbenv/versions/2.2.1/lib/ruby/gems/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:49:in `version='\n/home/matt/.rbenv/versions/2.2.1/lib/ruby/gems/2.2.0/bundler/gems/react-rails-75248975f838/lib/react/rails/railtie.rb:47:in `block in <class:Railtie>'\nIt seems like this was encountered in the past according to #31\n. rake db:test:prepare\nOther rake tasks appear to work just fine though and  my server boots up just fine, so it appears it's something to do with that rake task and possibly running under the TEST environment\n. Unfortunately the compass-rails gem forces Sprockets < 2.13 and lots of front-end gems tend to depend on compass-rails so I'm stuck with using Sprockets 2.13 for the time being, at least until Compass/compass-rails#227 is finished and merged.\nAt least the server bootup times are much quicker now, thanks for the work on this :+1: \n. I just tested your branch @byroot and that particular issue is fixed, all rake tasks I've tested seem to work fine now, thanks!\nNow I'm running into an entirely separate issue related to the decoupled ServerRendering code, I'll make a comment on that pull request with some details. \n. This seems to have introduced a regression when trying to use prerender:true and already stringified properties being passed into react_component.\nFor example, if you use jbuilder to build your JSON you could in the past(without this pull request) do something like\nreact_component(\"MyComponent\", render(file: \"path/to/some_file.json.jbuilder\"), prerender: true)\nIt seems that the changes in view_helper.rb are the culprit. view_helper.rb#L12 assumes that the props aren't already stringified. \n. In my experience this is a pain point as well. My hackish remedy was to monkeypatch React::Renderer.reset_combined_js! to write out the contents of @@combined_js to a file in tmp/\nYou can at least this way match up line numbers from the stack trace to actual javascript code, still not ideal but has helped me solve problems with server side rendering. \n. I tried this out and I'm running into an issue with sprockets now.\nIn particular \nAsset was linked to from an alias rather than its exact path. Alias resolving may not be available in production.\nUse \"react.js\" instead of \"development-with-addons/react.js\"\nbeing thrown from\n```\n#asset_digest_path\nsprockets-rails (2.3.1) lib/sprockets/rails/helper.rb, line 134\n```\nThis is kind of confusing because it is a call to //= require react that is raising the exception\n. Correct, this is for the client side JS file loaded in the rails layout. \nsprockets-rails (2.3.1) lib/sprockets/rails/helper.rb:134:in `asset_digest_path'\n sprockets-rails (2.3.1) lib/sprockets/rails/helper.rb:85:in `compute_asset_path'\n actionview (4.2.0) lib/action_view/helpers/asset_url_helper.rb:135:in `asset_path'  \n sprockets-rails (2.3.1) lib/sprockets/rails/helper.rb:100:in `asset_path'\n actionview (4.2.0) lib/action_view/helpers/asset_url_helper.rb:245:in `javascript_path'\n sprockets-rails (2.3.1) lib/sprockets/rails/helper.rb:153:in `block (2 levels) in javascript_include_tag'\n sprockets-rails (2.3.1) lib/sprockets/rails/helper.rb:152:in `block in javascript_include_tag'\n sprockets-rails (2.3.1) lib/sprockets/rails/helper.rb:149:in `javascript_include_tag'\n app/views/layouts/application.html.haml:33:in `_app_views_layouts_application_html_haml___1984877869646349502_70331041908800'\n. It definitely occurs prior to that version as well(at least as early as 2.2.4). When I first ran into the error I came across that issue on sprocket-rails and saw that code was touched with 2.3.1 so I updated to that version to see if the problem went away. When the problem persisted is when I made the comment above. \nEither way it looks like there will be a fix shortly, thanks for the work!\n. No problems here using namespaced components.\nreact_component('Namespace::Component') works just on both client and server rendering. \nPerhaps your top level Lib object isn't available on the window object so server rendering can't find it?\n. therubyracer (0.12.1)\nlibv8 (~> 3.16.14.0)\nthat's what I'm running\n. You are correct Robert, I completely meant to say \"Namespace.Component\". We have a convention where we set the displayName of a component like \"Namespace::Component\", and that confused me for a moment.\n. Correct, all files configured for react.server_rendering need to be precompiled. I tried including react.js in the assets.precompile list, but I couldn't seem to get it to ever compile. I ended up going with your solution, where my components.js files //=require all the necessary pieces, including react.js.\nSo as long as all your component files are listed in assets.precompile and each component file //= requires all necessary per-requisites it should work just fine.\n. I've been stress testing this setup now for quite some time and everything seems to be working just fine. I've managed to put a million requests through the 8 processes w/ 8 threads each setup using only a single ExecJS context.\nBefore when using a pool to match the size of threads I could maybe get about 1000 requests through a process before it would deadlock.\nNote that this is really only a problem when your system is under decent load and there is some contention for the locks.\nIt looks like libv8 has its own GIL and I'm not sure how much I/O would be going on during rendering so that's why I think performance has been OK with only one ExecJS context.\n. Yeah, I thought about testing with Node.js instead of therubyracer, I just haven't had the time yet.\nThere's nothing inherently wrong with the connection_pool logic, but there's a lot of locking going on in ExecJS, therubyracer and libv8 and there is probably some bug in MRI or one of those gems causing the problem.\nI've also through that maybe a thread is crashing while rendering inside of the ExecJS context and not releasing a lock, but I can't find any evidence of unhandled exceptions occurring prior to the process locking up.\nI'll have some time in the next few days to get back to this and stick a debugger on it again to try and get some more information. I will also test it with Node.js to see if that helps or is better/worse for performance. \n. Great script.\nWhen running the tests though, my ruby process now deadlocks consistently when pool size > 1 and using the threaded version of the test. This is a much easier way to reproduce the problem then trying to stress the entire web stack.\nLooking through the thread stacks in gdb it looks like the deadlock problem is something with libv8 itself. \n(gdb) info threads\n  Id   Target Id         Frame \n  11   Thread 0x7f7a3346e700 (LWP 14387) \"ruby-timer-thr\" 0x00007f7a3215350d in poll () at ../sysdeps/unix/syscall-template.S:81\n  10   Thread 0x7f7a33463700 (LWP 14392) \"SignalSender\" sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:85\n  9    Thread 0x7f7a2de1e700 (LWP 16028) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  8    Thread 0x7f7a2dd1d700 (LWP 16029) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  7    Thread 0x7f7a2e424700 (LWP 16030) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  6    Thread 0x7f7a2db1b700 (LWP 16031) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  5    Thread 0x7f7a26222700 (LWP 16032) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  4    Thread 0x7f7a2e121700 (LWP 16033) \"server_renderi*\" __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\n  3    Thread 0x7f7a2df1f700 (LWP 16034) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n  2    Thread 0x7f7a2dc1c700 (LWP 16035) \"server_renderi*\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\n* 1    Thread 0x7f7a3344e700 (LWP 14355) \"ruby\" pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:185\nMost of those threads look OK, just the ruby interpreter doing it's threading thing, BUT threads 10 and 4 seem suspicious.\n```\n(gdb) thread 10\n[Switching to thread 10 (Thread 0x7f7a33463700 (LWP 14392))]\n0  sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:85\n85      ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S: No such file or directory.\n(gdb) where\n0  sem_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/sem_wait.S:85\n1  0x00007f7a3077b59d in v8::internal::LinuxSemaphore::Wait() () from /home/matt/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-linux/2.2.0/therubyracer-0.12.2/v8/init.so\n2  0x00007f7a30680e8c in v8::internal::RuntimeProfiler::WaitForSomeIsolateToEnterJS() () from /home/matt/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-linux/2.2.0/therubyracer-0.12.2/v8/init.so\n3  0x00007f7a3077b7a8 in v8::internal::SignalSender::Run() () from /home/matt/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-linux/2.2.0/therubyracer-0.12.2/v8/init.so\n4  0x00007f7a3077b6ae in v8::internal::ThreadEntry(void*) () from /home/matt/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-linux/2.2.0/therubyracer-0.12.2/v8/init.so\n5  0x00007f7a32b630a4 in start_thread (arg=0x7f7a33463700) at pthread_create.c:309\n6  0x00007f7a3215c04d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\n```\n```\n(gdb) thread 4\n[Switching to thread 4 (Thread 0x7f7a2e121700 (LWP 16033))]\n0  __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\n135     ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S: No such file or directory.\n(gdb) where\n0  __lll_lock_wait () at ../nptl/sysdeps/unix/sysv/linux/x86_64/lowlevellock.S:135\n1  0x00007f7a32b654d4 in _L_lock_952 () from /lib/x86_64-linux-gnu/libpthread.so.0\n2  0x00007f7a32b65336 in __GI___pthread_mutex_lock (mutex=0x1e861f8) at ../nptl/pthread_mutex_lock.c:114\n3  0x00007f7a306f36ed in v8::internal::ThreadManager::Lock() () from /home/matt/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-linux/2.2.0/therubyracer-0.12.2/v8/init.so\n4  0x00007f7a306f3cff in v8::Locker::Initialize(v8::Isolate*) () from /home/matt/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/extensions/x86_64-linux/2.2.0/therubyracer-0.12.2/v8/init.so\n5  0x00007f7a304d98cf in rr::Locker::setupLockAndCall (state=0x7f7a2e11cf94, code=37382800) at locker.cc:47\n6  0x00007f7a304d9897 in rr::Locker::doLock (argc=0, argv=0x7f7a2e122310, self=26362160) at locker.cc:39\n7  0x00007f7a32f45199 in vm_call_cfunc_with_frame (ci=, reg_cfp=0x7f7a2e221840, th=0x290ede0) at vm_insnhelper.c:1360\n8  vm_call_cfunc (th=, reg_cfp=, ci=) at vm_insnhelper.c:1453\n9  0x00007f7a32f4b30f in vm_exec_core (th=th@entry=0x290ede0, initial=initial@entry=0) at insns.def:1024\n10 0x00007f7a32f4fa28 in vm_exec (th=0x290ede0) at vm.c:1407\n11 0x00007f7a32f517ae in vm_call0_body (th=0x1e861f8, th@entry=0x290ede0, ci=0x80, ci@entry=0x7f7a2e11d5f0, argv=0x0) at vm_eval.c:180\n...\n...\n...\n79 0x00007f7a32f55f20 in vm_invoke_proc (th=th@entry=0x290ede0, proc=proc@entry=0x212e6f0, self=26549360, defined_class=26553440, argc=0, argv=0x258d8f0, blockptr=0x0) at vm.c:886\n80 0x00007f7a32f56008 in rb_vm_invoke_proc (th=th@entry=0x290ede0, proc=proc@entry=0x212e6f0, argc=, argv=, blockptr=blockptr@entry=0x0) at vm.c:905\n81 0x00007f7a32f6b360 in thread_start_func_2 (th=th@entry=0x290ede0, stack_start=) at thread.c:577\n82 0x00007f7a32f6b8c0 in thread_start_func_1 (th_ptr=0x290ede0) at thread_pthread.c:809\n83 0x00007f7a32b630a4 in start_thread (arg=0x7f7a2e121700) at pthread_create.c:309\n84 0x00007f7a3215c04d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:111\n```\n. I just made a pull request with some tweaks to the script that should make it execute more like how a web server would be calling into ExecJS. Should address your concern about creating lots of threads.\nI also agree that connection_pool seems to not be doing much.\n. I've been testing both with a connection pool and without a connection pool running 10000 renders / test. I modified the script slightly so that when using more than one thread it executes 10000 / # of threads renders per thread, so each test should be calling render the same amount of times.\n```\n$ ruby -I lib benchmarks/server_rendering_benchmark.rb # WITHOUT connection_pool\n                                                    user     system      total        real\nthreaded, 1 conn, 1 threads, therubyracer (V8)  4.480000   0.060000   4.540000 (  4.499783)\nthreaded, 1 conn, 2 threads, therubyracer (V8)  5.020000   0.080000   5.100000 (  4.913696)\nthreaded, 1 conn, 4 threads, therubyracer (V8)  5.070000   0.100000   5.170000 (  4.942754)\nthreaded, 1 conn, 8 threads, therubyracer (V8)  5.230000   0.070000   5.300000 (  5.068558)\nthreaded, 10 conn, 1 threads, therubyracer (V8)  4.580000   0.050000   4.630000 (  4.587420)\nthreaded, 10 conn, 2 threads, therubyracer (V8)  5.100000   0.110000   5.210000 (  5.010717)\nthreaded, 10 conn, 4 threads, therubyracer (V8)  4.980000   0.090000   5.070000 (  4.857607)\nthreaded, 10 conn, 8 threads, therubyracer (V8)  5.040000   0.080000   5.120000 (  4.893360)\nthreaded, 25 conn, 1 threads, therubyracer (V8)  4.470000   0.000000   4.470000 (  4.443161)\nthreaded, 25 conn, 2 threads, therubyracer (V8)  5.100000   0.100000   5.200000 (  5.000211)\nthreaded, 25 conn, 4 threads, therubyracer (V8)  4.990000   0.090000   5.080000 (  4.871171)\nthreaded, 25 conn, 8 threads, therubyracer (V8)  5.360000   0.070000   5.430000 (  5.197703)\n1 conn, 1 threads, therubyracer (V8)            5.000000   0.020000   5.020000 (  4.991949)\n1 conn, 2 threads, therubyracer (V8)            5.140000   0.080000   5.220000 (  5.019844)\n1 conn, 4 threads, therubyracer (V8)            5.390000   0.080000   5.470000 (  5.260477)\n1 conn, 8 threads, therubyracer (V8)            5.420000   0.080000   5.500000 (  5.276437)\n10 conn, 1 threads, therubyracer (V8)           4.810000   0.020000   4.830000 (  4.801155)\n10 conn, 2 threads, therubyracer (V8)           5.330000   0.070000   5.400000 (  5.179808)\n10 conn, 4 threads, therubyracer (V8)           5.130000   0.070000   5.200000 (  4.998896)\n10 conn, 8 threads, therubyracer (V8)           5.340000   0.100000   5.440000 (  5.207626)\n25 conn, 1 threads, therubyracer (V8)           4.690000   0.030000   4.720000 (  4.684538)\n25 conn, 2 threads, therubyracer (V8)           5.220000   0.050000   5.270000 (  5.059232)\n25 conn, 4 threads, therubyracer (V8)           5.440000   0.050000   5.490000 (  5.282391)\n25 conn, 8 threads, therubyracer (V8)           5.380000   0.110000   5.490000 (  5.257271)\n[matt@popcorn:~/work/react-rails]\n$ ruby -I lib benchmarks/server_rendering_benchmark.rb # WITH connection_pool\n                                                    user     system      total        real\nthreaded, 1 conn, 1 threads, therubyracer (V8)  4.540000   0.080000   4.620000 (  4.579024)\nthreaded, 1 conn, 2 threads, therubyracer (V8)  5.430000   0.120000   5.550000 (  5.310940)\nthreaded, 1 conn, 4 threads, therubyracer (V8)  5.500000   0.150000   5.650000 (  5.459235)\nthreaded, 1 conn, 8 threads, therubyracer (V8)  5.620000   0.120000   5.740000 (  5.525929)\nthreaded, 10 conn, 1 threads, therubyracer (V8)  4.860000   0.040000   4.900000 (  4.851019)\nthreaded, 10 conn, 2 threads, therubyracer (V8)  6.150000   0.100000   6.250000 (  5.992818)\nthreaded, 10 conn, 4 threads, therubyracer (V8)  6.910000   0.100000   7.010000 (  6.786146)\nthreaded, 10 conn, 8 threads, therubyracer (V8)  9.820000   0.230000  10.050000 (  9.466074)\nthreaded, 25 conn, 1 threads, therubyracer (V8)  4.990000   0.030000   5.020000 (  4.985817)\nthreaded, 25 conn, 2 threads, therubyracer (V8)  6.520000   0.090000   6.610000 (  6.355268)\nthreaded, 25 conn, 4 threads, therubyracer (V8)  7.560000   0.150000   7.710000 (  7.434552)\nthreaded, 25 conn, 8 threads, therubyracer (V8)  9.790000   0.290000  10.080000 (  9.522219)\n1 conn, 1 threads, therubyracer (V8)            4.930000   0.060000   4.990000 (  4.951394)\n1 conn, 2 threads, therubyracer (V8)            5.720000   0.100000   5.820000 (  5.598103)\n1 conn, 4 threads, therubyracer (V8)            5.900000   0.070000   5.970000 (  5.771040)\n1 conn, 8 threads, therubyracer (V8)            5.860000   0.080000   5.940000 (  5.730886)\n10 conn, 1 threads, therubyracer (V8)           4.970000   0.020000   4.990000 (  4.951558)\n10 conn, 2 threads, therubyracer (V8)           6.670000   0.100000   6.770000 (  6.535869)\n10 conn, 4 threads, therubyracer (V8)           7.700000   0.120000   7.820000 (  7.576611)\n10 conn, 8 threads, therubyracer (V8)           9.120000   0.190000   9.310000 (  8.935771)\n25 conn, 1 threads, therubyracer (V8)           4.980000   0.030000   5.010000 (  4.968515)\n25 conn, 2 threads, therubyracer (V8)           7.150000   0.100000   7.250000 (  6.979404)\n25 conn, 4 threads, therubyracer (V8)           8.150000   0.090000   8.240000 (  7.999867)\n25 conn, 8 threads, therubyracer (V8)          10.100000   0.190000  10.290000 (  9.712077)\n```\nThe first results are without using a connection_pool and the second is with using the pool. You can clearly see the performance degradation when using the pool, I would definitely go ahead and remove it.\nI was able to fix the deadlock issue by wrapping all calls to ExecJS with Mutex#synchronize so that only one thread can be compiling or rendering at the same time. It seems silly to have to also provide our own 'GIL' for interacting with ExecJS, but it definitely fixes the deadlock problem, and it only seems to matter for therubyracer, none of the other runtimes would deadlock. \n. @johnthethird I thought about JRuby as well, but wouldn't the GIL in V8 negate any sort of performance from the JRuby threads? Regardless of accessing an ExecJS context through connection_pool or not they will still share the same GIL in V8. \n. Gotcha, that doesn't use V8 at all so is not subject to its GIL. \nThe whole reason this pull request exists is because using ExecJS w/ therubyracer in a threaded environment exhibits a deadlock. So while trying to debug/figure out what/where the problem is we discovered that using the connection_pool with MRI actually hurts performance.\nSo it looks like perhaps the best solution is one where a connection_pool is used when the underlying JS runtime is thread-safe and JRuby is being used, otherwise don't bother because it hurts performance on MRI. \nThe issue of therubyracer deadlocking still isn't fixed though. until the real bug is fixed whether it is in therubyracer, libv8, or MRI itself, there needs to be some locking going on inside of react-rails to prevent against concurrent calls to anything in ExecJS. Perhaps that could also be conditional on whether or not therubyracer is being used so that we don't step in the way of JRuby. \n. Here's a full test run using jruby and therubyrhino running 20k renders per test. Node.js is so slow that I'm not bothering to test against it.\nI altered the script test loop order to change the size of the connection pool before it changes the thread count and you can clearly see the performance benefit of using a pool size >= thread count by looking at the real column. My machine has hyperthreading so I guess that's why everything above 4 threads fails to show any improvement.\n$ ruby -I lib benchmarks/server_rendering_benchmark.rb  20000                                                                                                                                                                                                                                                                \n                                                              user     system      total        real\nthreaded, 1 conn, 1 threads, therubyrhino (Rhino)        85.400000   0.140000  85.540000 ( 77.309994)\nthreaded, 2 conn, 1 threads, therubyrhino (Rhino)        75.520000   0.080000  75.600000 ( 73.073037)\nthreaded, 4 conn, 1 threads, therubyrhino (Rhino)        73.250000   0.060000  73.310000 ( 72.023527)\nthreaded, 8 conn, 1 threads, therubyrhino (Rhino)        73.640000   0.080000  73.720000 ( 72.338433)\nthreaded, 10 conn, 1 threads, therubyrhino (Rhino)       73.250000   0.040000  73.290000 ( 71.963621)\nthreaded, 1 conn, 2 threads, therubyrhino (Rhino)        76.500000   0.200000  76.700000 ( 73.928030)\nthreaded, 2 conn, 2 threads, therubyrhino (Rhino)        87.760000   0.040000  87.800000 ( 43.708759)\nthreaded, 4 conn, 2 threads, therubyrhino (Rhino)        85.640000   0.070000  85.710000 ( 42.704853)\nthreaded, 8 conn, 2 threads, therubyrhino (Rhino)        89.220000   0.070000  89.290000 ( 44.385474)\nthreaded, 10 conn, 2 threads, therubyrhino (Rhino)       89.370000   0.060000  89.430000 ( 44.542108)\nthreaded, 1 conn, 4 threads, therubyrhino (Rhino)        78.490000   0.550000  79.040000 ( 74.063415)\nthreaded, 2 conn, 4 threads, therubyrhino (Rhino)        96.940000   0.260000  97.200000 ( 47.619800)\nthreaded, 4 conn, 4 threads, therubyrhino (Rhino)       112.190000   0.080000 112.270000 ( 28.976933)\nthreaded, 8 conn, 4 threads, therubyrhino (Rhino)       110.300000   0.050000 110.350000 ( 28.598516)\nthreaded, 10 conn, 4 threads, therubyrhino (Rhino)      115.960000   0.020000 115.980000 ( 29.758068)\nthreaded, 1 conn, 8 threads, therubyrhino (Rhino)        80.580000   1.110000  81.690000 ( 73.936175)\nthreaded, 2 conn, 8 threads, therubyrhino (Rhino)       100.400000   0.950000 101.350000 ( 48.156891)\nthreaded, 4 conn, 8 threads, therubyrhino (Rhino)       124.540000   0.510000 125.050000 ( 30.938125)\nthreaded, 8 conn, 8 threads, therubyrhino (Rhino)       235.120000   0.290000 235.410000 ( 31.244846)\nthreaded, 10 conn, 8 threads, therubyrhino (Rhino)      236.010000   0.180000 236.190000 ( 31.007223)\n. Here's a full run using MRI(2.2.1).\nMaybe I'm doing something wrong with JRuby, but that performance is quite bad. I was using version 9.0.0.0.pre2 installed through rbenv and the runtime numbers definitely show it was utilizing more than one CPU core at a time(I could see through sysmon tools as well this was the case). \nSo MRI running on one CPU core is almost 4x faster than JRuby running on all 4 CPU cores?? There's obviously something else going on... right?\nThe way this benchmark script is setup it pretty much purely tests the performance of the associated JS runtimes, so does that mean Rhino is that much slower than V8, at least when used in this context?\n$ ruby -I lib benchmarks/server_rendering_benchmark.rb  20000\n                                                              user     system      total        real\nthreaded, 1 conn, 1 threads, therubyracer (V8)            8.700000   0.090000   8.790000 (  8.723473)\nthreaded, 2 conn, 1 threads, therubyracer (V8)            8.800000   0.080000   8.880000 (  8.800348)\nthreaded, 4 conn, 1 threads, therubyracer (V8)            9.020000   0.090000   9.110000 (  9.035414)\nthreaded, 8 conn, 1 threads, therubyracer (V8)            9.130000   0.080000   9.210000 (  9.141726)\nthreaded, 10 conn, 1 threads, therubyracer (V8)           9.100000   0.060000   9.160000 (  9.089403)\nthreaded, 1 conn, 2 threads, therubyracer (V8)           10.560000   0.190000  10.750000 ( 10.345181)\nthreaded, 2 conn, 2 threads, therubyracer (V8)           11.510000   0.190000  11.700000 ( 11.248498)\nthreaded, 4 conn, 2 threads, therubyracer (V8)           12.870000   0.180000  13.050000 ( 12.605508)\nthreaded, 8 conn, 2 threads, therubyracer (V8)           11.710000   0.210000  11.920000 ( 11.525172)\nthreaded, 10 conn, 2 threads, therubyracer (V8)          14.330000   0.240000  14.570000 ( 14.143688)\nthreaded, 1 conn, 4 threads, therubyracer (V8)           11.120000   0.220000  11.340000 ( 11.010513)\nthreaded, 2 conn, 4 threads, therubyracer (V8)           14.400000   0.230000  14.630000 ( 14.241322)\nthreaded, 4 conn, 4 threads, therubyracer (V8)           14.610000   0.220000  14.830000 ( 14.364411)\nthreaded, 8 conn, 4 threads, therubyracer (V8)           15.190000   0.230000  15.420000 ( 14.863919)\nthreaded, 10 conn, 4 threads, therubyracer (V8)          15.790000   0.180000  15.970000 ( 15.485036)\nthreaded, 1 conn, 8 threads, therubyracer (V8)           11.300000   0.200000  11.500000 ( 11.143031)\nthreaded, 2 conn, 8 threads, therubyracer (V8)           13.400000   0.270000  13.670000 ( 13.197583)\nthreaded, 4 conn, 8 threads, therubyracer (V8)           15.700000   0.350000  16.050000 ( 15.256964)\nthreaded, 8 conn, 8 threads, therubyracer (V8)           18.940000   0.440000  19.380000 ( 18.190847)\nthreaded, 10 conn, 8 threads, therubyracer (V8)          18.520000   0.330000  18.850000 ( 18.015099)\n. I replaced the JS code that is being rendered with\nvar SlowComponent = React.createClass({                                 \n  render: function() {                                                  \n    var i, items, rand;                                                 \n    rand = 0;                                                           \n    i = 0;                                                              \n    items = [];                                                         \n    while (i < 10) {                                                    \n      items.push(React.createElement('div', i + ' :)'));                \n      i++;                                                              \n    }                                                                   \n    return React.createElement('div', items);                           \n  }                                                                     \n})\nand now I get the following results for JRuby\n$ ruby -I lib benchmarks/server_rendering_benchmark.rb  20000                                                                                                                                                                                                                                                                \n                                                              user     system      total        real\nthreaded, 1 conn, 2 threads, therubyrhino (Rhino)        32.790000   0.290000  33.080000 ( 22.342218)\nthreaded, 2 conn, 2 threads, therubyrhino (Rhino)        21.270000   0.040000  21.310000 (  9.462662)\nthreaded, 4 conn, 2 threads, therubyrhino (Rhino)        17.340000   0.020000  17.360000 (  8.563669)\nthreaded, 8 conn, 2 threads, therubyrhino (Rhino)        17.390000   0.030000  17.420000 (  8.699205)\nthreaded, 10 conn, 2 threads, therubyrhino (Rhino)       18.570000   0.030000  18.600000 (  9.317547)\nthreaded, 1 conn, 4 threads, therubyrhino (Rhino)        19.690000   0.370000  20.060000 ( 17.576572)\nthreaded, 2 conn, 4 threads, therubyrhino (Rhino)        20.380000   0.180000  20.560000 (  9.834104)\nthreaded, 4 conn, 4 threads, therubyrhino (Rhino)        20.540000   0.050000  20.590000 (  5.342520)\nthreaded, 8 conn, 4 threads, therubyrhino (Rhino)        20.680000   0.020000  20.700000 (  5.593378)\nthreaded, 10 conn, 4 threads, therubyrhino (Rhino)       22.150000   0.050000  22.200000 (  5.902722)\nand for MRI\n$ ruby -I lib benchmarks/server_rendering_benchmark.rb  20000\n                                                              user     system      total        real\nthreaded, 1 conn, 2 threads, therubyracer (V8)           13.300000   0.120000  13.420000 ( 13.034083)\nthreaded, 2 conn, 2 threads, therubyracer (V8)           14.440000   0.160000  14.600000 ( 14.172245)\nthreaded, 4 conn, 2 threads, therubyracer (V8)           14.490000   0.230000  14.720000 ( 14.261971)\nthreaded, 8 conn, 2 threads, therubyracer (V8)           14.850000   0.180000  15.030000 ( 14.610182)\nthreaded, 10 conn, 2 threads, therubyracer (V8)          15.150000   0.190000  15.340000 ( 14.904837)\nthreaded, 1 conn, 4 threads, therubyracer (V8)           14.700000   0.190000  14.890000 ( 14.527581)\nthreaded, 2 conn, 4 threads, therubyracer (V8)           17.250000   0.200000  17.450000 ( 17.055383)\nthreaded, 4 conn, 4 threads, therubyracer (V8)           19.420000   0.260000  19.680000 ( 19.221227)\nthreaded, 8 conn, 4 threads, therubyracer (V8)           18.680000   0.210000  18.890000 ( 18.426053)\nthreaded, 10 conn, 4 threads, therubyracer (V8)          19.380000   0.200000  19.580000 ( 19.127787)\nThose results make more sense, so my conclusion is that Math.random() causes drastically different performance on the two JS runtimes.\n. :+1: \nPerhaps also include a note about the deadlock condition if you configure Pool Size > 1 with RubyRacer on MRI.\n. :+1: \nCurrently our approach to setting React context data on a top level component is to set some properties that are used as 'initial data' for a component that are transferred into the context object.\nHaving this means we could forgo that convention and be able to specify the React context in much the same way we would specify properties, with the benefit of not having to mix data with properties/state.\n. I would be careful using a glob to find the pre-compiled assets. sprockets-rails makes no guarantee that there won't be more than one version of the asset file. It specifically keeps around older copies on a rolling basis that is configurable. \nSee the documentation here for the specifics.\nMy workaround for that was to use a new ActionView::Base instance to call asset_path on, like so\nActionView::Base.new.asset_path('components.js')\n. The behavior @rmosolgo is talking about occurs because of this line. Unfortunately that method of retrieving the contents of an asset doesn't respect pre-compiled assets, so the first time that content is requested sprockets will compile it for you and then hand over the content. \nYou can see a patch for this particular problem here. This allows react-rails to read the pre-compiled asset off disk instead of asking sprockets to compile it for you. Note that that repository and branch are outdated compared to reactjs/react-rails master branch, it is still on the React 0.13 release. \n. No worries, I was just pointing that out in case you wanted to use that fork directly and were expecting to get 0.14.\n. The performance gains are dubious at best given the usage of this code, It's mostly run once per page load. Also, if you were to look into the implementation of forEach I would imagine it's going to be something similar to what the for loop is doing manually, so you're not really saving anything, just moving the logic to a place where a developer can't see it.\nI would also argue that the code is not more readable, first of all you need to understand what 'call' is doing and why there is a seemingly random empty array being used. \nI think this is a case of: \"If it ain't broke, don't fix it.\"\n. FWIW that behavior is changing in React 15. It will render comments instead.\nSee https://facebook.github.io/react/blog/2016/03/07/react-v15-rc1.html#rendering-null-now-uses-comment-nodes\n. ",
    "toolmantim": "We've just removed this gem from our app altogether\u2026\n. ",
    "byroot": "I wasn't using sprockets 3 AFAIK. I'll try to take a look at this issue during the week end. \n. yeah forcing sprockets 3 is not realistic before a year or 2. But don't worry I'm fairly certain this can be fixed.\n. Ok, so I'm kinda stupid: https://github.com/rails/sprockets-rails/blob/627db8302914666ee212c823e50ed3bc1fc4a8f8/lib/sprockets/railtie.rb#L116-L118\nsprockets-rails freeze the manifest on after_initialize, so it was working for us because react-rails afer_initialize callback was evaled before sprockets-rails.\nUnfortunately we can't do it in before_initialize because the sprockets environment is not yet initialize at that point.\nIt look like doing from a regular initializer work, but I'm not 100% sure. @mchristen could you please test this branch: https://github.com/reactjs/react-rails/pull/267 ?\n. I'm glad you like it. I'll update the test and PR the related change to react-source\n. I already started a PR on react-source, and it feels like the cleanest solution anyway. I'm no grunt expert though so it's not easy :p \n. So @rmosolgo, On second though the rake task is probably simpler and do not require to release react-source nor to break it's compatibility.\nSo I pushed 8e167289177627f23c77a8793d55b665bc984e0a that does just that. The same tests are still broken, but I'll see what I can do to fix them.\n. Well, actually I moved react-source as a development dependency only since It's not needed at runtime anymore.\nSo yes using the same strategy than pyreact sounds good. I'll do that then, it will simplify even more.\n. Ok, so I vendored everything using bower. I also fixed the \"environment drop-in path\" test case (the rails app assets directories have priority over the gem).\nThere is 2 remaining broken test cases, but I don't really understand them. @rmosolgo your help would be appreciated to figure out what wrong with thoses.\n. Ok, so out of the 2 failures, one already fail on master for me, so it must be a problem with my setup.\nAs for the second one (drop-in files), I think I already cover that in another test. The coverage lost though is the test that assert that the development version is served. Not sure if it's critical.\n. > If it's a new project, lib/assets/react-source/ would be empty, right?\nNot sure what you mean by that. lib/assets/react-source/ stays in the react-rails gem, not in the hosting app. But whatever since your next point is good.\n\nI think we could commit that instead of vendor/react, since the gem doesn't depend on those files.\n\nThat's a good point and it also fix one issue I have with the current state of the PR, which is that you can't use it as a git gem because the files are created during the build.\nI'll update this PR in a minute. Hang on.\n. @rmosolgo should be good now.\nThe rake react:upload task will update react to the latest released version and copy files in the proper place.\n. For the record as just tested this branch in my app as a git gem, and it dies work as intended.\n. > The only remaining thing is this: is there any test that the directory approach really works?\nIt's really hard to test since sprockets caches everything. But I can give it a try.\nOn a side note. It seems that the path is appended too late. I tried deploying  07eec91 and assets:precompile is failing in production:\nTypeError: can't modify immutable index\n.../shared/bundle/ruby/2.1.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:81:in `expire_index!'\n.../shared/bundle/ruby/2.1.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:109:in `append_path'\n.../shared/bundle/ruby/2.1.0/bundler/gems/react-rails-07eec911ed95/lib/react/rails/railtie.rb:39:in `block in <class:Railtie>'\nI'll find a way to fix this.\n. 260cb28 fixed it. It's just that sprockets freeze it's environment on after_initialize.\nI successfully deployed 260cb28 in production.\n. Grumble. Of course that change broke the same tests again....\nI'm quite busy today, but I'll fix the tests as soon as I have a bit of time.\n. f5e47eddb7b6c5e5a67605266777aa21865f9ffc fixes the new precompile test under 3.2.\n. And 1c92a452c861ab14aad797fb6300c62e010cef09 test that it's the development version that is loaded. I don't know How I could assert that different settings load different version since it would require to reboot rails :/\nWould that be good enough for you?\n. Oh the cache issue is interesting, I totally didn't think about it.\nIt's probably a minor issue, but quite annoying. What we could do is to append the react-rails settings to the sprockets environment version: https://github.com/rails/sprockets-rails/blob/656c9d266a0c5d29d19c566831c8d7daa2f2005d/lib/sprockets/railtie.rb#L91-L97\n. I think https://github.com/byroot/react-rails/commit/b3ee527ea11949819d9c0c38aef4a724d452797f would solve the issue. Let me know if you want it included in this PR.\n. My pleasure :)\n. I rebased on top of master now that #254 is merged. But it seems tests are failing. I'll find some time to fix them.\n. No the problem is that app.assets is nil. Probably because the code I added is too soon in the initialization chain.\n. I just moved that code on after_initialize. It should go green now. I just keep forgetting to use appraisal to test my changes.\n. ",
    "arunthampi": "I'm using Ruby 2.1.2, Rails 4.2.0 and React-Rails 1.0.0\nI narrowed it down to this piece of code (Coffeescript) that seems to be causing the problem:\nhttps://gist.github.com/arunthampi/974ef18b1f5023343c38\nThis is inside the render method of the component and again, the puzzling thing is that the crash happens only intermittently. Any pointers are much appreciated, been stuck with this for the last few hours.\n. hmm yeah, coffeescript compilation produces valid JS, I'm passing in properties to the react component as JSON via data-react-props too.\nWill keep digging to see if I can find anything else.\n. Hi the problem went away after I upgraded OS X to the latest version.\nHaven't seen the error since.\nWill close for now.\nOn Tue, May 26, 2015 at 9:18 PM, Robert Mosolgo notifications@github.com\nwrote:\n\n@arunthampi https://github.com/arunthampi any word on this issue? Did\nit get worked out OK?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/255#issuecomment-105749947\n.\n\n\nIt's better to be a pirate than join the Navy - Steve Jobs\nhttp://mclov.in | @iamclovin\n. ",
    "Marthyn": "This is the component it's trying to render, problem is i can't find 'foo' anywhere, also seems very weird that would be used as a variable name (outside of specs)\n``` js\n* @jsx React.DOM\nwindow.AccommodationsIndex = React.createClass\n  getDefaultProps: ->\n    options: {}\n    initialMapState: null\n    map: null\ngetInitialState: ->\n    filters: null\n    clusters: []\n    paged_accommodations: @props.paged_accommodations\n    bounds: null\n    page: parseInt(@props.page) || 0\n    filtered_url: null\n    map_state: null\n# We initialize the router in \"willMount\" so we already have\n  # filters when the component is going to render\n  componentWillMount: ->\n    I18n.locale = @props.locale\n    self = @\n    return unless Router?\n    @router = Router\n      '/(.*)': (filters) ->\n        booleans = if history.pushState\n          filters.split('/')[1..]\n        else\n          filters.substring(0, filters.indexOf('?')).split('/')\n    params = self.getFiltersFromQuery window.location.search.substring(1)\n\n    # IE9 fix\n    unless window.location.search.substring(1)\n      hash = window.location.hash\n      params = self.getFiltersFromQuery hash.slice(hash.indexOf(\"?\") + 1)\n\n    query = self.baseEmptyFilters()\n\n    _.each self.listMapping(), (key, type) ->\n      return unless params.hasOwnProperty(key) and params[key] != \"\"\n      booleans = booleans.concat params[key].split('|')\n\n    booleans = booleans.filter (b) -> b?\n\n    booleans = booleans.map (boolean) ->\n      for k, v of I18n.t('search.boolean_slugs')\n        if boolean == v && _.contains self.props.options.boolean_filters, k\n          boolean = k\n          break\n\n      boolean\n\n    _.each booleans, (boolean) ->\n      query.booleans.push boolean if _.contains self.props.options.boolean_filters, boolean\n      query.regions.push boolean if _.contains self.props.options.regions.map((a) -> (a.slug)), boolean\n      query.areas.push boolean if _.contains self.props.options.areas.map((a) -> (a.slug)), boolean\n      query.departments.push boolean if _.contains self.props.options.departments.map((a) -> (a.slug)), boolean\n      query.languages.push boolean if _.contains self.props.options.language_filters, boolean\n      query.object_types.push boolean if _.contains self.props.options.object_types, boolean\n      query.subobject_types.push boolean if _.contains self.props.options.object_sub_types, boolean\n\n    _.each self.props.options.scalar_filters, (filter) ->\n      query[filter] = params[filter] if params[filter]\n\n    map_state = self.mapStateFromParams(params)\n\n    self.setState filters: self.sanitizeFilters(query), page: parseInt(params.page || 1)\n    self.setState map_state: map_state || self.props.initialMapState unless (map_state || self.props.initialMapState) is null\n\n@router.configure html5history: true\n@router.init()\n\nmapStateFromParams: (params) ->\n    map_state = params.ms\n    return null unless map_state\n    map_state = map_state.split ','\n    return null unless map_state.length == 3\nzoom: parseInt(map_state[0])\nlat: parseFloat(map_state[1])\nlng: parseFloat(map_state[2])\n\nsanitizeFilters: (filters) ->\n    sanatized = @baseEmptyFilters()\nself = @\n\n_.each filters, (value, filter) ->\n  if self.isValidListType(filter)\n    sanatized[filter] = _.flatten [value]\n    return\n\n  return unless _.contains(self.props.options.scalar_filters, filter) && filters[filter]\n  sanatized[filter] = value\n  sanatized[filter] = parseInt(sanatized[filter]) if isFinite(sanatized[filter])\n\nsanatized\n\nbaseEmptyFilters: ->\n    filters = {}\n    _.each @validListTypes(), (key) ->\n      filters[key] = []\n    filters\ngetFiltersFromQuery: (searchQuery) ->\n    match = ''\n    pl = /+/g\n    search = /([^&=]+)=?([^&]*)/g\n    decode = (s) ->\n      decodeURIComponent(s.replace(pl, \" \"))\nfilters = {}\nwhile match = search.exec(searchQuery)\n  filters[decode(match[1])] = decode(match[2])\n\nfilters\n\nupdateFilteredPagedAccommodations: ->\n    self = @\n    url = @props.options.url + @getInternalUriForCurrentState()\n    url += '&bounds=' + @state.bounds if @state.bounds\n@paged_request.abort() if @paged_request\n@paged_request = $.ajax\n  url: url\n  dataType: 'json'\n  success: (data) ->\n    self.setState paged_accommodations: data, highlightedAccommodation: null\n\ncreatePromiseFor: (nextState) ->\n    deferred = $.Deferred()\n    return deferred.resolve() if !nextState.filters or !nextState.filters.free_text or nextState.filters.free_text == @state.filters.free_text\nclearTimeout @props.timer if @props.timer\n\n@props.timer = setTimeout ->\n  deferred.resolve()\n, 500\n\ndeferred.promise()\n\ncomponentDidUpdate: (nextProps, nextState) ->\n    self = @\n    @createPromiseFor(nextState).then ->\n      filters_equal = .isEqual(self.state.filters, nextState.filters)\n      bounds_equal  = .isEqual(self.state.bounds, nextState.bounds)\n      page_equal    = parseInt(self.state.page) == parseInt(nextState.page)\n      map_state_eq  = _.isEqual(self.state.map_state, nextState.map_state)\n  self.router.setRoute self.getRouteForCurrentState() unless filters_equal && page_equal && map_state_eq\n  self.updateClusters() unless (filters_equal && bounds_equal) || !self.state.map_state\n  self.updateFilteredPagedAccommodations() unless filters_equal && bounds_equal && page_equal\n  self.trackPageview(self.state.filters['free_text']) unless _.isEqual(self.state.filters['free_text'], nextState.filters['free_text'])\n\ntrackPageview: (free_text) ->\n    _gaq.push(['_trackPageview', '/?free_text='+free_text]);\nupdateClusters: ->\n    self = @\n    url = @props.options.maps_url + @getInternalUriForCurrentState()\n    url += '&bounds=' + @state.bounds if @state.bounds\n    url += '&zoom=' + @state.map_state.zoom\n@filtered_request.abort() if @filtered_request\n@filtered_request = $.ajax\n  url: url\n  dataType: 'json'\n  success: (data) ->\n    self.setState clusters: data, highlightedAccommodation: null\n\nhandleFormChange: (filters) ->\n    @setState filters: @sanitizeFilters(filters), page: 1\nlistMapping: ->\n    booleans: 'b'\n    languages: 'l'\n    regions: 'r'\n    departments: 'd'\n    areas: 'a'\n    object_types: 't'\n    subobject_types: 'st'\nvalidListTypes: ->\n    _.keys @listMapping()\nisValidListType: (type) ->\n    _.contains(@validListTypes(), type) == true\ngetUriFor: (filters, page = 1, map_state = null, alwaysAddMapState = false) ->\n    uri = {}\n    self = @\n    _.each filters, (value, key) ->\n      return unless value\n      uri[key] = value unless self.isValidListType(key)\n_.each @listMapping(), (qv, key) ->\n  uri[qv] = filters[key].join '|' unless !filters or !filters[key] or filters[key] == null or filters[key] == undefined or filters[key].length == 0\n\nuri.page = page if page > 1\nuri.ms = @mapStateToUrlValue(map_state) if map_state && (alwaysAddMapState || (!_.isEqual(map_state, @props.initialMapState) && @props.initialMapState))\n\n\"?\" + $.param uri\n\nmapStateToUrlValue: (map_state) ->\n    [map_state.zoom, map_state.lat, map_state.lng].join ','\ngetRouteForCurrentState: () ->\n    return @props.options.base_url unless @state.filters\n    filters = _.clone @state.filters\n    filters.booleans = filters.booleans.map (boolean) ->\n      I18n.t('search.boolean_slugs.' + boolean, {defaultValue: boolean})\nuri = @props.options.base_url\n\nbooleans = []\n_.each ['booleans', 'regions', 'departments', 'areas', 'object_types', 'subobject_types'], (type) ->\n  booleans = booleans.concat(filters[type])\n  filters[type] = []\n\nif history.pushState\n  uri + \"/\" + booleans.join('/') + @getUriFor(filters, @state.page, @state.map_state)\nelse\n  booleans.join('/') + @getUriFor(filters, @state.page, @state.map_state)\n\ngetInternalUriForCurrentState: () ->\n    @getUriFor(@state.filters, @state.page, @state.map_state || @props.initialMapState, true)\nhandleVisibleAccommodationsChange: (bounds) ->\n    bounds = bounds.toUrlValue() if typeof(bounds) == 'object'\n    @setState page: 1 if bounds != @state.bounds && @state.bounds?\n    @setState bounds: bounds\nhandleHighlightedAccommodation: (accommodation) ->\n    self = @\n    setTimeout ->\n      self.setState {highlightedAccommodation: accommodation}\n    , 500\nhandlePagination: (page) ->\n    @setState page: page\nhandleMapStateChange: (mapState) ->\n    @setState map_state: mapState\nshowAllOnMap: ->\n    @refs.google_maps.showAllOnMap()\nsetInitialMapState: (state) ->\n    @props.initialMapState = state unless @props.initialMapState\nrender: ->\n    total_without_bounds = if this.state.paged_accommodations.facets then this.state.paged_accommodations.facets.bounds else 0\npage = @state.page || 1\nmap = @refs.google_maps.state.map if @refs.google_maps\n\nform = switch @props.options.type\n  when 'gites'\n    `<GiteFacetForm options={this.props.options} map={map} filters={this.state.filters} results={total_without_bounds} facets={this.state.paged_accommodations.facets} onFormChange={this.handleFormChange} onHandleFormChange={this.handleFormChange} />`\n  when 'bed_and_breakfasts'\n    `<BNBFacetForm options={this.props.options} map={map} filters={this.state.filters} results={total_without_bounds} facets={this.state.paged_accommodations.facets} onFormChange={this.handleFormChange} onHandleFormChange={this.handleFormChange} />`\n  when 'sales'\n    `<SaleFacetForm options={this.props.options} map={map} filters={this.state.filters} results={total_without_bounds} facets={this.state.paged_accommodations.facets} onFormChange={this.handleFormChange} onHandleFormChange={this.handleFormChange} />`\n\npaged_total = this.state.paged_accommodations.total\n\nhumanized_results = if paged_total > total_without_bounds\n  ''\nelse if paged_total > 1000\n  I18n.t(\"search.results_title_limited_#{@props.options.type}\")\nelse if paged_total == 0 && total_without_bounds > 0\n  if total_without_bounds > 1000\n    I18n.t(\"search.results_title_none_visible_limited_#{@props.options.type}\")\n  else\n    I18n.t(\"search.results_title_none_visible_#{@props.options.type}\", {count: total_without_bounds})\nelse\n  I18n.t(\"search.results_title_#{@props.options.type}\", {count: paged_total})\n\nresults_klasses = ['results-counter']\nif paged_total == 0 && total_without_bounds > 0\n  show_all = `<div className=\"btn-cta\" onClick={this.showAllOnMap}>{I18n.t('search.show_complete_selection')}</div>`\n  results_klasses.push 'show_all'\n\nmap_state = @state.map_state || @props.initialMapState\n\n`<div className=\"accommodations_facets\">\n  <AccommodationsGoogleMaps\n    baseLink={this.props.options.base_advert_url}\n    setInitialMapState={this.setInitialMapState}\n    state={map_state}\n    ref=\"google_maps\"\n    setState={this.handleMapStateChange}\n    options={this.props.map_options}\n    highlightedAccommodation={this.state.highlightedAccommodation}\n    setBounds={this.handleVisibleAccommodationsChange}\n    clusters={this.state.clusters.results}\n  />\n  <div className=\"facets\">\n    <div className=\"facets-inner\">\n      {form}\n      <div className={results_klasses.join(' ')}>\n        {humanized_results}\n        {show_all}\n      </div>\n      <AccommodationsList total={total_without_bounds} options={this.props.options} onPaginate={this.handlePagination} onAccommodationChange={this.handleHighlightedAccommodation} accommodations={this.state.paged_accommodations.adverts} />\n      <AccommodationsPagination url={this.getRouteForCurrentState()} page={page} onPaginate={this.handlePagination} total={paged_total} />\n    </div>\n  </div>\n</div>`\n\n``\n. Btw when i set prerender to false i of course do not get the error.\n. Another developer on our project fixed this, i don't remember how but it was a bug on our side. Sorry to have bothered you :)\n.rm -rf tmp/cache` was the solution i just heard :angel: :innocent: \n. ",
    "krzysiek1507": "Probably \"window\" is a problem. In server side window doesn't exists.\n. You can use https://github.com/fnando/i18n-js\n. Did you try without import?\n. In application.js\n//= library\nIn component.js if namespaced\n```\nvar OtherComponent = Namespace.OtherComponent\nclass Blah extends OtherComponent {\n ...\n}\n``\n. Missing comma after`\njavascript\nReact.render(<Main />, document.getElementById('react'))\n. @connorshea you can use https://rails-assets.org/ Type react, add to Gemfile and bundle install. ;)\n. @renchap there is a comment about it https://github.com/reactjs/react-rails/blob/master/lib/react/rails/controller_lifecycle.rb#L7\n. @rmosolgo gemfiles/rails_5_mini_racer.gemfile is missing in gemfiles section ;)\n. @rmosolgo what about this? \n. @rmosolgo :)\n. @rmosolgo thanks!\n. Hi @BookOfGreg I think, I wanted to handle it in initializer here.  IIRC, compile was raise ProgremError when some of npm packages wanted to access properties of window in SSR.. I'm not sure if it is doable. Now we call JS renderer with a JS code as a string so we lose any information about the location of the code.. @ttanimichi could you please provide the reason?. ``` ruby\n(app.assets || Sprockets).register_engine '.jsx', React::JSX::Template\nMaybe this way?\n`````\n. +1\n.Use yarn`? ;). ",
    "ramyathulasingam": "@asiniy with gem i18n-js, I was able to use <h2>{I18n.t ('foo.key')}</h2> inside my render block.\n. ",
    "walfly": "I reinstalled it and didn't have this problem anymore.\n. ",
    "barefootford": "@rmosolgo Before you do server pre-rendering, do you get real React errors/debugging? Right now whenever there is a React error in my app, the component doesn't render and fails silently. No errors on rails server or client side in chrome console.\n. I'm not sure if there is something that I'm configuring differently, but I had the same story with the first project I used with react-rails, but on my second one I'm getting errors server side and in the console depending on the issue. I haven't had time to debug and figure out what the difference is.\n. I had this same error yesterday and was getting really frustrated so to save some future headaches for someone else:\nI renamed some components yesterday and while doing so accidentally left off .js.\nEx:\nold_name.js.jsx\nnew_name.jsx\nIt will work in development and doesn't throw anything in console, but will break on production asset compilation and give the same error as above (Not complaining about any js or jsx files). Tricky.\n. ",
    "axhamre": "I second @barefootford, whatever error in React I only get \"SyntaxError: unknown:\" and reference to javascript_include_tag 'application': \n\nIt would be so helpful to get normal React errors! :)\n. This is how I eventually got it to work:\n```\nclass MyComponent extends React.Component {\n}\nMyComponent.propTypes = {\n  someProperty: React.PropTypes.string.isRequired,\n  someOtherProperty: React.PropTypes.array.isRequired\n};\n```\n. @rmosolgo Any guesses when this could be out of the way? \nI got the same error on a fresh Rails 5.1.0.rc1 installation, following the three steps to install webpacker + react-rails.. Don't know if that was a friendly invitation to participate? In any case, I'm a noob and even if that one looked easy like a Sunday morning I better stay put. \ud83d\ude2c\nBtw, thx a bunch for your amazing work!. I have the same setup (Webpacker 3.0.1, Rails 5.1.4, react-rails) and get a similar error message after doing bundle update:\nreact.source.js:3 Uncaught ReferenceError: module is not defined\nat.\n",
    "yuku": "same problem here. In my case, I patch ComponentMount as follows to retry rendering with prerender: false when something goes wrong during server rendering:\n``` rb\nconfig/initializers/react-rails.rb\nclass React::Rails::ComponentMount\n  def react_component_with_auto_retry(name, props = {}, options = {}, &block)\n    react_component_without_auto_retry(name, props, options, &block)\n  rescue\n    if options[:prerender] && Rails.env.development?\n      react_component_without_auto_retry(name, props, options.merge(prerender: false), &block)\n    else\n      raise\n    end\n  end\nalias_method_chain :react_component, :auto_retry\nend\n```\n. done\n. ",
    "shaimo": "Any other insight as to how to debug with prerender:true. I'm getting an error but there is no indication whatsover where it comes from so I really don't know what to do next. It all works well with no prerender... Thanks!\n. I guess renderToString itself is supposed to mount the component and call componentWillMount. For some reason I'm not seeing this but I guess it's not a react-rails issue anyway, so closing it...\n. ",
    "tyler-boyd": "@shaimo Same thing here. No JS warnings without prerender, but as soon as I turn it on I get errors \"can't parse [...]\"\nI'll try updating my javascript runtime, but I am not having any luck yet.\n. ",
    "jhubert": "I used gem 'react-rails', '~> 1.0' to add react-rails, based on the current README in master. Whoops.\nIt now makes a lot of sense why my libs weren't being loaded properly. Trying it now and will let you know if I get it. Thanks for the quick response. :grinning: \n. Confirmed! Using the right version solved it. It works with both the version 1.0 using component_filenames and master using files. I'll stick with v1.0 for now so that I'm not basing my application off of an evolving codebase, but I look forward to updating on the next release.\nThanks! :rocket: \n. You may consider changing the gem 'react-rails', '~> 1.0' line in the README to \ngem 'react-rails',\n  github: 'reactjs/react-rails',\n  branch: 'master'\nUntil they are back in sync. I think that's where my confusion was coming from as well. I didn't realize that I wasn't using the version that matched the readme since I was following the readme to set it up.\n. ",
    "firedev": "Sorry, I am facing a similar issue, but without namespacing. \nClasses are prefixed with @, in application.rb I use both component_filenames AND files, yet the component won't pre-render. \nEncountered error \"ReferenceError: Can't find variable: CreateNewForm\" when prerendering CreateNewForm\nAnything I am misssing? I am using the default components.js, with require_tree ./components. What else could go wrong?\n. Turns out components.js is a little sensitive. You can't have anything other than require and require_tree in it. So after re-arranging the files it worked.\n. ",
    "benpickles": "Not sure why Travis is failing (undefined method api_only doesn't seem to mean anything in react-rails or rails itself), possibly just need to restart the job.\n. ",
    "jdkealy": "yes if i remove the third parameter it renders fine\nOn Mon, May 18, 2015 at 5:54 PM, Robert Mosolgo notifications@github.com\nwrote:\n\nThe ruby looks A-OK, does the component render without errors without\nprerender?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/271#issuecomment-103224881\n.\n\n\nSincerely\n-John-\n. https://gist.github.com/jdkealy/43d9d13393897057c013\n. Looking at my component files, I can see a number of ways this could have been the error. Perhaps I need to look there... Just the error itself had me going down the ruby route. \n. ",
    "nottombrown": "Whoops, totally posted in the wrong repo \n. ",
    "talmobi": "Had the type.toUpperCase error and turns out I had forgot a module.exports at the end of my jsx file. So helped me at least - so thanks (:\n. ",
    "hellatan": "@talmobi ha. that was my exact issue. Such a stupid, simple oversight!\n. ",
    "ncri": "Hm, I have the same error. Odd. Just installed react-rails and generated a component using the generator. So I shouldn't have to modify anything? Any advice?\n. Okay, was a name clash. I had already a variable named the same as my component. Would be really helpful to have a better error here... ;-) Took me a while to figure it out.\n. Same here, but a different error from one of my initializers. Seems a class loading issue, as that initializer works fine when loading the app normally. I will install manually...\n. Btw.: To avoid name clashes I would call the folder rather react_components than components.\n. One more thing: :) The generator assumes the manifest is called application.js. Not true for our projects. It is either application.js.coffee or application.js.coffee.erb here. Would be cool if the generator could also recognize those.\n. Ah, turns out the generator error here is not limited to the generator.\nIn fact I cannot start up the app anymore after installing the gem:\n/config/initializers/will_paginate.rb:3:in `<top (required)>': uninitialized constant WillPaginate::ActionView (NameError)\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/engine.rb:652:in `block in load_config_initializer'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/activesupport-4.2.2/lib/active_support/notifications.rb:166:in `instrument'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/engine.rb:651:in `load_config_initializer'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/engine.rb:616:in `block (2 levels) in <class:Engine>'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/engine.rb:615:in `each'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/engine.rb:615:in `block in <class:Engine>'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:30:in `instance_exec'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:30:in `run'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:55:in `block in run_initializers'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:226:in `block in tsort_each'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:348:in `block (2 levels) in each_strongly_connected_component'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:420:in `block (2 levels) in each_strongly_connected_component_from'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:420:in `block (2 levels) in each_strongly_connected_component_from'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:429:in `each_strongly_connected_component_from'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:419:in `block in each_strongly_connected_component_from'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:44:in `each'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:44:in `tsort_each_child'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:413:in `call'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:413:in `each_strongly_connected_component_from'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:419:in `block in each_strongly_connected_component_from'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:44:in `each'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:44:in `tsort_each_child'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:413:in `call'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:413:in `each_strongly_connected_component_from'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:347:in `block in each_strongly_connected_component'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:345:in `each'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:345:in `call'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:345:in `each_strongly_connected_component'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:224:in `tsort_each'\n    from /Users/nico/.rvm/rubies/ruby-2.2.2/lib/ruby/2.2.0/tsort.rb:203:in `tsort_each'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/initializable.rb:54:in `run_initializers'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/application.rb:352:in `initialize!'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/railtie.rb:194:in `public_send'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/railtie.rb:194:in `method_missing'\n    from /Users/nico/Rails/new_yousty/yousty/config/environment.rb:7:in `<top (required)>'\n    from /Users/nico/Rails/new_yousty/yousty/config.ru:3:in `block in <main>'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/builder.rb:55:in `instance_eval'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/builder.rb:55:in `initialize'\n    from /Users/nico/Rails/new_yousty/yousty/config.ru:in `new'\n    from /Users/nico/Rails/new_yousty/yousty/config.ru:in `<main>'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/builder.rb:49:in `eval'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/builder.rb:49:in `new_from_string'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/builder.rb:40:in `parse_file'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/server.rb:299:in `build_app_and_options_from_config'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/server.rb:208:in `app'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/server.rb:61:in `app'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/rack-1.6.2/lib/rack/server.rb:336:in `wrapped_app'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/server.rb:139:in `log_to_stdout'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/server.rb:78:in `start'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/commands_tasks.rb:80:in `block in server'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/commands_tasks.rb:75:in `tap'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/commands_tasks.rb:75:in `server'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands/commands_tasks.rb:39:in `run_command!'\n    from /Users/nico/.rvm/gems/ruby-2.2.2/gems/railties-4.2.2/lib/rails/commands.rb:17:in `<top (required)>'\n    from bin/rails:4:in `require'\n    from bin/rails:4:in `<main>'\n. Fixed it, had to include the will_paginate gem before the react-rails gem in the gemfile.\n. Yep, odd. But I did have it before. :) I think it probably has to do with what react-rails does when it is required. It seems to load my initializers - not every gem does that. And if the will_paginate gem is not loaded first, the initializer breaks.\n. ",
    "Ricardonacif": "lol @ncri the same happened to me! Thanks for posting that, otherwise I'd take a few years to discover.\n. ",
    "catmando": "I failed to turn prerender on for these components.... my bad.\n. I'm getting a parse error.   If I change the name of the component from Namespace::Component to Namespace_Component (just in the source file) everything is fine.\nCould I have different version of ruby_racer ? \n. @rmosologo   I am getting react.rb (opal-react) working with react-rails (works great actually!)  I added a class method so that in an opal react component you can \"export\" a component into the javascript namespace, so that you can use it with react-rails.  By default the export uses the class name.  So for example\nruby\nmodule Components\n  module Navigation\n    class Chat\n      include React::Component\n      export_component # by default will assign component to window['Components::Navigation::Chat']\n      ...\n    end\n  end\nend\nLooking at the code I am guessing that window[value] may work differently between javascript implementations, so that on the server it breaks, but on chrome it works fine.\nAnyway I will change it so that Foo::Bar translates to Foo.Bar\n. went back and tried again today, and everything worked... must have been forgetting to restart server or something.\nPull request shortly\n. So I submitted a PR to auto change :: to .  Hope it can be accepted.\nIn the mean time I have noted a number of times that it does seem like it takes multiple changes and/or a server restart before certain changes to the calls to <%= react_component %> helper take effect.  Is that a known problem (or perhaps I shouldn't drink so much?)\n. Thanks for the feedback!  \nWe are working hard on the react.rb gem that gives a full ruby wrapper to react (using the opal transpiler)  So the hope would be YES there will be LOTS of people wanting to do this.\nThat SAID your approach is much better.  I should be able include your suggestion into the react.rb gem with some conditional logic that checks to see if react-rails is being used.    I don't want react.rb to depend on react-rails, but likewise you should not have dependencies in react-rails!\nThanks again!\n. Yes I am great with that approach... All that the code above is doing is a little preprocessing of the incoming hash, plus it does need to get access to the underlying evaluator.  If the API could present the base render function, and access to the evaluator then no PR is needed.\nIs that API available today?\n. Okay!  Probably get back to cleaning this up in a couple of weeks (I've got this working good enough for us for now) looking forward to it!\n. Did this issue ever get resolved?  I.e. is there any way to add webpack  assets to react-rails and have pre-rerendering work?\n. Seems like a huge security risk\n. we render a page for user 1, then we render another page for a non-logged in user.  It seems like it would be very easy to have bugs in the code where the state left behind from user 1's rendering is accessible to the second rendering.\nUnderstand why its being done this way... but...\n. it does not work for us either...\n. Okay I spent 3 hours on this today, and figured this out:\na) it does work (at least in version 9)\nb) however you might have to do something like this in development.rb\nconfig.watchable_files.concat Dir[\"#{config.root}/app/views/**/*.rb\"] (or.jsx or whatever)\nIn our case it was not working because we are using opal (ruby on the client - .rb files) and we keep the files in app/views.  Rails does not normally look for changes to .rb files in this location so was not triggering the reloading.\nTo test if you have this situation try this:\na) change one of your client react files... reload the browser.  Does the code change in prerendering?  If it does then why are you reading this?\nb) if the code does not change in prerendering, try now changing some rails file (like a controller).  Reload the browser.  If prerendering now gets reloaded then its just a matter of rails not seeing your file changing (changing the controller forces the reload.)\nc) if it still doesn't reload the prerenendering env. then there is something else wrong with your configuration (not sure what as its is pretty simple.)\n. @rmosolgo Thanks for considering this... would it be possible to reword this to remove your concerns?  Possibly just stating clearly that it is a separate gem, with a separate OSS team.   I really believe this is a win-win.  There are a lot of ruby folks who might try react if they could stay in ruby, and the more people using react the better off we all are.\n. I would fix it in the gem properly... I just did it that way as a quick test... let me see if I can give you a PR\nOh and I would guess there has to be at least one message.... the problem is I am using reactrb which always puts at least one message in there, so we ALWAYS see it :-)\nIts been that way for over a year, just have not gotten around till now to investigate it...\n. So I looked at the way this works, and its going to be tough to reorganize things internally:\nthe prerenderer is what packages this all up as a rendered component followed by a script block.\nThe redesign would want to look like something where the outer wrapper component tag, and options is passed into the pre-rerender.\nBut this would then be a breaking change to the pre-rerenderer which I think by design is meant to be an API!\nSo I hate to say it but my patch may be the only practical way forward.\nDo you want me to do a PR that updates the string before its returned?\n. yeah I agree there are solutions which are much better, but they will break the API won't they?  \nI guess the replay_logger solution would work assuming that if no \"logger\" is supplied the API works as today, and adds the logging internally like it does now.  \nOkay I can give this a try but it will be in a week or so...\n. You can use http://ruby-hyperloop.io which is built on top of react-router.  . Have a look at http://ruby-hyperloop.org (the hyper-react gem). Look at isomorphic helpers module for how to get this to work...\n. ",
    "pezwilson": "Thanks for your comment! I figured out what I was doing wrong. Yes, all works perfectly. I wasn't seeing something obvious in my other React files in terms of how I was invoking some components. Newbie stuff :)\n. Just an update for anyone else that gets confused: I'm using js.jsx files and didn't need to do anything to address global scope to get prerender to work at least for the version I'm using. Don't worry about that (I guess unless you're using coffee per the docs). I went down a long road trying to address that which had nothing to do with the actual problem I was having. (That never happens!!! :)\n. ",
    "BobbyMcWho": "People finding this thread later should note that per https://github.com/reactjs/react-rails/issues/886 'therubyracer' should not be used anymore. . ",
    "reneweteling": "@rmosolgo nice one! took me a while before i noticed its not in the gem but on the master :) but im playnig with it thanks for the heads up\n. Hey @rmosolgo,\nSorry for the delay, didnt get around to it. Also sorry for not providing the correct information to start with, im trying to educate my own testers and now im doing the same with you. Mea Culpa!\nLockfile\nGIT\n  remote: git://github.com/reactjs/react-rails.git\n  revision: 6019be97899c74ba351d7cf69877060c52e501d9\n  specs:\n    react-rails (1.0.0)\n      coffee-script-source (~> 1.8)\n      connection_pool\n      execjs\n      rails (>= 3.2)\n      tilt\nStack for: \"ReferenceError: Can't find variable: JSXTransformer\"\n(execjs):2:12\n(execjs):6:21\n(execjs):1:46\nglobal code@(execjs):1:58\nvendor/ruby/2.2.0/gems/execjs-2.5.2/lib/execjs/external_runtime.rb:39:in `exec'\nvendor/ruby/2.2.0/gems/execjs-2.5.2/lib/execjs/external_runtime.rb:21:in `eval'\nvendor/ruby/2.2.0/gems/execjs-2.5.2/lib/execjs/external_runtime.rb:46:in `call'\nvendor/ruby/2.2.0/bundler/gems/react-rails-6019be97899c/lib/react/jsx/transformer.rb:22:in `transform'\nvendor/ruby/2.2.0/bundler/gems/react-rails-6019be97899c/lib/react/jsx.rb:17:in `transform'\nvendor/ruby/2.2.0/bundler/gems/react-rails-6019be97899c/lib/react/jsx/template.rb:13:in `evaluate'\nvendor/ruby/2.2.0/gems/tilt-1.4.1/lib/tilt/template.rb:103:in `render'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/context.rb:197:in `block in evaluate'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/context.rb:194:in `each'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/context.rb:194:in `evaluate'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/processed_asset.rb:12:in `initialize'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:374:in `new'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:374:in `block in build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:395:in `circular_call_protection'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:373:in `build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:94:in `block in build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/caching.rb:58:in `cache_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:93:in `build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:287:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:61:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/processed_asset.rb:111:in `block in resolve_dependencies'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/processed_asset.rb:105:in `each'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/processed_asset.rb:105:in `resolve_dependencies'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/processed_asset.rb:97:in `build_required_assets'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/processed_asset.rb:16:in `initialize'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:374:in `new'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:374:in `block in build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:395:in `circular_call_protection'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:373:in `build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:94:in `block in build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/caching.rb:58:in `cache_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:93:in `build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:287:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:61:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/bundled_asset.rb:16:in `initialize'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:377:in `new'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:377:in `build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:94:in `block in build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/caching.rb:58:in `cache_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:93:in `build_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:287:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/index.rb:61:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/environment.rb:75:in `find_asset'\nvendor/ruby/2.2.0/gems/sprockets-2.12.3/lib/sprockets/base.rb:295:in `[]'\nvendor/ruby/2.2.0/gems/sprockets-rails-2.3.1/lib/sprockets/rails/helper.rb:243:in `lookup_asset_for_path'\nvendor/ruby/2.2.0/gems/sprockets-rails-2.3.1/lib/sprockets/rails/helper.rb:203:in `check_errors_for'\nvendor/ruby/2.2.0/gems/sprockets-rails-2.3.1/lib/sprockets/rails/helper.rb:150:in `block in javascript_include_tag'\nvendor/ruby/2.2.0/gems/sprockets-rails-2.3.1/lib/sprockets/rails/helper.rb:149:in `map'\nvendor/ruby/2.2.0/gems/sprockets-rails-2.3.1/lib/sprockets/rails/helper.rb:149:in `javascript_include_tag'\napp/views/layouts/application.html.slim:4:in `_app_views_layouts_application_html_slim___3397513199341851106_70313750162340'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/template.rb:145:in `block in render'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/notifications.rb:166:in `instrument'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/template.rb:333:in `instrument'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/template.rb:143:in `render'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/renderer/template_renderer.rb:66:in `render_with_layout'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/renderer/template_renderer.rb:52:in `render_template'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/renderer/template_renderer.rb:14:in `render'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/renderer/renderer.rb:42:in `render_template'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/renderer/renderer.rb:23:in `render'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/rendering.rb:100:in `_render_template'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/streaming.rb:217:in `_render_template'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/rendering.rb:83:in `render_to_body'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/rendering.rb:32:in `render_to_body'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/renderers.rb:37:in `render_to_body'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/abstract_controller/rendering.rb:25:in `render'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/rendering.rb:16:in `render'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/instrumentation.rb:44:in `block (2 levels) in render'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/core_ext/benchmark.rb:12:in `block in ms'\n/Users/rene/.rbenv/versions/2.2.1/lib/ruby/2.2.0/benchmark.rb:303:in `realtime'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/core_ext/benchmark.rb:12:in `ms'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/instrumentation.rb:44:in `block in render'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/instrumentation.rb:87:in `cleanup_view_runtime'\nvendor/ruby/2.2.0/gems/activerecord-4.2.1/lib/active_record/railties/controller_runtime.rb:25:in `cleanup_view_runtime'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/instrumentation.rb:43:in `render'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/implicit_render.rb:10:in `default_render'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/implicit_render.rb:5:in `send_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/abstract_controller/base.rb:198:in `process_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/rendering.rb:10:in `process_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/abstract_controller/callbacks.rb:20:in `block in process_action'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:117:in `call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:117:in `call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:555:in `block (2 levels) in compile'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:505:in `call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:505:in `call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:92:in `_run_callbacks'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:776:in `_run_process_action_callbacks'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:81:in `run_callbacks'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/abstract_controller/callbacks.rb:19:in `process_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/rescue.rb:29:in `process_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/instrumentation.rb:32:in `block in process_action'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/notifications.rb:164:in `block in instrument'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/notifications.rb:164:in `instrument'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/instrumentation.rb:30:in `process_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/params_wrapper.rb:250:in `process_action'\nvendor/ruby/2.2.0/gems/activerecord-4.2.1/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/abstract_controller/base.rb:137:in `process'\nvendor/ruby/2.2.0/gems/actionview-4.2.1/lib/action_view/rendering.rb:30:in `process'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal.rb:196:in `dispatch'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal/rack_delegation.rb:13:in `dispatch'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_controller/metal.rb:237:in `block in action'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/routing/route_set.rb:74:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/routing/route_set.rb:74:in `dispatch'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/routing/route_set.rb:43:in `serve'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/journey/router.rb:43:in `block in serve'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/journey/router.rb:30:in `each'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/journey/router.rb:30:in `serve'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/routing/route_set.rb:819:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/etag.rb:24:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/conditionalget.rb:25:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/head.rb:13:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/params_parser.rb:27:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/flash.rb:260:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/session/abstract/id.rb:225:in `context'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/session/abstract/id.rb:220:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/cookies.rb:560:in `call'\nvendor/ruby/2.2.0/gems/activerecord-4.2.1/lib/active_record/query_cache.rb:36:in `call'\nvendor/ruby/2.2.0/gems/activerecord-4.2.1/lib/active_record/connection_adapters/abstract/connection_pool.rb:649:in `call'\nvendor/ruby/2.2.0/gems/activerecord-4.2.1/lib/active_record/migration.rb:378:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:88:in `call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:88:in `_run_callbacks'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:776:in `_run_call_callbacks'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/callbacks.rb:81:in `run_callbacks'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/callbacks.rb:27:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/reloader.rb:73:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/remote_ip.rb:78:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'\nvendor/ruby/2.2.0/gems/web-console-2.1.2/lib/web_console/middleware.rb:37:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'\nvendor/ruby/2.2.0/gems/railties-4.2.1/lib/rails/rack/logger.rb:38:in `call_app'\nvendor/ruby/2.2.0/gems/railties-4.2.1/lib/rails/rack/logger.rb:20:in `block in call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/tagged_logging.rb:68:in `block in tagged'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/tagged_logging.rb:26:in `tagged'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/tagged_logging.rb:68:in `tagged'\nvendor/ruby/2.2.0/gems/railties-4.2.1/lib/rails/rack/logger.rb:20:in `call'\nvendor/ruby/2.2.0/gems/quiet_assets-1.1.0/lib/quiet_assets.rb:27:in `call_with_quiet_assets'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/request_id.rb:21:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/methodoverride.rb:22:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/runtime.rb:18:in `call'\nvendor/ruby/2.2.0/gems/activesupport-4.2.1/lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/lock.rb:17:in `call'\nvendor/ruby/2.2.0/gems/actionpack-4.2.1/lib/action_dispatch/middleware/static.rb:113:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/sendfile.rb:113:in `call'\nvendor/ruby/2.2.0/gems/railties-4.2.1/lib/rails/engine.rb:518:in `call'\nvendor/ruby/2.2.0/gems/railties-4.2.1/lib/rails/application.rb:164:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/lock.rb:17:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/content_length.rb:15:in `call'\nvendor/ruby/2.2.0/gems/rack-1.6.1/lib/rack/handler/webrick.rb:89:in `service'\n/Users/rene/.rbenv/versions/2.2.1/lib/ruby/2.2.0/webrick/httpserver.rb:138:in `service'\n/Users/rene/.rbenv/versions/2.2.1/lib/ruby/2.2.0/webrick/httpserver.rb:94:in `run'\n/Users/rene/.rbenv/versions/2.2.1/lib/ruby/2.2.0/webrick/server.rb:294:in `block in start_thread'\nThanks!\n. If you are curious, ive checked the code in so you can see whats happening\nhttps://github.com/reneweteling/react-slim/tree/issue-with-react-rails-git\nThanks!\n. ok... now i feel stupid! Thanks for pointing out the obvious... should get more sleep haha! The slim parser is coming along, ill let you know when its done!\n. @BookOfGreg ive just reset my git to an pre react-rails and installed everything again, just got it working about 5 min ago. It must have been something to do with sprockets vs webpacker.\nThere is just one thing im still a bit confused about. Im using the webpacker setup and sprockets still requirers me to have a app/assets/javsacripts/components.js file, mine is empty so the error will dissapear but what is that?\nThanks so much for looking into this error :). ",
    "netikular": "Sorry to just jump in here, but does this implementation by any chance have any relation to the work done to support es6 in sprockets?\nhttps://github.com/TannerRogalsky/sprockets-es6\nThanks for the great work!\n. @rmosolgo I agree that the documentation is quite sparse, it took me a little while to get it working.\n@vipulnsward are you using es6 and JSX together or are you writing your react components in the react-rails style and using the helpers?  I noticed that I can rename my JSX files to es6 and with some hoisting up to window get them to work, but it seems like a lot of setup work.\nI was just wondering how you are handling working between es6 and jsx and if you are using a module loader or just es6 syntax.\n. ",
    "markbrown4": "My question was regarding the last part of that sentence to do with the unmounting on page unload.\nA full page change always blows away the DOM and starts again, can't think of a valid reason for doing extra work and causing re-rendering / painting before navigating.  For things like turbolinks this may make sense but there's special events you can use in those cases.\nSpecifically why the need to unmount in handleNativeEvents here\nhttps://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L89\n. Disagree with you there, it's the wrong thing to do on page unload.  The only time it makes sense is for single page apps.\nThe way it behaves currently is really strange from a ux perspective and just unnecessary work for the browser slowing down page changes.\n. ",
    "djforth": "Thank you your absolutely right - it is because I am using Babel and haven't included the pollyfil.\n. +1\n. ",
    "nikhilbaradwaj": "How about the following - When you run the installation script for react-rails gem, it creates a file called components.js and a directory called 'components' under 'javascripts'.\n1. remove the components folder\n2. components.js will require everything under the components folder. Remove this reference and just add a reference to the webpack pre-compiled js file (rails-bundle.js in the case of justin808's application).\nAdding <%= react_component('ReactComponentName', {name: 'Something'}, {prerender: true or false}) %>\nto the erb/html file should then work for both server side and client side rendering assuming that 'ReactComponentName' react component is globally accessible in the compiled js.\n. ",
    "taylorbrooks": "Like @nikhilbaradwaj, I really only want to use react-rails for the view helpers and webpack for compilation and dependencies.\nIt would be awesome to have a bundled file (generated by webpack) like components.js -- which would include all the things.\nAnd whenever I used the view helper <%= react_component(\"ComponentThing\" ..... %> it would be smart enough to find that component in my bundled js file.\n. ",
    "mxmzb": "Why do we need to create something new everytime. Is there a reason I don't see why react-rails and react_on_rails could not have been initially be done as one thing (or one of them extended by the features of the other) with a bigger community rather than having two smaller and less used gems?\n. @justin808 not at all, the question wasn't meant to be on that concrete level. But if you already answer like that, can you even expand, what will differentiate the two gems after react-rails 2.0, which is going to support webpack way, too (see https://github.com/reactjs/react-rails/issues/448)?\nSee, my issue was more of a general nature. I am just getting pissed off more and more nowadays with developers, as in general everyone behaves like he needs to do some own thing instead of extending existing solutions to his needs.\nAll that variety in software is great, cause that what \"evolves\" and \"revolutionize\" things, but in practice I'd rather prefer more opinionated solutions that would benefit from a bigger community and stability. The fact that my anger about that emerged in this very Github issue is pure coincidence.\n. @chrisvfritz I seem to have formulated wrongly. I am not pissed of by \"the developers\" (in a way, I like to call myself developer, too, and please believe me that it's not my intent to offend anyone with that, nor you nor myself nor anyone at all, I just tend to formulate things wrongly more often). \nI am pissed of by the fact, that there aren't just more great different technologies than you could ever try out in your life, but there are even more different approaches again to implement these technologies (e.g. we got rails, we got react, and instead of one opinionated gem we got - as usual - two, or even more, (don't know, as I didn't look further)). As I said in my previous comment, the outburst of my personal feelings in this very thread is pure coincidence and I might indeed take this to a blog post.\nHowever, I don't think the main statement I am trying to make is wrong here. The issue title says \"Making the helper for server side rendering work with JS created by Webpack\" and I am basically asking why it wasn't or isn't possible to extend / merge react-rails instead for the sake of better / bigger community and therefore provide more and better help resources ( @justin808 even suggested to do so earlier in this thread, but backed down, cause he was thinking the two gems vary too much. I think differently regarding this point as you might have noticed).\nEverything seems to hint that react-rails is going to take the same direction as react_on_rails and the outlook of the differences in fact seems minor to me. So: Why could this not become one bigger thing instead of two smaller in the future?\n. > @thelamborghinistory Have you given react_on_rails more than a cursory glance? Respectfully, it sound like you're arguing from a position of what you think react_on_rails might be.\n@etcook believe it or not, but I am using it, not react-rails.\n. ",
    "etcook": "@thelamborghinistory Pissed off? You're more than welcome to start or fork your own project and manage it as you see fit. Even if the projects overlapped a great deal, it's not unusual for projects to fork and some of those features eventually being integrated upstream. Forking and fragmentation is a core part of the FOSS ethos - one of the mechanisms by which the community balances/reconciles project stability and focus with developmental progress.\nreact_on_rails is a very different beast. It builds on top of react-rails and adds many features which are outside the scope of the react-rails charter. Although some of the concepts employed in react_on_rails might eventually be integrated into react-rails, the distinction between the two is not minor. React_on_rails leans towards isomorphic React apps that utilize the Rails backend as a separate api layer, not just integrating Rails + helpers into the Rails ecosystem.\n. @thelamborghinistory Have you given react_on_rails more than a cursory glance? Respectfully, it sound like you're arguing from a position of what you think react_on_rails might be.\nYour FOSS \"utopia\" taken to its end, would consist primarily of monolithic projects, with very little focus or discipline, paralyzed by legacy requirements. Concurrent development of concepts, especially when they're as distinct in intention as these two projects, is a good thing. This is also how the community explores concepts, tests best practices, etc.\n\nI [need to] take this to a blog post.\n. \n",
    "coryasato": "@catmando Been playing with this all day.  Got it working but I'm still unsure if its clean or not.  Well, exposing components globally is pretty uggs but necessary here.\nI ended up creating a separate \"server_bundle.js\" specific for this gem.  That file gets picked up by a another server.js file with the react-server helper.\n// server.js\n//= require react-server\n//= require server_bundle\n```\nconfig/environments/development\nconfig.react.server_renderer_options = {\n    files: [\"server.js\"], \n  }\n```\nI expose React and ReactDOM in my webpack config via the webpack-expose-loader.  I use the same loader to expose all our components to window.\n// Example file that'll get picked up by webpack.\n// expose window.SampleApp from directory/file thats exporting the module.\nrequire('expose?SampleApp!./sampleApp.js');\n// Snippet of our webpack.base.config file.\nmodule: {\n    loaders: [\n      {\n        test: require.resolve('react'),\n        loader: 'expose?React'\n      },\n      {\n        test: require.resolve('react-dom'),\n        loader: 'expose?ReactDOM'\n      }\n    ],\n    ...\n  },\nYou'll also need to import and expose the component in your client bundle as well.  We have that being //= required in application.js as per norm.\nThe one thing I'm trying to figure out, and why I was crawling these issues, is how to get Rails to see the changes made to the server.js bundle without updating the view's controller or reloading the app.\n. You need Babel stage: 0 for static properties to work on ES6 Classes.  We use stage2 and write ours like this.\n```\nclass Foo extends Component {}\nFoo.propTypes = {};\nFoo.defaultProps = {};\nexport default Foo;\n```\n. ",
    "fletcher91": "For other people hitting prerendering issues (since it does use Browserify);\nI got prerendering to work with browserify-rails\nIt doesn't allow you to use import, but it does work with require & module.exports.\n- Follow the instructions to integrate browserify-rails into the project\n- Remove all the //require= items from application.js and components.js\n  - Replace gemified JS packages with their npm counterparts and include the right modules in each component/js file.\n  - Note: I had to copy react_ujs.js into lib/assets\n- Let your components.js include modules on window scope: \n  - window.Module = require('./components/Module');\n- Update the command line options to support react & ES6\n  - In application.rb: config.browserify_rails.commandline_options = \"-t reactify -t [ es6ify --extension=\\\".js\\\" ] -t debowerify\"\n  - Note: I need debowerify here since some packages aren't available in NPM\n- For completeness, I've also added the transforms to package.json\nI might have missed a step, since these are the results of 3 days of getting this thing to work completely.\nSo, what this does is using the browserify-rails gem as a sprockets post-processor to transpile components.js to ExecJS parseable JS.\nAn additional thought; components.js needs to define all components on window scope, an option to tell react_ujs to use a require would be nice;\n=react_component 'SomeComponent', {nice: 'properties'}, {prerender: true, is_module: true}\n=react_component 'SomeComponentContainer', {nice: 'properties'}, {prerender: true, is_module: true, path: './containers/SomeComponentContainer'}\nBut I have no idea about the feasibility of this.\nSorry if this is polluting this issue, but I couldn't find a good guide on integrating CommonJS with React-rails\n. @adoseofjess I've created a very basic demo repo showing server side rendering with browserify-rails and react-rails.\nAfter some fighting against sprockets, the configuration supports the var add = require('./greeter'); syntax (the newer import syntax also seems to work, although I haven't tested it yet).\nIn my own project, I've modified react_ujs to store the components in a non-global variable if require is available (in addition to some directory walking to flatten the folder structure).\n. ",
    "guzart": "Only problem I have is that I need to include sprockets in my app, and it's only because of the Engine initialization.\n. @justin808 react-trails requires a Rails asset engine. This is because of https://github.com/reactjs/react-rails/blob/master/lib/react/rails/engine.rb#L5  Since it requires an asset engine I am forced to require 'sprockets/railtie' in my application.rb which means that files are being served at http://localhost:3000/assets/application.js.\nMy goal here is to get rid of sprockets completely and use webpack as my asset manager with React Hot Loader for dev and react-rails server side rendering for production :fireworks: \n. @justin808 That's a nice post, but adding an express adds complexity to the app. Which for some might be a good tradeoff in exchange for performance on server side rendering but it's not for me.\nThe only two reasons I want to use webpack instead of sprockets is because I want source maps and react hot-reload for my DX. Of course you could have a hybrid, which I do right now but it's complex since it requires you to know about both technologies and their boundaries/interaction.\nI agree that using sprockets is simple and it works out of the box. But that's what am trying to build right now, a gem that'll let you have react hot loader and server side rendering out of the box and with simple configuration.\n1. Setting up CORS is a one line configuration on the Webpack dev server\n2. Webpack was built for asset management, and there are plugins for fingerprinting assets and generating an asset manifest. Once you fully move to webpack there are npm libraries for bootstrap and sass.\n. I did a quick google search on how to test \"railties\", it seems like it's considered an integration test with Rails. Looking for examples I found that the Draper gem has an actual Rails app fixture. \nI'll keep looking and thinking on how to test the conditional integration.\n. I guess you can't help installing the gem since it's a direct dependency of the Rails gemspec. \nTLDR; you remove the require \"sprockets/railtie\" line from your application.rb file.\nWhen generating a site you can add the --skip-sprockets flag which generates an application.rb file with the list dependencies instead of just require \"rails/all\", and the require \"sprockets/railtie\" line is omitted. \n. ",
    "adoseofjess": "I get it when I load index.html.erb where I'm including this React component. \n. The react_component is finding the Map component, but it's the var add = require('./greeter'); that throws this error.\n. What is the recommended way to require external libraries with react-rails?\n. So I should move the folders from node_modules to vendor? \n. ",
    "tdmckinn": "thanks @fletcher91 exactly what I was looking for to get started using imports browserify and react with rails\n. ",
    "towry": "@adoseofjess You can use this gem webpackrails, and here is an example on how to use it webpackrails-example. It works with react-rails >= 1.1.0.\n. In the second option, I have made a gem called reactssr-rails that it's just a renderer, but things goes complicated when I put this gem to our project (Maybe I have been working on the wrong way, but our project render all react components on server side).\nI have a project that we render all react components on server side, so all the component goes into server_rendering.js file?  Because it seems that react-rails load everything in files:\nruby\nconfig.react.server_renderer_options = {\n        files: ['react.js', 'server_rendering.js', 'components.js']\n    }\n. ",
    "petermumford": "In the end I used the underscore alternative _.extend()\nvar greatPlaceStyleHover = _.extend({}, greatPlaceStyle, {border: '5px solid #3f51b5',color: '#f44336'});\n. ",
    "pducks32": "Oh perfect gem 'react-rails', git: \"https://github.com/reactjs/react-rails\" solved the problem! Thanks.\n. ",
    "dv": "Which dependency gauravtiwari?\nI am reminded of this comic - https://xkcd.com/979/\n. Hey @rmosolgo \nThanks for the reference! This helps me a great deal. It doesn't strike me as problematic that Sprockets freezes its environment in after_initialize, particularly because a default Rails 4 app has an initializer called assets.rb which has this example line in, commented out:\n```\nAdd additional assets to the asset load path\nRails.application.config.assets.paths << Emoji.images_path\n```\nSo it should be possible to edit the asset_path in an initializer still. I went looking at all the different lifecycle events and discovered that between the before_initialize and after_initialize of a railtie (aka bootstrap_hook and finisher_hook) are a bunch of other events we can hook into as well, that are run before or after the initializer files are run.\nI think three options look good for us:\n- An after-hook for load_config_initializers: Loads all Ruby files from config/initializers in the application, railties and engines.\n- A hook for engines_blank_point: Provides a point-in-initialization to hook into if you wish to do anything before engines are loaded. After this point, all railtie and engine initializers are run.\n- A before-hook for finisher_hook.\nThat last one would be the absolute last point we could add the asset paths, after which Sprocket's after_initialize is run and the array is frozen.\nI'll work on some code and get back to you :)\n. Turns out that a before-hook for finisher_hook already was too late. I went with an after-hook for engines_blank_point, which I thought was the most appropriate.\n. I spent a few hours looking on how to best test the initializer code, but apparently this is almost impossible - since we would have to completely reboot the Rails app, and I couldn't find anywhere how to do that in a test.\nThe compromise I've used here is to hardcode an initializer in the dummy app, which overrides a setting set in the dummy app's application.rb. The single test that checks the path now has the added task of checking if the addons option was set before Sprockets froze the world.\n. ",
    "postbud": "Deploy project on server. Start Rails in production mode. \nError in js console:\nUncaught TypeError: Cannot read property 'CSSTransitionGroup' of undefined\nResolve:\n1. Add line to application.rb:\n   config.react.addons = true\n2. Copy to /vendor/assets/javascripts files:\n   react.js\nreact-server.js\n   from /react-source/production-with-addons\n3. Assets precompile: RAILS_ENV=production bin/rake assets:precompile\n   (if needed)\nit works\n. ",
    "rstormsf": "agreed. \n. why not this: \n``` javascript\nrender() {\n            return (\n                \nUpdated\n{this.props.name}\n)\n    }\n\n```\n. ",
    "zackperdue": "you could do something like:\ncomponentDidMount: function() {\n    component = React.findDOMNode(self)\n    $(component).parent().unwrap()\n}\nCode not tested, but in theory this is how i would do it. Not ideal but it gets the job done.\n. ",
    "stereodenis": ":+1: waiting for this feature!\n. @rmosolgo thnx!\n. @rmosolgo tag: nil not working as expected...\n. @rmosolgo I made this, but it breaks js behavior of the component\nwhen i tried to add data-react-class to root div of component I get this \n\n. @rmosolgo get some results (:\nI'm front-end developer so I still need some help\n. @drewhamlett \nNow we have content duplication (data-react-props and component html)\nIt is not good for SEO\n. ",
    "TheRusskiy": "Thank you for the prompt response, \nonly with prerender: true\ncomponents.js: https://drive.google.com/file/d/0BzZTV0n454VPYm1meEFSMXJfdm8/view?usp=sharing\nThere document usages in there but mostly there are wrapped into canUseDOM.\nAs for those that are not wrapped it's pretty hard to say if they are accessed or not.\nIs there a way to get a full stack trace from ExecJS?\n. ",
    "alanyjw": "@rmosolgo I've tried the test project posted by @TheRusskiy and it turns out that the problem is caused by this line in react_ujs.js.erb. Removing the dependency on react_ujs.js.erb inside application.js solves the issue.\nHowever, I was wondering if there would be a better solution to this? Perhaps we could remove the reference to document inside react_ujs.js.erb by doing the following:\n- Use window.document instead of document.\n- Check for existence of window.document before calling functions on it.\n. ",
    "aflanagan": "I'm server rendering quite a few pages using browserify to bundle my js. I had not run into this issue. \nHowever, when trying to move to a build process using webpack I started hitting this. In my component code (not sure about library code) I don't have anywhere that is referencing document directly.\nIt seems strange that the code produced by my browserify build would work, but the same code transpiled with webpack isn't. Does anyone have any suggestions for further debugging?\n. @justin808 i've definitely looked at that a few times. :) If this was a new or new-ish project I'd definitely give it a shot, but we're working on a pretty big production app that is slowly being ported to react. We have a setup we're pretty happy with, would just like to solve this one issue with moving to webpack...\n. ",
    "seoyoochan": "It was caused by 'spring' gem!\nOnce I deleted this gem, install command worked.\n. @rmosolgo I really think the react-rails UJS needs to provide a way to make use of 'local variables' not 'global object'. My workaround is to use Webpack and set up a few line of config code in application.rb\nand I just passed class Main to window's property like window.Main = Main;\nruby\nconfig.react.server_renderer_options = {\n      files: [\"react.js\", \"bundle.js\"], # files to load for prerendering\n      replay_console: true,                 # if true, console.* will be replayed client-side\n    }\n* webpack.config.js *\njavascript\nmodule.exports = {\n    entry: \"./app/assets/frontend/main.jsx\",\n    output: {\n        path: __dirname + \"/app/assets/javascripts\",\n        filename: \"bundle.js\"\n    },\n    resolve: {\n      extensions: ['', '.js', '.jsx']\n    },\n    module: {\n        loaders: [\n            { test: /\\.jsx$/, loader: \"babel-loader\" }\n        ]\n    }\n};\nnow prerendering works, however, * server unfortunately does not livereload bundle.js *\nDo you know any solution for this case? maybe use other gems? :/\n. @rmosolgo wow, thank you for helping me! I just fixed it.\nfor anyone who needs my solution, I will share it.\n1. create config/initializer/react_rails.rb \n2. add Rails.application.config.watchable_files.concat Dir[\"#{Rails.root}/app/assets/javascripts/**/bundle.js\"]\nthen Rails will watch that file!\n. ",
    "rovr": "@rmosolgo, @vipulnsward  Just a heads up, I've been trying to make it work with Rails 5 and atm it immediately fails on .register_engine line.\nLooks like sprockets removed engines completely.\nSo with sprockets 4.0 the initializer should probably look something like:\nsprockets_env.register_mime_type 'text/jsx', extensions: ['.jsx', '.js.jsx']\n    sprockets_env.register_transformer 'text/jsx', 'application/javascript', React::JSX::Template\n. @vipulnsward Thanks! I understand, I just thought I might save you some debugging time in the future.\nSo if sprockets choose to go with the current interface:\nThe object that you pass to the register_transformer method must implement a call method.\nSo if you do \nsprockets_env.register_transformer 'text/jsx', 'application/javascript', React::JSX\nThen inside of React::JSX you must have a method like:\ndef self.call(code)\n   self.transformer ||= transformer_class.new(transform_options)\n   self.transformer.transform(code[:data])\n end\nLooks like that's all it takes to make it work with the current sprockets master branch.\nHere's an example implementation.\n. ",
    "jondot": "Bumping into this now. if this helps @rovr's fork works for me with current Rails master - thanks!\n. ",
    "gregors": "Yes everything related to your breaking change section, in fact broke my application. Which is to be expected, since they are in fact breaking changes. What wasn't expected is for that to happen in a MINOR version change. To prevent this the MAJOR version should have been incremented, i.e. 2.0.0.\nBreaking Changes\n```\nChanged server rendering configuration names #253\nOld     New\nconfig.react.timeout    config.react.server_renderer_timeout\nconfig.react.max_renderers  config.react.server_renderer_pool_size\nconfig.react.react_js   config.react.server_renderer_options[:files]\nconfig.react.component_filenames    config.react.server_renderer_options[:files]\nconfig.react.replay_console     config.react.server_renderer_options[:replay_console]\n(none)  config.react.server_renderer\nJSX is transformed by Babel, not JSTransform #295\n```\n. specifically\nExecJS::ProgramError at /\nReferenceError: [BABEL] unknown: Unknown option: direct.harmony\n. Now when I remove the no longer needed option, everything is fine. I fully understand what is going on, my issue is solely with the expectation of such changes when linked with a MINOR version change. Other than that Happy Friday!\n. ",
    "lucaspiller": "I know this is an old thread, but I was just wondering about the same thing as I've got an old version that needs to be updated. If you do switch, please also take into account the semantic versioning of React too.. ",
    "codejet": "Thanks a lot @rmosolgo. We're using workarounds like the one you describe. But I thought it would be neat if you could simply exclude files via configuration. Gonna close this.\n. ",
    "Will-Sommers": "Increased complexity when upgrading versions of dependencies is definitely one. But I think that it would be more idiomatic Ruby. We're working in a Sinatra application and I feel uncomfortable requiring all of rails as a dependency for this one gem.\nDo I need to submit a CLA to make a PR? \nPS. 1.1.0 is such an improvement, thank you!\n. ",
    "ashrestha91": "+1.  For me, I'd like to explicitly avoid including including the ActiveRecord, so just including railties sounds perfect.\n. https://github.com/ashrestha91/react-rails/commit/0fef5f9f12f82e830f3b65d2605e273744f8f36f\nI made a fix for myself here.  This is the strategy that just includes railties, so avoids actionmailer, activerecord, etc.  If this seems like enough, I can submit the pull request, but I'm curious if there are other, even lighter methods.\n. ",
    "pastuxso": "@ashrestha91 +1, I had some problems during the assets precompilation for production, there are conflicts with carrierwave, attr_encrypted and acts_as_free. Your fork worked for me.\nI came up with a workaround that consist in putting the react-rails gem at the end of the Gemfile, using the main repository\n. ",
    "luizdamim": "Thank you @rmosolgo. I registered the transformer with the .es6 extension and now it's working. :smile: \nAs @vipulnsward suggested, it would be wonderful if react-rails had this as default. Even better if it was exposed as a configurable option.\n. Hey sorry @ccblaisdell, I somewhat missed your comment. I'm using the code below in an initializer:\nruby\nsprockets_env = Rails.application.assets || Sprockets # Sprockets 3.x expects this in a different place\nsprockets_env.register_engine('.es6', React::JSX::Template)\nThis is how react-rails registers the .jsx and .js.jsx extensions.\n. ",
    "ccblaisdell": "@luizdamim Can you post a gist of exactly how you registered the transformer? I can't seem to get it working.\n. ",
    "fourseven": "This is what I've ended up with (in an initializer)\n``` ruby\nrequire 'sprockets/railtie'\nRails.application.assets.register_engine(\".es6\", React::JSX::Template)\n```\n. ",
    "angelomachado": "When i add sprockets-es6 as a dependency i can't make react components click events work.\njavascript\n\"Uncaught InvalidStateError: Failed to execute 'dispatchEvent' on 'EventTarget': The event provided is null.\"\nRemoving sprockets-es6 and applying @fourseven solution i'm having the same issue.\nAny idea?\n. ",
    "ivobenedito": "Would be awesome to have \".es6\" extension registered on sprockets for transpiling by default :+1: \nDo you guys feel it makes sense to add it? \nI've tried having sprockets-es6 in parallel with react-rails with no success ;(!\n. ",
    "dyatlov": "@rmosolgo sure: https://gist.github.com/dyatlov/07f9f68a02f6737aeb73\n. @vipulnsward thanks, trying\n. @vipulnsward unfortunately,\nvagrant@vagrant:/vagrant$ rails g react:install\n/home/vagrant/.rbenv/versions/2.2.2/lib/ruby/gems/2.2.0/bundler/gems/react-rails-d433c0ddb103/lib/react/rails/engine.rb:5:in `block in class:Engine': uninitialized constant React::Rails::Engine::Sprockets (NameError)\n. ",
    "npverni": "Seeing the same thing with will_paginate. Confirmed that changing the order fixes it.\n. This looks like the commit that changed it https://github.com/reactjs/react-rails/pull/347.\nWeird that we're both running into issues with will_paginate, so it could also be a will_paginate thing.\nI've also been able to fix it by requiring in the will_paginate initializer:\nruby\nrequire 'will_paginate/view_helpers'\nrequire 'will_paginate/view_helpers/action_view'\n. ",
    "ebenoist": "I can confirm a similar load order issue with the mobile-fu gem.\n. Great, the second scenario you describe is exactly my current setup (assets are built on a build server). I'll see if I can whip something up. Would a config setting be the normal way options like this are handled? I did notice that execjs does have a Disabled option for the runtime, and I imagine we can do something similar (or take advantage of that pseudo renderer).\n. We actually handled this quite simply by setting the EXECJS_RUNTIME env variable to \"DisabledRuntime\" in our production environments. This works perfectly! Maybe we can add something in the README or to a config value that sets this runtime? \n. ",
    "flowerett": "I can confirm similar issue with rolify gem\nmy gemfile:\nrails (4.2.4)\nreact-rails (1.4.2)\nrolify (4.0.0)\nregarding to https://github.com/RolifyCommunity/rolify/issues/156 there's something wrong in the react-rails initializer\n. ",
    "h-michael": ":+1:\n. ",
    "katranci": "Fat arrow functions are always anonymous. You have to use {this.handleSubmit.bind(this)} or {e => this.handleSubmit(e)}. Check out this issue on react library on the same subject: facebook/react#3040\nReferences:\nArrow Functions\n. ",
    "TylorShin": "Thanks. It help me a lot. :+1: \n. ",
    "JamesDullaghan": "We got the helper working in an engine today after a few hours of debugging. Unfortunately in the engine's ApplicationController, we are unable to inherit from ActionController::Base or we receive the same undefined method 'react_component'\nTo solve this, we inherited from ::ApplicationController from the dummy app, no longer receive this error.\nWhen we have a bit more time, i'll get the stacktrace up here.\nWe are using react_on_rails gem, but I believe the react_component helper is directly from react-rails\n. ",
    "de-ocampo": "This worked. Thank you!\n. ",
    "amiuhle": "Not sure if / how this could work as a separete gem... I was just thinking about extending the :prerender option to support :auto instead of just true / false.\n. Nice, thanks for the hints :+1:. I'll give this a try as soon as I'm working on React again!\n. ",
    "ximus": "I fixed and added tests for this branch here: https://github.com/reactjs/react-rails/compare/master...ximus:support-dom-node-context\nlet me know what you want me to do with it\n. another way of doing it could be to accept an array of DOM nodes to findDOMNodes() and call querySelectorAll() using window.ReactRailsUJS.CLASS_NAME_ATTR on each of them. Then flat map the results and use those as the nodes to initialize as react elements.\nThis may be more standard, being jquery-agnostic, while still supporting this use case.\n. I think https://github.com/reactjs/react-rails/pull/340/files does this more cleanly\n. ",
    "aratak": "Thanks, @ximus!\n. ",
    "ynonp": "react-rails and Redux\nThe main issue I found when integrating react-rails and flux/redux is managing application state. In redux I'd like to have a single application state serialized from the server and parsed in the client, and to use that state to initialize the main store. Something like:\ninitialState = JSON.parse(window.__APPSTATE__);\nBut that won't work since react-rails splits its work to 2 phases: it first reads all .js files in the renderer initialize phase and every call to the view helper only calls render.\nSolution is described below by using a new renderer that:\n1. takes an @appstate attribute in its prerender options\n2. uses the before_render hook to inject JS code before calling render. That code dispatches a new action setting the application state.\n3. only then it calls the component's render function\nI'm not sure it's the best solution or how to generalize it, so any feedback is welcomed.\nCode gist:\nhttps://gist.github.com/ynonp/0c266d4c7b77ed9da0d3/\n. sorry, fixed\n. justin808 your live demo at http://www.reactrails.com/ does most of the rendering client-side (using view source I can't see the comments). Is this the project you refer to ? Is there another link?\n. ",
    "tarun1089": "Were you able to successfully use redux with react-rails? We are also facing similar issues. \n. ",
    "NullVoxPopuli": "@justin808 for just starting out with this, I feel react_on_rails + tutorial is too 'everything all at once'. \n.. sort of. The Readme is basic enough to get just react working, but to also get react-router-redux working seems tricky. the sample app has a lot of things in it shown all at once, so it's hard to tell what is the minimum required -- also showing that there is a tight dependency on the react-on-rails package, which I'd prefer not to have.\n. ",
    "programrails": "react-rails (2.4.7)\nI completely does not understand how to make it work. Did anybody really succeed? I made a custom AppstateRenderer renderer - but I don't understand - how do I access my store inside its before_render hook? What exactly should I include into server_rendering.js?\nI need to somehow dispatch my store server-side - and I can't do it.. That looks interesting, but how do you get the Rails data from INSIDE server-rendered js? When I used client-rendered SPA I used the code like that:\ncomponentDidMount() {\n     axios.get('/companies.json').then(response => {\n        store.dispatch({\n          type: 'COMPANIES_LIST',\n          companies: response.data\n        })\n      })\n  }\nBut such code does not work in server-side js. But what instead?. catmando\nThis one? https://github.com/ruby-hyperloop/hyper-react/blob/master/lib/reactive-ruby/isomorphic_helpers.rb\nI haven't seen anything applicable there. JS server-side fetch is really necessary - to optimize the Rails data loading on SSR. Currently I have to pre-load everything via props - whereas I would prefer to load it dynamically in portions.. Same result:\nlib/appstate_renderer.rb\n```\nmodule React\n  module ServerRendering\n    class AppstateRenderer < BundleRenderer\n  def render(component_name, props, prerender_options)\n    html = super(component_name, props, prerender_options)\n\n    script_html = ActiveSupport::SafeBuffer.new \"<style>.block-color {color: black;}</style>\"\n\n    html = script_html + html\n  end\nend\n\nend\nend\n**config/initializers/react.rb**\nrequire \"#{Rails.root}/lib/appstate_renderer\"\nRails.application.config.react.server_renderer = React::ServerRendering::AppstateRenderer\n```. @reywright\n1. I must set up the Redux store server-side first - and it's not empty, this a list of companies.\n2. Only then I render my component server-side - because the component takes the data out of the store.\nHow do you do that? I tried react_rails_prerenderer.context.eval to set up the Redux store - does not work as wanted - the component gets rendered first. :(\nHere's my code:\nlib/appstate_renderer.rb\n```\nmodule React\n  module ServerRendering\n    class AppstateRenderer < BundleRenderer\n  def before_render(component_name, props, prerender_options)        \n    super(component_name, props, prerender_options)\n\n    companies = Company.all\n\n    'global.showCompanies(' + companies.to_json + ')'\n  end\nend\n\nend\nend\n```\napp/javascript/packs/server_rendering.js\n``\n// By default, this pack is loaded for server-side rendering.\n// It must expose react_ujs asReactRailsUJS` and prepare a require context.\nimport store from '../redux/store';\nvar componentRequireContext = require.context(\"components\", true)\nvar ReactRailsUJS = require(\"react_ujs\")\nReactRailsUJS.useContext(componentRequireContext)\nglobal.showCompanies = function(companies) {\nstore.dispatch({\n  type: 'COMPANIES_LIST',\n   companies: companies\n  })\n}\n``\nCurrently, the Redux store is rendered server-side and the list of companies is also rendered server-side (taking the data out of store). But I can't transfer the store to the client for the moment. Any ideas?\nBesides,companiesshould not be queried inside **lib/appstate_renderer.rb** - but I haven't yet found a better approach.. @ttanimichi\nHow about transferring the Redux store client-side andhydrate`ing it there?. @ttanimichi\n\nHydration is a matter of React\u2019s SSR and it\u2019s not related to Redux stroe.\n\nBy 'hydration' I meant this: https://redux.js.org/recipes/serverrendering#client-js\n\nThis gem hydrates components automatically.\n\nSurprisingly, looks like you're right. I just tried to do it myself - it works - I don't understand how - but it works. But I made it all a bit easier. I do not create a store filled - I dispatch a filling action - for an empty store.\nHere's my code (that's not an SPA, so react-router is not involved, I'll try react-router in future):\napp/views/companies/index.html.erb\n<%= react_component(\"ProviderIndexContainer\", {companies: @companies}, {prerender: true}) %>\napp/javascript/components/ProviderIndexContainer.js\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from '../redux/store';\nimport CompanyListContainer from '../components/CompanyListContainer';\nexport default class ProviderIndexContainer extends React.Component {\nrender() {  \nstore.dispatch({\n  type: 'COMPANIES_LIST',    \n  companies: this.props.companies\n})\n\nreturn (\n  <Provider store={store}><CompanyListContainer/></Provider>\n  )\n\n}\n}\n**app/javascript/components/CompanyListContainer.js**\nimport React from 'react';\nimport axios from 'axios'\nimport { connect } from 'react-redux';\nimport store from '../redux/store';\nimport CompanyList from './CompanyList';\nclass CompanyListContainer extends React.Component {\nrender() {\n    return (\n      \n\n\n      )\n  }\n}\nconst mapStateToProps = function(store) {\n  return {\n    companies: store.companies\n  }\n}\nconst mapDispatchToProps = function(dispatch, ownProps) {\n  return {\n    deleteCompany: function(company_id) {\n      axios.delete('companies/' + company_id + '.json').then(response => {        \n          dispatch({\n            type: 'COMPANY_DELETE',\n            company_id: response.data.id\n          })\n      })\n    },\n    companiesList: function() {    \n      axios.get('/companies.json').then(response => {\n        dispatch({\n          type: 'COMPANIES_LIST',\n          companies: response.data\n        })\n      })\n    }  \n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CompanyListContainer);\n```\napp/javascript/components/CompanyList.js\n```\nimport React from 'react';\nimport { Link } from 'react-router-dom'\n// Presentational Component\nexport default class CompanyList extends React.Component {\ndeleteCompany(props, company_id) {\n    let res = confirm(\"Are you sure you want to delete?\");\n    if (res) {\n      props.deleteCompany(company_id)\n    }\n  }\nrender() {\n    let _this = this;\n    return (\n      The list of companies\n      {this.props.companies.map(function(company) {\n        return (    \n\n{company.name}\nDelete \n \n        );\n      })}\n      Refresh companies list\n \n    )\n  }\n}\n```\napp/javascript/redux/store/index.js\n```\nimport { createStore } from 'redux';\nimport reducers from '../reducers';\nimport initialState from './initial-state';\nconst store = createStore(reducers, initialState);\nexport default store;\n```\napp/javascript/redux/store/initial-state.js\n```\nimport axios from 'axios'\nlet initialState = {\n  companies: [],\n  company: {name: '', price: ''}\n};\nexport default initialState;\n``\nIt looks like that gemreact-railsdoes all the server-rendering job itself - under the hood - and even transfers the Redux server-renderedstore` to the client side automatically.\nTo check it practically I modified app/javascript/components/CompanyListContainer.js:\nconst mapDispatchToProps = function(dispatch, ownProps) {\n  return {\n  ...\n    companiesList: function() {\n     console.log(store.getState()) // the added part\n      axios.get('/companies.json').then(response => {\n        dispatch({\n          type: 'COMPANIES_LIST',\n          companies: response.data\n        })\n      })\n    }    \n  }\n}\nand I saw the Redux store client-side, in the console (when pressed the 'Refresh companies list' button).\nHow does react-rails transfer the Redux store from the server-side to the client-side - is a mystery to me. And does it really do it? What if it just doubles dispatching - both server-side and client-side?\nAnd switching from rendering the Redux store server-side to client-side is easy - all that's needed is simply to change:\n<%= react_component(\"ProviderIndexContainer\", {companies: @companies}, {prerender: true}) %>\nto \n<%= react_component(\"ProviderIndexContainer\", {companies: @companies}) %>\nand the rendered companies list respectively disappears from the fetched HTML.\nPS\nOne thing that bothers me is whether I (and @ttanimichi) do it all correctly. Because what I portrayed here is so much far away from the https://redux.js.org/recipes/serverrendering picture.\nBut one thing is clear - I hate the https://github.com/shakacode/react_on_rails gem because it looks so ugly, ponderous, poorly documented and even partially commercial (!). I am fed up with their ads like \"hire us\" on the docs page. :) That gem has to be punished by no-usage.. @ttanimichi\n\nit just doubles dispatching - both server-side and client-side?\nYes.\n\nIf you have any confirming references to this statement, it would be nice to see them. Not necessarily right now, but maybe someday later. I hope everybody would be interested to see it.\n\nWithout the option {prerender: true}, SSR isn't performed.\n\nI just mean that it is easy to globally change a website's SSR presence - in a single place:\n```\nglobal_prerender_mode = true\n<%= react_component(\"ProviderIndexContainer\", {companies: @companies}, {prerender: global_prerender_mode}) %>\n.....\n<%= react_component(\"AnyOtherComponent\", {props: @something}, {prerender: global_prerender_mode}) %>\n```\nLooks like that by default it is nice to enable SSR website-wide (if this is as easy as to change `global_prerender_mode` from `false` to `true`).\n\nPS My next step - to try to use react-router + SSR + Redux for this gem.\nHere's another hydrate explanation:\nhttps://stackoverflow.com/questions/46516395/whats-the-difference-between-hydrate-and-render-in-react-16. ",
    "ttanimichi": "Can you take a look at this comment? \nhttps://github.com/reactjs/react-rails/issues/878#issuecomment-368481036. \ud83d\udc40 . @BookOfGreg done https://github.com/reactjs/react-rails/pull/857/commits/9b1019b8ceea0264b853d7768b06cc2082e6060f. Does PureComponent have anything to do with react-rails? Sounds like just a matter of react.. PureClass? Do you mean PureComponent ?. > Render any react component with a Provider on the server (set prerender as true)\nI'm also rendering react components with a redux Provider on the server with rails 5.1.4 and ruby 2.5.0, but it doesn't reproduce.. > add a redux example\n+1. Although Redux has nothing to do with this gem, many users of this gem seems to be struggling to use Redux with this gem.\nFYI. My usage example of Redux with this gem is below:\n```ruby\napp/controllers/posts_controller.rb\nclass PostsController < ApplicationController\n  def show\n    render component: 'Post', props: { post: { id: params[:id], body: 'foo bar' } }, prerender: true\n  end\nend\n```\n```jsx\n// app/javascript/components/Post.js\nimport React from \"react\"\nimport { Provider, connect } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\nfunction post(state = null, action) {\n  return state;\n}\nconst reducer = combineReducers({ post });\nfunction PostComponent({ id, body }) {\n  return (\n    \nPost\n{id}\n{body}\n\n  );\n}\nfunction mapStateToProps(state) {\n  return state.post;\n}\nconst PostContainer = connect(mapStateToProps)(PostComponent);\nexport default function Post(props) {\n  const store = createStore(reducer, props);\nreturn (\n    \n\n\n  );\n}\n```\n```sh\n$ curl localhost:3000/posts/42\n<!DOCTYPE html>\n\n\nReactRailsWithReduxExample\n\n\n\n\n\nPost42foo bar\n\n\n```\nrepo: https://github.com/ttanimichi/react_rails_with_redux_example\n. @BookOfGreg You're so kind. Don't get burnt out over this \ud83d\ude42. I don\u2019t understand what you mean. Hydration is a matter of React\u2019s SSR and it\u2019s not related to Redux stroe.\nYou can pass props to a component by using react_component and from the props you can create a store in client side. You don\u2019t need to hydrate components by yourself. This gem hydrates components automatically.. Did you try this example? https://github.com/reactjs/react-rails/issues/878#issuecomment-368481036. > By 'hydration' I meant this: https://redux.js.org/recipes/serverrendering#client-js\nAs I already told you, the hydration in the example has nothing to do with Redux. hydrate is a function of react-dom and it has everything to do with React.\n\nit works\n\nCongrats.\n\nI don't understand how\n\nIf you specify prerender: true, this gem automatically hydrate the component in client side.\nhttps://github.com/reactjs/react-rails/blob/f02a3afd373761946df381acd685d9ba2b1754dd/react_ujs/index.js#L98\nreact-rails 2.4.1+ supports React's hydration. ref. https://github.com/reactjs/react-rails/pull/828\n\nHow does react-rails transfer the Redux store from the server-side to the client-side - is a mystery to me. And does it really do it?\n\nNo, it doesn't.\n\nit just doubles dispatching - both server-side and client-side?\n\nYes.\n\nall that's needed is simply to change:\n\nWithout the option {prerender: true}, SSR isn't performed.. > export to an html script tag. \nWhat do you mean? How about this?\njs\ncomponentDidUpdate() {\n  window.date = this.state.date;\n}\nThen you can access to window.date from anywhere, even outside the React Components.. What is the problem to hydrate some components like Ad? An error occurs?. How about using componentDidMount? It\u2019s not invoked on SSR.. \ud83d\udc40 . \ud83d\udc40 . The cause of the error seems to be an incompatibility of webpacker. ref. #916. > Do you think Webpack was also mangling the names of internal classes\nI'm not 100% sure, but yes, I think the way of minifying/uglifying pack files isn't an external specification but an implementation detail of Webpack(er). I think WebpackerManifestContainerTest should be an unit test for WebpackerManifestContainer, and it probably shouldn't depend on external inputs.\n. The travis build was failed, but it has nothing to do with this patch.\nhttps://travis-ci.org/reactjs/react-rails/builds/375740147. @BookOfGreg Thank you for the offer! I\u2019d be glad to become a maintainer.. Thank you!. @6br Nice catch. Thanks! \u2728. Pushed https://github.com/reactjs/react-rails/commit/467cbd8fa3d8f5c7f77e9bc596b33d65d1fbafa8 which is related to this PR.. No thank you. You have to put components under the directory which you have specified in your packs files. The default value of the directory name is components. https://github.com/reactjs/react-rails#file-naming. The following command may solve the error.\nsh\n$ mv app/javascript/CandidateExam app/javascript/components\n. Can you execute following commands in your production server and paste the results here? \n$ ls public/packs\n$ curl -i http://xyz.com/packs/application-8ebef5833430466bb510.js\n$ curl -i http://xyz.com/robots.txt\n$ cat log/production.log | grep error\n. \ud83d\udc40 . I think there is some ways to do that.\n(1) If you want to write the layout by using React Component, you should render your contents in the layout component. In this case, all props should be passed to the Layout componet at first and then you can pass some props to the child components.\njsx\n<ApplicationLayout>\n  <YourContent /> \n<ApplicationLayout/>\n(2) You can also write the layout by slim and render some React components into it.\nslim\nbody\n  header your header\n  div\n    main\n      = react_component('YourContent')\n    aside your aside\n  footer your footer. > but written by the second\n\nby writing ApplicationLayout Component in every slim page \n\nWhy?\n\ninsert a component to another\n\nI don't think it's a responsibility of this gem. I want to keep this gem simple and if you want more complex one, you can use react_on_rails.\nI think rendering a component in another isn't a responsibility of this gem but a responsibility of React itself. In my app, I'm always rendering App component in server side. Router is a component for client-side routing.\nruby\nrender component: 'App', props: props\n```jsx\nfunction App(props) {\n  const store = buildStore(props);\nreturn (\n    \n\n\n  );\n}\n```. > by writing ApplicationLayout Component in every slim page\nOh, at least you don't need to write a layout in every slim page. How about this?\n```slim\napplication.html.slim\n(snip)\nbody\n  header your header\n  div\n    main\n      = yield\n    aside your aside\n  footer your footer\n```\n```slim\nfoo.html.slim\n= react_component('YourContent')\n```. > The string was generated by calling @already_stringified_using_fast_jsonapi = SomeModelSerializer.new(model_instance).serialized_json\nYou can use serializable_hash instead of serialized_json.\nhttps://github.com/Netflix/fast_jsonapi#return-a-hash\n\nit's being passed to the component as a String, and not as JSON.\nI should get JSON, not a string needing to be JSON parsed.\n\nIt's just your misunderstanding. JSON is String. If you parse a JSON, it will be an associative array (Hash).\nruby\n{ a: 42 }.to_json # => \"{\\\"a\\\":42}\"\n{ a: 42 }.to_json.class # => String\nJSON.parse({ a: 42 }.to_json) # => {\"a\"=>42}\nJSON.parse({ a: 42 }.to_json).class # => Hash\nref. https://en.wikipedia.org/wiki/JSON. Closing due to inactivity. Reopen as needed.. Just go ahead. Thanks!. > Is there any way to access it without passing it down via props?\nI think you can use Redux to avoid passing objects down by using props. You can create a store and inject props to components by using mapStateToProps. \n. Hi @BookOfGreg \nThis is my first time adding a release. Could you take a look to make sure I haven't missed anything?\n. All tests were passed successfully \ud83c\udf89 cc: @BookOfGreg @suhailnaw\n\n\n. @BookOfGreg I've merged this by myself. Feel free to revert them if they aren\u2019t appropriate.. - [ ] config.static_cache_control is deprecated and will be removed in Rails 5.1.\n- [ ] secrets.secret_token is deprecated in favor of secret_key_base and will be removed in Rails 6.0.\n- [ ] Using positional arguments in functional tests has been deprecated. Oh, I understand. It sounds difficult to fix those deprecation warnings...\n\nis there a better way than having multiple dummy-apps for different rails versions?\n\nI'm also not familiar with it, but kaminari-core looks like having a better way to support multiple rails versions. They don't have dummy apps although they have multiple gemfiles like us.\n\nI suppose when Rails 6 comes out we may need to remove another older rails\n\nYeah, I agree with you. When Rails 6 comes out, maybe Rails core team will drop support for Rails 5.1, so we may not need to support it, too. Someday, I want to drop sprockets' support, too :joy: In Rails 6, Webpacker seems to be the default JavaScript compiler.\n. https://guides.rubyonrails.org/maintenance_policy.html#severe-security-issues\nhttps://github.com/rails/rails/commit/22b0a302156027291e9e44897d9e49f01ab07908#diff-7e27b67b64e7f17f6ddc2edd4a98e225\n\nCurrently included series: 5.2.Z, 5.1.Z, 5.0.Z, 4.2.Z.\n\nIt seems Rails core team still hasn't completely dropped support for Rails 5.0.x yet. For severe security issues, users of Rails 5.0.x can receive patches. When Rails 6 comes out, Rails core team may completely drop support for 4.2, 5.0 and 5.1 (They may only support 5.2.x and 6.0.x).. \ud83d\udc40 . Can you take a look at #918?\n. Did you mean webpacker3?. ",
    "alcedo": "You are a genius, yes that works :+1: \nThanks for your help!\n. edit: i found out that i need to place require transfer_in/components_loader within components.js instead. \n. hi there\nin component.js\n```\n// For rails-react to pre-render. Note that the order of loading matters, because some components might refer to\n// global vars.\n//= require react_bootstrap\n// this is gem 'rails-assets-fluxxor'\n//= require fluxxor\n// The list of components that we are using\n//= require_tree ./components\n// This uses the js components in the transfer_in engine\n//= require transfer_in/components_loader\n```\nin react_components.js\n```\n// This is used for react-js server side rendering\n// react_ujs should be placed after react\n//////////////////////////////////////////\n//= require react\n//= require react_ujs\n//= require components\n```\nin server_rendering.js\n```\n//= require react\n//= require react-server\n//= require react_bootstrap\n//= require components\n// Require everything needed for server rendering below\n```\nadd this Rails.application.config.assets.precompile += %w( server_rendering.js )\nand\nconfig.react.server_renderer_options = {\n          files: ['server_rendering.js'] # files to load for prerendering\n        }\n. i'm using gem 'react-rails', \"~> 1.6.0\" but am still encountering the above error. eg: \nhttp://cl.ly/1m2y3B1N3f1j\nany ideas?\n. Updates: ok ive tried the above workaround but it doesnt seem to work. I've also tried some workaround on my own, ie:  http://cl.ly/2c3O3s343Y3k  but to no avail too. \nI've also upgraded to gem 1.6.1\n. Just to follow up on this after a month or so, ive updated to the latest version, \ngem 'react-rails', '~>1.7.1'\nand followed @rmosolgo advice of creating the server_rendering.js work around, and it works! No more \"no compiled asset for react-server.js\" error. \n.   hmm did u put //= require moment above your component definition? some code samples might be useful\n. @krazyjakee did you add server_rendering.js into the asset precompile list?\n. @krazyjakee \nmy server_rendering.js goes into /assets/javascripts/server_rendering.js \nand this is the content of it, if its of any help.\n```\n//= require react\n//= require react-server\n//= require react_bootstrap\n//= require components\n```\n. no problem. and i think you probably wont need react_ujs, since its only used on client side. \n. ",
    "tmoney100": "The most basic test that is failing is:\ntest '.show should succeed' do\n    get :show\n    assert_response :success\n  end\n. We use:\n```\ngroup :development, :test do\n  # Call 'byebug' anywhere in the code to stop execution and get a debugger console\n  gem 'byebug'\n# Shim to load environment variables from .env into ENV in development. Read more: https://github.com/bkeepers/dotenv\n  gem 'dotenv-rails'\n# Letter opener: https://github.com/ryanb/letter_opener\n  gem 'letter_opener', :group => :development\n# Headless phantomjs(chrome based browser) for javascrip testing\n  gem 'poltergeist', :require => false\n# Ruby Pry, debug ruby https://github.com/deivid-rodriguez/pry-byebug\n  gem 'pry-byebug'\n# Static syle checking https://github.com/bbatsov/rubocop\n  # version 0.33.0 is causing issues -> when running autocomplete it find multiple infinite loops\n  # Untill we solve that problem, we'll go back to the last stable version.\n  gem 'rubocop', '0.32.1', :require => false\n# Optional code coverage\n  gem 'simplecov', :require => false\n# Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\n  gem 'spring'\n# Javascript testing https://github.com/modeset/teaspoon\n  gem 'teaspoon'\n  gem 'teaspoon-mocha'\nend\ngroup :test do\n  # Use webmock for integration testing.  Read more: https://github.com/bblimke/webmock\n  gem 'webmock'\n  gem 'mocha'\nend\n```\n. ",
    "stevestmartin": "@rmosolgo I can confirm this as well when upgrading to react-rails 1.3.0, this is using minitest 5.1 using a controller test extending from ActionController::TestCase\n. @rmosolgo I went ahead and sumitted a pull request for a failing testcase that reproduces this problem https://github.com/reactjs/react-rails/pull/355, hope this helps\n. @rmosolgo works great, thanks. also using middleware was only temporarily a bad choice. Rails 5 controller tests will work the same as integration tests executing the middleware.\n. ",
    "javierjulio": "I can confirm this is still failing on 1.3.2. I have a cache warming rake task that renders a view page which uses react_component in there. On version 1.2.0 it wasn't an issue but after upgrading I receive the same error: ActionView::Template::Error: undefined method 'react_component' for nil:NilClass\n. @rmosolgo I just chimed in to mention it was still failing but when I described how I was using it I realized I could workaround it. But also probably not at all how you intended someone to use the helper so I didn't expect a fix for an odd case. Just wanted to say thanks so much for taking the time! Really appreciate it.\n. @rmosolgo just gave it a try, its working for my use case. Thanks!! \ud83d\udc4d\ud83c\udffb\ud83c\udf89\n. ",
    "benhalverson": "derp. Thanks @krzysiek1507 \n. ",
    "erictaylor": "Yes. Rails server has been restarted numerous times.\n. ```\nconfig/environments/development.rb\nReact\nconfig.react.variant = :development\n```\n```\nconfig/environments/production.rb\nReact version\nconfig.react.variant = :production\n```\nCurrently nothing in config/application.rb, but I even tried adding\nconfig.react.jsx_transform_options = {\n  # various options supplied for testing, both blacklist and whitelist\n}\nStill nothing.\nFrom Gemfile.lock:\nreact-rails (1.0.0)\n      coffee-script-source (~> 1.8)\n      connection_pool\n      execjs\n      rails (>= 3.1)\n      react-source (~> 0.13)\n    react-source (0.13.3)\nIs there anything I can do in Rails console to check that babel is initialized correctly?\n. It should also be noted that the JSX transform is happening, but none of the es6 and default babel transforms I would expect take place.\nFor instance, all the JSX parts of the code are converted to their correct JS equivalents, like React.createElement().\n. Just realized that to looking through the Changelog. Gracias.\n. ",
    "gnapse": "Hi, I'm using react-rails 1.3.1, and I just noticed my recent addition of react to the app does not work in Safari. I had been developing on Chrome all along, and since Chrome supports arrow functions, it has been working fine. In Safari I got an error, and it points me to incorrect syntax around an arrow function. So the source files are not being transpiled from ES6, although jsx syntax is being transpiled.\nAny ideas?\nUpdate: Nevermind, it was a file without the extension .jsx and I had not noticed. Coincidentally this file did not have jsx syntax, so it did not fail on Chrome, but it had ES6 syntax. Sorry.\n. ",
    "scimed-external": "@alcedo Can you provide some additional details about your solution; we recently started running into this issue as well, and haven't been able to get pre-rendering of components from an engine to work.\nThanks!\n. ",
    "vadimsg": "I have similar problem with es6 class export and your solution with window kinda dont work. I'm trying to do that with Laravel using package react-laravel which is inspired by react-rails https://github.com/talyssonoc/react-laravel/issues/54\nSo no ideas any one? Have to stick with es5 for the moment?\n. ",
    "mikeLspohn": "Has anyone found a way to make this work with import/export? \n. ",
    "mbajur": "Edit\nI forgot to install therubyracer. Right now, the error message says:\nExecJS::ProgramError \nTypeError: Cannot read property 'PropTypes' of undefined\n. Yeah there is some stuff i'm using apart from given component. My components.js looks like that:\n```\n//= require react-bootstrap/react-bootstrap.min\n//= require fluxxor/build/fluxxor\n//\n//= require_self\n//= require ./components/menu_item\nRow = ReactBootstrap.Row\nCol = ReactBootstrap.Col\n```\nI don't have any special prerendering config defined.\n. Yes! That was it, you're awesome Robert!\nBig thanks for your support and responsiveness :)\nps. that might be obvious issue but maybe it's a good idea to add that to readme?\n. ",
    "gotjosh": "Perhaps is just me but this feels dirty in the sense that the dependency between the component and the dispatcher is not being injected but rather just being used there.\nThat approach does have a clever advantage which is closing the channel on Unmount. \n. Thank you @rmosolgo ! After reading a bit more about the flux pattern, I quickly realized this is the way to go. \n. ",
    "geminiyellow": "oh, i hope react-rails 0.14 could release soon. @krzysiek1507 's suggested could not clear js.jsx.coffee .\n. @rmosolgo \nSupport DOM nodes in UJs, support React 0.14.0 in UJS\nis it means react 0.14 is in? but i can not found the ReactDOMServer, @rmosolgo can you update the docs?\n. @rmosolgo thank you.\n. ",
    "IvRRimum": "When 0.14 React will be available in this gem ? I developoing rails server, but i dont want to use outdated react version.\n. http://stackoverflow.com/questions/33125669/uncaught-referenceerror-reactdom-is-not-defined\nO_o Why arent't the newest version of React on master ?\n. @kukula http://stackoverflow.com/questions/33125669/uncaught-referenceerror-reactdom-is-not-defined. You can. Go trough the answers on the stackoverflow question i posted. Loads of discussion and solutions there.. @kukula Then you are asking at the wrong issue i guess. In this issue we discuss the problem with ReactDOM.render. Wish the best of luck to you!. ",
    "onpaws": "@rmosolgo Thanks for your effort on getting React 0.14 in place. While I'm (relatively) new to React and this gem if you need help getting this sorted out I'd be happy to dive in.\n. Awesome! Your plan sounds great. \nResolving an 'invariant violation' error on my app today took up quite some time today  - hoping to continue on this tomorrow/Monday.\nRegarding your last item, I noticed angularjs-rails appears to offer something similar to what you describe. Perhaps this might be helpful?\nhttps://github.com/hiravgandhi/angularjs-rails/blob/master/tasks/angularjs-rails/stable_updater.rb\n. ",
    "masarakki": "I have no idea to test it without rspec...\nCan I add rspec in Appraisal?\n. add rspec tests\n. I think it's just a travis's problem...\nrebuilding with dummy commit\n. v1.3.3 works well. great job!!\n. ",
    "josephMG": "Finally, I put window.classNames = require('classnames') to the end of components.js\nAnd I use cx = window.classNames in the coffeeScript file\n. ",
    "classyPimp": "My files are:\nassests/javascripts/application.rb\nrequire 'react'\nrequire 'react_ujs'\nrequire \"jquery\"\nrequire 'components'\nassets/javascripts/components.js.rb\n``\nrequire \"opal\"\nrequire_tree './components'\nWell if I put vanilla JS file in components, it will prerender. It seems like I can't attach opal var returning react component to global (but I tried all possible ways). It feels like rubyracer just bypasees that code.\nMaybe there is some extra configuration needed for working with opal?\n. Sorry to bother ((, that was some problem with my particular build. Everything JUST WORKS on other machine (windows lol).\n. ",
    "joefiorini": "Thank you very much!\n--\u00a0\nJoe Fiorini\nOn October 13, 2015 at 1:14:38 PM, Robert Mosolgo (notifications@github.com) wrote:\nClosed #370.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "liyali": "It's actually already on master: https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#L57\n. ",
    "kukula": "Have the same error on fresh install. react-rails (1.10.0)\nCould please anyone help?. thanks for fast reply! so I can not use react_component view helper?. I've checked answers, but I'm not calling ReactDOM.render, I'm using react_component view helper in my view. Question is not about React itself, question about this gem.. thank you, I'll create a new issue than.. ",
    "olhor": "Here is mine. It covers React tutorial from official site made with react-rails gem and uses jsx and coffeescript for components. Hope it helps in someway.\n. @qwrobins thx for info, should be working now.\n. ",
    "qwrobins": "olhor: FYI, I just tried your link and it says I don't have access\n. Thanks!\n. ",
    "lou": "I just tried the master branch and ... It's working!\nThanks @rmosolgo for your quick response.\nMaybe it's time for a 1.3.2 version :+1:\n. ",
    "SylarRuby": "@rmosolgo Hi. I'm new to pull requests so sorry for asking this question here. I want react-addons-linked-state-mixin. Is that possible?\n. I am using Rails 4 and in my application.rb I have:\nmodule App\n  class Application < Rails::Application\n  [...]\n  config.react.addons = true\n  end\nend\nIs that correct @rmosolgo ?\n. Well then it works great. This can be closed now. Thanks\n. Are you using ruby 2.2.1+?\n. Maybe a bug in react-rails. Others will comment.\n. Hi @rmosolgo. This was the only way (http://ttrmw.co.uk/code/rails_and_react_with_npm_modules.html) I could use react models with your gem.\nThe only error in console is react is not defined.\nGist: https://gist.github.com/SylarRuby/c4187fc4f09a1237df6e\n. Would this be it? Im a noob sorry:\n[\"/Users/sylar/Sites/rails/simple-app/app/assets/javascripts/components/_stream_0.js\"]<()\n dashboard.self-dda03bfa432bf7966ffad6f2a5ac99fe0ae0dfeed71c2112283a9c51578c06e1.js:2\ns()\n dashboard.self-dda03bfa432bf7966ffad6f2a5ac99fe0ae0dfeed71c2112283a9c51578c06e1.js:1\ne()\n dashboard.self-dda03bfa432bf7966ffad6f2a5ac99fe0ae0dfeed71c2112283a9c51578c06e1.js:1\n<anonymous>\n@rmosolgo I think I have found it. See gist\n. Yes, @rmosolgo, that was half of the issue but solved this this:http://reactjsnews.com/setting-up-rails-for-react-and-jest/ Great gem. Hope to contribute when i know more ;)\n. Show us some code\n. I've just seen this list for version 2. Ok, support for rails 5 as I'm getting this: https://github.com/reactjs/react-rails/issues/467\n. Cool so that would be resolve in version 2? Or just work with the master branch for now?\n. Still having this issue on Rails beta3. What's new on this? I sure Im not the only one as the is new rails app with only react.\n. @inchr Well it's working. I have no idea what I did.\n. I use browserify-rails so I can use npm packages. My react files only has .jsx ie: App.jsx.\napplication.js:\n//= require jquery\n//= require jquery_ujs\n//= require foundation\n//= require moment\n//= require components\ncomponents.js\n```\n//= require react\n//= require react_ujs\nReact = require('react');\nReactDOM = require('react-dom');\nApp = require('./components/App.jsx');\n...\n```\nApp.jsx\nvar React = require('react');\nvar App = React.createClass({\n...\nIs this setup wrong? Works great with Andriod but not so with iOS. Turbolinks are disabled.\nEDIT:\nNothing to do with iOS, the issue is with Safari. React not working in Safari.\n. Found it! I had to enable Safari's Develop to see where the issue was. Safari never liked how I was iterating:\nvar cards = this.props.data.map( (c, i) =>  {  # issue with '>'\nSo I had to use the js way:\nvar cards = this.props.data.map(function(c, i) {\nAll is well now. I'll close this in a few hours so others could see.\n. No. I'm not using es6; I thought I was. I copied few codes from my old meteor project. That's where the confusion came about.\n. Sorry @Stormcore, I've used this gem instead. All is well now.. ",
    "Chehai": "Well, the real problem is that after asset compilation in production react.js is still in development mode, because Rails asset pipeline does not set process.env.NODE_ENV to be production.\n. Thanks for looking at it!\nReact-rails 1.3.3 drops a minified react.js without any process.env.NODE_ENV in code to Rails asset pipeline. 1.4.4 drops a un-minified react.js with process.env.NODE_ENV everywhere in code to the pipeline.\n. Thanks for fixing it! 1.4.1 works well for us.\n. ",
    "watzon": "Never mind. It actually seems as though my generators are broken period.\n. ",
    "kaiwood": "Extending the whitelist was my first thought, as my own intention was to have access to the class and id attribute for styling. \nBut shouldn't at least data-* or aria-* attributes whitelisted too? Might not be to far fetched that someone needs access to those, e.g. for some kind of plugin or accessibility thingy...\nI'll take a look at it, didn't mean to break Travis anyway. :)\n. Ok, i restored the whitelisting and added class, id, data and aria.\nStuff like data: {remote: true} works as expected. The thing with aria-* is, that the nested syntax was added in https://github.com/rails/rails/commit/a794fd2c0a99e7e917f6dbf83d781f621a39f3ad and is only supported in Rails 4.2 upwards\u2026\nWe would need to add all 35 aria-attributes from the spec to the whitelist for the versions prior, looks like a little bit over the top to me. I think we can get away with this in the current form :)\n. ",
    "hokaccha": "@rmosolgo Thank you for you reply!\n\n\nKeep ExecJSRenderer as simple as possible (just coordinating ExecJS + React.js)\nPush as much Rails-specific logic into SprocketsRenderer\nMaintain a flexible interface for extending existing renderers or writing new ones (this is why I have prerender: as a Hash, it is more extensible)\nProvide a simple, pretty API for the most common uses\n\n\nI agree. However I believe that interface of react_component should not be changed by Renderer option.\nThis behavior is confusing:\n``` erb\nSprocketsRenderer:\n<%= react_component(\"Todos\", {todos: [\"Thing 1\", \"Thing 2\"]}, prerender: true) %>\nExecJSRenderer:\n<%= react_component(\"Todos\", {todos: [\"Thing 1\", \"Thing 2\"]}.to_json, prerender: {render_function: \"renderToStaticMarkup\"}) %>\n```\nWhat do you think?\n. I will think another way. thanks.\n. ",
    "jwaldrip": "I ended switching to browserify-rails. I was unable to use the plugins I needed otherwise.\n. ",
    "scouttyg": "I was quite a bit behind -- I was using the following version:\nGIT\n  remote: git://github.com/reactjs/react-rails.git\n  revision: 6be8f9dfde33e694ac5bb5690ad1191c24ed76ff\n  specs:\n    react-rails (1.0.0.pre)\n      connection_pool\n      execjs\n      rails (>= 3.1)\n      react-source (= 0.12)\nNow I'm using:\nGIT\n  remote: git://github.com/reactjs/react-rails.git\n  revision: 3f0af13fa755d6e95969c17728d0354c234f3a37\n  specs:\n    react-rails (1.4.1)\n      babel-transpiler (>= 0.7.0)\n      coffee-script-source (~> 1.8)\n      connection_pool\n      execjs\n      rails (>= 3.2)\n      tilt\nThis was also when you just had coffeescript files (aka react_component.js.coffee) and would add \n``` coffeescript\n@cjsx React.DOM\n```\nat the beginning of the file to use JSX, instead of using the now syntax react_component.js.jsx.coffee\n. Ah, I think you hit it -- I had originally had a gem in my gemfile called sprockets-coffee-react, which allowed such things to happen (it was always mentioned in tutorials and gists, eg: Rails and React II and  https://gist.github.com/fcoury/542adb603e221ef82516). I was recreating an app I had created a long time ago, and failed to include that gem as well, which then caused the issues (sprockets-coffee-react is really great!).\nThat solves a big portion of the problem! That being said, is there a best practice way to do immediately-invoked function expressions with the gem as is, if I didn't want to add another gem?\n. So to be clear, if this was in a component, it would look like:\ncoffeescript\n@Component = React.createClass\n  setInitialState: ->\n    enableBackButton: false\n    enableForwardButton: true\n  render: ->\n    `<div className=\"neato\">\n      {\n        do ->\n           (logic inside here)\n      }\n    <div>`\n. ",
    "dkln": "Well :smile:, This is kinda how my Gemfile looks like:\n- react-rails\n- sprockets\n- sprockets-es6\nSo my components.js (that lives in app/assets/javascripts) contains something like this:\ncomponents.js:\n//= require ./video\nThe filename of video, is in this case: video.es6.jsx. That used to work but now it can't find a suitable format anymore. To be honest, I did not try to change the extension (.jsx.es6 or .jsx.js etc.). \n. Yes I get an error message:\nSprockets::FileNotFound: couldn't find file './video' under 'website/app/assets/javascripts' with type 'application/javascript'\nAnd the infamous stacktrace:\n/Users/the-user/Projects/website/app/assets/javascripts/components.js:4\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/resolve.rb:64:in `resolve!'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:399:in `resolve'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:207:in `process_require_directive'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:180:in `block in process_directives'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:178:in `each'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:178:in `process_directives'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:83:in `_call'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/directive_processor.rb:68:in `call'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:75:in `call_processor'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:57:in `block in call_processors'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:56:in `reverse_each'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:56:in `call_processors'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:134:in `load_from_unloaded'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:60:in `block in load'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:318:in `fetch_asset_from_dependency_cache'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:44:in `load'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/cached_environment.rb:20:in `block in initialize'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/cached_environment.rb:47:in `yield'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/cached_environment.rb:47:in `load'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/bundle.rb:23:in `block in call'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/utils.rb:183:in `dfs'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/bundle.rb:24:in `call'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:75:in `call_processor'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:57:in `block in call_processors'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:56:in `reverse_each'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/processor_utils.rb:56:in `call_processors'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:134:in `load_from_unloaded'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:60:in `block in load'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:318:in `fetch_asset_from_dependency_cache'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/loader.rb:44:in `load'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/cached_environment.rb:20:in `block in initialize'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/cached_environment.rb:47:in `yield'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/cached_environment.rb:47:in `load'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/base.rb:66:in `find_asset'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/base.rb:73:in `find_all_linked_assets'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/manifest.rb:130:in `block in find'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/manifest.rb:129:in `each'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/manifest.rb:129:in `find'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/sprockets/manifest.rb:162:in `compile'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-rails-2.3.3/lib/sprockets/rails/task.rb:70:in `block (3 levels) in define'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-3.4.0/lib/rake/sprocketstask.rb:147:in `with_logger'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/sprockets-rails-2.3.3/lib/sprockets/rails/task.rb:69:in `block (2 levels) in define'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:240:in `call'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:240:in `block in execute'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:235:in `each'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:235:in `execute'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:179:in `block in invoke_with_call_chain'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/monitor.rb:211:in `mon_synchronize'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:172:in `invoke_with_call_chain'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/task.rb:165:in `invoke'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:150:in `invoke_task'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:106:in `block (2 levels) in top_level'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:106:in `each'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:106:in `block in top_level'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:115:in `run_with_threads'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:100:in `top_level'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:78:in `block in run'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:176:in `standard_exception_handling'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/2.2.0/rake/application.rb:75:in `run'\n/Users/the-user/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/rake-10.4.2/bin/rake:33:in `<top (required)>'\n/Users/the-user/.rbenv/versions/2.2.3/bin/rake:23:in `load'\n/Users/the-user/.rbenv/versions/2.2.3/bin/rake:23:in `<main>\n. So I think it just breaks because of the registered file extensions :smile: \n. Ah right, great find :+1: \n. ",
    "eugenijusr": "It seems that the new Sprockets mime type registry no longer matches these chained extensions and you need to explicitly list all the possible variations.\nFrom the upgrade doc (I missed this bit):\n\nHowever, this requires you whitelist all the compatible extension combinations. Theres no free form chaining. This turned out to be a less useful feature. It meant foo.js.coffee.erb.haml.jst.eco.sass was a legal processor chain, but pretty useless.\n\nE.g. it used to be:\nregister_engine '.coffee', Tilt::CoffeeScriptTemplate\nAnd now it's:\nregister_mime_type 'text/coffeescript', extensions: ['.coffee', '.js.coffee']\nregister_transformer 'text/coffeescript', 'application/javascript', CoffeeScriptProcessor\nNote how .coffee and .js.coffee are listed explicitly.\nI think it should be enough to add .es6.jsx to the extension list in engine.rb. I'll check it out and propose a small PR if that's the case.\nSorry for messing it up for the ES6 guys.\n. BTW it seems version 1.4.2 although tagged and released still has 1.4.1 in version.rb and no change log entry. @rmosolgo \n. I think this was done for performance reasons in the Tilt template version of this. For these Sprocket processors there is a way to do a similar thing by implementing an optional cache_key method.\n. This is only the internal Sprockets mime-type definition. That's the way Sprockets maps extensions with transformers - via mime-types.\nruby\nregister_mime_type arbitrary_mime_type, extensions: list_of_extensions\nregister_transformer arbitrary_mime_type, target_mime_type, SomeProcessor\nhttps://github.com/rails/sprockets/blob/master/lib/sprockets.rb\nStarting version 4 you will no longer be able to map extensions directly to transformers so the mime-type is actually required. We cannot use the existing application/javascript because that's the target mime-type reserved for vanilla JS files.\nTheir 2->3 upgrade doc even says:\nRegister a content type for file extension, its okay if its made up\nAlternatives to application/jsx would be to:\n- Follow the ERB convention and map JSX files to application/javascript+jsx mime-type similar to the way Sprockets maps .html.erb files to text/html+ruby.\n- Follow the CoffeeScript convention and map JSX files to text/jsx mime-type similar to the way Sprockets maps .js.coffee to text/coffeescript.\n. True, there's no benefit if there's no caching.\n. ",
    "remybach": "\nThe only place I'm seeing the extra whitespace is the pre-rendered output on the page (it's there when I view-source). Is that what you mean?\nI haven't specified any particular one, so I'm guessing it's the BabelTransformer since that's the default.\n. Ha ha... wow... your third point was the clincher.\n\nFixed by basically doing:\nhaml\n= preserve do\n  = react_component('Foo', {}, { prerender: true })\nThanks for pointing me in the right direction!\n. ",
    "towonzhou": "Does not need this?\n. @rmosolgo it's my pleasure.\n. ",
    "jraines": "Also, apologies if I've missed something obvious, but I don't know much about Babel and I cannot figure out what to put in the :optional config to make it work.\nCurrently I'm using the names of transformers listed here, with no success:\nhttp://babeljs.io/docs/plugins/preset-es2015/\n. ",
    "DanCouper": "This is old, but might as well leave this comment here for posterity for anyone else having issues. The links are still broken: I would have PRed them back in, but I'm not quite sure of how stable they'll be, and I think in addition that there needs to be some kind of explanation as to why it's difficult to locate the configuration documentation.\nYou didn't miss anything obvious. ruby-babel-transpiler uses Babel 5, not Babel 6. Between 5 and 6, Babel changed significantly; it is now plugin-based. Babel currently doesn't really do much without the plugins, with those installed via NPM. Using the transformer names listed on the current site won't work, because those transformers don't exist and cannot be installed.\nThe v5 options are ~~hidden~~ visible in the v5 docs on that branch of the babel website repo. Here is the list of options available, for example: https://github.com/babel/babel.github.io/blob/862b43db93e48762671267034a50c30c00e433e2/docs/usage/options.md\nHere are the transformers that can be passed to optional: https://github.com/babel/babel.github.io/tree/862b43db93e48762671267034a50c30c00e433e2/docs/advanced/transformers#optional\n. ",
    "kyr0": "Installing the plugin via npm solved the problem for me:\nnpm install babel-plugin-transform-class-properties --save\n. ",
    "Zatvobor": "I'll try it. Thanks.\n. ",
    "maier-stefan": "absolutely not working for me. \nSo i have installed \ngem \"react-rails\"\ngem 'babel-transpiler', '0.7.0\nAnd i additionally have the plugins i need installed with:\nnpm install babel-plugin-transform-class-properties --save\nSo in my Root of my Project i have now a node_modules folder and the package.json.\nIt is all in place, so which part make actually the reference to the libs? is it the babel-transpiler ?\n. ",
    "msokk": "Ran into this. react-rails 1.x is still running on Babel 5, so there is no point installing babel-plugin-* npm packages nor babel-transpiler explicitly.\nGot class properties working with old configuration style:\nruby\nconfig.react.jsx_transform_options = {\n  optional: ['es7.classProperties']\n}\n. ",
    "node-gs": "This should really be added into the documentation, I'm using react-rails 2.4.6 and @msokk s answer was the only way to get it working. ",
    "bowoekren": "+1 for erb inside jsx\n. ",
    "Luxbit": "+1\n. ",
    "dmgarland": "You can use ERB inside of JSX, it's just you won't have access to rails methods. E.g. the following worked for me:\nvar Example = React.createClass({\n  render: function() {\n    return (\n      <div>\n        <% 5.times do %>\n          <p>Yay for ERB!</p>\n        <% end %>\n      </div>\n    );\n  }\n});\nSo if you're just trying to programmatically create JSX elements with pure Ruby, it ought to be fine.\n. ",
    "renchap": "Yes, ruby 2.2.3p173\n. @szyablitsky it looks like @sevos found out how to fix this problem while adding Turbolinks support for webpacker-react: https://github.com/renchap/webpacker-react/pull/14#issuecomment-282500093\nYou may want to try the same fix :). ",
    "losvedir": "This :boom: s for us when precompiling assets, even though we aren't using prerender: true anywhere. One solution if you don't need the server side rendering is to just configure a dummy renderer:\n``` ruby\nconfig.react.server_renderer = Class.new do\n  def initialize(params = {})\n  end\ndef render(component_name, props, prerender_options)\n    ''\n  end\nend\n```\nCan @rmosolgo comment if this would have any negative consequences I'm not thinking of if we're not using server side rendering?\n. Thanks!\n. > Somehow, handle cases where assets are pushed to a CDN, not the local Rails server\nI think in most cases, doesn't the CDN just serve essentially as a caching layer, with the underlying Rails server still serving the assets (the first time)?\nAt least in our setup with heroku/cloudfront, which I think is fairly common, we precompile assets so they're served via the /public/assets/ folder, and we use, e.g. <%= stylesheet_link_tag 'app' %>. We have our asset_host set to our cloudfront CDN, so the generated link ends up looking like https://abc123.cloudfront.net/assets/app-def345.css. \nThen when the first request comes in to cloudfront after a new deploy, the filename hash will have changed, so cloudfront will proxy through to our site, and then cache and serve the asset from then on.\n\n\nCheck for asset_host config?\n\n\nThis wouldn't exactly work for us, I don't think. We do have it set, but we still have the assets precompiled on the server as well, so maybe accessible to Sprockets? (I'm not 100% clear how sprockets works...).\nJust FYI.\n. ",
    "augnustin": "Any quick workaround for new comers?\n. ",
    "keer007": "Just tried using legacy JSXTransformer by adding the following to config/application.rb\nconfig.react.jsx_transformer_class = React::JSX::JSXTransformer\nand things started to work fine. I still want to use the default Babel based transform; how to debug the issue with Babel transform?\n. onboard.js.jsx was very simple to begin with. Just ...\njavascript\nvar Onboard = React.createClass({\n    render: function() {\n        return (\n                Hi\n        );\n    }\n});\nI've changed it since once I got the legacy JSXTransformer running. Babel transform didn't even work for the above simple code.\n. \"Hi\" doesn't work either. Still continuing to use legacy JSXTransformer but running into import statement issues. Having Babel transformer would be great.\n. ",
    "austinfox": "I'm seeing this error as well. The following versions are being user:\nrails-react = 1.4;\nruby-babel-transpiler = 0.7;\nexecjs = 2.3;\nuglifier = 2.7;\njruby 1.7.1;\nSpecific error:\nRhino::JSError in Portal::IndexController#index\nTypeError: Expected argument of type object, but instead had type object (in {Rails workspace path here}/rails-root/app/assets/javascripts/components/index.js.jsx)\nThe index_controller contains:\nruby\ndef index\n    render component: 'Index', props: { customerId: \"test_customer_id\" }\nend\nand the index.js.jsx file contains:\n``` javascript\nclass Index extends React.Component {\n  render () {\n    return (\n      \nCustomer: {this.props.customerId}\n\n    );\n  }\n}\nIndex.propTypes = {\n  customerId: React.PropTypes.string\n};\n```\n. I'll try upgrading the JRuby and ExecJS versions, and remove uglifier. \nIn the meantime, could this possibly be the culprit? https://github.com/mozilla/rhino/issues/233\nSeems like this issue was fixed recently, but this change hasn't been pulled into therubyrhino package yet (I am currently using version 2.0.2)\n. ",
    "jrasanen": "I get the following error on Windows,\nirb(main):011:1\" var Onboard = React.createClass({\nirb(main):012:1\"      render: function() {\nirb(main):013:1\"      return (\nirb(main):014:1\"       \"Hi\"\nirb(main):015:1\"     );\nirb(main):016:1\"    }\nirb(main):017:1\" });\nirb(main):018:1\" |)\nExecJS::RuntimeError: SyntaxError: Invalid character\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/external_runtime.rb:39:in `exec'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/external_runtime.rb:14:in `initialize'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/runtime.rb:44:in `new'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/runtime.rb:44:in `compile'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/module.rb:27:in `compile'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/babel-transpiler-0.7.0/lib/babel/transpiler.rb:24:in `context'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/babel-transpiler-0.7.0/lib/babel/transpiler.rb:28:in `transform'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/react-rails-1.4.2/lib/react/jsx/babel_transformer.rb:17:in `transform'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/react-rails-1.4.2/lib/react/jsx.rb:21:in `transform'\nfrom (irb):10\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/console.rb:110:in `start'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/console.rb:9:in `start'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/commands_tasks.rb:68:in `console'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/commands_tasks.rb:39:in `run_command!'\nfrom C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands.rb:17:in `<top (required)>'\nfrom bin/rails:8:in `require'\nfrom bin/rails:8:in `<main>'\nirb(main):019:0>\nWith \"React::JSX::JSXTransformer\" the error changes:\nirb: warn: can't alias context from irb_context.\nirb(main):001:0> React::JSX.transform(%|\nirb(main):002:1\" var Onboard = React.createClass({\nirb(main):003:1\"      render: function() {\nirb(main):004:1\"      return (\nirb(main):005:1\"       \"Hi\"\nirb(main):006:1\"     );\nirb(main):007:1\"    }\nirb(main):008:1\" });\nirb(main):009:1\" |)\nExecJS::ProgramError: TypeError: Object doesn't support this property or method\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/external_runtime.rb:39:in `exec'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/external_runtime.rb:14:in `initialize'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/runtime.rb:44:in `new'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/runtime.rb:44:in `compile'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/execjs-2.6.0/lib/execjs/module.rb:27:in `compile'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/react-rails-1.4.2/lib/react/jsx/jsx_transformer.rb:17:in `initialize'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/react-rails-1.4.2/lib/react/jsx.rb:20:in `new'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/react-rails-1.4.2/lib/react/jsx.rb:20:in `transform'\n        from (irb):1\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/console.rb:110:in `start'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/console.rb:9:in `start'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/commands_tasks.rb:68:in `console'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands/commands_tasks.rb:39:in `run_command!'\n        from C:/RailsInstaller/Ruby2.1.0/lib/ruby/gems/2.1.0/gems/railties-4.2.3/lib/rails/commands.rb:17:in `<top (required)>'\n        from bin/rails:8:in `require'\n        from bin/rails:8:in `<main>'\n. ",
    "apat": "This work for me on Windows\nBefore, check if nodejs is installed.\nnode --version\nIf don't have nodejs installed, download & install node, then restart your console. That's it.\nSeldom, you need to set the javascript runtime in config/boot.rb. See: stackoverflow answer\nENV['EXECJS_RUNTIME'] = 'Node'\n. ",
    "kelaidit": "worked for me as well ; many thanks !\n. ",
    "amir20": "Hmm looks like there was some discussion at https://github.com/reactjs/react-rails/issues/156#issuecomment-141649815 \nWould it make sense to just cache the output always? If parameters don't change then I think yes. \n. I completely agree. If the cache already exists in rails, then why recreate it. \nRegarding your other suggestion...I did try therubyracer. However, I get a weird error that I have never seen before. \n18:12:11 web.1     | ActionView::Template::Error (Encountered error \"Error: Invariant Violation: renderToString(): You must pass a valid ReactElement.\" when prerendering PlayerPanel with {}\n18:12:11 web.1     | invariant ((execjs):1094:16)\n18:12:11 web.1     | Object.renderToString ((execjs):18767:84)\n18:12:11 web.1     | (execjs):3:41\n18:12:11 web.1     | (execjs):15:13\nI googled for a while and I couldn't find anything. My project is open sourced at https://github.com/amir20/radiowitter so you could try adding therubyracer. \nMeanwhile, I will use cache but if you know why that error happens, then I would really appreciate it! \n. So I have removed every line until it worked and the culprit is import 'babel-polyfill'. However, I need it because I do use yield in my code. Has anybody else seen this with therubyracer?\n. ",
    "drewhamlett": "I think he's asking this\n<%= react_component('Chart', {}, prerender: true) %>\n. ",
    "ZhangHanDong": "sounds good\uff01 I'll be modify the code.\n. @rmosolgo \nI have added a config option:\n``` ruby\nMyApp::Application.configure do\n  config.react.camelize_props = true #default false\nend\n```\nplease review, thanks!\n. @rmosolgo  thanks\n. ",
    "yoonsy": ":+1: \n. ",
    "sebbean": "a more common attribute would be: updated_at\n. Sounds good. thanks!\nOn Mon, Jan 11, 2016 at 2:41 PM Robert Mosolgo notifications@github.com\nwrote:\n\nFeel free to PR the Readme if you have an improvement in mind!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/422#issuecomment-170714752\n.\n. \n",
    "dlupu": "Great! Hope it gets merged soon !\n. ",
    "hayesgm": "It would be great to add a section about this in README.md or on a wiki page.\n. ",
    "butsjoh": "Not clear to me either how to use custom babel plugins :(\n. ",
    "smnplk": "@gauravtiwari in you application.js file, why is it needed to require react via sprockets ? Wouldn't that load react two times ? \n. Ok, thank you :) Also, I think folks that use react >= 0.14.0 need to require ReactDOM too, because react_ujs.js depends on it. So if you can add the following line: \nvar ReactDOM= window.ReactDOM = global.ReactDOM = require('react-dom'); \n. Same issue here.\n. I'm using react-rails in combination with browserify-rails. I scanned the react_ujs code and I see where it is using React.render instead of ReactDom.render, so I just had to add sprockets import //= require react before //= require react_ujs and there is no more warning. \nBut after //= require react_ujs I am also doing //= require components where I need to require React via node module system: \nvar React = global.React = window.React = require('react'); \nvar ReactDom = global.ReactDom = window.ReactDom = require('react-dom');\nI hope this does not compile two same versions of react library into  application.js file and makes react code load twice.  Need to check that.  Thanks for the tips @rmosolgo \nEdit: React is loaded twice if i do this :( My setup is the same as suggested here https://github.com/reactjs/react-rails/issues/413#issuecomment-160403501. \nSo to sum up, if I add sprockets directive  //= require react above //= require react_ujs, react will be loaded twice. If I remove //= require react, all works fine, except that render function is not called on ReactDom object, instead it's called on React. Because it looks like ReactDom is not loaded before react_ujs.js is. https://github.com/reactjs/react-rails/blob/master/lib/assets/javascripts/react_ujs.js.erb#l57\nI'm using latest sprockets gem (3.5.2), browserify-rails (1.5.0) and react-rails (1.5.0) \n. Oh, moron me. I was setting the ReactDom variable instead of ReactDOM :facepunch:  Issue solved :) \n@inchr , all you need to do is require ReactDOM.\n. ",
    "TSMMark": "I can not get this working without multiple copies of React being loaded.\nUncaught Invariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded\n. ",
    "awe2m2n2s": "@gauravtiwari: Thanks for showing a way with browserify. Do you also know how to do it with the asset-pipeline?\nSorry for asking but we are new to the whole world and are wondering about the best way to use react and rails. Unfortunately, until yet, we only found solutions where we had to install npm on the server, is that really necessary? -> sorry for asking that dumb but we cannot figure out how to get react-leaflet working on rails: https://github.com/PaulLeCam/react-leaflet/issues/133 without installing npm on the server which seems from our side to be a big overload (having npm and ror on the same server)\nThank you for any support!\n. You guys are truly awesome! damn thx so much and here are some remarks:\n-  @rmosolgo: thanks so much! the \"compiled\" version within the asset-pipeline worked finally! all other's feel free to to see the solution at https://github.com/PaulLeCam/react-leaflet/issues/133\n-   @gauravtiwari: I think you are right, it should work with the rails-assets.org and the asset-pipeline. Unfortunately, it isn't. I used your created gem - thanks so much for that - and got the same error I got with the gem 'rails-assets-PaulLeCam--react-leaflet', so I guess I am missing something there :(\n. ",
    "lesliev": "Hi @gauravtiwari, thanks for the guide above - can you help with a few questions? \nI am trying to reconcile your instructions with those at browserify-rails but both assume a level of understanding a little beyond mine. Following your browserify instructions, where do you put the \"Loading NPM modules\" code? Where do you run \"npm install\" to actually install the module? What is no_content.es6.js? Is NoContent the name of the hypothetical NPM module you are loading? \nAlso, the browserify-rails documentation says to create a package.json file with \"name\": \"something\" in it. Is that where I'm supposed to specify the NPM module I want to use?\nThe NPM module I am trying to include in my react-rails app is 'react-data-grid'.\n. @gauravtiwari, I've since proceeded based on some assumptions. I created a package.json file like this and ran npm install:\n{\n  \"name\": \"testproject\",\n  \"dependencies\" : {\n    \"react-data-grid\": \"0.14.22\",\n    \"browserify\": \"~10.2.4\",\n    \"browserify-incremental\": \"^3.0.1\"\n  },\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">= 0.10\"\n  }\n}\nThis installed a huge amount of JS (55MB) under node_modules. I ran cd node_modules/react-data-grid && browserify index.js -o react_data_grid.js to try and get browserify to bundle the component.\nThis produced errors about react and react-dom being missing but since it seems they are included already I excluded them like this: browserify index.js -i react -i react-dom -o react_data_grid.js.\nThe result was a react_data_grid.js and a dist directory, both of which I copied to my Rails app's app/assets/javascripts/components directory.\nThen I tried modifying application.js and components.js as you mention above. First I had to rename components.js to components.jsx because of the jsx content. \nLoading a page then produced this error:\n```\nBrowserify: /home/leslie/dev/git/hb/testproject/node_modules/.bin/browserifyinc --list --cachefile=/home/leslie/dev/git/hb/testproject/tmp/cache/browserify-rails/browserifyinc-cache.json -o \"/home/leslie/dev/git/hb/testproject/tmp/cache/browserify-rails/output20160408-2868-18hl8dy\" -\nCompleted 500 Internal Server Error in 1181ms (ActiveRecord: 5.4ms)\n[Rollbar] Reporting exception: Error while running /home/leslie/dev/git/hb/testproject/node_modules/.bin/browserifyinc --list --cachefile=/home/leslie/dev/git/hb/testproject/tmp/cache/browserify-rails/browserifyinc-cache.json -o \"/home/leslie/dev/git/hb/testproject/tmp/cache/browserify-rails/output20160408-2868-18hl8dy\" -:\nevents.js:141\n      throw er; // Unhandled 'error' event\n      ^\nError: Cannot find module 'jquery-ujs' from '/home/leslie/dev/git/hb/testproject/app/assets/javascripts'\n    at /home/leslie/dev/git/hb/testproject/node_modules/resolve/lib/async.js:46:17\n...\n```\nMy application.js looks like this:\n```\n//= require jquery\n//= require jquery_ujs\n//= require select2\n//= require react\n//= require react_ujs\n//= require js-routes\n//= require components\n//= require_tree .\n// Setup React in global scope\nvar React = window.React = global.React = require('react');\nvar ReactDOM = window.ReactDOM = global.ReactDOM = require('react-dom');\nwindow.$ = window.jQuery = require('jquery');\nrequire('jquery-ujs');\n```\ncomponents.js.jsx looks like this:\n```\nvar app = window.app = global.app = {};\nvar ReactDataGrid = require('./components/react_data_grid.js');\napp.ReactDataGrid = ReactDataGrid;\n//= require_tree ./components\n```\n(I moved the require_tree to the bottom, you don't mention it)\nI've not tried to actually load the component on a page yet, I get this error as sprockets tries to compile the assets. I also tried reordering the requires in various ways by always get browserify complaining about certain files being missing.\nAny ideas where I went wrong?\n. @gauravtiwari thanks for your help above, adding jquery-ujs to package.json did work. I guess I don't understand why this is even needed, I only require it because that's what you put in your original example application.js. \nI also tried from scratch again without excluding react and react-dom when running browserify (I previously used -i react -i react-dom). That didn't work at all because now there's require('./emptyFunction') inside the browserified js and that package is missing. Adding emptyfunction to package.json has no effect.\nI'd love to find (or be able to create) a complete guide on adding NPM's to react-rails projects.\n. Awesome! Thanks so much for doing this. I'd continued by dropping the distribution JS into my app but I'll need a better solution in the long run.\n. ",
    "jcmorrow": "@gauravtiwari thanks for being such a champ! I've spent several days toying around with different setups and I like yours a lot! I was just trying to imitate it but even with browserify running a babelify transformation it chokes on jsx, and throws Unexpected token errors.\n\nHow would you go about debugging something like this? I can't figure out if the problem is browserify, babelify, or my configuration! Thanks for any advice you might have.\n. @gauravtiwari I had all of that except stage-0 (adding it doesn't seem to make a difference).\n.babelrc:\n{ \"presets\": [ \"es2015\", \"react\", \"stage-0\" ] }\napplication.rb:\nconfig.browserify_rails.commandline_options = \"-t [ babelify --presets [ es2015 ] --extensions .es6 ]\"\npackage.json:\n\"dependencies\": {\n  \"browserify\": \"^13.0.0\",\n  \"browserify-incremental\": \"^3.1.1\",\n  \"d3\": \"^3.5.16\"\n},\n\"devDependencies\": {\n  \"babel-core\": \"^6.7.6\",\n  \"babel-preset-es2015\": \"^6.6.0\",\n  \"babel-preset-react\": \"^6.5.0\",\n  \"babel-preset-stage-0\": \"^6.5.0\",\n  \"babelify\": \"^7.2.0\"\n}\nBut still no jsx transform \ud83d\ude2d \n. @gauravtiwari yeah I should have mentioned browserify on the command line works 100%.\n. @gauravtiwari I like that last implementation a lot! I actually ended up using something similar a few days ago, though with Rails 4, not 5. As you say, it is much faster than browserify and gives much better error messages in my short experience.\nThanks for all your work on this!\n. ",
    "luccasmaso": "I have tried everything all of you said but it still duplicate importing react.\n@gauravtiwari I've downloaded the https://github.com/gauravtiwari/browserify_on_rails code to see what I'm doing wrong, but as I suspected unfortunately the same duplicate occurred (Note de double console message):\n\n. ",
    "Tectract": "Read all of this and I still have no idea how to 'require' javascript from node_modules/ into my react-rails app. Playing with browserify and webpack, the instructions are not clear. I have browserify installed but when I put #= require lodash into application.js.coffee, it crashes, lodash not found. Webpack, I couldn't even figure out where to start. Help?\n. Thanks for your response. I'm trying to use rebass, a js-generated-css library, which I'm skeptical will work with browserify. I was just testing with lodash because it's easy to test. Have not succesfully loaded either NPM module into my react-rails stack yet.\nRight now my site has a single React component, defined in view/view.js.cjsx, written in coffeescript. I'm using the sprockets-coffee-react gem to handle that coffeescript.\nI try to include var _ = require('lodash'); in view.js.cjsx, no luck, var is a reserved word in coffeescript.\nI try just _ = require('lodash'), no luck, component just simply does not load at all, it is undefined now because that line broke it. \nI can't figure out how to get browserify to have any noticeable effect at all so far, everything just breaks when I try to include any NPM code. Maybe I installed it wrong? I have:\ngem 'browserify-rails', '>= 0.9.1'    in my gemfile, installed gem,\nand I have: browserify and browserify-incremental in my package.json, installed\nSo maybe I should try webpack instead. Does this mean I will be compiling things from node_modules/ folders int minified sources and then copying those minified sources into app/assets/javascripts every time I start the server? \n. Sorry but this is not working for me, and I'm having a hard time troubleshooting it. I have done\nnpm install --save lodash \nand I have added: \n_ require('lodash')\nPage loads without the view component. It is not defined now. Adding that line at the top has caused some sort of silent error and now the web console warns that \"view\" is undefined.\nHere is the content of my view.js.cjsx right now:\n# @cjsx React.DOM\n_ = require 'lodash'\n@View = React.createClass\n  displayName: 'View'\nrender: ->\n    TopLevelView div here\n. Huh, well this is interesting, it appears that the lodash/underscore functions are available for me now in view.js.cjsx, but something in here is causing the component to become undefined.\nWhen I load the page that contains the view component now, it actually does console log out the results from an _.each function call, but the render doesn't complete and it tells me the view is undefined on the console. any ideas what's going on?\nhere is my view.cj.cjsx:\n# @cjsx React.DOM\n_ = require('lodash');\n@View = React.createClass\n  displayName: 'View'\nrender: ->\n        _.each [0,1], (num) =>\n      console.log(num)\n\\<div className='topLevelView'\\>TopLevelView div here\\</div\\>\n. ok got it working with browserify\nin my application.js.coffee:\n = window. = global._ = require('lodash'); \nin view.js.cjsx:\n  render: ->\n    _.each [0,1], (num) =>\n      console.log(num)\n<div className='topLevelView'>TopLevelView div here</div>\nis happy now. Next will try rebass. Not sure if JS-generated-CSS is gonna work here, let's give it a shot...\n. Is there a \"sanitize\" method that goes along with this, that would maybe remove some elements, maybe you could even which choose which elements to sanitize out?. ",
    "vinnyoodles": "Hey @gauravtiwari, sorry to piggyback on this issue but I'm having issue using browserify, react, and rails together.\nThis is my components.js file, but I'm getting this error when trying to import the react components.\nUncaught SyntaxError: Unexpected token import\n``` javascript\n// Component::Manifest\nimport APIConsole from './react/console/api_console.es6.js';\nimport ImagePopup from './react/table/image_popup.es6.js';\nimport Sidebar    from './react/sidebar/sidebar.es6.js';\n// Setup app into global name space for server rendering\nconst app = window.app = global.app = {};\n// Include into app namespace\napp.APIConsole = APIConsole;\napp.ImagePopup = ImagePopup;\napp.Sidebar = Sidebar;\n``\n. I'm also getting this error, it doesn't state where this error is coming from but I think it is when trying to use the react components in theview` files.\nUncaught ReferenceError: app is not defined\n<%= react_component('app.APIConsole', {:models => @models, :keys => @keys}.to_json) %>\n. I found the bug fix here http://www.we-edit.de/stackoverflow/question/babelify-browserify-rails-react-uncaught-syntaxerror-unexpected-token-import-34645619.html.\nFor some reason, the require('') is needed in the beginning of my component.js\n```\nrequire('');\n// Component::Manifest\nimport APIConsole from './react/console/api_console.es6.js';\nimport ImagePopup from './react/table/image_popup.es6.js';\nimport Sidebar    from './react/sidebar/sidebar.es6.js';\nconst app = window.app = global.app = {};\n// Expose components to global scope\napp.APIConsole = APIConsole;\napp.ImagePopup = ImagePopup;\napp.Sidebar = Sidebar\n``\n. Yeah, I included the.babelrc` file with the es6 transformation but I guess it wasn't looking for it. I probably set it up incorrectly since I've never used babel before\n. ",
    "Herbo4": "@Tectract I'm trying to load rebass into react-rails as well, do you have a repo that is working up I could look at?\n. ",
    "tmikoss": "Glanced over the changes in those two, but there's nothing that stands out as problematic to me. However, I'm not an expert on how the asset pipeline works.\nI've created a minimal app that reproduces the issue - https://github.com/tmikoss/react-rails-coffeescript-require-example\n. I'm seeing the same issue. Created a minimal test case for the issue - https://github.com/tmikoss/babel-transformer-sprockets-example\nSeems that whenever you use sufficiently advanced syntax (in my case, dynamic property names), babel injects a polyfill at the top of the currently processed file. require statements get pushed down and are no longer processed by sprockets.\n. ",
    "maggiesavovska": "Sorry for late response. Didn't have node installed on that machine and that is what caused the error. Thanks!\n. ",
    "dbackeus": "@rmosolgo thanks for the heads up, I've clicked the \"agree\" button on that page now so I hope everything's ok?\n. +1\n. Not actually sure how to fix the errors we get after upgrading to 1.10.0:\n```\n     Failure/Error: <%= react_component \"ComponentName\", {\n ActionView::Template::Error:\n   ReferenceError: window is not defined\n # (execjs):44062:3\n # (execjs):44064:2\n\n```\nThe components we use do not reference window explicitly as far as I can see (but are defined as @ComponentName = React.createClass(...)).\nThe CHANGELOG mentions manually adding window = this but not sure where to do that?. ",
    "dmitrye": "I am having the same error and I think I found the issue. Looks like reactify doesnt like empty attributes. I have className=\"\" in a<form>element that was causing the error across a dozen pages. As soon as I removed it the errors went away. BTW, these were duplicate className entries. Another entry already existed for className for the same element.\n. ",
    "PericlesTheo": "I've opened and answered the above in its own thread http://stackoverflow.com/questions/34241981/use-react-rails-with-packages-that-have-react-as-dependency\n. ",
    "daimeng": "Using requirejs style to import react module. Written in the es6 syntax import ... from ...\nit compiles to this (with some extra stuff stripped out):\ndefine(['exports', 'module', ..., 'react', 'react-dom', ...], function (exports, module, ..., _react, _reactDom, ...) {\n    var _React = _interopRequireDefault(_react);\n    ... other code ...\n})\nThe file is found and requested, no error on load. It is run and window.React exists, but _React doesn't. I may not have noticed this without jsx, but the transpiler is renaming to _React everywhere, which causes undefined doesn't have method errors whenever anything is called on it.\nI can't seem to view the source for 1.3.2 on this github for some reason. I want to compare exactly what changed (since that version was working fine.)\nEDIT: nvm, i can view 1.3.2 now, not sure what was going on\n. ",
    "tbrd": "I've gotten around this by adding this at the top of the generated webpack, but would like a better solution.\n(function (global) {\n    global.clearTimeout = global.clearTimeout || function () {};\n    global.setTimeout = global.setTimeout || function () {};\n}(this));\nEssentially this means any methods passed to setTimeout will never be called, which should be fine for  rendering purposes. \n. ",
    "xiaopow": "@tbrd May I ask how you added that to the generated webpack? is there a way I can set in config to write that to the top of the compiled file? thanks.\n. ",
    "chrisdobler": "@tbrd I cannot figure out where to define the function in webpack.\n. ",
    "hugofloss": "It works, just forgot add .jsx to a file that contained ES6.\n. ",
    "ChiassonFaminect": "I had the same problem! I didn't even know about .jsx extensions! Thank you!\n. ",
    "Overload119": "+1 thanks!\n. I'm running into the same issue. Can you be more specific with where the solution is in those threads? They are rather long threads.. How can I make sure server_rendering is not chunked?\nI'm currently using the plugin like this:\nenvironment.plugins.insert(\n  'CommonChunks',\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'common',\n    minChunks: module =>\n      module.context && module.context.indexOf('node_modules') !== -1,\n  }),\n  {before: 'manifest'},\n);\nI ultimately want common chunking for the client's benefit, but not sure how to make Webpacker exclude it for server side rendering. Any ideas?. ",
    "danchapman": ":+1: \n. ",
    "sumskyi": "any chance this will be merged?\nI have an app without active_record, arel, mailer, active_job\nalso, is coffee-script-source needed? probably it can be moved to the development dependencies?\n. I think, the only dependencies should be there are:\n- railties (ensure it is a rails app)\n- AND\n- sprockets (react-rails will not work without that)\nI don't think react-rails should support non-rails environments at all, but I am talking about pretty cut rails app.\nI will create a test app than.\nThanks!\n. ",
    "jipiboily": "This line is probably why it stopped working: https://github.com/reactjs/react-rails/compare/v1.4.1...v1.4.2#diff-db79e062f0a40ceaca64834c6738ee2bR7. Maybe the problem is in jasmine-rails after all?\n. Thanks for the update @mikem!\n. ",
    "mikem": "@rmosolgo I thought this was an issue with Sprockets so dug in trying to understand it. I didn't solve it, but wrote up what I found in rails/sprockets#209. Maybe that'll help?\nAlso, if you have any pointers, maybe I'll be able to make some progress.\n. I finally had some time to put a failing test together. @rmosolgo check out commit b962dae on my fork.\n. @rmosolgo yes, I've encountered that as well.\nDo you know whether that's a documented change of behavior in Sprockets? In my case it's another gem which is calling require_asset.\nI'll mention this in searls/jasmine-rails#178.\n. ",
    "colinrcummings": "I updated to react-rails 1.8.0 today in conjunction with the following and am no longer facing this issue:\n- jasmine-core (2.4.1)\n- jasmine-rails (0.12.2)\n- sprockets (3.4.0)\n- sprockets-rails (2.3.3)\nPrior to that, I was holding at react-rails 1.4; this no longer seems necessary.\n. ",
    "inchr": "Sorry guys, I was offline for holidays...\nI've fixed following the @smnplk suggestions, but my code it's like this:\nwindow.ReactDOM = require('react-dom');\n(in my main.jsx, that is the entry point of webpack...I load react from webpack too, and I load the react-ujs after the bundle of webpack)\n. @lokeshjain2008 Oh sorry, my fault! I'm new in github! done!\n. I need this too :( I will test your PR very soon @rmosolgo ! Thanks for your work!!\n. You've fixed it @SylarRuby ?\n. @Najtmare I had the same problem and thanks to this discussion i've fixed the problem. The only doubt (seeing your git repo) is: server_rendering.js (under packs folders), when is called and why is needed ? react_ujs isn't already called from packs/application.js ? why there is two time the same code ?\nThank you.. ",
    "lokeshjain2008": "@inchr If all good then close this issue.\n. ",
    "caydgreen": "I ended up having to put sprockets in my gemfile gem 'sprockets', '~> 2.2.1' - rails should have found it on it's own, but that worked for me.\n. ",
    "CostaRico": "@gauravtiwari I've removed it, now my files looks like:\napplication.js\n``` ruby\n//= require jquery\n//= require jquery_ujs\n//= require react\n//= require react_ujs\n//= require components\n//= require utils/functions\n//= require_tree .\n//= require bootstrap-sprockets\n```\nAnd components.js\n``` ruby\n//= require_tree ./components\nFunctions      = require('utils/functions');\n_              = require('lodash');\n$              = require('jquery');\nUserActions = require('./actions/UserActions');\nUserStore = require('./stores/UserStore');\nSelect2 = require('select2');\nToastr = require('toastr');\nSelect = require('react-select');\n```\nBut still the same =(\n. this is output of \nnpm ls | grep react\n\u251c\u2500\u252c react@0.14.6\n\u251c\u2500\u2500 react-dom@0.14.6\n\u251c\u2500\u252c react-router@1.0.3\n\u251c\u2500\u2500 react-select@0.9.1 extraneous\n\u251c\u2500\u252c reactify@1.1.1\n\u2502 \u251c\u2500\u252c react-tools@0.13.3\nnpm ERR! extraneous: select2-browserify@3.4.5 /Users/Costa/Frontend/vape-markup/node_modules/select2-browserify\nnpm ERR! extraneous: react-select@0.9.1 /Users/Costa/Frontend/vape-markup/node_modules/react-select\n. I've just created clean rails app, next installed react-reails and react-select and got this error again.\nYou could try it by yourself https://gitlab.com/CostaRico/test-react-select/\n. @rmosolgo hello, I've done what u told me, and it seems you are right, but. \nNext I faced to error \"classes is not a function\", so I needed to remove ClassNames dependency from react-select, I did it. Next I realized that react-input-autosize also is dependency and I remove it too, but next I got first error about refs. \nSo I think it's evil circle.\nWhat do you think would be right way?\n1. try to use react with no react-rails\n2. just don't use react-select (by I'm afraid of other libraries could give the same error)\nThx a lot for your help!\n. ",
    "maximedelpit": "Hi there,\nI'm facing an issue when loading external react libraries (and react-select specifically). I've not implemented browserify workflow and use Sprockets. I've found on rails-assets.org the gem rails-assets-react-selectbut I don't succeed in using it (same remark for react-charjs).\nMy application.jsis\n```\n//= require jquery\n//= require jquery_ujs\n//= require bootstrap-sprockets\n//= require jquery-fileupload/basic\n//= require jquery-fileupload/vendor/tmpl\n//= require react\n//= require react_ujs\n//= require components\n//require sweetalert2\n//= require_analytics\n//= require_tree .\n```\nMy components.js is: \n```\n//= require js-routes\n//= require classnames\n//= require LinkedStateMixin\n//= require react-dom\n//= require react-chartjs\n//= require react-select\n//= require_tree ./components\n```\nWhen loading my page, I get these errors in my inspector: \n```\nUncaught Error: Cannot find module 'react-dom'\nWarning: React.createElement: type should not be null, undefined, boolean, or number. It should be a string (for DOM elements) or a ReactClass (for composite components).warning \nUncaught Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.\n```\nI first supposed that since react-select mention var ReactDom = require('react-dom).DOMthat I had to install the gem from rails-assets. But the error keeps going on.\nAny idea of what it can comme from. I probably miss something in the way of importing a react-library.\nI could copy the lib in vendor and replace all node syntax (module, require, import, export). But it is what rails-assets gems take care off, isn't it?\nWhat are you recommendation to load react libraries in my rails app using traditionnal asset pipeline?\nThanks for your help,\nBy the way, thanks for this awesome gem! \n. ",
    "Carlows": "I'm having the exact same issue as @maximedelpit, have you found any workarounds? \ud83d\ude1e \n. Not clear to me, how do I add stage2 to react-rails?\n. ",
    "harikumar8984": "i am facing same issue. Any help would be much appreciated.. ",
    "reedlaw": "I having trouble with the Sprockets approach. I've tried including var ReactDom = window.ReactDOM but I'm not sure where to put it because it has to come after //= require react-select which is too late. So I'm not sure where to put that line.. Putting lines between the //= requires stops the loading of\nreact-select and react_ujs.. @gauravtiwari that works but somehow I still get an Error: Cannot find module 'react-dom'. @gauravtiwari I followed @maximedelpit above. react-select is a gem from rails-assets.org. My application.js mirrors your example. The two console.logs display fine when I load the page but it bombs on Select.. @gauravtiwari the Dist build seems to work. However I get a TypeError: _classnames2[\"default\"] is not a function.  That seems to be due to missing dependencies.. @guaravtiwari finally it works. Thanks. I'll have to check out rails-webpacker.. ",
    "gualopezb": "@reedlaw what specific versions of react-input-autosize and classnames did you use? I am getting Error: Cannot find module 'react' by requiring the dist build (v1.1.3) of react-input-autosize. ",
    "georgemillo": "Whoops, I've just realised that my sample app didn't work properly because I forgot to add js: true to the test. After adding js: true the spec passes.\nBut things still fail in my real app, and those tests aren't missing a js: true. Hmmmm.... I'll dig deeper and try and recreate the problem in the sample app for real this time.\n. Urgh... I'm an idiot. Turns out the problem was with the way I'd configured my JS tests and nothing to do with react-rails. Apologies.\n. @rystraum I can't remember what the problem was with \"the way I'd configured my JS tests\", sorry.\nHowever I ended up not using react-rails at all, and scrapping the asset pipeline altogether in favour of using NPM; it's just not worth the effort otherwise. I've formed the opinion that, if you need something as advanced as React for your front-end, the asset pipeline is more trouble than it's worth and you're better off taking advantage of more modern front-end tools. Not to knock on the hard work of the people who created react-rails because I'm sure it has its use cases; just saying that it wasn't right for my purposes.. ",
    "rystraum": "@georgemillo Sorry to ask this about a year later, but I'm running into the same problems. How did you fix your issue?. @georgemillo Thanks for replying. I'm starting to be of the same opinion too. Hopefully with 5.1, it would be less painful to pull in Webpack to Rails projects.. Also, to add to this discussion, the webpacker setup doesn't support multiple file extensions out of the box. I've been spending a couple of hours trying to find out why my CommentsContainer wasn't being found despite the export default CommentsContainer. Renaming my file from CommentsContainer.js.jsx to ComentsContainer.jsx made it work.. @sshaw Tried to replicate your versions, but it worked fine on mine.\nhttps://github.com/rystraum/react-rails-issue-702\nhttps://github.com/rystraum/react-rails-issue-702/blob/master/package.json\nhttps://github.com/rystraum/react-rails-issue-702/blob/master/Gemfile. @sshaw If it helps you, in projects that are transitioning from regular JS/jQuery to React, as a matter of convention, we've found that using .jsx for React stuff and retaining .js for non-React stuff is pretty robust. As a bonus, it helps us track which things are needed to be migrated still. :). @faizaankhan @Faizaankhan3 Hard for us to see the folder structure you're outlining because whitespace is clobbered in markdown. Can you wrap your folder structure text around code blocks so we can see exactly which folder structure you had?\n(e.g. specify ``` in its own line as start and end of the code block)\n\\\nLike this (remove the )\n```\n```. @qxchen6 \n\"Simplest\" though definitely not best practice:\nCreate a layout ReactComponent which renders passed in HTML in a prop as dangerouslySetInnerHTML.\nAgain, not best practice.\n```\n= react_component(\"ReactLayout\", content: yield)\nclass ReactLayout extends React.Component {\n  render() {\n    return \n\n  }\n}\n```\n\nOn second thought, yield might not work as is. If it doesn't try render_to_string(partial: \"yield\") then have a app/views/application/_yield.html.erb which just contains yield.. ",
    "cmsepul": "hey @rystraum , @georgemillo I also started pulling in react-rails to get started with React because I thought it was the fastest way, but I found there was a tool to go all in with NPM for this, https://github.com/shakacode/react_on_rails. You might want to check it out if you are thinking on moving away from react-rails. If I can't solve this test issue (I got here because I'm having the same issue) I might end up using ReactOnRails earlier than I thought.. ",
    "hassanazimi": "if you are using cloudflare in speed tab make sure Rocket Loader is turned off. ",
    "pardeep-netsol": "Solved, i need to restart my unicorn server.\n. ",
    "michelson": "Hi , i'm trying to include  the server bundle but the ReactDOM reference is lost, so ReactUJS fails\n\nany hints? cheers. ",
    "oleglitvin": "OK, there is an opened pull-request https://github.com/reactjs/react-rails/pull/430/files\n. > Could you give that branch a try? Let me know if it works for you -- it looks good to me but I'd like a second opinion before I merge it!\n@rmosolgo ~~yep, it works!~~\nSorry, it doesn't, I forgot to enable server side rendering.\n. It fails at this line https://github.com/reactjs/react-rails/pull/430/files#diff-543f6fa05678c006b8d4baa5cd4b517cR13, not being able to find react-server.js (even if react-server was added to the config.assets.precompile and being precompiled)\n. It seems that #471 fixes this issue. The only thing that needs to be done is to add server_rendering.js to the Rails.application.config.assets.precompile list.\n. Sounds good)\n. ",
    "DTwigs": "This would be super helpful! \n. ",
    "dudeman": "We didn't want the react-server code to end up in the components.js since that's delivered to browser clients. So we created a components-server.js file containing:\n//= require react-server\nAnd then added that components-server.js file to the server_rendering_options:\nconfig.react.server_renderer_options = {\n    files: [\"components-server.js\", \"components.js\"], # files to load for prerendering\n  }\nThis seemed to fix the prerendering asset location error above. However, we then were getting an error because of an additional sprockets 3 incompatibility. PR for that is here https://github.com/reactjs/react-rails/pull/478\n. Yeah, good question. I'm not sure.  But somehow it broke for us when we updated from 1.5.0 to 1.6.0\n. ",
    "benben": "The workaround didn't help me either.\n2016-03-03T19:42:59.810190+00:00 app[web.1]: Completed 500 Internal Server Error in 13ms (ActiveRecord: 0.6ms)\n2016-03-03T19:42:59.812302+00:00 app[web.1]:\n2016-03-03T19:42:59.812312+00:00 app[web.1]: ActionView::Template::Error (No compiled asset for react-server.js, was it precompiled?):\n2016-03-03T19:42:59.812313+00:00 app[web.1]:     33:   %fieldset.form__fieldset\n2016-03-03T19:42:59.812314+00:00 app[web.1]:     34:     %legend.form__legend\n2016-03-03T19:42:59.812314+00:00 app[web.1]:     35:       Releases\n2016-03-03T19:42:59.812316+00:00 app[web.1]:     36:     = react_component 'MultiFieldForm', {parent: 'system', component: 'Release', fields: @system.releases.to_json}, { prerender: true }\n. just to be clear: I put the config.react.server_renderer_options in my application.rb\n. ",
    "rpereira": "Same here. Here's the Heroku log:\nActionView::Template::Error (No compiled asset for react-server.js, was it precompiled?):\n     4: %p\n     5:   The time is now: #{Time.now}\n     6:\n     7: = react_component('HelloFromReact', {name: 'RAP'}, {prerender: true})\n  app/views/dashboard/index.html.haml:7:in `_app_views_dashboard_index_html_haml___3362025122456778176_70295050466140'\nHeroku's running on:\nruby 2.2.0p0 (2014-12-25 revision 49005) [x86_64-linux]\nRails 4.2.6\ngem 'react-rails', '~> 1.6'\n. ",
    "BunHouth": "+1\nI'm also get the same problem \nActionView::Template::Error (No compiled asset for react-server.js, was it precompiled?):\n    1: = react_component('Products', {}, { prerender: true })\n  app/views/products/index.html.haml:1:\nin `_app_views_products_index_html_haml__2224966273559460328_68268360'\ngem 'react-rails',                        '~> 1.6', '>= 1.6.2'\n. ",
    "krazyjakee": "Does server_rendering.js go in /assets/javascripts/server_rendering.js?\nWe're getting...\nActionView::Template::Error: No compiled asset for server_rendering.js, was it precompiled?\nNo compiled asset for components.js, was it precompiled?\n. @alcedo yes, it is definitely there.\n. @alcedo mine was...\n//= require react-server\n//= require react_ujs\n//= require components\nI'll tweak it and get back to you. Thanks!\n. Of course as soon as I write up the question I find the issue.\nWhen requiring CJSX files, it comes wrapped (not bare) in a self declaring function and therefore I needed to use <window.advancedSearchOptions /> (and create a window object in the server-side js). It's a shame I can't pass the bare option to the required coffeescript per file.\n. Ok, the issue was that, unlike sprockets, react_component requires a path string as the first parameter (instead of just the component name) where the root is the webpacker \"components\" folder. i.e\n=react_component 'subfolder/awesomeComponent', {}, { prerender: true }. I think I mean something like this: https://github.com/rails/webpacker/issues/65\nBy referencing the webpack file paths directly I would get every dependency over and over again, I think I would need to consult with webpacker to get an answer. Thanks for taking the time.. This solved it for us:\nnew webpack.optimize.CommonsChunkPlugin({\n      names: ['common'],\n      chunks: [\n        \"components/a\",\n        \"components/b\"\n      ],\n      minChunks: 2\n    }). Yes... it really did. I don't understand how that worked, but I'm not going to complain.\nThanks very much :). Thank you very much.\nSo as I understand it...\n- application.js loads react_ujs with the extended code as you've written\n- components/a.js updates the react_ujs context with it's imports\n- common.js ?\nSo to start with, in my common.js (path = app/javascript/common.js) I have...\nvar requireContext = require.context(\"components/common\", true)\nwindow.ReactRailsUJS.requireContexts.push(requireContext)\nI moved my imports into a new file also called common.js in the components folder but I get this error.\nclient:119 ./app/javascript/packs/common.js\nModule not found: Error: Can't resolve 'components/common' in 'app/javascript/packs'\nThat file definitely exists in that folder.\nI may be mistaken but I can't help feeling this isn't an edge-case requirement. Surely it's not likely that a website/webapp will want all their assets crammed into a single monolith file by default?\nThanks again for your assistance on this.. @rmosolgo lol, but sadly we're talking 3mb of javascript compressed.\napp/javascript/packs/components/common.js exists. That is the context I want to use, just a single file. I tried putting it in an array but that didn't work.\nThe docs say I can use regex var requireContext = require.context(\"components\", true, /common\\.js/)\nbut the components are not found. application.js:35 Uncaught Error: Couldn't find AutoComplete in any requireContext\nAutoComplete is imported in common.js\nEDIT:\nI understand require.context was a good way to grab ALL components, but ReactRailsUJS needs to have specific files pushed in.. @rmosolgo thank you for you suggestion.\nI spent some time with sprockets-commoner and could not get it work. Sadly the stack provided nothing of use to debug so it was basically a dead end. The project itself also seems to be dead.\nI think it's very sad that the \"normal\" thing to do now is create react components that hard code package or build systems into their core.\nI'd like to continue this discussion if anyone has other ideas.. ",
    "rafaelv90": "Did the workaround!\nBut now I get the same error with server_rendering.js\nRuntimeError (No compiled asset for server_rendering.js, was it precompiled?):\nRails 4.2.6\nruby 2.3.1p112\nsprockets 3.6.2\nreact-rails 1.8.0\n. Yes! Did all the steps you provided!\nIt's strange because it works in development mode and worked in production until some days ago. And it seems a lot of people is having the same issue. Perhaps any conflict with other dependency gems?\nI'm still trying to find out!\n. I'm trying to figure out! Looking through the commits, updated some code and added only a few gems, but nothing related to React itself.\nAdded pundit gem and pointed another one (validates_cpf_cnpj) to a Github fork repo.\nBut I don't believe these changes are related with this rendering issue.\n. ",
    "JoelBeasley": "@rafaelv90 I'm experiencing the same thing, worked fine in production, still works in dev but today stopped working in production.\n. @rmosolgo after redeploy. I have 2 production servers, one I use as staging. When I pushed up to staging it broke today. When I push the existing working production server code to staging (an exact production replica) it starts throwing the \"was it precompiled\" error.\n. @rmosolgo The production code mirrored on staging worked, my mistake was viewing the log, it was a process of the prior build, learned something new about EY.\nI also found that when deploying on EngineYard the assets won't re-precomplie if the assets.rb is changed, only if the assets .js/.css are changed, or its in the EY config to always precomplie.\nSolution that worked for me\nAdding the assets to the precomplie, then touching the .js asset allowed it to precomplie and work.\nRails.application.config.assets.precompile += %w( react-server.js components.js )\nUnfortunately I was not able to locate the differences that suddenly required the react-server.js components.js to be listed in the precomplie, I did check the gemlock files of both codebases and they are identical.\n. ",
    "maveonair": "I can confirm that I only had to add Rails.application.config.assets.precompile += %w( react-server.js components.js ) in  config/initalizers/assets.rb to get server side rendering work on Heroku.\n. ",
    "dimoreira": "Guys, in my scenario I use separated manifest files for loading dependencies and react components for main interface and admin interface.\nMy files are divided as following:\napplication.js:\njavascript\n//= require jquery\n//= require jquery_ujs\n//= require bootstrap\n//= require maskedinput\n//= require jquery.fancybox\n//= require getstream\n//= require react\n//= require react_ujs\n//= require react-rails-hot-loader\n//= require components\nserver_rendering_components.js:\njavascript\n//= require react\n//= require react-server\n//= require components\ncomponents.js:\n``` javascript\n//= require accounting.min\n//= require moment-with-locales.min\n//= require autosuggest\n//= require_tree ./react\nmoment.locale('pt-br');\n```\nadmin.js:\njavascript\n//= require react\n//= require react_ujs\n//= require react-rails-hot-loader\n//= require admin_components\nserver_rendering_admin_components.js:\njavascript\n//= require react\n//= require react-server\n//= require admin_components\nadmin_components.js:\njavascript\n//= require_tree ./admin-react\nconfig/environments/{development.rb,production.rb}\"\nruby\nconfig.react.server_renderer_options = {\n    files: ['server_rendering_components.js, server_rendering_admin_components.js']\n  }\nconfig/initializers/assets.rb:\nruby\nRails.application.config.assets.precompile += %w( admin.js admin.css server_rendering_components.js components.js server_rendering_admin_components.js admin_components.js )\nI just keep getting this error:\n\nReact::ServerRendering::PrerenderError - Encountered error \"ReferenceError: ReactDOMServer is not defined\" when prerendering ComponentName\n\nWhat I'm doing wrong?\n. Nevermind guys, I just fix the files object to correction:\nInstead of:\nruby\nconfig.react.server_renderer_options = {\n    files: ['server_rendering_components.js, server_rendering_admin_components.js']\n }\nCorrected for this:\nruby\nconfig.react.server_renderer_options = {\n    files: ['server_rendering_components.js', 'server_rendering_admin_components.js']\n }\n. ",
    "maxdignan": "It is better because it removes the instantiation of a new variable for each cycle of the loop (var node = index in nodes). Instead now, there is no variable instantiation, and instead just merely the pointer is passed into each cycle of the loops for the respective index in nodes. On top of this, this version does not expose an index variable, which would, to developers just entering the project, imply that some math will be done with this index variable. But in reality, this does not occur. This commit uses better practices that are better not just from performance, but also readability.\n. ",
    "tosbourn": ":+1: \n. ",
    "AndreaMaggi": "Sure @rmosolgo will update it now\n. ",
    "quangv": "Thanks @davidlormor for the question and @rmosolgo for the clarification!\nJust to be clear for anyone else running across this problem.\nYou'll need config.react.addons = true in application.rb and\n`<React.addons.CSSTransitionGroup ... >\n</React.addons.CSSTransitionGroup/>`\nI couldn't get a-la-carte to work either. c18aa380\n. ",
    "twe4ked": "Thanks for creating this issue @rmosolgo. Looks like #450 could be a dot-point under Support Rails 5.0.\nEdit: Just realised #450 is a duplicate of #404. Sorry.\n. Duplicate of #404.\n. ",
    "connorshea": "Do you mean Sprockets 3 or Sprockets 4? At the moment I'm testing Turbolinks 5 and Sprockets 4.0.0.beta2 and react-rails isn't playing well with one or both of them.\n. @rmosolgo Upgrading from 3.x and 4.x: https://github.com/rails/sprockets/blob/master/UPGRADING.md\nI don't think it'll be apart of Rails 5, at least not as far as I know.\n. @rmosolgo and thank you very very much for maintaining the gem for so long and so well! I was so happy to see react-rails had already been upgraded to support Rails 5, most other gems were throwing deprecations warnings right and left.\n. @rmosolgo update: It looks like this was entirely a Turbolinks 5 problem. Since Turbolinks 5 has no guide for updating, I didn't realize the events had changed, so all our JavaScript stopped loading.\nUsing Turbolinks Classic and Sprockets 5.0.0 works fine with react-rails, apologies!\n. @rmosolgo you can probably remove the renderToString TODO, React v15.0 will remove it.\n. Not sure, I guess you'd have to test 15.0-rc1 to see what happens.\n. ",
    "drush": "Is React 15.0 support implicit for this issue, or should it be added to the checklist?  Don't see a 15.0 ticket elsewhere.\n. ",
    "dezmathio": "I could just read the other issues... :)\n. @danott @rmosolgo Does this PR only affect official React Addons or could this be used for any component? even things specifically installed via npm ?\n. ",
    "stormsilver": "I ran into this exact same problem whilst trying to cause Babel to export my files as System modules. This branch worked great with the one problem that the Sprockets 2 integration hadn't been updated to pass the correct options. I added that: https://github.com/stormsilver/react-rails/commit/018eaed20a6dd733fe6e9e86d6c9a51735b65e6e and then used the following config to cause it work:\nruby\nconfig.react.jsx_transform_options = ->(sprockets_input) do\n  {\n        modules: 'system',\n        moduleIds: true,\n        keepModuleIdExtensions: true,\n        moduleId: sprockets_input[:name],\n        filename: sprockets_input[:filename],\n  }\nend\n. ",
    "lfaire": "Can two different components rendered through react_component() share state ? Would one re-render if the other changes the state? \n. ",
    "valff": "Such duplication causes a lot of react errors:\n\nError: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's 'render' method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).\n. \n",
    "revskill10": "@rmosolgo  The problem is, server-side rendering works fine in local, but fails in Heroku.\nSo what's the difference here between local and heroku ?\nAnyway, i've tested the branch. And it works!\n. ",
    "FreeApophis": "The Problem was indeed in that File:\nmodule React\n  class Application < Rails::Application\n  end\nend\nThe problem was that I created a new app with the name react: Solution DO NOT create an application with the name react, any other name works like a charm. That was bad luck.\nrails new react\nThanks, case closed\n. ",
    "pastullo": "hahah just got the same exact error, fresh new app called react to try this out\n. ",
    "hongxingshi": "I think it is a bug of BabelTransformer. It works now after changed config like this:\nconfig.react.jsx_transform_options = {\n      blacklist: ['spec.functionName', 'validation.react'], # default options\n    }\n. No, I didn't  download the plugin separately, I just used the Gemfile.\nI think the strict mode is useful and it should be removed in the default blacklist.\n. ",
    "bluesh55": "Oh.. i didn't think that point.\nit's complex problem than i think.\nthanks rmosolgo.\n. ",
    "alg": "I have an idea. I'll give it a try now and report back.\n. ",
    "danieldocki": "@rmosolgo Yes! I'am using\n. @rmosolgo \nI fixed. I'm changed last line in application.js\n//= require_tree .\nto\n// require_tree .\n. ",
    "alfredoreduarte": "Hey thanks!\nIt did work, and I'll keep this in mind for future implementations. Sadly, the npm module I was trying to use kept crashing like crazy even after that, so this is kind of a pyrrhic victory.\n. I'd like to reopen this, as react_ujs doesn't work if you don't load react.\nIs there a way to add a fallback so that, if react isn't loaded using sprockets, it goes and looks for the react npm module?\n. I require react_ujs before my components in application.js:\n//= require react_ujs\n//= require components\nAnd I import React and ReactDOM inside a component (trying with just one to isolate the problem):\nimport React        from 'react';\nimport ReactDOM     from 'react-dom';\nWhat I get is:\n\nIt basically blows up in the sixth line of this function:\n;(function(document, window) {\n  window.ReactRailsUJS.TurbolinksClassic = {\n    // Attach handlers to Turbolinks-Classic events\n    // for mounting and unmounting components\n    setup: function() {\n      ReactRailsUJS.handleEvent(Turbolinks.EVENTS.CHANGE, function() {window.ReactRailsUJS.mountComponents()});\n      ReactRailsUJS.handleEvent(Turbolinks.EVENTS.BEFORE_UNLOAD, function() {window.ReactRailsUJS.unmountComponents()});\n    }\n  };\n})(document, window);\n...and then here React is not defined:\n// Prefer ReactDOM if defined (introduced in 0.14)\n        var renderer = (typeof ReactDOM == \"object\") ? ReactDOM : React;\n. ",
    "goncalvesjoao": "@alfredoreduarte so, if you're component imports a module that import React, in theory moving the //= require components before //=require react_ujs should the problem, right?\n. ",
    "bhernez": "@rmosolgo You are rigth about the version, I have sprockets 3.5.2 and sprockets-rails 3.0.1\n. I'll try the fix too, I guess this is closed for now. Thanks!\n. ",
    "davidmilo": "Any solution for this other than downgrading sprockets? Browserify-rails is unfortunately dependant on sprockets > 3.0\n. ",
    "franzejr": "I agree README is not totally friendly related to the react-server file.\n. ",
    "caseys": "\"automatic\" react-server.js has been confusing for me too.. we are seeing this too with 1.1.0.. This PR seems to be related: https://github.com/reactjs/react-rails/pull/471. ",
    "murtali": "having trouble rendering the routers from rails as well. how were you able to render via render_component?\n. ",
    "nguyenmv2": "Do you have  in your App component ? I do believe that's where the components of the route are generated \n. I'm a complete newbie in this as well, but if you can humor me with this attempt. Try setting the root path as DefaultRoute, then create an App component  that returns only \n. ",
    "jamby": "Sadly since this is inside rails, there's no App component. I have specific features that have the mother \"system\" component, but no App component that encompasses everything if that's what you mean?\n. ",
    "origamih": "I've made React-router work with this gem. Here is my solution:\n1. Download the React-router library https://unpkg.com/react-router/umd/ReactRouter.min.js\n    Put it in vendor/assets/javascripts, require it in application.js\n    Or you can put it in app/assets/javascript (no need to require)\n2. Define the essential React-router variables some where in those javascript asset files. \nvar Router = ReactRouter.Router;\nvar Route = ReactRouter.Route;\nvar Link = ReactRouter.Link;\nvar IndexRoute = ReactRouter.IndexRoute;\nvar IndexLink = ReactRouter.IndexLink;\nvar IndexRedirect = ReactRouter.IndexRedirect;\n1. Add the react_component helper into your view, says the component is ReactHome, this will render the Router component\n   <%= react_component 'ReactHome' %>\n2. Add the jsx code for Router, in this code you can add the actual React component\nvar ReactHome = React.createClass({\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" component={your_react_component}>\n        </Route>\n      </Router>\n    );\n  }\n});\nGood luck. The only problem I got is when the page renders a React component, react-rails-hot-loader doesn't work within that component, it works with child components\n. ",
    "Kario": "Hi, Thanks for sharing the solution, I got this working on my existing rails app. I cant seem to get it to work on pre-rendering though, it keeps giving me the error: \n\nGoogle shows this to be that it cant find the history for the Router, which are defined in the js assets: \nvar hashHistory = ReactRouter.hashHistory;\nvar browserHistory = ReactRouter.browserHistory;\nI tried putting these in the server_rendering.js along with react router include, but it still throws the same error. I attempted to put the components after the declaration of the vars, but then the server renderer couldnt find my components... I cant seem to figure out how to debug ExecJS, but it seems to me there is some kind of error with the definitions causing the whole process to fail...\nHas anyone gotten router to work on pre-render?\n. ",
    "Sporky023": "Thanks @origamih.  \nLatest version of react-router on unpkg has a new url format:  https://unpkg.com/react-router@4.1.1/umd/react-router.js. ",
    "eveevans": "For react-router-dom 4.x \nYou should change the var, for the new equivalents\nvar Router        = ReactRouterDOM.BrowserRouter;\nvar Route         = ReactRouterDOM.Route;\nvar Link          = ReactRouterDOM.Link;\nvar HashRouter    = ReactRouterDOM.HashRouter;\nvar Switch        = ReactRouterDOM.Switch;\nvar StaticRouter  = ReactRouterDOM.StaticRouter;\nvar Redirect      = ReactRouterDOM.Redirect;\nvar Prompt        = ReactRouterDOM.Prompt;\nvar NavLink       = ReactRouterDOM.NavLink;\nvar withRouter    = ReactRouterDOM.withRouter;\nvar match         = ReactRouterDOM.matchPath;\n(I'm guesing this is not the complete list, but you get the idea) . ",
    "Kastrcn": "how to ssr?. @BookOfGreg \nno srr\nHelloWorld.js\n```javascript\nimport React from \"react\";\nimport ReactDOM from 'react-dom'\nimport Person from './Person'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nfunction HelloWorld() {\n  return (\n    \n\n\n\nHome\n          \n\nAbout\n          \n\nTopics\n          \n\n\n\n\n    }   />\n      \n\n  );\n}\nfunction Home() {\n  return (\n    \nHome\n\n  );\n}\nfunction About() {\n  return (\n    \nAbout\n\n  );\n}\nfunction Topics({ match }) {\n  return (\n    \nTopics\n\n\n${match.url}/rendering}>Rendering with React\n        \n\n${match.url}/components}>Components\n        \n\n${match.url}/props-v-state}>Props v. State\n        \n\n  <Route path={`${match.path}/:topicId`} component={Topic} />\n  <Route\n    exact\n    path={match.path}\n    render={() => <h3>Please select a topic.</h3>}\n  />\n</div>\n\n);\n}\nfunction Topic({ match }) {\n  return (\n    \n{match.params.topicId}\n\n  );\n}\nexport default HelloWorld;\napplication.html.erbhtml\n<!DOCTYPE html>\n\n\nSampleReact\n    <%= csrf_meta_tags %>\n    <%= csp_meta_tag %>\n<%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>\n<%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>\n<%= javascript_pack_tag 'application' %>\n\n\n\n    <%= react_component('HelloWorld', {prerender: true}) %>\n\n\n```\n\n\n. ",
    "Bassov": "\nI wonder what could be stuck!?\n\nI'm not so good at English:) I meant that my terminal is trying to process the script but nothing happens until you suspend the process.\n\nYep, you can definitely just do it yourself.\n\nSorry. But could you help me find the manifest that i should add?\n. Thank you a lot!\n. ",
    "tomatoturnip": "I had the same problem. I created a new Rails 5.0.1 app with nothing in it. Bundle installed the react-rails gem and tried to run rails g react:install. Terminal just hung. In my case, it had to do with Spring. After running spring stop in the terminal, I was able to run the generator. See this issue.. ",
    "dheeraj2dj": "@tomatoturnip Thanks a lot!. ",
    "archonic": ":+1:\n. ",
    "kumekay": "Thank you, @rmosolgo \nIn my current project it works just fine!\n. ",
    "yerassyl": "@rmosolgo , yes, it works.\n. ",
    "akshaymohite": "Taking a look at failing specs.\n. @rmosolgo fixed failing specs. Build is green now.\n. :+1: \n. @MincePie can you please fix the code formatting in your comment? Otherwise, it is difficult to understand the exact issue.\n. @marcosvicente this article suggests few ways to handle ajax with react.\n@rmosolgo I believe this does not qualify as an issue with the react-rails gem.. @marcosvicente this seems to be a duplicate of #656, can this be closed?. @novikserg I just tried with rails 5.0.1 and react-rails 1.10.0, and could not reproduce such issue.\nI don't believe the issue would be related to ruby 2.2.4.\nSample repository just for your reference: https://github.com/akshaymohite/rails-5-react-rails-test. @radovsky can you try with\njavascript\nclass Company extends React.Component {\n  render() {\n    return (<h1>hey</h1>);\n  }\n}\ninstead?. \ud83d\udc4d . @deesx looks like there is a spelling mistake near componentDidMount.\n```Ruby\nclass ApplicationController < ActionController::Base\n  protect_from_forgery with: :exception\ndef index\n    render component: 'Index', props: {}\n  end\nend\nandjavascript\nclass Index extends React.Component {\ncomponentDidMount() {\n    console.log(\"Is is mounted ?\")\n  }\nrender() {\n    return (\n      check\n    )\n  }\n}\n```\ninstead?. @kilimchoi can you please try with this,\nChanged this line:\njavascript\n<a href=\"#\" data-turbolinks=\"false\" onClick={this.get.bind(this)}>\nEntire component:\n```javascript\nclass Edit extends React.Component {\nget() {\n    console.log('this.props is', this.props);\n  }\nrender() {\n    return (\n      \n\n        Some Icon\n      \n    );\n  }\n}\n```. ",
    "jademcgough": ":+1: ran into this as well and was about to make a PR\n. ",
    "JoJoJoey": "Hi @rmosolgo, after inspecting as you suggested, we found two issues with our code:\n1. A list of states is getting populated via AJAX, so prerendering isn't picking that up.  We can fix this.\n2. In page source, the reactid is always at the end of the <div> html:\n   <div id=\"set-region-box\" data-reactid=\".1g753qdqb5s.0.0\">\n   and it's always at the front when we inspect element:\n   <div data-reactid=\".1g753qdqb5s.0.0\" id=\"set-region-box\">\n   will browsers see this as an error with prerendering?  Is there a workaround?\nThanks!\n. ",
    "jordanbyron": "@rmosolgo dude you rock :metal: Super fast response and amazingly detailed :+1: \nThis gives me a much better idea of what needs to happen and at the very least gives me a workaround in the meantime. Do you think it would be beneficial for others if we added a little caveat to the \"Server Rendering\" section of the README about the current limitations of 3.2? If so I'd be happy to draft something up.\n. @rmosolgo I think I've got this working. Here is the solution I came up with based on your suggestions:\n``` ruby\nclass YamlManifestContainer\n  def initialize\n    data = YAML.load_file(Rails.root.join(\"public/assets/manifest.yml\"))\n@manifest = OpenStruct.new(\n  assets: data,\n  dir:    'assets'\n)\n\nend\ndef find_asset(logical_path)\n    asset_path = @manifest.assets[logical_path] || raise(\"No compiled asset for #{logical_path}, was it precompiled?\")\n    asset_full_path = ::Rails.root.join(\"public\", @manifest.dir, asset_path)\n    File.read(asset_full_path)\n  end\nend\n```\nYamlManifestContainer mimics the behavior of React::ServerRendering::ManifestContainer and internally generates an stand in object that acts like Sprockets::Manifest. Rails 3.2 outputs manifest files in yaml format, not JSON like Rails 4+, so I couldn't use Sprockets::Manifest to parse the manifest file. Instead we create a struct which quacks like a Sprockets::Manifest and parses the manifest.yml file.\nruby\nif Rails.application.config.assets.compile == false\n  React::ServerRendering::SprocketsRenderer.asset_container_class =\n    YamlManifestContainer\nend\nI threw this into an initializer so when we are in development, or any env where config.assets.compile is false we get the default behavior which recompiles the assets on demand. Otherwise it uses the fancy new YamlManifestContainer class which pulls the precompiled assets instead.\nLastly, I created a server_rendering.js file that looked just like the example you gave and made sure to add it to config.assets.precompile and config.react.server_renderer_options\n\nAnd viola! Working server rendering with precompiled assets. I'm not sure how robust my assumptions are about the manifest file and assets location. Any insights on how I could improve those lines of YamlManifestContainer?\nLastly if you think this approach is a solid solution I'd be happy to workup a PR integrating these changes into the library. Thanks again for all of your help! :fire_engine: \n. > I think you could add some logic here to use YamlManifestContainer:\nThat's exactly what I was thinking!\n\nAs far as improving YamlManifestContainer, is there an advantage to creating @manifest instead of accessing the parsed YAML directly?\n\nhaha not at all! Originally I tried subclassing React::ServerRendering::ManifestContainer to get the find_asset method for free but was running into issues so I abandoned that approach and the resulting @manifest code never got cleaned up. \n\nThen, if you wanted to add unit tests, that'd be great. \n\nOf course! I'll get that added to my PR so we can be sure this is covered. \n\nDo you have any links to documentation handy?\n\nUnfortunately I don't, but I'll see what I can dig up. Regardless I'll make sure this is passing in the test suite so we can be fairly confident it works with a stock Rails 3.2 app.\nThanks again for the awesome feedback. I'll try to get this out to you tonight or tomorrow morning. :hammer: \n. @rmosolgo done and the 3.2 tests are passing on my machine. Hopefully Travis agrees! :dizzy_face: \n. No problem at all. I should have verified the new code I added had test coverage so it's the least I can do. Thanks again for all your help and for doing an awesome job maintaining this project :hamster: \n. Yes. Before I added a test for the YamlManifestContainer class assets were only precompiled once which worked, but as soon as the code attempted to precompile them a second time it silently failed (because assets:precompile:all et al were not reenabled) hence the problem with clear_precompiled_assets. Of course I had no idea that's what was happening until I started digging into this a bit more. \nI added the raise here to be more explicit with our expectations. \n. ",
    "woniesong92": "@rmosolgo Thank you so much for your answer. This was rather a non-fruitful question. If you don't mind answering a few more, I am curious about the following:\n1. Do you think react-rails necessarily couples frontend and backend?\n2. What advantage does react-rails provide compared to a node-packaged React?\n. :+1: :+1: Thanks!!\n. @rmosolgo I actually tried to setup redux but haven't succeeded yet.\nWhat do you think is the easiest way to setup redux to get it work with react-rails gem?\n. Feel free to close this issue. I've seen others who were asking about how to import other node modules -- especially react-related ones. In that case, I think giving up sprockets might be the fastest solution instead of trying to solve package dependencies one at a time.\n. I see. So I am wondering whether I should give up Rails view templates completely and use React components only, or only use React component when it seems necessary. Do you have an opinion?\n. Thanks!\n. ",
    "reywright": "@rmosolgo I'm also running into issues using redux: https://github.com/reactjs/react-rails/issues/878. @not-an-aardvark did you do this inside server_rendering.js? \n\nI'm curious exactly where you monkey patched this, especially with your usage of JSX.\nWe're trying to do this inside server_rendering.js, and it's not working. We're actually reassigning the default value there as well, and this also isn't working:\nReactRailsUJS.serverRender = function(renderFunction, componentName, props) {\n  const componentClass = this.getConstructor(componentName)\n  const element = React.createElement(componentClass, props)\n  return ReactDOMServer[renderFunction](element)\n}\nalso @not-an-aardvark and @BookOfGreg one thing about this implementation, is the style tags go inside the component, so on client hydration they are removed.\n. thank you @BookOfGreg & @ttanimichi for the all the responses\nThis was actually due to user error. We were generating unique id's somehow in the components, causing a mismatch.\nHere's a question though: https://redux.js.org/recipes/server-rendering\nBased on what redux says on their official site, you always want to use the exact store generated from the server side, on the client. We were able to do this by doing the following:\n```\n// server-rendering.js\nimport store from './store'\nglobal.setup = function() {\nreturn JSON.stringify(store.getState())\n}\n\n// controller.rb\n// gon is just a convenience utility for window... window.gon to be specific\ngon = react_rails_prerenderer.context.eval('self.setup()')\n\n// store.js\nconfigureStore(reducers, JSON.parse(window.gon.state))\n```\nLet me know what you think?. what I ended up doing, was using dangerouslySetInnerHTML. essentially, react doesn't try to update that bit.. ",
    "QuantumKing": "@rmosolgo Thanks! I'll see if I can make a PR for this\n. Added pjax support here https://github.com/reactjs/react-rails/pull/490\n. @rmosolgo It works but I get the error \"React attempted to reuse markup in a container but the checksum was invalid.\" when mounting components after using the browser's back/forward\n. My component is very simple for testing puposes. Its simply <div>hello</div> so there is no state.\nI tried setting maxCacheLength: 0 in pjax options but it made no difference.\n. @rmosolgo I'm able to get rid of the error by doing\njs\nnode.innerHTML = ''\ninside ReactRailsUJS.mountComponents before the render statement. That way whatever was rendered and cached is wiped clean before mounting. Not sure if this leads to other problems...\n. Another thing that works is removing the data-reactid attribute from the cached component's children.\n. Which is better in your opinion? @rmosolgo \n. ",
    "weiland": "My fault. I did use an older version of coffee-rails. :see_no_evil: \n. ",
    "rockneverdies55": "To solve double-include issue, I used aliasify transform when running tests.\n- npm install --save-dev aliasify\n- Add the following to package.json\n\"aliasify\": {\n    \"aliases\": {\n        \"react\": \"./node_modules/react/dist/react-with-addons.js\"\n    }\n  },\n- In karma.config.js add aliasify as a transform\nbrowserify: {\n            transform: ['aliasify']\n        },\n- Then in the tests require react as usual (which will require react-with-addons wherever react is required)\nvar React = require('react');\nvar TestUtils = React.addons.TestUtils;\n. ",
    "Reinkaos": "Hey thanks for replying, here is our stack trace\nNameError: uninitialized constant React::ServerRendering\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/rails/railtie.rb:79:in `block in <class:Railtie>'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.12/lib/active_support/lazy_load_hooks.rb:34:in `call'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.12/lib/active_support/lazy_load_hooks.rb:34:in `execute_hook'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.12/lib/active_support/lazy_load_hooks.rb:26:in `block in on_load'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.12/lib/active_support/lazy_load_hooks.rb:25:in `each'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.12/lib/active_support/lazy_load_hooks.rb:25:in `on_load'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/railties-3.2.12/lib/rails/railtie/configuration.rb:59:in `after_initialize'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/rails/railtie.rb:77:in `<class:Railtie>'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/rails/railtie.rb:5:in `<module:Rails>'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/rails/railtie.rb:4:in `<module:React>'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/rails/railtie.rb:3:in `<top (required)>'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/rails.rb:2:in `<top (required)>'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react-rails.rb:2:in `<top (required)>'\n        from (irb):1\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/railties-3.2.12/lib/rails/commands/console.rb:47:in `start'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/railties-3.2.12/lib/rails/commands/console.rb:8:in `start'\n        from /data/sites/natlib.uat.digitalnz.org/rails/releases/20160315212841/vendor/bundle/ruby/1.9.1/gems/railties-3.2.12/lib/rails/commands.rb:41:in `<top (required)>'\n        from script/rails:6:in `require'\n. Hey, \nOur ruby version is 1.9.3 & rails is 3.2.12. We will try changing the require order. If that fixes it we will let you know. \nThanks,\n. Hey,\nWe altered the order of the require statements and it fixed one of the problems. Before when we were in the console and we went require 'react-rails' we would get the error that I posted earlier. Now we get 'true' back, but our broken page gives this error.\nundefined method `react_component' for #<#Class:0x000000061219b0:0x007f5b44a95410>>\nThanks for your quick replies!\n. ",
    "UberMouse": "Hi, just stepping in for @Reinkaos as he is busy\nException caught: NoMethodError: undefined method `react_component' for #<#<Class:0x0000000978cf40>:0x000000096bcb88>\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316002143/app/views/schools/admin/school_profiles/show.html.erb:5:in `_app_views_schools_admin_school_profiles_show_html_erb___1818258834022774347_80818700'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316002143/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.12/lib/action_view/template.rb:145:in `block in render'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316002143/vendor/bundle/ruby/1.9.1/gems/activesupport-3.2.12/lib/active_support/notifications.rb:125:in `instrument'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316002143/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.12/lib/action_view/template.rb:143:in `render'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316002143/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.12/lib/action_view/renderer/template_renderer.rb:47:in `block (2 levels) in render_template'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316002143/vendor/bundle/ruby/1.9.1/gems/actionpack-3.2.12/lib/action_view/renderer/abstract_renderer.rb:38:in `block in instrument'\n. That line 5 is\n          <%= react_component 'SchoolAutoComplete', {school_profiles: @school_profile_data}, {prerender: true}  %>\n. The same page works without issues in development and test environments. The gem is bundled correctly on the staging server but it seems like it's not being loaded correctly as when I open a rails console and go require 'react-rails' I get true instead of false. The gem is inside the assets group which I assume is the correct place for it.\n. We've tried that but now we're getting a different error\nException caught: RuntimeError: No compiled asset for react-server.js, was it precompiled?\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316201754/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/server_rendering/yaml_manifest_container.rb:13:in `find_asset'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316201754/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/server_rendering/sprockets_renderer.rb:22:in `block in initialize'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316201754/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/server_rendering/sprockets_renderer.rb:21:in `each'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316201754/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/server_rendering/sprockets_renderer.rb:21:in `initialize'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316201754/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/server_rendering.rb:22:in `new'\n/data/sites/natlib.uat.digitalnz.org/rails/releases/20160316201754/vendor/bundle/ruby/1.9.1/gems/react-rails-1.6.2/lib/react/server_rendering.rb:22:in `create_renderer'\n. ",
    "ludiazv": "+1 \nThis feature is critical to debug productivity with browser tools. The browser should show the .es6.jsx if possible. However if it shows the .es6 file after jsx transpiling will be also an advance.\nI think babel support source maps out-of-the box as it does Typescript transpiler or coffescript gems for rails.\nThanx,. +1. ",
    "neutronz": "Hi @rmosolgo @rstudner @ludiazv I know I'm late to the game here but is there a solution for this? I'd like to get source maps working as well.  It doesn't look like .bablerc options work.\nWhat currently happens?\n- source files emited as non-es6 without source mapping files.\nWhy that's bad\n- debugging and developing is more complicated and source maps are useful when using transpilers.\nWhat you want to happen\n- babel options for source maps are supported\nThanks. ",
    "robertsosinski": "Hey y'all,\nJust wanted to ping this thread again.  I just incorporated react-rails into a new Rails project, and it works great when building new .jsx components.  However, not having source maps is going to make debugging really difficult, especially on larger projects.\nAny idea how to enable source maps?  I'm using sprockets.\nThanks!. ",
    "jfeldstein": "Yup that was it. Noscript is what gets rendered when you return null in\nrender()\nOn Thu, Mar 17, 2016, 1:21 PM Robert Mosolgo notifications@github.com\nwrote:\n\nrender returns null, right?\n// This is false, initial query has {keyword: \"coffee\"}\n   if (initial_query_empty && !has_results) {\n        return func_initialSearchField(this);\n    }\n    // this is true, right? `this.state.response_received` is `undefined`? It's not set in `getInitialState`?\n    else if (!this.state.response_received) {\n      return null\n    }\n    else if (has_results) {\n        var listItems = results.map(function(cont) {\n            return func_contentItemRender(cont);\n        });\n        return func_ListContentsRender(listItems);\n    }\n    else {\n        return func_noContentFound();\n    }\nOh, this.state.response_received would have been set during\ncomponentDidMount, but check this bit from the React docs:\nInvoked once, only on the client (not on the server), immediately after\nthe initial rendering\n(\nhttps://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount\n)\nDoes that seem like it might be the issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/reactjs/react-rails/issues/500#issuecomment-198066351\n. \n",
    "grandmasterspoc": "Aweseom, thanks! \n. That didn't work and when I tried to push it to Heroku I got an assets failed to precompile and a push rejected but I think that was becasue I did something wrong :p\n. ",
    "dphaener": "@rmosolgo Cleaned this up a bit and rebased current master. Hopefully this will pass CI. \ud83d\udc4d \n. And to answer your other question @rmosolgo I have bundle files that look something like this:\njs\nrequire('expose?React!react');\nrequire('expose?Navigation!../javascripts/application/views/shared/navigation');\nrequire('expose?Flash!../javascripts/application/react-components/flash');\nrequire(\"font-awesome-webpack!../stylesheets/font-awesome.config.js\");\nrequire('../stylesheets/bundles/breweries');\nThen it's being bundled up by webpack with that file as the entry point. I'm exposing, in this instance, the Navigation and Flash components globally, but they get exported with the default object. This is the new Babel behavior. I tried many things to get it to work without using this workaround, but short of going back to Babel 5 I haven't been able to figure out anything.\n. @rmosolgo Ok then. Guess I missed that. Whoops.\n. :shipit:  \ud83d\udc4d \n. Yup, it sure would. Sorry about the delay on this. I think the solution you outlined above would work just fine. I'll update and resubmit.\n. Oh I didn't think about that. Great idea! Coming...\n. ",
    "gp3gp3gp3": "It is!  Thank you!  Now I've got some crazy caching problem where it's saving my old script file even if I change it, it still keep rendering the old content.  I suspect that may have to do with not setting up gulp to watch my files yet, but this does successfully render the component with the props like I wanted.\n. ",
    "rosskevin": "@gp3gp3gp3 - I built gulp-pipeline-rails for that exact reason.  No sprockets, just gulp and vanilla rails.  Watches etc work.\nI'm just starting to look at using react, here's a gulp-pipeline setup to compiled for react (a couple of config changes): \nhttps://github.com/rosskevin/reactjs-hello-world\nNow that I'm looking at react, I'm looking here to see how the two might come together.  I agree that trying to get the rails pipeline together was just getting too hard and tooling wasn't keeping up with the advances in the js community.  Perhaps I might find a way to get react-rails to optionally use the gulp assets.\n. ",
    "jasonschock": "Sorry, this has been fixed in 1.6.2, I see. Copy/pasted the gem version from the README, which contains the bug still. Submitted a pull request for updated README.\n. Sure, good points. I think I'd vote to remove it altogether then.\n. ",
    "mdolon": "Thank you for your response, @rmosolgo. I've tried it with the code option but haven't been able to get it to work. I've tried accessing the file using both Rails.application.assets[file].to_s and ActionView::Base.new.asset_path(file) with no luck, as sprockets-rails seems to have removed that functionality.\nSince ExecJS is one of the supported renderers mentioned in the docs, is there any example code somewhere that highlights how to properly set it up?\n. ",
    "jblok": "I too am getting this error when trying to use the ExecJSRenderer. Could anyone suggest a method to supply :code to the class?\n. ",
    "scottbarrow": "@rmosolgo would you suggest a way this could be done with a non-compiled library, e.g https://github.com/andreypopp/autobind-decorator\n. Thanks @jakegavin, however how do you use a package that isn't a single file such as https://github.com/andreypopp/autobind-decorator which may have npm dependencies of its own?\nI'm fairly new to React, and I understand how this is done with React just not with the Rails asset pipeline\n. Awesome thanks robert\nOn May 19, 2016, 7:37 PM, at 7:37 PM, Robert Mosolgo notifications@github.com wrote:\n\nHi, I've written up a little bit about how I use Sprockets to manage\nJavaScript dependencies: \nhttp://rmosolgo.github.io/blog/2016/05/19/how-i-use-sprockets/\nhttp://rmosolgo.github.io/blog/2016/05/19/finding-a-browser-ready-file-for-sprockets/\nUnfortunately, \"autobind-decorator\" defies these categories! That\nproject does compile to a single file (as seen on\nnpmcdn), but\nthat file is not usable in a browser because it depends on a global\nmodule object. \nOf course, there are other good options for binding, such as\nReact.createClass or binding during constructor!\nI hope that helps a bit! You can also browse other issues here\nregarding non-Sprockets asset bundling. It's a bit \"off the beaten\ntrack\" with Rails but some folks have found nice solutions (like\n@joerodrig3 's solution above!).\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/reactjs/react-rails/issues/523#issuecomment-220503417\n. \n",
    "kfarst": "@BrunoQuaresma have you already successfully executed ES6 syntax in your project yet? You might still need to set up an ES6 transpiler, if you choose Babel you can check out the BabelTransformer options section in the documentation for additional configuration\n. ",
    "jnstq": "It would be nice if this got merged\n. We run in to this issue, https://github.com/facebook/react/issues/6547 our select with optgroup stopped working. I guess it will be fixed in next point release.\n. ",
    "starsirius": "+1\n. ",
    "sahil-23": "There is something weird happening. Including the mixin at the top of react component works and also including it directly in the components.js also works.\nBut including it in some other file that is being included in components.js doesn't work. The mixin variable is accessible directly during backend rendering as I logged it's functions in an html component, but those functions are not accessible in the context of the react component.\nHopefully you understand the issue. If not, I can maybe create a small sample project to describe this issue, though it'll take me some time. \n. Seems like the issue is what you're pointing at.\nI have a file, say components_main.js, which is as follows:\n//= require my_mixin_file\n//= require my_component_file\nThere is another file, say components_some_other.js, which is as follows:\n//= require my_component_file\nMy components.js is like follows:\n//= require components_some_other\n//=require components_main\nRemoving the components_some_other file fixes the error.\nSo it seems that React.createClass is being called the first time around when the mixin is not defined. And it seems to skip calling it the second time around. Am I correct in assuming this ??\nAlso in an earlier version (1.0), I used the same code in same order but it worked fine.\nSo just wanted to clarify what happens when I require one file multiple times. And was this behaviour changed in some version of react-rails??\n. Great, I didn't know about how sprockets did this asset building.\nThis still doesn't explain why the same code is working in an earlier version(1.0) of react-rails ??\n. Guess then I'll look into why it is behaving like that when I have some free time. Thanks for the help, btw.\n. ",
    "msojka": "This works: https://gist.github.com/noradaiko/56345a10b396cefa4dfd\nThanks.\n. Thanks @rmosolgo it sounds like a possible issue as there are lots of ajax requests happening on the page. Anyways I tested waited and making sure that all ajax requests were done before clicking on a Turbolinks link and still got same result.\nBasically the warning appears on ajax successes on the next page that were not initiated on the previous page.\n. Related code from that component (it's in coffeescript):\n```\n  componentWillReceiveProps: (nextProps) =>\n    @dispatch(\"receive\", nextProps.value) if @state.submitted || @props.value != nextProps.value\nsubmit: (url, period, accountId, initValue, value) ->\n    return {} if initValue == value\n    data = JSON.stringify\n      budget_entries:\n        \"#{period}\": \"#{accountId}\": value\n    $.ajax\n      url: url\n      type: \"POST\"\n      dataType: \"JSON\"\n      contentType: \"application/json\"\n      processData: false\n      data: data\n      success: (data) =>\n         # onReceive comes from props and is used to update state in the top component\n        @onReceive(accountId, period, data[0].value)\n    submitted: true\nreceive: (value) ->\n    initValue: value\n    value: value\n    submitted: false\n```\n. Nothing special in other lifecycle methods.. just:\ncomponentDidUpdate: (prevProps, prevState) =>\n    @refs.input.focus() if @refs.input?\nAnd a bit of perf logic in shouldComponentUpdate\n. isMounted is not available on React.Component extends and I'm using those.\n. Doh, problem solved. I was assigning onReceive to prototype in the constructor so it stayed same and was trying to notify unmounted parent component... \u263a\ufe0f \n. ",
    "mingca": "@msojka  I'd love to see the gist but it says Not found. Could you plz ensure that link works?. ",
    "dijonkitchen": "I think this can be closed now. . ",
    "dobrite": "Seems like 2.1.1 gets a 403. 1.9.8 works :thinking:\n[system][~][::] $ wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\n--2016-04-20 15:34:18--  https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2\nResolving bitbucket.org... 104.192.143.1, 104.192.143.2, 104.192.143.3\nConnecting to bitbucket.org|104.192.143.1|:443... connected.\nHTTP request sent, awaiting response... 302 FOUND\nLocation: https://bbuseruploads.s3.amazonaws.com/fd96ed93-2b32-46a7-9d2b-ecbc0988516a/downloads/396e7977-71fd-4592-8723-495ca4cfa7cc/phantomjs-2.1.1-linux-x86_64.tar.bz2?Signature=7Nug22RLNIMy73WArztZPy3C3CY%3D&Expires=1461191426&AWSAccessKeyId=AKIAIWY5XSVPZPDQYRQQ&versionId=null&response-content-disposition=attachment%3B%20filename%3D%22phantomjs-2.1.1-linux-x86_64.tar.bz2%22 [following]\n--2016-04-20 15:34:18--  https://bbuseruploads.s3.amazonaws.com/fd96ed93-2b32-46a7-9d2b-ecbc0988516a/downloads/396e7977-71fd-4592-8723-495ca4cfa7cc/phantomjs-2.1.1-linux-x86_64.tar.bz2?Signature=7Nug22RLNIMy73WArztZPy3C3CY%3D&Expires=1461191426&AWSAccessKeyId=AKIAIWY5XSVPZPDQYRQQ&versionId=null&response-content-disposition=attachment%3B%20filename%3D%22phantomjs-2.1.1-linux-x86_64.tar.bz2%22\nResolving bbuseruploads.s3.amazonaws.com... 54.231.114.122\nConnecting to bbuseruploads.s3.amazonaws.com|54.231.114.122|:443... connected.\nHTTP request sent, awaiting response... 403 Forbidden\n2016-04-20 15:34:19 ERROR 403: Forbidden.\n. Here  is an issue. Seems intermittent due to throttling?\n. It seems like TravisCI has it already installed and available on the PATH.\n. TravisCI version failed here \ud83d\ude1e  Turbolinks.supported returned nil.\n. Rails 5 fails due to a JS error on this line . React emits a Warning, but in red text so imagine it uses console.error to do so:\n\nWarning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you are using server rendering and the markup generated on the server was not what the client was expecting. React injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead, figure out why the markup being generated is different on the client or server:\n (client) <div data-reactid=\"\n (server) <div data-reactid=\" \n\nI spun up a Rails 5 server locally and went through the test manually in chrome and it does not throw that error, however the Poltergeist debugger does throw that error.\nAt this point I'm stumped. Any ideas with how to debug this? @rmosolgo \n. Huge thanks for following through on this! \ud83d\ude0d \n. ",
    "yhkang95": "\nYes, I am using Turbolinks, and I no longer get the error when I get rid of Turbolinks. \nI cannot figure out which components are causing the error. I've been trying to figure this out, and the React Developer Tools (Chrome) doesn't seem to provide the solution.\nHowever, I did find out that even regular anchor tags give me the same error. <a href=\"/questions\">Question</a> gives me the error. But if I do <a href=\"/questions\" onclick=\"window.location = '/questions'; return false;\">Question</a>, I no longer get the error.\n\nThank you for the help!\n. I just ran rails g react:install.\njs\n//= require rails-ujs\n//= require turbolinks\n//= require jquery\n//= require bootstrap-sprockets\n//= require react\n//= require react_ujs\n//= require components\n//= require_tree .. Hmm... I think I've got React v15.4.2 loaded alright, but it seems like ReactDOM is somehow not loaded.\nI get there error here:\nReactDOM.render(React.createElement(constructor, props), node);\nbecause ReactDOM is undefined.. ",
    "JensDebergh": "Hey guys\nI've experienced the same problems when running react together with ujs driver. \nThe problem was that my javascript was at the bottom of the <body> tag. \nWhen clicking links using turbolinks you get the same javascript files loaded over and over again. \nAt some point react just fails because it can't find the correct reference to the component (probably due some internal magic).\nMoving my entire asset bundle to the head tag fixed this for me although this isn't best practice but that's the downside of using turbolinks I guess.\n. @rmosolgo You are right. I  tried disabling the uglifier in my project and it worked like a charm. Still have to find where exactly this issue occurs, but atleast I know what it is. \nThanks for the quick reply \ud83c\udf70 \n. @hieuhlc The transpiler responsible for transpiling es6 to es5, by default only listens to a specific pattern.  The pattern apparently is es6.jsx but I have no clue on how to change this with this gem.\nThe options exist thats for sure, I just haven't found the time yet to figure out the configuration part.\n. @hieuhlc Had the same issue, I just think it would be nice to have this configurable. For example lets say I'm using es6 & jsx by default, I don't want to have a suffix saying a particular file is es6 with jsx by appending the es6.jsx extension. I just want it to be MyComponent.js\nFuture reference for available extensions:\nhttps://github.com/reactjs/react-rails/blob/deb8cb64e2e499ff21d431fd196c5e6419f0f4d4/lib/react/rails/railtie.rb#L105\n. ",
    "joerodrig": "@scottbarrow I've seen a few solutions to this. The simplest solutions I've seen are adding the library to your vendor JS files or using rails-assets.org to convert the packages to gems for you. This is nice if you're using the version of React included in react-rails. \nRecently, I've decided to use the npm version of React and am no longer using the one included with react-rails. This lets me use Gulp + Babelify + Browserify to compile all of my React components into a single, Sprockets compatible, JS file that gets loaded in by the asset pipeline. I personally like this approach because recompiling my React files now only takes a couple of hundred milliseconds on each save. I had also been running into issues where 3rd party libraries were causing a duplicate React version to be imported when I used the version included with react-rails. This solution fixed that.\nOne downside I've noticed to this approach is that I'm unable to get server-rendering with react-rails to work with these bundled components.\n. ",
    "kaushiksundar": "@rmosolgo Yes it does work. Thanks.\n. @danott @rmosolgo Thanks.\n. I figured out a easy way to identify the place where we might be using es6 syntax. Run the below code in rails console and you will get it\nJS_PATH = \"app/assets/javascripts/*/.js\"; \nDirJS_PATH.each do |file_name|\nputs \"\\n#\"\nputs Uglifier.compile(File.read(file_name))\nend\n. ",
    "AlexCppns": "+1\n. ",
    "molawson": "Thanks!\n. ",
    "andrewcurioso": "For anyone who stumbles upon this from Google since it is one of the first results for how to render raw HTML in React, the above syntax is not correct. The correct syntax is:\nhtml\n<div dangerouslySetInnerHTML={{__html: this.props.html}} />. ",
    "kheengz": "@kaushik-sundar => https://reactjs.org/docs/dom-elements.html\n```javascript\nfunction createMarkup() {\n  return {__html: 'First \u00b7 Second'};\n}\nfunction MyComponent() {\n  return ;\n}\n```. ",
    "confact": "Hi @rmosolgo. the component is called navigation.js.jsx and i restart it like 3-5 times. Still not working.\n. @rmosolgo Seems to work now. Very happy. It seems to be some cache or load issue. I restarted randomly 2 times now and that made the trick. Rails 5's asset do some cache maybe on dev? Maybe it could be a point in the readme for future developers. I found a similar issue as me which got the same issue fixed the same way.\nThanks anyway for answering with some points to fix this!\n. ",
    "gilbertravels": "I am having the same problem. \nActionView::Template::Error (SyntaxError: unknown: Unexpected token (8:9)\ndue to this\nRecords.defaultProps = {\n     |          ^\nAnyone knows why? thanks!. ",
    "travisdmathis": "thanks for the great response, exactly what I needed. This is much better.  Thanks for all the hard work!\n. Try changing the component filename to \"message.es6.jsx\" this solved my issues when trying to use es6 with react-rails.  If you're using the react component generator make sure you pass (--es6) to generate an es6 file.  rails g react:component Name (--es6)\n. If i remove turbolinks(turn off caching) i do not get the error and everything works as intended.  This happens when I browse to a different page and then go back to ListJob. The component doesn't get re-rendered like it should. \n. It still happens even with no-cache enabled.\n. just wanted to leave this here, i'm not doing anything that should be causing this. Looks like every other component I had built in the past with rails 4 / react-rails\nhttps://gist.github.com/travisdmathis/902e17a403784b70039ca4b76c204e4e\n. that was it.. type-o thanks for catching that!\n. ",
    "lhtdesignde": "hey, thanks for the help. yes it's a rails 5 beta. I'll try to do the little stuff then manually and go from there.\n. Hey, I just installed it manually but now when actually running it, I hit the same error.\nExiting\nreact-rails-1.7.1/lib/react/rails/railtie.rb:89:inblock in class:Railtie': uninitialized constant ActiveSupport::Reloader (NameError)`\nany ideas? do I need to install some other gems?\n. Here you go. We are using webrick and vagrant so paths are a bit different. But stil error should be the same. Thanks I will try the older version then.\n/usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/react-rails-1.7.1/lib/react/rails/railtie.rb:89:in `block in <class:Railtie>': uninitialized constant ActiveSupport::Reloader (NameError)\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta3/lib/active_support/lazy_load_hooks.rb:36:in `call'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta3/lib/active_support/lazy_load_hooks.rb:36:in `execute_hook'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta3/lib/active_support/lazy_load_hooks.rb:45:in `block in run_load_hooks'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta3/lib/active_support/lazy_load_hooks.rb:44:in `each'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta3/lib/active_support/lazy_load_hooks.rb:44:in `run_load_hooks'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/application/finisher.rb:62:in `block in <module:Finisher>'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/initializable.rb:30:in `instance_exec'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/initializable.rb:30:in `run'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/initializable.rb:55:in `block in run_initializers'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:226:in `block in tsort_each'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:348:in `block (2 levels) in each_strongly_connected_component'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:429:in `each_strongly_connected_component_from'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:347:in `block in each_strongly_connected_component'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:345:in `each'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:345:in `call'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:345:in `each_strongly_connected_component'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:224:in `tsort_each'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/2.2.0/tsort.rb:203:in `tsort_each'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/initializable.rb:54:in `run_initializers'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/application.rb:350:in `initialize!'\n    from /vagrant/config/environment.rb:5:in `<top (required)>'\n    from /vagrant/config.ru:3:in `require'\n    from /vagrant/config.ru:3:in `block in <main>'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/builder.rb:55:in `instance_eval'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/builder.rb:55:in `initialize'\n    from /vagrant/config.ru:in `new'\n    from /vagrant/config.ru:in `<main>'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/builder.rb:49:in `eval'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/builder.rb:49:in `new_from_string'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/builder.rb:40:in `parse_file'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/server.rb:318:in `build_app_and_options_from_config'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/server.rb:218:in `app'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/server.rb:58:in `app'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/rack-2.0.0.alpha/lib/rack/server.rb:353:in `wrapped_app'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/server.rb:136:in `log_to_stdout'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/server.rb:76:in `start'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/commands_tasks.rb:90:in `block in server'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/commands_tasks.rb:85:in `tap'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/commands_tasks.rb:85:in `server'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands/commands_tasks.rb:49:in `run_command!'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/command.rb:20:in `run'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/railties-5.0.0.beta3/lib/rails/commands.rb:18:in `<top (required)>'\n    from /vagrant/bin/rails:9:in `require'\n    from /vagrant/bin/rails:9:in `<top (required)>'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/lib/spring/client/rails.rb:28:in `load'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/lib/spring/client/rails.rb:28:in `call'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/lib/spring/client/command.rb:7:in `call'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/lib/spring/client.rb:28:in `run'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/bin/spring:49:in `<top (required)>'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/lib/spring/binstub.rb:11:in `load'\n    from /usr/local/rbenv/versions/2.2.4/lib/ruby/gems/2.2.0/gems/spring-1.6.4/lib/spring/binstub.rb:11:in `<top (required)>'\n    from /vagrant/bin/spring:13:in `require'\n    from /vagrant/bin/spring:13:in `<top (required)>'\n    from bin/rails:3:in `load'\n    from bin/rails:3:in `<main>'\nGemfile.lock\n```\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actioncable (5.0.0.beta3)\n      actionpack (= 5.0.0.beta3)\n      nio4r (~> 1.2)\n      websocket-driver (~> 0.6.1)\n    actionmailer (5.0.0.beta3)\n      actionpack (= 5.0.0.beta3)\n      actionview (= 5.0.0.beta3)\n      activejob (= 5.0.0.beta3)\n      mail (~> 2.5, >= 2.5.4)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n    actionpack (5.0.0.beta3)\n      actionview (= 5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n      rack (~> 2.x)\n      rack-test (~> 0.6.3)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.2)\n    actionview (5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n      builder (~> 3.1)\n      erubis (~> 2.7.0)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.2)\n    activejob (5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n      globalid (>= 0.3.6)\n    activemodel (5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n    activerecord (5.0.0.beta3)\n      activemodel (= 5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n      arel (~> 7.0)\n    activesupport (5.0.0.beta3)\n      concurrent-ruby (~> 1.0)\n      i18n (~> 0.7)\n      minitest (~> 5.1)\n      tzinfo (~> 1.1)\n    arel (7.0.0)\n    ast (2.2.0)\n    autoprefixer-rails (6.3.3.1)\n      execjs\n    babel-source (5.8.35)\n    babel-transpiler (0.7.0)\n      babel-source (>= 4.0, < 6)\n      execjs (~> 2.0)\n    builder (3.2.2)\n    byebug (8.2.2)\n    capistrano (3.4.0)\n      i18n\n      rake (>= 10.0.0)\n      sshkit (~> 1.3)\n    capistrano-bundler (1.1.4)\n      capistrano (~> 3.1)\n      sshkit (~> 1.2)\n    capistrano-grunt (0.0.4)\n      capistrano (>= 3.0.0.pre)\n    capistrano-npm (1.0.2)\n      capistrano (>= 3.0.0)\n    capistrano-rbenv (2.0.4)\n      capistrano (~> 3.1)\n      sshkit (~> 1.3)\n    coderay (1.1.1)\n    coffee-rails (4.1.1)\n      coffee-script (>= 2.2.0)\n      railties (>= 4.0.0, < 5.1.x)\n    coffee-script (2.4.1)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.10.0)\n    concurrent-ruby (1.0.1)\n    connection_pool (2.2.0)\n    countries (1.2.5)\n      currencies (~> 0.4.2)\n      i18n_data (~> 0.7.0)\n    country_select (2.5.2)\n      countries (~> 1.2.0)\n      sort_alphabetical (~> 1.0)\n    currencies (0.4.2)\n    debug_inspector (0.0.2)\n    domain_name (0.5.20160309)\n      unf (>= 0.0.5, < 1.0.0)\n    erubis (2.7.0)\n    execjs (2.6.0)\n    ffi (1.9.10)\n    formatador (0.2.5)\n    globalid (0.3.6)\n      activesupport (>= 4.1.0)\n    guard (2.13.0)\n      formatador (>= 0.2.4)\n      listen (>= 2.7, <= 4.0)\n      lumberjack (~> 1.0)\n      nenv (~> 0.1)\n      notiffany (~> 0.0)\n      pry (>= 0.9.12)\n      shellany (~> 0.0)\n      thor (>= 0.18.1)\n    guard-bundler (2.1.0)\n      bundler (~> 1.0)\n      guard (~> 2.2)\n      guard-compat (~> 1.1)\n    guard-compat (1.2.1)\n    http-cookie (1.0.2)\n      domain_name (~> 0.5)\n    i18n (0.7.0)\n    i18n_data (0.7.0)\n    jbuilder (2.4.1)\n      activesupport (>= 3.0.0, < 5.1)\n      multi_json (~> 1.2)\n    json (1.8.3)\n    listen (3.0.6)\n      rb-fsevent (>= 0.9.3)\n      rb-inotify (>= 0.9.7)\n    loofah (2.0.3)\n      nokogiri (>= 1.5.9)\n    lumberjack (1.0.10)\n    mail (2.6.3)\n      mime-types (>= 1.16, < 3)\n    metaclass (0.0.4)\n    method_source (0.8.2)\n    mime-types (2.99.1)\n    mini_portile2 (2.0.0)\n    minitest (5.8.4)\n    mocha (1.1.0)\n      metaclass (~> 0.0.1)\n    multi_json (1.11.2)\n    mysql2 (0.4.3)\n    nenv (0.3.0)\n    net-scp (1.2.1)\n      net-ssh (>= 2.6.5)\n    net-ssh (3.0.2)\n    netrc (0.11.0)\n    newrelic_rpm (3.15.0.314)\n    nio4r (1.2.1)\n    nokogiri (1.6.7.2)\n      mini_portile2 (~> 2.0.0.rc2)\n    notiffany (0.0.8)\n      nenv (~> 0.1)\n      shellany (~> 0.0)\n    parser (2.3.0.6)\n      ast (~> 2.2)\n    powerpack (0.1.1)\n    pry (0.10.3)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    puma (2.15.3)\n    rack (2.0.0.alpha)\n      json\n    rack-test (0.6.3)\n      rack (>= 1.0)\n    rails (5.0.0.beta3)\n      actioncable (= 5.0.0.beta3)\n      actionmailer (= 5.0.0.beta3)\n      actionpack (= 5.0.0.beta3)\n      actionview (= 5.0.0.beta3)\n      activejob (= 5.0.0.beta3)\n      activemodel (= 5.0.0.beta3)\n      activerecord (= 5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 5.0.0.beta3)\n      sprockets-rails (>= 2.0.0)\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (>= 4.2.0.alpha)\n    rails-dom-testing (1.0.7)\n      activesupport (>= 4.2.0.beta, < 5.0)\n      nokogiri (~> 1.6.0)\n      rails-deprecated_sanitizer (>= 1.0.1)\n    rails-html-sanitizer (1.0.3)\n      loofah (~> 2.0)\n    railties (5.0.0.beta3)\n      actionpack (= 5.0.0.beta3)\n      activesupport (= 5.0.0.beta3)\n      method_source\n      rake (>= 0.8.7)\n      thor (>= 0.18.1, < 2.0)\n    rainbow (2.1.0)\n    rake (11.1.0)\n    rb-fsevent (0.9.7)\n    rb-inotify (0.9.7)\n      ffi (>= 0.5.0)\n    react-rails (1.7.1)\n      babel-transpiler (>= 0.7.0)\n      coffee-script-source (~> 1.8)\n      connection_pool\n      execjs\n      rails (>= 3.2)\n      tilt\n    rest-client (1.8.0)\n      http-cookie (>= 1.0.2, < 2.0)\n      mime-types (>= 1.16, < 3.0)\n      netrc (~> 0.7)\n    rubocop (0.38.0)\n      parser (>= 2.3.0.6, < 3.0)\n      powerpack (~> 0.1)\n      rainbow (>= 1.99.1, < 3.0)\n      ruby-progressbar (~> 1.7)\n      unicode-display_width (~> 1.0, >= 1.0.1)\n    ruby-progressbar (1.7.5)\n    sass (3.4.21)\n    sass-rails (5.0.4)\n      railties (>= 4.0.0, < 5.0)\n      sass (~> 3.1)\n      sprockets (>= 2.8, < 4.0)\n      sprockets-rails (>= 2.0, < 4.0)\n      tilt (>= 1.1, < 3)\n    shellany (0.0.1)\n    slackistrano (2.0.1)\n      capistrano (>= 3.0.1)\n      json\n    slop (3.6.0)\n    sort_alphabetical (1.0.2)\n      unicode_utils (>= 1.2.2)\n    spring (1.6.4)\n    sprockets (3.5.2)\n      concurrent-ruby (~> 1.0)\n      rack (> 1, < 3)\n    sprockets-rails (3.0.4)\n      actionpack (>= 4.0)\n      activesupport (>= 4.0)\n      sprockets (>= 3.0.0)\n    sshkit (1.9.0)\n      net-scp (>= 1.1.2)\n      net-ssh (>= 2.8.0)\n    stripe (1.36.1)\n      rest-client (~> 1.4)\n    thor (0.19.1)\n    thread_safe (0.3.5)\n    tilt (2.0.2)\n    tzinfo (1.2.2)\n      thread_safe (~> 0.1)\n    uglifier (2.7.2)\n      execjs (>= 0.3.0)\n      json (>= 1.8.0)\n    unf (0.1.4)\n      unf_ext\n    unf_ext (0.0.7.2)\n    unicode-display_width (1.0.2)\n    unicode_utils (1.4.0)\n    web-console (3.1.1)\n      activemodel (>= 4.2)\n      debug_inspector\n      railties (>= 4.2)\n    websocket-driver (0.6.3)\n      websocket-extensions (>= 0.1.0)\n    websocket-extensions (0.1.2)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  autoprefixer-rails\n  byebug\n  capistrano-bundler (~> 1.1.4)\n  capistrano-grunt\n  capistrano-npm (~> 1.0.2)\n  capistrano-rbenv (~> 2.0.4)\n  coffee-rails (~> 4.1.0)\n  countries\n  country_select\n  guard\n  guard-bundler\n  jbuilder (~> 2.0)\n  mocha\n  mysql2\n  newrelic_rpm (~> 3.15, >= 3.15.0.314)\n  puma (~> 2.15.3)\n  rails (>= 5.0.0.beta3, < 5.1)\n  react-rails\n  rubocop\n  sass-rails\n  slackistrano\n  spring\n  stripe\n  tzinfo-data\n  uglifier (>= 1.3.0)\n  web-console (~> 3.0)\nBUNDLED WITH\n   1.12.3\n```\n. and  fyi 1.7.0 works.\n. ",
    "getaclue": "Thank you guys!. ",
    "amphithere": "Oh my goodness! Thank you so much! That was the problem!\nI appreciate your help so much, thank you!\n. ",
    "rkichenama": "Yes, I restarted my dev server after changing applicaiton.rb\nAfter a while, I get the same error ActionView::Template::Error (TypeError: Cannot read property 'createElement' of undefined)\n. I am writing my components in jsx files, most of which use the es6 syntax; they are being transpiled correctly. Working through the components.js file, I have removed assumed dependencies and added d3.min to the list of files needed to precompile. The error has changed to TypeError: Super expression must either be null or a function, not undefined stemming from my BaseComponent inheriting from React.Component\nIt would seem that loading d3, react-server, and components does not expose a global React for the instances of the components.\ncomponents.js\n//= require_self\n//= require components/BaseComponent\n//= require_tree ./components\n//= require_tree ./layouts\n//= require_tree ./adapters\n//= require_tree ./lib\n//= require_tree ./utils\n//= require _cloropathData\nthe last file being semi-static data used by most of the components\n. will all the changes, I revert to attempt to load a stateless component server side and get the createElement ReferenceError.\n. @rmosolgo I am attempting the workaround you proposed in https://github.com/reactjs/react-rails/issues/443\nNow I get NotSupportedError: This operation is not supported\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:15:in `rescue in block in initialize'\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:12:in `block in initialize'\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:75:in `block in lock'\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:73:in `call'\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:73:in `Locker'\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:73:in `lock'\nexecjs (2.7.0) lib/execjs/ruby_racer_runtime.rb:9:in `initialize'\nexecjs (2.7.0) lib/execjs/runtime.rb:57:in `new'\nexecjs (2.7.0) lib/execjs/runtime.rb:57:in `compile'\nexecjs (2.7.0) lib/execjs/module.rb:27:in `compile'\nreact-rails (1.7.1) lib/react/server_rendering/exec_js_renderer.rb:10:in `initialize'\nreact-rails (1.7.1) lib/react/server_rendering/sprockets_renderer.rb:25:in `initialize'\nreact-rails (1.7.1) lib/react/server_rendering.rb:22:in `new'\nreact-rails (1.7.1) lib/react/server_rendering.rb:22:in `create_renderer'\nreact-rails (1.7.1) lib/react/server_rendering.rb:12:in `block in reset_pool'\n. ",
    "franciscoGPS": "Any update here?. ",
    "thedrow": "Looks really good!\n. ",
    "steakchaser": "We're also experiencing the same / similar issue when using redux and redux-form.  In our case, on first request, data is populated into the redux store, which redux-form uses to initialize itself.  Because the ExecJS context is \"cached\" via the rendering pool, the store with the data from the first request is then the starting point for all subsequent requests.\nOn subsequent requests, redux-form (5.3.3 in our case) thinks that it's already initialized uses the data from the cached context (first request).\nTo get around this, we are using reduce-reducers to gain access to the entire state tree and then dispatching a RESET_ALL action in the top-level componentWillMount to clear out the entire state:\n```javascript\n// root reducer\nimport { combineReducers } from 'redux'\nimport { reducer as form } from 'redux-form'\nimport reduceReducers from 'reduce-reducers'\nimport { RESET_ALL } from '../actions'\nimport sliceA from './slice-a-reducer'\nimport sliceB from './slice-b-reducer'\nconst reducer = combineReducers({\n  sliceA,\n  sliceB,\n  form\n})\nconst resetRootReducer = (state, action) => {\n  switch(action.type) {\n    case RESET_ALL : {\n      return {}\n    }\n    default : return state;\n  }\n}\nexport default reduceReducers(reducer, resetRootReducer)\n```\n```javascript\n// top-level component\nimport React, { Component, PropTypes } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport createLogger from 'redux-logger'\nimport { RESET_ALL } from '../actions'\nimport reducer from '../reducers'\nlet middlewares = [thunk]\nif (process.env.NODE_ENV == 'development') {\n  middlewares.push(createLogger())\n}\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\nconst store = createStoreWithMiddleware(reducer)\nclass App extends Component {\ncomponentWillMount() {\n    // Reset state\n    store.dispatch({ type: RESET_ALL })\n  }\nrender() {\n    return (\n      \n    )\n  }\n}\nexport default App\n```\nWe also experimented with keeping the redux stores in a global var (i.e. MyReduxStores) and dispatching the RESET_ALL action via a custom after_render string:\n```ruby\nlib/my_app/server_rendering/redux_safe_server_renderer.rb\nmodule MyApp\n  module ServerRendering\n    class ReduxSafeServerRenderer < React::ServerRendering::SprocketsRenderer\n  def after_render(component_name, props, prerender_options)\n    <<-JS\n      (function () {\n        MyReduxStores.forEach(function(store) {\n          store.dispatch({ type: 'RESET_ALL' })\n        });\n      })();\n    JS\n  end\n\nend\n\nend\nend\n```\nIs there a better way to do this?  Curious if anyone else has encountered this and what type of approach they've taken?\nUPDATE: Duh...we ended up moving the store instantiation to the component's constructor.  Did some benchmarking of the server rendering and the impact was minimal (a few ms).\n```javascript\n// top-level component\nimport React, { Component, PropTypes } from 'react'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport createLogger from 'redux-logger'\nimport { RESET_ALL } from '../actions'\nimport reducer from '../reducers'\nlet middlewares = [thunk]\nif (process.env.NODE_ENV == 'development') {\n  middlewares.push(createLogger())\n}\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\n// Moved into the component's constructor to ensure that state is re-built on every server render\n// const store = createStoreWithMiddleware(reducer)\nclass App extends Component {\nconstructor(props) {\n    super(props)\n    this.store = createStoreWithMiddleware(reducer)\n  }\nrender() {\n    return (\n      \n    )\n  }\n}\nexport default App\n```. ",
    "NGMarmaduke": "@steakchaser We ultimately ended up reseting the stores via the after_render hook. \nAlt provides .recycle() which does pretty much the same thing as your forEach + REST_ALL action. It could certainly be set via the server_render_options in application.rb, for our app we already use a custom render to enable i18n:\n``` ruby\nclass JsRenderer < SprocketsRenderer\n  def initialize(options = {})\n    options[:code] = webpack_assets\n    super(options)\n  end\ndef before_render(component_name, props, prerender_options)\n    super + set_i18n_js\n  end\ndef after_render(component_name, props, prerender_options)\n    super + 'alt.recycle();'\n  end\nprivate\ndef set_i18n_js\n    [i81n_js, moment_js].join\n  end\ndef i81n_js\n    \"I18n.locale = '#{ I18n.locale }';\"\n  end\ndef moment_js\n    \"moment.locale(I18n.locale);\"\n  end\ndef webpack_assets\n    webpack_manifest.javascript_assets.map do |filename|\n      webpack_manifest.find_asset(filename)\n    end.join\n  end\ndef webpack_manifest\n    WebpackAssets.manifest\n  end\nend\n```\n. > Warning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.\nLooks like running into the same error as on https://github.com/reactjs/react-rails/pull/611\n. Removed the update to React \n. Indeed, I'm attempting to apply this update to our app to see if its even feasible / sensible to make this change\n. @rmosolgo thanks for the heads up, build's green again. @rmosolgo Nice, looks good \ud83d\udc4d . ",
    "schekin": "home.js.jsx\n```\nvar Home = React.createClass({\n  propTypes: {\n    data: React.PropTypes.string\n  },\nrender: function() {\n    return (\n      \nName of portal: {this.props.data}\n\nLeft\nMiddle\nRight\n\n\n    );\n  }\n});\n```\n/view/home/index.html.erb\n```\nHome#index\nFind me in app/views/home/index.html.erb\n<%= react_component( 'Home', {data: '\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043f\u043e\u0440\u0442\u0430\u043b'}) %>\n```\n\n\ngem file \n```\ngem 'react-rails'\ngem 'therubyracer'\ngem 'less-rails' # Sprockets (what Rails 3.1 uses for its asset pipeline) supports LESS\ngem 'twitter-bootstrap-rails'\nBundle edge Rails instead: gem 'rails', github: 'rails/rails'\ngem 'rails', '>= 5.0.0.rc1', '< 5.1'\nUse sqlite3 as the database for Active Record\n```\napplication.js\n//= require jquery\n//= require jquery_ujs\n//= require twitter/bootstrap\n//= require turbolinks\n//= require react\n//= require react_ujs\n//= require components\n//= require_tree .\n\n. and result  :(  ....\n\n. Yes. This is  in className my error, Snx!\n. ",
    "duyetvn": "@travisdmathis Sorry. It's my mistake for typo. I update the filename.\n. The problems here: I cant use import or export. I think I miss something when setup\n. thank u, problem was resolved\n. ",
    "tf": "Yes, that's what I did. I can submit a PR. Do you want me to feature detect assets_manifest with repond_to? or check Sprockets::Rails::VERSION?\n. I'll submitted a PR (#545). Would be great if you could take a look. \n. I've updated the PR. Checking sprockets-rails versions in the tests was a bit of a pain since some older versions don't even define Sprockets::Rails::VERSION. I still think it's an improvement, though.\n. I am leaning towards changing this to an explicit check of Sprockets::Rails::VERSION. While this variant is less repetitive, I am afraid some unforeseen future change of the compatible? method might cause the tests to be skipped for unexpected cases.\n. Same here. Considering to revert this change.\n. ",
    "hieuhlc": "I just met this bug and still crazy about it. I used es6 files. Should I add .js into file name? Now it is Main.es6.jsx\n. Ok after 5 times search all files in project I finally found a file with a small pieces of code contains ES6 syntax. It was so small. Thank you guys.\n. The ext es6.jsx is correct and can be built successfully. No need to re-config @JensDebergh \n. @rmosolgo I got this in browser console. Am I missing something?\n\n. I found it. My app used more than one application.js so it's missing. Thank you very much!\n. Thanks @coryasato ! Stage 2 is safer than stage 0 right? I will use stage 2.\n. @tchret If you disabled prerender, I assume your component was rendered by Ajax call or something like that (not on first page load). You should add <script>ReactRailsUJS.mountComponents()</script> where you render component and make sure //= require react_ujs exists in application.js. I just faced this issue and get over it. Hope this help!\n. I tried your second approach and it worked like a charm! Thank you @rmosolgo \ud83d\udc4d \n. If I use prefix on React component name it works. But I prefer not using prefix when component is specified clearly in global namespaces.\n\n. Yes, after few mins I understood the way react-rails process jsx files. All files in components will be transform into ES5 JS. Every const will become var in global scope. This is what I did:\n- Tested in JS console, confirm the conflict is real.\n- Assigned components right to the namespace. Worked.\n  Btw it's a surprise that we can render components like this <Components.Stuff.Header />\n. ",
    "bjnord": "@kaushik-sundar Thanks for that great idea! Your code didn't quite work for me (garbled characters?) but this did:\npatt = Rails.root.join('app', 'assets', 'javascripts', '**', '*.js')\nDir.glob(patt).each do |file_name|\n    ...\nend. ",
    "jethroo": "hi, it is solely covering code quality. I started driven by the code climate score for this class. So i tried to refactor it to be more ruby-ish, so it should help mainly the maintainers if they want to change something here.  That is why I also prefixed it chore, its not changing any functionality (or should not) but improving how the code is organized and can be read.\nedit: since its 24 pull request time, I can rebase this PR against master again to get rid of the conflicts.. ",
    "ndac-todoroki": "Hi rmosolgo, I am not even writing JSX yet. I have just installed devise, and am testing the sample code.\nI tried this:\nerb\n<%= link_to 'logout', destroy_user_session_path, data: {method: :delete, remote: :true} %>\nbut it didn't make a change.\nBTW\nI found it isn't even a problem with devise.\nHere is the code when I do rails g scaffold user at app/view/users/index.html.erb:\nerb\n<% @users.each do |user| %>\n  <tr>\n    <td><%= link_to 'Show', user %></td>\n    <td><%= link_to 'Edit', edit_user_path(user) %></td>\n    <td><%= link_to 'Destroy', user, method: :delete, data: { confirm: 'Are you sure?' } %></td>\n  </tr>\n<% end %>\nand this link_to 'Destroy' doesn't work as a DELETE (but does as a GET, so it does the same as the Show link).\nmy application.js\njavascript\n//= require react\n//= require react_ujs\n//= require turbolinks\n//= require_tree ./application\n//= require_self\nMy recognization is that requiring react_ujs makes DELETE, PUT, PATCH etc. HTTP methods work (as the same as jquery_ujs does). Is this wrong? Do I have to use both jquery_ujs and react_ujs ?\nEDIT\nI am using Rails 5.0 rc1.\n. thanks rmosolgo,\nso I cannot use react-rails alone (without jquery-rails) so far. Is this an issue? or is it designed to be so? What does react_ujs do?\n~~If latter, shouldn't react-rails require jquery-rails as a dependency?~~\n. Now I get it. I will just include both of them :)\nThanks for all these answers! best wishes for react-rails (^o^)b\n. ",
    "paulomcnally": "Solved!\nThanks. :)\n. ",
    "tchret": "I have the same problem: impossible to prerender anymore\n. @catmando, @rmosolgo Hey guys!\nDo you have an idea for a workaround while waiting for the official fix? \nI launch my app tomorrow and I need the pre-render for the SEO \ud83d\ude4f\ud83c\udffc\nhave a great day\n. @rmosolgo Thank you so much!\nThe warning is always there \n\nBut now the content is well rendered, before your workaround I had a white page.\n. @rmosolgo fixed! thank you for taking the time to help me \ud83d\udc4d\n. hey @rmosolgo, I've used the same workaround on another app, and now the pre-render: true mount the component two times. It's annoying because every component functions (eq. onClick) are also fired two times.\nDo you know where it comes from? \n. @rmosolgo yes, it was a dumb mistake where I was 100% involved... \nSorry for the inconvenience\n. ",
    "djudd": "Sure, I'll update travis.yml\n. Thanks for the quick response! I've been upgrading the https://www.academia.edu Rails app to Sprockets 4, and among the various things that needed patching, react-rails wins in response time & also quality of preexisting tests. ;)\n. ",
    "ysyyork": "Sry, it's my computer setting problem. Not related to the lib. \n. @rmosolgo Hi, I'm wondering which folder should I put my react component files? I ran this\n $ rails webpacker:install\n$ rails webpacker:install:react\n$ rails generate react:install\n and it creates a components folder in app/javascript/components instead of app/assets/javascript/components. But it seems you were saying files should be put under assets. I just get confused about using webpacker. However, prerender works\n\nI fixed this by myself. I need to add <%= javascript_pack_tag 'application' %> this to my application.html.erb. Kind of starting to understand. Thanks tho. ",
    "victorbojica": "What was the issue? I've stumbled upon this issue myself and really can't get past it.... ",
    "bliitzkrieg": "Ahh okay thanks\n. ",
    "ceres629": "Thanks that was helpful, will give it a try and see\n. ",
    "seuros": "deprecations should be removed or replaced,  not silenced. \n. Let me fix it. I will look into it now.\n. @forelabs can you provide a sample application ?\n. @rmosolgo , correct . \nI think we  should remove that comment from the output.\n. @forelabs The issue is also present in sprocket 4. I will take a look .\n. @rmosolgo Sure thing. \n. @rmosolgo we can remove the work in progress in sprocket 4 now.\n. @ngan provide us with a sample app that reproduce this bug, and i will try to fix it.\n. 1.8.1 is defective (don't process directives).\n. @tirdadc could you help us by providing a small sample app that crash with this bug ? It will speedup thing a log. Thanks you.\n. Oh, i didn't see it. doing that now.\n. ",
    "chocoby": "OK, thanks!\n. ",
    "ChennyBaBy": "These are the versions of some of my gems from the gemfile.lock:\nrails (5.0.0)\n      actioncable (= 5.0.0)\n      actionmailer (= 5.0.0)\n      actionpack (= 5.0.0)\n      actionview (= 5.0.0)\n      activejob (= 5.0.0)\n      activemodel (= 5.0.0)\n      activerecord (= 5.0.0)\n      activesupport (= 5.0.0)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 5.0.0)\n      sprockets-rails (>= 2.0.0)\nreact-rails (1.8.0)\n      babel-transpiler (>= 0.7.0)\n      coffee-script-source (~> 1.8)\n      connection_pool\n      execjs\n      railties (>= 3.2)\n      tilt\n. it made a new testComponent.js file instead of the testComponent.js.js but the content inside is still the same, missing the first line \ud83d\ude2d \n. Yup, i created another brand new rails app, and the exact same thing happened.\n. Yeah sure thing! Here it is https://github.com/ChennyBaBy/weird-bug-with-jsx\n. Awww man! This is going sound so silly \ud83d\ude13... In my editor atom i had installed a packaged called atom-jsx-transform. This was making the broken testComponent.js file in the same directory of the testComponent.jsx on save, which then get served into the webpage and errors. Thanks for your help, feel like I took you round a big circle, very sorry~ \ud83d\ude4f !\n. You beast @BookOfGreg \ud83d\udc4d \u2757\ufe0f  . ",
    "wizardone": "Hi @rmosolgo \nYes, I can verify that the deprecation warning is gone in version 1.8.1\nThanks :)\n. ",
    "psugihara": "Ah, nvm -- forgot to clobber precompiled assets (bundle exec rake assets:clobber).\n. ",
    "FranciscoGileno": "+1\nIt seems to be working on DEV, however I got the same error:\nExecJS::RuntimeError - SyntaxError: unknown: Unexpected token (12:2)\n. ",
    "dspoonia7": "To use Spread Operator:- \nRun:- npm install --save-dev babel-preset-stage-2\nAnd add:- { \"presets\": [\"stage-2\"] } in .babelrc file.\n-> Spread Operator\n. Hey @rmosolgo, Actually componentWillReceiveProps is working with es6 classes also. I added this to child component and it worked fine.\ncomponentWillReceiveProps(nextProps) {\n    this.setState({sortedDataList: nextProps.data});\n  }\nThanks :)\n. But now I am getting this error Uncaught Invariant Violation: Minified React error #119\nAny idea?\n. Sometimes I am also getting this error\n\nUncaught TypeError: Cannot read property 'releaseMouseMoves' of undefined\n\nI think this is multiple copies of react loaded issue. Is there any way to know if react is loading multiple times and if it is, then how can i resolve this?\n. Yes I think this is caused by react-rails, because in my other branches everything is working normal. It started happening after adding react-rails gem and its dependencies.\n. ",
    "HarrisonB": "Just to give some additional context, one can use JsRoutes and define it as a global to access routes.. ",
    "forelabs": "@seuros Sure, here you go: dummy.tar.gz\nIt requires sprockets 3.7.0 and newest react-rails 1.8.1,\nit also has precompiled assets where you can find the not transformed line //= require ...\n. @seuros it is not only removing the comment, because this comment should get transformed in the required code because it might be loaded afterwards normally  (component gets loaded before requirement because of naming order). \n. issue will be fixed with https://github.com/reactjs/react-rails/pull/582,\nso i close this one here.\n. - [X] no comment in compiled asset\n- [X] comment converted into required component code\nworks like a charm!\n. ",
    "holgersindbaek": "Yes... I navigate from /user/someuser to /browse. From what I understand on how Turbolinks work though, only the HTML that needs to change should change and since the header remains the header and nothing changes there, then I don't fully understand why \"componentDidMount\" is called again. Isn't it already mounted? If ALL the React components on the page unmount and mount again, what's the purpose of Turbolinks then?\n. Hmmm ok. Thanks for clearing that up!\nKeep up the good work.\n. @rmosolgo Quick follow up question. Is there any way to keep the state the same between page changes? I have a popover menu in my header and if that is open before a user clicks a link, I would like to have it open after the new page has loaded as well. Do you see any way of doing that?\n. Perfect. Exactly what I need. Thanks a lot!\n. Definitely could work. I have several components where I would like to know it though. I have some helper modules in, such as the one below:\n```\nreact.coffee\nnamespace \"S.React\", (exports) ->\n############################################################\n  # Base\n  ############################################################\n  exports.canUseDOM = ->\n    !!(typeof window != \"undefined\" && window.document && window.document.createElement)\n\nDummy modules\n\nnamespace \"S.Current\", (exports) ->\n  exports.hasUser = ->\n    # Return false\n    false\n```\nWould it somehow be possible to pass the variable to my helper module?\n. Thanks for the advise. Can you give an example where you're using CSSTransitionGroup the coffeescript way? Rest of my React Coffeescript code is working nicely. It's only this transition group stuff that is causing me problems. \n. @rmosolgo ?\n. This is what I ended up doing:\nReact.createElement React.addons.CSSTransitionGroup,\n      transitionName: \"fade\"\n      transitionAppear: true\n      transitionAppearTimeout: 300\n      transitionEnterTimeout: 300\n      transitionLeaveTimeout: 300\n      React.DOM.div\n        className: \"trending_container\"\n        id: \"seller_container\"\nThanks.\n. @rmosolgo Oh... missed that.\nWhat I don't fully understand is how I set react-rails to use either one or the other renderer? If I have both therubyracer and mini_racer in my gemfile, how will react-rails know which one to use?\nAnd a side question. Can you give an example of how I'd measure how long it takes to server side render a React component? If I have my _header.slim file as below, would I simply put a timestamp before the render and a timestamp after and deduct the difference?\n_header.slim:\n== react_component(\"HeaderPartial\", {}, prerender: true)\n. Cool... I'll check out the benchmarking tool.\nFrom what I can see above, ExecJS should auto detect the environment? So if I only have 1 ExecJS backend in my gemfile, then I guess it will automatically choose that one?\n. Great. And last question. I'm about to deploy to Heroku. I don't fully understand what the \"server_renderer_pool_size\" is. What is the optimal setting for that if I'm using therubyracer?\n. Ok. I'll stick with 1 then.\nThanks for the quick help!\n. No one is experiencing the same thing?\n. Hmmm... maybe?\nTo the expend of my knowledge, Heroku pre-compiles the assets when I push to Heroku. Is that not the case?\nI'm on Ruby 2.3.0, Rails 4.1.6 and I'm using react-rails (1.7.1). Should I upgrade to the master brand of this Github repo? \nHow would I verify that what I'm experiencing is what you're describing?\n. Which files exactly are my server rendering files? Are those the files I've set in my react config:\nconfig.react.server_renderer_options = {\nfiles: [\"react-server.js\", \"react_components.js\"], # files to load for prerendering\nreplay_console: true,                 # if true, console.* will be replayed client-side\n}\nIf I paste this in the console Rails.application.config.assets.precompile, I get this:\n[#<Proc:0x007fa4ba98de90@/Users/holgersindbaek/.rvm/gems/ruby-2.3.0/gems/sprockets-rails-2.3.3/lib/sprockets/railtie.rb:60 (lambda)>, /(?:\\/|\\\\|\\A)application\\.(css|js)$/, /bootstrap\\/glyphicons-halflings-regular\\.(?:eot|svg|ttf|woff2?)$/]\nSo it's pre-compiling css and js files (I'm guessing it's pre-compiling all my .coffee, .coffee.erb and .scss as well?!). Is it important to name the js files .js.coffee instead of .coffee?\nThe only thing I've added to the pre-compile list is the below:\n```\nPrecompile additional assets\nconfig.assets.precompile += [\".svg\", \".eot\", \".woff\", \".ttf\"]\n``\n. I tried to pre-compile the assets locally and I couldn't find myreact_components.jsfile. Do you think that might be the reason for the slow load? Why isn't myreact_components.js` file being pre-compiled, when .js files are being set to be pre-compiled in Rails?\n. Add the following to my config was the solution:\n```\nPrecompile react components\nconfig.assets.precompile += [\"react_components.js\"]\n```\nI don't know if this is clear for everyone else. If not, it might be nice to add it to the readme.\nThanks for the help trouble-shooting.\n. ",
    "Drowze": "I support this request.\nIn fact, I tried to achieve a similar result but had trouble mocking controller's render method. I do not currently know how to effectively a controller using react-rails custom renderer.. ",
    "eysi09": "I'm also getting the application/jsx error with react-rails 1.8.2 and sprockets 3.7.0. A comment in the docs would be helpful, it took me awhile to figure out that downgrading to 1.8.1 would do the trick.\n. ",
    "calebwoods": "This is fixed for me using the latest on master would be great to get a new gem version with the fix\n. ",
    "migu0": "Copying didn't work, the CSS has paths to the node_modules directory. Switched to react_on_rails gem where I can install node packages without going through rails-assets.org.\nA bit more complex to set up but I guess the best way to access the JS ecosystem inside Rails.\n. ",
    "joshuapinter": "Just so others know, in order to use import or require you'll need to use webpacker instead of the Asset Pipeline, as per the README.. \ud83d\udc4d Thanks for the great gem. Got React running in no time on a 8 year old legacy Rails 4.2 app. :). ",
    "borderpointer": "\u2022 Yes, I'm using Turbolinks, version 5.0.0 beta2\n\u2022 The errors only appear where application_react.js is included, as the manifest is selectively loaded.\n\u2022 My react-rails version is 1.8.0\n\u2022 There are no React related //= require in application.js, they were all pulled out and included in application_react.js\nYeah, it's weird how the other event handlers didn't fail, and even the ones that did fail, with the order of execution, ReactRailsUJS should have been available at the moment when those event handlers are attached.\nIt seems like the setup in line 20 is failing: ReactRailsUJS.Turbolinks.setup();\nSometimes it raises this error as well: Uncaught TypeError: Cannot set property 'TurbolinksClassicDeprecated' of undefined\nAlso, when Turbolinks fails to attach to ReactRailsUJS and cannot execute ReactRailsUJS.Turbolinks.setup(), the output of ReactRailsUJS in the console is:\nObject {CLASS_NAME_ATTR: \"data-react-class\", PROPS_ATTR: \"data-react-props\", TurbolinksClassicDeprecated: Object, TurbolinksClassic: Object, Native: Object\u2026}\nbut the second time when all event handlers are attached to ReactRailsUJS (after the re-mount) the output is:\nObject {CLASS_NAME_ATTR: \"data-react-class\", PROPS_ATTR: \"data-react-props\", Turbolinks: Object, TurbolinksClassicDeprecated: Object, Native: Object\u2026}\nThank you for your help!\n. ",
    "Stormcore": "I have the same question, what is the answer?. Thanks, Ive switched too. ",
    "drborges": "No need to be sorry :)\nJust to highlight, that only happens with the potential fix for the missing manifest I mentioned above, here's the stack trace:\n$ bundle exec rake assets:precompile RAILS_ENV=production\n/usr/bin/ruby2.2 /data/shared/bundle/ruby/2.2.0/bin/rake assets:precompile:all RAILS_ENV=production RAILS_GROUPS=assets\nrake aborted!\nNo compiled asset for react-server.js, was it precompiled?\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering/yaml_manifest_container.rb:13:in `find_asset'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering/sprockets_renderer.rb:22:in `block in initialize'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering/sprockets_renderer.rb:21:in `each'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering/sprockets_renderer.rb:21:in `initialize'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering.rb:22:in `new'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering.rb:22:in `create_renderer'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering.rb:12:in `block in reset_pool'\n/data/shared/bundle/ruby/2.2.0/gems/connection_pool-1.2.0/lib/connection_pool/timed_stack.rb:9:in `block in initialize'\n/data/shared/bundle/ruby/2.2.0/gems/connection_pool-1.2.0/lib/connection_pool/timed_stack.rb:9:in `initialize'\n/data/shared/bundle/ruby/2.2.0/gems/connection_pool-1.2.0/lib/connection_pool/timed_stack.rb:9:in `new'\n/data/shared/bundle/ruby/2.2.0/gems/connection_pool-1.2.0/lib/connection_pool/timed_stack.rb:9:in `initialize'\n/data/shared/bundle/ruby/2.2.0/gems/connection_pool-1.2.0/lib/connection_pool.rb:48:in `new'\n/data/shared/bundle/ruby/2.2.0/gems/connection_pool-1.2.0/lib/connection_pool.rb:48:in `initialize'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering.rb:12:in `new'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/server_rendering.rb:12:in `reset_pool'\n/data/shared/bundle/ruby/2.2.0/bundler/gems/react-rails-11ba9bda3910/lib/react/rails/railtie.rb:90:in `block in <class:Railtie>'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/lazy_load_hooks.rb:34:in `call'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/lazy_load_hooks.rb:34:in `execute_hook'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/lazy_load_hooks.rb:43:in `block in run_load_hooks'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/lazy_load_hooks.rb:42:in `each'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/lazy_load_hooks.rb:42:in `run_load_hooks'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/application/finisher.rb:59:in `block in <module:Finisher>'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/initializable.rb:30:in `instance_exec'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/initializable.rb:30:in `run'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/initializable.rb:55:in `block in run_initializers'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/initializable.rb:54:in `each'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/initializable.rb:54:in `run_initializers'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/application.rb:136:in `initialize!'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/railtie/configurable.rb:30:in `method_missing'\n/data/releases/20160829174816/config/environment.rb:8:in `<top (required)>'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/dependencies.rb:251:in `require'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/dependencies.rb:251:in `block in require'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/dependencies.rb:236:in `load_dependency'\n/data/shared/bundle/ruby/2.2.0/gems/activesupport-3.2.22/lib/active_support/dependencies.rb:251:in `require'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/application.rb:103:in `require_environment!'\n/data/shared/bundle/ruby/2.2.0/gems/railties-3.2.22/lib/rails/application.rb:305:in `block (2 levels) in initialize_tasks'\n/data/shared/bundle/ruby/2.2.0/gems/turbo-sprockets-rails3-0.3.14/lib/turbo-sprockets/tasks/assets.rake:190:in `block (2 levels) in <top (required)>'\nTasks: TOP => environment\n(See full trace by running task with --trace)\nrake aborted!\nCommand failed with status (1): [/usr/bin/ruby2.2 /data/shared...]\n/data/shared/bundle/ruby/2.2.0/gems/actionpack-3.2.22/lib/sprockets/assets.rake:12:in `ruby_rake_task'\n/data/shared/bundle/ruby/2.2.0/gems/actionpack-3.2.22/lib/sprockets/assets.rake:21:in `invoke_or_reboot_rake_task'\n/data/shared/bundle/ruby/2.2.0/gems/actionpack-3.2.22/lib/sprockets/assets.rake:29:in `block (2 levels) in <top (required)>'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/cli/exec.rb:63:in `load'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/cli/exec.rb:63:in `kernel_load'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/cli/exec.rb:24:in `run'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/cli.rb:304:in `exec'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/vendor/thor/lib/thor/command.rb:27:in `run'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/vendor/thor/lib/thor.rb:359:in `dispatch'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/vendor/thor/lib/thor/base.rb:440:in `start'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/cli.rb:11:in `start'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/exe/bundle:27:in `block in <top (required)>'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/lib/bundler/friendly_errors.rb:98:in `with_friendly_errors'\n/var/lib/gems/2.2.0/gems/bundler-1.12.5/exe/bundle:19:in `<top (required)>'\n/usr/local/bin/bundle:23:in `load'\n/usr/local/bin/bundle:23:in `<main>'\n. the issue regarding the react-server.js could be a side effect of my attempt to fix the missing manifest.yml.\n. It is not, let me try that.\n. didn't work.\nwhat should be the path for react-server.js?\n. shouldn't I see react-server.js in my manifest.yml?\n. Thanks for the help @rmosolgo, I'll try that next.\n. ",
    "wenwei63029869": "It is almost correct. Just a few changes to make it works: \n<% posts_json = Post.includes(:comments).map { |post| post.as_json.merge({comments: post.comments.as_json}) } %>\nThank you so much, @rmosolgo \n. ",
    "wadewinningham": "Sorry, I accidentally submitted this PR here rather than my fork of it.\nAs for returning \"\", that's a work in progress. The issue we're running into is during deployment. In our Rails 3.2 app, deploying to a new server with the react-rails gem gets to the asset:precompile step and fails because it's looking for the server_rendering.js file in manifest.yml. The problem is that the particular check is prior to the asset being compiled in the first place.\nRIght now, by returning \"\" (which is likely not the most elegant solution) we can successfully deploy and afterwards react-rails seems to work as intended. I'm working on this though to see if there's a better solution and will submit a proper PR once we get there.\n. ",
    "alienxp03": "Thanks @rmosolgo. Seems like you're right about that. Maybe I can open a PR for that too :)\n. ",
    "surenyonjan": "<div data-react-class=\"Post\" data-react-props=\"{\" title\":=\"\" \"this=\"\" is=\"\" title\",=\"\" \"published\":=\"\" true}\"=\"\"></div>\nThis is how component is rendered\n. I also don't have any clue. I am new to rails.\nPassing object by replacing JSON string even throws same error:\n<%= react_component('Post', {title: \"this is title\", published: 'true'}) %>\nBut in rails 4.1.0, it works in both case of JSON string and object.\nHowever if I pass an empty object <%= react_component('Post', {}) %>, React UJS puts this component in the page with no error\nHave you tried this with rails 3.2.19? Do you get same error?\n. ",
    "ixhimanshu": "check this out 100% working\nvar title = this.refs.title.value.trim();\n    var description = this.refs.description.value.trim();\n    this.props.onCommentSubmit({title: title, description: description});\n    this.refs.title..value = '';\n    this.refs.description.value = '';\n    return false;\n},`. ",
    "perezperret": "Is there a reason why this still hasn't been merged? @jamesmccann . Looking into this, I think the ideal solution would be to \"unbind\" the component without touching the markup, thus cleaning up any memory use but preventing the flicker, and complying with the turbolinks cache, but I haven't found a simple way to do this with React or ReactDOM. Maybe we could use ReactDOMServer to render and append the markup again without a mounted component. On the other hand we could add a fallback to attach the listener to 'turbolinks:before-render' if cache is disabled. All this feels like overkill, but it should leave everything in working order. As a reference, I achieved this using Rails.application.config.react.sprockets_strategy = false, it is documented.. ",
    "xinranxiao": "@jamesmccann are you planning to write a test for this?. awesome thanks!!!. @victorbojica make sure your package.json has this specific version for react_usj: \"react_ujs\": \"2.4.0\" (as opposed to something like \"react_ujs\": \"^2.4.0\"). \n828 bumped the patch version and now requires React v16.xx. It's not backwards compatible and will break anyone with ^2.x.x who's not on React v16.x. @BookOfGreg I'd recommend rolling back that change with 2.4.2 and then bumping maybe the major version for the change? Not sure what's the best way to set a hard v16.xx requirement.",
    "WizardOfOgz": "It seems like it may just be in there to prevent people from using older versions of coffee-script with react-rails. I don't see it being required anywhere. \nMy current project does not use CoffeeScript at all, so it's annoying that coffee-script-source must be installed to satisfy bundler. It would be nice to have all the CoffeeScript function of react-rails moved into a separate gem. I'm not sure the effort to do that is currently worthwhile.\n. ",
    "kylejginavan": "+1\n. ",
    "chulkilee": "Let's remove it - I created a PR #667 . No - generators create files from template.. Reproduced it!\n\nuglifier 3.1.0: doesn't work (I think this should be yanked anyway)\nuglifier 3.1.1, 3.1.2: broken\n\n```sh\nrails new blog --skip-active-record --skip-spring --skip-listen --skip-coffee\ncd blog\necho \"gem 'react-rails'\" >> Gemfile && bundle check\nbin/rails g react:install\ngrep uglifier Gemfile.lock\ngrep react-rails Gemfile.lock\nbin/rails g controller home index\nbin/rails g react:component Label label:string --es6\nrm  -f app/views/home/index.html.erb\necho \"<%= react_component('Label') %>\" > app/views/home/index.html.erb\nbin/rails s\ncheck http://localhost:3000/home/index\nit's working\nrm -rf public/assets/\nbin/rails assets:precompile\ngrep Label public/assets/*.js\nrm -rf public/assets/\nRAILS_ENV=production bin/rails assets:precompile\ngrep Label public/assets/*.js\nit's there..\nSECRET_KEY_BASE=none RAILS_ENV=production RAILS_LOG_TO_STDOUT=1 RAILS_SERVE_STATIC_FILES=1 bin/rails s\ncheck http://localhost:3000/home/index\nit's not working\nadd reference to the component\necho 'Label;' > app/assets/javascripts/tmp.js\nrm -rf public/assets/\nRAILS_ENV=production bin/rails assets:precompile\nSECRET_KEY_BASE=none RAILS_ENV=production RAILS_LOG_TO_STDOUT=1 RAILS_SERVE_STATIC_FILES=1 bin/rails s\ncheck http://localhost:3000/home/index\nnow it's working\n```. Found that react components are actually there.\nThe problem is es6 class is not exported correctly. Will update the title. See the script above - that's the complete step to reproduce the problem. It just uses generator from react-rails.\n```sh\ncat app/assets/javascripts/components/label.es6.jsx\nclass Label extends React.Component {\n  render () {\n    return (\n      \nLabel: {this.props.label}\n\n    );\n  }\n}\nLabel.propTypes = {\n  label: React.PropTypes.string\n};\n```\nProbably it is exported but uglify changed the name? I'm seeing this problem when I use uglifier with webpacker-rails in other projects, since uglifies does not know view helpers are calling the component name, so it automatically changes the name.. confirmed that it is no longer an issue for me on following version:\n\nrails 5.0.3\nuglifier 3.2.0\nreact-rails 2.2.0. This is because react-rails always require execjs - see https://github.com/reactjs/react-rails/blob/v2.4.7/lib/react/jsx.rb#L1. I haven't investigated far enough. Even react-rails try to avoid loading execjs, it would need a change to use server side rendering I guess.\n\n@AirWick219 you may use multi stage docker build to include nodejs in build step, and do not include nodejs in runtime. That works for other asset-related gems requiring nodejs (e.g. uglifier) - but not for react-rails.. ",
    "benoitongit": "Exact same issue here:\nWarning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React. \nAny idea how to fix this without having to override ract-rails code?\nIt looks like it's related to Turbolinks cache. If cache is disabled, it fixes this issue:\n<head>\n  ...\n  <meta name=\"turbolinks-cache-control\" content=\"no-cache\">\n</head>\n. I tried with before-cache, but as you mentioned UX is not as nice. Elements jump around a bit...\nIdeally, we can keep it like that and somehow remove the warning :). I've been testing today without unmounting with Rails 5 and Turbolinks 5. It works like a charm, no warning and I can't find any issue. It looks like Trubolinks is doing the cleanup since it uses cloneNode(true) for caching.\nI am probably missing something, any reason why we have to unmount components here?\nsetup: function() {\n  ReactRailsUJS.handleEvent('turbolinks:load', function({window.ReactRailsUJS.mountComponents()});\n  //ReactRailsUJS.handleEvent('turbolinks:before-cache', function({window.ReactRailsUJS.unmountComponents()});\n}. I see your point and it makes sense at some level. I am just wondering if this is the role of react-rails to take care of this case. It depends on which angle we are looking at this problem, but if you are building a SPA app, it is important to avoid memory leaks. But if you are not, it's not as important since the all page get flushed when browsing to the next page.\nAlso, when using React framework directly it's up to the developer to call unmountComponentAtNode(), maybe it could be the same here.\nEither way is fine with me, I just wish we can find a clean way to unmount components without having to do it in before-cache.\nFor event listeners cloneNode() doesn't copy event listeners has mention in the doc, so that should be OK.\nThanks for your amazing work @rmosolgo on this.\n. To me it's not a SPA, it's an hybrid version to get the responsiveness of a SPA, as they say on turbolinks github:\n\nGet the performance benefits of a single-page application without the added complexity of a client-side JavaScript framework\n\nI don't think you will see the following happen in a SPA:\n\nTurbolinks saves a copy of the current page to its cache just before rendering a new page. Note that Turbolinks copies the page using cloneNode(true), which means any attached event listeners and associated data are discarded.\nsource\n\nThe root of this issue is Turbolinks caching system. As we've seen, without it, react-rails works perfectly as it is currently. Adding turbolinks cache and then we see the warning.\nUnsure about the memory leaks with Turbolinks, it would have to be tested to see if it happens or not..\n. After more digging, looks like @rmosolgo you're right. Unmounting is important with Turbolinks to avoid memory leak. \nNavigating from page A -> B -> C and looking with the React dev tool, components in page A are still hanging there in memory while in page C.\n. ",
    "thebadmonkeydev": "Wow, didn't expect this one to resurface, thanks!! :smiley: \nIs there a way to suppress the warnings?  In my case at least like @benoitongit mentioned, I'm not building an SPA so I'm not as worried about leaks in that way.. ",
    "wdiechmann": "hmmm - my 2c thinks to look 'the competition' over the shoulder ;)\nhttps://github.com/shakacode/react_on_rails/commit/1918345809869ee7d1a792bd894e52e842104243\nperhaps that could bring us in the clear?. ",
    "szyablitsky": "I think the best solution is to modify ReactDOM's unmountComponentAtNode and more specifically unmountComponentFromNode so it can bypass emptying of the container https://github.com/facebook/react/blob/8791325db03725ef4801fc58b35a3bb4486a8904/src/renderers/dom/stack/client/ReactMount.js#L190 \nMay be additional boolean parameter like doNotEmptyContainer. renamed parameter to shouldLeaveMarkup and filled a pull request to React\nhttps://github.com/facebook/react/pull/8928. I get an answer about my PR from Dan Abramov. He rightly asked why we get an error about 'another copy of React' in first place. I can not reproduce 'another copy of React' warning by any means. The only way I was able to get this warning is to do a modification in component which leads to an error while rendering component when state was changed wrong way.\nBut I get this warning after rendering error either way with turbolinks:before-render and turbolinks:before-visit (turbolinks:before-cache)\nCan anyone provide me with exact reproducible scenario how to get this warning only in case of turbolinks:before-render so I can dig deeper?. @borisrorsvort this change is already reverted back to before-render\nhttps://github.com/shakacode/react_on_rails/issues/706\nhttps://github.com/shakacode/react_on_rails/blob/master/node_package/src/clientStartup.js#L187. @borisrorsvort I think you should look at https://github.com/renchap/webpacker-react/pull/14#issuecomment-282500093 and https://sevos.io/2017/02/27/turbolinks-lifecycle-explained.html as @renchap advised.. It seems that it's more likely mount event issue (not unmount).. once option is not widely adopted by current browsers, so I'd recommend using explicit removal of 'turbolinks:load' listener on first event handler call\nhttp://caniuse.com/#search=once. ",
    "sevos": "Currently in your gem you listen on turbolinks:load\ndocument.addEventListener('turbolinks:load', reactOnRailsPageLoaded);\nAs I explained in my article, this event pairs up nicely only with before-cache event.\nIn case you want to make use of turbolinks' caching, you should listen to this event once, and then listen to render event:\njavascript\ndocument.addEventListener('turbolinks:load', reactOnRailsPageLoaded, {once: true})\ndocument.addEventListener('turbolinks:render', reactOnRailsPageLoaded)\ndocument.addEventListener('turbolinks:before-render', reactOnRailsPageUnloaded). Alternatively (from comments under my article):\njavascript\ndocument.addEventListener(\"DOMContentLoaded\", reactOnRailsPageLoaded)\ndocument.addEventListener('turbolinks:render', reactOnRailsPageLoaded)\ndocument.addEventListener('turbolinks:before-render', reactOnRailsPageUnloaded). ",
    "leonelgalan": "I tried @sevos solution and, for me, it only changes the warning from: \n\nWarning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.\n\nto \n\nWarning: setState(...): Can only update a mounted or mounting component. This usually means you called setState() on an unmounted component. This is a no-op. Please check the code for the MyComponent r component.\n\nI also noticed that the warnings (both) don't happen when using the Back and Forward arrows (I assume the page is loaded from Turbolinks cache), but they do when clicking on a link (even when the page was visited before, same page I could simply Back into). When the warnings happen, their is a visible \"reload\" of the page, a previous version of the page loads first, instantaneously followed by a longer load that actually hits the server.\nI'll try to reproduce the issue in a simpler/smaller app.\n\nUpdate 1\nFirst warning reproduced in https://github.com/leonelgalan/turbolinks-react-rails-example/tree/v1, by clicking into the \"Two\" link, followed by clicking on \"One\". @sevos fix, removes that first warning, you can see this in https://github.com/leonelgalan/turbolinks-react-rails-example/tree/v2.\nI haven't been able to reproduce the second warning, my example components are too simple. I'm working on that right now.\n\nUpdate 2\nI've reproduce the other warning I was getting in https://github.com/leonelgalan/turbolinks-react-rails-example/tree/v3 and I seem to found the cause, a double render of view. See details on the README o https://github.com/leonelgalan/turbolinks-react-rails-example/\n\nUpdate 3\nI've learned (or at least I believe I've learned) that this might be caused by Turbolinks rendering a preview from cache and components in there being mounted in that preview.\n\nOtherwise, during standard navigation (via Application Visits), Turbolinks will immediately restore the page from cache and display it as a preview while simultaneously loading a fresh copy from the network. This gives the illusion of instantaneous page loads for frequently accessed locations.\nhttps://github.com/turbolinks/turbolinks#understanding-caching\n\n. ",
    "JohnSmall": "Ah, I have this problem and found this thread. It's closed, but what do I do to fix the problem? Use the Github version of the gem rather than the published version? \nAnd what else do I need to do? I see loads of comments about changing Turbolinks caching, but I've no idea what I have to do. \nMy problem is very simple. I've created a Bootstrap tabbed page using React.DOM.etc any time I click on the tabs I get this warning and the tabbed panes don't update. . ",
    "zacharyw": "@rmosolgo I'm getting this error in react-rails 2.2.0. An example is this project: https://github.com/zacharyw/rcg/tree/enchancement/es6\nIf I load up the conversations index page (the root route by default), everything is fine. If I click into a conversation, that works fine. If I click back to the home page, that's when I see the following error:\nWarning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.\nAfter that point it happens any time I click on a conversation or click back to the index page. My components are in app/javascript/components, the views in question are app/views/conversations/index.html.erb and app/views/conversations/show.html.erb.\nIn the index view I am rendering the conversation_list component, in the show view I am rendering the message_list component.\nAlso, I believe this only started occurring when I upgraded from webpacker gem 1.2 to webpacker 2.0.. @rmosolgo Sure thing. I had deleted it after moving the script to the head tag, but I just restored the branch and returned it to a state that demo's the warning message.. ",
    "niltonvasques": "Also happens with me, react-rails (2.4.3).. ",
    "PQALAB": "I'm seeing this issue with react-rails 2.4.7, and webpacker 3.5.. ",
    "Dodie324": "Any updates on this?\n. Hey @rmosolgo! Any luck with this? Let me know if there's anything I can do to help!\n. ",
    "matthieua": "Fixed, it was something related to react-bootstrap not importing modules correctly.\n. ",
    "gambala": "@matthieua How did you debug it? I got same error, but I don't use react-bootstrap package in my project.. ",
    "piratefsh": "FYI I had the same window is not defined issue and tried to set var window = this after the components were required but that still gave the error. What worked was to set window before the React was required. In my case, React was required in my react_app file.\ne.g.\nprerender_polyfill.js\njs\n// polyfill for prerendering. must be set before requiring react\nvar window = this;\ncomponents.js\njs\n//= require prerender_polyfill\n//= require react_app. Since window is needed to even load React, shouldn't this be mentioned in the README setup?. ",
    "AdrienGiboire": "The code has been formatted but the follow-up is gone ;) I am having difficulties finding how to set babel options as well. Like, how to set presets knowing it does not care if I create a .babelrc at the root of my project.. ",
    "mcherz": "Thanks; I'll raise it with babel and see if I get anywhere.\n. ",
    "zetachang": "Yeah, agreed on the overhead to start up new one every time, but at least we could clear up console, global, window.. ? \n. ",
    "printercu": "I can implement it, but I don't really understand the usecase of setup & teardown. Can you please provide some examples, maybe I can propose better solution.\n. ",
    "Matt-Butler": "Thank you\n. ",
    "fernandes": "@rmosolgo thank you for replying this issue, I found this command a little late (about 1 and a half year hahah), but I used this as an inspiration to get SSR working on jekyll... if someone is interested, just check this repo, thank you! \ud83d\ude47 . ",
    "TrumpClone": "I think, you can use Teaspoon (testing toolkit) (https://github.com/jejacks0n/teaspoon) for integration with Rails and React-Rails ecosystems in specs.. ",
    "superrordev": "Then with teaspoon, which is the best match? jasmine or mocha? ( for react-rails project). ",
    "sekmo": "Do you have any update on how to test React components in Rails?. ",
    "mateoclarke": "I'm also interested in a solution to this. Currently researching how to extend this /babel_transformer.rb file.\nhttps://github.com/reactjs/react-rails/blob/e43aabbfc8e17b1f1ef253b9fad87f9cd1a99b28/lib/react/jsx/babel_transformer.rb. ",
    "prikha": "Ok, Ill prepare PR\n. Hi @rmosolgo please review https://github.com/reactjs/react-rails/pull/641. Updated PR as required\n@rmosolgo FYI. Sure Ill take a look this week.. Hi @rmosolgo please review #644 . Yepp, I`ll try something out. \nDone that(https://travis-ci.org/reactjs/react-rails/builds/180025155), however the build on Travis is extremely slow. Why would you keep \nallow_failures:\n    - rvm: jruby-9.0.1.0\nwhich always take 10 minutes and always fail?. ",
    "henrik": "@prikha Thank you for this! Got this error when upgrading to 1.3.3 (small steps).. ",
    "jparker10": "Sorry! Copy paste fail. It's now there.. Current feeling is that the Javascript rendering engine process is dying in the background within the Heroku Dyno and the process isn't getting restarted. Any thoughts on how I can test for that condition?. ",
    "jesseproudman": "Thanks. Gone ahead and implemented 650 and will wait for the error to crop up again. I've got a workaround where I exit the process if we encounter that error. Heroku will then boot the worker again, it will pick up the job a second time and complete it. Not graceful, but at-least it unblocks the criticality of this issue. :). Looks like we're getting the same thing: \nEncountered error \"#\" when prerendering MailerBroadcast.. @rmosolgo Looks like the issue is still occurring on a consistent basis.. Going to try miniracer and see if that gets me anywhere.\nThe JS is fine since I can re-run the exact same code (with the same props) on a heroku console and it works fine.\nUsing default server rending config. Nothin unique.\n\nIs there any chance that some side-effects from previous renders are interfering with a later render?\n\nThis seems like what could be happening, but I can't replicate the issue in a console... Only seems to happen in the job workers.. Is there an easy way to disable the connection pooling?. Ok cool. Will give mini_racer a shot and then try that if I continue to have trouble. Thanks mate!. Seems to have cleared up the staging site, though email volumes there are very low. Pushing to production today so should know more this week.. Ok, so mini_racer gives us a new error. Executing this same code path via the console seems to work just fine. We're only getting this on the second or third executions within the shoryuken  background job.\nMessage: <error> at undefined:0:0\n(execjs):1 (none)\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:167 eval_unsafe\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:167 block (2 levels) in eval\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:217 timeout\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:166 block in eval\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:63 block in with_lock\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:63 synchronize\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:63 with_lock\n/app/vendor/bundle/ruby/2.3.0/gems/mini_racer-0.1.7/lib/mini_racer.rb:164 eval\n/app/vendor/bundle/ruby/2.3.0/gems/execjs-2.7.0/lib/execjs/mini_racer_runtime.rb:27 block in eval\n/app/vendor/bundle/ruby/2.3.0/gems/execjs-2.7.0/lib/execjs/mini_racer_runtime.rb:66 translate\n/app/vendor/bundle/ruby/2.3.0/gems/execjs-2.7.0/lib/execjs/mini_racer_runtime.rb:26 eval\n/app/vendor/bundle/ruby/2.3.0/bundler/gems/react-rails-6ea7524f5770/lib/react/server_rendering/exec_js_renderer.rb:36 render_from_parts\n/app/vendor/bundle/ruby/2.3.0/bundler/gems/react-rails-6ea7524f5770/lib/react/server_rendering/exec_js_renderer.rb:17 render\n/app/vendor/bundle/ruby/2.3.0/bundler/gems/react-rails-6ea7524f5770/lib/react/server_rendering/sprockets_renderer.rb:38 render\n/app/vendor/bundle/ruby/2.3.0/bundler/gems/react-rails-6ea7524f5770/lib/react/server_rendering.rb:17 block in render. Trying no connection pooling now.. Getting rid of the connection pooling seems to have resolved this issue for me:\nhttps://github.com/acrelo/react-rails/blob/master/lib/react/server_rendering.rb#L16-L18. Sounds good. LMK how I can assist from here!. ",
    "a17levine": "@haydenzone try putting bundle exec before rails. ",
    "veelenga": "@JorgeDDW  I tried running react-rails with sprockets and turbolinks in Rails 5 evn and works perfectly.\nThank you guys for the great job!. ",
    "mattclough1": "Couldn't you just do this?\nhttps://github.com/reactjs/react-rails#rendering-components-instead-of-views. Just noticed that the readme updated for server rendering. I'll reconfigure and make sure this is actually an issue. My apologies!. Oddly, everything I had before could stay roughly the same, I just needed to add\n//= require react-server\n//= require react-ujs\nto the top of the components file, as well as requiring react and react-ujs in application.js \ud83d\udc4d. ",
    "novikserg": "@rmosolgo hi Robert, I used Rails 5.0.1, ruby 2.2.4 and installation instructions in readme. Generator resulted in generating components/ folder (not file), and giving me an assets error for require components. As you would expect, it started working after I changed to require_tree ./components. So not sure if it's just Rails 5 issue or not, but it definitely exists. ",
    "thijsc": "So it turns out this is actually not that simple. We'd need to add a setup for queries similar to the current one for JSX. For the moment we've moved to https://github.com/Shopify/sprockets-commoner so we can use Babel to do the various conversions.. ",
    "radovsky": "@akshaymohite that did it, it was actually throwing an error on the require/import all along. Thanks!. ",
    "Arpanbhalla": "@akshaymohite thanks this worked for me too could you tell how is it different from \nvar Company = React.createClass({\n  render: function() {\n    return (\n      <h1>Hey</h1>\n    )\n  }\n});\nThe above code is not working for me. ",
    "lyonsun": "I also would like to know why React.Component works, while React.createClass produces the following errors: \nUncaught TypeError: React.createClass is not a function\n    at _main.self-09a4e07806daa1e3111519872c7e06726d7d2e456b3c838774b43b3c556ea070.js?body=1:2\n[react-rails] Cannot find component: 'Main' for element <div data-react-class=\u200b\"Main\" data-react-props=\u200b\"{}\u200b\">\u200b</div>\u200b\nUncaught Error: Cannot find component: 'Main'. Make sure your component is available to render.\n    at Object.mountComponents (react_ujs.self-750257c3f8895c967701122460c257eb9b74575fc10ceafeb7f6d61383553386.js?body=1:320)\n    at HTMLDocument.ReactRailsUJS.handleMount (react_ujs.self-750257c3f8895c967701122460c257eb9b74575fc10ceafeb7f6d61383553386.js?body=1:357)\nThanks.. ",
    "abevoelker": "I did a little bit - I installed webpacker over the weekend in a Rails 5.0 app (since it currently is compatible with 5.0), but haven't had much chance to mess with it beyond just installing it as I'm not very familiar with webpack (several months ago after much trial and error I got a very basic webpack setup working for running Elm but that's it).\nI think I'll have some time this weekend to mess with it further and see how hard it is to migrate my existing react-rails components over and hopefully try installing some components from npm.. ",
    "ankitsinghaniyaz": "@rmosolgo \nHi, Thanks for answering. I follow that. Now I understand what is happening. I still have 2 naive questions to ask.\n\nWhat is ReactRailsUJS?\nWhich components will it mount and unmount?\n\n\nedit\n\nhttps://github.com/reactjs/react-rails/blob/332608a41fdc79d3b5c2542483fc9c9a05b6559a/lib/assets/javascripts/react_ujs_mount.js\nI followed this file and understood that you are using react-data-class to find the attribute and mount them and removing all other instances. and before render you remove all the unwanted nodes.\n\nedit\n\nI understand the js flow now, but can you also tell me about your view helper?\nI got an idea about how to go about creating a view helper. I do not need this full power but I can refer this and create. \nhttps://github.com/reactjs/react-rails/blob/master/lib/react/rails/component_mount.rb\nThanks for your help, I will love to get any tips you might have.. ",
    "pan": "try to remove the line //= require react-server from javascripts/component/server_rendering.js and see if it helps.. ",
    "gamesover": "Hi @pan , it does work for me though I am no idea why. Thank you.. ",
    "joeltaylor": "I ran into this same issue. While removing react-server from server_rendering.js does stop the error, it breaks server-side rendering. \nSince mine also broke on an upgrade, I discovered that the real issue was due to using the legacy api for string refs. Figured I'd add this in case it helps anyone else.. ",
    "RoRroland": "@pan it does solve my issue. Thanks a lot.. ",
    "brentdodell": "This was broken, I believe this Webpacker change. Webpacker::Configuration should now be Webpacker.config. It looks like the generator isn't the only thing that was broken with this. Webpacker::Manifest is not Webpacker.manifest. It would be good to look through the Webpacker PR linked to above to figure out what all needs to be updated.. ",
    "developer-fsgl": "Gemfile.txt\n I am not sure if the problem is with uglify-js. I am using **gem 'uglifier', '>= 3.0.2**'. Thanks alot for your help! I made a mistake in my code. My bad.\nI had other error in the code, which I overlooked.\nThe error was I declared var DataTable = ReactDataComponents.DataTable, but did not include its javascript.\nMy learning: One error in production setup may fail the loading of the overall web app. . ",
    "mikecmpbll": "to help anyone searching, the error i was getting was:\nTypeError: Cannot call method 'serverRender' of undefined\njust ran the rails g react:install script and was good to go again :).. ",
    "christiangenco": "rails g react:install is what did it for me. Maybe this should be added to the upgrade instructions in the README?. ",
    "jasnow": "@rmosolgo - Thanks for the research.\n. Pointed my repo to your react-rails code and verified that the change fixed my issue. Thanks.. You are welcome.\nVerified released version.. ",
    "tannermares": "@rmosolgo updated. ",
    "Najtmare": "I use the default configuration that is provided when running these 3 commands. So I'm not really sure what you mean by usage of react_ujs.\n$ rails webpacker:install\n$ rails webpacker:install:react\n$ rails generate react:install\nCommentsContainer is found in app/javascript/components/\nEdit: Forgot to mention I use Rails 5.1.0.rc2. application.js\nconsole.log('Hello World from Webpacker')\n// Support component names relative to this directory:\nvar componentRequireContext = require.context(\"components\", true)\nvar ReactRailsUJS = require(\"react_ujs\")\nReactRailsUJS.useContext(componentRequireContext)\nCommentsContainer:\n```\nvar CommentsContainer = React.createClass({\nrender: function() {\n    return ;\n  }\n});\n```. Where do you put that, application.js?\n. That doesn't seem to help.. Here's a test app that recreates that behaviour: https://github.com/Najtmare/reactpack. Hm, that's weird. I remember using this same gem, perhaps a year ago or so where underscore did not matter much as long as the component had the correct class name. Is this only relevant for webpacker or the asset pipeline as well?\nI also, vaguely, remember running the react generator without an underscore and it still created the component file with an underscore? Perhaps that should be changed? I'll check this out one more time in the morning and get back to you.\nThanks.. So it seems like the generators always use the same file name regardless of the fact that webpacker is present.\nThis should probably change so that you don't have to do this:\nreact_component('hello_world')\nwhen the file name is hello_world.js\nI made a slight change which seemed to work fine, you can see it here.\nEither that or the docs should be updated to outline how to use the react component helper when webpacker is defined.\nLet me know what you think.. Done https://github.com/reactjs/react-rails/pull/703. Hm. I think we might have to include the whole\nvar React = require(\"react\")\n...\nmodule.exports = ComponentName\nIn the generated files. Otherwise we still get the Component is not defined error.\nWhat do you think @rmosolgo? Should I push those changes to my PR or open a seperate one for that?. Thanks @rmosolgo. Sorry, I didn't have much time this past week to work further on the issue.\nCheers.. ",
    "AndriySand": "Possible cause of error is that you added \n//= require react\n    //= require react_ujs\n    //= require components\n into your app/assets/javascripts/application.js\n. ",
    "sshaw": "Running Rails 4.2.10, Webpacker 3.5.5, React Rails 2.4.7, react_ujs 2.4.4:\nrake webpacker:install\nrake webpacker:install:react\nrails generate react:install\nrails g react:component HelloWorld greeting:string\nThen:\nhaml\n= javascript_pack_tag 'application'\n= react_component(\"HelloWorld\", :greeting => \"foo\")\nResults in:\nVM6888:1 Uncaught ReferenceError: HelloWorld is not defined\n    at eval (eval at module.exports (react_ujs.self-eb4e9994228856e343ab49d1aed6c23046bf4308ea6d46395e5c39170ab3e56f.js?body=1:95), <anonymous>:1:1)\n    at Object.module.exports [as getConstructor] (react_ujs.self-eb4e9994228856e343ab49d1aed6c23046bf4308ea6d46395e5c39170ab3e56f.js?body=1:95)\n    at Object.mountComponents (react_ujs.self-eb4e9994228856e343ab49d1aed6c23046bf4308ea6d46395e5c39170ab3e56f.js?body=1:303)\n    at HTMLDocument.ReactRailsUJS.handleMount (react_ujs.self-eb4e9994228856e343ab49d1aed6c23046bf4308ea6d46395e5c39170ab3e56f.js?body=1:350). Thanks. No luck here. One thing of note is that I renamed HelloWorld.js to HelloWorld.jsx. Without the .jsx I get: \n```\napplication-b3eae222b81429924b35.js:23318 Error: Module build failed: SyntaxError: Unexpected token (7:6)\n5 |   render () {\n   6 |     return (\n\n7 |       \n     |       ^\n   8 |         Greeting: {this.props.greeting}\n   9 |       \n  10 |     );\n\nat Object.<anonymous> (application-b3eae222b81429924b35.js:511)\nat __webpack_require__ (application-b3eae222b81429924b35.js:20)\nat webpackContext (application-b3eae222b81429924b35.js:671)\nat application-b3eae222b81429924b35.js:23348\nat Object.getConstructor (application-b3eae222b81429924b35.js:23312)\nat Object.mountComponents (application-b3eae222b81429924b35.js:812)\nat HTMLDocument.ReactRailsUJS.handleMount (application-b3eae222b81429924b35.js:859)\n\n```\nThis is a site that was previously (and still is) using Sprockets so I assume something may be happening there (even though they're supposed to coexist).  \nWill keep digging...\n. Fixed!\nThe issue was the hello world component was loading but Sprockets was still loading react_ujs. This caused:\n\nVM6888:1 Uncaught ReferenceError: HelloWorld is not defined\n\nJSX error was due to \"react\" missing from .babelrc's presets config. \n. > @sshaw how you solved the sprockets issue, i think i also have that?\n@ziaulrehman40 , I think removing react_ujs from application.js fixed it. . > If you use Webpack, you can import libraries like import request from 'superagent'\nDoes this mean one cannot import using Sprockets? . ",
    "ziaulrehman40": "Why is the issue still open after this much time? \ud83e\udd14 \n@sshaw how you solved the sprockets issue, i think i also have that?\n@AndriySand i also have this sequence in my application.js so whats the problem here, and solution?\nError i am getting is:\nVM2917:1 Uncaught ReferenceError: ComponentName is not defined\n    at eval (eval at module.exports (react_ujs.self.js?body=1:95), <anonymous>:1:1)\n    at Object.module.exports [as getConstructor] (react_ujs.self.js?body=1:95)\n    at Object.mountComponents (react_ujs.self.js?body=1:303)\n    at HTMLDocument.ReactRailsUJS.handleMount (react_ujs.self.js?body=1:350)\nnaming is correct. And View also renders properly, i get this error in the browser console just beside  when the view is rendered, if that helps.\n. > > @sshaw how you solved the sprockets issue, i think i also have that?\n\n@ziaulrehman40 , I think removing react_ujs from application.js fixed it.\n\nThanks @sshaw Worked like a charm!. ",
    "nekogami": "Doesn't activating addons in your application.rb with\nconfig.react.addons = true\nand then use:\n```\n        \n      { this.renderStuff() }\n    </React.addons.CSSTransitionGroup>\n\n```\nworks ?\n(Old issue I know, but I just found it :p). What I wrote was the code I was using then on production. I since switched job and is not using React atm so I can't give you a feedback for now. . ",
    "malindamiller": "Thank You for the reply! I had also tried using it as you suggested and it was giving the same error, but I reset all my changes and started over, and it seems to be working now!. ",
    "glosie": "The Rails 5 build failures look to be related to https://github.com/rails/rails/pull/29022. Thanks for the quick merge and release! Loving the new webpacker support \u2764\ufe0f . ",
    "ViXP": "Please, fix the --coffee generator too . --coffee generator must include this\n\"module.exports = @#{component_name}\"\ntoo\nI fixed this issue in this pull request https://github.com/reactjs/react-rails/pull/768. Yeah, I've corrected the code you mentioned, it is right to stick to one of the possible syntaxes. Also, PropTypes was removed from base 'react' source code, so now it must be imported in such way: import PropTypes from 'prop-types'. I've added this line to the generator too.. ",
    "kyleknighted": "Just wanted to check back in to inform you that this seems to have fixed the issue. Thanks for pointing out that preset! It's not one I've had to intentionally use before.. @Jfeng3 https://babeljs.io/. Update your component code to include the import for React and export the module.\n```es6\nimport React from 'react';\nclass Title extends React.Component {\n  render() {\n    return ({this.props.text});\n  }\n}\nexport default Title;\n```. You could try giving this a shot. \nopen up config/webpack/loaders/react.js and change it to\nes6\nmodule.exports = {\n  test: /\\.(js|jsx)?(\\.erb)?$/,\n  exclude: /node_modules/,\n  loader: 'babel-loader',\n  query: {\n    presets: ['react', 'es2015', 'stage-2']\n  }\n}\nand run\nyarn add babel-preset-es2015 babel-preset-react babel-preset-stage-2\nin your CLI, then restart your webpack compiler\n\nEDIT: Also, just to verify, your component extension is jsx correct?. ",
    "Jfeng3": "@rmosolgo new to react. what is the tool you use to check syntax? the website that you can choose stage-0 stage-2 etc. ",
    "jerikthompson": "@Jfeng3 https://babeljs.io/repl/ this link is the Babel sandbox tool. ",
    "alebian": "@kyleknighted That raises this error in development:\nUncaught ReferenceError: exports is not defined\n\nAnd of course after:\n[react-rails] Cannot find component: 'Title' for element. @rmosolgo The code is this:\n\n```\nimport React from 'react';\nclass Title extends React.Component {\n  render() {\n    return ({this.props.text});\n  }\n}\nexport default Title;\n```\nAs @kyleknighted told me to try. @kyleknighted the filename is title.js.jsx also I don't have webpacker installed because it is a legacy application that I upgraded to Rails 4.2. Do I need to install webpacker?. ",
    "Bevilacqua": "Sprockets. Should I switch to webpacker?. Nothing in application.rb (at least not related). I just switched to version 2.2 and still having the issue.. ",
    "dklanac": "I'm seeing the same behavior.\n```\nconfig/environments/production.rb\nRails.application.configure do\n...\nconfig.react.variant = :production\nend\n``\nstill packages the development build when using sprockets/asset pipeline.. I've upgraded to 2.3.1. I'm going to give it another shot today.. After upgrading, I did a quick test in my local dev by changing the variant setting to:productionwithindevelopment.rb. I also clobbered my assets and cleared out mynode_modules` folder for good measure. \nI'm still rendering the development build after making these changes.\nEdit:\nI hardcoded the production variant within lib/react/rails/asset_variant.rb on line 21 and still receive the development build.\n@react_build = 'production'. Thanks for posting this @BookOfGreg. I'm still running into my issue. From what I can tell, here are the key differences from the example app that I see:\nMine || Example\n Browserify || Webpack\n react-rails (2.2.1) || 2.4.0\n* Rails 4.2  || Rails 5.1\nI'm running sprockets 3.7.1 too.\nMaybe there's a config setting that I'm missing with browserify that is there by default for webpack?. ",
    "boxofmattwire": "This is still happening, gem version 2.2.1. ",
    "abimaelmartell": "I was having the same issue, but it was because of browserify-rails with node_modules.. ",
    "fernandobrito": "I was also receiving the This page is using the development build of React. message on a Rails 4.2 project with react-rails (through the Asset Pipeline) that I am working on. \nAfter some debugging, I opened the source code on my browser on a rendered page and noticed that my app was loading React v15.6.1, while https://github.com/reactjs/react-rails/blob/master/VERSIONS.md claims that my version of react-rails should be React 16.x! I was like 'whaaat?'. \nGrepping 'React v15.6.1' on my gems folder made me realize that another gem I am using has React as dependency. On my Gemfile I found:\nsource 'https://rails-assets.org' do\n  gem 'rails-assets-react-bootstrap', '~> 0.31'\nend\nThis gem required rails-assets-react (15.6.1), so when I added //= require react on my application.js, I was actually loading rails-assets-react, and not react-rails!\nBut I'm not sure how to solve it. Is there a way to specify from where Sprockets should load the file when I //= require react? \n@dklanac maybe you can also check if you have a similar problem (another gem loading another version of React).. ",
    "mpantel": "Hi there i am having the same problem, using reactjs (react-rails 2.4.7) through rails asset pipeline\nI found that i must have:\nruby\nconfig.after_initialize do\n      config.assets.paths = config.assets.paths - \n           config.assets.paths.select {|e| e.to_s =~ /lib\\/assets\\/react-source\\/development/}\n end if Rails.env.production?\nin config/application.rb in order to get production variant in production...\nThis might be,because even in production you gets react-source/development and react-source/production in assets path and the first gets precedence...\nanyway, lib/assets/react-source/development should not exist as an asset path in production.... ",
    "asaletnik": "Just added the PR :). @chrismv48 - I had similar issue, check #716. \nI guess we'll have to wait until @rmosolgo releases updated gem.\nUntil then gem 'react-rails', git: 'https://github.com/react/react-rails' should also help.. It might be related to the #718 I have added before.. ",
    "bhgames": "Yeah, this was happening to me too. I found resetting the rails server fixed it. Thanks for discovering this, look forward to the PR being merged.. Yep this is it.. ",
    "chrismv48": "@rmosolgo that worked, thanks! Not sure why the generator didn't work.... ",
    "mike-bhs": "@rmosolgo when this issue will be fixed?\nIt totally slows development with rails 4.2. ",
    "maaris": "any news on this? :sob: . ",
    "a-x-": "var PropTypes = require('prop-types')\nand do not use validator functions\nsee also\nhttps://github.com/facebook/prop-types/blob/master/README.md#difference-from-reactproptypes-dont-call-validator-functions. Thank you so much!\nI'll try it soon. ",
    "buck3000": "I also want to know the answer to this question.... ",
    "kyleramirez": "The second argument to require.context is whether or not to include subdirectories. I was able to get chunking working on my build, using the exact same configuration from the React Router 4 documentation. When you write componentRequireContext in a pack file, write:\ncomponentRequireContext = require.context(\"components\", false). Since you switched to webpacker, can you post your `server_rendering.js` file in `app/javascript/packs`?.\n",
    "tarla": "@rmosolgo so, if it's impossible, there's any way of switching from sprockets and adding the webpacker into a legacy sprockets project?\nactually, I've tried to revert all the install generators and afterwards re-install it from scratch using the webpacker gem, but it didn't work.. @dikey94 quite delayed but there we go:\nrecently I had the same issue and the best way I found so far was by using the Google Maps JS library as a regular HTML import (e.g.: <script src=[...] />) in my main erb template.\nafter that, I was able to query the google services in the client side through the global window object.. ",
    "kernow": "Humm, lots of failures :( it's really hard to test this change as most of the methods for the active support file watchers are private and it's not possible to get any information about which files have been added to the watch list without accessing private data which is not consistent across all of the available file watchers.\nThe only other option I can think of to test this is to create a mock file watcher object for the test.. @rmosolgo this is much happier now. I assumed that all the builds would be passing on travis (before my changes) but it looks like there are several test that have not been passing on master. Is there anything else you want me to do on the PR?. Good point, I'd forgotten about the file extension. Although some of the tests are passing and they passed locally which is odd as you would expect it not to pass at all. I'll check it out. ",
    "Tonkpils": "Disregard, I had to make sure to use the javascript_pack_tag on the layout...sorry about this!. ",
    "km-tr": "Encountered error \"#<ExecJS::ProgramError: Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in.>\" when prerendering initalizer with {}\ninvariant (eval at <anonymous> ((execjs):113:1), <anonymous>:44:15)\ninstantiateReactComponent (eval at <anonymous> ((execjs):727:1), <anonymous>:74:23)\neval (eval at <anonymous> ((execjs):2098:1), <anonymous>:44:31)\nReactServerRenderingTransaction.TransactionImpl.perform (eval at <anonymous> ((execjs):500:1), <anonymous>:140:20)\nrenderToStringImpl (eval at <anonymous> ((execjs):2098:1), <anonymous>:43:24)\nObject.renderToString (eval at <anonymous> ((execjs):2098:1), <anonymous>:73:10)\nObject.ReactRailsUJS.serverRender (eval at <anonymous> ((execjs):1299:1), <anonymous>:70:42)\n(execjs):6:45\n(execjs):18:13\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/execjs-2.6.0/lib/execjs/ruby_racer_runtime.rb:36:in `rescue in block in eval'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/execjs-2.6.0/lib/execjs/ruby_racer_runtime.rb:33:in `block in eval'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/execjs-2.6.0/lib/execjs/ruby_racer_runtime.rb:75:in `block in lock'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/execjs-2.6.0/lib/execjs/ruby_racer_runtime.rb:73:in `Locker'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/execjs-2.6.0/lib/execjs/ruby_racer_runtime.rb:73:in `lock'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/execjs-2.6.0/lib/execjs/ruby_racer_runtime.rb:32:in `eval'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/server_rendering/exec_js_renderer.rb:39:in `render_from_parts'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/server_rendering/exec_js_renderer.rb:20:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/server_rendering/bundle_renderer.rb:40:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/server_rendering.rb:27:in `block in render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:64:in `block (2 levels) in with'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:63:in `handle_interrupt'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:63:in `block in with'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:60:in `handle_interrupt'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/connection_pool-2.2.0/lib/connection_pool.rb:60:in `with'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/server_rendering.rb:26:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/rails/component_mount.rb:67:in `prerender_component'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/rails/component_mount.rb:35:in `block in react_component'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/helpers/capture_helper.rb:38:in `block in capture'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/helpers/capture_helper.rb:202:in `with_output_buffer'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/helpers/capture_helper.rb:38:in `capture'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/helpers/tag_helper.rb:106:in `content_tag'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/rails/component_mount.rb:50:in `react_component'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/rails/view_helper.rb:21:in `react_component'\n/Users/hoge/app/views/layouts/application.html.slim:11:in `_app_views_layouts_application_html_slim__951109991081902243_70133737008560'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/template.rb:145:in `block in render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/notifications.rb:164:in `block in instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/notifications.rb:164:in `instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/template.rb:333:in `instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/template.rb:143:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-mini-profiler-0.10.1/lib/mini_profiler/profiling_methods.rb:102:in `block in profile_method'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/renderer/template_renderer.rb:66:in `render_with_layout'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/renderer/template_renderer.rb:52:in `render_template'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/renderer/template_renderer.rb:14:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/renderer/renderer.rb:42:in `render_template'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/renderer/renderer.rb:23:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/rendering.rb:100:in `_render_template'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/streaming.rb:217:in `_render_template'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/rendering.rb:83:in `render_to_body'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/rendering.rb:32:in `render_to_body'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/renderers.rb:37:in `render_to_body'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/jpmobile-4.2.0/lib/jpmobile/hook_action_controller.rb:24:in `render_to_body_with_jpmobile'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/abstract_controller/rendering.rb:25:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/rendering.rb:16:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/instrumentation.rb:44:in `block (2 levels) in render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/core_ext/benchmark.rb:12:in `block in ms'\n/Users/hoge/.anyenv/envs/rbenv/versions/2.3.1/lib/ruby/2.3.0/benchmark.rb:308:in `realtime'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/core_ext/benchmark.rb:12:in `ms'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/instrumentation.rb:44:in `block in render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/instrumentation.rb:87:in `cleanup_view_runtime'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activerecord-4.2.5/lib/active_record/railties/controller_runtime.rb:25:in `cleanup_view_runtime'\n/Users/hoge/vendor/bundle/ruby/2.3.0/bundler/gems/elasticsearch-rails-aa659145f886/elasticsearch-rails/lib/elasticsearch/rails/instrumentation/controller_runtime.rb:20:in `cleanup_view_runtime'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/instrumentation.rb:43:in `render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/meta-tags-2.1.0/lib/meta_tags/controller_helper.rb:26:in `render_with_meta_tags'\n/Users/hoge/vendor/bundle/ruby/2.3.0/bundler/gems/view_object-15f11641b527/lib/view_object.rb:25:in `block in render_with_before_render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:117:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:555:in `block (2 levels) in compile'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:505:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:92:in `__run_callbacks__'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:778:in `_run_render_callbacks'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/Users/hoge/vendor/bundle/ruby/2.3.0/bundler/gems/view_object-15f11641b527/lib/view_object.rb:24:in `render_with_before_render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/implicit_render.rb:10:in `default_render'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/implicit_render.rb:5:in `send_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/abstract_controller/base.rb:198:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/rendering.rb:10:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/abstract_controller/callbacks.rb:20:in `block in process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:117:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:555:in `block (2 levels) in compile'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:505:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:498:in `block (2 levels) in around'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:313:in `block (2 levels) in halting'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/react-rails-2.2.0/lib/react/rails/controller_lifecycle.rb:31:in `use_react_component_helper'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:432:in `block in make_lambda'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:312:in `block in halting'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:497:in `block in around'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:505:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:92:in `__run_callbacks__'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:778:in `_run_process_action_callbacks'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/abstract_controller/callbacks.rb:19:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/rescue.rb:29:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/instrumentation.rb:32:in `block in process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/notifications.rb:164:in `block in instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/notifications/instrumenter.rb:20:in `instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/notifications.rb:164:in `instrument'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/instrumentation.rb:30:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/params_wrapper.rb:250:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activerecord-4.2.5/lib/active_record/railties/controller_runtime.rb:18:in `process_action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/abstract_controller/base.rb:137:in `process'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionview-4.2.5/lib/action_view/rendering.rb:30:in `process'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-mini-profiler-0.10.1/lib/mini_profiler/profiling_methods.rb:102:in `block in profile_method'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal.rb:196:in `dispatch'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal/rack_delegation.rb:13:in `dispatch'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_controller/metal.rb:237:in `block in action'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/routing/route_set.rb:76:in `dispatch'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/routing/route_set.rb:45:in `serve'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/journey/router.rb:43:in `block in serve'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/journey/router.rb:30:in `each'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/journey/router.rb:30:in `serve'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/routing/route_set.rb:817:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/bullet-5.1.0/lib/bullet/rack.rb:10:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/jquery-fileupload-rails-0.4.7/lib/jquery/fileupload/rails/middleware.rb:14:in `_call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/jquery-fileupload-rails-0.4.7/lib/jquery/fileupload/rails/middleware.rb:10:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/rack/agent_hooks.rb:30:in `traced_call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/rack/browser_monitoring.rb:32:in `traced_call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/warden-1.2.4/lib/warden/manager.rb:35:in `block in call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/warden-1.2.4/lib/warden/manager.rb:34:in `catch'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/warden-1.2.4/lib/warden/manager.rb:34:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/etag.rb:24:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/conditionalget.rb:25:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/head.rb:13:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/params_parser.rb:27:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/jpmobile-4.2.0/lib/jpmobile/rack/mobile_carrier.rb:13:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/flash.rb:260:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/session/abstract/id.rb:225:in `context'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/session/abstract/id.rb:220:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/cookies.rb:560:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activerecord-4.2.5/lib/active_record/query_cache.rb:36:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activerecord-4.2.5/lib/active_record/connection_adapters/abstract/connection_pool.rb:653:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activerecord-4.2.5/lib/active_record/migration.rb:377:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:88:in `__run_callbacks__'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:778:in `_run_call_callbacks'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/callbacks.rb:81:in `run_callbacks'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/callbacks.rb:27:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/reloader.rb:73:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/remote_ip.rb:78:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/better_errors-2.1.1/lib/better_errors/middleware.rb:84:in `protected_app_call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/better_errors-2.1.1/lib/better_errors/middleware.rb:79:in `better_errors_call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/better_errors-2.1.1/lib/better_errors/middleware.rb:57:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/web-console-3.0.0/lib/web_console/middleware.rb:27:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-dev-mark-0.7.5/lib/rack/dev-mark/middleware.rb:19:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/railties-4.2.5/lib/rails/rack/logger.rb:38:in `call_app'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/railties-4.2.5/lib/rails/rack/logger.rb:20:in `block in call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/tagged_logging.rb:68:in `block in tagged'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/tagged_logging.rb:26:in `tagged'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/activesupport-4.2.5/lib/active_support/tagged_logging.rb:68:in `tagged'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/railties-4.2.5/lib/rails/rack/logger.rb:20:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/quiet_assets-1.1.0/lib/quiet_assets.rb:27:in `call_with_quiet_assets'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/request_store-1.3.0/lib/request_store/middleware.rb:9:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/request_id.rb:21:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/methodoverride.rb:22:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/runtime.rb:18:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/lock.rb:17:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/actionpack-4.2.5/lib/action_dispatch/middleware/static.rb:116:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/sendfile.rb:113:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-cors-0.4.0/lib/rack/cors.rb:80:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-mini-profiler-0.10.1/lib/mini_profiler/profiler.rb:278:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/railties-4.2.5/lib/rails/engine.rb:518:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/railties-4.2.5/lib/rails/application.rb:165:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/newrelic_rpm-3.15.1.316/lib/new_relic/agent/instrumentation/middleware_tracing.rb:96:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/lock.rb:17:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/content_length.rb:15:in `call'\n/Users/hoge/vendor/bundle/ruby/2.3.0/gems/rack-1.6.5/lib/rack/handler/webrick.rb:88:in `service'\n/Users/hoge/.anyenv/envs/rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service'\n/Users/hoge/.anyenv/envs/rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run'\n/Users/hoge/.anyenv/envs/rbenv/versions/2.3.1/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread'. Excuse me. The cause of the error was elsewhere.\nIf I ceased to use import in the files incomponents, then the error ceased.\n// import React from 'react'\n\u2193\nvar React = require(\"react\")\nWhen trying with a another new application, even if I used import, it worked,\nIt may be due to my .babelrc setting.\n```\n{\n  \"presets\": [\n    [\"env\", {\n      \"modules\": false,\n      \"targets\": {\n        \"browsers\": \"> 1%\",\n        \"uglify\": true\n      },\n      \"useBuiltIns\": true\n    }],\n    \"react\",\n    \"stage-1\"\n  ],\n\"plugins\": [\n[\"module-alias\",\n      [\n        .....\n      ]\n    ],\n    \"syntax-dynamic-import\",\n    \"transform-decorators-legacy\",\n    \"transform-class-properties\"\n  ]\n}\n``. We have already added it toyarn. The cause of this time is in another part because it useswindow`.. ",
    "SebAshton": "@km-tr I had the same issue, and found the source of the error to be the auto-generated presets in the .babelrc\nI went from when you have above to:\njavascript\n...\n  \"presets\": [\n    [\n      \"env\",\n      {\n        \"modules\": false,\n        \"targets\": {\n          \"browsers\": \"> 1%\",\n          \"uglify\": true\n        },\n        \"useBuiltIns\": true\n      }\n    ],\n    \"react\",\n    \"es2015\",\n    \"stage-0\"\n  ],\n...\nYou'll need to also yarn add babel-preset-stage-0 babel-preset-es2015 --dev\nI was then able to use imports etc as normal. ",
    "RiccardoMargiotta": "I've always found the naming of these directories confusing - what are packs, anyway? \ud83d\ude03 \nIn the main project I work on, we went with:\nassets\n  |-- javascript\n     |-- components\n        |-- (all our React components)\n     |-- entries\n        |-- application.js\n        |-- server_rendering.js\n     |-- lib\n        |-- (utility files like event emitters or window scrolling)\nThat's been working pretty well for us. We pass entries to Webpacker as the source_entry_path, and ESLint is set to check only the components directory.. I managed to get this working on our main project by stopping the server_rendering.js file from being chunked.\nWe're using fairly standard setups for webpacker and react-rails, with application.js and server_rendering.js entry points. I began by using the Webpacker example for setting up the CommonChunksPlugin (https://github.com/rails/webpacker/blob/master/docs/webpack.md#add-common-chunks):\n```js\nconst { environment } = require('@rails/webpacker');\nconst webpack = require('webpack')\nenvironment.plugins.append(\n  'CommonsChunkVendor',\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'vendor',\n    minChunks: (module) => {\n      // this assumes your vendor imports exist in the node_modules directory\n      return module.context && module.context.indexOf('node_modules') !== -1\n    }\n  })\n)\nenvironment.plugins.append(\n  'CommonsChunkManifest',\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'manifest',\n    minChunks: Infinity\n  })\n)\nmodule.exports = environment;\n```\nI set the first chunk to only run on the application entry point, thereby ignoring server_rendering.\nThen I set the second chunk (which extracts the Webpack runtime) to only run on the chunk called vendor we just created - effectively again ignoring server_rendering, because it didn't get chunked out to vendor.\nSo I wound up with:\n```js\nconst { environment } = require('@rails/webpacker');\nconst webpack = require('webpack');\nenvironment.plugins.append(\n  'CommonsChunkVendor',\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'vendor',\n    minChunks: module => {\n      return module.context && module.context.includes('node_modules');\n    },\n    chunks: ['application']\n  })\n);\nenvironment.plugins.append(\n  'CommonsChunkManifest',\n  new webpack.optimize.CommonsChunkPlugin({\n    name: 'manifest',\n    minChunks: Infinity,\n    chunks: ['vendor']\n  })\n);\nmodule.exports = environment;\n```\nIn application.html.erb, we now load three JS files on the client side:\n<%= javascript_pack_tag \"manifest.js\" %>\n  <%= javascript_pack_tag \"vendor.js\" %>\n  <%= javascript_pack_tag \"application.js\" %>\nHope that helps! For reference, I ran bin/webpack --display-entrypoints for more detailed output:\nAsset       Size  Chunks                    Chunk Names\n              vendor-e5362835eab5e8423e38.js    1.09 MB       0  [emitted]  [big]  vendor\n         application-369071402e939381b3b2.js     1.1 MB       1  [emitted]  [big]  application\n    server_rendering-7b68441c3dc38a040cd3.js    2.19 MB    2, 0  [emitted]  [big]  server_rendering\n            manifest-92c7bc2fbbeb9c585893.js    5.97 kB       3  [emitted]         manifest\n          vendor-e5362835eab5e8423e38.js.map    1.23 MB       0  [emitted]         vendor\n     application-369071402e939381b3b2.js.map     674 kB       1  [emitted]         application\nserver_rendering-7b68441c3dc38a040cd3.js.map     1.9 MB    2, 0  [emitted]         server_rendering\n        manifest-92c7bc2fbbeb9c585893.js.map    6.02 kB       3  [emitted]         manifest\n                               manifest.json  606 bytes          [emitted]\nEntrypoint application [big] = manifest-92c7bc2fbbeb9c585893.js manifest-92c7bc2fbbeb9c585893.js.map vendor-e5362835eab5e8423e38.js vendor-e5362835eab5e8423e38.js.map application-369071402e939381b3b2.js application-369071402e939381b3b2.js.map\nEntrypoint server_rendering [big] = server_rendering-7b68441c3dc38a040cd3.js server_rendering-7b68441c3dc38a040cd3.js.map\nSo you see application gets split into three, while server_rendering stays whole.. I should also mention that it was wingrunr21's post and gist that helped me get on the right track, so thanks for linking it, @BookOfGreg. \ud83d\ude03. A little update for those curious - since it's so small, I wound up inlining the contents of manifest.js in a script tag in the head of the page. That saves a request, so now I just request vendor.js and application.js client-side.. @jDeppen We never came up with a particularly elegant way of doing this, here's what it looks like on our project:\nruby\n<%= inline_js asset_pack_path \"manifest.js\" %>\nruby\nmodule AssetsHelper\n  def inline_js path\n    javascript_tag(File.read(File.join(Rails.root, 'public', asset_path(path))))\n  end\nend. @jDeppen Ah, we're not actually using sourcemaps, we've updated our webpack development.js and production.js configs to remove them. I'm not sure if you'd be able to get around that while still inlining the file.. You can nest components in your folder structure as you like:\n/components/\n  /home/\n    banner.js\n    footer.js\n<%= react_component \"home/banner\", {} %>\nIf you use Webpack, you can import libraries like import request from 'superagent'; and have everything bundled together into application.js.. @BookOfGreg \ud83d\ude04 . ",
    "dikey94": "anyone? . ",
    "thecodechemist": "I am also having this issue. Were you able to resolve this @libbyschuknight?. ",
    "libbyschuknight": "@kala-lee sorry no. We ended up not using react.. ",
    "keeross": "I tried to drop the version of Uglifier to 3.0.x, nothing. The I tried to drop version of React-Rails to 1.8.0, nothing.. So, the issue fixed.\nBasically problem was in cache, somehow react version on the client was not the last one, so after erasing assets cache and gems, everything works as it should.. ",
    "randyv12": "thanks, we can close this now, i'll just look forward to the changes and keep a close eye on the repo.\n  i found this earlier today, this is a gist that creates a separate config for client side and server side\nhttps://gist.github.com/jslatts/f9dec699e8fd853590f520f62d5bf21a. Thank you guys!!. @AshrafLobo , javascript_pack_tag is a helper function from the Webpacker gem https://github.com/rails/webpacker/blob/master/lib/webpacker/helper.rb#L27\nyou can just use the javascript tag\nI'm not sure if it is recommended to wait for DOMContentLoaded before mounting react components or just placing the mount at the bottom of the page works.\nBut from my experience, yes we still need to react ujs mount components. ",
    "joeyparis": "Do we have any updates on this? This is a relatively recent problem for me that didn't affect me for the last couple of months (since ~August) but suddenly I am having the exact problem described in this issue.. @BookOfGreg,\nWhen I am using webpacker's webpack-dev-server to watch individual files for compiling I get the following error when calling the react_component function in rails with prerendering set to true: bad URI(is not URI?): http://0.0.0.0:8080http://0.0.0.0:8080/packs/server_rendering.js.\nI have traced the problem back to this line in the react-rails source code: https://github.com/reactjs/react-rails/blob/16503ee6243845e3a01a39d20f22cbadbc1f8c15/lib/react/server_rendering/webpacker_manifest_container.rb#L45\nThe problem is that the asset_path variable already includes the protocol and host_with_port values leading to the weird URI I get in the error above.\nI've found that if I manually edit webpacker's public/packs/manifest.json file and remove the leading host from each attribute react-rails works as expected.\nFrom this:\n{\n  \"Digital.svg\": \"http://0.0.0.0:8080/packs/Digital.svg\",\n  \"DirectMail.svg\": \"http://0.0.0.0:8080/packs/DirectMail.svg\",\n  \"Email.svg\": \"http://0.0.0.0:8080/packs/Email.svg\",\n  \"application.css\": \"http://0.0.0.0:8080/packs/application.css\",\n  \"application.js\": \"http://0.0.0.0:8080/packs/application.js\",\n  \"loading.gif\": \"http://0.0.0.0:8080/packs/loading.gif\",\n  \"loading.svg\": \"http://0.0.0.0:8080/packs/loading.svg\",\n  \"rocket.svg\": \"http://0.0.0.0:8080/packs/rocket.svg\",\n  \"server_rendering.css\": \"http://0.0.0.0:8080/packs/server_rendering.css\",\n  \"server_rendering.js\": \"http://0.0.0.0:8080/packs/server_rendering.js\"\n}\nTo this:\n{\n  \"Digital.svg\": \"/packs/Digital.svg\",\n  \"DirectMail.svg\": \"/packs/DirectMail.svg\",\n  \"Email.svg\": \"/packs/Email.svg\",\n  \"application.css\": \"/packs/application.css\",\n  \"application.js\": \"/packs/application.js\",\n  \"loading.gif\": \"/packs/loading.gif\",\n  \"loading.svg\": \"/packs/loading.svg\",\n  \"rocket.svg\": \"/packs/rocket.svg\",\n  \"server_rendering.css\": \"/packs/server_rendering.css\",\n  \"server_rendering.js\": \"/packs/server_rendering.js\"\n}\nHowever, this requires manually editing the file each time I restart webpack-dev-server.\n\nI am using webpacker 3.0.2 and react-rails 2.4.0.\n\nRunning your provided example returned the following with webpack-dev-server running:\n$ ASSET_HOST=https://example.com rails c\n[...]\nLoading development environment (Rails 5.1.4)\n2.3.1 :001 > helper.javascript_pack_tag 'application.js'\n => \"<script src=\\\"http://0.0.0.0:8080/packs/application.js\\\"></script>\"\n2.3.1 :002 > Webpacker.manifest.lookup('application.js')\n => \"http://0.0.0.0:8080/packs/application.js\"\nand the following without webpack-dev-server running:\n$ ASSET_HOST=https://example.com rails c\n[...]\nLoading development environment (Rails 5.1.4)\n2.3.1 :001 > helper.javascript_pack_tag 'application.js'\nCompiling\u2026\nCompiled all packs in /Users/Joey/Sites/LeadJig/public/packs\n => \"<script src=\\\"/packs/application.js\\\"></script>\"\n2.3.1 :002 > Webpacker.manifest.lookup('application.js')\n => \"/packs/application.js\". Great to hear! Thanks for the quick reply.\nLet me know if there's any more information I can provide. I'm happy to help you with debugging and testing in my environment if you need anything.. Let me see what I can do. I won't be working on this project again until Monday morning, but that's not to say I can't set aside some time this weekend to create a PR for the gem. I can certainly implement a crude check like that pretty quickly until a more elegant solution can be found. I'll keep you updated!. Didn't get a chance to tackle this issue this weekend, but going to get started on it now. Should have a PR here shortly.. I've created a crude but quick and easy solution!\n```ruby\nLine 41\ndef find_asset(logical_path)\n  asset_path = Webpacker.manifest.lookup(logical_path).to_s\n  if Webpacker.dev_server.running?\n    ds = Webpacker.dev_server\n    # Remove the protocol and host from the asset path. Sometimes webpacker includes this, sometimes it does not\n    asset_path.slice!(\"#{ds.protocol}://#{ds.host_with_port}\")\n    dev_server_asset = open(\"#{ds.protocol}://#{ds.host_with_port}#{asset_path}\").read\n    dev_server_asset.sub!(CLIENT_REQUIRE, '//\\0')\n    dev_server_asset\n  else\n    File.read(file_path(logical_path))\n  end\nend\n```\nMy solution was simply to remove the protocol and host/port from loaded asset path. If the protocol and host/port aren't included nothing will change, and if they are included they will be removed so that when they are added in the open they aren't duplicated. I hope you find this solution satisfactory.\nI have submitted Pull Request #834\n. ",
    "f6v": "@rmosolgo thanks for replying! I've changed the extension, but still have the same issue. Is there some additional steps I have to do in terms of setup? Do I have to mount components manually with react_ujs? . ",
    "swrobel": "I noticed you have another issue about ReactRailsUJS.mountComponents() not running automatically. I have the same issue, but after I run it, the React DevTools work fine. Is that the same for you?. I'm having the same issue - components don't mount until I manually run ReactRailsUJS.mountComponents(). I am using Jquery only and don't have any console errors. Why not use the test keyword? Rails still recommends it in their edgeguides and says the following: \"Although you can still use regular method definitions, using the test macro allows for a more readable test name.\". Seems like you might've messed up the indentation here. ",
    "arkes": "I'm having the same issue too.. ",
    "ledes": "Same here. Why is this happening? Is there a quick fix?. @swrobel How do you call ReactRailsUJS.mountComponents() manually.\nWhen I added to my index.html.erb like this, I got ReactRailsUJS is not defined\n<script>\n  ReactRailsUJS.mountComponents()\n</script>\n. I think I fixed my issue.\nIn my case my controller was \nclass StatisticsController < ActionController::Base\ninstead of\nclass StatisticsController < ApplicationController\n. ",
    "cmavromoustakos": "I have been seeing the same behavior using \ngem 'react-rails', '~> 2.2', '>= 2.2.1'.\n",
    "xdavipereira": "I'm also having the same behavior, using this same version\ngem 'react-rails', '>= 2.2.1'. In the app/javascript/packs/application.js file there is comment about adding to the application layout file like app/views/layouts/application.html.erb\nthe following code: \n<%= javascript_pack_tag 'application' %>\ni added to my layout file and my component worked well\nWas my lack of attention, but I think a mention in the installation guides about adding <% = javascript_pack_tag 'application'%>\n to the layout file of the application would be interesting, even though it is obvious something =)\n. ",
    "sidot3291": "I'm having trouble with this as well.  Putting a javascript_pack_tag in the layout works, but it's not ideal if you simply want to render a react component inline on a page.\nFor now, I've defined a separate layout with the pack tag for the pages of my app that use a React component, but I would prefer to get the react_component helper working.  . ",
    "AshrafLobo": "I have the same problem but the javascript_pack_tag fix doesn't work for me. I get this error\nundefined methodjavascript_pack_tag' for #<#:0x007fecce4be868>\nDid you mean?  javascript_path\n               javascript_tag`. ",
    "Deekor": "I've noticed this is a problem only when I have any version of jQuery required in my application.js\nEdit: Looks like if I move the jQuery require below //= require components it works.\n. @lasernite is there a way to do it where I don't have to order the files?. @rmosolgo rails pipeline. My react component won't render if I have any version of jQuery required in my applications.js\nI tried \n\n//= require jquery\n//= require jquery2\n//= require jquery3\n\nMy component would only show if I didnt have a require for jQuery. I am seeing no errors in my console.. Looks like if I move the jQuery require below //= require components it works.. Thanks! This is only my second time using React and the first was with the asset pipeline. Thanks for answering a noob question.. hmmm after fiddling with it for about a half hour I finally took to the failsafe and rebooted my machine. It's working now of course.... ",
    "xorsnn": "Placing <% = javascript_pack_tag 'application'%> at the end of the \"body\" block worked for me.. ",
    "hansololai": "I dig through the code a little and found out react-ujs assigned the function handleMount with the jQuery ready event if query exist. But the ready event was not fired for some reason. So just like @Deekor  did, move the require for jQuery below, then the ujs will not use the jQuery ready event, but use the DOMContentLoaded event. . ",
    "duckworth": "Ran into this as well and it was due to jquery3 removing .on(\"ready\", fn) that react_ujs is binding to.\nhttps://jquery.com/upgrade-guide/3.0/#breaking-change-on-quot-ready-quot-fn-removed\nThere is an open issue for jQuery 3 here: https://github.com/reactjs/react-rails/issues/762. I just tested with 2.4.4 and can confirm that I no longer need to manually call ReactRailsUJS.mountComponents()\nThanks!. ",
    "xiobot": "Hey, I had this issue and I can confirm removing JQUERY fixed the problem.\nFor reference I was using JQUERY version 3.2.1 via a script in application.html.erb\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\nUsing this version of JQUERY causes my react render methods to fail.\nFor anyone looking for a solution, you can use version 2.2.4 instead\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>\n  . ",
    "apuntovanini": "Same issue here, can it be used without Turbolinks? Our app extensively use react-router, that conflicts with Turbolinks, would go for disabling the latter, but breaks page loading. We're calling mountComponents() manually as well, but nothing happens\nThanks. Can we make a PR on this? @reactjs\n. ",
    "timomeh": "You have to bind own methods, so this is referenced correctly.\n```js\nclass App extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = { isModalOpen: true }\n    this.openModal = this.openModal.bind(this)\n    this.closeModal = this.closeModal.bind(this)\n}\n\n// ...\n\n```\nThis is not specific to Rails or React, see https://facebook.github.io/react/docs/handling-events.html:\n\nYou have to be careful about the meaning of this in JSX callbacks. In JavaScript, class methods are not bound by default. If you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.\nThis is not React-specific behavior; it is a part of how functions work in JavaScript. Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method.\n\n. I use it with the asset pipeline, too, and it works just fine with the code example above. I don't do server side rendering, but that shouldn't have an effect on that.. @AmaniSalah Sure. Could you please explain your problem a little bit more in detail? What should happen, but what's happening instead? What's not working?\nAccording to your code, each time HelloWorld is rendered, it should print the button was clicked Hi to the console. If the Button is clicked, it should log the button was clicked { SyntheticEvent ... }.\nYou aren't using this inside your test-method, so I don't see how binding is a problem.. This doesn't sound like a problem with method binding. You only need .bind(this) if you're using this inside your test-method.\nHowever, I tested your code example and it worked just fine for me. The log was called each time I pressed the button.\nIf the onClick prop is missing on your button (you could also check that using React DevTools), it seems like an issue with your setup.. If React DevTools doesn't detect the React App, and the button click is not triggered, it sounds like you're only doing server-side rendering, and the browser isn't actually running your JS code.\nRegarding to the log of b you posted, was is logged to the browsers console, or to your terminal output? The format you posted looks a bit unfamiliar.\nDo you have maybe some custom webpack config or other specific configuration in your project? I tired it with a clean install with webpacker and react-rails, which worked, so your problem seems specific to your environment.. Hummm, that sounds very strange. It's very weird that React DevTools doesn't recognize the React App (which would indicate server-side-rendering), but the log is still shown in the browsers console (which indicates client-side-rendering).\nYou could check if there's a newer version of webpacker, react-rails, etc you can update to. Also you could compare if you have some custom webpack config, which could cause this (for example compare config/webpack/*.js and config/webpacker.yml with your fresh rails app).\nIt also doesn't hurt to do the good old rm -rf node_modules && yarn install, just in case.\nI don't have any other ideas which could cause this strange behavior. \ud83d\ude41 . ",
    "mcr431": "@timomeh Thanks for the response. I should have read more carefully. For some reason, even after I add those bindings, it still doesn't work. This is in use via the asset pipeline and server-side rendering. Could that have anything to do with it?. @AmaniSalah This was quite a while ago and I don't remember if/how I addressed it. In the long term I had ended up just making a SPA that hit a Rails API. Sorry that's not much help. Good luck!. ",
    "AmaniSalah": "@mcr431 I'm having the same issue, were you able to fix it ?\nThis is my code: \n```javascript\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nclass HelloWorld extends React.Component {\nconstructor(props) {\n      super(props)\n      this.test = this.test.bind(this);\n  }\ntest(ev){\n       console.log('the button was clicked ', ev);\n  }\nrender () {\n    this.test(\"Hi\");\n    var b = Click me;\nreturn (\n  b\n);\n\n}\n}\nexport default HelloWorld\n```\nThis is how I render it\nruby\nActiveAdmin.register_page \"Calendar\" do\n  content do\n    # render plain: \"Test text\"\n    link_to \"test_page_action\", calendar_test_page_action_path\n  end\n  page_action :test_page_action, method: :get do\n    # ...\n    render component: 'HelloWorld'\n  end\nend. thanks @mcr431 \n@BookOfGreg @timomeh can anyone help with this ? . @timomeh the issue is that onClick action is not attached to the button, so only the button was clicked Hi is logged, but nothing happens when I click the button.\nactually when I log the button b I get this as its props, and no onClick action attached to it.\nprops : children : \"Click me\" id : \"678\" type : \"button\". @timomeh  it seems I didn't correctly understand the question. \nthanks for your answer, I'm already using React DevTools, but it doesn't detect react running in my rails app.\nBy the setup, do you mean the rails project setup ? do you have an idea what could affect the props like that ?. @timomeh it's logged in the browser console. nothing from reactjs is logged in the terminal.\ndon't I need to set some configuration for the server-side rendering to work ? I did not add any extra configs in config/application.rb\nI tried the same steps with a fresh rails app and it's working, so I'm not sure what's the problem with my current rails app.. ",
    "punitcse": "@AmaniSalah @timomeh @mcr431  I also had the same issue when using onChange event and using server-side rendering. \nmy code is \n```\nclass TaskForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  };\nhandleInputChange(event) {\n    const target = event.target;\n    const name   = target.name;\nthis.setState({\n  [name]: target.value\n});\nconsole.log(this.state);\n\n}\nrender() {\n    console.log(this)\n    console.log(\"up\")\n    return (\n      \n\n\n\nTask name\n\n\n\n\n     )\n   }\n}\n```\nI think the issue come with rendering the js response. I was rendering the response something like\n$(\"#modal\").html(\"<%= render :partial => 'form', :locals => {:task => @task} %>\");\nand in form I was writing the react-rails helper for rendering the component\n```\n<%= react_component('TaskForm', {title: 'Hello World'}, prerender: true) %>\n``\nThe onChange event work when I directly renders a html page and use helperreact_component` but not with js response. Any idea why is it so?. ",
    "vNNi": "I solve that putting in call of component like this \n= react_component(\"FooterApp\",prerender: true,trace:true, serverSide:false)\nwith these keys and reload browser with cleaning cache. ",
    "ikanade": "I am facing this same issue. Have you found any workaround? . ",
    "thejamespinto": "@BookOfGreg can you tell us what the recommended versions of this gem are to the latest versions of Rails?\nI'm facing the exact same on a Rails 4.2 app.\nIf this is in fact the problem. Could we add a small table on the readme page for version matching so people can look up? I'd be happy to help adding the PR, but I don't have the content.. It looks like it's not loading that variable in a specific context\n\n\nI wish there was more I could do.. I wish :(\nThe solution I found was to use an older version of the gem.\ngem 'react-rails', '1.4.2' works with gem 'rails', '4.2.7'\nThat's all I can safely guarantee.\nUnfortunately, the application I am working with cannot be upgraded right now, and that's true for many rails apps out there.\n@BookOfGreg I really think this is one of those projects that require a compatibility table for this exact reason. Thank you for maintaining it up-to-date. \u2764\ufe0f . @BookOfGreg I'm part of a sad minority here because I'm using an old version of Rails and I want to add ReactJS to my project before upgrading Rails.\nTo be completely honest, I have already solved my compatibility issue by installing an older version and adding a future task for when upgrading Rails, and I could be out of this conversation already, but I know there are a lot of developers out there who would not take such precautions.\nI think it is important to find a way to help them because that increases the adoption of ReactJS within the Rails community. So here's a suggestion:\nHow about not changing the gem specs, but instead running a short script when the gem is required/initialized that verifies inconsistencies and outputs suggestions?\nI don't think anybody can write it spot-on the first time around, but that would help cater a self-fixing aspect feature from the community feedback.\nI'd be happy to commit to patching this feature from three projects I have lined up to add ReactJS to.\nBest, James.. ",
    "jmarkbrooks": "Having an issue updating a Rails 4 app to Rails 5.  Seeing the problem where ReactDOM.render fails because ReactDOM isn't defined.  Part of this, is updating from 1.5.0 react-rails to 2.4.4 as part of updating a Rails 4.2 app to Rails 5.2.  Simply adding 'react-dom' to application.js fails because Sprockets doesn't believe it exists.  Any suggestions?. ",
    "mallen1080": "@inyigo I was having the same problem until I removed react_ujs from the asset pipline, and now I no longer get the error. @inyigo i did when i fixed the problem, but I don't anymore.  It seems like react_ujs is what react-rails uses to find the component specified in the react_component view helper.  So which ever bundle (asset pipeline vs webpacker) your top-level component lives in, you should be requiring react_url, and the other should be omitted, because it will look for the component and won't find it.. ",
    "inyigo": "@mallen1080 do you have components in assets/javascript/components ?. ",
    "prasanthrubyist": "Thank you @rmosolgo , It's fixed . ",
    "demedos": "@rmosolgo Yeah I did, the object is just as you see in the developer console in the screenshot above. Just one property \"archive\" with a single property \"url\".. Here it is anyway\n\n. The document.to_json returns the same data passed in the react_component, anyways I found the problem being Carrierwave overriding the to_json method, as stated here.\nSo, overriding the serializable_hash in the uploader class gives the desired result. I have modified mine as follows, and it's working as expected:\ndef serializable_hash(options = model) \n    {url: options.archive.url, identifier: options.archive_identifier, extension: options.archive.file.extension} \nend\nthanks for your support!. ",
    "lasernite": "Purging all the files added by rails generate react:install and then manually installing react and react_ujs with yarn add react and yarn add react_ujs, then adding \nvar componentRequireContext = require.context(\"components\", true)\nvar ReactRailsUJS = require(\"react_ujs\")\nReactRailsUJS.useContext(componentRequireContext)\nTo the app/javascript/application.js (which I found in another thread) and then creating a app/javascript/components directory and adding a file like Test.jsx with the contents\n```\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types'\nclass Test extends React.Component {\n  render() {\n    return Hello, {this.props.name};\n  }\n}\nexport default Test;\n``\nFinally allowed me to use the react-rails view-helper, like<%= react_component('Test', {name: \"Laser\"}) %>successfully. . Rails asset pipeline include things in alphabetical order. Assuming you're using that, rename your files, as currently \"st\" is after \"so\" but \"ac\" is before both. Alternatively, remove//= require_tree .fromapplication.jsand manually import your files in order. Also, you shouldn't need theexportin the rails asset pipeline version (that's for the webpacker version), as everything is packed to one file already inapplication.js` order.. @Deekor As far as I can surmise, if you're not using webpacker, you either have to properly order your files alphabetically (ex. prepending numbers or letters can work) or you have to manually import the files in order in application.js. . @Deekor But the real solution is, use webpacker. Otherwise you're also not going to be able to use other javascript packages easily. . ",
    "sebyx07": "use class names downcased\n<%= react_component('test', {name: \"Laser\"}) %>\nand you can nest them test/another. ",
    "koffeinfrei": "I had the same problem. Issuing spring stop resolved it.. ",
    "andrewcsmith": "Thanks for the quick reply!\nThat does not work. It changes the last error to \"Cannot find component: 'PerformanceRow.jsx'\" but otherwise it's the same. I also tried running PerformanceRow.jsx through babeljs.io and saving it to app/javascript/components/PerformanceRow.js but that didn't solve it either.. Yep \u2013 here's my Chrome console:\nwindow.componentRequireContext(\"./PerformanceRow.jsx\").default\n// -> function PerformanceRow() {\n//        _classCallCheck(this, PerformanceRow);\n//        [... more babel-compiled code...]. Oh, however, I do have to add the extension to get window.componentRequireContext to work.\nThe original error message from the helper is Cannot find module './PerformanceRow'., and when I try window.ComponentRequireContext(\"./PerformanceRow\") I get the exact same error message.\nThis leads me to believe that, somewhere, react-rails is translating react_component 'PerformanceRow' into a call to the module without any extension. When I try react_component 'PerformanceRow.jsx', it thinks that .jsx is a member of module PerformanceRow and still doesn't correct the filename. (That's just my assumption - might be something else of course.). I think requiring react_component \"MyComponent.jsx\" instead of just react_component \"MyComponent\" could run into confusion (thinking about people copy-pasting from tutorials, stackoverflow, etc), and probably will breed lots of little spammy issues. Is there a way to make react_component \"MyComponent\" find the .jsx file, so that (most) tutorial code would still work as-written?. Yep, that makes sense to me. In the call to reqctx, right?. Excellent! I've opened a PR #759 to fix this. This fix solves the issue on my local machine.\nI agree about the performance thing though. I'm not particularly savvy with js performance optimization, or with the react/webpack pipeline, so I'm not really the one to do that. But thanks for your help and I'm happy to test future things with this same app if needed.. I installed both at the same time, and didn't have either in the asset pipeline. In the original problem, react-rails was finding components with .js extensions, just not .jsx extensions. Wonder why that would do it.. ",
    "chrisjingram": "If you have this issue, and the above did not solve it, it may be because you previously installed react-rails to work with the rails asset pipeline, and then installed webpacker later. \nRemoving //= require react and //= require react_ujs from application.js or application.js.coffee fixed this for me. \nI'm assuming that having react and especially react_ujs in the asset pipeline meant that ReactRailsUJS was being set up to expect components also from the asset pipeline, and that setup was taking precedence over the webpacker setup.. ",
    "benbonnet": "so there we are!\nthx for spotting this awkwardness :/. ",
    "MindRave": "Oops, my bad! My bundle was using an old version of react-rails. Updated to the last version, everything worked like a charm! \u2764\ufe0f Thanks again for the great gem!. ",
    "kilimchoi": "It was because i didn't have the method binded and in the constructor I added super(props). After that, it worked.. ",
    "alain-andre": "I found why, it seems to be an es6 thing.\nI changed my call in app/javascripts/components/ItemList.js from import {Item} from './Item'; to var Item = require(\"./Item\"); and it's fine.. I understand why I couldn't find the code, it's a webpacker helper. I'm going to give a look there.. ",
    "alexanderisora": "Thanks @rmosolgo \nIn which directory should I do the npm install?. ",
    "mukarramali": "@kilimchoi  Hey how did you solved this?. ",
    "fresham": "I am also experiencing the same issue in my new Rails 5.1.3 app. I could make a test app to recreate it if that would help?. I believe this issue also reports the same bug: https://github.com/reactjs/react-rails/issues/775\nThere's a PR open that will fix that and similar issues with the API change if you'd like to help review: https://github.com/reactjs/react-rails/pull/777. ",
    "him0": "In my environment, I had fixed this error with replacing var to const. It looks like var hoisting causes this error.\njs\nconst componentRequireContext = require.context(\"components\", true)\nconst ReactRailsUJS = require(\"react_ujs\")\nReactRailsUJS.useContext(componentRequireContext). ",
    "Anle90": "rails g react:install is not working for me either. @rmosolgo I tried that, doesn't seem to work. Did you get it to work?. ",
    "ElishebaW": "Hey @Anle90, I had the same problem today. I followed the steps in https://github.com/reactjs/react-rails/issues/778 and it worked!!. This also has to be changed in \ncomponent_generator.rb\nto\nWebpacker.config.source_path\nto run \nrails g react:component\nor you'll get something like \nundefined method 'source_path' for Webpacker::Configuration:Class (NoMethodError)\n. ",
    "beaver1992": "Webpacker updated the manifest lookup API\nhttps://github.com/rails/webpacker/issues/726. ",
    "basicBrogrammer": "I'm not sure if this is related, but the component generator is putting my components in app/javascript/packs/components. To get this to work, I had to change the require context from 'components' to './components' \napp/javascript/packs/application.js\nvar componentRequireContext = require.context('./components', true')\nAnd also in my es6 components I have to require('../components/NameOfComponent') \nAny thoughts? . Using webpacker 3.0.1 Webpacker.config.source_entry_path worked for me \ud83d\udc4d \n. ",
    "tomwaddington": "Just ran into issue #778, and this fixed it for me. \ud83d\udc4d . ",
    "nonmadden": "\ud83d\udc4d . it works for me\n``` \nWebpacker.config.source_path.join(Webpacker.config.source_entry_path)\n```. ",
    "gaiapunk": "I'm still having the #778  issue and was wondering if this latest merge had been release to fix it or if there is a workaround on my end that I can do before a fix is released, thanks for all the work you do!. I'm still having this issue and was wondering if the latest merge fixed it or if there is a workaround on my end that I can do before a fix is released, thanks for all the work you do!. ",
    "benaubin": "The fix you suggested worked for me.. ",
    "vikash22292": "Going to close this issue, as this has been fixed with #777 . Thanks @BookOfGreg, for your great work to pass this on master.\nIf you guys get any issues, please feel free to re-open this.. All changes for request for #778 is already there in #777. I have suggested the changes over there. Please take a look into it.\n. I have suggested these changes in issue #778 .Please have a look into it. I was trying to install react with rails and failed to run react installer command. I look into gem and found that method calling is not proper. \nI fix this with minor changes in lib/generators/react/install_generator.rb file.\nsource_path is a instance method and was being called by class directly. Also entry_path was changed to source_entry_path in webpacker config. I have suggested these changes in #778 \nThe main purpose for issue was #778 was to elevate exact issue and its solution along with it, as there was no fix until that time.. Webpacker.config.source_entry_path is the correct way to call this, as this is defined in webpacker.. ",
    "dompstar": "Had the same issue, the current master branch fixed it.. ",
    "SemanticMike": "+1 for @BookOfGreg . ",
    "hrishimittal": "@rmosolgo Robert, thanks so much for all your amazing work. Good luck with the new job!. ",
    "tomasc": "@rmosolgo yes, I have a default webpacker react config (after running rails generate react:install). .jsx files that are not coming from the additional directory (ie 'engine/app/javascript') are transformed without any issues.. @BookOfGreg yes, although I follow the closing argument there and have solved the issue by making a a package.json in my engine for JS only and yarn add it to the main app as a package coming from private GitHub repo. You can then yarn link that package in your app for local development, and things work fine.\nI guess it's just a matter of having a clear convention for dealing with JS coming from engines.. @BookOfGreg , though the 'dumping' sounds awful ;-).\nGem's own package.json works just fine. One just needs to add a bit of config for webpack and build the JS per release, eventually push to NPM.\nIn the engine, my webpack.config.js looks like this (I am using CoffeeScript 2, you might want to alter the config for .jsx etc.):\n```js\nconst path = require('path');\nconst webpack = require('webpack')\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /.coffee$/,\n        use: ['babel-loader', 'coffee-loader']\n      }\n    ]\n  },\n  entry: './package/src/index.js',\n  output: {\n    library: '@tomasc/myengine',\n    libraryTarget: 'umd',\n    umdNamedDefine: true,\n    filename: 'index.js',\n    path: path.resolve(__dirname, 'package/dist')\n  },\n  resolve: {\n    extensions: ['.coffee', '.js']\n  }\n};\n```\nSo far I located all the JS under /package/src, but it might make more sense to pull the source directly from app/javascript \u2026\nThe package.json looks like this, basically:\njson\n{\n  \"name\": \"@tomasc/myengine\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\u2026\",\n  \"main\": \"package/dist/index.js\",\n  \"files\": [\n    \"package\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/tomasc/myengine.git\"\n  },\n  \"author\": \"\u2026\",\n  \"license\": \"\u2026\",\n  \"homepage\": \"\u2026\",\n  \"scripts\": {\n    \"build\": \"webpack\"\n  },\n  \"dependencies\": {\n    \"@rails/webpacker\": \"^3.0.1\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"coffee-loader\": \"^0.8.0\",\n    \"coffeescript\": \"^2.0.1\",\n    \"prop-types\": \"^15.5.10\",\n    \"react\": \"^15.6.1\",\n    \"react-dom\": \"^15.6.1\",\n    \"webpacker-react\": \"^0.3.2\"\n  },\n  \"devDependencies\": {\n    \"babel-preset-env\": \"^1.6.0\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"webpack-dev-server\": \"^2.8.2\"\n  }\n}\nYou can then yarn link this package to your app, ev. run yarn build --watch in the engine to have the code re-compiled on change for development.. @BookOfGreg will do, thanks!\nBTW I have another one for binding the react components to dom elements via JS MutationObserver \u2013\u00a0this solves all the module lookup (each module registers itself to be bound to a DOM element) and Turbolinks, pjax etc. issues. Will post an example later.. @BookOfGreg here it is:\nhttps://github.com/reactjs/react-rails/wiki/Using-JS-components-from-Rails-engines\nPlease feel free to update as you see fit.. thanks @BookOfGreg !. ",
    "rdjpalmer": "@BookOfGreg Do you know when you plan on releasing this?. @BookOfGreg ace, thanks for the heads up! Will let you know how it goes \ud83d\udc4d . ",
    "edelgado": "Thanks for looking into it @BookOfGreg! Having HMR work with react-rails would be a huge time saver for developers as it would cut down on the amount of full-page refreshes we need to do when working on a component. \nHere is an examples of HMR from from Dan himself: https://github.com/wkwiatek/react-hot-loader-minimal-boilerplate\nMore information can be found in http://gaearon.github.io/react-hot-loader/getstarted/. @BookOfGreg Also, this is a matching issue I created over at Webpacker, with some code hints from the authors there that may lead us in the right path: https://github.com/rails/webpacker/issues/872. ",
    "kkir": "Putting ReactRailsUJS.mountComponents() did the trick for me\njavascript\nif (module.hot) {\n  module.hot.accept('../src/App', () => {\n    ReactRailsUJS.mountComponents();\n  });\n}. ",
    "AirWick219": "I am fighting with the HMR as well .. I was wondering where are we supposed to put the following  code with respect too react-rails ?? is it in the javascript/packs/application.js  where ReactRailsUJS.useContext ?? or the highest level components ?\nif (module.hot) {\n  module.hot.accept('../src/App', () => {\n    ReactRailsUJS.mountComponents();\n  });\n}\n. I tried something like this but webpack-dev-serverd doesn't seem to like this and throw a bunch of warning \n```\njavascript/packs/application.js\nconst componentRequireContext = require.context('../components', true);\nconst ReactRailsUJS = require('react_ujs');\nReactRailsUJS.useContext(componentRequireContext);\nif (module.hot) {\n  module.hot.accept('../components', () => {\n    ReactRailsUJS.mountComponents();\n  });\n}\n. I think I got it working without those code and just webpacker .. I do see module hot swapping without refreshing however, ran into an issue of module looking for a hot-update.json file with the content-type of text/html that's not there which caused a page reload. \nSee this for more details.  https://github.com/rails/webpacker/issues/1375 . I am running into the same issue. I followed the getting started section but wasn't able to import modules from node_modules . Thank you so much. Ideally, I would not want include any of javascript runtime gems at all. . Btw ... It works if I don't removenode.js```  in the dockerfile .  It's less than ideal. But at least I don't have to include a extra gem. . Please close .. not sure what happened.. but it magically works now . ",
    "bishosilwal": "I got it working just adding hmr: true on dev_server in webpacker.yml.. ",
    "everaldo": "@bishosilwal , could you please give me more information on this?\nWere you able to preserve state?\nDid you just enabled hmr: true on dev_server in webpacker.yml or have you done more?\nThanks\n. ",
    "iamdriz": "@BookOfGreg Hi sorry, yeah for some reason I had the version set as 1.0 in the Gemfile so the Server Rendering wasn't even in the gem! So specifying 2.3.0 fixed it, however now I'm getting an issue with window not being referenced even though it's not used in any of my code or dependancies.. ",
    "anaumov": "@BookOfGreg, @rmosolgo thanks for quick response!\nYes, I can import these methods from react_ujs, but they don't allow me to stop listening for turbolinks:load event :(. hey, everyone! If someone looking for solution, it's pretty easy ReactRailsUJS has method removeEvent. You can stop listening for any event you like. For example render components on window load instead of turbolinks:render\njavascript\nReactRailsUJS.removeEvent('turbolinks:render', ReactRailsUJS.handleMount);\nReactRailsUJS.removeEvent('DOMContentLoaded', ReactRailsUJS.handleMount);\n$(window).on('load', function() {\n  ReactRailsUJS.handleMount();\n  ReactRailsUJS.detectEvents();\n}). ",
    "djvs": "There are a handful of differences - \n/config/webpacker.yml\n```                                           \ndefault: &default\n  source_path: app/javascript\n  source_entry_path: packs\n  public_output_path: packs\nextensions:\n    - .coffee\n    - .erb\n    - .js\n    - .jsx\n    - .ts\n    - .vue\n    - .sass\n    - .scss\n    - .css\n    - .png\n    - .svg\n    - .gif\n    - .jpeg\n    - .jpg\ndevelopment:\n  <<: *default\ndev_server:\n    host: 0.0.0.0\n    port: 8080\n    https: false\ntest:\n  <<: *default\npublic_output_path: packs-test\nproduction:\n  <<: *default\n```\n/config/webpack/configuration.js\n```\n// Common configuration for webpacker loaded from config/webpacker.yml                                                      \nconst { join, resolve } = require('path')\nconst { env } = require('process')\nconst { safeLoad } = require('js-yaml')\nconst { readFileSync } = require('fs')\nconst configPath = resolve('config', 'webpacker.yml')\nconst loadersDir = join(__dirname, 'loaders')\nconst settings = safeLoad(readFileSync(configPath), 'utf8')[env.NODE_ENV]\nfunction removeOuterSlashes(string) {\n  return string.replace(/^\\//, '').replace(/\\/$/, '')\n}\nfunction formatPublicPath(host = '', path = '') {\n  let formattedHost = removeOuterSlashes(host)\n  if (formattedHost && !/^http/i.test(formattedHost)) {\n    formattedHost = //${formattedHost}\n  }\n  const formattedPath = removeOuterSlashes(path)\n  return ${formattedHost}/${formattedPath}/\n}\nconst output = {\n  path: resolve('public', settings.public_output_path),\n  publicPath: formatPublicPath(env.ASSET_HOST, settings.public_output_path)\n}\nmodule.exports = {\n  settings,\n  env,\n  loadersDir,\n  output\n}\n```\n/config/webpack/shared.js\n```/ eslint global-require: 0 / \n/ eslint import/no-dynamic-require: 0 /                     \nconst webpack = require('webpack')                          \nconst { basename, dirname, join, relative, resolve } = require('path')                                                     \nconst { sync } = require('glob')                            \nconst ExtractTextPlugin = require('extract-text-webpack-plugin')                                                           \nconst ManifestPlugin = require('webpack-manifest-plugin')   \nconst extname = require('path-complete-extname')            \n// const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;                                   \nconst { env, settings, output, loadersDir } = require('./configuration.js')                                                  \nconst extensionGlob = **/*{${settings.extensions.join(',')}}* \nconst entryPath = join(settings.source_path, settings.source_entry_path)                                                   \nconst packPaths = sync(join(entryPath, extensionGlob))        \nmodule.exports = {           \n  entry: packPaths.reduce(   \n    (map, entry) => {        \n      const localMap = map   \n      const namespace = relative(join(entryPath), dirname(entry))                                                          \n      localMap[join(namespace, basename(entry, extname(entry)))] = resolve(entry)                                          \n      return localMap        \n    }, {}                    \n  ),                           \noutput: {                  \n    filename: '[name].js',   \n    path: output.path,       \n    publicPath: output.publicPath                           \n  },                           \nmodule: {                  \n    rules: sync(join(loadersDir, '*.js')).map(loader => require(loader))                                                   \n  },                           \nplugins: [                 \n    new webpack.EnvironmentPlugin(JSON.parse(JSON.stringify(env))),                                                        \n    new ExtractTextPlugin(env.NODE_ENV === 'production' ? '[name]-[hash].css' : '[name].css'),                             \n    new ManifestPlugin({     \n      publicPath: output.publicPath,                        \n      writeToFileEmit: true  \n    }),                      \n//    new BundleAnalyzerPlugin(),                           \n    new webpack.ProvidePlugin({                             \n      $: \"jquery\",           \n      jQuery: \"jquery\"       \n    })                         \n],                           \nresolve: {                 \n    extensions: settings.extensions,                        \n    modules: [               \n      resolve(settings.source_path),                        \n      'node_modules'         \n    ]                        \n  },                           \nresolveLoader: {           \n    modules: ['node_modules']\n  }                          \n}              \n```\n/config/webpack/development.js\n```\n// Note: You must restart bin/webpack-dev-server for changes to take effect                                                          \nconst merge = require('webpack-merge')\nconst sharedConfig = require('./shared.js')\nconst { settings, output } = require('./configuration.js')\nmodule.exports = merge(sharedConfig, {\n  devtool: 'cheap-eval-source-map',\nstats: {\n    errorDetails: true\n  },\noutput: {\n    pathinfo: true\n  },\ndevServer: {\n    clientLogLevel: 'none',\n    https: settings.dev_server.https,\n    host: settings.dev_server.host,\n    port: settings.dev_server.port,\n    contentBase: output.path,\n    publicPath: output.publicPath,\n    compress: true,\n    headers: { 'Access-Control-Allow-Origin': '*' },\n    historyApiFallback: true,\n    watchOptions: {\n      ignored: /node_modules/\n    }\n  }\n})\n```\nI would imagine the relevant part is in there somewhere.  I should also note there's a folder /config/webpack/loaders, which there isn't in the test project.\nThe pack details were mentioned in my last comment.  But to expand - \napp/javascript/packs/application.js includes:\n[...]\nrequire('../components')\nwhich does a whole lot of this:\nwindow.MyComponent      = require('./components/MyComponent');. Well, adding a \"var MyComponent\" didn't work.  I'm not sure the file is even being loaded.. Well, I replaced my main pack (application.js) with a server-side rendering mini-pack (server_rendering.js, copied from this gem and then modified a bit).  That almost worked.  I'm pleased that I successfully got a stubbed out component (\"<div>foobar</div>\") to render in the context.  Now I'm just stuck with the problem of getting my redux \"store\" variable inside a component.  The global scope which is used at the level of finding a component from Rails is evidently different than the global scope used inside the component - none of the global variables are accessible from that context, including 'React', which I had to manually import in each relevant component.  After doing that, I'm stuck with a \"ReferenceError [...]  variable 'store'\" error.  Any tips?  Maybe changing the renderer or something?. ",
    "santhu210": "Alright. Thanks anyways!. ",
    "daemonsy": "I can't get this to work yet, mysteriously the test pattern seems to be okay, but doesn't build any modules when given.  \nClosing for now.. Hey @BookOfGreg, thanks for taking a look. \nYes I expect any files that are not in my require tree (starting from the entry point) to not be compiled. The SCSS files in my component directory was getting compiled into the output CSS bundle. I haven't tested for other file types. \nThe regex I used in the PR doesn't work because I think the regex is used for matching module paths. \ne.g. /\\.jsx?$/ matches all files ending .jsx, all well and good, but people don't commonly list modules with extension. The require(./events/list) for example doesn't match this regex. Helpers in ReactRailsUJS also removes the extension. \nRight now, I got my problem solved by using a negative lookahead for styles, /^((?!styles).)*$/. Definitely not a real solution. . I never had this problem when using webpack natively (or at least never noticed this). other than tests, it's not common to use require.context, so imports are all static. \nHmm I was thinking the problem might be caused by the call and webpacker. I'll setup some experiments to test this out. . ",
    "mustmodify": "It seems like, with asset pipeline, you would be dependent on gemified assets for things like thunk, whereas with webpacker you'd have access to npm... but I may not understand that well enough.. Hi @BookOfGreg -- thanks for your generous response.\nYou said:\n\nI suspect Rails devs finding their way here will already have some awareness of JS ecosystem if they come seeking native React integration.\n\nI guess that's true. I have \"some awareness\" of it. But what I said about npm, for example, was a complete guess. So my principle question is \"Assume I know not-very-much. How will this decision change my life in dev and in production?\" Some thoughts:\n\nThe thing I mentioned about NPM vs gems.\nI believe that webpack and sprockets both concatenate all js files into one... if that's true, I would say that. And I assume it also does minification and compression?\nWill webpacker do fingerprints like asset pipeline?\nBut WebPacker isn't what turns ES6 code into \"acceptable\" javascript, right? That's another tool often bundled with it... So is that available either way?\nWill I need to commit a webpacker asset file to the repo? Or will it be generated during precompile? If so, is that handled for me, or do I need to add something to capistrano / etc?\nWith the react_on_rails gem I needed to have a separate process watching webpacker. But I don't need that for the asset pipeline. Is that true here? How should I set that up?. Wiki would be fine, though I would probably just put it in docs/webpack-vs-asset-pipeline.markdown or something like that. I don't like linking to something that isn't in the repo. YMMV.. My principle question above could perhaps be better stated this way:\n\n\"I use Rails. I like the asset pipeline. It provides all kind of production goodness. I'm at peace with adding js to my app because client-side code is good. But why would I consider going outside the asset pipeline? Not only that, but I'm moving only part of my assets outside it!\"\nPS bonus points for figuring out how to get webpacker to work while files are at app/assets/javascript. :). Won't you end up with webpack compiling the same assets as the asset pipeline? how will this work with rake assets:precompile? I guess that's an issue for another ticket. :). Good start!\nI started to write stuff, erased it, started to write again, erased it ... I'm not happy with my ideas for this. I'm getting that same feeling I have when code needs to be refactored. Let me think about it a bit. . So I now have react-rails 2.4.4 working... not sure why it wasn't that way in the Gemfile before.\nSo now it's:\n   rails: 3.2.13\n   react_rails 2.4.4\n   ruby: 2.2.9\nAccording to the instructions, I should be able to:\n$ bundle install\n$ bundle exec rake webpacker:install\n$ bundle exec rake webpacker:install:react\n$ rails generate react:install\nTurns out webpacker requires rails >= 4.2, so I'll have to configure webpacker myself or use react_on_rails, which is working for another Rails 3.2 app. What should I do? Manual or switch to react_on_rails?. ",
    "hopewise": "As for my experience, I found that its better to run production pre-compile locally rather than at server when using react-rails gem, as it will result into building fresh packages at the server and thus using high resource from CPU while building..\nhow would I prevent react-rails gem from participate with rake assets:precompile ?\n. oh, it was because I am on rails 4, I get to use rake, so, it worked as:\nbundle exec rake webpacker:compile\nbut I got this error:\nERROR in ./node_modules/css-loader??ref--1-2!./node_modules/postcss-loader/lib??ref--1-3!./app/javascript/devops/src/index.css\nModule build failed: BrowserslistError: Unknown browser query `dead`\n    at /Users/samir/Documents/projects/backend/node_modules/autoprefixer/node_modules/browserslist/index.js:164:11\n    at Array.reduce (<anonymous>)\n    at resolve (/Users/samir/Documents/projects/backend/node_modules/autoprefixer/node_modules/browserslist/index.js:132:18)\n    at browserslist (/Users/samir/Documents/projects/backend/node_modules/autoprefixer/node_modules/browserslist/index.js:224:16)\n    at Browsers.parse (/Users/samir/Documents/projects/backend/node_modules/autoprefixer/lib/browsers.js:61:16)\n    at new Browsers (/Users/samir/Documents/projects/backend/node_modules/autoprefixer/lib/browsers.js:52:30)\n    at loadPrefixes (/Users/samir/Documents/projects/backend/node_modules/autoprefixer/lib/autoprefixer.js:70:24)\n    at plugin (/Users/samir/Documents/projects/backend/node_modules/autoprefixer/lib/autoprefixer.js:81:24)\n    at LazyResult.run (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:277:20)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:192:32)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n    at LazyResult.asyncTick (/Users/samir/Documents/projects/backend/node_modules/postcss/lib/lazy-result.js:204:22)\n @ ./app/javascript/devops/src/index.css 2:14-156\n @ ./app/javascript/devops/src ^\\.\\/.*$\n @ ./app/javascript/packs/devops.js\n. Yes, I managed to compile the react-rails-example-app successfully, but not my app \ud83d\ude3f . @BookOfGreg I found a solution to my problem, I just removed the css files from the project, and it compiled normally \ud83d\udc4d \nNow I have to set compile: false at production for config/webpacker.yml ? as I already compiled locally, but then, I have to include public/packs in git ?\nWhat do you recommend?. I deploy via Capistrano.. I will set compile: false to save server power... Sure, I will close it once I try deployment. Okey, here is my deployment log:\n```\n..\n..\nWebpacker is installed \ud83c\udf89 \ud83c\udf70\nUsing /var/www/myapp/releases/20190314152431/config/webpacker.yml file for setting up webpack paths\nCompiling\u2026\nCompilation failed:\nHash: e6a13856e42943387cfc\nVersion: webpack 3.12.0\nTime: 7113ms\n                             Asset       Size  Chunks             Chunk Names\n    devops-fabf6ca4219f54c425c5.js     162 kB       0  [emitted]  devops\ndevops-fabf6ca4219f54c425c5.js.map     202 kB       0  [emitted]  devops\n                     manifest.json  122 bytes          [emitted]\n                  manifest.json.gz   83 bytes          [emitted]\n devops-fabf6ca4219f54c425c5.js.gz    50.9 kB          [emitted]\n```\nso, it seems that it does compile however, here is my config/webpacker.yml:\n```\ndefault: &default\n  source_path: app/javascript\n  source_entry_path: packs\n  public_output_path: packs\n  cache_path: tmp/cache/webpacker\n# Additional paths webpack should lookup modules\n  # ['app/assets', 'engine/foo/app/assets']\n  resolved_paths: []\n# Reload manifest.json on all requests so we reload latest compiled packs\n  cache_manifest: false\nextensions:\n    - .jsx\n    - .js\n    - .sass\n    - .scss\n    - .css\n    - .module.sass\n    - .module.scss\n    - .module.css\n    - .png\n    - .svg\n    - .gif\n    - .jpeg\n    - .jpg\ndevelopment:\n  <<: *default\n  compile: false\n# Reference: https://webpack.js.org/configuration/dev-server/\n  dev_server:\n    https: false\n    host: localhost\n    port: 3035\n    public: localhost:3035\n    hmr: false\n    # Inline should be set to true if using HMR\n    inline: true\n    overlay: true\n    compress: true\n    disable_host_check: true\n    use_local_ip: false\n    quiet: false\n    headers:\n      'Access-Control-Allow-Origin': '*'\n    watch_options:\n      ignored: /node_modules/\ntest:\n  <<: *default\n  compile: false\n# Compile test packs to a separate directory\n  public_output_path: packs-test\nproduction:\n  <<: *default\n# Production depends on precompilation of packs prior to booting for performance.\n  compile: false\n# Cache manifest.json for performance\n  cache_manifest: true\n```\nAny idea?\n. ",
    "joshgosse": "Sorry, totally thought this would bootstrap a starter project or something! My bad.. ",
    "igorescobar": "Can you tell if this is necessary?\nhttps://github.com/59naga/babel-plugin-add-module-exports. @BookOfGreg Yeah I googled it and the thing is that we don't use webpack. We are using asset pipeline and browserify. Since the problem is being created by a component being required by the \nruby\n<%= react_component 'CommonHeader', {} %>\nI thought it would be an issue with the react-rails. Does the information provided above changes anything?. ",
    "Tess10553": "Dear Greg,\nThank you for the double check.\nI am very sorry for the pull , it was a 100% mistake, and I have no idea\nhow to revoke it so I decided to do nothing.\nCould you ignore it?\nSorry for cause you the trouble.\nTess\n2017-10-29 20:12 GMT+08:00 Greg Myers notifications@github.com:\n\nHi @Tess10553 https://github.com/tess10553 , Did you mean to open this\nPR? You can compare master and 2.3 by using the compare function on github.\nhttps://github.com/reactjs/react-rails/compare/2.3-stable\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/reactjs/react-rails/pull/817#issuecomment-340257824,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APsBVeUn0qkL57Ft4COSz4HKQbGSLOE2ks5sxGubgaJpZM4QF5rb\n.\n\n\n-- \nTess Yu\n\u53f0\u5317\n. ",
    "davetron5000": "For future google-seachers, I had this problem as well.  It was not happening locally on OSX but was happening on my CI server, despite me explicitly setting as many versions of everything as I could.\nThe problem was that package.json needed to match Gemfile for versions of Webpacker.  Webpacker sets something like this in package.json when  you set it up:\njavascript\n\"dependencies\": {\n    \"@rails/webpacker\": \"^3.2.0\",\nThis is not in your Gemfile, so if you bundle update, you'll get a shiny new version of webpacker and friends, but the webpacker JS code is still versions behind.  You will not get any sort of error.\nSo, I changed my package.json to use the updated version of webpacker (in my case 3.4.1), and things worked.  My guess is that @reneweteling's re-install of everything may have caused this to happen and that's why it fixed the problem.. ",
    "dbarner1": "Wrong github repo! :o. ",
    "wrzasa": "Hi!\nThank you for your answer! Previously I just did: var TestUtils = React.addons.TestUtils. Now when trying to import ReactTestUtils from 'react-dom/test-utils'; and run jasmine specs in web browser I get in JS console: ReferenceError: require is not defined since import is translated to some code using require which is not available in web browser...\nEdit: I'll be glad to provide a PR whenever we solve this problem ;-)\n. Well, yes I'm using sprockets. I have legacy Rails app still on Rails 4 so for now I will not be able to use webpack. Jasmine is no problem here, I use jasmine-rails gem and have spec/javascripts/helpers/spec_helper.js.jsx file to setup testing environment. That's where the TestUtils const/var should be created. But I don't know how it should be done while using rails assets (where I don't have to require anything, but also I have no require command).. I downgraded to 2.3.1, then fought with \nInvariant Violation: addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component's `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner). in http://localhost:3000/assets/react-server.self-857bafe80cca2229eb9750a4b8396dd4ca9bea6760effc6dfd15c1a66996ca8c.js?body=1 (line 979)\nfor some time (but only in specs! widget in application worked correctly!), since app/assets/javascripts/server_rendering.js conveniently loaded react second time... finally after a few hours spent to make passing specs pass again on correctly working widget it all works.\nSo for rails4 and sprockets:\n if you have problems with duplicates of React in specs (but not in development), check your app/assets/javascripts/server_rendering.js\n I still don't know how to use v2.4 and Reatc's TestUtils (maybe it's not possible -- so its worth to mention it i README?).. As I wrote above I downgraded to v2.3.1, made it work and forgot about using v2.4 with Rails 4, especially that -- as you can see here -- nobody really cares if it's even possible (I believe it's not).... Steps to reproduce? Just try to answer the very first question: How should I import/require react-dom/test-utils using react-rails and sprockets where everything is automagically 'imported', but TestUtils is not? I provided quite a lot information about the problem. If its not enough maybe just try to\n1. Create RoR4 application with sprockets\n2. Install jasmine-rails\n3. Install rect-rails\nand try to provide minimal working test using TestUtils.. Thanks! As I wrote I already found a workaround sufficient for myself, but let me know if I you need anything from me -- I will try to help when I can.. ",
    "colintsteele": "@wrzasa in your steps to reproduce, you don't actually need to install jasmine-rails - if you have some other way of getting Jasmine set up like my team does, you will still run into this issue.\nIs TestUtils just namespaced differently in 2.4?  I'm only able to access TestUtils anywhere inside the React namespace in 2.3.. ",
    "dwightwatson": "Spotted this one as well. We're not pre-rendering any components and this error has started popping up in the console.. ",
    "phuctm4192": "I'm newbie at this gem. first of all, I installed this gem with webpacker and i also meet this issue. So how can I resolve, please tell me detail because I don't understand you said above. thanks in advanced.. ",
    "jsbaltodano": "Well, it is an issue within the gem but the idea to hack it for a quick check is\nCreate the file component_mount.rb inside config\\initializers\nWrite the same as the original file but you could add\ndata[:hydrate] = 't' if prerender_options\nbelow\ndata[:react_props] = (props.is_a?(String) ? props : props.to_json)\nThis would work as a data param for JS to check if ReactDOM.hydrate() must be use or to use the ReactDOM.render() method.\nNow, append this to your \\app\\javascript\\packs\\application.js\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nReactRailsUJS.mountComponents = function(searchSelector) {\n    var ujs = ReactRailsUJS;\n    ujs.RENDER_ATTR = 'data-hydrate';\n    var nodes = ujs.findDOMNodes(searchSelector);\nfor (var i = 0; i < nodes.length; ++i) {\n  var node = nodes[i];\n  var className = node.getAttribute(ujs.CLASS_NAME_ATTR);\n  var constructor = ujs.getConstructor(className);\n  var propsJson = node.getAttribute(ujs.PROPS_ATTR);\n  var props = propsJson && JSON.parse(propsJson);\n  var hydrate = node.getAttribute(ujs.RENDER_ATTR);\n\n  if (!constructor) {\n    var message = \"Cannot find component: '\" + className + \"'\"\n    if (console && console.log) {\n      console.log(\"%c[react-rails] %c\" + message + \" for element\", \"font-weight: bold\", \"\", node)\n    }\n    throw new Error(message + \". Make sure your component is available to render.\")\n  } else {\n    // ReactDOM.render(React.createElement(constructor, props), node);\n    if (hydrate && typeof ReactDOM.hydrate === \"function\") {\n      ReactDOM.hydrate(React.createElement(constructor, props), node);\n    } else {\n      ReactDOM.render(React.createElement(constructor, props), node);\n    }\n  }\n}\n\n}\n```\nReset your server.. ",
    "Toske94": "I'm new in this, can someone explain me why I got this error\nThe script that I use is returning a picture, but sometimes the picture is not showing and I got this error:\n\nExpected server HTML to contain a matching in .\n\n```\nimport React from 'react';\nimport {Menu} from 'semantic-ui-react';\nimport { Link } from '../routes';\nexport default (props) => {\n    return (\n      \n\n\n\n    );\n};\n```. ",
    "earksiinni": "I was having similar problems. What you need to do is make sure that your app renders with a <StaticRouter> when prerendering and a <BrowserRouter> when running in a web browser. Here's my solution:\nApp view\n<%= react_component('Application', {path: request.path}, {prerender: true}) %>\nApp root component\n```\nimport { BrowserRouter, StaticRouter } from 'react-router-dom'\nclass Router extends React.Component {\n  renderRouter = () => {\n    if(typeof window !== 'undefined') {\n      return(\n        \n          {this.props.children}\n        \n      )\n    } else {\n      return(\n        \n          {this.props.children}\n        \n      )\n    }\n  }\nrender() {\n    return(this.renderRouter())\n  }\n}\nconst Application = props => (\n  \nHello, world!\n\n)\nexport default Application\n``. Side note: React Router's documentation misleadingly implies that you should pass in the URL into'slocation` prop, whereas you actually need to pass in the path. (I banged my head against that one for a while.). ",
    "DamianPereira": "@BookOfGreg Hi! What library do you mean? Fetch?\n\nRequesting things from JS server-side should theoretically just work\n\nI haven't been able to use any form of fetch on the server. It results in the errors above, it seems ExecJS can't use node environment, so that might be the reason isomorphic-fetch does not work.\n@catmando I will check it out, thanks!. ",
    "tylerkahn": "Is there any update on this issue?\nDoes react-rails really not support fetch on the server? It's kind of misleading to claim that react-rails supports isomorphic javascript and not mention that it doesn't support fetch on the server.. @BookOfGreg First of all I want to be clear that I think this is a really great project.\nI spent about 8 hours in total trying to diagnose this particular problem and get it to work (to no avail unfortunately) so I do have some skin in the game here. \nI guess my question is, is isomorphic fetch known to work with react-rails?\nAs far as I can tell, simply importing \u201cisomorphic-fetch\u201d anywhere in the app causes prerendering to break which is what a lot of dependencies that claim to be isomorphic use.\nI tried to split up the client and server webpacker configs but I couldn\u2019t get it to actually build a server build artifact that didn\u2019t pull in the browser version. This breaks prerendering in the precise manner as described in the bug.\nThe repro steps would be:\n1) do a fresh install of react-rails\n2) npm install isomorphic-fetch\n3) add require(\u201cisomorphic-fetch\u201d) to your application.js pack\n4) set prerender to true in react_component\nI\u2019m not by a computer at the moment but I can provide additional details if you need.\nThank you. ",
    "HorizonShadow": "@tylerkahn Your issue is you're adding isomorphic-fetch to application.js, not server_rendering.js.\nserver_rendering.js is the entry point for server rendering, so any polyfills you need, need to imported there.\nI created an example for you: https://github.com/HorizonShadow/ssr-fetch/blob/master/app/javascript/packs/server_rendering.js\nNote this isn't going to fetch the data before rendering. This isn't possible in react because all fetches are asynchronous. When react server runs renderToString, it takes the output of the first render call, and returns it as a string. Since fetch is asynchronous, the first render is never going to contain your data.\nThat said, the react team is working on bringing that functionality to react server in 2019: https://reactjs.org/blog/2018/11/27/react-16-roadmap.html#suspense-for-server-rendering. Hi,\nIt's rendering client side. I cannot test server side rendering because I run into a different issue with that (probably because of windows). The server side rendering error happens regardless of what's in the component.\nManually mounting results in:\nReactRailsUJS.mountComponents()\nindex.js:93 [react-rails] Cannot find component: 'App' for element <div data-react-class=\u200b\"App\" data-react-props=\u200b\"{}\u200b\" class=\u200b\"full\">\u200b</div>\u200b\nindex.js:95 Uncaught Error: Cannot find component: 'App'. Make sure your component is available to render.\n    at Object.mountComponents (index.js:95)\n    at <anonymous>:1:15\nI checked the compiled application pack file, and App.js is there. . I believe so. \n```\n// }),\n/ 117 /\n/!******!*\\\n  ! ./app/javascript/components/App.js !\n  ******/\n/! exports provided: default /\n/! all exports used */\n// (function(module, webpack_exports, webpack_require) {\n\"use strict\";\nObject.defineProperty(webpack_exports, \"esModule\", { value: true });\n/ harmony import / var __WEBPACK_IMPORTED_MODULE_0_react = webpack_require(/! react / 1);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_0_reactdefault = _webpack_require.n(__WEBPACK_IMPORTED_MODULE_0_react);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_1__Layout = webpack_require(/! ./Layout / 73);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_2_react_router_dom = webpack_require(/! react-router-dom / 61);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_3__events_EventRoutes = webpack_require(/! ./events/EventRoutes / 92);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_4_apollo_boost = webpack_require(/! apollo-boost / 405);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_5_react_apollo = webpack_require(/! react-apollo / 148);\n/ harmony import / var WEBPACK_IMPORTED_MODULE_5_react_apollodefault = _webpack_require.n(__WEBPACK_IMPORTED_MODULE_5_react_apollo);\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.proto = superClass; }\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\nfunction App() {\n    var _ref;\nvar _temp, _this, _ret;\n\n_classCallCheck(this, App);\n\nfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n  args[_key] = arguments[_key];\n}\n\nreturn _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = App.__proto__ || Object.getPrototypeOf(App)).call.apply(_ref, [this].concat(args))), _this), Object.defineProperty(_this, \"client\", {\n  enumerable: true,\n  writable: true,\n  value: new __WEBPACK_IMPORTED_MODULE_4_apollo_boost__[\"a\" /* default */]()\n}), _temp), _possibleConstructorReturn(_this, _ret);\n\n}\n  // console.log(window.location);\n_createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(\n        \"p\",\n        null,\n        \"test\"\n      );\n    }\n  }]);\nreturn App;\n}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);\n```\nIn addition it also shows up in the webpack bit of chrome dev tools\n\n. It appears putting const App = require('../components/App') in application.js fixes the problem.\nI knew it was something I was doing wrong :). Yes, with prerender set to false, everything runs correctly. \nI'll create a new project and detail everything I do.\n\nrails new react-rails-prerender-test --webpack=react --skip --database=postgresql\nbundle add react-rails\nrails g react:install\nrails g controller entry index -s\nrails g react:component Entry -s\nChanged the render method of Entry.js to say \"Hello World!\"\nAdded render_component :Entry to the index route of EntryController\nAdded <%= javascript_pack_tag 'application' %> to layout\nrails server -b 127.0.0.1 -p 3000 -e development\nNavigate to localhost:3000/entry/index\n```\nStarted GET \"/entry/index\" for 127.0.0.1 at 2018-10-19 07:02:03 -0300\nProcessing by EntryController#index as HTML\n[Webpacker] Compiling\u00e2\u20ac\u00a6\n[Webpacker] Compiled all packs in C:/Users/horiz/RubymineProjects/react-rails-prerender-test/public/packs\nCompleted 500 Internal Server Error in 3005ms (ActiveRecord: 0.0ms)\n\nExecJS::ProgramError (identifier 'Set' undefined):\n(execjs):1\napp/controllers/entry_controller.rb:3:in `index'\n```\n\nNow, if I use render_component :Entry, prerendre: false, everything works fine.. Hm that's weird, my node is version 10.\nC:\\Users\\josh.OMICS1\\dev\\react-datetime>node -v\nv10.12.0\nCurrently having a hard time installing mini_racer because it's not seeing python's installed. Will keep trying.. It's trying to use the \"Duktape\" runtime.\nI'm pretty sure miniracer isn't compatible with windows, given that it checks for node with which python2, and that command doesn't exist on windows.\nI'm trying to get it running on WSL now, and I have to set ENV['EXECJS_RUNTIME'] = 'Node' in config/boot.rb to get it to run.\nHowever, I still run into an error.\nEncountered error \"#<ExecJS::ProgramError: Invariant Violation: Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined. You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.>\" when prerendering App with {} invariant ((execjs):77455:15). I think it's a bit broader than just a JS issue, since it works when not pre-rendering. Probably a dependency problem that can't be pre-rendered. Haven't had a chance to look at it again yet.\nRegarding programming on windows, I simply don't have a linux box and can't be assed to dual boot. Ruby programming on windows has gotten a lot better in recent years, but clearly it's not there yet.\n. https://github.com/HorizonShadow/react-rails-turbolinks\nI put a sleep in the root action, so if you go to localhost:3000, then click \"Two\", then click \"Root\", you'll see the root page for 2 seconds before mounting the Example component.\nI played around with the turbolinks events, but couldn't get it to mount. . I\u2019m working on a PR for this and support for data-turbolinks-permanent.\n. I can't get the tests to run locally, so I can't debug why some of the tests aren't passing. \nI'm running into a lot of node-pre-gyp ERR! stack Error: Failed to execute. The bundle exec appraisal install doesn't finish either, because it's looking for a bundler under version 2. Not sure if it's related.\nI'll squash all these commits once I figure it out.. Try turning off webpack-dev-server and reloading the page. Do you have <%= stylesheet_pack_tag 'application' %> in your layout?. The only other thing I can think of is you don't have css-modules enabled in css-loader.\nhttps://github.com/rails/webpacker/blob/master/docs/webpack.md#overriding-loader-options-in-webpack-3-for-css-modules-etc\nThe invariant violation just means the component failed to compile. You'll see it if you try to run SSR with webpack-dev-server, too, for some reason. . ",
    "3den": "Im having a similar problem, and we endup building a wrapContext function, that takes creates a higher order component and extracts context from props, it works but it feels hacky coz it seems like this is something that should be done by the framework.\n . in rails 5 all rake commands are available to the rails executable.. ",
    "ryansukale": "The react context is just meant to be an object such that all the child components in the tree can access.\nIts usually acts like a global variable that is set at the top level component and is treated like a read-only global in the children without having to explicitly pass them down as a prop.\nPopular libraries like react-router use it as well.. ",
    "johnmailey": "@BookOfGreg Is it possible for react_component to take a render prop, this way i can use react_component to render a provider component and have it render this.props.render \nerb\n<%= react_component \"Provider\", {render: 'ProductPage', context: {foo: 'bar'}} %>\nProvider.js\nimport Context from './context'\nclass Provider extends Component {\n render(\n     return(\n         <Context.Provider value={{...this.props.context}}>\n          {this.props.render}\n        </Context.Provider>\n     )\n)\n}\nProductPage.js\n```\nimport Context from './context'\nclass ProductPage extends Component {\n render(\n     return(\n         \n          {(context) => (\n              {context.foo}\n          )}\n        \n     )\n)\n}\n```\nThis way anything inside Provider should be able to access context without passing props around.. ",
    "hawkzuo": "I had the same issue on my application. Moreover, I also received a warning when trying clicking the link:\nWarning: unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React. \nI temporarily removed the following line in app/assets/javascripts/application.js to get rid of that behavior.\n//= require turbolinks\nBut the turbolinks will not be working after that.. @BookOfGreg I followed the install instructions of react-rails. I didn't change webpacker.yml or development.rb after installation. Then I used the helper =react_component in view to render component. In that component I created a pagination containing links to the next page. The link is a basically an  tag, something like \n<a className=\"next_page\" rel=\"next\" href={\"/magnets/star_react?id=\"+this.state.star+\n            \"&page=\"+(current+1)+\"&per_page=\"+this.state.per_page+\n            \"&order=\"+this.state.order}>Next</a>.\nI just send a new GET request in this link instead of changing the current react component. Maybe this is the cause? Nonetheless, each time I click the link \"Next\", I will receive something like:\n\nBut after I removed \"turbolinks\" in application.js, I won't receive that each time clicking the link, rather:\n\nI'm new to React and thanks for reaching out.\n. ",
    "p-salido": "@pioz If you don't have React Dev Tools installed, first step in troubleshooting this is to install them and inspect actual props passed to the select tag.. @oiahoon I had this issue, resolved it by adding babel-polyfill.\nStep 1: download https://npm-cdn.herokuapp.com/babel-polyfill@6.26.0/dist/polyfill.min.js (per https://babeljs.io/docs/usage/polyfill/), put it in vendor/assets/javascripts\nStep 2: add to application.js or something like vendor/assets/javascripts/vendor.js if you have it:\n//= require babel-polyfill.min. Depends on your browser. Recent Chromes include the Map part of es6 apparently. For me poltergeist was failing without babel-polyfill.. It looks like there are links to the code being compiled in your screenshot, click on them to find out what statement is failing and in which context.. ",
    "mabid": "I investigated this issue, it is not a react-rails issue but an issue in react's hydrate. The issue has been fixed here facebook/react#11602\n. ",
    "oiahoon": "@BookOfGreg thanks for your reply. \nso i can only using ES6 with the last version of react-rails, I need to convert the script from ES5 to ES6, right?\nI began to revert my update and restart it by little step as your advise.. @p-salido i tried to add that polyfill but some new issue occurs. i think i'd better really upgrade by the smallest step.\n 1. version 1.11.0 works well\n 2. while i tried version 2.0.0, \n     - ./app/assets/javascripts/server_rendering.js\nruby\n     //= require react-server\n     //= require react_ujs\n     //= require jquery.min\n     //= require core/tether.min\n     //= require core\n     //= require plugin\n     //= require ./components\n     - add gem 'mini_racer'\n  i got this:\n ![](https://ws4.sinaimg.cn/large/006tKfTcgy1fn4jugy4stj30l20k3who.jpg)\n\n so i cannot use `jQuery` in `prerender`, because  Prerender processes don't have access to `document` or `window`? \nwhat if i do not use prerender?  how can i render it on browser?. ok guys, while I'm giving up **server render**, and change the assets loads order(via.  [ISSUE-742](https://github.com/reactjs/react-rails/issues/742) ), then run `rake assets:clean`.\n\nit works, Amazing! \nAs server rendering mentions, we cannot use jQuery or sth reference window/document, so i gave up.\nhope I'm right. and i'm going to try to upgrade to the latest version of react-rails. ",
    "buncismamen": "I have move it, Its better now\nThank you for your response, Happy new year \ud83c\udf89 . ",
    "Karimit": "Thanks a lot @BookOfGreg \nI'll make sure to take a look at the articles you linked.\nI also found a similar issue.\nWill report back if I made any progress. I just need to decide if I really need code chunking or not.\nThanks for the help! And happy new year to you too.. ",
    "rahulcs": "@BookOfGreg Thanks for maintaining this! You have a happy new year as well! . ",
    "joesho112358": "During my digging, I found this before I found the work around. Here it is if anyone is following my footsteps:\nhttps://github.com/rails/webpacker/issues/1122#issuecomment-354655781\n. ",
    "xiodivinorum": "Hey did you remove turbo links though and also did you install react via the react-rails gem and the asset pipeline (not webpacker). ",
    "biw": "@raapperez You might find you solution in rails/webpacker#119 or webpack/webpack#368. ",
    "jDeppen": "\nI wound up inlining the contents of manifest.js in a script tag in the head of the page\n\n@RiccardoMargiotta, good idea. It feels convoluted how I have it here; do you have a better way. Thanks\n```ruby\nmodule ApplicationHelper\n  def manifest_tag\n    path = File.join(Rails.root, 'public/packs/manifest.json')\n    content = File.read(path)\n    data = JSON.parse(content)\n    filename = data[\"manifest.js\"]\n    filepath = File.join(Rails.root, 'public', filename)\njavascript_tag \"window.webpackManifest = #{File.read(filepath)}\"\n\nend\nend\n```\nruby\n<%= manifest_tag %>\n. @RiccardoMargiotta, thanks. Are you getting this in the terminal?\nStarted GET \"/manifest-6ba779bac5026446ba70.js.map\" for 127.0.0.1 at 2018-10-03 11:41:51 -0400  \nActionController::RoutingError (No route matches [GET] \"/manifest-6ba779bac5026446ba70.js.map\"):\nIt looks like that's happening because the sourceMappingURL is relative\n//# sourceMappingURL=manifest-6ba779bac5026446ba70.js.map\nThis doesn't occur when making the extra request rather than inlining.\n<%= javascript_pack_tag \"manifest\" %>\nI'm going to throw the JS requests right above </body> for now since I'm prerendering.. ",
    "not-an-aardvark": "Sure, feel free.. ",
    "bakunyo": "@reywright I tried this monkey patch in my app, and succeeded SSR of styles.\nIn my code, changed import like below.\n- import { ReactDOMServer } from \"react-dom/server\";\n+ import ReactDOMServer from \"react-dom/server\";\nAnd full of my server_rendering.js is \n``\n// By default, this pack is loaded for server-side rendering.\n// It must expose react_ujs asReactRailsUJS` and prepare a require context.\nimport React from \"react\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { ServerStyleSheet } from \"styled-components\";\nconst componentRequireContext = require.context(\"components\", true);\nconst ReactRailsUJS = require(\"react_ujs\");\nReactRailsUJS.useContext(componentRequireContext);\nReactRailsUJS.serverRender = function(renderFunction, componentName, props) {\n  const ComponentConstructor = this.getConstructor(componentName);\n  const stylesheet = new ServerStyleSheet();\n  const wrappedElement = stylesheet.collectStyles(\n    \n  );\n  const text = ReactDOMServerrenderFunction;\n// prepend the style tags to the component HTML\n  return stylesheet.getStyleTags() + text;\n};\n``. @Undistraction Yes, that's right. So my app use forceful technique in rails view.\nExtractingstyletag fromdivafterreact_component`, render each tags where I want.\nBelow is a sample code.\napp/views/ssr/index.html.erb\n<% body = react_component(\"App\", @props, { prerender: true, tag: 'div' }) %>\n<% style = body.slice!(/<style.+style>/m) %>\n<%= body.html_safe %>\n<% content_for :style do %>\n  <% style.html_safe %>\n<% end %>\napp/views/layouts/application.html.erb\n<!DOCTYPE html>\n<html>\n<head>\n  # some head tags ...\n  <%= yield :style %>\n</head>\n<body>\n  <%= yield %>\n</body>\n</html>. ",
    "Undistraction": "@bakunyo Using your technique, a style tag is added above the component, but when the component is hydrated, React strips the style tag with the warning:\nWarning: Did not expect server HTML to contain a <style> in <div>.\nDid you manage to work around this?. @bakunyo Thanks for taking the time to document your approach. I feared something like this would be the solution. I think I'm going to open up a feature request for an API allowing a more sensible approach.. I'm definitely up for taking a run at this but my Rails is a little rusty so I'll probably need some help.\nHere is a bare-bones project with my current approach working.\nThis is the patched server_rendering.js:\n```javascript\nimport React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport { ServerStyleSheet } from 'styled-components'\nconst componentRequireContext = require.context('components', true)\nconst ReactRailsUJS = require('react_ujs')\nReactRailsUJS.useContext(componentRequireContext)\nReactRailsUJS.serverRender = function(renderFunction, componentName, props) {\n  const ComponentConstructor = this.getConstructor(componentName)\n  const stylesheet = new ServerStyleSheet()\n  const wrappedElement = stylesheet.collectStyles(\n    \n  )\n  const text = ReactDOMServerrenderFunction\n// prepend the style tags to the component HTML\n  return ${stylesheet.getStyleTags()}${text}\n}\n```\nThis is the (styled-components-specific) approach I'm currently using to move the <style> tag to the head. It must run before the component is hydrated, so I'm running it in application.js:\njavascript\ndocument.addEventListener('DOMContentLoaded', function(event) {\n  const styleElement = document.querySelector(\n    'body style[data-styled-components]'\n  )\n  document.head.appendChild(styleElement)\n})\nI guess we'll need to allow a user control over the selector to support other libraries.. ",
    "iporollo": "Hi @BookOfGreg,\nThank you for your quick response. The link you provided - https://github.com/rails/webpacker/blob/master/docs/typescript.md \ndid the trick. \nAfter following the initial set up of the react rails gem, you simply need to run:\nbundle exec rails webpacker:install:typescript\nyarn add @types/react @types/react-dom\nThis adds all of the necessary files and loaders for Typescript support. With that, it is now possible to declare react component files with the .tsx extension. \nThanks again for your time and help. If any more information is needed, let me know. . Will do, I'll link the pull request here when I create it.. https://github.com/reactjs/react-rails/pull/873. ",
    "vipulvkp": "Hi ,\nIt was my assumption that there might be something like CreatePureClass. But its not there.\nMy question is how do I make my components pure using this gem. Yes. I meant PureComponent. The way to make a pure component in ES6 syntax is \nclass MyComponent extends PureComponent \nHowever, I am not able to make pure components with react-rails gem. . https://reactjs.org/docs/react-api.html#reactpurecomponent. \nUsing ES6 syntax , I can create a pure component as below:\nclass MyComponent extends PureComponent\nHowever, I am not able to create a pure component with react-rails. There is only one function called \nReact.createClass which renders non pure components.. @BookOfGreg : thanks for the response. So , does it conclude that we cant create PureComponents using react-rails gem. Can you direct me to a piece of a code that does that. \nI use the below code to create components using react-rails i.e.\nvar MyComponent = React.createClass  i.e. jsx\nHere I am not extending from React.Component like the ES6 syntax below\nclass Comment extends React.PureComponent.\nreact-rails gem advises to use jsx syntax.\n. ",
    "mwoolf87": "Thank you BookOf Greg, that worked for me!. ",
    "Skill-Zozo": "I was trying to add this slider (https://github.com/react-component/slider) to my project. After installing it, through yarn add rc-slider, I then struggled to import it. I couldn't find any docs on rails/webpack to help me out. But anyway, I had to change the default babel configuration (.babelrc) to \n{\n  \"presets\": [\n    [\"env\"],\n    \"react\",\n    \"es2017\"\n  ],\n  \"plugins\": [\n    \"syntax-jsx\",\n    \"syntax-dynamic-import\",\n    \"transform-object-rest-spread\",\n    [\n      \"transform-class-properties\",\n      {\n        \"spec\": true\n      }\n    ]\n  ]\n}\nAnd then after importing the css file (associated with the slider I am importing), I had to include \n<%= stylesheet_pack_tag 'pack_name' %> in my views file\n. Yes and yes. \nTo test if I didn't do something wrong, I cloned @BookOfGreg's react-rails example (https://github.com/BookOfGreg/react-rails-example-app). \nI imported the package into https://github.com/BookOfGreg/react-rails-example-app/blob/master/app/javascript/components/Post.js\nTo no avail. The issue is webpacker's default babel config. This default config does not allow for node_modules to be imported and the culprit being this particular configuration\n{\n        \"modules\": false,\n        \"targets\": {\n          \"browsers\": \"> 1%\",\n          \"uglify\": true\n        },\n        \"useBuiltIns\": true\n}\n. ",
    "eveningkid": "That's odd @Skill-Zozo.\nUsually, you simply need to import it as any other module: import package from 'package';\nDid you correctly import the application pack into your layout? \n<%= javascript_pack_tag 'application' %>\nIs your parent component located inside the folder mentioned in app/packs/application.js's require.context call?\n. I believe you should try to follow only the indications from reactjs/react-rails getting started section.\nThe issue could come from @BookOfGreg's webpacker configuration.\nThen after you set up everything, simply yarn add any module and import it directly into your js files.. ",
    "English3000": "I just looked at ReactDOM's documentation regarding the second development error message:\n\nThe React-Rails components add an extra <div data-react-class=\"AuthHeader\" data-react-props='{\"prerender\":true}'></div> \nHowever, if I add an extra <div> on the client-side this still does not fix the issue.\nAdditionally, if I move <div id='replace-with-js'> from application.html.erb into home.html.erb, the client-side hydration fails on localhost too.\nGoing deeper, if I add <div>s on the server-side to mimic the client-side's DOM tree, I still get the error message.. For the error, ReferenceError: process is not defined, interestingly I do not find this error message in my client-side rendered projects.\nThis Stack Overflow post explains the error message, but not how to fix it (if it's the hitch).. The last thought I had was in the pictures from the initial post, under Sources, under Webpack you see in development webpack generates 2 bootstraps, whereas in production it only generates one.\nSo I'm not sure what accounts for webpack not bundling a second time in production.. So I made those changes (in webpack.config.js, home.html.erb, and show.html.erb).\nThis was the result:\n\nOn 2018-Mar-1, at 00:34, Greg Myers notifications@github.com wrote:\nClosed #880 https://github.com/reactjs/react-rails/issues/880.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/reactjs/react-rails/issues/880#event-1498471490, or mute the thread https://github.com/notifications/unsubscribe-auth/AcOtGuRcUababLiExkxV6A85L6I_BnACks5tZ7KigaJpZM4SXqmR.\n\n\n. \n. Also, changing the output path to path: path.resolve(__dirname, \"app\", \"javascript\", \"packs\"), has a side-effect:\nWhen I make a change to my code in development then hit refresh (or hard refresh), no update is made; whereas, if I change my output path back to: path: path.resolve(__dirname, \"app\", \"assets\", \"javascripts\"), the page updates upon refresh.\n\nOn 2018-Mar-1, at 08:57, Alexander Marks-Katz english3000.org@gmail.com wrote:\nSo I made those changes (in webpack.config.js, home.html.erb, and show.html.erb).\nThis was the result:\n\n\nOn 2018-Mar-1, at 00:34, Greg Myers notifications@github.com> wrote:\nClosed #880 https://github.com/reactjs/react-rails/issues/880.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/reactjs/react-rails/issues/880#event-1498471490, or mute the thread https://github.com/notifications/unsubscribe-auth/AcOtGuRcUababLiExkxV6A85L6I_BnACks5tZ7KigaJpZM4SXqmR.\n\n\n. And the workaround for that is to use:\npath: process.env.NODE_ENV === 'production' ? path.resolve(__dirname, \"app\", \"javascript\", \"packs\") : path.resolve(__dirname, \"app\", \"assets\", \"javascripts\"),\n\nOn 2018-Mar-1, at 10:29, Alexander Marks-Katz english3000.org@gmail.com wrote:\nAlso, changing the output path to path: path.resolve(__dirname, \"app\", \"javascript\", \"packs\"), has a side-effect:\nWhen I make a change to my code in development then hit refresh (or hard refresh), no update is made; whereas, if I change my output path back to: path: path.resolve(__dirname, \"app\", \"assets\", \"javascripts\"), the page updates upon refresh.\n\nOn 2018-Mar-1, at 08:57, Alexander Marks-Katz english3000.org@gmail.com> wrote:\nSo I made those changes (in webpack.config.js, home.html.erb, and show.html.erb).\nThis was the result:\n\n\nOn 2018-Mar-1, at 00:34, Greg Myers notifications@github.com> wrote:\nClosed #880 https://github.com/reactjs/react-rails/issues/880.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/reactjs/react-rails/issues/880#event-1498471490, or mute the thread https://github.com/notifications/unsubscribe-auth/AcOtGuRcUababLiExkxV6A85L6I_BnACks5tZ7KigaJpZM4SXqmR.\n\n\n\n\n. Good news. I just forgot the =. Adding that, the client-side hydrates!\nWhat can I write as conditional logic so that <%= javascript_pack_tag 'bundle' %> is used in production but not development (as my workaround means there will be no bundle file in development)?\n. On another note, after setting up gem 'rack-cors', the app is fully functional EXCEPT when I try to sign out--from Heroku:\nCompleted 500 Internal Server Error in 8ms (ActiveRecord: 0.0ms)\nNoMethodError (undefined method `reset_token' for nil:NilClass):\napp/controllers/application_controller.rb:29:in `sign_out'\napp/controllers/api/sessions_controller.rb:3:in `destroy'\nGiven that hitting refresh, the current user does not persist, the issue is the current user somehow isn't getting set.\nHowever, this is not an issue in development. Why would that be?\nLooking through my project, the only difference I can find on the backend as compared with a client-side rendered one (which I literally copy & pasted the code for this project from) is this line in application_controller.rb:\nskip_before_action :verify_authenticity_token\nHowever, if I comment out this line, when I try to sign up, I get the server error\n```\nStarted POST \"/api/users\" for 127.0.0.1 at 2018-03-05 12:16:57 -0800\nProcessing by Api::UsersController#create as JSON\n  Parameters: {\"user\"=>{\"email\"=>\"\", \"password\"=>\"[FILTERED]\"}}\nCan't verify CSRF token authenticity.\nCompleted 422 Unprocessable Entity in 1ms (ActiveRecord: 0.0ms)\nActionController::InvalidAuthenticityToken - ActionController::InvalidAuthenticityToken:\n```\nThis is a result of using gem 'react-rails'.\nThere isn't an \"authenticity_token\" parameter, but in the form I have a hidden input with a server-side rendered form_authenticity_token I passed to the client-side's store via the window.\nAdditionally, in my api.js I do the following axios configuration\naxios.defaults.xsrfHeaderName = \"X-CSRFTOKEN\";\naxios.defaults.xsrfCookieName = \"XCSRF-TOKEN\";\nHow do I pass the authenticity token properly in my request?. ",
    "BrunoQuaresma": "My js file:\n//= require rails-ujs\n//= require turbolinks\n//= require react\n//= require react_ujs\n//= require components\n//= require_tree .. I removed the folder node_modules, ran again 'rails g react: install` and it worked.. ",
    "0x2C6": "Yeah it works when I remove node_modules but I need babel-loader when I remove node_modules I can't use babel. ",
    "ceancymavs": "Does This React-Rails version doesn't work in rails v2.3.3?\nor maybe there is something wrong with my personality?\nmean while this is my gemfile, and i hope you consider my question.\n\n. ",
    "jacksontrieu": "For anyone else who is having this issue, I found a fix which involved doing two things:\n\n\nIf you have a app/assets/javascripts/server_rendering.js file, delete the whole file and make sure it isn't referenced in a //= require statement in app/assets/javascripts/application.js\n\n\nGo to your app/assets/javascripts/application.js file and remove the following lines if they exist:\n//= require react\n//= require react_ujs\n\n\nI think the reason why the error occurs is because my project was initially configured to run the react-rails gem in Asset Pipeline mode, whereby the first command I ran after installing the gem was:\nrails g react:install\nThis adds those extra require statements in the app/assets/javascripts/server_rendering.js & app/assets/javascripts/application.js files, as it expects Rails' asset pipeline to be bundling the react components.\nSwitching to Webpacker mode requires removing those require statements in those two files.. ",
    "JESii": "Actually, the original question that was asked in https://github.com/reactjs/react-rails/issues/882 was never answered: \"i get ReferenceError: require is not defined\" when the import should just work.\nI'm having the same problem using the Asset Pipeline strategy.\nAny suggestions on what to look for? Thanks. ",
    "Aurel-Allard": "Thank you so much, I searched for such complicated answers on G.... ",
    "dtom90": "I believe this may be because you are creating two different ReactRailsUJS variables with two different directory contexts to load components:\n- https://github.com/ratneshraval/react-rails-webpacker-test/blob/master/app/javascript/packs/application.js#L13\n- https://github.com/ratneshraval/react-rails-webpacker-test/blob/master/app/javascript/packs/outside.js#L5\nThus at least one of them will not be able to find the component that is being referenced.\nRemoving the unneeded pack tag from each view resolves the console error issue:\nhttps://github.com/dtom90/react-rails-webpacker-test/commit/192e65cddebb7a1169c7e9c2e155b66c676f508b\nOf course, this may not be the solution you're looking for, but I would say to just make sure that all the components you reference are included in the directory tree of the single context you use.. ",
    "ratneshraval": "@dtom90 Thank you for looking into this.\nThe reason I have 2 packs and 2 contexts, is to keep individual packs size smaller and only contain relevant imports. Hence I have 2 packs\n1. component pack with app/javascript/components directory context \n2. otherComp pack with app/javascript/otherComps directory context.\nNow I have a page where both are needed, hence both are there, resulting in this error.\nHow can I achieve this? \nIf I combine all into 1 directory context, the resulting pack will contain everything and defeat modular bundling purpose of webpack.. ",
    "matt-potter": "sure, will do! yep, didn't think the CI was anything related. . Hi @BookOfGreg, I've added a test and updated the readme. Great, thanks @BookOfGreg !. ",
    "hqsiswiliam": "Then I found out I missed .babelrc file when I upload the project to server.. ",
    "suhailnaw": "I'd like to take a stab at this!  I'm looking to make my first open source contribution and will take a few hours to look at it this week.. Hey @BookOfGreg I'm still working on this issue.  I wanted to update you on my work so far.\nI compared the versions of the Ruby gems from the broken builds and the working builds and did not find a difference.  I then thought it might be the version of Chrome that was the issue, but changing it in the PR above did not work.\nMy next step is to set up the local dev environment on my computer.  I'm going to use rbenv to manage the two versions of Ruby we're interested in, 2.3.0 and 2.5.0, and try to get the builds to work.  Do you have any ideas of where to look?  \nI would also like to use TravisCI to troubleshoot since I'm finding the graphical interface of build history useful.  But I don't want to crowd your commit history.  Is the standard procedure just to develop locally or can I use TravisCI?. ",
    "faizaankhan": "I made an index under components and called others. Works for me like that. Putting the CandidateExam inside components folder didn't help. . Folder Structure:\n```\napp/javascript --\n## --components\n    ### --CandidateExam\n      --actions\n      --api\n      --components\n      --containers\n      --helpers\n      --reducers\n  ajax.js\n  constants.js\n  ## --packs\n  application.js\n```\nCandidateExam was already under components. react_on_rails is one of the important gems used, react-rails guys should have a brief tutorial on migrating from react_on_rails to react-rails. It feels very simple after completion, but lack of sources made it tough. I might be writing one blog to do the same. . I had already solved it, It works well this way: \n\n. Making subfolder inside of the container was causing a problem, had tried everything logical and then had to do this brute force fix.. @BookOfGreg, my Application compiles successfully and ./bin/webpack-dev-server shows no error at all, also I am precompiled assets using the \"rake assets:precompile RAILS_ENV=production\" command and have also tried with  \"config.assest.compile =  true \" in production.rb. \nMy HTML shows just\n\"<div data-react-class=\"index\" data-react-props=\"{}\"></div>\"\nand have this \nLoading failed for the ",
    "FFEVER": "@faizaankhan I have the same problem. The application-abcdefg123.js file is in my public/packs folder but the webpage can't find (404). I've already config the config.action_controller.asset_host = ENV['ASSET_HOST'] but it didn't work. Could you explain more about your solution?\nEdit: I found my solution. I need to make Nginx recognize my public folder in order to serve public/packs. The solution is posted here.. ",
    "mendelk": "@BookOfGreg Should I try coming up with a solution to avoid relying on Turbolinks being global, or should I expand the README to clarify this possibility? The former is probably more \"correct\", but will require greater changes.. ",
    "qxchen6": "I want it works like the first way but written by the second\ud83d\ude02 .It makes me sad there's no option in react_component helper which supports insert a component to another . However I solved this by writing ApplicationLayout Component in every slim page . That is the first way you mentioned .. \nI didn't describe it clearly .\nThe requirements and descriptions are :\n\nThe project I'm developing is not a Single-Page-Application .\nI am not using the react-router .\nAll page-jumping-actions managed by Rails but web-pages are rendered by React .\nI hope to write a layout in application.html.slim .\nI hope that it is a REACT COMPONENT not SIMPLE HTML .\nAbove is because that I'm using AntDesign . \nI want to write Layout using AntDesign (That's why the Layout must be a REACT COMPONENT in my project). \n\nIt's something like this :\nIn application.html.slim .\n```\nbody\n  // If there is some helper can supply a yield in component .\n  // For example , there is a helper named react_component_with_yield .\n= react_component_with_yield 'AppLayoutComponent' \n```\nIn Rails Controller FooController.rb\nclass FooController < ApplicationController \n    def bar\n        @component_data = [];\n    end\nend\nIn app/views/foos/bar.html.slim\uff1a\n```\n= react_component 'BarComponent'\n```\nAnd the Component looks like : \nAppLayout.js\n```\n... ...\nimport { Layout } from 'antd'\nconst {Content , Header ,Sider } = Layout\nconst AppLayout = () => {\n    return(\n        \n\n                header\n            \n\n\n\n                // I want BarComponent to be here .\n                // I know is wired but it's the only way i could thinkout\n                // for example , there is a flag called rails_yield\n            rails_yield\n\n            // every slim-page where react_component helper is called will insert here .\n            // repeat once again ,  i know it's wired ,but how can i make the Layout in application.html.slim to be a Component ?\n        </Content>\n        </Layout>\n    </Layout>\n)\n\n}\n```\nIf i use the way u suggest , like :\nbody\n  header \n    | this is header\n  section\n    = yield\nIt means that the layout is simple HTML TAGS but not react components . Also means that I can not use AntDesign's Layout components ... :(\nOr . I have to import AppLayout Components in every Component Like This : \n```\n... ...\nimport AppLayout from './AppLayout'\nconst BarComponent = () => {\n    return (\n        \n\n                bar bar bar \n            \n\n    )\n}\n```\n:(\nMaybe it is the problem of my project-structure-design . It's a very old and large project , hard to refactor .\nI think U are right . The react-rails gem is simple and easy to use . I have tried the rails_on_react , it's too complex for me .\nI will keep importing AppLayout Components in every Component to keep development schedule until I find A better way . Or refactor the structure-design .\nThanks .\n. ",
    "mazli84": "The way I see it a potential solution is that you sniff the ant design rendered HTML. After all React is rendered out to simple HTML tags. So you grab the ant design HTML structure, add ant design CSS to your layout and then use the React components where they are necessary. . ",
    "NSLog0": "@BookOfGreg you just mentioned about require in each JS file. How do you require or inject into these files? \nIs that method of react-rails?. I'm not sure about import and require function I never success with it. I always got error. Maybe I config something wrong?. . ",
    "krystof-k": "I see, that's a pity. This is the approach we will probably take, but that requires doing something in React we hoped to do in Rails.\nAnyway, if anyone has an update on this, I would be happy to hear about that in this issue.. ",
    "acidcrash2005": "Yes it is a common mistake of gsap, when use ssr. gsap don't work correctly on node.js. But I wont to see what the errors node brake. In console i see just error message from ruby.\nHow I can see errors of node in terminal console?. Solution is:\nIn file packs/application.js I create a global variable window.gsap = gsap.\nhttp://joxi.ru/V2V5e6atxXGzKm\nIt is work well!. I found the problem! In the StaticRouter I put the incorrect path for location prop. Now work done. \n<StaticRouter location={this.props.location} context={{}}>\n                    {this.props.children}\n                </StaticRouter>\nBut have a new problem!\nHow to get request URL for node server?\nNow I try to do something like this: <%= react_component(\"react/source\", {\n         ...myDtata\n          url: '/server_url_path'\n      }, prerender: true) %>\nAn in index file have:\n<Provider store={store}>\n            <Router location = { store.getState().url }>\n                <Fragment>\n                    <Route path=\"/react\" component={Songs} />\n                    <Route path=\"/playlits\" component={PlayLists} />\n                </Fragment>\n            </Router>\n        </Provider>\nIt is work, but I think it is not a good decision, because for this I need Another one reducer for URL param.\nHow normally get URL pathname for node server to transmit it to the StaticRouter location?. ",
    "joshchernoff": "Whoops, thought this was related to react-rails, my bad. \nhttps://github.com/zalmoxisus/redux-devtools-extension/issues/320. ",
    "hasahmed": "@BookOfGreg Yes that makes sense. Would be nice though!\n@ttanimichi Cool thanks for the heads up.. ",
    "zucler": "Hi there, has there been any progress on this? It would be great if you guys could add Webpacker 4.x support. Thanks in advance!. ",
    "petevk": "Hey there, I'm not sure if this was blocked on a stable release of webpacker v4, but as of a few minutes ago it's been released.. ",
    "StanBright": "For the record, I just upgraded https://www.saashub.com to use webpacker 4 and it seems to work fine with react-rails (2.4.7) \ud83c\udf89 . ",
    "bcharna": "Whoops, I missed the part in the README that discusses config.react.server_renderer_extensions and config.react.server_renderer_directories. I needed to modify those, my issue is resolved now.. ",
    "jdfm": "@bcharna Although I have this issue as well on a project I'm working on, I don't think this is related to react-rails at all, but indeed webpack, so, I'm thinking reporting it to the https://github.com/rails/webpacker people will be more useful.. ",
    "dachinat": "Same problem. I have the same problem.. Any idea what do do?. ~For now, as a workaround I have used babel-plugin-transform-require-ignore~\n~babel.config.js~\n~...\nplugins: [\n      ...,\n      ['babel-plugin-transform-require-ignore',\n        {\n            extensions: ['.scss']\n        }\n      ],\n...~\n~or better, disregard previous code~\n\n~For now I use:~\n~try {\n    require('./../scss/main.scss');\n} catch(e) { console.error('In server environment'); }~. I found a solution:\n\n. Hello, I'm interested with this too, been trying different things for several hours already.\nI'm getting window is not define upon importing react-loadable however.. ",
    "dustinsoftware": "Hi there \ud83d\udc4b \nI implemented support for styled-components, emotion, and others in ReactJS.NET\nStyled components example\nDuring server render, this is where the custom render functions get invoked.\nSome documentation is here. Technically any consumer that implements IRenderFunctions can pass that along and it will get used during render, but I didn't document that functionality.\nHope that helps for whoever wants to take a stab at implementing it here.. ",
    "armin86er": "Reproduction script:\n```bash\n!/bin/bash\ngem install rails --version=4.2.0 --no-ri --no-rdoc\nrails 4.2.0 new foo\ncd foo\nbundle install\nbin/rails g scaffold bar\necho \"gem 'webpacker'\" >> Gemfile\necho \"gem 'react-rails'\" >> Gemfile\nbundle install\nbin/rake webpacker:install\nbin/rake webpacker:install:react\nbin/rake db:migrate RAILS_ENV=development\nbin/rails g react:install\nbin/rails g react:component HelloWorld greeting:string\necho \"<%= react_component('HelloWorld', { greeting: 'hello' }, prerender: true) %>\" >> app/views/bars/index.html.erb\nadding \"<%= javascript_pack_tag 'application' %>\" to body in app/views/layouts/application.html.erb\nchange 'hmr: false' to 'hmr: true' in 'config/webpacker.yml'\nstart 'bin/webpack-dev-server'\nstart 'bundle exec rails server -e development'\nrequest 'http://localhost:3000/bars'\n``\nThe last five steps needs to be done manually, the lines before can be executed as a shell script and results in the describedReferenceError: window is not defined. Thank you for the confirmation ( and for your work onreact-rails` gem ;)\nMy team is just starting to migrate our project to use react-rails and webpacker, so this is all new to us.\nAs you pointed out it does not make sense to have HMR in server rendering mode, but as far as I understand it, this is only true for the first rendering, isn't it? \nCause all the webpack (and react) sources gets send to the client anyway and further renderings will be done on client-side. That brings me to the assumption that webpacker just needs a case for not relying on the window object on first render, which (maybe) means the issue should be addressed in webpacker gem, I'm not sure.. Interesting, thanks for the explanation! I'm looking forward to it \ud83d\ude0a . ",
    "kapso": "Quick update: I was able to get the app pass error free on assets pipeline using version 1.11.0 phew:) Now testing the app functionally to make sure all is green.\nThanks @BookOfGreg for the quick response, much appreciated. I will close this after my tests. Thanks again.\n. All looks good, closing this issue. Thanks.. ",
    "LauraAubin": "Say you have home.html.erb and you render a React component called Frame. Now inside the React component you can style the page and add content, but say inside this page you also want a button called Submit form to open another rails view called submit.html.erb. How can you call that action inside of the React component?. Another use case would be if you wanted to store the value of the component's state in a variable used in a Rails model. \nIn general, I'm curious if there is a way to get data to come back up from the React component (like a callback). ",
    "atebit": "nvmd, had to force the version. For some reason it was using an old one.. ",
    "benbristow": "@BookOfGreg reverted.. @BookOfGreg The first time I ran the tests on my machine (I assume they're ran with a simple rake ?) I was getting tons of errors about not being able to resolve Turbolinks on the controller tests.\nI can roll it back if you want.. ",
    "j-clark": "Any opinions on this?. ah, good call on version. as far as i can tell, it looks like deep_transform_keys was added in rails 4. i think as_json goes back to 2.3 (according to apidock). i don't know if they were necessarily added at the same time, but i'm pretty sure that anything responding to to_json (which is already called in the view helper) will also respond to as_json\ni think putting this in a patch version is probably too risky. someone is inevitable passing in active record objects, which would get serialized as json correctly, but not camelized. then getting this update would likely break their apps. and this is kind of tricky to track down.\ni'll update the docs later today. is it just the README? \nthanks!. ",
    "rahulakurati": "Even, I could able to reproduce this\n\nReferenceError: Set is not defined\n  (execjs):35:458\n\nwhen I'm using server-side rendering (including {prerender: true} in the helper method). However, client side rendering is working good. Any suggestions for fixing it?. > Even, I could able to reproduce this\n\n\nReferenceError: Set is not defined\n(execjs):35:458\n\nwhen I'm using server-side rendering (including {prerender: true} in the helper method). However, client side rendering is working good. Any suggestions for fixing it?\n\nInstalling the mini-racer gem on my repo fixed the issue for me. . ",
    "HeroProtagonist": "Hi! I can take look at this. PR to come. Thanks for the review! I will address the comments later today and update. ",
    "dlipeles": "@BookOfGreg  It appears it's been removed in this PR, perhaps react-rails needs to update its dependencies? . @BookOfGreg please try this out\nmkdir test\ncd test\nnpm init (create package.json)\nnpm install react-rails\nfound 18 vulnerabilities (16 low, 2 high)\n  run `npm audit fix` to fix them, or `npm audit` for details\nnpm audit - result. Apologies @BookOfGreg\nIt turns out npm react-rails is a different package than gem react-rails, my mistake. But it might be a good idea to register this repo with npm, as this is definitively the react-rails people are looking for. \n. ",
    "OliverJAsh": "I'm also having this issue. Note I don't think it's specific to react-rails. https://gist.github.com/bvaughn/25e6233aeb1b4f0cdb8d8366e54a3977#gistcomment-2823082. Fix here: https://gist.github.com/bvaughn/25e6233aeb1b4f0cdb8d8366e54a3977#gistcomment-2823180.\nThis can now be closed.. ",
    "H-KE": "Thanks, @OliverJAsh!. ",
    "huacnlee": "@BookOfGreg ActiveSupport.on_load(:action_dispatch_integration_test) was coming from Rails 5.0.0, so 4.2 not support that.\nSee here example of ActionMailer:\nhttps://github.com/rails/rails/commit/9a642931fbcc4bab0edffe41d3e7bf59e250e90e\nHow a about here change to:\nrb\nActiveSupport.on_load(:action_view) do\n  include ::React::Rails::ViewHelper\n  ActionDispatch::IntegrationTest.send :include, React::Rails::TestHelper\nend. @BookOfGreg just updated. This my first time use react-rails, and I'm not use the prerender feature, so I don't know the render logic that did, would you please add prerender support after the PR merged?. I just updated for require test_helper by autoload, include helper by use ActiveSupport.on_load. ",
    "jho406": "Thanks @BookOfGreg. I'll add the project to the README when I get the chance.\nBest,\nj. ",
    "bragovo": "@HorizonShadow didn't help. Error still exists.. Sure.. Without styles SSR working fine with webpack-dev-server =) This is example app https://github.com/bragovo/wrr SSR working fine with WDS until this line commented https://github.com/bragovo/wrr/blob/master/app/javascript/components/App.js#L3\nUncomment it you'll see error.. It's works fine with webpacker 3.5.5. Problem only with 4.x version.. @dachinat yes, it's help me too.. Maybe problem in actioncable? I found es6 version of actioncable - https://github.com/eacaps/es6-actioncable. ",
    "Lukyhenson": "Okay, i'm going to create something compatible with github pages, thanks.. @hjJunior thanks buddy :+1: . ",
    "hjJunior": "Good idea! let me know if u need help. ",
    "RyanMcDonald": "I've created a repo using a fresh Rails 5.1.6.2 install that reproduces the issue using SplitChunks defaults: https://github.com/RyanMcDonald/react-rails-ssr-webpacker-splitchunks/blob/master/config/webpack/environment.js. ",
    "4ndv": "Setting id and data-turbolinks-permanent does not help:\nerb\n<%= react_component(\"ActiveTimer\", {}, class: 'active-timer-menu', 'data-turbolinks-permanent': true, id: 'active-timer-menu') %>\nhttps://github.com/turbolinks/turbolinks/blob/master/README.md#persisting-elements-across-page-loads. Looks like #962 is related to this. ",
    "tonymarklove": "This check is actually required, because on_change won't be called in production environment, which means that we have no @@file_checker object to work with.\n. Fair point. I have removed the extra check.\n. We are catching multiple files, but it ends up as a single large source block. So I have renamed to combined_components_source to better document its purpose.\n. ",
    "josh": "Could you just wrap this entire \"setup_vendor\" thing in config.assets.configure instead of using an initializer?\nSomething like\nruby\nconfig.assets.configure do |env|\n  tmp_path = File.join(env.root, 'tmp/react-rails')\n  # ...\n  env.prepend_path tmp_path\nend\n. ",
    "trungpham": "can we log the stack trace too?\n. ",
    "AG-Systems": "I think its a great idea. ",
    "bradpsheehan": "Thank you.. ",
    "railsme": "should be\nruby\nWebpacker.respond_to?(:config) ? Webpacker.config : Webpacker::Configuration. ",
    "bradleesand": "The new singleton implementation of Webpacker::Configuration no longer has entry_path. Instead, Webpacker::Configuration.source_path.join(Webpacker::Configuration.entry_path) becomes Webpacker.config.source_entry_path. The <<- syntax allows the closing HEREDOC to be indented but it won't strip space from the content so this works just fine.. It works..... but is it correct?. I think this is correct as-is: Webpacker.config.source_entry_path. ",
    "codevedas": "yep. its done.. "
}