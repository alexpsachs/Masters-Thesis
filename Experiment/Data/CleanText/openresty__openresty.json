{
    "dobe": "found it myself ... on would say RTFM ;-) i had to add ldconfig to my path like:\n export PATH=$PATH:/sbin\n. ",
    "agentzh": "I'll add an explicit check for ldconfig in PATH in ngx_openresty's configure script when luajit is enabled. I myself also ran into this issue when building ngx_openresty on a fresh debian box :P\n. On Mon, Aug 22, 2011 at 8:36 AM, ikhoyo\nreply@reply.github.com\nwrote:\n\nIncidentally, it's running on Hardy and openresty 1.0.4, drizzle 7-2011.08.24, and mysql 5.0.\n\nIt'll be helpful if you give the exact version number of\nngx_openresty, i.e., 1.0.4.2, for example ;)\nAlso, the output of the \"uname -a\" and \"/path/to/nginx -V\" will be\nhelpful too :) As I commented in the ngx_drizzle ticket, please try\nout the latest stable version of ngx_openresty first :)\nI'll add more debugging outputs to ngx_drizzle to ease debugging shortly.\nThanks!\n-agentzh\n. On Mon, Aug 22, 2011 at 1:06 PM, ikhoyo\nreply@reply.github.com\nwrote:\n\nI had a difficult time getting libdrizzle compiled and linked with OpenResty on CentOS 6 also, and finally just installed it with:\nyum install libdrizzle libdrizzle-devel\nThat worked, and everything seems to be working. The libdrizzle version is 0.8-6. Will that be a problem?\n\nNo, libdrizzle 0.8 is known to have serious bugs in its state machine.\nInstalling libdrizzle 1.0 is now required and shouldn't be painful if\nyou take a look at this document:\nhttp://openresty.org/#DrizzleNginxModule\n\nI am using the latest version of OpenResty.\n\n1.0.5.0 or 1.0.5.1rc2?\n\nlibdrizzle is a real headache though. As I said, I had no problem on my Mac (10.6.7), so I was very surprised to have all these issues on Linux. It's definitely libdrizzle though, but what exactly the problem was, I don't know.\n\nI suppose your Mac is 64-bit while your Linux is 32-bit, no?\nRegards,\n-agentzh\n. On Tue, Aug 23, 2011 at 1:50 AM, ikhoyo\nreply@reply.github.com\nwrote:\n\nI have it working with the compiled driver. I was getting a library not found after compiling it, but I just needed to do an ldconfig.\n\nYou can use the --with-libdrizzle option to specify the location of\nyour installed libdrizzle, as documented in the wiki page that I\nmentioned earlier:\nhttp://openresty.org/#DrizzleNginxModule\nRegards,\n-agentzh\n. On Mon, Aug 22, 2011 at 11:59 PM, ikhoyo\nreply@reply.github.com\nwrote:\n\nYes, my Mac is 64 bit. Can I use the drizzle rpm described here: http://docs.drizzle.org/installing/redhat.html ?\n\nI think so :)\nRegards,\n-agentzh\n. Consider it resolved.\n. @msekharmca you can always add support for that yourself by a little bit of Lua ;)\n. On Wed, Jan 4, 2012 at 11:25 PM, Justin Hart\nreply@reply.github.com\nwrote:\n\nWhen linking the final objs/nginx,\nUndefined symbols for architecture x86_64:\n\u00a0\"_pcre_free_study\", referenced from:\n\u00a0 \u00a0 \u00a0_ngx_http_lua_ngx_re_match in ngx_http_lua_regex.o\n\u00a0 \u00a0 \u00a0_ngx_http_lua_ngx_re_gmatch in ngx_http_lua_regex.o\n\u00a0 \u00a0 \u00a0_ngx_http_lua_ngx_re_sub_helper in ngx_http_lua_regex.o\n\u00a0 \u00a0 \u00a0_ngx_http_lua_cleanup_pcre_study_data in ngx_http_lua_regex.o\nld: symbol(s) not found for architecture x86_64\ncollect2: ld returned 1 exit status\nmake[2]: *** [objs/nginx] Error 1\nthis was configured with a plain './configure' line.\n\nThank you for the report. Could you please try the latest devel\nversion of ngx_openresty on your side? The latest devel version is\n1.0.10.39, which can be downloaded here:\nhttp://openresty.org/#Download\nThanks!\n-agentzh\n. On Thu, Jan 5, 2012 at 10:20 AM, agentzh agentzh@gmail.com wrote:\n\nThank you for the report. Could you please try the latest devel\nversion of ngx_openresty on your side? The latest devel version is\n1.0.10.39, which can be downloaded here:\nhttp://openresty.org/#Download\n\nIf the problem persists, please check that if you have multiple\nversions of PCRE installed in your system. It seems that the PCRE\nheaders and PCRE library files do not match in your system's default\nsearch path. If it's indeed the case, please fix it by explicitly\nspecify the search paths for headers and libraries, like this:\n./configure --with-cc-opt=\"-I/path/to/pcre/include\"\n--with-ld-opt=\"-L/path/to/pcre/lib\" ...\nRegards,\n-agentzh\n. Okay, given that 1.0.10.39 works for you, I'm closing this ticket :)\n. On Sun, Jan 29, 2012 at 5:36 PM, Norman Khine\nreply@reply.github.com\nwrote:\n\nhello,\njust to confirm that on an OSX 1.0.10.40 with Homebrew works by doing the following:\n\nThank you for the information :)\nBest regards,\n-agentzh\n. Hello\nOn Thu, Sep 20, 2012 at 9:04 PM, JT Archie notifications@github.com wrote:\n\nWith ngx_openresty-1.2.1.14, this issue is occurring again. I followed the recommended steps for pcre and adding to ./configure, but still end up with the following:\nld: symbol(s) not found for architecture x86_64\n\nIt is very likely that your PCRE header files and library files do not match.\nPlease ensure that your PCRE installation is sane. Alternatively you\ncan build a custom PCRE installation under some locations, like,\n/opt/pcre/, or you can just let nginx build the PCRE source for you\nvia ./configure --with-pcre=/path/to/your/pcre/source/tree.\nBest regards,\n-agentzh\n. @laghatea That error message means the ngx_echo module is not included in the nginx server you're trying to start. Because ngx_echo module is enabled in ngx_openresty by default, it is very likely that you're starting the wrong nginx server (maybe you have multiple nginx installations in the same box?).\nNote that by default, the nginx executable installed by openresty is located at /usr/local/openresty/nginx/sbin/nginx. You can use the absolute path to start the nginx server.\n. Please read the official documentation for instructions of installing OpenResty on Mac OS X:\nhttp://openresty.org/#Installation\nEssentially, it's as simple as\nbrew install pcre\n./configure \\\n             --with-cc-opt=\"-I/usr/local/include\" \\\n             --with-ld-opt=\"-L/usr/local/lib\" \\\n             -j4\nmake -j4\nsudo make install\nwhere we assume that your system has 4 spare CPU cores.\nGood luck!\n. @grasses A quick google search found this solution:\nhttp://forum.nginx.org/read.php?2,256012,256064#msg-256064\n. @grasses I've tested on my macbook (Mac OS X 10.10.4) the aforementioned work-around works:\nbash\nexport KERNEL_BITS=64\n./configure --with-cc-opt='-I/usr/local/Cellar/pcre/8.37/include/' \\\n       --with-ld-opt='-L/usr/local/Cellar/pcre/8.37/lib' \\\n       --with-openssl=$HOME/work/openssl-1.0.2d -j9\nmake -j9\nsudo make install\nBTW, only use sudo for make install otherwise the environments may change.\n. @grasses It seems that this is a known issue with recent versions of OpenSSL on Mac OS X. And it only happens when you try to use the --with-openssl=PATH option to build OpenSSL from source directly via NGINX's build system (yes, it's not specific to OpenResty, but a general NGINX issue).\nI'll incorporate the work-around directly into OpenResty's build system so that the users will no longer have to worry about the details.\nThanks for the report!\n. @grasses Glad it works for you now. You're welcome :)\n. @bsyk Thanks for the info. Maybe we should set the environment automatically in OpenResty's build system.\n. @bsyk Fixed in git master.\n. @lavenkin Seems like you are in the wrong current working directory. Try the following commands (tested on my Macbook Pro):\nbash\nbrew install pcre\nwget https://openresty.org/download/ngx_openresty-1.9.7.1rc2.tar.gz\ntar -xvf ngx_openresty-1.9.7.1rc2.tar.gz\ncd ngx_openresty-1.9.7.1rc2/\n./configure --with-cc-opt=\"-I/usr/local/include\" --with-ld-opt=\"-L/usr/local/lib\" -j5\nmake -j5\nsudo make install\n. On Mon, Jan 16, 2012 at 11:15 PM, Vivus Ignis\nreply@reply.github.com\nwrote:\n\nTrying to use luasocket from luarocks leads me to relocation error (detailed log below).\n\nWell, thank you for the report but it seems to be an issue with\nLuaSocket's build system on Solaris and it's irrelevant to\nngx_openresty, see the discussions here:\nhttp://lua-users.org/lists/lua-l/2007-08/msg00235.html\nAlso, I'm afraid you should not use LuaSocket in ngx_lua in the first\nplace because it will block the nginx worker processes and hurt\nperformance significantly. I'm currently working on the \"cosocket\" git\nbranch in the ngx_lua project:\nhttps://github.com/chaoslawful/lua-nginx-module/tree/cosocket\nAnd I'm going to merge it back to git master by the end of this month.\nThe cosocket API is intended to be 100% compatible with LuaSocket's\nAPI. You can find more information regarding the cosocket API in this\nthread: https://github.com/chaoslawful/lua-nginx-module/issues/35\nThanks!\n-agentzh\n. Nice work! If there's anything that we can do to help you, please don't hesitate to let us know ;)\nThanks!\n. On Mon, Apr 23, 2012 at 9:58 AM, JT Archie\nreply@reply.github.com\nwrote:\n\nThere is something that I am trying to get to work. Heroku requires that logs be displayed to STDOUT while the process is running. For example when Rails is running, it writes the log directly to STDOUT. Nginx automatically prints to a file. Is there any to just redirect the log output STDOUT?\n\nYes, just use /dev/stdout as the error log file name:\nerror_log  /dev/stdout notice;\nAlso, it makes sense to disable daemon mode in nginx:\ndaemon off;\nRegards,\n-agentzh\n. Recent versions of ngx_lua also requires OpenSSL. Do you really want to eliminate this dependency?\n. I think there is a warning already in Nginx's configure output? It is not an error message though. It indeed makes sense to make it croak early.\n. And the final summary?\n. I meant \"  + sha1 library is not found\" is a warning. Otherwise, this line would be \"  + sha1 library is not used\". And sure, we really need an error message here :)\n. Consider it resolved.\n. It seems that your pcre headers and pcre libraries in the default search path do not match at all? I see you have to explicitly specify the library search path via the -L option.\n. Thank you for the report. It's strange that the lua.org website removed that patch. For now, you can just use the pre-built bundle source tarball from here:\nhttp://openresty.org/#Download\nI'll fix the bundle generator later when I'm back to my house. I'm on a trip with my wife atm :)\n. I've fixed this in git master HEAD. Could you please try it out again? Thanks!\n. On Mon, Mar 12, 2012 at 11:12 AM, tocer\nreply@reply.github.com\nwrote:\n\nI \u00a0package it on Archlinux https://aur.archlinux.org/packages.php?ID=57533 . Thanks for good work.\n\nThank you for your contribution!\nBest,\n-agentzh\n. On Fri, May 25, 2012 at 6:55 AM, mvreg\nreply@reply.github.com\nwrote:\n\nHello!\nDo you have any plans to implement lua cosocket sending UDP support? I'm searching for a solution to send (no receive required) using UDP to 3 different destinations (we would try to implement library for each destination, however we need lua cosocket support).\n\nI'm going to implement the UDP cosocket API by the end of June :) Or\ndo you have the tuits to contribute patches (or funds or something\nlike that) to speed up that process?\nBest regards,\n-agentzh\n. The UDP cosocket API has already been included in the ngx_openresty 1.2.1.7 release. So I'm closing this.\n. Hello!\nOn Fri, Aug 3, 2012 at 12:57 AM, liujianping\nreply@reply.github.com\nwrote:\n\ntest init_by_lua&init_by_lua_file directive at http & server & location section \uff0call failed\uff1a\noutput \uff1a [emerg] unknown directive init_by_lua&...\n\nWhich version of ngx_openresty are you using? init_by_lua was first\nadded in ngx_openresty 1.2.1.5. so please ensure that you have a\nversion newer than that.\nBest regards,\n-agentzh\n. @higkoo Please do not hijack closed issues. And you fail to give enough details. I cannot reproduce the problem with the latest OpenResty 1.11.2.5 release on Mac OS X and Linux:\nagentzh@imac5k ~ $ resty -e 'ngx.say(\"hello\")'\nhello\nagentzh@fedora64 ~ $ resty -e 'ngx.say(\"hello\")'\nhello\nAnd I'm pretty sure it works fine on Win32 as well.\nIf you get this error, then it means you are using the wrong nginx binary or your ngx_lua module is so ancient that it does not have this directive yet.. Hello!\nOn Thu, Nov 8, 2012 at 11:11 PM, leaf notifications@github.com wrote:\n\nI noticed in lua-5.1.5-disable_lua50_compat.patch you have\nundef LUA_COMPAT_OPENLIB\nIs there any specific reason to this?\n\nBecause the Lua authors strongly recommend disabling these:\nhttp://lua-users.org/lists/lua-l/2012-02/msg00639.html\nTo quote:\n\"We strongly recommend that Lua 5.1.5 be build without compatibility\nwith Lua 5.0, which remains turned on by default in luaconf.h. To turn\nit off, just add the lines below in the \"Local configuration\" section at\nthe end of luaconf.h:\nundef LUA_COMPAT_VARARG\nundef LUA_COMPAT_MOD\nundef LUA_COMPAT_LSTR\nundef LUA_COMPAT_GFIND\nundef LUA_COMPAT_OPENLIB\n\"\nAlso, you're strongly recommeded to enable LuaJIT 2.0 instead of Lua\n5.1.5 in your OpenResty build by passing the --with-luajit option to\n./configure.\n\nIt prevents me from loading some modules, namely the ones that come with LuaSocket.\n\nAre you using LuaSocket directly? It will tragically block your Nginx\nworker processes when being used in ngx_lua.\nYou're strongly recommended to use ngx_lua's cosocket API instead:\nhttp://wiki.nginx.org/HttpLuaModule#ngx.socket.tcp\nhttp://wiki.nginx.org/HttpLuaModule#ngx.socket.udp\nThey're mostly compatible with LuaSocket's API.\nBest regards,\n-agentzh\n. Hello!\nOn Sat, Nov 10, 2012 at 4:05 PM, leaf notifications@github.com wrote:\n\nI also wanted to see if I could use luasocket.http.request to make http requests with ngx.socket.tcp, but that doesn't appear to work. (Is it better to make http requewsts with proxy_pass or ngx.socket.tcp?)\n\nUsing ngx.socket.tcp is preferred over nginx subrequests.\nYou can check out lua-resty-memcached, lua-resty-redis, and\nlua-resty-mysql and see how to construct a nonblocking TCP client atop\nngx.socket.tcp.\nPatching existing LuaSocket http libraries with ngx.socket.tcp may be\ntricky because ngx_lua only supports the core subset of the LuaSocket\nAPI. You can see this kind of \"monkey patching\" for the LuaSocket smtp\nlibrary here on the openresty-en mailing list:\nhttp://groups.google.com/group/openresty-en/tree/browse_frm/month/2012-8/ed18bb16f9257ead\nAlso, a user has contributed a lua-resty-http library for ngx_lua:\nhttps://github.com/liseen/lua-resty-http\nIt may have a lot of rough edges though.\nIf you need a full HTTP client in ngx_lua right now, then you can just\nuse ngx.location.capture with ngx_proxy, which is the most mature and\nfeature complete solution at the moment.\nBest regards,\n-agentzh\n. thanks for bringing this up. I'll look into this :)\n. @bearnard Please try out the following ngx_openresty pre-release:\nhttp://openresty.org/download/ngx_openresty-1.5.9.1rc4.tar.gz\nThis includes lua-cjson 2.1.0.1 tagged from my own github fork:\nhttps://github.com/agentzh/lua-cjson\nIt supports the cjson.encode_empty_table_as_object() configuration\nfunction contributed by Jiale Zhi.\nFeedback welcome! Thanks!\n. Already done in recent openresty.\n. Hello!\nOn Thu, Nov 15, 2012 at 5:25 AM, Brian Akins notifications@github.comwrote:\n\nDo we want to include an option to build and use\nhttps://github.com/Neopallium/mmap_lowmem ? I'm doing this by hand for\none project, but it may be nice to have it (optionally) included with\nopenresty.\n\nI'll think about it :) Thank you!\nBest regards,\n-agentzh\n. Hello!\nIn short, this is not a bug but a mistake on your side.\nWhen you know you may change the size of the original body and the original\nresponse has a Content-Length header, you should adjust the Content-Length\nresponse header accordingly in header_filter_by_lua, for example.\nTo quote the original documentation:\n\"When the Lua code may change the length of the response body, then it is\nrequired to always clear out the Content-Length response header (if any) in\na header filter to enforce streaming output, as in\n```\nlocation http://wiki.nginx.org/NginxHttpCoreModule#location /foo {\n    # fastcgi_pass/proxy_pass/...\nheader_filter_by_lua 'ngx.header.content_length = nil';\nbody_filter_by_lua 'ngx.arg[1] = {string.len(arg[1]), \"\\n\"}'\n\n}\n```\n\"\nSee http://wiki.nginx.org/HttpLuaModule#body_filter_by_lua for details.\nOn Wed, Dec 12, 2012 at 2:39 AM, subdragon notifications@github.com wrote:\n\nbody_filter_by_lua 'ngx.arg[1] = string.upper(ngx.arg[1])'; in the\nHttpLuaModule docs works.\n\nThis worked for you was just because string.upper() did not change the\nlength of ngx.arg[1], hence no change to the total size of your response\nbody.\n\nstring.gsub works fine sometimes, when it does not work, the curl would\nget the correct content and then hang for a long time\ncurl hang here just because you made the response body smaller than the\noriginal one but the Content-Length header was not adjusted (hence bigger\nthan expected), so curl believed there was still more body data to come,\nthus waiting forever until it is timed out.\n\n-agentzh\n. Hello!\n2012/12/20 Ristona notifications@github.com\n\n\u6700\u8fd1\uff0c\u6211\u901a\u8fc7Thrift\u5b9e\u73b0\u4e86\u4e00\u4e2aRPC\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u8f7b\u91cf\u7ea7\u7684\u6846\u67b6\u3002\u7531\u4e8eRPC\u65e0\u6cd5\u7a7f\u900f\u9632\u706b\u5899\uff0c\u6545\u5916\u7f51\u7684\u5ba2\u6237\u7aef\u975e\u5e38\u6709\u53ef\u80fd\u65e0\u6cd5\u8c03\u7528\u670d\u52a1\u5668\u3002IIS\u662f\u652f\u6301RPC\nOVER HTTP\uff0c\u901a\u8fc7MS\u7684\u4ecb\u7ecdIIS\u4e5f\u53ea\u662f\u505a\u4e00\u4e2aPRXOY\u3002\u56e0\u6b64\uff0c\u6211\u5c31\u60f3\u5230NGX\u6709\u6ca1\u6709\u7c7b\u4f3c\u7684\u6a21\u5757\u3002\n\n\u4f60\u603b\u662f\u53ef\u4ee5\u65b9\u4fbf\u5730\u5229\u7528 ngx_lua \u6a21\u5757\u6765\u81ea\u5df1\u5b9e\u73b0\u4efb\u610f\u7684 RPC \u901a\u4fe1\u6846\u67b6\uff1a\nhttp://wiki.nginx.org/HttpLuaModule\nBest regards,\n-agentzh\n. It seems that your Nginx is not linked with OpenSSL somehow. Could check the output of the following command?\nldd /path/to/nginx\nAre you using ngx_openresty or the standard nginx distribution? If you're using the latter, you need to specify the option --with-http_ssl_module while running ./configure. This --with-http_ssl_module option is enabled by default in ngx_openresty.\nBTW, you're recommended to use the LuaJIT 2.0 version bundled with the ngx_openresty (just specify the --with-luajit option) instead of specifying an external one that is usually older.\nBest regards,\n-agentzh\n. Consider it resolved.\n. Thank you for the report! Already fixed in master. Please try out the 1.2.6.1rc3 prerelease:\nhttp://agentzh.org/misc/nginx/ngx_openresty-1.2.6.1rc3.tar.gz\n. Hello!\nOn Tue, Jan 8, 2013 at 11:06 AM, \u9879\u8d85 notifications@github.com wrote:\n\ni built openresty ngx_openresty-1.2.4.14 on my osx 10.8.1\nbut when use make -j the error info like this:\nmake[2]: gcc: Resource temporarily unavailable\nWhen Gnu make is invoked with the -j option without an integer parameter,\nGnu make will spawn parallel job workers as many as possible, easily\nexhausting your system resources, as demonstrated above.\n\nBasically, if your system has N CPU cores, you should specify -j N or -j\n(N+1), for example, in case of a dual core CPU:\nmake -j2\nor\nmake -j3\nBest regards,\n-agentzh\n. Hello!\nOn Wed, Jan 23, 2013 at 5:45 AM, codecrumb notifications@github.com wrote:\n\nit would be nice to be able to pull config info from zookeeper\nPersonally I'm not really familiar with zookeeper, but maybe you can\nconsider writing a lua-resty-zookeeper library using ngx_lua's cosocket\nAPI? You can take a look at the existing lua-resty-redis,\nlua-resty-memcached, lua-resty-mysql libraries as examples:\n\nhttps://github.com/agentzh/lua-resty-redis\nhttps://github.com/agentzh/lua-resty-memcached\nhttps://github.com/agentzh/lua-resty-mysql\nBest regards,\n-agentzh\n. Hello!\nOn Sun, Apr 14, 2013 at 6:45 AM, \u5085\u6d77\u5e73 notifications@github.com wrote:\n\nhi, I have made a lua binding for apache zookeeper(zklua), which may be\nuseful to this answer I think. for more detail go to:\nhttps://github.com/forhappy/zklua , any advices about zklua are\nappreciated, I hope I can help too ;-).\nThanks for sharing with us!\n\nJust a quick question: does it use ngx_lua's cosocket API? Otherwise use of\nthis Lua library with ngx_lua would block the nginx worker process on\nnetwork I/O :)\nBest regards,\n-agentzh\n. Hello!\nOn Mon, Apr 15, 2013 at 1:59 AM, \u5085\u6d77\u5e73 notifications@github.com wrote:\n\nI'll look into the ngx_lua's cosocket API to see if I can make a project\nlua-resty-zookeeper later ;-).\nYes, this is the recommended approach :)\n\nBest regards,\n-agentzh\n. Patches welcome! Volunteers welcome! :)\n. It may be worth mentioning that I'm also open to sponsorship :)\n. @xbsura You're welcome to contribute such a library! Just like existing ones like lua-resty-mysql and etc :)\n. Hello!\nOn Wed, Jun 1, 2016 at 7:01 PM, Ingo Sauerzapf wrote:\n\nA zookeeper client\nbasically establishes a permanent connection one zookeeper server and keeps\nit open. The client can not only read or write data to and from what\nzookeeper calls a znode (folder/file like), but it can also place watches\nfor changes. In case of a change the server notifies everyone that placed a\nwatch. I am now wondering how such a permanent connection would fit with the\ncosocket respectively with nginx all together. Any suggestion is very much\nappreciated.\n\nUsually we can create a timer handler in init_worker_by_lua* (or some\nother contexts except init_by_lua*), and make the timer handler run in\nthe background. Because cosockets support full-duplex, you can have 2\nlight threads reading from and writing to the same cosocket at the\nsame time (as long as the wire protocol permits).\nRegards,\n-agentzh\n. @IngoS11 Maybe you should add more logging to your Lua code especially when the cosocket methods return errors (well, they could). I don't have the time to debug your own Lua code logic for you, sorry. You have the responsibility :)\n. @IngoS11 BTW, github issues are reserved for real bug reports and development discussions. Such general discussions should happen in the openresty-en mailing list instead. Please see\nhttp://openresty.org/en/community.html\nThanks for your cooperation.\n. First of all, please do not post Chinese text on this project's github issues page. If you really want to use Chinese, then please post to the openresty (Chinese) mailing list in the future: https://groups.google.com/group/openresty Thank you for your cooperation.\nRegarding your problem, please check out your Nginx error log file to see if there is any errors. If not, please consider enable the Nginx debug logging as documented here: http://wiki.nginx.org/Debugging#Debugging_log\n. Hello!\nOn Wed, Apr 3, 2013 at 2:00 AM, Andy Yuan wrote:\n\nAfter enabled the debuggin_log, you can see that uwsgi response is 200 in\nthe error.log as follows.\nThe debugging logs are very helpful. It seems that ngx_uwsgi is having\nissues with my \"nonbuffered-upstream-truncation\" patch. I've removed the\npatch in the ngx_openresty 1.2.7.5rc1 prerelease:\n\nhttp://openresty.org/download/ngx_openresty-1.2.7.5rc1.tar.gz\nThank you for the report!\nBest regards,\n-agentzh\n. Okay, I think I've fixed the issue in the upstream-truncation patch. Could you please try ngx_openresty 1.2.7.5rc2 again?\nhttp://openresty.org/download/ngx_openresty-1.2.7.5rc2.tar.gz\nThanks!\n. Hello!\nOn Sat, Apr 6, 2013 at 7:32 PM, Andy Yuan notifications@github.com wrote:\n\nI'm afraid that the patch doesn't slove the problem :(\n2013/04/07 10:26:34 [debug] 13895#0: 3 http upstream exit: 0000000000000000\n2013/04/07 10:26:34 [debug] 13895#0: 3 finalize http upstream request: -1\nOkay, I've reproduced this on my side. This is an issue in the ngx_uwsgi\nmodule where it sets u->length but not u->pipe->length like ngx_proxy when\nthe Content-Length response header is present, thus leading to a false\npositive for response data truncation. The ngx_scgi module also has this\nissue.\n\nI've fixed the issue in the latest ngx_openresty 1.2.7.5rc3:\nhttps://github.com/agentzh/ngx_openresty/commit/13efb24\nPlease try out this version of ngx_openresty:\nhttp://openresty.org/download/ngx_openresty-1.2.7.5rc3.tar.gz\nThanks for the report!\n-agentzh\n. Thank you for the feedback! So I'm closing this :)\n. Hello!\nOn Sun, Apr 14, 2013 at 6:11 AM, Thomas12 notifications@github.com wrote:\n\nand get this error:\nchecking for LuaJIT library in /usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib and /usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/include/luajit-2.0 (specified by the LUAJIT_LIB and LUAJIT_INC env) ... not found\nThe feature test for LuaJIT failed.\n\nCould you please check out the contents of the file\n/usr/local/src/ngx_openresty-1.2.7.5/build/nginx-1.2.7/objs/autoconf.err on\nyour side? The details for this feature test should be in that file. Just\nfind it out.\nBest regards,\n-agentzh\n. Hello!\nOn Sun, Apr 14, 2013 at 11:55 AM, Thomas12 notifications@github.com wrote:\n\nThat compile error happened because I tried --with-ld-opt=\"-static\" which does not seem to work and caused the error above.\nIs there a way to compile the whole ngx_openresty statically, e.g. to use it in a chrooted environment?\n\nIn autoconf.err I found that:\nlj_clib.c:(.text+0x9d): undefined reference to dlclose'\n/usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib/libluajit-5.1.a(lj_clib.o): In functionclib_error_':\nlj_clib.c:(.text+0xb5): undefined reference to dlerror'\n/usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib/libluajit-5.1.a(lj_clib.o): In functionlj_clib_load':\nlj_clib.c:(.text+0x1df): undefined reference to dlopen'\nlj_clib.c:(.text+0x234): undefined reference todlerror'\nlj_clib.c:(.text+0x30c): undefined reference to dlopen'\nlj_clib.c:(.text+0x31d): undefined reference todlerror'\n/usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib/libluajit-5.1.a(lj_clib.o): In function lj_clib_index':\nlj_clib.c:(.text+0x49d): undefined reference todlsym'\n\nTo solve these specific linking errors, try --with-ld-opt=\"-static\n-ldl\". But you may have further linking issues.\nWhat kind of operating system are you using? Please keep in mind that\npure static linking is dead on modern Gnu systems, for example, and is\nalso troublesome on some other POSIX systems.\n-agentzh\n. Hello!\nOn Sun, Apr 14, 2013 at 2:08 PM, Thomas12 notifications@github.com wrote:\n\nThanks for your reply!\nUnfortunately it does not work with the additional \"-ldl\" - same error\nregarding luajit.\nTry adding \"-Wl,-E\" too to --with-ld-opt :)\n\n-agentzh\n. No surprise. Same errors here on my Fedora Linux x86_64. Static linking is broken on modern Linux. And there's nothing that can be done on my side. I'm closing this :)\n. Thank you for sharing!\nBut could you please repost it to the openresty-en mailing list for a wider audience exposure?\nhttps://groups.google.com/group/openresty-en\nThanks!\n-agentzh\n. Sorry, I don't see how this is related to my ngx_openresty project. You're just trying to connect to the drizzle server with your Java clients.\n. I'm closing this.\n. First of all, you'd better use the openresty-en mailing list for such discussions: https://groups.google.com/group/openresty-en\nTo answer your questions:\n1. You can use the built-in connection pools provided by the ngx_lua cosocket API. If you're using lua-resty-redis, you can find the set_keepalive method to achieve that: https://github.com/agentzh/lua-resty-redis#set_keepalive\n2. You'd better not to share a normal file handle across multiple concurrent requests while reading because it's hard and also expensive and get right.\n-agentzh\n. Also, I believe it's not a good idea to build general storage systems directly upon nginx because nginx's multi-worker single-threaded process model does not really fit this scenario :) Just my 2 cents.\n. I'm closing this.\n. Already replied on the openresty-en mailing list:\nhttps://groups.google.com/d/msg/openresty-en/215fTk3_ZOc/5DqfkoU3le8J\n. @paynechu You can already do this with ngx_lua's lastest git master via the ngx.worker.pid() and init_worker_by_lua directive. The new ngx_lua will get included in the next ngx_openresty release.\n. For your first case that uses \"echo\", you're getting a 400 error page just because you haven't read the request body and the request body data is treated as the second pipelined request by Nginx. A fix is simple: just add\necho_read_request_body;\nto your location @e400 and @e403.\nAlternatively, you can use ngx_lua to serve your error pages, for example,\ncontent_by_lua 'ngx.req.discard_body() ngx.say([[{\"error\":403}]])';\nYour second configuration works just because the standard ngx_http_static_module serving static files will automatically discard request bodies.\n. @sabaini Yes, it might be better for the Nginx core to automatically abort the connection in case that the request is finalized with an unread body.\n. @sabaini I've fixed this issue in ngx_echo. Now you no longer have to add the \"echo_read_request_body\" directive to your error page locations because ngx_echo now automatically discards the request body if you don't read it. And discarding the body is way more efficient than properly reading (and fully buffering) the body.\nThank you for showing how confusing this pitfall can be :) We should really fix it.\n. BTW, because you're using Lua anyway, you're recommended to use lua-resty-memcached instead:\nhttps://github.com/agentzh/lua-resty-memcached\n. Thank you for looking into this. I'll try upgrading the nginx core to 1.4.3 this week :)\n. Already upgrade the Nginx core bundled to 1.4.3 in the git repos.\nI'd like to see what my test cluster on Amazon EC2  would say about it :)\n. @ajayk Nice catch! Already applied your patch for the https change :)\n. @kidd Will you submit this patch to the nginx-devel mailing list? It'll be good if it can be part of the mainline Nginx core :)\nSee http://mailman.nginx.org/mailman/listinfo/nginx-devel\n. @kidd Instead of backporting patches from 1.5.x to 1.4.x myself, I'd rather migrate over to the nginx mainline release series directly in the coming ngx_openresty releases :) The Nginx team is now lagging behind in porting bugfixes back to their stable release series.\n. The last ngx_openresty mainline release is already based on 1.5.x. I'm closing this.\n. @zhaojianping This is usually an indication that your PCRE header files and PCRE library files do not match. Try specify the --with-cc-opt=\"-I/path/to/pcre/include\" and --with-ld-opt=\"-L/path/to/pcre/lib\" options for ./configure to ensure the headers are of exactly the same version.\n. @zhaojianping BTW, please do not use Chinese here. This place is supposed to be English only. Try posting such questions to the openresty (Chinese) mailing list instead for the future: https://groups.google.com/group/openresty\n. Consider it resolved.\n. @mholzgraefe AFAIK, leveldb is disk-based, which does not fit well with the event model in Nginx that is based on epoll/kqueue/etc. I think you'll have a hard time integrating leveldb directly into Nginx without using messy OS threads and locks and etc.\n. submitted a simplified version of your patch to the nginx-devel mailing list: http://mailman.nginx.org/pipermail/nginx-devel/2013-December/004647.html\nI'd see what Maxim Dounin would say on this :) Hopefully it'll get merged in the mainstream nginx core.\n. Committed a modified version of your patch to master as commit 0528788. Your patch is also incomplete because we also need to add shell commands to actually apply the patch to the Nginx core bundled in the util/mirror-tarballs script.\n. You don't need to edit ngx_lua's config file for this. You can just pass the --with-ld-opt=\"-ldl\" to nginx or openresty's ./configure script.\nBTW, this place is supposed to be English only. If you really want to use Chinese, please join the openresty (Chinese) mailing list and post there instead:\nhttps://groups.google.com/group/openresty\nThank you for your cooperation!\n. Oh right. the order matters. I'll look into this. Thanks for the feedback.\n. @cf2012 Just committed a fix to the git master branch of ngx_lua. Thank you for the report and sorry for the delay on my side!\n. @ai930 Please, no Chinese here. This place is considered English only. If you really\nwant to use Chinese, please join the openresty (Chinese) mailing list instead.\nPlease see https://openresty.org/en/community.html Thanks for your cooperation.\nAlso, please do not hijack and comment on unrelated github issues, especially this closed one. This is rude.. @mche Thank you for the contribution! Several comments though:\n1. Will you remove the Russian comments in the Lua source (preferably with their English equivalents)? People like me cannot read Russian, sorry.\n2. I think it's a bad idea to pollute the global Lua environment in your ip_blacklist.conf.lua file with your own Lua global variable names like ip_blacklist. I suggest turn it into a proper Lua module and just require it on demand. Lua modules are only loaded once anyway (thanks to the code cache), no matter how many times they are require()'d.\n. @Thomas12 Your API has a problem that when one socket has completed reading completely, the other socket will be in an inconsistent state. There is no easy way to re-initiate the pending receive on the Lua land. Not to mention there are various different receive modes anyway.\nThe ngx.thread API is created for such things. So please use ngx.thread.\n. @Thomas12 Well, an underlying read event is not sufficient for a cosocket's receive() call to complete immediately because the data arrived from the wire may be incomplete. So you may still risk waiting on the call.\n. @Thomas12 Have you configured Redis' own limits like \"maxclients\" and \"backlog\"?\nSee http://redis.io/topics/clients and http://download.redis.io/redis-stable/redis.conf\n. @Thomas12 Ensure you're not using load testing tools like ab, http_load, and weighttp that tend to reach the throughput limit in your concurrency level testing. Because that way you'll surely see increase in latency and timeout errors. Seeing socket errors is a clear sign of exceeding the throughput limit of your setup. Also, for increasing the throughput itself, it's better to locate the bottlenecks (with the on-CPU and off-CPU flame graph tools, for example) and optimize them.\n. @Thomas12 Nope, threads are much harder to get right. There was an attempt by Igor Sysoev to add multi-thread support to NGINX but he never added enough locks to get this work. It was a dead end. And as an NGINX developer, I'm happy that I don't have to deal with potential race conditions everywhere.\n. Consider it resolved.\n. @lhmwzy Thank you for the patch! I'll look into this later this week :) \n. Already applied your patch to master. Thank you for your contribution!\n. @mche Sorry for the delay on my side!\nI've had a closer look. Will you adjust the coding style a bit? I hope the bundled samples use a similar coding style as the official lua-resty-* libraries. Basically:\n1. use 4-space indentation,\n2. avoid source lines longer than 80 columns,\n3. strip line-trailing spaces.\nThank you for your patience!\n. @yc850k Please do you abuse title as the ticket content. It is rude.\nRegarding the question, you might find existing Lua libraries for murmur hash. Failing that, you're welcome to contribute your own Lua library for it.\n. @LazyZhu yes, ngx_auth_request has already been an official module in the nginx core. There is no  real differences because it is the same module from the same author.\n. @LazyZhu Already fixed in master. Thanks!\n. @tszming The patch was already merged in ngx_openresty's git repos. It will get included in the next OpenResty release. For the time being, you can use the following tarball directly:\nhttp://openresty.org/download/ngx_openresty-1.7.0.1rc0.tar.gz\nBTW, I'm using our own patch instead of the one you referenced (ours is much better):\nhttp://mailman.nginx.org/pipermail/nginx-devel/2014-May/005316.html\n. @edmondchui OpenResty 1.5.12.1 bundles nginx 1.5.12 with important bug fixes that haven't been merged into mainline nginx (yet). Every OpenResty release is tested as a whole so if you replace its bundled nginx core with your own version then you're at your own risk :)\nIf you need new mainline features and new mainline fixes in nginx 1.6.0 (since 1.5.12), you can use OpenResty 1.7.0.1rc0 instead:\nhttp://openresty.org/download/ngx_openresty-1.7.0.1rc0.tar.gz\nThis tarball bundles nginx 1.7.0 and has been tested on my Amazon EC2 test cluster and CloudFlare's global network.\n. @nkhine All our official OpenResty pre-built packages for Linux do provide an init script or an equivalent:\nhttps://openresty.org/en/linux-packages.html\nThe source can be found in the openresty/openresty-packaging.. @olariuromeo What package did you install? Have you seen my comment above?\nhttps://github.com/openresty/openresty/issues/50#issuecomment-312922944. @olariuromeo Have you read this document?\nhttps://openresty.org/en/deb-packages.html. @olariuromeo Seems like you are not reading the deb-packages document mentioned above carefully enough. To quote:\n\nOther service actions supported are stop, restart, and reload.\n\nSo you just need reload here.. @gershbn I think you need to use the gcc toolchain on Solaris to build OpenResty. I've been testing OpenResty on Solaris 11 myself.\n. @gershbn Try the command\n./configure --with-cc=\"gcc\" ...\n. @gershbn Also check out the official Installation page on openresty.org:\nhttp://openresty.org/#Download\nTo quote,\n\"You need to install the following packages from the official repository:\n- gcc-3\n- SUNWlibm\nUsually it's just as simple as\npfexec pkg install gcc-3 SUNWlibm\n\"\n. Consider it resolved.\n. @leo52668 When you set response headers in Lua, ngx_lua will automatically set the default MIME type as the Content-Type response header so your later phases' handlers (possibly from other nginx C modules) will no longer be able to set the default Content-Type header.\nOne solution is to use header_filter_by_lua instead to set your own cookies which runs after your nginx content handler module creates a response header.\n. @Leo-Tsai You need to read the existing cookies and then add your own one and reset the cookies as a whole. Because the ngx.header.HEADER = ... API always override existing headers with the same name.\nI've been planning a ngx.resp.add_header() API to append header, just like the standard add_header directive in the ngx_headers module. Patches welcome :)\n. Consider it resolved.\n. @LazyZhu Thank you for the report but your core dump file is useless for me unless I have an exact clone of your system :) Will you use gdb to obtain the full backtrace for the crash site? (i.e., via the \"bt full\" command). BTW, PCRE 8.35 is known to have issues that can lead to crashes. Better revert to 8.33 instead :)\n. @LazyZhu Cross-compiling the gdbserver to the target system might be easier than compiling the full gdb: http://davis.lbl.gov/Manuals/GDB/gdb_17.html\n. @LazyZhu Almost. But it seems that your LuaJIT build and glibc lack debug symbols and those frames are the most interesting ones. You need to enable the debug symbols in your LuaJIT build by specifying CCDEBUG=-g argument for make. The glibc debug symbols should usually be in the corresponding debuginfo package provided by your system vendor.\n. @LazyZhu Also, better disable gcc optimizations by passing the -O0 option, so that we can have more info in the C-level backtraces :)\n. @LazyZhu In addition, please enable the API checks and assertions in your LuaJIT build too, that is,\ntext\nmake CCDEBUG=-g XCFLAGS='-O0 -DLUA_USE_APICHECK -DLUA_USE_ASSERT'\nIf you're using OpenResty directly, then ./configure --with-debug should be sufficient.\n. @LazyZhu It seems like something going wrong in your uclibc's dlsym() implementation. The LuaJIT frames above it look fine to me.\nWill you enable the debug symbols in your uclibc build? I'd like to see the details for the frame #0 (i.e., the dlsym call frame).\n. @LazyZhu Any updates on this?\n. @CMCDragonkai  Taobao originally sponsored the development of openresty when I was still working there. The \"sponsorship\" was just that I could work on this opensource project at $work (and I also used it for Taobao's data products at $work). Taobao is a very big company, Tengine is developed by the Taobao Core Systems department while I was from the Data Product & Platform department.\nBelow goes my personal opinion:\nThe most important difference between these two is that OpenResty sticks to be a bundle rather than an Nginx fork. The OpenResty team works closely with the official Nginx team and ensure that changes (mostly bug fixes) keep merging into the mainstream nginx. Tengine makes much more dramatic changes (especially big features) to the nginx core but I'm always worried that it will hurt backward compatibility in the long run when the official nginx does the same thing in a different and incompatible way (Tengine still tries to follow the mainstream nginx, which can be really a struggle).\nThere is also some relationship in that the Tengine includes some core components of OpenResty, notably the ngx_lua module (though its version is almost always lagging behind). Some of the Tengine team members also contribute to OpenResty's components.\n. @CMCDragonkai OpenResty is not involved in the Tengine project (nor am I), and I don't see why it should be put on the front page on README in the first place. It could be on a FAQ page though :)\n. Consider it resolved.\n. @bwalia I would definitely recommend OpenResty, or even better, our commercial OpenResty Edge product: https://openresty.com. @bwalia The OpenResty Edge product already supports real-time global cache purges, and also purging by tags and any custom conditions. And the automatic https provisioning and renewals support with Letsencrypt in the OpenResty Edge product is easy to add and well under way (we can speed up this feature's development if real customers request this) though it's already possible with our RESTful API to automate the global SSL certificate updates. The real time bot mitigation and redirect services are already very easy to do with web forms in our OpenResty Edge Admin system, a centralized web console, even for nontechnical persons.\nWe do sell software licenses of OpenResty Edge, not really doing the PAAS model. Our customers deploy the whole OpenResty Edge software in their own machines, even though some times we can agree to host a dedicated Admin system upon the request of some of our customers.\nThe OpenResty Edge product is not an open source project. It's a commercial product we're selling. The best way to get involved is to become one of our paid customers and we can closely work with you to make Edge fit your needs best and to support you to customize and extend the Edge platform in your own way.. @packetcollision Yes, the next RC release of OpenResty will be based on nginx 1.7.1 (or later) after all the testing is done on my side :)\n. Resolved already.\n. @lloydzhou The --with-luajit option is already the default. If you make changes to the existing libraries, you can just run \"make && make install\" without rerunning ./configure. \"make\" will build things incrementally and it is what it is designed to do.\n. Consider it resolved.\n. @kmarellapudi Looks like you have 2 incompatible versions of OpenSSL installed in your system. That is, the ssl header files in your system's default header search paths and the ssl library files in your system's default library search paths do not match at all (this seems to be particularly common on recent Mac OS X systems, as with the PCRE library installation, for example). You can either\n1. explicitly specify the correct SSL header search path and library search path combination via ./configure's --with-cc-opt='-I/path/to/ssl/header/directory' and --with-ld-opt='-L/path/to/ssl/lib/directory' options, or\n2. download and uncompress the latest openssl source tarball, and use ./configure's --with-openssl=PATH option to build the OpenSSL source code with OpenResty, where PATH is the path to the source tree of the uncompressed openssl source tarball.\n. @kmarellapudi What are the exact steps and commands you are using? Seems like your openssl build was a i386 build rather than x86_64. BTW, you can always paste large output to the gist site: https://gist.github.com/\n. Consider it resolved.\n. @imvvk Glad the new OpenResty releases work for you.\n. @JesusIslam Please provide the full output and your original command(s) used.\n. @JesusIslam Please run the following command and provide the full output you get:\nbash -v ./util/mirror-tarballs\nEnsure you run this command at the root directory of this git repository (this also applies to the make command).\nThanks!\n. @JesusIslam Thanks for the reply! But your bash -v output does not make sense to me. Something very wrong must be happening here. Seems like your git checkout has been corrupted somehow? I cannot see any \"\\r\" bytes in my local util/mirror-tarballs file (on Linux too), for example. You can send me the raw file of your ./util/mirror-tarballs script via an email attachment, for example.\nBTW, unless you want to customize the openresty release tarball yourself, better use the released tarball directly below:\nhttp://openresty.org/#Download\n. @louis You cannot get the official nginx 1.5.12 release (http://nginx.org/download/nginx-1.5.12.tar.gz) compile with that \"Passenger\" addon on your side either, right? If yes, then you should really report the problem to the maintainer(s) of that addon instead.\n. @louis Where can I get exactly the same version of Passenger 4.0.48 source you're using?\n. @louis OK, I see what is going on. The passenger build system fails to recognize OpenResty's NGINX_VER C macro value, that is, something like \"openresty/\" NGINX_VERSION \".1rc1\". It requires fixing passenger's config script. Their build script seems to produce invalid C code snippet in file objs/ngx_auto_config.h:\n``` C\nifndef PASSENGER_NGINX_MAJOR_VERSION\ndefine PASSENGER_NGINX_MAJOR_VERSION  1\nopenresty/\nendif\nifndef PASSENGER_NGINX_MINOR_VERSION\ndefine PASSENGER_NGINX_MINOR_VERSION  7\nopenresty/\nendif\nifndef PASSENGER_NGINX_MICRO_VERSION\ndefine PASSENGER_NGINX_MICRO_VERSION  2\nopenresty/\nendif\n```\nI've prepared a patch for passenger (git master HEAD) that should fix the issue:\nhttp://openresty.org/download/passenger-fix-for-openresty.patch\nWill you try applying this patch to passenger's source tree on your side?\n. @louis Try the following (V2) patch instead, which is even simpler:\nhttp://openresty.org/download/passenger-fix-for-openresty-v2.patch\n. @louis I've filed a ticket for the issue (and patch) to the passenger team: phusion/passenger#1226\n. @kevin25 The openresty distribution already includes and enables modules like ngx_lua, ngx_echo, and ngx_devel_kit. Check out http://openresty.org/#Components for the full component list.\nBecause you add these nginx C modules again with the --add-module=PATH option yourself,  the C compiler complains about all those \"multiple definition\" errors due to code duplication.\n. @Vittly Thank you for the report! Already fixed in git repos. Will get included in the next openresty release.\n. @IndeedPlusPlus The --with-http_ssl_module option is enabled by default because I did not find other easier ways to ensure the OpenSSL library is enabled in the nginx build.\nFor source code releases, I'd rather not enable --enable-jit by default because the PCRE JIT feature may not be present in the target system and then it will be hard to disable it on the user side. The same applies to the --with-ipv6 option, which is not available everywhere (though should be available in all modern Linux distributions).\nI think enabling --enable-jit and --with-ipv6 makes sense only for binary packages where their dependencies and target environment are usually explicitly specified and completely under control.\nThank you for your suggestions anyway. I do have plans to setup and maintain binary packages for most of the popular modern operating systems. And for those packages I'll ensure these are enabled by default :)\n. @IndeedPlusPlus Yes, that's a good idea :) Thanks!\n. @IndeedPlusPlus Added a hint to that page. Will you check it out? Thanks!\n. @yifine This is strange. Where did you get your openresty source tree?\n. @yifine I cannot reproduce it on my side (Linux x86_64 + bash). Seems like the \"cp -rp\" command in your shell does not keep the original file mode (including permissions). Will you provide more details about your shell and/or the \"cp\" command you're actually using?\n. @yifine Nope, I did not chmod manually.\n. @yifine Anyway, I've updated the configure script to invoke \"sh\" explicitly for nginx's ./configure script.\n. @yifine Please try out the following openresty source tarball:\nhttp://openresty.org/download/ngx_openresty-1.4.7.1rc1.2.tar.gz\nFeedback welcome :)\n. @yifine Sorry, the link should be\nhttp://openresty.org/download/ngx_openresty-1.7.4.1rc1.2.tar.gz\n. @wind930 This error is due to your misuse of the lua_package_path directive in your nginx configuration. .so files are Lua C modules and should be configured in the lua_package_cpath instead of lua_package_path. So this should be a single character fix :)\nBTW, lua-cjson and other Lua libraries are visible in the default search paths of lua_package_path and lua_package_cpath of the OpenResty installation and you don't really need to configure their paths explicitly in nginx.conf.\n. @mohsininayatkhan The lua-cjson library is not part of lua-nginx-module. To avoid such troubles, you're recommended to use the OpenResty bundle instead. Please see\nhttps://openresty.org/#Download\n. @mohsininayatkhan You can apply those patches directly to the OpenResty bundle too. Just find the ngx_lua source tree under the bundle/ directory.\n. @Shawkaine You need to provide enough details like how you setup openresty and the exact error log messages and your nginx.conf configuration. Otherwise we cannot really help.. @Shawkaine Right. Lua 5.3 has an incompatible ABI than the Lua 5.1 ABI used by OpenResty's LuaJIT. You should always use OpenResty's LuaJIT's header files to compile your Lua C modules.\nBTW, OpenResty ships with its own lua-cjson by default. Better avoid using your own to prevent any compatibility problems. It should work out of the box.. @mikz Applied a slightly modified version of your patches to master. Thanks!\n. @lusis I'll upgrade the nginx core to 1.7.5 because there's no official patch against nginx 1.7.4 readily available. But there's still a lot of testing work to do for the new nginx core which contains a lot of other unrelated changes.\n. @IndeedPlusPlus Thank you for the info! But 3rd-party patches for much older series of nginx releases (1.4.x) may introduce their own risk especially when I do not have a good enough test suite for this part of nginx. I'm currently gearing towards incorporating nginx 1.7.5 though I've found a new memory invalid read regression in nginx 1.7.5's builtin resolver which may take some more time to fix.\n. @leto The latest OpenResty version is 1.7.10.1, which is based on the new nginx 1.7.10 core.\n. @dol Using --prefix=/etc/nginx for OpenResty's ./configure is wrong because nginx is just a component under OpenResty, just like the bundled LuaJIT and Lua libraries. The default prefix is /usr/local/openresty, and the installed nginx is under /usr/local/openresty/nginx/.\nAnd yeah, --with-luajit=DIR is better than --with-luajit=PATH. I'll make this change.\nIt's not recommended to use custom LuaJIT builds. We should always use the OpenResty's bundled version. The --with-luajit=DIR is just provided for people who know what they're doing.\n. @dol Yes, I do have some plans to provide official binary packages (rpm, deb) for those major Linux distributions. But sadly no ETA yet due to the very limited resources on my side :) And I appreciate your help here.\n. @MayamaTakeshi I've tried your example on my side with the latest OpenResty and cannot reproduce the issue you're seeing. To make your 1st example standalone, I made the following changes:\n1. Change the line proxy_pass https://some_rest_server/test; to proxy_pass http://127.0.0.1:$server_port/back; such that it talks to the same nginx server via http.\n2. Add location = /back to emulate the backend service:\nnginx\nlocation = /back {\n    content_by_lua '\n        ngx.req.read_body()\n        ngx.say(\"hello world\")\n    ';\n}\nThen I test this example with curl like below:\n```\n$ curl -H 'Origin: www.foo.com' -i localhost:8080/test\nHTTP/1.1 200 OK\nServer: nginx/1.7.5\nDate: Thu, 16 Oct 2014 19:13:35 GMT\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\nhello world\n```\n```\n$ curl -d 'a=1&b=2' -H 'Origin: www.foo.com' -i localhost:8080/test\nHTTP/1.1 200 OK\nServer: nginx/1.7.5\nDate: Thu, 16 Oct 2014 19:13:50 GMT\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\nhello world\n```\nWe can see that both GET and POST requests do have the Access-Control-Allow-Origin and Access-Control-Allow-Credentials response headers set properly. You can try this out on your side.\nIf you still believe there is a bug here. Please try providing a minimal and standalone example with detailed instructions that can help me reproduce the issue on my side :) Thanks!\n. @dreik \"if is evil\" :) Also, if the backend sends its own Access-Control-Allow-Origin and Access-Control-Allow-Credentials response headers, then you will have duplicate headers due to the appending behavior of the add_header directive :)\n. @MayamaTakeshi This is the expected behavior of the standard add_header directive. It skips bad status responses intentionally. See\nhttp://nginx.org/en/docs/http/ngx_http_headers_module.html#add_header\n\"Adds the specified field to a response header provided that the response code equals 200, 201, 204, 206, 301, 302, 303, 304, or 307.\"\n. @lenxeon I'm pretty sure OpenResty 1.7.4.1 comes with ngx_lua 0.9.12:\nngx_openresty-1.7.4.1 (master)$ ls build/*|grep ngx_lua\nbuild/ngx_lua-0.9.12:\nSo the \"ngx_lua 0.9.11+\" test in lua-resty-mysql should pass without problems.\nAre you 100% sure that you're indeed using OpenResty 1.7.4.1's nginx? It is a common mistake to use a different nginx co-existed in the same system. Try running the \"nginx -V\" command to verify the version.\nIf you're already running an nginx belonging to an older OpenResty, then you need a full restart instead of HUP reload. See http://wiki.nginx.org/CommandLine#Upgrading_To_a_New_Binary_On_The_Fly\n. @lenxeon There must be something very wrong in your OpenResty installation or you just did not restart your nginx fully (as I've said, HUP reload won't update the nginx binary).\nI just tried downloading the ngx_openresty-1.7.4.1.tar.gz from openresty.org and installing it in my own Linux x86_64. Testing the following location\nnginx\n        location = /ver {\n            content_by_lua '\n                ngx.say(\"ngx_lua \", ngx.config.ngx_lua_version)\n                ngx.say(\"nginx \", ngx.config.nginx_version)\n            ';\n        }\ngives\n$ curl localhost/ver\nngx_lua 9012\nnginx 1007004\nWe can see that ngx.config.ngx_lua_version is 9012 (i.e., 0.9.12).\nBecause your ngx.config.ngx_lua_version is 9008, I'd say you're in fact using OpenResty 1.7.0.1, which bundles ngx_lua 0.9.8. You can try querying the /ver location above to get your nginx core's version number.\nSome further suggestions:\n1. Kill all the nginx processes in your system,\n2. Use the full absolute path to start your nginx (don't trust your init script, if any).\n. @diyism Because lua-resty-mysql implements the SSL MySQL wire protocol and for that it needs the SSL cosocket support which only appears in ngx_lua 0.9.11+.\n. Consider it resolved.\n. @yifine What do you mean by \"the unchunked data is the only result in any cases\"? You mean you're not getting chunked response data even when you configure chunked_transfer_encoding on? I tested on my side with a minimal example and it works as expected:\nnginx\nlocation = /t {\n    chunked_transfer_encoding on;\n    echo hello;\n}\nUsing curl to request it:\n```\n$ curl --raw -i localhost:8080/t\nHTTP/1.1 200 OK\nServer: nginx/1.7.7\nDate: Mon, 17 Nov 2014 20:41:40 GMT\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\n6\nhello\n0\n```\nYou can try this example out on your side. If you still believe there is a bug, please provide a standalone and minimal example that can help reproducing the issue on my side.\nBTW, this is really a question only related to the nginx core. Please try using the official nginx mailing list for such questions in the future. It's recommended to try the openresty community only when you fail to get any help from the nginx community ;)\n. @Samin-Du Please, no Chinese here. Also, such general discussions should go to the openresty (Chinese) mailing list. Please see http://openresty.org/#Community\nRegarding your question, I think you can just use ngx.timer.at [1] and lua-resty-http-simple [2] for it.\n[1] https://github.com/openresty/lua-nginx-module#ngxtimerat\n[2] https://github.com/bakins/lua-resty-http-simple\n. @gregkare Good to know. Maybe it's just a newly fixed SPDY bug in the new nginx core. I'm closing this.\n. @fanxinglb Please, no Chinese here. BTW, it's better to post Chinese questions to the openresty Chinese mailing list instead. See http://openresty.org/#Community\nRegarding your question, it seems like you make some mistakes in your own Lua code where certain Lua code path does not check the return values of receiveuntil()'s iterator calls (at least) and handle any errors properly, leading to an infinite loop. For example, the following loop might be what your guilty loop looks like:\n``` lua\nlocal reader = sock:receiveuntil(\"\\r\\n--abcedhb\")\nwhile true do\n    local data, err, partial = reader(4)\n    if data then\n        ...\n    end\nend\n```\nNote that in this bad loop, when the iterator returns an error (where data is nil), it enters a tight infinite loop and blocks the current nginx worker forever.\nYou can use various tools to precisely locate your bad Lua loop when your worker process is spinning at 100% CPU usage. For example,\nhttps://github.com/openresty/nginx-gdb-utils#lbt\nhttps://github.com/openresty/nginx-systemtap-toolkit#ngx-lua-bt\nhttps://github.com/openresty/stapxx#lj-lua-bt\nhttps://github.com/openresty/stapxx#lj-lua-stacks\nBTW, it's highly recommended to always use the latest OpenResty bundle to avoid hitting known bugs that have already been fixed (though for your current issue, it's much more likely to be a bad Lua loop in your own Lua code, as stated above):\nhttp://openresty.org/#Download\nRegards,\n-agentzh\n. @kaiwangubnt Just out of curiosity, what was it?\n. @hwongcom Yes, see https://github.com/openresty/lua-nginx-module#lualuajit-bytecode-support\n. @MfNiu Can you reproduce the issue without the 3rd-party rtmp module? If not, then you should contact the maintainer of that module instead because it's not part of the OpenResty bundle and we do not maintain it at all.\n. @anod221 Yeah, this is a problem in the 3rd-party module ngx_redis. I've already dropped a note to its author, Sergey A. Osokin. Thanks for the report!\n(BTW, please do not use Chinese here :))\n. @anod221 The following patch fixes this issue, which will get included in the upcoming OpenResty 1.7.2.2 release:\nhttps://github.com/openresty/ngx_openresty/blob/master/patches/ngx_http_redis-0.3.7-without_gzip.patch\nI've also proposed the patch to the author of ngx_http_redis,  Sergey A. Osokin.\nThank you for the report!\n. @anod221 FYI, the fix is already included in the OpenResty 1.7.7.2 RC2 pre-release:\nhttp://openresty.org/download/ngx_openresty-1.7.7.2rc2.tar.gz\n. @gfreezy Please, no Chinese here. This place is considered English only. If you really want to use Chinese, please join the openresty (Chinese) mailing list instead. See http://openresty.org/#Community Thanks for your cooperation.\nRegarding your question, it's obvious that your redis backend is the bottleneck. The redis-server's default backlog queue size is quite small, for example. You can try\n1. increasing its tcp-backlog setting, see http://download.redis.io/redis-stable/redis.conf\n2. tuning your connection pool size to match your client concurrency level (note: connection pool is per-nginx-worker!) to save connect() and close() system calls, and\n3. running multiple redis backend servers and shard the incoming requests to them in your nginx.\n. @gfreezy BTW, properly configuring your nginx worker processes can improve performance considerably as well (when the redis backend is not the bottleneck):\n1. make the number of workers match the available logical CPU cores in your machine. note that your redis-server is also running locally, so you should spare one CPU core to it. Otherwise you're just wasting resources on context switches. If you run siege on the same box, you should account for the CPU resources used by this busy client as well.\n2. properly set the CPU affinity for your nginx worker processes to avoid meaningless context switches between your nginx worker processes:\nhttp://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity\nWell, benchmarking is an art :) And it can easily go wrong :)\n. Consider it resolved.\n. @doodle88 Try the following:\n1. (temporarily) enable the nginx debug logging: http://nginx.org/en/docs/debugging_log.html It will generate a lot of details in the nginx error logs.\n2. upgrade to the latest OpenResty release.\nIf you still have no idea, please provide the complete debugging logs and the exact version number of OpenResty.\n. @agnibha Maybe you should just try out the latest OpenResty version?. Consider it resolved.. @lordnynex It seems like a C compiler bug. Disabling optimizations on all POSIX ARM systems by default look rather overkill to me. Is there a better way to test if the C compiler is indeed buggy under -O2 or -O1?\n. @lordnynex I've asked @yangshuxin to have a look on his Raspberry box and dig this up :)\n. @lordnynex That's cool. -O0 can lead to a big loss in performance and I hope we can have optimizations enabled even on Raspberry Pi :)\n. @sparvu It'll be great if you can use gdb to get the full backtrace at the crashing site in the nginx worker process.\n. @sparvu Will you type the gdb command \"disas\" to get the machine code dump around the PC?\n. @sparvu Okay, @yangshuxin helped me nail down the real issue. It's a bug in ngx_lua which does not take address alignment into account which leads to issues on architectures sensitive to bad alignments (x86 is fine though). I'll submit a patch soon. Thanks!\n. @sparvu Will you try the following patch on your side?\n``` diff\ndiff --git a/src/ngx_http_lua_shdict.c b/src/ngx_http_lua_shdict.c\nindex 377f9ce..8c666f7 100644\n--- a/src/ngx_http_lua_shdict.c\n+++ b/src/ngx_http_lua_shdict.c\n@@ -481,7 +481,7 @@ ngx_http_lua_shdict_get_helper(lua_State *L, int get_stale)\n                               (unsigned long) value.len);\n         }\n\nnum = (double ) value.data;\n\nngx_memcpy(&num, value.data, sizeof(double));\n lua_pushnumber(L, num);\n break;\n\n@@ -1220,7 +1220,7 @@ ngx_http_lua_shdict_incr(lua_State *L)\np = sd->data + key.len;\n\n\nnum = (double ) p;\n\n\nngx_memcpy(&num, p, sizeof(double));\n     num += value;\nngx_memcpy(p, (double ) &num, sizeof(double));\n@@ -1711,7 +1711,7 @@ ngx_http_lua_ffi_shdict_get(ngx_shm_zone_t zone, u_char *key,\n     }\n *str_value_len = value.len;\n\n\nnum_value = (double *) value.data;\nngx_memcpy(num_value, value.data, sizeof(double));\n     break;\n\ncase LUA_TBOOLEAN:\n@@ -1801,7 +1801,7 @@ ngx_http_lua_ffi_shdict_incr(ngx_shm_zone_t zone, u_char key,\np = sd->data + key_len;\n\n\nnum = (double ) p;\n\n\nngx_memcpy(&num, p, sizeof(double));\n     num += *value;\nngx_memcpy(p, (double *) &num, sizeof(double));\n```\n\n\nWe tried this patch with gcc -O2 on @yangshuxin's Raspberry Pi and it seems working.\nLet me know if you run into any further problems. Thanks!\n. @sparvu Yes, it applies to all architectures including x86 though x86 does not require address alignment. I've already committed the patch to git master and will get included in the next ngx_lua and openresty release.\n. @aseiot What's the version of your gcc and glibc?\n. @aseiot It seems that recent LuaJIT changes now require relatively new versions of glibc. I've dropped Mike Pall a note. Hopefully he can commit a workaround to continue supporting older versions of glibc.\n. @aseiot According to Mike Pall, the culprit might be the CC=cc argument passed to LuaJIT's build system (which defaults to CC=gcc) by OpenResty's build system. I've removed it in the following OpenResty source tarball:\nhttp://openresty.org/download/ngx_openresty-1.7.10.2rc0.tar.gz\nPlease test it out on your side. Thank you!\n. @aseiot Thanks for your feedback! Now let's dig deeper :)\nWill you send me the output of the following commands in that system?\ngcc -E src/lj_ir.c\ngcc -E src/lj_vmmath.c\nassuming you have entered the directory ngx_openresty-1.7.10.2rc0/bundle/LuaJIT-2.1-20150223/\nThe output can be huge. Feel free to attach the complete output to the gist.github.com site or somewhere like that and just share the link here.\nThanks!\n. @aseiot Thanks for the feedback! Okay, good, the exp2 are exp1 functions are indeed shielded away. So it seems that we need to define some special macros to make them visible from your math.h.\nLet's keep digging. I need the following more information from you to nail down the root cause:\n1. Please provide the output of the command\ngcc -E -dM src/lj_ir.c\n   gcc -E -dM src/lj_vmmath.c\nassuming you're still in the directory ngx_openresty-1.7.10.2rc0/bundle/LuaJIT-2.1-20150223/.\n2. Please provide the complete file /usr/include/bits/mathcalls.h from your system.\nWe're close ;)\n. @aseiot Okay, the most interesting snippet is\n``` C\nifdef __USE_ISOC99\n__BEGIN_NAMESPACE_C99\n/ Compute base-2 exponential of X.  /\n__MATHCALL (exp2,, (Mdouble __x));\n/ Compute base-2 logarithm of X.  /\n__MATHCALL (log2,, (Mdouble __x));\n__END_NAMESPACE_C99\nendif\n```\nSo the functions exp2 and log2 are guarded by the __USE_ISOC99 macro. But from your -E -dM output, this __USE_ISOC99 macro is not defined by gcc 4.1.2 by default (because that version defaults to the gnu89 C language standard).\nIn recent versions of gcc (like 4.7 and 4.8), the __USE_ISOC99 macro is defined by default because gnu99 is now the default, as witnessed by the -E -dM output on my side:\n``` C\ndefine __USE_ISOC99 1\n```\nSo a simple work-around is to build OpenResty with something like this:\nbash\n./configure --with-luajit-xcflags='-std=gnu99'\nWill you try it out on your side if it fixes the build problems?\nThanks for digging this up :)\n. @aseiot Glad to know it works for you :) I've asked Mike Pall to consider making it the default in LuaJIT's build system :)\n. @JoyceBabu You could though it's usually not really necessary. The real difference is usually hard to measure in the wild for nontrivial setup.\n. @andaok Hopefully you're not buffering the whole request body at once in memory because that'll be too expensive for large inputs. The recommended way is do non-buffered processing (or streaming processing) such that a (small) constant size of memory is used regardless how big the total stream is.\nTo be more specific, you can first read a data chunk (say 4KB or 8KB) from lua-resty-upload, and then write it out via cosockets nonblockingly to the backend immediately, and then read the next data chunk and so on.\nHopefully your \"distributed file system\" exposes a socket endpoint otherwise file IO related syscalls will almost always be blocking.\n. @gauravt There's more than one way to do it. The most natural and efficient way may be using the body_filter_by_lua directive.\nBTW, please use the openresty-en mailing list for such questions and general discussions. Thank you. Please see the following page for more details on the lists:\nhttp://openresty.org/#Community\nThanks for your cooperation!\n. @changjiasheng Just use the require or loadfile Lua builtins in your Lua code. BTW, please use the openresty-en mailing list for such questions instead. Thank you. See http://openresty.org/#Community\n. @hander By running your code example on my side, I cannot reproduce the issue at all on my side. The script I'm running is:\n``` lua\nlocal redis = require \"resty.redis\"\nlocal red = redis:new()\nlocal redis_db = 2\nred:set_timeout(1000)\nassert(red:connect(\"127.0.0.1\", 6379))\nassert(red:select(redis_db))\nassert(red:set(\"get_key\", \"get_value\"))\n-- this works as supposed and returns stored value from db 2\nlocal value, err = red:get(\"get_key\")\nif not value then\n    print(\"failed to get: \", err)\n    return\nend\nprint(value)\n-- but this scan performs on default db 0 not on selected previously db 2\nlocal res, err = red:scan(0, \"count\", 100)\nif not res then\n    print(\"failed to scan: \", err)\n    return\nend\nlocal cursor, keys, err = unpack(res)\nprint(keys)\n```\nThe only difference here is the additional error handling code (to avoid silly mistakes, you're always recommended to do proper error handling in your Lua code). Running the script on my side yields:\n$ resty a.lua\nget_value\nget_key\nVerified in the redis-cli prompt that the data is all added to the database 2:\n127.0.0.1:6379> select 2\nOK\n127.0.0.1:6379[2]> scan 10\n1) \"0\"\n2) 1) \"get_key\"\n127.0.0.1:6379[2]> select 0\nOK\n127.0.0.1:6379> scan 10\n1) \"0\"\n2) (empty list or set)\nLet me know if you have any further questions and information.\n. @hander Is your new example able to reproduce the problem reliably? Otherwise I'm just wasting my time for you. Please provide a standalone example that can reproduce the issue with precise steps on my side to save our time.\n. @hander BTW, your \"new example\" still lacks proper error handling code in a few places.\n. @leafo Hmm, this is not really a bug though it deserves better treatment. The default Content-Type header value is set lazily (upon the first header sending operation or the first response header setting). I think maybe we should only configure the default type upon first response header read to avoid this surprise. Will you consider contributing a patch to ngx_lua? Thanks!\n. @zot24 It's not been taken care of. The latest OpenResty 1.11.2.2 has nothing changed here as well.\n@membphis @moonbingbing Will you take care of this for me? ;). @leafo Just fixed through openresty/lua-nginx-module#936. Thanks @moonbingbing for the patch.. @homichael Please, don't use Chinese here. This place is supposed to be English only. If you really want to use Chinese, please join the OpenResty (Chinese) mailing list instead. Please see http://openresty.org/#Community for more details. Thank you for your cooperation!\n. @max-l What are you suggesting here? Making http_sub_module the default in the OpenResty build? No, I don't want that :)\n. @max-l No, the sub_filter directive cannot be used in the location if {} context. That error message is what you'd get when the context does not support a particular directive. Yeah, maybe it can be more descriptive, but it's the behavior of the standard nginx core which we cannot do much about in OpenResty :)\n. @kirk7880 Seems like your MD5 library has an unexpected ABI. Have you compiled OpenResty with a recent version of OpenSSL?\n. @kirk7880 Will you confirm that with the otool -L command against your nginx executable?\nAlso the output of \"/path/to/openresty/nginx/sbin/nginx -V\" may be helpful.\nMy hunch is that your nginx is loading some weird version of OpenSSL or something. BTW, which version of OpenResty are you using?\n. @kirk7880 This is very strange. I'll look into this when I have my working laptop back. Sorry for the delay on my side. Been on vacation.\n. @jiajar Please follow the instructions (especially those for Mac OS X) here on the Installation page of the openresty site:\nhttp://openresty.org/#Installation\nIn particular:\nbrew install pcre\n ./configure \\\n             --with-cc-opt=\"-I/usr/local/include\" \\\n             --with-ld-opt=\"-L/usr/local/lib\" -j4\nmake -j4\nsudo make install\nassuming you have 4 spare CPU logical cores in your machine ;)\n. @6api Please, no Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see http://openresty.org/#Community\nRegarding your problem, I think you should explicitly enable SSLv3 in your ngx_proxy settings via the proxy_ssl_protocols directive:\nhttp://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_protocols\nAs you can see, the default protocols exclude SSLv3.\nBTW, SSLv3 is considered insecure by the industry and future nginx releases will remove it completely. Stick with the newer TLS protocols instead. Just my 2 cents.\n. @dol Yep, use of the nginx builtin variables $host, $hostname, and etc are recommended. $server_name is not for this purpose.\n. @bungle NGINX variables only take string-typed values.\n. @zhouweiming Maybe your ngx_openresty tarball was corrupted during the download? Try re-downloading it again?\n. @zhouweiming We cannot reproduce the issues here. Maybe your network has something in the middle that corrupts or interrupts your downloads? Try sending the MD5 checksum of your 1.7.10.1 tarball.\n@7ai Because we have so many English readers here :) You can always join the openresty (Chinese) mailing list anyway where you're free to use Chinese: http://openresty.org/#Community\n. @jvaleo The error message says that you have a Lua syntax error on the line 5 of your /var/lua_scripts/redirects.lua file. Maybe you accidentally inserted some non-printable characters  there?\n. @jvaleo I said that your Lua source code itself has syntax errors instead of your JSON strings.\n. @upupw Thank you for your suggestions. But please no Chinese here. You're recommended to post Chinese to the openresty (Chinese) mailing list instead. Please see http://openresty.org/#Community for more details. Thank you for your cooperation!\nRegarding your questions, I'm not aware of any (official) Windows version of OpenResty. What kind of Windows version are you talking about here? Are you referring to this \"Windows nginx\" thing?\nhttp://nginx-win.ecsds.eu/\nIf yes, then it is something contributed by a guy in the community. It's not an official Windows version of OpenResty at all :)\n. Well, there may be an official Windows port of ngx_openresty in the near future. But I cannot promise anything at this point :)\nAnd I'm also open to sponsorship.\n. Okay, ngx_openresty's build system can now directly build on Windows using the MinGW/MSYS toolchain. See the docs here:\nhttps://github.com/openresty/ngx_openresty/blob/master/doc/README-win32.md\n@upupw Regarding your feature requests, they are more about the NGINX core rather than the OpenResty bundle itself. Anyway, you're welcome to try my binary build below:\nhttps://openresty.org/download/ngx_openresty-1.9.3.2rc1.3-win32.zip\n. @antonheryanto Yes, of course. Thanks for your feedback!\n. @capr Not sure which version of LuaSocket you're talking about. At the time I implemented the cosocket I'm pretty sure the LuaSocket version I was looking at is using milliseconds.\nAnyway, there is no chance to change cosocket's settimeout() method because that would break backward-compatibility, which is not acceptable.\n. @capr Yeah I understand that motivation and that was why I created the \"resty\" command-line utility:\nhttps://github.com/openresty/resty-cli\nHopefully you will find it useful.\n. @opensrcken Yes, OpenResty 1.9.x.x will come soon. But I need to release OpenResty 1.7.10.2 first, which is the planned \"tick\" release according to the current \"tick-tock\" release model.\n. @wojons A lot of fixes in many components for 1.7.10.2. I will release a release candidate for 1.7.10.2 today or tomorrow on the openresty-en mailing list. It'll be great if you can help test the release candidates out on your side and report back any problems. This will speed up the formal release of 1.7.10.2 and help me move on to 1.9.x.x as soon as possible (hopefully in the next week or so). Thanks a lot!\n. @wojons OpenResty 1.7.10.2 RC1 was already out 13 hours ago:\nhttps://groups.google.com/d/topic/openresty-en/AbwKJG0uATo/discussion\n. @pinghe OpenResty 1.9.3.2 has to be released before the nginx core upgrade. See http://openresty.org/faq.html#does-openresty-follow-nginxs-mainline-releases\n. The original issue is for nginx 1.9.x and the current latest openresty release is already based on nginx 1.13.6. So I'm closing this issue.\nWe're working on upgrading to nginx 1.15.x, as already mentioned in the release note of the openresty 1.13.6.2 version.. @leto You need to add these too: --without-http_lua_module --without-http_lua_upstream_module.\nNo, there's no such all-in-one option to disable all Lua. Feel free to submit a PR :) Not sure about the option name though. My ears are open :)\n. @leto Looks good to me :)\n. @leto Not yet. I meant to work on such a document in the future :) Well, just go ahead and create the PR. I'll review it anyway.\n. Hmm, seems like we also need to disable LuaJIT. Before that, we need to have a --without-luajit option. Thoughts?\n. @leto Either is fine :) Thanks!\n. @leto I have a mixed feeling about this. Is an OpenResty without any Lua still OpenResty?\n. @leto @bungle  I think a better approach is to automatically exclude LuaJIT/Lua, all the Lua libraries, and the ngx_http_lua_upstream module when the user specifies the --without-http_lua_module option. This looks more reasonable to me. What do you guys think?\n. Patches welcome! Volunteers welcome! :)\n. @hulu1522 ngx.req.set_uri is only available in access_by_lua when the jump argument is not set (or set to false). To quote the documentation you referenced:\n\"The jump can only be set to true in rewrite_by_lua and rewrite_by_lua_file. Use of jump in other contexts is prohibited and will throw out a Lua exception.\"\n. @hulu1522 I guess you're setting the jump argument to a true value? You didn't provide your Lua snippet, so I can only guess here ;)\n. @hulu1522 Well, you could use ngx.exec to perform internal redirect in access_by_lua, which is much cheaper than 301/302/307 external redirects.\n. Thanks for the catch!\n. @jiajar Seems like some of the directories in your path /home/nginx/app/openresty/nginx/html/ do not have enough permissions (read and execute permissions) for the system account used by your nginx worker processes (default to nobody).\n. @jiajar BTW, simply checking the permissions of that html directory is not enough. Path resolution of UNIX systems requires all the containing directories in your path have enough permissions. It's UNIX basics :)\n. @dtouzeau I believe you can just use the --add-module=PATH ./configure option, just with the stock nginx distribution.\n. @dtouzeau Sorry, I'm not feeling comfortable with that because I'm not quite happy with Naxsi's code base. For one thing, it diverges a lot from the standard nginx coding style.\n. @dtouzeau Also, I have strong opinions on how to implement a highly dynamic and efficient nginx-based WAF (well, you know that I've been working for CloudFlare which comes with an OpenResty-based WAF product). So OpenResty will eventually come with a powerful opensource WAF module in the near future :)\n. @dtouzeau All I can say at this point is \"as soon as I can manage\" :) Hopefully this year :)\n. @needcaffeine No, you can't if you want to use the nginx's builtin error logger since it does not support customisations beyond the custom error message body. You can roll your own error logger in Lua though.\n. @laurivosandi Sorry, I'm not interested in adding them as the default components of the OpenResty bundle. One can always use the ./configure option --add-module=PATH to enable new nginx modules in the OpenResty build, just as with the official nginx distribution.\nIt's worth mentioning that 3rd-party modules that are not maintained by OpenResty developers may cause quirks in the OpenResty server which we will not provide (free) technical support (just as with the official nginx distribution). Well, you're warned :)\n. @david001-yang Yeah, be careful about fetching file modification times upon hot code paths (like upon every request) since it involves a (stat) system call which is inevitably expensive and could become a bottleneck.\nBTW, it's better to ask such questions on the openresty-en mailing list: https://openresty.org/#Community Thanks for your cooperation :)\n. @williamcaban Thanks for sharing though it's a pity that the core component of OpenResty, the ngx_lua module, is not enabled in this according to your list above ;)\n. Hi guys! OpenResty now offers official RPM package and yum repositories for CentOS/RHEL 5.x ~ 7.x and Fedora 22 ~ 24:\nhttp://openresty.org/en/linux-packages.html\nhttp://openresty.org/en/rpm-packages.html\nThe spec files and other sources are in the following GitHub repository:\nhttps://github.com/openresty/openresty-packaging\nYou're welcome to contribute to the official packages :)\n. @zhangjiachao Please, no Chinese here. This place is considered English only. If you really want to use Chinese, please use the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community for more details.\nIn addition, please do not paste overwhelming text in the ticket. Better use a 3rd-party paste services like gist.github.com and just shares the link here. It can make this place look less messy.\nFor the installation instructions of OpenResty on Mac OS X, please check out this page for details:\nhttps://openresty.org/#Installation\nThis looks apparently due to\n1. you're not using the latest OpenResty bundle release, and/or\n2. you're not specifying the PCRE library and include paths correctly on the ./configure command line.\n. @jgonggrijp Please paste all the console output of your ./configure command as well as the full content of autoconf.err file. Please use web paste services like gist.github.com and just share the link here.\nJust FYI, I'm also running Mac OS X 10.10.5 locally and I didn't see such issues while testing ngx_openresty 1.9.3.1.\n. @jgonggrijp Okay, I see that you have an incompatible version of Lua headers under your /opt/local/include/ or /usr/local/include/ (maybe it's a Lua 5.2 or 5.3 installation), as evidenced by the following snippet in your autoconf.err:\n```\ncc -pipe -O2 -I/opt/local/include -I/usr/local/include -I /Volumes/scratch/ngx_openresty-1.9.3.1/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1 -o objs/autotest objs/autotest.c -Wl,-rpath,/usr/local/openresty/luajit/lib -L/opt/local/lib -L/usr/local/lib -L/Volumes/scratch/ngx_openresty-1.9.3.1/build/luajit-root/usr/local/openresty/luajit/lib -lluajit-5.1 -lm -ldl\n\nchecking for LuaJIT library in /Volumes/scratch/ngx_openresty-1.9.3.1/build/luajit-root/usr/local/openresty/luajit/lib and /Volumes/scratch/ngx_openresty-1.9.3.1/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1 (specified by the LUAJIT_LIB and LUAJIT_INC env)\nobjs/autotest.c:8:5: error: unsupported Lua language version\nerror unsupported Lua language version\n^\n\n1 error generated.\ninclude \ninclude \ninclude \nint main() {\nif LUA_VERSION_NUM != 501\nerror unsupported Lua language version\nendif\n(void) luaL_newstate();;\n    return 0;\n}\n```\nPlease remove that offending Lua before the build.\n. @jgonggrijp Okay, I've committed a patch to ngx_lua's master so that we can always choose the bundled version of the LuaJIT in OpenResty (by default) regardless of what versions of Lua are installed under the paths specified in the --with-cc-opt and --with-ld-opt options of ./configure.\nWill you please try the following OpenResty tarball on your side?\nhttps://openresty.org/download/ngx_openresty-1.9.3.2rc0.tar.gz\nYou no longer need to clean up incompatible versions of Lua in your system with this tarball. Let me know if it works for you. Thanks!\n. @jgonggrijp Cool, thanks.\n. @jgonggrijp But I'm pretty sure it was not your LuaJIT 2.0.4 under /usr/local since it's compatible with Lua 5.1.\n. @jgonggrijp Fair enough.\nPlease let me know if the new openresty tarball give above fixes the issue without hassles on your side :)\n. @jgonggrijp Glad to hear that. Thanks for your feedback.\n. @zhangjiachao Any progress have you made on your side? You don't seem to have the same issue as @jgonggrijp though (according to your autoconf.err file contents).\n. Consider it resolved.\n. @RicherdLee Please don't use Chinese here. This place is supposed to be English only. If you really want to use Chinese, please join the openresty (Chinese) mailing list and post there instead. Please see https://openresty.org/#Community Thank you for your cooperation.\nRegarding your question, the official OpenResty does not provide any MongoDB libraries, so you should rely on community implementations instead. This means this question is also a bit off-topic for this ngx_openresty project (well, it's not OT if you are asking for a MongoDB library in the official OpenResty bundle). Just my 2 cents.\n. @dragon9783 The Lua VM lists all the paths it ever attempted after the module ... not found line in that very error message. You can check that path list for debugging.\nBasically, you should use the -p PATH option to start your nginx and PATH points to the root of your application directory tree (which does not have to be and actually shouldn't be the installation directory tree of OpenResty). And then configure\nnginx\nlua_package_path '$prefix/lua/?.lua;;';\nliterally in your nginx.conf according to your application tree structure given above. Oh, please note that both the $prefix variable and the question mark (?) have special meanings to the Lua VM, so do not substitute it by hand with anything else.\n. @dragon9783 Also, if Lua VM complains an existent file path as \"no file\", it actually means the system account used by your nginx worker processes (it is the nobody account by default) do not have enough permissions to resolve that path or access that file.\n. @dragon9783 You shouldn't hard-code an absolute path in module search path list. That's a bad practice. Also, appending stuff to package.path in the request handler can result in a memory leak.\nYou should only specify the root of your application tree via the -p option while starting nginx. See\nhttp://openresty.org/#GettingStarted\nHow come my lua_package_path configuration does not work for you? Have you specify the -p option properly? Keep an eye on the paths attempted by the Lua VM in your error.log file.\n. @dragon9783 In general, modifying package.path is not recommended. Use lua_package_path (and lua_package_cpath if DSO is involved) in your nginx.conf and start your nginx with -p PATH option instead.\n. @dragon9783 BTW, the PATH specified in the -p option of the nginx command line is the value of the special $prefix variable in my configuration snippet for lua_package_path (given above).\n. @RicherdLee You can just use the init_by_lua directive for it:\nhttps://github.com/openresty/lua-nginx-module/#init_by_lua\nIt runs before nginx forks off worker processes.\n. @RicherdLee BTW, such general questions should go to the openresty-en mailing list instead. Please see\nhttps://openresty.org/#Community\nThanks for your cooperation :)\n. @RicherdLee Oh, BTW, use of Lua global variables is discouraged. You should really use custom Lua modules (.lua files) instead. Please see\nhttps://github.com/openresty/lua-nginx-module#lua-variable-scope\n. @nickcen Please, no Chinese here. This place is considered English only. If you really want to use Chinese, please join the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community\nRegarding your question, you misused the --with-openssl=DIR option. The DIR path there must be the source tree of OpenSSL instead of the installation tree (containing the built binaries as well as headers). To quote the usage info printed by ./configure --help:\n--with-openssl=DIR                 set path to OpenSSL library sources\nNote the \"sources\" word above.\nOn the other hand, if you want the OpenResty build to use the installed OpenSSL library (via homebrew, for example), then you should really specify the --with-cc-opt=\"-I/path/to/openssl/include\" and --with-ld-opt=\"-L/path/to/openssl/lib -Wl,-rpath,/path/to/openssl/lib\" options instead.\nCheck out the following document for more details on building OpenResty on Mac OS X:\nhttps://openresty.org/#Download\nBTW, my daily machine is a macbook ;)\n. @JounQin I think you can just install the OpenSSL library via homebrew or something like that.\n. @JounQin BTW, the contents in the file build/nginx-1.9.3/objs/autoconf.err in your OpenResty source directory can be helpful when debugging.\nOh, please consider using 3rd-party paste services like gist.github.com to avoid flooding the ticket board. You can just share the links here. Thanks for your cooperation.\n. @JounQin You misused the --with-openssl=DIR option. The DIR path there must be the source tree of OpenSSL instead of the installation tree (containing the built binaries as well as headers). To quote the usage info printed by ./configure --help:\n--with-openssl=DIR                 set path to OpenSSL library sources\nNote the \"sources\" word above.\nOn the other hand, if you want the OpenResty build to use the installed OpenSSL library (via homebrew, for example), then you should really specify the --with-cc-opt=\"-I/path/to/openssl/include\" and --with-ld-opt=\"-L/path/to/openssl/lib -Wl,-rpath,/path/to/openssl/lib\" options instead.\n. @w00000000000000000000000 Let me know if you have any particular issues on that system.\n. @w00000000000000000000000 Sorry, I cannot parse your English sentence above.\n. @w00000000000000000000000 Please do not abuse this ticket system for instant messaging. How does your last question have anything to do with the title of this ticket?\n. @w00000000000000000000000 General discussions should go to the openresty mailing lists. Please see https://openresty.org/#Community But again, ask your questions seriously and responsibly.\n. @crealist This place is considered English only. And I cannot read Russian. Sorry. Furthermore, I don't think your question is related to the current project (ngx_openresty).\n. @mcd-php Maybe just add the line \"cpan Markdown::Pod\" in the README?\n. Fixed the missing build dependencies in the docs. Thanks.\n. @ninesunqian Seems like some memory corruptions going on in your nginx workers. Will you try providing a minimal and standalone example with detailed steps that we can use to reproduce the crashes easily on our side?\nIn addition, will you try running the \"lgc\" command of the nginx-gdb-utils in your gdb session with the core dump? Please see\nhttps://github.com/openresty/nginx-gdb-utils#lgc\nJust a reminder: if your subrequest's responses can be huge, then it's a bad idea to use ngx.location.capture for them because this method always buffers the whole subrequest response body. Instead, you should pursue streaming processing via either body filters or cosockets.\n. @ninesunqian Any thing in your nginx's error.log file? (Better enable the nginx debugging logs temporarily) Also try turning on the lua_code_cache directive in your location.\n. @ninesunqian Also, as I suggested, trying running the \"lgc\" command in gdb with the core dump.\n. @ninesunqian Oh, I thought you were using the bundled LuaJIT of recent OpenResty versions. There is a memory leak in those older versions of LuaJIT. This is also why use of the latest OpenResty formal release is highly recommended.\n. @ninesunqian OpenResty 1.4.2.7 is ancient (released before September 2013) and has many known bugs fixed in recent versions of OpenResty. I don't understand your \"luac file and compile script\" issue really.\nBTW, don't use LUAJIT_USE_SYSMALLOC for production, it's either slow (on i386 and etc) or even buggy (on x86_64, for example).\n. @ninesunqian Ah, okay. BTW, the latest OpenResty is 1.9.3.2 now:\nhttps://openresty.org/#Download\n. @ninesunqian Several comments:\n1. It's possible that your own Lua code has memory leaks (like buggy code using FFI or even leaks in your own C code). I don't have the time to help you debug your own code. Having said that, there's tools you may find useful in debugging memory leaks in the nginx-systemtap-toolkit, stapxx, and nginx-gdb-utils projects on GitHub (under openresty/).\n2. If you believe there is a memory leak or some other bug in the nginx standard module ngx_mp4, then you should report it to the nginx mailing list instead since OpenResty bundles the official nginx core.\n3. Be careful when interpreting the memory usage metrics from your system tools since the OS memory management model is usually complicated and there's gotchas with RES, VIRT, just to name a few.\n. @ninesunqian 49834 bytes means only ~50KB is allocated on the Lua land (in terms of GC-managed memory), then it cannot be any leaks on the Lua land. BTW, it might not be a memory leak at all because not every single byte of memory can be immediately returned to the OS due to inevitable memory fragmentation in the virtual memory space. But you definitely need to look deeper by using tools like valgrind and etc. To ensure there is a leak, you need to ensure the memory will grow forever without stabilized around certain threshold. Make sure it's not an artifact of memory fragmentation.\n. @ninesunqian Well, it looks like false leaks due to memory fragmentations to me. You may just be lucky here. You can analyze the memory block address distribution across the virtual memory space by tracing the memory allocation functions of libc (malloc, mmap, free, and etc).\n. @ninesunqian Yes, MAP_32BIT is required. BTW, LUAJIT_ENABLE_GC64 is highly experimental and the JIT compiler is not supported in this mode.\n. @Dyluck Don't do that. ngx.say is expensive because it always invokes the whole nginx output filter chain (and often a syscall as well). You should buffer such little bits yourself with a Lua table instead and call ngx.say at last.\n. Please see my suggestions here: https://github.com/openresty/ngx_openresty/issues/131#issuecomment-160362769\n. @sparvu It looks like memory corruptions but I'm not sure whether the crash site is the culprit or just a consequence of an earlier corruption or corruptions. This is not something obvious. So if you can reproduce it easily, valgrind can be helpful in locating the real culprit. Also, those gdb python tools can give us more context info at the crash site. Finally, if you can create an isolated and minimal example that only involves standard OpenResty components and that can reproduce the crash easily on our side, then it would be very easy for us to investigate on our side :)\n. @sparvu Oh, BTW, disabling the C compiler optimizations can help gdb produce more detailed \"bt full\" output (we can see from your backtrace that most of the local C variables are optimized out). To disable the optimizations, just pass --with-cc-opt=\"-O0\" --with-debug to your ./configure command line while building OpenResty. This is just for debugging though since it introduces significant runtime overhead.\n. @sparvu Okay, I see what is going on here. There is a data alignment issue in the cosocket connection pool which explodes on ARM processors. Thanks for the detailed report! I'll work on a fix later today.\n. @sparvu Please apply the following patch to the bundle/ngx_lua-*/ directory in your OpenResty source tree and rebuild everything (from ./configure):\n``` diff\ndiff --git a/src/ngx_http_lua_socket_tcp.c b/src/ngx_http_lua_socket_tcp.c\nindex 4640f87..0b9039c 100644\n--- a/src/ngx_http_lua_socket_tcp.c\n+++ b/src/ngx_http_lua_socket_tcp.c\n@@ -4347,7 +4347,7 @@ ngx_http_lua_socket_tcp_setkeepalive(lua_State L)\n     ngx_http_lua_socket_tcp_upstream_t  u;\n     ngx_connection_t                    c;\n     ngx_http_lua_socket_pool_t          spool;\n-    size_t                               size;\n+    size_t                               size, key_len;\n     ngx_str_t                            key;\n     ngx_uint_t                           i;\n     ngx_queue_t                         q;\n@@ -4477,7 +4477,9 @@ ngx_http_lua_socket_tcp_setkeepalive(lua_State L)\n         ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,\n                        \"lua tcp socket connection pool size: %ui\", pool_size);\n\nsize = sizeof(ngx_http_lua_socket_pool_t) + key.len\nkey_len = ngx_align(key.len + 1, sizeof(void *));\n+\nsize = sizeof(ngx_http_lua_socket_pool_t) + key_len - 1\n                + sizeof(ngx_http_lua_socket_pool_item_t)\n                * pool_size;\n\n@@ -4505,7 +4507,11 @@ ngx_http_lua_socket_tcp_setkeepalive(lua_State L)\n         p = ngx_copy(spool->key, key.data, key.len);\n         p++ = '\\0';\n\nitems = (ngx_http_lua_socket_pool_item_t *) p;\nitems = (ngx_http_lua_socket_pool_item_t *) (spool->key + key_len);\n+\ndd(\"items: %p\", items);\n+\nngx_http_lua_assert((void ) items == ngx_align_ptr(items, sizeof(void ))); for (i = 0; i < pool_size; i++) {\n     ngx_queue_insert_head(&spool->free, &items[i].queue);\n\n```\n\n\nThis patch should fix your crash on ARM. Please let me know if it works for you.\n. @sparvu Glad it works for you. There might be other data alignment issues. Just keep your reports coming :) Seems like I should really run my tests in an ARM box myself.\n. @sparvu Sounds cool.\n. @sparvu You failed to get any backtrace so it's not possible for me to reason about anything. It might be in the PCRE JIT since some recent versions of PCRE has serious bugs. Maybe you can try upgrading your PCRE to the latest version (8.37 atm):\nhttp://sourceforge.net/projects/pcre/files/pcre/\nDon't forget to confirm that your nginx binary is indeed linking against your new PCRE.\nAlso, 1.7.10.2 is a bit old. You can also try the latest 1.9.3.2 version instead.\n. @sparvu BTW, you can try the tools in the nginx-gdb-utils project to get some more info from your core dumps:\nhttps://github.com/openresty/nginx-gdb-utils\nThe \"lbt\" and \"lgc\" commands should be particularly useful here.\n(Oh, you may need a more recent version of gdb to run those gdb python tools BTW.)\n. @sparvu As long as you can easily reproduce it, you can also try using valgrind (but you need to turn daemon and master_process off in your nginx.conf) and/or enabling the nginx debugging logs to get more details about the issue.\n. @sparvu Will you try the latest OpenResty 1.9.3.2 release? I recall there was a data alignment fix in the shdict part. Not sure if it was post 1.7.10.2. Better upgrade to ensure it is not a fixed issue.\n. @sparvu BTW, it's much easier to make your nginx produce core dump files and then use gdb to inspect the core dumps off-line.\n. @sparvu Hmm, the PC is 0, which is strange. Maybe the stack is corrupted or an artifact of bad core dumps or a bad gdb. From the debug logs you provided, it looks like a data alignment issue in the shdict:get() method implementation.\nSeveral questions:\n1. Are you using lua-resty-core?\n2. Are you using the bundled version of the LuaJIT in OpenResty?\nPlease apply the following patch so that I can see more details in your nginx debug logs right before the crash:\n``` diff\ndiff --git a/src/ngx_http_lua_shdict.c b/src/ngx_http_lua_shdict.c\nindex 5ae420e..8386d21 100644\n--- a/src/ngx_http_lua_shdict.c\n+++ b/src/ngx_http_lua_shdict.c\n@@ -5,7 +5,7 @@\n#ifndef DDEBUG\n-#define DDEBUG 0\n+#define DDEBUG 1\n #endif\n #include \"ddebug.h\"\n@@ -419,6 +419,8 @@ ngx_http_lua_shdict_get_helper(lua_State L, int get_stale)\n     ngx_shm_zone_t              zone;\n     uint32_t                     user_flags = 0;\n\n\ndd(\"classic C API\");\n+\n     n = lua_gettop(L);\nif (n != 2) {\n@@ -1668,6 +1670,8 @@ ngx_http_lua_ffi_shdict_get(ngx_shm_zone_t zone, u_char key,\n ngx_http_lua_shdict_node_t  *sd;\n ngx_str_t                    value;\n\n\ndd(\"FFI API\");\n+\n     if (zone == NULL) {\n         return NGX_ERROR;\n     }\n```\n. @sparvu Another suggestion:\n\nTurn off daemon and master_process in your nginx.conf.\nConfigure only a single worker in worker_processes in your nginx.conf.\nAdd jit.off() to the beginning of your init_by_lua* Lua code handler.\nUse gdb to run your nginx from the very beginning, as in gdb --args /path/to/your/nginx -p /path/to/your/prefix/ -c conf/nginx.conf and then type the run gdb command right after your (gdb) prompt.\n\nHopefully you can see something meaningful.\nIf you still see nothing meaningful, you can try setting a break point on the C functions ngx_http_lua_shdict_get_helper and ngx_http_lua_ffi_shdict_get and single-step through these functions' bodies.\n. @sparvu Oh, if possible, try upgrading your gdb to the latest version, and better with the python support so that you can run the advanced gdb tools like lbt and lvmst in nginx-gdb-utils, which can also be helpful.\n. @sparvu From your debugging logs, it seems that the first crash happened in the ngx_shmtx_unlock C function in the nginx core, i.e., trying to unlock the shdict lock. Maybe it's worth setting a breakpoint on the entry of that C function and walking through it's code lines in gdb as well.\n. @sparvu Everytime you hit a breakpoint, please use \"bt full\" to get a full backtrace at that point.\n. @sparvu According to the debug logs, seems like it always crashes when your Lua code tries to fetch the key \"63795\" in your shared dict \"workers\". Maybe you can construct a minimal example with only setting and getting this key in a single shdict \"workers\" with a typical value (should be the same as your original setup). A minimal test case is easier to debug and run.\n. @sparvu Are you able to reproduce the crash if you disable lua-resty-core in your configuration?\n. @sparvu Will you turn off lua-resty-core for now? It's easier to debug without lua-resty-core and you just need to set breakpoints on  ngx_http_lua_shdict_get_helper and ngx_shmtx_unlock.\n. @sparvu I don't quite understand the session stepping through the get_helper function. Seems like you got nothing after executing the line dd(\"classic C API\");? This is very strange. Seems like there are corrupted debug symbols or just the lack of debug symbols in libc or something? The stepping cannot go beyond the shdict:422 line before the SEGV?\n. @sparvu What C compiler did you use to compile OpenResty? If the gcc is too old, is it possible to use a newer gcc (4.5+)? Will you upgrade your gdb? If you're using clang, maybe lldb can be smarter?\n. @sparvu Okay, seems like you're using gcc. What version of gcc are you using?\n. @sparvu Hopefully you can get a more recent gdb. The latest official release of gdb is already 7.10 :)\n. @sparvu Thank you for your patience. BTW, you only need to run \"bt full\" when you hit a breakpoint. You don't need to run \"bt full\" everytime you run \"next\" or \"step\". Also, please put some marks between separate gdb sessions to avoid potential confusions. Thank you.\n. @sparvu Yeah, my hunch is that clang in your FreeBSD system should be much more modern than the gcc there.\n. @sparvu BTW, I may not be able to respond to you in the next 48 hours or so due to long travels. I'll be online when my journey ends. Just a quick heads-up. Thank you for your understanding.\n. @sparvu Okay, lldb is even worse. The execution flow does not even reach dd(\"...\") it seems. Something very bad happens here (either the debug symbols or the machine code generated by the compiler or something completely different). After hitting the breakpoint, will you run the \"disassemble\" command to get the machine code dump around the the current PC? Also, please use the \"stepi\" (\"si\") gdb command to walk forward instead of \"next\"? Thanks.\nI'll also get a Raspberry Pi Linux box to run ngx_lua's test suite. I don't have RBPI2 box though. It would be faster if you can provide Internet access to your box so that I can log into your box directly. Feel free to send me login details privately at agentzh@gmail.com Thank you.\n. @sparvu Same as #133 . There is no way to override the Lua C library's optimization level atm.\n. @sparvu Not really. The --with-cc-opt=STRING option is only for the nginx core building process by design. You should use the ./configure option --with-luajit-xcflags=\"-O0\" to disable the C compiler optimizations for LuaJIT instead.\n. @adpoint Please do not use Chinese here. Thank you. BTW, such general questions should go to the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community for more details. Thanks for your cooperation.\n. @dipenpatel235 Are you using the version of libdrizzle specified below?\nhttps://github.com/openresty/drizzle-nginx-module#installation\nIt's known that some other versions of libdrizzle do have bugs like this.\nAlso please ensure your mysqld server is not using the old authentication method (ensure that you don't have the \"old-passwords\" flag in your my.cnf file).\n. @xiuluo999 Please, do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community Thanks for your cooperation.\nRegarding your question, we usually use a single server {} block in nginx.conf while use Lua to dynamically load, cache, and switch different virtual server related configurations in that single server {} block. For example, CloudFlare uses a single server {} block to serve millions of different zones (or origin sites) using this approach.\n. @kalons I meant the former, all in the same server, no extra proxying needed. Dynamic configurations and dynamic CDN. We cannot afford running millions of \"real virtual servers\" either.\n. @nikolay We regularly upstream our patches to the official NGINX core, most of which are bug fixes. You can find all the patches we apply to NGINX here:\nhttps://github.com/openresty/ngx_openresty/tree/master/patches\nWe have no intention to create an NGINX fork. Nor do we have with LuaJIT. Our changes are mostly very small and even temporary (we keep upstreaming changes, but it takes time, for obvious reasons).\n. @EtherDream Are you following the steps for Mac OS X on the following page?\nhttps://openresty.org/#Installation\n. @EtherDream Please, no Chinese here. Thank you.\nRegarding your question, --with-openssl=PATH requires the source tree of OpenSSL instead of the installation tree.\n. @EtherDream Seems like your system environment is messed up. Do you know where this /usr/local/include/ngx_auto_config.h file comes from? It looks like a historical bad NGINX installation by incorrectly copying nginx header files to the system include paths. Try removing it if it is not intentional.\n. @chenzx Are you 100% sure you have an index.html page under F:/? Because from the error message, you don't have a file named index.html or index.htm there.\n. @chenzx Then it seems that you are having a permission issue. Maybe you should try some places other than the root partition of your windows file system?\n. @chenzx I tried with a local partition C:/ and it works as expected on my 64-bit Windows 10 system:\nnginx\nlocation / {\n    root c:/;\n    index  index.html index.htm;\n    autoindex on;\n}\nconsole\n$ curl localhost/\n<html>\n<head><title>Index of /</title></head>\n<body bgcolor=\"white\">\n<h1>Index of /</h1><hr><pre><a href=\"../\">../</a>\n<a href=\"%24Recycle.Bin/\">$Recycle.Bin/</a>                                      27-Oct-2015 10:36                   -\n<a href=\"%24WINDOWS.~BT/\">$WINDOWS.~BT/</a>                                      01-Dec-2015 05:09                   -\n<a href=\"Config.Msi/\">Config.Msi/</a>                                        13-Jan-2016 07:10                   -\n<a href=\"Documents%20and%20Settings/\">Documents and Settings/</a>                            10-Jul-2015 12:21                   -\n<a href=\"MinGW/\">MinGW/</a>                                             28-Oct-2015 02:45                   -\n<a href=\"PerfLogs/\">PerfLogs/</a>                                          10-Jul-2015 11:04                   -\n<a href=\"Program%20Files/\">Program Files/</a>                                     13-Jan-2016 07:09                   -\n...\n. @chenzx Maybe it's just your Windows's security settings. It works fine with root partitions like C:/ on my side.\n. @chenzx Well, this one is easy. Just add the following line to your location {} block:\ncharset gbk;\nJust tested on my Windows 10 and the Chinese directory names are displayed okay in Google Chrome.\n. @chenzx Please, no Chinese here. This place is considered English only. If you really want to use Chinese, please join the opernesty (Chinese) mailing list instead. Please see https://openresty.org/#Community Thanks for your cooperation.\nRegarding your question, yes, it seems that the autoindex module of NGINX indeed cannot deal with non-ASCII character file entries on Windows:\nhttps://forum.nginx.org/read.php?21,234255,234264#msg-234264\nWindows is indeed complicated in the multi-byte character set handling, it seems.\nIt should work fine on Linux though :)\n. @chenzx Better avoid non-ASCII characters in the file names and directory names in the first place when you are directly mapping them to the outside world.\n. @lushibi I think it's not specific to OpenResty, but a limitation in nginx's official module. If you can also reproduce it with the standard nginx win32 binary, then you should really report it to the official nginx mailing list (or the nginx bug tracker system).. @sosojustdo No Chinese here, please. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community\nRegarding your question, lua-resty-template is not an official component of OpenResty, but rather a 3rd-party component. So the best place to report issues in that library is to create an issue here:\nhttps://github.com/bungle/lua-resty-template/issues\nBTW, you may want to try out the lemplate compiler here as well:\nhttps://github.com/openresty/lemplate\n. @bobrik I'd rather rely on https instead of checksums.\n. @bobrik I've ensured that we use https and enable cert checks in that script. The only exception is the standard Lua tarball where www.lua.org does not seem to support https properly. Alas.\n. @bobrik So are you suggesting carefully checking every line of the diffs for all the versions of these software components manually and make checksums for each of them ourselves?\n. @bobrik I won't mind if you volunteer to do that for us for all the releases we are going to make in the future :)\n. @bobrik If you are worried about inconsistency between my build and yours, then please use the OpenResty release tarballs on the openresty.org official site which have PGP signatures. See\nhttps://openresty.org/#Download\n. @bobrik The mirrror-tarballs script is just meant to be used by OpenResty bundle developers, not users.\n. @yanji0520 Please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/#Community Thanks for\nyour cooperation.\nRegarding your question, the ngx_redis module does not support the new Redis 3.0 cluster feature yet.\n. @yanji0520 Both ngx_redis and ngx_redis2 were created way before Redis added the cluster protocol so there's no wonder that they do not understand those redirect responses (yet).\n. @yanji0520 You could, however, use custom hasing to distribute your requests to multiple redis nodes and perform failover and etc in your own (Lua) code in nginx.\n. @exoristi You need to specify the --with-cc=gcc option on Windows. Check out the following document for more details on building OpenResty in Win32:\nhttps://github.com/openresty/openresty/blob/master/doc/README-win32.md#details-about-the-building-process\nBTW, official binary packages on Windows can be found here:\nhttps://openresty.org/#Download\n. @exoristi Are you sure you are using the latest MinGW gcc?\n. @exoristi Your MinGW gcc is just too old for compiling LuaJIT. Mine is 4.8.1 in my Windows 10 system:\nagentzh@win64 /c/agentzh/openresty-1.9.7.3 $ gcc --version\ngcc.exe (GCC) 4.8.1\nCopyright (C) 2013 Free Software Foundation, Inc.\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n. @exoristi Please upgrade to the latest MinGW gcc toolchain in your Windows system.\n. @exoristi That's weird. Since gcc 4.8.1 must have the stdint.h header. Maybe you were still using the old gcc binary due to bad PATH environment? Anyway, use of the official Win32 build of OpenResty is recommended. I'm closing this for now.\n. @dipenpatel235 Try disabling your own 3rd-party modules from your OpenResty build (like ngx_upload_progress, ngx_pagespeed, and ngx_upstream_fair). It may be that these 3rd-party modules cannot work properly with the version of the official NGINX core bundled in OpenResty. Well, just guessing. You need to provide more detailed information for diagnostics. Please see\nhttp://openresty.org/faq.html#how-should-i-report-a-problem\n. @webeau Fixed the compilation errors in git master of lua-nginx-module by disabling features unsupported by LibreSSL.\n. @liqile Please do not use Chinese here. If you really want to use Chinese, please join the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community\nRegarding your question, please see this official document: https://github.com/openresty/openresty/blob/master/doc/README-win32.md\n. @doudou586 You could use the official Win32 binary distribution of OpenResty with leaf's pgmoon PostgreSQL driver library:\nhttps://github.com/leafo/pgmoon\n. @doudou586 You don't need luarocks to use pgmoon. AFAIK, it's a pure Lua library. Just add the following directive to your nginx.conf:\nlua_package_path \"/path/to/pgmoon/?.lua;;\"\nAssuming your pgmoon source directory is under the path /path/to/. And then require() the pgmoon modules as you wish in your Lua code.\n. @pataquets Yeah, this is something we could look into :)\n. @pataquets But I'd go for the second option only otherwise it's not really \"OpenResty\".\n. @neomantra Are you interested in creating and maintaining the official OpenResty docker hub image? I'd like to be the person sending requests instead of doing the hard work :) Please let me know how I can help you in any ways.\n. @neomantra IIRC, I used to register an openrestyorg docker hub account. Let me know if you like to share that account.\n. @neomantra Yeah, there's plans to provide official binary packages of OpenResty for debian, ubuntu, centos, and etc. But we're not there yet.\n. @neomantra BTW, regarding your sample dockerfile, I think it's better to\n1. enable options like --with-ipv6 and --with-pcre-jit by default in the binary build's ./configure command.\n2. pass -jN option to both the ./configure and make commands to speed up the build.\n3. use --with-pcre=PATH and --with-openssl=PATH options in ./configure to ensure we always include the latest versions of the PCRE and OpenSSL libraries (no matter what the system provided versions are).\n4. Add an init script to easily start and stop the openresty as a service (we can steal NGINX's init script and apply some changes to fit OpenResty's needs).\nI'm not really a docker person. There might be other tweaks needed. But feel free to educate me if I'm wrong :)\n. Hmm, FWIW, I think we'd better have a debug version of OpenResty which is built with ./configure --with-debug --with-no-pool-patch in addition to the default production version. As you can see, I'd like to be the one proposing things :)\n. @neomantra With --with-pcre=PATH and --with-openssl=PATH, the nginx build system will automatically build these libraries from source and statically link against them. What we need to do is just to download and unpack the source tarballs of these libraries so that we can reference their paths in the ./configure command line :)\nI've already added you to the openresty github organization. Please let me know if you need anything further from me :) Thanks for your contribution!\n. @neomantra The version of PCRE looks good but I'd suggest use of OpenSSL 1.0.2e for OpenResty 1.9.7.3 because 1.0.2f introduces some minor incompatibilities that are fixed only in newer NGINX cores (1.9.12+). We can bump the version of OpenSSL later when we have OpenResty 1.9.12.x :)\n. @neomantra Awesome! Thanks for your contribution!\n. @doudou586 I think this belongs to the openresty.org repos instead of this one. And patches welcome :)\n. @wangyinsheng It should work. Your error message indicates that your cjson.so was built against an incompatible Lua ABI (like Lua 5.2 or 5.3). Note that only the Lua 5.1 ABI is supported in OpenResty.\n. @JarleB I failed to reproduce the problem with the following minimal and standalone example:\nnginx\nlocation / {\n    access_by_lua_block {\n        ngx.exit(403)\n    }\n}\nSending an HTTP 1.0 request:\nconsole\n$ curl -0 localhost:8080/\n<html>\n<head><title>403 Forbidden</title></head>\n<body bgcolor=\"white\">\n<center><h1>403 Forbidden</h1></center>\n<hr><center>nginx/1.9.7 (no pool)</center>\n</body>\n</html>\nIt's exactly what we'd expect.\nI guess you just forgot to call ngx.exit(200) (or something like that) in your access_by_lua* Lua handler to short-circuit the request processing.\n. HTTP 1.0 is special since it lacks many features. If you find anything unusual, please provide a minimal and standalone example that everyone can easily run and reproduce the oddity you are talking about. Thank you.\n. @marcusramberg Maybe you should turn off the lua_http10_buffering directive in your nginx.conf?\nhttps://github.com/openresty/lua-nginx-module#lua_http10_buffering\n. @marcusramberg Because I don't maintain the lua-resty-template library, I don't quite understand your description above. Better derive a minimal and standalone example so that I can follow much more easily :)\n. @marcusramberg If you want to terminate the processing in your access by lua handler, then you should really call ngx.exit(200) (or something like that) in your Lua code. See\nhttps://github.com/openresty/lua-nginx-module#ngxexit\n. @marcusramberg HTTP 1.0 buffering is on by default because HTTP 1.0 keep-alive requires that feature.\n. @marcusramberg You are required to call ngx.exit() to terminate the request handling if you generate response in the access phase (or rewrite phase). No matter whether HTTP 1.0 buffering is on or off.\nOtherwise you'll conflict with the response generated by ngx_proxy and other modules in the content phase.\n. @marcusramberg ngx.print does not affect HTTP 1.0 buffering at all. Only the appearance of the Content-Length response header does.\n. @marcusramberg That is exactly what I was saying. Only Content-Length can affect the HTTP 1.0 buffering.\n. @marcusramberg Implicit header sending triggered by ngx.say or ngx.print does not include a Content-Length response header at all. I agree that line can be ambiguous and needs tweaks.\n. @marcusramberg After rereading that sentence, it is not ambiguous to me at all. You are required to set a Content-Length response header explicitly before header sending if you want to disable the HTTP 1.0 buffering no matter what. And header sending is either an explicit ngx.send_headers or an implicit ngx.say/ngx.print call. I'm sorry that I don't see how you can get it wrong.\n. @marcusramberg Neither ngx.send_headers nor ngx.say/ngx.print can be used to set a Content-Length response header. You have to use ngx.header[\"Content-Length\"] = N for it.\n. @xbsura Looks like your nginx worker crashes for some reason. And Lua's pcall and xpcall can only catch Lua exceptions while Lua exceptions should never crash an NGINX worker. Some suggestions:\n1.Use tools like gdb to find out why your nginx worker crashes. See https://www.nginx.com/resources/wiki/start/topics/tutorials/debugging/#core-dump\n2. (Temporarily) enable nginx debugging logs to see the events and actions before the nginx worker crashes or exits. See https://www.nginx.com/resources/wiki/start/topics/tutorials/debugging/#debugging-log\n. @xbsura Also, ensure you're using the latest version of OpenResty. You may find more helpful tips here regarding reporting such problems: http://openresty.org/faq.html#how-should-i-report-a-problem\n. @xbsura Process crashes must terminate the process. Please follow my 2nd suggestion above regarding debugging logs.\n. @xbsura Also, ensure you have checked if there's any error log messages in your nginx error log file.\n. @xbsura The log messages you quoted are at the \"notice\" level, which means that they are not even warnings, thus completely harmless.\nI think you should resolve your crashes first. Not sure if those crashes corrupt the shm zones though the chance is small.\n. @xbsura How can you tell that that loop is indeed exited? Is it possible that your loop is just blocking on something?\nIs that loop inside some ngx.timer.at timer handler? Hopefully you are not doing that in init_worker_by_lua* directly since that will block the worker startup forever.\nBTW, it's recommended to use a recurring timer instead of a dead loop. See the lua-resty-upstream-healthcheck library for such an example. But still, a dead loop cannot exit for no reason. My hunch is that there might be some silly mistakes or the loop has not really exited but just block on something (I have no idea what's really in your dead loop body, really).\n. @xbsura Several notes:\n1. init_worker_by_lua* always runs in a worker process, never in the nginx master process.\n2. As I've already pointed out, you should not use a dead loop directly in init_worker_by_lua since it will block the nginx worker process and prevents it from serving any requests from the client.\n3. The timer overhead is very very small. The request time increases like 16ms to 2000ms look like some programmatic errors in your own Lua code, which horribly block the nginx worker processes.\n4. Use the flame graph tools to analyze the blocking operations in your nginx workers (either CPU-bound or IO-bound): https://openresty.org/#Profiling\nMy hunch is that you are doing something very wrong in your Lua code.\n. @xbsura Your 3rd-party DSO that talks to zookeeper must be blocking your nginx worker's event loop on any I/O operations. No matter what.\n. @xbsura You must use nonblocking zookeeper clients that are aware of NGINX's event loop, like those based on the classic nginx upstream mechanism or ngx_lua's cosocket API.\n. @xbsura With cosockets, you don't need any callbacks at all for nonblocking network programming. See how lua-resty-mysql and lua-resty-memcached are implemented, for example.\n. @BurNIngJoy This is just the builtin variable $server_addr in the nginx core. See its official document:\nhttp://nginx.org/en/docs/http/ngx_http_core_module.html#var_server_addr\nngx_lua does not do anything special with it.\n. @kracekumar ngx.say always generates response body data which means that using it in the context of log_by_lua* always fails (if you check its return values) because at the log phase the response is already sent out in full.\nFor your purpose, you define a log format called main via the log_format directive but you never reference it in the access_log directive. The correct usage is\nnginx\naccess_log /var/log/nginx/access.log main;\nSee we reference the format as the second argument to the access_log directive. See the official documentation for the log_format and access_log directives for more details:\nhttp://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\nhttp://nginx.org/en/docs/http/ngx_http_log_module.html#access_log\nSo this is really a question of using the standard NGINX, not special to OpenResty at all.\n. @nikolay Updates of components in the OpenResty bundle only happen when the components have nontrivial changes. A version bump is surely a trivial change which does not count, I'm afraid :)\n. @warmchang What's in your directory /c/openresty/openresty-1.9.7.4/build/luajit-root? Seems like your LuaJIT build was incomplete. Ensure you have run make clean before running build-win32.sh for another time.\n. @warmchang The error was \"ld.exe: cannot find -llua51\". But the command triggering that does have the correct library search path set, that is, -L/c/openresty/openresty-1.9.7.4/build/luajit-root. And there is indeed a lua51.dll file in that luajit-root directory. Weird. There seems to be some reason that ld refuses to accept that lua51.dll there.\nBecause I never see this on my Windows boxes when building the Win32 binary, it's a bit tough for me to reproduce and debug this for you. Maybe you can try digging in that direction yourself?\nFailing that, you can use the official Win32 binary distributed on the openresty.org site:\nhttps://openresty.org/en/download.html\n. @xbsura I'm not sure what you're talking about here. Will you give a standalone and complete example to demonstrate the problem?\n. @xbsura This is interesting. Will you please provide a patch for this issue? Thanks!\n. @da99 Will you elaborate your real-world use case for fetching the latest version number of OpenResty?\n. @da99 Well, I'm indeed going to add a /download/openresty-latest.tar.gz resource on the openresty.org site. Hopefully it'll make your life easier.\nOn the other hand, you can surely download the HTML page of http://openresty.org/en/download.html and scan the HTML source locally if you want to :)\n. @SilenceCarrot Please do not use Chinese here. This place is considered English only. Thanks for your cooperation.\nRegarding your question, you may try out the OpenResty bundle directly to save your troubles: https://openresty.org/\n. @lihui0213 Yes, the next OpenResty release will probably be based on NGINX 1.9.14 or later. We're still doing extensive compatibility testing on our side.\n. @lihui0213 Probably in the next few weeks if no other things pop up.\n. @lihui0213 Are you talking about the official nginx windows binary or OpenResty's windows binary?\n. @lihui0213 OpenResty is not an NGINX fork. So generally speaking you should really ask the official NGINX team to \"fix it\" :)\nWe don't mind including a temporary NGINX core patch in OpenResty's source tree if it's good enough. So patches welcome :)\n. @xu4wang It is a very bad idea to call ffi.cdef and alike for multiple times (here you call them upon every request). You should define a proper Lua module instead and call ffi.cdef and etc on the Lua module's top-level scope so that they only run once. See lua-resty-string and lua-resty-core for such examples.\n. @onlonely Please do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/en/community.html Thanks for your cooperation.\nRegarding your question, I think you should really use custom Lua modules to compose different processing handlers on the Lua land instead. Well, it's Lua.\n. @nikolay Nope. We use our own versioning scheme. Given that I'm already maintaining so many opensource projects, I don't want to bother thinking too much about version numbers. Well, they are just numbers.\n. @amingilani We do have an official documentation section explaining how our version schema works:\nhttp://openresty.org/en/faq.html\nWe won't break any backward compatibility in the minor dot releases. For example, 1.11.2.4 is strictly backward compatible with 1.11.2.1. Well, actually, we seldom or never break API level backward compatibility. We take this very seriously. So it shouldn't be an issue at all.. No, at least it breaks backward compatibility and breaks exiting tool chain and packages. We cannot afford such chaos. This issue is closed. I'd spend my time on something truly meaningful and important.. @ccleung Will you provide the version numbers of the related software (nginx, ngx_lua, or just openresty) and operating system you're using? Thanks for your report!\n. @ccleung Thanks for the details! And sorry for the delay on our side. We'll look into this as soon as we can manage.\n. @ccleung Will you please try the following patch for lua-nginx-module?\n``` diff\ndiff --git a/src/ngx_http_lua_logby.c b/src/ngx_http_lua_logby.c\nindex 0a79acd..dae4e07 100644\n--- a/src/ngx_http_lua_logby.c\n+++ b/src/ngx_http_lua_logby.c\n@@ -211,7 +211,8 @@ ngx_http_lua_log_by_chunk(lua_State L, ngx_http_request_t r)\n         lua_settop(L, 0);    /*  clear remaining elems on stack */\n\n\nreturn NGX_ERROR;\n/ ensure that we do not abort subsequent log phase handlers /\n\nreturn NGX_DECLINED;\n         }\n} NGX_LUA_EXCEPTION_CATCH {\n```\n\n\nYou can apply the patch to OpenResty 1.9.7.3 like this:\nbash\ncd /path/to/openresty-1.9.7.3/\ncd bundle/ngx_lua-0.10.0/\npatch -p1 < /tmp/a.patch\nAnd then rebuild OpenResty from ./configure.\n. @ccleung BTW, are you 100% sure that your nginx worker processes never crash or exit abnormally?\n. @ccleung I cannot reproduce the issue on my side either. I don't think it's really related to log_by_lua* + error or even multiple client IPs. I guess some of your nginx worker processes exit abnormally or crashes. You can check out your nginx error log files for such things.\n. Please ignore my patch above, which is irrelevant.\nAccording to the code paths in the nginx core, the only way to get out of sync in the status stub counters is that some of your nginx worker processes crash due to some bugs. You can inspect the core dumps as instructed here:\nhttps://www.nginx.com/resources/wiki/start/topics/tutorials/debugging/#core-dump\nI see you are using some 3rd-party modules that are not maintained by us, for example, ngx_cache_purge and ngx_upstream_fair. I'm not sure if those nginx modules have any memory issues that can eventually lead to crashes.\n. @ccleung The easiest way to check if nginx worker processes exit abnormally is to use tools like ps to check the startup timestamp of all the worker processes. If they are almost the same, then you are good. If not, then some of the more recently started processed did exit abnormally.\nAlso, check the log level of your nginx error_log directive. If you set it too high, then you wouldn't see many lower level error messages anyway even if bad things had happened.\n. @ccleung You are aware that using LuaSocket at request phase will block the nginx event loop horribly? Never use such blocking Lua libraries at request time in OpenResty! The result can be catastrophic in terms of performance.\nSpeaking of the current issue, use of LuaSocket should not be related unless it has bugs that can lead to nginx worker process crashes (as I've already stated before).\nRegarding doing sockets in log phase, well, cosockets are disabled in that context for a reason. NGINX core does not support yielding and nonblocking I/O in that context. There exists a work-around by using 0-delay timers via ngx.timer.at where you can freely use cosockets in the timer handlers. This technique has been used by the lua-resty-logger-socket library, for example:\nhttps://github.com/cloudflare/lua-resty-logger-socket\nMaybe you can use that library directly I guess.\n. @ccleung Yes, it includes the logging phase, of course. Actually the only location where you can safely use blocking libraries is in init_by_lua* which runs your Lua code in the nginx master process where the nginx event loop does not exist at all.\n. @ccleung BTW, anything blocking you do in the log phase affects other concurrent requests served by the same nginx worker process and also the subsequent requests on the current (keep-alived) HTTP connection.\n. @ccleung This is memory corruptions. The location indicated by the backtrace does not look like the real culprit.\nTry \n1. removing those 3rd-party NGINX C modules not included in OpenResty (ngx_cache_purge and ngx_upstream_fair, at least), and\n2. removing those 3rd-party Lua libraries not included in OpenResty (if any).\nBecause these modules are not maintained by us, they may contain memory issues that corrupt the heap and affect any other parts of the process.\nWe've been running the same version of LuaJIT 2.1 in our global network for long. It's not very likely that it's LuaJIT's fault.\n. @ccleung BTW, OpenResty 1.9.7.3 is not the latest version. You should try the latest version, 1.9.7.4 atm, as well.\n. @ccleung Given the rate of crashes, I think it should be easy for you to reproduce the problem offline. You can try using the valgrind tool to find the real culprit. But remember disabling daemon and master process in your nginx.conf when running your nginx with valgrind.\n. @ccleung Oh, that explains the memory corruptions.\n. @alubbe Hopefully in the next few weeks. I'm still busy working on the new OR release.\n. @alubbe Yes, we'll move on the latest LuaJIT v2.1 once my tests show all green :)\n. @veficos Because nginx only passes a very limited set of system environments to its worker processes due to security considerations (you can find similar constraints in sudo configurations too, for example).\n. @techpulse Master.\n. @cellcb You need to serialize Lua tables yourself, like using JSON or something.\n. @Zenexer We'll eventually use our own markdown -> pod converter here:\nhttps://github.com/openresty/resty-cli/blob/master/bin/md2pod.pl\n. @Zenexer Fixed in git master by switching to resty-cli's md2pod.pl tool.\n. @alubbe Beware the special term \"TCP keepalive\". It means something very specific on the TCP protocol level:\nhttp://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html\nI'm pretty sure here you mean \"HTTP keepalive\" instead.\nRegarding your question, your first example does not involve any connection pool for your backend HTTP connections since there is no corresponding upstream {} configuration blocks and thus no \"keepalive\" configurations.\nIn the 2nd example, all your IPs share the same connection pool with the size limit of 100. But only connections with *matching addresses\" can get reused. This means that if your ask for a peer for 92.184.216.34, then the in-pool connections with the address 93.184.216.35 can never get picked up for it.\n. @alubbe BTW, such general discussions are recommended to move to the openresty-en mailing list instead. Please see\nhttp://openresty.org/en/community.html\nI'd rather keep the GitHub issues board for bug reports and patch review only. Thanks for your cooperation.\n. I think it's better to let the upcoming opm command-line utility to handle local installations of such Lua modules for OpenResty, as in\nbash\nopm install /path/to/lua-resty-foo/\n. @alubbe Just fixed in git master. Thanks for the report!\n. @khannavidur Maybe you'll find this library helpful:\nhttps://github.com/cloudflare/lua-resty-logger-socket\n. @goecho I think you can just specify a different prefix via the -p DIR/ option when starting nginx.\n. @yitony Please do not use Chinese here. This place is considered English only.\nRegarding your problem, it seems that you are using a weird path in your --prefix=PATH option of ./configure. Please provide the exact copy of the commands you used for building, as well as the detailed information about your operating system. Thanks!\n. @yitony I cannot reproduce it on my side on Linux.\nPlease try out the following commands as-is on your side (better copy&paste to avoid typos).\ncd ~/\nwget https://openresty.org/download/openresty-1.9.15.2rc0.tar.gz\ntar -xvzf openresty-1.9.15.2rc0.tar.gz\ncd openresty-1.9.15.2rc0/\n./configure --prefix=/opt/openresty -j8\ngmake -j9\nsudo gmake install\n. @yitony Also, please ensure your tarball file is not corrupted or incomplete. Check the MD5 checksum of the tarball like this:\n$ md5sum openresty-1.9.15.2rc0.tar.gz\n53bb6c6fbc856869adce9c0b018fb830  openresty-1.9.15.2rc0.tar.gz\nEnsure the output is exactly the same as mine given above.\n. Consider it resolved.\n. @fffonion Maybe you just want to use the release tarballs or prebuilt packages? See\nhttps://openresty.org/en/download.html\nand also\nhttps://openresty.org/en/linux-packages.html. @fffonion This repository is only meant to be used by the OpenResty development team themselves when packaging the OpenResty source releases.. @cjhust SPDY is dead: https://zoompf.com/blog/2015/02/spdy-dead-long-live-http2 And we won't support such 3rd-party nginx core patches at all. It's their fault anyway, not us.\nYou should switch to HTTP/2 instead which is the part of the nginx 1.9.15 core you are using.\n. @alubbe I am not sure about that github repo. AFAIK, CloudFlare maintains nginx core branches instead of nginx core patches internally for many years and the details are complicated and classified. As OpenResty maintainers, we won't support such random patches exposed by some CloudFlare employees.\n. @rshriram I think it's more relevant to the stream-lua-nginx-module github repository.\nRegarding your question, yes, you can manage your own balancer's state via lua-resty-lrucache or lua_shared_dict, depending on your requirements. With the help of balancer_by_lua* (which is still a PR for stream-lua-nginx-module BTW), you can handle unlimited number of upstream servers on the fly, without nginx reloads, of course. I know some CDN vendors are already taking this approach in production, though for the HTTP subsystem.\n. @rshriram Oh yeah, just configure all the possible listening ports in that single generic server {} configuration block in your nginx.conf. Hopefully there are just not too many :)\n. @0312birdzhang It's a bad idea to buffer large file contents on the Lua land. Use streaming processing wherever possible (like reading a data chunk from file, then output it immediately, and use ngx.flush(true) to wait for the data to be actually flushed out). In your case, you can rely on nginx's static content module to serve your content directly without going through Lua (you can still use access_by_lua* for example to add response headers, and etc).\nThere is a 2GB memory limit in each worker process for GC-managed memory in LuaJIT on x86_64.\n. @0312birdzhang Please, no Chinese here. This place is considered English only. Thanks for your cooperation.\n. Maybe you should use the release tarballs on openresty.org directly? This GitHub repo is for OpenResty core developers only.\n. @Jet-Yuen Which yum repository of OpenResty are you using?\n. @Jet-Yuen And also, what's in your /usr/local/openresty/nginx/conf/nginx.conf file?\n. @Jet-Yuen I've tested the official OpenResty yum repo on CentOS 7 x64 and the reload thing works correctly on my side (using the default nginx.conf installed).\n```\n[agentzh@centos7 ~]$ ps aux|grep nginx\nroot       2870  0.0  0.1  32664  1132 ?        Ss   06:10   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -c /usr/local/openresty/nginx/conf/nginx.conf\nnobody     2872  0.0  0.1  32668  1884 ?        S    06:10   0:00 nginx: worker process\nagentzh    2874  0.0  0.0 112648   972 pts/0    R+   06:10   0:00 grep --color=auto nginx\n[agentzh@centos7 ~]$ sudo service openresty reload\nReloading openresty configuration (via systemctl):         [  OK  ]\n[agentzh@centos7 ~]$ ps aux|grep nginx\nroot       2870  0.0  0.2  32664  2616 ?        Ss   06:10   0:00 nginx: master process /usr/local/openresty/nginx/sbin/nginx -c /usr/local/openresty/nginx/conf/nginx.conf\nnobody     2904  0.0  0.2  32668  2020 ?        S    06:10   0:00 nginx: worker process\nagentzh    2907  0.0  0.0 112648   976 pts/0    R+   06:10   0:00 grep --color=auto nginx\n[agentzh@centos7 ~]$ sudo service openresty stop\nStopping openresty (via systemctl):                        [  OK  ]\n[agentzh@centos7 ~]$ ps aux|grep nginx\nagentzh    2939  0.0  0.0 112648   976 pts/0    S+   06:10   0:00 grep --color=auto nginx\n``\n. @Jet-Yuen I guess you have turned off thedaemondirective in yournginx.confyourself, which could lead to the issue you are having. Just always turn on thedaemon`.\n. Oh that's very bad. Do not fork master!\n. Please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.\nPlease also read the following doc for how to report a problem in the right way:\nhttp://openresty.org/en/faq.html#how-should-i-report-a-problem\n. @timgent Please provide the full shell session somewhere (like on the gist site) and just share the link here. Thank you. It looks strange. You cannot reproduce it without the --add-module=PATH option, right?\n. @timgent It looks like Naxsi is doing something evil like patching NGINX's Makefile (see all those \" overriding recipe for target ...\" warnings from make). Not sure though. Better report to the author of Naxsi instead.\n. @roland-pope This is a change introduced since the official nginx core 1.9.13. To quote that release's relevant change log entry:\n\nChange: non-idempotent requests (POST, LOCK, PATCH) are no longer\n      passed to the next server by default if a request has been sent to a\n      backend; the \"non_idempotent\" parameter of the \"proxy_next_upstream\"\n      directive explicitly allows retrying such requests.\n\nSo you can see that you can also configure it to restore the original behavior.\n. @goudiao You must be using the features that require the new features in recent versions of OpenSSL while those are missing in LibreSSL. They just won't work at all with LibreSSL due to the lack of the equivalent features there (feel free to prove me wrong).\n. Consider it resolved.. @kendiyqx What do you mean by \"invalid\"? Please provide as many details as possible. See below on how to properly report an issue:\nhttp://openresty.org/en/faq.html#how-should-i-report-a-problem\nBTW, we always run extensive testing against all the OpenResty components (lua-resty-redis's set_keepalive included, of course):\nhttp://qa.openresty.org/\nSo the chance that this API function is broken is very very small.\n. FWIW, I've enabled the \"issues\" board of the openresty/lua-cjson repo.\n. @bungle Yes, lua-resty-json will be the future. The encoder is also on its roadmap and it will eventually get included in the OpenResty bundle (soon).\n. @dholth nginx defaults to /usr/local/nginx/. And I don't see why we cannot use /usr/local/openresty/ at least for the sake of consistency.\n. @dholth The decision has been made to make the RPM installation paths consistent with the source distribution.\n. @chbrown Better find the userland backtraces of those file read syscalls. Then we can immediately know where they come from.\n. Yes. Pull requests welcome. Thanks!\n. @davidgaleano Mind to add a test case to the existing test suite to cover this change? Thanks!. @davidgaleano Looking good to me. Thanks!\n@doujiang24 @membphis @moonbingbing @thibaultcha Will you please double check? Thanks!. @thibaultcha Thanks for your review.\n@davidgaleano Just merged. Thanks!. Please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.\nRegarding your question, it is already being worked on. See openresty/lua-nginx-module#761 (and also openssl/openssl#1588 )\n. @ben-walters I think you are invoking the wrong nginx executable? Ensure that you have set your PATH environment correctly. And you can verify which nginx you are invoking via the following command:\nwhich nginx\nWhen using OpenResty, you're recommended to use the openresty command instead of nginx (if you are using the latest OpenResty release).\n. @xbsura Looks like it is related to the following change in the official nginx core (since 1.9.13):\n\n*) Change: non-idempotent requests (POST, LOCK, PATCH) are no longer\n  passed to the next server by default if a request has been sent to a\n  backend; the \"non_idempotent\" parameter of the \"proxy_next_upstream\"\n  directive explicitly allows retrying such requests.\n\nSee http://nginx.org/en/CHANGES\n. @xbsura Sorry, I don't quite understand your last question.\n. OpenSSL 1.1 is not yet supported. This ticket is duplicate.\n. Use OpenSSL 1.0.2 instead.\n. @ieworks What do you mean by \"not work\"? Please provide detailed analyses and explanation. Simply dumping your configurations and screen shots may not be sufficient.\nBTW, OpenResty 1.11.2.1 just includes the NGINX 1.11.2 core and we never touch the proxy_cache part at all.\n. @ieworks You should temporarily enable the nginx debugging logs to see why cache misses happen.\n. No, it does not say \"cached\" at all. It says it cannot find a hit in the cache during the cache fetch phase, which is expected. Your debugging log quote is incomplete. What's really interesting comes after the logs your quote above, i.e., the logs for the later \"cache store\" operation.\nBTW, please paste the logs somewhere else (like on gist) and just share the link here. Better avoid flooding this place with too many logs.\n. @ieworks I've noted the following line in your nginx-debug.txt:\n2016/10/26 21:23:36 [debug] 7334#0: *72 http upstream process non buffered downstream\nThis means that your proxy uses non buffered mode. But updating the cache requires buffered mode.\nHave you configured proxy_buffering off in your nginx.conf? If yes, please remove it.\n. @pavelnemirovsky From the info you provided, it looks like a memory corruption issue. The backtrace (or location) of the crash does not look like the culprit, but some (remote) consequence, so it's not really helpful.\nI saw you are using 3rd-party Lua C libraries not maintained by us, like lfs.so, usersshm.so, and also libmaxminddb bindings. Memory issues in these Lua C modules can lead to the crashes you are seeing. Similarly, if you are using any 3rd-party NGINX C modules or NGINX core patches not maintained by us, you are subject to similar risks.\nWe usually debug such problems like below:\n1. Use the tools in nginx-gdb-utils to get as much information as possible from your core dumps. The most notable gdb tools are \"lbt\" and \"lgc\", which can give you Lua-land info which might be useful (for example, memory leaks on the Lua land can lead to crashes due to the memory limit).\n2. Use Valgrind to run your whole nginx server offline and test your server with typical requests. Valgrind is best at locating memory issues directly. But to maximize its strength, you should disable the memory pool in the NGINX core, enable the system allocator and internal assertions in your LuaJIT, and turn off daemon and master_process in your nginx.conf. See https://openresty.gitbooks.io/programming-openresty/content/testing/test-modes.html#_valgrind_mode for more details on these things.\n. @pavelnemirovsky BTW, I see you are on a Yum-based Linux system, maybe the easiest way to run an OpenResty that can maximize the strength of Valgrind is just to use the openresty-valgrind RPM package provided by OpenResty. See\nhttps://openresty.org/en/linux-packages.html\nhttps://openresty.org/en/rpm-packages.html\n. @kode54 I've just tried it out on my CentOS 7 server and it works as expected:\nconsole\n[agentzh@centos7 ~]$ sudo openresty\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log\n[agentzh@centos7 ~]$ curl localhost/\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to OpenResty!</title>\n...\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log\n127.0.0.1 - - [11/Jul/2016:18:57:59 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n[agentzh@centos7 ~]$ curl localhost/\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to OpenResty!</title>\n...\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log\n127.0.0.1 - - [11/Jul/2016:18:57:59 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n127.0.0.1 - - [11/Jul/2016:18:58:04 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n[agentzh@centos7 ~]$ sudo mv /usr/local/openresty/nginx/logs/access.log /usr/local/openresty/nginx/logs/access.log.old\n[agentzh@centos7 ~]$ ps aux|grep nginx\nroot      24469  0.0  0.1  36928  1160 ?        Ss   18:57   0:00 nginx: master process openresty\nnobody    24470  0.0  0.2  36932  2156 ?        S    18:57   0:00 nginx: worker process\nagentzh   24479  0.0  0.0 112648   976 pts/0    R+   18:58   0:00 grep --color=auto nginx\n[agentzh@centos7 ~]$ cat /usr/local/openresty/nginx/logs/nginx.pid\n24469\n[agentzh@centos7 ~]$ sudo kill -USR1 24469\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log\n[agentzh@centos7 ~]$ curl localhost/\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to OpenResty!</title>\n...\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log\n127.0.0.1 - - [11/Jul/2016:18:59:02 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n[agentzh@centos7 ~]$ curl localhost/bad\n<html>\n<head><title>404 Not Found</title></head>\n<body bgcolor=\"white\">\n<center><h1>404 Not Found</h1></center>\n<hr><center>openresty/1.11.2.1</center>\n</body>\n</html>\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log\n127.0.0.1 - - [11/Jul/2016:18:59:02 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n127.0.0.1 - - [11/Jul/2016:18:59:11 -0700] \"GET /bad HTTP/1.1\" 404 175 \"-\" \"curl/7.29.0\"\n[agentzh@centos7 ~]$ tail /usr/local/openresty/nginx/logs/access.log.old\n127.0.0.1 - - [11/Jul/2016:18:57:59 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n127.0.0.1 - - [11/Jul/2016:18:58:04 -0700] \"GET / HTTP/1.1\" 200 558 \"-\" \"curl/7.29.0\"\n. @kode54 One common mistake is that you forget to use privileged user account (like root) to send the signal.\n. @kode54 OpenResty never touches the log rotation part of the nginx core. So it's all standard NGINX core behavior.\n. @kode54 Also ensure that you check your error log file to rule out any disk problems (like disk getting full and etc).\n. @kode54 Another common mistake is to send the signal to just one of the worker processes. You should send to the master process.\n. Consider it resolved.\n. @WALL-E Please provide a standalone and minimal example that we can run on our side to reproduce the issue. Your example is not complete.\n. @WALL-E Please make it minimal and complete. I have no idea about those web-a through web-d servers in your example, for example. Also, please no docker.\n. @WALL-E Okay, I see what's going on here.\nBasically, what you are seeing is the expected value. It is the timestamp of the beginning of the upstream response when the upstream response is not fully received. Because you read the $upstream_response_time variable in the header filter handler, which means that the upstream response body has not yet generated.\nTo get what you want in that header filter handler, you need to do the math yourself, as in\nlua\nlocal resp_time_so_far = ngx.now() - ngx.var.upstream_response_time\n. @WALL-E To get the full response time, you need to read $upstream_response_time in the log phase instead, where the response is fully generated.\n. @somedayiamold It requires a newer version of glibc when using newer versions of gcc.. @madisodr This ticket should go to the openresty/openresty-packaging github repository instead.\nYeah, we could add an openresty-devel package which should contain:\n\nthe C header files of the corresponding nginx core and 3rd-party nginx C modules (especially ngx_lua's).\nthe ./configure script and the command-line arguments of the corresponding nginx core.\n\nFor 2), I think we can provide a handy restymod utility to abstract away the command details of compiling and adding new dynamic nginx C modules.\nAnother plus is to allow opm to be able to distribute nginx C modules in addition to Lua libraries. And the opm client-side utility can leverage the restymod utility mentioned above for nginx C modules automatically :) That would be pretty cool.\nPull requests welcome!. Okay, ideally we should avoid re-running nginx's ./configure and just saving the results (and all the environments) of the ./configure run during the original package building. So restymod can just restore all the environments and reuse all the source files (like ngx_modules.c) originally generated by ./configure under objs/ to build the new dynamic C module.\nThis way restymod can run much much faster and we need to bundle far less source files into the openresty-devel package.. @madisodr As I've said we should avoid bundling all the nginx source code and requiring running the full ./configure command everytime we want to add a new module. The former leads to huge rpm/deb packages and the latter leads to a very slow building process.. Just fixed the 404 error. Please try again on your side. Thanks!. @contherad What the exact repo URL are you using?. @contherad Please do not hijack existing closed issues to report new issues. Thank you for your cooperation.. @JarvisZhu redis_iresty.lua is not a standard OpenResty component. I'm afraid you are reporting your problem to the wrong place. BTW, as @detailyang mentions, this place is considered English only. Please join the openresty (Chinese) mailing list instead if you really want to use Chinese. Thank you.. @wintersun892 How did you test it? The timers used for timeout thresholds can sometimes be delayed by the processing of other concurrent requests (when your server is VERY busy and uses a lot of CPU time) and/or some blocking operations of nginx (like disk I/O). You can measure the blocking effect of such things via tools like below:\nhttps://github.com/openresty/stapxx#epoll-loop-blocking-distr. @wintersun892 Look at my previous comment. You seem to ignore mine.. @vensontao Yeah, this is a corner case that the client sends more than 255 packets through a single resty.mysql object. We should check the integer overflow. Will you try the following patch on your side?\n```diff\ndiff --git a/lib/resty/mysql.lua b/lib/resty/mysql.lua\nindex 008a267..fc8bb74 100644\n--- a/lib/resty/mysql.lua\n+++ b/lib/resty/mysql.lua\n@@ -184,11 +184,16 @@ end\n local function _send_packet(self, req, size)\n     local sock = self.sock\n\nself.packet_no = self.packet_no + 1\nlocal packet_no = self.packet_no\npacket_no = packet_no + 1\nif packet_no >= 256 then\npacket_no = 1\nend\n\nself.packet_no = packet_no\n-- print(\"packet no: \", self.packet_no)\n\n\nlocal packet = _set_byte3(size) .. strchar(self.packet_no) .. req\n\n\nlocal packet = _set_byte3(size) .. strchar(packet_no) .. req\n-- print(\"sending packet: \", _dump(packet))\n```. @onlonely Please do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see http://openresty.org/en/community.html\n\n\nRegarding your issue, you can try upgrading to the latest version of OpenResty (or just ngx_lua module). I believe the crash has been fixed after the (old) ngx_lua v0.10.5 release.. @thibaultcha Looking good to me :)\n@yangshuxin @doujiang24 @membphis @moonbingbing Mind to have a quick look at this?. @thibaultcha Merged. Thanks!. @chipitsine We want to avoid patching the nginx core wherever possible. If you think it's useful, please propose it to the nginx-devel mailing list instead. Generally, openresty only includes nginx core patches that are necessary.. @chipitsine No, I can't either :). @chipitsine Some notes:\n\nI no longer work for Cloudflare.\nFor CDN vendors and other large scale users, they also need to accommodate somewhat incompatible HTTP clients, not just well-behaved web browsers. So we need to be conservative for any protocol-level changes.\nAs I've already pointed out, we want to minimize the number of patches for nginx core in OpenResty.. @lenxeon There were nginx worker process crashes according to your error logs (though crashes do not lead to 502 errors, generally speaking). You should debug your crashes first anyway. See https://www.nginx.com/resources/admin-guide/debug/#backtrace\n\nEnsure that you have not added any 3rd-party NGINX C modules or 3rd-party Lua C libraries that are not maintained by the OpenResty team since we do not support those exotic components.. Consider it resolved.. @xxoxx Apparently, loading an external Lua C module requires dynamic linking support. A pure static linked binary cannot load DSO.. Merged. Thanks!. @yjdwbj We definitely need more details about your segfaults, like the full backtrace of the crashing site in a core dump file. See\nhttps://www.nginx.com/resources/wiki/start/topics/tutorials/debugging/#core-dump\nAlso, use of valgrind memcheck can be more useful in detecting memory problems if they are reproducible offline. But ensure that you are using the openresty-valgrind RPM package of the official OpenResty yum repository (if it's available to your operating system) and turn off both the daemon and master_process directive in your nginx.conf. See http://openresty.org/en/linux-packages.html and http://openresty.org/en/rpm-packages.html\nBTW, 3rd-party Lua C/FFI modules or NGINX C modules that are not maintained officially or by us are subject to memory issues. Ensure that you can reproduce the problem without those components. We are not interested nor obliged to debug those 3rd-party problems.. @yjdwbj Also, you should check if there is any errors in your nginx's error log files.. @yjdwbj You were not reading my previous comments carefully enough. None of your info given above is helpful for debugging your crashes, unfortunately.. @yjdwbj Please read my previous comments more carefully and follow my advices.. @walterdev You know that invoking curl (or any other shell commands) directly from within openresty will block the event loop horribly? If you really need to invoke a shell command, then you should at least use something like lua-resty-shell.. Well, patches welcome for adding support for the client-side SSL certificates in the cosocket API :). It takes a lot of time and effort to test every new nginx core bundled in OpenResty since incompatibilies and even regressions happen in new nginx cores from time to time. We will work on it soon. BTW, the latest OpenResty formal release is 1.11.2.2 though it still includes the nginx 1.11.2 core.. OpenResty 1.11.2.3 RC1 was just out. We will try upgrading the nginx core to the latest version of the 1.11.x series at that time after nginx 1.11.2.3 formal is out. There have been various incompatibilities introduced by latest nginx core releases that must be taken care of properly.. We'll try upgrading to the latest NGINX 1.13.x series in the next OpenResty release. 1.11.8 is already not the latest one anyway. I'm closing this.. @krish7919 All the testing and release engineering work will take at least one month. We take the compatibility issue VERY seriously since we have so many large-scale production users of OpenResty.. @ssharma The next formal OpenResty version will be based on nginx 1.13.4+. The work is in progress.. @dovreshef We're still testing the nginx 1.13.6 core on our side. The new OpenResty RC release 1.13.6.1rc1 should be out in the next couple of weeks. Sorry for the delay on our side. Thanks for the wait!. @moredip Check out those existing lua-resty-* libraries for examples. It doesn't be in the standard OpenResty distribution, especially when we already have OPM:\nhttp://opm.openresty.org/. @fangqiao Such beginner questions should really to to the openresty-en mailing list. This place is for real \"issues\". Thank you for your cooperation. Please see http://openresty.org/en/community.html. @tcho16 You should not use the lua interpreter to run your test code since it definitely lacks OpenSSL and all those OpenResty Lua APIs. You should use the resty command-line utility shipped with OpenResty instead.. Consider it resolved.. @yarix Are you trying to rate-limit subrequests? It looks wrong to me. You should only rate-limit your main requests. Rate-limiting internal requests just make no sense. Also be careful with the benchmark tools that send requests as fast as possible. When such tools get rate limited, it would just take too long to complete all those requests. You should do the maths yourself.. @yarix You should rate limit your main requests instead of subrequests. Subrequests are for internal use only.. @gang929 Please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.. @pavelnemirovsky No concrete plan right now. But this indeed looks interesting. It can save a good part of the overhead in socket syscalls like writev. Would be a big win for dead simple proxies without much ad-hoc processing and computations. We'll see what we can do here.. @thibaultcha I'm afraid it's usually not desired to make the entries never expire :) Otherwise everytime /etc/hosts is edited, we need to reload nginx. Maybe it's better to expose a pure C API callable by FFI that can insert any records into the shm dns cache used by the nginx internal resolver? We can do whatever we want on the Lua land, including periodic updates in timers and parsing any external stuff (not just /etc/hosts).. @thibaultcha Yeah, your patch has its own right. But I don't think it's reasonable to require specifying an external nameserver when enabling the hosts file. Maybe it's better to be an isolate configuration directive? The hosts file are parsed at load-time anyway and has no logical relationship with the request-time resolver anyway (though it has implementation relationships, which do not count here :)).. @thibaultcha Something like this maybe?\nnginx\nhosts_file /etc/hosts;. @thibaultcha Yeah, the change would be much larger. I just think grouping hosts file into the resolver directive has a bad design smell and is kinda counter-intuitive.\nMy personal feeling is that maybe we should do the resolver cache C API for the Lua land first, which can do everything this patch can do (though requiring a little bit of Lua), and which only requires a presumably very small change in the nginx core. And this also has no impact on nginx core's configuration UI and thus no forward compatibility concerns. Just my 2 cents :). @thibaultcha Sorry for the delay on my side.\n@dndx @doujiang24 What do you guys think of this patch?. @thibaultcha The merge window for OpenResty 1.11.2.3 is already closed. Sorry about that. Want to kick out a new release ASAP so that we can start working on compatibilities with the latest nginx core.. Oh, yeah, we need test cases for it.\n@thibaultcha Mind to write some quick tests with Test::Nginx? ;) We could put it in this repo, as @dndx suggested.. @liuwenru Please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.. @gang929 Have you tried the official Win32 build of OpenResty here?\nhttp://openresty.org/en/download.html#win32. @gang929 You should not use so many exclamation marks in your text, which is quite rude. We do not deserve that.\nThe Win32 version of nginx uses the select call to do events, which is limited to 1024 (unless dirty hacks are introduced into your system).. Won't fix.. @ingydotnet Are you already working on this? If not, then we should definitely use @detailyang's help here :). @ingydotnet Heh.\n@detailyang Please go ahead. Thank you!. @detailyang Thanks!. @nginxsantos See http://openresty.org/en/community.html for such discussions.. @tissoty No. That module requires a major refactoring so that we can share as much code between ngx_http_lua_module and ngx_stream_lua_module as possible.. @hanmenghui Just try the command brew install homebrew/nginx/openresty to install openresty on OS X.. @pavelnemirovsky openresty-debug-debuginfo is for openresty-debug, so it will conflict with openresty-debuginfo which is for openresty. You should keep either one of them, not both.. @weldpua2008 Seems like you are using subrequests to buffer too large response bodies, exceeding the 2GB per-worker memory limit inside the LuaJIT VM. Better use the lua-resty-http library that support streaming processing instead of buffering all the data at once in memory. The former approach is also much more efficient.. You are using several 3rd-party Lua C libraries and nginx C modules that are not maintained by the OpenResty team. All of those alien C components may introduce memory issues and thus segfaults.Please remove all those components and try verifying if you can still reproduce the problem. Also, ensure that you are not trying to capture subrequest responses that are too large (larger than 1MB is considered too large), due to the 2GB per-worker GC-managed memory limit in LuaJIT on x86_64. Use streaming processing for large responses using libraries like James Hurst's lua-resty-http instead.. @Xcapee Thanks for the reminder. But OpenResty does not use the standard Lua 5.1 interpreter by default and we will retire it completely in the next release.. The standard Lua 5.1 interpreter has already been removed from the OpenResty bundle.. @svrsreeraj NGINX variables do not even exist at the point of init_by_lua_block. NGINX variables only exist when NGINX serves each individual request while init_by_lua* is run upon the nginx configuration loading phase. So it just does not make any sense at all.. @svrsreeraj Why don't you try it out yourself? BTW, please do not hijack closed and unrelated issues like this. It's rude.. @thibaultcha Yeah, I agree it is a good thing to have.\nYour patch generally looks good to me. Will have a closer look and test it out myself once I have some more time. Been very busy with other higher priority things.. @f1erro It's all about Lua package search paths. See\nhttps://github.com/openresty/lua-nginx-module#lua_package_path\nand\nhttps://github.com/openresty/lua-nginx-module#lua_package_cpath. @f1erro You also need to ensure your Lua C libraries are using the Lua 5.1 ABI instead of using an incompatible 5.2/5.3 ABI. The latter won't even load into OpenResty.\nBesides, be very careful when using LuaRocks libraries that are not aware of the OpenResty context, which may incur expensive system calls or even blocking I/O system calls, which will ruin your OpenResty server's performance.. @neomantra Well, I guess @f1erro wants to send a HUP signal to the nginx master instead of the current worker process, otherwise it's not useful at all. But normal nginx worker processes are usually run under an unprivileged system account like nobody, so such workers do not have permissions to send any signals to the master which is usually run under a privileged system account like root.\nWe'll add such capabilities to OpenResty soon by introducing privileged \"background worker processes\" that is run under the same system account as the master but do not serve any requests directly from the wire (thus no or little security concerns). Such background workers will be able to send signals to the master.. But yeah, using LuaJIT's FFI to call the kill C API directly can be more efficient than using external Lua libraries like luaposix.. @f1erro BTW, bit32 is a Lua 5.2 standard module. I think I've told you that Lua 5.2 is incompatible with the Lua 5.1 language that LuaJIT and OpenResty follows.. @f1erro BTW, LuaJIT has its own standard bit standard library as an extension to the Lua 5.1 standard library:\nhttp://luajit.org/extensions.html\nThat is the bit module that should be used in the OpenResty context.. @membphis Just merged with the following extra patch:\n```diff\ndiff --git a/patches/nginx-1.11.2-hook_error_log.patch b/patches/nginx-1.11.2-intercept_error_log.patch\nsimilarity index 100%\nrename from patches/nginx-1.11.2-hook_error_log.patch\nrename to patches/nginx-1.11.2-intercept_error_log.patch\ndiff --git a/util/mirror-tarballs b/util/mirror-tarballs\nindex 4063980..29350d3 100755\n--- a/util/mirror-tarballs\n+++ b/util/mirror-tarballs\n@@ -55,9 +55,19 @@ else\n     fi\n fi\n-echo \"$info_txt applying the privileged-agent-process patch\"\n-patch -p1 < $root/patches/nginx-$main_ver-privileged_agent_process.patch || exit 1\n-echo\n+answer=$root/util/ver-ge \"$main_ver\" 1.11.2\n+if [ \"$answer\" = \"Y\" ]; then\n+    echo \"$info_txt applying the privileged-agent-process patch\"\n+    patch -p1 < $root/patches/nginx-$main_ver-privileged_agent_process.patch || exit 1\n+    echo\n+fi\n+\n+answer=$root/util/ver-ge \"$main_ver\" 1.11.2\n+if [ \"$answer\" = \"Y\" ]; then\n+    echo \"$info_txt applying the intercept-error-log patch\"\n+    patch -p1 < $root/patches/nginx-$main_ver-intercept_error_log.patch || exit 1\n+    echo\n+fi\necho \"$info_txt applying the upstream-pipelining patch for nginx\"\n patch -p1 < $root/patches/nginx-$main_ver-upstream_pipelining.patch || exit 1\n```. @dndx Will you have a look at this? Thanks!. @dndx See https://github.com/openresty/lua-resty-core/pull/100. @membphis Merged with the following extra patch:\n```diff\ndiff --git a/patches/nginx-1.11.2-privilege_process.patch b/patches/nginx-1.11.2-privileged_agent_process.patch\nsimilarity index 99%\nrename from patches/nginx-1.11.2-privilege_process.patch\nrename to patches/nginx-1.11.2-privileged_agent_process.patch\nindex 734d597..0d8b21b 100644\n--- a/patches/nginx-1.11.2-privilege_process.patch\n+++ b/patches/nginx-1.11.2-privileged_agent_process.patch\n@@ -155,7 +155,7 @@ index 3ead164..2b3f8df 100644\n  static void\n +ngx_privileged_agent_process_cycle(ngx_cycle_t cycle, void data)\n +{\n-+    char name = data;\n++    char   name = data;\n +\n +    /*\n +     * Set correct process type since closing listening Unix domain socket\ndiff --git a/util/mirror-tarballs b/util/mirror-tarballs\nindex 2da01f1..263b5b4 100755\n--- a/util/mirror-tarballs\n+++ b/util/mirror-tarballs\n@@ -55,6 +55,10 @@ else\n     fi\n fi\n+echo \"$info_txt applying the privileged-agent-process patch\"\n+patch -p1 < $root/patches/nginx-$main_ver-privileged_agent_process.patch || exit 1\n+echo\n+\n echo \"$info_txt applying the upstream-pipelining patch for nginx\"\n patch -p1 < $root/patches/nginx-$main_ver-upstream_pipelining.patch || exit 1\n echo\ndiff --git a/util/ver b/util/ver\nindex 9aacdfe..82a0432 100755\n--- a/util/ver\n+++ b/util/ver\n@@ -1,7 +1,7 @@\n #!/bin/bash\nmain_ver=1.11.2\n-minor_ver=3\n+minor_ver=4rc0\n version=$main_ver.$minor_ver\n echo $version\n```\nThanks!. Try sudo yum install epel-release\nBTW, please do not cross post.. Considered it resolved. We'll consider removing the GeoIP package dependency in future package releases.. @taf2 This nonstandard GeoIP dependency has been removed from the official binary packages to avoid such installation headache.. One can always use a Lua binding to libmaxminddb or other IP geolocation libraries anyway.. @taf2 Different operating systems may have different policies, which is natural :). @dndx Merged with the following extra patch:\n```diff\ndiff --git a/patches/nginx-1.11.2-delayed_posted_events.patch b/patches/nginx-1.11.2-delayed_posted_events.patch\nindex ea636c3..6875843 100644\n--- a/patches/nginx-1.11.2-delayed_posted_events.patch\n+++ b/patches/nginx-1.11.2-delayed_posted_events.patch\n@@ -1,21 +1,18 @@\n diff --git a/src/event/ngx_event.c b/src/event/ngx_event.c\n-index c8ae5b2..f59a8ee 100644\n+index 57af8132..4853945f 100644\n --- a/src/event/ngx_event.c\n +++ b/src/event/ngx_event.c\n-@@ -193,8 +193,10 @@ ngx_module_t  ngx_event_core_module = {\n- void\n- ngx_process_events_and_timers(ngx_cycle_t cycle)\n- {\n--    ngx_uint_t  flags;\n--    ngx_msec_t  timer, delta;\n-+    ngx_uint_t   flags;\n-+    ngx_msec_t   timer, delta;\n-+    ngx_queue_t q;\n-+    ngx_event_t ev;\n+@@ -196,6 +196,9 @@ ngx_process_events_and_timers(ngx_cycle_t cycle)\n+     ngx_uint_t  flags;\n+     ngx_msec_t  timer, delta;\n++    ngx_queue_t     q;\n++    ngx_event_t     ev;\n++\n      if (ngx_timer_resolution) {\n          timer = NGX_TIMER_INFINITE;\n-@@ -215,6 +217,13 @@ ngx_process_events_and_timers(ngx_cycle_t cycle)\n+         flags = 0;\n+@@ -215,6 +218,13 @@ ngx_process_events_and_timers(ngx_cycle_t cycle)\n  #endif\n      }\n@@ -29,7 +26,7 @@ index c8ae5b2..f59a8ee 100644\n      if (ngx_use_accept_mutex) {\n          if (ngx_accept_disabled > 0) {\n              ngx_accept_disabled--;\n-@@ -257,6 +266,35 @@ ngx_process_events_and_timers(ngx_cycle_t cycle)\n+@@ -257,6 +267,35 @@ ngx_process_events_and_timers(ngx_cycle_t cycle)\n      }\n  ngx_event_process_posted(cycle, &ngx_posted_events);\n\n@@ -65,7 +62,7 @@ index c8ae5b2..f59a8ee 100644\n  }\n-@@ -601,6 +639,7 @@ ngx_event_process_init(ngx_cycle_t cycle)\n+@@ -600,6 +639,7 @@ ngx_event_process_init(ngx_cycle_t cycle)\n  ngx_queue_init(&ngx_posted_accept_events);\n  ngx_queue_init(&ngx_posted_events);\n\n@@ -74,7 +71,7 @@ index c8ae5b2..f59a8ee 100644\n      if (ngx_event_timer_init(cycle->log) == NGX_ERROR) {\n          return NGX_ERROR;\n diff --git a/src/event/ngx_event_posted.c b/src/event/ngx_event_posted.c\n-index d851f3d..b6cea00 100644\n+index d851f3d1..b6cea009 100644\n --- a/src/event/ngx_event_posted.c\n +++ b/src/event/ngx_event_posted.c\n @@ -12,6 +12,7 @@\n@@ -86,7 +83,7 @@ index d851f3d..b6cea00 100644\nvoid\n diff --git a/src/event/ngx_event_posted.h b/src/event/ngx_event_posted.h\n-index 145d30f..6c38855 100644\n+index 145d30fe..6c388553 100644\n --- a/src/event/ngx_event_posted.h\n +++ b/src/event/ngx_event_posted.h\n @@ -43,6 +43,9 @@ void ngx_event_process_posted(ngx_cycle_t cycle, ngx_queue_t posted);\ndiff --git a/util/mirror-tarballs b/util/mirror-tarballs\nindex 81535db..92c122f 100755\n--- a/util/mirror-tarballs\n+++ b/util/mirror-tarballs\n@@ -57,6 +57,13 @@ fi\nanswer=$root/util/ver-ge \"$main_ver\" 1.11.2\n if [ \"$answer\" = \"Y\" ]; then\n+    echo \"$info_txt applying the delayed-posted-events patch\"\n+    patch -p1 < $root/patches/nginx-$main_ver-delayed_posted_events.patch || exit 1\n+    echo\n+fi\n+\n+answer=$root/util/ver-ge \"$main_ver\" 1.11.2\n+if [ \"$answer\" = \"Y\" ]; then\n     echo \"$info_txt applying the privileged-agent-process patch\"\n     patch -p1 < $root/patches/nginx-$main_ver-privileged_agent_process.patch || exit 1\n     echo\n```. @xvaara I'd rather wait for someone who actually needs that :). @xvaara Merged with the following extra patch:\n```diff\ndiff --git a/util/configure b/util/configure\nindex f6def03..e78fc74 100755\n--- a/util/configure\n+++ b/util/configure\n@@ -633,9 +633,9 @@ END\n                                          UNLINK => 1);\n         print $out \"\n\n-int main(int argc, char argv) {\n-#if !defined(SSE4_2)\n-#error not support\n+int main(void) {\n+#ifndef SSE4_2\n+#   error SSE 4.2 not found\n #endif\n     return 0;\n }\n@@ -644,13 +644,23 @@ int main(int argc, char argv) {\n         my $ofile = tmpnam();\n         my $comp = ($cc || 'cc');\n\n\n\nmy $found;\n\n\nif (system(\"$comp -o $ofile -march=native -c $cfile\") == 0 && -s $ofile) {\n\nprint \"INFO: found -msse4.2 in $comp.\\n\";\n$luajit_xcflags .= \" -msse4.2\";\n\nif (system(\"$comp -o $ofile -msse4.2 -c $cfile\") == 0 && -s $ofile) {\n                 unlink $ofile;\n\n\n} else {\n\nif (system(\"$comp -o $ofile -march=native -c $cfile\") == 0 && -s $ofile) {\nprint \"INFO: found -msse4.2 in $comp.\\n\";\n$found = 1;\n$luajit_xcflags .= \" -msse4.2\";\n}\n}\n+\nif (-f $ofile) {\nunlink $ofile;\n}\n+\nif (!$found) {\n                 print \"WARNING: -msse4.2 not supported in $comp.\\n\";\n             }\n         }\n```\n\nLet me know if it works for you. I don't have such an old CPU to test things.\nThanks!. @xvaara For our own binary rpm/deb packages for OpenResty on x86_64, we do not want to support CPUs without SSE 4.2 support.. @taorui2017 This limitation is officially documented: https://github.com/openresty/lua-resty-mysql/blob/master/README.markdown#limitations. @taorui2017 None of those are errors. Not even warnings. Note the [debug] log level. They are completely harmless. They are just debugging output.. @vos-land The ngx.on_abort() feature has been carefully tested in this module's test suite:\nhttps://github.com/openresty/lua-nginx-module/blob/master/t/101-on-abort.t#L34\nAnd it has been used in production for years.\nIf you believe there is a bug here, please provide a minimal and standalone example that can easily reproduce the problem on others machines, in particular, on our side.\nA minimal example means that you should keep removing things from your code/config while keeping the issue reproducible, until you cannot remove anything any more. Your example above is not minimal since it apparently contains many unrelated stuff.\nA standalone example means that you have everything necessary to run the example on others' machines and others do not have to guess your mind to run and reproduce the problem on their side. Your example above is not standalone, since it lacks the content handler and steps to do the test request. We cannot run this on our side without guessing the most important missing bits.\nAlso, please do not paste your original configuration without analyses, especially when you paste a configuration that is not even runnable. It's not helpful at all. We are not gods and cannot guess your mind. Thanks for your cooperation.. Consider it resolved.. @spacewander I suggest you build openresty on one of those boxes with old CPU directly. I strongly discourage turning off -msse4.2 on those boxes with SSE 4.2 support. There is a very good reason why we turn it on by default.. @spacewander BTW, there is a bug in the current -msse4.2 feature test. You'll need the following patch for OpenResty's ./configure script to make it actually work:\nhttps://github.com/openresty/openresty/commit/eb8fc777. @spacewander BTW, I've made --with-luajit-xcflags=FLAGS appended instead of prepended to the default flags. But again, I'm strong against abusing this to disable -msse4.2 on those boxes actually with SSE 4.2 support.. @alex-mashin Building the latest openresty formal release's source code on your box without SSE 4.2 support should detect this automatically.. This is more about docker than OpenResty. It's off topic. I'm closing it.\nGeneral discussions should go to the openresty-en mailing list instead: http://openresty.org/en/community.html. @meyskens Can you try nginx 1.11.2? That is the version of nginx core included in OpenResty 1.11.2.3.. @meyskens Then you should report to the nginx team if you think it is a bug. BTW, SPDY is dead. Nginx now only supports the HTTP/2 protocol instead. They are similar, but still different things.. @concatime Are you changing the nginx core in the OpenResty bundle yourself? If yes, that would be a very bad idea.. @concatime That's not compatible with the rest of the components. Never officially tested and subject to problems. That's the whole point of OpenResty of ensuring everything works nicely and reliably together. We'll try upgrading the nginx core when we are at it.. @wtiancai This should be standard nginx core behavior when internal redirects happen. That is, the control flow leaves the current location and enters another location which does the actual access logging and does not have access_log off. You can temporarily enable the nginx debugging logs to be sure.. @wtiancai You should put access_log off; inside your location @proxy_A block since that is the very location which does the logging. As I've said, internal redirects are happening here due to your use of the ngx.exec() API function. Apparently you were not listening :). @concatime We are already using the latest LuaJIT v2.1 in our master, even newer than beta3. You can try out the following pre-release:\nhttps://openresty.org/download/openresty-1.11.2.4rc0.8.tar.gz. @taosx It's strongly discouraged to change the nginx core in any openresty release tarballs or packages since your own nginx core may not  becompatible and is very likely to be slower in performance and even buggy in behavior.\nWe'll upgrade the nginx core to the 1.13.x series in OpenResty in the near future.. The nginx core upgrade will happen in the next couple of months.. @wjessop See my reply in the openresty-en mailing list: https://groups.google.com/d/msg/openresty-en/DrhNC0Mbb2A/6nUTpOBmAwAJ. @redcloser ngx.time() is using the cached time of nginx. It's officially documented. If you want accurate times, you should call ngx.update_time() yourself. See\nhttps://github.com/openresty/lua-nginx-module/#ngxtime. @redcloser Also, you should never block the nginx event loop with too much CPU computations in the first place. It is a single-threaded application. That's also why we provide ngx.sleep(0) to make  it possible for CPU-bound code to periodically yield the control of the CPU:\nhttps://github.com/openresty/lua-nginx-module/#ngxsleep. This is strange. Did you strictly follow the instructions here? http://openresty.org/en/linux-packages.html#centos. @jybleau Good to know it gets resolved.. @dndx Merged. Thanks!. @cnlangzi The official OpenResty binary packages require SSE 4.2 support in your CPU. According to the Intel data sheet, your CPU model was released in the year 2008 (9 years ago) and only supports SSE versions up to 4.1. You need to build openresty from source on your old CPU yourself:\nhttps://openresty.org/download/openresty-1.11.2.4rc0.8.tar.gz\nI'll add a note to the web site.. @cnlangzi I think I asked you to try the following source tarball instead:\nhttps://openresty.org/download/openresty-1.11.2.4rc0.8.tar.gz\nI didn't ask you to try the last formal release 1.11.2.3 because its sse 4.2 feature test does not really work.. @cnlangzi It's not a conflict but your openssl is not new enough. You should really use the openresty-openssl-dev or openresty-openssl-devel packages (depending on your OS) from the official OpenResty pre-built package repositories when building your openresty. The command should be like\n```bash\nsudo yum install openresty-pcre-devel openresty-openssl-devel # if you are on CentOS/RHEL/Amazon Linux\nsudo apt-get install openresty-pcre-dev openresty-openssl-dev  # if you are on Ubuntu/Debian\nsudo dnf install openresty-pcre-devel openresty-openssl-devel # if you are on Fedora\nSSL_PREFIX=/usr/local/openresty/openssl\nPCRE_PREFIX=/usr/local/openresty/pcre\ncd  /path/to/openresty-xxx/ || exit 1\n./configure --with-cc-opt=\"-I$SSL_PREFIX/include -I$PCRE_PREFIX/include\" \\\n    --with-ld-opt=\"-Wl,-rpath,$SSL_PREFIX/lib:$PCRE_PREFIX/lib -L$SSL_PREFIX/lib -L$PCRE_PREFIX/lib\" \\\n    -j8 || exit 1\nmake -j8 || exit 1\nsudo make install || exit 1\n```. @cnlangzi BTW, it's always recommended to provide your OS info. Otherwise I have to guess.. @cnlangzi BTW, the performance can be bad on old CPU chips without SSE 4.2 support in special cases.. @cnlangzi You need to apply some of our own OpenSSL patches, otherwise some OpenResty SSL features would be disabled. That's why I suggest you use OpenResty's prebuilt openssl packages.. @VaiN474 The sse 4.2 detection logic has a bug in the formal releases but it has already fixed in the git repository. Or you can try the following preview release instead:\nhttps://openresty.org/download/openresty-1.11.2.5rc0.1.tar.gz\nBTW, it's strongly recommended to run OpenResty on an Intel chip with SSE 4.2 instruction set otherwise the Lua string creations may incur unbelievable large overhead in special cases.\nRegarding the postgres thing, you can check out the build/nginx-1.11.2/objs/autoconf.err file for the details of the feature test failure. BTW, it's recommended to use a Lua client based on OpenResty cosocket API, like pgmoon. The libpq library has known bugs when dealing with edge-triggered events (like epoll). Anyway, the Pg thing is already off topic; we should not hijack this issue for such discussions.. @VaiN474 Please, do not reply to a closed issue unless you have a very good reason. Thank you for your cooperation.. @cnlangzi It is provided by the systemtap-sdt-devel package on RedHat-style distributions. See\nhttps://github.com/openresty/openresty-packaging/blob/master/rpm/SPECS/openresty.spec#L21. This is indeed a regression. I've disabled the CDN cache for now. Will fix the cache key later. Thank you all for the report!. @dndx Next time you should update the util/mirror-tarballs script to actually apply your new nginx core patch, like this:\n```diff\ndiff --git a/util/mirror-tarballs b/util/mirror-tarballs\nindex 2f00c27..ec41a5c 100755\n--- a/util/mirror-tarballs\n+++ b/util/mirror-tarballs\n@@ -57,6 +57,13 @@ fi\nanswer=$root/util/ver-ge \"$main_ver\" 1.11.2\n if [ \"$answer\" = \"Y\" ]; then\n+    echo \"$info_txt applying the balancer_status_code patch\"\n+    patch -p1 < $root/patches/nginx-$main_ver-balancer_status_code.patch || exit 1\n+    echo\n+fi\n+\n+answer=$root/util/ver-ge \"$main_ver\" 1.11.2\n+if [ \"$answer\" = \"Y\" ]; then\n     echo \"$info_txt applying the builtin_error_page_footer patch\"\n     patch -p1 < $root/patches/nginx-$main_ver-builtin_error_page_footer.patch || exit 1\n     echo\n```\nFurthermore, you should also create a pull request to the openresty-devel-utils project to apply any new nginx core patches in the ngx-build script used by lua-nginx-module's testing and development toolchain, like this:\n```diff\ndiff --git a/ngx-build b/ngx-build\nindex 37735fd..0f04666 100755\n--- a/ngx-build\n+++ b/ngx-build\n@@ -489,6 +489,12 @@ sub apply_patches {\n         shell(\"patch -p1 < $root/../openresty/patches/nginx-$version-builtin_error_page_footer.patch\");\n         chdir \"..\" or die \"cannot switch to ..\\n\";\n     }\n+\n+    if ($ver ge '001011002') {\n+        chdir \"nginx-$version\" or die \"cannot switch to nginx-$version\\n\";\n+        shell(\"patch -p1 < $root/../openresty/patches/nginx-$version-balancer_status_code.patch\");\n+        chdir \"..\" or die \"cannot switch to ..\\n\";\n+    }\n }\nsub usage {\n```\nThanks!. Merged with various additions and tweaks. Thanks!. @tzumby I think it's just that the nginx core 1.11.2 included in OpenResty does not have that directive yet. Looks like it was first added in nginx 1.11.4:\nhttp://nginx.org/en/CHANGES\nWe'll upgrade the nginx core bundled in OpenResty in a new release in the next couple of months.. No, the latest release is not affected. We backported the official nginx patch.. You can read the release changelog and/or the code yourself anyway.. @spacewander Thanks for the patch. Will you please also add a test case to openresty/lua-nginx-module so that we can have this feature covered by our existing test suites? Thanks!. I've merged this for now.. @NeilW What exact error messages are you getting? I think it only affects dbgsym packages, which are optional.. The error is just that your nginx service is already listening on port 80. And openresty wants to listen on port 80 as well. You should stop the nginx service before installing OpenResty, like this:\nsudo service nginx stop. We have no intention to make them accepted by Ubuntu or Debian proper but the replace mechanism looks interesting. Will you submit a pull request to our openresty/openresty-packaging github repo to replace nginx, apache httpd, and etc?. Consider it resolved.. @chenzx You can find many resources on the openresty.org web site, including tutorials, demo web applications, and ebook chapters.\n\nYour JS example can be easily rewritten with rewrite_by_lua*, lua-resty-mysql (or pgmoon for Pg), and ngx.req.set_uri() without using any ugly callback functions.\nBTW, please join the openresty-en mailing list for such general usage questions. This place is reserved for real bug reports and patch submissions. Thanks for\nyour cooperation! Please see https://openresty.org/en/community.html. @spacewander Will you create PRs based on our existing issue and PR templates in lua-nginx-module below?\nhttps://github.com/openresty/lua-nginx-module/tree/master/.github\nSome minor edits might be needed for different projects though.\nMany thanks!\n@QianChenglong BTW, please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.. Consider it resolved. @spacewander Thanks for helping here.. @spacewander Merged. Thanks!. @hohmd No, the standard ngx_proxy module does not provide a hook for it and you have to patch the nginx core. Additionally, launching an external shell command synchronously requires forking the current nginx worker and will block the current whole process horribly and ruin your openresty's performance.. @polm This is strange. Maybe you forgot to install the ldconfig utility in your system? Try\nwhich ldconfig\nTo debug this problem, we need the following info:\n\nthe complete shell command history on your side.\nthe complete output of each command you run when building OpenResty.\nthe full content of the file build/nginx-1.11.2/objs/autoconf.err in the openresty-1.11.2.4 source directory after the build fails.\n\nThanks!\nBTW, we do have plans to provide official OpenResty pre-built package repositories for OpenSUSE.. @polm Hmm, seems like the install script in your system is not doing what it is supposed to do. Will you check what is your install command in PATH? Maybe you have something nonstandard in PATH?. @stspqxl OpenResty does not support nginx 1.13.x yet. Do not hack your own way. We won't support your hacks.. @fc13240 See the following page on how to profile and optimize your OpenResty apps:\nhttp://openresty.org/en/profiling.html\nAlso, performance issues in 3rd-party Lua libraries should be reported to the authors of those Lua libraries instead unless you have enough evidences to suspect it is OpenResty at fault.. @fc13240 Apparently you are doing too many Lua string concatenation operations in either your own Lua code or the lua-resty-http library. Either way, it's your responsibility to reduce that. You can sample a Lua-land on-CPU flame graph to pinpoint the source of such Lua string concatenations. Anyway, it's not OpenResty at fault at all. I'm closing this.. @Corson011 Please, no Chinese here. This place is considered English only. If you really\nwant to use Chinese, please join the openresty (Chinese) mailing list instead.\nPlease see https://openresty.org/en/community.html Thanks for your cooperation.\nBTW, regarding to you may want to take a look at these:\nhttps://openresty.org/en/download.html#win32\nhttps://github.com/openresty/openresty/blob/master/doc/README-win32.md#readme. @nilnor This is a known regression. Will you try out the latest OpenResty 1.11.2.5rc1 release below?\nhttps://groups.google.com/d/msg/openresty-en/Mw5B11AQwqM/qY5MltXmAgAJ. @icewaver I think this issue is already fixed in the latest OpenResty 1.11.2.5 RC1 release. Will you try it out? See\nhttps://groups.google.com/d/msg/openresty-en/Mw5B11AQwqM/qY5MltXmAgAJ. @icewaver Also please give the complete nginx debugging logs up to the crash. Or better, a minimal and self contained example that can easily reproduce the problem on our side.. Consider it resolved.. @soverysour Your CPU lacks SSE 4.2 support and OpenResty 1.11.2.4 (and 1.11.2.3) has a bug in its SSE 4.2 detection.\nYou can try the latest OpenResty 1.11.2.5 release's source tarball instead:\nhttps://openresty.org/en/download.html. @soverysour Or better, find a box with SSE 4.2 CPU support. Performance can be miserable in special cases on CPUs lacking SSE 4.2.. @undying DO NOT USE LUA GLOBALS IN OPENRESTY!\nIt's been officially documented for long:\nhttps://github.com/openresty/lua-nginx-module#lua-variable-scope. @undying Oh, that part of docs is ancient and out of date. I'll fix the docs and remove that part. Thank you very much for the reminder and sorry for the confusions.. @undying Updated that part of doc. Thank you for the report!. @HakChealKim The ./configure script is only meant for being used by those want to compile openresty manually from source code. You do not need that for automatic installations via homebrew and other means. I'm closing this.. @andersonn-roberto I just tested our debian 8 jessie repository on a fresh install of debian 8 amd64 and it works fine and passes my tests.\nAre you using an i386 system? We do not provide i386 packages on Debian. Please see\nhttp://openresty.org/en/linux-packages.html. @andersonn-roberto Sure, you can always compile from source yourself. See\nhttps://github.com/openresty/openresty-packaging#ubuntudebian\nand/or\nhttp://openresty.org/en/installation.html\nWhy are you still using 32-bit systems?. @rpatelob Are you sure you're using the right openssl's C headers?. @rpatelob I guess your build does not really use the openssl header files you think you are using. You should use ./configure --with-cc-opt=\"-I/path/to/openssl/include\" --with-ld-opt=\"-L/path/to/openssl/lib -Wl,-rpath,/path/to/openssl/lib to be sure. Or better, just use the pre-built OpenResty packages on openresty.org.. @pavelnemirovsky It's in under development. See\nhttps://github.com/openresty/lua-nginx-module/pull/761\nand also\nhttps://github.com/openresty/lua-nginx-module/pull/922. Considered as duplicate.. @anjia0532 The nginx docs you referenced above clearly indicates that the json formater was first added to nginx 1.11.8. The OpenResty 1.11.2.5 you are using bundles nginx 1.11.2 (the first 3 numbers in OpenResty's version numbers), which obviously does not have it.\nThe next OpenResty release will be based on nignx 1.13.x, which will definitely bring this feature in.. @anjia0532 You can always get the nginx core version from openresty's version numbers, as officially documented here:\nhttp://openresty.org/en/faq.html. @dndx Merged. Thanks!. @sparvu It seems that that metal box lacks SSE 4.2 instruction set support and you deploy an OpenResty 1.11.2.5 binary compiled on a box wth SSE 4.2. You should compile OpenResty 1.11.2.5 on that metal directly so that the build system can detect the lack of SSE 4.2. (BTW, the SSE 4.2 detection test in OpenResty versions older than 1.11.2.5 is buggy, you need at least 1.11.2.5).. @sparvu The SSE 4.2 CRC instruction is used for mitigating LuaJIT's string table hash collision risks. So it also has important security implications. That's why you should prepare special binaries for those without SSE 4.2 support instead of disabling SSE 4.2 for every box. It goes way beyond normal optimizations.. @sparvu BTW, you can try the ./configure option --with-luajit-xcflags='-mno-sse4.2' to disable SSE 4.2 in a box with SSE 4.2 support. That can help you \"cross-compile\".. @borikinternet It's strange since we already mark the nginx conf files in the debian package source:\nhttps://github.com/openresty/openresty-packaging/blob/master/deb/openresty/debian/conffile\nSee also\nhttps://www.debian.org/doc/manuals/maint-guide/dother.en.html#conffiles\nSo I wonder if your system has a local policy of replacing conf files by force?. @borikinternet BTW, for production use, it's highly recommended to use your own application directory to hold the configuration files and Lua source files instead of polluting the OpenResty installation tree, as demonstrated here:\nhttp://openresty.org/en/getting-started.html\nYou'll need to update the init script to use the -p PATH option to start openresty instead BTW.. @Macrame How do you configure the resolver directive in your nginx.conf? NGINX's own resolver does not respect /etc/resolv.conf file but its own resolver directive. See\nhttp://nginx.org/en/docs/http/ngx_http_core_module.html#resolver. @Macrame You can always enable the nginx debugging logs to see the details of the resolver. We also provided the openresty-debug pre-built package for this:\nhttps://openresty.org/en/linux-packages.html\nAlso, it's always a good idea to add ipv6=off to the resolver directive when your dns server may return IPv6 addresses and your network does not support it.. @Macrame You need to use debug level in your error_log directive as well.. @Macrame BTW, what do you get if you run the following command?\ndig @10.0.6.200 weedfs-master\nIf dig also cannot get the result, then you shouldn't expect nginx's resolver can.. @chakravarthy392 This openresty/openresty github repo is only meant for openresty core developers. You should use the source tarballs or the pre-built binary packages on the openresty.org website:\nhttps://openresty.org/en/download.html\nFor those particular POD syntax errors, it was due to a newly added nginx documentation file added in nginx's official hp repo. That particular issue was already \"fixed\" in the latest master branch. Just mentioning. Still you should not use this openresty/openresty github repo.. @chakravarthy392 We do provide source code tarballs on that download page of openresty.org.. @chakravarthy392 See https://openresty.org/en/download.html#source-code-releases Please look more carefully.. Such general questions should go to the openresty-en mailing list instead. This place is for real bugs and developer discussions.. @dndx I think we just need the patch for nginx 1.13.5, no earlier versions needed.. @dndx Fine.. @dndx Seems like you forgot to update util/mirror-tarballs to actually apply the patch?. @dndx Merged. Thanks!. @vctrferreira You can just try placing that error_page directive in your location /bots {}, for example.\nBTW, please join the openresty-en mailing list for such general usage questions. This place is reserved for real bug reports and patch submissions. Thanks for your cooperation! Please see https://openresty.org/en/community.html. @damon-93 Please, do not use Chinese here. This place is considered English only. If you\nreally want to use Chinese, please join and post to the openresty (Chinese)\nmailing list instead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.. @lavie Yes, a new OpenResty based on nginx 1.13.6+ will be out soon.. @lavie Yes, should be in a few weeks.. OpenResty 1.13.6.1 RC1 was already out a few days ago. Closing this.. @lavie New releases are always announced in the openresty-en mailing list. See\nhttps://groups.google.com/d/msg/openresty-en/pVPxLB5jfl4/QOnUnXntBgAJ. @tjwudi Merged. Thanks!. Merged. Thanks!. Consider it resolved.. @ferdinandocarella This is strange. What version of CentOS are you using? I've never seen this on CentOS 6.9 or CentOS 7.3 myself. It's weird that the $releasever variable is taking the \"latest\" value on your side (I've only seen this on Amazon Linux).. @ferdinandocarella Then you should use our Amazon Linux package repo instead:\nhttps://openresty.org/en/linux-packages.html#amazon-linux. Amazon Linux is not CentOS, BTW.. @psabhar Maybe systemctl simply checks the file modification timestamps. Not sure. Such warning is usually harmless.. @smarttang Such things are usually due to the internal redirects during the processing of a single request, in which case your access_by_lua* (and etc) might run multiple times (each time in different location, or the same location for different internal redirects).\nThe only way to be sure is to check out the nginx debugging logs for the guilty request. Your config above is far from complete to be conclusive.. @smarttang For your sample request / above, it indeed initiates an internal redirect to the /index.html page triggered by the standard ngx_index module:\nhttp://nginx.org/en/docs/http/ngx_http_index_module.html#index\nYou can check the current request URI, via ngx.var.uri, inside your access_by_lua* handler, for example.. @smarttang Apparently you were not really reading my comments but simply keep saying you know everything clearly and it must be a bug in OpenResty. This is not helpful. When you access /, it MUST initiate an internal redirect to /index.html otherwise you wouldn't be able to see the index page at all. And I already told you that internal redirect MUST enter another location or the same location again for the same client request, thus making your access_by_lua* hook run twice.. @smarttang I closed this issue since I was (still am) certain that it MUST be the internal redirect in play here. So it's definitely not a bug in OpenResty or NGINX.. @smarttang Note that \"internal redirects\" are completely different from HTTP redirects like 301 and 302. You might want to read my nginx tutorials to learn such basics first otherwise you might not understand what I'm saying at all:\nhttp://openresty.org/en/ebooks.html. @smarttang BTW, you can always use the ngx.req.is_internal() Lua API to skip processing requests initiated from internal redirects inside your access_by_lua* or rewrite_by_lua* Lua handlers. See\nhttps://github.com/openresty/lua-nginx-module/#ngxreqis_internal. @smarttang I've already given you so many suggestions on trouble-shooting and resolving your problem. Please read them and do it.. @qqee Please join the openresty-en mailing list for such general usage questions instead of posting here. This place is reserved for real bug reports and patch submissions. Thanks for\nyour cooperation!\nPlease see https://openresty.org/en/community.html\nBTW, your questions are more related to LuaJIT instead of OpenResty.\nBTW 2: optimizing Lua code run in init_by_lua* makes little sense since it only runs once upon nginx startup or reloading. You should only optimize code on real hot Lua code paths.. location / {\n  access_by_lua_block('execute'); \n}\nThis is definitely not valid nginx.conf snippet. Please copy&paste the exact configuration and code that you have actually tested. Better provide a minimal and standalone example that we can reproduce on our side.\nBTW, I have problems reading your English.. @spacewander Merged with fixes in the test suite and the commit log message. Thanks!. @abeljinming You should try the latest OpenResty version. Your version must be too hold to have it.. @abeljinming OK, seems like you forgot to add require \"resty.core.shdict\" or require \"resty.core\" to your init_by_lua* handler. To quickly test it:\n$ resty --shdict 'dogs 1m' -e 'require \"resty.core.shdict\" dogs = ngx.shared.dogs dogs:set(\"Tom\", 3) print(dogs:expire(\"Tom\", 32))'\ntrue. @abeljinming It looks good to me as long as there is no one else deletes or decrements the key.. @onlynishant Those connections are upstream connections, right? It usually means your backend servers fail to close the connections promptly.\n. @onlynishant Sorry, I was confused. It seems that your openresty nginx server is leaking client (or downstream) sockets for some reason (like being blocked by something). If your nginx worker processes' CPU usage is high when you see CLOSE_WAIT connections are growing, then you should sample a CPU flamegraph with perf or with systemtap (like sample-bt). If your nginx worker proesses' CPU is low, then you should sample an off-CPU flamegraph to analyze (using perf or using a systemtap tool like sample-bt-off-cpu). In case of off-CPU blocking, use of tools like strace can be helpful as well.. @onlynishant Some takeaways from your newly provided info:\n\nFrom your CPU flame graph above, it does not look like entering any hot loops inside the nginx process. It looks normal but apparently your Lua code is taking most of the CPU time and you may want to optimize your hot Lua code paths with the help of the Lua-land flame graph tool.\nYour nginx worker processes are maxing out your CPU resources so it seems that your server is just overloaded. You should either add more machines or CPUs to your service or better, optimize your Lua hot code paths to make it run faster. It would be a good sign when you see writev taking a good amount of the CPU time in your C-land on-CPU flame graphs.\nIt seems that you have some unexpected daemon or cron jobs configured in your system which frequently send USR2 or HUP signals to your nginx master processes, triggering frequent nginx worker process shutting down and restarting. This is very bad. You should track down these signal senders and kill them if they are not desired. It's your system and it's already beyond the scope of OpenResty itself. OpenResty or Nginx cannot do this automatically by themselves.\n\n\nI tried with just return after receiving request (no request parsing or anything) still see 100% CPU uses by NGINX (100% by each worker and high CLOSE_WAIT count)\n\nThen you should really sample a new C-land on-CPU flame graph for this 100% CPU nginx worker process in this case.. @onlynishant Regarding to your missing debuginfo question, you should really install the openresty-debuginfo package of exactly the same version number as your openresty package installed if you use our pre-built Linux binary packages here: https://openresty.org/en/linux-packages.html If you build your own OpenResty from source code then you should avoid stripping the debuginfo yourself (it is enabled by default in source code builds).\nAdditionally, your gdb session explicitly asks you to run the following command to install the debuginfo packages that it knows about:\n\ndebuginfo-install GeoIP-1.6.5-1.el6.x86_64 glibc-2.12-1.209.el6_9.2.x86_64 keyutils-libs-1.4-5.el6.x86_64 krb5-libs-1.10.3-65.el6.x86_64 libcom_err-1.41.12-23.el6.x86_64 libgcc-4.4.7-18.el6.x86_64 libselinux-2.0.94-7.el6.x86_64 nss-softokn-freebl-3.14.3-22.el6_6.x86_64 openssl-1.0.1e-57.el6.x86_64 pcre-7.8-7.el6.x86_64 zlib-1.2.3-29.el6.x86_64\n\nPlease do that. But interestingly it does not mention the openresty package. So you are not really using our official binary build released on our openresty.org web site.\nAlso, I've noted that you use your own version of lua-cjson library instead of OpenResty's. It may cause issues and you'd better use OpenResty's version of lua-cjson. See below:\n\nMissing separate debuginfo for /usr/lib/lua/5.1/cjson.so. @onlynishant It's completely normal for nginx's read() calls to return EAGAIN. This is because nginx uses nonblocking sockets and that's key to high performance under high concurrency.\n\nThe USR1 signal does not trigger master retiring and worker shutting down. There must be something else sending USR2 to your nginx master processes in your system.. @onlynishant Your latest flame graph shows that you are spending most of the CPU time in openssl's code. Some suggestions:\n\nEnable and optimize your SSL session cache and TLS session ticket to increase the success rate of session resumptions.\nMake sure you are using ciphers that can leverage AES-NI (Modern Intel CPU required).\nInstall the debuginfo package for your OpenSSL library so that you may get more stacktraces in your flame graphs.\n\nBTW, I'm seeing you are using an old OpenSSL 1.0.1 series. You should try the later 1.0.2 series which may also get you a bit faster here.\nApparently this is already falling out of the scope of OpenResty itself :). @onlynishant HUP reload is expensive, it requires starting a new group of worker processes and shutting down the existing group of workers.\nThis is why we never use HUP reload or USR2 upgrading in large-scale CDN setup of OpenResty where we have frequent config updates from tens of thousands or even millions of domains of varying configs.. @onlynishant I think it's just that you have too many nginx worker processes running at the same time due to your frequent HUP reload and USR2 restart operations, exhausting system memory. Keep in mind that slow connections may take your nginx workers a lot of time to shut down gracefully.\nBTW, all these things are common sense in the Nginx world, not specific to OpenResty at all.. @spacewander Merged. Thanks!\nWill you create another PR to add a patch for OpenSSL 1.1.0g? I can confirm that the current 1.1.0c patch cannot be applied to 1.1.0g.. @dndx Merged. Thanks!. @irider929 OpenSSL 1.1.0's support is still underway. You should use the 1.0.2 series for now. Closing this as it is duplicate with #293.. @spacewander Does it work with OpenSSL 1.1.0g?. @spacewander Merged. Thanks!. @davidsiracusa I know nothing about Kong's internal implementations. So next time you report any thing, please do not assume knowledge about Kong's internals on our side since it would not be really helpful. Thank you. We need minimal and self-contained examples most.\nFrom your description, it may not be a true memory leak, but just a consequence of either memory fragmentation due to unequal key-value sizes or just of using the safe_xxx methods of those shdict objects.\nI'm fine with adding an optional init_ttl parameter to the incr() method of shdict objects though I'm a bit worried to see that method taking more and more parameters. Redis, for exmaple, does not take any ttl parameters:\nhttps://redis.io/commands/incr\nBut I do agree with the value of init_ttl parameter in terms of user code complexity and performance.\nWill you contribute the pull requests to lua-nginx-module and lua-resty-core to implement this?\n  . @davidsiracusa You do know that shdict automatically and forcibly evict least recently used items upon short of memory in the shm zone (like the set method)?. @davidsiracusa That's implementation details which do not matter for the end users.. @davidsiracusa You need to add --with-cc-opt=\"-DDDEBUG=1\", I think. But usually we simply edit the .c file of interest and make again (no need to ./configure again, so that it can be extremely fast). Globally enabling DDEBUG=1 generates too much noise.\n  . @thibaultcha We can forget the CFunction part. We just need to worry about the FFI version :). @davidsiracusa Yes, that must be something very silly. Maybe you just forgot to restart your nginx from scratch. BTW, HUP reload won't update to the new nginx binary. Also, it's already off topic and I think we should close this issue now.. @geniuss99 BTW, will you rename your patch to 1.13.6? We have no patches for 1.13.7 and also no plan to use that nginx core (we may directly jump to nginx 1.13.8 or even beyond in the future).. @dndx The nginx-1.13.8 branch is not the mainline. Please retarget this PR to master instead. Thank you.. @dndx Merged. Thanks!. @dndx Merged. Thanks!. @hy05190134 OpenResty's configure script simply passes any options it does not know directly to the underlying nginx core's ./configure script. So even though it does not appear in OpenResty's ./configure --help, it should still work (and also for any nginx's future options).\nI agree we should still add this option to OpenResty's configure script's help text. Addressed in the latest master branch.. @giacomini Merged. Thanks!. @onesez Please, no Chinese here. This place is considered English only. If you really\nwant to use Chinese, please join the openresty (Chinese) mailing list instead.\nPlease see https://openresty.org/en/community.html Thanks for your cooperation.\nAlso, this place is reserved for bug reports and patch submissions.\nRegarding your question, you may find the lua-resty-limit-traffic library useful (it's already included in OpenResty).. @freemember007 What's your use case? I'm afraid the user community of that thing is too limited and may not justify all the maintenance and development work on our side.. @spacewander I tried to build the openresty produced from the branch of this PR on my Fedora 27 x64 but it failed horribly:\nauto/unix: line 1001: unexpected EOF while looking for matching `\"'\nauto/unix: line 1004: syntax error: unexpected end of file\nIn file included from src/core/ngx_core.h:58:0,\n                 from src/core/ngx_connection.c:9:\nsrc/core/ngx_connection.c: In function \u2018ngx_open_listening_sockets\u2019:\nsrc/core/ngx_connection.c:461:31: error: \u2018ngx_cloexec_n\u2019 undeclared (first use in this function); did you mean \u2018ngx_iovec_t\u2019?\n                               ngx_cloexec_n \" %V failed\", &ls[i].addr_text);\n                               ^\nsrc/core/ngx_log.h:88:67: note: in definition of macro \u2018ngx_log_error\u2019\n     if ((log)->log_level >= level) ngx_log_error_core(level, log, __VA_ARGS__)\n                                                                   ^~~~~~~~~~~\nsrc/core/ngx_connection.c:461:31: note: each undeclared identifier is reported only once for each function it appears in\n                               ngx_cloexec_n \" %V failed\", &ls[i].addr_text);\n                               ^\nsrc/core/ngx_log.h:88:67: note: in definition of macro \u2018ngx_log_error\u2019\n     if ((log)->log_level >= level) ngx_log_error_core(level, log, __VA_ARGS__)\n                                                                   ^~~~~~~~~~~\nsrc/core/ngx_connection.c:461:45: error: expected \u2018)\u2019 before string constant\n                               ngx_cloexec_n \" %V failed\", &ls[i].addr_text);\n                                             ^\nsrc/core/ngx_log.h:88:67: note: in definition of macro \u2018ngx_log_error\u2019\n     if ((log)->log_level >= level) ngx_log_error_core(level, log, __VA_ARGS__)\n                                                                   ^~~~~~~~~~~\nmake[2]: *** [objs/Makefile:938: objs/src/core/ngx_connection.o] Error 1\nmake[2]: *** Waiting for unfinished jobs....\nmake[1]: *** [Makefile:8: build] Error 2\nmake: *** [Makefile:8: all] Error 2\nCommand \"make -j9 > /dev/null\" failed at ../util/dist-check line 255, <DATA> line 1.. @catatsuy Looking good to me. Mind to add a test case to the existing test suite to cover this new feature? Thanks!. @shadowz10 Please do not hijack unrelated PRs or issues. Thank you.. @catatsuy Sorry for the delay on my side. Just merged it with fixes for the test failures.. Thanks!. @tanguofu What problem are you trying to solve here? I'm a bit confused. This patch does not make any sense to me. Will you please elaborate? Thanks!. @tanguofu You must be mistaken. I just tried the command ./configure --with-cc-opt=\"-O0\" on my side with OpenResty 1.13.6.1 and the compilation commands look like this:\ncc -c -I/home/agentzh/git/openresty/openresty-1.13.6.2rc0/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1 -I/home/agentzh/git/openresty/openresty-1.13.6.2rc0/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1  -pipe  -O -W -Wall -Wpointer-arith -Wno-unused-parameter -g -O2 -O0 -DNDK_SET_VAR -DNDK_UPSTREAM_LIST -DNDK_SET_VAR -DNDK_SET_VAR -DNDK_SET_VAR -DLUA_DEFAULT_PATH='\"/usr/local/openresty/site/lualib/?.ljbc;/usr/local/openresty/site/lualib/?/init.ljbc;/usr/local/openresty/lualib/?.ljbc;/usr/local/openresty/lualib/?/init.ljbc;/usr/local/openresty/site/lualib/?.lua;/usr/local/openresty/site/lualib/?/init.lua;/usr/local/openresty/lualib/?.lua;/usr/local/openresty/lualib/?/init.lua\"' -DLUA_DEFAULT_CPATH='\"/usr/local/openresty/site/lualib/?.so;/usr/local/openresty/lualib/?.so\"' -DNDK_SET_VAR -I src/core -I src/event -I src/event/modules -I src/os/unix -I ../ngx_devel_kit-0.3.0/objs -I objs/addon/ndk -I ../ngx_lua-0.10.12rc2/src/api -I /home/agentzh/git/openresty/openresty-1.13.6.2rc0/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1 -I ../ngx_stream_lua-0.0.4rc1/src/api -I objs \\\nNote that -O0 appears after -O2 and -O and is thus the real level taking effect. Options appeared later do override options appeared earlier in gcc and clang and other C compilers that I know of.. @tanguofu Your patch here does not fix any thing here while may remove other unexpected C compiler flags by accident.. @HadiAbbasi Please do not cross-post. It's annoying.. @brunodomenici Interesting. Amazon Linux used to use the value latest for the yum variable $releasever, but now it changes it to the real release version, 2017.09. I just created a symlink 2017.09 to point to latest. Please try it out again.\nA quick test on my side seems to work fine:\n$ curl -I https://openresty.org/package/amazon/2017.09/x86_64/repodata/repomd.xml\nHTTP/1.1 200 OK\nServer: openresty+\nDate: Wed, 14 Feb 2018 19:53:02 GMT\nContent-Type: text/xml; charset=utf-8\nContent-Length: 2988\nConnection: keep-alive\nLast-Modified: Mon, 13 Nov 2017 06:42:50 GMT\n.... @vincent-lu Added another symlink on the server. Please try again.. @vincent-lu Yes, it should.. @vincent-lu Just for the openresty yum repo, BTW, not globally.. @FireBurn It's already fixed in the master branch.. @FireBurn Why don't you just use the OpenResty releases? See\nhttps://openresty.org/en/download.html. @FireBurn No, git submodules suck and I had too much pain with it. Besides, not everything is managed by git.. @dndx Merged by renaming your test file to 001-xxx.t. Thanks!. @pavelnemirovsky OpenResty uses 4 digits for version numbers and there are multiple OpenResty formal releases in the 1.11.2.x series. So you need to be more accurate when talking about the OpenResty version numbers.\nSome suggestions to find out why:\n\nSample some on-CPU flame graphs for both versions of your applications (given that you can still reproduce the performance changes with the same traffic). And then compare the resulting flame graphs. This is the best way of finding a definite answer.\nCheck out the OpenResty release changelogs between those accurate OpenResty versions and see whether there is some change listed can be the cause:\n\nhttp://openresty.org/en/changes.html\nThe 2nd way is just guessing and could be very wrong :)\nAnyway, great to see a 50% CPU reduction. That's amazing :) My wild guess is that it is due to the following optimizations in OpenResty's LuaJIT first introduced in OpenResty 1.11.2.3 (well, because you did not specify the exact OpenResty 1.11.2.x version number, so you could already be using 1.11.2.3 or later before the upgrade).\n\noptimize: x64: lj_str_new: uses randomized hash functions based on crc32 when -msse4.2 is used in build options. thanks Shuxin Yang for the patch.\noptimize: lj_str_new: tests the full hash value before doing the full string comparison on hash collisions. thanks Shuxin Yang for the patch.\n\nDepending on the actual data payload characteristics, these optimizations could result in such huge performance gains.. @pavelnemirovsky Another possible cause is this change in 1.13.6.1:\n\noptimize: use more appressive JIT compiler parameters as the default to help large OpenResty Lua apps. We now use the following jit.opt defaults: maxtrace=8000 maxrecord=16000 minstitch=3 maxmcode=40960 -- in KB.\n\nAgain, we need to see the CPU flamegraphs before and after the upgrade to be sure.. @pavelnemirovsky Seems like more Lua code paths are JIT compiled with the new version, which might due to the JIT compiler option tuning in OpenResty 1.13.6.1. But you'd better provide the C-land flame graphs for both versions so that we can be more sure.\nBTW, according to your flame graphs, there seems to be easy ways to make your Lua app significantly faster by just reducing the number of new Lua GC objects allocated on your Lua hot code path and also by pre-allocating Lua table sizes via LuaJIT's table.new() Lua API (or even better, by recycling the Lua tables via the lua-tablepool library). But that's another story.. @mfrederico It is the first time we received issue report like that for 1.13.6.1. It looks more like a regression or something in nginx 1.13.6 core's standard fastcgi module (OpenResty never touches that part of nginx core in any ways). But anyway we'd like to know more details about the issue you are seeing (better create a separate issue though).\nDetails that would help:\n\nexact raw copies of the \"upstream errors\" you are saying.\noutput of the strace -p nginx-worker-pid when the issue is happening (preferably with only one nginx worker configured in your test setup).\noutput of pstack nginx-worker-pid (preferably with only one nginx worker configured).\nis the CPU usage of the nginx worker processes low or high when the issue is happening?. @mfrederico That's cool. Please make sure you post the details to a new issue instead of posting here since it's apparently off the topic. Thank you!. @svarlitskiy You are not really building from source. See instead.\n\nhttps://openresty.org/en/download.html#source-code-releases\nThis repo is for OpenResty DEVELOPERS use only.. @svarlitskiy BTW, that issue in this repo was already fixed in the master branch quite some time ago.\n. @arcivanov Yes, upgrading to the latest nginx release is always a goal of OpenResty releases. But we need to release a new OpenResty 1.13.6.1.2 version first according to our schedule.. @feifangit We don't have a release schedule document. The 1.13.6.1.2 release should happen in the next few weeks while a release with nginx 1.13.10+ would be out in a couple of months after that.. The next OpenResty version will be based on nginx 1.15.x. Well, it's a moving target :)\nHopefully we can provide a preview version of OpenResty based on nginx 1.15.x in the next few weeks. Too busy with other new OpenResty features and optimizations right now.\nSorry for the delay.. A new release candidate of OpenResty based on nginx 1.15.x is expected to be out next month. We're busy porting OpenResty to ARM64 with corporate sponsorship right now.. @xkeyideal Maybe. Or September.. @fancy-rabbit We're busy preparing for the new OpenResty 1.15.5.1 release atm.. @arcivanov Will kick out a quick and dirty OpenResty 1.15.5.1 RC0 preview version for download here later today...Sorry for the delay.. Try this: https://openresty.org/download/openresty-1.15.5.1rc0.tar.gz\nThe ngx_stream_lua module is known to have some compatibility issues. We'll try resolving the remaining issues in the coming days. Also, we're still in the progress of testing (travis ci testing is far from enough).. Just updated that rc0 tarball (same URI) with the latest ngx_lua and ngx_stream_lua tweaks and fixes. The tests of ngx_stream_lua seem to be fully passing now.\nThe new version of the tarball has the following MD5 checksum:\n9cb82eb20b1aec191b6eea5d561138b2. After the formal release 1.15.6.1 is out. Oh, a new RC0 is out:\nhttps://openresty.org/download/openresty-1.15.6.1rc0.tar.gz\nBased on nginx 1.15.6.. The new OpenResty 1.15.6.1 formal release should be out in the next few weeks. We're still working on it. We'll push out an RC1 first.. The next version will be OpenResty 1.15.8.1. We've already kicked out a preview version for it:\nhttps://openresty.org/download/openresty-1.15.8.1rc0.tar.gz\nPlease do not hijack this old issue. Thank you. It was about nginx 1.13.10.. @dndx Merged. Thanks!. @oracle219 Did you write this patch yourself or you just stole it from somewhere else? What's the original source of this patch?. Seems like this patch needs a lot of work to do before it can be merged. Too many issues, just to mention a few above.. @oracle219 I'm not sure what license this patch is under. It's not clear to me. Will you confirm?\nThis patch is very sloppy in its current shape.. @oracle219 What's the point? You want to use Tengine as an example for merging sloppy and badly shaped patch in OpenResty? I don't follow your reasoning here. Sorry.. @oracle219 The thing is that we must do things right. It's a very serious matter. OpenResty is a not a playground of dirty hacks. Every patch that gets merged must in a good shape and pass our comprehensive code review and testing process.. @oracle219 Also, the license and terms of every line of the new code must be clear. This is about legal issues and must be taken into account very seriously.. @Bypass007 The default 100 limit is for security reasons and is documented. You can increase that limit to fit your needs.. @Bypass007 Well, if you set the upper limit to 100, then if you indeed get 100 args, then you just reject it in your application. We cannot reject requests directly inside the OpenResty core, since it is better for the application to make the decision, which is much more flexible. Not every OpenResty application is a WAF anyway.. Now to help those 3rd-party open source WAF products to detect truncation more efficiently (instead of counting the args or headers themselves), OpenResty's corresponding Lua API functions now return an extra string, \"truncated\", to signal the case when there are too many URI args or POST args or request/response headers seen in the current request. Please refer to the official documentation in the git repository for more details.. @lljuser NGINX never maintains backward compatibility on the C level so better wait for the new OpenResty releases based on new nginx cores (which will be extensively tested).. @theroyalstudent Please try the following openresty preview version which should have full compatibility with OpenSSL 1.1.0h:\nhttps://openresty.org/download/openresty-1.13.6.2rc0.tar.gz. @dndx Merged. Thanks!. @arcivanov The thing is that your nginx has configured too many server {} blocks and nginx is bad at handling many virtual servers in its standard nginx.conf way since it would allocate a lot of memory upon nginx startup in the C heap (through glibc's allocator), which makes the low 2G address space almost drained out (the LuaJIT VM needs the low 2G address space).\nIn our commercial OpenResty Edge 2 product, for example, we use Lua to dispatch virtual servers directly and it's easy to handle tens of thousands, hundreds of thousands, or even millions of virtual servers in the single OpenResty process without using too much memory or draining out the low 2G memory at all.. Yeah, we should rely on the upstream fixes in either Fedora 28 or NGINX. I don't feel like hacking this thing ourselves in OpenResty.. @doc987 If the issue has fixed in upstream Fedora 28, then we can provide an official OpenResty repo for that system. Thanks for the info.. @doc987 Will you please confirm that OpenResty 1.13.6.2 can indeed get built successfully on the latest Fedora 28 system without changes?. @tao12345666333 I believe nginx upstream has already removed that workaround.. @tao12345666333 OK, then the next OpenResty formal release should have the fix since the next version will be based on NGINX 1.15.x.. @doc987 Where did you look? The latest version is 1.13.6.2 released on 14 May 2018:\nhttps://openresty.org/en/download.html\nThe next OpenResty release will be in the next couple of months.. @PaulSchulz I cannot reproduce it on my side with a fresh install of Ubuntu 18.04 (with a full system upgrade via sudo apt dist-upgrade. Below is the full installation and test process on my side for your reference:\nhttps://gist.github.com/agentzh/90fac17c5e786adb0cd7daaf8d72f8d0\nYour error looks weird. Maybe you used to have an old install of some other builds of OpenResty in the same location? Check the following:\n```\n$ md5sum /usr/local/openresty/nginx/sbin/nginx\n773a0ceddb7745429f4bb662b4cc8323  /usr/local/openresty/nginx/sbin/nginx\n$ ldd /usr/local/openresty/nginx/sbin/nginx|grep pcre\n    libpcre.so.1 => /usr/local/openresty/pcre/lib/libpcre.so.1 (0x00007f09eeaa3000)\n$ file /usr/local/openresty/pcre/lib/libpcre.so.1\n/usr/local/openresty/pcre/lib/libpcre.so.1: symbolic link to libpcre.so.1.2.10\n$ md5sum /usr/local/openresty/pcre/lib/libpcre.so.1\n33612241b3153f0d0357c34913993118  /usr/local/openresty/pcre/lib/libpcre.so.1\n```\nIf you are getting different output from any of the commands above, then your installation is indeed broken.. @xingjianhui We never received any reports like that and we never seen anything like that ourselves. Maybe it's a bug in Docker itself? OpenResty never touches the epoll part of the nginx core. You get exactly what an official nginx core has there. You need to convince us it is indeed a bug on our side (or on the nginx side).. @GUI git tag was just pushed. Thanks for the reminder. I forgot to push the tag itself.. @gdestuynder No, openresty-1.13.6.2-1.el7.centos was built against openssl-1.1.0h. You can check that by running /usr/local/openresty/nginx/sbin/nginx -V. You should see something in the output like below:\n$ /usr/local/openresty/nginx/sbin/nginx -V\nnginx version: openresty/1.13.6.2\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC)\nbuilt with OpenSSL 1.1.0h  27 Mar 2018\nTLS SNI support enabled\nAlso, you can check which openssl dso files it is using:\n$ ldd /usr/local/openresty/nginx/sbin/nginx | grep ssl\n    libssl.so.1.1 => /usr/local/openresty/openssl/lib/libssl.so.1.1 (0x00007fa5d0889000)\n    libcrypto.so.1.1 => /usr/local/openresty/openssl/lib/libcrypto.so.1.1 (0x00007fa5d0402000)\nThese commands were just run on a fresh install of CentOS 7.5 on my side.\nPlease note that all our CentOS pre-built packages are carefully tested in each version of CentOS.\nMaybe it was some of your 3rd-party Lua modules installed by yourself that need to be rebuilt against OpenSSL 1.1.0h?\nIf it is indeed some of our Lua modules using old OpenSSL symbols, please provide a minimal and standalone example that we can reproduce the problem on our side. Thanks!. @gdestuynder BTW, LuaJIT itself does not depend on OpenSSL at all:\n$ ldd /usr/local/openresty/luajit/lib/libluajit-5.1.so.2.1.0\n    linux-vdso.so.1 =>  (0x00007ffd95efd000)\n    libm.so.6 => /lib64/libm.so.6 (0x00007ffa8ef48000)\n    libdl.so.2 => /lib64/libdl.so.2 (0x00007ffa8ed44000)\n    libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007ffa8eb2e000)\n    libc.so.6 => /lib64/libc.so.6 (0x00007ffa8e761000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007ffa8f4c6000). @gdestuynder The ffi.C namespace uses the OpenResty nginx executable's default namespace, so it uses the OpenSSL 1.1.0 library linked with that nginx executable, obviously. It does not load any other openssl DSO files otherwise it would use the ffi.load() API instead.\nThe issue is that your resty.evp Lua module assumes the OpenSSL 1.0.2 (or even older versions)'s C API while OpenSSL 1.1.0 has an incompatible C API. It is your resty.evp Lua module which needs fixing (or updating) for OpenSSL 1.1.0.\nAs I've said, LuaJIT's FFI API never loads system's OpenSSL library automatically (unless it is explicitly instructed to do so via ffi.load() on the Lua land). In fact it has no knowledge of OpenSSL at all.. @gdestuynder You should contact the maintainers of that resty.evp Lua module for OpenSSL 1.1.0 support. We know nothing about that 3rd-party Lua module, as I already mentioned above.. @gdestuynder The best way is to ask the maintainer of resty.evp to add support for OpenSSL 1.1.0 unless you want to stick with OpenSSL 1.0.2 forever ;). @dsnlevi It's a really bad idea to load different versions of OpenSSL libraries into the same process space (i.e., OpenResty's nginx process in this case).. We're actually talking about bumping our openresty-openssl pre-built library further to OpenSSL 1.1.1 for TLS 1.3 support. We won't downgrade to older 1.0.2 version at any rate.. @cdbattags It's just that your 3rd-party Lua modules fail to support OpenSSL 1.1.0's API in the first place. Please note that OpenSSL 1.1.0 has an incompatible API with 1.0.2. There's nothing we can do on our side since those Lua modules are not maintained by us anyway.. @cdbattags Starting from openresty 1.13.6.2, all our official pre-built packages have switched from OpenSSL 1.0.2 over to the OpenSSL 1.1.0 series. If you have to use OpenSSL 1.0.2 due to those 3rd-party Lua modules lacking OpenSSL 1.1.0 support, you should compile OpenResty from source yourself.. @cdbattags If you think it is an OpenResty issue, please provide a minimal and standalone example without using any 3rd-party libraries. We are not interested in nor have the time to help debugging those 3rd-party Lua modules which we know nothing about. Otherwise you should really contact the maintainers of those 3rd-party Lua modules as I've already suggested earlier.. @cdbattags BTW, EVP_MD_CTX_create is indeed removed from OpenSSL 1.1.0 since 1.0.2. See:\n```\n$ /opt/ssl110/bin/openssl version\nOpenSSL 1.1.0h  27 Mar 2018\n$ nm -D /opt/ssl110/lib/libcrypto.so.1.1|grep EVP_MD_CTX_create\n$ /opt/ssl102/bin/openssl version\nOpenSSL 1.0.2n  7 Dec 2017\n$ nm -D /opt/ssl102/lib/libcrypto.so.1.0.0|grep EVP_MD_CTX_create\n0000000000115153 T EVP_MD_CTX_create\n```. @cdbattags Everyone can upload packages to OPM. We cannot support every single OPM package that is not maintained by us. BTW, we already have ~100 open source projects to maintain ourselves.\nOpenResty uses RPATH to look up .so files, not through ldconfig since that way we would mess up with the operating system's openssl with our own openssl libraries.. @cdbattags As I said before, it is better to contact the maintainers of the 3rd-party Lua libraries you ran problems into. This place is for real issues inside the OpenResty itself. This issue has nothing to do with OpenResty itself since there is no bugs or no actions required on our side. It's the 3rd-party Lua module you're using lacks proper support for OpenSSL 1.1.0, which I made it clear at the very beginning.\nIf you have no clues about something, better ask on the openresty-en mailing list instead for such general inquiries. Please see\nhttp://openresty.org/en/community.html\nThe github issues board is reserved for serious development discussions and true bug reports or feature requests.\nThanks for your understanding.\nBTW, I'm not blaming you for anything, just trying to make it clear about the recommended practices in this community. Oh, and welcome to the OpenResty community!. @atrifan I cannot reproduce any leaks using your example above. I even decreased the timer delay from 0.4 to 0.001, still seeing nothing. And I also verified from the nginx error log file that the lua timer is indeed running. I use the following command to observe the (only) nginx worker process's memory usage over time:\ntop -p `pgrep -f 'nginx: worker'`\nAnd all the memory metrics for that nginx worker process never changes over time:\n```\n   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 42616 agentzh   20   0   68164   5252   4048 S   6.7  0.1   0:01.15 nginx\nPID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n 42616 agentzh   20   0   68164   5252   4048 S   5.9  0.1   0:18.61 nginx\n```\nI'm using the latest OpenResty 1.13.6.2 release BTW.. @atrifan I'm not using any docker stuff on my side though. Maybe it's a problem specific to docker or even a docker bug?. @atrifan You can close this issue yourself BTW.\nThis is also why the user should always try the latest version before reporting an issue to avoid wasting time on both sides ;). Not with the ngx_proxy module since that module itself does not even bother understanding the websocket frames at all. A Lua-land websocket proxies can definitely do that (using something like the lua-resty-websocket library, for example).\nBTW, please join the openresty-en mailing list for such general usage questions. This place is reserved for real bug reports and patch submissions. Thanks for\nyour cooperation! Please see https://openresty.org/en/community.html. Duplicate with openresty/lua-resty-redis#145.\n@aureolex Please do not cross-post. It's annoying.. @salamsoliman It's a common configuration error in your own nginx.conf file. That error message usually means that you fail to configure a proper content handler for that location. You should reach out to the nginx or openresty-en mailing lists for help instead:\nhttps://openresty.org/en/community.html\nBTW, if you really think it's a bug in OpenResty or the Nginx core, you should really provide a minimal example that others can easily run and reproduce the issue (that is, you should keep removing unrelated stuff from your example as long as you can preserve the issue).  In fact, many users can find their own mistakes while doing this. Simply pasting the full nginx.conf is just too lazy and is a waste of others' time, usually.\nAlso, for debugging large nginx.conf, if you really need to, you should really (temporarily) enable the nginx debugging logs to see what's happening under the hood. See\nhttp://nginx.org/en/docs/debugging_log.html. @salamsoliman You should check whether that file exists in the first place? We cannot fix such things for you, apparently ;). @snaix Our light threads are not identical to plain Lua coroutines. They are automatically scheduled while plain Lua coroutines are always manually scheduled. Better do not confuse those two and expect light threads always strictly follow plain Lua coroutines' semantics. That just does not make sense.. @snaix By definition, all light threads are running at the same time (since they are automatically scheduled).. The next release of OpenResty will base on more recent NGINX cores, which will definitely have the new GRPC proxy feature.. @Xuhaomiao Try this for now:\nhttps://openresty.org/download/openresty-1.15.8.1rc0.tar.gz. Merged. Thanks.. @azmng This is tricky because openssl 1.1.0 breaks backward compatibility with openssl 1.0.2. The rpm package of openresty uses \">=\" condition for the openssl package since it wants to preserve the ability to update openssl only. Using \"=\" here is not desired given the pace of openssl security updates. I'm not sure if there is a way to address this nicely without changing the package name of the openresty-openssl package, which is not desired.. @azmng The idea is that the user should upgrade everything by default. Then there will be no problem (the latest openresty package always works with the latest openresty-openssl package anyway). Given that you are already controlling what to upgrade and what not, I think it's better for you to also control what exact version of a package you want to upgrade will get upgraded to when other related packages are not upgraded under your command.. @samuelyao314 Seems like ngx_stream_lua_module is at fault. We'll have a look. Thanks for the report.. I'm seeing this output:\n```\n + ngx_stream_lua_module was configured\nchecking for OpenSSL library ... not found\nchecking for OpenSSL library in /usr/local/ ... not found\nchecking for OpenSSL library in /usr/pkg/ ... not found\nchecking for OpenSSL library in /opt/local/ ... not found\n./configure: error: SSL modules require the OpenSSL library.\nYou can either do not enable the modules, or install the OpenSSL library\ninto the system, or build the OpenSSL library statically from the source\nwith nginx by using --with-openssl= option.\nERROR: failed to run command: sh ./configure --prefix=/usr/local/openresty/nginx ...\n```\nNext time if you can directly paste the last few lines of the failed command output, that would be great ;). Merged with minor test fixes.. @zvtr You know that world) is not even a valid regex, right? If you check the return values of ngx.re.find (which you should, really), you'll note the first 2 values are nil and the 3rd value is the following error string:\npcre_compile() failed: unmatched parentheses in \"world)\" at \")\"\nThe leak happens because it allocates memory in the global nginx memory pool and there's no way to release small blocks before the pool itself is destroyed (which is upon worker exiting). You are not seeing leaks with openresty-valgrind because it disables nginx's memory pools so that small blocks can be freed immediately.\nI agree we should not leak memory even on bad regexes like this. And indeed our new FFI-based implementation for ngx.re.find does not have this issue. You can try it out yourself by adding the following line to the http {} block of your nginx.conf:\nnginx\ninit_by_lua_block { require \"resty.core\" }\nPlus, the FFI-based implementation is usually much faster.\nWe'll retire the current default CFunction-based implementation soon anyway. And the users should always explicitly use resty.core module bundled by the OpenResty itself for now.. @zvtr BTW, you should always specify -k option when using ab to avoid exhausting your local machine's ephemeral ports (or even better, using other tools supporting HTTP 1.1 keep-alive like weighttp and wrk).. @zvtr Did you read my comments above? Better not waste your time on this. I already suggested you the correct way to avoid this. Please read it.. @zvtr Your gdb analysis above makes no sense to me since you really have no ideas about how these things actually work (like how the ngx.re API works and how the nginx memory pools work). So better read all the relevant C code before making wild guesses simply based on random gdb data structure dumps. That would never be helpful, unfortunately, just like shooting in the darkness.. Merged with minor fixes. Thanks.. @aaronkingdom Please, do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/en/community.html Thanks for your cooperation.\nRegarding to your issue, you are using the body filter in the wrong way. A body filter can be invoked for multiple times for all the data chunks in a single response body. To quote the relevant official documentation:\n\nNginx output filters may be called multiple times for a single request because response body may be delivered in chunks. Thus, the Lua code specified by in this directive may also run multiple times in the lifetime of a single HTTP request.\n\nSee https://github.com/orinc/lua-nginx-module-plus#body_filter_by_lua for more details.. Already merged.. @teahouse You should check the return values of the setkeepalive method call for more details. Maybe you just fail to read everything in the socket receive buffer before trying to put the connection into the pool.. @minnan0422 You can try ./configure --with-ld-opt=-lpthread while building OpenResty (or the vanilla nginx) or just linking against openssl via dynamic linking instead.. @hmtai Isn't it a JSON API in your example? It's your client-side HTML templating system or other DOM-based JS framework to do proper HTML/JS escaping before displaying anything to your user. It is wrong for low level platforms like OpenResty to be too clever (which can be troublesome in many different use cases).. It's just like your favorite web browser does not try to detect malicious HTML/JS sequences in the JSON data it receives. Same thing. It's the application or the application framework's obligation to escape things, not the underlying toolchain.. @2731381914 First thing first: do not append new string to package.path in a request handler like access_by_lua! It will lead to memory leak since every request processed will make your global package.path string a bit larger.\nAlso you are loading the Lua module in the wrong way. The correct way is\nlua\nlocal mymod = require \"mymod\"\nmymod.myfunc(...)\nAlso make sure your Lua module being loaded does not write to globals! The correct way to write Lua modules is like this:\n```lua\nlocal _M = {}\nfunction _M.myfunc()\n    ...\nend\nreturn _M\n```\nYou are getting the error \"a nil value\" because each request has its own global variable namespace in the current released versions of ngx_lua (you'll get a warning about writing to globals in the latest master branch, but still, it's a wrong way).. Merged. Thanks.. @irimiab OpenResty 1.13.6.2 (and any earlier versions) do not really support the arm64 architecture. The support for arm64 was just recently added. Please try the following preview version instead:\nhttps://openresty.org/download/openresty-1.15.5.1rc0.tar.gz. @irimiab Make sure you are using OpenResty's own components instead of your own, like LuaJIT, lua-cjson, lua-resty-websocket, and etc. Some 3rd-party Lua C modules using light userdata is very likely to have compatibility issues on arm64; you should either avoid them or patch them in a similar way we patch lua-cjson.. Read the template:\n\"This place is for bug reports and development discussions only. For general questions and\ndiscussions, please join the openresty-en mailing list instead: https://groups.google.com/group/openresty-en.\nIf you want to use Chinese, please join the openresty (Chinese) mailing list instead: https://groups.google.com/group/openresty.\nDo not use Chinese in this place.\". @dongyangmin The correct way is to build OpenResty like this:\n./configure --with-http_auth_request_module\nSee ./configure --help and https://openresty.org/en/installation.html for more details.. It's not a bug. Hash table iteration has no deterministic order by definition (hash tables are unordered per se!). This is true everywhere, not just in Lua.. @zhu1q1q1q You should use LuaJIT instead of the standard Lua 5.1 interpreter. That error clearly indicates you are using the latter.\nHow can you use a different nginx core while using OpenResty 1.13.6.1 (OpenResty 1.13.6.1 bundles nginx 1.13.6)? And why are you using a different Lua VM while OpenResty already bundles its own LuaJIT and should work out of the box?\nI'm very confused.. @zhu1q1q1q No, you should always use the ./configure file at the top of the directory. Do not mess with the build/ directory yourself! Do not replace the nginx core with your own! It may not work at all.. @zhu1q1q1q If you hack the OpenResty tarball and use your own build sequence, then you are on your own. Do not expect getting help from us. The \"warranty\" was already voided (if there's any).. Read the documentation:\nhttps://github.com/openresty/lua-nginx-module/#ssl_certificate_by_lua_block. Yeah, we're gonna release OpenResty 1.15.6.1 very soon with the new 1.15.6 nginx core which has the fix. The nginx team does not provide a backport patch for older nginx cores like 1.13.6 our last release is based on, so it's not possible to do a hotfix release based on the last openresty 1.13.6.2 release quickly.. @johnsmith0209 No, nginx cores are seldom or never backward compatible with 3rd-party modules (not even with its own standard modules in an older nginx release). That's why it's nontrivial work on our side.. Hey, guys, try this:\nhttps://openresty.org/download/openresty-1.15.6.1rc0.tar.gz\nIt includes nginx 1.15.6. Please let me know how it goes.. Still busy reviewing code and testing the new master. Should be soon. Sorry for the delay!. New preview version was just out: https://openresty.org/download/openresty-1.15.8.1rc0.tar.gz. @Locoking A version was already out: https://openresty.org/en/ann-1015008001rc1.html. @Locoking See\nhttps://groups.google.com/d/msg/openresty-en/xOt9M_lr18U/D8pmZd33BgAJ. @corn1ng You can only generate the response in a single nginx phase (be it rewrite or access or content, not across all of them). Once you generate some response body data in the rewrite phase, the subsequent phases won't even run.. Always use \"local\" to declare Lua variables. It is emphasized in the documentation. Every request shares the same Lua VM.. Per-request data cross different phases should use the ngx.ctx API. That API is provided for a reason.. @elonmia OpenResty already includes ngx_stream_lua_module, so if you use --add-module=PATH to add it again, you get the \"multiple definition\" error, naturally.. @oneinstack I suggest just try the official OpenResty pre-built packages for Ubuntu:\nhttps://openresty.org/en/linux-packages.html\nBTW, if you insist building OpenResty from source yourself, you can check out the packaging scripts we used to build our official Linux binary packages:\nhttps://github.com/openresty/openresty-packaging/tree/master/deb/. @fufuok If you are using nginx's proxy to handle websocket traffic, then the best way to debug this is to use C-land debugging tools like gdb and systemtap.. @searover336 We don't have such systems to test. You're welcome to report back your test results. Thanks!. Sorry for the late reply, BTW.. Please, do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/en/community.html Thanks for your cooperation.\nI asked for the exact raw failure output on your terminal. Without details, we cannot help even if we want to. Thanks.. @searover336 Simply saying \"always having issues\" is not really helpful for debugging.. @mehrdadpfg Nginx's stable versions are just stable APIs. It's not that the mainline versions are unstable or anything like that. It's just that the mainline versions' APIs are not considered \"stable\".\nIn reality, nginx mainline versions get bug fixes and new features much faster. So we have no intention to stick with the stable series. Period.\nThis is an FAQ, BTW.. The lua-resty-http library is not maintained by the official OpenResty team. Maybe you should contact the maintainers/authors of that library instead? We cannot really help unless you can make sure it is OpenResty's problem.. @corn1ng Maybe you should try ngx.req.get_body_data() and/or ngx.req.get_body_file() instead. The ngx.req.get_post_args() requires the Content-Type: application/x-www-form-urlencoded request header and the request body must be encoded in this way. See\nhttps://github.com/openresty/lua-nginx-module#ngxreqget_post_args\nfor more details.. @diluga Once OpenResty upgrades to a new NGINX core version. Will you try this one?\nhttps://openresty.org/download/openresty-1.15.8.1rc0.tar.gz\nThis one is based on NGINX 1.15.8, the latest mainline version of nginx.. Are you sure the problematic systems are indeed 64-bit? The binary was tested on Windows 10 only. You could try using the MinGW2 project's gdb to debug the crash. Hopefully we can get some backtraces. We never tested on win7 or win2008 ourselves.. @sanmaozhao Please beware that 64-bit CPUs are able to run 32-bit Windows systems. I suggest you follow Microsoft's document below to check of your operating system is indeed 64-bit:\nhttps://support.microsoft.com/en-us/help/827218/how-to-determine-whether-a-computer-is-running-a-32-bit-version-or-64. @sanmaozhao Never mind, I now see you are running 64-bit operating systems.\nGoogle search finds this for your error:\nhttp://www.wiki-errors.com/wiki-errors.php?wiki=0xc000001d\n\nWhat causes 0xc000001d error?\nThe 0xc000001d error may be caused by windows system files damage. The corrupted system files entries can be a real threat to the well being of your computer.\nThere can be many events which may have resulted in the system files errors. An incomplete installation, an incomplete uninstall, improper deletion of applications or hardware. It can also be caused if your computer is recovered from a virus or adware/spyware attack or by an improper shutdown of the computer. All the above actives may result in the deletion or corruption of the entries in the windows system files. This corrupted system file will lead to the missing and wrongly linked information and files needed for the proper working of the application.. @sanmaozhao Sorry for the late reply. Are you using an AMD CPU?. Our windows binaries currently require CPUs with the SSE 4.2 instruction set though we will relax this for CPUs without it.. @FireBurn Use the released tarballs here:\n\nhttps://openresty.org/en/download.html\nOr just use the latest master branch.. @FireBurn The thing is we cannot fix a historical tag since it is already in history. We cannot change the history. I've said that you should either use the tarball we produced at the time of tagging or just use the master branch. Please follow those suggestions.. Just use the more_clear_headers directive provided by the ngx_echo module (also enabled by default in OpenResty). See\nhttps://github.com/openresty/headers-more-nginx-module#more_clear_headers. @cir0p You should use this library only in the request context (like content_by_lua* or rewrite_by_lua* or timer callback handler context in ngx.timer.*). Wrong contexts will give you that error.. @cir0p The init_by_lua* context is a wrong context.. Yeah, it's a TODO. Pull requests welcome :). @MadalinaPatrichi Sorry for the late reply. I've just fixed the paths. The URL https://openresty.org/package/centos/7Server/x86_64/repodata/repomd.xml is working now. Will you please try again on your side? Many thanks for the report!. @Roycohen Sorry for the late reply. Our team was traveling recently.\nSo it is your nginx worker processes which keep eating memory? Are you observing the resident memory size? According to your leak flame graph, seems like you have some long-running Lua handlers. Do you have a long-running timer or request handler which keeps doing cosocket communications?. @Roycohen Have you considered the (expected) memory consumption increases in your shared memory zones?. @Roycohen I think it's best to use our OpenResty Trace platform to debug such \"weird\" thing.. @Roycohen Shall we talk offline via emails? Our email address is support@openresty.com. OpenResty Trace is a commercial product and we won't charge you anything if it is a bug in OpenResty itself (3rd-party Lua modules which are not parts of OpenResty do not count). We hope that we can help you get to the bottom of it but right now the information is too limited for us.. My hunch is that it might be something in those 3rd-party Lua modules you are using like resty.mlcache and sl_decoder. But we need to run the tools of OpenResty Trace against your nginx processes to be sure.. @Roycohen OK, great.. @chetandhembre Try this:\nbash\nsudo systemctl disable nginx\nsudo systemctl stop nginx. @warrenwx I don't see how this is related to openresty. Maybe you should ask in the nginx mailing list instead?. @warrenwx OK, you mentioned ngx.print(). I suggest you provide a minimal and standalone example that we can easily reproduce the problem on our side. You mentioned ngx.print(data), but your nginx configuration snippet never mentioned it. We cannot help you at all since we do not have the complete information.. BTW, it's strongly recommended to use OpenResty directly to avoid known issues in the standard nginx core or in your own setup.. @gaurav13uniyal OpenResty does not provide the openssl Lua module. Maybe you should install and configure it yourself? Not sure what the openssl Lua module really is. Never used any Lua modules of that name myself.. Yeah, we're gonna upgrade to 1.1.1 soon after upgrading our own openssl patches for this new version.. @pkking There are many ways we could do this. The simplest way is to expose the fd number from cosocket objects (by a new method, for example) and then call the C API function setsockopt() or alike via LuaJIT FFI upon this fd. This also ensures the maximum flexibility. You are welcome to submit a pull request to add a fd() method to the cosocket objects (we need to be careful about exotic operating systems like Windows here though).. @pkking Depending on whether you are using Lua to talk to the backend or the proxy module. For the former, yes.. @lidong14 You should try OpenResty releases instead.\nSee\nhttps://openresty.org/en/ann-1015008001rc1.html\nand\nhttps://openresty.org/en/download.html\nAlso, you should provide a standalone and minimal example with detailed steps so that others can reproduce what you are seeing easily. Otherwise it'll be too hard for us to help even if we really want to. Thanks for your cooperation.\nAlso, if you can reproduce things using the standard nginx core only, then you should really report issues to the nginx official team instead. OpenResty never touches the proxy_max_temp_file_size directive anyway. It's from the stock nginx.. Please, no Chinese here. This place is considered English only. If you really\nwant to use Chinese, please join the openresty (Chinese) mailing list instead.\nPlease see https://openresty.org/en/community.html Thanks for your cooperation.\nRegarding to your request, you can always add new modules to OpenResty in the same way as with NGINX. See\nhttps://openresty.org/en/installation.html#building-from-source. It was a digitalocean network incident. Should recover now. \nClosing it for now. Feel free to reopen it if the problem persists.\n. Sorry, we do not want to maintain older series. We're moving towards 1.15.8.x:\nhttps://openresty.org/en/ann-1015008001rc1.html. @david-holonet Because OpenResty 1.15.8.1 RC1 is the first version with proper AArch64 support. Older versions just do not work at all.. @david-holonet Read the change log of OpenResty 1.15.8.1 RC1:\nhttps://openresty.org/en/ann-1015008001rc1.html. @david-holonet You must put the following to the http {} block of your nginx.conf:\nnginx\ninit_by_lua_block { require \"resty.core\" }\nThe default CFunction-based ngx.re API implementation just does not support AArch64. We're retiring the current CFunction-based implementation very soon.. @thibaultcha Seems like we should enable lua-resty-core by default in this 1.15.8.1 release? The old CFunction-based implementation is too troublesome (not just this issue, but also potential deadlock issues when using lua-resty-lock).. @david-holonet We can re-open the original issue. Closing this now as duplicate.. Looks like a syntax error?\n. This looks wrong to me and it may break OpenResty own official Linux packages here:\nhttp://openresty.org/en/linux-packages.html. Will you explain this change? Apparently this creates wrong symlinks in the RPM packaging process, for example.. Style: { should be on the previous line.. The field name entered_logger is better.\nUse the following line:\nunsigned                entered_logger;  /* :1 */\nThere is no point in using :1 here for the current layout (with padding considered).. Why do we need this field?. Why do we need this field? I think the log intercept handler should apply to all the subsystems, not just http.. There is no point in using :1 here since there's no other fields can fill up the padding it saves. So it will just waste CPU time while saving no space.. Again, { should be on the previous line. Be careful.. Because we use entered_logger as a boolean value, we should test !log->entered_logger instead.. We don't need to support older nginx cores.. Seems like this is in the wrong place. We would get duplicate error log messages when the current log contains multiple loggers. Note that this is inside a while loop.. I think the intercept log handler should be called before the line\nC\n    ngx_linefeed(p);\nAlso, it's better to record the log level integer directly at the same time. We should let the log data consumer to decide what level to filter, so that we can implement highly dynamic level filtering without reloading nginx.. I think we can initialize it to NULL in the variable declaration above instead.. entered_logger is used as a boolean value, so we should test !log->entered_logger instead.. I think intercept_error_log_handler is a better name.. Also, we should introduce a special macro like HAVE_INTERCEPT_ERROR_LOG_PATCH, similar to our existing HAVE_ALLOW_REQUEST_BODY_UPDATING_PATCH macro.. I think we can just put this field in ngx_cycle_t as well, right after the intercept_error_log_handler field. There's no point in allocating another 8 bytes for every ngx_log_t struct in every request on a 64 bit system.. We don't need this guard in this patch itself.. We don't need an explicit config directive to enable this. We only need a C API for 3rd-party module to request at run time. Just like the existing cache manager and cache loader processes have no explicit config directives, but are triggered automatically by the presence of any http cache directives like proxy_cache.. Seems like we can just use ccf->privileged_worker field for the flag?. English: I think we should call it \"privileged_workerinstead.. Why skip the privileged worker for the channel?. Again, we should use the word \"privileged\" instead.. Thisctxconstruct looks strange to me. Why do we need?. Can we get rid of this?. Can we just reuse the existingNGX_PROCESS_HELPERhere?. @membphis I think the name \"privileged agent\" is better.. I think the nginx coding style requires more than one space before the macro body.. I suggest you use a very large number here, like 99, to avoid future conflicts when the mainstream nginx core introduces a new process type constant of the value 5.. @membphis I think all we need is just the ability to know if the current process is a privileged agent. We shouldn't worry about nginx's own helper processes at all. It's useless to us.. @dndx The latter is better since it's more portable and thus more reliable.. Style: need a blank line before this line.. Style:{should be on a separate line when theforcondition is broken into multiple lines.. \"til\" => \"till\"\n\"next loop\" => \"next iteration\". Better put the stuff after;in a separate line to make the code align up more nicely?. Oh, man, better give this magic number a name.. Hmm,/proc/cpuinfois not portable. We need to support various different operating systems like Windows, FreeBSD, and Mac OS X. Maybe we should actually run the resulting C program to validate?. Can we actually use SSE 4.2 instructions in this test C program and actually runs the resulting binary to see if it returns 0 code?. grammar: \"have\" => \"has\". Too many spaces afterchar?. I think we should at least use a tabful of spaces here ;) One space is too few.. Hmm, seems like you forgot to apply this patch to the nginx core by editingutil/mirror-tarballs.. Also, I think the patch file name should benginx-1.11.2-privileged_agent_process.patch` instead.\nNever mind, I'll rename it locally myself.. This change is not sufficient. The whole point of this feature test is for the -msse4.2 option.. It's better to rename this file to nginx-XXX-intercept_error_log.patch.. Need to introduce a special HAVE_ARBITRARY_BALANCER_STATUS_CODE_PATCH macro in this patch.. Why don't we just use ctx here?. Style: need 2 blank lines here.. These 2 functions were originally protected by the macro NGX_STREAM_SSL and we should keep that in the header file as well.. @dndx I see. Then we'd better name it to pctx instead of sctx.. Better introduce a new paragraph here?. @dndx Not a big deal. We can merge the current form for now :). The trailing \\ is not aligned up vertically.\n  . The trailing \\ is not aligned up vertically.. Ditto.. Style: needs a blank line before } else {.. It's better to also test the availability of fcntl(s, F_SETFD, FD_CLOEXEC) here?. Seems like you misunderstood me :)\nIt's better to make these 2 separate feature tests. They are different things. So that maybe we can remove the win32 special handling and it will also automatically work on other systems lacking support for even the FD_CLOEXEC thing. It's safer and more generic.. This call should be protected by a feature test macro also.. Missing this one?. Better put the #endif here?. @spacewander I think that macro is only an indicator for the existence of the patch itself, instead of indicating the existence of the actual feature :)\nBut I agree HAVE_SOCKET_CLOEXEC_PATCH is a bit confusing and should be renamed to HAVE_CLOEXEC_PATCH instead (ENABLE_SOCKET_CLOEXEC is actually worse, I'm afraid, which breaks our macro naming convention for such nginx core patches).. Can we avoid this ngx_strlen() call? It seems that the caller already knows the string length but you simply discards it.. It's unfortunate that you discard the errno (actually the errno may already get overridden by the earlier ngx_close_file call. We should log the system error message for failed ngx_read_file() calls.. Need to handle multiple spaces and/or tabs used before and/or after the word nameserver. I've tested and found that both Linux and Darwin do support such free formats.. Better add a parentheses around the condition to follow the nginx coding style.. This line exceeds 80 cols, it seems.. Ditto.. Ditto.. Ditto.. I've noted that this patch has too many violations of the nginx coding style. For example, here it does not align up the local variable identifiers vertically. Please refer to the existing nginx core source for the correct style.. You fail to add patch commands to the util/mirror-tarballs script to actually apply this patch.\nAlso, this patch name does not follow our convention. We use underscores for the patch label name itself while you still use dashes.\nAnd what's worse, it seems that this patch cannot really be applied cleanly to OpenResty's nginx core. Have you actually tried it out yourself?. This change is apparently not desired and off topic.. Ditto.. Ditto. Too invasive and not portable at all. Note that OpenResty needs to build on Windows.. This obviously violates the nginx coding style.. I wonder if this will compile with older OpenSSL versions like 0.9.8.. You know that source code lines should never exceed 80 columns?. This is wrong. It will create a symlink pointing to the wrong location.. Why this change?. Ditto.. @mclyne The DESTDIR variable is usually used for rpm/deb packaging tools to install the software to a temporary location other than under the real root directory right before generating an rpm or deb package. So it is not meant to be the final location for the installed packages. That's why I said if you add $(DESTDIR) to the symlink target location, it would be completely wrong (the DESTDIR location won't even exist in the final deployment machine).. @mclyne Seems like you confused DESTDIR with PREFIX. They are for completely different purposes.. @mclyne So your change above would lead to broken symlinks installed to the final machines after installing the deb/rpm packages.. Better avoid adding space after ! for the sake of consistency.. Will you add some tests to the existing test suite to cover these changes? The t/sanity.t file is the right place to add such tests.. Extra blank line here?. Should add a code comment here to make it clear that we just make it \"ASAN clean\".. I just pushed the v0.01 tag for lua-table. Please use the formal version and merge this PR. Thanks!. I think we should use Perl's own architecture information instead of invoking uname which is not available everywhere.\nBTW, GC64 is required on ARM64 so we do not need to worry about that at all. The LuaJIT build system enables that automatically anyway.. We should mention x86_64 here?. We could though it's less an issue since it first makes sure it is on darwin.. @thibaultcha Great. Thanks! It would be awesome if you could run the tests on 32-bit arm systems at the same time, to cover corner cases as in openresty/luajit2#37.. Let's omit the parentheses for such imported Perl subs.. Ditto.. ",
    "liseen": "compile with debug and set error_log logs/error.log debug, then send debug info to agentzh@gmail.com and liseen.wan@gmail.com.   \nyou should try this use the latest ngx_openresty, if you can reproduce this bug, please also inform agentzh.  Latest ngx_openresty\n       http://agentzh.org/misc/nginx/ngx_openresty-1.0.5.1rc2.tar.gz\n. ",
    "ikhoyo": "I abandoned my Hardy instance, and used CentOS 6. I have it working. The problem with the Hardy instance has something to do with libdrizzle. It's not compiling correctly, and it's not giving any diagnostics, so I'm not sure what the issue is. \nI had a difficult time getting libdrizzle compiled and linked with OpenResty on CentOS 6 also, and finally just installed it with:\nyum install libdrizzle libdrizzle-devel\nThat worked, and everything seems to be working. The libdrizzle version is 0.8-6. Will that be a problem? \nI am using the latest version of OpenResty. libdrizzle is a real headache though. As I said, I had no problem on my Mac (10.6.7), so I was very surprised to have all these issues on Linux. It's definitely libdrizzle though, but what exactly the problem was, I don't know.\nThanks for the response.\n. Yes, my Mac is 64 bit. Can I use the drizzle rpm described here: http://docs.drizzle.org/installing/redhat.html ?\n. I have it working with the compiled driver. I was getting a library not found after compiling it, but I just needed to do an ldconfig.\n. ",
    "msekharmca": "JDBC connectionstring?\n. ",
    "onyxraven": "Note, 1.10.39 does work.  Maybe this is already fixed.\n. ",
    "nkhine": "hello,\njust to confirm that on an OSX 1.0.10.40 with Homebrew works by doing the following:\n```\n\u263a  brew info pcre                                                                                                                                         \"\"\npcre 8.21\nhttp://www.pcre.org/\n/usr/local/Cellar/pcre/8.21 (126 files, 3.1M)\nhttp://github.com/mxcl/homebrew/commits/master/Library/Formula/pcre.rb\n~/Packages/ngx_openresty-1.0.10.44\n\u263a ./configure  --with-cc-opt=\"-I/usr/local/Cellar/pcre/8.21/include\" --with-ld-opt=\"-L/usr/local/Cellar/pcre/8.21/lib\"\n\u263a make\n\u263a make install\n\u263a vim ~/.zshrc # add /usr/local/openresty/nginx/sbin to the path\n\u263a source ~/.zshrc\n\u263a nginx -v\nnginx: nginx version: ngx_openresty/1.0.10.44\n```\n. oh yes, i forget this! on freebsd the port's nginx omits this flags\nOn Fri, May 23, 2014 at 3:48 PM, Evan notifications@github.com wrote:\n\nAlthough this doesn't speak to the rc.d or init.d script part of your\nquestion, you can pass the arguments -s reload (or quit, stop, etc.) to\nthe nginx binary.\nSee the top of http://nginx.org/en/docs/beginners_guide.html\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/openresty/ngx_openresty/issues/50#issuecomment-44019156\n.\n\n\n%>>> \"\".join( [ {'':'@','^':'.'}.get(c,None) or chr(97+(ord(c)-83)%26) for\nc in \",adym,)&uzq^zqf\" ] )\n. thanks @agentzh i had sorted it back in 2014 ;). ",
    "jtarchie": "With ngx_openresty-1.2.1.14, this issue is occurring again. I followed the recommended steps for pcre and adding to ./configure, but still end up with the following:\n...\nld: symbol(s) not found for architecture x86_64\ncollect2: ld returned 1 exit status\nmake[2]: *** [objs/nginx] Error 1\nmake[1]: *** [build] Error 2\nmake: *** [all] Error 2\n. That was it. Thanks.\n. There is something that I am trying to get to work. Heroku requires that logs be displayed to STDOUT while the process is running. For example when Rails is running, it writes the log directly to STDOUT. Nginx automatically prints to a file. Is there any to just redirect the log output STDOUT?\n. The above solution does not work. Heroku does not provide permission to /dev/stdout. I have been trying to figure out alternatives of /dev/stdout. I am currently trying to see if there is a way to do with fifo, but I am not holding my breath.\n. The solution I've found, and recommended by Heroku is to tail the logs while the nginx runs in the background.\nThe startup script looks like this\n``` sh\n!/bin/sh\nDEFAULT_CONF=nginx.conf\nDEFAULT_ROOT=\"$(pwd)\"\nCONF=\"${1:-$DEFAULT_CONF}\"\nROOT=\"${2:-$DEFAULT_ROOT}\"\nOUT_CONF=\"$CONF.compiled\"\n(\n    mkdir -p logs\n    touch logs/access.log logs/error.log\n    #Redirect NGINX logs to stdout.\n    echo 'buildpack=nginx at=logs-initialized'\n    tail -qF -n 0 logs/*.log\n    echo 'logs' >$psmgr\n) &\n(\n    cd \"$ROOT\"\n    cat \"$CONF\" | compile_nginx_config.lua > \"$OUT_CONF\"\n    LD_LIBRARY_PATH=\"/app/packages/lib\" nginx -p \"$(pwd)\" -c \"$OUT_CONF\"\n)\n```\nI don't like it. Since heroku doesn't give us access to /dev/stdout are there any alternatives you can think of. Can we actually just have nginx stream it to standard out buffer?\n. ",
    "skubot": "Thanks @agentzh, --with-pcre worked for me as well.\n. ",
    "sathishvc": "Thanks @nkhine.\nI was using rvmsudo passenger-install-nginx-module to install nginx on OS X and was getting the same error. Adding the configuration parameters --with-cc-opt=\"-I/usr/local/Cellar/pcre/8.32/include\" --with-ld-opt=\"-L/usr/local/Cellar/pcre/8.32/lib\" during the customized installation of nginx worked for me too.\n. ",
    "motopig": "thanks @nkhine\n. ",
    "laghatea": "I can't believe I have spent entire day on this bug. I have tried all the fixes suggested above,but this error msg. tells me that openresty is not configured properly. - \nnginx: [emerg] unknown directive \"echo\" in /usr/local/etc/nginx/nginx.conf:45\n. ",
    "liuyu121": "Hey there are some tips for issues like this.\nI use the CONFIGURE to build the openresty:\n```\n./configure   --prefix=/usr/local/openresty --with-pcre=/Users/liuyu/learn/nginx/ngx_openresty-1.5.12.1/pcre-8.34  --with-openssl=/Users/liuyu/learn/nginx/ngx_openresty-1.5.12.1/openssl-1.0.1f\n```\nAnd the get the ERROR:\n```\n\"_sk_value\", referenced from:\n  _ngx_ssl_stapling in ngx_event_openssl_stapling.o\n\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nmake[2]: *** [objs/nginx] Error 1\nmake[1]: *** [build] Error 2\nmake: *** [all] Error 2\n```\nAnd just use:\n```\nexport KERNEL_BITS=64\n```\nReinstall ! \nDone!\nGood Luck.\n. ",
    "Paxa": "Seems like same error in nginx itself\nhttp://trac.nginx.org/nginx/ticket/94\nReason is it takes headers from /usr/local/include/, dylib from /usr/lib\n. ",
    "grasses": "I have installed pcre, and configure command is:\n\nsudo ./configure --with-openssl=bundle/openssl --with-cc-opt=\"-I/usr/local/Cellar/pcre/8.37/include\" --with-ld-opt=\"-L/usr/local/Cellar/pcre/8.37/lib\"\n\nstill return error:\n\nmeanwhile it has a warning:\nWARNING! If you wish to build 64-bit library, then you have to\n         invoke './Configure darwin64-x86_64-cc' manually.\n         You have about 5 seconds to press Ctrl-C to abort. \n. then I let nginx build the PCRE source, \n\nsudo ./configure --with-openssl=bundle/openssl --with-pcre=bundle/pcre-8.37\n\nreturn same error.\nso sad.\n. @agentzh \nIt works now!! thanks !!\n. ",
    "Bingnan": "Check pcre and openssl path by \"brew info pcre\" and \"brew info openssl\";\nthen according to the result, specify the path for both of them in configure command:\n./configure  --with-cc-opt=\"-I/usr/local/Cellar/pcre/8.37/include -I/usr/local/opt/openssl/include\" --with-ld-opt=\"-L/usr/local/Cellar/pcre/8.37/lib -L/usr/local/opt/openssl/lib\"\n. ",
    "bsyk": "I had to \nexport MACOSX_DEPLOYMENT_TARGET=10.9\nto get the configure script to use the right versions of the libraries.\nFrom the LuaJit project installation page :\n\nNote for OSX: if the MACOSX_DEPLOYMENT_TARGET environment variable is not set, then it's forced to 10.4.\n. \n",
    "lavenkin": "when I insert ./configure \n-bash: ./configure: No such file or directory\n. @agentzh, Yes It works!\n. ",
    "wynelu": "I'm using OX EI Capitan 10.11.2,  use brew install openssl and pcre, then configure generate error, then using brew link --force openssl(don't know it helps), then compile specify path like follows..\n./configure  --with-cc-opt='-I/usr/local/Cellar/pcre/8.38/include/ -I/usr/local/Cellar/openssl/1.0.2e_1/include/' --with-ld-opt='-L/usr/local/Cellar/pcre/8.38/lib -L/usr/local/Cellar/openssl/1.0.2e_1/lib' -j2\nthen make works fine. \njust record this to some newers like me.\n. ",
    "bungle": "@wynelu, I use brew and:\n--with-cc-opt=\"-I/usr/local/include -I/usr/local/opt/openssl/include\"\n--with-ld-opt=\"-L/usr/local/lib -L/usr/local/opt/openssl/lib\"\n. @agentzh, should it still return a table with possibility of metamethod __tostring to return the first one? Or maybe ngx.var.server_names?\n. This is for advanced users, and having a config option(s) to disable things is well, just flexible. I'm against having --without-any-lua. You can disable them one-by-one, :-). If you disable/remove Lua altogether, maybe then you are prohibited to call it OpenResty anymore?\nI can see this escalating to options like:\n--without-non-standard-nginx-modules\n. @leto,\nI know, without-any-lua sounds a bit harsh, maybe:\n--without-lua-libraries\nIs a bit better. That could include all lua-resty-*and lua-cjson and lua-rds-parser.\nAnd possibly (these are rather static though):\n--without-lua-modules\n. @agentzh, that's even better. Doesn't get any easier than than.\n. @leto, would you like to modify your patch so that --without-http_lua_module disables all the Lua-related?\n. I have already answered that on lua-resty-template, so this can be closed.\n. I think this is the correct place:\nhttps://github.com/openresty/lua-cjson\n. But I'm pretty sure this is expected behavior with Lua cJSON. When you decode, you get Lua table. In Lua we don't have separate arrays and objects. And I'm pretty sure Lua cJSON didn't add metatable or some field to this table so that it can look it up and decide if it should be encoded as array or object.\n. This commit, though, seems to have something to do with this:\nhttps://github.com/openresty/lua-cjson/commit/7a9c25ee69f38974e99322971eace37ba1753074\n(But with non-fork Lua cJSON I think my statement is still correct).\n. Also check this out:\nhttps://github.com/openresty/lua-cjson#encode_empty_table_as_object\n. @ruslantalpa,\nI agree with you, but there is no way to do this properly without some kind of side effects. I don't agree with some of the design choices made with original Lua cJSON, for example I would like it to behave similarly to this (it is my version that binds to cJSON C library that is a totally different than Lua cJSON):\nhttps://github.com/bungle/lua-resty-libcjson\nYou may try that exactly same code I present there with Lua cJSON or this OpenResty forked one. I bet that you will get different results. Is my way of doing it more correct that the other ways, I'm not sure.\nHow I do this is that I do add metatable on decode on Lua tables, either json.object or json.array. Now I can later on use this information to encode as an object or as an array. But this has a lot of side effects as well.\nThere is clear impedance mitch match, and there is no real solution, only work-arounds.\nNow, think this a minute:\nlua\nlocal tbl = cjson.decode \"[]\" \n-- let's pretend that this tbl now has a magic field or metatable attached\n-- that tells it that it is an array\ntbl.key = \"dog\"\n-- what the fuck is the tbl now? is it still an array, so we just throw away\n-- the key on encode, or has it magically switched it's metatable to object?\n-- But then again, there is no equivalent in JSON to what this table structure\n-- is in Lua, should we prevent inserting a key?\nThe big question is, should we do a breaking change?\n. Of course, but does this warrant a breaking change, and warrant to make it incompatible with Lua cJSON. Maybe we need a config switch also by which we can control the behavior?\nAnd I know what you are talking about, my lib behaves exactly like you want (except it doesn't respect the metatable if there are keys and empty tables are encoded as arrays by default, and we do automatic checks if there are keys, and if not we default to array).\n. Why do you think object should be default here:\nlua\njson.encode{} -- e.g. why return \"{}\" instead of \"[]\"\nIf you ask me, this looks more like an array. In object you have at least one key, but empty arrays are just fine (e.g. results from db).\n. > For example i do not understand why (conceptually) you (developer) would decode a json like this [1,2] then use it as if it was a {\"1\":1, \"2\":2} ... this is just bad code :)\nBut this is not what is happening, is it?\n. Well, If you decode \"[1,2]\" you will get { 1, 2 } on Lua side. The only thing that is confusing is what to do with empty ones by default. You say:\nOn decoding:\n1. if it is an array attach array metatable to it\n2. if it is an object attach object metatable to it\n3. otherwise just encode the value and map it to a proper Lua type\nOn encoding:\n1. if it has metatable, use what metatable says\n2. if it has no metatable use it as object\nNow, someone would say, Why my decoded Lua structures contain all this metadata crap. I want clean Lua structures?, So we could:\nOn decoding:\n1. If it is an array return { a, b, c }\n2. If it is an object return { a = 1, b = 2, c = 3}\n3. otherwise just encode the value and map it to a proper Lua type\nNow on encoding:\n1. Check if { a, b, c } has keys? If not encode it as an array [ a, b, c ] unless it has json.object metatable, otherwise encode it as object. If it has both, encode it as an object, e.g. { a, b, c, d = 2 } => { \"1\": a, \"2\": b, \"3\": c, d: 2 }\nClean and simple. No need to have any metatable crap and it always works predictable (except the empty ones on your first example \u2013 that will work, but it will break on this: cjson.encode(cjson.decode\"{}\") -- as with this version it actually encodes it [] if you have disabled \"add metatables on decode\"). Now if you really want to force something to object instead of array on encoding, you have to tell it:\nlua\njson.encode(setmetatable({}, json.object)) -- now we get {} instead of []\nArray as default is clearly the best way to do this. Then you could have option for decoding to whether or not to apply metatables or not, so that you can be sure this works:\nlua\njson.encode(json.decode\"{}\")\nThis works always without even metatables then:\nlua\njson.encode(json.decode\"[]\")\nIf we really want to do this big change to Lua cJSON, we might go ahead and build a new FFI one on the same run.\n. I can say that this looks strange at first:\nlua\njson.encode(json.decode\"[]\") -- output \"{}\"\nOr with my approach this looks strange at first:\nlua\njson.encode(json.decode\"{}\") -- output \"[]\"\nBut without metatables or extra fields, you cannot get this to work, what happens here is just:\nlua\njson.encode{}\nWhat should come out of it is a decision. Should this be configurable is a decision (something can go wrong because of different configs). What should be a default is a decision. Can I disable metadata or field adding is a decision. To strictly follow what attached metatable or field says or first try to dynamically check if it is array or object, is again a decision. I say there is clearly no \"right\" answer. You still want to get this to work without metatables, so you need to decide the above.\n. Read the above: https://github.com/openresty/openresty/issues/193#issuecomment-242707042\nWhat would you decide? Is what you decided the approach everyone agrees? Hardly, I guess, as we have seen in different implementations, you don't agree with my lib or Lua cJSON or this OpenResty's fork of Lua cJSON (and they all take a slightly different approach).\n. > saying if you really want to ... you can force the metatable means that you turn a simple task of decoding\nNot at all. As there is now other way to say that {} is array or object. But my lib has some defaults:\n- json.encode(json.decode\"[]\")\n- json.decode(json.decode\"{}\")\nBoth of these work always. Only thing is that when you modify and add a key to array, is that we will encode it as an object. But that is clearly a mistake in your code (why would you put key to array in a first place).\n. Yes, I'm saying all that works.\n. With my lib:\nThis code:\n``` lua\nlocal encode = require \"resty.libcjson\".encode\nlocal decode = require \"resty.libcjson\".decode\n-- empty array\nprint(encode(decode\"[]\")) -- should output []\n-- empty object\nprint(encode(decode\"{}\")) -- should output {}\n-- object that becomes empty\nlocal a = decode '{\"a\":1}'\na.a = nil\nprint(encode(a)) -- should output {}\n-- array that becomes empty\nlocal b = decode \"[1]\"\ntable.remove(b, 1)\nprint(encode(b)) -- should output []\n```\nOutputs:\njson\n[]\n{\n}\n{\n}\n[]\n. But if you do this:\nlua\n-- array is going to have keys\nlocal b = decode \"[1]\"\ntable.remove(b, 1)\nb.a = 1\nprint(encode(b)) -- will output { \"a\": 1 }, you wanted []\nAnd that was a one thing that you didn't agree. But I can make this configurable, but I will not change the defaults.\n. One thing though, If you have huge structures (multiple megabytes in size), my lib does not perform particularly well on encoding. Decoding is just fine though: https://github.com/bungle/lua-resty-libcjson/issues/3\nAlso many many libs can decode and encode things like nan, and infs and numbers differently (allow or disallow, have different precision, etc., and nulls.\n. I wish OpenResty has its own FFI optimized JSON library. For decoding there is:\nhttps://github.com/cloudflare/lua-resty-json\nBut it is not much updated since, and has no encoder. Also, I'm pretty sure that without encoder, you cannot really rely that with some other encoder and end up with same structure that you first decoded. There are many other libs written in Lua or Lua + C or LuaJIT FFI + C.\n. You cannot loop the indexes or keys using ipairs, pairs or next on ngx.var. This is by design.\nYou can set ngx.var fields:\nlua\nngx.var.my_proxy_read_timeout = 1000\nEverything is documented here:\nhttps://github.com/openresty/lua-nginx-module#ngxvarvariable\n. What is the question, if it is about Mongo DB driver, take a loot at one of these 3rd party libraries:\n\nhttps://github.com/Olivine-Labs/resty-mongol\nhttps://github.com/nightsailer/lua-resty-mongo\nhttps://github.com/boyxuper/lua-mongo. \n",
    "LittleShrimp1987": "$: ln -s /usr/local/Cellar/pcre/8.38 /usr/local/opt/pcre\nworks for me\n. ",
    "PiotrSikora": "This is neither correct (it breaks existing platforms, because on Linux -i may be followed by optional suffix, but without space between -i and suffix, otherwise it's treated as another argument) nor portable (sed doesn't have -i on *BSD systems).\nThe correct solution is to use temporary files, i.e.\nsed \"pattern\" patch > patch.tmp && mv patch.tmp patch\n. ",
    "nightsailer": "Thanks, @PiotrSikora  you'r right. \nI also suggest use Perl to do this job further, find,sed, awk, some arguments/options  also not portable.\n. ",
    "vivus-ignis": "Thank you for reply and a great respect for your work.  Will watch the progress of cosocket.\n. ",
    "bigplum": "It's work like that:\n./configure --with-debug --with-luajit --without-http_ssl_module --without-http_set_misc_module --without-http_encrypted_session_module\n. So need to add check openssl for http_set_misc_module and http_encrypted_session_module and recent ngx_lua? If openssl is required for those modules.\n. no warning, modules added before checking openssl\n- ngx_http_echo_module was configured\n  adding module in ../xss-nginx-module-0.03rc8\n- ngx_http_xss_filter_module was configured\n  adding module in ../form-input-nginx-module-0.07rc5\n  found ngx_devel_kit for ngx_form_input; looks good.\n- ngx_http_form_input_module was configured\n  adding module in ../encrypted-session-nginx-module-0.02\n- ngx_http_encrypted_session_module was configured\n  adding module in ../ngx_lua-0.4.0\n  checking for LuaJIT library in \n  /root/work/ngx_openresty-1.0.10.44/build/luajit-root/usr/local/openresty/luajit/lib \n  and \n  /root/work/ngx_openresty-1.0.10.44/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.0 \n  (specified by the LUAJIT_LIB and LUAJIT_INC env) ... found\n  checking for export symbols by default ... found\n- ngx_http_lua_module was configured\n  adding module in ../headers-more-nginx-module-0.16\n- ngx_http_headers_more_filter_module was configured\n  adding module in ../srcache-nginx-module-0.13rc3\n- ngx_http_srcache_filter_module was configured\n  adding module in ../array-var-nginx-module-0.03rc1\n  found ngx_devel_kit for ngx_array_var; looks good.\n- ngx_http_array_var_module was configured\n  adding module in ../memc-nginx-module-0.13rc2\n- ngx_http_memc_module was configured\n  adding module in ../redis2-nginx-module-0.08rc2\n- ngx_http_redis2_module was configured\n  adding module in ../upstream-keepalive-nginx-module-0.7\n- ngx_http_upstream_keepalive_module was configured\n  adding module in ../auth-request-nginx-module-0.2\n- ngx_http_auth_request_module was configured\n  adding module in ../rds-json-nginx-module-0.12rc7\n- ngx_http_rds_json_filter_module was configured\n  adding module in ../rds-csv-nginx-module-0.04\n- ngx_http_rds_csv_filter_module was configured\n  checking for PCRE library ... found\n  checking for system md library ... not found\n  checking for system md5 library ... not found\n  checking for OpenSSL md5 crypto library ... not found\n  checking for sha1 in system md library ... not found\n  checking for OpenSSL sha1 crypto library ... not found\n  checking for zlib library ... found\n  creating objs/Makefile\n. checking for OpenSSL md5 crypto library ... not found\nchecking for sha1 in system md library ... not found\nchecking for OpenSSL sha1 crypto library ... not found\nchecking for zlib library ... found\ncreating objs/Makefile\nConfiguration summary\n- using system PCRE library\n- OpenSSL library is not used\n- using builtin md5 code\n- sha1 library is not found\n- using system zlib library\nnginx path prefix: \"/usr/local/openresty/nginx\"\n  nginx binary file: \"/usr/local/openresty/nginx/sbin/nginx\"\n  nginx configuration prefix: \"/usr/local/openresty/nginx/conf\"\n  nginx configuration file: \"/usr/local/openresty/nginx/conf/nginx.conf\"\n  nginx pid file: \"/usr/local/openresty/nginx/logs/nginx.pid\"\n  nginx error log file: \"/usr/local/openresty/nginx/logs/error.log\"\n  nginx http access log file: \"/usr/local/openresty/nginx/logs/access.log\"\n  nginx http client request body temporary files: \"client_body_temp\"\n  nginx http proxy temporary files: \"proxy_temp\"\n  nginx http fastcgi temporary files: \"fastcgi_temp\"\n  nginx http uwsgi temporary files: \"uwsgi_temp\"\n  nginx http scgi temporary files: \"scgi_temp\"\n  cd ../..\n  Type the following commands to build and install:\n   make\n   make install\n. ",
    "ZoomQuiet": "ps:\n- pcre had install by brew\n- try http://agentzh.org/misc/nginx/ngx_openresty-1.0.11.19.tar.gz same error ;-(\n. sorry base:\nIssue #3: ngx_openresty-1.10.24 does not build under OSX \u00b7 agentzh/ngx_openresty\nhttps://github.com/agentzh/ngx_openresty/issues/3\nfixed!\n$ /usr/local/openresty/nginx/sbin/nginx -V\nnginx: nginx version: ngx_openresty/1.0.10.48\nnginx: built by gcc 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.1.00)\nnginx: TLS SNI support enabled\nnginx: configure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt=-I/usr/local/Cellar/pcre/8.21/include --add-module=../ngx_devel_kit-0.2.17 --add-module=../iconv-nginx-module-0.10rc5 --add-module=../echo-nginx-module-0.38rc1 --add-module=../xss-nginx-module-0.03rc8 --add-module=../set-misc-nginx-module-0.22rc5 --add-module=../form-input-nginx-module-0.07rc5 --add-module=../encrypted-session-nginx-module-0.02 --add-module=../ngx_lua-0.4.1 --add-module=../headers-more-nginx-module-0.17rc1 --add-module=../srcache-nginx-module-0.13rc3 --add-module=../array-var-nginx-module-0.03rc1 --add-module=../memc-nginx-module-0.13rc3 --add-module=../redis2-nginx-module-0.08rc2 --add-module=../upstream-keepalive-nginx-module-0.7 --add-module=../auth-request-nginx-module-0.2 --add-module=../rds-json-nginx-module-0.12rc7 --add-module=../rds-csv-nginx-module-0.04 --with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/Cellar/pcre/8.21/lib' --with-http_ssl_module\nvery suggest upgrade Tiddlywiki -> install\n. ",
    "damajor": "It is not urgent at all. Have a nice trip :)\n. It is ok.\nmake bundle => ok\nextract bundle => ok\nconfig bundle => ok\nglobal make => ok\n. ",
    "liujianping": "thanks, I'm using ngx_openresty-1.0.15.10.tar.gz . \n. ",
    "higkoo": "I've custom the path, see the same error.\nHave a try:\n resty --nginx /usr/sbin/openresty -e 'ngx.say(\"hello\")'. ",
    "leafo": "I'm using Luasocket for mime and socket.url.  Mime happens to be written in C and uses the old openlib function.\nI also wanted to see if I could use luasocket.http.request to make http requests with ngx.socket.tcp, but that doesn't appear to work. (Is it better to make http requewsts with proxy_pass or ngx.socket.tcp?)\nIn any case, I built with luajit and it seems like it allows openlib by default.\n. Ah, thanks for the information. I need https support so I'll use ngx_proxy for now.\n. ",
    "bearnard": "@agentzh will do, heh! this has been a long time coming :) Thanks\n. ",
    "chenyin": "the explain is very elaborate \nthanks\n. ",
    "lgcmmail": "thanks\uff01\n. ",
    "aaronkingdom": "thanks very much\uff0c \u6211\u4e5f\u9047\u5230\u4e00\u4e2a\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u767e\u5ea6\uff0c\u8c37\u6b4c\u65e0\u679c\uff0c \u6700\u540e\u8fd8\u662f\u627e\u5230\u8fd9\u91cc\u89e3\u51b3\u4e86\uff0c\u54c8\u54c8\u54c8\u3002 \u8fd9\u51e0\u5929\u996d\u90fd\u5403\u7684\u9999\u4e86\u3002  \u819c\u62dc\u5927\u795e\u4e2d\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01. \u4ecechrome\u6216\u8005firefox\u4e2d\u7684network\u53ef\u4ee5\u67e5\u770bcss js\u90fd\u4f1a\u91cd\u590d\uff0c \u800c\u4e14\u5f88\u8be1\u5f02\uff0c \u5185\u5bb9\u4e00\u6837\u3002 \u5927\u5c0f\u4e0d\u4e00\u6837\uff0c \u538b\u7f29\u7684\u95ee\u9898\uff1f\uff1f\uff1f. ok, thanks. but how to do the replace in this case?????????. yes,   will do the multiple times for all the data chunks, but in the\nngx.arg[2], just onetime, right?????   if i dont use ngx.re.gsub,\neverything is ok...       how can i replace the body if not use the\n\"body_filter_by_lua\" ??   the document is no more information let me know\nto resolve this problem , thank you\nYichun Zhang notifications@github.com \u4e8e2018\u5e749\u670814\u65e5\u5468\u4e94 \u4e0a\u53484:43\u5199\u9053\uff1a\n\n@aaronkingdom https://github.com/aaronkingdom Please, do not use\nChinese here. This place is considered English only. If you really want to\nuse Chinese, please join and post to the openresty (Chinese) mailing list\ninstead. Please see https://openresty.org/en/community.html Thanks for\nyour cooperation.\nRegarding to your issue, you are using the body filter in the wrong\nway. A body filter can be invoked for multiple times for all the data\nchunks in a single response body. To quote the relevant official\ndocumentation:\nNginx output filters may be called multiple times for a single request\nbecause response body may be delivered in chunks. Thus, the Lua code\nspecified by in this directive may also run multiple times in the lifetime\nof a single HTTP request.\nSee https://github.com/orinc/lua-nginx-module-plus#body_filter_by_lua for\nmore details.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/openresty/openresty/issues/402#issuecomment-421146494,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMumX1jGqYvZGoEYvh-M0jU7uWHtFLIeks5uasOCgaJpZM4Wnsd0\n.\n. \n",
    "LazyZhu": "Thanks, I tested and the issue has been fixed :)\n. Look like just need comment the [http_auth_request => 'auth-request-nginx-module'], line in configure  file will do the trick. :)\nThanks any way and need comment related lines in mirror-tarballs too.\n. I need cross compiling gdb for target device to get that?\nOK, to be continued ...\n. I got the log, is this what you need?\nhttps://gist.github.com/LazyZhu/ae6dbdfed1a3fb1a1da9 \n. @agentzh  I followed your suggensts and updated gist.\nhttps://gist.github.com/LazyZhu/ae6dbdfed1a3fb1a1da9/\n. @agentzh Ok.\ncrosstool-ng has CT_LIBC_UCLIBC_DEBUG_LEVEL for this, to be continued ...\n. ",
    "cloudaice": "thank you very much \u3002I know make with -j option will spawn parallel job as many as possible . it can make ti runs more faster . while i built other software with -j ,it aways ok \u3002Now I realize it is a bad habit .  thanks for your advice!!!\n. ",
    "forhappy": "hi, I have made a lua binding for apache zookeeper(zklua), which may be useful to this answer I think. for more detail go to: https://github.com/forhappy/zklua , any advices about zklua are appreciated, I hope I can help too ;-).\n. I did not use ngx_lua's cosocket API right now in zklua, as it's a general-purpose lua binding of apache zookeeper ;-) But zklua provides asynchronous APIs connecting zookeeper(based on zookeeper asynchronous C API, simulated by multithread mechanism), I'm new to ngx_lua and I wonder if the asynchronous API would block the nginx worker process on network I/O, because zookeeper C API use native TCP sockets connecting to zookeeper server.\n. I'll look into the ngx_lua's cosocket API to see if I can make a project lua-resty-zookeeper later ;-).\n. ",
    "antonrubtsov": "Hello!\nIs this issue in alive? :)\nBest regards,\nAnton\n. ",
    "Kooper": "Hello,\nI'm also interested in such library to be included into openresty.\n. ",
    "guanhui07": "that is very nice. \n. oh\n. ",
    "xbsura": "In fact, when using async api of zklua, when nginx worker start dealing with request, this driver will make nginx worker crash\nWe need lua-resty-zookeeper...\n. If nginx worker crashes, i think the process will die and exited, then nginx master will restart a new worker\nIn fact, i have considered this situation, and if nginx worker crashes(core file will be created), everything is ok, as all worker created will go to init_worker_by_lua, with a global lock, a worker will start to sync config\nThe problem is, the pid of nginx worker does not change, but the dead loop exited.\nWhat you mean is, the nginx worker crashes may not exit the process, but just exit the dead loop?\nthanks\n. I am quitely sure the worker not crashes, because:\n1. the pid does not change when the dead loop exited\n2. check the create time of this pid, the time is early than when it exited dead loop\n3. worker crash existed some times, i can see core dump file and after worker restarted, everything is ok\nafter checking nginx error log, some unnormal log is here\neach hour I will send a singal to nginx to cut log, when worker is in dead loop, it can not deal with this singal, but after it exited, this singal can be dealed, so the log is:\n[***** logs]$ grep \"reopen\" error.log.2016031015\n2016/03/10 16:00:01 [notice] 6103#0: signal 10 (SIGUSR1) received, reopening logs\n2016/03/10 16:00:01 [notice] 6103#0: reopening logs\n2016/03/10 16:00:01 [notice] 6104#0: reopening logs\n2016/03/10 16:00:01 [notice] 6105#0: reopening logs\n2016/03/10 16:34:35 [notice] 25930#0: reopening logs\nlook at the last log, the nginx worker 25930 dealed with singal, and at that time, the dead loop exited, but the pid of this process does not change\nI will open debug log, and check again, this is not a easy job, as not all dead loop will exit, and i can not make it happen offline, i have to open all nginx debug log online, and wait for it ...\n. The loop is not in timer handler, I directly use dead loop in init_worker_by_lua\nOne question, if my worker just blocked in somewhere, will it deal with request?\nIf the dead loop does not exit, i think this worker will never become a normal worker which can deal with http request, and another thing, when the loop running, I check the process, its name is nginx master, but after it started to deal with http request, its name become nginx worker, i dont know whether this can tell me the loop exit.\nWhat I want to do is try to make this worker stay in init_worker_by_lua, and never exit, never dealing with http request, just do config sync.\nYes, I tried use something as \"lua-resty-upstream-healthcheck\", the problem is, if I use nginx.timer, some http request cost much more time than normal, in ab test, the qps of nginx become smaller, and the longest spend time from 16ms to 2000ms, I can not accept this cost.\n. Ok, i will try to solve the crash problem\nI used a third so to communicate with zookeeper, named zklua, this driver may core\nthanks, I will use debug log first\n. thanks for your reply first.\nOk, I know what do you mean\nBut not all nginx worker need to deal http request, yes? Even the 3rd driver block this worker which need not to deal with http request, I dont think this is a very bad problem\nOf course, nonblocking client with nginx.timer, and all nginx worker is the same, is a good way to solve question, but with nonblocking clients, I have to code a lot of callback function which is not so beautiful.\nI mean, maybe I can create 3 nginx workers, 2 workers for dealing with http request, 1 worker for syncing config, the 2 of them should use nonblocking operation, and the sync worker can use evething including blocking client or other thing which may cost/block a lot of time.\nIf I edit my code as what you said, the problem may be solves, but I still dont know why the dead loop exit, with the worker not core.\nToday I will change nginx log from notice to debug, trying to find some other reason, I will reply to you if anything useful found.\nthanks.\n. That's Why I use dead loop in init_worker_by_lua*, if the worker stay in this stage, it will not deal with http request forever\nI just want a backend worker to so dome extra job, but not dealing with http request, without blocking any request.\n. @agentzh with debug log, I find that what you said is right, the loop is still running, but at the same time, it start dealing with http request, I dont know why\nIt seems that when such log appears, the worker start to deal with http request or deal signal, at the same time, the loop is still running, but it seems that the loop can be interruptted by http request\n2016/03/15 17:04:21 [info] 4344#0: epoll_wait() failed (4: Interrupted system call)\nThanks\n. @agentzh Another problem, after this worker start to deal with http request, then it may crash, and may keep crashing and such log printed\n2016/03/15 18:59:16 [alert] 4082#0: worker process 4951 exited on signal 11 (core dumped)\n2016/03/15 18:59:16 [alert] 4082#0: shared memory zone \"ufc\" was locked by 4951\n2016/03/15 18:59:19 [alert] 4082#0: worker process 5121 exited on signal 11 (core dumped)\n2016/03/15 18:59:19 [alert] 4082#0: shared memory zone \"ufc\" was locked by 5121\n2016/03/15 18:59:22 [alert] 4082#0: worker process 5228 exited on signal 11 (core dumped)\n2016/03/15 18:59:22 [alert] 4082#0: shared memory zone \"ufc\" was locked by 5228\n2016/03/15 18:59:26 [alert] 4082#0: worker process 5240 exited on signal 11 (core dumped)\n2016/03/15 18:59:26 [alert] 4082#0: shared memory zone \"ufc\" was locked by 5240\n2016/03/15 18:59:30 [alert] 4082#0: worker process 5377 exited on signal 11 (core dumped)\n2016/03/15 18:59:30 [alert] 4082#0: shared memory zone \"ufc\" was locked by 5377\n2016/03/15 18:59:33 [alert] 4082#0: worker process 5449 exited on signal 11 (core dumped)\n2016/03/15 18:59:33 [alert] 4082#0: shared memory zone \"ufc\" was locked by 5449\n2016/03/15 18:59:37 [alert] 4082#0: worker process 6731 exited on signal 11 (core dumped)\n2016/03/15 18:59:37 [alert] 4082#0: shared memory zone \"ufc\" was locked by 6731\n2016/03/15 18:59:41 [alert] 4082#0: worker process 6916 exited on signal 11 (core dumped)\n2016/03/15 18:59:41 [alert] 4082#0: shared memory zone \"ufc\" was locked by 6916\n2016/03/15 18:59:44 [alert] 4082#0: worker process 6980 exited on signal 11 (core dumped)\n2016/03/15 18:59:44 [alert] 4082#0: shared memory zone \"ufc\" was locked by 6980\n2016/03/15 18:59:48 [alert] 4082#0: worker process 7028 exited on signal 11 (core dumped)\n2016/03/15 18:59:48 [alert] 4082#0: shared memory zone \"ufc\" was locked by 7028\n2016/03/15 18:59:53 [alert] 4082#0: worker process 7410 exited on signal 11 (core dumped)\n2016/03/15 18:59:53 [alert] 4082#0: shared memory zone \"ufc\" was locked by 7410\n2016/03/15 18:59:57 [alert] 4082#0: worker process 7495 exited on signal 11 (core dumped)\n2016/03/15 18:59:57 [alert] 4082#0: shared memory zone \"ufc\" was locked by 7495\n2016/03/15 19:00:01 [alert] 4082#0: worker process 7663 exited on signal 11 (core dumped)\n2016/03/15 19:00:01 [alert] 4082#0: shared memory zone \"ufc\" was locked by 7663\nOk, I give up, I will use nginx.timer and noblocking client to restruct my code\nthanks\n. I tried to use nginx upstream, upstream_addr is ok, but after using set_current_peer, it always print the last ip and port\nMaybe it's a bug of balancer module\n@agentzh \nthanks.\n. ok, i will try to solve it\nBTW, I have a patch which can support set timeout for each http request, used as\nbalancer.set_current_peer(host, port)\nbalancer.set_peer_timeout({\"connect_timeout\":1000, \"read_timeout\":3000, \"send_timeout\":3000})\nDo you think this patch is reasonable to provide?\n. @agentzh \nI will provide a patch for this issue later\nThe cause is easy, the name of peer is a pointer, this pointer changed every time useing set_current_peer.\nIn origin nginx, each peer has its own struct, and the name is stable, but in balancer module, this name is not stable.\n. @agentzh \nthanks for your reply\nanother question, the balancer module \"get_last_failure\" method will return \"failed\" if a backend returned http code 502, maybe this 502 is just because the request deal error, it does not mean this backend is \"real bad\", so why even backend returned http code but get_last_failure still return failed?\nthanks\n. @agentzh \nwhat i mean is, as the document said, get_last_failure just return \"failed\" when \"like connection timeouts, connection resets, and etc\", but in fact, if the backend is healthy and just returned \"http code 502\", get_last_failure still return \"failed\", and I dont know why\nthanks\n. ",
    "IngoS11": "Hi guys,\nI have started to build a lua-resty-zookeeper library and by lots of digging into lua-resty-mysql and lua-resty-kafka libraries I can query a zookeeper server (exists, get_data, get_children). The rest of the api should not be much of a problem. Where I struggle now is in understanding how the concepts of zookeeper and the cosocket can fit together well. A zookeeper client basically establishes a permanent connection to one zookeeper server in a zookeeper cluster and keeps it open. The client can not only read or write data to and from what zookeeper calls a znode (think folder/file like thing), but it can also place watches for changes. In case of a change the server notifies everyone that placed a watch. I am now wondering how such a permanent connection would fit with the cosocket idea of pooling connections, respectively with nginx all together. Any suggestion is very much appreciated.\n. Thanks for the feedback. I have read up on ngx.thread.spawn and played around with it and I believe I do not fully understand it. I am very new to lua but based on how I read the docu I try the following.\n```\nlocal function _recv_packet()\nwhile self.state >= STATES.CONNECTING do \n      data, err = sock:receive(4) -- get packet header\n      if not data then\n        if err then\n            self.state = STATES.DISCONNECTED\n            break\n        end\n      end\n  local len, pos = _get_byte4(data, 1)\n  data, err = sock:receive(len)\n  if not data then\n      if err then\n        self.state = STATES.DISCONNECTED\n        break\n      end\n  end\n\n  _dumphex(data)\n\nend\nend\nlocal function _send_packet(req)\nlocal size = #req\n  local packet = _str_byte4(size) .. req\nlocal bytes, err = sock:send(packet)\nend\nif not ok then\n  return nil, err\nend\n....\nngx.thread.spawn(_recv_packet, self)\nngx.thread.spawn(_send_packet, self, request_msg)\n```\ninstead of\n```\nok, err = sock:connect(host, port)\nif not ok then\n  return nil, err\nend\n....\nlocal bytes, err = sock:send(request_msg)\ndata, err = sock:receive(4)\nlocal len, pos = _get_byte4(data, 1)\ndata, err = sock:receive(len)\n```\nwithout light thread all works perfectly fine. With the threads I never receive anything.\n. Thanks again. It was for sure not my intention to have you debug my code :). I was more wondering if this is the right approach I am taking as I cannot find any examples or library on the web that does full duplex communication. I head over to the community.\n. ",
    "bplotnick": "Hey @IngoS11, were you able to get a working implementation? I'd be quite interested to see what you have either way and try to lend a hand if need be.\n. ",
    "ycn": "After enabled the debuggin_log, you can see that uwsgi response is 200 in the error.log as follows.\n\n2013/04/03 16:24:50 [debug] 21090#0: _7 http cl:-1 max:1048576\n2013/04/03 16:24:50 [debug] 21090#0: *7 rewrite phase: 3\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua rewrite handler, uri:\"/api/logs/adf_log\" c:1\n2013/04/03 16:24:50 [debug] 21090#0: *7 rewrite phase: 3\n2013/04/03 16:24:50 [debug] 21090#0: *7 rewrite phase: 4\n2013/04/03 16:24:50 [debug] 21090#0: *7 rewrite phase: 5\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua rewrite handler, uri:\"/api/logs/adf_log\" c:1\n2013/04/03 16:24:50 [debug] 21090#0: *7 post rewrite phase: 6\n2013/04/03 16:24:50 [debug] 21090#0: *7 generic phase: 7\n2013/04/03 16:24:50 [debug] 21090#0: *7 generic phase: 8\n2013/04/03 16:24:50 [debug] 21090#0: *7 access phase: 9\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua access handler, uri:\"/api/logs/adf_log\" c:1\n2013/04/03 16:24:50 [debug] 21090#0: *7 access phase: 9\n2013/04/03 16:24:50 [debug] 21090#0: *7 access phase: 10\n2013/04/03 16:24:50 [debug] 21090#0: *7 access phase: 11\n2013/04/03 16:24:50 [debug] 21090#0: *7 access phase: 12\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua access handler, uri:\"/api/logs/adf_log\" c:1\n2013/04/03 16:24:50 [debug] 21090#0: *7 post access phase: 13\n2013/04/03 16:24:50 [debug] 21090#0: *7 http init upstream, client timer: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 epoll add event: fd:3 op:3 ev:80000005\n2013/04/03 16:24:50 [debug] 21090#0: *7 posix_memalign: 0000000001BBD980:4096 @16\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"QUERY_STRING\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"QUERY_STRING: \"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"REQUEST_METHOD\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"GET\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"REQUEST_METHOD: GET\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"CONTENT_TYPE\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"CONTENT_TYPE: \"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"CONTENT_LENGTH\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"CONTENT_LENGTH: \"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"REQUEST_URI\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"/api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"REQUEST_URI: /api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"PATH_INFO\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"/api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"PATH_INFO: /api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"DOCUMENT_ROOT\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"/php\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"DOCUMENT_ROOT: /php\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"SERVER_PROTOCOL\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"HTTP/1.1\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"SERVER_PROTOCOL: HTTP/1.1\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"REMOTE_ADDR\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"192.168.137.1\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"REMOTE_ADDR: 192.168.137.1\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"REMOTE_PORT\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"51754\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"REMOTE_PORT: 51754\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"SERVER_PORT\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"80\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"SERVER_PORT: 80\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script copy: \"SERVER_NAME\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http script var: \"local.com\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"SERVER_NAME: local.com\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"HTTP_USER_AGENT: curl/7.28.1\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"HTTP_HOST: 192.168.137.128\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 uwsgi param: \"HTTP_ACCEPT: */_\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http cleanup add: 0000000001BBDBC0\n2013/04/03 16:24:50 [debug] 21090#0: *7 get rr peer, try: 1\n2013/04/03 16:24:50 [debug] 21090#0: *7 socket 10\n2013/04/03 16:24:50 [debug] 21090#0: *7 epoll add connection: fd:10 ev:80000005\n2013/04/03 16:24:50 [debug] 21090#0: *7 connect to 127.0.0.1:3031, fd:10 #8\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream connect: -2\n2013/04/03 16:24:50 [debug] 21090#0: *7 posix_memalign: 0000000001BC3CD0:128 @16\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer add: 10: 60000:1364977550759\n2013/04/03 16:24:50 [debug] 21090#0: *7 http finalize request: -4, \"/api/logs/adf_log?\" a:1, c:2\n2013/04/03 16:24:50 [debug] 21090#0: *7 http request count:2 blk:0\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BDE390\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BDE3F8\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BDE3F8\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream request: \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream send request handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream send request\n2013/04/03 16:24:50 [debug] 21090#0: *7 chain writer buf fl:0 s:350\n2013/04/03 16:24:50 [debug] 21090#0: *7 chain writer in: 0000000001BBDBF8\n2013/04/03 16:24:50 [debug] 21090#0: *7 writev: 350\n2013/04/03 16:24:50 [debug] 21090#0: *7 chain writer out: 0000000000000000\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer del: 10: 1364977550759\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer add: 10: 60000:1364977550760\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BDE390\n2013/04/03 16:24:50 [debug] 21090#0: *7 http run request: \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream check client, write event:1, \"/api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream recv(): -1 (11: Resource temporarily unavailable)\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BC6EF8\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BDE3F8\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BDE3F8\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream request: \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream dummy handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BC6EF8\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream request: \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream process header\n2013/04/03 16:24:50 [debug] 21090#0: *7 malloc: 0000000001BDA5D0:4096\n2013/04/03 16:24:50 [debug] 21090#0: *7 recv: fd:10 80 of 4096\n2013/04/03 16:24:50 [debug] 21090#0: *7 http uwsgi status 200 \"200 OK\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http uwsgi header: \"Content-Type: text/html; charset=utf-8\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http uwsgi header: \"Content-Length: 2\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http uwsgi header done\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua capture header filter, uri \"/api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 HTTP/1.1 200 OK\nServer: ngx_openresty/1.2.6.6\nDate: Wed, 03 Apr 2013 08:24:50 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 2\nConnection: keep-alive\n\n2013/04/03 16:24:50 [debug] 21090#0: *7 write new buf t:1 f:0 0000000001BBDE40, pos 0000000001BBDE40, size: 170 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 http write filter: l:0 f:0 s:170\n2013/04/03 16:24:50 [debug] 21090#0: *7 http cacheable: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream process upstream\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe read upstream: 1\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe preread: 2\n2013/04/03 16:24:50 [debug] 21090#0: *7 readv: 1:4016\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe recv chain: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe buf free s:0 t:1 f:0 0000000001BDA5D0, pos 0000000001BDA61E, size: 2 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe length: -1\n2013/04/03 16:24:50 [debug] 21090#0: *7 input buf #0\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe write downstream: 1\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe write downstream flush in\n2013/04/03 16:24:50 [debug] 21090#0: *7 http output filter \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http copy filter: \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua capture body filter, uri \"/api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http postpone filter \"/api/logs/adf_log?\" 0000000001BBE068\n2013/04/03 16:24:50 [debug] 21090#0: *7 write old buf t:1 f:0 0000000001BBDE40, pos 0000000001BBDE40, size: 170 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 write new buf t:1 f:0 0000000001BDA5D0, pos 0000000001BDA61E, size: 2 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 http write filter: l:0 f:0 s:172\n2013/04/03 16:24:50 [debug] 21090#0: *7 http copy filter: 0 \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 pipe write downstream done\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer: 10, old: 1364977550760, new: 1364977550780\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream exit: 0000000000000000\n2013/04/03 16:24:50 [debug] 21090#0: *7 finalize http upstream request: 502\n2013/04/03 16:24:50 [debug] 21090#0: *7 finalize http uwsgi request\n2013/04/03 16:24:50 [debug] 21090#0: *7 free rr peer 1 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 close http upstream connection: 10\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BC3CD0, unused: 48\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer del: 10: 1364977550760\n2013/04/03 16:24:50 [debug] 21090#0: *7 reusable connection: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 http upstream temp fd: -1\n2013/04/03 16:24:50 [debug] 21090#0: *7 http output filter \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http copy filter: \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 lua capture body filter, uri \"/api/logs/adf_log\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http postpone filter \"/api/logs/adf_log?\" 00007FFF9B149550\n2013/04/03 16:24:50 [debug] 21090#0: *7 write old buf t:1 f:0 0000000001BBDE40, pos 0000000001BBDE40, size: 170 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 write old buf t:1 f:0 0000000001BDA5D0, pos 0000000001BDA61E, size: 2 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 write new buf t:0 f:0 0000000000000000, pos 0000000000000000, size: 0 file: 0, size: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 http write filter: l:1 f:0 s:172\n2013/04/03 16:24:50 [debug] 21090#0: *7 http write filter limit 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 writev: 172\n2013/04/03 16:24:50 [debug] 21090#0: *7 http write filter 0000000000000000\n2013/04/03 16:24:50 [debug] 21090#0: *7 http copy filter: 0 \"/api/logs/adf_log?\"\n2013/04/03 16:24:50 [debug] 21090#0: *7 http finalize request: 0, \"/api/logs/adf_log?\" a:1, c:1\n2013/04/03 16:24:50 [debug] 21090#0: *7 set http keepalive handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 http close request\n2013/04/03 16:24:50 [debug] 21090#0: *7 http log handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BDA5D0\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BBC970, unused: 8\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BBD980, unused: 1895\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer add: 3: 65000:1364977555780\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BC32C0\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BC38C0\n2013/04/03 16:24:50 [debug] 21090#0: *7 hc free: 0000000000000000 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 hc busy: 0000000000000000 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 tcp_nodelay\n2013/04/03 16:24:50 [debug] 21090#0: *7 reusable connection: 1\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BC6E90\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BC6E90\n2013/04/03 16:24:50 [debug] 21090#0: *7 http keepalive handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 malloc: 0000000001BC32C0:1024\n2013/04/03 16:24:50 [debug] 21090#0: *7 recv: fd:3 -1 of 1024\n2013/04/03 16:24:50 [debug] 21090#0: *7 recv() not ready (11: Resource temporarily unavailable)\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BC32C0\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BC6E90\n2013/04/03 16:24:50 [debug] 21090#0: *7 post event 0000000001BDE390\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BDE390\n2013/04/03 16:24:50 [debug] 21090#0: *7 http empty handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 delete posted event 0000000001BC6E90\n2013/04/03 16:24:50 [debug] 21090#0: *7 http keepalive handler\n2013/04/03 16:24:50 [debug] 21090#0: *7 malloc: 0000000001BC32C0:1024\n2013/04/03 16:24:50 [debug] 21090#0: *7 recv: fd:3 0 of 1024\n2013/04/03 16:24:50 [info] 21090#0: *7 client 192.168.137.1 closed keepalive connection\n2013/04/03 16:24:50 [debug] 21090#0: *7 close http connection: 3\n2013/04/03 16:24:50 [debug] 21090#0: *7 event timer del: 3: 1364977555780\n2013/04/03 16:24:50 [debug] 21090#0: *7 reusable connection: 0\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BC32C0\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000000000000\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BBA5F0, unused: 8\n2013/04/03 16:24:50 [debug] 21090#0: *7 free: 0000000001BC37B0, unused: 112\n\n\n \n. I'm afraid that the patch does slove the problem, but something else is wrong :(\nCRUL output:\n\n$ curl -v \"http://192.168.137.128/api/logs/adf_log\"\n* About to connect() to 192.168.137.128 port 80 (#0)\n*   Trying 192.168.137.128...\n* connected\n* Connected to 192.168.137.128 (192.168.137.128) port 80 (#0)\n> GET /api/logs/adf_log HTTP/1.1\n> User-Agent: curl/7.28.1\n> Host: 192.168.137.128\n> Accept: */*\n>\n* Empty reply from server\n* Connection #0 to host 192.168.137.128 left intact\ncurl: (52) Empty reply from server\n* Closing connection #0\n\nNginx access log:\n\n192.168.137.1 - - [07/Apr/2013:10:26:34 +0800] \"GET /api/logs/adf_log HTTP/1.1\" 200 0 \"-\" \"curl/7.28.1\" \"-\" 0.005 0.005\n\nNginx debugging log:\n\n2013/04/07 10:26:34 [debug] 13895#0: *3 http cl:-1 max:1048576\n2013/04/07 10:26:34 [debug] 13895#0: *3 rewrite phase: 3\n2013/04/07 10:26:34 [debug] 13895#0: *3 rewrite phase: 4\n2013/04/07 10:26:34 [debug] 13895#0: *3 rewrite phase: 5\n2013/04/07 10:26:34 [debug] 13895#0: *3 lua rewrite handler, uri:\"/api/logs/adf_log\" c:1\n2013/04/07 10:26:34 [debug] 13895#0: *3 post rewrite phase: 6\n2013/04/07 10:26:34 [debug] 13895#0: *3 generic phase: 7\n2013/04/07 10:26:34 [debug] 13895#0: *3 generic phase: 8\n2013/04/07 10:26:34 [debug] 13895#0: *3 access phase: 9\n2013/04/07 10:26:34 [debug] 13895#0: *3 access phase: 10\n2013/04/07 10:26:34 [debug] 13895#0: *3 access phase: 11\n2013/04/07 10:26:34 [debug] 13895#0: *3 access phase: 12\n2013/04/07 10:26:34 [debug] 13895#0: *3 lua access handler, uri:\"/api/logs/adf_log\" c:1\n2013/04/07 10:26:34 [debug] 13895#0: *3 post access phase: 13\n2013/04/07 10:26:34 [debug] 13895#0: *3 try files phase: 14\n2013/04/07 10:26:34 [debug] 13895#0: *3 http init upstream, client timer: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 epoll add event: fd:15 op:3 ev:80000005\n2013/04/07 10:26:34 [debug] 13895#0: *3 posix_memalign: 000000000198B2E0:4096 @16\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"QUERY_STRING\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"QUERY_STRING: \"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"REQUEST_METHOD\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"GET\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"REQUEST_METHOD: GET\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"CONTENT_TYPE\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"CONTENT_TYPE: \"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"CONTENT_LENGTH\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"CONTENT_LENGTH: \"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"REQUEST_URI\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"/api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"REQUEST_URI: /api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"PATH_INFO\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"/api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"PATH_INFO: /api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"DOCUMENT_ROOT\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"/php\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"DOCUMENT_ROOT: /php\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"SERVER_PROTOCOL\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"HTTP/1.1\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"SERVER_PROTOCOL: HTTP/1.1\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"REMOTE_ADDR\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"192.168.137.1\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"REMOTE_ADDR: 192.168.137.1\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"REMOTE_PORT\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"52923\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"REMOTE_PORT: 52923\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"SERVER_PORT\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"80\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"SERVER_PORT: 80\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script copy: \"SERVER_NAME\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http script var: \"local.com\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"SERVER_NAME: local.com\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"HTTP_USER_AGENT: curl/7.28.1\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"HTTP_HOST: 192.168.137.128\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 uwsgi param: \"HTTP_ACCEPT: */*\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http cleanup add: 000000000198B528\n2013/04/07 10:26:34 [debug] 13895#0: *3 get rr peer, try: 1\n2013/04/07 10:26:34 [debug] 13895#0: *3 socket 16\n2013/04/07 10:26:34 [debug] 13895#0: *3 epoll add connection: fd:16 ev:80000005\n2013/04/07 10:26:34 [debug] 13895#0: *3 connect to 127.0.0.1:3031, fd:16 #4\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream connect: -2\n2013/04/07 10:26:34 [debug] 13895#0: *3 posix_memalign: 0000000001978E30:128 @16\n2013/04/07 10:26:34 [debug] 13895#0: *3 event timer add: 16: 60000:1365301654729\n2013/04/07 10:26:34 [debug] 13895#0: *3 http finalize request: -4, \"/api/logs/adf_log?\" a:1, c:2\n2013/04/07 10:26:34 [debug] 13895#0: *3 http request count:2 blk:0\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 00000000019AE320\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream send request handler\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream send request\n2013/04/07 10:26:34 [debug] 13895#0: *3 chain writer buf fl:0 s:350\n2013/04/07 10:26:34 [debug] 13895#0: *3 chain writer in: 000000000198B560\n2013/04/07 10:26:34 [debug] 13895#0: *3 writev: 350\n2013/04/07 10:26:34 [debug] 13895#0: *3 chain writer out: 0000000000000000\n2013/04/07 10:26:34 [debug] 13895#0: *3 event timer del: 16: 1365301654729\n2013/04/07 10:26:34 [debug] 13895#0: *3 event timer add: 16: 60000:1365301654729\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 00000000019AE320\n2013/04/07 10:26:34 [debug] 13895#0: *3 http run request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream check client, write event:1, \"/api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream recv(): -1 (11: Resource temporarily unavailable)\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 000000000199AB78\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream dummy handler\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 000000000199AB78\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream process header\n2013/04/07 10:26:34 [debug] 13895#0: *3 malloc: 000000000196E5E0:4096\n2013/04/07 10:26:34 [debug] 13895#0: *3 recv: fd:16 78 of 4096\n2013/04/07 10:26:34 [debug] 13895#0: *3 http uwsgi status 200 \"200 OK\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http uwsgi header: \"Content-Type: text/html; charset=utf-8\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http uwsgi header: \"Content-Length: 2\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http uwsgi header done\n2013/04/07 10:26:34 [debug] 13895#0: *3 lua capture header filter, uri \"/api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 HTTP/1.1 200 OK\nServer: ngx_openresty/1.2.7.5rc2\nDate: Sun, 07 Apr 2013 02:26:34 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 2\nConnection: keep-alive\n2013/04/07 10:26:34 [debug] 13895#0: *3 write new buf t:1 f:0 000000000198B7A8, pos 000000000198B7A8, size: 173 file: 0, size: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 http write filter: l:0 f:0 s:173\n2013/04/07 10:26:34 [debug] 13895#0: *3 http cacheable: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream process upstream\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe read upstream: 1\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe preread: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 readv: 1:4018\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe recv chain: 2\n2013/04/07 10:26:34 [debug] 13895#0: *3 readv: 1:4016\n2013/04/07 10:26:34 [debug] 13895#0: *3 readv() not ready (11: Resource temporarily unavailable)\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe recv chain: -2\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe buf free s:0 t:1 f:0 000000000196E5E0, pos 000000000196E62E, size: 2 file: 0, size: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe length: -1\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe write downstream: 1\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe write busy: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe write: out:0000000000000000, f:0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe read upstream: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe buf free s:0 t:1 f:0 000000000196E5E0, pos 000000000196E62E, size: 2 file: 0, size: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe length: -1\n2013/04/07 10:26:34 [debug] 13895#0: *3 event timer: 16, old: 1365301654729, new: 1365301654734\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream dummy handler\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 000000000199AB78\n2013/04/07 10:26:34 [debug] 13895#0: *3 post event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 00000000019AE388\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream dummy handler\n2013/04/07 10:26:34 [debug] 13895#0: *3 delete posted event 000000000199AB78\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream process upstream\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe read upstream: 1\n2013/04/07 10:26:34 [debug] 13895#0: *3 readv: 1:4016\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe recv chain: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe buf free s:0 t:1 f:0 000000000196E5E0, pos 000000000196E62E, size: 2 file: 0, size: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe length: -1\n2013/04/07 10:26:34 [debug] 13895#0: *3 input buf #0\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe write downstream: 1\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe write downstream flush in\n2013/04/07 10:26:34 [debug] 13895#0: *3 http output filter \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http copy filter: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 lua capture body filter, uri \"/api/logs/adf_log\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http postpone filter \"/api/logs/adf_log?\" 000000000198B9D0\n2013/04/07 10:26:34 [debug] 13895#0: *3 write old buf t:1 f:0 000000000198B7A8, pos 000000000198B7A8, size: 173 file: 0, size: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 write new buf t:1 f:0 000000000196E5E0, pos 000000000196E62E, size: 2 file: 0, size: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 http write filter: l:0 f:0 s:175\n2013/04/07 10:26:34 [debug] 13895#0: *3 http copy filter: 0 \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 pipe write downstream done\n2013/04/07 10:26:34 [debug] 13895#0: *3 event timer: 16, old: 1365301654729, new: 1365301654734\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream exit: 0000000000000000\n2013/04/07 10:26:34 [debug] 13895#0: *3 finalize http upstream request: -1\n2013/04/07 10:26:34 [debug] 13895#0: *3 finalize http uwsgi request\n2013/04/07 10:26:34 [debug] 13895#0: *3 free rr peer 1 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 close http upstream connection: 16\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 0000000001978E30, unused: 48\n2013/04/07 10:26:34 [debug] 13895#0: *3 event timer del: 16: 1365301654729\n2013/04/07 10:26:34 [debug] 13895#0: *3 reusable connection: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 http upstream temp fd: -1\n2013/04/07 10:26:34 [debug] 13895#0: *3 http finalize request: -1, \"/api/logs/adf_log?\" a:1, c:1\n2013/04/07 10:26:34 [debug] 13895#0: *3 http terminate request count:1\n2013/04/07 10:26:34 [debug] 13895#0: *3 http terminate cleanup count:1 blk:0\n2013/04/07 10:26:34 [debug] 13895#0: *3 http posted request: \"/api/logs/adf_log?\"\n2013/04/07 10:26:34 [debug] 13895#0: *3 http terminate handler count:1\n2013/04/07 10:26:34 [debug] 13895#0: *3 http request count:1 blk:0\n2013/04/07 10:26:34 [debug] 13895#0: *3 http close request\n2013/04/07 10:26:34 [debug] 13895#0: *3 http log handler\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 000000000196E5E0\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 000000000197E2A0, unused: 3\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 000000000198B2E0, unused: 1983\n2013/04/07 10:26:34 [debug] 13895#0: *3 close http connection: 15\n2013/04/07 10:26:34 [debug] 13895#0: *3 reusable connection: 0\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 0000000001978A20\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 0000000001978420\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 0000000001960440, unused: 8\n2013/04/07 10:26:34 [debug] 13895#0: *3 free: 0000000001978910, unused: 112\n\n. Great! The new patch fixed this issue.\nThanks!\n. ",
    "amotl": "The solution to this issue is quite easy by simply doing:\nuwsgi_param REQUEST_METHOD $echo_request_method;\nSee also: http://trac.nginx.org/nginx/ticket/332#comment:1\nThanks Maxim!\n. ",
    "Thomas12": "Sorry, agentzh, I made a mistake and already updated my first post but I think you did not see it as you looked at the email you got from github.\n\nUpdate: Sorry for the confusion, I mixed something up!\nThat compile error happened because I tried --with-ld-opt=\"-static\" which does not seem to work and caused the error above.\nIs there a way to compile the whole ngx_openresty statically, e.g. to use it in a chrooted environment?\n\nIn autoconf.err I found that:\nlj_clib.c:(.text+0x9d): undefined reference to `dlclose'\n/usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib/libluajit-5.1.a(lj_clib.o): In function `clib_error_':\nlj_clib.c:(.text+0xb5): undefined reference to `dlerror'\n/usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib/libluajit-5.1.a(lj_clib.o): In function `lj_clib_load':\nlj_clib.c:(.text+0x1df): undefined reference to `dlopen'\nlj_clib.c:(.text+0x234): undefined reference to `dlerror'\nlj_clib.c:(.text+0x30c): undefined reference to `dlopen'\nlj_clib.c:(.text+0x31d): undefined reference to `dlerror'\n/usr/local/src/ngx_openresty-1.2.7.5/build/luajit-root/usr/local/LAMP/openresty/1.2.7.5/luajit/lib/libluajit-5.1.a(lj_clib.o): In function `lj_clib_index':\nlj_clib.c:(.text+0x49d): undefined reference to `dlsym'\nThank you!\nKind regards,\nThomas\n. Thanks for your reply!\nUnfortunately it does not work with the additional \"-ldl\" - same error regarding luajit.\nI thought to give a static link a try but I think I will try to copy all needed libs into the chroot.\nUnfortunately there is no chroot-module for nginx to just enable chrooting-to-dir in the config-file.\n. Thank you for your support, I tried: \n--with-ld-opt=\"-static -ldl -Wl,-E\"\nand\n--with-ld-opt=\"-static -ldl -Wl -E\"\nboth don't work, still the same error as in my first post :-(\n. Thank you for your answer!\nCould this keep the cosockets consistent? \nwhich, status=multi_cosocket_just_wait(wb, othersocket);\nif(which==0) then data, typ, err = wb:recv_frame() end;\nif(which==1) then data, errt, part = othersocket:receive() end;\nThis function just waits until data is ready but does not actually read it.\nOr does even the ready-signalling make the socket inconsistent, too?\n. Thank you for your answer.\nI could circumvent the need for multi cosocket wait by a message queue.\nHave you plans / ideas for a fast and efficient message queue that doesn't destroy openresty's speed advantage?\nredis has nice features but does not scale well, I've tried latest redis with ngx Lua redis, the problem is that it only works till ~7,000 parallel connects (I even used file-sockets here) above that it can not open more connects (I set and verified ulimit -c 999999 and restarted redis+openresty, also tried redis-benchmark, failed, too, relatively new setup, kernel 3.12). Furthermore I need two sockets (one for send, one for receive) to redis per websocket client for a message exchange which is orders of magnitude slower than other openresty primitives (like ngx.thread or ngx shared dict).\n. Thank you for your suggestions, I increased the connection-limit to 100,000 and increased the backlog as described in redis.conf. I can scale up to 25,000 parallel connects but it starts getting unreliable (few socket errors). \n. Thank you very much for your kind answer! \nYes, the benchmark-trap :-)\nBtw, performance: Can you please tell why the webserver is using processes as workers and not threads?\nThreads would make many things much easier... So there must be a catch with threads, but what is it?\n. ",
    "kireevco": "I used this https://gist.github.com/kireevco/dfd1f82568b37ff95398 to build it on raspberry pi, so would also probably work on debian.\nThere is a deb package for raspberry pi available as well https://bintray.com/kireevco/deb/openresty\n. ",
    "sabaini": "Thanks for your comments, this works for me. However, it still seems strange that Nginx treats the request body as a second pipelined request -- after all, the appropriate request headers (content-length and content-type) are all present. Ie. it should be easy for Nginx to figure out that there's more stuff to read and that the current request has not finished yet.\n. @agentzh Thank you for the fast fix!\n. ",
    "ajayk": "Hope the tests pass :)  , Can you cherry pick these changes https://github.com/ajayk/ngx_openresty/commit/d643b1bc382bd05ff77d9870a940b6888e7a72d1  from the util/mirror-tarballs probably you can change the http://github to https://github  to avoid unnecessary 301\n. ",
    "kidd": "Hi. sorry for the huuuuge delay.   I asked in the nginx list ( http://mailman.nginx.org/pipermail/nginx-devel/2013-October/004468.html ), and they already have a patch for 1.5.x version. If we could add it to openresty and keep it during the 1.4.x lifetime, the patch wouldn't be needed after that so we'd be 'on synch'\nWhat do you think?\n. ",
    "zhaojianping": "Thank you .I forget to close it \n. ",
    "cf2012": "I passed the `--with-ld-opt=\"-ldl\" to openresty's ./configure and got the same error.\n```\n$ tail -20 ngx_openresty-1.4.3.4/build/nginx-1.4.3/objs/autoconf.err\n/run/shm/ngx_openresty-1.4.3.4/build/LuaJIT-2.0.2/src/lj_clib.c:125: undefined reference to dlerror'\n/dev/shm/LuaJIT-2.0.2/lib/libluajit-5.1.a(lj_clib.o): In functionclib_unloadlib':\n/run/shm/ngx_openresty-1.4.3.4/build/LuaJIT-2.0.2/src/lj_clib.c:135: undefined reference to dlclose'\n/dev/shm/LuaJIT-2.0.2/lib/libluajit-5.1.a(lj_clib.o): In functionclib_error_':\n/run/shm/ngx_openresty-1.4.3.4/build/LuaJIT-2.0.2/src/lj_clib.c:37: undefined reference to `dlerror'\ncollect2: ld returned 1 exit status\n\ninclude \ninclude \ninclude \nint main() {\n    (void) luaL_newstate();;\n    return 0;\n}\n\ncc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 \\\n-I /opt/LuaJIT-2.0.2/include/luajit-2.0 \\\n-o objs/autotest objs/autotest.c \\\n-Wl,-rpath,/opt/LuaJIT-2.0.2/lib \\\n-ldl -L/opt/LuaJIT-2.0.2/lib -lluajit-5.1 -lm\n\n```\nI put \"-ldl\"  to the end of line .\n    cc -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -I /opt/LuaJIT-2.0.2/include/luajit-2.0 \\\n    -o objs/autotest objs/autotest.c \\\n    -Wl,-rpath,/opt/LuaJIT-2.0.2/lib  -L/opt/LuaJIT-2.0.2/lib -lluajit-5.1 -lm -ldl\nand it works.\n. ",
    "ai930": "@cf2012   \u80fd\u5e2e\u770b\u4e00\u4e0b\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f\nchecking for LuaJIT library in /usr/local/lib and /usr/local/include/luajit-2.0 (win32) ...\ninclude \ninclude \nint main(void) {\n    #if LUA_VERSION_NUM != 501\nerror unsupported Lua language version\nendif\n(void) luaL_newstate();;\n    return 0;\n}\n/bin/sh -c cl -I/usr/local/include/luajit-2.0 -W3 -DFD_SETSIZE=1024 -I /usr/local/include/luajit-2.0 -o objs/autotest objs/autotest.c -L/usr/local/lib -L/usr/local/lib -llua51 >> objs/autoconf.err 2>&1\n not found\n        ./auto/configure: error: ngx_http_lua_module requires the Lua or LuaJIT library and LUAJIT_LIB is defined as /usr/local/lib and LUAJIT_INC (path for lua.h) /usr/local/include/luajit-2.0, but we cannot find LuaJIT there.. ",
    "mche": "Hello @agentzh ,\nI would like you recomendations. Thank you.\n. close this pull request for new one\n. ",
    "tszming": "Cool, thanks\n. ",
    "edmondchui": "Thanks for the detailed answer!\n. ",
    "neomantra": "Although this doesn't speak to the rc.d or init.d script part of your question, you can pass the arguments -s reload (or quit, stop, etc.) to the nginx binary.\nSee the top of http://nginx.org/en/docs/beginners_guide.html\n. It looks like you do not have a C development environment installed (although you do have make). \nHere's a random Google'd link about it (not nginx-specific, but Centos/RHEL 7 specific):\nhttp://www.cyberciti.biz/faq/centos-rhel-7-redhat-linux-install-gcc-compiler-development-tools/\n. @agentzh  The task is basically creating a Dockerfile.   Would you include the Dockerfile in the OpenResty repo?   Otherwise, one can make another project that, as part of the Docker image build process, downloads the release tarball from openresty.org\nAnother consideration is what \"base\" operating system to use (i.e. the FROM directive).\n. Here's an example Dockerfile using Ubuntu 14.04 as a base:\n```\nFROM ubuntu:trusty\nMAINTAINER OpenResty docker@openresty.org\nENV RESTY_VERSION 1.9.7.3\nDownload and extract the OpenResty release\nADD https://openresty.org/download/openresty-$RESTY_VERSION.tar.gz /tmp/openresty-$RESTY_VERSION.tar.gz\nRUN tar xzf /tmp/openresty-$RESTY_VERSION.tar.gz -C /tmp\nRUN rm /tmp/openresty-$RESTY_VERSION.tar.gz\nWORKDIR /tmp/openresty-$RESTY_VERSION\nInstall dependencies\nRUN apt-get -y update\nRUN DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \\\n        libreadline-dev libncurses5-dev libpcre3-dev \\\n        libssl-dev perl make build-essential\nBuild\nRUN ./configure\nRUN make\nRUN make install\nCleanup\nRUN rm -rf /tmp/openresty-$RESTY_VERSION.tar.gz\n```\nThere are other considerations (like passing custom configure options), but we can grow that.\n. FWIW, the Nginx Dockerfile uses Debian Jessie and install's nginx.org's debian packages.\n. @agentzh   I don't mind being a point of contact, i.e. the MAINTAINER in the Dockerfile. Maybe add me to the OpenResty GitHub organization and we make a project something like openresty-docker under it?  It would be that repo that the Docker registry builds from.\nIn that case, let's stick with Ubuntu for a distro (if somebody wants something different they can fork and we can make other branches)?\nYour suggestions seem reasonable.  Regarding 3, are you suggesting also custom-installing PCRE and OpenSSL in the Dockerfile?\nWith all these options, there's two divergent setups:\n1. somebody just wants to docker pull openresty and have some default openresty that works straight from the official Docker Registry.  The registry also supports tags, so we can make another one like a \"debug\" one\n2. there's somebody who wants to clone the repo, build their custom image with their specific settings, and save that image to their own registry or local machine).  For example, you can make your own debug one -- we can also suggest some good settings for that.  We just need to make entry points to facilitate adding args to ./configure.\nYou are probably more familiar with how people like to configure OpenResty, so whatever you want the defaults to be I'll make it so.\n. Great.   Are these the active versions of those libs? (from the Wiki)\n```\nwget https://www.openssl.org/source/openssl-1.0.2f.tar.gz\ntar -zvxf openssl-1.0.2f.tar.gz\nwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz\ntar -xvf pcre-8.38.tar.gz\n```\nI won't be able to do this properly until next week, but @pataquets has a Dockerfile they can play with.  Any other comments/suggestions are welcome.\n. I just created this repository https://github.com/openresty/docker-openresty\nThe \"build\" aspect of it is all done.  Need to work out the \"run\" aspect.   Once I am happy with that, we can push to Docker Hub.\nI'm going to close this ticket.  Please continue Docker-related discussion in docker-openresty issues.\n. I actually pushed the repos to Docker Hub yesterday.  See:\nhttps://hub.docker.com/r/openresty/openresty\nhttps://github.com/openresty/docker-openresty\nThere is no scaffolding -- it is a base container with OpenResty built in it.  There's a ticket for deciding if/how to expand it (https://github.com/openresty/docker-openresty/issues/2).\n. You might be able to get it to work if you rename bit32 to bit.\nMaybe you can do this with the LuaJIT FFI?  \nlocal ffi = require 'ffi'\nffi.cdef('int kill(pid_t pid, int sig);')\nlocal SIGHUP = 1  -- make sure this matches your platform\nC.kill(ngx.var.pid, SIGHUP)\n. If you have a Docker container based on either alpine:3.8, ubuntu:bionic, or ubuntu:xenial, then you should be able to build OpenResty from source using the commands in the RUN stanzas of the Dockerfiles here:\nhttps://github.com/openresty/docker-openresty\nIf that doesn't work, I can try to help diagnose.. This is probably an aspect of the Docker storage driver you are using. Which one are you using? Use docker info to find out. \nPerhaps you can try using Docker volumes to map the logs to local storage. \nThe \"official\" OpenResty Docker images take a different approach, mapping the access and error files to stdout/stderr so they go through the Docker logging system. This is the same approach the official Nginx images use. . docker-openresty follows official OpenResty releases... and the latest is 1.11.2.5... which tracks nginx 1.11.2.   There will be a newer release soon, see #305.   The docker tooling will be updated when that happens.. Your resolver is 8.8.8.8, but you want to resolve a local address.  Nginx uses its own resolver and doesn't check /etc/hosts or /etc/resolv.conf.   See #298 for links and debugging techniques.. apk is the Alpine package manager so it won\u2019t work on other distros.  For Centos you must use yum and for Debian variants you must use apt. . You are trying to run the Alpine Package Manager (Step 3/7 : RUN apk add --no-cache openssl-dev) in a Centos container (Step 1/7 : FROM openresty/openresty:centos).  That will not work because Centos doesn't use apk, it uses yum. \nI'm not too familiar with OpenResty on Centos, but maybe what you want to do is yum install openresty-openssl-debug.   See http://openresty.org/en/rpm-packages.html\n. @chandanmaheshwari this is not a support channel, it is for issues.\nYou might not get an answer, but you will have a broader audience on the mailing list: \nhttps://groups.google.com/forum/#!forum/openresty-en\nBut I had difficulties with dynamic load balancing and for my purposes could use Kong, which is based on OpenResty.\n. Can you include how you are running this, especially since you are including other service dependencies.  From the other issues, you seem to be using docker-compose, which is great for sharing.  Maybe post a  version of that with the config files and how you are running it so it's easier for us to help you by reproducing or inspecting. @drasko So was this resolved by mounting the config file to the correct path?  It was that the service wasn't up at all?   \nOr is there a separate TLS issue?. ",
    "mkozjak": "Still no script?. ",
    "olariuromeo": "I installed openresty in ubuntu 16.04, but nginx can not stop or start or reload, and not have init script. https://openresty.org/en/linux-packages.html\nUbuntu\nYou can add our APT repository to your Ubuntu system so as to easily install our packages and receive updates in the future (via the apt-get update command). To add the repository, just run the following commands (only need to run once for each system):\n# import our GPG key:\nwget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n\n# for installing the add-apt-repository command\n# (you can remove this package and its dependencies later):\nsudo apt-get -y install software-properties-common\n\n# add the our official APT repository:\nsudo add-apt-repository -y \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\"\n\n# to update the APT index:\nsudo apt-get update\n\nThen you can install a package, say, openresty, like this:\nsudo apt-get install openresty\n\n\n. i have add now simbolic link and now working\nln -s /usr/local/openresty/nginx/sbin/nginx /usr/sbin/nginx. my openresty version openresty/1.13.6.1. i have reinstaled all and get this error on status\nroot@openresty-1:~# sudo service openresty status\n\u25cf openresty.service - full-fledged web platform\n   Loaded: loaded (/lib/systemd/system/openresty.service; enabled; vendor preset: enabled)\n   Active: active (running) since Jo 2018-03-29 04:35:41 UTC; 6s ago\n  Process: 3211 ExecStop=/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /usr/local/openresty/nginx/logs/nginx.pid (c\n  Process: 3227 ExecStart=/usr/local/openresty/nginx/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)\n  Process: 3216 ExecStartPre=/usr/local/openresty/nginx/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCC\n Main PID: 3231 (nginx)\n    Tasks: 2\n   Memory: 1.9M\n      CPU: 14ms\n   CGroup: /system.slice/openresty.service\n           \u251c\u25003231 nginx: master process /usr/local/openresty/nginx/sbin/nginx -g daemon on; master_process on\n           \u2514\u25003232 nginx: worker process                                                 \nmar 29 04:35:41 openresty-1 systemd[1]: Starting full-fledged web platform...\nmar 29 04:35:41 openresty-1 systemd[1]: openresty.service: Failed to read PID from file /usr/local/openresty/nginx/logs/nginx.pid: In\nmar 29 04:35:41 openresty-1 systemd[1]: Started full-fledged web platform.\nlines 1-17/17 (END)\n. So how to start/stop/reload nginx.conf after we start openresty? ned to restart webserver every time?. if they give reload to openresty, nginx  does not reload a new configuration. Does anyone know that?. ",
    "gershbn": "Thank you for your reply!\nIs this a parameter to be set to indicate what toolchain to use? (I do not seem to find it here: http://nginx.org/en/docs/configure.html)\nJust in case, those are the params I'm using:\n--prefix= --conf-path=/nginx.conf --error-log-path=/error_log --http-log-path=/log --user= --group= --with-poll_module --with-http_gzip_static_module --with-http_stub_status_module --http-fastcgi-temp-path=/tmp --with-pcre=/pcre-8.33 --with-zlib=/zlib-1.2.8 --with-http_ssl_module --with-http_perl_module --http-client-body-temp-path=/client_body_temp --http-proxy-temp-path=/http_proxy_temp --http-fastcgi-temp-path=/fastcgi_temp --http-uwsgi-temp-path=/uwsgi_temp --http-scgi-temp-path=/scgi_temp --pid-path=/nginx.pid --lock-path=/nginx.lock --with-http_geoip_module --add-module=/eval --with-http_realip_module\n. ",
    "Leo-Tsai": "Thank you response, but I found out another problem.\nWhen I use header_filiter_by_lua to set my cookie, my php session cookie will be disappear.\nCould you tell me how to fix it.\n. ",
    "CMCDragonkai": "Thanks for the information. This would be great if it was on the front page or README.\n. Yep that would be great.\n. ",
    "bwalia": "Thanks @agentzh as always for your valiant efforts to keep things on track. However if I was building a web router service for 1000s of sites which one should I use openresty or tengine? Regards / Balinder. This is really interesting. I have started building Web UI too for ops guys and 2nd level engineers. I should have known about openresty edge. Well I spend a lot time now. However just ignoring that side of things what we also require is real time bot mitigation, redirect services for example any non technical user can can add https://www.sun.com/sports redirect to http//www.thesunsports.com and immediately it purges caches etc and starts to redirect traffic micro site. Also auto https provisioning and renewals. Perhaps from letsencrypt. Also Edge side caching with real time purging and caching with business rules. I am really impressed with your edge offering so far. It seems you are on the right track going to PAAS model and big players like akamai and Fastly. Well now I know I will keep an eye on it. By the way is edge also open source? Or can I get involved in any way or form?. ",
    "dnelson": "Wonderful, I can't wait!\n. ",
    "kmarellapudi": "Thanks for your quick response. I tried the #2 you suggested above. Now I ran into another issue. I copied only the first few lines of the error to not clutter this post. If you suggest I will mail you the full error dump. \nMay be it did not like the version of the openssl I downloaded?\nThanks again for your help! \n-Wl,-rpath,/usr/local/openresty/luajit/lib -L/Users/kmarellapudi/LetsDoIt/ngx_openresty-1.7.0.1/build/luajit-root/usr/local/openresty/luajit/lib -lluajit-5.1 -lm -pagezero_size 10000 -image_base 100000000 -lpcre /Users/kmarellapudi/LetsDoIt/openssl-1.0.1h/.openssl/lib/libssl.a /Users/kmarellapudi/LetsDoIt/openssl-1.0.1h/.openssl/lib/libcrypto.a -lz\nld: warning: ignoring file /Users/kmarellapudi/LetsDoIt/openssl-1.0.1h/.openssl/lib/libssl.a, file was built for archive which is not the architecture being linked (x86_64): /Users/kmarellapudi/LetsDoIt/openssl-1.0.1h/.openssl/lib/libssl.a\nld: warning: ignoring file /Users/kmarellapudi/LetsDoIt/openssl-1.0.1h/.openssl/lib/libcrypto.a, file was built for archive which is not the architecture being linked (x86_64): /Users/kmarellapudi/LetsDoIt/openssl-1.0.1h/.openssl/lib/libcrypto.a\nUndefined symbols for architecture x86_64:\n  \"_ASN1_STRING_data\", referenced from:\n      _ngx_ssl_check_name in ngx_event_openssl.o\n  \"_ASN1_STRING_length\", referenced from:\n      _ngx_ssl_check_name in ngx_event_openssl.o\n  \"_ASN1_d2i_bio\", referenced from:\n      _ngx_ssl_stapling in ngx_event_openssl_stapling.o\n  \"_BIO_ctrl\", referenced from:\n      _ngx_ssl_get_raw_certificate in ngx_event_openssl.o\n      _ngx_ssl_get_serial_number in ngx_event_openssl.o\n  \"_BIO_free\", referenced from:\n      _ngx_ssl_certificate in ngx_event_openssl.o\n      _ngx_ssl_dhparam in ngx_event_openssl.o\n      _ngx_ssl_get_raw_certificate in ngx_event_openssl.o\n      _ngx_ssl_get_serial_number in ngx_event_openssl.o\n      _ngx_ssl_stapling in ngx_event_openssl_stapling.o\n  \"_BIO_int_ctrl\", referenced from:\n      _ngx_ssl_info_callback in ngx_event_openssl.o\n  \"_BIO_new\", referenced from:\n      _ngx_ssl_get_raw_certificate in ngx_event_openssl.o\n      _ngx_ssl_get_serial_number in ngx_event_openssl.o\n  \"_BIO_new_file\", referenced from:\n      _ngx_ssl_certificate in ngx_event_openssl.o\n      _ngx_ssl_dhparam in ngx_event_openssl.o\n      _ngx_ssl_stapling in ngx_event_openssl_stapling.o\n. ",
    "imvvk": "HI,  I also can't  compile  when I use the ngx_openresty-1.7.0.2  in Mac 10.11.1 (El Caption) , the openssl is 1.0.2d , it throw \" \nsrc/event/ngx_event_openssl.c error: too few arguments to function call\n/usr/local/include/openssl/x509v3.h:741:1: note: 'X509_check_host' declared here\n\"\nwhen I use the ngx_openresty-1.9.3.2  that is OK . \n. ",
    "JesusIslam": "@agentzh I was only doing make. Is there any other steps before that?\n. @agentzh This is the results of bash -v ./util/mirror-tarballs\n```\n!/usr/bin/env bash\n./util/mirror-tarballs: line 2: $'\\r': command not found\nroot=$(readlink -f -- \"$(dirname -- \"$0\")/..\")\nroot=perl -MCwd -e'print Cwd::abs_path(shift)' $(dirname -- \"$0\")/..\nperl -MCwd -e'print Cwd::abs_path(shift)' $(dirname -- \"$0\")/..\ndirname -- \"$0\")/..\ndirname -- \"$0\"\n./util/mirror-tarballs: line 5: $'\\r': command not found\ninfo_txt=perl -e 'print \"\\033[33m[INFO]\\033[0m\"'\nperl -e 'print \"\\033[33m[INFO]\\033[0m\"'\n./util/mirror-tarballs: line 7: $'\\r': command not found\necho -n \"ngx_openresty \"\n. ./util/very \n: No such file or directorye 9: ./util/ver\necho\n./util/mirror-tarballs: line 10: $'echo\\r': command not found\n./util/mirror-tarballs: line 11: $'\\r': command not found\nname=ngx_openresty-$version\nwork=$root/work\n./util/mirror-tarballs: line 14: $'\\r': command not found\nif [ -z $debug ]; then\n    rm -rf $name || exit 1\n    mkdir -p $name/bundle || exit 1\nfi\ncd $name/bundle || exit 1\nif [ ! -d $work ]; then\n    mkdir $work || exit 1\nfi\n\nver=\"$main_ver\"\n$root/util/get-tarball \"http://nginx.org/download/nginx-$ver.tar.gz\" -O nginx-$ver.tar.gz || exit 1\ntar -xzf nginx-$ver.tar.gz || exit 1\ncd nginx-$ver || exit 1\npatch the patch\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.12\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the patch for nginx security advisory (CVE-2014-0133)\"\n    patch -p0 < $root/patches/patch.2014.spdy2.txt || exit 1\n    echo\nfi\necho \"$info_txt applying the upstream-pipelining patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-upstream_pipelining.patch || exit 1\necho\necho \"$info_txt applying the server_header patch for nginx\"\ncp $root/patches/nginx-$main_ver-server_header.patch server_header.patch || exit 1\nsed $\"s/NGINX_VERSION \\\".unknown\\\"/NGINX_VERSION \\\".$minor_ver\\\"/\" server_header.patch \\\n    > server_header.patch.tmp && mv -f server_header.patch.tmp server_header.patch || exit 1\npatch -p1 < server_header.patch || exit 1\necho\npatch -p1 < $root/patches/nginx-$main_ver-redirect_memcpy_overlap.patch || exit 1\necho \"$info_txt applying the no_error_pages patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-no_error_pages.patch || exit 1\necho\necho \"$info_txt applying the no_Werror patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-no_Werror.patch || exit 1\necho\npatch -p1 < $root/patches/nginx-$main_ver-epoll_check_stale_wev.patch || exit 1\npatch -p1 < $root/patches/nginx-$main_ver-request_body_in_single_buf.patch || exit 1\necho \"INFO: applying the max_subrequests patch...\";\npatch -p1 < $root/patches/nginx-$main_ver-max_subrequests.patch || exit 1\necho \"INFO: applying the subrequst_loop patch...\";\npatch -p1 -l < $root/patches/nginx-$main_ver-subrequest_loop.patch || exit 1\necho \"INFO: applying the gzip_empty_flush_buf patch...\";\npatch -p1 -l < $root/patches/nginx-$main_ver-gzip_empty_flush_buf.patch || exit 1\npatch -p1 < $root/patches/nginx-$main_ver-variable_header_ignore_no_hash.patch || exit 1\necho \"applying the named_location_clear_mods_ctx patch\"\npatch -p1 < $root/patches/nginx-$main_ver-named_location_clear_mods_ctx.patch || exit 1\necho \"$info_txt applying the allow_request_body_updating patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-allow_request_body_updating.patch || exit 1\necho\necho \"$info_txt applying the log_escape_non_ascii patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-log_escape_non_ascii.patch || exit 1\necho\necho applying reset_wev_handler_in_named_locations.patch ...\npatch -p1 < $root/patches/nginx-$main_ver-reset_wev_handler_in_named_locations.patch || exit 1\necho applying filter_finalize_hang.patch ...\npatch -p1 < $root/patches/nginx-$main_ver-filter_finalize_hang.patch || exit 1\nanswer=$root/util/ver-ge \"$main_ver\" 1.2.3\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the add_core_vars_polluting_globals patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-add_core_vars_polluting_globals.patch || exit 1\n    echo\necho \"$info_txt applying the resolver_debug_log_overflow patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-resolver_debug_log_overflow.patch || exit 1\necho\n\necho \"$info_txt applying the poll_del_event_at_exit patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-poll_del_event_at_exit.patch || exit 1\necho\n\nfi\necho \"INFO: applying null-character-fixes patch\"\npatch -p0 < $root/patches/nginx-$main_ver-null_character_fixes.patch || exit 1\npatch -p1 < $root/patches/nginx-$main_ver-gzip_ok_invalid_read_fix.patch || exit 1\necho \"$info_txt applying the location_if_inherits_proxy patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-location_if_inherits_proxy.patch || exit 1\necho\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.3\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the upstream_truncation patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-upstream_truncation.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.3\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the channel-uninit-params patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-channel-uninit-params.patch || exit 1\n    echo\nfi\necho \"$info_txt applying the dtrace patch for nginx\"\npatch -p1 < $root/patches/nginx-$main_ver-dtrace.patch || exit 1\necho\nanswer=$root/util/ver-ge \"$main_ver\" 1.2.6\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the upstream_test_connect_kqueue patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-upstream_test_connect_kqueue.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.13\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the slab_alloc_no_memory_as_info patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-slab_alloc_no_memory_as_info.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.2.7\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the resolver_wev_handler_segfault_with_poll patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-resolver_wev_handler_segfault_with_poll.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.2.8\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the run_posted_requests_in_resolver patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-run_posted_requests_in_resolver.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.4.1\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying patches/nginx-$main_ver-cve-2013-2070.patch for nginx\"\n    patch -p0 < $root/patches/nginx-$main_ver-cve-2013-2070.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.3\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying patches/nginx-$main_ver-invalid_referer_hash.patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-invalid_referer_hash.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.4.1\nif [ \"$answer\" = \"Y\" ]; then\n    echo \"$info_txt applying patches/nginx-$main_ver-gcc-maybe-uninitialized-warning.patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-gcc-maybe-uninitialized-warning.patch\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.3\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the unix_socket_accept_over_read patch for nginx $ver\"\n    patch -p1 < $root/patches/nginx-$ver-unix_socket_accept_over_read.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.3\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the gzip_buffered_bug patch for nginx $ver\"\n    patch -p1 < $root/patches/nginx-$ver-gzip_buffered_bug.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.7\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the gzip_flush_bug patch for nginx $ver\"\n    patch -p1 < $root/patches/nginx-$ver-gzip_flush_bug.patch || exit 1\n    echo\nfi\necho \"$info_txt applying the cache_lock_hang_in_subreq patch for nginx $ver\"\npatch -p1 < $root/patches/nginx-$ver-cache_lock_hang_in_subreq.patch || exit 1\necho\necho \"$info_txt applying the proxy_host_port_vars patch for nginx $ver\"\npatch -p1 < $root/patches/nginx-$ver-proxy_host_port_vars.patch || exit 1\necho\necho \"$info_txt applying the cache_manager_exit patch for nginx $ver\"\npatch -p1 < $root/patches/nginx-$ver-cache_manager_exit.patch || exit 1\necho\nanswer=$root/util/ver-ge \"$main_ver\" 1.4.4\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the CVE-2013-4547 patch for nginx $ver\"\n    patch -p0 < $root/patches/patch.2013.space.txt || exit 1\n    echo\nfi\necho \"$info_txt applying the larger_max_error_str patch for nginx $ver\"\npatch -p1 < $root/patches/nginx-$ver-larger_max_error_str.patch || exit 1\necho\necho \"$info_txt applying the pcre_conf_opt patch for nginx $ver\"\npatch -p1 < $root/patches/nginx-$ver-pcre_conf_opt.patch || exit 1\necho\nanswer=$root/util/ver-ge \"$main_ver\" 1.5.9\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the resolve-names-with-a-trailing-dot patch for nginx $ver\"\n    patch -p1 < $root/patches/nginx-$ver-resolve-names-with-a-trailing-dot.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.7.1\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the setting_args_invalidates_uri patch for nginx $ver\"\n    patch -p1 < $root/patches/nginx-$ver-setting_args_invalidates_uri.patch || exit 1\n    echo\nfi\nanswer=$root/util/ver-ge \"$main_ver\" 1.7.2\nif [ \"$answer\" = \"N\" ]; then\n    echo \"$info_txt applying the slab_defrag patch for nginx\"\n    patch -p1 < $root/patches/nginx-$main_ver-slab_defrag.patch || exit 1\n    echo\nfi\nrm -f *.patch || exit 1\ncd .. || exit 1\ncp $root/patches/nginx-$main_ver-no_pool.patch ./nginx-no_pool.patch || exit 1\nsed $\"s/NGINX_VERSION \\\".unknown/NGINX_VERSION \\\".$minor_ver/\" \\\n    ./nginx-no_pool.patch > ./nginx-no_pool.patch.tmp && \\\n    mv ./nginx-no_pool.patch.tmp ./nginx-no_pool.patch \\\n    || exit 1\n./util/mirror-tarballs: line 263: syntax error near unexpected token ||'\n'/util/mirror-tarballs: line 263:    || exit 1\n```\n. Actually you're right, there is something very wrong with my laptop (at least git, because my npm, luarocks, and pip compile packages just fine). Yesterday I tried to compile wrk and that failed too for some reason so I have to compile it on a separate computer. I guess we can close this issue because this is clearly comes from the user's side, not your's. Thank you very much from your quick response :)\n. ",
    "louis": "Nope, both Nginx 1.5.12 and 1.7.2 work with the Passenger module (however, I didn't try with Lua, only with Redis2).\nConfigure:\n./configure --with-cc-opt=\"-Wno-deprecated-declarations -Wno-unused-const-variable\" --with-http_ssl_module --with-pcre=../pcre-8.35 --add-module=../nginx_modules/ngx_devel_kit-0.2.19 --add-module=../nginx_modules/set-misc-nginx-module-0.24 --add-module=../nginx_modules/redis2-nginx-module-0.11 --add-module=/Users/louisgates/.rvm/gems/ruby-1.9.3-p429/gems/passenger-4.0.45/ext/nginx\n. Passenger source is on GitHub: https://github.com/phusion/passenger but I installed 4.0.45 as a gem within RVM Ruby 1.9.3-p429.\nI also tried Passenger 4.0.4 and got the same problem.\nThanks so much for helping.  Your willingness and responsiveness is incredible!\n. Excellent!  Unfortunately I can't try it right now but will first thing tomorrow morning and report back.\nThanks so much for the help!\n. @agentzh Your patch worked perfect!  Thank you so much for your help and responsiveness. Much appreciated!\n. ",
    "kevin25": "Thank you. I used that configure for normal nginx compilation. Now i used for openresty. My bad.\n. ",
    "IndeedPlusPlus": "Maybe a hint of most commonly used configuration switches in the Installation Guide would be a good idea?\n. Looks nice. Thanks.\n. Maybe we can use patches from enterprise Linux distributions. They usually backport patches to previous versions.\nHere is the patch by Ubuntu maintainers.\n```\nCHANGELOG\n\nSECURITY UPDATE: incorrect cached SSL session reuse (LP: #1370478)\ndebian/patches/CVE-2014-3616.patch: include hash of certificate in\n  session id context in src/event/ngx_event_openssl.c.\nCVE-2014-3616\n\n\n\n-- Marc Deslauriers marc.deslauriers@ubuntu.com  Wed, 17 Sep 2014 08:56:46 -0400\n```\n``` diff\nDescription: fix incorrect cached SSL session reuse\nOrigin: backport, http://trac.nginx.org/nginx/changeset/1ee1db30c9b96e9e43e85ab0bfba42140af24966/nginx\nBug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/nginx/+bug/1370478\nBug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=761940\nIndex: nginx-1.4.6/src/event/ngx_event_openssl.c\n--- nginx-1.4.6.orig/src/event/ngx_event_openssl.c  2014-09-17 08:51:37.000000000 -0400\n+++ nginx-1.4.6/src/event/ngx_event_openssl.c   2014-09-17 08:51:56.606172085 -0400\n@@ -27,6 +27,8 @@\n     ngx_err_t err, char text);\n static void ngx_ssl_clear_error(ngx_log_t log);\n+static ngx_int_t ngx_ssl_session_id_context(ngx_ssl_t ssl,\n+    ngx_str_t sess_ctx);\n ngx_int_t ngx_ssl_session_cache_init(ngx_shm_zone_t shm_zone, void data);\n static int ngx_ssl_new_session(ngx_ssl_conn_t ssl_conn,\n     ngx_ssl_session_t sess);\n@@ -1666,13 +1668,15 @@\n {\n     long  cache_mode;\n\nif (ngx_ssl_session_id_context(ssl, sess_ctx) != NGX_OK) {\nreturn NGX_ERROR;\n}\n+\n     if (builtin_session_cache == NGX_SSL_NO_SCACHE) {\n         SSL_CTX_set_session_cache_mode(ssl->ctx, SSL_SESS_CACHE_OFF);\n         return NGX_OK;\n     }\n\n-    SSL_CTX_set_session_id_context(ssl->ctx, sess_ctx->data, sess_ctx->len);\n if (builtin_session_cache == NGX_SSL_NONE_SCACHE) {\n\n     /*\n\n@@ -1731,6 +1735,96 @@\n }\n+static ngx_int_t\n+ngx_ssl_session_id_context(ngx_ssl_t ssl, ngx_str_t sess_ctx)\n+{\n+    int                   n, i;\n+    X509                 cert;\n+    X509_NAME            name;\n+    EVP_MD_CTX            md;\n+    unsigned int          len;\n+    STACK_OF(X509_NAME)  list;\n+    u_char                buf[EVP_MAX_MD_SIZE];\n+\n+    /\n+     * Session ID context is set based on the string provided,\n+     * the server certificate, and the client CA list.\n+     /\n+\n+    EVP_MD_CTX_init(&md);\n+\n+    if (EVP_DigestInit_ex(&md, EVP_sha1(), NULL) == 0) {\n+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                      \"EVP_DigestInit_ex() failed\");\n+        goto failed;\n+    }\n+\n+    if (EVP_DigestUpdate(&md, sess_ctx->data, sess_ctx->len) == 0) {\n+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                      \"EVP_DigestUpdate() failed\");\n+        goto failed;\n+    }\n+\n+    cert = SSL_CTX_get_ex_data(ssl->ctx, ngx_ssl_certificate_index);\n+\n+    if (X509_digest(cert, EVP_sha1(), buf, &len) == 0) {\n+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                      \"X509_digest() failed\");\n+        goto failed;\n+    }\n+\n+    if (EVP_DigestUpdate(&md, buf, len) == 0) {\n+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                      \"EVP_DigestUpdate() failed\");\n+        goto failed;\n+    }\n+\n+    list = SSL_CTX_get_client_CA_list(ssl->ctx);\n+\n+    if (list != NULL) {\n+        n = sk_X509_NAME_num(list);\n+\n+        for (i = 0; i < n; i++) {\n+            name = sk_X509_NAME_value(list, i);\n+\n+            if (X509_NAME_digest(name, EVP_sha1(), buf, &len) == 0) {\n+                ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                              \"X509_NAME_digest() failed\");\n+                goto failed;\n+            }\n+\n+            if (EVP_DigestUpdate(&md, buf, len) == 0) {\n+                ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                              \"EVP_DigestUpdate() failed\");\n+                goto failed;\n+            }\n+        }\n+    }\n+\n+    if (EVP_DigestFinal_ex(&md, buf, &len) == 0) {\n+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                      \"EVP_DigestUpdate() failed\");\n+        goto failed;\n+    }\n+\n+    EVP_MD_CTX_cleanup(&md);\n+\n+    if (SSL_CTX_set_session_id_context(ssl->ctx, buf, len) == 0) {\n+        ngx_ssl_error(NGX_LOG_EMERG, ssl->log, 0,\n+                      \"SSL_CTX_set_session_id_context() failed\");\n+        return NGX_ERROR;\n+    }\n+\n+    return NGX_OK;\n+\n+failed:\n+\n+    EVP_MD_CTX_cleanup(&md);\n+\n+    return NGX_ERROR;\n+}\n+\n+\n ngx_int_t\n ngx_ssl_session_cache_init(ngx_shm_zone_t shm_zone, void *data)\n {\n```\n. ",
    "yifine": "@agentzh \nHere is the link where I got the openresty\nhttp://www.openresty.org/\nWhat I downloaded is the latest release which is the version 1.7.2.1\n. @agentzh \nMaybe you had made the \"configure\" of nginx executable manually before you carry out the configure script of the openresty. I tried that, and also I could not reproduce it.  \nYou will definitly reproduce it by executing the following command at the beginning, and make sure that the configure script of nginx is not executable at the same time.\n./configure --with-luajit\n. @agentzh \nI failed to download the openresty source tarball and got 404 returned by your server side.\n. @agentzh \nYes, it works quite well when compling the openresty source tarball you provided. \nhttp://openresty.org/download/ngx_openresty-1.4.7.1rc1.2.tar.gz\nWhat perfect work you did!!\n. ",
    "wind930": "@agentzh So that is what it is., ha ha, so low, I didn't notice that, thank you for your response so fast, I should read the document, thank you!\n. ",
    "mohsininayatkhan": "Hello @agentzh, I am new to linux and nginx.\nI have built the nigix with 'lua-nginx-module' and it's displaying following error in niginx error logs\n2015/11/10 12:52:26 [error] 30735#0: *17 lua entry thread aborted: runtime error: /opt/ranger/content.lua:3: module 'cjson' not found:\n    no field package.preload['cjson']\n    no file '/opt/ranger/external/lua-resty-http/lib/cjson.lua'\n    no file '/opt/ranger/external/nginx_log_by_lua/cjson.lua'\n    no file '/opt/ranger/external/bitset/lib/cjson.lua'\n    no file './cjson.lua'\n    no file '/usr/local/share/luajit-2.0.2/cjson.lua'\n    no file '/usr/local/share/lua/5.1/cjson.lua'\n    no file '/usr/local/share/lua/5.1/cjson/init.lua'\n    no file './cjson.so'\n    no file '/usr/local/lib/lua/5.1/cjson.so'\n    no file '/usr/local/lib/lua/5.1/loadall.so'\nstack traceback:\ncoroutine 0:\n    [C]: in function 'require'\n    /opt/ranger/content.lua:3: in function \n. @agentzh is there any work around because I have applied the following patches on lua-nginx-module.\nhttps://github.com/openresty/lua-nginx-module/pull/590\nhttps://github.com/openresty/lua-nginx-module/pull/519\n. Ok, Many thanks for the quick reply :)\n. ",
    "Shawkaine": "@agentzh but I still got the same error as @mohsininayatkhan when I tried to require cjson in Lua, how's that I wonder.\n. I found out that my Lua version is 5.3. I guess that should be one of the reasons that caused the error.. ",
    "mikz": "@agentzh fixed\n. Well that is embarrassing. Fixed.\nOn 10 Sep 2014, at 21:36, Yichun Zhang notifications@github.com wrote:\n\nIn util/resty:\n\n\nlocal write_to_output(...)\n  Looks like a syntax error?\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "lusis": "@agentzh no worries. I just wanted to make sure since work was already in progress to 1.7.4 that it got on the radar. Thanks!\n. ",
    "leto": "Are there any updates on this?\n. @agentzh how about --without-any-lua ?\n. @agentzh great! I will prepare a PR in my fork at https://github.com/letolabs/ngx_openresty . Is there a document that has guidelines for developer contributions that I am not seeing?\n. @agentzh I can add that too! Would you prefer it be in this PR or a different one?\n. My original reason for this was that I used OpenResty for a non-Lua project, since it makes it so easy to  use various add-ons. I was mostly using rds_json and postgres modules to implement a JSON API directly in Nginx/OpenResty, without any dynamic language. It was extremely performant.\nYou can think of this as an \"easy on-ramp\" for people to use and get interesting in OpenResty without Lua. I ended up having 20 --without statements in my provision scripts to compile OpenResty, which is why I suggested --without-any-lua. \n. @bungle yep, gonna work on it today!\n. ",
    "dol": "Thx for the change of the PATH/DIR naming and congrats on the new release of openresty.\nI see, that the luajit and lualib belongs to the openresty subfolder. What I'd like to achieve is to build a nginx Debian package from the openresty source.\nAs a base I took the source package of http://nginx.org/packages/mainline/ubuntu/pool/nginx/n/nginx/. It contains all the configs for init.d, pre-/postinall, logrotation, .. that are missing in openresty.\nWith a slight modification of the original rules file 1 I'm able to build a .deb file from openresty source.\nOn the openresty core I only had to patch patch the ./configure file to move luajit and lualib to /usr/lib/nginx/(luajit|lualib).\nThis was the reason of my request.\nI'm fine if this option is not exposed by the ./configure script. I'll apply an patch on every new build.\nAre there any plans providing binary packages (rpm, deb) for the major Linux distros. It would be not so complicated to take the build instructions from http://nginx.org/packages/mainline/ and building openresty packages out of it. As I mentioned, the build instructions have to be tweaked slightly. I could provide help.\n. What about ngx.var.http_host? ngx.var.host and ngx.var.hostname shoud contain the same information. I think that ngx.var.http_host also contains the port information.\n. IMHO this is not exposed at the moment. You could compile the 'filesystem' rocks into your Openresty lua_package_cpath path.\nAn other option is to open a new issue in the openresty/lua-nginx-module.\nAn possible integration could like like:\nSimilar to ngx_http_lua_open_and_stat_file a new ffi method could be added and exposed via openresty/lua-resty-core.\n@david001-yang Could you explain what use case do you have?\n. btw: Your package requires 'postgresql'. I recommend using a 'Weak dependencies'.\n. You can access all the SSL Embedded Variables like the following:\nlocal client_cert = ngx.var.ssl_client_cert\nThe best way to ask questions about the openresty project is the mailing list => https://groups.google.com/forum/#!forum/openresty-en\n. You might want to ask your question in the corresponding mailing list: https://openresty.org/en/community.html\nThe mailing list is the best place to ask this sort of questions. All the documentation about ngx.timer.at can be found at https://github.com/openresty/lua-nginx-module#user-content-ngxtimerat. ",
    "dreik": "Here is a part of my config to allow CORS, I think you'll be able to modify it as you need (in prod since openresty 1.4.3.6 till 1.7.4.1): \nset $cors \"\";\nif ($http_origin ~* (https?://.*.domain.com(:[0-9]+)?)) {\n        set $cors \"true\";\n}\nif ($request_method = 'OPTIONS') {\n        set $cors \"${cors}options\";\n}\nif ($request_method = 'GET') {\n        set $cors \"${cors}get\";\n}\nif ($request_method = 'POST') {\n        set $cors \"${cors}post\";\n}\nif ($cors = \"trueget\") {\n                add_header 'Access-Control-Allow-Origin' \"$http_origin\";\n                add_header 'Access-Control-Allow-Credentials' 'true';\n}\nif ($cors = \"truepost\") {\n                add_header 'Access-Control-Allow-Origin' \"$http_origin\";\n                add_header 'Access-Control-Allow-Credentials' 'true';\n}\nif ($cors = \"trueoptions\") {\n        add_header 'Access-Control-Allow-Origin' \"$http_origin\";\n        add_header 'Access-Control-Allow-Credentials' 'true';\n        add_header 'Access-Control-Max-Age' 1728000;\n        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';\n        add_header 'Content-Length' 0;\n        add_header 'Content-Type' 'text/plain charset=UTF-8';\n        return 204;\n}\nproxy_set_header        X-Real-IP $remote_addr;\nproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_set_header X-Forwarded-Proto $scheme;\nproxy_set_header        Host $host;\n. ",
    "MayamaTakeshi": "agentzh, sorry, my interpretation of my problem was wrong. You are correct. I confirmed your code works.\nMy mistake was this:\nThe upstream server of proxy_pass was failing to process the request and refused it with 404. So in this case, the CORS headers were properly sent back by nginx.\nBut the normal operation of the upstream server is not to reply with 200 OK. Instead it is to redirect using something like \n  X-Accel-Redirect: /internal_redirection/SOME_SERVER/SOME_URL\nThen nginx would process this request, but as my test shows, I need to set the headers again so I added these:\nlocation ~ ^/internal_redirection/(.*) {\n     proxy_pass http://$1$is_args$args;\n     add_header 'Access-Control-Allow-Origin' \"$http_origin\";\n     add_header 'Access-Control-Allow-Credentials' 'true';\n   }\nAnd after that, my problem was solved.\nFor reference, here is a complete nginx.conf file that permits to confirm it works:\n```\nworker_processes ${{NUM_WORKERS}};\nerror_log stderr notice;\ndaemon off;\nevents {\n  worker_connections 1024;\n}\nhttp {\n  include mime.types;\nserver {\n    listen          127.0.0.1;\nserver_name  test1.com;\n\nlocation ~ ^/test/(.*) {\n  header_filter_by_lua '\n    local m = ngx.req.get_method()\n    if m == \"GET\" or m == \"POST\" then\n      ngx.header[\"Access-Control-Allow-Origin\"] = ngx.var.http_origin\n      ngx.header[\"Access-Control-Allow-Credentials\"] = \"true\"\n    elseif m == \"OPTIONS\" then\n      ngx.header[\"Access-Control-Allow-Origin\"] = ngx.var.http_origin\n      ngx.header[\"Access-Control-Allow-Credentials\"] = \"true\"\n      ngx.header[\"Access-Control-Max-Age\"] = \"1728000\"\n      ngx.header[\"Access-Control-Allow-Methods\"] = \"GET, POST, OPTIONS\"\n      ngx.header[\"Access-Control-Allow-Headers\"] = \"Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since\"\n      ngx.header[\"Content-Length\"] = \"0\"\n      ngx.header[\"Content-Type\"] = \"text/plain charset=UTF-8\"\n   end\n ';\n\n access_by_lua '\n   local m = ngx.req.get_method()\n   if m == \"OPTIONS\" then\n     ngx.exit(204)\n   end\n ';\n\n  proxy_pass http://127.0.0.1:$server_port/back/$1;\n  proxy_http_version 1.1;\n  proxy_set_header    Host             $host;\n  proxy_set_header    X-Real-IP        $remote_addr;\n  proxy_set_header    X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n  proxy_pass_request_headers on;\n}\n\nlocation ~ ^/internal_redirection/(.*) {\n  proxy_pass http://$1$is_args$args;\n  add_header 'Access-Control-Allow-Origin' \"$http_origin\";\n  add_header 'Access-Control-Allow-Credentials' 'true';\n}\n\nlocation ~ ^/back/(.*) {\n  content_by_lua '\n  local fst,snd = (ngx.var[1]):match(\"([^/]+)/([^/]+)\")\n  if fst == \"redirect_it\" then\n    ngx.header[\"X-Accel-Redirect\"] = \"/internal_redirection/127.0.0.1:\" .. ngx.var.server_port .. \"/back/\" .. snd\n    ngx.exit(302)\n  else\n    ngx.say(\"I got \" .. ngx.var[1])\n    ngx.exit(200)\n  end\n';\n}\n\n}\n}\n```\nSome tests:\n```\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/200\nHTTP/1.1 200 OK\nServer: openresty/1.7.4.1\nDate: Fri, 17 Oct 2014 11:24:16 GMT\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\nI got 200\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/404\nHTTP/1.1 200 OK\nServer: openresty/1.7.4.1\nDate: Fri, 17 Oct 2014 11:24:18 GMT\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\nI got 404\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/redirect_it/200\nHTTP/1.1 200 OK\nServer: openresty/1.7.4.1\nDate: Fri, 17 Oct 2014 11:24:23 GMT\nContent-Type: text/plain\nContent-Length: 10\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\nI got 200\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/redirect_it/404\nHTTP/1.1 200 OK\nServer: openresty/1.7.4.1\nDate: Fri, 17 Oct 2014 11:24:26 GMT\nContent-Type: text/plain\nContent-Length: 10\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\nI got 404\n```\nThanks and regargs,\nTakeshi\n. Just correcting a small detail in case someone else reads this conversation.\nActually there was an error in my nginx.conf and it was not allowing to test redirection with non-200 replies.\nSo the corrected version is this \n```\nworker_processes ${{NUM_WORKERS}};\nerror_log stderr notice;\ndaemon off;\nevents {\n  worker_connections 1024;\n}\nhttp {\n  include mime.types;\nserver {\nlisten          127.0.0.1;\n\n\nlisten          127.0.0.1;\n\nserver_name  test1.com;\n\nlocation ~ ^/test/(.*) {\n  header_filter_by_lua '\n    local m = ngx.req.get_method()\n    if m == \"GET\" or m == \"POST\" then\n      ngx.header[\"Access-Control-Allow-Origin\"] = ngx.var.http_origin\n      ngx.header[\"Access-Control-Allow-Credentials\"] = \"true\"\n    elseif m == \"OPTIONS\" then\n      ngx.header[\"Access-Control-Allow-Origin\"] = ngx.var.http_origin\n      ngx.header[\"Access-Control-Allow-Credentials\"] = \"true\"\n      ngx.header[\"Access-Control-Max-Age\"] = \"1728000\"\n      ngx.header[\"Access-Control-Allow-Methods\"] = \"GET, POST, OPTIONS\"\n      ngx.header[\"Access-Control-Allow-Headers\"] = \"Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since\"\n      ngx.header[\"Content-Length\"] = \"0\"\n      ngx.header[\"Content-Type\"] = \"text/plain charset=UTF-8\"\n   end\n ';\n\n access_by_lua '\n   local m = ngx.req.get_method()\n   if m == \"OPTIONS\" then\n     ngx.exit(204)\n   end\n ';\n\n  proxy_pass http://127.0.0.1:$server_port/back/$1;\n  proxy_http_version 1.1;\n  proxy_set_header    Host             $host;\n  proxy_set_header    X-Real-IP        $remote_addr;\n  proxy_set_header    X-Forwarded-For  $proxy_add_x_forwarded_for;\n\n  proxy_pass_request_headers on;\n}\n\nlocation ~ ^/internal_redirection/(.*) {\n  proxy_pass http://$1$is_args$args;\n  add_header 'Access-Control-Allow-Origin' \"$http_origin\";\n  add_header 'Access-Control-Allow-Credentials' 'true';\n}\n\nlocation ~ ^/back/(.*) {\n  content_by_lua '\n  local fst,snd = (ngx.var[1]):match(\"([^/]+)/([^/]+)\")\n  if fst == \"redirect_it\" then\n    ngx.header[\"X-Accel-Redirect\"] = \"/internal_redirection/127.0.0.1:\" .. ngx.var.server_port .. \"/back/\" .. snd\n    ngx.exit(302)\n  else\n    ngx.exit(tonumber(ngx.var[1]))\n  end\n';\n}\n\n}\n}\n```\nThe tests shows that CORS headers are added to 200 replies after redirection, but not to 404 replies after redirection:\n```\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/200\nHTTP/1.1 200 OK\nServer: openresty/1.7.4.1\nDate: Sat, 18 Oct 2014 00:19:34 GMT\nContent-Type: text/plain\nTransfer-Encoding: chunked\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/404\nHTTP/1.1 404 Not Found\nServer: openresty/1.7.4.1\nDate: Sat, 18 Oct 2014 00:19:37 GMT\nContent-Type: text/html\nContent-Length: 174\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\n\n404 Not Found\n\n404 Not Found\nopenresty/1.7.4.1\n\n\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/redirect_it/200\nHTTP/1.1 200 OK\nServer: openresty/1.7.4.1\nDate: Sat, 18 Oct 2014 00:19:46 GMT\nContent-Type: text/plain\nContent-Length: 0\nConnection: keep-alive\nAccess-Control-Allow-Origin: www.foo.com\nAccess-Control-Allow-Credentials: true\n[root@lab002132basixtester static]# curl -x '' -H 'Origin: www.foo.com' -i http://127.0.0.1/test/redirect_it/404\nHTTP/1.1 404 Not Found\nServer: openresty/1.7.4.1\nDate: Sat, 18 Oct 2014 00:19:54 GMT\nContent-Type: text/html\nContent-Length: 174\nConnection: keep-alive\n\n404 Not Found\n\n404 Not Found\nopenresty/1.7.4.1\n\n\n```\nI don't know if this is expected or not. But since i only care to receive CORS headers in case of \"200 OK\", this is not a problem for me.\nRegards,\nTakeshi\n. ",
    "lenxeon": "i used 1.7.4.1 on mac 10.8.5\nlenxeontekiMacBook-Air:ngx_openresty-1.7.4.1 lenxeon$ ls build/*|grep ngx_lua\nbuild/ngx_lua-0.9.12:\nbuild/ngx_lua_upstream-0.02:\nlenxeontekiMacBook-Air:sbin lenxeon$ ./nginx -V\nnginx version: openresty/1.7.4.1\nbuilt by clang 4.2 (clang-425.0.28) (based on LLVM 3.2svn)\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt='-I/usr/local/my/ngx_openresty-1.7.4.1/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1 -O2 -I/usr/local/include' --add-module=../ngx_devel_kit-0.2.19 --add-module=../echo-nginx-module-0.56 --add-module=../xss-nginx-module-0.04 --add-module=../ngx_coolkit-0.2rc1 --add-module=../set-misc-nginx-module-0.26 --add-module=../form-input-nginx-module-0.10 --add-module=../encrypted-session-nginx-module-0.03 --add-module=../srcache-nginx-module-0.28 --add-module=../ngx_lua-0.9.12 --add-module=../ngx_lua_upstream-0.02 --add-module=../headers-more-nginx-module-0.25 --add-module=../array-var-nginx-module-0.03 --add-module=../memc-nginx-module-0.15 --add-module=../redis2-nginx-module-0.11 --add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.13 --add-module=../rds-csv-nginx-module-0.05 --with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/my/ngx_openresty-1.7.4.1/build/luajit-root/usr/local/openresty/luajit/lib -L/usr/local/lib' --with-http_ssl_module\nso i change /usr/local/openresty/lualib/resty/mysql.lua\nif not ngx.config\n   or not ngx.config.ngx_lua_version\n   --or ngx.config.ngx_lua_version < 9011\nthen\n    error(\"ngx_lua 0.9.11+ required\")\nend\nngx.say(ngx.config.ngx_lua_version)\n9008\n. ",
    "diyism": "Why does lua-resty-mysql need ngx_lua 0.9.11? I test it on ngx_lua 0.9.5 with version checking commented, and it works well\n. ",
    "ghost": "I'm sorry! Thx!\n. Sorry for my english, i fixed the comment.\nI'm currently using php-fpm in production, i was wondering openresty if it would be possible to build memc module from now on without the \"--with-lua51\" configure option.\n. Configure option possible with(--without-any-lua) current ngx_openresty?\n. Thanks for noticing this, sorry.\n. @agentzh What I mean \"not work\" is that I can't find the cached file under the proxy_cache_path. \n. @agentzh  I enable the debugging log, It saying \n``\n\nIt says cached, but I can't find the file /tmp/nginx/cache/4/18/2102b294e9a4ebe50cba01f8e2e05184. Maybe the key issue is here. But I'm not farmiliar with source code of nginx.  ^-\n. nginx-debug.txt\nOk, I will take care  next time.  That is complete log for the testing, and I couldn't find the key word like \"cache store\"\n. @agentzh :+1:  the directive is  really in nginx.conf. Yeah, this is not a bug,Thank you for your help very much!\n. Hello @detailyang\nI have four files of certificate.\napiclient_cert.p12\napiclient_cert.pem\napiclient_key.pem\nrootca.pem\nI want to use the certificates to connect the third website api , like \"https://api.mch.weixin.qq.com/secapi/pay/refund\".\nPlease tell me what can I do step by step. thanks a lot.\n. Hello\n@detailyang , thanks for your help.\nI can use the command to make a apiclient_key.pem without password.\nAnd also can make a apiclient_cert.p12 without password.\nAnd also can send a request to the website with java or curl.\nBut I still don't know what can I do in openresty enviroments.\nThe point to implement the function\n1\u3001With resty.http can do it?\n2\u3001if resty.http can not do it , which api of openresty can do it?\nthanks\n. @detailyang \n\nActually, the https://api.mch.weixin.qq.com/secapi/pay/refund want to do mutual authentication between from the server and client. But now the cosocket in openresty does not support this feature:(\n\nI'm so sad to hear that. :(\nOK, I will invoke the canmmand of curl to implement the function.\nThanks for your help.. @agentzh \nYes , I'm being bothered by this , and I want to know more way to solve this problem better . \nCan you give me more help?. @detailyang \nproxy_ssl_certificate and proxy_ssl_certificate_key can load the certificate .\nbut the information of forward proxy has been in my redis. \nIt's dynamic data ( include proxy_pass and  proxy_ssl_certificate ,etc ).\nand the certificate was loaded by proxy_ssl_certificate when nginx is starting.\nI think this config is static.so I want to find a dynamic way to load certificate.  . You're right. I now see the open issue. Works with lower OpenSSL version. Thanks for the quick reply!. ",
    "gregkare": "Update: I can't reproduce this issue anymore when using 1.7.7.1 RC1 from https://groups.google.com/forum/#!topic/openresty-en/JgKFOa0FnQk\n. ",
    "fanxinglb": "\u6211\u7684lua\u7a0b\u5e8f\u8bbe\u7f6e\u8d85\u7ea7\u4e00\u822c\u4e3a1\u79d2\n. ",
    "kaiwangubnt": "@agentzh Thanks for the reply. I opened another ticket which is the same as this one.\nhttps://github.com/openresty/lua-nginx-module/issues/441\nThanks!\n. @agentzh I haven't fixed the problem. Hope to get some suggestions from you. We can discuss about it on the new ticket page I opened. Thanks!\n. ",
    "whl739": "oops\uff0c I forgot to set nginx worker user\uff0cignore it\uff01\n. ",
    "MfNiu": "nginx version: ngx_openresty/1.4.3.3\nbuilt by gcc 4.4.7 20120313 (Red Hat 4.4.7-3) (GCC) \nTLS SNI support enabled\nconfigure arguments: --prefix=/opt/webserver/nginx/nginx --with-debug --add-module=../ngx_devel_kit-0.2.19 --add-module=../echo-nginx-module-0.49 --add-module=../xss-nginx-module-0.04 --add-module=../ngx_coolkit-0.2rc1 --add-module=../set-misc-nginx-module-0.22 --add-module=../form-input-nginx-module-0.07 --add-module=../encrypted-session-nginx-module-0.03 --add-module=../drizzle-nginx-module-0.1.6 --add-module=../srcache-nginx-module-0.24 --add-module=../ngx_lua-0.9.2 --add-module=../headers-more-nginx-module-0.23 --add-module=../array-var-nginx-module-0.03rc1 --add-module=../memc-nginx-module-0.13 --add-module=../redis2-nginx-module-0.10 --add-module=../redis-nginx-module-0.3.6 --add-module=../auth-request-nginx-module-0.2 --add-module=../rds-json-nginx-module-0.12 --add-module=../rds-csv-nginx-module-0.05 --with-ld-opt=-Wl,-rpath,/opt/webserver/nginx/luajit/lib --user=www --group=www --with-http_ssl_module --add-module=/home/nginx-rtmp-module\n. ",
    "gfreezy": "Sorry.\nMy nignx configuration has the following config:\nworker_processes 24;\nevents {\n    worker_connections 10000;\n    use epoll;\n}\nIf all nginx connections need to get something from redis,  does it mean that there might be 24 * 10000 connections to redis at most. So depending on my real traffic, i need to tune the redis server.\n. ",
    "Phaiax": "Thanks.\n. ",
    "agnibha": "Hi @agentzh, I've got this same problem with server_name and proxy_pass. While the same configuration works in base nginx(and also echo inside the location block works), it doesn't seem to be working for openresty(v1.9.3.1):\nserver {\n     resolver 8.8.8.8;\n     listen 80;\n     server_name ~^(.*)\\.example\\.com;\n     set $upstream_endpoint  https://cdn.example.com/$1$request_uri;\n     location / {\n       proxy_pass $upstream_endpoint;\n       proxy_pass_request_headers on;\n     }\n   }\nI understand that this is an old version. But, I'd love to know if there's a way of handling this or any alternative way to resolve wildcard server_name.. I've updated to latest(nginx version: openresty/1.11.2.4). The Bad Gateway problem still exists. Just, this time it took long since apparently, it underwent a timeout.\nHere's a link to the debug logs(will expire in 2 days since it contains sensitive information): https://pastebin.com/dpJuSWdy. Update: I found the errors thanks to the debug logs. It was a timeout error and then, an SSL handshake error. I've had it resolved at my end. Thanks @agentzh for the suggestions.. ",
    "lordnynex": "@agentzh I will need to setup a test environment to explore this further. I wonder if it is specific to the Raspberry Pi version. My assumption was that openresty is not widely used on other ARM platforms but I could be wrong. \nI will try to test the build as soon as I can get the hardware together. \n. @sparvu Can you test for this error with the following builds:\n./configure --with-cc-opt=\"-O1\"\nand\n./configure --with-cc-opt=\"-O2\"\n. ",
    "sparvu": "We have a dedicated environment running OpenResty on ARM so we can test, if needed. We have encounter this issue: https://groups.google.com/forum/#!topic/openresty-en/cI7qiuq-RdQ\n2015/02/02 14:57:05 [notice] 6456#0: using the \"epoll\" event method\n2015/02/02 14:57:05 [notice] 6456#0: openresty/1.7.7.1\n2015/02/02 14:57:05 [notice] 6456#0: built by gcc 4.6.3 (Debian \n4.6.3-14+rpi1)\n2015/02/02 14:57:05 [notice] 6456#0: OS: Linux 3.12.22+\n2015/02/02 14:57:05 [notice] 6456#0: getrlimit(RLIMIT_NOFILE): 1024:4096\n2015/02/02 14:57:05 [notice] 6457#0: start worker processes\n2015/02/02 14:57:05 [notice] 6457#0: start worker process 6458\n...\n2015/02/02 14:58:06 [notice] 6457#0: signal 17 (SIGCHLD) received\n2015/02/02 14:58:06 [alert] 6457#0: worker process 6458 exited on signal 7\n...\nwhen starting to use  ngx.timer.at\n. Will do that. I will rebuild our builds with -O1. Later on details.\n. -O1 seems same thing as -O2:\n2015/02/05 21:21:21 [alert] 7006#0: worker process 7007 exited on signal 7\n2015/02/05 21:21:21 [alert] 7006#0: shared memory zone \"timer_locks\" was locked by 7007\nand trying to put gdb on worker, returned these:\nProgram received signal SIGBUS, Bus error.\n0x000b4504 in ngx_http_lua_shdict_get_helper (L=0xb6ad6c48, get_stale=0)\n    at ../ngx_lua-0.9.14/src/ngx_http_lua_shdict.c:486\n486 ../ngx_lua-0.9.14/src/ngx_http_lua_shdict.c: No such file or directory.\n. I hope I did capture all sequences:\nProgram received signal SIGBUS, Bus error.\n0x000b4504 in ngx_http_lua_shdict_get_helper (L=0xb6a2ec48, get_stale=0) at ../ngx_lua-0.9.14/src/ngx_http_lua_shdict.c:486\n486 ../ngx_lua-0.9.14/src/ngx_http_lua_shdict.c: No such file or directory.\n(gdb) disas\nDump of assembler code for function ngx_http_lua_shdict_get_helper:\n   0x000b42d4 <+0>: push    {r4, r5, r6, r7, r8, r10, lr}\n   0x000b42d8 <+4>: sub sp, sp, #36 ; 0x24\n   0x000b42dc <+8>: mov r4, r0\n   0x000b42e0 <+12>:    mov r5, r1\n   0x000b42e4 <+16>:    bl  0x1dab8\n   0x000b42e8 <+20>:    mov r2, r0\n   0x000b42ec <+24>:    cmp r0, #2\n   0x000b42f0 <+28>:    beq 0xb4304 <ngx_http_lua_shdict_get_helper+48>\n   0x000b42f4 <+32>:    mov r0, r4\n   0x000b42f8 <+36>:    ldr r1, [pc, #764]  ; 0xb45fc <ngx_http_lua_shdict_get_helper+808>\n   0x000b42fc <+40>:    bl  0x1de90 <OCSP_RESPONSE_new+480>\n   0x000b4300 <+44>:    b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b4304 <+48>:    mov r0, r4\n   0x000b4308 <+52>:    mov r1, #1\n   0x000b430c <+56>:    bl  0x1d284\n   0x000b4310 <+60>:    subs    r6, r0, #0\n   0x000b4314 <+64>:    bne 0xb4328 <ngx_http_lua_shdict_get_helper+84>\n   0x000b4318 <+68>:    mov r0, r4\n   0x000b431c <+72>:    ldr r1, [pc, #732]  ; 0xb4600 <ngx_http_lua_shdict_get_helper+812>\n   0x000b4320 <+76>:    bl  0x1de90 <OCSP_RESPONSE_new+480>\n   0x000b4324 <+80>:    b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b4328 <+84>:    ldr r7, [r6]\n   0x000b432c <+88>:    add r3, r7, #8\n   0x000b4330 <+92>:    ldm r3, {r0, r1}\n   0x000b4334 <+96>:    add r3, sp, #32\n   0x000b4338 <+100>:   stmdb   r3, {r0, r1}\n   0x000b433c <+104>:   mov r0, r4\n   0x000b4340 <+108>:   mov r1, #2\n   0x000b4344 <+112>:   bl  0x1d9ec\n   0x000b4348 <+116>:   cmp r0, #0\n   0x000b434c <+120>:   bne 0xb4370 <ngx_http_lua_shdict_get_helper+156>\n   0x000b4350 <+124>:   mov r0, r4\n---Type <return> to continue, or q <return> to quit---\n   0x000b4354 <+128>:   bl  0x1df44 <OCSP_RESPONSE_new+660>\n   0x000b4358 <+132>:   mov r0, r4\n   0x000b435c <+136>:   ldr r1, [pc, #672]  ; 0xb4604 <ngx_http_lua_shdict_get_helper+816>\n   0x000b4360 <+140>:   mov r2, #7\n   0x000b4364 <+144>:   bl  0x1de78 <OCSP_RESPONSE_new+456>\n   0x000b4368 <+148>:   mov r0, #2\n   0x000b436c <+152>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b4370 <+156>:   mov r0, r4\n   0x000b4374 <+160>:   mov r1, #2\n   0x000b4378 <+164>:   add r2, sp, #16\n   0x000b437c <+168>:   bl  0x1d230\n   0x000b4380 <+172>:   str r0, [sp, #20]\n   0x000b4384 <+176>:   ldr r3, [sp, #16]\n   0x000b4388 <+180>:   cmp r3, #0\n   0x000b438c <+184>:   bne 0xb43b0 <ngx_http_lua_shdict_get_helper+220>\n   0x000b4390 <+188>:   mov r0, r4\n   0x000b4394 <+192>:   bl  0x1df44 <OCSP_RESPONSE_new+660>\n   0x000b4398 <+196>:   mov r0, r4\n   0x000b439c <+200>:   ldr r1, [pc, #612]  ; 0xb4608 <ngx_http_lua_shdict_get_helper+820>\n   0x000b43a0 <+204>:   mov r2, #9\n   0x000b43a4 <+208>:   bl  0x1de78 <OCSP_RESPONSE_new+456>\n   0x000b43a8 <+212>:   mov r0, #2\n   0x000b43ac <+216>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b43b0 <+220>:   cmp r3, #65536  ; 0x10000\n   0x000b43b4 <+224>:   ldrcc   r2, [pc, #592]  ; 0xb460c <ngx_http_lua_shdict_get_helper+824>\n   0x000b43b8 <+228>:   ldrcc   r1, [r2]\n   0x000b43bc <+232>:   mvncc   r8, #0\n   0x000b43c0 <+236>:   bcc 0xb43e4 <ngx_http_lua_shdict_get_helper+272>\n   0x000b43c4 <+240>:   mov r0, r4\n   0x000b43c8 <+244>:   bl  0x1df44 <OCSP_RESPONSE_new+660>\n   0x000b43cc <+248>:   mov r0, r4\n   0x000b43d0 <+252>:   ldr r1, [pc, #568]  ; 0xb4610 <ngx_http_lua_shdict_get_helper+828>\n   0x000b43d4 <+256>:   mov r2, #12\n---Type <return> to continue, or q <return> to quit---\n   0x000b43d8 <+260>:   bl  0x1de78 <OCSP_RESPONSE_new+456>\n   0x000b43dc <+264>:   mov r0, #2\n   0x000b43e0 <+268>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b43e4 <+272>:   ldrb    r2, [r0], #1\n   0x000b43e8 <+276>:   eor r12, r8, r2\n   0x000b43ec <+280>:   and r12, r12, #15\n   0x000b43f0 <+284>:   ldr r12, [r1, r12, lsl #2]\n   0x000b43f4 <+288>:   eor r8, r12, r8, lsr #4\n   0x000b43f8 <+292>:   eor r2, r8, r2, lsr #4\n   0x000b43fc <+296>:   and r2, r2, #15\n   0x000b4400 <+300>:   ldr r2, [r1, r2, lsl #2]\n   0x000b4404 <+304>:   eor r8, r2, r8, lsr #4\n   0x000b4408 <+308>:   subs    r3, r3, #1\n   0x000b440c <+312>:   bne 0xb43e4 <ngx_http_lua_shdict_get_helper+272>\n   0x000b4410 <+316>:   mvn r8, r8\n   0x000b4414 <+320>:   ldr r0, [r7, #4]\n   0x000b4418 <+324>:   add r0, r0, #44 ; 0x2c\n   0x000b441c <+328>:   bl  0x29ff4 <ngx_shmtx_lock>\n   0x000b4420 <+332>:   cmp r5, #0\n   0x000b4424 <+336>:   bne 0xb4434 <ngx_http_lua_shdict_get_helper+352>\n   0x000b4428 <+340>:   mov r0, r7\n   0x000b442c <+344>:   mov r1, #1\n   0x000b4430 <+348>:   bl  0xb3068 <ngx_http_lua_shdict_expire>\n   0x000b4434 <+352>:   add r3, sp, #12\n   0x000b4438 <+356>:   str r3, [sp]\n   0x000b443c <+360>:   mov r0, r6\n   0x000b4440 <+364>:   mov r1, r8\n   0x000b4444 <+368>:   ldr r2, [sp, #20]\n   0x000b4448 <+372>:   ldr r3, [sp, #16]\n   0x000b444c <+376>:   bl  0xb3198 <ngx_http_lua_shdict_lookup>\n   0x000b4450 <+380>:   mov r6, r0\n   0x000b4454 <+384>:   cmn r0, #5\n   0x000b4458 <+388>:   beq 0xb4468 <ngx_http_lua_shdict_get_helper+404>\n---Type <return> to continue, or q <return> to quit---\n   0x000b445c <+392>:   cmp r5, #0\n   0x000b4460 <+396>:   cmneq   r0, #4\n   0x000b4464 <+400>:   bne 0xb4484 <ngx_http_lua_shdict_get_helper+432>\n   0x000b4468 <+404>:   ldr r0, [r7, #4]\n   0x000b446c <+408>:   add r0, r0, #44 ; 0x2c\n   0x000b4470 <+412>:   bl  0x2a1b4 <ngx_shmtx_unlock>\n   0x000b4474 <+416>:   mov r0, r4\n   0x000b4478 <+420>:   bl  0x1df44 <OCSP_RESPONSE_new+660>\n   0x000b447c <+424>:   mov r0, #1\n   0x000b4480 <+428>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b4484 <+432>:   ldr r2, [sp, #12]\n   0x000b4488 <+436>:   ldrb    r8, [r2, #24]\n   0x000b448c <+440>:   ldrh    r0, [r2, #2]\n   0x000b4490 <+444>:   add r3, r0, #32\n   0x000b4494 <+448>:   add r3, r2, r3\n   0x000b4498 <+452>:   add r1, r3, #4\n   0x000b449c <+456>:   ldr r10, [r2, #28]\n   0x000b44a0 <+460>:   cmp r8, #3\n   0x000b44a4 <+464>:   beq 0xb44cc <ngx_http_lua_shdict_get_helper+504>\n   0x000b44a8 <+468>:   cmp r8, #4\n   0x000b44ac <+472>:   beq 0xb44bc <ngx_http_lua_shdict_get_helper+488>\n   0x000b44b0 <+476>:   cmp r8, #1\n   0x000b44b4 <+480>:   bne 0xb4558 <ngx_http_lua_shdict_get_helper+644>\n   0x000b44b8 <+484>:   b   0xb450c <ngx_http_lua_shdict_get_helper+568>\n   0x000b44bc <+488>:   mov r0, r4\n   0x000b44c0 <+492>:   mov r2, r10\n   0x000b44c4 <+496>:   bl  0x1de78 <OCSP_RESPONSE_new+456>\n   0x000b44c8 <+500>:   b   0xb4580 <ngx_http_lua_shdict_get_helper+684>\n   0x000b44cc <+504>:   cmp r10, #8\n   0x000b44d0 <+508>:   beq 0xb44fc <ngx_http_lua_shdict_get_helper+552>\n   0x000b44d4 <+512>:   ldr r0, [r7, #4]\n   0x000b44d8 <+516>:   add r0, r0, #44 ; 0x2c\n   0x000b44dc <+520>:   bl  0x2a1b4 <ngx_shmtx_unlock>\n---Type <return> to continue, or q <return> to quit---\n   0x000b44e0 <+524>:   str r10, [sp]\n   0x000b44e4 <+528>:   mov r0, r4\n   0x000b44e8 <+532>:   ldr r1, [pc, #292]  ; 0xb4614 <ngx_http_lua_shdict_get_helper+832>\n   0x000b44ec <+536>:   ldr r2, [sp, #20]\n   0x000b44f0 <+540>:   ldr r3, [sp, #28]\n   0x000b44f4 <+544>:   bl  0x1de90 <OCSP_RESPONSE_new+480>\n   0x000b44f8 <+548>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b44fc <+552>:   mov r0, r4\n   0x000b4500 <+556>:   vldr    d0, [r3, #4]\n=> 0x000b4504 <+560>:   bl  0x1d128\n   0x000b4508 <+564>:   b   0xb4580 <ngx_http_lua_shdict_get_helper+684>\n   0x000b450c <+568>:   cmp r10, #1\n   0x000b4510 <+572>:   beq 0xb453c <ngx_http_lua_shdict_get_helper+616>\n   0x000b4514 <+576>:   ldr r0, [r7, #4]\n   0x000b4518 <+580>:   add r0, r0, #44 ; 0x2c\n   0x000b451c <+584>:   bl  0x2a1b4 <ngx_shmtx_unlock>\n   0x000b4520 <+588>:   str r10, [sp]\n   0x000b4524 <+592>:   mov r0, r4\n   0x000b4528 <+596>:   ldr r1, [pc, #232]  ; 0xb4618 <ngx_http_lua_shdict_get_helper+836>\n   0x000b452c <+600>:   ldr r2, [sp, #20]\n   0x000b4530 <+604>:   ldr r3, [sp, #28]\n   0x000b4534 <+608>:   bl  0x1de90 <OCSP_RESPONSE_new+480>\n   0x000b4538 <+612>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b453c <+616>:   add r2, r2, r0\n   0x000b4540 <+620>:   ldrb    r1, [r2, #36]   ; 0x24\n   0x000b4544 <+624>:   mov r0, r4\n   0x000b4548 <+628>:   adds    r1, r1, #0\n   0x000b454c <+632>:   movne   r1, #1\n   0x000b4550 <+636>:   bl  0x1d9bc\n   0x000b4554 <+640>:   b   0xb4580 <ngx_http_lua_shdict_get_helper+684>\n   0x000b4558 <+644>:   ldr r0, [r7, #4]\n   0x000b455c <+648>:   add r0, r0, #44 ; 0x2c\n   0x000b4560 <+652>:   bl  0x2a1b4 <ngx_shmtx_unlock>\n---Type <return> to continue, or q <return> to quit---\n   0x000b4564 <+656>:   str r8, [sp]\n   0x000b4568 <+660>:   mov r0, r4\n   0x000b456c <+664>:   ldr r1, [pc, #168]  ; 0xb461c <ngx_http_lua_shdict_get_helper+840>\n   0x000b4570 <+668>:   ldr r2, [sp, #20]\n   0x000b4574 <+672>:   ldr r3, [sp, #28]\n   0x000b4578 <+676>:   bl  0x1de90 <OCSP_RESPONSE_new+480>\n   0x000b457c <+680>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b4580 <+684>:   ldr r3, [sp, #12]\n   0x000b4584 <+688>:   ldr r8, [r3, #32]\n   0x000b4588 <+692>:   ldr r0, [r7, #4]\n   0x000b458c <+696>:   add r0, r0, #44 ; 0x2c\n   0x000b4590 <+700>:   bl  0x2a1b4 <ngx_shmtx_unlock>\n   0x000b4594 <+704>:   cmp r5, #0\n   0x000b4598 <+708>:   beq 0xb45d8 <ngx_http_lua_shdict_get_helper+772>\n   0x000b459c <+712>:   cmp r8, #0\n   0x000b45a0 <+716>:   beq 0xb45b4 <ngx_http_lua_shdict_get_helper+736>\n   0x000b45a4 <+720>:   mov r0, r4\n   0x000b45a8 <+724>:   mov r1, r8\n   0x000b45ac <+728>:   bl  0x1d194\n   0x000b45b0 <+732>:   b   0xb45bc <ngx_http_lua_shdict_get_helper+744>\n   0x000b45b4 <+736>:   mov r0, r4\n   0x000b45b8 <+740>:   bl  0x1df44 <OCSP_RESPONSE_new+660>\n   0x000b45bc <+744>:   mov r0, r4\n   0x000b45c0 <+748>:   cmn r6, #4\n   0x000b45c4 <+752>:   movne   r1, #0\n   0x000b45c8 <+756>:   moveq   r1, #1\n   0x000b45cc <+760>:   bl  0x1d9bc\n   0x000b45d0 <+764>:   mov r0, #3\n   0x000b45d4 <+768>:   b   0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b45d8 <+772>:   cmp r8, #0\n   0x000b45dc <+776>:   moveq   r0, #1\n   0x000b45e0 <+780>:   beq 0xb45f4 <ngx_http_lua_shdict_get_helper+800>\n   0x000b45e4 <+784>:   mov r0, r4\n---Type <return> to continue, or q <return> to quit---\n   0x000b45e8 <+788>:   mov r1, r8\n   0x000b45ec <+792>:   bl  0x1d194\n   0x000b45f0 <+796>:   mov r0, #2\n   0x000b45f4 <+800>:   add sp, sp, #36 ; 0x24\n   0x000b45f8 <+804>:   pop {r4, r5, r6, r7, r8, r10, pc}\n   0x000b45fc <+808>:   andeq   r10, lr, r4, lsl #6\n   0x000b4600 <+812>:   andeq   r10, lr, r4, lsr #4\n   0x000b4604 <+816>:   andeq   r10, lr, r8, lsr r2\n   0x000b4608 <+820>:   andeq   r10, lr, r0, asr #4\n   0x000b460c <+824>:   andeq   r6, pc, r0, ror #28\n   0x000b4610 <+828>:   andeq   r10, lr, r12, asr #4\n   0x000b4614 <+832>:   andeq   r10, lr, r8, lsr r3\n   0x000b4618 <+836>:   andeq   r10, lr, r12, ror r3\n   0x000b461c <+840>:   andeq   r10, lr, r0, asr #7\nEnd of assembler dump.\n. sweet. if we have something as a new release anytime let me know to re-test. \n. The fix works without any problems. We will keep testing for coming days. I have a ready appliance on RBPi B+ so I will keep it running. If the problem re-occurs I will open a new issue. \n10 x thanks.\n. Still one question: the proposed patch will do ARM and X86, right ? \n. OS information here:\nFreeBSD rpi2 11.0-CURRENT FreeBSD 11.0-CURRENT #9 r288688M: Mon Oct  5 17:21:06 EEST 2015     root@rpi2:/usr/obj/usr/src/sys/RPI2  arm\n. It seems our entire application fails on RBPI2 FreeBSD 11. Not sure why. Something probable to do with OpenResty on FreeBSD ARM. I have tried the authentication, our simplest module, even that fails core dump. \nI tried:\n- Remove optimizations, like below but LuaJIT still on O2. Not sure why. \n```\n% ./configure --prefix=${iprefix} --with-luajit --with-cc-opt=\"-O0\" --with-debug\nplatform: freebsd (freebsd)\ncp -rp bundle/ build\ncd build\ncd LuaJIT-2.1-20151028\ngmake TARGET_STRIP=@: CCDEBUG=-g Q= XCFLAGS='-DLUA_USE_APICHECK -DLUA_USE_ASSERT' CC=cc PREFIX=/opt/kronometrix/auth/luajit\n==== Building LuaJIT 2.1.0-beta1 ====\ngmake -C src\ngmake[1]: Entering directory '/usr/home/krmx/workspace/kronometrix/auth/openresty/ngx_openresty-1.9.3.2/build/LuaJIT-2.1-20151028/src'\nHOSTCC    host/minilua.o\ncc -g -O2 -fomit-frame-pointer -Wall -DLUA_USE_APICHECK -DLUA_USE_ASSERT  -I. -DLUAJIT_TARGET=LUAJIT_ARCH_arm -DLJ_ARCH_HASFPU=0 -DLJ_ABI_SOFTFP=1  -c -o host/minilua.o host/minilua.c\n```\n- I tried to put the nginx server debug mode. Nothing more than these came:\n2015/11/29 22:45:36 [notice] 16506#0: using the \"kqueue\" event method\n2015/11/29 22:45:36 [notice] 16506#0: openresty/1.9.3.2\n2015/11/29 22:45:36 [notice] 16506#0: built by clang 3.7.0 (tags/RELEASE_370/final 246257) 20150906\n2015/11/29 22:45:36 [notice] 16506#0: OS: FreeBSD 11.0-CURRENT\n2015/11/29 22:45:36 [notice] 16506#0: kern.osreldate: 1100089, built on 1100089\n2015/11/29 22:45:36 [notice] 16506#0: hw.ncpu: 4\n2015/11/29 22:45:36 [notice] 16506#0: net.inet.tcp.sendspace: 32768\n2015/11/29 22:45:36 [notice] 16506#0: kern.ipc.somaxconn: 128\n2015/11/29 22:45:36 [notice] 16506#0: getrlimit(RLIMIT_NOFILE): 26946:26946\n2015/11/29 22:45:36 [notice] 16507#0: start worker processes\n2015/11/29 22:45:36 [notice] 16507#0: start worker process 16508\n2015/11/29 22:46:31 [info] 16508#0: *1 [lua] auth.lua:481: check_session(): user token not received, client: 192.168.1.71, server: , request: \"GET / HTTP/1.0\"\n2015/11/29 22:46:58 [notice] 16507#0: signal 20 (SIGCHLD) received\n2015/11/29 22:46:58 [alert] 16507#0: worker process 16508 exited on signal 10 (core dumped)\n2015/11/29 22:46:58 [notice] 16507#0: start worker process 16513\n2015/11/29 22:47:51 [notice] 16507#0: signal 15 (SIGTERM) received, exiting\n2015/11/29 22:47:51 [notice] 16513#0: exiting\n2015/11/29 22:47:51 [notice] 16507#0: signal 23 (SIGIO) received\n2015/11/29 22:47:51 [notice] 16513#0: exit\n2015/11/29 22:47:51 [notice] 16507#0: signal 20 (SIGCHLD) received\n2015/11/29 22:47:51 [notice] 16507#0: worker process 16513 exited with code 0\n2015/11/29 22:47:51 [notice] 16507#0: exit\n- I tried to run the server, nginx via truss (sort of strace from Linux) ... and it seems as soon as we hit timer operations something goes south and we die:\n2015/11/29 22:56:26 [notice] 16653#0: using the \"kqueue\" event method\n2015/11/29 22:56:26 [notice] 16653#0: openresty/1.9.3.2\n2015/11/29 22:56:26 [notice] 16653#0: built by clang 3.7.0 (tags/RELEASE_370/final 246257) 20150906\n2015/11/29 22:56:26 [notice] 16653#0: OS: FreeBSD 11.0-CURRENT\n2015/11/29 22:56:26 [notice] 16653#0: kern.osreldate: 1100089, built on 1100089\n2015/11/29 22:56:26 [notice] 16653#0: hw.ncpu: 4\n2015/11/29 22:56:26 [notice] 16653#0: net.inet.tcp.sendspace: 32768\n2015/11/29 22:56:26 [notice] 16653#0: kern.ipc.somaxconn: 128\n2015/11/29 22:56:26 [notice] 16653#0: getrlimit(RLIMIT_NOFILE): 26946:26946\n2015/11/29 22:56:26 [notice] 16654#0: start worker processes\n2015/11/29 22:56:26 [notice] 16654#0: start worker process 16655\n2015/11/29 22:57:26 [info] 16655#0: [lua] timer.lua:47: Checking for expired users, context: ngx.timer\n2015/11/29 22:57:34 [notice] 16654#0: signal 20 (SIGCHLD) received\n2015/11/29 22:57:34 [alert] 16654#0: worker process 16655 exited on signal 10 (core dumped)\n2015/11/29 22:57:34 [notice] 16654#0: start worker process 16660\n- here behind:\n16712: __sysctl(0xbfbff8a4,0x4,0x0,0x0,0x20673240,0x4) = 0 (0x0)\n16712: kevent(7,{ 5,EVFILT_READ,EV_ADD|EV_ENABLE,0x0,0x0,0x20b18000 6,EVFILT_READ,EV_ADD|EV_ENABLE,0x0,0x0,0x20b180a8 },2,{ },512,0x0) = 0 (0x0)\n16712: gettimeofday({ 1448838474.067278 },0x0)   = 0 (0x0)\n16712: sigprocmask(SIG_BLOCK,0x0,{ })            = 0 (0x0)\n16712: write(4,\"2015/11/29 23:07:54 [info] 16712\"...,103) = 103 (0x67)\n16712: socket(PF_LOCAL,SOCK_STREAM,0)            = 3 (0x3)\n16712: ioctl(3,FIONBIO,0xbfbff54c)               = 0 (0x0)\n16712: connect(3,{ AF_UNIX \"/opt/kronometrix/auth/logs/auth.sock\" },106) = 0 (0x0)\n16712: sendto(3,\"*3\\r\\n$4\\r\\nhget\\r\\n$13\\r\\nsetti\"...,56,0x0,0x20b18818,0x20a3e310) = 56 (0x38)\n16712: kevent(7,{ 3,EVFILT_READ,EV_ADD|EV_ENABLE|EV_CLEAR,0x0,0x0,0x20b18118 },1,{ 3,EVFILT_READ,EV_CLEAR,0x0,0x5,0x20b18118 },512,0x0) = 1 (0x1)\n16712: gettimeofday({ 1448838474.255844 },0x0)   = 0 (0x0)\n16712: recvfrom(3,\"$-1\\r\\n\",4096,0x0,0x1000,0x20a65000) = 5 (0x5)\n16712: sigprocmask(SIG_BLOCK,0x0,{ })            = 0 (0x0)\n16712: sendto(3,\"*2\\r\\n$7\\r\\nhgetall\\r\\n$22\\r\\nus\"...,46,0x0,0x20b18818,0x20a3e310) = 46 (0x2e)\n16712: kevent(7,{ },0,{ 3,EVFILT_READ,EV_CLEAR,0x0,0x4,0x20b18118 },512,0x0) = 1 (0x1)\n16712: gettimeofday({ 1448838474.373804 },0x0)   = 0 (0x0)\n16712: recvfrom(3,\"*0\\r\\n\",4096,0x0,0x1000,0x20a65000) = 4 (0x4)\n16712: sigprocmask(SIG_BLOCK,0x0,{ })            = 0 (0x0)\n16712: SIGNAL 10 (SIGBUS)\n16712: process killed, signal = 10 (core dumped)\n16711: SIGNAL 20 (SIGCHLD)\n16711: sigsuspend({ })                           ERR#20 'Not a directory'\n16711: sigprocmask(SIG_SETMASK,{ SIGHUP|SIGINT|SIGQUIT|SIGALRM|SIGTERM|SIGCHLD|SIGIO|SIGWINCH|SIGUSR1|SIGUSR2 },0x0) = 0 (0x0)\n16711: gettimeofday({ 1448838481.920883 },0x0)   = 0 (0x0)\n16711: write(4,\"2015/11/29 23:08:01 [notice] 167\"...,67) = 67 (0x43)\n16711: wait4(-1,{ SIGNALED,sig=SIGBUS,cored },WNOHANG,0x0) = 16712 (0x4148)\n16711: write(4,\"2015/11/29 23:08:01 [alert] 1671\"...,92) = 92 (0x5c)\n16711: wait4(-1,0xbfbff670,WNOHANG,0x0)          ERR#10 'No child processes'\n16711: sigreturn(0xbfbff6a8)                     ERR#4 'Interrupted system call'\nand here full trace: http://www.kronometrix.org/output.txt \nI will try now to come back to check the debug and optimizations for gdb. \n. and here more details:\n``\nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"armv6-marcel-freebsd\"...\nCore was generated bynginx'.\nProgram terminated with signal 10, Bus error.\nReading symbols from /lib/libcrypt.so.5...done.\nLoaded symbols for /lib/libcrypt.so.5\nReading symbols from /lib/libm.so.5...done.\nLoaded symbols for /lib/libm.so.5\nReading symbols from /usr/local/lib/libpcre.so.1...done.\nLoaded symbols for /usr/local/lib/libpcre.so.1\nReading symbols from /usr/lib/libssl.so.8...done.\nLoaded symbols for /usr/lib/libssl.so.8\nReading symbols from /lib/libcrypto.so.8...done.\nLoaded symbols for /lib/libcrypto.so.8\nReading symbols from /lib/libz.so.6...done.\nLoaded symbols for /lib/libz.so.6\nReading symbols from /lib/libgcc_s.so.1...done.\nLoaded symbols for /lib/libgcc_s.so.1\nReading symbols from /lib/libc.so.7...done.\nLoaded symbols for /lib/libc.so.7\nReading symbols from /lib/libthr.so.3...done.\nLoaded symbols for /lib/libthr.so.3\nReading symbols from /libexec/ld-elf.so.1...done.\nLoaded symbols for /libexec/ld-elf.so.1\n0  0x0015530c in ngx_http_lua_socket_tcp_setkeepalive (L=0x207ab308) at ../ngx_lua-0.9.19/src/ngx_http_lua_socket_tcp.c:4511\n4511                ngx_queue_insert_head(&spool->free, &items[i].queue);\n[New Thread 20a10000 (LWP 100132/)]\n(gdb) bt full\n0  0x0015530c in ngx_http_lua_socket_tcp_setkeepalive (L=0x207ab308) at ../ngx_lua-0.9.19/src/ngx_http_lua_socket_tcp.c:4511\nllcf = (ngx_http_lua_loc_conf_t *) 0x20a9c010\nu = (ngx_http_lua_socket_tcp_upstream_t *) 0x207bdc88\nc = (ngx_connection_t *) 0x20a6a258\nspool = (ngx_http_lua_socket_pool_t *) 0x207c0840\nsize = 16069\nkey = {len = 41, data = 0x207a4930 \"unix:/opt/kronometrix/auth/logs/auth.sock\"}\ni = 0\nq = (ngx_queue_t *) 0x10\npc = (ngx_peer_connection_t *) 0x207bdca8\np = (u_char *) 0x207c0882 \"\"\nr = (ngx_http_request_t *) 0x20a10300\ntimeout = 544845896\npool_size = 100\nn = 3\nrc = 544948360\nb = (ngx_buf_t *) 0x207bdd00\nitems = (ngx_http_lua_socket_pool_item_t *) 0x207c0882\nitem = (ngx_http_lua_socket_pool_item_t *) 0x207ab308\n\n1  0x001c0a68 in lj_BC_FUNCC ()\nNo symbol table info available.\n2  0x001c0a68 in lj_BC_FUNCC ()\nNo symbol table info available.\nCurrent language:  auto; currently minimal\n```\nand from nginx error log:\n2015/11/30 00:09:19 [debug] 27069#0: bind() 0.0.0.0:9001 #5 \n2015/11/30 00:09:19 [notice] 27069#0: using the \"kqueue\" event method\n2015/11/30 00:09:19 [debug] 27069#0: counter: 20267080, 1\n2015/11/30 00:09:19 [notice] 27069#0: openresty/1.9.3.2\n2015/11/30 00:09:19 [notice] 27069#0: built by clang 3.7.0 (tags/RELEASE_370/final 246257) 20150906\n2015/11/30 00:09:19 [notice] 27069#0: OS: FreeBSD 11.0-CURRENT\n2015/11/30 00:09:19 [notice] 27069#0: kern.osreldate: 1100089, built on 1100089\n2015/11/30 00:09:19 [notice] 27069#0: hw.ncpu: 4\n2015/11/30 00:09:19 [notice] 27069#0: net.inet.tcp.sendspace: 32768\n2015/11/30 00:09:19 [notice] 27069#0: kern.ipc.somaxconn: 128\n2015/11/30 00:09:19 [notice] 27069#0: getrlimit(RLIMIT_NOFILE): 26946:26946\n2015/11/30 00:09:19 [debug] 27070#0: write: 6, BFBFF942, 6, 0\n2015/11/30 00:09:19 [notice] 27070#0: start worker processes\n2015/11/30 00:09:19 [debug] 27070#0: channel 3:6\n2015/11/30 00:09:19 [notice] 27070#0: start worker process 27071\n2015/11/30 00:09:19 [debug] 27070#0: sigsuspend\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20B1A000:10240\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20B1C800:10240\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A6A000:3840\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20B33000:1792\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20B33700:1792\n2015/11/30 00:09:19 [debug] 27071#0: kevent set event: 5: ft:-1 fl:0005\n2015/11/30 00:09:19 [debug] 27071#0: posix_memalign: 20AF4000:16384 @16\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A64000:2048\n2015/11/30 00:09:19 [debug] 27071#0: add cleanup: 20B11440\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20AAB0C0:168\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A47070:56\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A6C000:4096\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A6C000:4096\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A6C000:4096\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A6C000:4096\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A5F400:1024\n2015/11/30 00:09:19 [debug] 27071#0: posix_memalign: 20A9C000:16384 @16\n2015/11/30 00:09:19 [debug] 27071#0: add cleanup: 20B13FF0\n2015/11/30 00:09:19 [debug] 27071#0: free: 20AF4000, unused: 15008\n2015/11/30 00:09:19 [debug] 27071#0: posix_memalign: 20A45000:128 @16\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A10300:728\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A4E000:232\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A900E0:216\n2015/11/30 00:09:19 [debug] 27071#0: posix_memalign: 20A45080:128 @16\n2015/11/30 00:09:19 [debug] 27071#0: lua creating fake watcher connection\n2015/11/30 00:09:19 [debug] 27071#0: malloc: 20A1C070:104\n2015/11/30 00:09:19 [debug] 27071#0: posix_memalign: 20A45100:128 @16\n2015/11/30 00:09:19 [debug] 27071#0: event timer add: 1: 60000:1438241055\n2015/11/30 00:09:19 [debug] 27071#0: free: 20A900E0\n2015/11/30 00:09:19 [debug] 27071#0: free: 20A4E000\n2015/11/30 00:09:19 [debug] 27071#0: free: 20A10300\n2015/11/30 00:09:19 [debug] 27071#0: free: 20A45000, unused: 8\n2015/11/30 00:09:19 [debug] 27071#0: free: 20A45080, unused: 104\n2015/11/30 00:09:19 [debug] 27071#0: kevent set event: 6: ft:-1 fl:0005\n2015/11/30 00:09:19 [debug] 27071#0: worker cycle\n2015/11/30 00:09:19 [debug] 27071#0: kevent timer: 60000, changes: 2\n2015/11/30 00:10:20 [debug] 27071#0: kevent events: 0\n2015/11/30 00:10:20 [debug] 27071#0: timer delta: 60258\n2015/11/30 00:10:20 [debug] 27071#0: event timer del: 1: 1438241055\n2015/11/30 00:10:20 [debug] 27071#0: lua ngx.timer expired\n2015/11/30 00:10:20 [debug] 27071#0: malloc: 20A10300:728\n2015/11/30 00:10:20 [debug] 27071#0: malloc: 20A4E000:232\n2015/11/30 00:10:20 [debug] 27071#0: malloc: 20A900E0:216\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45080:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: http cleanup add: 20A450A0\n2015/11/30 00:10:20 [debug] 27071#0: lua run thread, top:0 c:1\n2015/11/30 00:10:20 [debug] 27071#0: malloc: 20A1C070:104\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45000:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: event timer add: 2: 60000:1438301313\n2015/11/30 00:10:20 [debug] 27071#0: shmtx lock\n2015/11/30 00:10:20 [debug] 27071#0: lua shared dict set: creating a new entry\n2015/11/30 00:10:20 [debug] 27071#0: slab alloc: 63 slot: 3\n2015/11/30 00:10:20 [debug] 27071#0: slab alloc: 216010C0\n2015/11/30 00:10:20 [debug] 27071#0: shmtx unlock\n2015/11/30 00:10:20 [info] 27071#0: [lua] timer.lua:47: Checking for expired users, context: ngx.timer\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket pool get keepalive peer\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket keepalive connection pool not found\n2015/11/30 00:10:20 [debug] 27071#0: malloc: 20A1C0E0:106\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket connect timeout: 10000\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45180:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket network address given directly\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket resolve retval handler\n2015/11/30 00:10:20 [debug] 27071#0: socket 3\n2015/11/30 00:10:20 [debug] 27071#0: connect to unix:/opt/kronometrix/auth/logs/auth.sock, fd:3 #1\n2015/11/30 00:10:20 [debug] 27071#0: kevent set event: 3: ft:-1 fl:0025\n2015/11/30 00:10:20 [debug] 27071#0: connected\n2015/11/30 00:10:20 [debug] 27071#0: http cleanup add: 20A451C0\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket connect: 0\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45200:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket connected: fd:3\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket send timeout: 10000\n2015/11/30 00:10:20 [debug] 27071#0: lua allocate new chainlink and new buf of size 56, cl:20A451D0\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45280:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45300:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket send data\n2015/11/30 00:10:20 [debug] 27071#0: send: fd:3 56 of 56\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket sent all the data\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket calling receive() method\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read timeout: 10000\n2015/11/30 00:10:20 [debug] 27071#0: lua allocate new chainlink and new buf of size 4096, cl:20A451E0\n2015/11/30 00:10:20 [debug] 27071#0: posix_memalign: 20A45380:128 @16\n2015/11/30 00:10:20 [debug] 27071#0: malloc: 20A6C000:4096\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read data: wait:0\n2015/11/30 00:10:20 [debug] 27071#0: event timer add: 3: 10000:1438251313\n2015/11/30 00:10:20 [debug] 27071#0: lua resume returned 1\n2015/11/30 00:10:20 [debug] 27071#0: lua thread yielded\n2015/11/30 00:10:20 [debug] 27071#0: http lua finalize fake request: -4, a:1, c:2\n2015/11/30 00:10:20 [debug] 27071#0: http lua fake request count:2\n2015/11/30 00:10:20 [debug] 27071#0: worker cycle\n2015/11/30 00:10:20 [debug] 27071#0: kevent timer: 10000, changes: 1\n2015/11/30 00:10:20 [debug] 27071#0: kevent events: 1\n2015/11/30 00:10:20 [debug] 27071#0: kevent: 3: ft:-1 fl:0020 ff:00000000 d:5 ud:20B33118\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket handler for \"?\", wev 0\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read handler\n2015/11/30 00:10:20 [debug] 27071#0: event timer del: 3: 1438251313\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read data: wait:1\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket try to recv data 4096: \"?\"\n2015/11/30 00:10:20 [debug] 27071#0: recv: eof:0, avail:5, err:0\n2015/11/30 00:10:20 [debug] 27071#0: recv: fd:3 5 of 4096\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket recv returned 5: \"?\"\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read line\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read the final line part: \"$-1^M\"\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket receive done: wait:1, eof:0, uri:\"?\"\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket waking up the current request (read)\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp operation done, resuming lua thread\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket calling prepare retvals handler 0015ABCC, u:207BDC88\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket receive return value handler\n2015/11/30 00:10:20 [debug] 27071#0: lua run thread, top:0 c:1\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket send timeout: 10000\n2015/11/30 00:10:20 [debug] 27071#0: lua reuse free buf memory 56 >= 46, cl:20A451D0, p:20A45310\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket send data\n2015/11/30 00:10:20 [debug] 27071#0: send: fd:3 46 of 46\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket sent all the data\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket calling receive() method\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read timeout: 10000\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read data: wait:0\n2015/11/30 00:10:20 [debug] 27071#0: event timer add: 3: 10000:1438251323\n2015/11/30 00:10:20 [debug] 27071#0: lua resume returned 1\n2015/11/30 00:10:20 [debug] 27071#0: lua thread yielded\n2015/11/30 00:10:20 [debug] 27071#0: lua run thread returned -2\n2015/11/30 00:10:20 [debug] 27071#0: timer delta: 10\n2015/11/30 00:10:20 [debug] 27071#0: worker cycle\n2015/11/30 00:10:20 [debug] 27071#0: kevent timer: 10000, changes: 0\n2015/11/30 00:10:20 [debug] 27071#0: kevent events: 1\n2015/11/30 00:10:20 [debug] 27071#0: kevent: 3: ft:-1 fl:0020 ff:00000000 d:4 ud:20B33118\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket handler for \"?\", wev 0\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read handler\n2015/11/30 00:10:20 [debug] 27071#0: event timer del: 3: 1438251323\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read data: wait:1\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket try to recv data 4096: \"?\"\n2015/11/30 00:10:20 [debug] 27071#0: recv: eof:0, avail:4, err:0\n2015/11/30 00:10:20 [debug] 27071#0: recv: fd:3 4 of 4096\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket recv returned 4: \"?\"\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read line\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket read the final line part: \"*0^M\"\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket receive done: wait:1, eof:0, uri:\"?\"\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket waking up the current request (read)\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp operation done, resuming lua thread\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket calling prepare retvals handler 0015ABCC, u:207BDC88\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket receive return value handler\n2015/11/30 00:10:20 [debug] 27071#0: lua run thread, top:0 c:1\n2015/11/30 00:10:20 [debug] 27071#0: shmtx lock\n2015/11/30 00:10:20 [debug] 27071#0: slab free: 216010C0\n2015/11/30 00:10:20 [debug] 27071#0: shmtx unlock\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket set keepalive: saving connection 20A6A258\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket connection pool size: 100\n2015/11/30 00:10:20 [debug] 27071#0: lua tcp socket keepalive create connection pool for key \"unix:/opt/kronometrix/auth/logs/auth.sock\"\n2015/11/30 00:10:38 [notice] 27070#0: signal 20 (SIGCHLD) received\n2015/11/30 00:10:38 [alert] 27070#0: worker process 27071 exited on signal 10 (core dumped)\n2015/11/30 00:10:38 [debug] 27070#0: shmtx forced unlock\n2015/11/30 00:10:38 [debug] 27070#0: shmtx forced unlock\n2015/11/30 00:10:38 [debug] 27070#0: shmtx forced unlock\n2015/11/30 00:10:38 [debug] 27070#0: wake up, sigio 0\n2015/11/30 00:10:38 [debug] 27070#0: reap children\n2015/11/30 00:10:38 [debug] 27070#0: child: 0 27071 e:0 t:1 d:0 r:1 j:0\n2015/11/30 00:10:38 [debug] 27070#0: channel 3:6\n2015/11/30 00:10:38 [notice] 27070#0: start worker process 27077\n2015/11/30 00:10:38 [debug] 27070#0: sigsuspend\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20B1A000:10240\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20B1C800:10240\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A6A000:3840\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20B33000:1792\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20B33700:1792\n2015/11/30 00:10:38 [debug] 27077#0: kevent set event: 5: ft:-1 fl:0005\n2015/11/30 00:10:38 [debug] 27077#0: posix_memalign: 20AF4000:16384 @16\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A64000:2048\n2015/11/30 00:10:38 [debug] 27077#0: add cleanup: 20B11440\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20AAB0C0:168\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A47070:56\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A6C000:4096\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A6C000:4096\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A6C000:4096\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A6C000:4096\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A5F400:1024\n2015/11/30 00:10:38 [debug] 27077#0: posix_memalign: 20A9C000:16384 @16\n2015/11/30 00:10:38 [debug] 27077#0: add cleanup: 20B13FF0\n2015/11/30 00:10:38 [debug] 27077#0: free: 20AF4000, unused: 15008\n2015/11/30 00:10:38 [debug] 27077#0: posix_memalign: 20A45000:128 @16\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A10300:728\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A4E000:232\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A900E0:216\n2015/11/30 00:10:38 [debug] 27077#0: posix_memalign: 20A45080:128 @16\n2015/11/30 00:10:38 [debug] 27077#0: lua creating fake watcher connection\n2015/11/30 00:10:38 [debug] 27077#0: malloc: 20A1C070:104\n2015/11/30 00:10:38 [debug] 27077#0: posix_memalign: 20A45100:128 @16\n2015/11/30 00:10:38 [debug] 27077#0: event timer add: 1: 60000:1438319281\n2015/11/30 00:10:38 [debug] 27077#0: free: 20A900E0\n2015/11/30 00:10:38 [debug] 27077#0: free: 20A4E000\n2015/11/30 00:10:38 [debug] 27077#0: free: 20A10300\n2015/11/30 00:10:38 [debug] 27077#0: free: 20A45000, unused: 8\n2015/11/30 00:10:38 [debug] 27077#0: free: 20A45080, unused: 104\n2015/11/30 00:10:38 [debug] 27077#0: kevent set event: 6: ft:-1 fl:0005\n2015/11/30 00:10:38 [debug] 27077#0: worker cycle\n2015/11/30 00:10:38 [debug] 27077#0: kevent timer: 60000, changes: 2\n2015/11/30 00:11:30 [notice] 27070#0: signal 15 (SIGTERM) received, exiting\n2015/11/30 00:11:30 [debug] 27070#0: wake up, sigio 0\n2015/11/30 00:11:30 [debug] 27070#0: child: 0 27077 e:0 t:0 d:0 r:1 j:0\n2015/11/30 00:11:30 [debug] 27070#0: termination cycle: 50\n2015/11/30 00:11:30 [debug] 27070#0: sigsuspend\n2015/11/30 00:11:30 [debug] 27077#0: kevent events: 1\n2015/11/30 00:11:30 [debug] 27077#0: kevent: 6: ft:-1 fl:0000 ff:00000000 d:16 ud:20B330A8\n2015/11/30 00:11:30 [debug] 27077#0: channel handler\n2015/11/30 00:11:30 [debug] 27077#0: channel: 16\n2015/11/30 00:11:30 [notice] 27070#0: signal 23 (SIGIO) received\n2015/11/30 00:11:30 [debug] 27077#0: channel command: 4\n2015/11/30 00:11:30 [debug] 27070#0: wake up, sigio 3\n2015/11/30 00:11:30 [debug] 27077#0: channel: -2\n2015/11/30 00:11:30 [debug] 27070#0: termination cycle: 50\n2015/11/30 00:11:30 [debug] 27077#0: timer delta: 52637\n2015/11/30 00:11:30 [debug] 27070#0: sigsuspend\n2015/11/30 00:11:30 [notice] 27077#0: exiting\n2015/11/30 00:11:30 [debug] 27077#0: flush files\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20B13FF0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20B11440\n2015/11/30 00:11:30 [debug] 27077#0: cleanup resolver\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF26A0\n2015/11/30 00:11:30 [debug] 27077#0: decrementing the reference count for Lua VM: 1\n2015/11/30 00:11:30 [debug] 27077#0: lua close the global Lua VM 2078F1C0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1D00\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1CE0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1CC0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1CA0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1C80\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1C60\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1C40\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1C20\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1C00\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1BE0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1BC0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1BA0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1B80\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1B60\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1B40\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1B20\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1B00\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1AE0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1AC0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1AA0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1A80\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1A60\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1A40\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1A20\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF1A00\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF19E0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF19C0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AF19A0\n2015/11/30 00:11:30 [debug] 27077#0: run cleanup: 20AA8D90\n2015/11/30 00:11:30 [debug] 27077#0: cleanup resolver\n2015/11/30 00:11:30 [debug] 27077#0: free: 20A6B000\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AB3000\n2015/11/30 00:11:30 [debug] 27077#0: free: 20A97000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AA1000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AA6000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AAE000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AC2000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AC7000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20ACC000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AD1000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AD6000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20ADB000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AE0000, unused: 0\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AE5000, unused: 2\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AEA000, unused: 6\n2015/11/30 00:11:30 [debug] 27077#0: free: 20AEF000, unused: 11\n2015/11/30 00:11:30 [debug] 27077#0: free: 20B10000, unused: 4\n2015/11/30 00:11:30 [debug] 27077#0: free: 20A9C000, unused: 15512\n2015/11/30 00:11:30 [notice] 27077#0: exit\n2015/11/30 00:11:30 [notice] 27070#0: signal 20 (SIGCHLD) received\n2015/11/30 00:11:30 [notice] 27070#0: worker process 27077 exited with code 0\n2015/11/30 00:11:30 [debug] 27070#0: shmtx forced unlock\n2015/11/30 00:11:30 [debug] 27070#0: shmtx forced unlock\n2015/11/30 00:11:30 [debug] 27070#0: shmtx forced unlock\n2015/11/30 00:11:30 [debug] 27070#0: wake up, sigio 2\n2015/11/30 00:11:30 [debug] 27070#0: reap children\n2015/11/30 00:11:30 [debug] 27070#0: child: 0 27077 e:1 t:1 d:0 r:1 j:0\n2015/11/30 00:11:30 [notice] 27070#0: exit\n2015/11/30 00:11:30 [debug] 27070#0: close listening 0.0.0.0:9001 #5 \n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF26A0\n2015/11/30 00:11:30 [debug] 27070#0: decrementing the reference count for Lua VM: 1\n2015/11/30 00:11:30 [debug] 27070#0: lua close the global Lua VM 2078F1C0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1D00\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1CE0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1CC0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1CA0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1C80\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1C60\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1C40\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1C20\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1C00\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1BE0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1BC0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1BA0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1B80\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1B60\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1B40\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1B20\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1B00\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1AE0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1AC0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1AA0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1A80\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1A60\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1A40\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1A20\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF1A00\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF19E0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF19C0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AF19A0\n2015/11/30 00:11:30 [debug] 27070#0: run cleanup: 20AA8D90\n2015/11/30 00:11:30 [debug] 27070#0: cleanup resolver\n2015/11/30 00:11:30 [debug] 27070#0: free: 20A6B000\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AB3000\n2015/11/30 00:11:30 [debug] 27070#0: free: 20A97000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AA1000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AA6000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AA6000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AAE000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AC2000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AC7000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20ACC000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AD1000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AD6000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20ADB000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AE0000, unused: 0\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AE5000, unused: 2\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AEA000, unused: 6\n2015/11/30 00:11:30 [debug] 27070#0: free: 20AEF000, unused: 559\n2015/11/30 00:11:30 [debug] 27070#0: free: 20B10000, unused: 12784\n. I tried as well to use a much lower connection pool from our code, from 100 to 10. Same results: core dump. Yes, it seems some sort of memory corruption:\n```\n0  0x0015530c in ngx_http_lua_socket_tcp_setkeepalive (L=0x207ab308) at ../ngx_lua-0.9.19/src/ngx_http_lua_socket_tcp.c:4511\n4511                ngx_queue_insert_head(&spool->free, &items[i].queue);\n[New Thread 20a10000 (LWP 100112/)]\n(gdb) bt full\n0  0x0015530c in ngx_http_lua_socket_tcp_setkeepalive (L=0x207ab308) at ../ngx_lua-0.9.19/src/ngx_http_lua_socket_tcp.c:4511\nllcf = (ngx_http_lua_loc_conf_t *) 0x20a9c010\nu = (ngx_http_lua_socket_tcp_upstream_t *) 0x207bdc88\nc = (ngx_connection_t *) 0x20b33858\nspool = (ngx_http_lua_socket_pool_t *) 0x207b6af0\nsize = 1669\nkey = {len = 41, data = 0x207a4930 \"unix:/opt/kronometrix/auth/logs/auth.sock\"}\ni = 0\nq = (ngx_queue_t *) 0x10\npc = (ngx_peer_connection_t *) 0x207bdca8\np = (\nu_char *) 0x207b6b32 \"y \ufffd\ufffd\ufffd\ufffd\\b\ufffdy \ufffd\ufffd\ufffd\ufffd\ufffdMy \ufffd\ufffd\ufffd\ufffd(\ufffdy \ufffd\ufffd\ufffd\ufffd@\ufffdy \ufffd\ufffd\ufffd\ufffdX\ufffdz \ufffd\ufffd\ufffd\ufffd`\ufffdy \ufffd\ufffd\ufffd\ufffdx@y \ufffd\ufffd\ufffd\ufffd\\210\\201{ \ufffd\ufffd\ufffd\ufffd\ufffd\\201{ \ufffd\ufffd\ufffd\ufffd\ufffd\\220y \ufffd\ufffd\ufffd\ufffd \\027{ \ufffd\ufffd\ufffd\ufffd\ufffd\\237z \ufffd\ufffd\ufffd\ufffd@\\027{ \ufffd\ufffd\ufffd\ufffd\\230'{ \ufffd\ufffd\ufffd\ufffd\ufffd'{ \ufffd\ufffd\ufffd\ufffd\\210\ufffdy \ufffd\ufffd\ufffd\ufffd\ufffd({ \ufffd\ufffd\ufffd\ufffd\ufffd({ \ufffd\ufffd\ufffd\ufffd bz \ufffd\ufffd\ufffd\ufffdh\ufffdy \ufffd\ufffd\ufffd\ufffd@bz \ufffd\ufffd\ufffd\ufffd\ufffd\\216y \ufffd\ufffd\ufffd\ufffd\\b\\217y \ufffd\ufffd\ufffd\ufffd\\bL{ \ufffd\ufffd\ufffd\ufffd(L\"...\nr = (ngx_http_request_t *) 0x20a10300\ntimeout = 544845896\npool_size = 10\nn = 3\nrc = 544948360\nb = (ngx_buf_t *) 0x207bdd00\nitems = (ngx_http_lua_socket_pool_item_t *) 0x207b6b32\nitem = (ngx_http_lua_socket_pool_item_t *) 0x207ab308\n\n1  0x001c0a68 in lj_BC_FUNCC ()\nNo symbol table info available.\n2  0x001c0a68 in lj_BC_FUNCC ()\nNo symbol table info available.\nCurrent language:  auto; currently minimal\n```\n. And here a bit more info:\n(gdb)  x/16i $pc\n0x15530c <ngx_http_lua_socket_tcp_setkeepalive+1980>:   str r0, [r1, #8]\n0x155310 <ngx_http_lua_socket_tcp_setkeepalive+1984>:   ldr r0, [r11, #-40]\n0x155314 <ngx_http_lua_socket_tcp_setkeepalive+1988>:   ldr r1, [sp, #56]\n0x155318 <ngx_http_lua_socket_tcp_setkeepalive+1992>:   add r0, r0, r0, lsl #2\n0x15531c <ngx_http_lua_socket_tcp_setkeepalive+1996>:   add r0, r1, r0, lsl #5\n0x155320 <ngx_http_lua_socket_tcp_setkeepalive+2000>:   add r1, r0, #4  ; 0x4\n0x155324 <ngx_http_lua_socket_tcp_setkeepalive+2004>:   ldr r0, [r0, #8]\n0x155328 <ngx_http_lua_socket_tcp_setkeepalive+2008>:   str r1, [r0]\n0x15532c <ngx_http_lua_socket_tcp_setkeepalive+2012>:   ldr r0, [r11, #-24]\n0x155330 <ngx_http_lua_socket_tcp_setkeepalive+2016>:   add r0, r0, #16 ; 0x10\n0x155334 <ngx_http_lua_socket_tcp_setkeepalive+2020>:   ldr r1, [r11, #-40]\n0x155338 <ngx_http_lua_socket_tcp_setkeepalive+2024>:   ldr r2, [sp, #56]\n0x15533c <ngx_http_lua_socket_tcp_setkeepalive+2028>:   add r1, r1, r1, lsl #2\n0x155340 <ngx_http_lua_socket_tcp_setkeepalive+2032>:   add r1, r2, r1, lsl #5\n0x155344 <ngx_http_lua_socket_tcp_setkeepalive+2036>:   str r0, [r1, #4]\n0x155348 <ngx_http_lua_socket_tcp_setkeepalive+2040>:   ldr r0, [r11, #-40]\n(gdb) info registers\nr0             0x207b6b00   544959232\nr1             0x207b6b32   544959282\nr2             0x207b6b32   544959282\nr3             0x207b6b31   544959281\nr4             0x7f8    2040\nr5             0x207b2f68   544943976\nr6             0x2078f2cc   544797388\nr7             0x2078fd30   544800048\nr8             0x207ab308   544912136\nr9             0x207b4018   544948248\nr10            0x207b40b8   544948408\nr11            0xbfbff4d0   -1077938992\nr12            0x6b 107\nsp             0xbfbff448   -1077939128\nlr             0x1552b0 1397424\npc             0x15530c 1397516\nfps            0xbfbff2e0   -1077939488\ncpsr           0x80000010   -2147483632\n. If you need access to this system pls let me know. I can arrange that for you.\n. Patch works. Super. \nNow at least our basic auth instance been up for +5 minutes :) I will keep testing this during Mon and then final report. 10 x thanks.\n. Yes, I need to take module by module from Kronometrix to ensure they work properly. auth seems stable. then there will be the kernel which is a bit more complicated. I will log issues separately, if we still have problems :) \n. Yes, it seems this problem fixed with the current patch, fixes one type of core dump. Basically auth, kernel-stats were crashing due the ngx_http_lua_socket_tcp_setkeepalive issue. I can confirm now that this has worked for some time +1hr without an issue. \nSo I will close for time being this issue and focus on the second type of crash, the kernel-aggregates.\nThank you for the first patch.\n. kernel-aggregates still crashing. It might be a totally different thing than #130. I will start to look deeper and provide more info.\n. This is more tricky. The nginx instance crashes as soon as I start it. Very hard to attach with gdb on the running process to inspect anything. I will try. \nWhat Im able to see is this:\n``\nrmx@rpi2:/opt/kronometrix/kernel/nginx/logs % gdb /opt/kronometrix/kernel/nginx/sbin/nginx nginx.core \nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"armv6-marcel-freebsd\"...\nCore was generated bynginx'.\nProgram terminated with signal 11, Segmentation fault.\nReading symbols from /lib/libcrypt.so.5...done.\nLoaded symbols for /lib/libcrypt.so.5\nReading symbols from /lib/libm.so.5...done.\nLoaded symbols for /lib/libm.so.5\nReading symbols from /usr/local/lib/libpcre.so.1...done.\nLoaded symbols for /usr/local/lib/libpcre.so.1\nReading symbols from /usr/lib/libssl.so.8...done.\nLoaded symbols for /usr/lib/libssl.so.8\nReading symbols from /lib/libcrypto.so.8...done.\nLoaded symbols for /lib/libcrypto.so.8\nReading symbols from /lib/libz.so.6...done.\nLoaded symbols for /lib/libz.so.6\nReading symbols from /lib/libgcc_s.so.1...done.\nLoaded symbols for /lib/libgcc_s.so.1\nReading symbols from /lib/libc.so.7...done.\nLoaded symbols for /lib/libc.so.7\nReading symbols from /lib/libthr.so.3...done.\nLoaded symbols for /lib/libthr.so.3\nReading symbols from /opt/kronometrix/kernel/lualib/lfs.so...done.\nLoaded symbols for /opt/kronometrix/kernel/lualib/lfs.so\nReading symbols from /opt/kronometrix/kernel/lualib/cjson.so...done.\nLoaded symbols for /opt/kronometrix/kernel/lualib/cjson.so\nReading symbols from /libexec/ld-elf.so.1...done.\nLoaded symbols for /libexec/ld-elf.so.1\n0  0x00000000 in ?? ()\n[New Thread 20a10000 (LWP 100131/)]\n```\n(gdb) info registers\nr0             0x1  1\nr1             0x40080000   1074266112\nr2             0x0  0\nr3             0x40080000   1074266112\nr4             0x16 22\nr5             0x10 16\nr6             0x207c889c   545032348\nr7             0x207ab480   544912512\nr8             0x207ab480   544912512\nr9             0x207ee030   545185840\nr10            0x207e88b0   545163440\nr11            0x207ee040   545185856\nr12            0x0  0\nsp             0xbfbff738   -1077938376\nlr             0x20666360   543581024\npc             0x0  0\nfps            0x20524  132388\ncpsr           0x60000010   1610612752\n(gdb)  x/16i $pc\n0x0:    Cannot access memory at address 0x0\nand on the error.log I see:\n2015/11/30 16:09:37 [debug] 63791#0: bind() 0.0.0.0:9003 #5 \n2015/11/30 16:09:37 [notice] 63791#0: using the \"kqueue\" event method\n2015/11/30 16:09:37 [debug] 63791#0: counter: 20267080, 1\n2015/11/30 16:09:37 [notice] 63791#0: openresty/1.9.3.2\n2015/11/30 16:09:37 [notice] 63791#0: built by clang 3.7.0 (tags/RELEASE_370/final 246257) 20150906\n2015/11/30 16:09:37 [notice] 63791#0: OS: FreeBSD 11.0-CURRENT\n2015/11/30 16:09:37 [notice] 63791#0: kern.osreldate: 1100089, built on 1100089\n2015/11/30 16:09:37 [notice] 63791#0: hw.ncpu: 4\n2015/11/30 16:09:37 [notice] 63791#0: net.inet.tcp.sendspace: 32768\n2015/11/30 16:09:37 [notice] 63791#0: kern.ipc.somaxconn: 128\n2015/11/30 16:09:37 [notice] 63791#0: getrlimit(RLIMIT_NOFILE): 26946:26946\n2015/11/30 16:09:37 [debug] 63792#0: write: 6, BFBFFA02, 6, 0\n2015/11/30 16:09:37 [notice] 63792#0: start worker processes\n2015/11/30 16:09:37 [debug] 63792#0: channel 3:6\n2015/11/30 16:09:37 [notice] 63792#0: start worker process 63793\n2015/11/30 16:09:37 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20AE7000:10240\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20AE9800:10240\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20B00C00:122880\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20B21580:57344\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20B30F80:57344\n2015/11/30 16:09:37 [debug] 63793#0: kevent set event: 5: ft:-1 fl:0005\n2015/11/30 16:09:37 [debug] 63793#0: posix_memalign: 20A9A000:16384 @16\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A64000:2048\n2015/11/30 16:09:37 [debug] 63793#0: add cleanup: 20AAED80\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20AA90C0:168\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A47000:56\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: posix_memalign: 20B3F000:16384 @16\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A6A000:4096\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A6A000:4096\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A6A000:4096\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A6A000:4096\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A5F400:1024\n2015/11/30 16:09:37 [debug] 63793#0: add cleanup: 20B40B80\n2015/11/30 16:09:37 [debug] 63793#0: free: 20A9A000, unused: 15008\n2015/11/30 16:09:37 [debug] 63793#0: posix_memalign: 20A45000:128 @16\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A10600:728\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A4E000:232\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20B44000:216\n2015/11/30 16:09:37 [debug] 63793#0: posix_memalign: 20A45080:128 @16\n2015/11/30 16:09:37 [debug] 63793#0: fetching key \"workers_no\" in shared dict \"workers\"\n2015/11/30 16:09:37 [debug] 63793#0: shmtx lock\n2015/11/30 16:09:37 [debug] 63793#0: shmtx unlock\n2015/11/30 16:09:37 [debug] 63793#0: shmtx lock\n2015/11/30 16:09:37 [debug] 63793#0: lua shared dict set: creating a new entry\n2015/11/30 16:09:37 [debug] 63793#0: slab alloc: 70 slot: 4\n2015/11/30 16:09:37 [debug] 63793#0: slab alloc: 20D02000\n2015/11/30 16:09:37 [debug] 63793#0: shmtx unlock\n2015/11/30 16:09:37 [debug] 63793#0: shmtx lock\n2015/11/30 16:09:37 [debug] 63793#0: lua shared dict set: creating a new entry\n2015/11/30 16:09:37 [debug] 63793#0: slab alloc: 65 slot: 4\n2015/11/30 16:09:37 [debug] 63793#0: slab alloc: 20D02080\n2015/11/30 16:09:37 [debug] 63793#0: shmtx unlock\n2015/11/30 16:09:37 [debug] 63793#0: lua creating fake watcher connection\n2015/11/30 16:09:37 [debug] 63793#0: malloc: 20A1C070:104\n2015/11/30 16:09:37 [debug] 63793#0: posix_memalign: 20A45100:128 @16\n2015/11/30 16:09:37 [debug] 63793#0: event timer add: 1: 1000:1495799625\n2015/11/30 16:09:37 [debug] 63793#0: free: 20B44000\n2015/11/30 16:09:37 [debug] 63793#0: free: 20A4E000\n2015/11/30 16:09:37 [debug] 63793#0: free: 20A10600\n2015/11/30 16:09:37 [debug] 63793#0: free: 20A45000, unused: 8\n2015/11/30 16:09:37 [debug] 63793#0: free: 20A45080, unused: 104\n2015/11/30 16:09:37 [debug] 63793#0: kevent set event: 6: ft:-1 fl:0005\n2015/11/30 16:09:37 [debug] 63793#0: worker cycle\n2015/11/30 16:09:37 [debug] 63793#0: kevent timer: 1000, changes: 2\n2015/11/30 16:09:38 [debug] 63793#0: kevent events: 0\n2015/11/30 16:09:38 [debug] 63793#0: timer delta: 1247\n2015/11/30 16:09:38 [debug] 63793#0: event timer del: 1: 1495799625\n2015/11/30 16:09:38 [debug] 63793#0: lua ngx.timer expired\n2015/11/30 16:09:38 [debug] 63793#0: malloc: 20A10600:728\n2015/11/30 16:09:38 [debug] 63793#0: malloc: 20A4E000:232\n2015/11/30 16:09:38 [debug] 63793#0: malloc: 20B44000:216\n2015/11/30 16:09:38 [debug] 63793#0: posix_memalign: 20A45080:128 @16\n2015/11/30 16:09:38 [debug] 63793#0: http cleanup add: 20A450A0\n2015/11/30 16:09:38 [debug] 63793#0: lua run thread, top:0 c:1\n2015/11/30 16:09:38 [debug] 63793#0: fetching key \"workers_no\" in shared dict \"workers\"\n2015/11/30 16:09:38 [debug] 63793#0: shmtx lock\n2015/11/30 16:09:38 [debug] 63793#0: shmtx unlock\n2015/11/30 16:09:38 [debug] 63793#0: fetching key \"63793\" in shared dict \"workers\"\n2015/11/30 16:09:38 [debug] 63793#0: shmtx lock\n2015/11/30 16:09:38 [debug] 63793#0: shmtx unlock\n2015/11/30 16:09:43 [notice] 63792#0: signal 20 (SIGCHLD) received\n2015/11/30 16:09:43 [alert] 63792#0: worker process 63793 exited on signal 11 (core dumped)\n2015/11/30 16:09:43 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:43 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:43 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:43 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:43 [debug] 63792#0: reap children\n2015/11/30 16:09:43 [debug] 63792#0: child: 0 63793 e:0 t:1 d:0 r:1 j:0\n2015/11/30 16:09:43 [debug] 63792#0: channel 3:6\n2015/11/30 16:09:43 [notice] 63792#0: start worker process 63795\n2015/11/30 16:09:43 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20AE7000:10240\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20AE9800:10240\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20B00C00:122880\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20B21580:57344\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20B30F80:57344\n2015/11/30 16:09:43 [debug] 63795#0: kevent set event: 5: ft:-1 fl:0005\n2015/11/30 16:09:43 [debug] 63795#0: posix_memalign: 20A9A000:16384 @16\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A64000:2048\n2015/11/30 16:09:43 [debug] 63795#0: add cleanup: 20AAED80\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20AA90C0:168\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A47000:56\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: posix_memalign: 20B3F000:16384 @16\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A6A000:4096\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A6A000:4096\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A6A000:4096\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A6A000:4096\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A5F400:1024\n2015/11/30 16:09:43 [debug] 63795#0: add cleanup: 20B40B80\n2015/11/30 16:09:43 [debug] 63795#0: free: 20A9A000, unused: 15008\n2015/11/30 16:09:43 [debug] 63795#0: posix_memalign: 20A45000:128 @16\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A10600:728\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A4E000:232\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20B44000:216\n2015/11/30 16:09:43 [debug] 63795#0: posix_memalign: 20A45080:128 @16\n2015/11/30 16:09:43 [debug] 63795#0: fetching key \"workers_no\" in shared dict \"workers\"\n2015/11/30 16:09:43 [debug] 63795#0: shmtx lock\n2015/11/30 16:09:43 [debug] 63795#0: shmtx unlock\n2015/11/30 16:09:43 [debug] 63795#0: shmtx lock\n2015/11/30 16:09:43 [debug] 63795#0: shmtx unlock\n2015/11/30 16:09:43 [debug] 63795#0: shmtx lock\n2015/11/30 16:09:43 [debug] 63795#0: lua shared dict set: creating a new entry\n2015/11/30 16:09:43 [debug] 63795#0: slab alloc: 65 slot: 4\n2015/11/30 16:09:43 [debug] 63795#0: slab alloc: 20D02100\n2015/11/30 16:09:43 [debug] 63795#0: shmtx unlock\n2015/11/30 16:09:43 [debug] 63795#0: lua creating fake watcher connection\n2015/11/30 16:09:43 [debug] 63795#0: malloc: 20A1C070:104\n2015/11/30 16:09:43 [debug] 63795#0: posix_memalign: 20A45100:128 @16\n2015/11/30 16:09:43 [debug] 63795#0: event timer add: 1: 1000:1495805748\n2015/11/30 16:09:43 [debug] 63795#0: free: 20B44000\n2015/11/30 16:09:43 [debug] 63795#0: free: 20A4E000\n2015/11/30 16:09:43 [debug] 63795#0: free: 20A10600\n2015/11/30 16:09:43 [debug] 63795#0: free: 20A45000, unused: 8\n2015/11/30 16:09:43 [debug] 63795#0: free: 20A45080, unused: 104\n2015/11/30 16:09:43 [debug] 63795#0: kevent set event: 6: ft:-1 fl:0005\n2015/11/30 16:09:43 [debug] 63795#0: worker cycle\n2015/11/30 16:09:43 [debug] 63795#0: kevent timer: 1000, changes: 2\n2015/11/30 16:09:44 [debug] 63795#0: kevent events: 0\n2015/11/30 16:09:44 [debug] 63795#0: timer delta: 1074\n2015/11/30 16:09:44 [debug] 63795#0: event timer del: 1: 1495805748\n2015/11/30 16:09:44 [debug] 63795#0: lua ngx.timer expired\n2015/11/30 16:09:44 [debug] 63795#0: malloc: 20A10600:728\n2015/11/30 16:09:44 [debug] 63795#0: malloc: 20A4E000:232\n2015/11/30 16:09:44 [debug] 63795#0: malloc: 20B44000:216\n2015/11/30 16:09:44 [debug] 63795#0: posix_memalign: 20A45080:128 @16\n2015/11/30 16:09:44 [debug] 63795#0: http cleanup add: 20A450A0\n2015/11/30 16:09:44 [debug] 63795#0: lua run thread, top:0 c:1\n2015/11/30 16:09:44 [debug] 63795#0: fetching key \"workers_no\" in shared dict \"workers\"\n2015/11/30 16:09:44 [debug] 63795#0: shmtx lock\n2015/11/30 16:09:44 [debug] 63795#0: shmtx unlock\n2015/11/30 16:09:44 [debug] 63795#0: fetching key \"63795\" in shared dict \"workers\"\n2015/11/30 16:09:44 [debug] 63795#0: shmtx lock\n2015/11/30 16:09:44 [debug] 63795#0: shmtx unlock\n2015/11/30 16:09:50 [notice] 63792#0: signal 20 (SIGCHLD) received\n2015/11/30 16:09:50 [alert] 63792#0: worker process 63795 exited on signal 11 (core dumped)\n2015/11/30 16:09:50 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:50 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:50 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:50 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:50 [debug] 63792#0: reap children\n2015/11/30 16:09:50 [debug] 63792#0: child: 0 63795 e:0 t:1 d:0 r:1 j:0\n2015/11/30 16:09:50 [debug] 63792#0: channel 3:6\n2015/11/30 16:09:50 [notice] 63792#0: start worker process 63800\n2015/11/30 16:09:50 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20AE7000:10240\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20AE9800:10240\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20B00C00:122880\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20B21580:57344\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20B30F80:57344\n2015/11/30 16:09:50 [debug] 63800#0: kevent set event: 5: ft:-1 fl:0005\n2015/11/30 16:09:50 [debug] 63800#0: posix_memalign: 20A9A000:16384 @16\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A64000:2048\n2015/11/30 16:09:50 [debug] 63800#0: add cleanup: 20AAED80\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20AA90C0:168\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A47000:56\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: posix_memalign: 20B3F000:16384 @16\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A6A000:4096\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A6A000:4096\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A6A000:4096\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A6A000:4096\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A5F400:1024\n2015/11/30 16:09:50 [debug] 63800#0: add cleanup: 20B40B80\n2015/11/30 16:09:50 [debug] 63800#0: free: 20A9A000, unused: 15008\n2015/11/30 16:09:50 [debug] 63800#0: posix_memalign: 20A45000:128 @16\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A10600:728\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A4E000:232\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20B44000:216\n2015/11/30 16:09:50 [debug] 63800#0: posix_memalign: 20A45080:128 @16\n2015/11/30 16:09:50 [debug] 63800#0: fetching key \"workers_no\" in shared dict \"workers\"\n2015/11/30 16:09:50 [debug] 63800#0: shmtx lock\n2015/11/30 16:09:50 [debug] 63800#0: shmtx unlock\n2015/11/30 16:09:50 [debug] 63800#0: shmtx lock\n2015/11/30 16:09:50 [debug] 63800#0: shmtx unlock\n2015/11/30 16:09:50 [debug] 63800#0: shmtx lock\n2015/11/30 16:09:50 [debug] 63800#0: lua shared dict set: creating a new entry\n2015/11/30 16:09:50 [debug] 63800#0: slab alloc: 65 slot: 4\n2015/11/30 16:09:50 [debug] 63800#0: slab alloc: 20D02180\n2015/11/30 16:09:50 [debug] 63800#0: shmtx unlock\n2015/11/30 16:09:50 [debug] 63800#0: lua creating fake watcher connection\n2015/11/30 16:09:50 [debug] 63800#0: malloc: 20A1C070:104\n2015/11/30 16:09:50 [debug] 63800#0: posix_memalign: 20A45100:128 @16\n2015/11/30 16:09:50 [debug] 63800#0: event timer add: 1: 1000:1495812957\n2015/11/30 16:09:50 [debug] 63800#0: free: 20B44000\n2015/11/30 16:09:50 [debug] 63800#0: free: 20A4E000\n2015/11/30 16:09:50 [debug] 63800#0: free: 20A10600\n2015/11/30 16:09:50 [debug] 63800#0: free: 20A45000, unused: 8\n2015/11/30 16:09:50 [debug] 63800#0: free: 20A45080, unused: 104\n2015/11/30 16:09:50 [debug] 63800#0: kevent set event: 6: ft:-1 fl:0005\n2015/11/30 16:09:50 [debug] 63800#0: worker cycle\n2015/11/30 16:09:50 [debug] 63800#0: kevent timer: 1000, changes: 2\n2015/11/30 16:09:51 [debug] 63800#0: kevent events: 0\n2015/11/30 16:09:51 [debug] 63800#0: timer delta: 1113\n2015/11/30 16:09:51 [debug] 63800#0: event timer del: 1: 1495812957\n2015/11/30 16:09:51 [debug] 63800#0: lua ngx.timer expired\n2015/11/30 16:09:51 [debug] 63800#0: malloc: 20A10600:728\n2015/11/30 16:09:51 [debug] 63800#0: malloc: 20A4E000:232\n2015/11/30 16:09:51 [debug] 63800#0: malloc: 20B44000:216\n2015/11/30 16:09:51 [debug] 63800#0: posix_memalign: 20A45080:128 @16\n2015/11/30 16:09:51 [debug] 63800#0: http cleanup add: 20A450A0\n2015/11/30 16:09:51 [debug] 63800#0: lua run thread, top:0 c:1\n2015/11/30 16:09:51 [debug] 63800#0: fetching key \"workers_no\" in shared dict \"workers\"\n2015/11/30 16:09:51 [debug] 63800#0: shmtx lock\n2015/11/30 16:09:51 [debug] 63800#0: shmtx unlock\n2015/11/30 16:09:51 [debug] 63800#0: fetching key \"63800\" in shared dict \"workers\"\n2015/11/30 16:09:51 [debug] 63800#0: shmtx lock\n2015/11/30 16:09:51 [debug] 63800#0: shmtx unlock\n2015/11/30 16:09:52 [notice] 63792#0: signal 15 (SIGTERM) received, exiting\n2015/11/30 16:09:52 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:52 [debug] 63792#0: child: 0 63800 e:0 t:0 d:0 r:1 j:0\n2015/11/30 16:09:52 [debug] 63792#0: termination cycle: 50\n2015/11/30 16:09:52 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:52 [notice] 63792#0: signal 14 (SIGALRM) received\n2015/11/30 16:09:52 [debug] 63792#0: wake up, sigio 3\n2015/11/30 16:09:52 [debug] 63792#0: termination cycle: 100\n2015/11/30 16:09:52 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:52 [notice] 63792#0: signal 14 (SIGALRM) received\n2015/11/30 16:09:52 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:52 [debug] 63792#0: child: 0 63800 e:1 t:0 d:0 r:1 j:0\n2015/11/30 16:09:52 [debug] 63792#0: termination cycle: 200\n2015/11/30 16:09:52 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:52 [notice] 63792#0: signal 14 (SIGALRM) received\n2015/11/30 16:09:52 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:52 [debug] 63792#0: child: 0 63800 e:1 t:0 d:0 r:1 j:0\n2015/11/30 16:09:52 [debug] 63792#0: termination cycle: 400\n2015/11/30 16:09:52 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:53 [notice] 63792#0: signal 14 (SIGALRM) received\n2015/11/30 16:09:53 [debug] 63792#0: child: 0 63800 e:1 t:0 d:0 r:1 j:0\n2015/11/30 16:09:53 [debug] 63792#0: termination cycle: 1600\n2015/11/30 16:09:53 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:55 [notice] 63792#0: signal 14 (SIGALRM) received\n2015/11/30 16:09:55 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:55 [debug] 63792#0: child: 0 63800 e:1 t:0 d:0 r:1 j:0\n2015/11/30 16:09:55 [debug] 63792#0: kill (63800, 9)\n2015/11/30 16:09:55 [debug] 63792#0: termination cycle: 3200\n2015/11/30 16:09:55 [debug] 63792#0: sigsuspend\n2015/11/30 16:09:58 [notice] 63792#0: signal 20 (SIGCHLD) received\n2015/11/30 16:09:58 [alert] 63792#0: worker process 63800 exited on signal 11 (core dumped)\n2015/11/30 16:09:58 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:58 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:58 [debug] 63792#0: shmtx forced unlock\n2015/11/30 16:09:58 [debug] 63792#0: wake up, sigio 0\n2015/11/30 16:09:58 [debug] 63792#0: reap children\n2015/11/30 16:09:58 [debug] 63792#0: child: 0 63800 e:1 t:1 d:0 r:1 j:0\n2015/11/30 16:09:58 [notice] 63792#0: exit\n2015/11/30 16:09:58 [debug] 63792#0: close listening 0.0.0.0:9003 #5 \n2015/11/30 16:09:58 [debug] 63792#0: run cleanup: 20AAD230\n2015/11/30 16:09:58 [debug] 63792#0: decrementing the reference count for Lua VM: 1\n2015/11/30 16:09:58 [debug] 63792#0: lua close the global Lua VM 2078F1C0\n2015/11/30 16:09:58 [debug] 63792#0: run cleanup: 20AACB50\n2015/11/30 16:09:58 [debug] 63792#0: run cleanup: 20AA7650\n2015/11/30 16:09:58 [debug] 63792#0: cleanup resolver\n2015/11/30 16:09:58 [debug] 63792#0: free: 20A95000, unused: 0\n2015/11/30 16:09:58 [debug] 63792#0: free: 20A9F000, unused: 0\n2015/11/30 16:09:58 [debug] 63792#0: free: 20AA4000, unused: 4\n2015/11/30 16:09:58 [debug] 63792#0: free: 20AAC000, unused: 6887\n. Here a complete trace from truss utility during starting NGINX Agg instance \n    http://www.kronometrix.org/error.agg.log\n. The second type of crash seems related with:     lua_shared_dict workers 1m; If I have both shared dict enabled this is core dumping immediate as I start the server. If I comment out the \"lua_shared_dict workers 1m;\" then this starts fine.\n```\nworker_processes  1;\nerror_log logs/error.agg.log;\npid logs/nginx.agg.pid;\nevents {\n    use kqueue;\n    worker_connections 1024;\n    multi_accept on;\n}\nhttp {\n        include       mime.types;\n        default_type  application/octet-stream;\n    # access_log logs/access.agg.log.gz combined gzip flush=5m;\n    access_log off;\n\n    ## General Options\n    sendfile       off;   # disable double caching for ZFS\n    tcp_nopush     off;   # sendfile=off so tcp_nopush can not be used\n    tcp_nodelay    on;\n\n    keepalive_timeout 60;\n    reset_timedout_connection on;\n\n    gzip off;\n\n    lua_package_path \";;${prefix}../app/?.lua;\";\n    lua_code_cache on;\n\n    lua_shared_dict agg_locks 1m;\n    #lua_shared_dict workers 1m;\n    init_by_lua_file \"../app/init_agg.lua\";\n    init_worker_by_lua_file \"../app/aggregates.lua\";\n\n    server {\n        listen 9003;\n        index index.html;\n        root ../static;\n    }\n\n}\n```\n. @agentzh: we are using on kernel aggregates already 1.9.3.2\n2015/11/30 16:09:37 [debug] 63791#0: bind() 0.0.0.0:9003 #5 \n2015/11/30 16:09:37 [notice] 63791#0: using the \"kqueue\" event method\n2015/11/30 16:09:37 [debug] 63791#0: counter: 20267080, 1\n2015/11/30 16:09:37 [notice] 63791#0: openresty/1.9.3.2\n2015/11/30 16:09:37 [notice] 63791#0: built by clang 3.7.0 (tags/RELEASE_370/final 246257) 20150906\n2015/11/30 16:09:37 [notice] 63791#0: OS: FreeBSD 11.0-CURRENT\n2015/11/30 16:09:37 [notice] 63791#0: kern.osreldate: 1100089, built on 1100089\n2015/11/30 16:09:37 [notice] 63791#0: hw.ncpu: 4\n...\nFor sure this has something to do with the number of shared dict defined ? Could it be a problem on ARM ? Or not ? \nAbout core dumps, even I get one there is no stack traces on it. Not sure why.\n. @agentz: at the moment NGINX worker is dying and writing the core image, but I cant make use much from gdb. I need to check why is this. No stacks available. \nClear as well is the crash is visible when I have these two shared dict enabled:\nlua_shared_dict agg_locks 1m;\n        lua_shared_dict workers 1m;\n. > 1. Are you using |lua-resty-core|?\n\nyes.\n2. Are you using the bundled version of the LuaJIT in OpenResty?\n   yes.\nPlease apply the following patch so that I can see more details in your\nnginx debug logs right before the crash:\n\nHere you can see after the debugged version:\n  http://www.kronometrix.org/error2.agg.log\nI need now to dig further and check if I can extract better stacks from\ngdb. Thanks for tips. Lets see.\n\nStefan Parvu sparvu@kronometrix.org\n. @agentzh: yes. even if I have resty-core disabled I still get the crash. \n. Now getting deeper in gdb break pointing. I had to jump directly to ngx_http_lua_ffi_shdict_get since ngx_http_lua_shdict_get_helper did crash immediately. See below:\n```\n(gdb) break ngx_http_lua_shdict_get_helper\nBreakpoint 1 at 0x150bd0: file ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c, line 420.\n(gdb) run\nStarting program: /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\n[New LWP 100123]\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\n[New Thread 20a10000 (LWP 100123/nginx)]\nProgram received signal SIGSEGV, Segmentation fault.\n[Switching to Thread 20a10000 (LWP 100123/nginx)]\n0x00000000 in ?? ()\n```\nand here getting into: ngx_http_lua_ffi_shdict_get\n```\n% gdb --args /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"armv6-marcel-freebsd\"...\n(gdb) break ngx_http_lua_ffi_shdict_get\nBreakpoint 1 at 0x14fef4: file ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c, line 1673.\n(gdb) run\nStarting program: /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\n[New LWP 100120]\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\n[New Thread 20a10000 (LWP 100120/nginx)]\n[Switching to Thread 20a10000 (LWP 100120/nginx)]\nBreakpoint 1, ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207ab980 \"workers_no\", key_len=10, value_type=0x207b2898, \n    str_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \n    is_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\n1673        dd(\"FFI API\");\nCurrent language:  auto; currently minimal\n(gdb) bt full\n0  ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207ab980 \"workers_no\", key_len=10, value_type=0x207b2898,\nstr_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \nis_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\nname = {len = 11599872, data = 0x1a <Error reading address 0x1a: Bad address>}\nhash = 2054032\nrc = 805437449\nctx = (ngx_http_lua_shdict_ctx_t *) 0x4\nsd = (ngx_http_lua_shdict_node_t *) 0x4\nvalue = {len = 544863880, data = 0x2079e498 \"\\230\\233{ n\\001\"}\n\n1  0x001c3c00 in lj_vm_ffi_call ()\nNo symbol table info available.\n2  0x207ad130 in ?? ()\nNo symbol table info available.\n(gdb) next\n0x0001f594 in $a ()\n(gdb) bt full\n0  0x0001f594 in $a ()\nNo symbol table info available.\n1  0x0014ff20 in ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207ab980 \"workers_no\", key_len=10, value_type=0x207b2898,\nstr_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \nis_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\nname = {len = 11599872, data = 0x1a <Error reading address 0x1a: Bad address>}\nhash = 2054032\nrc = 805437449\nctx = (ngx_http_lua_shdict_ctx_t *) 0x4\nsd = (ngx_http_lua_shdict_node_t *) 0x4\nvalue = {len = 544863880, data = 0x2079e498 \"\\230\\233{ n\\001\"}\n\n2  0x001c3c00 in lj_vm_ffi_call ()\nNo symbol table info available.\n3  0x207ad130 in ?? ()\nNo symbol table info available.\n(gdb) next\nSingle stepping until exit from function $a, \nwhich has no line number information.\nBreakpoint 1, ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207ab980 \"workers_no\", key_len=10, value_type=0x207b2898, \n    str_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \n    is_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\n1673        dd(\"FFI API\");\n(gdb) bt full\n0  ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207ab980 \"workers_no\", key_len=10, value_type=0x207b2898,\nstr_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \nis_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\nname = {len = 539463680, data = 0xbfbff7a8 \"\ufffd\"}\nhash = 2054032\nrc = 805437449\nctx = (ngx_http_lua_shdict_ctx_t *) 0x4\nsd = (ngx_http_lua_shdict_node_t *) 0x4\nvalue = {len = 544863880, data = 0x2079e498 \"\\230\\233{ n\\001\"}\n\n1  0x001c3c00 in lj_vm_ffi_call ()\nNo symbol table info available.\n2  0x207ad130 in ?? ()\nNo symbol table info available.\n(gdb) next\n0x0001f594 in $a ()\n(gdb) bt full\n0  0x0001f594 in $a ()\nNo symbol table info available.\n1  0x0014ff20 in ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207ab980 \"workers_no\", key_len=10, value_type=0x207b2898,\nstr_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \nis_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\nname = {len = 539463680, data = 0xbfbff7a8 \"\ufffd\"}\nhash = 2054032\nrc = 805437449\nctx = (ngx_http_lua_shdict_ctx_t *) 0x4\nsd = (ngx_http_lua_shdict_node_t *) 0x4\nvalue = {len = 544863880, data = 0x2079e498 \"\\230\\233{ n\\001\"}\n\n2  0x001c3c00 in lj_vm_ffi_call ()\nNo symbol table info available.\n3  0x207ad130 in ?? ()\nNo symbol table info available.\n(gdb) next\nSingle stepping until exit from function $a, \nwhich has no line number information.\nBreakpoint 1, ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207c4c80 \"72921\", key_len=5, value_type=0x207b2898, \n    str_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \n    is_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\n1673        dd(\"FFI API\");\n(gdb) bt full\n0  ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207c4c80 \"72921\", key_len=5, value_type=0x207b2898,\nstr_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \nis_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\nname = {len = 7, data = 0x20aa38ef \"workers\"}\nhash = 2054032\nrc = 805437449\nctx = (ngx_http_lua_shdict_ctx_t *) 0x4\nsd = (ngx_http_lua_shdict_node_t *) 0x4\nvalue = {len = 544863880, data = 0x2079e498 \"\\230\\233{ n\\001\"}\n\n1  0x001c3c00 in lj_vm_ffi_call ()\nNo symbol table info available.\n2  0x207ad130 in ?? ()\nNo symbol table info available.\n(gdb) next\n0x0001f594 in $a ()\n(gdb) bt full\n0  0x0001f594 in $a ()\nNo symbol table info available.\n1  0x0014ff20 in ngx_http_lua_ffi_shdict_get (zone=0x20a93390, key=0x207c4c80 \"72921\", key_len=5, value_type=0x207b2898,\nstr_value_buf=0x207a4760, str_value_len=0x207ee340, num_value=0x207b3538, user_flags=0x207ad130, get_stale=0, \nis_stale=0x2079f688) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:1673\nname = {len = 7, data = 0x20aa38ef \"workers\"}\nhash = 2054032\nrc = 805437449\nctx = (ngx_http_lua_shdict_ctx_t *) 0x4\nsd = (ngx_http_lua_shdict_node_t *) 0x4\nvalue = {len = 544863880, data = 0x2079e498 \"\\230\\233{ n\\001\"}\n\n2  0x001c3c00 in lj_vm_ffi_call ()\nNo symbol table info available.\n3  0x207ad130 in ?? ()\nNo symbol table info available.\n(gdb) next\nSingle stepping until exit from function $a, \nwhich has no line number information.\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000 in ?? ()\n(gdb) bt full\n0  0x00000000 in ?? ()\nNo symbol table info available.\n```\n. @agentzh: sure. let me repeat.\n. breaking point to: ngx_http_lua_shdict_get_helper\n```\nkrmx@rpi2:/opt/kronometrix/kernel/nginx/logs % gdb --args /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"armv6-marcel-freebsd\"...\n(gdb) break ngx_http_lua_shdict_get_helper\nBreakpoint 1 at 0x150bd0: file ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c, line 420.\n(gdb) run\nStarting program: /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\n[New LWP 100121]\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\n[New Thread 20a10000 (LWP 100121/nginx)]\n[Switching to Thread 20a10000 (LWP 100121/nginx)]\nBreakpoint 1, ngx_http_lua_shdict_get_helper (L=0x2078f1c0, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:420\n420     uint32_t                     user_flags = 0;\nCurrent language:  auto; currently minimal\n(gdb) bt full\n0  ngx_http_lua_shdict_get_helper (L=0x2078f1c0, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:420\nn = 544883992\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 544797120, data = 0xb0 <Error reading address 0xb0: Bad address>}\nhash = 3217029376\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 544920720, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 1855904\nnum = 1.1125370638363712e-308\nc = 32 ' '\nzone = (ngx_shm_zone_t *) 0x1ba370\nuser_flags = 0\n\n1  0x0014d508 in ngx_http_lua_shdict_get (L=0x2078f1c0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n2  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\n422     dd(\"classic C API\");\n(gdb) bt full\n0  ngx_http_lua_shdict_get_helper (L=0x2078f1c0, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:422\nn = 544883992\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 544797120, data = 0xb0 <Error reading address 0xb0: Bad address>}\nhash = 3217029376\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 544920720, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 1855904\nnum = 1.1125370638363712e-308\nc = 32 ' '\nzone = (ngx_shm_zone_t *) 0x1ba370\nuser_flags = 0\n\n1  0x0014d508 in ngx_http_lua_shdict_get (L=0x2078f1c0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n2  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\n0x0001f594 in $a ()\n(gdb) bt full\n0  0x0001f594 in $a ()\nNo symbol table info available.\n1  0x00150c00 in ngx_http_lua_shdict_get_helper (L=0x2078f1c0, get_stale=0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:422\nn = 544883992\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 544797120, data = 0xb0 <Error reading address 0xb0: Bad address>}\nhash = 3217029376\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 544920720, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 1855904\nnum = 1.1125370638363712e-308\nc = 32 ' '\nzone = (ngx_shm_zone_t *) 0x1ba370\nuser_flags = 0\n\n2  0x0014d508 in ngx_http_lua_shdict_get (L=0x2078f1c0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n4  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\nSingle stepping until exit from function $a, \nwhich has no line number information.\nBreakpoint 1, ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:420\n420     uint32_t                     user_flags = 0;\n(gdb) bt full\n0  ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:420\nn = 0\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 545077848, data = 0x10 <Error reading address 0x10: Bad address>}\nhash = 3217029352\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 547639424, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 1864032\nnum = -0.12488889694213867\nc = 0 '\\0'\nzone = (ngx_shm_zone_t *) 0x0\nuser_flags = 544797312\n\n1  0x0014d508 in ngx_http_lua_shdict_get (L=0x207d3a58) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n2  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\n422     dd(\"classic C API\");\n(gdb) bt full\n0  ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:422\nn = 0\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 545077848, data = 0x10 <Error reading address 0x10: Bad address>}\nhash = 3217029352\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 547639424, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 1864032\nnum = -0.12488889694213867\nc = 0 '\\0'\nzone = (ngx_shm_zone_t *) 0x0\nuser_flags = 0\n\n1  0x0014d508 in ngx_http_lua_shdict_get (L=0x207d3a58) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n2  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\nSingle stepping until exit from function $a, \nwhich has no line number information.\nBreakpoint 1, ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:420\n420     uint32_t                     user_flags = 0;\n(gdb) bt full\n0  ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:420\nn = 2\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 545077848, data = 0x20 <Error reading address 0x20: Bad address>}\nhash = 3217029352\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 8, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 3\nnum = 1\nc = 0 '\\0'\nzone = (ngx_shm_zone_t *) 0x20a93390\nuser_flags = 0\n\n1  0x0014d508 in ngx_http_lua_shdict_get (L=0x207d3a58) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n2  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\n422     dd(\"classic C API\");\n(gdb) bt full\n0  ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:422\nn = 2\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 545077848, data = 0x20 <Error reading address 0x20: Bad address>}\nhash = 3217029352\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 8, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 3\nnum = 1\nc = 0 '\\0'\nzone = (ngx_shm_zone_t *) 0x20a93390\nuser_flags = 0\n\n1  0x0014d508 in ngx_http_lua_shdict_get (L=0x207d3a58) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n2  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\n0x0001f594 in $a ()\n(gdb) bt full\n0  0x0001f594 in $a ()\nNo symbol table info available.\n1  0x00150c00 in ngx_http_lua_shdict_get_helper (L=0x207d3a58, get_stale=0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:422\nn = 2\nname = {len = 544843440, data = 0x1c8120 \"\"}\nkey = {len = 545077848, data = 0x20 <Error reading address 0x20: Bad address>}\nhash = 3217029352\nrc = 544797312\nctx = (ngx_http_lua_shdict_ctx_t *) 0x2079a4e0\nsd = (ngx_http_lua_shdict_node_t *) 0x2079a598\nvalue = {len = 8, data = 0x1 <Error reading address 0x1: Bad address>}\nvalue_type = 3\nnum = 1\nc = 0 '\\0'\nzone = (ngx_shm_zone_t *) 0x20a93390\nuser_flags = 0\n\n2  0x0014d508 in ngx_http_lua_shdict_get (L=0x207d3a58) at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:381\nNo locals.\n3  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n4  0x001c1d78 in lj_BC_FUNCC ()\nNo symbol table info available.\n(gdb) next\nSingle stepping until exit from function $a, \nwhich has no line number information.\nProgram received signal SIGSEGV, Segmentation fault.\n0x00000000 in ?? ()\n(gdb) bt full\n0  0x00000000 in ?? ()\nNo symbol table info available.\n```\n. setting breakpoint to: ngx_shmtx_unlock\n```\nkrmx@rpi2:/opt/kronometrix/kernel/nginx/logs % gdb --args /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\nGNU gdb 6.1.1 [FreeBSD]\nCopyright 2004 Free Software Foundation, Inc.\nGDB is free software, covered by the GNU General Public License, and you are\nwelcome to change it and/or distribute copies of it under certain conditions.\nType \"show copying\" to see the conditions.\nThere is absolutely no warranty for GDB.  Type \"show warranty\" for details.\nThis GDB was configured as \"armv6-marcel-freebsd\"...\n(gdb) break ngx_shmtx_unlock\nBreakpoint 1 at 0x39fc8: file src/core/ngx_shmtx.c, line 139.\n(gdb) run\nStarting program: /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\n[New LWP 100137]\nlua *** ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\n[New Thread 20a10000 (LWP 100137/nginx)]\n[Switching to Thread 20a10000 (LWP 100137/nginx)]\nBreakpoint 1, ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:139\n139     if (mtx->spin != (ngx_uint_t) -1) {\nCurrent language:  auto; currently minimal\n(gdb) bt full\n0  ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:139\nNo locals.\n1  0x00036d60 in ngx_slab_alloc (pool=0x20c00000, size=40) at src/core/ngx_slab.c:149\np = (void *) 0x20c01040\n\n2  0x0014ccf4 in ngx_http_lua_shdict_init_zone (shm_zone=0x20a93390, data=0x0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:81\noctx = (ngx_http_lua_shdict_ctx_t *) 0x0\nlen = 549453824\nctx = (ngx_http_lua_shdict_ctx_t *) 0x20aa3930\nlmcf = (ngx_http_lua_main_conf_t *) 0x20a93030\n\n3  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n4  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n---Type  to continue, or q  to quit--- \n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n(gdb) next\n140         ngx_log_debug0(NGX_LOG_DEBUG_CORE, ngx_cycle->log, 0, \"shmtx unlock\");\n(gdb) bt full\n0  ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:140\nNo locals.\n1  0x00036d60 in ngx_slab_alloc (pool=0x20c00000, size=40) at src/core/ngx_slab.c:149\np = (void *) 0x20c01040\n\n2  0x0014ccf4 in ngx_http_lua_shdict_init_zone (shm_zone=0x20a93390, data=0x0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:81\noctx = (ngx_http_lua_shdict_ctx_t *) 0x0\nlen = 549453824\nctx = (ngx_http_lua_shdict_ctx_t *) 0x20aa3930\nlmcf = (ngx_http_lua_main_conf_t *) 0x20a93030\n\n3  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n4  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n---Type  to continue, or q  to quit---\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n(gdb) next\n141     }\n(gdb) bt full\n0  ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:141\nNo locals.\n1  0x00036d60 in ngx_slab_alloc (pool=0x20c00000, size=40) at src/core/ngx_slab.c:149\np = (void *) 0x20c01040\n\n2  0x0014ccf4 in ngx_http_lua_shdict_init_zone (shm_zone=0x20a93390, data=0x0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:81\noctx = (ngx_http_lua_shdict_ctx_t *) 0x0\nlen = 549453824\nctx = (ngx_http_lua_shdict_ctx_t *) 0x20aa3930\nlmcf = (ngx_http_lua_main_conf_t *) 0x20a93030\n\n3  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n4  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n---Type  to continue, or q  to quit--- \n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n(gdb) next\n143     if (ngx_atomic_cmp_set(mtx->lock, ngx_pid, 0)) {\n(gdb) bt full\n0  ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:143\nNo locals.\n1  0x00036d60 in ngx_slab_alloc (pool=0x20c00000, size=40) at src/core/ngx_slab.c:149\np = (void *) 0x20c01040\n\n2  0x0014ccf4 in ngx_http_lua_shdict_init_zone (shm_zone=0x20a93390, data=0x0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:81\noctx = (ngx_http_lua_shdict_ctx_t *) 0x0\nlen = 549453824\nctx = (ngx_http_lua_shdict_ctx_t *) 0x20aa3930\nlmcf = (ngx_http_lua_main_conf_t *) 0x20a93030\n\n3  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n4  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n---Type  to continue, or q  to quit---\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n(gdb) next\nhanging ... no answer back. I probable need to repeat the debug trace. \n```\n. and after CTRL-C I got these:\n```\n(gdb) next\n^C\nProgram received signal SIGINT, Interrupt.\n0x0003a05c in ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:143\n143     if (ngx_atomic_cmp_set(mtx->lock, ngx_pid, 0)) {\n(gdb) bt full\n0  0x0003a05c in ngx_shmtx_unlock (mtx=0x20c0002c) at src/core/ngx_shmtx.c:143\nNo locals.\n1  0x00036d60 in ngx_slab_alloc (pool=0x20c00000, size=40) at src/core/ngx_slab.c:149\np = (void *) 0x20c01040\n\n2  0x0014ccf4 in ngx_http_lua_shdict_init_zone (shm_zone=0x20a93390, data=0x0)\nat ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c:81\noctx = (ngx_http_lua_shdict_ctx_t *) 0x0\nlen = 549453824\nctx = (ngx_http_lua_shdict_ctx_t *) 0x20aa3930\nlmcf = (ngx_http_lua_main_conf_t *) 0x20a93030\n\n3  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n4  0x0003e4d0 in $a.3 () at src/core/ngx_cycle.c:478\nrv = (void *) 0x20a93b50\nsenv = (char **) 0x20a90000\nenv = (char **) 0x20250088\ni = 0\nn = 0\nlog = (ngx_log_t *) 0x259990\ntp = (ngx_time_t *) 0x2599e0\nconf = {name = 0x0, args = 0x20a93bc0, cycle = 0x20a93030, pool = 0x20a93000, temp_pool = 0x20a98000,\n\nconf_file = 0x0, log = 0x259990, ctx = 0x20a939b0, module_type = 1163022147, cmd_type = 16777216, handler = 0, \n  handler_conf = 0x0}\n    pool = (ngx_pool_t ) 0x20a93000\n    cycle = (ngx_cycle_t ) 0x20a93030\n    old = (ngx_cycle_t ) 0x60\n    shm_zone = (ngx_shm_zone_t ) 0x20a93390\n---Type  to continue, or q  to quit---\n    oshm_zone = (ngx_shm_zone_t ) 0x0\n    part = (ngx_list_part_t ) 0x20a930e4\n    opart = (ngx_list_part_t ) 0xbfbffb94\n    file = (ngx_open_file_t ) 0x20a93200\n    ls = (ngx_listening_t ) 0xbfbffa50\n    nls = (ngx_listening_t ) 0xbfbffc60\n    ccf = (ngx_core_conf_t ) 0x20a93ac0\n    old_ccf = (ngx_core_conf_t ) 0x1008\n    module = (ngx_core_module_t ) 0x24dea4\n    hostname = 0xbfbff920 \"rpi2\"\n.\n(gdb) info registers\nr0             0x0  0\nr1             0x11d52  73042\nr2             0x11d52  73042\nr3             0x1  1\nr4             0x24c2d8 2409176\nr5             0x20250088   539295880\nr6             0x3  3\nr7             0x0  0\nr8             0xbfbffc70   -1077937040\nr9             0x0  0\nr10            0xbfbffc60   -1077937056\nr11            0xbfbff808   -1077938168\nr12            0xbfbff2d0   -1077939504\nsp             0xbfbff7f0   -1077938192\nlr             0x36d60  224608\npc             0x3a05c  237660\nfps            0xbfbff390   -1077939312\ncpsr           0x60000010   1610612752\n```\n(gdb) x/16i $pc\n0x3a05c <ngx_shmtx_unlock+168>: ldr r2, [sp, #12]\n0x3a060 <ngx_shmtx_unlock+172>: strex   r1, r0, [r2]\n0x3a064 <ngx_shmtx_unlock+176>: cmp r1, #0  ; 0x0\n0x3a068 <ngx_shmtx_unlock+180>: bne 0x3a040 <ngx_shmtx_unlock+140>\n0x3a06c <ngx_shmtx_unlock+184>: b   0x3a070 <ngx_shmtx_unlock+188>\n0x3a070 <ngx_shmtx_unlock+188>: mov r0, #0  ; 0x0\n0x3a074 <ngx_shmtx_unlock+192>: mcr 15, 0, r0, cr7, cr10, {5}\n0x3a078 <ngx_shmtx_unlock+196>: mov r0, #1  ; 0x1\n0x3a07c <ngx_shmtx_unlock+200>: str r0, [sp, #4]\n0x3a080 <ngx_shmtx_unlock+204>: b   0x3a094 <ngx_shmtx_unlock+224>\n0x3a084 <ngx_shmtx_unlock+208>: mov r0, #0  ; 0x0\n0x3a088 <ngx_shmtx_unlock+212>: mcr 15, 0, r0, cr7, cr10, {5}\n0x3a08c <ngx_shmtx_unlock+216>: str r0, [sp, #4]\n0x3a090 <ngx_shmtx_unlock+220>: b   0x3a094 <ngx_shmtx_unlock+224>\n0x3a094 <ngx_shmtx_unlock+224>: ldr r0, [sp, #4]\n0x3a098 <ngx_shmtx_unlock+228>: tst r0, #1  ; 0x1\n. I should not use gcc. In FreeBSD that's clang. I don't recall to have installed gcc on FreeBSD 11 ARM. But I will check again. \nI didn't find a newer version of gdb for arm. I will check again if there is any simple way to update. \nRegarding stack trace and dd, let me repeat the test. In 2,3hrs.\nSent from my HTC\n----- Reply message -----\nFrom: \"Yichun Zhang\" notifications@github.com\nTo: \"openresty/ngx_openresty\" ngx_openresty@noreply.github.com\nCc: \"Stefan Parvu\" sparvu@kronometrix.org\nSubject: [ngx_openresty] OpenResty 1.7.10.2 (kernel aggregates) core dump on RBPI2 FreeBSD 11 (#131)\nDate: Tue, Dec 1, 2015 17:37\n@sparvu What C compiler did you use to compile OpenResty? If the gcc is too old, is it possible to use a newer gcc (4.5+)? Will you upgrade your gdb? If you're using clang, maybe lldb can be smarter?\n\u2014\nReply to this email directly or view it on GitHub.\n. On 12/01/15 17:37, Yichun Zhang wrote:\n\n@sparvu https://github.com/sparvu What C compiler did you use to\ncompile OpenResty? If the gcc is too old, is it possible to use a newer\ngcc (4.5+)? Will you upgrade your gdb? If you're using clang, maybe lldb\ncan be smarter?\n\nkrmx@rpi2:~ % which gcc\ngcc: Command not found.\nkrmx@rpi2:~ % which cc\n/usr/bin/cc\nkrmx@rpi2:~ % cc -v\nFreeBSD clang version 3.7.0 (tags/RELEASE_370/final 246257) 20150906\nTarget: armv6--freebsd11.0-gnueabi\nThread model: posix\ngdb seems stuck in 6.1.1 - I need to look over the ports, not sure if we\nhave any ARM ports of a newer gdb version.\n\nStefan Parvu sparvu@kronometrix.org\n. here lldb tracing nginx process:\n```\nkrmx@rpi2:~ % lldb37 -- /opt/kronometrix/kernel/nginx/sbin/nginx -c /opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\n(lldb) target create \"/opt/kronometrix/kernel/nginx/sbin/nginx\"\nCurrent executable set to '/opt/kronometrix/kernel/nginx/sbin/nginx' (arm).\n(lldb) settings set -- target.run-args  \"-c\" \"/opt/kronometrix/kernel/nginx/conf/nginx.agg.conf\"\n(lldb) breakpoint set --name  ngx_http_lua_shdict_get_helper \nBreakpoint 1: where = nginx`ngx_http_lua_shdict_get_helper + 32 at ngx_http_lua_shdict.c:420, address = 0x00150bd0\n(lldb) run\nProcess 80721 launching\nProcess 80721 launched: '/opt/kronometrix/kernel/nginx/sbin/nginx' (arm)\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\nlua  ngx_http_lua_shdict_init_zone: init zone at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 62.\nlua  ngx_http_lua_shdict_init_zone: get lmcf at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 109.\nlua  ngx_http_lua_shdict_init_zone: lmcf->lua: 0x2078f1c0 at ../ngx_lua-0.9.19/src/ngx_http_lua_shdict.c line 113.\nProcess 80721 stopped\n thread #1: tid = 100128, 0x00150bd0 nginxngx_http_lua_shdict_get_helper(L=0x2078f1c0, get_stale=0) + 32 at ngx_http_lua_shdict.c:420, stop reason = breakpoint 1.1\n    frame #0: 0x00150bd0 nginxngx_http_lua_shdict_get_helper(L=0x2078f1c0, get_stale=0) + 32 at ngx_http_lua_shdict.c:420\n   417      double                       num;\n   418      u_char                       c;\n   419      ngx_shm_zone_t              zone;\n-> 420      uint32_t                     user_flags = 0;\n   421\n   422      dd(\"classic C API\");\n   423  \n(lldb)  thread backtrace\n* thread #1: tid = 100128, 0x00150bd0 nginxngx_http_lua_shdict_get_helper(L=0x2078f1c0, get_stale=0) + 32 at ngx_http_lua_shdict.c:420, stop reason = breakpoint 1.1\n  * frame #0: 0x00150bd0 nginxngx_http_lua_shdict_get_helper(L=0x2078f1c0, get_stale=0) + 32 at ngx_http_lua_shdict.c:420\n    frame #1: 0x0014d508 nginxngx_http_lua_shdict_get(L=0x2078f1c0) + 36 at ngx_http_lua_shdict.c:381\n    frame #2: 0x001c1d78 nginxlj_BC_FUNCC + 48\n    frame #3: 0xfffffff4\n    frame #4: 0x00000b02\n    frame #5: 0x00ff0b02\n    frame #6: 0x00b80802\n    frame #7: 0x00b70802\n    frame #8: 0x00000b02\n    frame #9: 0x00b60802\n    frame #10: 0x00b50802\n    frame #11: 0x00b40802\n    frame #12: 0x00000b02\n    frame #13: 0x00b30802\n    frame #14: 0x00b20802\n    frame #15: 0x00b10802\n    frame #16: 0x00b00802\n    frame #17: 0x00af0802\n    frame #18: 0x00ae0802\n    frame #19: 0x00ad0802\n    frame #20: 0x00ac0802\n    frame #21: 0x00ab0802\n    frame #22: 0x00aa0802\n    frame #23: 0x00a90802\n    frame #24: 0x00a80802\n    frame #25: 0x00a70802\n    frame #26: 0x00a60802\n    frame #27: 0x00a50802\n    frame #28: 0x00a40802\n    frame #29: 0x00a30802\n    frame #30: 0x00a20802\n    frame #31: 0x00000b02\n    frame #32: 0x00f70b02\n    frame #33: 0x00ff0b02\n    frame #34: 0x09010702\n    frame #35: 0x11020702\n    frame #36: 0x0e030702\n    frame #37: 0x00000b02\n    frame #38: 0x0d010702\n    frame #39: 0x04010702\n    frame #40: 0x05010702\n    frame #41: 0x00010802 nginx\n    frame #42: 0x00000802\n    frame #43: 0x1a000702\n    frame #44: 0x16010702\n    frame #45: 0x0e030702\n    frame #46: 0x00000b02\n    frame #47: 0x2b020702\n    frame #48: 0x04000b02\n    frame #49: 0x04000b02\n    frame #50: 0x13070702\n    frame #51: 0x2a070702\n    frame #52: 0x04020702\n    frame #53: 0x04020702\n    frame #54: 0x00000b02\n    frame #55: 0x00000b02\n    frame #56: 0x00000b02\n    frame #57: 0x00000b02\n    frame #58: 0x00000b02\n    frame #59: 0x2d070702\n    frame #60: 0x03000b02\n    frame #61: 0x04000b02\n    frame #62: 0x04000b02\n    frame #63: 0x15070702\n    frame #64: 0x07020702\n    frame #65: 0x27080702\n    frame #66: 0x03000b02\n    frame #67: 0x03000b02\n    frame #68: 0x03000b02\n    frame #69: 0x03000b02\n    frame #70: 0x03000b02\n    frame #71: 0x03000b02\n    frame #72: 0x00000b02\n    frame #73: 0x00000b02\n    frame #74: 0x00000b02\n    frame #75: 0x00000b02\n    frame #76: 0x00000b02\n    frame #77: 0x00000b02\n    frame #78: 0x00000b02\n    frame #79: 0x00000b02\n    frame #80: 0x00000b02\n    frame #81: 0x00000b02\n    frame #82: 0x00000b02\n    frame #83: 0x00000b02\n    frame #84: 0x00000b02\n    frame #85: 0x00000b02\n    frame #86: 0x00000b02\n    frame #87: 0x00000b02\n    frame #88: 0x00000b02\n    frame #89: 0x00000b02\n    frame #90: 0x00000b02\n    frame #91: 0x00000b02\n    frame #92: 0x00000b02\n    frame #93: 0x00000b02\n    frame #94: 0x00000b02\n    frame #95: 0x00000b02\n    frame #96: 0x00000b02\n    frame #97: 0x00000b02\n    frame #98: 0x00000b02\n    frame #99: 0x00000b02\n    frame #100: 0x00000b02\n    frame #101: 0x00000b02\n    frame #102: 0x00000b02\n    frame #103: 0x00000b02\n    frame #104: 0x00000b02\n    frame #105: 0x00000b02\n    frame #106: 0x00000b02\n    frame #107: 0x00000b02\n    frame #108: 0x00000b02\n    frame #109: 0x00000b02\n    frame #110: 0x00000b02\n    frame #111: 0x00000b02\n    frame #112: 0x00000b02\n    frame #113: 0x00000b02\n    frame #114: 0x00000b02\n    frame #115: 0x00000b02\n    frame #116: 0x00000b02\n    frame #117: 0x00000b02\n    frame #118: 0x00000b02\n    frame #119: 0x00000b02\n    frame #120: 0x00000b02\n    frame #121: 0x00000b02\n    frame #122: 0x00000b02\n    frame #123: 0x00000b02\n    frame #124: 0x00000b02\n    frame #125: 0x00000b02\n    frame #126: 0x00000b02\n    frame #127: 0x00000b02\n    frame #128: 0x00000b02\n    frame #129: 0x00000b02\n    frame #130: 0x00000b02\n    frame #131: 0x00000b02\n    frame #132: 0x00000b02\n    frame #133: 0x00000b02\n    frame #134: 0x00000b02\n    frame #135: 0x00000b02\n    frame #136: 0x00000b02\n    frame #137: 0x00000b02\n    frame #138: 0x00000b02\n    frame #139: 0x00000b02\n    frame #140: 0x00000b02\n    frame #141: 0x00000b02\n    frame #142: 0x00000b02\n    frame #143: 0x00000b02\n    frame #144: 0x00000b02\n    frame #145: 0x00000b02\n    frame #146: 0x00000b02\n    frame #147: 0x00000b02\n    frame #148: 0x00000b02\n    frame #149: 0x00000b02\n    frame #150: 0x00000b02\n    frame #151: 0x00000b02\n    frame #152: 0x00000b02\n    frame #153: 0x00000b02\n    frame #154: 0x00000b02\n    frame #155: 0x00000b02\n    frame #156: 0x00000b02\n    frame #157: 0x00000b02\n    frame #158: 0x00000b02\n    frame #159: 0x00000b02\n    frame #160: 0x00000b02\n    frame #161: 0x00000b02\n    frame #162: 0x00000b02\n    frame #163: 0x00000b02\n    frame #164: 0x00000b02\n    frame #165: 0x00000b02\n    frame #166: 0x00000b02\n    frame #167: 0x00000b02\n    frame #168: 0x00000b02\n    frame #169: 0x00000b02\n    frame #170: 0x00000b02\n    frame #171: 0x00000b02\n    frame #172: 0x00000b02\n    frame #173: 0x00000b02\n    frame #174: 0x00000b02\n    frame #175: 0x00000b02\n    frame #176: 0x00000b02\n    frame #177: 0x00000b02\n    frame #178: 0x00000b02\n    frame #179: 0x00000b02\n    frame #180: 0x00000b02\n    frame #181: 0x00000b02\n    frame #182: 0x00000b02\n    frame #183: 0x00000b02\n    frame #184: 0x01010502\n    frame #185: 0x01010502\n    frame #186: 0x01010502\n    frame #187: 0x01010502\n    frame #188: 0x01010502\n    frame #189: 0x01010502\n    frame #190: 0x01010502\n    frame #191: 0x02000802\n    frame #192: 0x04000802\n    frame #193: 0x00000802\n    frame #194: 0x02000802\n    frame #195: 0x00ff0b02\n    frame #196: 0x00000b02\n    frame #197: 0x01010802\n    frame #198: 0x01010802\n    frame #199: 0x00010802 nginx\n    frame #200: 0x01010802\n    frame #201: 0x01010802\n    frame #202: 0x01010802\n    frame #203: 0x01010802\n    frame #204: 0x01010802\n    frame #205: 0x01010802\n    frame #206: 0x01010802\n    frame #207: 0x01010802\n    frame #208: 0x01010802\n    frame #209: 0x01010802\n    frame #210: 0x00010802 nginx\n    frame #211: 0x00000b02\n    frame #212: 0x00000b02\n    frame #213: 0x00010802 nginx\n    frame #214: 0x00010802 nginx\n    frame #215: 0x00010802 nginx\n    frame #216: 0x00010802 nginx\n    frame #217: 0x00010802 nginx\n    frame #218: 0x00010802 nginx\n    frame #219: 0x00010802 nginx\n    frame #220: 0x00010802 nginx\n    frame #221: 0x00010802 nginx\n    frame #222: 0x00010802 nginx\n    frame #223: 0x00010802 nginx\n    frame #224: 0x00010802 nginx\n    frame #225: 0x00010802 nginx\n    frame #226: 0x00000b02\n    frame #227: 0x00010802 nginx\n    frame #228: 0x00010802 nginx\n    frame #229: 0x00000b02\n    frame #230: 0x00000b02\n    frame #231: 0x00010802 nginx\n    frame #232: 0x00010802 nginx\n    frame #233: 0x00010802 nginx\n    frame #234: 0x00000b02\n    frame #235: 0x00000b02\n    frame #236: 0x02000702\n    frame #237: 0x0b010702\n    frame #238: 0x07010702\n    frame #239: 0x04010702\n    frame #240: 0x00000b02\n    frame #241: 0x00000b02\n    frame #242: 0x00000b02\n    frame #243: 0x00000b02\n    frame #244: 0x00000b02\n    frame #245: 0x00000b02\n    frame #246: 0x00000b02\n    frame #247: 0x00000b02\n    frame #248: 0x00000b02\n    frame #249: 0x00000b02\n    frame #250: 0x00000b02\n    frame #251: 0x00000b02\n    frame #252: 0x00000b02\n    frame #253: 0x00000b02\n    frame #254: 0x00000b02\n    frame #255: 0x00000b02\n    frame #256: 0x00000b02\n    frame #257: 0x00000b02\n    frame #258: 0x00010802 nginx\n    frame #259: 0x01010502\n    frame #260: 0x01010502\n    frame #261: 0x01010502\n    frame #262: 0x02000802\n    frame #263: 0x01010502\n    frame #264: 0x01010502\n    frame #265: 0x01010502\n    frame #266: 0x04000802\n    frame #267: 0x01010502\n    frame #268: 0x01010502\n    frame #269: 0x01010502\n    frame #270: 0x04000802\n    frame #271: 0x01010502\n    frame #272: 0x01010502\n    frame #273: 0x01010502\n    frame #274: 0x04000802\n    frame #275: 0x01010502\n    frame #276: 0x01010502\n    frame #277: 0x01010502\n    frame #278: 0x04000802\n    frame #279: 0x03010702\n    frame #280: 0x05000702\n    frame #281: 0x04000702\n    frame #282: 0x00010802 nginx\n    frame #283: 0x00010802 nginx\n    frame #284: 0x00010802 nginx\n    frame #285: 0x00010802 nginx\n    frame #286: 0x00000b02\n    frame #287: 0x00010802 nginx\n    frame #288: 0x00010802 nginx\n    frame #289: 0x00080b02 nginxngx_http_process_header_line(r=0x00000000, h=0x00000001, offset=0) + 86 at ngx_http_request.c:1569\n    frame #290: 0x00010802 nginx\n    frame #291: 0x00010802 nginx\n    frame #292: 0x00000b02\n    frame #293: 0x00010802 nginx\n    frame #294: 0x00010802 nginx\n    frame #295: 0x00000b02\n    frame #296: 0x00010802 nginx\n    frame #297: 0x00000b02\n    frame #298: 0x00010802 nginx\n    frame #299: 0x00010802 nginx\n    frame #300: 0x00010802 nginx\n    frame #301: 0x00000b02\n    frame #302: 0x00010802 nginx\n    frame #303: 0x00000b02\n    frame #304: 0x00010802 nginx\n    frame #305: 0x00010802 nginx\n    frame #306: 0x00010802 nginx\n    frame #307: 0x00010802 nginx\n    frame #308: 0x00010802 nginx\n    frame #309: 0x00000b02\n    frame #310: 0x00010802 nginx\n    frame #311: 0x00010802 nginx\n    frame #312: 0x00000b02\n    frame #313: 0x00010802 nginx\n    frame #314: 0x00000b02\n    frame #315: 0x00010802 nginx\n    frame #316: 0x00000b02\n    frame #317: 0x00010802 nginx\n    frame #318: 0x00000b02\n    frame #319: 0x00010802 nginx\n    frame #320: 0x00000b02\n    frame #321: 0x00010802 nginx\n    frame #322: 0x00010802 nginx\n    frame #323: 0x00010802 nginx\n    frame #324: 0x00010802 nginx\n    frame #325: 0x00010802 nginx\n    frame #326: 0x00010802 nginx\n    frame #327: 0x00010802 nginx\n    frame #328: 0x00010802 nginx\n    frame #329: 0x00010802 nginx\n    frame #330: 0x00010802 nginx\n    frame #331: 0x00000b02\n    frame #332: 0x00010802 nginx\n    frame #333: 0x00010802 nginx\n    frame #334: 0x00010802 nginx\n    frame #335: 0x00010802 nginx\n    frame #336: 0x00000b02\n    frame #337: 0x00010802 nginx\n    frame #338: 0x00010802 nginx\n    frame #339: 0x00010802 nginx\n    frame #340: 0x00000b02\n    frame #341: 0x00000802\n    frame #342: 0x05000702\n    frame #343: 0x00010802 nginx\n    frame #344: 0x00000b02\n    frame #345: 0x02ff0b02\n    frame #346: 0x02ff0b02\n    frame #347: 0x00010802 nginx\n    frame #348: 0x00010802 nginx\n    frame #349: 0x00010802 nginx\n    frame #350: 0x00010802 nginx\n    frame #351: 0x00010802 nginx\n    frame #352: 0x00010802 nginx\n    frame #353: 0x00010802 nginx\n    frame #354: 0x00010802 nginx\n    frame #355: 0x00010802 nginx\n    frame #356: 0x00010802 nginx\n    frame #357: 0x00010802 nginx\n    frame #358: 0x00010802 nginx\n    frame #359: 0x00080b02 nginxngx_http_process_header_line(r=0x00010204, h=0x0000000f, offset=0) + 86 at ngx_http_request.c:1569\n    frame #360: 0x00000b02\n    frame #361: 0x00010802 nginx\n    frame #362: 0x00010802 nginx\n    frame #363: 0x00080b02 nginxngx_http_process_header_line(r=0x00000336, h=0x00000001, offset=0) + 86 at ngx_http_request.c:1569\n    frame #364: 0x00ff0b02\n    frame #365: 0x00000802\n    frame #366: 0x06000702\n    frame #367: 0x00000b02\n    frame #368: 0x00010802 nginx\n    frame #369: 0x00000b02\n    frame #370: 0x00010802 nginx\n    frame #371: 0x00010802 nginx\n    frame #372: 0x00080b02 nginxngx_http_process_header_line(r=0x00000000, h=0x00000001, offset=0) + 86 at ngx_http_request.c:1569\n    frame #373: 0x00ff0b02\n    frame #374: 0x00010802 nginx\n    frame #375: 0x00010802 nginx\n    frame #376: 0x00010802 nginx\n    frame #377: 0x00010802 nginx\n    frame #378: 0x00010802 nginx\n    frame #379: 0x00010802 nginx\n    frame #380: 0x00010802 nginx\n    frame #381: 0x00010802 nginx\n    frame #382: 0x00010802 nginx\n    frame #383: 0x00010802 nginx\n    frame #384: 0x00010802 nginx\n    frame #385: 0x00010802 nginx\n    frame #386: 0x00010802 nginx\n    frame #387: 0x00010802 nginx\n    frame #388: 0x00010802 nginx\n    frame #389: 0x00010802 nginx\n    frame #390: 0x00010802 nginx\n    frame #391: 0x00010802 nginx\n    frame #392: 0x00010802 nginx\n    frame #393: 0x00010802 nginx\n    frame #394: 0x00010802 nginx\n    frame #395: 0x00010802 nginx\n    frame #396: 0x00010802 nginx\n    frame #397: 0x00000b02\n    frame #398: 0x00010802 nginx\n    frame #399: 0x00010802 nginx\n    frame #400: 0x00010802 nginx\n    frame #401: 0x00010802 nginx\n    frame #402: 0x00010802 nginx\n    frame #403: 0x00000b02\n    frame #404: 0x00010802 nginx\n    frame #405: 0x00010802 nginx\n    frame #406: 0x00010802 nginx\n    frame #407: 0x00010802 nginx\n    frame #408: 0x00000b02\n    frame #409: 0x00010802 nginx\n    frame #410: 0x00010802 nginx\n    frame #411: 0x00010802 nginx\n    frame #412: 0x00010802 nginx\n    frame #413: 0x00010802 nginx\n    frame #414: 0x00010802 nginx\n    frame #415: 0x00010802 nginx\n    frame #416: 0x00010802 nginx\n    frame #417: 0x00010802 nginx\n    frame #418: 0x00010802 nginx\n    frame #419: 0x00010802 nginx\n    frame #420: 0x00010802 nginx\n    frame #421: 0x00010802 nginx\n    frame #422: 0x00010802 nginx\n    frame #423: 0x00010802 nginx\n    frame #424: 0x00010802 nginx\n    frame #425: 0x00010802 nginx\n    frame #426: 0x00010802 nginx\n    frame #427: 0x00010802 nginx\n    frame #428: 0x00010802 nginx\n    frame #429: 0x00010802 nginx\n    frame #430: 0x00010802 nginx\n    frame #431: 0x00010802 nginx\n    frame #432: 0x00010802 nginx\n    frame #433: 0x00010802 nginx\n    frame #434: 0x00010802 nginx\n    frame #435: 0x00010802 nginx\n    frame #436: 0x00010802 nginx\n    frame #437: 0x00010802 nginx\n    frame #438: 0x00010802 nginx\n    frame #439: 0x00010802 nginx\n    frame #440: 0x00010802 nginx\n    frame #441: 0x00010802 nginx\n    frame #442: 0x00010802 nginx\n    frame #443: 0x00010802 nginx\n    frame #444: 0x00010802 nginx\n    frame #445: 0x00010802 nginx\n    frame #446: 0x00010802 nginx\n    frame #447: 0x00010802 nginx\n    frame #448: 0x00080b02 nginxngx_http_process_header_line(r=0x00000000, h=0x00000001, offset=0) + 86 at ngx_http_request.c:1569\n    frame #449: 0x00ff0b02\n    frame #450: 0x00010802 nginx\n    frame #451: 0x00000b02\n    frame #452: 0x00010802 nginx\n    frame #453: 0x00010802 nginx\n    frame #454: 0x00080b02 nginxngx_http_process_header_line(r=0x00000000, h=0x00000001, offset=0) + 86 at ngx_http_request.c:1569\n    frame #455: 0x00ff0b02\n    frame #456: 0x00000b02\n    frame #457: 0x00ff0b02\n    frame #458: 0x00ff0b02\n    frame #459: 0x00ff0b02\n    frame #460: 0x00ff0b02\n    frame #461: 0x00ff0b02\n    frame #462: 0x00010802 nginx\n    frame #463: 0x009e0802\n    frame #464: 0x00000b02\n    frame #465: 0x00010802 nginx\n    frame #466: 0x00010802 nginx\n    frame #467: 0x00920802\n    frame #468: 0x00910802\n    frame #469: 0x00900802\n    frame #470: 0x008f0802\n    frame #471: 0x008e0802\n    frame #472: 0x00000b02\n    frame #473: 0x004a0802\n    frame #474: 0x00490802\n    frame #475: 0x00480802\n    frame #476: 0x00470802\n    frame #477: 0x00460802\n    frame #478: 0x00450802\n    frame #479: 0x00440802\n    frame #480: 0x00430802\n    frame #481: 0x00420802\n    frame #482: 0x00410802\n    frame #483: 0x00400802\n    frame #484: 0x003f0802\n    frame #485: 0x00000b02\n    frame #486: 0x008d0802\n    frame #487: 0x008c0802\n    frame #488: 0x008b0802\n    frame #489: 0x008a0802\n    frame #490: 0x00890802\n    frame #491: 0x00880802\n    frame #492: 0x00870802\n    frame #493: 0x00860802\n    frame #494: 0x00850802\n    frame #495: 0x00840802\n    frame #496: 0x00830802\n    frame #497: 0x00820802\n    frame #498: 0x00810802\n    frame #499: 0x00800802\n    frame #500: 0x007f0802\n    frame #501: 0x007e0802\n    frame #502: 0x00000b02\n    frame #503: 0x013e0802\n    frame #504: 0x013d0802\n    frame #505: 0x003c0802\n    frame #506: 0x003b0802\n    frame #507: 0x003a0802\n    frame #508: 0x00390802\n    frame #509: 0x00380802\n    frame #510: 0x00370802\n    frame #511: 0x00000802\n    frame #512: 0x02010702\n    frame #513: 0x00000802\n    frame #514: 0x02010702\n    frame #515: 0x00360802\n    frame #516: 0x00350802\n    frame #517: 0x00340802\n    frame #518: 0x00330802\n    frame #519: 0x00320802\n    frame #520: 0x00310802\n    frame #521: 0x00300802\n    frame #522: 0x002f0802\n    frame #523: 0x002e0802\n    frame #524: 0x002d0802\n    frame #525: 0x002c0802\n    frame #526: 0x002b0802\n    frame #527: 0x002a0802\n    frame #528: 0x00290802\n    frame #529: 0x00280802\n    frame #530: 0x00270802\n  frame #531: 0x00258cd7 nginxframe #532: 0x0024caaf nginx\n    frame #533: 0x00000b02\n    frame #534: 0x00fe0b02\n    frame #535: 0x00580802\n    frame #536: 0x00570802\n    frame #537: 0x00560802\n    frame #538: 0x00540802\n    frame #539: 0x00530802\n    frame #540: 0x00520802\n    frame #541: 0x00510802\n    frame #542: 0x00500802\n    frame #543: 0x004f0802\n    frame #544: 0x004e0802\n    frame #545: 0x004d0802\n    frame #546: 0x004c0802\n    frame #547: 0x004b0802\n    frame #548: 0x00000802\n    frame #549: 0x02010702\n    frame #550: 0x00000b02\n    frame #551: 0x007d0802\n    frame #552: 0x007c0802\n    frame #553: 0x007b0802\n    frame #554: 0x007a0802\n    frame #555: 0x00790802\n    frame #556: 0x00780802\n    frame #557: 0x00770802\n    frame #558: 0x00760802\n    frame #559: 0x00750802\n    frame #560: 0x00740802\n    frame #561: 0x00730802\n    frame #562: 0x00000b02\n    frame #563: 0x00720802\n    frame #564: 0x00710802\n    frame #565: 0x00700802\n    frame #566: 0x006f0802\n    frame #567: 0x006e0802\n    frame #568: 0x006d0802\n    frame #569: 0x006c0802\n    frame #570: 0x006b0802\n    frame #571: 0x006a0802\n    frame #572: 0x00690802\n    frame #573: 0x00680802\n    frame #574: 0x00000b02\n    frame #575: 0x00670802\n    frame #576: 0x00660802\n    frame #577: 0x00650802\n    frame #578: 0x00640802\n    frame #579: 0x00630802\n    frame #580: 0x00620802\n    frame #581: 0x00610802\n    frame #582: 0x00600802\n    frame #583: 0x005f0802\n    frame #584: 0x00000b02\n    frame #585: 0x00010802 nginx\n    frame #586: 0x00010802 nginx\n    frame #587: 0x005c0802\n    frame #588: 0x005b0802\n    frame #589: 0x00000802\n    frame #590: 0x0a020702\n    frame #591: 0x005a0802\n    frame #592: 0x00590802\n    frame #593: 0x00000802\n    frame #594: 0x02010702\n    frame #595: 0x00000802\n    frame #596: 0x0a020702\n    frame #597: 0x00000802\n    frame #598: 0x09020702\n    frame #599: 0x00000b02\n    frame #600: 0x00010802 nginx\n    frame #601: 0x00010802 nginx\n    frame #602: 0x00000b02\n    frame #603: 0x00010802 nginx\n    frame #604: 0x00010802 nginx\n    frame #605: 0x00010802 nginx\n    frame #606: 0x00010802 nginx\n    frame #607: 0x05ff0b02\n    frame #608: 0x00010802 nginx\n    frame #609: 0x00010802 nginx\n    frame #610: 0x00010802 nginx\n    frame #611: 0x00000b02\n    frame #612: 0x00010802 nginx\n    frame #613: 0x00000b02\n    frame #614: 0x00220802 nginx\n    frame #615: 0x00210802 nginxrecff_cdata_arith [inlined] crec_arith_meta(J=0x207ad5e8, cts=<unavailable>, rd=<unavailable>) + 34 at lj_crecord.c:1374\n    frame #616: 0x002107e0 nginxrecff_cdata_arith(J=0x207ad5e8, rd=) + 3124 at lj_crecord.c:1479\n    frame #617: 0x00200802 nginxlj_ffh_tonumber(L=0x000007f8) + 42 at lib_base.c:261\n    frame #618: 0x00000402\n    frame #619: 0x001f0802 nginxasm_snap_alloc1(as=0x00000000, ref=) + 170 at lj_asm.c:859\n    frame #620: 0x001e0802 nginxlj_record_ins + 98 at lj_record.c:105\n    frame #621: 0x001e07a0 nginxlj_record_ins(J=) + 11332 at lj_record.c:1959\n    frame #622: 0x002018e4 nginxlj_cf_coroutine_create(L=<unavailable>) + 212 at lj_obj.h:870\n    frame #623: 0x00000023\n(lldb) n\nProcess 80721 stopped\n* thread #1: tid = 100128, 0x00000000, stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\n    frame #0: 0x00000000\n->  0x0: andeq  r0, r0, r0\n    0x4: andeq  r0, r0, r0\n    0x8: andeq  r0, r0, r0\n    0xc: andeq  r0, r0, r0\n(lldb)  thread backtrace\n* thread #1: tid = 100128, 0x00000000, stop reason = signal SIGSEGV: invalid address (fault address: 0x0)\n  * frame #0: 0x00000000\n    frame #1: 0x20666360 libc.so.7__aeabi_cdcmple + 60\n    frame #2: 0xbfbffc78\n(lldb) \n(lldb)  register read\nGeneral Purpose Registers:\n        r0 = 0x00000001\n        r1 = 0x3ff00000\n        r2 = 0x00000000\n        r3 = 0x3ff00000\n        r4 = 0x00000016\n        r5 = 0x00000010\n        r6 = 0x207a191c\n        r7 = 0x207d3a58\n        r8 = 0x207d3a58\n        r9 = 0x207d3aa0\n       r10 = 0x207c1930\n       r11 = 0x207d3ab0\n       r12 = 0x00000000\n        sp = 0xbfbff908\n        lr = 0x20666360  libc.so.7`__aeabi_cdcmple + 60\n        pc = 0x00000000\n      cpsr = 0x60000010\n```\n. Thanks. Got it. Closing now.\n. thanks. I see. No worries. Lets close this issue.\n. @agentzh thanks a lot for clarifications. Unfortunately we cannot build OpenResty on this hdw since this is a production server used by one of our customers. \nI believe there is no way to disable via configure SSE4.2, if needed. Right ? So basically a simple requirement would be to have hardware which supports SSE4.2 instruction set. SSE4.2 instruction set is used within OpenResty for speed up string parsing or what ? . @agentzh Righty. Good. I will advice our CU to upgrade and use more modern CPU architectures with support for SSE 4.2. Thanks again for quick answer. . ARM64 port +1. Cool stuff. Cavium's ThunderX ?. Do you have any plans to release soon the next version of OpenResty 1.15.6.1 ? Any ideas  ?\nWaiting to integrate our own bits with it and release our products. . Cheers. We will try the 1.15.5.1 release and report back. We should use only core OpenResty modules. \nBut one big difference was using on FreeBSD 12 the stable OpenSSL 1.1.1\nBut somehow building OpenResty against openssl 1.1.1 was just fine. No problems. \n. @agentzh: thanks. no more crashes. . ",
    "aseiot": "Thanks for your rapidly response.\nI have just test the modified version. However, it doesn't works!\nThe complained error is same as before. \n==== Building LuaJIT 2.1.0-alpha ====\ngmake -C src\ngmake[1]: Entering directory `/root/lnmp1.0/ngx_openresty-1.7.10.2rc0/build/LuaJIT-2.1-20150223/src'\nHOSTCC    host/minilua.o\nHOSTLINK  host/minilua\nDYNASM    host/buildvm_arch.h\nHOSTCC    host/buildvm.o\nHOSTCC    host/buildvm_asm.o\nHOSTCC    host/buildvm_peobj.o\nHOSTCC    host/buildvm_lib.o\nHOSTCC    host/buildvm_fold.o\nHOSTLINK  host/buildvm\nBUILDVM   lj_vm.S\nASM       lj_vm.o\nCC        lj_gc.o\nBUILDVM   lj_ffdef.h\nCC        lj_err.o\nCC        lj_char.o\nBUILDVM   lj_bcdef.h\nCC        lj_bc.o\nCC        lj_obj.o\nCC        lj_buf.o\nCC        lj_str.o\nCC        lj_tab.o\nCC        lj_func.o\nCC        lj_udata.o\nCC        lj_meta.o\nCC        lj_debug.o\nCC        lj_state.o\nCC        lj_dispatch.o\nCC        lj_vmevent.o\nCC        lj_vmmath.o\nlj_vmmath.c: In function \u2018lj_vm_foldfpm\u2019:\nlj_vmmath.c:133: warning: implicit declaration of function \u2018exp2\u2019\nlj_vmmath.c:133: warning: incompatible implicit declaration of built-in function \u2018exp2\u2019\nlj_vmmath.c:135: warning: implicit declaration of function \u2018log2\u2019\nlj_vmmath.c:135: warning: incompatible implicit declaration of built-in function \u2018log2\u2019\nlj_vmmath.c: In function \u2018lj_vm_foldfpm\u2019:\nlj_vmmath.c:133: warning: implicit declaration of function \u2018exp2\u2019\nlj_vmmath.c:133: warning: incompatible implicit declaration of built-in function \u2018exp2\u2019\nlj_vmmath.c:135: warning: implicit declaration of function \u2018log2\u2019\nlj_vmmath.c:135: warning: incompatible implicit declaration of built-in function \u2018log2\u2019\nCC        lj_strscan.o\nCC        lj_strfmt.o\nCC        lj_api.o\nCC        lj_profile.o\nCC        lj_lex.o\nCC        lj_parse.o\nCC        lj_bcread.o\nCC        lj_bcwrite.o\nCC        lj_load.o\nCC        lj_ir.o\nlj_ir.c:64: error: \u2018exp2\u2019 undeclared here (not in a function)\nlj_ir.c:64: error: \u2018log2\u2019 undeclared here (not in a function)\ngmake[1]: *** [lj_ir.o] Error 1\ngmake[1]: Leaving directory `/root/lnmp1.0/ngx_openresty-1.7.10.2rc0/build/LuaJIT-2.1-20150223/src'\ngmake: *** [default] Error 2\nERROR: failed to run command: gmake TARGET_STRIP=@: CCDEBUG=-g PREFIX=/usr/local/luajit\nMy gcc & glibc version are\ngcc version 4.1.2 20080704 (Red Hat 4.1.2-54)\nldd (GNU libc) 2.5\nMany thanks for your kindly help!\n. @agentzh Thanks\nThe outputs are linked here:\nhttps://gist.github.com/aseiot/2dde65074f12ce03e62c#file-output-of-build-lj_ir-c\nhttps://gist.github.com/aseiot/2dde65074f12ce03e62c#file-output-of-build-lj_vmmath-c\n. The outputs and c head file have been attached to the following address.\nhttps://gist.github.com/aseiot/5f063d636cd75656748f\nWish it is helpful.\nThanks! \n. It's ok now!\nMany thanks for your kindly help!\n. ",
    "hander": "@agentzh the code in first message is my attemption to reproduce part from nginx config file separately. Originaly problem occured in separate lua file included by content_by_lua_file directive. The main error is that scan command ignores db previously selected by select command. Other problem is with execution previously presented code with resty command('attempt to yield across metamethod/C-call boundary') and it is not important at now.\nHere is new example code from nginx content_by_lua\n```\n    location /lua {\n        content_by_lua '\nlocal redis_address = \"127.0.0.1\"\nlocal redis_port = 6379\nlocal redis_db = 4\nlocal redis = require \"resty.redis\"\nlocal red = redis:new()\nred:set_timeout(1000) -- 1 second\nlocal ok, err = red:connect(redis_address, redis_port)\nif not ok then\n    ngx.log(ngx.ERR, \"failed to connect to redis: \", err)\n    return ngx.exit(500)\nend\nred:select(redis_db)\nred:set(\"ns:key\", \"value from redis\")\nlocal cursor = \"0\"\ncursor, keys, err = unpack(red:scan(cursor, \"count\", 100, \"match\", \"ns:key\"))\nif next(keys) then\n    for key, value in pairs(keys) do\n        ngx.print(value)\n        ngx.print(\" \")\n    end\nend\nlocal value = red:get(\"ns:key\")\nngx.print(value)\n        ';\n    }\n```\nIn completelly rewritten example it works ok on any db from 0-15.\nI will check again on code where error originally occured and let inform you.\nThank you for your attention.\n. Cannot reproduce it anymore.\nSorry for inconvenience, I appreciate your time and effort.\n. ",
    "zot24": "Just want to confirm that this is still happening on openresty/1.9.7.4. ",
    "moonbingbing": "@agentzh ok, we will try. Please, do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/en/community.html Thanks for your cooperation.. ",
    "777ki": "\u8fd9\u4e2a\u4e5f\u6ca1\u770b\u5230\u9519\u8bef\u554a\u3002\u3002\u3002\u3002\u3002\nAt 2015-04-11 18:19:54, \"homichael\" notifications@github.com wrote:\n\u65e0\u8bba 32/64\u4f4d,\u90fd\u901a\u4e0d\u8fc7configure\nyum install readline-devel pcre-devel openssl-devel pcre -y\nwget http://openresty.org/download/ngx_openresty-1.7.10.1.tar.gz\ntar zxvf ngx_openresty-1.7.10.1.tar.gz\ncd ngx_openresty-1.7.10.1\n./configure\nchecking for OS\nLinux 2.6.32-431.23.3.el6.i686 i686 checking for C compiler ... found\nusing GNU C compiler\ngcc version: 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) checking for gcc -pipe switch ... found checking for gcc builtin atomic operations ... found checking for C99 variadic macros ... found checking for gcc variadic macros ... found checking for unistd.h ... found checking for inttypes.h ... found checking for limits.h ... found checking for sys/filio.h ... not found checking for sys/param.h ... found checking for sys/mount.h ... found checking for sys/statvfs.h ... found checking for crypt.h ... found checking for Linux specific features checking for epoll ... found checking for EPOLLRDHUP ... found checking for O_PATH ... not found checking for sendfile() ... found checking for sendfile64() ... found checking for sys/prctl.h ... found checking for prctl(PR_SET_DUMPABLE) ... found checking for sched_setaffinity() ... found checking for crypt_r() ... found checking for sys/vfs.h ... found checking for nobody group ... found checking for poll() ... found checking for /dev/poll ... not found checking for kqueue ... not found checking for crypt() ... not found checking for crypt() in libcrypt ... found checking for F_READAHEAD ... not found checking for posix_fadvise() ... found checking for O_DIRECT ... found checking for F_NOCACHE ... not found checking for directio() ... not found checking for statfs() ... found checking for statvfs() ... found checking for dlopen() ... not found checking for dlopen() in libdl ... found checking for sched_yield() ... found checking for SO_SETFIB ... not found checking for SO_ACCEPTFILTER ... not found checking for TCP_DEFER_ACCEPT ... found checking for TCP_KEEPIDLE ... found checking for TCP_FASTOPEN ... not found checking for TCP_INFO ... found checking for accept4() ... found checking for int size ... 4 bytes checking for long size ... 4 bytes checking for long long size ... 8 bytes checking for void * size ... 4 bytes checking for uint64_t ... found checking for sig_atomic_t ... found checking for sig_atomic_t size ... 4 bytes checking for socklen_t ... found checking for in_addr_t ... found checking for in_port_t ... found checking for rlim_t ... found checking for uintptr_t ... uintptr_t found checking for system byte ordering ... little endian checking for size_t size ... 4 bytes checking for off_t size ... 8 bytes checking for time_t size ... 4 bytes checking for setproctitle() ... not found checking for pread() ... found checking for pwrite() ... found checking for sys_nerr ... found checking for localtime_r() ... found checking for posix_memalign() ... found checking for memalign() ... found checking for mmap(MAP_ANON|MAP_SHARED) ... found checking for mmap(\"/dev/zero\", MAP_SHARED) ... found checking for System V shared memory ... found checking for POSIX semaphores ... not found checking for POSIX semaphores in libpthread ... found checking for struct msghdr.msg_control ... found checking for ioctl(FIONBIO) ... found checking for struct tm.tm_gmtoff ... found checking for struct dirent.d_namlen ... not found checking for struct dirent.d_type ... found checking for sysconf(_SC_NPROCESSORS_ONLN) ... found checking for openat(), fstatat() ... found checking for getaddrinfo() ... found checking for PCRE library ... found checking for PCRE JIT support ... not found checking for md5 in system md library ... not found checking for md5 in system md5 library ... not found checking for md5 in system OpenSSL crypto library ... found checking for sha1 in system md library ... not found checking for sha1 in system OpenSSL crypto library ... found checking for zlib library ... found creating objs/Makefile\nConfiguration summary\nusing system PCRE library\nOpenSSL library is not used\nmd5: using system crypto library\nsha1: using system crypto library\nusing system zlib library\nnginx path prefix: \"/usr/local/nginx\"\nnginx binary file: \"/usr/local/nginx/sbin/nginx\"\nnginx configuration prefix: \"/usr/local/nginx/conf\"\nnginx configuration file: \"/usr/local/nginx/conf/nginx.conf\"\nnginx pid file: \"/usr/local/nginx/logs/nginx.pid\"\nnginx error log file: \"/usr/local/nginx/logs/error.log\"\nnginx http access log file: \"/usr/local/nginx/logs/access.log\"\nnginx http client request body temporary files: \"client_body_temp\"\nnginx http proxy temporary files: \"proxy_temp\"\nnginx http fastcgi temporary files: \"fastcgi_temp\"\nnginx http uwsgi temporary files: \"uwsgi_temp\"\nnginx http scgi temporary files: \"scgi_temp\"\n\u6b64\u5904\u65e0\u6cd5\u7ee7\u7eedmake.\n\u2014\nReply to this email directly or view it on GitHub.\n. why not Chinese .....\n. ",
    "lancelijade": "make install     ??\nLance\nOn Sat, Apr 11, 2015 at 6:33 PM, homichael notifications@github.com wrote:\n\n\u90a3\u7ee7\u7eedmake, \u51fa\u73b0\u8fd9\u4e9b\u63d0\u793a\nmake[2]: Leaving directory\n/test/ngx_openresty-1.7.10.1/build/nginx-1.7.10'\nmake -f objs/Makefile manpage\nmake[2]: Entering directory\n/test/ngx_openresty-1.7.10.1/build/nginx-1.7.10'\nsed -e \"s|%%PREFIX%%|/usr/local/nginx|\" \\\n-e \"s|%%PID_PATH%%|/usr/local/nginx/logs/nginx.pid|\" \\\n-e \"s|%%CONF_PATH%%|/usr/local/nginx/conf/nginx.conf|\" \\\n-e \"s|%%ERROR_LOG_PATH%%|/usr/local/nginx/logs/error.log|\" \\\n< man/nginx.8 > objs/nginx.8\nmake[2]: Leaving directory\n/test/ngx_openresty-1.7.10.1/build/nginx-1.7.10'\nmake[1]: Leaving directory/test/ngx_openresty-1.7.10.1/build/nginx-1.7.10'\n\u7136\u540e\u67e5\u770b\u5e76\u6ca1\u6709\u521b\u5efa\u8fd9\u4e2a\u76ee\u5f55 /usr/local/nginx\nROOT\u6743\u9650\u6267\u884c\u7684.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/openresty/ngx_openresty/issues/93#issuecomment-91824178\n.\n. ngx.timer.at()\n\nLance\n2015-12-12 12:18 GMT+08:00 adpoint notifications@github.com:\n\n\u8bf7\u95ee\u4e00\u4e0b\u6625\u54e5\uff0c\u4e00\u4e2a\u8bf7\u6c42\u53d1\u5230nginx\uff0c\u6bd4\u5982curl\u8bf7\u6c42\uff0c\u53ef\u4e0d\u53ef\u4ee5\u5728location\u91cc\u5148\u8fd4\u56de\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u8fd8\u80fd\u7ee7\u7eed\u5904\u7406\u5176\u4ed6\u903b\u8f91\uff0c\u5c31\u76f8\u5f53\u4e8e\u4f7f\u7528curl\u7ed9nginx\u53d1\u4e00\u4e2a\u901a\u77e5\uff0cnginx\u6536\u5230\u8fd9\u4e2a\u901a\u77e5\u4e4b\u540e\u80fd\u591f\u5904\u7406\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u800c\u4e0d\u4f1a\u963b\u585e\u8fd9\u4e2a\u8bf7\u6c42\uff1f\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/openresty/ngx_openresty/issues/134.\n. ngx.eof()\n\nLance\n2015-12-12 17:26 GMT+08:00 Lance lancelijade@gmail.com:\n\nngx.timer.at()\nLance\n2015-12-12 12:18 GMT+08:00 adpoint notifications@github.com:\n\n\u8bf7\u95ee\u4e00\u4e0b\u6625\u54e5\uff0c\u4e00\u4e2a\u8bf7\u6c42\u53d1\u5230nginx\uff0c\u6bd4\u5982curl\u8bf7\u6c42\uff0c\u53ef\u4e0d\u53ef\u4ee5\u5728location\u91cc\u5148\u8fd4\u56de\u8fd9\u4e2a\u8bf7\u6c42\uff0c\u8fd8\u80fd\u7ee7\u7eed\u5904\u7406\u5176\u4ed6\u903b\u8f91\uff0c\u5c31\u76f8\u5f53\u4e8e\u4f7f\u7528curl\u7ed9nginx\u53d1\u4e00\u4e2a\u901a\u77e5\uff0cnginx\u6536\u5230\u8fd9\u4e2a\u901a\u77e5\u4e4b\u540e\u80fd\u591f\u5904\u7406\u81ea\u5df1\u7684\u903b\u8f91\uff0c\u800c\u4e0d\u4f1a\u963b\u585e\u8fd9\u4e2a\u8bf7\u6c42\uff1f\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/openresty/ngx_openresty/issues/134.\n. \n\n",
    "max-l": "@agentzh,  I wasn't suggesting making --with-http_sub_module,   I was only wondering why adding \"-with-http_sub_module\" to the ./configure command was not adding the module. \nIt turns out that the module was being added (the -with-http_sub_module switch was working correctly), it is just that I was calling the sub_filter directive inside an if statement in the nginx config (a syntax/format error), and I misinterpreted the error message as saying \"this module is unknown\", but it was really saying \"the sub_filter directive cannot be used at this place in the config\"...\nSo sorry, I should have closed this issue upon this discovery ! \n. ",
    "kirk7880": "Yes, I compiled against \"OpenSSL 1.0.2a 19 Mar 2015.\" Is there a recommended version to use?\n. @agentzh Sure thing:\notool\nbash\notool -L /usr/local/openresty/nginx/sbin/nginx\n/usr/local/openresty/nginx/sbin/nginx:\n    /usr/local/openresty/luajit/lib/libluajit-5.1.2.dylib (compatibility version 2.1.0, current version 2.1.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1213.0.0)\n    /usr/local/opt/pcre/lib/libpcre.1.dylib (compatibility version 4.0.0, current version 4.5.0)\n    /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.5)\nnginx -V\nbash\n/usr/local/openresty/nginx/sbin/nginx -V\nnginx version: openresty/1.7.10.1\nbuilt by clang 6.1.0 (clang-602.0.49) (based on LLVM 3.6.0svn)\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt='-I~/prototype/scripts/installers/ngx_openresty-1.7.10.1/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1 \n-O2 -I/usr/local/Cellar/pcre/8.37/include' \n--add-module=../ngx_devel_kit-0.2.19 \n--add-module=../echo-nginx-module-0.57 \n--add-module=../xss-nginx-module-0.04 \n--add-module=../ngx_coolkit-0.2rc2 \n--add-module=../set-misc-nginx-module-0.28 \n--add-module=../form-input-nginx-module-0.10 \n--add-module=../encrypted-session-nginx-module-0.03 \n--add-module=../srcache-nginx-module-0.29 \n--add-module=../ngx_lua-0.9.15 \n--add-module=../ngx_lua_upstream-0.02 \n--add-module=../headers-more-nginx-module-0.25 \n--add-module=../array-var-nginx-module-0.03 \n--add-module=../memc-nginx-module-0.15 \n--add-module=../redis2-nginx-module-0.11 \n--add-module=../redis-nginx-module-0.3.7 \n--add-module=../rds-json-nginx-module-0.13 \n--add-module=../rds-csv-nginx-module-0.05 \n--with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib \n-L~/prototype/scripts/installers/ngx_openresty-1.7.10.1/build/luajit-root/usr/local/openresty/luajit/lib \n-L/usr/local/Cellar/pcre/8.37/lib' \n--with-pcre-jit --with-ipv6 --with-http_spdy_module \n--with-http_ssl_module --with-http_stub_status_module \n--with-md5-asm --with-sha1-asm --with-http_secure_link_module \n--with-openssl=/usr/local/src/openssl-1.0.2a\n. @agentzh - Any thoughts on what could be causing this? I also tried running busted on CentOS 6.5 and basically getting the same error. Or is there a testing framework you would recommend that works with Openrestry? Busted seems like a solid framework and it would be nice to get it working.\n. ",
    "NineSwordsMonster": "Thanks ! \nI should be more careful \uff01:-(\n. 3Q ,this nginx was copyed from the other user,and the app directory does not have the execute permissions ! :( \n. ",
    "zheng-ji": "this issue help me a lot,thanks to @agentzh \n. ",
    "zhouweiming": "Re-download the tarball has same problem, i have installed 1.7.7.1.\n\n\u5728 2015\u5e745\u670821\u65e5\uff0c\u4e0b\u53482:54\uff0cYichun Zhang notifications@github.com \u5199\u9053\uff1a\n@zhouweiming https://github.com/zhouweiming Maybe your ngx_openresty tarball was corrupted during the download? Try re-downloading it again?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/openresty/ngx_openresty/issues/99#issuecomment-104158581.\n. \n",
    "nathantsoi": "you could try my homebrew recipe, @zhouweiming \nif you don't have homebrew: \nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\ntap the keg:\nbrew tap nathantsoi/openresty\ninstall:\nbrew install open-resty --with-postgres\nstart the server:\nopenresty [-c openresty.conf]\nif you see an error when starting up, you probably need to create a log directory:\nmkdir -p /usr/local/Cellar/open-resty/1.7.7.2/nginx/log\nhttps://github.com/nathantsoi/homebrew-openresty\n. ",
    "jvaleo": "Line 5 is where it's trying to decode the JSON so I assume that exception is due to line 5 trying to decode something it can't. The same setup works if I remove the location / block so my script and JSON look OK I think\n. ",
    "antonheryanto": "wow that very good, will benefit lot of other developer who using windows. I have tested at my window 2008 server and running perfectly. would the windows binary available officially when openresty 1.9.3.2 release ?\n. ",
    "ubercx": "Thanks. That was it. \n. ",
    "capr": "Just looked at it now[1][2][3] and it's in seconds, not sure when/if that changed.\nI sometimes develop parts of an app outside of openresty so I use luasocket, and this time when I ran the same module in openresty with a settimeout(5) I was getting timeouts on everything, it took me a while to figure it out :)\nAnyway, it would be nice if you could publish cosocket, mysql and redis as separate modules. They're useful outside of a web server you know :)\n[1] https://github.com/diegonehab/luasocket/blob/master/src/timeout.c#L155\n[2] https://github.com/diegonehab/luasocket/blob/master/src/timeout.c#L86\n[3] https://github.com/diegonehab/luasocket/blob/master/src/usocket.c#L110\n. ",
    "wojons": "@agentzh \nwhat is in 1.7.10.2? and is there anything that can help get you to 1.7.10.2\n. @agentzh signed up for the mailing list have no idea why i did not do this awhile ago i will start testing it when you push it out. and i promise to no longer call it openrusty. \n. sadly i noticed that about 5 minutes after i posted it and felt dumb \n. ",
    "pinghe": "Nginx is now at 1.9.4.  included feature: multiple \"sub_filter\" directives can be used simultaneously.\nupgrade ?\n. ",
    "Sweetchuck": "Is this issue still alive?\nname | version | date\n-- | -- | --\nnginx        | 1.15.2    | 2018-07-24\nnginx        | 1.13.6    | 2017-10-10\nopenresty | 1.13.6.2 | 2018-05-14\n. ",
    "hulu1522": "@agentzh You're right I was using the jump argument with it.  I ended up having to redirect requests in order to clear the URI arguments.  Thanks for helping.  :)\n. @agentzh Thanks for the suggestion, unfortunately in this circumstance I need a redirect.  I'm writing my own authentication proxy with SSL and cookie session.  After testing an external redirect was the only one that would work every time.  I'll keep ngx.exec in mind as it looks useful in other areas.  I won't have more than 1000 connections at any given time so I'm not too worried.\n. ",
    "dtouzeau": "You are right but it should be added into your \"Bundle\" way in order to be compiled by default.\nWhat did you think about ?\n. Super !!! having a schedule about implementing WAF ??\n. ",
    "needcaffeine": "I'm not sure I understand the intent here. The NewRelic plugin can be installed using the following instructions: http://newrelic.com/plugins/nginx-inc/13 \u2014 I'm not sure that this fits within the scope of ngx_openresty.\n. http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format\n. ",
    "sks": "Thanks @needcaffeine  \nClosing this issue as I'm trying to get some support from nginx folks \n. ",
    "hzcscut": "@needcaffeine \ni mean error log, not access log\n. ",
    "david001-yang": "Thanks very much, we don't need to get file mtime now, we choose to use proxy cache to do it. thanks again for your help.  dol and agentzh ^_^\n. ",
    "cbarraford": "Nevermind, openresty doesn't install this module (thought it did). My mistake. Its the openresty chef cookbook thats the issue i was running into. (im running an older version of the cookbook)\nhttps://github.com/priestjim/chef-openresty/blob/master/attributes/cache_purge.rb\n. ",
    "williamcaban": "Done. Explicit support for pcre-jit, luajit, lua51 added to the build\n. @dol I'm going to explore the alternative on having subpackages so that specific modules (i.e http_postgres_module) get their own subpackage and see if I can break dependencies among those. Right now, if I use weak dependencies and the user tries to use the http_postgres_module without having the libraries, it will have a fatal error during the loading process and I want to avoid that.\n. ",
    "1dot75cm": "I write the RPM SPEC for el5 - el7, fc21 - fc23. It's very powerful. You can even install both openresty and nginx. Please test.\nhttps://copr.fedoraproject.org/coprs/mosquito/nginx/build/123983/\nspec: https://github.com/FZUG/repo/blob/master/rpms/SPECS/openresty/openresty.spec\nOn Fedora and Centos 7\n- Note, If you use rhel 6, please add epel-testing repository (include libpgxx-devel package).\n```\ndnf copr enable mosquito/nginx\ndnf install openresty nginx\nsystemctl start openresty\nopenresty -V\nnginx version: openresty/1.9.3.1\nbuilt with OpenSSL 1.0.1k-fips 8 Jan 2015\nTLS SNI support enabled\n......\nnginx -V\nnginx version: nginx/1.9.5\nbuilt with OpenSSL 1.0.1k-fips 8 Jan 2015\nTLS SNI support enabled\n```\n. @williamcaban thank you hard work. Now, it's full support with el5 - el7, fc21 - fc23.\nbuild result: https://copr.fedoraproject.org/coprs/mosquito/nginx/build/123983/\n. ",
    "luto": "Google People, the spec now lives at https://github.com/FZUG/repo/blob/master/rpms/openresty/openresty.spec\n. ",
    "jgonggrijp": "I appear to have the same issue, with OpenResty version 1.9.3.1 on OS X 10.10.5. I ran\n./configure --with-pcre-jit --with-ipv6 --with-cc-opt=\"-I/opt/local/include -I/usr/local/include\" --with-ld-opt=\"-L/opt/local/lib -L/usr/local/lib\" --with-http_postgres_module\nand got\n./configure: error: ngx_http_lua_module requires the Lua or LuaJIT library and LUAJIT_LIB is defined as /Volumes/scratch/ngx_openresty-1.9.3.1/build/luajit-root/usr/local/openresty/luajit/lib and LUAJIT_INC (path for lua.h) /Volumes/scratch/ngx_openresty-1.9.3.1/build/luajit-root/usr/local/openresty/luajit/include/luajit-2.1, but we cannot find LuaJIT there.\nThe errors in build/nginx-1.9.3/objs/autoconf.err are\n```\nchecking for crypt.h\nobjs/autotest.c:3:10: fatal error: 'crypt.h' file not found\ninclude \n     ^\n\n1 error generated.\n\nchecking for /dev/poll\nobjs/autotest.c:4:10: fatal error: 'sys/devpoll.h' file not found\ninclude \n     ^\n\n1 error generated.\n\nchecking for F_READAHEAD\nobjs/autotest.c:7:14: error: use of undeclared identifier 'F_READAHEAD'\n    fcntl(0, F_READAHEAD, 1);;\n             ^\n1 error generated.\n\nchecking for posix_fadvise()\nobjs/autotest.c:7:5: warning: implicit declaration of function 'posix_fadvise' is invalid in C99 [-Wimplicit-function-declaration]\n    posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL);;\n    ^\nobjs/autotest.c:7:28: error: use of undeclared identifier 'POSIX_FADV_SEQUENTIAL'\n    posix_fadvise(0, 0, 0, POSIX_FADV_SEQUENTIAL);;\n                           ^\n1 warning and 1 error generated.\n```\nSimilar for O_DIRECT (7:23), directio() (8:5, 8:17), SO_SETFIB (7:31), SO_ACCEPTFILTER (7:31), TCP_DEFER_ACCEPT (9:32), TCP_KEEPIDLE (9:32) and several more.\nPlease let me know if I can help in any way.\nEdit to add: I installed PCRE using MacPorts. /opt/local is its proper prefix.\n. Here you go. https://gist.github.com/jgonggrijp/f90feab8247687cf105d\n. Great, I felt reluctant about removing my LuaJIT 2.0.4 install under /usr/local and now I probably don't need to do that anymore! Will try the new tarball later today (in about 9 hours).\n. Ah right, I also have Lua 5.3.1 installed under /opt/local, but I wasn't aware of it because it was installed as a dependency of some of my ports. Uninstalling that would have been a real hassle!\n. Issue solved without hassle, thanks a lot!\n. ",
    "rbnacharya": "Thanks, that worked!! \n. ",
    "dragon9783": "Error Log\n2015/10/08 17:22:45 [error] 30813#0: *58 lua entry thread aborted: runtime error: /labrory/openresty/lua/test_mysql.lua:3: module 'comm.mysqlLib' not found:\n    no field package.preload['comm.mysqlLib']\n    no file '/usr/local/openresty/lualib/comm/mysqlLib.lua'\n    no file '/usr/local/openresty/lualib/comm/mysqlLib/init.lua'\n    no file './comm/mysqlLib.lua'\n    no file '/usr/local/openresty/luajit/share/luajit-2.1.0-alpha/comm/mysqlLib.lua'\n    no file '/usr/local/share/lua/5.1/comm/mysqlLib.lua'\n    no file '/usr/local/share/lua/5.1/comm/mysqlLib/init.lua'\n    no file '/usr/local/openresty/luajit/share/lua/5.1/comm/mysqlLib.lua'\n    no file '/usr/local/openresty/luajit/share/lua/5.1/comm/mysqlLib/init.lua'\n    no file '/usr/local/openresty/lualib/comm/mysqlLib.so'\n    no file './comm/mysqlLib.so'\n    no file '/usr/local/lib/lua/5.1/comm/mysqlLib.so'\n    no file '/usr/local/openresty/luajit/lib/lua/5.1/comm/mysqlLib.so'\n    no file '/usr/local/lib/lua/5.1/loadall.so'\n    no file '/usr/local/openresty/lualib/comm.so'\n    no file './comm.so'\n    no file '/usr/local/lib/lua/5.1/comm.so'\n    no file '/usr/local/openresty/luajit/lib/lua/5.1/comm.so'\n    no file '/usr/local/lib/lua/5.1/loadall.so'\nstack traceback:\ncoroutine 0:\n    [C]: in function 'require'\n    /labrory/openresty/lua/test_mysql.lua:3: in function , client: 127.0.0.1, server: , request: \"GET /test_mysql\n. @agentzh Sudoer for my nginx worker processes and in lua file i add  package.path, it doesn't work , so must add it in nginx conf?\n. @agentzh ok, i add full path in package.path, it's work, thanks alot!\n. ok, i already try it, and work well, thanks alot\n. ",
    "RicherdLee": "Thanks for your help.\n I will go to the mailing list instead next time.\n. Through Variable Scope Lua, I think I should change my mind and abandon the idea of a global variable.\nBy setting lua_code_cache to cache, and use the DrizzleNginxModule to opration database.\nThank you for pointing out the fundamental problem.\n. ",
    "xwfang": "build with the installed OpenSSL library, specify the --with-cc-opt \u548c --with-ld-opt options instead. ",
    "JounQin": "I've installed OpenSSL a long time ago and even if I use --with-openssl=\"/usr/local/Cellar/openssl/1.0.2d_1\" however the error still persists.\nError Files\n. Thanks a lot!I've installed the OpenResty successfully under your guidance!\n. ",
    "rinrinne": "+ dos2unix package on Ubuntu14.04\n. ",
    "ninesunqian": "I use ngx_openresty-1.9.3.1.tar.gz\n. previously I used ngx_openresty-1.4.2.7.tar.gz, Because of the bug, I start to use  ngx_openresty-1.9.3.1.tar.gz today. But it also has the bug.\n. the lua script is anti-theft-test.lua:\n\nlocal new_uri = \"/test-lua/1.mp4/av-g-2.ts\"\nlocal subrequest_res = ngx.location.capture(new_uri)\nlocal new_body = subrequest_res.body\nngx.header.content_length = #new_body\nngx.print(new_body)\nngx.flush()\n\nnginx.conf add\n\n         location ^~ /anti-theft-test/ {\n             lua_code_cache off;\n             content_by_lua_file /opt/bravo/api/anti-theft-test.lua;\n         }\n\nthe size of   ${www}/test-lua/1.mp4/av-g-2.ts is 2.5M\n\"curl http://localhost/anti-theft-test/1.mp4/abc\"   can reproduce the crashes.\nnginx configure is\n\n      ./configure \n            --with-luajit\n            --with-http_stub_status_module\n            --without-http_redis2_module\n            --with-http_iconv_module\n            --with-http_mp4_module\n            --with-http_flv_module\n            --with-http_realip_module\n            -j2 \n\n. the OS is CentOS 6.5\n. I need modify a m3u8 content, add \"key=xxxx\" to ts url. But in body_filter_by_lua  the ngx.arg[1] is a data trunk, I can't parse it. \n. @agentzh how about this issue ? \n. After I updated libluajit-5.1.so.2.0.2 to libluajit-5.1.so.2.1.0,  the bug disappeared\n. LuaJIT-2.0.4 is also ok \n. @agentzh \nthe bundled LuaJIT-2.0.2 in ngx_openresty-1.4.2.7 has the memory leak bug. I patched it and use \"--with-luajit-xcflags=-DLUAJIT_USE_SYSMALLOC\" to round the bug.\nI don't know whether the LuaJIT-2.0.4 did fixed the bug.  If I use ngx_openresty-1.9.3.1, many of luac file and compile script needed to be modified.  So now, I use ngx_openresty-1.4.2.7 + LuaJIT-2.0.4\n. @agentzh After test many time, now I make sure that reason of the core dump is \"LUAJIT_USE_SYSMALLOC\".  I will use newest ngx_openresty-1.9.3.1.\nThank you very much for your adivce.\n. haha, I see the new version\n. I use ngx_openresty 1.9.3.2, but there is still memory leak.\n I have a nginx module, and I bundle it to nginx with luajit. If request the particular url,  the memory will leak, but the url is only related with my module, and is unrelated with luajit. \nWhich c or c++ functions conflicts with luajit ?   My module using malloc, free, new and delete.\n. @agentzh  I use ab to press nginx some time, with different  concurrencies and response sizes.\nI find that it the physical memory of nginx is more than 1G, it will not fall to normal size.\nYou can use mp4 module to reproduce this bug:\nshell >> ab -c 1000 -n 10000 http://127.0.0.1:83/only_mp4/oceans-clip.mp4?start=10    (it can use larger  memory)\nnginx.conf:\nlocation /only_mp4 {\n        mp4;\n        mp4_buffer_size       1m; \n        mp4_max_buffer_size   5m; \n    }\n. you can download mp4 from:  http://www.eulermind.com/oceans-clip.mp4  to  ${www_root}/only_mp4/\n. I think you misunderstand my meaning. \nI use mp4_module and my module(c and c++) to test nginx, and watch RES of top command\n- nginx without http_lua_module --- ---------------------------------------no memory leak\n- nginx with lua module -------------------------------------------------------memory leak\n- nginx with lua modue and  -DLUAJIT_USE_SYSMALLOC  ------ no memory leak\nIn all the 3 instances, the memory leak will happen when the RES of nginx is more than 1G.\nlj-gc-objs.sxx shows \"GC total size: 49834 bytes GC state: sweep\", after memory leaked. \nI did not use any lua code in this test, and not add any configure of lua to nginx.conf.\nAlthough it is incredible, but I think it is related to luajit. Moreover all the nginx modules using large memory maybe have the problem,  if them are bundled to nginx with luajit.\nIf I am familiar with luajit, I will sure to fix the bug.  But I'm not. so I only provides  as more test details as possible. \n. Sorry, I meas 49834 bytes is little compared with memory leak(more than 1G), so the problem should not be the GC of luajit.\nvalgrind maybe not helping, becase LUAJIT_USE_SYSMALLOC has no memory lock. \nregarding memory fragmentation, alloc and free of luajit should product less memory fragmentation than malloc and free of libc.\nRES is related to max concurrency concurrency of more times of ab.\nI run ab many times with same concurrency, the RES will not increase continually.\n. maybe I should add some logs to lj_alloc.c  ?\n. OK, I will do it next monday\n. I see that luajit call mmap with MAP_32BIT flags in lj_alloc.c: 194. Moreover the memory leak appears when the RES more than 1G. So I add \"-DLUAJIT_ENABLE_GC64\" and the memory leak disappears.\n. I add fprintf(stderr,....) to mmap, munmap, mremap in lj_alloc.c,  lj_ccallback.c, lj_mcode.c files, but I only get only one line log \"ptr: 0x4161c000, size: 131072, in lj_alloc mmaped\".  I can't understand why.\nI find that only mmap in lj_alloc.c use MAP_32BIT, other mmaps does not. \n. ",
    "nvksie": "@agentzh got it, thanks!\n. ",
    "adpoint": "@lancelijade  thanks very much!\n. ",
    "doujiang24": "@sdcuike  Please, no Chinese here. This place is considered English only. If you really want to use Chinese. Please join the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community\nRegarding your question, you can use ngx.thread.spawm + lua-resty-http(recommended) or ngx.location.capture_multi + proxy_pass\nhttps://github.com/openresty/lua-nginx-module/#ngxthreadspawn\nhttps://github.com/openresty/lua-nginx-module/#ngxlocationcapture_multi\n. @wentianle May be you need ngx_stream_lua_module, it's on the road.\nPlease do not use Chinese here. Thank you. BTW, such general questions should go to the openresty (Chinese) mailing list instead. Please see https://openresty.org/#Community for more details. Thanks for your cooperation.\n. understand\n. LGTM:). @agentzh I also think buffer the error messages to request level is better for now.\nSince we need to drop the error messages when a request is done but still have error messages belong to it left in the worker level buffer, which is a bit difficult here.\n@membphis I personally think limit the max number of error log per request is not so necessary here.. ",
    "sdcuike": "thank you \n. ",
    "kalons": "sorry for using Chinese here , Im xiuluo999, this is my another account,  thanks for ur reply. u mean make a server{} block as default server and then switch different server logic by lua, or even just do a local proxy pass to real virtual server \n. ",
    "nikolay": "@agentzh By fork I meant a GitHub fork where these patches live (temporarily) as commits, not a fork in the general meaning.\n. @agentzh Why don't you at least use the SemVer convention, i.e. major.minor.patch+build, i.e. 1.11.2+04 using the above version? Unfortunately, the build number should be 0-padded.. ",
    "EtherDream": "\u52a0\u4e86 --with-openssl=path \u5c31\u51fa\u95ee\u9898\u4e86\n. ```\ncd ngx_openresty-VERSION/\nwget https://www.openssl.org/source/openssl-1.0.2e.tar.gz\ntar xvf openssl-1.0.2e.tar.gz\n./configure --with-openssl=./openssl-1.0.2e\nmake\n......\nIn file included from src/core/nginx.c:8:\nIn file included from src/core/ngx_config.h:34:\nIn file included from src/os/unix/ngx_darwin_config.h:57:\n/usr/local/include/ngx_auto_config.h:420:9: fatal error: 'ngx_shared_config.h' file not found\ninclude\n    ^\n\n1 error generated.\n```\n. solved. thanks very much!\n. ",
    "sul4bh": "Upon further investigation I found this in my build/nginx-1.9.7/objs/autoconf.err:\n```\nchecking for C compiler\n\nchecking for --with-ld-opt=\"-Wl,-rpath,/usr/local/openresty/luajit/lib /usr/local/Cellar/pcre/8.38/lib\"\nld: can't map file, errno=22 file '/usr/local/Cellar/pcre/8.38/lib' for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\ninclude \nint main() {\n    ;\n    return 0;\n}\n\ncc -pipe -O2 -I/usr/local/Cellar/pcre/8.38/include -o objs/autotest objs/autotest.c -Wl,-rpath,/usr/local/openresty/luajit/lib /usr/local/Cellar/pcre/8.38/lib\n```\n. Sorry, I was stupid. I missed '-L' with --with-ld-opt.\n. ",
    "kindy": "I guess on windows, you should use path like \"f:/\", without prefix \"/\".\nlike in this post.\nit's about Nginx, but not OpenResty.\n. ",
    "chenzx": "no no no, f:/ is also no-use.\nI know there may be a problem with Nginx, but i hope better to fix it in\nOpenResty. Since OpenResty fixes a lot patch to Nginx?\nYour saying \"it's about Nginx, but not OpenResty\" is not responsible.\n2016-01-10 18:18 GMT+08:00 Kindy Lin notifications@github.com:\n\nI guess on windows, you should use path like \"f:/\", without prefix \"/\".\nlike in this post\nhttp://stackoverflow.com/questions/22870814/nginx-mapped-hard-drive-network-sharing\n.\nit's about Nginx, but not OpenResty.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/openresty/ngx_openresty/issues/142#issuecomment-170331944\n.\n. Yes, of couse, i have no index file.\n\nBut i set autoindex on; according to some web tutorials.\n. I want to test whether Nginx supports HTTP Range requests under windows, since i want to make OpenResty/Nginx a simple HTTP Video streaming server....\n. Oh, you are right, maybe Windows has some strict pemission problems with ROOT drive path...\nBut i also hesitate there is short of some flexibility with Nginx/Windows port...\n. I'll try tomorrow at my working office.\nSince your env is working right, there should be some problem that really matters.\n. @agentzh Hi, \u4f60\u8bf4\u7684\u6211\u660e\u5929\u8bd5\u4e00\u4e0b\u770b\u770b\u3002\u770b\u8fc7\u4f60\u4e4b\u524d\u7684\u4e00\u7bc7\u8bbf\u8c08\uff0c\u8bf4\u662f\u5728Ali\u505a\u8fc7\u4e00\u6bb5\u65f6\u95f4\u7684\u57fa\u4e8eWebKit\uff0fFirefox\u7684\u667a\u80fd\u722c\u866b\u7814\u7a76\uff08\u57fa\u4e8e\u53ef\u89c6\u5316\u7279\u6027\uff09\uff0c\u6709\u5174\u8da3\u5177\u4f53\u8bf4\u4e00\u4e0b\u5417\uff1f\n\u6211\u73b0\u5728\u6b63\u8003\u8651\u505a\u4e00\u4e2a\u57fa\u4e8eChromium\u5185\u6838\u7684\u5ba2\u6237\u7aef\u667a\u80fd\u722c\u866b\u3002mail\uff1achenzx6 AT lenovo.com\n. @agentzh I retried today, use c:/ & f:/\uff0cboth ok.\nCannot figure out why it failed days before when i first used OpenResty.\nAlso, i noticed OpenResty/Windows cannot autoindex chinese-encoded filenames to display correctly. Chrome default uses utf-8 encoding, but OpenResty/Windows's default output encoding is GBK.\n. @agentzh \u65e0\u8bba\u6211\u4f7f\u7528charset gbk; \u8fd8\u662fcharset utf-8; \u4e2d\u6587\u76ee\u5f55/\u6587\u4ef6\u540d\u53ef\u4ee5\u6b63\u5e38\u663e\u793a\uff0c\u4f46\u662f\u65e0\u6cd5\u8fdb\u4e00\u6b65\u70b9\u51fb/\u70b9\u8fdb\u53bb\u67e5\u770b\u3002Nginx\u7684autoindex\u6a21\u5757\u4f3c\u4e4e\u5bf9\u4e2d\u6587\u6587\u4ef6\u8def\u5f84\u7684\u652f\u6301\u8fd8\u662f\u6709\u70b9\u95ee\u9898\u3002\n. I have tested using Video.js library, seems Nginx/OpenResty supports HTTP Range requests.\nBut the annoying problem is it doesn't support Chinese-encoded filenames(for real downloading).\nDays before i modified Python's builtin SimpleHTTPServer.py to implement this, but it's too ugly coded.\n. @chenzx I download video files using XunLei which default contains chinese characters, and i only serve http video streaming in LAN, no outside public networks.\nSorry bother your time, i find another config sample from http://wangheng.org/nginx-set-directory-browsing-and-solve-the-problem-of-chinese-garbled.html\uff1a\nautoindex on;\n        autoindex_exact_size off;\n        autoindex_localtime on;\n        charset utf-8,gbk;\nBut it still doesn't work.\n. Sorry, i just found that, Nginx/OpenResty seems to have already support stream speed limit:\nhttp://wiki.jikexueyuan.com/project/openresty-best-practice/lua-limit.html\n. @agentzh I've read your tutorial ePub book, there are 2 ways to do static files in nginx:\n\nUse ngx_static module, with location & root directives set\nUse try_files to try multiple dir prefixes\n\nBut they are both not flexible. With NodeJS/express's serve-static middleware, I can serve any static file in local file system.\n& Also, I have not find the url route mechanism in Nginx or OpenResty, they can be done with manual uri parsing by rewrite_by_lua directive, but the code will be too nasty.. PS: I'm not a Nginx/OpenResty programmer currently, because I'm not doling the web backend work.\nI'm just interested in using OpenResty as a scripting/test web server tool.. ",
    "lushibi": "same problem as @chenzx , any chance to resolve or fix that?\n@agentzh . ok, got it, thanks. ",
    "sosojustdo": "replace template.lua file, that ok!\n thank you @bungle ,@agentzh\n. ",
    "bobrik": "A couple of things that HTTPS alone won't catch:\n- if attacker breaks into the server and replaces source code without messing with https.\n- if source code owner goes nuts and replaces source code.\n. I'm worried about consistent build for you and me irrelevant if what happens on the network. I want to build from the same sources as everybody else, consistently.\nFun fact: there is apache mirror that turns tar.gz with known file Content-length into tar without that header. Both are HTTPS. Similar could happen on one URL when request hits servers with different software release.\nOne more example: Gimp on SourceForge.\n. ",
    "yanji0520": "In the project,redis uses the cluster,when the front end connects redis-cluster by openrestry,the message\"ASK turn/MOVED turn\" of redis-cluster would appear,resulting  the acquired data is not correct,whether there is any way,it can be able to accurately locate to the correct redis when connect redis-cluster.\n. ",
    "exoristi": "@agentzh\nI have already tried --with-cc=gcc for both 1.9.7.1 and 1.9.7.2 versions but I got more errors\nsee: https://github.com/exoristi/logs/blob/master/openresty.txt\nI got different errors when I ran:\n./configure --with-cc=gcc \\\n    --prefix= \\\n    --with-cc-opt='-DFD_SETSIZE=1024' \\\n    --with-select_module \\\n    --with-ipv6 \\\n    --sbin-path=nginx.exe \\\n    --with-pcre-jit \\\n    --with-luajit-xcflags=\"-DLUAJIT_NUMMODE=2 -DLUAJIT_ENABLE_LUA52COMPAT\" \\\n    --with-pcre=objs/lib/pcre-8.37 \\\n    --with-zlib=objs/lib/zlib-1.2.8 \\\n    --with-openssl=objs/lib/openssl-1.0.2d \\\n    -j5\nhttps://github.com/exoristi/logs/blob/master/openresty2.txt\n. @agentzh gcc version 3.4.4 (msys special)\n. I tried the latest version of gcc and installed msys2 as well. I still get the same errors so I gave up and installed 'ngx_openresty-1.9.3.2-win32' instead which works fine so far.\n. ",
    "geoyws": "If you are using Amazon's EC2 to host OpenResty, remember to install the development tools that are not installed by default because not everyone compiles software.\nsudo yum groupinstall \"Development Tools\"\nhttp://docs.aws.amazon.com/AWSEC2/latest/UserGuide/compile-software.html\nAnd since EC2 is based on RedHat...\nyum install readline-devel pcre-devel openssl-devel gcc\n. ",
    "hizorro88": "yum install gcc\n. ",
    "webeau": "To avoid any confusion that this may be LibreSSL related, I also tried the same using the stable release 2.2.6:\nobjs/ngx_modules.o \\\n-L/opt/src/ngx_openresty/openresty-1.9.11.1rc0/build/luajit-root/usr/local/openresty/luajit/lib -Wl,-rpath,/usr/local/openresty/luajit/lib -lrt -Wl,-E -ldl -lpthread -lcrypt -L/usr/local/lib -ldrizzle -L/opt/src/ngx_openresty/openresty-1.9.11.1rc0/build/luajit-root/usr/local/openresty/luajit/lib -lluajit-5.1 -lm -ldl -lbrotlienc -lstdc++ -L/usr/local/lib -lMagickWand-6.Q16 -lMagickCore-6.Q16 -L/usr/local/lib -lMagickWand-6.Q16 -lMagickCore-6.Q16 -lgd -lqrencode -luuid /opt/src/pcre-8.38/.libs/libpcre.a /opt/src/libressl-2.2.6/.openssl/lib/libssl.a /opt/src/libressl-2.2.6/.openssl/lib/libcrypto.a /opt/src/zlib/libz.a -lxml2 -lxslt -lexslt -lgd -lGeoIP -latomic_ops \\\n-Wl,-E -fstack-protector -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu/perl/5.20/CORE -lperl -ldl -lm -lpthread -lc -lcrypt \\\n-Wl,-E\nobjs/addon/src/ngx_http_lua_module.o: In function ngx_http_lua_merge_srv_conf':\n/opt/src/ngx_openresty/openresty-1.9.11.1rc0/build/nginx-1.9.11/../ngx_lua-0.10.1rc0/src/ngx_http_lua_module.c:893: undefined reference toSSL_CTX_set_cert_cb'\nobjs/addon/src/ngx_http_lua_ssl_certby.o: In function ngx_http_lua_ffi_ssl_clear_certs':\n/opt/src/ngx_openresty/openresty-1.9.11.1rc0/build/nginx-1.9.11/../ngx_lua-0.10.1rc0/src/ngx_http_lua_ssl_certby.c:553: undefined reference toSSL_certs_clear'\nobjs/addon/src/ngx_http_lua_ssl_certby.o: In function ngx_http_lua_ffi_ssl_set_der_certificate':\n/opt/src/ngx_openresty/openresty-1.9.11.1rc0/build/nginx-1.9.11/../ngx_lua-0.10.1rc0/src/ngx_http_lua_ssl_certby.c:623: undefined reference toSSL_add0_chain_cert'\ncollect2: error: ld returned 1 exit status\n. Sorry for multiple posts.  I hope to save you time.  I tried this exact same compile on 1.9.7.3 and get the same error.  1.9.7.1 compiles without error.  However, 1.9.7.2 does produce the same compile error.\nPlease let me know if there is any more information that may help run this error down.\n. Again, sorry, but this appears to be a known issue with Openresty and Libressl.  I am closing the issue.\n. ",
    "warmchang": "Read the \"README-win32.txt\" in \"openresty-1.9.7.X.tar.gz\", setup the environment ,and run \"util/build-win32.sh\".\nGood lukey!\n. @doudou586 , I think maybee you can build it by yourself.\n. Hi @agentzh ,\nThe \"luajit-root\" directory make by script. I run the \"make clean\" then \"build-win32.sh\" again, and got the same result.\n\"luajit-root\" directory is as follow after build:\nsh-3.1$ pwd\n/c/openresty/openresty-1.9.7.4/build/luajit-root\nsh-3.1$ ls -l\ntotal 2694\ndrwxr-xr-x 3 china Administrators       0 Mar 21 19:37 include\ndrwxr-xr-x 3 china Administrators       0 Mar 21 19:37 lua\n-rwxr-xr-x 1 china Administrators 2654883 Mar 21 19:37 lua51.dll\n-rwxr-xr-x 1 china Administrators  103121 Mar 21 19:37 luajit.exe\nsh-3.1$\nThe \"cjson.so\" can't be made, and now I have no idea about this...\n. I have tried the \"openresty-1.9.7.3\" and \"ngx_openresty-1.9.7.2\", and got the same result.\nC:\\openresty\\openresty-1.9.7.4\\build\\luajit-root>tree /f /a\n\u6587\u4ef6\u5939 PATH \u5217\u8868\n\u5377\u5e8f\u5217\u53f7\u4e3a 00000200 662B:8D2B\nC:.\n|   lua51.dll\n|   luajit.exe\n|\n+---include\n|   \\---luajit-2.1\n|           lauxlib.h\n|           lua.h\n|           lua.hpp\n|           luaconf.h\n|           luajit.h\n|           lualib.h\n|\n\\---lua\n    \\---jit\n            bc.lua\n            bcsave.lua\n            dis_arm.lua\n            dis_mips.lua\n            dis_mipsel.lua\n            dis_ppc.lua\n            dis_x64.lua\n            dis_x86.lua\n            dump.lua\n            p.lua\n            v.lua\n            vmdef.lua\n            zone.lua\n. @agentzh Good news,\nI have changed to use the MSYS2 environment and mingw-w64-i686-gcc toolchain, and can compile correctly.\n```\nC:\\msys32\\home\\china\\openresty\\openresty-1.9.7.4>nginx.exe -V\nnginx version: openresty/1.9.7.4\nbuilt by gcc 5.3.0 (Rev2, Built by MSYS2 project)\nbuilt with OpenSSL 1.0.2e 3 Dec 2015\nTLS SNI support enabled\nconfigure arguments: --prefix=. --with-cc-opt='-O2 -DFD_SETSIZE=1024' --add-module=../ngx_devel_kit-0.2.19\n--add-module=../echo-nginx-module-0.58 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.\n2rc3 --add-module=../set-misc-nginx-module-0.30 --add-module=../form-input-nginx-module-0.11 --add-module=.\n./encrypted-session-nginx-module-0.04 --add-module=../srcache-nginx-module-0.30 --add-module=../ngx_lua-0.1\n0.2 --add-module=../ngx_lua_upstream-0.05 --add-module=../headers-more-nginx-module-0.29 --add-module=../ar\nray-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.16 --add-module=../redis2-nginx-module-0.12 -\n-add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.14 --add-module=../rds-csv-\nnginx-module-0.07 --with-cc=gcc --with-ipv6 --sbin-path=nginx.exe --with-ipv6 --with-pcre-jit --with-http_s\ntub_status_module --with-http_realip_module --with-stream --with-stream_ssl_module --with-http_addition_mod\nule --with-http_sub_module --with-pcre=/home/china/openresty/openresty-1.9.7.4/objs/lib/pcre-8.38 --with-zl\nib=/home/china/openresty/openresty-1.9.7.4/objs/lib/zlib-1.2.8 --with-openssl=/home/china/openresty/openres\nty-1.9.7.4/objs/lib/openssl-1.0.2e --with-select_module --with-http_ssl_module\nC:\\msys32\\home\\china\\openresty\\openresty-1.9.7.4>\n```\nSo I think the error before was caused by the build environment.\nAnyway, thank you for your attention!\n. oops, this is the issue of 'openresty.org'.\nmy mistake and i will submit to the right repository.\nsorry.\n. I think the nginx core of next or's version is 1.9.15:\nhttps://github.com/openresty/openresty/commit/86be514b1c14233d48a5b01e9e74517ee5eee3ac\n. ",
    "doudou586": "@agentzh , Great, thanks for quick reply.\nThat will help a lot.  I will test the function now.\nThanks.\n. Hi, @agentzh , \nI have tried the driver of pgmoon, however, the installing process looks quite a few time consuming. I have to install luarock tool, when installed the luarock, it would check the installation of lua. \nOn the contrary, when core team of Openresty makes the compilation of package, I think it only need to add one \"--withXXX\" option. Therefore, still hope to add the driver of PostgreSQL & MySQL embeded in the binary package, especially for the windows platform.\nThanks !\n. Thanks for the suggestion, I will test it today.\n. ",
    "schickling": "@neomantra please give us a ping here once the Docker image is ready to use \ud83d\udc4d \n. ",
    "JarleB": "@agentzh  Thank you. Seems I had wrong assumptions about this. I'm still a bit puzzled why v1.0 and v1.1 requests is processed differently though? \n. ",
    "marcusramberg": "@agentzh seems that the problem is that with http 1.1 when the body is sent (template.render()), proxy_pass will not resend the body, but with http 1.0 it will overwrite the previously rendered template body. This seems like a gotcha, and I'm not sure why it should be different for http 1.0.\n. Yeah, that would probably fix my issue. Seems like the default for that setting should have been off though. just my 5c. Leads to very unexpected results.\nMarcus\n\nOn 29 Mar 2016, at 20:05, Yichun Zhang notifications@github.com wrote:\n@marcusramberg Maybe you should turn off the lua_http10_buffering directive in your nginx.conf?\nhttps://github.com/openresty/lua-nginx-module#lua_http10_buffering\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. I completely agree that's the best solution, but most people won't be doing http 1.0 testing, so having it buffer differently from http 1.1 by default seems like the wrong choice which can lead to security holes. lua template uses ngx.print, and I have an example on my work computer I'll add tomorrow which illustrates the difference. \n\nI'm a bit surprised, as the http10_buffering documentation seems to indicate buffering will be disabled if you use ngx.print and write a body.\nMarcus\n. @agentzh From your documentation link above: \nIf the Lua code explicitly sets a Content-Length response header before sending the headers (either explicitly via ngx.send_headers or implicitly via the first ngx.say or ngx.print call), then the HTTP 1.0 response buffering will be disabled even when this directive is turned on.\n. @agentzh 'or implicitly via the first ngx.say og ngx.print call' Seems to indicate ngx.print should disable buffering. Am I not reading that right?\n. ",
    "kracekumar": "Thanks @agentzh, that was my bad.\n. ",
    "da99": "This is for dev and testing purposes and not staging/production purposes.\nI write Bash/Zsh shell scripts that download and test the app against the latest stable version of OpenResty. I've given up on OS package managers because the versions might be out-of-date or contain customizations I don't want. I've seen popular Node.js code that use curl/wget to download HTML (https://nodejs.org/dist/) and \"sed\" it to get the latest node.js. I wasn't sure how OpenResty does it.\nIt's not an important feature. I was curious how other people partially automate the process during dev and testing.\n. @agentzh Thanks very much.\n. ",
    "SilenceCarrot": "Thanks;\n. ",
    "lihui0213": "thanks\uff0cI known\u3002The new version of the plan released at what time\uff1f\n. the nginx on windows is not suppored udp proxy,are there any plans to support the udp proxy on windows?\n. Yes,the code is only achieve the linux version ,is not support in windows.\nIn http://nginx.org/en/docs/windows.html  say three Known issues. The UDP proxy functionality is not supported.\nI check the code ,it is in !win_32,the windows is not support recvmsg.so I think to ask there are any plans to fix this issues?\n. ",
    "xu4wang": "@agentzh  thanks for the quick response. I'm fixing it.\n. @agentzh after moving most of the logic (including ffi) into a module, there is no lua entry thread abort for several days. Thanks for the help.\n. ",
    "amingilani": "@agentzh is it possible for me to convince you otherwise? Containers are becoming a popular way to orchestrate production images, and the convention is that is that if we base our container files off of 1.12 it will always link to the latest 1.12.x without breaking backwards compatibility.\nIf you don't plan on doing so, could you atleast tell users how your scheme works, so that we don't end up breaking compatibility during upgrades? :). Yeah, I for one agree. It's too much work for too little reward. Especially since they match the first three version numbers with nginx which does use semver.. ",
    "ccleung": "@agentzh thanks for the quick response. We are using openresty:\n./resty --V\nresty 0.03\nnginx version: openresty/1.9.7.3\nbuilt by gcc 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.1)\nbuilt with OpenSSL 1.0.1f 6 Jan 2014\nTLS SNI support enabled\nconfigure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt=-O2 --add-module=../ngx_devel_kit-0.2.19 --add-module=../iconv-nginx-module-0.13 --add-module=../echo-nginx-module-0.58 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.29 --add-module=../form-input-nginx-module-0.11 --add-module=../encrypted-session-nginx-module-0.04 --add-module=../srcache-nginx-module-0.30 --add-module=../ngx_lua-0.10.0 --add-module=../ngx_lua_upstream-0.04 --add-module=../headers-more-nginx-module-0.29 --add-module=../array-var-nginx-module-0.04 --add-module=../memc-nginx-module-0.16 --add-module=../redis2-nginx-module-0.12 --add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.14 --add-module=../rds-csv-nginx-module-0.07 --with-ld-opt=-Wl,-rpath,/usr/local/openresty/luajit/lib --conf-path=/etc/nginx/nginx.conf --sbin-path=/usr/sbin/nginx --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --with-ipv6 --with-md5-asm --with-sha1-asm --without-http_ssi_module --without-mail_smtp_module --without-mail_imap_module --without-mail_pop3_module --with-pcre=/var/lib/aws/opsworks/cache.stage2/pcre-8.38 --with-pcre-conf-opt=--enable-utf --with-pcre-jit --with-file-aio --with-libatomic --with-http_ssl_module --with-http_gzip_static_module --with-http_gunzip_module --with-http_stub_status_module --with-http_secure_link_module --with-http_realip_module --with-http_flv_module --with-http_mp4_module --add-module=/var/lib/aws/opsworks/cache.stage2/ngx_cache_purge/cb7d5f22919c613f1f03341a1aeb960965269302e9eb23425ccaabd2f5dcbbec --add-module=/var/lib/aws/opsworks/cache.stage2/nginx-upstream-fair\nOperating System:\nlsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04.4 LTS\nRelease:    14.04\nCodename:   trusty\n. Another thing to note is that if I make multiple requests to nginx server, e.g., with ab the active connections will not increase even if there is a consistent error raised in the logging phase. It seems to only steadily increase in active connections in production, when many different requests from different ip addresses are made and the logging phase constantly errors out.\n. @agentzh thanks for investigating. we did look at the /var/log/nginx/error.log but didn't see anything that would indicate that our nginx workers had crashed unexpectedly. We will try to see if removing ngx_cache_purge and ngx_upstream_fair will do anything, and also investigate the core dumps.\n. I'm not sure if this relates to the issue or not, but just realize that we are using luasockets in the log_by_lua phase to send logs to treasure data (an analytics data storing service). I'm not sure if this can lead to issues (we do ensure that the socket is closed, and also wrap it in a pcall such that if an error happens, we close the connection). \nThe reason we use luasockets is because cosockets are not supported in the log phase (https://github.com/openresty/lua-nginx-module#cosockets-not-available-everywhere)\nCould using luasockets in the logging phase be a concern? e.g., it's blocking IO (I found here that it is not recomended: https://blog.cloudflare.com/pushing-nginx-to-its-limit-with-lua/)\n. From the docs: https://github.com/openresty/lua-nginx-module/blob/master/README.markdown#description \"The Lua interpreter or LuaJIT instance is shared across all the requests in a single nginx worker process but request contexts are segregated using lightweight Lua coroutines.\" \nSo it seems the log phase (context) using luasockets should not affect the other phases e.g., access/content phases where the response is built (i.e., user's response time should not be affected by the logging phase?)\n. Thanks for the tips, just to double check - when you say request phase that also includes the logging phase (logging phase is where we open a local tcp lua socket )? \n. Thanks for the feedback. We will definitely look into using the timer as a way to use cosockets in the logging phase \n. @agentzh we did notice some memory issues in our nginx error logs. we enabled core dump as per the instructions you linked to us (thank you). in the error logs, we get message along the lines of:\n/var/log/nginx# zcat error.log.5.gz\n*** Error in `nginx: worker process': malloc(): memory corruption: 0x00007f83ef5c871a ***\n2016/04/27 14:53:05 [alert] 19522#0: worker process 31204 exited on signal 6 (core dumped)\n2016/04/27 15:14:24 [alert] 19522#0: worker process 551 exited on signal 11 (core dumped)\n*** Error in `nginx: worker process': malloc(): memory corruption: 0x00007f83ef5c871a ***\n2016/04/27 15:59:36 [alert] 19522#0: worker process 1077 exited on signal 6 (core dumped)\n*** Error in `nginx: worker process': malloc(): memory corruption: 0x00007f83ef5c871a ***\n2016/04/27 17:18:32 [alert] 19522#0: worker process 31203 exited on signal 6 (core dumped)\nHere's the backtrace from the core dump:\n``\nroot@some_application-debug:~# gdb $(which nginx) /srv/www/some_application/current/log/core\nGNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1\nCopyright (C) 2014 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-linux-gnu\".\nType \"show configuration\" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type \"help\".\nType \"apropos word\" to search for commands related to \"word\"...\nReading symbols from /usr/sbin/nginx...done.\n[New LWP 7846]\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\nCore was generated bynginx: worker pr'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:167\n167 ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S: No such file or directory.\n(gdb)\n(gdb)\n(gdb)\n(gdb) backtrace full\n0  __memcpy_sse2_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-sse2-unaligned.S:167\nNo locals.\n1  0x00000000004a8bb2 in memcpy (__len=, __src=, __dest=0xa0d4b4f30) at /usr/include/x86_64-linux-gnu/bits/string3.h:51\nNo locals.\n2  ngx_http_lua_copy_str_in_table (L=L@entry=0x40c5f498, index=2, index@entry=-1, dst=0xa0d4b4f30 )\nat ../ngx_lua-0.10.0/src/ngx_http_lua_output.c:392\n    key = <optimized out>\n    max = 6\n    i = 1\n    type = <optimized out>\n    len = 4\n    p = <optimized out>\n\n3  0x00000000004c673b in ngx_http_lua_socket_tcp_send (L=0x40c5f498) at ../ngx_lua-0.10.0/src/ngx_http_lua_socket_tcp.c:2409\n    len = 83\n    u = 0x4022b028\n    msg = <optimized out>\n    rc = <optimized out>\n    r = 0x5\n    cl = 0x1b7bb40\n    b = 0x1b7bb50\n    ctx = 0x1b7b8e0\n    type = 5\n    c = <optimized out>\n    coctx = <optimized out>\n    p = <optimized out>\n    tcp_nodelay = 0\n    llcf = <optimized out>\n    L = 0x40c5f498\n\n4  0x00007f3bf61a8127 in lj_BC_FUNCC () from /usr/local/openresty/luajit/lib/libluajit-5.1.so.2\nNo symbol table info available.\n5  0x00000000004b819c in ngx_http_lua_run_thread (L=L@entry=0x40c4d378, r=r@entry=0x1b7a540, ctx=ctx@entry=0x1b7b8e0, nrets=)\nat ../ngx_lua-0.10.0/src/ngx_http_lua_util.c:1015\n    next_coctx = <optimized out>\n    parent_coctx = <optimized out>\n    orig_coctx = 0x1b7b908\n    rv = <optimized out>\n    success = <optimized out>\n    next_co = <optimized out>\n    old_co = <optimized out>\n    err = <optimized out>\n    msg = <optimized out>\n    trace = <optimized out>\n    rc = <optimized out>\n    old_pool = 0x0\n\n6  0x00000000004c30a5 in ngx_http_lua_socket_tcp_resume_helper (r=0x1b7a540, socket_op=) at ../ngx_lua-0.10.0/src/ngx_http_lua_socket_tcp.c:5190\n    nret = <optimized out>\n    rc = <optimized out>\n    c = 0x7f3bf69a92b8\n    ctx = 0x1b7b8e0\n    coctx = <optimized out>\n    prepare_retvals = <optimized out>\n    u = <optimized out>\n\n7  0x00000000004bc1f6 in ngx_http_lua_access_handler (r=0x1b7a540) at ../ngx_lua-0.10.0/src/ngx_http_lua_accessby.c:100\n    rc = <optimized out>\n    ctx = 0x1b7b8e0\n    llcf = 0x1b43308\n    lmcf = <optimized out>\n    tmp = <optimized out>\n    ph = <optimized out>\n    cur_ph = <optimized out>\n    last_ph = <optimized out>\n\n8  0x000000000044aaab in ngx_http_core_access_phase (r=, ph=0x1b474d8) at src/http/ngx_http_core_module.c:1077\n    rc = <optimized out>\n    clcf = <optimized out>\n\n9  0x0000000000446275 in ngx_http_core_run_phases (r=0x1b7a540) at src/http/ngx_http_core_module.c:851\n    rc = <optimized out>\n    ph = 0x1b473b8\n    cmcf = <optimized out>\n\n10 0x00000000004c12b0 in ngx_http_lua_socket_handle_read_success (u=0x4022b028, r=0x1b7a540) at ../ngx_lua-0.10.0/src/ngx_http_lua_socket_tcp.c:2973\n    ctx = <optimized out>\n    coctx = <optimized out>\n\n11 ngx_http_lua_socket_tcp_read (r=0x1b7a540, u=0x4022b028) at ../ngx_lua-0.10.0/src/ngx_http_lua_socket_tcp.c:2092\n    rc = <optimized out>\n    c = 0x7f3bf69a6600\n    b = 0x4022b110\n    rev = 0x7f3bf69449d0\n    size = <optimized out>\n    n = <optimized out>\n    read = 1\n    preread = <optimized out>\n\n12 0x00000000004c08e0 in ngx_http_lua_socket_tcp_handler (ev=) at ../ngx_lua-0.10.0/src/ngx_http_lua_socket_tcp.c:2724\n    c = 0x7f3bf69a92b8\n    r = <optimized out>\n    ctx = <optimized out>\n    u = <optimized out>\n\n13 0x00000000004352c0 in ngx_event_process_posted (cycle=cycle@entry=0x1b0cc70, posted=0x793ef0 ) at src/event/ngx_event_posted.c:33\n    q = <optimized out>\n    ev = <optimized out>\n\n14 0x0000000000434ea0 in ngx_process_events_and_timers (cycle=cycle@entry=0x1b0cc70) at src/event/ngx_event.c:259\n    flags = <optimized out>\n    timer = <optimized out>\n    delta = <optimized out>\n\n15 0x000000000043a761 in ngx_worker_process_cycle (cycle=cycle@entry=0x1b0cc70, data=data@entry=0x0) at src/os/unix/ngx_process_cycle.c:753\n    worker = 0\n\n16 0x0000000000439234 in ngx_spawn_process (cycle=cycle@entry=0x1b0cc70, proc=proc@entry=0x43a6e0 , data=data@entry=0x0,\nname=name@entry=0x5317ec \"worker process\", respawn=respawn@entry=-3) at src/os/unix/ngx_process.c:198\n    on = 1\n    pid = 0\n    s = 0\n\n17 0x000000000043a924 in ngx_start_worker_processes (cycle=cycle@entry=0x1b0cc70, n=2, type=type@entry=-3) at src/os/unix/ngx_process_cycle.c:358\n    i = 0\n    ch = {command = 1, pid = 0, slot = 0, fd = 0}\n\n18 0x000000000043b328 in ngx_master_process_cycle (cycle=cycle@entry=0x1b0cc70) at src/os/unix/ngx_process_cycle.c:130\n    title = 0x1b47734 \"master process /usr/sbin/nginx\"\n    p = <optimized out>\n    size = <optimized out>\n    i = <optimized out>\n    n = <optimized out>\n    sigio = <optimized out>\n    set = {__val = {0 <repeats 16 times>}}\n    itv = {it_interval = {tv_sec = 28369372, tv_usec = 0}, it_value = {tv_sec = 0, tv_usec = 0}}\n    live = <optimized out>\n    delay = <optimized out>\n    ls = <optimized out>\n    ccf = 0x1b0de68\n\n19 0x000000000041b21f in main (argc=, argv=) at src/core/nginx.c:359\n    b = <optimized out>\n    log = 0x78ea40 <ngx_log>\n    i = <optimized out>\n    cycle = 0x1b0cc70\n    init_cycle = {conf_ctx = 0x0, pool = 0x1b0c750, log = 0x78ea40 <ngx_log>, new_log = {log_level = 0, file = 0x0, connection = 0, disk_full_time = 0, handler = 0x0,\n        data = 0x0, writer = 0x0, wdata = 0x0, action = 0x0, next = 0x0}, log_use_stderr = 0, files = 0x0, free_connections = 0x0, free_connection_n = 0,\n      reusable_connections_queue = {prev = 0x0, next = 0x0}, listening = {elts = 0x0, nelts = 0, size = 0, nalloc = 0, pool = 0x0}, paths = {elts = 0x0, nelts = 0, size = 0,\n        nalloc = 0, pool = 0x0}, config_dump = {elts = 0x0, nelts = 0, size = 0, nalloc = 0, pool = 0x0}, open_files = {last = 0x0, part = {elts = 0x0, nelts = 0, next = 0x0},\n        size = 0, nalloc = 0, pool = 0x0}, shared_memory = {last = 0x0, part = {elts = 0x0, nelts = 0, next = 0x0}, size = 0, nalloc = 0, pool = 0x0}, connection_n = 0,\n      files_n = 0, connections = 0x0, read_events = 0x0, write_events = 0x0, old_cycle = 0x0, conf_file = {len = 21, data = 0x52e13c \"/etc/nginx/nginx.conf\"}, conf_param = {\n        len = 0, data = 0x0}, conf_prefix = {len = 11, data = 0x52e13c \"/etc/nginx/nginx.conf\"}, prefix = {len = 27, data = 0x52e120 \"/usr/local/openresty/nginx/\"},\n      lock_file = {len = 0, data = 0x0}, hostname = {len = 0, data = 0x0}}\n    cd = <optimized out>\n    ccf = <optimized out>\n\n(gdb)\n```\nCould this issue be due to the fact that we are using a beta version of the new luajit2.1?\n. We are using a chef openresty cookbook, using the default version it provides for luajit, which is 2.1.0-beta1: https://github.com/priestjim/chef-openresty/blob/master/attributes/or_modules.rb#L25\n. @agentzh Will do, I realize we are using lrexlib-pcre luarock, which seems to be incompatible with nginx/openresty, as pointed out here: https://groups.google.com/forum/#!topic/openresty-en/phIIkiVJ2LE/discussion\n. @agentzh I think we have fixed the active connection increase on our end by essentially getting rid of the 3rd party lrexlib-pcre. We no longer see the memory corruption issue. Thanks for all your help.\nWe are seeing some issues with redis connections - similar to what's been outlined here: https://github.com/openresty/lua-resty-redis/issues/27\nIt's a separate issue, and we will look through the suggestions your already posted in https://github.com/openresty/lua-resty-redis/issues/27\nIf we continue to experience redis errors, i'll perhaps post on the openresty/lua-resty-redis repo\nThanks again!\n. ",
    "alubbe": "You're right, that's looking good. I think there was also a luajit bug on hacker news this weekend that was just fixed, maybe that could make it as well?\nRegarding the next release, I'm just interested in a rough timelime, nothing concrete, so anything vague is already helpful.\n. That sounds like around 3 weeks, so I'll pull in some patches manually ;)\nThanks for your quick response and your hard work on the next release\n. Thanks for the clarification around tcp and http keepalives - I was indeed looking for the latter. I will move the rest of the discussion to the mailing list.\n. Thanks for the super fast response! :+1: \n. It's actually a cloudflare patch https://github.com/cloudflare/sslconfig/tree/master/patches\nDon't you use this on your own production servers?\n. I completely respect that and agree with separating your openresty interests from your cloudflare job. I just wanted to point out that those patches are not as random as they might seem. cloudflare released them because a lot of windows and mobile users lag behind and support only spdy, with no clear upgrade path in sight - at least until their management upgrades to newer version of windows or they buy a new phone. Therefore, a good number of openresty users who need to support these clients (think b2b or emerging markets) might have a strong use case for needing this patch for another year or so. Personally, I run it in production and it works, and I am curious as to how @cjhust encountered those crashes.\nhttps://blog.cloudflare.com/open-sourcing-our-nginx-http-2-spdy-code/\nhttps://blog.cloudflare.com/introducing-http2\n. ",
    "RocFang": "env directive should be used in your nginx.conf.\nfor reference:\nhttps://github.com/openresty/lua-nginx-module#system-environment-variable-support\n. Hi\nyou can simply use\nos.date(\"%Y-%m-%d %H\", ngx.time()-3600). ",
    "veficos": "@RocFang Thank you.\n. @agentzh Thanks, I found the answer in the http://nginx.org/en/docs/ngx_core_module.html#env\n. ",
    "linsir": "Sorry ,I'm a beginners. it seems like my problem.\n. Thanks for reply so quickly. This is the log of web app. \n```\n127.0.0.1 - - [16/Mar/2017 17:06:25] \"GET / HTTP/1.0\" 200 -\n\nException happened during processing of request from ('127.0.0.1', 42624)\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/SocketServer.py\", line 295, in _handle_request_noblock\n    self.process_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 321, in process_request\n    self.finish_request(request, client_address)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 334, in finish_request\n    self.RequestHandlerClass(request, client_address, self)\n  File \"/usr/lib/python2.7/SocketServer.py\", line 657, in init\n    self.finish()\n  File \"/usr/lib/python2.7/SocketServer.py\", line 716, in finish\n    self.wfile.close()\n  File \"/usr/lib/python2.7/socket.py\", line 279, in close\n    self.flush()\n  File \"/usr/lib/python2.7/socket.py\", line 303, in flush\n    self._sock.sendall(view[write_offset:write_offset+buffer_size])\nerror: [Errno 32] Broken pipe\n\n``\nI try to search by Google ,but something were found to be related to it.\n. I set log level todebug` , get this:\n2017/03/16 17:04:18 [notice] 23587#0: signal 17 (SIGCHLD) received\n2017/03/16 17:04:18 [alert] 23587#0: worker process 23588 exited on signal 11\n2017/03/16 17:04:18 [notice] 23587#0: start worker process 23591\nhave no more.\n. Thanks @detailyang to find out about it.. Just add --with-cc-opt=-fno-optimize-sibling-calls and it works.. ",
    "goecho": "It's works. thanks.\n. ",
    "yitony": "os : centos 6.5   gcc (GCC) 4.4.7 20120313 (Red Hat 4.4.7-17)\nGNU Make 4.1\nautoconf (GNU Autoconf) 2.69\nI checkout openresty to my home dir /home/tony ,  the last commit is 7c274e056efcdcfbe6954e0442e280ce4ff13c8b\nthen got /home/tony/openresty\nthen run make  ,after download many tar file\nI go to /home/tony/openresty/openresty-1.9.15.2rc0,\nrun ./configure --prefix=/opt/openresty\nmake \nmake install \nthe make install has some error as blow\ncp /home/tony/openresty/openresty-1.9.15.2rc0/build/resty.index /opt/openresty/\ncp: cannot stat `/home/tony/openresty/openresty-1.9.15.2rc0/build/resty.index': No such file or directory\nMakefile:11: recipe for target 'install' failed\nmake: *** [install] Error 1\ncurrent user have  full privileges on /opt dir\nbythe way .sorry for the Chinese,i had change to English\n. ",
    "fffonion": "Sorry to comment in a closed issue but in case someone has the same error, this is may caused by the lack of hg binary. For ubuntu example, installing mercurial solves the problem.\nThat's because util/mirror-tarballs script will exit if it can't hg clone nginx.org repository, which is before generating index.. @agentzh Thanks for the info : )\nIn fact I just came into another build sse4.2 related issue (253) today and the patch is not released in tarballs yet. So I tested the rc version in a container (which has no hg \ud83d\ude04 ).\nAnyways I'll definitely use release versions for general purposes.. ",
    "cjhust": "thank you for you reply, we will also remove spdy.\n. ",
    "rshriram": "I apologize if this issue should be posted in a different Git repo. Please let me know.\n. I can manage upstreamserver downstream server dynamically. The question is how to dynamically add listen directives ie downstreams, to make nginx listen on additional ports. Each service has several upstreams that come and go. They can be managed dynamically using balance by lua. But services also come and go. For each service, a new listen directive is needed. \nAny suggestions for this? Or do I have to statically declare all listen ports during nginx start and just manage my upstreams dynamically?\n. ",
    "0312birdzhang": "\u8fd9\u662f\u6211\u6d4b\u8bd5\u7684\uff0c\u4e3b\u8981\u573a\u666f\u662f\u8ddffastdfs\u7ed3\u5408\u4e0b\u8f7d\u6587\u4ef6\uff0c\u5982\u4e0b\nhttps://groups.google.com/forum/#!searchin/openresty/fastdfs/openresty/YMgV-tnZV90/8Tfb9D6dCwAJ\n\u770b\u6765\u9700\u8981\u6362\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u4e86\n. ",
    "Jet-Yuen": "@agentzh Thanks, I really appreciate it. \nIt turns out, it's the lua code in my nginx.conf cause this problem. In my lua code , I fork one process in init_by_lua_block{}.  and this function invoked every time I use \"reload\".  ths again.\n. ",
    "haani104": "I guess my command was in complete\n./configure    --with-cc-opt=\"-I/usr/local/opt/openssl/include/ -I/usr/local/opt/pcre/include/\"    --with-ld-opt=\"-L/usr/local/opt/openssl/lib/ -L/usr/local/opt/pcre/lib/\"    -j8 --with-luajit && make && make install\nAfter this it got installed.\n. ",
    "timgent": "If it helps this seems to be in the linking phase. Just before the above snippet there is a section beginning:\ncc -o objs/nginx \\\nobjs/src/core/nginx.o \\\nobjs/src/core/ngx_log.o \\\nobjs/src/core/ngx_palloc.o \\\nobjs/src/core/ngx_array.o \\\nobjs/src/core/ngx_list.o \\\nobjs/src/core/ngx_hash.o \\\nobjs/src/core/ngx_buf.o \\\nobjs/src/core/ngx_queue.o \\\nobjs/src/core/ngx_output_chain.o \\\nobjs/src/core/ngx_string.o \\\nobjs/src/core/ngx_parse.o \\\nobjs/src/core/ngx_parse_time.o \\\n.....etc\n. Thanks @agentzh correct I can't reproduce without the --add-module option provided.\nGist is here:\nhttps://gist.github.com/timgent/9e30fb06dfd1bbf200720c3c636deb3e\n. Thanks @agentzh Managed to get it compiling with latest release of naxsi instead of from master\n. ",
    "kendiyqx": "version > 1.2.8.6  Test  1.7.10.2 1.9.15.1\n. ",
    "ruslantalpa": "this patch seems to works\n``` diff\n~$ git diff\ndiff --git a/lua_cjson.c b/lua_cjson.c\nindex 5f4faf2..3f26595 100644\n--- a/lua_cjson.c\n+++ b/lua_cjson.c\n@@ -1232,6 +1232,8 @@ static void json_parse_array_context(lua_State l, json_parse_t json)\n /* Handle empty arrays */\n if (token.type == T_ARR_END) {\n\n\nlua_pop(l, 1);\nlua_pushlightuserdata(l, &json_empty_array);\n         json_decode_ascend(json);\n         return;\n     }\n\n``\n. @bungle \ni can not add the issue there since that is a fork\ni looked a bit over the code and i get a sense of how things work.\nHowever i do not agree with your statement \"it's expected behaviour\", decoding then encoding a json string should output the same result.\nit's exactly the same case as{\"a\":null}, you do not get a{\"a\" = nil}but a{\"a\" = cjson.null}`\nThere is one small downside to my patch i think, once you decode an array and it's empty, if you later want to insert in the new array/table you need to check if it's a cjson.empty_array and turn it into a normal table.\nNow that i come to think of it, settings like encode_empty_table_as_array should not exist at all, it introduces ambiguity and a potential for bugs, all normal tables should be encoded as objects and if you want empty arrays as output, the property should be cjson.empty_array\n. about the downside, maybe i could use setmetatable({}, cjson.empty_array_mt) in the patch to tag the table as being an array then things would work as expected\n. what would be the C equivalent of setmetatable(table, cjson.empty_array_mt)?\nin place of these lines\nlua_pop(l, 1);\nlua_pushlightuserdata(l, &json_empty_array);\n. @bungle i get your point, however i would say the error here is the user using tbl which is marked as array, as if it is an object.\nI would say the correct way, if the table has a metatable of array, it should be encoded as array and ignore the keys.\nCome to think of it, whenever a table is decoded, it should be marked with \"array\" metatable, regardless if it's empty or not (there is no ambiguity here since this is know in json). This will ensure that when you decode then encode back, you get the same thing. It's the lib's user responsibility not to use tables that are arrays as if they are objects and if he really want's to do that, he can just remove the metatable after the decode and treat it as a object.\n. I would not say it's a breaking change because i think (the way it is right now) it's a bug, and it would only break code that relies on a buggy behaviour to properly function.\nFor example i do not understand why (conceptually) you (developer) would decode a json like this [1,2] then use it as if it was a {\"1\":1, \"2\":2} ... this is just bad code :)\nabout encoding empty tables, i am not sure about that, i was jsut thinking about removing ambiguity, i.e. every lua table is a object unless tagged by a metatable but i guess that can be configured.\n. I am not sure what you mean, by developer i did not mean you specifically, i meant the person using the lib.\nWhat i wanted to say is that if you decode a json array, you should use it as an array and not be surprised that things break when you use it as a object/map.\n. hence i view this as a bugfix and not a breaking change in the interface\n. If the current approach would work in all cases i would agree with you about the metadata, however it does not work reliably, and reliability is much more important then a slightly more complicated data structure. Consider these scenarios\n```\n-- empty array\nencode(decode('[]')) -- should output []\n-- empty object\nencode(decode('{}')) -- should output {}\n-- object that becomes empty\nlocal a = decode({\"a\":1})\na.a = nil\nencode(a) -- should output {}\n-- array that becomes empty\nlocal b = decode('[1]')\ntable.remove(b, 1)\nencode(b) -- should output []\n```\nThink of it in the context of me trying to have a config file in json and i want to be able to decode, manipulate the table structure then encode back.\nsaying if you really want to ... you can force the metatable means that you turn a simple task of decoding, changing one value, encoding into a very complicated process, i.e.\nafter decoding, i have to walk the entire structure and force the metatable on entities that might be a problem.\n. I just read the comment and i am not arguing for or against the metadata approach.\nI am simply saying that above all else, correctness should the the deciding factor.\nNow how to exactly go about doing that is another topic.\nSure it would be ideal to not need the metatables, but if this is the only way to have reliable results, i would go for that. \nWhat exactly would be the problem with metatables? Is it just a style thing or are there big performance implications?\n. Well i am not sure how things work in your lib but it definitely does not work in this one,\nare you saying that all these case work with your lib?\n```\n-- empty array\nencode(decode('[]')) -- should output []\n-- empty object\nencode(decode('{}')) -- should output {}\n-- object that becomes empty\nlocal a = decode({\"a\":1})\na.a = nil\nencode(a) -- should output {}\n-- array that becomes empty\nlocal b = decode('[1]')\ntable.remove(b, 1)\nencode(b) -- should output []\n```\nif so, how exactly are you managing objects and arrays that become empty?\n. Ok then, let's make this one behave the same :) (though i'll probably just switch to your lib :) )\nSo how exactly are you managing arrays/objects that become empty. I don't see how you can decide on what the output of the encode should be without a metatable tag\n. I don't have anything agains manually setting the metatable when i create the data structure in lua, that is reasonable, but when the data structure is the output of decode, i should not have to deal with that.\n. That is exactly what i would like this lib to do, i don't care about the metadata or not, i only care about the correctness of the output\n. Actually i don't have anything agains how your lib behaves in this case, it's reasonable default and the problem here is the user code (your example), not the lib.\nWhen i said if it decodes an array, it should output an array, that was me taking a shortcut to a solution.\nthe above behaviour is fine (it's the same in javascript i think).\n. ",
    "thibaultcha": "I have just opened openresty/lua-cjson#28 to address such behaviors in our lua-cjson fork, reviews appreciated!. Looking good to me, plus tests passing on my side \n@davidgaleano Gj :+1:. @tcho16 Here is an example of how to busted with the resty interpreter if that can be of any help: https://github.com/thibaultcha/lua-resty-busted. > Otherwise everytime /etc/hosts is edited, we need to reload nginx.\nWhen implementing this I thought this would actually be the preferred behavior. Here is the reasoning:\n1. There is no TTL definition in the hosts file, hence, I believe most people expect that editing this file instantly takes effect.\n2. However, if users expect that editing the hostsfile instantly updates their records, then we would be deceiving them, since that would mean we'd need to constantly parse the file, which we don't (and won't?) do.\n3. Hence, we'd rather promise them that the records will be parsed and considered valid for the lifetime of their workers. If users are editing their hostsfile and expecting the changes to take effect, they should reload their workers as well.\nIs this reasoning flawed?\nUltimately, I could see a manually-specified TTL value for the hosts file records, and us reloading the file via AIO (if possible?). I however do believe this would be overkill, and as just described, slightly confusing to our users.\n\nMaybe it's better to expose a pure C API callable by FFI that can insert any records into the shm dns cache used by the nginx internal resolver? We can do whatever we want on the Lua land, including periodic updates in timers and parsing any external stuff (not just /etc/hosts).\n\nI think this would be useful as well and is a good idea. However, wouldn't it be a different work/scope than this one? I can see both this patch (or an improved version of it) and this Lua API live together in OpenResty, what do you think? :)\n. > hosts_file /etc/hosts;\nYes, I remember this is how you envisioned this, and I considered it for this implementation :) \nHowever, I am concerned about a few things if we do so:\n\nThe size and scope of the patch. If I am correct, this would be the first significant patch applied to nginx core, and it would add a new directive (unheard of in our core patches) instead of an option for a directive. I believe such a patch would be more sensitive to future changes from Nginx core? It would touch several files, including ngx_http_core_module.c\nI am not sure how well the nginx resolver behaves when no name servers are configured? This definitely requires some testing and possibly some more patching...\nWe would need to re-implement the ipv6={on,off} parsing logic in this new hosts_file directive. This smells of code duplication, and sounds like a bad sign for the future. Our parsing of this option already differs from nginx core (remember my previous patch? \ud83d\ude05)\n\nI will do some research on 2. to eventually switch to hosts_file if you do not change your mind, but let me know if I am making sense or not :)\nThanks!. Ok, that is settled then, I'll look into implementing this as hosts_file :)\nI am definitely on your side for the resolver cache Lua API as well, and comfortable implementing it. I just think that since we can already resolve hostnames thanks to lua-resty-dns, the hosts file parsing currently would offer more value to our users. Just my 2 cents as well but I might be wrong!. Meanwhile, closing this :). Introducing hosts_file really creates a lot of code duplication and almost doubles the patch size. We now need to handle such hosts_file /etc/hosts ipv6=off; cases as well, so we duplicate the parsing code, and we also need to introduce this new directive in all three of the http, stream, and eventually mail modules, and all of this adds up to... a big patch.\nHowever, I am a big fan of not having to specify a name server for such hosts file resolution like you proposed, and have updated the resolver to work without name servers with minimal changes. How about specifying a resolver like so:\nnginx\nresolver hostsfile=/etc/hosts ipv6=off;\nThis would keep the patch at about the same size as this one and also answers your concern. Tell me your thoughts :). Let me know what you think of my latest update @agentzh :). @agentzh I don't feel good about double-pinging (sorry), but I\ud83d\udc42word of a 1.11.2.3 release and was wondering if the merge window was closed already, and if not, wanted to know if there was a way this could sneak in given the above update. Many thanks!. > Mind to write some quick tests with Test::Nginx?\nYes, yes of course, for sure :) I wasn't sure where to include those originally.\n\naside from a minor issue above\n\n@dndx Hi! Do you mind clarifying which issue you are referring to here? Is it the missing ability to define a resolver without a nameserver, or an issue in the current patch submitted with this PR?. @dndx Nice, thank you! I'll look into it. And into making the resolver work without nameserver (I have that somewhere...). Sweet, thanks. I'll reproduce and fix on my side as well!. Unfortunately, I force pushed a new version of the patch before reopening this PR, and GitHub won't let me do so anymore. I have opened #247 instead. Sorry!. @agentzh @dndx Updated the patch with tests.\n\ntests in t/patches\nupdated the patch to handle a resolver without nameservers\nadded a notice log to the patch\nslightly improved the parsing logic to handle empty lines\n\nQ: now, prove t/ will run both the sanity.t and the patches/*.t tests. However, the later requires a compiled OpenResty, and not just the bundle like the former. How would like to to handle that case, or structure those tests differently maybe?\nThanks!. @agentzh @dndx Alright, I have updated the patch/tests to pass with and without ipv6 support. Do you mind giving it another round of review sometime? Thanks!. I also tested this in Valgrind mode. Do we have any more thoughts on it? Should we setup a Travis CI instance to run those new tests that need a compiled OpenResty? (+ the old ones requiring a bundled OpenResty tarball).. @agentzh Is this still in the picture? I'll start the work on ngx.resolver as well once I can focus on it. I still think this patch would be nice to have.... This is indeed one of the reasons behind my contribution to :expire() a while back (but Kong does not use it quite yet) as I do remember @agentzh\u2019s  argument about not adding a TTL option to incr() (something proposed several times in the past already). \nThere are other patterns that make use of incr() + expire() already iirc (namely lua-resty-limit-traffic). \nAlso, as @agentzh pointed out, Kong relies on the LRU eviction mechanism for this particular use-case for now. Is this causing you any trouble? If so, please report it on the Kong repository instead.\n  . FWIW, I have some working PoC code from a while ago with support for the exptime argument in shdict:incr(). I could easily polish it and some a PR with support for the CFunction and the FFI interface.. @agentzh Pushed a refurbished version of it with FFI-only support, let me know what you think.. >Thanks, can you please provide git path/branch.\n@davidsiracusa The link is above in between 2 comments from this thread. https://github.com/openresty/lua-resty-core/pull/165. @davidsiracusa Maybe better to open a new issue if you wish to discuss another topic. The openresty-systemtap-toolkit repository is probably the right place to do so?. Do we plan on supporting MAXNS? FYI, the current maximum number of allowed nameserver entries  in /etc/resolv.conf is 3, as per:\nhttp://man7.org/linux/man-pages/man5/resolv.conf.5.html\nIn the past, we rolled out our own /etc/resolv.conf parser (in Lua) without supporting this limit, and this caused a wild variety of issues among our customers who had more than 3 nameserver entries. The tail end of that list was never used by any of their other applications, but when we started parsing and using those nameservers, we caused them some issues since those entries were long stale and not working anymore (and they obviously never noticed before).. @dndx Nice :+1: . Hi,\nThe next release will be 1.15.8.1 and is soon to be published. All branches are in frozen state, and we will spend a few days doing some testing on our side.\nThanks for your patience, \nThibault. All bumped as of 5d48d9fea2936cc23ad6cfadd634d592b272b1ae, closing this for now.. Reopening to keep track of recent development:\n\n[x] release lua-nginx-module and bump dependency (v0.10.14rc3...master)\n[x] cosocket connection queueing\n[x] ngx.pipe API\n[x] feature: logged error when failed to run timer.\n[x] feature: support nginx builtin Link header\n[x] release stream-lua-nginx-module and bump dependency (v0.0.6rc3...master)\n[x] port some of the ngx_http_lua fixes (e.g. init_by_lua in signaller)\n[x] peek\n[x] release lua-resty-core and bump dependency (v0.1.16rc3...master)\n[x] release lua-cjson and bump dependency (2.1.0.7rc1...master)\n[x] bump travis-ci nginx core to 1.15.8\n[x] update 1.15.8.1rc1 changelog. @rhuddleston GA, no. For rc1, we are aiming at this week or the next one.. @rhuddleston The release, while slightly delayed, is closer and closer. Just a few more days of patience. Thanks :). Closing this now that everything on the list has been taken care of.. Merged and updated the 1.15.6 and 1.15.8 patches as well.. Hi,\n\nHave a look at https://github.com/openresty/openresty/issues/353. As stated in #456, we'll upgrade OpenSSL to 1.1.1 when we get to update our patches.. Thanks for reporting, we\u2019ll look into it very soon. . Here, we are missing such a break when the parsed value is an ipv6 and when Nginx is built without ipv6 support. Will update.. This test will fail when Nginx is built without ipv6 for the reason highlighted above for now.. If we follow the approach taken in #247 (taken from other parts of the nginx codebase), we can easily parse files that exceed this size, if desired.\nhttps://github.com/openresty/openresty/pull/247/files#diff-1f78491f86d1e1677eca130eb1799f68R198. Should we also test against CR? Other file parsers from the nginx codebase do\nhttps://github.com/nginx/nginx/blob/0ad556fe59ad132dc4d34dea9e80f2ff2c3c1314/src/core/ngx_conf_file.c#L752. In hindsight, one of the things that I believe #247 is missing is the lack of test for whether a given IP address is already cached by the resolver or not.\nSimilarly in this case, do we care/are we doing anything to prevent the same nameserver from being added twice? Like:\n```\n/etc/resolv.conf\nnameserver 8.8.8.8\nnginx.conf\nhttp {\n    resolver 8.8.8.8;\n    resolver local=on;\n}\n. I think we might not need this instruction? Since the `sw_nameserver` state will take care of if before entering the `sw_address` state?. Yeah, sorry I think my example should have been:\nnginx.conf\nhttp {\n    resolver 8.8.8.8 local=on;\n}\n```\n\nIt seems that allowing duplicates makes more sense? Plus de-duping this will be very painful due to how those data structure works currently.\n\nAgreed - just raising the concern for us to be aware, but if nginx allows it, it is probably better to not try to add too much magic around it.. Note: iirc, the GC64 mode is required on ARM64.. Should we then update existing invocations of uname? i.e. https://github.com/openresty/openresty/blob/feb1bc4c2a060abf48c24a5cdbe685f156e80829/util/configure#L325. Updated. Good point, updated. > The LuaJIT build system enables that automatically anyway.\nThat's helpful, thanks, I was about to get my hands on an ARM64 box to test this (still planning on doing so today or tomorrow).. This is just to stay consistent with the existing calls to those subs from below, but I can remove them.. Done. ",
    "dholth": "That's fine, it would clearly break all examples if it was moved. Traditionally packages install themselves into /usr/local with 'make install' but the RPM version does not. I have never seen nginx installed into /usr/local because I always install it from RPM.\n. ",
    "davidgaleano": "Is the pull requests ok? would you like me to change anything?\n. @agentzh  Apologies, I was not aware of the existing tests, I have updated them to work with my proposed changes.\nThe fixes for the existing test cases are more extensive that I thought because I also changed the configure script to always respect DESTDIR when creating the soft link, which was something required for our own build to work because we do set custom values for DESTDIR, sbin-path, and prefix.. @agentzh should be fine now.. Ah! yes, our internal packages are not like the official linux packages. I will change it back to not break things and compensate for it on our build scripts.. Yes, this is just an artifact of how we build and install our packages, I will remove the $(DESTDIR) prefix on the source.. ",
    "ben-walters": "@agentzh Is there an openresty bin which exists independently of nginx?\n/usr/local/openresty/nginx/sbin/nginx\nis the bin i have been using to init, and that is complaining.\n. Seems to have been fixed in a later version. The version described in the post is legacy.\n. ",
    "pavelnemirovsky": "In log it looks as below:\n2016/10/27 09:51:20 [notice] 30180#30180: start worker process 26726\n2016/10/27 09:51:20 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:20 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:20 [alert] 30180#30180: worker process 26055 exited on signal 11 (core dumped)\n2016/10/27 09:51:20 [notice] 30180#30180: start worker process 26728\n2016/10/27 09:51:20 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:20 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:20 [alert] 30180#30180: worker process 26123 exited on signal 11 (core dumped)\n2016/10/27 09:51:20 [notice] 30180#30180: start worker process 26729\n2016/10/27 09:51:20 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:21 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:21 [alert] 30180#30180: worker process 26269 exited on signal 11 (core dumped)\n2016/10/27 09:51:21 [notice] 30180#30180: start worker process 26748\n2016/10/27 09:51:21 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:21 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:21 [alert] 30180#30180: worker process 26281 exited on signal 11 (core dumped)\n2016/10/27 09:51:21 [notice] 30180#30180: start worker process 26759\n2016/10/27 09:51:21 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:21 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:21 [alert] 30180#30180: worker process 26168 exited on signal 11 (core dumped)\n2016/10/27 09:51:21 [notice] 30180#30180: start worker process 26782\n2016/10/27 09:51:21 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:22 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:22 [alert] 30180#30180: worker process 26311 exited on signal 11 (core dumped)\n2016/10/27 09:51:22 [notice] 30180#30180: start worker process 26814\n2016/10/27 09:51:22 [notice] 30180#30180: signal 29 (SIGIO) received\n2016/10/27 09:51:22 [notice] 30180#30180: signal 17 (SIGCHLD) received\n2016/10/27 09:51:22 [alert] 30180#30180: worker process 26282 exited on signal 11 (core dumped)\n2016/10/27 09:51:22 [notice] 30180#30180: start worker process 26815\n2016/10/27 09:51:22 [notice] 30180#30180: signal 29 (SIGIO) received\n^C\n. bt full\n```\n(gdb) backtrace full\n0  0x00007fb4386cc1d6 in lj_alloc_free (msp=0x40ccf010, ptr=) at lj_alloc.c:1370\n    XP = <value optimized out>\n    R = <value optimized out>\n    TP = 0xfffffc67690fb432\n    prev = 0xfffffc67690fb432\n    prevsize = 3955664880534\n    p = 0xfffffc67690fb432\n    fm = 0x40ccf010\n    psize = 3964254815126\n    next = 0x2690fb7c8\n\n1  0x00007fb438682f47 in gc_sweep (g=0x40ccf3b8, p=0x68ce5cb8, lim=7) at lj_gc.c:397\n    ow = 33\n    o = 0x690fb7d8\n\n2  0x00007fb438683bc4 in gc_onestep (L=0x54832d50) at lj_gc.c:628\n    old = 584804518\n    g = 0x40ccf3b8\n\n3  0x00007fb438684218 in lj_gc_step (L=0x54832d50) at lj_gc.c:680\n    g = 0x40ccf3b8\n    lim = 1200\n    ostate = -1\n\n4  0x00007fb438682802 in lj_fff_gcstep () from /usr/local/openresty/luajit/lib/libluajit-5.1.so.2.1.0\nNo symbol table info available.\n5  0x00000000004deb10 in ngx_http_lua_run_thread (L=0x40ccf378, r=0x7fb43577efa0, ctx=0x7fb43577ee00, nrets=0) at ../ngx_lua-0.10.6/src/ngx_http_lua_util.c:1005\n    next_coctx = <value optimized out>\n    parent_coctx = <value optimized out>\n    orig_coctx = 0x7fb43577ee28\n    rv = <value optimized out>\n    success = <value optimized out>\n    next_co = <value optimized out>\n    old_co = <value optimized out>\n    err = <value optimized out>\n    msg = <value optimized out>\n    trace = <value optimized out>\n    rc = <value optimized out>\n    old_pool = 0x0\n\n6  0x00000000004e0f8c in ngx_http_lua_content_by_chunk (L=0x40ccf378, r=0x7fb43577efa0) at ../ngx_lua-0.10.6/src/ngx_http_lua_contentby.c:120\n    co_ref = 2\n    rc = <value optimized out>\n    co = 0x54832d50\n    rev = <value optimized out>\n    ctx = 0x7fb43577ee00\n    cln = <value optimized out>\n    llcf = <value optimized out>\n\n7  0x00000000004e1344 in ngx_http_lua_content_handler_file (r=0x7fb43577efa0) at ../ngx_lua-0.10.6/src/ngx_http_lua_contentby.c:284\n    L = 0x40ccf378\n    rc = <value optimized out>\n    script_path = <value optimized out>\n    llcf = 0x7fb43771f640\n    eval_src = {len = 40, data = 0x7fb43771f894 \"get_player_example.lua\"}\n\n8  0x00000000004e144e in ngx_http_lua_content_handler (r=0x7fb43577efa0) at ../ngx_lua-0.10.6/src/ngx_http_lua_contentby.c:222\n    llcf = 0x7fb43771f640\n    ctx = 0x7fb43577ee00\n    rc = <value optimized out>\n\n9  0x0000000000454810 in ngx_http_core_content_phase (r=0x7fb43577efa0, ph=) at src/http/ngx_http_core_module.c:1379\n    root = 140411967893408\n    rc = <value optimized out>\n    path = {len = 1, data = 0x453b07 \"H\\205\\300t<H\\203\\370\\373tNH\\203\\370\\374u\\030\\061\\300H\\213\\\\$\\bH\\213l$\\020H\\203\\304\\030\\303\\017\\037\\200\"}\n\n10 0x000000000044e60d in ngx_http_core_run_phases (r=0x7fb43577efa0) at src/http/ngx_http_core_module.c:856\n    rc = <value optimized out>\n    ph = 0x7fb4359dd670\n    cmcf = <value optimized out>\n\n11 0x0000000000456430 in ngx_http_run_posted_requests (c=0x7fb2a45f6fa0) at src/http/ngx_http_request.c:2235\n    r = <value optimized out>\n    pr = <value optimized out>\n\n12 0x000000000045a59c in ngx_http_process_request_line (rev=0x7fb2a2a71cb0) at src/http/ngx_http_request.c:1027\n    n = <value optimized out>\n    rc = <value optimized out>\n    rv = <value optimized out>\n    host = {len = 140405238581680, data = 0x400 <Address 0x400 out of bounds>}\n    c = 0x7fb2a45f6fa0\n    r = 0x7fb43576ef60\n\n13 0x0000000000443945 in ngx_epoll_process_events (cycle=, timer=, flags=) at src/event/modules/ngx_epoll_module.c:900\n    events = <value optimized out>\n    revents = 1\n    instance = <value optimized out>\n    i = <value optimized out>\n    level = <value optimized out>\n    err = <value optimized out>\n    rev = <value optimized out>\n    wev = <value optimized out>\n    queue = <value optimized out>\n    c = <value optimized out>\n\n14 0x000000000043ac45 in ngx_process_events_and_timers (cycle=0x7fb437a68ba0) at src/event/ngx_event.c:242\n    flags = <value optimized out>\n    timer = <value optimized out>\n\n---Type  to continue, or q  to quit---\n        delta = 1477576869249\n15 0x00000000004417b8 in ngx_worker_process_cycle (cycle=0x7fb437a68ba0, data=) at src/os/unix/ngx_process_cycle.c:753\n    worker = <value optimized out>\n\n16 0x000000000043fdf7 in ngx_spawn_process (cycle=0x7fb437a68ba0, proc=0x441780 , data=0xa, name=0x5119f5 \"worker process\", respawn=10) at src/os/unix/ngx_process.c:198\n    on = 1\n    pid = 0\n    s = <value optimized out>\n\n17 0x000000000044241a in ngx_reap_children (cycle=0x7fb437a68ba0) at src/os/unix/ngx_process_cycle.c:621\n    i = <value optimized out>\n    live = <value optimized out>\n    n = <value optimized out>\n    ch = {command = 2, pid = 6506, slot = 10, fd = -1}\n    ccf = <value optimized out>\n\n18 ngx_master_process_cycle (cycle=0x7fb437a68ba0) at src/os/unix/ngx_process_cycle.c:174\n    title = <value optimized out>\n    p = <value optimized out>\n    size = <value optimized out>\n    i = <value optimized out>\n    n = <value optimized out>\n    sigio = 0\n    set = {__val = {0 <repeats 16 times>}}\n    itv = {it_interval = {tv_sec = 0, tv_usec = 0}, it_value = {tv_sec = 0, tv_usec = 140412005414688}}\n    live = <value optimized out>\n    delay = 0\n    ls = <value optimized out>\n    ccf = 0x7fb437a6a918\n\n19 0x000000000041d5bf in main (argc=, argv=) at src/core/nginx.c:367\n    b = <value optimized out>\n    log = <value optimized out>\n    i = <value optimized out>\n    cycle = 0x7fb437a68ba0\n    init_cycle = {conf_ctx = 0x0, pool = 0x7fb437a67ef0, log = 0x76a6a0, new_log = {log_level = 0, file = 0x0, connection = 0, disk_full_time = 0, handler = 0, data = 0x0, writer = 0, wdata = 0x0, action = 0x0, next = 0x0}, log_use_stderr = 0, files = 0x0, free_connections = 0x0, free_connection_n = 0,\n      modules = 0x0, modules_n = 0, modules_used = 0, reusable_connections_queue = {prev = 0x0, next = 0x0}, listening = {elts = 0x0, nelts = 0, size = 0, nalloc = 0, pool = 0x0}, paths = {elts = 0x0, nelts = 0, size = 0, nalloc = 0, pool = 0x0}, config_dump = {elts = 0x0, nelts = 0, size = 0, nalloc = 0,\n        pool = 0x0}, open_files = {last = 0x0, part = {elts = 0x0, nelts = 0, next = 0x0}, size = 0, nalloc = 0, pool = 0x0}, shared_memory = {last = 0x0, part = {elts = 0x0, nelts = 0, next = 0x0}, size = 0, nalloc = 0, pool = 0x0}, connection_n = 0, files_n = 0, connections = 0x0, read_events = 0x0,\n      write_events = 0x0, old_cycle = 0x0, conf_file = {len = 21, data = 0x7ffc3699e81e \"\"}, conf_param = {len = 0, data = 0x0}, conf_prefix = {len = 11, data = 0x7ffc3699e81e \"\"}, prefix = {len = 27, data = 0x50d32d \"/usr/local/openresty/nginx/\"}, lock_file = {len = 0, data = 0x0}, hostname = {len = 0,\n        data = 0x0}}\n    cd = <value optimized out>\n    ccf = 0x7fb437a6a918\n\n(gdb)\n```\n. Thank you so much agentzh, i am checking and i'll update soon. \n. Thanks we found the issue it was related to libmaxminddb. \n. consider as resolved. thanks again for prompt response\n. Excited, thx . Thank you!\n. Thanks, i got that feeling. . @agentzh  My apology, specifically we were running on 1.11.2.5-1 and moved to 1.13.6.1. In general i see perf gain for nginx itself as well.  Thanks for guessing we will deep dive and i'll update you here. So far it looks like too good to be true :) Thanks.. thanks again, please review: https://expirebox.com/download/8f0f38a5fee4593d7bd7bf3c39fb38e7.html. Thank you so much i'll do and publish. @mfrederico we actually say about major performance gain, @agentzh  - still didn't have a chance to take specific C-land flame graphs . @spacewander thanks for pointing me here, but i tried latest as well. Will recheck!! Thx . Thx, it was the confusion with our build process that's why 0.11 version of lua-resty-string didn't work.\n@spacewander thx again!. Thx a lot. ",
    "kode54": "Disregard this, I made a dumb mistake. In keeping line with all the PHP packages defaulting so many permissions to ownership by \"apache\" on this CentOS setup, I configured OpenResty to run as \"apache\", and the /var/log/nginx directory was still owned by nginx:nginx.\n. ",
    "iamnotaprogrammer": "Thanks for you explanation)\n. ",
    "WALL-E": "I run openresty on docker, the following is a complete configuration file  nginx.conf \n```\nuser  root root;\nworker_processes  auto;\ndaemon off;\nevents {\n    use epoll;\n    multi_accept on;\n    accept_mutex_delay 50ms;\n    worker_connections 65535;\n}\nhttp {\n     log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                       '$status $body_bytes_sent \"$http_referer\" '\n                       '\"$http_user_agent\" \"$http_x_forwarded_for\" '\n                       '\"$upstream_addr\" \"$upstream_status\" '\n                       '$request_time -- $upstream_connect_time $upstream_header_time $upstream_response_time';\naccess_log  logs/access.log  main;\nupstream backend {\n    server web-a:80;\n    server web-b:80;\n    server web-c:80;\n    server web-d:80;\n}\n\nserver {\n    listen       80;\n    server_name  localhost;\n\n    set_real_ip_from 172.17.0.0/16;\n    real_ip_header X-Forwarded-For;\n    real_ip_recursive on;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n    more_set_headers 'Server: Qengined';\n\n    location ~ /.* {\n        proxy_pass http://backend;\n\n        header_filter_by_lua_block {\n            ngx.header[\"upstream_addr\"] = ngx.var.upstream_addr\n            ngx.header[\"upstream_connect_time\"] = ngx.var.upstream_connect_time\n            ngx.header[\"upstream_header_time\"] = ngx.var.upstream_header_time\n            ngx.header[\"upstream_response_time\"] = ngx.var.upstream_response_time\n        }\n    }\n}\n\n}\n```\nAdditional\n\nPlatform\nhost: CentOS Linux release 7.2.1511 (Core)\nDocker version 1.12.2, build bb80604\n\nif need, i can provide compose YML.\n. ## Steps To Reproduce\n1. install openresty/1.11.2.1\n2. run two openresty instances, a proxy and a web\n3. web's config\nnginx_web.conf\n```\n   user  root root;\n   worker_processes  auto;\nevents {\n   use epoll;\n   }\nhttp {\n   server {\n       listen       8081;\n       server_name  localhost;\n   location ~ /.* {\n       content_by_lua_block {\n           ngx.say('access: ', ngx.var.server_addr, ' from: ', ngx.var.remote_addr)\n       }\n   }\n\n}\n   }\n   ```\n4. start web instances\n/opt/openresty/nginx/sbin/nginx -c /root/openresty-debug/nginx_web.conf\n5. proxy's config\nnginx_proxy.conf\n```\n   user  root root;\n   worker_processes  auto;\nevents {\n     use epoll;\n   }\nhttp {\n       upstream backend {\n           server 127.0.0.1:8081;\n       }\nserver {\n       listen       8080;\n       server_name  localhost;\n   location ~ /.* {\n       proxy_pass http://backend;\n\n       header_filter_by_lua_block {\n           ngx.header[\"upstream_addr\"] = ngx.var.upstream_addr\n           ngx.header[\"upstream_connect_time\"] = ngx.var.upstream_connect_time\n           ngx.header[\"upstream_header_time\"] = ngx.var.upstream_header_time\n           ngx.header[\"upstream_response_time\"] = ngx.var.upstream_response_time\n       }\n   }\n\n}\n   }\n   ```\n6. start proxy instances\n/opt/openresty/nginx/sbin/nginx -c /root/openresty-debug/nginx_proxy.conf\n7. acces proxy\n```\n   [root@vagrant-172-28-32-101 openresty-debug]# curl -i http://127.0.0.1:8080\n   HTTP/1.1 200 OK\n   Server: openresty/1.11.2.1\n   Date: Sat, 12 Nov 2016 03:00:45 GMT\n   Content-Type: text/plain\n   Content-Length: 34\n   Connection: keep-alive\n   upstream-addr: 127.0.0.1:8081\n   upstream-connect-time: 0.000\n   upstream-header-time: 0.000\n   upstream-response-time: 1478919645.596\naccess: 127.0.0.1 from: 127.0.0.1\n   ```\nwrong value\nupstream-response-time: 1478919645.596\n. I test openresty/1.9.7.1,  there are also the same issue.\n. @agentzh thks, I got it. \nSorry, I forgot about phase\n. ",
    "madisodr": "Alright, this sounds like a good start. I'll start to work and prepare a PR and I'll tag you in it.\nI am relatively new to openresty(and nginx) being as a system used for more then just static websites, as well as building RPMs. So just to make sure I map this out right, I'll run my initial thought process by you.\nSo I can pull down openresty's source and all for testing. \nI edit the spec file so it builds a devel package along side it.\nfor the %files devel section, I just include all the headers and the 3rd party module stuff\ntest it ofc but then submit that as a PR to openresty/openresty-packaging\nOver simplified of course but is that the jist of it? \nAlso I am not 100% certain what you mean by restymod. The idea is to basically make a tool to make sure the modules and openresty are being built with the same flags and compile options? . ",
    "detailyang": "@punit07 you can create the OpenResty.repo manually, @agentzh will fix it as soon as possible:). Hello.\nPlease use English only or you can post this question in Chinese on openresty.\nMany thanks :). Hello\n@wintersun892, I guess that maybe you misunderstand the proxy_read_timeout which actually is about the two successive read operations, not for the transmission of the whole response.  just like nginx docs says: \n\nDefines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response. If the proxied server does not transmit anything within this time, the connection is closed.. Hello.\n@onlonely I have  found your posts on google groups,  if you are using http2, agentzh  have been fixed this by this commit and you can try the latest version of OpenResty :). Hello.\n\n@walterdev there is a workaround to solve it by removing the password of pem from openssl, and you can  just run openssl rsa -in password.pem -out nopassword.pem. wish it can help you:). Hello\n@walterdev , i guess you are debuging api for wechat:). I thinks the apiclient_key.pem is the private key issued by wechat, so you can try this to generate unsecure key by openssl rsa -in apiclient_key.pem -out apiclient_key.pem.unsecure. @walterdev \nI'm so sorry that i misunderstanrd what you have said\n\nbut seemingly can not be loaded with a SSL certificate with password\n\nActually, the https://api.mch.weixin.qq.com/secapi/pay/refund want to do mutual authentication between from the server and client. But now the cosocket in openresty does not support this feature:(. @watlerdev\nBecause you are using the OpenResty, So we have a another way to solve this:) \nWe can use the nginx to reverse proxy the https://api.mch.weixin.qq.com with mutual authentication as the following:\n```bash\nserver {\n    listen 9999;\nproxy_ssl_certificate xx.cer;\nproxy_ssl_certificate_key xx.key;\n\nlocation / {\n  proxy_pass https://api.mch.weixin.qq.com;\n  proxy_set_header Host api.mch.weixin.qq.com;\n}\n\n}\n```\nSo now you can request the uri http://localhost:9999/secapi/pay/refund by resty.http. \nBy the way if OpenResty provide the feature for mutual authentication, it's easy to replace uri to https://api.mch.weixin.qq.com/secapi/pay/refund.. @walterdev \nIt looks now we have to let OpenResty support the feature about mutual authentication :). @agentzh let me try to implement this feature:). >Is this architecture a good idea in general? Any risks? Any similar set up you know about?\nOpenResty is very good at as a authentication server. Any risks you should be consider about is up to your experience of OpenResty:). OpenResty have run successfully  on many companies.\n\nI think Lua script is needed to generate the string. Is there library for generating hmac-sha1 and base64?\n\nbase64 and hmac-sha1 have been builtin\n. What's the auth_request? You can use the lua to implement authentication:)\nBy the way, as the following show, you can working on acces_by_lua phase  . Hello.\n@PatHuman \nThe error is obvious that the stormpath-nginx is not in the lua_package_path \n\nno field package.preload['stormpath-nginx']\nno file '/usr/local/openresty/site/lualib/stormpath-nginx.lua'\nno file '/usr/local/openresty/site/lualib/stormpath-nginx/init.lua'\nno file '/usr/local/openresty/lualib/stormpath-nginx.lua'\nno file '/usr/local/openresty/lualib/stormpath-nginx/init.lua'\nno file './stormpath-nginx.lua'\nno file '/usr/local/openresty/luajit/share/luajit-2.1.0-beta2/stormpath-nginx.lua'\nno file '/usr/local/share/lua/5.1/stormpath-nginx.lua'\nno file '/usr/local/share/lua/5.1/stormpath-nginx/init.lua'\nno file '/usr/local/openresty/luajit/share/lua/5.1/stormpath-nginx.lua'\nno file '/usr/local/openresty/luajit/share/lua/5.1/stormpath-nginx/init.lua'\nno file '/usr/local/openresty/site/lualib/stormpath-nginx.so'\nno file '/usr/local/openresty/lualib/stormpath-nginx.so'\nno file './stormpath-nginx.so'\nno file '/usr/local/lib/lua/5.1/stormpath-nginx.so'\nno file '/usr/local/openresty/luajit/lib/lua/5.1/stormpath-nginx.so'\nno file '/usr/local/lib/lua/5.1/loadall.so'\n\nAnd you should make sure the lua_package_path include the stormpath-nginx. Hello. @houfan \n~If you want to use LuaJIT, you should recompile the openresty :D~. OpenResty now use LuaJIT 2.1 as the default.\nbash\n --with-luajit                      enable and build the bundled LuaJIT 2.1 (the default)\nSo you havent need to recompile OpenResty.. @houfan \nNo, you need not.\nI'm so sorry that I do misunderstand what you have said. The OpenResty use LuaJIT now as the default which is the reason why you can run lua scripts and you can check it by ./configure --help. \n\n--with-luajit                      enable and build the bundled LuaJIT 2.1 (the default). welcome to the OpenResty \uff1aD\n\nBTW, you should close this issues if it's solved.. Hello.\nNow the LuaJIT is loaded  by dynamic linker (ld.so) at nginx, the OpenResty set the search path on linker by --with-ld-opt='-Wl,-rpath,/opt/openresty/luajit/lib. \nYou have two ways to check the search path on linux as the following:\n\n/opt/openresty/bin/openresty -V 2>&1 |grep rpath\ncheck the elf dynamic section by readelf -d /opt/openresty/bin/openresty |grep RPATH\n\nAFAK -: , you can use ldd to print all shared library by ldd /opt/openresty/bin/openresty.. Hello\n@liuwenru If you want to use Chinese, you can join the Chinese Google Group  (\u4f60\u53ef\u4ee5\u5728\u8fd9\u4e2a\u4e2d\u6587\u793e\u533a\u63d0\u95ee\uff0c\u4f1a\u6709\u70ed\u5fc3\u7684\u4eba\u56de\u7b54\u4f60:)). Good to see this :D and can I do this work fro Chinese (CN) site?. Haha. It's a joke about editing Chinese :smile:. Hello.\nWill you carefully check the other error (use curl -v to show more detail and check nginx and app logs)? Or Will you provide more detail to  reproduce the  error. We cannot help you much more if you cannot provide the way to reproduce  error :(. @linsir Can you provide the nginx error log (I guess nginx was core dump).. Yup, nginx was coredump.  You should enable coredump to get coredump file as the following in nginx.conf:\nbash\nworker_rlimit_core  10G;\nworking_directory   /path/to/cores/ #make sure worker can write this dir;. Consider it resolved. More detail at https://trac.nginx.org/nginx/ticket/912. ",
    "contherad": "I'm getting a 404 when trying to install openresty from repo on centos 7. Any tips for getting it to work?\nThanks!. My apologies. . ",
    "wintersun892": "proxy_connect_timeout defines a timeout for establishing a connection with a proxied server, we need something which can timeout the established connection if the processing time exceeds the limit. \nthanks . ",
    "vensontao": "Great, This problem has been solved. thanks very much!. Great\uff0cI try the following patch you gave,  the problem  has been solved.  And I close the issues on GitHub. Thank you  very much! \n\u53d1\u4ef6\u4eba: Yichun Zhang [mailto:notifications@github.com] \n\u53d1\u9001\u65f6\u95f4: 2016\u5e7412\u670814\u65e5 5:16\n\u6536\u4ef6\u4eba: openresty/openresty\n\u6284\u9001: vensontao; Mention\n\u4e3b\u9898: Re: [openresty/openresty] lua-resty-mysql variable self.packet_no bug (#212)\n@vensontao https://github.com/vensontao  Yeah, this is a corner case that the client sends more than 255 packets through a single resty.mysql object. We should check the integer overflow. Will you try the following patch on your side?\ndiff --git a/lib/resty/mysql.lua b/lib/resty/mysql.lua\nindex 008a267..fc8bb74 100644\n--- a/lib/resty/mysql.lua\n+++ b/lib/resty/mysql.lua\n@@ -184,11 +184,16 @@ end\n local function _send_packet(self, req, size)\n     local sock = self.sock\n\nself.packet_no = self.packet_no + 1\nlocal packet_no = self.packet_no\npacket_no = packet_no + 1\nif packet_no >= 256 then\npacket_no = 1\nend\n\nself.packet_no = packet_no\n-- print(\"packet no: \", self.packet_no)\n\n\nlocal packet = _set_byte3(size) .. strchar(self.packet_no) .. req\n\n\nlocal packet = _set_byte3(size) .. strchar(packet_no) .. req\n-- print(\"sending packet: \", _dump(packet))\n\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/openresty/openresty/issues/212#issuecomment-266864397 , or mute the thread https://github.com/notifications/unsubscribe-auth/APAJkHEsp_sVx7Er3bqerT6LTXzIBitbks5rHwshgaJpZM4LLWgt .  https://github.com/notifications/beacon/APAJkLBhDgPLCq_hRpFZlnw5E5lXYV74ks5rHwshgaJpZM4LLWgt.gif \n. we can fix this issue in the next version of openresty/lua-resty-mysql.. ",
    "onlonely": "ok. ",
    "chipitsine": "I could not convince Maxim Dounine to accept that patch\nIf you can convince nginx guy to accept it, it will be nice. as that patch is somewhat usefull, why not to keep it within openresty source tree ?. I use that patch myself about 3 years. like 200k users (various browsers, etc). I beleive it would be useful for Cloudflare as well. ",
    "S4mw1s3": "Only now I've come across this: https://github.com/openresty/lua-nginx-module/pull/761 \nLet me know if I should discard this PR or not.. Nevermind. Won't compile anyway.... ",
    "yjdwbj": "```\n(pydev) root@debian-t6:/home/www/test_openresty# netstat -tnlp\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:22              0.0.0.0:               LISTEN      860/sshd      \ntcp        0      0 0.0.0.0:888             0.0.0.0:               LISTEN      844/nginx -g daemon\ntcp        0      0 0.0.0.0:8000            0.0.0.0:               LISTEN      3925/nginx: worker \ntcp        0      0 0.0.0.0:8899            0.0.0.0:               LISTEN      3925/nginx: worker \ntcp6       0      0 :::22                   :::*                    LISTEN      860/sshd      \n(pydev) root@debian-t6:/home/www/test_openresty# perf stat 3925\nWorkload failed: No such file or directory\n(pydev) root@debian-t6:/home/www/test_openresty# perf stat 3925\nWorkload failed: No such file or directory\n(pydev) root@debian-t6:/home/www/test_openresty# perf stat -p 3925\n^C\n Performance counter stats for process id '3925':\n  26551.536198      task-clock (msec)         #    0.406 CPUs utilized          \n           440      context-switches          #    0.017 K/sec                  \n             4      cpu-migrations            #    0.000 K/sec                  \n         3,282      page-faults               #    0.124 K/sec                  \n95,040,700,282      cycles                    #    3.579 GHz\n\n      stalled-cycles-frontend\n      stalled-cycles-backend \n    50,288,817,541      instructions              #    0.53  insns per cycle      \n     9,137,095,983      branches                  #  344.127 M/sec                \n       382,706,201      branch-misses             #    4.19% of all branches        \n  65.476276109 seconds time elapsed\n\n```\nperf top\n```\n   PerfTop:   33917 irqs/sec  kernel:14.3%  exact:  0.0% [4000Hz cycles],  (all, 8 CPUs)\n\n 6.14%  libluajit-5.1.so.2.1.0  [.] lj_str_new               \n 4.17%  libluajit-5.1.so.2.1.0  [.] gc_sweep                 \n 2.96%  libluajit-5.1.so.2.1.0  [.] lj_alloc_free            \n 2.57%  libluajit-5.1.so.2.1.0  [.] propagatemark            \n 2.39%  libluajit-5.1.so.2.1.0  [.] lj_BC_TGETS              \n 2.04%  [unknown]               [.] 0x00007f4f79146b67       \n 1.92%  libluajit-5.1.so.2.1.0  [.] lj_alloc_malloc          \n 1.36%  [unknown]               [.] 0x00007f4f79149a4a       \n 1.34%  libpcre.so.3.13.1       [.] pcre_exec                \n 1.04%  libluajit-5.1.so.2.1.0  [.] lj_BC_CALL               \n 0.78%  libluajit-5.1.so.2.1.0  [.] lj_BC_UGET               \n 0.73%  libluajit-5.1.so.2.1.0  [.] lj_tab_get               \n 0.71%  libluajit-5.1.so.2.1.0  [.] lj_tab_newkey            \n 0.68%  [kernel]                [k] rtl8169_poll             \n 0.67%  libluajit-5.1.so.2.1.0  [.] lj_BC_TSETS              \n 0.62%  libc-2.19.so            [.] __memcpy_sse2_unaligned  \n 0.58%  libluajit-5.1.so.2.1.0  [.] lj_tab_resize            \n 0.56%  [kernel]                [k] _raw_spin_lock           \n 0.56%  libluajit-5.1.so.2.1.0  [.] lj_debug_frame           \n 0.56%  [kernel]                [k] rtl8169_interrupt\n\n```\n```sh\n$    grep -v '^$' conf/nginx-prod.conf \npid tmp/nginx.pid;\nworker_processes 8;\nworker_rlimit_nofile 1048576;\nworker_rlimit_core 500M;\nevents { \n    use epoll;\n    multi_accept on; \n    worker_connections  65535;\n}\nhttp {\n    include ./mime.types;\n    client_max_body_size 10m;    #\u5141\u8bb8\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u6700\u5927\u5355\u6587\u4ef6\u5b57\u8282\u6570\n    client_body_buffer_size 10m;  #\u7f13\u51b2\u533a\u4ee3\u7406\u7f13\u51b2\u7528\u6237\u7aef\u8bf7\u6c42\u7684\u6700\u5927\u5b57\u8282\u6570\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout  30;\n    charset utf8;\n    lua_package_path \"./app/?.lua;./app/lor/?.lua;./app/library/?.lua;./app/?/init.lua;./?.lua;;\";\n    lua_package_cpath \"./app/library/?.so;/usr/local/lor/?.so;;\";\n    lua_code_cache on; # set on @production\n    #LUA_SHARED_DICT\n    server { \n        listen 8000; \n        location / {\n            include uwsgi_params;\n            uwsgi_pass unix:///tmp/uwsgi.sock;\nerror_log logs/prod-error.log;\n    }\n}\n\nserver {\n    listen 8899;\n    #server_name openresty-china.com;\n    set $template_root '';\n    # \u7528\u6237\u4e0a\u4f20\u7684\u9759\u6001\u6587\u4ef6\u76ee\u5f55\n    set $static_files_path \"/data/openresty-china/static\";\n\n    # \u5934\u50cf\u548c\u6587\u7ae0\u3001\u8bc4\u8bba\u56fe\u7247\n    location /static/avatar {\n        alias $static_files_path;\n    }\n    location /static/files {\n        alias $static_files_path;\n    }\n    # \u9879\u76ee\u672c\u8eab\u7684\u9759\u6001\u6587\u4ef6\n    location /static/css {\n        alias ./app/static/css;\n    }\n    location /static/community {\n        alias ./app/static/community;\n    }\n    location /static/fonts {\n        alias ./app/static/fonts;\n    }\n    location /static/js {\n        alias ./app/static/js;\n    }\n    location /static/libs {\n        alias ./app/static/libs;\n    }\n\n    # Access log with buffer, or disable it completetely if unneeded\n    # access_log logs/prod-access.log combined buffer=16k;\n    # Error log\n\nerror_log logs/prod-error.log;\n    # lor runtime\n    location / {\n        content_by_lua_file ./app/main.lua;\n    }\n}\n\n}\n```\n** WRK test\nwrk -c 5000 -t 8 -d 30s --timeout 5 --latency http://192.168.25.106:8899/iot/v1.0/app/auth/abc/123456/\nRunning 30s test @ http://192.168.25.106:8899/iot/v1.0/app/auth/abc/123456/\n  8 threads and 5000 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   605.37ms  540.58ms   4.99s    79.04%\n    Req/Sec     0.88k   175.85     1.84k    74.46%\n  Latency Distribution\n     50%  460.43ms\n     75%  764.84ms\n     90%    1.34s \n     99%    2.53s \n  210435 requests in 30.05s, 81.51MB read\n  Socket errors: connect 0, read 2497, write 0, timeout 25\nRequests/sec:   7003.34\nTransfer/sec:      2.71MB. @agentzh I'm using debian system ,build openresty-1.11.2.2 from source code, how to get openresty-valgrind ?. ",
    "jggc": "This makes sense I was not expecting that to be a one liner. Thanks for the update.. ",
    "danihodovic": "Any time estimate until the next upgrade of nginx core @agentzh ?\nWe are using nginx stream { } block with a resolver like so\nstream {\n  server {\n    resolver xxxx;\n    listen 1555;\n    set $some_addr some_addr;\n    proxy_pass $some_addr;\n  }\n}\nHowever this feature is only available in 1.11.3. :disappointed: \nI could try to manually apply the patch https://github.com/nginx/nginx/commit/dea1e999b88560cb291505debec22da858a268f9.patch, but I'm not sure if a one off patch would be accepted here.. ",
    "krish7919": "Is there a timeline for this update?\n. @agentzh Any idea how long will it take?\n. @agentzh Thanks!. ",
    "ssharma": "@agentzh Openresty is amazing! \ud83d\udc4d  We wanted to useout log_format name escape=json introduced in nginx 1.11.8. Any update on nginx core upgrade? . @agentzh Thanks for the update! . ",
    "dovreshef": "@agentzh. Thanks for all the hard work! \nAny updates when is the next release due?. ",
    "fangqiao": "Thanks. I just started to learn OpenResty. So if to use openresty and lua for authentication before proxy pass, auth_request is entirely not needed?. Just found following example from lua-nginx-module documentation:\nNote that the ngx_auth_request module can be approximated by using access_by_lua:\n```\n location / {\n     auth_request /auth;\n # proxy_pass/fastcgi_pass/postgres_pass/...\n\n}\ncan be implemented in ngx_lua as:\n location / {\n     access_by_lua '\n         local res = ngx.location.capture(\"/auth\")\n     if res.status == ngx.HTTP_OK then\n         return\n     end\n\n     if res.status == ngx.HTTP_FORBIDDEN then\n         ngx.exit(res.status)\n     end\n\n     ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)\n ';\n\n # proxy_pass/fastcgi_pass/postgres_pass/...\n\n}\n```\nI guess this meets my needs, except one final question: \nsay I generate the Ali authorization string inside the Lua code block. How can I pass it to \nnginx directive to set the proxy_pass Authorization header? \n. No problem.\nI have got the answers and built up a prototype. It works very well. I might use openresty in production. Do you have a page for who uses openresty? \nThanks. . ",
    "tcho16": "@agentzh @thibaultcha . Managed to fix my problem. Can successfully lua tests on my KONG plugins.. ",
    "yarix": "It looks related to: https://github.com/openresty/lua-nginx-module/issues/218\n. thank you @agentzh.\nSo in case that rate limits are problematic with subrequests, I will really appreciate your advice for the following scenario:\n- i need to rate limit my service (me.com/api) per tenant.\n- all tenants access the same url (me.com/api) which is a POST request with JSON body. they can't add headers.\n- to figure out the tenant i have to extract something from the JSON Body and then check the DB ( I have a service for that getTenant)\n- once i know the tenant, i need to FW the request to the to the api service, which should be rate-limited.\nBTW - i think the limitation (rate-limits for main requests only) should be mention in the documentation . @agentzh, could you explain why rate-limiting internal requests are wrong? when adding the nodelay option to limit_req in the above, then Nginx/Openresty works as expected. but, it get stuck if delay is used.\n. ",
    "PatHuman": "Hi  detailyang,\nYes, Thanks. I was expecting luarocks to make stormpath-nginx available in openresty, since luarocks installed that module. \nThe sentence \"make sure the lua_package_path include the stormpath-nginx\" is/was misleading for me. It looked like lua_package_path must include luarocks, but I ended up exporting LUA_PATH, and LUA_CPATH given from the command :  luarocks  path --bin.\nThat fixed my issue.\nMany Thanks.\n. ",
    "houfan": "hello, @detailyang   thanks for your reply\nbut  by far ,  it  worked well with lua scripts ...................eeeee how to expain this .......... .............you make me soooooo confused..........in the end, do I need to recompile it or nor ?   . eee....it's ok   i am a rookie here .... and  thank you very much   : P. so ..... the rpath decide which luajit the openresty is using.and by default  it's using the built-in luajit    \nthank you!!! @detailyang  . ",
    "alonbg": "@agentzh , @pavelnemirovsky - OpenFastPath might interest you.\n\" ...OpenFastPath functionality is provided as a library to Fast Path applications that use ODP run to completion execution model and framework. DPDK is in this initial release supported through the ODP-DPDK layer. Native DPDK support is being evaluated. ...\"\nThere is an nginx port as well.. @cih-y2k, actually I've\u200b recently started looking in it. Heads up, it will take some time though as my run queue is long :)\nAnyway, I'd wait for thier next major release (due soon) as currently fork is disabled (can run only one nginx worker). ",
    "cih-y2k": "@agentzh , @pavelnemirovsky, @alonbg , is this useful for openresty (https://github.com/F-Stack/f-stack). @alonbg thank you!. ",
    "dndx": "This patch looks fine to me (aside from a minor issue above). It will be even better if we could also write some simple tests for it. (maybe inside https://github.com/openresty/openresty/tree/master/t). @thibaultcha When running your patch with the no_pool patch using Valgrind, I got the following warning:\n==7725== 11 bytes in 1 blocks are definitely lost in loss record 2 of 12\n==7725==    at 0x4A06C50: malloc (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)\n==7725==    by 0x42F4B9: ngx_alloc (ngx_alloc.c:22)\n==7725==    by 0x421194: ngx_resolver_alloc (ngx_resolver.c:4130)\n==7725==    by 0x42132B: ngx_resolver_dup (ngx_resolver.c:4176)\n==7725==    by 0x422DD8: ngx_resolver_create (ngx_resolver.c:257)\n==7725==    by 0x4394A4: ngx_http_core_resolver (ngx_http_core_module.c:5105)\n==7725==    by 0x41FC07: ngx_conf_handler (ngx_conf_file.c:462)\n==7725==    by 0x41FC07: ngx_conf_parse (ngx_conf_file.c:318)\n==7725==    by 0x437072: ngx_http_block (ngx_http.c:237)\n==7725==    by 0x41FC07: ngx_conf_handler (ngx_conf_file.c:462)\n==7725==    by 0x41FC07: ngx_conf_parse (ngx_conf_file.c:318)\n==7725==    by 0x41D477: ngx_init_cycle (ngx_cycle.c:275)\n==7725==    by 0x40C4C4: main (nginx.c:284)\nWhy don't we change\nr->hostsfile.data = ngx_resolver_dup(r, names[i].data + 10,\n                                     r->hostsfile.len + 1);\nto\nr->hostsfile.data = names[i].data + 10;\ninstead? I can confirm that fixes the warning. AFAIK we don't actually need to dup the string here.. @thibaultcha Found another issue.\nWhen building nginx with --with-debug and this patch, and nginx.conf contains:\nresolver hostsfile=/etc/hosts;\nValgrind will output messages similar to this:\n[datong@localhost nginx-build]$ valgrind ./sbin/nginx -t\n==14154== Memcheck, a memory error detector\n==14154== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.\n==14154== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info\n==14154== Command: ./sbin/nginx -t\n==14154== \n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\n==14154== Warning: invalid file descriptor -1 in syscall write()\nnginx: the configuration file /home/datong/nginx-build/conf/nginx.conf syntax is ok\nnginx: configuration file /home/datong/nginx-build/conf/nginx.conf test is successful\nstrace confirms that nginx is attempting to write malloc() debug logs to fd -1.\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 0000000002225280:9\\n\", 64) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F1B0:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F270:9\\n\", 64) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F290:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F350:21\\n\", 65) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F370:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F430:10\\n\", 65) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F450:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F510:23\\n\", 65) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 0000000002225280:3\\n\", 64) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F530:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F5F0:9\\n\", 64) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F610:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F6D0:21\\n\", 65) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F6F0:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F7B0:10\\n\", 65) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F7D0:184\\n\", 66) = -1 EBADF (Bad file descriptor)\nwrite(-1, \"2017/04/05 16:47:20 [debug] 14157#0: malloc: 000000000223F890:23\\n\", 65) = -1 EBADF (Bad file descriptor)\nclose(5)\nCommenting out resolver hostsfile=/etc/hosts; will get rid of this warning.\nI did some digging and it appears to have something to do with your call to ngx_resolver_dup() inside this patch. I believe that r->log (which corresponds to cf->cycle->new_log) have not been initialized inside ngx_resolver_create() and as a result, ngx_resolver_dup() which passes it as the log facility to ngx_alloc() will attempt to write into an uninitialized file descriptor.\nI also did some digging using GDB and can confirm that ngx_log_open_default() which opens the file is called after your code returns.\nI think we should just use ngx_alloc() or ngx_calloc() directly as shown in above code.. Question: how do we tell whether the current worker is the privileged worker in Lua?. All fixed.. @agentzh Added. I think we can just keep the changes to older versions as they are not harmful anyway.. @agentzh We are updating an existing patch so no need to change util/mirror-tarballs.. There seems to be some other files that creates sockets in additional to the ones that have been patched. Like /src/core/ngx_syslog.c, /src/core/ngx_resolver.c. Any thoughts on those ones?. @thibaultcha Yes I think that is a good idea. We should definitely keep the semantics similar to that of Glibc to avoid surprises.. @spacewander Could you please help review this PR as well so we can get it merged soon. Thanks!. @thibaultcha We now respect MAXNS as well as line feed of CR, LF or CRLF as well.. @spacewander Changes has been pushed. Please check again. Thanks!. Committed in https://github.com/openresty/openresty/commit/ff89bf3ea1c9730988e23851d4bb11270ab89588.. @Bypass007 Please check the documentation for those two functions. They accept an optional parameter that tells it at most how many GET/POST parameters should be parsed.. @spacewander This design breaks the current API behavior and does not solves the problem of user specifying a limit but still want to know if the limit has been reached. My propose would be to return a second argument n that specifies how many arguments has actually been parsed, like this:\nargs, n = ngx.req.get_uri_args(201)\nif args and n > 200 then\n    -- client attempted to exploit the function\nend\nNote that the n return value can also be used for other purposes, not just for determining argument overflows.. The current behavior is clearly defined and user has certain expectation on how the behavior should stay consistent over time. Forcing user to read documentation by breaking existing code seems irresponsible and overall a bad idea. Not even to mention returning nil for the first argument may have other unexpected effects on existing code, you can't assume existing code does not check the return value and interpret it differently.\nAlso keep in mind that people using this API for various reasons, not just to write WAF. The current behavior may even be desirable in certain cases. The maintainer of the API should not be biased toward specific use case. As for WAF authors, they are expected to understand how those API works in order to write secure code, not the other way around.. Seems to me the problem is:\nhttps://github.com/openresty/openresty/blob/master/util/configure#L491. @agentzh Addressed.. ~~Looks like we don't need + 1 here?~~\nDisregard. Just found out that ngx_open_file needs a NULL terminated string for path.\nI think you might also need r->hostsfile.data[r->hostsfile.len] = '\\0'; since ngx_resolver_dup does not zero the memory it allocates.. Hmm, looks like ngx_conf_read_token() actually adds the '\\0' for directive parameters. That is definitely not something I knew before! Closing this review.. Could you point out where the configuration entry for ccf->privileged_agent is?. Inside ngx_master_process_cycle(), we may have to set sigio = ccf->worker_processes + 2 /* cache processes */; to sigio = ccf->worker_processes + 3 /* cache processes */; instead. Otherwise worker processes may have less time to shutdown than intended.. Here, instead of making a new type, I suggest we just use NGX_PROCESS_HELPER similiar to how cache manager works.\nOtherwise signal handlers inside http://lxr.nginx.org/source/src/os/unix/ngx_process.c#0400 won't work.. Here, instead of using a new process type NGX_PROCESS_PRIVILEGED, we may also check to see if current process is privileged worker with checks like:\n```\ndefine is_privileged_worker()   (ngx_processes[ngx_process_slot].proc == ngx_privileged_agent_process_cycle)\n```\nAgain, ngx_process is being used in numerous places inside NGINX core and changing it is probably not the best idea.. Agreed with @agentzh here.. @membphis What about:\n```\ndefine is_privileged_worker()   (ngx_processes[ngx_process_slot].name == \"privileged agent process\")\n```\nsince all statically allocated strings inside the same C program has the same address.\nIf that does not work, maybe try\n```\ndefine is_privileged_worker()   (ngx_strcmp(ngx_processes[ngx_process_slot].name, \"privileged agent process\") == 0)\n```\nas well.. @membphis You are right, looks like the above proposal does not quite work...\nHow about we do something even easier. The worker parameter of ngx_worker_process_init() is a signed integer and it apparently have effect when >= 0. I searched NGINX source code and appears that no one is using worker < -1. We can probably pass a magic worker parameter (e.g. -32767, defined with macro) to disable setuid(), while still exerting the same behavior as worker = -1.. Does not looks like this is useful since we already had NGX_PROCESS_INIT_PRIVILEGED_AGENT?. Either this or ngx_is_privileged_agent, we don't need both. Also it appears that the current only does not actually uses ngx_is_privileged_agent.. ngx_stream_proxy_handler already defines ctx above.. There is no space in the default one shipped with NGINX. But if you want I can certainly add it.. This should be #define ngx_cloexec_n    \"ngx_cloexec()\" instead?. I think testing against LF is sufficient as all modern *nix O/S uses LF as newline and the ones that uses CR alone are all legacy systems that no one still uses. Windows does uses CRLF but I don't think they have resolv.conf anyway... That's interesting. AFAIK you can't do multiple resolver directives within the same block. However, NGINX does not prohibit you from doing:\nresolver 8.8.8.8 8.8.8.8;\neither. In the description of this PR, I described the behavior of local as:\n\nIf local=on, then in addition to the resolvers specified, NGINX will parse /etc/resolv.conf and use nameservers found inside as resolvers.\n\nIt seems that allowing duplicates makes more sense? Plus de-duping this will be very painful due to how those data structure works currently.. Actually second thought, maybe supporting CRLF in addition to LF would be a better idea. However, I still think CR alone makes little sense in this case.. I think 2KB is more than enough for all non-abusing users. It's never a good idea to read the whole file as there is a possibility of the filesystem being broken or /etc/resolv.conf being symlinked to /dev/zero.\nMy observations is that resolv.conf will rarely exceed 500 bytes even with crazy comments and so on, so making it larger than 2KB seems to be unnecessarily large.. Actually file.name would have changed after the ngx_conf_full_name call but seems to me that we don't need to assign it back anyway (ngx_conf_full_name also allocates NULL terminated string). I removed those two lines.. Good catch, that was a big mistake, fixed.. ",
    "liuwenru": "@agentzh  sorry,  can you give some information about what i asked!. ",
    "gang929": "@agentzh   with the same nginx.conf and the official Win32 build prebuild  release zip, It has no the error\nbut,  the official Win32 build is limited max opened file handle with 1024!!!  when concurrent connection is more than 1024, the nginx will report error as below\nmaximum number of descriptors s upported by select 1024\nI want unlimit the 1024 to 65536, so , to recompile, but it seems not OK!!. @agentzh  so the win32 build can only support 1024 opened file handle?\nwhen the concurrent connection is more than 1024, how to sovle the problem?. @agentzh   Can you give me the win32 compile script or configure option,  to solve the client_max_body_size problem?. ",
    "ingydotnet": "I was joking about editing Chinese. I'll have to make less jokes!. ",
    "hanmenghui": "@agentzh It works,Thanks! . ",
    "weldpua2008": "@agentzh\n\nsubrequests to buffer too large response bodies, exceeding the 2GB per-worker memory limit inside the LuaJIT VM\n\nDo you know how I can measure this sizes like GC?:\nlocation = /gc {\n        content_by_lua_block {\n            ngx.say(\"PID:\", ngx.var.pid)\n            ngx.say(\"GC:\", collectgarbage(\"count\"))\n        }\n    }\nPS:\nDo you know how to fix this:\nBFD: Warning: /var/log/nginx-coredump/core.4888 is truncated: expected core file size >= 6015614976, found: 2497900544.\nThank you . I tried to produce a \"full\" coredump. So I  include abrt:\n```\n[ccpp-2017-03-29-07:56:18-22603]# gdb /usr/bin/openresty coredump\nGNU gdb (GDB) Red Hat Enterprise Linux (7.2-90.el6)\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from /usr/bin/openresty...Reading symbols from /usr/lib/debug/usr/local/openresty/nginx/sbin/nginx.debug...done.\ndone.\nwarning: core file may not match specified executable file.\n[New Thread 22603]\nMissing separate debuginfo for\nTry: yum --enablerepo='-debug' install /usr/lib/debug/.build-id/0d/775380df6e3775315d2f90563221df2795b7dd\nReading symbols from /lib64/libdl-2.12.so...Reading symbols from /usr/lib/debug/lib64/libdl-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libdl-2.12.so\nReading symbols from /lib64/libpthread-2.12.so...Reading symbols from /usr/lib/debug/lib64/libpthread-2.12.so.debug...done.\n[Thread debugging using libthread_db enabled]\ndone.\nLoaded symbols for /lib64/libpthread-2.12.so\nReading symbols from /lib64/libcrypt-2.12.so...Reading symbols from /usr/lib/debug/lib64/libcrypt-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libcrypt-2.12.so\nReading symbols from /usr/local/openresty/luajit/lib/libluajit-5.1.so.2.1.0...Reading symbols from /usr/lib/debug/usr/local/openresty/luajit/lib/libluajit-5.1.so.2.1.0.debug...done.\ndone.\nLoaded symbols for /usr/local/openresty/luajit/lib/libluajit-5.1.so.2.1.0\nReading symbols from /lib64/libm-2.12.so...Reading symbols from /usr/lib/debug/lib64/libm-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libm-2.12.so\nReading symbols from /usr/local/openresty/pcre/lib/libpcre.so.1.2.7...Reading symbols from /usr/lib/debug/usr/local/openresty/pcre/lib/libpcre.so.1.2.7.debug...done.\ndone.\nLoaded symbols for /usr/local/openresty/pcre/lib/libpcre.so.1.2.7\nReading symbols from /usr/local/openresty/openssl/lib/libssl.so.1.0.0...Reading symbols from /usr/lib/debug/usr/local/openresty/openssl/lib/libssl.so.1.0.0.debug...done.\ndone.\nLoaded symbols for /usr/local/openresty/openssl/lib/libssl.so.1.0.0\nReading symbols from /usr/local/openresty/openssl/lib/libcrypto.so.1.0.0...Reading symbols from /usr/lib/debug/usr/local/openresty/openssl/lib/libcrypto.so.1.0.0.debug...done.\ndone.\nLoaded symbols for /usr/local/openresty/openssl/lib/libcrypto.so.1.0.0\nReading symbols from /usr/local/openresty/zlib/lib/libz.so.1.2.8...Reading symbols from /usr/lib/debug/usr/local/openresty/zlib/lib/libz.so.1.2.8.debug...\nwarning: \"/usr/lib/debug/usr/local/openresty/zlib/lib/libz.so.1.2.8.debug\": separate debug info file has no debug info\n(no debugging symbols found)...done.\n(no debugging symbols found)...done.\nLoaded symbols for /usr/local/openresty/zlib/lib/libz.so.1.2.8\nReading symbols from /usr/lib64/libGeoIP.so.1.6.5...Reading symbols from /usr/lib/debug/usr/lib64/libGeoIP.so.1.6.5.debug...done.\ndone.\nLoaded symbols for /usr/lib64/libGeoIP.so.1.6.5\nReading symbols from /lib64/libc-2.12.so...Reading symbols from /usr/lib/debug/lib64/libc-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libc-2.12.so\nReading symbols from /lib64/ld-2.12.so...Reading symbols from /usr/lib/debug/lib64/ld-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/ld-2.12.so\nReading symbols from /lib64/libfreebl3.so...Reading symbols from /usr/lib/debug/lib64/libfreebl3.so.debug...done.\ndone.\nLoaded symbols for /lib64/libfreebl3.so\nReading symbols from /lib64/libgcc_s-4.4.7-20120601.so.1...Reading symbols from /usr/lib/debug/lib64/libgcc_s-4.4.7-20120601.so.1.debug...done.\ndone.\nLoaded symbols for /lib64/libgcc_s-4.4.7-20120601.so.1\nReading symbols from /lib64/libnss_files-2.12.so...Reading symbols from /usr/lib/debug/lib64/libnss_files-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libnss_files-2.12.so\nReading symbols from /usr/local/openresty/nginx/modules/ngx_http_vhost_traffic_status_module.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/local/openresty/nginx/modules/ngx_http_vhost_traffic_status_module.so\nReading symbols from /lib64/libnss_dns-2.12.so...Reading symbols from /usr/lib/debug/lib64/libnss_dns-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libnss_dns-2.12.so\nReading symbols from /lib64/libresolv-2.12.so...Reading symbols from /usr/lib/debug/lib64/libresolv-2.12.so.debug...done.\ndone.\nLoaded symbols for /lib64/libresolv-2.12.so\nReading symbols from /usr/lib64/lua/5.1/lfs.so...Reading symbols from /usr/lib/debug/usr/lib64/lua/5.1/lfs.so.debug...done.\ndone.\nLoaded symbols for /usr/lib64/lua/5.1/lfs.so\nReading symbols from /usr/local/openresty/lualib/cjson.so...Reading symbols from /usr/lib/debug/usr/local/openresty/lualib/cjson.so.debug...done.\ndone.\nLoaded symbols for /usr/local/openresty/lualib/cjson.so\nReading symbols from /usr/lib64/lua/5.1/usersshm.so...Reading symbols from /usr/lib/debug/usr/lib64/lua/5.1/usersshm.so.debug...done.\ndone.\nLoaded symbols for /usr/lib64/lua/5.1/usersshm.so\nReading symbols from /usr/lib64/lua/5.1/libmaxminddb.so...Reading symbols from /usr/lib/debug/usr/lib64/lua/5.1/libmaxminddb.so.debug...\nwarning: \"/usr/lib/debug/usr/lib64/lua/5.1/libmaxminddb.so.debug\": separate debug info file has no debug info\n(no debugging symbols found)...done.\n(no debugging symbols found)...done.\nLoaded symbols for /usr/lib64/lua/5.1/libmaxminddb.so\nCore was generated by `nginx: worker process is shutting down                        '.\nProgram terminated with signal 11, Segmentation fault.\n0  0x00007f085dc4ef59 in lj_vm_unwind_ff_eh () from /usr/local/openresty/luajit/lib/libluajit-5.1.so.2.1.0\nMissing separate debuginfos, use: debuginfo-install openresty-module-vts-0.1.14-1.el6.x86_64\n```\nPlease advise . ",
    "svrsreeraj": "ok, but how the map variable can be accessed in content_by_lua ?. ",
    "f1erro": "Thank you for the quick reply!  I love working with this OpenResty -- it's an awesome piece of software.  \nI am not sure I understand the problem here.  I have been able to get OpenResty to find the luaposix module.  However, when I try to require 'posix', I get an error message about the inability to find bit32 module, which is VM provided.  So, does the Luajit 5.1 VM not provide this module?  I apologize if these are ignorant questions, this is new territory for me.\nThis is the library I am trying to install.\nhttps://github.com/luaposix/luaposix\nIt is not present in OPM, and the docs say using luarocks is discouraged.  What would you advise here?\nAl regarding performance; my specific use case is to send a SIGHUP to nginx when instructed, so these posix calls would not be used very often.\nThanks!. Thanks neomantra!  I will try that and let you know :). @agentzh you are right, I was hoping to send the HUP to the master, in order to initiate a restart.  . Thank you for your help. ",
    "membphis": "@agentzh fixed all points, and removed nginx 1.9.15 patch.  \ncommit: https://github.com/openresty/openresty/pull/249/commits/30854e6ce338856c561ea4c07a5608431e5c69db. missing macro define control if patched and test cases, I'll submit later.. @dndx @agentzh submit new version right now. marked the privileged agent process type with the global variable.. @agentzh fixed right now, please take a look when you have time.. It now only supports \"http\" scenes.\nWe intercepted the error logs from ngx_log_error_core and save it to ngx_http_request_s->intercept_logs, save the intercept log to the current request structure.\nIt's clearer, and its easy to control the max number of error log per request. It's not safe if we save it as worker level(eg: one request generates a large number of duplicate error logs).\n. fixed. good idea, its more flexible and we can easily control it at Lua land. How about ngx.worker.privilege({enable=true}) ? and It only can be runned at init_by_lua phase.. just style copy from cache manager.. The logic inside is used to modify the process's privilege, the privileged process should have same privilege as master process, it don't need to do this.. we can't reuse the NGX_PROCESS_HELPER, the cache manager and cache loader will use NGX_PROCESS_HELPER. they were different process type.. ok, i'll remove it later.. Uniform naming to the \"privileged agent process\" :). to enable privileged agent, the 3rd c module could set ccf->privileged_agent to 1.. good catch. I'll submit new version later.. I tried this way right now, but I found it's more complicated than current version. \nngx_privileged_agent_process_cycle is a static function, the macro only valid in ngx_process_cycle.c. \nthe 3rd c module is not easy to get process type, we have to export a new variable or function if we reuse NGX_PROCESS_HELPER.. Thought for a while, I love to reuse NGX_PROCESS_HELPER if possible, how about we export a new variable named ngx_sub_process?\nNGX_PROCESS_HELPER_CACHE_MANAGER    401\nNGX_PROCESS_HELPER_CACHE_LOADER     402\nNGX_PROCESS_HELPER_PRIVILEGED_AGENT 403\nwe can do more precise control if we need. ngx_process is the main process type, ngx_sub_process is the process sub type.\n@dndx @agentzh . ok, I'll submit new version later, although it's a little hacky :). I tried but got failed. here is the reason :)\n\n. NGX_PROCESS_INIT_PRIVILEGED_AGENT is a macro-define, It is not necessary now, removed. :). sorry, git push failed. submitted right now.. fixed. c9283d98aa6dd772ae9ab355eeaafc015378efda. ",
    "taf2": "Looks like this is now missing from openresty amazon rpm's?. Ah okay - it appears to still be included in the homebrew packages which maybe causes confusion when going from a developer environment to production?. ",
    "xvaara": "I don't have Windows, but that worked with my mac & linux, so I recon it would also work on freebsd.. @yangshuxin don't know about 3. The \"-msse4.2\" flag causes the build binaries to fail on a non sse4.2 machine. I know they are old, but still got some chucking along as test servers. The flag tests the compiler, not the machine.\nExample without any configure flags on the current tar.gz\n\n~/src/openresty-1.11.2.3 \ue0b0 ./build/luajit-root/usr/local/openresty/luajit/bin/luajit\n[1] 6082 illegal hardware instruction ./build/luajit-root/usr/local/openresty/luajit/bin/luajit\n\nPut with the patch:\n\n~/src/openresty-1.11.2.3 \ue0b0 ./build/luajit-root/usr/local/openresty/luajit/bin/luajit\nLuaJIT 2.1.0-beta2 -- Copyright (C) 2005-2017 Mike Pall. http://luajit.org/\nJIT: ON SSE2 SSE3 SSE4.1 fold cse dce fwd dse narrow loop abc sink fuse. Seems to work, for me at least:\ncd LuaJIT-2.1-20170405\n/tmp/resty-config-YHofzs.c: In function \u2018main\u2019:\n/tmp/resty-config-YHofzs.c:3:2: error: #error not support\n #error not support\n  ^\nWARNING: -msse4.2 not supported in cc.\n. Should we also add --without-sse42 option if someone needs it?. It works. But to nitpick, the error message is wrong. Since sse4.2 is in the $comp, but not supported by the cpu. Minor difference. \n\nThe --without-luajit-sse4.2 flag would be needed if you want to build debian packages, since debians own packages are build to work without sse4.2. Should luajit itself check for sse4.2 at runtime? Or does anyone anymore care about 9year old processors \ud83d\ude00. Tried to find something quickly when searching for solution. But I'm not a C-coder so I'm not comfortable doing that, since didn't find any easy way of doing that.. ",
    "yangshuxin": "My $0.02 value of input to this patch:\n\n\"being portable\" is a matter of degree, not a matter of black & white, and we are trying to improve the degree as further as possible.\nexamining \"/proc/cpuinfo\" is not very portable.\nI could be wrong, but I kinda feel \"-msse4.2\" flag is more \"portable\" than the  gcc -dM -march=native $* -E. IIRC, quite a few compiler support the \"-mssex.y\" few years ago When I implement a vectorization about 6 years back. \ninline asm is not portable. gcc's inline asm is different from others, although many other static compilers try to keep in sync with gcc about inline asm.. @xvaara , you are right as to  -mss4.2 flag in gcc does not check if the underlying architecture support sse4.2.\n\nalternative, test can be done with this: \n```\nint main(int argc, char** argv) {\nif !defined(SSE4_2)\nerror not support\nendif\nreturn 0;\n\n}\n``\nand compile with-march=native. I guess this is more portable thangcc -dM -march=native $* -E`.\n. The testing sse part LGTM.. ",
    "taorui2017": "thank you ,but when i move the code to content_by_lua,this error happen:\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua tcp socket pool get keepalive peer\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua tcp socket keepalive connection pool not found\n2017/05/03 11:31:10 [debug] 8142#0: posix_memalign: 00007FC2207B8390:128 @16\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua tcp socket connect timeout: 20000\n2017/05/03 11:31:10 [debug] 8142#0: malloc: 00007FC2207B9360:72\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua tcp socket network address given directly\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua tcp socket resolve retval handler\n2017/05/03 11:31:10 [debug] 8142#0: 4 stream socket 11\n2017/05/03 11:31:10 [debug] 8142#0: 4 epoll add connection: fd:11 ev:80002005\n2017/05/03 11:31:10 [debug] 8142#0: 4 connect to 127.0.0.1:5518, fd:11 #5\n2017/05/03 11:31:10 [debug] 8142#0: 4 http cleanup add: 00007FC2207B83E0\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua tcp socket connect: -2\n2017/05/03 11:31:10 [debug] 8142#0: 4 posix_memalign: 00007FC2207B80C0:128 @16\n2017/05/03 11:31:10 [debug] 8142#0: 4 event timer add: 11: 20000:1493782290221\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua resume returned 1\n2017/05/03 11:31:10 [debug] 8142#0: 4 lua thread yielded\n2017/05/03 11:31:10 [debug] 8142#0: 4 http lua finalize fake request: -4, a:1, c:2\n2017/05/03 11:31:10 [debug] 8142#0: 4 http lua fake request count:2\n2017/05/03 11:31:10 [debug] 8142#0: add cleanup: 00007FC2207B83F8\nand,i also test http module,this error also happen. ",
    "alex-mashin": "The binary openresty package for Ubuntu artful wouldn't install on my box because of this. Can I do anything about this, short of compiling from source?. ",
    "nelsonmora48": "Anybidy has a Docker Image of kong without sse4 ? I Have tried to bliud openresty from sources inside a dockler container but fails.... ",
    "StayTherapy": "it's overlay:\n\"\"\"\nServer Version: 1.9.1\nStorage Driver: overlay\n Backing Filesystem: extfs\nExecution Driver: native-0.2\nLogging Driver: json-file\nKernel Version: 4.3.0-1.el7.elrepo.x86_64\nOperating System: CentOS Linux 7 (Core)\n\"\"\"\nI try to adjust the volumes setting \u270d\ufe0f. ",
    "anjia0532": "@StayTherapy  can you try this commands ?\nkill -USR1 $( cat /path/to/nginx.pid ) \nref  Stopping or Restarting NGINX. @agentzh sorry about this issues, I thought it was using nginx 1.13.3 OpenResty's ngx_stream_lua_module now supports nginx 1.13.3+(ref (openresty's twitter)\n~~Because openresty's doc does not specify this matter~~\nbash\nopenresty -v\nnginx version: openresty/1.11.2.5\nupdate\nsorry ,It has already been explained in the document,Version 1.11.2.1 - 24 August 2016\n\nupgraded the Nginx core to 1.11.2.. @agentzh Thank you for your patient reply.   :  ). \n",
    "meyskens": "@agentzh confirmed this is a bug in 1.11.2, I'm going to test 1.11.13. happens on every version I compile :/ \n--with-pcre-jit \\\n    --with-ipv6 \\\n    --with-http_v2_module \\\n    --with-http_ssl_module \\\n    --without-http_ssi_module \\\n    --without-http_userid_module \\\n    --without-http_uwsgi_module \\\n    --without-http_scgi_module \\\nnginx version: nginx/1.12.0\nbuilt by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) \nbuilt with OpenSSL 1.0.2g  1 Mar 2016\nTLS SNI support enabled. @agentzh I know the difference between the two but Chrome reuses the code/error messages for a reason. I am doing further investigation and will file a bug report with Nginx. ",
    "concatime": "I just tried to update nginx in openresty to use the latest version 1.13.. Wow, good to know! Sure I will try it! Thx for the awesome job.. ",
    "wtiancai": "@agentzh \nwhen use content_by_lua_file,has the problem. I turn on debugging logs mode,but there is nothing to help.\nnginx.conf\uff1a\n    server {\n        listen       80;\n        server_name  localhost;\n    charset utf-8;\n    lua_code_cache on;\n\n    location ~ .*\\.(jsp|do|shtml)?$ { \n        proxy_redirect     off; \n        content_by_lua_file ./conf/mytest.lua;\n    }\n\n    location ~* .*\\.(gif|jpg|jpeg|png|bmp|swf|js|css)$ { \n        access_log off;\n        proxy_cache pscms;                       \n        proxy_cache_valid 200 304 1h;           \n        proxy_cache_valid 301 302 5m; \n        proxy_cache_valid any 1m; \n        proxy_set_header Accept-Encoding \"\";            \n        proxy_ignore_headers \"Cache-Control\" \"Expires\"; \n        content_by_lua_file ./conf/mytest.lua;\n        expires  15m; \n        break;  \n    }\n\n    location / {\n        proxy_redirect     off; \n        content_by_lua_file ./conf/mytest.lua;          \n    }\n\n    location @proxy_A {\n        proxy_pass http://app_server;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   502 503 504  /50x.html;\n    location = /50x.html {\n        root   html;\n    }\n\n}\n\nmytest.lua\uff1a\nngx.exec(\"@proxy_A\"). ",
    "Ryan007": "I got understand the difference between nginx regex and lua regex.\njust '//|' works. ",
    "taosx": "Thank you for all the work, I think I'll wait then.. ",
    "wjessop": "I'd be really interested in a 1.12, we really need max_conns and it seems this was removed between Nginx v1.5.9 and v1.11.5.. I see you've upgraded Nginx core to 1.11.2, any idea when you will be able to upgrade to 1.11.5 or higher? We're blocked still on the max_conns feature of the server directive  only being available in 1.11.5 and upwards.. Thanks!. ",
    "jybleau": "yes, but I will retry with a clean install of centos7... Strange indeed, openresty.repo looks just fine. I'll keep you informed.. Testing with a clean install works fine. yum got broken during the latest yum update. Sorry about that.. ",
    "cnlangzi": "cpuinfo:\nprocessor   : 0\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 23\nmodel name  : Intel(R) Core(TM)2 Quad CPU    Q9550  @ 2.83GHz\nstepping    : 10\nmicrocode   : 2567\ncpu MHz     : 2826.505\ncache size  : 6144 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 0\ncpu cores   : 4\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm dts tpr_shadow vnmi flexpriority\nbogomips    : 5653.01\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 36 bits physical, 48 bits virtual\npower management:\nprocessor   : 1\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 23\nmodel name  : Intel(R) Core(TM)2 Quad CPU    Q9550  @ 2.83GHz\nstepping    : 10\nmicrocode   : 2567\ncpu MHz     : 2826.505\ncache size  : 6144 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 2\ncpu cores   : 4\napicid      : 2\ninitial apicid  : 2\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm dts tpr_shadow vnmi flexpriority\nbogomips    : 5653.01\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 36 bits physical, 48 bits virtual\npower management:\nprocessor   : 2\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 23\nmodel name  : Intel(R) Core(TM)2 Quad CPU    Q9550  @ 2.83GHz\nstepping    : 10\nmicrocode   : 2567\ncpu MHz     : 2826.505\ncache size  : 6144 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 1\ncpu cores   : 4\napicid      : 1\ninitial apicid  : 1\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm dts tpr_shadow vnmi flexpriority\nbogomips    : 5653.01\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 36 bits physical, 48 bits virtual\npower management:\nprocessor   : 3\nvendor_id   : GenuineIntel\ncpu family  : 6\nmodel       : 23\nmodel name  : Intel(R) Core(TM)2 Quad CPU    Q9550  @ 2.83GHz\nstepping    : 10\nmicrocode   : 2567\ncpu MHz     : 2826.505\ncache size  : 6144 KB\nphysical id : 0\nsiblings    : 4\ncore id     : 3\ncpu cores   : 4\napicid      : 3\ninitial apicid  : 3\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 13\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx lm constant_tsc arch_perfmon pebs bts rep_good aperfmperf pni dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm sse4_1 xsave lahf_lm dts tpr_shadow vnmi flexpriority\nbogomips    : 5653.01\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 36 bits physical, 48 bits virtual\npower management:\n. openresty is installed from Official OpenResty Repository. I have compiled openresty from source code on this server.\n./configure --prefix=/usr/local/openresty/nginx --with-cc-opt='-O2 -I/usr/local/openresty/zlib/include -I/usr/local/openresty/pcre/include -I/usr/local/openresty/openssl/include' --with-ld-opt='-Wl,-rpath,/usr/local/openresty/luajit/lib -L/usr/local/openresty/zlib/lib -L/usr/local/openresty/pcre/lib -L/usr/local/openresty/openssl/lib -Wl,-rpath,/usr/local/openresty/zlib/lib:/usr/local/openresty/pcre/lib:/usr/local/openresty/openssl/lib' --with-pcre-jit --with-ipv6 --with-stream --with-stream_ssl_module --with-http_v2_module --without-mail_pop3_module --without-mail_imap_module --without-mail_smtp_module --with-http_stub_status_module --with-http_realip_module --with-http_addition_module --with-http_auth_request_module --with-http_secure_link_module --with-http_random_index_module --with-http_gzip_static_module --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-threads --with-file-aio --with-dtrace-probes --with-http_ssl_module \ngmake\ngmake install\nit says:\ngmake[2]: Leaving directory /home/devops/openresty-1.11.2.3/build/nginx-1.11.2'\ngmake[1]: Leaving directory/home/devops/openresty-1.11.2.3/build/nginx-1.11.2'\nmkdir -p /usr/local/openresty/nginx/site/lualib /usr/local/openresty/nginx/site/pod /usr/local/openresty/nginx/site/manifest\nln -sf /usr/local/openresty/nginx/nginx/sbin/nginx /usr/local/openresty/nginx/bin/openresty\nit throws same error  \"Illegal instruction\" when we try to run \"/usr/local/openresty/nginx/nginx/sbin/nginx -V\".\nIs anything missing on compiling it? thanks.\n. @agentzh sorry, I did not realize they are different.   It works based on openresty-1.11.2.4rc0.8.tar.gz. thanks a lot.. @agentzh there is conflict on openssl \nnginx: [emerg] at least OpenSSL 1.0.2e required but found OpenSSL 1.0.1e-fips 11 Feb 2013 \nshould i rebuild OpenSSL ?\n. @agentzh  thanks. it is fixed.  We are asking the guy to upgrade the server asap. \nI have rebuilt latest openssl on server by https://www.digitalocean.com/community/questions/how-to-get-already-installed-nginx-to-use-openssl-1-0-2-for-alpn  .  the issue can be fixed too.. Linux  2.6.32-696.3.1.el6.x86_64 #1 SMP Tue May 30 19:52:55 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n. ",
    "VaiN474": "I've run into this issue while trying to install OpenResty on an Ubuntu 16.0.4 VM on a local Dell PowerEdge 1950. The CPUs don't support SSE 4.2, but when compiling from source it's still trying to add it for LuaJIT:\nmake TARGET_STRIP=@: CCDEBUG=-g XCFLAGS='-DLUAJIT_ENABLE_LUA52COMPAT -msse4.2' CC=cc PREFIX=/usr/local/openresty/luajit\n$ cat /proc/cpuinfo\nprocessor : 0\nvendor_id : GenuineIntel\ncpu family  : 6\nmodel   : 23\nmodel name  : Intel(R) Xeon(R) CPU           E5430  @ 2.66GHz\nstepping  : 6\nmicrocode : 0x60f\ncpu MHz   : 2660.027\ncache size  : 6144 KB\nphysical id : 0\nsiblings  : 1\ncore id   : 0\ncpu cores : 1\napicid    : 0\ninitial apicid  : 0\nfpu   : yes\nfpu_exception : yes\ncpuid level : 10\nwp    : yes\nflags   : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx lm constant_tsc arch_perfmon pebs bts nopl tsc_reliable nonstop_tsc aperfmperf pni ssse3 cx16 sse4_1 tsc_deadline_timer hypervisor lahf_lm tsc_adjust dtherm\nbugs    :\nbogomips  : 5320.05\nclflush size  : 64\ncache_alignment : 64\naddress sizes : 43 bits physical, 48 bits virtual\npower management:\nI had to manually comment out the line that adds that flag to prevent the Illegal Instruction error. I then tried to follow the suggestion to compile against OpenResty's OpenSSL and PCRE, but I ran into a strange issue with it refusing to find the libpq library for the http_postgres_module.\nIf I compile with the system's versions it works fine:\nadding module in ../ngx_postgres-1.0rc7\nchecking for libpq library in directories specified by LIBPQ_INC (/usr/include/postgresql) and LIBPQ_LIB (/usr/lib/x86_64-linux-gnu) ... found\nchecking for libpq library version 9.1 ... found\nBut when using the suggested method:\nadding module in ../ngx_postgres-1.0rc7\nchecking for libpq library in directories specified by LIBPQ_INC (/usr/include/postgresql) and LIBPQ_LIB (/usr/lib/x86_64-linux-gnu) ... not found\n ./configure: error: ngx_postgres addon was unable to find the libpq library.\nIt's failing to find it in the same place. What am I missing here? Do I need a different version of libpq to use OpenResty's OpenSSL/PCRE?. ",
    "iseckkeller": "... as a follow up.  it was working just fine for me yesterday.. Seems that the origin server is returning from cache which is not considering URL query parameters as part of the cache key.\n< Cache-Control: max-age=180\n< Cache-Status: HIT\nThose are the response headers i see when it fails and the Location header is always the previous package requested.  I tried to add Cache-Control: no cache in request but the server seems to ignore it.. Thank you.  I'm back to working now.  Appreciate the quick turn around.. ",
    "eyezak": "also seeing this issue this morning as of less than 2 hours ago. ",
    "tzumby": "thanks @agentzh, I'll keep an eye on new releases.. ",
    "Palethorn": "Closing down as the issue is solved. We didn't account for regex greediness in nginx for our case.. ",
    "hu-haibo": "Thanks\uff01. ",
    "NeilW": "On a base installation of Ubuntu Zesty run the following\n$ sudo apt update\n$ sudo apt install nginx   \n$ wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\n$ sudo add-apt-repository -y \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\"\n$ sudo apt update\n$ sudo apt install openresty\nthe errors are\n```\nCreated symlink /etc/systemd/system/multi-user.target.wants/openresty.service \u2192 /lib/systemd/system/openresty.service.\nJob for openresty.service failed because the control process exited with error code.\nSee \"systemctl status openresty.service\" and \"journalctl -xe\" for details.\ninvoke-rc.d: initscript openresty, action \"start\" failed.\n\u25cf openresty.service - full-fledged web platform\n   Loaded: loaded (/lib/systemd/system/openresty.service; enabled; vendor preset: enabled)\n   Active: failed (Result: exit-code) since Tue 2017-07-18 06:57:12 UTC; 8ms ago\n  Process: 15672 ExecStart=/usr/local/openresty/nginx/sbin/nginx -g daemon on; master_process on; (code=exited, status=1/FAILURE)\n  Process: 15664 ExecStartPre=/usr/local/openresty/nginx/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS)\n      CPU: 12ms\nJul 18 06:57:09 srv-ckc2f nginx[15672]: nginx: [emerg] bind() to 0.0.0.0:80 \u2026se)\nJul 18 06:57:10 srv-ckc2f nginx[15672]: nginx: [emerg] bind() to 0.0.0.0:80 \u2026se)\nJul 18 06:57:10 srv-ckc2f nginx[15672]: nginx: [emerg] bind() to 0.0.0.0:80 \u2026se)\nJul 18 06:57:11 srv-ckc2f nginx[15672]: nginx: [emerg] bind() to 0.0.0.0:80 \u2026se)\nJul 18 06:57:11 srv-ckc2f nginx[15672]: nginx: [emerg] bind() to 0.0.0.0:80 \u2026se)\nJul 18 06:57:12 srv-ckc2f nginx[15672]: nginx: [emerg] still could not bind()\nJul 18 06:57:12 srv-ckc2f systemd[1]: openresty.service: Control process ex\u2026us=1\nJul 18 06:57:12 srv-ckc2f systemd[1]: Failed to start full-fledged web platform.\nJul 18 06:57:12 srv-ckc2f systemd[1]: openresty.service: Unit entered faile\u2026ate.\nJul 18 06:57:12 srv-ckc2f systemd[1]: openresty.service: Failed with result\u2026de'.\nHint: Some lines were ellipsized, use -l to show in full.\ndpkg: error processing package openresty (--configure):\n subprocess installed post-installation script returned error exit status 1\ndpkg: dependency problems prevent configuration of openresty-resty:\n openresty-resty depends on openresty (>= 1.11.2.4); however:\n  Package openresty is not configured yet.\ndpkg: error processing package openresty-resty (--configure):\n dependency problems - leaving unconfigured\ndpkg: dependency problems prevent configuration of openresty-opm:\n openresty-opm depends on openresty (>= 1.11.2.4); however:\n  Package openresty is not configured yet.\n openresty-opm depends on openresty-resty (>= 1.11.2.4); however:\n  Package openresty-resty is not configured yet.\ndpkg: error processing package openresty-opm (--configure):\n dependency problems - leaving unconfigured\nProcessing triggers for libc-bin (2.24-9ubuntu2.2) ...\nNo apport report written because the error message indicates its a followup error from a previous failure.\n                          No apport report written because the error message indicates its a followup error from a previous failure.\n                                                    Processing triggers for systemd (232-21ubuntu5) ...\nProcessing triggers for ureadahead (0.100.0-19) ...\nErrors were encountered while processing:\n openresty\n openresty-resty\n openresty-opm\nE: Sub-process /usr/bin/dpkg returned an error code (1)\n```\n. Yes I know that. But if you had Replaces set correctly in the control file, then the uninstall of the nginx package would happen first and do that for everybody automatically\nhttps://www.debian.org/doc/debian-policy/ch-relationships.html#s-replaces\nAnd you would have to do that if you wanted the package to be accepted into Debian or Ubuntu proper.\nBut if you don't want to fix it that's your choice of course. You may not see it as conflicting - like apache and nginx.. ",
    "spacewander": "I could not reproduce your problem with configure below:\n```nginx\nevents {\n    worker_connections 4096;\n}\nhttp {\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n    limit_conn_status 503;\nserver {\n    limit_conn addr 1;\n    listen 8888;\n    location / {\n        content_by_lua_block {\n            ngx.sleep(100)\n        }\n    }\n}\n\n}\n```\nMy OpenResty version is openresty/1.11.2.2.\n@QianChenglong \nCould you provide a self-contained and minimal example to reproduce the problem? And with your OpenResty version.\n@agentzh \nMaybe we should setup an issue template for some main projects of OpenResty?\nLike this one: https://github.com/mholt/caddy/blob/master/.github/ISSUE_TEMPLATE.md. @RYAN4237 \nYour example is still not self-contained and difficult to reproduce the problem.\nCould you rebuild OpenResty with --with-debug option, then set error_log log/wallaceqian.tencentyun.com-error_log; to error_log log/wallaceqian.tencentyun.com-error_log debug;, so that we could see what was happened inside?. Something is still in the mist.\n1. Could you paste the output part of your error.log? It would be like\nthese:\n2017/08/02 14:22:06 [error] 58444#0: *851 limiting connections by zone\n\"addr\", client: 127.0.0.1, server: , request: \"GET / HTTP/1.1\", host:\n\"localhost:8888\"\n2017/08/02 14:22:06 [debug] 58444#0: *851 http finalize request: 503, \"/?\"\na:1, c:1\n2017/08/02 14:22:06 [debug] 58444#0: *851 http special response: 503, \"/?\"\n2017/08/02 14:22:06 [debug] 58444#0: *851 http set discard body\n2017/08/02 14:22:06 [debug] 58444#0: *851 HTTP/1.1 503 Service Temporarily\nUnavailable\nServer: openresty/1.11.2.2\nDate: Wed, 02 Aug 2017 06:22:06 GMT\nContent-Type: text/html\nContent-Length: 219\nConnection: keep-alive\nCurrently we just saw a piece of the jigsaw.\n\nWhat is menshen? Surely it is neither part of standard Nginx nor part of\nOpenResty. Is this Nginx module written by yourself?\n\n2017-08-02 11:22 GMT+08:00 RYAN4237 notifications@github.com:\n\n@spacewander https://github.com/spacewander\nTurn on debug\n503 access log\n`- - - [02/Aug/2017:11:15:17 +0800] \"GET /index.php HTTP/1.0\" 200 200\n96330 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n-\n      -\n         - [02/Aug/2017:11:15:17 +0800] \"GET /index.php HTTP/1.0\" 200 200\n         96331 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n      -\n      -\n         - [02/Aug/2017:11:15:18 +0800] \"GET /index.php HTTP/1.0\" 503 - 0\n         \"-\" \"ApacheBench/2.3\" 1.001 - -`\n503 error log\n`2017/08/02 11:15:17 [debug] 6031#0: 149 status: unkown. uri: /index.php\nargs: r: 00007F0917A9ADD0 r->main: 00007F0917A9ADD0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 149 __mydebug_menshen.\nngx_http_menshen_handler is called r: 00007F0917A9ADD0 nginx_version:\n1011002\n2017/08/02 11:15:17 [debug] 6031#0: *149 status: first. uri: /index.php.\nargs: r: 00007F0917A9ADD0 r->main: 00007F0917A9ADD0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0:\n149 status: send. uri: /index.php. args: r: 00007F0917A9ADD0 r->main:\n00007F0917A9ADD0 r->count: 1 2017/08/02 11:15:17 [debug] 6031#0: 149\n__mydebug_menshen. len: 100 header: GET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com http://wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3 Accept:/\n2017/08/02 11:15:17 [debug] 6031#0: 149 request ip:[127.0.0.1]\n2017/08/02 11:15:17 [debug] 6031#0: 149 pkg seq:[17261067]\n2017/08/02 11:15:17 [debug] 6031#0: 149 iBufLen: 185 len_b: 185\n2017/08/02 11:15:17 [debug] 6031#0: 149 menshen_next\n2017/08/02 11:15:17 [debug] 6031#0: 151 status: unkown. uri: /index.php\nargs: r: 00007F0917AE9BB0 r->main: 00007F0917AE9BB0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 151 __mydebug_menshen.\nngx_http_menshen_handler is called r: 00007F0917AE9BB0 nginx_version:\n1011002\n2017/08/02 11:15:17 [debug] 6031#0: *151 status: first. uri: /index.php.\nargs: r: 00007F0917AE9BB0 r->main: 00007F0917AE9BB0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0:\n151 status: send. uri: /index.php. args: r: 00007F0917AE9BB0 r->main:\n00007F0917AE9BB0 r->count: 1 2017/08/02 11:15:17 [debug] 6031#0: 151\n__mydebug_menshen. len: 100 header: GET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com http://wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3 Accept:/\n2017/08/02 11:15:17 [debug] 6031#0: 151 request ip:[127.0.0.1]\n2017/08/02 11:15:17 [debug] 6031#0: 151 pkg seq:[17261068]\n2017/08/02 11:15:17 [debug] 6031#0: 151 iBufLen: 185 len_b: 185\n2017/08/02 11:15:17 [debug] 6031#0: 151 menshen_next\n2017/08/02 11:15:17 [error] 6031#0: 151 limiting connections by zone\n\"addr\", client: 127.0.0.1, server: wallaceqian.tencentyun.com, request:\n\"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:15:17 [debug] 6031#0: 149 __mydebug. menshen cleanup r:\n00007F0917A9ADD0\n2017/08/02 11:15:17 [warn] 6031#0: 149 dcapi:\nDataCollector::CLogger::write_baselog() sended! while logging request,\nclient: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET\n/index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"\nwallaceqian.tencentyun.com\"\n2017/08/02 11:15:17 [debug] 6031#0: 152 status: unkown. uri: /index.php\nargs: r: 00007F0917AE8BA0 r->main: 00007F0917AE8BA0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 152 __mydebug_menshen.\nngx_http_menshen_handler is called r: 00007F0917AE8BA0 nginx_version:\n1011002\n2017/08/02 11:15:17 [debug] 6031#0: 152 status: first. uri: /index.php.\nargs: r: 00007F0917AE8BA0 r->main: 00007F0917AE8BA0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0:\n152 status: send. uri: /index.php. args: r: 00007F0917AE8BA0 r->main:\n00007F0917AE8BA0 r->count: 1 2017/08/02 11:15:17 [debug] 6031#0: 152\n__mydebug_menshen. len: 100 header: GET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com http://wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3 Accept:/\n2017/08/02 11:15:17 [debug] 6031#0: 152 request ip:[127.0.0.1]\n2017/08/02 11:15:17 [debug] 6031#0: 152 pkg seq:[17261069]\n2017/08/02 11:15:17 [debug] 6031#0: 152 iBufLen: 185 len_b: 185\n2017/08/02 11:15:17 [debug] 6031#0: 152 menshen_next\n2017/08/02 11:15:17 [debug] 6031#0: 152 __mydebug. menshen cleanup r:\n00007F0917AE8BA0\n2017/08/02 11:15:17 [warn] 6031#0: 152 dcapi:\nDataCollector::CLogger::write_baselog() sended! while logging request,\nclient: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET\n/index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"\nwallaceqian.tencentyun.com\"\n2017/08/02 11:15:17 [warn] 6031#0: 152 dcapi:\nDataCollector::CLogger::write_baselog() failed! while logging request,\nclient: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET\n/index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"\nwallaceqian.tencentyun.com\"\n2017/08/02 11:15:18 [debug] 6031#0: 151 __mydebug. menshen cleanup r:\n00007F0917AE9BB0\n2017/08/02 11:15:18 [warn] 6031#0: *151 dcapi:\nDataCollector::CLogger::write_baselog() sended! while logging request,\nclient: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET\n/index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"`\n404 access log\n`- - - [02/Aug/2017:11:17:36 +0800] \"GET /index.php HTTP/1.0\" 200 200\n96330 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n-\n      -\n         - [02/Aug/2017:11:17:36 +0800] \"GET /index.php HTTP/1.0\" 404 -\n         162 \"-\" \"ApacheBench/2.3\" 0.000 - -\n      -\n      -\n         - [02/Aug/2017:11:17:36 +0800] \"GET /index.php HTTP/1.0\" 200 200\n         96331 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003`\n404 Error Log\n`2017/08/02 11:17:36 [debug] 8885#0: 1 status: unkown. uri: /index.php\nargs: r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 1 __mydebug_menshen.\nngx_http_menshen_handler is called r: 00007F49DE247DD0 nginx_version:\n1011002\n2017/08/02 11:17:36 [debug] 8885#0: *1 status: first. uri: /index.php.\nargs: r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0:\n1 status: send. uri: /index.php. args: r: 00007F49DE247DD0 r->main:\n00007F49DE247DD0 r->count: 1 2017/08/02 11:17:36 [debug] 8885#0: 1\n__mydebug_menshen. len: 100 header: GET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com http://wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3 Accept:/\n2017/08/02 11:17:36 [debug] 8885#0: 1 request ip:[127.0.0.1]\n2017/08/02 11:17:36 [debug] 8885#0: 1 pkg seq:[17261105]\n2017/08/02 11:17:36 [debug] 8885#0: 1 iBufLen: 185 len_b: 185\n2017/08/02 11:17:36 [debug] 8885#0: 1 menshen_next\n2017/08/02 11:17:36 [debug] 8885#0: 1 __mydebug. menshen cleanup r:\n00007F49DE247DD0\n2017/08/02 11:17:36 [warn] 8885#0: 1 dcapi:\nDataCollector::CLogger::init() succed! while logging request, client:\n127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php\nHTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"\nwallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [warn] 8885#0: 1 dcapi: DataCollector::CLogger::write_baselog()\nsended! while logging request, client: 127.0.0.1, server:\nwallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream:\n\"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [debug] 8885#0: 3 status: unkown. uri: /index.php\nargs: r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 3 __mydebug_menshen.\nngx_http_menshen_handler is called r: 00007F49DE247DD0 nginx_version:\n1011002\n2017/08/02 11:17:36 [debug] 8885#0: 3 status: first. uri: /index.php.\nargs: r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0:\n3 status: send. uri: /index.php. args: r: 00007F49DE247DD0 r->main:\n00007F49DE247DD0 r->count: 1 2017/08/02 11:17:36 [debug] 8885#0: 3\n__mydebug_menshen. len: 100 header: GET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com http://wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3 Accept:/\n2017/08/02 11:17:36 [debug] 8885#0: 3 request ip:[127.0.0.1]\n2017/08/02 11:17:36 [debug] 8885#0: 3 pkg seq:[17261106]\n2017/08/02 11:17:36 [debug] 8885#0: 3 iBufLen: 185 len_b: 185\n2017/08/02 11:17:36 [debug] 8885#0: 3 menshen_next\n2017/08/02 11:17:36 [debug] 8885#0: 4 status: unkown. uri: /index.php\nargs: r: 00007F49DE2A9BF0 r->main: 00007F49DE2A9BF0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 4 __mydebug_menshen.\nngx_http_menshen_handler is called r: 00007F49DE2A9BF0 nginx_version:\n1011002\n2017/08/02 11:17:36 [debug] 8885#0: *4 status: first. uri: /index.php.\nargs: r: 00007F49DE2A9BF0 r->main: 00007F49DE2A9BF0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0:\n4 status: send. uri: /index.php. args: r: 00007F49DE2A9BF0 r->main:\n00007F49DE2A9BF0 r->count: 1 2017/08/02 11:17:36 [debug] 8885#0: 4\n__mydebug_menshen. len: 100 header: GET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com http://wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3 Accept:/\n2017/08/02 11:17:36 [debug] 8885#0: 4 request ip:[127.0.0.1]\n2017/08/02 11:17:36 [debug] 8885#0: 4 pkg seq:[17261107]\n2017/08/02 11:17:36 [debug] 8885#0: 4 iBufLen: 185 len_b: 185\n2017/08/02 11:17:36 [debug] 8885#0: 4 menshen_next\n2017/08/02 11:17:36 [error] 8885#0: 4 limiting connections by zone\n\"addr\", client: 127.0.0.1, server: wallaceqian.tencentyun.com, request:\n\"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [debug] 8885#0: 4 __mydebug. menshen cleanup r:\n00007F49DE2A9BF0\n2017/08/02 11:17:36 [warn] 8885#0: 4 dcapi: DataCollector::CLogger::write_baselog()\nsended! while logging request, client: 127.0.0.1, server:\nwallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"\nwallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [warn] 8885#0: 4 dcapi: DataCollector::CLogger::write_baselog()\nfailed! while logging request, client: 127.0.0.1, server:\nwallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"\nwallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [debug] 8885#0: 3 __mydebug. menshen cleanup r:\n00007F49DE247DD0\n2017/08/02 11:17:36 [warn] 8885#0: 3 dcapi: DataCollector::CLogger::write_baselog()\nsended! while logging request, client: 127.0.0.1, server:\nwallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream:\n\"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"`\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/openresty/openresty/issues/278#issuecomment-319556841,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AD-AbFfGfDBtp8S3c3uGOYw7Ym9kicl1ks5sT-tagaJpZM4OgqbQ\n.\n. @RYAN4237 \nEureka! The 404 is caused by the missing of /data/home/wallaceqian/project/wallaceqian.tencentyun.com/50x.html.\n2017/08/02 16:34:46 [debug] 29332#0: *12 http filename: \"/data/home/wallaceqian/project/wallaceqian.tencentyun.com/50x.html\"\n2017/08/02 16:34:46 [debug] 29332#0: *12 add cleanup: 00007FF895450000\n2017/08/02 16:34:46 [debug] 29332#0: *12 http finalize request: 404, \"/50x.html?\" a:1, c:2\n2017/08/02 16:34:46 [debug] 29332#0: *12 http special response: 404, \"/50x.html?\"\n2017/08/02 16:34:46 [debug] 29332#0: *12 http set discard body\n2017/08/02 16:34:46 [debug] 29332#0: *12 lua capture header filter, uri \"/50x.html\". Maybe your $nginx is incorrect.\n\nThe SysVinit script you posted is quite different from the one from the official package.\nrpm: https://github.com/openresty/openresty-packaging/blob/master/rpm/SOURCES/openresty.init\ndeb: https://github.com/openresty/openresty-packaging/blob/master/deb/openresty/debian/openresty.init\nIf you want to write your own one, please refer to them.. @stspqxl \nThe /etc/init.d/openresty you posted is different from the one shipped by the yum package.\nHave you modified it?\nI suggest you to ask the question in the OpenResty Chinese mailing list:\nhttps://groups.google.com/group/openresty\nAnd you should use some measurable details instead of \"\u5361\u5728\u8fd9\u91cc\".. @soverysour \nCould you run gcc -march=native -dM -E - < /dev/null | grep SSE and cat /proc/cpuinfo in your environment?. error_page has its limit. It will convert the HTTP method to GET, and doesn't forward the query string.\nYou can use error_page 500 502 503 504 /bots-redirect$is_args$args; to work around in some cases.. @damon-93 \nThe location directive doesn't support variable. But you could work around it with rewrite directive. Just like this:\nnginx\nserver {\n        listen 8080;\n        set_by_lua_block $proxy_root {\n            return \"/test\";\n        }\n        location = /proxy_root {\n            rewrite ^.*$ $proxy_root;\n        }\n        location = /test {\n            return 200 \"test\";\n        }\n    }. proxy_cache_background_update is added since Nginx 1.11.10.\nhttp://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_background_update\nBut OpenResty 1.11.2.5 is based on Nginx 1.11.2.. @yaoboxu \nThe ngx_lua module you used is too old. You should upgrade to a newer one.\nhttps://github.com/openresty/lua-nginx-module/releases. @smarttang \n\nuser one request but openresty double request.\n\nHow do you send the request? Have you captured the packets to see how many requests sent to OpenResty?. @smarttang \nCould you enable the debug log, and send the result to the OpenResty (Chinese) mailing list: https://groups.google.com/group/openresty?\nIt will be great if you also show us the debug log output in normal case.. @Himanshu4 \nCould you enable the debug log to show us the internal behaviors with http proxy and https proxy?\nSee http://nginx.org/en/docs/debugging_log.html for how to enable the debug log. . @kristen1980 \nThe error message looks like that you are compiling with OpenSSL 1.1.0, but you report that you are using OpenSSL 1.0.2g...\nAnyway, currently the only way to work around it is compiling with a lower OpenSSL version.. @davidsiracusa \nWhy not try the ngx.shared.DICT.expire?\nhttps://github.com/openresty/lua-nginx-module#ngxshareddictexpire. Note that you need to upgrade OpenResty to the latest release before trying this API. It was added only a few months ago.. @craveica \nAt the first glance, it looks like SSL->ex_data is uninitialized when it was accessed.\nSince we don't have origin-pull-ca.pem, it is impossible to reproduce the issue in our side...\nCould you post a minimal case here?\nBTW, have you tested this issue with vanilla Nginx? . @craveica \nThank you for your minimal case. I could reproduce the bug in OpenResty and vanilla Nginx.\nThe bug is related with the way how Nginx handles the configuration.\nAfter virtual server name lookup, Nginx changes your request' server scope configuration\nfrom\nserver {\n        listen 443 default_server ssl;\n        server_name _;\n        ssl_certificate      cert.pem;\n        ssl_certificate_key  cert.key;\n    }\nto\nserver {\n        listen 443;\n        server_name example.com;\n    }\nThe latter one doesn't have appropriate SSL configuration, so its SSL ctx is uninitialized. This causes the Segfault directly.\nA quick fix you could do is to add SSL configuration for example.com server block, like this:\nserver {\n        listen 443;\n        server_name example.com\n        ssl_certificate      cert.pem;\n        ssl_certificate_key  cert.key;\n        # Or include ../my_ssl.conf\n    }\nI suggest you to submit the bug report to https://trac.nginx.org/nginx, they could fix it appropriately.. We could not answer your question because we don't know what openssl.cms.xxx means.\nThey are not the part of OpenResty.\nHave you checked the error returned from these openssl.cms.xxx methods? Maybe the error message could tell you something useful.. @prime89 \n\nWe could not answer your question because we don't know what openssl.cms.xxx means.\nThey are not the part of OpenResty.\n\nYour further explanation doesn't tell us what openssl.cms.xxx is.\nAnd now I am more confused with the require \"auth.main\". What is the auth.main?\nIf you consider this is a bug in OpenResty, please submit a minimal reproduce case, so that we are able to reproduce it.\nBTW, have you ever checked the error message from the blahblah module? It is neccessary to check the error message first if something doesn't work as expected.. @giacomini \nWould you like to submit a patch to us?\nRemember to update simpl/ngx_devel_kit to simplresty/ngx_devel_kit in the download link as well.\nThanks!. @agentzh \nFixed in the latest commit.. @agentzh\nFixed.. @dndx \nThank you for your remind. I just add the same process to core/ngx_resolver.c@ngx_tcp_connect\nThis patch's purpose is avoid holding connection until child process terminated, so just handle TCP socket is enough.. @ugolas \nI think you need to add the non_idempotent option to proxy_next_upstream.\nhttp://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream. @ugolas \nSorry for misunderstanding your word.\nAFAIK, there is not way to achieve this because Nginx's proxy mechanism doesn't allow it.. @ugolas \nIt seems that Nginx fix this \"feature\" in a recent commit: https://github.com/nginx/nginx/commit/d90a75b7cdc70ddb2aa1880dc09301c5f1a279ae\nBuild with the latest Nginx, you could get the original upstream error response for POST requests while still using proxy_next_upstream for 5xx.. @catigger \nCould you provide a mininal case so that we could reproduce it?\nI could not reproduce it with this simple script:\n```\n!/usr/bin/env resty\nlocal json = require(\"cjson\")\nlocal encoded = ngx.encode_base64(\"hell\")\nngx.say(encoded)\nngx.say(json.encode(json.decode('{\"a\":\"'..encoded..'\"}')))\n```\nBTW, cjson and dkjson have their own repo and own issue tracker.\n. @agentzh @Bypass007 \nMaybe we could return nil, \"too many arguments\" when no args number is given and there is more arguments than the limitation? This change forces users to realize the overflow.. > This design breaks the current API behavior \nIt is why I said this change forces users to realize the overflow. Just break and force users to realize the problem and fix it. It is better than fixing it after being hacked.\nUnless users read the documentation carefully, they will not check the second returned value, since there is only one returned value from ngx.req.get_uri_args for years. Not mention that the existence code.. @theroyalstudent \nMaybe --without-http_encrypted_session_module should disable the encrypted-session-nginx-module?\nHowever, it doesn't fix your problem, because the lua-nginx-module in the latest OpenResty release doesn't support OpenSSL 1.1.0 too. The OpenSSL 1.1.0 compatibility is already fixed in the master branch, so you could use the master branch of OpenResty if you want to build it with OpenSSL 1.1.0.. @chutian52 \nSee https://trac.nginx.org/nginx/ticket/1469. Note that you need to patch the Nginx yourself if you want to build it on fedora 28. . Duplicated with #366.\nIt is a known issue of Nginx: https://trac.nginx.org/nginx/ticket/1469\nIMHO, we could wait for the upstream to fix it, since we have released the last version of OpenResty based on Nginx 1.13.. @pavelnemirovsky \nWhat is the result on the latest lua-resty-string?\nThe latest lua-resty-string should not have the EVP_CIPHER_CTX_init symbol. They were removed in https://github.com/openresty/lua-resty-string/commit/269b8d11daff55bd9465c450c9d5959aaed766e9.. This is the sister pr of https://github.com/openresty/lua-resty-core/pull/215. @gradoncheng \nThe order of the hash key is unreliable. Maybe you could restore the key-value into an array table and sort it?. Closed as off-topic.. Well, there is not a real function called ngx_cloexec, so using it may be confusing. xxx_n macro will be expanded to the actual syscall, and the actual syscall of ngx_cloexec under win32 is nothing.. @agentzh \nIf NGX_HAVE_FD_CLOEXEC is not supported, this patch actually does nothing.\nMaybe we should rename HAVE_SOCKET_CLOEXEC_PATCH to ENABLE_SOCKET_CLOEXEC to make it clear?. Do you mean i < n && total < MAXNS?. Note that there is not limitation for the resolv.conf file size. You could even writte poem in the comment! It would be better to put some comment here to mention that 2048 could cover most of cases.. Are those lines duplicate? file.name has been assigned above.. I think address could be directly assigned in the sw_nameserver status?. Better to add (u_char *) type cast to eliminate this warning:\n```\nsrc/core/ngx_resolver.c:398:51: warning: passing 'char [17]' to parameter of type 'u_char ' (aka 'unsigned char ') converts between pointers to integer types with different sign\n      [-Wpointer-sign]\n                                                  NGX_RESOLVER_FILE_NAME)\n                                                  ^~~~~~~~~~~~~~~~~~~~~~\nsrc/core/ngx_resolver.c:20:37: note: expanded from macro 'NGX_RESOLVER_FILE_NAME'\ndefine NGX_RESOLVER_FILE_NAME      \"/etc/resolv.conf\"\n                                ^~~~~~~~~~~~~~~~~~\n\nsrc/core/ngx_resolver.c:139:74: note: passing argument to parameter 'path' here\nngx_resolver_read_resolv_conf(ngx_conf_t cf, ngx_resolver_t r, u_char *path\n. Better to initialize `address` here to eliminate this warning when compiling with clang-5.0:\nsrc/core/ngx_resolver.c:240:36: warning: variable 'address' may be uninitialized when used here [-Wconditional-uninitialized]\n                u.url.data = buf + address;\n                                   ^~~~~~~\nsrc/core/ngx_resolver.c:153:45: note: initialize the variable 'address' to silence this warning\n    ngx_uint_t                       address, j, total = 0;\n                                            ^\n                                             = 0\n```. ",
    "RYAN4237": "Hi spacewander and anentzh, i'm the college of QianChenglong.\nThanks for all of your help,we do solve this problem.\nBut we still have some confusion about limit configuration.\n404 configuration:\n`log_format test '$http_x_forwarded_for - $remote_user [$time_local]  '\n    '\"$request\" $status $upstream_status  $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" '\n    '$request_time $upstream_addr $upstream_response_time';\nlimit_conn_zone $binary_remote_addr zone=addrr:10m;\nlimit_conn_status 503;\nserver{\n    limit_conn addr 1;\n    listen       80;\n    server_name  wallaceqian.tencentyun.com;\n    root /data/home/wallaceqian/project/wallaceqian.tencentyun.com;\n    index index.html index.php;\n    error_log log/wallaceqian.tencentyun.com-error_log;\n    access_log log/wallaceqian.tencentyun.com-access_log test;\nlocation ~ \\.php {\n    fastcgi_pass 127.0.0.1:9000;\n    include fastcgi_params;\n\n   fastcgi_read_timeout 10d;\n\n    fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n    fastcgi_param PATH_INFO       $fastcgi_path_info;\n    fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n}\n\n}`\nSuccess configuration:\n`log_format test '$http_x_forwarded_for - $remote_user [$time_local]  '\n    '\"$request\" $status $upstream_status  $body_bytes_sent '\n    '\"$http_referer\" \"$http_user_agent\" '\n    '$request_time $upstream_addr $upstream_response_time';\nlimit_conn_zone $binary_remote_addr zone=addrr:10m;\nlimit_conn_status 503;\nserver{\n    limit_conn addr 1;\n    listen       80;\n    server_name  wallaceqian.tencentyun.com;\n    root /data/home/wallaceqian/project/wallaceqian.tencentyun.com;\n    index index.html index.php;\n    error_log log/wallaceqian.tencentyun.com-error_log;\n    access_log log/wallaceqian.tencentyun.com-access_log test;\nlocation ~ \\.php {\n    fastcgi_pass 127.0.0.1:9000;\n    include fastcgi_params;\n\n   fastcgi_read_timeout 10d;\n\n    fastcgi_split_path_info       ^(.+\\.php)(/.+)$;\n    fastcgi_param PATH_INFO       $fastcgi_path_info;\n    fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n}\nlocation / {\n    content_by_lua_block {\n         ngx.sleep(1)\n    }\n}\n\n}`\nwe just wondering why \"location /\" is necessary for this coonfiguration. since we have \"root and index\" in the head of configuration.\nAnd if there is no limit configuration, all is working well without \"location /\".\nYour quickly response is highly appreciated.  . @spacewander @agentzh . @spacewander \nTurn on debug \n503 access log\n- - - [02/Aug/2017:11:15:17 +0800]  \"GET /index.php HTTP/1.0\" 200 200  96330 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n- - - [02/Aug/2017:11:15:17 +0800]  \"GET /index.php HTTP/1.0\" 200 200  96331 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n- - - [02/Aug/2017:11:15:18 +0800]  \"GET /index.php HTTP/1.0\" 503 -  0 \"-\" \"ApacheBench/2.3\" 1.001 - -\n503 error log\n`2017/08/02 11:15:17 [debug] 6031#0: 149 status: unkown. uri: /index.php args:  r: 00007F0917A9ADD0 r->main: 00007F0917A9ADD0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 149 __mydebug_menshen. ngx_http_menshen_handler is called r: 00007F0917A9ADD0 nginx_version: 1011002\n2017/08/02 11:15:17 [debug] 6031#0: 149 status: first. uri: /index.php. args:  r: 00007F0917A9ADD0 r->main: 00007F0917A9ADD0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 149 status: send. uri: /index.php. args:  r: 00007F0917A9ADD0 r->main: 00007F0917A9ADD0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 149 __mydebug_menshen. len: 100 header: \nGET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3\nAccept:/*\n2017/08/02 11:15:17 [debug] 6031#0: 149 request ip:[127.0.0.1]\n2017/08/02 11:15:17 [debug] 6031#0: 149 pkg seq:[17261067]\n2017/08/02 11:15:17 [debug] 6031#0: 149 iBufLen: 185 len_b: 185\n2017/08/02 11:15:17 [debug] 6031#0: 149 menshen_next\n2017/08/02 11:15:17 [debug] 6031#0: 151 status: unkown. uri: /index.php args:  r: 00007F0917AE9BB0 r->main: 00007F0917AE9BB0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 151 __mydebug_menshen. ngx_http_menshen_handler is called r: 00007F0917AE9BB0 nginx_version: 1011002\n2017/08/02 11:15:17 [debug] 6031#0: 151 status: first. uri: /index.php. args:  r: 00007F0917AE9BB0 r->main: 00007F0917AE9BB0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 151 status: send. uri: /index.php. args:  r: 00007F0917AE9BB0 r->main: 00007F0917AE9BB0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 151 __mydebug_menshen. len: 100 header: \nGET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3\nAccept:/*\n2017/08/02 11:15:17 [debug] 6031#0: 151 request ip:[127.0.0.1]\n2017/08/02 11:15:17 [debug] 6031#0: 151 pkg seq:[17261068]\n2017/08/02 11:15:17 [debug] 6031#0: 151 iBufLen: 185 len_b: 185\n2017/08/02 11:15:17 [debug] 6031#0: 151 menshen_next\n2017/08/02 11:15:17 [error] 6031#0: 151 limiting connections by zone \"addr\", client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:15:17 [debug] 6031#0: 149 __mydebug. menshen cleanup r: 00007F0917A9ADD0\n2017/08/02 11:15:17 [warn] 6031#0: 149 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:15:17 [debug] 6031#0: 152 status: unkown. uri: /index.php args:  r: 00007F0917AE8BA0 r->main: 00007F0917AE8BA0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 152 __mydebug_menshen. ngx_http_menshen_handler is called r: 00007F0917AE8BA0 nginx_version: 1011002\n2017/08/02 11:15:17 [debug] 6031#0: 152 status: first. uri: /index.php. args:  r: 00007F0917AE8BA0 r->main: 00007F0917AE8BA0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 152 status: send. uri: /index.php. args:  r: 00007F0917AE8BA0 r->main: 00007F0917AE8BA0 r->count: 1\n2017/08/02 11:15:17 [debug] 6031#0: 152 __mydebug_menshen. len: 100 header: \nGET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3\nAccept:/\n2017/08/02 11:15:17 [debug] 6031#0: 152 request ip:[127.0.0.1]\n2017/08/02 11:15:17 [debug] 6031#0: 152 pkg seq:[17261069]\n2017/08/02 11:15:17 [debug] 6031#0: 152 iBufLen: 185 len_b: 185\n2017/08/02 11:15:17 [debug] 6031#0: 152 menshen_next\n2017/08/02 11:15:17 [debug] 6031#0: 152 __mydebug. menshen cleanup r: 00007F0917AE8BA0\n2017/08/02 11:15:17 [warn] 6031#0: 152 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:15:17 [warn] 6031#0: 152 dcapi: DataCollector::CLogger::write_baselog() failed! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:15:18 [debug] 6031#0: 151 __mydebug. menshen cleanup r: 00007F0917AE9BB0\n2017/08/02 11:15:18 [warn] 6031#0: *151 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"`\n404 access log\n- - - [02/Aug/2017:11:17:36 +0800]  \"GET /index.php HTTP/1.0\" 200 200  96330 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n- - - [02/Aug/2017:11:17:36 +0800]  \"GET /index.php HTTP/1.0\" 404 -  162 \"-\" \"ApacheBench/2.3\" 0.000 - -\n- - - [02/Aug/2017:11:17:36 +0800]  \"GET /index.php HTTP/1.0\" 200 200  96331 \"-\" \"ApacheBench/2.3\" 0.003 127.0.0.1:9000 0.003\n404 Error Log\n`2017/08/02 11:17:36 [debug] 8885#0: 1 status: unkown. uri: /index.php args:  r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 1 __mydebug_menshen. ngx_http_menshen_handler is called r: 00007F49DE247DD0 nginx_version: 1011002\n2017/08/02 11:17:36 [debug] 8885#0: 1 status: first. uri: /index.php. args:  r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 1 status: send. uri: /index.php. args:  r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 1 __mydebug_menshen. len: 100 header: \nGET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3\nAccept:/*\n2017/08/02 11:17:36 [debug] 8885#0: 1 request ip:[127.0.0.1]\n2017/08/02 11:17:36 [debug] 8885#0: 1 pkg seq:[17261105]\n2017/08/02 11:17:36 [debug] 8885#0: 1 iBufLen: 185 len_b: 185\n2017/08/02 11:17:36 [debug] 8885#0: 1 menshen_next\n2017/08/02 11:17:36 [debug] 8885#0: 1 __mydebug. menshen cleanup r: 00007F49DE247DD0\n2017/08/02 11:17:36 [warn] 8885#0: 1 dcapi: DataCollector::CLogger::init() succed! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [warn] 8885#0: 1 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [debug] 8885#0: 3 status: unkown. uri: /index.php args:  r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 3 __mydebug_menshen. ngx_http_menshen_handler is called r: 00007F49DE247DD0 nginx_version: 1011002\n2017/08/02 11:17:36 [debug] 8885#0: 3 status: first. uri: /index.php. args:  r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 3 status: send. uri: /index.php. args:  r: 00007F49DE247DD0 r->main: 00007F49DE247DD0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 3 __mydebug_menshen. len: 100 header: \nGET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3\nAccept:/\n2017/08/02 11:17:36 [debug] 8885#0: 3 request ip:[127.0.0.1]\n2017/08/02 11:17:36 [debug] 8885#0: 3 pkg seq:[17261106]\n2017/08/02 11:17:36 [debug] 8885#0: 3 iBufLen: 185 len_b: 185\n2017/08/02 11:17:36 [debug] 8885#0: 3 menshen_next\n2017/08/02 11:17:36 [debug] 8885#0: 4 status: unkown. uri: /index.php args:  r: 00007F49DE2A9BF0 r->main: 00007F49DE2A9BF0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 4 __mydebug_menshen. ngx_http_menshen_handler is called r: 00007F49DE2A9BF0 nginx_version: 1011002\n2017/08/02 11:17:36 [debug] 8885#0: 4 status: first. uri: /index.php. args:  r: 00007F49DE2A9BF0 r->main: 00007F49DE2A9BF0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 4 status: send. uri: /index.php. args:  r: 00007F49DE2A9BF0 r->main: 00007F49DE2A9BF0 r->count: 1\n2017/08/02 11:17:36 [debug] 8885#0: 4 __mydebug_menshen. len: 100 header: \nGET /index.php HTTP/1.0\nHost:wallaceqian.tencentyun.com\nUser-Agent:ApacheBench/2.3\nAccept:/*\n2017/08/02 11:17:36 [debug] 8885#0: 4 request ip:[127.0.0.1]\n2017/08/02 11:17:36 [debug] 8885#0: 4 pkg seq:[17261107]\n2017/08/02 11:17:36 [debug] 8885#0: 4 iBufLen: 185 len_b: 185\n2017/08/02 11:17:36 [debug] 8885#0: 4 menshen_next\n2017/08/02 11:17:36 [error] 8885#0: 4 limiting connections by zone \"addr\", client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [debug] 8885#0: 4 __mydebug. menshen cleanup r: 00007F49DE2A9BF0\n2017/08/02 11:17:36 [warn] 8885#0: 4 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [warn] 8885#0: 4 dcapi: DataCollector::CLogger::write_baselog() failed! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 11:17:36 [debug] 8885#0: 3 __mydebug. menshen cleanup r: 00007F49DE247DD0\n2017/08/02 11:17:36 [warn] 8885#0: 3 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"`. 404\n2017/08/02 16:34:46 [debug] 29332#0: 12 request ip:[127.0.0.1]\n2017/08/02 16:34:46 [debug] 29332#0: 12 pkg seq:[17268622]\n2017/08/02 16:34:46 [debug] 29332#0: 12 iBufLen: 185 len_b: 185\n2017/08/02 16:34:46 [debug] 29332#0: 12 menshen_next\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 2\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 3\n2017/08/02 16:34:46 [debug] 29332#0: 12 test location: ~ \".php\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 using configuration \".php\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 http cl:-1 max:8388608\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 5\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 6\n2017/08/02 16:34:46 [debug] 29332#0: 12 post rewrite phase: 7\n2017/08/02 16:34:46 [debug] 29332#0: 12 generic phase: 8\n2017/08/02 16:34:46 [debug] 29332#0: 12 generic phase: 9\n2017/08/02 16:34:46 [debug] 29332#0: 12 generic phase: 10\n2017/08/02 16:34:46 [debug] 29332#0: 12 http script var: \"\u007f\"\n2017/08/02 16:34:46 [error] 29332#0: 12 limiting connections by zone \"addr\", client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 http finalize request: 503, \"/index.php?\" a:1, c:1\n2017/08/02 16:34:46 [debug] 29332#0: 12 http special response: 503, \"/index.php?\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 internal redirect: \"/50x.html?\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 2\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 3\n2017/08/02 16:34:46 [debug] 29332#0: 12 test location: ~ \".php\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 using configuration \"\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 http cl:-1 max:8388608\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 5\n2017/08/02 16:34:46 [debug] 29332#0: 12 rewrite phase: 6\n2017/08/02 16:34:46 [debug] 29332#0: 12 post rewrite phase: 7\n2017/08/02 16:34:46 [debug] 29332#0: 12 generic phase: 8\n2017/08/02 16:34:46 [debug] 29332#0: 12 generic phase: 9\n2017/08/02 16:34:46 [debug] 29332#0: 12 generic phase: 10\n2017/08/02 16:34:46 [debug] 29332#0: 12 access phase: 11\n2017/08/02 16:34:46 [debug] 29332#0: 12 access phase: 12\n2017/08/02 16:34:46 [debug] 29332#0: 12 post access phase: 13\n2017/08/02 16:34:46 [debug] 29332#0: 12 try files phase: 14\n2017/08/02 16:34:46 [debug] 29332#0: 12 content phase: 15\n2017/08/02 16:34:46 [debug] 29332#0: 12 content phase: 16\n2017/08/02 16:34:46 [debug] 29332#0: 12 content phase: 17\n2017/08/02 16:34:46 [debug] 29332#0: 12 content phase: 18\n2017/08/02 16:34:46 [debug] 29332#0: 12 content phase: 19\n2017/08/02 16:34:46 [debug] 29332#0: 12 http filename: \"/data/home/wallaceqian/project/wallaceqian.tencentyun.com/50x.html\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 add cleanup: 00007FF895450000\n2017/08/02 16:34:46 [debug] 29332#0: 12 http finalize request: 404, \"/50x.html?\" a:1, c:2\n2017/08/02 16:34:46 [debug] 29332#0: 12 http special response: 404, \"/50x.html?\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 http set discard body\n2017/08/02 16:34:46 [debug] 29332#0: 12 lua capture header filter, uri \"/50x.html\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 charset: \"\" > \"utf-8\"\n2017/08/02 16:34:46 [debug] 29332#0: 12 HTTP/1.1 404 Not Found\nServer: tws\nDate: Wed, 02 Aug 2017 08:34:46 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 162\nConnection: close\n503\n2017/08/02 16:40:48 [debug] 32097#0: 3 write new buf t:1 f:0 00007F1B9C557D80, pos 00007F1B9C557D80, size: 177 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter: l:0 f:0 s:177\n2017/08/02 16:40:48 [debug] 32097#0: 3 http cacheable: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream process upstream\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe read upstream: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe preread: 43788\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C585AD0, pos 00007F1B9C585B1C, size: 43788 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe length: -1\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write downstream: 1\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write busy: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write: out:0000000000000000, f:0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe read upstream: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C585AD0, pos 00007F1B9C585B1C, size: 43788 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe length: -1\n2017/08/02 16:40:48 [debug] 32097#0: 3 event timer: 29, old: 1502527248800, new: 1502527248802\n2017/08/02 16:40:48 [debug] 32097#0: 3 delete posted event 00007F1B98767250\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream request: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream dummy handler\n2017/08/02 16:40:48 [debug] 32097#0: 3 post event 00007F1B9908F250\n2017/08/02 16:40:48 [debug] 32097#0: 3 post event 00007F1B98767250\n2017/08/02 16:40:48 [debug] 32097#0: 3 delete posted event 00007F1B9908F250\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream request: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream process upstream\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe read upstream: 1\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: eof:0, avail:1\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: 1, last:21672\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe recv chain: 21672\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 06\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: FF\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: F8\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record length: 65528\n2017/08/02 16:40:48 [debug] 32097#0: 3 input buf #0 00007F1B9C585B28\n2017/08/02 16:40:48 [debug] 32097#0: 3 input buf 00007F1B9C585B28 65448\n2017/08/02 16:40:48 [debug] 32097#0: 3 malloc: 00007F1B9C595AE0:65536\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: eof:0, avail:1\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: 1, last:65536\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe recv chain: 30912\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf in   s:1 t:1 f:0 00007F1B9C585AD0, pos 00007F1B9C585B28, size: 65448 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C595AE0, pos 00007F1B9C595AE0, size: 30912 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe length: -1\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write downstream: 1\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write busy: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write buf ls:1 00007F1B9C585B28 65448\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write: out:00007F1B9C557F40, f:0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http output filter \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http copy filter: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 lua capture body filter, uri \"/index.php\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http postpone filter \"/index.php?\" 00007F1B9C557F40\n2017/08/02 16:40:48 [debug] 32097#0: 3 write old buf t:1 f:0 00007F1B9C557D80, pos 00007F1B9C557D80, size: 177 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 write new buf t:1 f:0 00007F1B9C585AD0, pos 00007F1B9C585B28, size: 65448 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter: l:0 f:1 s:65625\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter limit 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 writev: 65625 of 65625\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter 0000000000000000\n2017/08/02 16:40:48 [debug] 32097#0: 3 http copy filter: 0 \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write busy: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write: out:0000000000000000, f:0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe read upstream: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C595AE0, pos 00007F1B9C595AE0, size: 30912 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C585AD0, pos 00007F1B9C585AD0, size: 0 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe length: -1\n2017/08/02 16:40:48 [debug] 32097#0: 3 event timer: 29, old: 1502527248800, new: 1502527248802\n2017/08/02 16:40:48 [debug] 32097#0: 3 delete posted event 00007F1B98767250\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream request: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream dummy handler\n2017/08/02 16:40:48 [debug] 32097#0: 3 post event 00007F1B9908F250\n2017/08/02 16:40:48 [debug] 32097#0: 3 post event 00007F1B98767250\n2017/08/02 16:40:48 [debug] 32097#0: 3 delete posted event 00007F1B9908F250\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream request: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream process upstream\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe read upstream: 1\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: eof:1, avail:1\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: 2, last:65536\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe recv chain: 32\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: eof:1, avail:0\n2017/08/02 16:40:48 [debug] 32097#0: 3 readv: 2, last:65536\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe recv chain: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C595AE0, pos 00007F1B9C595AE0, size: 30944 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe buf free s:0 t:1 f:0 00007F1B9C585AD0, pos 00007F1B9C585AD0, size: 0 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe length: -1\n2017/08/02 16:40:48 [debug] 32097#0: 3 input buf #1 00007F1B9C595AE0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 06\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 78\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 68\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record length: 30824\n2017/08/02 16:40:48 [debug] 32097#0: 3 input buf #1 00007F1B9C595B38\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 06\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 02\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 06\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record length: 2\n2017/08/02 16:40:48 [debug] 32097#0: 3 input buf #1 00007F1B9C59D3A8\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 03\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 01\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 08\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record byte: 00\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi record length: 8\n2017/08/02 16:40:48 [debug] 32097#0: 3 http fastcgi sent end request\n2017/08/02 16:40:48 [debug] 32097#0: 3 input buf 00007F1B9C59D3A8 2\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C585AD0\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write downstream: 1\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write downstream flush in\n2017/08/02 16:40:48 [debug] 32097#0: 3 http output filter \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http copy filter: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 lua capture body filter, uri \"/index.php\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http postpone filter \"/index.php?\" 00007F1B9C558128\n2017/08/02 16:40:48 [debug] 32097#0: 3 write new buf t:1 f:0 00007F1B9C595AE0, pos 00007F1B9C595AE0, size: 80 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 write new buf t:1 f:0 00007F1B9C595AE0, pos 00007F1B9C595B38, size: 30824 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 write new buf t:1 f:0 00007F1B9C595AE0, pos 00007F1B9C59D3A8, size: 2 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter: l:0 f:0 s:30906\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter limit 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 writev: 30906 of 30906\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter 0000000000000000\n2017/08/02 16:40:48 [debug] 32097#0: 3 http copy filter: 0 \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 pipe write downstream done\n2017/08/02 16:40:48 [debug] 32097#0: 3 event timer: 29, old: 1502527248800, new: 1502527248803\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream exit: 0000000000000000\n2017/08/02 16:40:48 [debug] 32097#0: 3 finalize http upstream request: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 finalize http fastcgi request\n2017/08/02 16:40:48 [debug] 32097#0: 3 free rr peer 1 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 close http upstream connection: 29\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C4DC2C0, unused: 48\n2017/08/02 16:40:48 [debug] 32097#0: 3 event timer del: 29: 1502527248800\n2017/08/02 16:40:48 [debug] 32097#0: 3 delete posted event 00007F1B98767250\n2017/08/02 16:40:48 [debug] 32097#0: 3 reusable connection: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http upstream temp fd: -1\n2017/08/02 16:40:48 [debug] 32097#0: 3 http output filter \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http copy filter: \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 lua capture body filter, uri \"/index.php\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http postpone filter \"/index.php?\" 00007FFCFAFC3880\n2017/08/02 16:40:48 [debug] 32097#0: 3 write new buf t:0 f:0 0000000000000000, pos 0000000000000000, size: 0 file: 0, size: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http write filter: l:1 f:0 s:0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http copy filter: 0 \"/index.php?\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http finalize request: 0, \"/index.php?\" a:1, c:1\n2017/08/02 16:40:48 [debug] 32097#0: 3 http request count:1 blk:0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http close request\n2017/08/02 16:40:48 [debug] 32097#0: 3 __mydebug. menshen cleanup r: 00007F1B9C4EBDD0\n2017/08/02 16:40:48 [debug] 32097#0: 3 http log handler\n2017/08/02 16:40:48 [debug] 32097#0: 3 http log handler\n2017/08/02 16:40:48 [warn] 32097#0: 3 dcapi: DataCollector::CLogger::write_baselog() sended! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 16:40:48 [warn] 32097#0: 3 dcapi: DataCollector::CLogger::write_baselog() failed! while logging request, client: 127.0.0.1, server: wallaceqian.tencentyun.com, request: \"GET /index.php HTTP/1.0\", upstream: \"fastcgi://127.0.0.1:9000\", host: \"wallaceqian.tencentyun.com\"\n2017/08/02 16:40:48 [debug] 32097#0: 3 http monitor handler\n2017/08/02 16:40:48 [debug] 32097#0: 3 run cleanup: 00007F1B9C4ECD40\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C595AE0\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 0000000000000000\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C53EB70\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C4EBD80, unused: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C53DB60, unused: 8\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C557BE0, unused: 2036\n2017/08/02 16:40:48 [debug] 32097#0: 3 close http connection: 26\n2017/08/02 16:40:48 [debug] 32097#0: 3 reusable connection: 0\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C575AB0\n2017/08/02 16:40:48 [debug] 32097#0: 3 free: 00007F1B9C4DBF90, unused: 112\n2017/08/02 16:40:49 [debug] 32097#0: 4 event timer del: 0: 1501663249800\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua sleep timer expired: \"/50x.html?\"\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua run thread, top:0 c:1\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua resume returned 0\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua light thread ended normally\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua deleting light thread\n2017/08/02 16:40:49 [debug] 32097#0: 4 http set discard body\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua sending HTTP 1.0 response headers\n2017/08/02 16:40:49 [debug] 32097#0: 4 lua capture header filter, uri \"/50x.html\"\n2017/08/02 16:40:49 [debug] 32097#0: 4 charset: \"\" > \"utf-8\"\n2017/08/02 16:40:49 [debug] 32097#0: 4 HTTP/1.1 503 Service Temporarily Unavailable\nServer: tws\nDate: Wed, 02 Aug 2017 08:40:49 GMT\nContent-Type: text/html; charset=utf-8\nContent-Length: 0\nConnection: close\n@spacewander menshen is written by oureselves for security purpose.. ",
    "polm": "configure.out.txt\nautoconf.err.txt\nldconfig is installed, but it was not in the default PATH. The installer told me that so I added /sbin/ to my path for the install process. After doing that:\n> which ldconfig                                                               \n/sbin/ldconfig\n\nShell history is just this:\nexport PATH=\"$PATH\":/sbin\ntar xvzf openresty-1.11.2.4.tar.gz \ncd openresty-1.11.2.4/\n./configure\n\nconfigure.out is the output of that. There are also some errors in autoconf.err. . Oh, you're right! I had some weird install in my path instead of the standard one. Fixing my path and running it again worked.\nSorry for the false alarm, please feel free to close this.. ",
    "stspqxl": "nginx.conf:\nuser  nginx;\nworker_processes  1;\nerror_log  off;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n#access_log  off;\n\nlog_format  main  '$server_name | $remote_addr | $time_local | $request | $uri | $status | \"$http_user_agent\" | $http_x_forwarded_for | $upstream_addr | $upstream_response_time | $upstream_status | $request_time';\nlog_format  main  '$server_name | $remote_addr | $time_local | $request | $uri | $status | \"$http_user_agent\" | $http_x_forwarded_for';\nlog_format main '{\"server_name\":\"$server_name\",\"user_proxy_ip\":\"$http_x_real_ip\",\"lan_ip\":\"$remote_addr\",\"log_time\":\"$time_iso8601\",\"user_req\":\"$request\",\"http_code\":\"$status\",\"req_time\":\"$request_time\",\"user_ua\":\"$http_user_agent\",\"full_url\":\"$scheme://$server_name$request_uri\"}';\nsendfile        on;\n#tcp_nopush     on;\n\nkeepalive_timeout  65;\n\n#gzip  on;\n\ninclude /home/nginx/*.conf;\n\n}\nstream {\n      upstream mysqltest{\n      server 120.25.95.199:23306 weight=1;\n      #check interval=3000 rise=2 fall=5 timeout=1000;\n      }\n      server {\n      listen 23306;\n      proxy_pass mysqltest;\n       }\n}. cp /sbin/nginx /usr/local/openresty/nginx/sbin/nginx\nuse nginx 1.13.3 to replace nginx openresty/1.11.2.4\n/etc/init.d/openresty start\nStarting openresty (via systemctl):  \nstoped like this,but nginx started. nginx\u5df2\u7ecf\u542f\u52a8\uff0c\u4f46\u662fsystemctl start openresty.service \u6267\u884c\u540e\u5c31\u5361\u4f4f\u4e86\u3002\n\u7cfb\u7edf\u662f centos 7\uff0copenresty\u662fyum \u5b89\u88c5\u7684\u3002\u5982\u679c\u7528\u81ea\u5e26\u7684nginx\u7248\u672c\u5c31\u542f\u52a8\u6b63\u5e38\uff0c\u5982\u679c\u628a 1.13.3\u7684nginx\u6587\u4ef6\u66ff\u6362nginx/sbin/nginx\u6587\u4ef6\uff0c\u5c31\u5361\u5728\u8fd9\u91cc\uff0c\u6062\u590d\u539f\u6765\u6587\u4ef6\u542f\u52a8\u6b63\u5e38\u3002. ",
    "fc13240": "the sample bt svg:\n\nthe sample bt on/off cpu svg:\n\n. ",
    "Corson011": "@agentzh I really sorry about that, I will pay attention to later. Thank you for your answer. It worked when I removed the compile paramater '-j$cores' in \u2018make -j$cores ...\u2019. ",
    "icewaver": "I noticed that ctx is not checked after calling \"ngx_http_get_module_ctx\" in file ngx_http_lua_socket_tcp.c, which means that it is not necessary? But It cause coredump actually.. @agentzh Thanks, I will try Openresty 1.11.2.5 later, but it is hard to reproduce the problem in a minimal example, Maybe it become easy when root cause is found.. ",
    "soverysour": "Output of gcc -march=native -dM -E - < /dev/null | grep SSE:\n```\ndefine SSE2_MATH 1\ndefine SSE_MATH 1\ndefine SSE2 1\ndefine SSE 1\ndefine SSE3 1\n```\nOutput of cat /proc/cpuinfo:\nprocessor   : 0\nvendor_id   : AuthenticAMD\ncpu family  : 15\nmodel       : 76\nmodel name  : Mobile AMD Sempron(tm) Processor 3500+\nstepping    : 2\ncpu MHz     : 800.000\ncache size  : 512 KB\nphysical id : 0\nsiblings    : 1\ncore id     : 0\ncpu cores   : 1\napicid      : 0\ninitial apicid  : 0\nfpu     : yes\nfpu_exception   : yes\ncpuid level : 1\nwp      : yes\nflags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx mmxext fxsr_opt rdtscp lm 3dnowext 3dnow rep_good nopl extd_apicid pni cx16 lahf_lm extapic cr8_legacy 3dnowprefetch vmmcall\nbugs        : fxsave_leak sysret_ss_attrs null_seg swapgs_fence amd_e400\nbogomips    : 1596.05\nTLB size    : 1024 4K pages\nclflush size    : 64\ncache_alignment : 64\naddress sizes   : 40 bits physical, 48 bits virtual\npower management: ts fid vid ttp tm stc. ",
    "undying": "Wow, easy :)\nAnyway, I've been trying with global and local and booth of them had the same result - the error.\nAlso, I did just like was written right here: https://github.com/openresty/lua-nginx-module#init_by_lua and in this example cjson is declared as global variable.. You are welcome, thank you for your work! =]. ",
    "HakChealKim": "OK\uff0ctks. ",
    "andersonn-roberto": "@agentzh Thanks for the reply.\nYes, I'm using an i386 system.\nIt is possible to get the tarball and compile or I can get the ubuntu version and do something?. @agentzh Thanks for the answer, I've got openresty installed successful from source code.\nI made an VM with 32-bit system because of one of our customers.\nI'm doing some things on my VM, then, when anything got success and working as expected, I'll do the same thing on the customer server.\nThanks again!. ",
    "rahulpatel033": "@agentzh I don't understand. I tried to install openresty and it showed me this error. So I updated openssl's version but still same error. Is there anything i missed?. ",
    "Macrame": "@agentzh  Thank you for your reply. I had specified the resolver to 10.0.6.200 in nginx.conf:\nhttp {\n    ...\n    lua_package_path \"/usr/local/openresty/lualib/?.lua;;\";\n    resolver 10.0.6.200;\n    server {\n        listen       80;\n        ...\n        location /upload {\n          resolver 10.0.6.200;\n          default_type \"application/json\";\n          content_by_lua_file conf/upload.lua;\n        }\n        ...\n    }\n}. @agentzh Thank you very much. I tried to use dig and found that there is a little different between the kube-dns and a real named server.\n```\ndig @10.0.6.200 weedfs-master\n; <<>> DiG 9.9.4-RedHat-9.9.4-50.el7_3.1 <<>> @10.0.6.200 weedfs-master\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NXDOMAIN, id: 31755\n;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n;; QUESTION SECTION:\n;weedfs-master.         IN  A\n;; Query time: 0 msec\n;; SERVER: 10.0.6.200#53(10.0.6.200)\n;; WHEN: Mon Sep 11 13:37:22 HKT 2017\n;; MSG SIZE  rcvd: 42\nThe true address is weedfs-master._xxx_.svc.cluster.local (here, the _xxx_ is my namespace used in kubernetes)\ndig @10.0.6.200 weedfs-master.xxx.svc.cluster.local\n; <<>> DiG 9.9.4-RedHat-9.9.4-50.el7_3.1 <<>> @10.0.6.200 weedfs-master.xxx.svc.cluster.local\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50013\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n;; QUESTION SECTION:\n;weedfs-master.xxx.svc.cluster.local. IN A\n;; ANSWER SECTION:\nweedfs-master.xxx.svc.cluster.local. 30 IN  A 10.0.6.55\n;; Query time: 1 msec\n;; SERVER: 10.0.6.200#53(10.0.6.200)\n;; WHEN: Mon Sep 11 13:42:14 HKT 2017\n;; MSG SIZE  rcvd: 74\nAt last, I used weedfs-master._xxx_.svc.cluster.local in the nginx.conf and it worked nice although I didn't know why the nslookup can resolve the hostname but dig can't. Thanks again!\n. @agentzh By the way, I found that other apps can connect any service using the short service name (such as mysql-master, rabbit-server and so on) except the lua script running as content_by_lua_file. It is important that the proxy section in nginx.conf can also work for the short service name. Example:\nlocation ~ /\\d+,.*{\n            if ($request_method = 'DELETE' ) {\n                return 405;\n            }\n            if ($request_method = 'PUT' ) {\n                return 405;\n            }\n            proxy_pass http://weedfs-volume$uri;\n}\n```\nJust lua script can NOT resolve the service name.. ",
    "chakravarthy392": "Thanks @agentzh for your detailed reply. However I need to port Openresty to architecture other than intel , I will check if I can use those tarballs for this.. ",
    "vctrferreira": "@spacewander I can define default error 500 by specific endpoint? so like this:\nI want that this specific endpoint\nerror_page 500 502 503 504 /bots-redirect$is_args$args;\nonly run when error 50X to be generated by endpoint \"/bots\" ??\nor when I do the redirect I send to same router? like this \n```\nworker_processes 1;\ndaemon off;\nenv REDIS_MASTER_ADDRESS;\nenv REDIS_MASTER_PORT;\nenv REDIS_MASTER_DB;\nmaster_process off;\nerror_log  stderr  info;\nevents {\nworker_connections 1024;\n\n}\nhttp {\nserver {\n\n    listen 80;\n    charset utf-8;\n    location /bots {\n        set $proxy_addr '';\n        access_by_lua_file /home/config/routers/bots.lua; # it's will return a proxy pass value to $proxy_addr\n        proxy_pass http://$proxy_addr;\n    }\n    location /train-bot {\n        set $proxy_addr '';\n        access_by_lua_file /home/config/routers/train_bot.lua; # it's will return a proxy pass value to $proxy_addr\n        proxy_pass http://$proxy_addr;\n    }\n    error_page 500 502 503 504 /;\n    location / {\n        set $proxy_addr '';\n        access_by_lua_file /home/config/routers/errors.lua;\n        proxy_pass http://$proxy_addr;\n    }\n\n}\n\n}\n```\nin this case in any error 500 same request will be redirected to another proxy pass, anyone of this solutions solve my problem, you know how can I do it?. ",
    "lavie": "Oh, I see! Thanks.\nIs there a newer version of openresty that includes this feature?\nIn general, how can I tell which version of openresty is based on which nginx version?\nIf not, is it possible to rebuild openresty with an upped nginx version?. @agentzh fantastic!\nAre we talking soon like a few weeks? If you think it might take longer, please let me know, so I can work around the background update issue for now.. @agentzh nice! Where can I find it, though? I don't see anything in Releases or a tag.... ",
    "ferdinandocarella": "That's correct, it's on Amazon Linux.. ",
    "smarttang": "@spacewander \nSimple Curl http request;\n\n. This problem is not the case, I wrote the code and pictures are very clear,\nAnd redirect does not matter, I have tested the online environment, only this version of the problem.. \u8fd9\u5c31\u5c34\u5c2c\u4e86\uff0c\u6211\u8fd9\u5728\u751f\u4ea7\u73af\u5883\u4e0a\u6d4b\u8bd5\u8fc7\u539f\u751f\u7248Nginx\u548c\u65e7\u7684openresty\u90fdok\uff0c\u7279\u5730\u6d4b\u8bd5\u4e00\u4e2a\u65b0\u7684openresty\u5c31\u51fa\u95ee\u9898\uff0c\u7136\u540e\u63d0\u4ea4\u8fd9\u4e2aISSUES\uff0c\u4f60\u8fd8\u7ed9\u6211\u5173\u4e86\u3002\u3002\u3002\u5c34\u5c2c\u3002\u3002\nThis embarrassed, I tested in the production environment native version of Nginx and the old openresty are ok, specifically to test a new openresty problems, and then submit the ISSUES, you shut me back. . . awkward. .. \u279c  ~ curl http://10.211.55.4 -v\n Rebuilt URL to: http://10.211.55.4/\n   Trying 10.211.55.4...\n TCP_NODELAY set\n Connected to 10.211.55.4 (10.211.55.4) port 80 (#0)\n\nGET / HTTP/1.1\nHost: 10.211.55.4\nUser-Agent: curl/7.54.0\nAccept: /\n< HTTP/1.1 200 OK\n< Date: Sat, 25 Nov 2017 08:37:02 GMT\n< Content-Type: text/plain\n< Content-Length: 562\n< Last-Modified: Fri, 24 Nov 2017 15:48:16 GMT\n< Connection: keep-alive\n< Fingerprint: ZhiLianWaf\n< Server: ZhaopinServer\n< ETag: \"5a183f40-232\"\n< Accept-Ranges: bytes\n< \n<!DOCTYPE html>\n\n\nWelcome to OpenResty!\n\n    body {\n        width: 35em;\n        margin: 0 auto;\n        font-family: Tahoma, Verdana, Arial, sans-serif;\n    }\n\n\n\nWelcome to OpenResty!\nIf you see this page, the OpenResty web platform is successfully installed and\nworking. Further configuration is required.\n\nFor online documentation and support please refer to\nopenresty.org.\nThank you for flying OpenResty.\n\n\n* Connection #0 to host 10.211.55.4 left intact\n. @spacewander \nthx\u3002i think this version maybe have a bug..\nOn last version is ok, this version is not work.... @agentzh \nFirst of all, I am very grateful to the author, but also to my dear friends.\nFirst of all, I did not think the author you are right, 302 or 301 redirect may indeed exist this problem, but I have not tried any changes in the configuration, I installed the default openresty-1.13.6.1.tar.gz Have this problem. In the reverse version, openresty-1.11.2.3.tar.gz the same configuration, note: \"the same configuration\" does not exist in the problem.\nSo, in a production environment, I returned a version of openresty-1.11.2.3.tar.gz.\nI have no objection to what you are saying, and it is also possible that my configuration difference caused the problem to exist, and I accept it alright, although I have not altered any of the configs with the default (nginx.conf).\nHowever, it does not matter, the problem is solved by downgrading,\nThank the author. :)\n\u4e2d\u6587\u7248\uff1a\n\u9996\u5148\uff0c\u975e\u5e38\u611f\u8c22\u4f5c\u8005\uff0c\u4e5f\u611f\u8c22\u70ed\u5fc3\u7684\u670b\u53cb\u3002\n\u5176\u6b21\uff0c\u6211\u6ca1\u6709\u8ba4\u4e3a\u4f5c\u8005\u60a8\u8bf4\u5f97\u4e0d\u5bf9\uff0c302\u6216\u8005301\u7684\u91cd\u5b9a\u5411\u786e\u5b9e\u6709\u53ef\u80fd\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u6211\u5e76\u6ca1\u6709\u5c1d\u8bd5\u8fc7\u4efb\u4f55\u7684\u6539\u52a8\u914d\u7f6e\uff0c\u6211\u662f\u9ed8\u8ba4\u5b89\u88c5\u4e86 openresty-1.13.6.1.tar.gz  \u540e\u624d\u6709\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u5012\u9000\u7248\u672c\u540e\uff0copenresty-1.11.2.3.tar.gz \u540c\u6837\u7684\u914d\u7f6e\u4e0b\uff0c\u6ce8\u610f\uff1a\u201c\u540c\u6837\u7684\u914d\u7f6e\u4e0b\u201d\u5374\u4e0d\u5b58\u5728\u8be5\u95ee\u9898\u3002\n\u6240\u4ee5\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u6211\u9000\u56de\u4e86openresty-1.11.2.3.tar.gz\u7684\u7248\u672c\u3002\n\u6211\u4e0d\u53cd\u5bf9\u60a8\u8bf4\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u914d\u7f6e\u7684\u4e0d\u540c\u5bfc\u81f4\u8be5\u95ee\u9898\u5b58\u5728\uff0c\u6211\u5766\u7136\u63a5\u53d7\uff0c\u867d\u7136\u6211\u6ca1\u6709\u6539\u52a8\u4efb\u4f55\u7684\u914d\u7f6e\uff0c\u7528\u9ed8\u8ba4\u7684(nginx.conf).\n\u4e0d\u8fc7\uff0c\u4e0d\u91cd\u8981\u4e86\uff0c\u95ee\u9898\u901a\u8fc7\u964d\u7ea7\u89e3\u51b3\u4e86\uff0c\n\u611f\u8c22\u4f5c\u8005\u3002\uff1a\uff09. @agentzh \n@smarttang BTW, you can always use the ngx.req.is_internal() Lua API to skip processing requests initiated from internal redirects inside your access_by_lua or rewrite_by_lua Lua handlers. See\nThanks, I study ~. ",
    "vulntor": "\n@agentzh\n@smarttang BTW, you can always use the ngx.req.is_internal() Lua API to skip processing requests initiated from internal redirects inside your access_by_lua or rewrite_by_lua Lua handlers. See\nThanks, I study ~\n@agentzh\nFirst of all, I am very grateful to the author, but also to my dear friends.\nFirst of all, I did not think the author you are right, 302 or 301 redirect may indeed exist this problem, but I have not tried any changes in the configuration, I installed the default openresty-1.13.6.1.tar.gz Have this problem. In the reverse version, openresty-1.11.2.3.tar.gz the same configuration, note: \"the same configuration\" does not exist in the problem.\nSo, in a production environment, I returned a version of openresty-1.11.2.3.tar.gz.\nI have no objection to what you are saying, and it is also possible that my configuration difference caused the problem to exist, and I accept it alright, although I have not altered any of the configs with the default (nginx.conf).\nHowever, it does not matter, the problem is solved by downgrading,\nThank the author. :)\n\u4e2d\u6587\u7248\uff1a\n\u9996\u5148\uff0c\u975e\u5e38\u611f\u8c22\u4f5c\u8005\uff0c\u4e5f\u611f\u8c22\u70ed\u5fc3\u7684\u670b\u53cb\u3002\n\u5176\u6b21\uff0c\u6211\u6ca1\u6709\u8ba4\u4e3a\u4f5c\u8005\u60a8\u8bf4\u5f97\u4e0d\u5bf9\uff0c302\u6216\u8005301\u7684\u91cd\u5b9a\u5411\u786e\u5b9e\u6709\u53ef\u80fd\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u6211\u5e76\u6ca1\u6709\u5c1d\u8bd5\u8fc7\u4efb\u4f55\u7684\u6539\u52a8\u914d\u7f6e\uff0c\u6211\u662f\u9ed8\u8ba4\u5b89\u88c5\u4e86 openresty-1.13.6.1.tar.gz \u540e\u624d\u6709\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\u5728\u5012\u9000\u7248\u672c\u540e\uff0copenresty-1.11.2.3.tar.gz \u540c\u6837\u7684\u914d\u7f6e\u4e0b\uff0c\u6ce8\u610f\uff1a\u201c\u540c\u6837\u7684\u914d\u7f6e\u4e0b\u201d\u5374\u4e0d\u5b58\u5728\u8be5\u95ee\u9898\u3002\n\u6240\u4ee5\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u6211\u9000\u56de\u4e86openresty-1.11.2.3.tar.gz\u7684\u7248\u672c\u3002\n\u6211\u4e0d\u53cd\u5bf9\u60a8\u8bf4\u7684\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u6211\u914d\u7f6e\u7684\u4e0d\u540c\u5bfc\u81f4\u8be5\u95ee\u9898\u5b58\u5728\uff0c\u6211\u5766\u7136\u63a5\u53d7\uff0c\u867d\u7136\u6211\u6ca1\u6709\u6539\u52a8\u4efb\u4f55\u7684\u914d\u7f6e\uff0c\u7528\u9ed8\u8ba4\u7684(nginx.conf).\n\u4e0d\u8fc7\uff0c\u4e0d\u91cd\u8981\u4e86\uff0c\u95ee\u9898\u901a\u8fc7\u964d\u7ea7\u89e3\u51b3\u4e86\uff0c\n\u611f\u8c22\u4f5c\u8005\u3002\uff1a\uff09\n\n\u8001\u54e5\uff0c\u4eba\u5bb6\u8bf4\u7684\u662f\u5185\u90e8\u91cd\u5b9a\u5411\uff0c\u4e0d\u662f301\u8fd9\u79cd\u3002\u3002\u8bbf\u95ee/\u4f1a\u91cd\u5b9a\u5411\u5230index.html \u5c31\u51fa\u73b0\u4e86\u4e24\u6b21\u8bf7\u6c42\u3002\n \u6211\u8fd9\u8fb9\u4e5f\u51fa\u8fd9\u4e2a\u95ee\u9898\uff0c\u8c03\u8bd5\u4ee3\u7801\u7684\u65f6\u5019\u51fa\u9519\u54cd\u5e94500\u7684\u65f6\u5019\u5c31\u51fa\u73b0\u4e24\u6b21\u8bf7\u6c42\uff0c\u56e0\u4e3a\u91cd\u5b9a\u5411\u5230\u4e86500\u7684\u9519\u8bef\u9875\u9762\u3002\nso it must be internal redirects\u3002\n. ",
    "Himanshu4": "My bad! This was a configuration issue.. @nishantrayan : My host header was getting set incorrectly and the ALB was redirecting the traffic based on host header. That's why, 404. Setting the correct host header fixes the issue.. ",
    "nishantrayan": "@Himanshu4 I am seeing the same. can you share which part of the configuration was the culprit. ",
    "karlseguin": "err, that was just me being lazy:\nlocation / {\n  set $upstream '';\n  access_by_lua_block {\n    require('execute')()\n  }\n  proxy_pass http://$upstream;\n}\nI'm unable to reproduce it, nor able to provide more code. I only opened the issue so that if others encountered similar things, you (or they) know it wasn't an isolated incident.. ",
    "xlingit": "version is openresty-1.13.6.1. old cpu. old cpu. ",
    "abeljinming": "Many thanks for reply!\nThe version I am using is: nginx version: openresty/1.13.6.1, is it right?. Yes, I forgot \"require resty.core\", Many thanks!\nBTW, as there is no way to add expired key when using \"incr\" method, so I have to write below codes:\n    if newval == 1 then\n        dict_captcha_access_times:expire(clientIP, 10)\n    else\nConsider the concurrent situation, are the codes right?\n. ",
    "onlynishant": "My client reset connection after every 10K request as per this link. \nI have used sample-bt and generated this svg file but don't understand it much. could you pls help me.\nsudo ./sample-bt -p 8218 -t 5 -u > a.bt\na.svg.zip\nI also saw multiple worker shutting down and sometime multiple master running -\n\n\n. I tried core dump debugging but \"no debugging symbols found\" message.\n``\n$] gdb /usr/sbin/nginx coredump\nGNU gdb (GDB) Red Hat Enterprise Linux (7.2-75.el6)\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-redhat-linux-gnu\".\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>...\nReading symbols from /usr/sbin/nginx...done.\n[New Thread 40302]\nMissing separate debuginfo for /usr/local/openresty/luajit/lib/libluajit-5.1.so.2\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/3d/fc5725f95814a721e0623ad45a360fb17a8521\nMissing separate debuginfo for /usr/lib/lua/5.1/cjson.so\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/ba/41e56600fcf47aa7f8cec8646d51b3ee4a20ae\nMissing separate debuginfo for /usr/lib/lua/5.1/zlib.so\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/4e/5dcfe374b44d1e2288c046228b50c6dd547868\nMissing separate debuginfo for /usr/lib/lua/5.1/geoip/city.so\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/2c/532c77e5f5a2c698853de035f038adb886b91f\nMissing separate debuginfo for /usr/lib/lua/5.1/pb4lua.so\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/20/9cb1d4273131d601c47e57a9eaa80d63f275e6\nMissing separate debuginfo for /usr/lib/lua/5.1/lua-utf8.so\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/33/ba5a62ad70e5a72109720b993e9708e1dc047c\nMissing separate debuginfo for /usr/lib/lua/5.1/crypto.so\nTry: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/d0/5bf56e7fe093fe9e31dae07cf3af6e0045b402\nReading symbols from /lib64/libdl.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libdl.so.2\nReading symbols from /lib64/libpthread.so.0...(no debugging symbols found)...done.\n[Thread debugging using libthread_db enabled]\nLoaded symbols for /lib64/libpthread.so.0\nReading symbols from /lib64/libcrypt.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libcrypt.so.1\nReading symbols from /usr/local/openresty/luajit/lib/libluajit-5.1.so.2...done.\nLoaded symbols for /usr/local/openresty/luajit/lib/libluajit-5.1.so.2\nReading symbols from /lib64/libm.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libm.so.6\nReading symbols from /lib64/libpcre.so.0...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libpcre.so.0\nReading symbols from /usr/lib64/libssl.so.10...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib64/libssl.so.10\nReading symbols from /usr/lib64/libcrypto.so.10...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib64/libcrypto.so.10\nReading symbols from /lib64/libz.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libz.so.1\nReading symbols from /usr/lib64/libGeoIP.so.1...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib64/libGeoIP.so.1\nReading symbols from /lib64/libc.so.6...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libc.so.6\nReading symbols from /lib64/ld-linux-x86-64.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/ld-linux-x86-64.so.2\nReading symbols from /lib64/libfreebl3.so...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libfreebl3.so\nReading symbols from /lib64/libgcc_s.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libgcc_s.so.1\nReading symbols from /lib64/libgssapi_krb5.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libgssapi_krb5.so.2\nReading symbols from /lib64/libkrb5.so.3...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libkrb5.so.3\nReading symbols from /lib64/libcom_err.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libcom_err.so.2\nReading symbols from /lib64/libk5crypto.so.3...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libk5crypto.so.3\nReading symbols from /lib64/libkrb5support.so.0...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libkrb5support.so.0\nReading symbols from /lib64/libkeyutils.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libkeyutils.so.1\nReading symbols from /lib64/libresolv.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libresolv.so.2\nReading symbols from /lib64/libselinux.so.1...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libselinux.so.1\nReading symbols from /lib64/libnss_files.so.2...(no debugging symbols found)...done.\nLoaded symbols for /lib64/libnss_files.so.2\nReading symbols from /usr/lib/lua/5.1/cjson.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib/lua/5.1/cjson.so\nReading symbols from /usr/lib/lua/5.1/zlib.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib/lua/5.1/zlib.so\nReading symbols from /usr/lib/lua/5.1/geoip/city.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib/lua/5.1/geoip/city.so\nReading symbols from /usr/lib/lua/5.1/pb4lua.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib/lua/5.1/pb4lua.so\nReading symbols from /usr/lib/lua/5.1/lua-utf8.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib/lua/5.1/lua-utf8.so\nReading symbols from /usr/lib/lua/5.1/crypto.so...(no debugging symbols found)...done.\nLoaded symbols for /usr/lib/lua/5.1/crypto.so\nReading symbols from /lib/modules/2.6.32-504.23.4.el6.x86_64/vdso/vdso.so...Reading symbols from /usr/lib/debug/lib/modules/2.6.32-504.23.4.el6.x86_64/vdso/vdso.so.debug...done.\ndone.\nLoaded symbols for /lib/modules/2.6.32-504.23.4.el6.x86_64/vdso/vdso.so\nCore was generated bynginx: worker process                                               '.\nProgram terminated with signal 11, Segmentation fault.\n0  0x00007f941e218100 in ?? ()\nMissing separate debuginfos, use: debuginfo-install GeoIP-1.6.5-1.el6.x86_64 glibc-2.12-1.209.el6_9.2.x86_64 keyutils-libs-1.4-5.el6.x86_64 krb5-libs-1.10.3-65.el6.x86_64 libcom_err-1.41.12-23.el6.x86_64 libgcc-4.4.7-18.el6.x86_64 libselinux-2.0.94-7.el6.x86_64 nss-softokn-freebl-3.14.3-22.el6_6.x86_64 openssl-1.0.1e-57.el6.x86_64 pcre-7.8-7.el6.x86_64 zlib-1.2.3-29.el6.x86_64\n. I tried with just `return` after receiving request (no request parsing or anything) still see 100% CPU uses by NGINX (100% by each worker and high CLOSE_WAIT count).\n$] sudo ./ngx-leaked-pools -p 25080\nTracing 25080 (/usr/sbin/nginx)...\nHit Ctrl-C to end.\n^C\n952 pools leaked at backtrace 0x42130a 0x43f047 0x446f35 0x43e292 0x445128 0x443597 0x44459c 0x445ab4 0x420297 0x7fadb19bbd1d 0x41e3a9\nRun the command \"./ngx-backtrace -p 25080 \" to get details.\nFor total 16826 pools allocated.\n$] ./ngx-backtrace -p 25080 0x42130a 0x43f047 0x446f35 0x43e292 0x445128 0x443597 0x44459c 0x445ab4 0x420297 0x7fadb19bbd1d 0x41e3a9\nngx_create_pool\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/core/ngx_palloc.c:43\nngx_event_accept\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/event/ngx_event_accept.c:162\nngx_epoll_process_events\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/event/modules/ngx_epoll_module.c:902\nngx_process_events_and_timers\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/event/ngx_event.c:259\nngx_worker_process_cycle\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/os/unix/ngx_process_cycle.c:817\nngx_spawn_process\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/os/unix/ngx_process.c:205\nngx_start_worker_processes\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/os/unix/ngx_process_cycle.c:399\nngx_master_process_cycle\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/os/unix/ngx_process_cycle.c:252\nmain\n/home/platform/installers/openresty-1.13.6.1/build/nginx-1.13.6/src/core/nginx.c:381\n??\n??:0\n_start\n??:0\n. I am not sure if it helps but still adding strace logs\n$ strace -ef worker_pid\nread(212, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(212, \"a\\312\\376\\345hy\\33\\367\\233q)r\\301\\320z\\274\\242\\342\\0373\\360\\303\\344\\304\\365\\240d\\200X\\301\\244\\232\"..., 175) = 175\nwrite(212, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\225Z^u\\234q\\316\\203\\347\\265\\232W\\235\\302Qn\\333\"..., 5979) = 5979\nread(212, 0x110e0b3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nwrite(59, \"2017/12/19 16:33:46 [error] 3229\"..., 214) = 214\nclose(5)                                = 0\nwrite(59, \"2017/12/19 16:33:46 [error] 3229\"..., 271) = 271\nwrite(59, \"2017/12/19 16:33:46 [error] 3229\"..., 233) = 233\nwritev(1572, [{\"HTTP/1.1 204 No Content\\r\\nDate: T\"..., 126}], 1) = 126\nwrite(58, \"\\n\", 1)                      = 1\nwrite(60, \"10024||||165735||246|0|0|2|12|0|\"..., 115) = 115\nsetsockopt(1572, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nwrite(59, \"2017/12/19 16:33:46 [error] 3229\"..., 214) = 214\nclose(23)                               = 0\nwrite(59, \"2017/12/19 16:33:46 [error] 3229\"..., 270) = 270\nwrite(59, \"2017/12/19 16:33:46 [error] 3229\"..., 233) = 233\nmprotect(0x7f777e4e0000, 65536, PROT_READ|PROT_WRITE) = 0\nmprotect(0x7f777e4e0000, 65536, PROT_READ|PROT_EXEC) = 0\nwritev(301, [{\"HTTP/1.1 204 No Content\\r\\nDate: T\"..., 126}], 1) = 126\nwrite(58, \"\\n\", 1)                      = 1\nwrite(60, \"10024||||165735||246|0|0|2|11|0|\"..., 108) = 108\nrecvfrom(1572, \"\", 1024, 0, NULL, NULL) = 0\nclose(1572)                             = 0\nrecvfrom(301, \"\", 1024, 0, NULL, NULL)  = 0\nclose(301)                              = 0\nepoll_wait(115, {{EPOLLIN, {u32=1894637697, u64=140150972473473}}, {EPOLLIN|0x2000, {u32=1894637001, u64=140150972472777}}, {EPOLLIN, {u32=1894636769, u64=140150972472545}}, {EPOLLIN|0x2000, {u32=1894637233, u64=140150972473009}}, {EPOLLIN|0x2000, {u32=1894636537, u64=140150972472313}}, {EPOLLIN|0x2000, {u32=1894636073, u64=140150972471849}}, {EPOLLIN|0x2000, {u32=1894635841, u64=140150972471617}}, {EPOLLIN|0x2000, {u32=1894635609, u64=140150972471385}}, {EPOLLIN|0x2000, {u32=1894636305, u64=140150972472081}}, {EPOLLIN|0x2000, {u32=1894635377, u64=140150972471153}}, {EPOLLIN, {u32=1894634913, u64=140150972470689}}, {EPOLLIN|0x2000, {u32=1894634449, u64=140150972470225}}, {EPOLLIN|0x2000, {u32=1894635145, u64=140150972470921}}, {EPOLLIN, {u32=1894634217, u64=140150972469993}}, {EPOLLIN, {u32=1894633985, u64=140150972469761}}, {EPOLLIN|0x2000, {u32=1894634681, u64=140150972470457}}, {EPOLLIN|0x2000, {u32=1894633753, u64=140150972469529}}, {EPOLLIN|0x2000, {u32=1894632825, u64=140150972468601}}, {EPOLLIN|0x2000, {u32=1894633521, u64=140150972469297}}, {EPOLLIN|0x2000, {u32=1894633289, u64=140150972469065}}, {EPOLLIN|0x2000, {u32=1894632361, u64=140150972468137}}, {EPOLLIN|0x2000, {u32=1894633057, u64=140150972468833}}, {EPOLLIN|0x2000, {u32=1894632129, u64=140150972467905}}, {EPOLLIN|0x2000, {u32=1894632593, u64=140150972468369}}, {EPOLLIN|0x2000, {u32=1894631897, u64=140150972467673}}, {EPOLLIN, {u32=1894631665, u64=140150972467441}}, {EPOLLIN|0x2000, {u32=1894631433, u64=140150972467209}}, {EPOLLIN|0x2000, {u32=1894630969, u64=140150972466745}}, {EPOLLIN|0x2000, {u32=1894630737, u64=140150972466513}}, {EPOLLIN, {u32=1894631201, u64=140150972466977}}, {EPOLLIN, {u32=1894630505, u64=140150972466281}}, {EPOLLIN, {u32=1894630273, u64=140150972466049}}, {EPOLLIN, {u32=1894630041, u64=140150972465817}}, {EPOLLIN|0x2000, {u32=1894629809, u64=140150972465585}}, {EPOLLIN|0x2000, {u32=1894629577, u64=140150972465353}}, {EPOLLIN|0x2000, {u32=1894629345, u64=140150972465121}}, {EPOLLIN|0x2000, {u32=1894628881, u64=140150972464657}}, {EPOLLIN|0x2000, {u32=1894628649, u64=140150972464425}}, {EPOLLIN|0x2000, {u32=1894628417, u64=140150972464193}}, {EPOLLIN|0x2000, {u32=1894629113, u64=140150972464889}}, {EPOLLIN, {u32=1894628185, u64=140150972463961}}, {EPOLLIN|0x2000, {u32=1894444441, u64=140150972280217}}, {EPOLLIN|0x2000, {u32=1894627953, u64=140150972463729}}, {EPOLLIN|0x2000, {u32=1894627721, u64=140150972463497}}, {EPOLLIN|0x2000, {u32=1894627489, u64=140150972463265}}, {EPOLLIN|0x2000, {u32=1894627257, u64=140150972463033}}, {EPOLLIN|0x2000, {u32=1894627025, u64=140150972462801}}, {EPOLLIN|0x2000, {u32=1894626329, u64=140150972462105}}, {EPOLLIN|0x2000, {u32=1894626793, u64=140150972462569}}, {EPOLLIN|0x2000, {u32=1894626561, u64=140150972462337}}, {EPOLLIN|0x2000, {u32=1894625401, u64=140150972461177}}, {EPOLLIN|0x2000, {u32=1894626097, u64=140150972461873}}, {EPOLLIN|0x2000, {u32=1894625169, u64=140150972460945}}, {EPOLLIN, {u32=1894625865, u64=140150972461641}}, {EPOLLIN|0x2000, {u32=1894625633, u64=140150972461409}}, {EPOLLIN|0x2000, {u32=1894624705, u64=140150972460481}}, {EPOLLIN|0x2000, {u32=1894624473, u64=140150972460249}}, {EPOLLIN, {u32=1894624241, u64=140150972460017}}, {EPOLLIN, {u32=1894624937, u64=140150972460713}}, {EPOLLIN|0x2000, {u32=1894624009, u64=140150972459785}}, {EPOLLIN, {u32=1894623545, u64=140150972459321}}, {EPOLLIN, {u32=1894623777, u64=140150972459553}}, {EPOLLIN, {u32=1894622617, u64=140150972458393}}, {EPOLLIN|0x2000, {u32=1894623313, u64=140150972459089}}, {EPOLLIN|0x2000, {u32=1894623081, u64=140150972458857}}, {EPOLLIN|0x2000, {u32=1894622153, u64=140150972457929}}, {EPOLLIN|0x2000, {u32=1894622849, u64=140150972458625}}, {EPOLLIN|0x2000, {u32=1894621689, u64=140150972457465}}, {EPOLLIN|0x2000, {u32=1894622385, u64=140150972458161}}, {EPOLLIN, {u32=1894621225, u64=140150972457001}}, {EPOLLIN|0x2000, {u32=1894621921, u64=140150972457697}}, {EPOLLIN|0x2000, {u32=1894621457, u64=140150972457233}}, {EPOLLIN|0x2000, {u32=1894620529, u64=140150972456305}}, {EPOLLIN, {u32=1894620993, u64=140150972456769}}, {EPOLLIN|0x2000, {u32=1894620297, u64=140150972456073}}, {EPOLLIN, {u32=1894620761, u64=140150972456537}}, {EPOLLIN|0x2000, {u32=1894620065, u64=140150972455841}}, {EPOLLIN|0x2000, {u32=1894619833, u64=140150972455609}}, {EPOLLIN|0x2000, {u32=1894619601, u64=140150972455377}}, {EPOLLIN, {u32=1894619137, u64=140150972454913}}, {EPOLLIN, {u32=1894618905, u64=140150972454681}}, {EPOLLIN|0x2000, {u32=1894619369, u64=140150972455145}}, {EPOLLIN, {u32=1894617977, u64=140150972453753}}, {EPOLLIN, {u32=1894618673, u64=140150972454449}}, {EPOLLIN|0x2000, {u32=1894618441, u64=140150972454217}}, {EPOLLIN, {u32=1894617513, u64=140150972453289}}, {EPOLLIN, {u32=1894618209, u64=140150972453985}}, {EPOLLIN, {u32=1894617281, u64=140150972453057}}, {EPOLLIN|0x2000, {u32=1894617049, u64=140150972452825}}, {EPOLLIN|0x2000, {u32=1894617745, u64=140150972453521}}, {EPOLLIN, {u32=1894616817, u64=140150972452593}}, {EPOLLIN, {u32=1894616121, u64=140150972451897}}, {EPOLLIN|0x2000, {u32=1894616585, u64=140150972452361}}, {EPOLLIN|0x2000, {u32=1894616353, u64=140150972452129}}, {EPOLLIN|0x2000, {u32=1894615425, u64=140150972451201}}, {EPOLLIN|0x2000, {u32=1894615889, u64=140150972451665}}, {EPOLLIN|0x2000, {u32=1894615193, u64=140150972450969}}, {EPOLLIN|0x2000, {u32=1894614961, u64=140150972450737}}, {EPOLLIN|0x2000, {u32=1894615657, u64=140150972451433}}, {EPOLLIN, {u32=1894614729, u64=140150972450505}}, {EPOLLIN|0x2000, {u32=1894614497, u64=140150972450273}}, {EPOLLIN|0x2000, {u32=1894614265, u64=140150972450041}}, {EPOLLIN|0x2000, {u32=1894614033, u64=140150972449809}}, {EPOLLIN|0x2000, {u32=1894613801, u64=140150972449577}}, {EPOLLIN, {u32=1894613569, u64=140150972449345}}, {EPOLLIN|0x2000, {u32=1894551857, u64=140150972387633}}, {EPOLLIN, {u32=1894468801, u64=140150972304577}}, {EPOLLIN|0x2000, {u32=1894827009, u64=140150972662785}}, {EPOLLIN|0x2000, {u32=1894473441, u64=140150972309217}}, {EPOLLIN|0x2000, {u32=1894686417, u64=140150972522193}}, {EPOLLIN, {u32=1894686185, u64=140150972521961}}, {EPOLLIN|0x2000, {u32=1894685953, u64=140150972521729}}, {EPOLLIN, {u32=1894685721, u64=140150972521497}}, {EPOLLIN|0x2000, {u32=1894685489, u64=140150972521265}}, {EPOLLIN, {u32=1894550929, u64=140150972386705}}, {EPOLLIN|0x2000, {u32=1894550697, u64=140150972386473}}, {EPOLLIN, {u32=1894549305, u64=140150972385081}}, {EPOLLIN|0x2000, {u32=1894545825, u64=140150972381601}}, {EPOLLIN, {u32=1894547681, u64=140150972383457}}, {EPOLLIN|0x2000, {u32=1894546985, u64=140150972382761}}, {EPOLLIN, {u32=1894825385, u64=140150972661161}}, {EPOLLIN|0x2000, {u32=1894825153, u64=140150972660929}}, {EPOLLIN, {u32=1894824457, u64=140150972660233}}, {EPOLLIN|0x2000, {u32=1894824689, u64=140150972660465}}, {EPOLLIN, {u32=1894823993, u64=140150972659769}}, {EPOLLIN|0x2000, {u32=1894823761, u64=140150972659537}}, {EPOLLIN, {u32=1894421008, u64=140150972256784}}, {EPOLLIN, {u32=1894469265, u64=140150972305041}}, {EPOLLIN, {u32=1894417992, u64=140150972253768}}, {EPOLLIN|0x2000, {u32=1894602432, u64=140150972438208}}, {EPOLLIN|0x2000, {u32=1894468337, u64=140150972304113}}, {EPOLLIN|0x2000, {u32=1894365097, u64=140150972200873}}, {EPOLLIN|0x2000, {u32=1894407553, u64=140150972243329}}, {EPOLLIN|0x2000, {u32=1894385977, u64=140150972221753}}, {EPOLLIN|0x2000, {u32=1894527033, u64=140150972362809}}, {EPOLLIN|0x2000, {u32=1894711473, u64=140150972547249}}, {EPOLLIN|0x2000, {u32=1894713561, u64=140150972549337}}, {EPOLLIN|0x2000, {u32=1894710777, u64=140150972546553}}, {EPOLLIN|0x2000, {u32=1894692681, u64=140150972528457}}, {EPOLLIN|0x2000, {u32=1894583409, u64=140150972419185}}, {EPOLLIN|0x2000, {u32=1894597560, u64=140150972433336}}, {EPOLLIN|0x2000, {u32=1894921665, u64=140150972757441}}, {EPOLLIN|0x2000, {u32=1894906121, u64=140150972741897}}, {EPOLLIN|0x2000, {u32=1894808448, u64=140150972644224}}, {EPOLLIN|0x2000, {u32=1894539097, u64=140150972374873}}, {EPOLLIN|0x2000, {u32=1894477385, u64=140150972313161}}, {EPOLLIN|0x2000, {u32=1894529121, u64=140150972364897}}, {EPOLLIN|0x2000, {u32=1894479937, u64=140150972315713}}, {EPOLLIN|0x2000, {u32=1894532137, u64=140150972367913}}, {EPOLLIN|0x2000, {u32=1894440960, u64=140150972276736}}, {EPOLLIN|0x2000, {u32=1894438872, u64=140150972274648}}, {EPOLLIN|0x2000, {u32=1894726088, u64=140150972561864}}, {EPOLLIN|0x2000, {u32=1894563688, u64=140150972399464}}, {EPOLLIN|0x2000, {u32=1894463464, u64=140150972299240}}, {EPOLLIN|0x2000, {u32=1894356281, u64=140150972192057}}, {EPOLLIN|0x2000, {u32=1894498264, u64=140150972334040}}, {EPOLLIN|0x2000, {u32=1894449312, u64=140150972285088}}, {EPOLLIN|0x2000, {u32=1894671800, u64=140150972507576}}, {EPOLLIN|0x2000, {u32=1894583872, u64=140150972419648}}, {EPOLLIN|0x2000, {u32=1894490841, u64=140150972326617}}, {EPOLLIN|0x2000, {u32=1894599881, u64=140150972435657}}, {EPOLLIN|0x2000, {u32=1894822833, u64=140150972658609}}, {EPOLLIN|0x2000, {u32=1894511024, u64=140150972346800}}, {EPOLLIN|0x2000, {u32=1894361153, u64=140150972196929}}, {EPOLLIN|0x2000, {u32=1894397809, u64=140150972233585}}, {EPOLLIN|0x2000, {u32=1894515664, u64=140150972351440}}, {EPOLLIN|0x2000, {u32=1894379945, u64=140150972215721}}, {EPOLLIN|0x2000, {u32=1894374840, u64=140150972210616}}, {EPOLLIN|0x2000, {u32=1894455344, u64=140150972291120}}, {EPOLLIN|0x2000, {u32=1894523088, u64=140150972358864}}, {EPOLLIN|0x2000, {u32=1894560672, u64=140150972396448}}, {EPOLLIN|0x2000, {u32=1894561368, u64=140150972397144}}, {EPOLLIN|0x2000, {u32=1894809609, u64=140150972645385}}, {EPOLLIN|0x2000, {u32=1894906352, u64=140150972742128}}, {EPOLLIN|0x2000, {u32=1894575289, u64=140150972411065}}, {EPOLLIN|0x2000, {u32=1894898232, u64=140150972734008}}, {EPOLLIN|0x2000, {u32=1894352800, u64=140150972188576}}, {EPOLLIN|0x2000, {u32=1894596401, u64=140150972432177}}, {EPOLLIN|0x2000, {u32=1894587817, u64=140150972423593}}, {EPOLLIN|0x2000, {u32=1894894288, u64=140150972730064}}, {EPOLLIN|0x2000, {u32=1894893824, u64=140150972729600}}, {EPOLLIN|0x2000, {u32=1894896144, u64=140150972731920}}, {EPOLLIN|0x2000, {u32=1894899624, u64=140150972735400}}, {EPOLLIN|0x2000, {u32=1894902872, u64=140150972738648}}, {EPOLLIN|0x2000, {u32=1894904728, u64=140150972740504}}, {EPOLLIN, {u32=1894347000, u64=140150972182776}}, {EPOLLIN, {u32=1894346768, u64=140150972182544}}, {EPOLLIN|0x2000, {u32=1894909600, u64=140150972745376}}, {EPOLLIN|0x2000, {u32=1894905656, u64=140150972741432}}, {EPOLLIN|0x2000, {u32=1894910992, u64=140150972746768}}, {EPOLLIN|0x2000, {u32=1894913312, u64=140150972749088}}, {EPOLLIN|0x2000, {u32=1894915168, u64=140150972750944}}, {EPOLLIN|0x2000, {u32=1894915632, u64=140150972751408}}, {EPOLLIN|0x2000, {u32=1894917720, u64=140150972753496}}, {EPOLLIN|0x2000, {u32=1894693376, u64=140150972529152}}, {EPOLLIN|0x2000, {u32=1894694072, u64=140150972529848}}, {EPOLLIN|0x2000, {u32=1894701032, u64=140150972536808}}, {EPOLLIN|0x2000, {u32=1894696856, u64=140150972532632}}, {EPOLLIN|0x2000, {u32=1894699408, u64=140150972535184}}, {EPOLLIN|0x2000, {u32=1894707064, u64=140150972542840}}, {EPOLLIN|0x2000, {u32=1894701496, u64=140150972537272}}, {EPOLLIN|0x2000, {u32=1894596633, u64=140150972432409}}, {EPOLLIN|0x2000, {u32=1894598025, u64=140150972433801}}, {EPOLLIN|0x2000, {u32=1894388760, u64=140150972224536}}, {EPOLLIN|0x2000, {u32=1894705673, u64=140150972541449}}, {EPOLLIN|0x2000, {u32=1894420544, u64=140150972256320}}, {EPOLLIN|0x2000, {u32=1894447920, u64=140150972283696}}, {EPOLLIN|0x2000, {u32=1894900785, u64=140150972736561}}, {EPOLLIN|0x2000, {u32=1894417529, u64=140150972253305}}, {EPOLLIN|0x2000, {u32=1894453953, u64=140150972289729}}, {EPOLLIN|0x2000, {u32=1894358832, u64=140150972194608}}, {EPOLLIN|0x2000, {u32=1894497568, u64=140150972333344}}, {EPOLLIN|0x2000, {u32=1894737920, u64=140150972573696}}, {EPOLLIN|0x2000, {u32=1894738152, u64=140150972573928}}, {EPOLLIN|0x2000, {u32=1894715185, u64=140150972550961}}, {EPOLLIN|0x2000, {u32=1894564385, u64=140150972400161}}, {EPOLLIN|0x2000, {u32=1894742560, u64=140150972578336}}, {EPOLLIN|0x2000, {u32=1894564616, u64=140150972400392}}, {EPOLLIN|0x2000, {u32=1894484576, u64=140150972320352}}, {EPOLLIN|0x2000, {u32=1894516129, u64=140150972351905}}, {EPOLLIN|0x2000, {u32=1894820745, u64=140150972656521}}, {EPOLLIN|0x2000, {u32=1894466016, u64=140150972301792}}, {EPOLLIN|0x2000, {u32=1894400360, u64=140150972236136}}, {EPOLLIN|0x2000, {u32=1894722377, u64=140150972558153}}, {EPOLLIN|0x2000, {u32=1894395720, u64=140150972231496}}, {EPOLLIN|0x2000, {u32=1894581089, u64=140150972416865}}, {EPOLLIN|0x2000, {u32=1894357440, u64=140150972193216}}, {EPOLLIN|0x2000, {u32=1894490377, u64=140150972326153}}, {EPOLLIN|0x2000, {u32=1894470656, u64=140150972306432}}, {EPOLLIN|0x2000, {u32=1894458825, u64=140150972294601}}, {EPOLLIN|0x2000, {u32=1894891272, u64=140150972727048}}, {EPOLLIN|0x2000, {u32=1894688273, u64=140150972524049}}, {EPOLLIN|0x2000, {u32=1894516361, u64=140150972352137}}, {EPOLLIN|0x2000, {u32=1894386672, u64=140150972222448}}, {EPOLLIN|EPOLLERR|EPOLLHUP|0x2000, {u32=1894553944, u64=140150972389720}}, {EPOLLIN|EPOLLERR|EPOLLHUP|0x2000, {u32=1894820048, u64=140150972655824}}, {EPOLLIN, {u32=1894437249, u64=140150972273025}}, {EPOLLIN|0x2000, {u32=1894494320, u64=140150972330096}}, {EPOLLIN, {u32=1894438177, u64=140150972273953}}, {EPOLLIN, {u32=1894563457, u64=140150972399233}}, {EPOLLIN|0x2000, {u32=1894528888, u64=140150972364664}}, {EPOLLIN, {u32=1894891736, u64=140150972727512}}, {EPOLLIN, {u32=1894380873, u64=140150972216649}}, {EPOLLIN, {u32=1894363937, u64=140150972199713}}, {EPOLLIN, {u32=1894680385, u64=140150972516161}}, {EPOLLIN, {u32=1894583640, u64=140150972419416}}, {EPOLLIN, {u32=1894656256, u64=140150972492032}}, {EPOLLIN, {u32=1894906584, u64=140150972742360}}, {EPOLLIN, {u32=1894594313, u64=140150972430089}}, {EPOLLIN, {u32=1894690825, u64=140150972526601}}, {EPOLLIN, {u32=1894895216, u64=140150972730992}}, {EPOLLIN, {u32=1894521696, u64=140150972357472}}, {EPOLLIN, {u32=1894595705, u64=140150972431481}}, {EPOLLIN, {u32=1894916560, u64=140150972752336}}, {EPOLLIN, {u32=1894710080, u64=140150972545856}}, {EPOLLIN|0x2000, {u32=1894919344, u64=140150972755120}}, {EPOLLIN, {u32=1894454184, u64=140150972289960}}, {EPOLLIN, {u32=1894448848, u64=140150972284624}}, {EPOLLIN, {u32=1894710544, u64=140150972546320}}, {EPOLLIN, {u32=1894406392, u64=140150972242168}}, {EPOLLIN, {u32=1894658344, u64=140150972494120}}, {EPOLLIN|0x2000, {u32=1894918880, u64=140150972754656}}, {EPOLLIN, {u32=1894434000, u64=140150972269776}}, {EPOLLIN, {u32=1894715880, u64=140150972551656}}, {EPOLLIN, {u32=1894905424, u64=140150972741200}}, {EPOLLIN, {u32=1894679688, u64=140150972515464}}, {EPOLLIN, {u32=1894895680, u64=140150972731456}}, {EPOLLIN, {u32=1894907048, u64=140150972742824}}, {EPOLLIN, {u32=1894904032, u64=140150972739808}}, {EPOLLIN, {u32=1894493392, u64=140150972329168}}, {EPOLLIN, {u32=1894562528, u64=140150972398304}}, {EPOLLIN, {u32=1894580857, u64=140150972416633}}, {EPOLLIN, {u32=1894897305, u64=140150972733081}}, {EPOLLIN, {u32=1894809841, u64=140150972645617}}, {EPOLLIN, {u32=1894704744, u64=140150972540520}}, {EPOLLIN, {u32=1894499657, u64=140150972335433}}, {EPOLLIN, {u32=1894706136, u64=140150972541912}}, {EPOLLIN, {u32=1894666464, u64=140150972502240}}, {EPOLLIN, {u32=1894914240, u64=140150972750016}}, {EPOLLIN, {u32=1894580161, u64=140150972415937}}, {EPOLLIN, {u32=1894579928, u64=140150972415704}}, {EPOLLIN, {u32=1894434696, u64=140150972270472}}, {EPOLLIN, {u32=1894897768, u64=140150972733544}}, {EPOLLIN, {u32=1894526569, u64=140150972362345}}, {EPOLLIN, {u32=1894817497, u64=140150972653273}}, {EPOLLIN, {u32=1894817265, u64=140150972653041}}, {EPOLLIN, {u32=1894817033, u64=140150972652809}}, {EPOLLIN, {u32=1894816801, u64=140150972652577}}, {EPOLLIN, {u32=1894473209, u64=140150972308985}}, {EPOLLIN, {u32=1894816569, u64=140150972652345}}, {EPOLLIN, {u32=1894529353, u64=140150972365129}}, {EPOLLIN, {u32=1894407089, u64=140150972242865}}, {EPOLLIN, {u32=1894406161, u64=140150972241937}}, {EPOLLIN, {u32=1894433305, u64=140150972269081}}, {EPOLLIN, {u32=1894405929, u64=140150972241705}}, {EPOLLIN, {u32=1894815873, u64=140150972651649}}, {EPOLLIN, {u32=1894487825, u64=140150972323601}}, {EPOLLIN, {u32=1894815641, u64=140150972651417}}, {EPOLLIN, {u32=1894451865, u64=140150972287641}}, {EPOLLIN, {u32=1894814945, u64=140150972650721}}, {EPOLLIN, {u32=1894452097, u64=140150972287873}}, {EPOLLIN, {u32=1894814713, u64=140150972650489}}, {EPOLLIN, {u32=1894450937, u64=140150972286713}}, {EPOLLIN, {u32=1894493161, u64=140150972328937}}, {EPOLLIN, {u32=1894431913, u64=140150972267689}}, {EPOLLIN, {u32=1894683633, u64=140150972519409}}, {EPOLLIN, {u32=1894451633, u64=140150972287409}}, {EPOLLIN, {u32=1894453489, u64=140150972289265}}, {EPOLLIN, {u32=1894478545, u64=140150972314321}}, {EPOLLIN|0x2000, {u32=1894406625, u64=140150972242401}}, {EPOLLIN, {u32=1894473905, u64=140150972309681}}, {EPOLLIN, {u32=1894480169, u64=140150972315945}}, {EPOLLIN, {u32=1894541417, u64=140150972377193}}, {EPOLLIN, {u32=1894541881, u64=140150972377657}}, {EPOLLIN, {u32=1894814249, u64=140150972650025}}, {EPOLLIN, {u32=1894814017, u64=140150972649793}}, {EPOLLIN, {u32=1894682937, u64=140150972518713}}, {EPOLLIN, {u32=1894682705, u64=140150972518481}}, {EPOLLIN, {u32=1894682473, u64=140150972518249}}, {EPOLLIN|0x2000, {u32=1894539561, u64=140150972375337}}, {EPOLLIN, {u32=1894681545, u64=140150972517321}}, {EPOLLIN, {u32=1894681313, u64=140150972517089}}, {EPOLLIN|0x2000, {u32=1894602896, u64=140150972438672}}, {EPOLLIN|0x2000, {u32=1894603128, u64=140150972438904}}, {EPOLLIN, {u32=1894603360, u64=140150972439136}}, {EPOLLIN, {u32=1894603592, u64=140150972439368}}, {EPOLLIN, {u32=1894603824, u64=140150972439600}}, {EPOLLIN, {u32=1894605216, u64=140150972440992}}, {EPOLLIN, {u32=1894604984, u64=140150972440760}}, {EPOLLIN, {u32=1894605680, u64=140150972441456}}, {EPOLLIN, {u32=1894606144, u64=140150972441920}}, {EPOLLIN, {u32=1894606840, u64=140150972442616}}, {EPOLLIN, {u32=1894608000, u64=140150972443776}}, {EPOLLIN, {u32=1894609160, u64=140150972444936}}, {EPOLLIN, {u32=1894609392, u64=140150972445168}}, {EPOLLIN, {u32=1894611480, u64=140150972447256}}, {EPOLLIN, {u32=1894611248, u64=140150972447024}}, {EPOLLIN, {u32=1894611712, u64=140150972447488}}, {EPOLLIN, {u32=1894612872, u64=140150972448648}}, {EPOLLIN|EPOLLOUT, {u32=1894644193, u64=140150972479969}}, {EPOLLIN|EPOLLOUT, {u32=1894643729, u64=140150972479505}}, {EPOLLIN|EPOLLOUT, {u32=1894643497, u64=140150972479273}}, {EPOLLIN|EPOLLOUT, {u32=1894643961, u64=140150972479737}}, {EPOLLIN|EPOLLOUT, {u32=1894643265, u64=140150972479041}}, {EPOLLIN|EPOLLOUT, {u32=1894642801, u64=140150972478577}}, {EPOLLIN|EPOLLOUT, {u32=1894643033, u64=140150972478809}}, {EPOLLIN|EPOLLOUT, {u32=1894642105, u64=140150972477881}}, {EPOLLIN|EPOLLOUT, {u32=1894641873, u64=140150972477649}}, {EPOLLIN|EPOLLOUT, {u32=1894641641, u64=140150972477417}}, {EPOLLIN, {u32=1894898928, u64=140150972734704}}, {EPOLLIN, {u32=1894422401, u64=140150972258177}}, {EPOLLIN, {u32=1894505689, u64=140150972341465}}, {EPOLLIN, {u32=1894900552, u64=140150972736328}}, {EPOLLIN, {u32=1894562760, u64=140150972398536}}, {EPOLLIN, {u32=1894506617, u64=140150972342393}}, {EPOLLIN|0x2000, {u32=1894699872, u64=140150972535648}}, {EPOLLIN|0x2000, {u32=1894729569, u64=140150972565345}}, {EPOLLIN, {u32=1894728641, u64=140150972564417}}, {EPOLLIN|0x2000, {u32=1894436321, u64=140150972272097}}, {EPOLLIN, {u32=1894705904, u64=140150972541680}}, {EPOLLIN|0x2000, {u32=1894894057, u64=140150972729833}}, {EPOLLIN, {u32=1894518680, u64=140150972354456}}, {EPOLLIN, {u32=1894557656, u64=140150972393432}}, {EPOLLIN|0x2000, {u32=1894558817, u64=140150972394593}}, {EPOLLIN, {u32=1894397344, u64=140150972233120}}, {EPOLLIN, {u32=1894415905, u64=140150972251681}}, {EPOLLIN, {u32=1894440264, u64=140150972276040}}, {EPOLLIN|0x2000, {u32=1894439568, u64=140150972275344}}, {EPOLLIN|0x2000, {u32=1894443512, u64=140150972279288}}, {EPOLLIN|0x2000, {u32=1894441888, u64=140150972277664}}, {EPOLLIN|0x2000, {u32=1894518448, u64=140150972354224}}, {EPOLLIN|0x2000, {u32=1894464856, u64=140150972300632}}, {EPOLLIN, {u32=1894459520, u64=140150972295296}}, {EPOLLIN|0x2000, {u32=1894456736, u64=140150972292512}}, {EPOLLIN|0x2000, {u32=1894404304, u64=140150972240080}}, {EPOLLIN|0x2000, {u32=1894446528, u64=140150972282304}}, {EPOLLIN|0x2000, {u32=1894403376, u64=140150972239152}}, {EPOLLIN|0x2000, {u32=1894467872, u64=140150972303648}}, {EPOLLIN, {u32=1894416600, u64=140150972252376}}, {EPOLLIN, {u32=1894388992, u64=140150972224768}}, {EPOLLIN|0x2000, {u32=1894395256, u64=140150972231032}}, {EPOLLIN, {u32=1894740704, u64=140150972576480}}, {EPOLLIN|0x2000, {u32=1894739545, u64=140150972575321}}, {EPOLLIN, {u32=1894557888, u64=140150972393664}}, {EPOLLIN|0x2000, {u32=1894556960, u64=140150972392736}}, {EPOLLIN|0x2000, {u32=1894682009, u64=140150972517785}}, {EPOLLIN, {u32=1894463232, u64=140150972299008}}, {EPOLLIN, {u32=1894365329, u64=140150972201105}}, {EPOLLIN|0x2000, {u32=1894544200, u64=140150972379976}}, {EPOLLIN, {u32=1894683865, u64=140150972519641}}, {EPOLLIN, {u32=1894826081, u64=140150972661857}}, {EPOLLIN, {u32=1894480632, u64=140150972316408}}, {EPOLLIN|EPOLLERR|EPOLLHUP|0x2000, {u32=1894548145, u64=140150972383921}}, {EPOLLIN|EPOLLERR|EPOLLHUP|0x2000, {u32=1894524480, u64=140150972360256}}, {EPOLLIN|EPOLLERR|EPOLLHUP|0x2000, {u32=1894640945, u64=140150972476721}}, {EPOLLIN|EPOLLERR|EPOLLHUP|0x2000, {u32=1894642337, u64=140150972478113}}, {EPOLLIN, {u32=1894369041, u64=140150972204817}}, {EPOLLIN, {u32=1894640713, u64=140150972476489}}, {EPOLLIN, {u32=1894639785, u64=140150972475561}}, {EPOLLIN, {u32=1894639089, u64=140150972474865}}}, 512, 1000) = 400\nrecvfrom(214, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(214, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(214, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(214, \"\\t\\2245g\\343\\257\\372\\262\\270\\313\\304\\231\\217e0P~lof\\332\\304\\352WZ,\\0\\230H\\203<\"..., 175) = 175\nwrite(214, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?ml#\\277\\342\\264l$\\3\\330\\277\\22H\\23\\210\\372\\207\\276\"..., 5979) = 5979\nread(214, 0x110e0b3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nrecvfrom(215, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(215, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(215, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(215, \"\\\"^\\276\\177ypvG[}\\207\\21\\226S[\\264\\3\\323/\\336b\\377mR\\n\\26<'D\\357\\325\\324\"..., 175) = 175\nwrite(215, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\201\\347\\251\\17\\t\\30\\32\\367\\0\\204W\\273z\\373\\263\\344\"..., 5979) = 5979\nread(215, \"\", 33093)                    = 0\nclose(215)                              = 0\nrecvfrom(216, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(216, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(216, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(216, \"\\312S\\334\\244\\250r4)}\\300_!\\21\\270e\\372\\277\\4\\254\\263A\\\"\\261\\207\\37\\247fK\\243\\306\\215\\353\"..., 175) = 175\nwrite(216, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\372g\\314\\230^\\232\\337\\2%\\371\\221R\\273\\351hb}\"..., 5979) = 5979\nread(216, 0x110e0b3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nrecvfrom(217, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(217, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(217, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(217, \"\\10\\343cX\\24\\311N\\233\\216\\261\\222\\274\\347A\\367\\315\\223\\201\\310\\375\\322\\215\\232\\20\\316R\\250\\246\\261\\257Y\\231\"..., 175) = 175\nwrite(217, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\270bq:\\320za\\250\\270\\244t\\336\\231u\\\\36\\250\"..., 5979) = 5979\nread(217, \"\", 33093)                    = 0\nclose(217)                              = 0\nrecvfrom(218, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(218, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(218, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(218, \"\\260\\256\\204\\307\\226\\311ZLF\\0\\355\\306\\326\\371\\232\\200\\f\\305\\30\\326V\\22241\\37\\317\\372\\32\\331\\261\\302\"..., 175) = 175\nwrite(218, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?mm\\264p\\231B\\203?\\330\\241\\222\\1\\363\\270\\34\\254\\317\\366\"..., 5979) = 5979\nread(218, \"\", 33093)                    = 0\nclose(218)                              = 0\nrecvfrom(220, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(220, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(220, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(220, \"\\346\\352\\305\\334T\\362\\251\\2225o_\\254;\\246\\235]w\\337\\26\\217Gan\\254\\203\\212\\354\\205\\311?\\260?\"..., 175) = 175\nwrite(220, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\31'6\\231>\\317\\252\\314\\366\\256\\213\\233PV\\31\\360\"..., 5979) = 5979\nread(220, \"\", 33093)                    = 0\nclose(220)                              = 0\nrecvfrom(221, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(221, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(221, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(221, \"g\\336$\\4\\353\\323yo\\216\\222\\377n\\254\\34\\3559;(Q~U %\\250\\3\\\\235\\260M\\v\\207\"..., 175) = 175\nwrite(221, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?mK\\355\\235>w\\317Is^\\217\\307\\261\\316g\\335\\250\\362\"..., 5979) = 5979\nread(221, \"\", 33093)                    = 0\nclose(221)                              = 0\nrecvfrom(222, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(222, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(222, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(222, \"\\200\\16\\306\\363\\322\\323\\317D)\\22\\212\\247C)\\377K\\37D\\273M\\263|\\377G\\300\\313\\213\\262xa@\\275\"..., 175) = 175\nwrite(222, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?mv\\350\\273\\275z\\210\\3132xso\\335\\341\\312\\353\\234\\260\"..., 5979) = 5979\nread(222, \"\", 33093)                    = 0\nclose(222)                              = 0\nrecvfrom(223, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(223, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(223, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(223, \"\\354f\\334c\\340\\241\\213>%\\3221\\226\\316l\\320'h\\370\\256C\\272\\4\\343\\fd\\346\\256\\177\\373\\324R\\325\"..., 175) = 175\nwrite(223, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\17\\276\\375.\\271;\\304\\2505R\\316\\351\\254\\257\\352\\316G\"..., 5979) = 5979\nread(223, \"\", 33093)                    = 0\nclose(223)                              = 0\nrecvfrom(224, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(224, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(224, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(224, \"SC\\321\\343\\377\\247\\31Yj\\333bl\\206\\267L\\210\\223\\352x\\334dX\\16\\6NJ\\5\\301\\343\\336&(\"..., 175) = 175\nwrite(224, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\v\\212tu\\325Vm\\240\\211\\265\\365\\257\\211\\315\\300<\\354\"..., 5979) = 5979\nread(224, \"\", 33093)                    = 0\nclose(224)                              = 0\nrecvfrom(225, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(225, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(225, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(225, \"i\\376\\375#\\202|!\\224\\350\\20\\305'\\237\\16\\372\\302E\\323 \\24\\234\\35M1D\\37\\233y\\207\\253\\10\"..., 175) = 175\nwrite(225, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m--Z\\20Q\\24M\\367\\34\\376\\315\\16\\\\\\0\\275j\\344\"..., 5979) = 5979\nread(225, 0x110e0b3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nrecvfrom(226, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(226, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(226, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(226, \"\\205\\364U\\4YZ\\260i\\377\\3025+z\\235%\\4\\362\\331\\363\\30\\330\\303L_\\250O1\\336\\215B\\324\\357\"..., 175) = 175\nwrite(226, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\327\\353\\317\\320\\1B;\\r\\251\\347\\v<-+q\\201\\23\"..., 5979) = 5979\nread(226, \"\", 33093)                    = 0\nclose(226)                              = 0\nrecvfrom(227, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(227, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(227, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(227, \"g_\\\"\\271\\314\\3333x\\350\\213!X\\\\B{\\210\\0278\\204\\341\\340!\\323\\233\\245\\352:8Y\\331\\312\\32\"..., 175) = 175\nwrite(227, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\217\\250[\\277 CJ+\\374\\23V\\211X\\201\\235\\237y\"..., 5979) = 5979\nread(227, \"\", 33093)                    = 0\nclose(227)                              = 0\nrecvfrom(228, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(228, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(228, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(228, \"\\260\\230ZP{\\264\\312\\247%\\260Q\\302\\260EM\\220\\27M\\304\\267\\254\\332\\27\\303Fl\\375\\353\\232\\313\\265\\2\"..., 175) = 175\nwrite(228, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\177\\237\\221U\\304+\\317\\2722,\\26v\\304\\24\\0350\\204\"..., 5979) = 5979\nread(228, 0x110e0b3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nrecvfrom(229, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(229, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(229, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(229, \"X]\\205\\3462\\236\\205\\300\\254\\5i\\215\\374j\\376y\\256e\\274\\313\\357\\35\\275\\203\\233\\245\\243k\\243*\\317\\332\"..., 175) = 175\nwrite(229, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\0\\316\\361R\\330@q#z\\7\\20T\\21$\\3021{\"..., 5979) = 5979\nread(229, 0x110e0b3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nrecvfrom(230, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(230, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(230, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(230, \"\\216\\257\\304\\353d\\3026\\327\\227\\226I\\301\\250%\\330\\6\\345\\272z\\250\\270Q\\243\\216;\\240\\246\\3729P0\\343\"..., 175) = 175\nwrite(230, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m\\231\\226Q\\206\\346]w\\247\\236\\223\\323\\270\\270\\21\\265D\\26\"..., 5979) = 5979\nread(230, \"\", 33093)                    = 0\nclose(230)                              = 0\nrecvfrom(232, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(232, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(232, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(232, \"hISl\\313\\244\\244Q\\33\\347\\321\\373Jl\\342B\\261w[\\200\\213\\242\\272\\207\\366\\254\\f\\200%\\32\"..., 175) = 175\nwrite(232, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m_\\345\\300iF\\\"\\270\\334\\214\\261\\366\\263\\222\\317z\\356\\363\"..., 5979) = 5979\nread(232, \"\", 33093)                    = 0\nclose(232)                              = 0\nrecvfrom(233, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(233, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(233, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(233, \"\\233\\327\\177\\17\\6\\201\\255?=?\\200\\np[\\255\\25\\255=\\10\\317:M\\236<\\357w{\\224/\\217\\261\\312\"..., 175) = 175\nwrite(233, \"\\26\\3\\3\\0N\\2\\0\\0J\\3\\3Z9?m`\\335C\\263\\212\\372\\2657\\357\\2076\\230%\\36\\335\\237\\\"\"..., 5979) = 5979\nread(233, \"\", 33093)                    = 0\nclose(233)                              = 0\nrecvfrom(234, \"\\26\", 1, MSG_PEEK, NULL, NULL) = 1\nsetsockopt(234, SOL_TCP, TCP_NODELAY, [1], 4) = 0\nread(234, \"\\26\\3\\1\\0\\265\\1\\0\\0\\261\\3\\3\", 11) = 11\nread(886, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4\\355u\\376\\241p\\367\\352\\233\\341\\377\\25\\367O\\303\\225]wA%\\235h\"..., 33093) = 191\nwrite(886, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2rK\"..., 274) = 274\nread(886, \"\", 33093)                    = 0\nclose(886)                              = 0\nread(888, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4\\375\\3224*\\341\\2326 \\312\\245\\260R\\3637\\244kzd\\344\\256\"..., 33093) = 191\nwrite(888, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2rn\"..., 274) = 274\nread(888, \"\", 33093)                    = 0\nclose(888)                              = 0\nread(892, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4\\254\\264\\345\\16\\305\\271\\360\\350\\2620\\377\\357T\\226\\316\\22223\\301\\204\\271\"..., 33093) = 191\nwrite(892, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2r\\326\"..., 274) = 274\nread(892, \"\", 33093)                    = 0\nclose(892)                              = 0\nread(895, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4\\272]\\371\\332\\v\\225\\276\\363\\272\\3111z\\343f\\375B\\357\\350\\367r\\304\"..., 33093) = 191\nwrite(895, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2r\\303\"..., 274) = 274\nread(895, \"\", 33093)                    = 0\nclose(895)                              = 0\nread(896, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4\\324\\201\\22\\373\\203(\\2307_2\\304\\205\\212+a\\20d\\362\\273\\316\\253\"..., 33093) = 191\nwrite(896, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2ru\"..., 274) = 274\nread(896, \"\", 33093)                    = 0\nclose(896)                              = 0\nread(900, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4\\331\\247\\227:\\373\\345\\6\\3340\\223\\7N\\17\\244\\332\\250v\\342\\34T\"..., 33093) = 191\nwrite(900, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2rg\"..., 274) = 274\nread(900, \"\", 33093)                    = 0\nclose(900)                              = 0\nread(902, \"\\26\\3\\3\\0F\\20\\0\\0BA\\4q\\312\\274V\\340/\\n/\\241\\371`]\\33L\\275\\nM\\324\\fb)\"..., 33093) = 191\nwrite(902, \"\\26\\3\\3\\0\\332\\4\\0\\0\\326\\0\\0\\1,\\0\\320\\327\\341C\\22U^\\30\\373\\316\\2744\\304\\307d\\2r1\"..., 274) = 274\nread(902, \"\", 33093)                    = 0\nclose(902)\nepoll_wait(183, {{EPOLLIN|EPOLLOUT, {u32=3271896816, u64=140143759798000}}}, 512, 1000) = 1\nrecvfrom(1205, \"HTTP/1.1 200 OK\\r\\nContent-Type: a\"..., 4096, 0, NULL, NULL) = 2493\nwrite(1031, \"\\27\\3\\3\\0\\207\\30\\207\\346\\276\\371\\333\\316\\37\\204\\2330|)\\276W_\\337#S\\377-1\\254\\236E\\\\220\"..., 140) = 140\nwrite(14, \"\\n\", 1)                      = 1\nwrite(16, \"10038|pub-6281674756316900||com.\"..., 249) = 249\nread(1031, 0x13c8b43, 33093)            = -1 EAGAIN (Resource temporarily unavailable)\nepoll_wait(183, {{EPOLLIN|0x2000, {u32=3272122552, u64=140143760023736}}}, 512, 40435) = 1\nread(75, \"\", 33093)                     = 0\nclose(75)                               = 0\nepoll_wait(183, {{EPOLLIN, {u32=3271628392, u64=140143759529576}}}, 512, 39887) = 1\naccept4(35, 0x7fffbc459a10, [112], SOCK_NONBLOCK) = -1 EAGAIN (Resource temporarily unavailable)\nepoll_wait(183, {{EPOLLIN, {u32=3271626768, u64=140143759527952}}}, 512, 39822) = 1\naccept4(26, 0x7fffbc459a10, [112], SOCK_NONBLOCK) = -1 EAGAIN (Resource temporarily unavailable)\nepoll_wait(183, {{EPOLLIN|0x2000, {u32=3271942289, u64=140143759843473}}}, 512, 39698) = 1\nread(82, \"\", 33093)                     = 0\nclose(82)                               = 0\nepoll_wait(183, {{EPOLLIN|0x2000, {u32=3272114896, u64=140143760016080}}}, 512, 39594) = 1\nread(94, \"\", 33093)                     = 0\nclose(94)                               = 0\nepoll_wait(183, {{EPOLLIN|0x2000, {u32=3271931384, u64=140143759832568}}}, 512, 39474) = 1\nread(87, \"\", 33093)                     = 0\nclose(87)                               = 0\nepoll_wait(183, {{EPOLLIN|0x2000, {u32=3271759241, u64=140143759660425}}}, 512, 39304) = 1\nread(86, \"\", 33093)                     = 0\nclose(86)                               = 0\nread(814, 0xd846b3, 33093)              = -1 EAGAIN (Resource temporarily unavailable)\naccept4(27, {sa_family=AF_INET, sin_port=htons(34704), sin_addr=inet_addr(\"74.125.190.133\")}, [16], SOCK_NONBLOCK) = 2468\nconnect(566, {sa_family=AF_INET, sin_port=htons(8080), sin_addr=inet_addr(\"10.111.144.106\")}, 16) = -1 EINPROGRESS (Operation now in progress)\n```. > But interestingly it does not mention the openresty package. So you are not really using our official binary build released on our openresty.org web site.\nI have downloaded tar file from official website and then compiled it from source. \n\nAlso, I've noted that you use your own version of lua-cjson library instead of OpenResty's. It may cause issues and you'd better use OpenResty's version of lua-cjson. See below:\n\nWe use these commands -\nluarocks install luacrypto\nluarocks install lua-cjson\nluarocks install luasocket\n\nIt seems that you have some unexpected daemon or cron jobs configured in your system which frequently send USR2 or HUP signals to your nginx master processes\n\nI have some logrotate cron jobs but they send USR1\n{\n   missingok\n   size 1\n   create\n   notifempty\n   rotate 1\n   dateformat -%Y%m%d-%s\n   prerotate\n     sleep 1\n   endscript\n   postrotate\n     kill -USR1 `cat /var/run/nginx.pid`\n   endscript\n}. did you see anything suspicious in strace logs that i posted -\nread(289, 0x136d9c3, 33093)             = -1 EAGAIN (Resource temporarily unavailable)\nIs it ok?\n. I tried epoll-loop-blocking-distr tool -\nDuring 100% CPU :\n```\n$ ./samples/epoll-loop-blocking-distr.sxx -x 38110  --arg time=10\nStart tracing 38110 (/usr/sbin/nginx)...\nPlease wait for 10 seconds.\nDistribution of epoll loop blocking latencies (in milliseconds)\nmax/avg/min: 3273/2392/400\nvalue |-------------------------------------------------- count\n   64 |                                                   0\n  128 |                                                   0\n  256 |@                                                  1\n  512 |                                                   0\n 1024 |                                                   0\n 2048 |@@@                                                3\n 4096 |                                                   0\n 8192 |                                                   0\n$ ./samples/epoll-loop-blocking-distr.sxx -x 40798  --arg time=10\nStart tracing 40798 (/usr/sbin/nginx)...\nPlease wait for 10 seconds.\nDistribution of epoll loop blocking latencies (in milliseconds)\nmax/avg/min: 2828/2359/1438\nvalue |-------------------------------------------------- count\n  256 |                                                   0\n  512 |                                                   0\n 1024 |@                                                  1\n 2048 |@@                                                 2\n 4096 |                                                   0\n 8192 |                                                   0\n$./samples/epoll-loop-blocking-distr.sxx -x 8050  --arg time=60\nStart tracing 8050 (/usr/sbin/nginx)...\nPlease wait for 60 seconds.\nDistribution of epoll loop blocking latencies (in milliseconds)\nmax/avg/min: 3308/2442/181\nvalue |-------------------------------------------------- count\n   32 |                                                    0\n   64 |                                                    0\n  128 |@                                                   1\n  256 |                                                    0\n  512 |@                                                   1\n 1024 |@@                                                  2\n 2048 |@@@@@@@@@@@@@@@@@@@@                               20\n 4096 |                                                    0\n 8192 |                                                    0\n```\nUnder normal CPU LOAD:\n```\n$ ./samples/epoll-loop-blocking-distr.sxx -x 40795  --arg time=10\nStart tracing 40795 (/usr/sbin/nginx)...\nPlease wait for 10 seconds.\nDistribution of epoll loop blocking latencies (in milliseconds)\nmax/avg/min: 5/0/0\nvalue |-------------------------------------------------- count\n    0 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  16987\n    1 |@@@@                                                1526\n    2 |                                                       2\n    4 |                                                       3\n    8 |                                                       0\n   16 |                                                       0\n$ ./samples/epoll-loop-blocking-distr.sxx -x 40800  --arg time=10\nStart tracing 40800 (/usr/sbin/nginx)...\nPlease wait for 10 seconds.\nDistribution of epoll loop blocking latencies (in milliseconds)\nmax/avg/min: 5/0/0\nvalue |-------------------------------------------------- count\n    0 |@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  34003\n    1 |@@@@                                                3315\n    2 |                                                      23\n    4 |                                                       3\n    8 |                                                       0\n   16 |                                                       0\n```\nThese are the sample-bt graph. In high CPU uses graph, bn_mul_mountis taking 3/4 CPU and something about SSL also. Server communication is on HTTPS. Do you think that it could the problem?\n$ ./sample-bt -p 14940  -t 10 -u -a '-DMAXSKIPPED=10000' > a.bt\n$ ./sample-bt -p 22105  -t 10 -k -a '-DMAXSKIPPED=10000' > b.bt\nnormal_cpu_load_kernal2.svg.zip\nnormal_cpu_load_user2.svg.zip\nfull_cpu_load_user2.svg.zip\nfull_cpu_load_kernal2.svg.zip\n. > It seems that you have some unexpected daemon or cron jobs configured in your system which frequently send USR2 or HUP signals to your nginx master processes\nWe have some cron-job that send nginx -s reload periodically (every 15 mins) after updating some  files (used as lua table internally in code using require ) so that updated value of lua-table can be used in code. . I have updated openssl and complied openresty again. I have also added SSL session cache & cipher. I think the problem is reload (which may update lua-table file) which happens every 15 mins and it kills worker so again SSL connection get created & so no use of session cache (is it correct?).\nBefore i close this thread, is it possible that some/no worker get closed by sudo nginx -s reloadcommand ? i see it some time. what if there is no change in config or any lua file/code? will it still start new worker & closing old ones?\n```\nserver\n{\n  listen 80;\n  listen 443 ssl;\n  lua_code_cache on;\nssl_dhparam /dhparams.pem;\n  ssl_prefer_server_ciphers on;\nssl_certificate     /etc/ssl/certs/user.crt;\n  ssl_certificate_key /etc/ssl/certs/user.key;\nssl_buffer_size 8k;\nssl_ciphers   EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\nssl_session_cache shared:SSL:20m;\n  ssl_session_timeout 180m;\nclient_body_in_single_buffer on;\n  client_body_buffer_size 24k;\n  client_max_body_size 24k;\nkeepalive_requests 1000000;\n  keepalive_timeout 76s;\n$] openssl version\nOpenSSL 1.0.2n  7 Dec 2017\n$ ./configure --with-luajit --sbin-path=/usr/sbin --with-http_geoip_module --pid-path=/var/run/nginx.pid  --with-http_stub_status_module  --with-pcre-jit  --with-ipv6 --with-dtrace-probes --with-http_ssl_module\n``. There are some nginx error indmsg`\nnginx: page allocation failure. order:1, mode:0x20\nPid: 24646, comm: nginx Not tainted 2.6.32-504.23.4.el6.x86_64 #1\nCall Trace:\n [<ffffffff811345aa>] ? __alloc_pages_nodemask+0x74a/0x8d0\n [<ffffffff811735c2>] ? kmem_getpages+0x62/0x170\n [<ffffffff811741da>] ? fallback_alloc+0x1ba/0x270\n [<ffffffff81173c2f>] ? cache_grow+0x2cf/0x320\n [<ffffffff81173f59>] ? ____cache_alloc_node+0x99/0x160\n [<ffffffff81174d63>] ? kmem_cache_alloc+0x123/0x190\n [<ffffffff8144cd38>] ? sk_prot_alloc+0x48/0x1c0\n [<ffffffff8144df62>] ? sk_clone+0x22/0x2e0\n [<ffffffff814a2176>] ? inet_csk_clone+0x16/0xd0\n [<ffffffff814bbca3>] ? tcp_create_openreq_child+0x23/0x470\n [<ffffffff814b944d>] ? tcp_v4_syn_recv_sock+0x4d/0x310\n [<ffffffff814de6d5>] ? cookie_v4_check+0x595/0x680\n [<ffffffff814b4079>] ? tcp_send_ack+0xd9/0x120\n [<ffffffff814b8f6d>] ? tcp_v4_do_rcv+0x43d/0x490\n [<ffffffff8144bd85>] ? release_sock+0x65/0x110\n [<ffffffff814a2b1f>] ? inet_csk_accept+0x8f/0x240\n [<ffffffff8118f8d8>] ? alloc_file+0x98/0xe0\n [<ffffffff814ca19d>] ? inet_accept+0x2d/0x130\n [<ffffffff81449935>] ? sys_accept4+0x155/0x2b0\n [<ffffffff810e5e67>] ? audit_syscall_entry+0x1d7/0x200\n [<ffffffff8100b0f2>] ? system_call_fastpath+0x16/0x1b\nDo you think that it's relevant to us?. i have disabled reload cron now. I will update you soon.. i have build openresty with latest openssl 1.0.2n and added timeout in downstream connection. I also optimized cron jobs that reload it. This solved it.. ",
    "davidsiracusa": "Making a second call to set the ngx.shared.DICT.expire after each shm:incr would be wasteful. \nWith multiple workers, and threads, performing a get to check to see if the key exists, may reduce the calls to ngx.shared.DICT.expire somewhat.  Given the race condition, multiple calls would still happen under load. \nThe call to ngx.shared.DICT.expire would have to generate a hash, perform a lookup,  lock, set the expiry and unlock.  The actual expiration will be somewhat later, not worried.  \nIt would still be a good idea to set the exptime precisely on a newly allocated key within the incr, it could be set once, subsequent incr would simply perform the atomic increment.  \nAs far as openresty, somewhat tied to the Kong version upgrade process, I built the version of openresty tied to our Kong 0.11.0 in order to address it in the short run.  The most recent Kong 0.12 rc did upgrade openresty however ngx_http_lua_shdict.c doesn't expose ngx_http_lua_shdict_expire (expire).\n. I'm sorry my bug was so Kong biased.\nI should have created an example which only called incr.\nCalling only incr, yields a leak as it never expires. There are many cases that this is okay.\nI will contribute, thanks.. @agentzh\u2019s is now open to adding a ttl argument to incr.  As described above doing so is more efficient than calling expire from Kong.  Calling get/set for the purpose of rate limiting is not a replacement, as increment needs to be synchronized.. I found a call to ngx_http_lua_ffi_shdict_set_expire in lua resty core.\nWhy multiply exptime by 1000, when exptime is in seconds in ngx_http_lua_shdict.c for some of the other calls?\nI reason that sub second granularity is a good thing, I'd want that.  \nDocumentation, or decorating the name exptime with a suffix indicating milliseconds would address that.\nlocal rc = C.ngx_http_lua_ffi_shdict_set_expire(zone, key, key_len,  exptime * 1000) \n. Thanks. If I run .configure with: --with-debug, is there anything else I need to do to see dd (debug) output?. Thanks, can you please provide git path/branch.. For temporary debugging purposes I modified the ffi variants to return additional context when an error occurs in ngx_http_lua_shdict.c.\nI configured as such: \n./configure --with-pcre-jit --with-ipv6 --without-http_gzip_module --with-openssl=/usr/local/src/openssl-1.0.2a  --with-luajit\nFollowed by a make and make install.\nI assumed the built files are:\nlibluajit-5.1.so.2.1.0\nlibluajit-5.1.a\nI replaced the existing files on the test system, restarted, leaving the symlinks.\nI'm not seeing my added error context.\nAre my configuration parameters correct?\n. Thanks\n. I see that's it's been merged into master.  I'm building openresty, rather than building the module separately.  I see that there is a configure option to exclude the module: --without-http_lua_module, so I assume it's being built. If I introduce a purposeful syntax error in ngx_http_lua_shdict.c, I receive an expected build error.  What I can't explain is why added experimental logic added to ngx_http_lua_shdict.c isn't present at runtime.  I see the newly libluajit-5.1.so.2.1.0 being loaded via lsof into the nginx worker processes.  I'm less familiar with native module runtime behavior under Linux, so I apologize what must be a very basic question.. I figured it out, yes it was silly. . I noticed that ngx-shm sometimes faults when checking a worker.\nbash-4.1$ ./ngx-shm -p 28577 -n kong_cache\nTracing 28577 (/usr/local/openresty/nginx/sbin/nginx)...\nshm zone \"kong_cache\"\n    owner: ngx_http_lua_shared_memory\n    total size: 1048576 KB\n    free pages: 1029488 KB (257372 pages, 1 blocks)\n10 microseconds elapsed in the probe handler.\nbash-4.1$ \nbash-4.1$ ./ngx-shm -p 28576 -n kong_cache\nTracing 28576 (/usr/local/openresty/nginx/sbin/nginx)...\nshm zone \"kong_cache\"\n    owner: ngx_http_lua_shared_memory\n    total size: 1048576 KB\n    free pages: 1029488 KB (257372 pages, 1 blocks)\n11 microseconds elapsed in the probe handler.\nbash-4.1$ \nbash-4.1$ ./ngx-shm -p 28578 -n kong_cache\nTracing 28578 (/usr/local/openresty/nginx/sbin/nginx)...\nshm zone \"kong_cache\"\n    owner: ngx_http_lua_shared_memory\n    total size: 1048576 KB\n    free pages: 1029488 KB (257372 pages, 1 blocks)\n11 microseconds elapsed in the probe handler.\nbash-4.1$ \nbash-4.1$ ./ngx-shm -p 28580 -n kong_cache\nERROR: read fault [man error::fault] at 0x00007f1f543b31b0 (addr) near operator '@cast' at :76:26\nTracing 28580 (/usr/local/openresty/nginx/sbin/nginx)...\nshm zone \"kong_cache\"\n    owner: ngx_http_lua_shared_memory\n    total size: 1048576 KB\nWARNING: Number of errors: 1, skipped probes: 0\nWARNING: /usr/bin/staprun exited with status: 1\nPass 5: run failed.  [man error::pass5]\nbash-4.1$ ./ngx-shm -p 28579 -n kong_cache\nTracing 28579 (/usr/local/openresty/nginx/sbin/nginx)...\nshm zone \"kong_cache\"\n    owner: ngx_http_lua_shared_memory\n    total size: 1048576 KB\n    free pages: 1029488 KB (257372 pages, 1 blocks)\n11 microseconds elapsed in the probe handler.\n. Done, thanks.\nhttps://github.com/openresty/openresty-systemtap-toolkit/issues/43\n. ",
    "geniuss99": "Done.. You forgot to mention there are also tabs instead of spaces :)\nActually those \\ symbols are not aligned in the original file \"makefile.msvc\" used as a base.\nI've aligned them.. ",
    "craveica": "The certificate is from https://support.cloudflare.com/hc/en-us/article_attachments/201243967/origin-pull-ca.pem\nI tested on nginx 1.13.8 (+ openresty patches) and openssl 1.1.0g and the crash is the same.\nI haven't tested on vanilla nginx. My config files are huge, it will take some time to find a minimal case.\n. Trying to get a minimal config file I've got something different (possible related)\n``\nCore was generated bynginx: worker process                                                         '.\nProgram terminated with signal 11, Segmentation fault.\n0  remove_session_lock (lck=, c=, ctx=) at ssl_sess.c:845\n845         if ((r = lh_SSL_SESSION_retrieve(ctx->sessions, c)) == c) {\n(gdb) bt\n0  remove_session_lock (lck=, c=, ctx=) at ssl_sess.c:845\n1  SSL_CTX_remove_session (ctx=ctx@entry=0x0, c=c@entry=0x8ccbc0) at ssl_sess.c:834\n2  0x000000000044c0a1 in ngx_ssl_remove_cached_session (ssl=0x0, sess=0x8ccbc0) at src/event/ngx_event_openssl.c:2721\n3  0x000000000045d014 in ngx_http_process_request (r=0x9229d0) at src/http/ngx_http_request.c:1921\n4  0x000000000045d70b in ngx_http_process_request_line (rev=0x90aa20) at src/http/ngx_http_request.c:1049\n5  0x0000000000446ab7 in ngx_epoll_process_events (cycle=, timer=, flags=) at src/event/modules/ngx_epoll_module.c:902\n6  0x000000000043df3b in ngx_process_events_and_timers (cycle=cycle@entry=0x8bd4c0) at src/event/ngx_event.c:252\n7  0x00000000004449d2 in ngx_worker_process_cycle (cycle=cycle@entry=0x8bd4c0, data=data@entry=0x0) at src/os/unix/ngx_process_cycle.c:815\n8  0x00000000004434b4 in ngx_spawn_process (cycle=cycle@entry=0x8bd4c0, proc=proc@entry=0x444960 , data=data@entry=0x0,\nname=name@entry=0x542645 \"worker process\", respawn=respawn@entry=-3) at src/os/unix/ngx_process.c:198\n\n9  0x0000000000444e34 in ngx_start_worker_processes (cycle=cycle@entry=0x8bd4c0, n=1, type=type@entry=-3) at src/os/unix/ngx_process_cycle.c:396\n10 0x0000000000445748 in ngx_master_process_cycle (cycle=cycle@entry=0x8bd4c0) at src/os/unix/ngx_process_cycle.c:135\n11 0x000000000041f162 in main (argc=, argv=) at src/core/nginx.c:381\n(gdb) quit\n```\nThis is the same openresty and here is a small conf file\n```\nworker_processes 1;\nerror_log logs/error.log debug;\nworker_rlimit_core 500M;\nworking_directory /tmp;\nevents {}\nhttp {\n    ssl_client_certificate origin-pull-ca.pem;\n    ssl_verify_client on;\n    server {\n        listen 443 default_server ssl;\n        server_name _;\n        ssl_certificate      cert.pem;\n        ssl_certificate_key  cert.key;\n    }\nserver {\n    listen 443;\n    server_name example.com;\n}\n\n}\n```\ncert is a self-generated certificate and all I use is curl -k https://example.com\n. @spacewander \nIf you can't reproduce it, maybe it's my hardware/environment.\n. https://trac.nginx.org/nginx/ticket/1464\nI'll wait for their response before digging further.. @spacewander \nFixed upstream (https://trac.nginx.org/nginx/ticket/1464#comment:3)\n. ",
    "hy05190134": "but I find the module doesn't take effect. ",
    "prime89": "@spacewander thanks for your reply\nI compiled openresty with --with-cc-opt instead of --with-openssl. it works.\nthe test.lua is:\nlua\nlocal auth = require('auth.main')\nauth.login()\nrun test.lua by resty \n```\n[portal@ecs-5c2a-0008 userlib]$ /opt/app/openresty/bin/resty test.lua\n0.7.1Lua 5.1OpenSSL 1.0.2n  7 Dec 2017\ntrue\nverified successfully\n```\nand luajit\n[portal@ecs-5c2a-0008 userlib]$ /opt/app/openresty/luajit/bin/luajit test.lua\n0.7.1   Lua 5.1 OpenSSL 1.0.2n  7 Dec 2017\ntrue\nverified successfully\nbut when exec this scripts by nginx\uff0cit doesn't work again.\nmy nginx config is:\nconf\nlocation ^~  /login {\n    content_by_lua_block {\n        local auth = require \"auth.main\"\n            auth.login();\n    }\n}. Sorry, it has been resolved.\nThanks anyway. ",
    "giacomini": "I've changed the download link as well, although in fact it was working correctly, since github redirected to the new project.\nAs a test, I generated the bundle, built and installed the executable and checked that nginx started properly. Let me know if there is anything else I can do.\n. ",
    "freemember007": "@agentzh thanks reply. I want to build dev env in my sumsung pad with termux. :) . ",
    "unisqu": "ok i found out that i'm using openssl 1.1\nwhat do you suggest I do with this? what's the alternative? downgrade to openssl 1.0? I would like it to work on ubuntu 16.04. what's the best way forward?. will use\n--with-openssl=\nThanks.. ",
    "catatsuy": "@agentzh I added a test. Please check.. Thank you!. ",
    "shadowz10": "@agentzh  Hello, I would like to translate to Spanish but I do not know how. I would like to do it by means of pull request :). ",
    "tanguofu": "As util/configure always add -O2 to gcc  right now, when i debug nginx functions some vars be optimized then  can not be  printed in gdb. \nSo there is some way to overridden  @ngx_cc_opts ? i did not found~. --with-cc-opt=\"-O0\"   taking effect,  this is acceptable and out of thought~\nok, this patch closed.. ",
    "brunodomenici": "Checking now, maybe Amazon Linux release 2017.09 it's not supported by OpenResty, right?\n . ",
    "ElonKim": "Hi, @agentzh \nfailure: repodata/repomd.xml from openresty: [Errno 256] No more mirrors to try.\nhttps://openresty.org/package/amazon/2018.03/x86_64/repodata/repomd.xml: [Errno 14] HTTPS Error 404 - Not Found\nI'm using Amazon Linux AMI 2018.03. But failed to install openresty. Could you check it?. ",
    "vincent-lu": "Having the same problem as above.. Thanks it works now.\nBTW for anyone who has trouble getting this installed in the future (e.g. future Amazon Linux version), potentially you can change the releasever to latest to get openresty installed (obviously not idea, @agentzh maybe you can let us know if it is safe at all):\nNOTE: BELOW FIX IS NOT NEEDED ANYMORE FOR 2018.03 Amazon Linux!!!\nyum-config-manager --save --setopt=releasever=latest #switch yum releasever to latest\nyum update -y #update\nyum install openresty -y #install openresty from latest\nyum-config-manager --save --setopt=releasever=2018.03 #switch yum releasever back to 2018.03 (assuming that's your current releasever)\nyum-config-manager --save --setopt=openresty.skip_if_unavailable=True #so yum doesn't complain about missing repo\n. ",
    "FireBurn": "Sorry this is a duplicate of https://github.com/openresty/openresty/issues/336\nWill there be a new point release to fix this?. I wasn't aware of them :S \nTaking a closer look, have you considered using git submodules?. That doesn't really solve my issue, I should be able to reproduce builds from the tags. This \"historical tag\" built just fine back on 22nd August, it seems that when OpenResty is built it pulls in newer sub-components rather than using a fixed, known working, list. ",
    "mfrederico": "Caveat emptor for 1.13.6.1 :\nAt our company - both during heavy load testing via blazemeter and real world implementation - Performance was similar to 1.11.2.5.  That is until php-fpm stopped responding to nginx. No fatal errors were thrown from nginx or PHP - all that happened was that php-fpm processes went suddenly idle and we had upstream errors.  (We tried both php7.0 and php7.1 with varying configuration [dynamic static etc] with the same results)  \nThis caused substantial data loss, loss of connections to the webserver etc .. Thankully I had openresty install scripted so we just downgraded, back to 1.11.2.5 and haven't seen this issue come back since ...\nI couldn't tell you how to recreate it without substantial infrastructure and expense .... @agentzh  - When I get a chance to run large scale testing against 1.13.6.1 again - I'll make sure to keep closer watch on exactly what was going on ... We've since abandoned the servers that we had set up for testing.   I appreciate all that you do!. ",
    "ugolas": "@spacewander thanks for the response. but adding non_idempotent will cause retries on POST requests, and I don't want that. I only want to get the actual response from upstream instead of the openresty html.. Thanks! Appreciate the updates. ",
    "feifangit": "@agentzh where could I find the schedule doc? or do you have an est. time to upgrade nginx core to 1.13.10. when will a pre-built 1.15.x package ready?. ",
    "zlatangao": "@agentzh can u help give a temp release just upgrading to 1.13.10?. ",
    "rohitjoshi": "Any update on this?. ",
    "xkeyideal": "The next OpenResty version will be based on nginx 1.15.x will be expected to be out August?. ",
    "qiqizjl": "hello,update on this?. ",
    "Zenexer": "escape=none for log_format apparently wasn't added until 1.13.10 (how did that happen?), so I'm weighing whether it's worth patching it myself or waiting for the next release.  Any idea what the chances are of 1.15.x happening this month?  I have no objection to doing it myself, but I don't want to bother if a new release is just a day or two out.. ",
    "urifoox": "~~Are there any updates on this? We are blocked from using Proxy Protocol Version 2 which only comes out in a newer version of NginX and I can't seem to compile a newer version of NginX  into Openresty~~\nNevermind, solved it myself - see: https://github.com/openresty/lua-nginx-module/issues/1383\nFeel free to create a PR if needed for this new file\n. ",
    "fancy-rabbit": "hello @agentzh , any update on this?. awesome!. ",
    "arcivanov": "@agentzh do you have an eta?\n. Awesome, thanks!. So gdb'ing this.\n(gdb) step\n3751        L = ngx_http_lua_new_state(parent_vm, cycle, lmcf, log);\n(gdb) next\n3753            return NULL;\n(gdb) list\n3748        }\n3749\n3750        /* create new Lua VM instance */\n3751        L = ngx_http_lua_new_state(parent_vm, cycle, lmcf, log);\n3752        if (L == NULL) {\n3753            return NULL;\n3754        }\n3755\n3756        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, \"lua initialize the \"\n3757                       \"global Lua VM %p\", L);\n\n. Ok, here's the answer: luaL_newstate () at lib_aux.c:347 fails because mmap_map32 (size=131072) at lj_alloc.c:312 fails and mmap_probe (size=131072) at lj_alloc.c:284 fails as well.\nThoughts?. This is not good. I've collapsed everything into a single access_by_lua_block. File size shrunk by a factor of two: nginx: [error] failed to initialize Lua VM in nginx.conf:23322, but as you can see Lua is not initializing.. Nevermind, there was an error in a deployment descriptor.. ",
    "oracle219": "@agentzh patch refer to https://01.org/intel-quick-assist-technology/downloads?langredirect=1 (search  keyword 'nginx') but this patch base nginx-1.10, need some fix. . @agentzh see Tengine new feature is also support Intel QAT, https://github.com/alibaba/tengine/releases.. ",
    "Bypass007": "How should you set it up to avoid this problem? I didn't find this configuration parameter. I think it might be a debug.. I've seen this document, but if the default 100 limit is for security reasons, then more than one hundred of the parameters should be a refusal, not a state. And this has affected the open source WAF of the basic OpenRestry.. The default is 100 limits, and even if the optional parameter is 200 or 300, the OpenResty - based security can be easily bypassed if the attacker's parameter exceeds the limit, and there is still a URI parameter overflow problem. I think there is a great security risk.\nI suggest that if we exceed the number of parameter restrictions, we should discard this HTTP package instead of directly issuing it.. Not every OpenResty application is WAF, but OpenResty should be responsible for every user who uses it, including users who develop WAF based on OpenResty.\nHere, we have to admit that using ngx.req.get_uri_args and ngx.req.get_post_args to get parameters is not safe, but most users don't know and don't think about it.. As an official, it is duty bound to remind users that when they use ngx.req.get_uri_args and ngx.req.get_post_args to get parameters, the default limit is 100, and more than one hundred will be released instead of rejecting HTTP packages.\nI think the official should give a notice to remind users.. ",
    "mclyne": "Just to let you know, I double-checked to make sure that I hadn't forgotten any libs, and I tested with the following options :\n--without-lua_cjson\n    --without-lua_redis_parser\n    --without-lua_rds_parser\n    --without-lua_resty_core\n    --without-lua_resty_dns\n    --without-lua_resty_limit_traffic\n    --without-lua_resty_lock\n    --without-lua_resty_lrucache\n    --without-lua_resty_memcached\n    --without-lua_resty_mysql\n    --without-lua_resty_redis\n    --without-lua_resty_string\n    --without-lua_resty_upload\n    --without-lua_resty_upstream_healthcheck\n    --without-lua_resty_websocket\nwhich then produced no lualib directory in $PREFIX folder.  Obviously leaving these options off installs all the libs, so functionally there is no change to behaviour, just a tidy-up of the script.. Consistency with other comments.  It was sort of an accidental inclusion.  Same for below.  Most comments don't have colons - though actually they're not totally consistent in the formatting.. I guess it depends on where you want to have it link to, but if you have DESTDIR defined, then the symlink will link to the location without $(DESTDIR) added.  All other files are installed with $(DESTDIR) prefixed, so this probably isn't what you want.  Nginx is installed to the prefixed location.  Adding $(DESTDIR) to the $ngx_sbin path makes it point to the nginx binary in the same root folder in all situations.\nThere is also another problem if you have DESTDIR set.  That is that because the rpath and link locations are defined statically, nginx doesn't find libluajit, unless you specify it in the environment.  IMHO it would be better to have relative symlinks and relative paths set.  I was going to make the necessary changes to make them relative paths, so everything worked as expected if you move the output dir and submit them too.  It makes more sense to me to be able to move the whole folder and for everything still to work, but let me know if that's not what you want.. I wasn't confusing DESTDIR with PREFIX, however I wasn't thinking of it being used in that way.  Thanks for the explanation.. ",
    "chutian52": "@spacewander Thanks a lot.. ",
    "tao12345666333": "Yes. It has been fixed. https://github.com/nginx/nginx/commit/1ef5c9ce6f03907dad1677d25f108d2bf59a5c15 . The nginx 1.15.0 released.  https://github.com/nginx/nginx/releases/tag/release-1.15.0. @agentzh  Yes, nginx upstream fixed it https://github.com/nginx/nginx/commit/1ef5c9ce6f03907dad1677d25f108d2bf59a5c15.  \nAnd OpenResty 1.13.6.2 can't build successfully without any changnes on Fedora 28. The nginx bundle is nginx-1.13.6, but the nginx upstream fixed this issue since 1.15.0.\nWe need update nginx version or path it.. ",
    "doc987": "Now that this is fixed, is there going to be a repository added for Fedora 28, or are there still outstanding issues?  The current repository list (https://openresty.org/package/fedora/) stops at Fedora 27.. Great!  Is there are schedule for the next OpenResty formal release, or is that unknown at this point?  It looks like the current formal release is 1.11.2.5 from August 30, 2017.. I was looking on the Github releases page (https://github.com/openresty/openresty/releases).  Release 1.13.6.1 (Nov 13, 2017) has the green \"latest\" release\" label next to it.  The most recent release called a \"formal release\" is 1.11.2.5 (Aug 30, 2017).  1.13.6.2 is also shown as May 14, 2018, but without the \"latest release\" label (not sure why).  In any case 1.13.6.2 is definitely labeled as the latest release on the openresty.org download page you linked.. ",
    "PaulSchulz": "Successfully installed.\nThankyou for your patience. \nThe root cause appears to be that I had nginx packages installed (pcre might have been something else, as library files didn't get installed although the package was). \nFix was as simple as - Completly removing all packages as listed by:\n  dpkg -l | grep  nginx\n  dpkg -l | grep openresty\nwith\n  apt remove --purge PACKAGENAME \nand reinstalling with\n  apt install openresty\nallowed everything to install cleanly. \nCheers.\n. ",
    "gdestuynder": "Here is my understanding of this, with my (very) limited knowledge of Lua:\nthis is in /usr/local/openresty/site/lualib/resty/evp.lua:216: which reads:\nlocal ctx = _C.EVP_MD_CTX_create()\n_C seems to be a C library binding (local ffi = require \"ffi\"; local _C = ffi.C) which calls openssl (http://luajit.org/ext_ffi.html).\nlibluajit is the C wrapper that runs evp.lua (and contains the ffi code) so where the error occurs.\nSince this would be a live C binding, the library is not linked in libluajit or evp.lua (obviously since its a text file), but instead dynamically bound (similarly to how ctypes works for python)\nI suspect the error itself is therefore due to an issue in evp.lua or lualibjit (ie, the ffi part of lualibjit which is builtin), or, the openssl library libluajit's ffi binds to, which might not be openrest-openssl, but the system's ssl, with different definitions. Again, in this case you won't see libssl or libcrypto linked to libluajit.\nJust a shoot in the dark, but maybe it's just an oversight of openresty-openssl which is used for similar reasons (compat) - while libluajit's ffi will probably use the system's openssl, and if these have different symbols the developers will run into issues eventually.\nAnyhow, hope this helps - i suspect only people using specific resty modules may be affected\n. that may be a different problem, but compiling openresty from source also moves the evp module in the tree for some reason. I'll close this for now though as it's unrelated to the rpm itself. thanks!. ",
    "dsnlevi": "i come accross the same problem with @gdestuynder , i use hmac.lua code (https://github.com/jkeys089/lua-resty-hmac/blob/master/lib/resty/hmac.lua) \nwhich use ffi to call openssl function such as hmac_ctx_init,  however openssl 1.1.0 library doesn't export these functions.   so i download old version openssl 1.0.0 and recompile the openssl library.\nafter that i modify the hmac.lua source code and use ffi.load to explicitly load the openssl 1.0.0 libray using the absolute path.. ",
    "KingaChou": "I encounter the same problem with @dsnlevi . I use lua-resty-jwt which needs lua-resty-hmac. And the lua-resty-hmac requires an nginx build with OpenSSL.\nThis is the machine I come across the problem. \n\n. ",
    "cdbattags": "Hi @agentzh, thanks so much for all your support so far! It's been great diving into such an awesome project this past week or so.\nAs you can see with v0.1.12 we now have support for OpenSSL 1.1.x series: https://github.com/cdbattags/lua-resty-jwt/tree/v0.1.12\nOnly issue left now is that I don't think my module for whatever reason is able to find the proper OpenSSL version that's bundled with OpenResty.\nHere's my Dockerfile:\n```\nFROM ubuntu:14.04\nRUN apt update\nRUN apt -y install wget software-properties-common make gcc\nRUN wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -\nRUN add-apt-repository -y \"deb http://openresty.org/package/ubuntu $(lsb_release -sc) main\"\nRUN apt-get update\nRUN apt -y install openresty\nRUN mkdir /var/log/nginx\nRUN opm install cdbattags/lua-resty-openidc\nRUN cp /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.pem\nENTRYPOINT [\"/usr/local/openresty/nginx/sbin/nginx\", \"-g\", \"daemon off;\"]\n```\nMind taking that for a quick spin to see where I'm going wrong?\nI've implemented it like so:\n```\nworker_processes auto;\nerror_log /var/log/nginx/error.log debug;\npid /var/run/nginx.pid;\nLoad dynamic modules. See /usr/share/doc/nginx/README.dynamic.\ninclude /usr/share/nginx/modules/*.conf;\nevents {\n    worker_connections 1024;\n}\nhttp {\nlua_package_path '/usr/local/openresty/lualib/?.lua;;';\n\nresolver 8.8.8.8;\n\ninclude /etc/nginx/conf.d/*.conf;\n\nlua_ssl_verify_depth 2;\nlua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.pem;\n\n# cache for discovery metadata documents\nlua_shared_dict discovery 1m;\n\n# cache for JWKs\nlua_shared_dict jwks 1m;\n\nindex   index.html index.htm;\n\nserver {\n    rewrite_log on;\n    listen       80 default_server;\n    listen       [::]:80 default_server;\n    root         /usr/share/nginx/html;\n\n    access_by_lua '\n        local opts = {\n            discovery = \"<redacted>\",\n\n            -- the signature algorithm that you expect has been used;\n            -- can be a single string or a table.\n            -- You should set this for security reasons in order to\n            -- avoid accepting a token claiming to be signed by HMAC\n            -- using a public RSA key.\n            token_signing_alg_values_expected = { \"RS256\" },\n\n            -- if you want to accept unsigned tokens (using the\n            -- \"none\" signature algorithm) then set this to true.\n            accept_none_alg = false,\n\n            -- if you want to reject tokens signed using an algorithm\n            -- not supported by lua-resty-jwt set this to false. If\n            -- you leave it unset, the token signature will not be\n            -- verified at all.\n            accept_unsupported_alg = true\n        }\n\n        -- call bearer_jwt_verify for OAuth 2.0 JWT validation\n        local res, err = require(\"resty.openidc\").bearer_jwt_verify(opts, nil, \"pass\")\n\n        if err or not res then\n            ngx.status = 403\n            ngx.say(err and err or \"no access_token provided\")\n            ngx.exit(ngx.HTTP_FORBIDDEN)\n        end\n    ';\n\n    # disable caching so the browser won't cache the site\n    expires           0;\n    add_header        Cache-Control private;\n\n    location / {\n    }\n\n    location ~ /s3/(?<section>.+)/thing {\n        proxy_http_version     1.1;\n        proxy_set_header       Connection \"\";\n        proxy_set_header       Authorization '';\n        proxy_set_header       Host <redacted>;\n        proxy_hide_header      x-amz-id-2;\n        proxy_hide_header      x-amz-request-id;\n        proxy_hide_header      x-amz-meta-server-side-encryption;\n        proxy_hide_header      x-amz-server-side-encryption;\n        proxy_hide_header      Set-Cookie;\n        proxy_ignore_headers   Set-Cookie;\n        proxy_intercept_errors on;\n        add_header             Cache-Control max-age=31536000;\n        proxy_pass              <redacted>;\n    }\n\n\n    # redirect server error pages to the static page /40x.html\n    error_page 404 /404.html;\n    location = /40x.html {\n    }\n\n    # redirect server error pages to the static page /50x.html\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n    }\n\n}\n}\n```. I appreciate the reply and I totally understand you \"don't have the time\" but I'm doing my duty to this open source community getting an abandoned package back up and running.\n3rd party libraries are exactly what y'all want per the line We already have 390 successful uploads across 158 distinct package names from 67 contributors. Come on, OPM authors! from https://opm.openresty.org/, no?\nSo, thank you, but please bear with me and please mind the sass.. So I think I've almost tracked it down. The problem is that the shared objects (.so) files need to be added to the ldconfig for FFI to work properly, no?\nEdit:\nOr rather, @agentzh, why aren't these lib/*.so files available upon install?. Aha! Ok, developer error! Looks like @cybrq-as and I didn't look through his PR as well as we should have!. That\u2019s just it, no? ~100 with a team of how many? How else am I supposed to get context and dive into development except by loud mouthing my way through the gate? In this case my question did specifically pertain to OpenResty in the end, no? Maybe first step will be documenting my experience for new devs like myself and opening a PR? Where might I add something such as this?\nThanks again for your support and can't wait to work again with ya soon! \ud83d\udc4d\ud83c\udffb\ud83d\ude09. ",
    "atrifan": "Posted two screen shots from 1.9.7.3 with the issue reproduced. \nThe same issue reproduces in 1.13.6.1\n\n'\nChecked 1.13.6.2 - the issue does not reproduce anymore. \nYou can mark this as closed with fixed in 1.13.6.2.\nThanks\n. ",
    "zenboss": "I have the same question.. ",
    "salamsoliman": "ip/index.html   and ip/50x.html is works well.but when I open ip/install ,it would shows \"403 forbidden\". Your answer is useful ,thanks.. I fixed this issue and found that I didn't install waf .. ",
    "hongxiaolong": "@agentzh Could u please help have a look at this problem. ",
    "naturallight": "+1. ",
    "Xuhaomiao": "@agentzh , the next release of OpenResty that supports gRPC,  when is it released?. ",
    "sergeydi": "I found this solution:\nset_by_lua $timestamp 'return os.time()';\nproxy_set_header X-Original-TIME $timestamp;\nissue may be closed.... ",
    "zvtr": "@agentzh I use gdb to debug with it use config access_by_lua \"ngx.re.find('hello', 'world', 'o')\";\nOutput as follow:\n```bash\ngdb /usr/local/openresty/nginx/sbin/nginx\nReading symbols from /usr/local/openresty/nginx/sbin/nginx...done.\n(gdb) b ngx_http_lua_regex.c:320\nBreakpoint 1 at 0x4c84cb: file ../ngx_lua-0.10.11/src/ngx_http_lua_regex.c, line 320.\n(gdb) r\nStarting program: /usr/local/openresty/nginx/sbin/nginx \n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\nBreakpoint 1, ngx_http_lua_ngx_re_match_helper (L=0x40010260, wantcaps=0) at ../ngx_lua-0.10.11/src/ngx_http_lua_regex.c:323\n323         re_comp.pattern = pat;\n(gdb) set print pretty on\n(gdb) print lmcf->pool\n$1 = {\n  d = {\n    last = 0x7dbfd0 \"\", \n    end = 0x7dbfd0 \"\", \n    next = 0x7e1000, \n    failed = 4\n  }, \n  max = 4095, \n  current = 0x7d7fd0, \n  chain = 0x0, \n  large = 0x7fed00, \n  cleanup = 0x7fefe8, \n  log = 0x7d8038\n}\n(gdb) print r->pool \n$2 = {\n  d = {\n    last = 0x7e76a0 \"\", \n    end = 0x7e7820 \"\", \n    next = 0x7dbfe0, \n    failed = 0\n  }, \n  max = 4016, \n  current = 0x7e6820, \n  chain = 0x0, \n  large = 0x0, \n  cleanup = 0x0, \n  log = 0x7d7390\n}\n``\nIt seems that we didn't check whether pool size is 0 before we usengx_http_lua_pcre_malloc_initto replace pcre_malloc with ngx_http_lua_pcre_malloc which use a empty pool\nAslmcf->pool.d'send - lastis zero.\nSo, I wonder Whether nginx will help us handling this condition inngx_palloc` ?. ",
    "bdparrish": "@neomantra - I was able to get a new error with some changes to the resolver, but for what its worth I tried to run the centos and stretch tags for the docker containers to run debug mode and received errors on both.  I got the same error.\nStep 1/7 : FROM openresty/openresty:centos\n ---> d9f317aec895\nStep 2/7 : RUN mkdir /var/log/nginx\n ---> Using cache\n ---> d98f7115a3fb\nStep 3/7 : RUN apk add --no-cache openssl-dev\n ---> Running in ed0f7b556c82\n/bin/sh: apk: command not found. ",
    "Cryptophobia": "I was reading up on some API Gateways and OpenResty came up. Wanted to take a deeper look but looks like the website is down.. It's back up. Thanks!. ",
    "ngxlua": "@zb1015  Please, no Chinese here. This place is considered English only. If you really\nwant to use Chinese, please join the openresty (Chinese) mailing list instead.\nPlease see https://openresty.org/en/community.html Thanks for your cooperation.. ",
    "itchenyi": "Is this a bug?\nIf this is not a bug, then how should I compile such a case?\n. ",
    "minnan0422": "@agentzh Thank you, but it doesn't solve the problem, which itself is a BUG in openssl1.1.1, complete compilation parameters: \". / configure -- prefix = / usr/local/openresty/nginx - with - cc - opt = - O2 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/ngx_devel_kit - 0.3.0 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/echo - nginx - module - 0.61 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/XSS - nginx - module - 0.06 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/ngx_coolkit - 0.2 rc3 - add - the module = / usr/local/openresty 1.13.6.2 / bundle/set - misc - nginx - module - 0.32 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/form - input - nginx - module - 0.12 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/encrypted session - nginx - module - 0.08 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/srcache - nginx - module - 0.31 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/ngx_lua - 0.10.13 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/ngx_lua_upstream - 0.07 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/headers - more - nginx - module - 0.33 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/array - var - nginx - module - 0.05 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/memc - nginx - module - 0.19 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/redis2 - nginx - module - 0.15 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/redis - nginx - module - 0.3.7 - add - the module = / usr/local/openresty - 1.13.6.2 / bundle/RDS - json - nginx - module - 0.15 - the add - the module = / usr/local/openresty - 1.13.6.2 / bundle/RDS - CSV - nginx - module - 0.09 --add-module=/usr/local/openresty-1.13.6.2/bundle/ngx_stream_lua-0.0.5 --with-openssl=/usr/local/openssl --with-ld-opt=-lpthread --with-ipv6 --with-http_realip_module --with-http_ssl_module - with - http_stub_status_module - with - http_v2_module - with - stream - with - stream_ssl_module\". > @minnan0422 @agentzh nginx 1.13.11 fix nginx\nSo I need to change the nginx-1.13.6 to 1.13.11?  i  try. @yyqbuct   I tried nginx's 1.13.10, 1.14.0, and 1.15.5, and now I'm reporting this error, with no clue.\nError message: \"ngx_stream_lua_prereadby. C: (. Text + 0 x640) : multiple definition of ` ngx_stream_lua_preread_handler_file '\nObjs addon/SRC/ngx_stream_lua_prereadby. O: ngx_stream_lua_prereadby. C: (. The text + 0 x640) : first defined here\nCollect2: error: ld returned 1 exit status\nMake [2]: *** [objs/nginx] Error 1\nMake [2] : brigade directory ` / usr/local/openresty - 1.13.6.2 / build/nginx - 1.13.10 '\nMake [1]: *** [build] Error 2\nMake [1] : brigade directory ` / usr/local/openresty - 1.13.6.2 / build/nginx - 1.13.10 '\nMake: *** [all] Error 2\". @yyqbuct In version 1.13.6, I can use the same method to skip the first error to the current error, but at this point I really don't know how to solve it, I may need to test on the basis of the compiled 1.13.10. ",
    "yyqbuct": "@minnan0422 @agentzh nginx 1.13.11 fix nginx. @minnan0422 I think the simplest way\n is make a patch to Nginx\n-1.13.6.2. ",
    "rhuddleston": "Any ETA on an official 1.15 GA release?. ",
    "hmtai": "This is the injected JavaScript response:\n. It appears that openresty is proxying to the the API and echoing raw API responses back to the browser as HTML, which doesn't seem proper.. ",
    "2731381914": "thanks, i've learned something new!. ",
    "zhu1q1q1q": "My operation steps\uff1a\n\u5b89\u88c5\u5305\u51c6\u5907\uff1a\nnginx-1.12.2.tar.gz\nnginx-module-vts-master.zip\nopenresty-1.13.6.1.tar.gz\n\u89e3\u538b\u8def\u5f84\uff1a\n/usr/local/src/\nnginx-module-vts-master.zip\u89e3\u538b\u5230openresty-1.13.6.1\u4e0b\u3002\n\u7f16\u8bd1\u5b89\u88c5\uff1a\ncd openresty-1.13.6.1\nsudo ./configure\nsudo gmake\nsudo gmake install\ncd /usr/local/src/openresty-1.13.6.1/build/nginx-1.12.2\nsudo yum install lua-devel\nsudo ./configure --prefix=/usr/local/openresty/nginx --with-cc-opt=-O2 --add-module=../ngx_devel_kit-0.3.0 --add-module=../echo-nginx-module-0.61 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.31 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.07 --add-module=../srcache-nginx-module-0.31 --add-module=../ngx_lua-0.10.11 --add-module=../ngx_lua_upstream-0.07 --add-module=../headers-more-nginx-module-0.33 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.18 --add-module=../redis2-nginx-module-0.14 --add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.15 --add-module=../rds-csv-nginx-module-0.08 --add-module=../ngx_stream_lua-0.0.3 --with-ld-opt=-Wl,-rpath,/usr/local/openresty/luajit/lib --sbin-path=/usr/local/nginx/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/usr/local/nginx/conf/nginx.conf --error-log-path=/usr/local/nginx/logs/error.log --http-log-path=/usr/local/nginx/logs/access.log --pid-path=/usr/local/nginx/logs/nginx.pid --lock-path=/usr/local/nginx/logs/nginx.lock --http-client-body-temp-path=/usr/local/nginx/client_body_temp --http-proxy-temp-path=/usr/local/nginx/proxy_temp --http-fastcgi-temp-path=/usr/local/nginx/fastcgi_temp --http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp --http-scgi-temp-path=/usr/local/nginx/scgi_temp --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --add-module=/usr/local/src/openresty-1.13.6.1/nginx-module-vts-master --with-stream --with-stream_ssl_module\nsudo make\nsudo make install \nBecouse\uff0cI use the /usr/local/src/openresty-1.13.6.1/build/nginx-1.12.2\uff0cwhen execute  ./configure ... \uff0cthere are error message\uff1a\nadding module in ../ngx_lua-0.10.11\nchecking for Lua library ... not found\nchecking for Lua library in /usr/local/ ... not found\nchecking for Lua library in /usr/local/ ... not found\nchecking for Lua library in /usr/pkg/ ... not found\nchecking for Lua library in /opt/local/ ... not found\nchecking for Lua library in /usr/local/*/lua51/ ... not found\nchecking for Lua library in /usr/ ... not found\nchecking for LuaJIT library in /usr/local/ ... not found\nchecking for LuaJIT library in /usr/ ... not found\nchecking for LuaJIT library in /usr/ ... not found\n ./configure: error: ngx_http_lua_module requires the Lua library.\nbefore it \uff0cI have to execute \u201csudo yum install lua-devel\u201d to install the lua\u3002\nplease\uff0chow can I make it well\uff1f.  and\uff0cHow to retrieve the compiled parameters of old programs . Got it. Thanks for your answer. I've solved this problem. Thank you very much.\n. ",
    "johnsmith0209": "Agree with @Locoking \nBy moving all the files that in the latest nginx to bundle/nginx-1.13.6.2, I tried to compile openresty.\nBut failed. I knew this way should not work properly...\nbash\n/home/xxx/openresty-1.13.6.2/build/nginx-1.13.6/../ngx_lua-0.10.13/src/ngx_http_lua_ssl_certby.c:605: undefined reference to `SSL_certs_clear'\nHow could I work around this error? \nBest regards.. Great work, I never expected your response could be this quick. I wish I could help, but this is far beyond my capability...\nReally appreciated.. ",
    "Locoking": "Hi agentzh,\n    thanks for response!\nI tried this package, currently eveything seems fine.\ncompile ok(suse 11), running ok, \nand I tried a few lua scripts, \n     eg. rewrite by lua file it is working.\n\nbest regards!\nKing. @agentzh \nis there a release plan recently?\nBest Regards!. @agentzh\nwhat about here?\nhttp://openresty.org/cn/download.html\nBest Regards!. > @Locoking See\n\nhttps://groups.google.com/d/msg/openresty-en/xOt9M_lr18U/D8pmZd33BgAJ\n\ngot it, thx!. ",
    "JeffCleverley": "Just did a recompile, we are using openresty for our SaaS, mostly seems good.\nAm having troubles purging redis cache from the srcache-nginx-module on https. Previously working no problem, now only purges http.. ",
    "aimuz": "@agentzh I found a problem, which is intermittent. When I modify the configuration file, nginx-s reloadwill not use the latest configuration, but when Inginx-s reopen, I will use the latest configuration.\nWhen I executed nginx-s reopen, after modifying the configuration file again, nginx-s reload, this command is valid. I haven't found a good way to reproduce the problem. It seems to me that after frequent modification of the configuration file and frequent execution of nginx-s reload, there will be a great chance to reproduce the problem.\nMy operating system isCentOS 7.3\uff0cOpenresty-1.15.6.1 rc0.tar.gz is installed\nMy English is not good. if you can use Chinese. ",
    "shanwei063": "\nHey, guys, try this:\nhttps://openresty.org/download/openresty-1.15.6.1rc0.tar.gz\nIt includes nginx 1.15.6. Please let me know how it goes.\nHi agentzh,\nWhen the openresty that can be executed on arm be released?. \n",
    "xmglin": "New release as New Year gift.\n@agentzh . ",
    "corn1ng": "thanks!. Ok,Thanks. ",
    "prescolt": "Yes, i have just change to global function and require per server block configuration\nI have tried local  declare variable too, but problem still occured. By change to global function solved this  issue.\nThank you.. ",
    "elonmia": "save issue, any updates?. ",
    "searover336": "\u611f\u8c22\u56de\u590d\uff0caix\u7f16\u8bd1\u603b\u662f\u6709\u95ee\u9898\uff0caix unix\u7cfb\u7edf\u672c\u8eab\u6211\u5e76\u4e0d\u719f\u6089\uff0c\u53ef\u80fd\u662f\u7c7b\u5e93\u7f3a\u5c11\u5bfc\u81f4\uff0c\u4e3b\u8981\u662fluajit\u7f16\u8bd1\u5931\u8d25\nzhaoxuefeng\n\n\u5728 2019\u5e742\u67084\u65e5\uff0c15:03\uff0cYichun Zhang notifications@github.com \u5199\u9053\uff1a\nSorry for the late reply, BTW.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ok\uff0cthanks\n\n\u8d75\u5b66\u950b\n\n\u5728 2019\u5e742\u670818\u65e5\uff0c03:42\uff0cYichun Zhang notifications@github.com \u5199\u9053\uff1a\nPlease, do not use Chinese here. This place is considered English only. If you really want to use Chinese, please join and post to the openresty (Chinese) mailing list instead. Please see https://openresty.org/en/community.html Thanks for your cooperation.\nI asked for the exact raw failure output on your terminal. Without details, we cannot help even if we want to. Thanks.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "innfuns": "now we will have to add additional params like \nhttpc:request_uri(hostUrl, {\nmethod = \"GET\",\npath = requestBody,\nkeepalive=false\n}) to fix it temporily. but in the past,if you not have a keepalive param,it will works,so I guess that change the code if params.keepalive == false to if not params.keepalive will fix the problem. but better to judge condition obviously . ",
    "chandanmaheshwari": "Any inputs by anyone??. ",
    "baerbock": "Chinese make money and usually don't help you.. ",
    "Duanjihan": "Do you want a plugin like https://github.com/doujiang24/lua-resty-kafka ? . ",
    "sanmaozhao": "Thanks for your quick reply.\nThe system is really 64-bit, I will try to install gdb and get backtraces.\n\n. Here is gdb log(I used gdb for the first time, I don't know if the information is correct):\nC:\\mingw64\\bin>gdb C:\\openresty-1.13.6.2-win64\\nginx.exe\nGNU gdb (GDB) 7.1.90.20100730-cvs\nCopyright (C) 2010 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type \"show copying\"\nand \"show warranty\" for details.\nThis GDB was configured as \"x86_64-w64-mingw32\".\nFor bug reporting instructions, please see:\nhttp://www.gnu.org/software/gdb/bugs/...\nReading symbols from C:\\openresty-1.13.6.2-win64\\nginx.exe...done.\n(gdb) r\nStarting program: C:\\openresty-1.13.6.2-win64\\nginx.exe\n[New Thread 2332.0x204]\nProgram received signal SIGILL, Illegal instruction.\nx64_init_random_constructor () at C:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.3.0/include/smmintrin.h:841\n841     C:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.3.0/include/smmintrin.h: No such file or directory.\n        in C:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.3.0/include/smmintrin.h\n(gdb) bt\n0  x64_init_random_constructor () at C:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.3.0/include/smmintrin.h:841\n1  0x0000000066dd9e52 in __do_global_ctors () from C:\\openresty-1.13.6.2-win64\\lua51.dll\n2  0x0000000066d812cf in __DllMainCRTStartup () from C:\\openresty-1.13.6.2-win64\\lua51.dll\n3  0x0000000077527ace in ntdll!RtlDeleteAce () from C:\\Windows\\system32\\ntdll.dll\n4  0x00000000002d6a50 in ?? ()\n5  0x0000000000000000 in ?? ()\n(gdb). > \n\n@sanmaozhao Sorry for the late reply. Are you using an AMD CPU?\n\nThe gdb log is obtained on an Intel Xeon E7420 computer(virtual machine). The other problematic machine is the AMD A6-3400M CPU(physical machine).. ",
    "dujuwen": "\u53ef\u4ee5\u770b\u770b\u8fd9\u4e2a\u561b:\nhttps://www.stackoverflowchina.com/questions/10026/openresty\u5982\u4f55\u9690\u85cf\u54cd\u5e94\u5934\u4e2d\u7684Server-openresty\u4fe1\u606f\n\u5b83\u4e0a\u9762\u6709\u56de\u7b54\uff0c\u4e0d\u7528\u8c22. ",
    "nneesshh": "it seems a \"todo\" feature\uff0cat ngx_stream_lua_timer.c, line 127\n\u201c/\n * TODO: return a timer handler instead which can be passed to\n * the ngx.timer.cancel method to cancel the timer.\n /\nstatic int ngx_stream_lua_ngx_timer_every(lua_State *L)\n...\nso, a timer is a fake connection, you can't close it now. ",
    "Roycohen": "a.svg.zip\n. Hi @agentzh,\nThanks for your reply and sorry for my late response.\nI might have few timers running but not that much and the only thing that they are doing is http call and closing themselves.\nIn the example of the flame graph I've shared I think it is not even happening.\nI would really appreciate some direction as it seems like when the server is under high load there is nothing I can do to stop the flood.\n. Hi @agentzh, \nCan you please elaborate about the OpenResty Trace platform.\nMy shared zone is limit to \u00b1250MB or I'm missing something there.\nAlso is there a way to limit the concurrency?\n. Hi @agentzh,\nSure, will be great to understand what are the issues.\nI'll ping you at support@openresty.com to continue on debugging it.. ",
    "warrenwx": "thanks, agentzh.\nI will take your advises into  consideration, trying to reproduce with minimal conditions.. close temporarily. ",
    "gaurav13uniyal": "@agentzh \nI am using below code in nginx config file\nset_by_lua $couchdb_username 'if ngx.var.https == \"on\" then return string.match(require(\"openssl\").x509.read(ngx.var.ssl_client_raw_cert):subject():oneline(),\"/CN=([^/]+)\") end return nil';\n           set_by_lua $couchdb_token 'if ngx.var.couchdb_username ~= nil and ngx.var.couchdb_username ~= \"\" then return require(\"sha1\").hmac(\"secretkey\",ngx.var.couchdb_username) end return nil';\ncan you please share if there is any aletrnative or same.\ncan you please share what steps I need to follow install and configure required module in windows environment\n. ",
    "Soulou": "For info, appart the following build error https://github.com/openssl/openssl/issues/3884#issuecomment-313857555 requiring a fix of the nginx 1.13.6 Makefile, the build went well.\nTLS 1.3 is now correctly enabled with my openresty 1.13.6.2 / OpenSSL 1.1.1, it seems to work as expected.. ",
    "pkking": "Thanks for your reply.\nDoes that means we need a piece of patch to let openresty expose the request socket fd that use to connect to the backend in another vrf?\nWe also need to add some config vars to specific the vrf device name passed to the setsockopt() as well, is that correct?\n. Got it, thanks. ",
    "choeger": "I know that this pull request does not fit into the master branch. Please consider it as a starting point or merge directly where it fits.. ",
    "drasko": "Related to https://github.com/openresty/docker-openresty/issues/90. ",
    "alexjames98": "\nEnsure you have provided the following details while reporting a problem:\n* [x]  The exact version of the related software, including but not limited to the OpenResty version\n  (if any), the NGINX core version, the `ngx_lua` module version(via `openresty -V` or `nginx -V`),\n  and your operating system version(via `uname -a`).\n\nalpine docker from DockerHub\n* [x]  **A minimal and standalone test case** that others can easily run on their side and\n  reproduce the issue you are seeing.\n\nThis works for mainstream NginX, but not for OpenResty:\n```\nMQTT\nstream {\n    # MQTT\n    server {\n        listen 8883 ssl;\n        listen [::]:8883 ssl;\n    # Certificates\n    ssl_certificate /etc/ssl/certs/mainflux-server.crt;\n    ssl_certificate_key /etc/ssl/private/mainflux-server.key;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n\n    # from https://cipherli.st/\n    # and https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html\n\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers \"EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\";\n    ssl_ecdh_curve secp384r1;\n    ssl_session_tickets off;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    proxy_pass mqtt-adapter:1883;\n}\n\n}\n```\n* [x]  Do not simply say \"something is broken\" or \"something does not work\". Always provide\n  as much details as possible. Always describe **the symptoms and your expected results**.\n\nThis hangs:\nmosquitto_pub -h localhost -d  -t test -m \"hello again\" -p 8883 --cafile ./ca.crt\n\nGet into the same problem.. ",
    "david-holonet": "My question is for 1.15.8.1rc1, coredump at ngx.re.match.\nthe code here is:\nlocal m,err = ngx.re.match(host,\"([^.]+)\",\"jio\"). Good job.\nI put require \"resty.core\" in init_by_lua_file, and it works now.\nThanks a lot.. ",
    "yourenyouyu": "i think you can provide  ngx.yield(). "
}