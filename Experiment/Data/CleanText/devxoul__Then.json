{
    "devxoul": "@DenHeadless, thank you for your work! This PR will be shipped in 0.2.0 release.\n. Awesome, sounds interesting. What could I do?\n. Thank you! I'll take a look soon :smile:\n. @adrfer, Cool. Someone has already done it. How can I lend weight to this suggestion?\n. @wcatron, thanks for asking. Of course I hope it to be adopted to Swift grammar :smile:\n. @dineshrajas, thank you for asking.\nSince IBOutlet variables are initialized lately, you cannot use then with the property declarations. However, as @RuiAAPeres mentioned, you can use then just after the IBOutlets are created.\n. Carthage is only available for iOS8+ targets.\n\nNote that Carthage only supports dynamic frameworks, which are only available on iOS 8 or later (or any version of OS X).\n\nHow about this approach?\n. @RuiAAPeres, Thank you!\n. @onmyway133, thank you for pointing it out!\nThere is already a PR for making closure non-escapable. (#1)\nThis will be shipped in next release.\n. @RuiAAPeres, thank you for your work.\nHowever, I cannot understand why we need to test textColor. Could you please explain more detail?\n. Good :smile:\n. Hi @mattijsf!\nWhy I chose then instead of with is to avoid name conflicts. Because with() is more general than then(). That means, other frameworks might have with() already.\n. @basvankuijck, thank you for your work!\nBut I cannot merge this PR right away. I'm having a consideration about using operators. Why I chose the name 'then' was to avoid name conflicts with other frameworks. There are many kind of methods named with() and operators using =>.\nOperators are charming, but should be used very carefully.\n. Or we can use a compiler flag to disable Then's operators.\n. Cool. Thanks for your work @Armored-Dragon!\n. Thanks! :smile::+1:\n. Thanks! :smile::+1:\n. @phimage, thanks for your work! Especially for podspec.\nHowever, why do we need seperated targets?\n. Scheme is already shared. For travis, I think this PR should have test code for each targets.\nBut actually I'm not sure separating target is necessary.\n. Oh, I mean the .travis.yml file. Apologize for unclear words. (For example, https://github.com/devxoul/SwiftyColor/blob/master/.travis.yml)\nExactly. I don't want to make directories for each targets. Well, how about SwiftyJSON's approach? I think it seemed to be more clean :smile:\n. @phimage, thank you very much :smile::+1:\n. I think Xcode is silly.\n. I created an issue on Swift JIRA: https://bugs.swift.org/browse/SR-2750 (please vote on JIRA issue!)\n. @Natai yeah, thanks to @txaiwieser (#38) we found that code hinting is ~~now~~ not working in class scope.\n. Oh my god, there was a mistypo: ~~now working~~ -> not working\nSorry for confusing \ud83d\ude05\n. @KimDarren @acecilia, have you tested using Then?. I've found an interesting thing. It works without  a type annotation and it doesn't work with a type annotation(: UILabel).\nWith type annotation\n\nWithout type annotation\n\n. @JiriTrecak, cool. How can we use it in real-world?\n. I'm not sure. Why not use:\nswift\nif Model.currentUser.isLoggedIn {\n    profilePicture.image = UIImage(\"avatar\")\n}\nI think it's more clear.\n. Of course then() can be used with existing objects (e.g. profilePicture as you mentioned), but then() was originally designed to provide a simple way to initialize properties.\nImagine that we have an UILabel as a property. We can define this label, an also able to create an instance of it. However, we have to initialize label's properties in another location: init().\n``` swift\nclass MyClass {\n    let label = UILabel() // define and create an instance at here, but...\ninit() {\n    // initialize properties at here (why?)\n    self.label.textColor = .blackColor()\n    self.label.text = \"Hi\"\n}\n\n}\n```\nthen() solves it by using closures.\nswift\nclass MyClass {\n    // define and create an instance, then initialize properties\n    let label = UILabel().then {\n        $0.textColor = .blackColor()\n        $0.text = \"Hi\"\n    }\n}\nThis is why I asked you for a real-world example. I think when() is out of then()'s philosophy and can be replaced with if statement.\n. @honghaoz, #18 fixes the issue and has been shipped with 1.0.0 release :smile:\n. Then is then.\n. Hi @tuyencoder, it seems to be an Xcode issue.\nPossible workaround is to put return. \nswift\nwebView.then {\n    $0.navigationDelegate = self\n    return\n}\n. :smile:\n. Why not use flatMap?\nswift\nself.doSomethingWithCompletion { [weak self] result in\n    self.flatMap {\n        $0.parseResult(result, receivedFrom: $0)\n        $0.doSomething()\n    }\n}\nOr you can unwrap self by using backtick(`):\nswift\nself.doSomethingWithCompletion { [weak self] result in\n    guard let `self` = self else { return }\n    self.parseResult(result, receivedFrom: self!)\n    self.doSomething()\n}\n. I'm not sure. Why should we use then() instead of optional binding?\nThese are the more simple, reasonable, beautiful and extensible:\nswift\nself.doSomethingWithCompletion { [weak self] result in\n    guard let `self` = self else { return }\n    self.parseResult(result, receivedFrom: self!)\n    self.doSomething()\n}\n``` swift\noverride func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n    switch segue.destinationViewController {\n    case let viewController as ChooseContenderViewController:\n        // do something with ChooseContenderViewController\ncase let viewController as OtherViewController:\n    // do something with OtherViewController\n\ndefault:\n    break\n}\n\n}\n```\nI think Then is not a good solution for optional binding but a world most elegant solution for initializing properties with instance initialization code.\n. Thanks for your time :smile:\n. @fnc12, can you please attach the code?\n. @fnc12, Which version of Then are you using? If it is lastest version, could you please make a new project and try again?\n. @1amageek Did you import Then correctly?\n``` swift\nimport Then\nclass MyClass {\nprivate(set) lazy var imageView: UIImageView = {\n    return UIImageView(frame: .zero).then {\n        $0.contentMode = .ScaleAspectFill\n        $0.clipsToBounds = true\n    }\n}()\n\n}\n```\n. @philipengberg, That's odd. Because my project has no problem at all. Even if I made a new project. Have you tested with a new project?\nI'll try to find a solution as soon as possible.\n. @fnc12, can you guess what the difference between the projects is?\n. @adrfer, That post looks interesting, but I think the code is not related to Then. If you have different opinion, please reopen the issue :smile:\n. Hi @takasek!\nWhy do you need UILabel().then(tempt)? As you mentioned, tempt(label1) could be the solution.\n. @takasek, That's reasonable. I just released a new version 1.0.3 :smile:\n. @sunshinejr, Great work! I just created a new branch: swift-3.0. Could you please re-create a PR? Thanks :smile::+1:\n. @sunshinejr, Thanks!\n. Thanks!\n. @AndrewSB, sorry for delay! It seems like a Swift bug. Adding type annotation to gradientLayer might work :)\n\nclass GradientView {\n   let colors = ...\n   lazy var gradientLayer: CAGradientLayer = CAGradientLayer().then {\n       $0.colors = self.colors // also tried colors\n   }\n}\n\n\n. @AndrewSB, Doesn't it work?\n. @danjiang, how did you configure your Cartfile? Then is compatible with Carthage.\nconsole\n$ cat Cartfile\ngithub \"devxoul/Then\" ~> 1.0\n$ carthage version\n0.17.1\n$ carthage update\n*** Fetching Then\n*** Checking out Then at \"1.0.3\"\n*** xcodebuild output can be found in /var/folders/yk/ms2yrh7s2_g26y4rh4n9mpww0000gn/T/carthage-xcodebuild.cTjuK0.log\n*** Building scheme \"Then-OSX\" in Then.xcodeproj\n*** Building scheme \"Then-tvOS\" in Then.xcodeproj\n*** Building scheme \"Then-iOS\" in Then.xcodeproj\n. Which platform are you building?\n. This is odd. There're shared schemes as you can see here: https://github.com/devxoul/Then/tree/1.0.3/Then.xcodeproj/xcshareddata/xcschemes\nAnd even Carthage build is working on my machine :(\n. If that doesn't work, try\nconsole\n$ rm -rf ~/Library/Caches/org.carthage.CarthageKit/dependencies/Then\nand build again.\n. This is cool. Thanks!\n. Thanks!\n. @zbangsatz It's because do is reserved keyword in Swift 2. In order to use do in Swift 2 project, you should use backtick(`).\nswift\nNSUserDefaults.standardUserDefaults().`do` {\n  $0.synchronize()\n}\n. @txaiwieser Thanks! I changed the target branch to swift-2.3 :smile::+1:\n. Duplicated with #14. Thank you for letting me know that it doesn't work in class scope. I can open a Swift bug report now \ud83d\udc4d\n. @yanjinquan, try:\n$ pod repo update\n$ pod install\nIf it doesn't work, could you please provide me a detailed error message?\n. Sounds great :)\n. @vilapuigvila \n1. If you want to contribute the code, you have to make a pull request.\n2. Why are you asking about EZSwiftExtensions here?\n. Thanks!. In this case you can use do() instead.. You can use do() instead :). In this case you can use do() instead.. @jordanekay thanks for your contribution! Travis doesn't support Xcode 9 yet so I'll merge this later.  Does it make a problem if it is not merged?. @Rdxer you may want to use do if you'd like to just execute something with the closure.\nswift\nview.do {\n  $0.setNeedsLayout()\n}. Use then instead if you'd like to use such like that :-). Duplicate of #14.. What did you mean?. Which error message did you get?. Oh, sorry. I forgot to release a new version after adding watchOS support. I just released 2.1.1 and this will probably work.\nconsole\n$ pod repo update\n$ pod install. Try:\n$ swift package generate-xcodeproj\n. Like this. How about adding tvOS support either?. Is there any reason to use carthage update with --no-use-binaries option?. I removed Then.xcodeproj from the repository to manage the project only with Swift Package Manager. If you'd like to use with --no-use-binaries, can you try 2.1.1 instead?. @JohnTheBastard which error message did you get?. @hebiao6446, which error message did you get?. Hey guys, I made a new release (2.2.1) which supports Xcode 9.1 :tada:. @MortyMerr, which version of Xcode are you using?. Hey guys, I just updated the prebuilt binary of the latest release. Please check it again :). @Igor-Palaguta Which version of Xcode are you using?. @Igor-Palaguta Can you share the swift version?\n$ swift --version. @Igor-Palaguta Hmm, that should work. Can you try again after removing Carthage caches?\n$ rm -rf ~/Library/Caches/org.carthage.CarthageKit\n. I'd prefer to keep this repository as simple as possible. Carthage requires extra work. (maintaining Xcode projects) It seems that Carthage is going to support SPM-only project from Swift 5 so we better wait for it :). @devjia, I updated the prebuilt binary. Could you please try again?\nconsole\n$ carthage update. I suggest you to update Xcode to 9.0.1.. Why do you need to use with() without its result?. You may use do() in that case.. Interesting. Thanks!. Duplicated with #55. I don't think it works for some classes that take parameters.. I'm worried about adding a custom initializer to existing types. I found there is a crash when using a custom NSObject subclass that doesn't implement init().\n```swift\nimport Foundation\nprotocol Then {}\nextension NSObject: Then {}\nextension Then where Self: NSObject {\n  init(block: (Self) -> Void) {\n    self.init()\n    block(self)\n  }\n}\nclass Foo: NSObject {\n  var name: String?\ninit(handler: () -> Void) {\n    super.init()\n  }\n}\n// Fatal error: Use of unimplemented initializer 'init()' for class '__lldb_expr_2.Foo'\nlet foo = Foo {\n  $0.name = \"\"\n}\n```\nThe compiler cannot ensure that we're not using the safe initializer. Do you have an idea?\n. I just released 2.4.0 that supports Swift 4.2. Thanks for waiting!. Thanks again, @murselturk!. You have to use UICollectionView's designated initializer.\nswift\nlet collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout()).then {\n  $0.translatesAutoresizingMaskIntoConstraints = false\n  $0.register(Reusable.flickrCell)\n}\n. Doesn't it work?\nswift\nlazy var tableView = UITableView(frame: .zero, style: .plain).then {\n  $0.backgroundColor = UIColor.white\n  $0.dataSource = self\n  $0.delegate = self\n}. I'd prefer to keep this repository as simple as possible. Carthage requires extra work. (maintaining Xcode projects) It seems that Carthage is going to support SPM-only project from Swift 5 so we better wait for it :). Where does 200 come from?\n. Please add os(tvOS) here too \ud83d\ude06. ",
    "Ashton-W": "Start a thread on the mailing list to see what other people think, and start writing the proposal using the swift evolution template. Best of luck\n. ",
    "jyounus": "If you do create a proposal, it would be better if Swift would do this without having to use the \".then\" part (or maybe it was named something else). \nThe reason for that is because I love to use \"Promises\" for any async operations (take a look at a lib like PromiseKit http://promisekit.org/ ). Promises usually use .then(), so I'm not sure if there would be conflicts when using this lib. \n. ",
    "adrfer": "@devxoul I'd suggest you to take a look at this thread https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151228/005122.html\n@jyounus there's a pull request by @basvankuijck that provides an alternate syntax\n. @devxoul perhaps, after reading the related threads, take a look at @erica's https://gist.github.com/erica/eb32feb22ba99629285a\nSure you guys can put together and submit a great proposal \ud83d\udc4c\n. @devxoul, in fact it's an alternative way to configure properties, thought it'd be useful. Anyways, thanks for taking a look at it. It's appreciated!\n. ",
    "wcatron": "@adrfer Thanks for making everyone aware of each other! @devxoul Done it? Far from it, but please do contribute on the mailing list. @erica's proposal looks nearly complete but I could not find it submitted on the Swift Evolution Repo and has not been edited for a few weeks (Need some collaborators?). We each have slightly different models with different goals. Here is the Then example code in the three different styles:\nMailing List \"Inline Initializer\" Restricted to initializers similar to then. However it acts as an initializer compared to code after (possible advantages). Also avoids $0 and has some ideas for handling self.\nlet label = UILabel {\n    textAlignment = .Center\n    textColor = .blackColor()\n    text = \"Hello, World!\"\n}\n@erica's \"Method Cascading\" More comprehensive \"method cascading\" proposal. Applies to much more than initializers. Introduces \"with\" keyword. self is the label object.\nwith let label = UILabel() {\n    textAlignment = .Center\n    textColor = .blackColor()\n    text = \"Hello, World!\"\n}\nThen Possible syntax proposal, not sure how you were envisioning it but this is similar to how you had it. Maintains self.\nlet label = UILabel() then {\n    label.textAlignment = .Center\n    label.textColor = .blackColor()\n    label.text = \"Hello, World!\"\n}\nSo can we come to an agreement, create a proposal, and submit it for review? Perhaps we can build off of the \"Method Cascading\" and bring in maintaining self and drop the with keyword? Perhaps the with is only required when self is desired?\n. ",
    "NicholasTD07": "Then, or the concept of Inline Initializer, really looked very promising at first glance to me. Because in many projects I set properties of a UI in its lazy initialization.\nHowever, soon I found out that compared to lazy initialization of a var, then is almost useless in most of my use cases because you cannot reference self in a then block but you can do that in lazy initialization blocks.\nFor example, I can reference another instance var in a controller or a view, or assign the controller itself self to be the datasource or the delegate of a UITableView or UICollectionView, when using lazy initialization blocks.\n. ",
    "erica": "Chris Lattner asked that it be submitted as a bug report instead of advancing as a proposal. It was. https://bugs.swift.org/browse/SR-160 https://bugs.swift.org/browse/SR-160\n-- E\n\nOn Jan 4, 2016, at 2:20 AM, Nicholas T. notifications@github.com wrote:\nThen, or the concept of Inline Initializer, really looked very promising at first glance to me. Because in many projects I set properties of a UI in its lazy initialization.\nHowever, soon I found out that compared to lazy initialization of a var, then is almost useless in most use cases because you cannot reference self in a then block but you can do that in lazy initialization blocks.\nFor example, I can reference another instance var in a controller or a view, or assign the controller itself self to be the datasource or the delegate of a UITableView or UICollectionView, when using lazy initialization blocks.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/devxoul/Then/issues/2#issuecomment-168618644.\n. \n",
    "17plus9": "It would be much less a PITA to have something like Kotlin's with() plus IDE support.. ",
    "RuiAAPeres": "@dineshrajas you can use it with your IBOutlets, no new instance is created. Have a look at how then is implemented:\nfunc then(block: Self -> Void) -> Self {\n        block(self)\n        return self\n    }\nWith Outlets you can simply:\nself.myOutlet.then { // do stuff }\n. @devxoul you are doing the following inside the then:\n$0.text = \"I am a label.\"\n $0.textColor = .blackColor()\nI think it makes sense to test for the Color as well, since you are setting it.\n. ",
    "ilyapuchka": "@dineshrajas for outlets it is very nice to use didSet property observer for that purpose. It will be called every time you set the property. First time it will be called by the system when instantiating view from xib/storyboard.\n@IBOutlet weak var button: UIButton! {\n  didSet {\n    //set button attributes\n  }\n}\n. ",
    "AndrewSB": "+1 on @ilyapuchka's solution, that's what I've been doing too. This can probably be closed - I don't think we're going to get anything better than that anytime soon\n. It does! Thanks @devxoul!\n. ",
    "mattijsf": "Okay! Sounds like you already gave it a thought :) \n. ",
    "Pearapps": ":+1: to this PR\n. > There are many kind of methods named with() and operators using =>\nAre the type signatures the same though?\n. ",
    "efremidze": ":+1: \n. Since its assignment, it should have the same precedence as the equal(=) operator which is 90.\n. ",
    "kdrag0n": "Closing as I have submitted a pull request for this.\n. ",
    "phimage": "For cocoapod no need to add targets\nFor xcode we need to test the compilation using the corresponding OS (even if there is no UIKit, Cocoa dependencies)\nOne target = one OS\nAnd carthage use the shared scheme of target to compile for each OS (in separated folder)\nTravis too use scheme, so you or I can edit .travis.yml to compil for each OS target/Scheme\n. Test code for each target is not mandatory except complex codes or issue with 32/64 bits, many projects choose one OS to do unit tests\nOk you look for the more clean way to add other OS. Until know I see only project with multiples targets. If its the directories that bother you (ThenOSX, ThenTVOS) it's possible to remove them or regroup them (the requirements is that files must exist and added to targets, no matter where the files are)\n. I do it\n- share the header .h between the targets\n- Move plist file into the unique folder Support and add in xcode a \"group\"\n- \uadf8\ub7fc remove useless files and folders\n. ",
    "KimDarren": ":+1: to this issue..\nIs there any great solution instead of memorizing the code?\n. Since Xcode 9 and Swift 4, the auto-completion is working well for me.. Not yet too. ",
    "kos9kus": "\"I think Xcode is silly.\" sounds like a pun =) \nAnyway, it's real downside while using this terrific lib.\nCould it have some workarounds or tricks ?\n. ",
    "PabloLerma": "You can create your own code snippet like this:\n\n. ",
    "jedmund": "If people are having the same issue as me, I think the concern is more with writing properties inside of the Then block, not necessarily the syntax of the Then block.\nIn that case, no, I don't think there's anything that can be done, but I'd love to be proven wrong!\n. ",
    "Natai": "@devxoul I created a label with Then, I found that Xcode will hint if the label is a local variable\uff0cbut Xcode will not if the label is a property. What happend...\n. ",
    "jackhub": "still not working if the label is a property\n. ",
    "bobleesj": "Collaboration Needed\nIf you want to use auto-completion, please visit Swift Bug and upvote. Good for both of us. \n. Life is tough.\nOn Tue, Dec 5, 2017 at 3:41 PM, LeeBigRay notifications@github.com wrote:\n\nI tried all of what you say ,but it did not been solved\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://mailtrack.io/trace/link/e95e6eb0ae5d551ed1e2e21bde7a7727b5e09a58?url=https%3A%2F%2Fgithub.com%2Fdevxoul%2FThen%2Fissues%2F14%23issuecomment-349210913&userId=1948697&signature=aeb62a2bfa543c1a,\nor mute the thread\nhttps://mailtrack.io/trace/link/ce8d396ac9f9291f294ed667da3939f8c994efab?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAOM85mxPfuuYNTK4-Qt3rbQqFCjK5lA2ks5s9OWDgaJpZM4HA5GT&userId=1948697&signature=09da59d03f62f3d4\n.\n. \n",
    "acecilia": "Still not autocompleting with the new xCode :(. As @KimDarren said, with xCode 9.1 (9B55) and Swift 4, autocompletion is working at class level for me. Yay!! @devxoul your issue (https://bugs.swift.org/browse/SR-2750) is still open though.\n\n. Not yet\n\nEl 5 dic 2017, a las 18:51, Jeon Suyeol notifications@github.com escribi\u00f3:\n@KimDarren @acecilia, have you tested using then?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @devxoul just did. Seems to be working:\n\n. Further discussion here: https://bugs.swift.org/browse/SR-2750. \n",
    "LeeBigRay": "I tried all of what you say ,but it did not been solved  . ",
    "JiriTrecak": "I mean, there is ton of stuff, but if you want one concrete example:\nswift\nprofilePicture.when(Model.currentUser.isLoggedIn) {\n    $0.image = UIImage(\"avatar\")\n}\n. You are definitely right, but your example uses only one assign, which makes even .then {} useless\nswift\nprofilePicture.when(Model.currentUser.isLoggedIn) {\n    $0.image = UIImage(\"avatar\")\n    $0.backgroundColor = .clearColor\n    $0.layer.cornerRadius = 2.0\n}\nThis is definitely consistent with your idea of the usage, and I am sure others can come with very clever uses of this (personally, I use .then in cells extensively - and this is where I'd like to have option like this). \n. ",
    "honghaoz": "great! thanks :+1: \n. ",
    "michaelmou": "objection\n. ",
    "siong1987": "will close this for now THEN  \ud83d\ude1c\n. ",
    "tuyendv2": "It works now. Thank you!\n. ",
    "DenTelezhkin": "You can't use flatMap for two reasons:\n1. It warns about result not being used\n2. It confuses Swift compiler about return value of a closure, in my project at least it shows compiler error:\nCannot invoke 'flatMap' with an argument list of type '(@noescape (...) throws -> _?)'\nIf i try to workaround flatMap, it still does not work:\nswift\n_ = self.flatMap {\n    $0.doSomething()\n}\nGeneric parameter 'U' could not be inferred\nYou can try this yourself.\nAs for guarding self, as i said, [weak self] is not the only application, here's for example another common one:\nswift\noverride func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {\n        (segue.destinationViewController as? ChooseContenderViewController).then {\n            $0.delegate = self\n// Some more code on ChooseContenderViewController referenced as $0\n        }\n    }\nHere i am completely skipping creating new variable via if let, and casting controller in type-safe way.\n. Ok, no problem, it's up to you to decide framework's future.\nI am closing this PR then, thanks for discussion.\n. ",
    "1amageek": "Value of type 'UIImageView' has no member 'then'\n```\n    private(set) lazy var imageView: UIImageView = {\n        return UIImageView(frame: .zero).then {\n            $0.contentMode = .ScaleAspectFill\n            $0.clipsToBounds = true\n        }\n    }()\n```\n. ",
    "philipengberg": "I can confirm that this no longer works as of Xcode 7.3.1\n. Turns out this destroys everything:\nswift\nextension NSObject : Then {}\nIf you instead do this:\nswift\nextension UIView : Then {}\nit works fine \u00af_(\u30c4)_/\u00af - for views only, obviously.\nIt requires you to add the extension to every topmost type below NSObject, where you want to use then.\n. ",
    "fnc12": "This is very odd. I have three actual projects right now and two of them show me error with my UIView subclasses but one of them compiles ok\n. ",
    "irace": "I opened a Swift bug for this: https://bugs.swift.org/browse/SR-1480\n. ",
    "BasThomas": "Seems this has been fixed: https://github.com/apple/swift/pull/2565\n. ",
    "takasek": "In some case, I want to give then a function, instead of a closure.\nConsider of code to apply special animation to some buttons with a function below:\nfunc applyInteractionAnimationToButton(button: UIButton) {\n    //long and complicated logic...\n    ...\n}\nWith Then 1.0.2 , I have to write:\nlet button = UIButton(frame: ...)\napplyInteractionAnimationToButton(button)\nself.contentView.addSubview(button)\nor\nself.contentView.addSubview(\n    UIButton(frame: ...).then {\n        applyInteractionAnimationToButton($0)\n    }\n)\nBut I want to write:\nself.contentView.addSubview(\n    UIButton(frame: ...).then(applyInteractionAnimationToButton)\n)\nIt is comforting than former codes, isn't it?\n. Beautiful implementation! Thanks a lot.\n. ",
    "sunshinejr": "Sure! \n. Good job! \ud83d\udcaf\n. ",
    "danjiang": "@devxoul, but it is also checkout 1.0.3\ngithub \"devxoul/Then\"\n. iOS. I run following carthage build --platform ios\n. The Carthage Checkouts is checkout from my teammate`s git repo. Maybe there is problem when he add it. I will clean and checkout from https://github.com/devxoul/Then to see if it still have this problem.\n. I clean and update build, everything is fine. I close this issue.\n. ",
    "yanjinquan": "thanks for your help. I have solved this question.\nby update my cocoapods version to 1.1.1,    add \"Xcode build Setting -> Other Linker Flags\" \"$(inherited)\",  and deleted the \"Xcode/DerivedData/Build/Products/Debug-iphonesimulator/xxxxxx.app/Frameworks\" file\n. ",
    "wenzhaot": "30 fixed\n. ",
    "vilapuigvila": "I must apologize, I wanted write in the EZSE forum. You can close this issue.\nRegards.\n. ",
    "iTofu": "Woo, yes, thank you!. @HanksHu \ndid your Xcode give you the hint now?. @HanksHu \nfine and thank you :(. ",
    "jordanekay": "Whenever is fine! Can use my fork till then.. ",
    "codecov-io": "Codecov Report\n\nMerging #48 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster    #48   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           1      1         \n  Lines           9      9         \n=====================================\n  Hits            9      9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Then/Then.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 799071b...7b1bb17. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1c837be). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff           @@\nmaster    #54   +/-\n=======================================\n  Coverage          ?   100%         \n=======================================\n  Files             ?      1         \n  Lines             ?     17         \n  Branches          ?      0         \n=======================================\n  Hits              ?     17         \n  Misses            ?      0         \n  Partials          ?      0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1c837be...a7793c8. Read the comment docs.\n. # Codecov Report\nMerging #57 into master will not change coverage.\nThe diff coverage is 100%.\n\n\n```diff\n@@          Coverage Diff          @@\nmaster    #57   +/-\n=====================================\n  Coverage     100%   100%         \n=====================================\n  Files           1      1         \n  Lines           9      9         \n=====================================\n  Hits            9      9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Sources/Then/Then.swift | 100% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6c7dd3a...86d6695. Read the comment docs.\n. \n",
    "zuccoi": "then's primary use case is to customize newly created instance. So, then returns the instance of type Self.\nOn the other hand, do is not restricted to Self. do can return nothing, and instance with type of T (arbitrary type).\nIf you allow do to return T, you can do something like below\nlet firstDateOfNextMonth: Date = Calendar(identifier: .gregorian).do {\n  var date = $0.date(bySetting: .day, value: 1, of: Date())!\n  date = $0.date(byAdding: .month, value: 1, to: date)!\n  return date\n}. ",
    "sheng168": "adding this to watchOS project using cocoapods fails. Analyzing dependencies\n[!] The platform of the target BabyTime WatchKit Extension (watchOS 3.0) is not compatible with Then (2.1.0), which does not support watchos.\n. thanks. ",
    "wanbok": "@devxoul Genius! tvOS is included! :). Oops! It's done. :). ",
    "renatorodrigues": "I prefer to use --no-use-binaries to avoid binaries built with previous versions of Swift, which sometimes are incompatible.  Also, it is useful when you need to debug a framework.. ",
    "JohnTheBastard": "I'm having the same issue.. ",
    "hebiao6446": "\ub098\ub3c4\uc774 \ubb38\uc81c\uc5d0 \uc9c1\uba74 \ud588\ub2e4 .\n\uac10\uc0ac\ud569\ub098\ub2e4.. ",
    "mr-v": "\nIs there any reason to use carthage update with --no-use-binaries option?\n\nUsing precompiled version is problematic even with Xcode updates. Xcode 9.1 uses Swift 4.0.2 and importing 4.0 binary is impossible.\n\nModule compiled with Swift 4.0 cannot be imported in Swift 4.0.2. \n",
    "tdkn": "I'm getting same issue in iOS project.\nIs there a way to solve without downgrading? :sob: @devxoul \n$ carthage update Then --platform 'iOS'\n*** Fetching Then\n*** Downloading Then.framework binary at \"2.2.0\"\n*** Skipped installing Then.framework binary due to the error:\n        \"Incompatible Swift version - framework was built with 4.0 (swiftlang-900.0.65.2 clang-900.0.37) and the local version is 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38).\"\n*** Checking out Then at \"2.2.0\"\n*** xcodebuild output can be found in /var/folders/h1/s2z3h3c51_g8bcm5z8z8bjjc0000gn/T/carthage-xcodebuild.Dy77Zu.log\nOr should I use SwiftPM?. ",
    "ghost": "Any updates?. @devxoul 9.2. ",
    "m-tatsuto": "I'm getting same issue in iOS project.\nXcode  9.2\nApple Swift version 4.0.3\ngithub \"devxoul/Then\"\n% carthage update --platform iOS Then\n...\n*** Downloading Then.framework binary at \"2.3.0\"\n*** Skipped installing Then.framework binary due to the error:\n    \"Incompatible Swift version - framework was built with 4.0.2 (swiftlang-900.0.69.2 clang-900.0.38) and the local version is 4.0.3 (swiftlang-900.0.74.1 clang-900.0.39.2).\"\n. ",
    "intoxicated": "To support future Xcode updates, I think you need to add back proj file for carthage in order to build with --no-use-binaries. ",
    "JJMoon": "I installed Channel.io which includes Then framework with Carthage. \nIt makes many issues, but finally I got an issue which says.\nfatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: -extract armv7 specified but fat file: /Users/moin/Library/Developer/Xcode/DerivedData/moinRemit-etdanftfmfxyjmbasmgxhsnyearp/Build/Intermediates.noindex/ArchiveIntermediates/appname/InstallationBuildProductsLocation/Applications//appRaemri.app/Frameworks/Then.framework/Then does not contain that architecture\nAnd I added 'run script' in http://ikennd.ac/blog/2015/02/stripping-unwanted-architectures-from-dynamic-libraries-in-xcode/.\nHow can I solve this problem?\n. I installed via Pod, which didn't make this error. \nUsing Carthage is tricky. . ",
    "Igor-Palaguta": "The same issue was on 2.3.0\n```\n Checking out Then at \"2.3.0\"\n xcodebuild output can be found in /var/folders/4k/dzpnw8352jn_fl5hcc76pjs8k9qytq/T/carthage-xcodebuild.diNH6z.log\n*** Skipped building Then due to the error:\nDependency \"Then\" has no shared framework schemes for any of the platforms: iOS\nIf you believe this to be an error, please file an issue with the maintainers at https://github.com/devxoul/Then/issues/new\n```\nJust works version 2.1.0 with xcodeproj. Version 9.3 (9E145). Apple Swift version 4.1 (swiftlang-902.0.48 clang-902.0.37.1)\nTarget: x86_64-apple-darwin17.3.0. ",
    "sisomollov": "@devxoul this error occur when --no-use-binaries is used. Carthage needs project file to work.. ",
    "valeriyvan": "carthage update Then --platform iOS\n...\n Skipped installing Then.framework binary due to the error:\n    \"Incompatible Swift version - framework was built with 4.1 (swiftlang-902.0.48 clang-902.0.37.1) and the local version is 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2).\"\n Skipped building Then due to the error:\nDependency \"Then\" has no shared framework schemes for any of the platforms: iOS\nIf you believe this to be an error, please file an issue with the maintainers at https://github.com/devxoul/Then/issues/new\ncarthage update Then --platform iOS --no-use-binaries\n...\n*** Skipped building Then due to the error:\nDependency \"Then\" has no shared framework schemes for any of the platforms: iOS\nIf you believe this to be an error, please file an issue with the maintainers at https://github.com/devxoul/Then/issues/new\nThat's for both 2.1.0 and 2.3.0.\nswift --version\nApple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)\nTarget: x86_64-apple-darwin17.6.0\nXcode Version 9.4.1 (9F2000). ",
    "SeRG1k17": "@devxoul Installation via Carthage still no working.. @devxoul Hi, sorry to bother you. Any updates about Carthage support?. ",
    "devjia": "Thanks!\nI solved this issue by manually modify the info.plist file of Then.framework.\nAnd, the new prebuilt binary looks no problem. \nBut,\ncarthage update will broken and throws Incompatible Swift version - framework was built with 4.0 (swiftlang-900.0.65.2 clang-900.0.37) and the local version is 4.0 (swiftlang-900.0.65 clang-900.0.37).\nI think I should update Xcode to version 9.0.1 to solve this.\nIs there a way not use prebuilt binary ? \nDo you have any suggestion?\n. Thanks!\n. ",
    "domingguss": "when I need to set properties asynchronously -  in a block, to update the UI\nI know it\u2019s a misuse of \u2018inout\u2019, but since XCode9 is stricter I needed this... ",
    "carlos-chaguendo": "That's true, but for classes that don't need parameters it's very useful, keeping in mind that many times we can omit those parameters and set them in the code block\nlet label = UILabel(frame: CGRect(x: 0, y: 0, width: 100, height: 20)).then {\n        $0.textAlignment = .center\n        $0.textColor = .black\n        $0.text = \"Hello, World!\"\n    }\nequals to\nlet label = UILabel {\n        $0.frame = CGRect(x: 0, y: 0, width: 100, height: 20)\n        $0.textAlignment = .center\n        $0.textColor = .black\n        $0.text = \"Hello, World!\"\n    }\nI think the second option is easier to understand.. \nhttps://docs.swift.org/swift-book/LanguageGuide/Initialization.html\n\nSubclasses do not inherit their superclass initializers by default. However, superclass initializers are   automatically inherited if certain conditions are met. \nRule 1 If your subclass doesn\u2019t define any designated initializers, it automatically inherits all of its superclass designated initializers.\nRule 2 If your subclass provides an implementation of all of its superclass designated initializers\u2014either by inheriting them as per rule 1, or by providing a custom implementation as part of its definition\u2014then it automatically inherits all of the superclass convenience initializers.\nThese rules apply even if your subclass adds further convenience initializers.\n\nyour error is caused by creating an initializer \n```\nclass Foo: NSObject {\ninit(handler: () -> Void) {\n    super.init()\n}\n\n}\n// the initializer init()  was not inherited  Rule1\nFoo.init()\n```\nThat said, it can be assumed that the correct implementation is:\n```\nclass Foo: NSObject {\n    var name: String?\noverride init() {\n    super.init()\n}\n\ninit(handler: () -> Void) {\n    super.init()\n}\n\n}\n```\nIn my opinion, this type of case should be specified in the documentation of Then. ",
    "TaeJoongYoon": "Thank you!\nI did it like your code... but it was not working...\nIt's nice now, I don't know why \ud83d\ude02\ud83d\ude02 perhaps it's my fault.. ",
    "HanksHu": "\ud83d\ude02\uff0csorry\uff0cIt's my problem\u3002But, I found another problem\u3002Code hinting\u3002\nXcode Version 10.1 (10B61)\u3002\n\n\n. @iTofu        sorry. \nuse let, give me  hints.\nswift\nlet orderNumLabel = UILabel().then {\n}\nbut\uff0cuselazy var, Don't  give me  hints.\n``` swift\n lazy var orderNumLabel = UILabel().then {\n        $0.textColor = UIColor.init(hex: \"b7b7b7\")\n        $0.numberOfLines = 1\n}\n\n```\n. ",
    "WannaYoung": "@HanksHu \nme too\nuse let, give me hints. uselazy var, Don't give me hints.. ",
    "sauravexodus": "Cool :). "
}